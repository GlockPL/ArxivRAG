{"title": "IICPilot: An Intelligent Integrated Circuit Backend Design Framework Using Open EDA", "authors": ["Zesong Jiang", "Qing Zhang", "Cheng Liu", "Huawei Li", "Xiaowei Li"], "abstract": "Abstract-Open-source EDA tools are rapidly advancing, fostering collaboration, innovation, and knowledge sharing within the EDA community. However, the growing complexity of these tools, characterized by numerous design parameters and heuristics, poses a significant barrier to their widespread adoption. This complexity is particularly pronounced in integrated circuit (IC) backend designs, which place substantial demands on engineers' expertise in EDA tools. To tackle this challenge, we introduce IICPilot, an intelligent IC backend design system based on LLM technology. IICPilot automates various backend design procedures, including script generation, EDA tool invocation, design space exploration of EDA parameters, container-based computing resource allocation, and exception management. By automating these tasks, IICPilot significantly lowers the barrier to entry for open-source EDA tools. Specifically, IICPilot utilizes LangChain's multi-agent framework to efficiently handle distinct design tasks, enabling flexible enhancements independently. Moreover, IICPilot separates the backend design workflow from specific open-source EDA tools through a unified EDA calling interface. This approach allows seamless integration with different open-source EDA tools like OpenROAD and iEDA, streamlining the backend design and optimization across the EDA tools.\nIndex Terms-LLM, Multi-Agent System, Integrated Circuit, IC Backend Design, Open EDA, Design Space Exploration.", "sections": [{"title": "I. INTRODUCTION", "content": "Electronic Design Automation (EDA) occupies an important position in chip design and affects the PPA (performance, power, and area) of the resulting designs substantially [1]. As a critical interface between the chip design and fabrication, it converts the gate-level netlist generated in front-end to manufacturable GDSII data. However, with the continuous increase in chip design complexity and the accelerated pace of technological innovation, the backend design of integrated circuits faces multiple-folded challenges. On one hand, the backend design of chips involves a set of complex design procedures that require the use of various EDA software and design tools, each with complex programming interfaces and data formats, making automated chip backend design highly challenging. On the other hand, advanced backend design tools typically contain a large number of adjustable design parameters, and exploring the design space across a large number of options remains a pressing issue to be resolved.\nIn addition, unlike commercial EDA tools, open-source EDA tools such as iEDA [2] and OpenROAD [3] are usually less robust due to the limited manpower and financial support, and unfamiliar to most of the designers, which further discourages the use of the open EDA tools.\nHence, we argue that automating the use of Open EDA tools can substantially mitigate the barrier of using these EDA tools and encourage more feedback for continuous improvement. Although there are already many scripts developed to invoke these EDA tools conveniently, it remains insufficient for automating the backend design as it still require users to tune the configurations and parameters to suit the different designs and constraints. Motivated by the successful adoption of large language models (LLMs) on more and more complex tasks such as robotics and autonomous drving, we also attempt to leverage the powerful reasoning and natural language understanding capabilities of LLM to fully automate the use of Open EDA tools and make it accessible to more designers without backend design expertise.\nIn this context, we propose, IICPilot, an LLM-based automatic IC backend design framework using open EDA. Essentially, it is a multi-agent system based on LLMs and has each agent specialized for a relatively independent task such as floorplan and routing such that each agent can focus on a relatively short context and be updated without affecting the other agents. Particularly, it has a user proxy agent to understand the user requirements through multiple-round interaction using natural language. Then, it has a control agent to leverage chain-of-thoughts and automatically produce a task sequence based on user requirements. Hence, the framework can be adapted to various backend designs. For instance, it can conduct design space exploration of the entire backend design flow or a specific backend design process. Basically, IICPilot can autonomously generate scripts, execute EDA tasks, and optimize chip PPA through design space exploration tools and mitigate the barrier of using open EDA tools. Additionally, it can allocate appropriate computing resources through containers to sustain various complex EDA tasks which may involve a set of time-consuming yet dependent EDA procedures. This not only effectively break the barrier of using open EDAs but also scales the complex backend design tasks over a distributed computing system for higher performance.\nThe major contributions of this work are as follows:"}, {"title": "II. BACKGROUND & RELATED WORK", "content": "A. LLM-based Design Automation\nLLMs such as GPT-3.5 and GPT-4 have achieved significant milestones in the field of natural language processing, offering robust support for research and applications with their exceptional performance and extensive applications. Multi-agent systems, comprised of collaborative agents, possess the ability to independently perceive, make decisions, and interact with each other. Following the advent of cutting-edge LLMs, the utilization of intelligent agents has been propelled into a new era of prominence and significance.\nRecently, multi-agent systems based on LLMs have been applied across various fields, including software design [4]\u2013[7], robotics [8], [9], social simulation [10], and game simulation [11], significantly enhancing project efficiency and simulation outcomes. Concurrently, there is also significant research on LLMs in the context of IC backend development. HDL debugger [12] uses large models and RAG technology to debug hardware description languages. VeriGen [13] has improved by scaling up the model size and expanding the hardware dataset. RTLLM [14] and VerilogEval [15] have introduced larger-scale open benchmarks for designing RTL generation based on natural language, evaluating prompt and fine-tuned models on these benchmarks. Chip-Chat [16] aims to assess the collaborative effectiveness of GPT-4 with hardware designers in generating processors and completing tape-outs. ChatEDA [17] automates EDA tools using LLMs. RTL-Coder [18], CodeGen [19], VeriAssist [20], and AutoChip [21] achieve RTL code generation through LLMs. More studies on LLMs for EDA can be referenced in this survey [22].\nDespite the abundance of related research [1], the integration of LLMs with multi-agent systems for intelligent work in IC backend design remains unexplored. By integrating LLMs and multi-agent systems, we can create a more intelligent and efficient dedicated IC backend system that can deeply analyze user needs and automate complex tasks, thus alleviating the burden on engineers and enhancing design efficiency and quality.\nB. Design Space Exploration of CAD Tools\nIn IC backend design, Design Space Exploration (DSE) systematically evaluates various design options and parameter combinations to determine the optimal design that meets specific performance, power consumption, area, and cost requirements.\nThe application of DSE offers significant advantages: it enables designers to quickly identify the optimal solution within a complex design space, eliminating the need for blind trials and lengthy iterations characteristic of traditional design processes. Additionally, DSE provides a range of alternative design options, allowing designers to select the most suitable design based on their specific needs.\nWith the ongoing evolution of artificial intelligence and machine learning technologies, many efforts [23]-[28] have significantly boosted chip performance by integrating these advanced techniques into DSE. Currently, DSE plays a crucial role in IC backend design, driving the continuous advancement of the integrated circuit design field. This article aims to leverage open-source tools to complete the DSE and achieve the best combination of backend parameters.\nC. Kubernetes and Containers\nKubernetes (K8s) is a powerful open-source container orchestration system designed for automating container deployment, scaling, and management. As a lightweight virtualization technology, containers encapsulate applications and their dependencies into portable units, enabling seamless migration and operation across different environments.\nIn our research, the automation capabilities of K8s are crucial. It automatically handles container deployment, scaling, scheduling, and fault recovery, ensuring optimal task performance within the cluster. Futhermore, the intelligent agent in our system can allocates and adjusts resources based on the specific needs of IC backend tasks through K8s, maximizing design throughput and efficiency. These features make K8s an ideal choice for managing IC backend operations."}, {"title": "III. IICPILOT FRAMEWORK", "content": "In this study, we introduce IICPilot, a multi-agent driven end-to-end EDA optimization framework. The aim of this framework is to implementing intelligent solutions for EDA tasks. IICPilot can automate IC backend tasks through collaborative efforts of multiple agents. Unlike the previous LLM used in EDA tasks, this framework not only addresses script generation for running EDA tasks, but also enhances chip performance using DSE tools and considers resource savings through containerization. It proposes solutions for runtime failures in practical scenarios and importantly, supports compatibility with two open-source platforms, demonstrating practical utility. Additionally, the framework can real-time monitor agent operations, obtain status reports, and access historical records of executions.\nA. LLM-based Agent Construction\nAs illustrated in Figure 1,for each agent within the IICPilot system, we have meticulously designed their architecture, selected and developed various tools, and ensured that the agents can effectively utilize these tools.\nFirstly, the user agent acts as the interface between the entire framework and the user, responsible for translating user requirements into feasible IC backend tasks. It can also gather information from users when deemed insufficient by other agents. The control agent, on the other hand, transforms user requirements into a task list and assigning tasks to other agents. EDA agent generates or modifies the EDA task scripts according to the task list and executes different backend design processes. To enhance its generation capability for various EDA tasks, we have also equipped the EDA agent with the ability to use tools and understand EDA documentation.\nFurthermore, we observed that the agent's processing and understanding of large volumes of information can sometimes be confused. To address this, we have classified the information in EDA tasks into essential and optional categories, aiming for the agent to extract effective information before completing the task. Essential information refers to the data necessary to complete the EDA task, while optional information encompasses additional optimization details provided by the user to improve task outcomes. In this system, essential information includes RTL design and the specific EDA stage, the selection of technology node, and constraint files. Optional information includes clock period, core area utilization, placement density, etc. Essential information generally has well-defined paths and details, and we only need to articulate the requirements. However, optional information involves multiple dimensions and requires users to provide file paths, filenames, and specific modification values to facilitate task completion.\nThe DSE agent conducts design space exploration to optimize IC backend configuration parameters, enhancing chip performance. We define the role and objectives for the DSE agent and provide it with tools for modifying JSON-formatted forms, we have developed the iEDA agent and OpenROAD such that,\n$Y_m (C) := max\\{\\sum_{i=1}^{m} \\sum_{j=1}^{K_i} \\frac{1}{c_{ij}} s_{ij}\\}$\nsubject to,\n$\\sum_{i=1}^{m} \\sum_{j=1}^{K_i} c_{ij} s_{ij}  < C$\n$\\sum_{j \\in K_i} s_{ij} = 1, i = 1,..., m $\n$s_{ij} \\in \\{0,1\\}, i=1,...,m, j \\in K_i$\nwhere $s_{ij}$ denotes whether we select configuration j for subtasks i or not, and $K_i$ is the number of configurations used in the subtask. Similarly, $c_{ij}$ represents the expenditure incurred for executing stage i with configuration j, and we get this from the price list of the designated cloud service provider. To find the optimal configuration, we implemented a pseudopolynomial solution using dynamic programming based on the method from Dudzinski and Walukiewicz [33].\n$Y_m (C) = max\\{Y_{m-1}(C-t_{m1}) + 1/c_{m1}  if 0 \\leq C - t_{m1},\\\nY_{m-1}(C-t_{m2}) + 1/c_{m2}  if 0 \\leq C - t_{m2},\\\n:\\\nY_{m-1}(C-t_{mn_i}) + 1/c_{mn_i} if 0 \\leq C - t_{mn_i}\\}$\nUsing this strategy, we can determine the optimal CPU configuration selection for multiple EDA tasks with time constraints.\nConsidering practical application scenarios, we have also designed the monitor agent and memory agent. The monitor agent monitors the real-time operation of agents, providing timely feedback to users in case of issues. Additionally, users can request status reports from specific agents to understand their operational status. The memory agent maintains system operation records, allowing users to access historical data.\nB. The Workflow of IICPilot\nAs illustrated in Figure 3, we provide two descriptive examples to elaborate on the system's workflow. In the context of Figure 3(a), our multi-agent system initially captures user requirements through the User proxy agent and forwards them"}, {"title": "IV. EXPERIMENT", "content": "In this section, we evaluate the IICPilot framework, examining its capabilities ranging from automated execution of EDA tasks to optimizing chip performance and reducing machine resource costs. Futhermore, we delve into the key techniques employed in IICPilot and substantiate their benefits through thorough experimental validation.\nA. Experiment Setup\nTo evaluate the effectiveness of the IICPilot framework, we conducted a series of experiments using open-source EDA tools. Prior to initiating the experimental phase, we selected iEDA and OpenROAD as our platforms and utilized Autotuner and Hypermapper for design space exploration. Additionally, we configured an appropriate K8s environment and deployed four nodes on Alibaba Cloud. We also gathered 400 data points from open-source websites such as Opencores [34] to complete the container-related experiments.\nB. Evaluation on EDA Tasks\nIn the first set of experiments, we aim to evaluate the efficacy of multi-agent systems in executing EDA tasks. Due to the length of the article, we will only demonstrate the"}, {"title": "V. CONCLUSION", "content": "This paper realizes a multi-agent system dedicated to IC backend to complete various tasks in IC backend, which can assist engineers' work and effectively save their energy. The efficiency of this system has been effectively verified based on the open-source tools iEDA and OpenROAD. It is believed that through continuous optimization, this system will play a greater role in IC backend work in the future."}]}