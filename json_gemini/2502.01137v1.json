{"title": "Self-Organizing Interaction Spaces: A Framework for Engineering Pervasive Applications in Mobile and Distributed Environments", "authors": ["Shubham Malhotra"], "abstract": "Abstract-The rapid adoption of pervasive and mobile com- puting has led to an unprecedented rate of data production and consumption by mobile applications at the network edge. These applications often require interactions such as data exchange, behavior coordination, and collaboration, which are typically mediated by cloud servers. While cloud computing has been effective for distributed systems, challenges like latency, cost, and intermittent connectivity persist. With the advent of 5G technology, features like location-awareness and device-to-device (D2D) communication enable a more distributed and adaptive architecture. This paper introduces Self-Organizing Interaction Spaces (SOIS), a novel framework for engineering pervasive applications. SOIS leverages the dynamic and heterogeneous nature of mobile nodes, allowing them to form adaptive organi- zational structures based on their individual and social contexts. The framework provides two key abstractions for modeling and programming pervasive applications using an organizational mindset and mechanisms for adapting dynamic organizational structures. Case examples and performance evaluations of a simulated mobile crowd-sensing application demonstrate the feasibility and benefits of SOIS. Results highlight its potential to enhance efficiency and reduce reliance on traditional cloud models, paving the way for innovative solutions in mobile and distributed environments.", "sections": [{"title": "I. INTRODUCTION", "content": "In the last decade, the world has witnessed the massive diffusion of pervasive and mobile devices. Some are designed for specific functions and have limited resources (e.g., sensors and gadgets), while others are equipped with more powerful CPUs, memory, and storage (e.g., modern smartphones and tablets). Applications hosted by these devices are increasing in Number and complexity.\nToday, pervasive applications are often organized around 1) a client application running on users' devices and 2) a back- end application hosted on cloud servers. Accordingly, data produced by these applications at the edge of the network are sent to the cloud, processed there, and sent back to the edge. Even if this model is appropriate in many situations, there are existing and emerging use cases that cannot afford the latency introduced by communicating with distant servers, cannot assume a stable and reliable connection with them, or users are not willing to accept the costs of remote communication, especially if part of the data can be processed and consumed locally. For such cases, opportunistic D2D interactions could alleviate the dependency on remote servers, increasing the availability of certain features and enabling minimum delay communication.\nThe literature covering situated device-to-device interaction in pervasive computing is vast and ranges from distributed multi-agent frameworks to peer-to-peer protocols. This body of knowledge includes specific solutions for the exchange of user- generated content and the coordination of autonomous agents' activities. However, existing proposals targeting opportunistic interactions either tackle a narrow set of goals (e.g., content lookup and sharing) or require specific platforms to work (e.g., JADE platform for multi-agents). A holistic approach for modeling and programming pervasive applications that explore the potential of opportunistic D2D interactions as a complement to the client-server model is still missing.\nContribution of the work:\nAs a contribution, the paper introduces the concept of a self-organizing interaction spaces (SOIS)\nFirstly, the rationale behind how certain existing and emerg- ing application features, enabled by contemporary and evolv- ing technologies for pervasive devices and wireless commu- nication, can be addressed by assigning distinct responsibil- ities to application nodes. Additionally, the use of simple organizational abstractions for modeling and programming such applications is proposed. Finally, self-organization mech- anisms are introduced to maintain and adapt the pervasive ecosystem structure based on the individual and social contexts of devices."}, {"title": "II. BACKGROUND", "content": ""}, {"title": "A. Opportunistic Wireless Communication", "content": "In the past, connectivity between pervasive devices was mostly restricted to areas with private or public Wi-Fi coverage. With the developments in device-to-device (D2D) communication technology, the situations in which devices opportunistically interact have expanded. For Example, in addition to Wi- Fi Direct and Bluetooth Low Energy (BLE) technologies employed by Mobile Ad Hoc Networks (MANETs), the fifth generation mobile networks (5G) standards include the support for D2D communication [1]."}, {"title": "B. Pervasive Applications", "content": "The market of applications crafted for pervasive and mobile devices continues to increase as more people have access to this technology. In specific, applications can be hosted by devices with higher or lower degrees of mobility and computational power, such as smartphones, tablets, gauges, and miniaturized computer platforms such as Raspberry PI (which now supports the Android platform for the Internet of Things \u00b9). Moreover, new types of specialized devices like Bluetooth beacons compose the rich ecosystem in which pervasive applications can run. Despite mobile computing and devices being the preeminent type of pervasive computing, as well as the target platform for the majority of applications, The term *pervasive* was adopted as a broader qualitative descriptor (instead of *mobile*) to avoid excluding pervasive devices with limited mobility that are still potential candidates for composing the diverse scenarios targeted by this proposal."}, {"title": "III. OVERVIEW", "content": ""}, {"title": "A. Opportunistic D2D Interactions", "content": "For opportunistic D2D interactions, the situated engagement of pervasive devices is defined by their ability to com- municate through wireless networks, which encompass both infrastructure-based networks (e.g., Wi-Fi) and ad hoc net- works (e.g., Wi-Fi Direct and Bluetooth).\nIn its simplest form, a D2D interaction involves exchanging application data (e.g., content generated by users in a mobile P2P application). However, some features are characterized by their autonomy.\n(e.g., to autonomously decide when to sense the physical environment in specific areas of a city), their intensity (e.g., process and data-intensive tasks), or by their sensitivity to delay (e.g., players in a mobile multiplayer game).\nMuch of today's pervasive applications are structured around interactions between remote servers (e.g., through RESTful endpoints) and users (e.g., through Android Activ- ities). Opportunistic D2D interactions are rare despite their potential to enable new features and improve non-functional attributes like availability, cost, and communication perfor- mance. Many possible reasons for this exist, including the complexity of existing solutions and scalability problems.\nDifferent research areas have addressed opportunistic inter- actions. Distributed artificial intelligence has made substantial contributions by means of agent abstraction and the decen- tralized mechanisms that govern their collective behavior and adaptation. Other research communities also dedicated efforts in the same direction. Nonetheless, many of the proposals tackle specific types of interaction and do not provide a more general model that could be tailored for different applications.\nIn contrast, in this work, a top-down approach is adopted, where modeling and programming abstractions are introduced first. Building on these foundational elements, mechanisms, and protocols are proposed, tailored to specific scenarios of pervasive computing characterized by varying levels of volatility, scale, and resource constraints."}, {"title": "B. Separation of Responsibilities", "content": "With technological advancements, a class of pervasive devices has become able to perform different kinds of computations, communicate by other means, and perceive the physical world through multiple sensors. As a consequence, the type of interaction among pervasive devices is less frequently defined by their model and specific functionality. Instead, it may depend on dynamic factors like their current resource levels and mobility.\nTo address this new scenario, the original focus of pervasive computing research, which targeted compositions and inter- actions among devices with specific functionality, must now consider the ambiguity in the run time and context-dependent decision of which devices should become responsible for what. Also, applying well-known software engineering principles like separation of concerns and modularization to the distinct functionalities a device may become responsible for should improve the quality of the pervasive application design and implementation, including the autonomous and contextual responsibility allocation."}, {"title": "C. Role-orientation", "content": "The concept of roles has been applied in very different areas of information systems, including object-oriented programming, distributed multi-agents, role-based access control, and others. Despite its widespread adoption, there is no common defini- tion for the concept of roles, but actually distinct meanings depending on the context they are employed. Nonetheless, a role is generally associated with rights, responsibilities, and capabilities.\nThere are many proposals in which abstraction is an impor- tant aspect or even a key part of the solution. However, little attention has been paid to using role abstraction in the context of pervasive computing. This work aims to fill this gap."}, {"title": "D. Self-organization and Self-adaptation", "content": "Whereas self-organization has been proposed and used for building decentralized, scalable, and adaptable multi-agent systems, self-adaptation is yet to show its feasibility when subject to volatility and large scale of adaptive entities (e.g., distributed components, agents, etc.) and no centralized con- trol.\nThe gap between bottom-up self-organization and top- down self-adaptation has been a focus of research. Such a combination may be deemed beneficial in the context of pervasive computing. On the one hand, the volatility and re-"}, {"title": "IV. OPPORTUNISTIC ORGANIZATIONS", "content": ""}, {"title": "A. Organization Model", "content": "To help conceptualize and realize dynamic pervasive ecosys- tems, the concept of a role is proposed as the key abstrac- tion for specifying, designing, and programming opportunistic organizations. Rather than introducing a new organizational model based on role abstraction, this approach builds upon existing works in the literature, specifically extending the definitions of those models."}, {"title": "1) The Roles of a Server:", "content": "In today's client-server model, client features are modeled and programmed as a monolithic application.\nFor applications whose nodes are expected to interact, collaborate, and play more roles than just a client from a back-end server, the distinct functionalities of each role form a concern; they must be designed and programmed accordingly."}, {"title": "B. Groups", "content": "The application organization so far represented by the roles that cits nodes can play- may be further characterized by its divisions, here named as groups.\nAt its highest level, a group boundary is limited by the network partition in which application nodes can interact. Nonetheless, these nodes, or a subset of them, may exhibit common properties or states of interest to the application. For instance, nodes may be grouped according to a functional criteria (e.g., a group of nodes able to fetch data from a specific type of sensor), a non-functional criteria (e.g., all nodes within a particular geographical area), or a mix of both (e.g., all nodes able to fetch data from a certain type of sensor within a specific geographical location).\nTo its members, a group defines a social context in which they (a) may or (b) must play certain roles. As the first case models a more general case of the later case, A relaxed mem- bership causality is adopted, meaning that group membership defines only the context in which members *may* assume one or more roles unless otherwise restricted by the group specification. These cases are detailed as follows:\n\u2022 Strict: an m-m specification (m instances of a role in a group of m nodes) defines a strict membership, i.e., a rththatltall members must playplaytimextbfRelaxed: a k-"}, {"title": "C. Group-Role Specification", "content": "Depending on the functionality to be provided by an appli- cation role, there may be some objective criteria to guide the decision of which nodes, in a given context, are suitable or represent the best candidates to play that role. To this end, The specification of a *role fitness* is proposed as a function composed of:\n\u2022 Restrictive criteria: consists of boolean variables whose satisfaction is a required condition for a role to be played by an application node.\n\u2022 Comparative criteria: consists of the positive real scale indicating the fitness of a node in playing a role.\nRestrictive criteria are useful for filtering out nodes whose static (e.g., a hardware component) or dynamic (e.g., the battery level) capabilities are not compatible with the func- tionalities to be provided by a role. In contrast, comparative criteria distinguish capable nodes in terms of their fitness to play a role. Thus, this type of criteria must be taken into account when solving the k-out-of-m role allocation problem. Next, a list of static and dynamic aspects of pervasive devices are presented as potential restrictive or comparative criteria:\n\u2022 Static criteria\nHardware capabilities: refers to the presence of a given hardware component/module. E.g., camera, GPS, thermometer, accelerometer, gyroscope, etc.\n\u2022 Dynamic criteria\nPhysical world: refers to the physical world states a node must operate in. E.g., its current battery level, available memory, geolocation coordinates, accelera- tion, speed, temperature, etc.\nApplication domain: refers to the application states a node must be to belong to a group. For Example, if you are currently a member of another group (or non- member), you can join a chat or game session, etc.\nA hierarchical syntax is proposed and implemented using eXtensible Markup Language (XML) to enable a flexible, intuitive, and unified placeholder for both group and role specifications. XML's standardized and widely recognized syntax facilitates the hierarchical representation of groups and roles and the definition of their attributes."}, {"title": "1) Collaborative Music Streaming", "content": "for this application, A group is envisioned with a single streamer role position, as illustrated in lines 1 and 3 of Listing ??. As the functionalities of this role require both Internet (to stream music from remote servers) and Bluetooth (to stream music to the stereo), two restrictive criteria have been added for both Internet and Bluetooth capabilities (lines 4 and 5). Finally, as the activity of streaming data in both directions is battery-consuming, an additional criterion (line 6) has two purposes: a restrictive one (only devices with more than 20% battery) and a comparative one (the best candidates are those with more battery level)."}, {"title": "2) Public Transport Monitoring", "content": "An MCS application aims to monitor the real-time geolo- cation of public buses to notify waiting passengers about their whereabouts \u2013 and to register and later report unusual acceleration and deceleration events that may affect the user experience in this service. To address this scenario, a bus- monitoring group (lines 1 in Listing 2) is defined with three roles: a geolocator (line 5), an accelerometer (line 10), and an aggregator (14). In contrast with the previous Example, a group-leExampleterion (line 3) hExample added, which means all roles inherit a minimum battery level of 15% as a restrictive criterion. This criterion is overwritten by the geolocator role (line 6), as the GPS sensor consumes significantly more battery. Also, each sensing role has corresponding restrictive criteria for the sensor it requires (lines 7 and 11). Finally, as the aggregator is responsible for receiving data from the other nodes and sending a preprocessed version to the backend server, the Internet has been added as a restrictive criterion.\nAnother novelty in Listing 2 is the parametrized cardinality (k1 and k2). These fine-tuning parameters were intentionally left unspecified; the actual number of insNumberNumberach sensing roles may vary depending on the context in which they operate; the higher the overall accuracy, the more the samples need to be aggregated. Hence, at runtime, the aggregator could provide feedback with respect to k1 and k2 based on the data it receives from the instances of each sensing role."}, {"title": "VI. EVALUATION AND DISCUSSION", "content": "The simulation experiments aimed to demonstrate the ap- proach's benefits and measure the overhead imposed by the"}, {"title": "VII. RELATED WORK", "content": ""}, {"title": "A. Role and Group Abstractions", "content": "The A-3 model [8] defined an architectural style consisting of groups that can be populated by a supervisor and its followers and composed with other groups. While this work shares many of the motivations and has similarities with A-3, the model does not rely on the rigid supervisor-follower structure, nor do group compositions depend on shared members.\nIn contrast with the more abstract A-3 support for self-adaptation [8], A adaptation mechanisms are also investigated to ensure the basic properties of groups, such as robustness, high availability, efficient resource utilization, and other at- tributes defined by the application through extension points. Finally, while A-3 relies on classical group communication methods, the integration of groups with tuple spaces for both inter-group and intra-group coordination is explored. Group and role abstractions have also been used in other domains. Ferber et al. [9] proposed an organization-centered model for multi-agent systems that contrasts with agent-centered models in which agents can communicate and interact freely. Among the problems of agent-centered models, the authors"}, {"title": "B. Self-organization and Self-adaptation", "content": "Kota et al. [10] have proposed a method for adapting the relationship between agents in a multi-agent system. In their work, agents reason about adaptation using only historical knowledge about past interactions and the cost of adapta- tion (meta-reasoning). Despite the similarities with the work, namely the use of self-organization principles and the focus on the dynamics of relations, in that aspect, the work addresses a different domain (pervasive applications). It adopts an organization-oriented perspective in which application nodes can play distinct roles. Thus, the focus is rather on the nature of the relation and its dynamics than solely on the decision of when or not nodes should interact.\nA3-TAG, a programming model that facilitates the design of self-adaptive distributed systems based on group abstrac- tions [CT]. A3-TAG is an extension of the A-3 model, which is used as the organization model. A-3 key elements are groups and two types of roles, namely supervisor and follower. Each group has a supervisor and a variable number of followers. The main differences between this work and A3-TAG are dual."}, {"title": "C. Distributed Allocation Problem", "content": "In the literature, many works have tackled the problem of distributed task allocation. In contrast with a task, a functional role defines a set of functionalities (possibly tasks) that a member of an organization is responsible to provide (perform). Hence, within an organization, a role precedes a task. Then, depending on the type of role, if multiple instances of a role have been assigned, a task allocation among these instances may still take place. Last but not least, while tasks usually have concrete criteria for their beginning and completion and their assignment happens before task execution, the role of lifespan tends to include multiple repetitions of a given functionality (or task). Therefore, in a dynamic scenario, a role assignment may have to evolve while roles are performed.\nNotwithstanding their differences, the two types of alloca- tion problems share commonalities. For instance, in both cases, a utility function may be used as a criterion for choosing an optimal or sub-optimal assignment of roles/tasks. Whereas the optimization of quality attributes may be deemed unfeasible due to its complexity, a sub-optimal allocation can still be guided by the fitness (or utility) of nodes in performing these tasks/roles. To this end, fitness/utility is modeled as a real-value function of relevant features affecting one or"}, {"title": "VIII. CONCLUSION", "content": "The increasing demands of pervasive and mobile computing applications necessitate innovative approaches to overcome the limitations of traditional cloud-centric architectures. This pa- per introduced the Self-Organizing Interaction Spaces (SOIS) framework, which leverages the dynamic and heterogeneous nature of mobile nodes to create adaptive organizational structures. By integrating organizational modeling and pro- gramming abstractions, SOIS enables applications to adapt to individual and social contexts while minimizing reliance on cloud infrastructure.\nThe case studies and performance evaluations of a simulated mobile crowd-sensing application demonstrated the practical- ity and effectiveness of SOIS. Results revealed significant improvements in efficiency, reduced latency, and enhanced collaboration among mobile nodes, showcasing its potential to address challenges like intermittent connectivity and cost in distributed environments. Additionally, the adoption of 5G capabilities, including location-awareness and device-to-device (D2D) communication, further amplified the framework's ben- efits.\nIn conclusion, SOIS provides a promising foundation for developing next-generation pervasive applications. Its ability to dynamically adapt to environmental and contextual changes while maintaining decentralized operations positions it as a robust alternative to traditional cloud-dependent models. Future work will focus on extending the framework to support additional use cases, integrating advanced machine learning techniques for decision-making, and further optimizing its performance in real-world scenarios. With continued advance- ments, SOIS has the potential to transform mobile and dis- tributed computing paradigms, enabling more efficient and resilient systems."}]}