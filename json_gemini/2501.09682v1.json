{"title": "Incorporating Quantum Advantage in Quantum Circuit Generation through Genetic Programming", "authors": ["CHRISTOPH STEIN", "MICHAEL F\u00c4RBER"], "abstract": "Designing efficient quantum circuits that leverage quantum advantage compared to classical computing has become increasingly critical. Genetic algorithms have shown potential in generating such circuits through artificial evolution. However, integrating quantum advantage into the fitness function of these algorithms remains unexplored. In this paper, we aim to enhance the efficiency of quantum circuit design by proposing two novel approaches for incorporating quantum advantage metrics into the fitness function of genetic algorithms. We evaluate our approaches based on the Bernstein-Vazirani Problem and the Unstructured Database Search Problem as test cases. The results demonstrate that our approaches not only improve the convergence speed of the genetic algorithm but also produce circuits comparable to expert-designed solutions. Our findings suggest that automated quantum circuit design using genetic algorithms that incorporate a measure of quantum advantage is a promising approach to accelerating the development of quantum algorithms.", "sections": [{"title": "1 Introduction", "content": "In contrast to classical computing, quantum computing makes explicit use of phenomena that only exist in the quantum realm, such as superposition states and quantum entanglement. Based on these differences, quantum algorithms have been developed that show significant improvements in time complexity compared to their best performing classical counterparts (e.g., [6, 10, 17]). Despite their potential, however, comparatively few quantum algorithms with a significant quantum advantage have been found over the years [18, 19, 21]. One promising approach to bridge this gap is through the use of genetic algorithms. These algorithms have shown to be capable of producing quantum circuits for various tasks from entanglement production [2, 16] to algorithm development [1, 13, 19] and quantum error correction [20].\nWithin the literature on quantum circuit generation through the use of genetic algorithms, approaches mainly differ in the way they represent individual quantum circuits, the quantum gates they utilize, and how they measure the fitness of a generated circuit or algorithm (see Sec. 2). This last aspect, the fitness function, determines the"}, {"title": "2 Related Work", "content": "Multiple techniques have been developed with the goal of automatically generating quantum circuits and quantum algorithms. While recent work often makes use of reinforcement learning to select which gates to add to a circuit [11, 14], a vast body of work exists that uses genetic algorithms to generate quantum circuits for various tasks and performance goals. Since this paper builds on recent work in the context of genetic algorithms, we focus on this aspect in the following paragraphs."}, {"title": "2.1 Fitness Functions", "content": "The fitness function serves as the basis of selection within a genetic algorithm. Its choice determines which individuals are more likely to survive and, hence, which traits are more likely to spread throughout the population. Since most quantum circuits are developed to fulfill a specific computational need, the difference between the actual and the desired final state of the quantum circuit forms the basis of most fitness functions used in the"}, {"title": "2.2 Gate Types and Parameterized Gates", "content": "Regarding the types of gates used, related work can be dichotomized based on its use or avoidance of parameterized gates. While all gates have at least one parameter describing which qubit(s) they apply to, some gates, like the phase gate, take additional parameters influencing the scope of the manipulation they perform. These gates usually correspond to controlled rotations about one or more axes, with their parameters falling in the range of [-\u03c0, \u03c0].\nSince these parameterized gates allow for a fine control of the states of one or more qubits, they form the basis of many advanced quantum algorithms like the variational quantum eigensolver [15] or the quantum fourier transform [4]. For their use in the context of genetic programming, suitable parameters for those gates have to be learned. While tree-based approaches like [19] and [12] incorporate parameter optimization through the use of mathematical operators in their representation scheme, other approaches like [8] incorporate parameter optimization as an additional step in their genetic algorithm. [7] and [9] adjust rotation parameters through the use of an additional mutation operator within the genetic algorithm itself.\nThe approach presented in this work will follow the work of Gemeinhardt et al. [8] and include parameter optimization as an additional step in the genetic algorithm. While this does require additional computational resources during the execution, it greatly enhances the effectiveness of the algorithm on complex problems."}, {"title": "3 Method", "content": "The goal of this work is to develop a genetic algorithm for quantum circuit generation that incorporates in its fitness function whether or not a quantum advantage is achieved. Two proposed fitness functions, each approaching this objective from a different angle, are introduced and defined in Sec. 3.1 and Sec. 3.2 respectively."}, {"title": "3.1 Direct Incorporation of Quantum Advantage", "content": "Most established quantum algorithms define their quantum advantage based on the amount of black box oracle calls they require to solve a computational problem. This number is then contrasted to the amount of oracle calls the best performing classical (non-quantum) algorithm would need [3, 6, 10]. In the case of the Unstructured Database Search Problem, for example, the best performing classical algorithm would require on average N/2 oracle calls to find a specific entry within an unstructured list. Grover's Algorithm [10], in contrast, has been shown to require only O(\u221aN) oracle calls. In this section, we introduce a fitness function that incorporates this respective speedup, the quantum advantage a generated circuit achieves in contrast to its best performing classical counterpart.\nIn the work of Spector et al. [19], the fitness function comprises of multiple factors that each target different aspects of the circuits to be created. At first, each circuit is shaped to solve as many test cases as possible. Then, once the algorithm finds a circuit that passes all test cases, the fitness function further optimizes by preferring circuits that make use of fewer gates.\nWhile the amount of gates used serves as an approximate measure of the simplicity of a circuit, it is an insufficient indicator of the degree of quantum advantage achieved. In contrast to the amount of oracle calls employed, the amount of gates used by a circuit does not indicate the scaling behavior of the underlying algorithm. Furthermore, the amount of gates used for implementing an algorithm heavily depends on the gate set used, a concern driven by hardware and design considerations, irreverent of the underlying algorithm itself.\nIn this work, in addition to incorporating the amount of a gates as a factor indicating circuit simplicity, we incorporate a custom measure for the degree of quantum advantage achieved by a circuit in its fitness value computation."}, {"title": "3.2 Indirect Incorporation of Quantum Advantage through Constraints", "content": "As shown in [3], any computation a quantum computer can do can also be performed by a classical (non-quantum) computer. The difference between quantum and non-quantum computers lies not in what they are able do, but in how efficiently they are able to do it. Quantum computers are able to exhibit quantum advantages because in"}, {"title": "4 Evaluation", "content": "To evaluate the approaches proposed, we chose the Bernstein-Vazirani Problem [3] and the Unstructured Database Search Problem [10] as test studies. For each of the test studies, experiments were run with the fitness function of Spector et al. [19] (BaselineFitness), our fitness function proposed in Sec. 3.1 (DirectQAFitness), and our fitness function proposed in Sec. 3.2 (IndirectQAFitness). Since genetic algorithms make strong use of random choices both during population initialization as well as during each generation, each experiment configuration was run 12 times.\nDuring each experiment run, the population size was set to 1,000, the probability for crossover was set to 0.4, the probability of randomly swapping individual gates was set to 0.03, and elitism was performed with 10% of the population. These parameters were chosen based on experience and systematic trial and error ahead of the actual experiment runs. On the Unstructured Database Search Problem, the chromosome length was set to 30 and each algorithm was run for 800 generations. On the Bernstein-Vazirani Problem, the chromosome length was set to 15 and each algorithm was run for 500 generations. Different parameters have been chosen for each of the test studies to account for the difference in complexity between both problems."}, {"title": "4.1 Results on the Bernstein-Vazirani Problem", "content": "Fig. 1 shows the development of the mean and minimum fitness values for each generation of the genetic algorithm, averaged across multiple experiment runs, and for each of the fitness functions used. BaselineFitness refers to the fitness function proposed by Spector et al. in [19].\nWhile BaselineFitness and DirectQAFitness show similar convergence behavior, both in regard to their averaged mean as well as their averaged minimum fitness values, the fitness values for IndirectQAFitness converge faster and reach lower overall fitness values. The higher fitness values of IndirectQAFitness during early generations can be explained through the punishment terms applied in the fitness value computation of this fitness function (s. Sec. 3.2). Once the superposition and entanglement constraints have been satisfied, IndirectQAFitness outperforms the other two fitness functions in terms of its average fitness values.\nFig. 2 lists the best performing circuits generated by each of the experiment configurations. In this context, a circuit is considered better the lower its corresponding fitness value is. While all of the generated circuits follow the structure of the state of the art solution [3], individual circuits vary in the way they manipulate the ancillary qubit q3. Aside from a global phase factor, each of these circuits is equivalent to the state of the art circuit of [3], which was created manually. Each of these circuits returns the desired result state with a probability of 1."}, {"title": "4.2 Results on the Unstructured Database Search Problem", "content": "Fig. 3 shows a slight out-performance of the IndirectQAFitness and DirectQAFitness in comparison to the BaselineFitness function in regards to both their averaged mean values as well as their averaged minimum fitness values. While the IndirectQAFitness has a higher averaged mean fitness value during early generations, due to the punishment terms applied in the fitness value computation, this fitness function converges faster, although to a less beneficial value compared to the DirectQAFitness function.\nIn general, the averaged minimum fitness values as well as the minimum fitness values of each experiment run are monotonically decreasing, due to the use of elitism in the genetic algorithm. In our implementation, elitism is realized by copying the best performing circuits of each generation into the next generation unaltered. As a consequence, the minimum fitness value of a population can only stay stable or decrease as generations progress.\nFigures 4 to 6 show the best performing quantum circuits across all runs of each of the experiment configurations. Each of these circuits achieved a fitness value close to 0, indicating that it passed all possible test cases of the Unstructured Database Search Problem on 3 qubits.\nIn the following, we provide a case study by discussing specific parallels and differences between the generated best performing circuits and the state of the art solution from [10].\nIn addition to employing the same amount of oracle calls, the circuits in Fig. 4 and Fig. 5 follow a shared structure that is notably structurally different from the state of the art circuit. Instead of creating an equal"}, {"title": "5 Main Findings", "content": "In regards to the main contributions of this paper, we found that:\n\u2022 The results from both test studies demonstrate that the proposed fitness functions result in faster and more effective convergence on average, compared to the baseline fitness function from [19]. This suggests that incorporating a measure of quantum advantage enhances the genetic programming approach, enabling the generation of more effective quantum circuits within fewer generations.\n\u2022 Each experimental configuration successfully produced circuits for the Bernstein-Vazirani Problem that are similar in structure and performance to state-of-the-art solutions. The differences were minimal, with variations typically involving only a single gate, while the overall structure remained consistent with established methods.\n\u2022 In the more complex Unstructured Database Search Problem, the best-performing circuits exhibited greater variability in both structure and gate selection. Notably, two of the top circuits shared similarities in their entanglement strategies and oracle call usage, offering an effective alternative to the state-of-the-art approach by utilizing a step-wise entanglement procedure.\n\u2022 Among the circuits generated for the Unstructured Database Search Problem, the one illustrated in Fig. 6 closely mirrors the diffusion operator described by [10]. This circuit effectively redistributes probability amplitudes towards the marked state, functioning similarly to Grover's diffusion operator. Remarkably, the genetic algorithm independently generated a circuit that aligns closely with the state-of-the-art solution in both performance and interpretability, despite lacking prior knowledge of the existing solution."}, {"title": "6 Conclusion", "content": "We proposed two novel fitness functions, each taking a different route to incorporate a measure of quantum advantage in the genetic algorithm. When evaluated on the Bernstein-Vazirani Problem and the Unstructured Database Problem, the suggested fitness functions outperformed the baseline fitness function of Spector et al. [19] in terms of convergence speed and the quality of the produced circuits. While the experiments run in the context of this paper have been able to closely reproduce the state of the art solution on the Bernstein-Vazirani Problem, they yielded interesting new circuit architectures on the Unstructured Database Problem. In one of the experiments, a circuit was learned that closely resembles the diffusion operator suggested by Lov Grover in [10]. These findings affirm the overall potential of genetic algorithms for the discovery and generation of meaningful new quantum algorithms and circuit architectures.\nIn future work, we plan to incorporate a measure of well-formedness for the probability amplitude distributions generated by each quantum circuit. Currently, all oracle cases are treated independently. However, since quantum oracles are designed as black boxes, quantum algorithms should exhibit consistent behavior across different oracle cases and implementations. If the probability amplitude distributions produced by a circuit vary significantly across different oracle implementations, it suggests that the circuit may be overfitting to specific test cases rather than addressing the underlying abstract problem. Exploring how to integrate a well-formedness measure into the fitness function of the genetic algorithm, and assessing whether this adjustment impacts the quality and convergence of the algorithm, represents a promising direction for future research."}]}