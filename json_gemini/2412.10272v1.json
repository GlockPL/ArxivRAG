{"title": "Trustworthy and Explainable Decision-Making for Workforce allocation", "authors": ["Guillaume Pov\u00e9da", "Ryma Boumazouza", "Andreas Strahl", "Mark Hall", "Santiago Quintana-Amate", "Nahum Alvarez", "Ignace Bleukx", "Dimos Tsouros", "H\u00e9l\u00e8ne Verhaeghe", "Tias Guns"], "abstract": "In industrial contexts, effective workforce allocation is crucial for operational efficiency. This paper presents an ongoing project focused on developing a decision-making tool designed for workforce allocation, emphasizing the explainability to enhance its trustworthiness. Our objective is to create a system that not only optimises the allocation of teams to scheduled tasks but also provides clear, understandable explanations for its decisions, particularly in cases where the problem is infeasible. By incorporating human-in-the-loop mechanisms, the tool aims to enhance user trust and facilitate interactive conflict resolution. We implemented our approach on a prototype tool/digital demonstrator intended to be evaluated on a real industrial scenario both in terms of performance and user acceptability.", "sections": [{"title": "Introduction", "content": "In industrial contexts, effective workforce allocation is a cornerstone of operational efficiency, directly impacting productivity, cost management, and overall organizational performance. The complex nature of workforce allocation involves balancing numerous constraints, such as employee availability, skill levels, regulatory requirements, and task priorities. As industries increasingly rely on automated decision-making tools to manage these complexities, the need for trustworthiness and explainability in these systems becomes paramount.\nThis paper introduces an ongoing project dedicated to the development of a decision-making tool tailored to workforce allocation. The core objective of this tool is to not only optimise the allocation of teams to scheduled tasks but also to ensure that the decision-making process is transparent and understandable to users. Current industrial workforce allocation often functions as a black box, primarily due to the complexity and opacity of the underlying processes. This lack of transparency hinders the general understandability of the solution and is detrimental to the development and deployment of automatic solutions using AI tools. Our work aims to address this problem by improving transparency and explainability of workforce allocation systems. Complicating workforce allocation processes, are the need for real-time adaptation of the workforce under disruptions. The necessary knowledge to manage these disruptions is often implicit, 'hidden' in the planners' heads, making it difficult for AI-generated solutions to gain acceptance unless they can clearly explain their rationale. Our approach not only seeks to enhance the transparency of workforce allocation but also aims to ensure that AI solutions can effectively communicate their decision-making processes, thereby increasing trust and acceptance among human planners.\nAnother significant challenge in workforce allocation is the occurrence of infeasible situations, where the constraints cannot be satisfied simultaneously. Traditional systems may simply fail or produce sub-optimal solutions without providing clear explanations, leading to user frustration and mistrust. To overcome this, our tool incorporates human-in-the-loop mechanisms, enabling users to interact with the system to understand and resolve infeasibilities. These explainability features are designed to enhance user trust and facilitate effective conflict resolution, making the decision-making process more collaborative and reliable.\nIn summary, this paper presents an integrated approach to workforce allocation, emphasizing the importance of trustworthiness and explainability. By integrating interactive features and human-in-the-loop mechanisms, we aim to create a decision-making tool that is not only effective but also transparent and user-friendly, paving the way for more reliable and collaborative industrial operations.\nLooking ahead, future plans include evaluating the tool's effectiveness. This evaluation will focus on assessing the tool's impact on operational efficiency, user understandability and acceptance, and its ability to handle real-world workforce allocation scenarios."}, {"title": "Overview of workforce allocation challenges", "content": "In the industrial landscape, efficient workforce allocation or task scheduling is a critical component of operational success. We consider here the operational problem of assigning teams of workers, to a set of already scheduled tasks, in a manner that optimises workers utilization and meets various operational constraints. Furthermore, workers have different availability slots; in real scenarios, uncertainty (represented by accidents, illnesses or simply time delays in other tasks) may further modify this pre-established availability.\nTo address this, we have already developed a decision-making tool relying on constraint programming (CP) [34], a powerful paradigm well-suited for solving complex allocation problems. While we will describe this tool in detail in the next section, it is important to note that even with a highly performant solver, eXplainable AI (XAI) is essential to ensure the trustworthiness and acceptance of AI solutions in workforce allocation.\nDespite the technical robustness of CP solvers, their adoption in industrial settings is often hindered by a perceived lack of transparency and lack of user interaction capabilities. Decision-makers and end-users frequently struggle to understand the rationale behind the solver's outputs, particularly when the problem is infeasible. This can lead to mistrust and underusage of the technology, ultimately diminishing its potential benefits. Also, the actual modelling of the problem may be challenging as the modelling experts are often not the final users of the decision-making tool.\nTo overcome these challenges, our project focuses on integrating explainability and trustworthiness into the CP-based decision-making tool. By providing clear, comprehensible explanations for the solver's decisions and highlighting reasons for infeasibilities, we aim to build greater user trust and facilitate more effective human-computer collaboration. Interactive features are also being developed to allow users to engage with the tool, explore alternative solutions, and iteratively restore feasibility when conflicts arise.\nThis paper outlines our ongoing efforts to create an explainable and trustworthy workforce allocation tool. We demonstrate the implementation of interactive conflict resolution mechanisms and discuss our plans for evaluating these features."}, {"title": "Explainability in Constraint Programming", "content": "Explainability in AI has evolved significantly over time, driven by the need to make AI systems more transparent, trustworthy, and user-friendly. The authors in [6] broadly categorized the questions that explanations in AI aim to answer into three classes: What and Why (What made/Why did the system reach this outcome?), Why not and What if (Why did the system not reach a different outcome? What if different information were used?), and How (How can I modify the system to obtain a more desirable outcome with the existing information?). This categorization helps understand the progression and focus of explainability efforts in various AI methodologies, including machine reasoning (MR) and machine learning (ML). Different methodologies have addressed these explainability questions (see [10, 16, 18, 19, 24, 26, 27, 28, 29, 33, 35, 37]).\nThe remainder of this section focuses on the specific application of XAI techniques within the domain of constraint programming, especially in workforce allocation and scheduling problems.\nConstraint Programming is a powerful method at the intersection of AI and OR, for solving combinatorial problems. CP involves specifying constraints that need to be satisfied and finding solutions that meet these constraints. Explainability is crucial in CP, particularly for workforce allocation and scheduling, where decision-makers need to understand the rationale behind the allocation decisions. Different existing methods are used to enhance explainability in CP and can be categorized as:\nExplanation of Constraints: Making the constraints and their roles in the decision-making process clear to users.\nSolution Traceability: Allowing users to trace back the steps and decisions made by the CP solver to understand how a particular solution was reached (e.g., [1]).\nConflict Explanation: Identifying and explaining conflicts or infeasibilities when no solution can be found, which is particularly important for iterative problem-solving and debugging (e.g., [22, 25]).\nA significant focus within explainable constraint solving is on the latter and is about explaining why a set of constraints is unsatisfiable. Many of these methods [4, 15, 17, 20, 21, 22, 23, 25] aim to identify a minimal unsatisfiable subset (MUS) - an irreducible subset of constraints which causes the model to be unsatisfiable."}, {"title": "Definition 1 (Minimal Unsatisfiable Subset [23]).", "content": "Given an unsatisfiable set of constraints $C$, a subset $U \\subseteq C$ is a Minimal Unsatisfiable Subset if and only if $U$ is unsatisfiable and every strict subset $U'\\subsetneq U$ is satisfiable\nSuch explanations are interesting because they pinpoint the exact constraints responsible for the inconsistency, allowing users to focus their efforts on resolving specific issues. Recently, research has also been directed towards advising users on how to restore feasibility [12, 36], notably by identifying the minimal correction subset (MCS) [3]."}, {"title": "Definition 2 (Minimal Correction Subset [23]).", "content": "Given an unsatisfiable set of constraints $C$, a subset $M \\subseteq C$ is a Minimal Correction Subset if an only if $C \\setminus M$ is satisfiable, and for every strict subset $M' \\subseteq M$, $C \\setminus M'$ is unsatisfiable.\nAn MCS is particularly useful because it identifies an irreducible set of constraints that, when modified or relaxed, can restore the feasibility of the entire system. By focusing on such a minimal set, users can implement the least disruptive changes necessary to resolve conflicts, which helps maintain the integrity of the original constraint problem as much as possible. However, there remains a shortage of tools that effectively explain why a problem is inconsistent."}, {"title": "Problem definition", "content": "The problem consists of assigning teams of workers to tasks in a large-scale industrial setting, involving several hundreds of daily activities. We will consider the set of tasks to accomplish as already scheduled in time, each of them needs to be allocated to a team of workers. Any given team of workers can't be allocated to two activities at the same time neither do 2 tasks in a row when there is some geographical constraint such transportation time that makes it impossible. Each team has its own calendar of availability or set of skills that can restrict the set of activities it can be allocated to. In this section, we will introduce the needed notations and formulate the base constraint model implemented to solve it:"}, {"title": "Notations", "content": "1.  $A$ the set of activities to accomplish\n2.  $W$ the set of worker teams available\n3.  $\\forall a \\in A$, $start_a \\in \\mathbb{N}$, $end_a \\in \\mathbb{N}$, the start and end time of the activity $a$\n4.  $\\forall a \\in A$, $comp_a \\in 2^W$ stores the subset of worker teams compatible with the activity a. Similarly we can define binary indicator $comp\\_binary_{a,w} \\in \\{0,1\\}$,$\\forall a \\in A$, $\\forall w \\in W$ storing the same information.\n5.  $S$ is a list of activity pair $(a_i, a_j)$ that should to be allocated to the same team."}, {"title": "Constraint model", "content": "In this section, we detail the CP formulation implemented for the problem. A Boolean formulation showed the best performance using the different solvers we tested in our backend application (like Ortools CP-SAT [32], Exact [7], and Gurobi [13])."}, {"title": "Variables", "content": "1.  Let $\\forall a \\in A$, $w \\in W$, $alloca_{a,w} \\in \\{0,1\\}$ be the allocation variable. A value of 1 will correspond to given worker team $w$ being allocated to the activity $a$."}, {"title": "Constraints", "content": "1.  Each task in allocated: $\\forall a \\in A$, $\\sum_{w \\in W} alloca_{a,w} = 1$\n2.  Non-Overlapping constraint :\n   $\\forall a \\in A$ we denote $neigh(a) = \\{a' \\in A s.t (end_{a'} > start_a) \\land end_a \\ge start_{a'}\\}$ the set of overlapping activities of activity $a$, then $\\forall w \\in W, a' \\in neigh(a), alloca_{a,w} + alloca_{a',w} \\leq 1$\n3.  Compatibility constraint : $\\forall a \\in A, w \\in W, \\neg comp\\_binary_{a,w} \\rightarrow \\neg alloca_{a,w}$,\n4.  Same allocation constraint :\n  $\\forall (a_1, a_2) \\in S, \\forall w \\in W, alloca_{a_1,w} = alloca_{a_2,w}$\n5.  Used team constraint: $\\forall a \\in A, w \\in W, alloca_{a,w} \\rightarrow used_w$\n6.  Aiming at speeding up solver we introduce two main additional kinds of constraint, one redundant for the overlapping constraint, and one adding symmetry breaking :\n a. Clique constraints :\n   $\\forall a \\in A$, let $overlapstart(a) = \\{a' \\in A, start_{a'} \\leq start_a < end_{a'}\\}$ the set of task also executed at time $start_a$ (including $a$), then this set constitutes a clique of overlapping tasks. We add the following constraint :\n    $\\forall a \\in A, \\forall w \\in W, \\sum_{a' \\in overlapstart(a)} alloca_{a',w} \\leq 1$\n b. Symmetry breaking: Some teams $\\in W$ can execute the same set of tasks for the given time horizon. Hence, they are equivalent and tasks can be assigned to any of those teams without changing the validity of the allocation. Clearly, this means equivalent teams are symmetric and we add lexleader symmetry breaking constraints imposing an ordering of the teams [8, 39]. Several formulations are possible, but from limited testing, we found adding the ordering on the used variables seemed most promising. It's worth noticing that this constraint will not impact solution quality, only when the objective itself treats the teams as equivalent."}, {"title": "Objective functions", "content": "The main objective of interest here will be the number of different teams used, therefore we aim at minimizing $\\sum_{w \\in W} used_w$. Several other objectives are under study, notably adding fairness objectives, and ensuring a balanced workload among the used teams. The inclusion of those objective functions has currently only been studied in the pure optimisation and performance side and not on the explainable, therefore they will not be considered in the remaining of the paper."}, {"title": "Example of solution", "content": "We can plot a Gantt chart to visualise the solution, as shown in Figure 1. Each row of the chart represents the schedule for a specific team of workers $w \\in W$. Due to the non-overlapping constraint (defined in constraint nb. 2), a feasible solution ensures that there are no overlapping activities within each row of the Gantt chart."}, {"title": "Explainable Decision-making tool for workforce allocation", "content": "The development of a decision-making tool for workforce allocation is driven by the need to enhance operational efficiency, but such a tool introduces new trustworthiness requirements in order to get user acceptance. The following figure 2 outlines the primary workflow of the tool.\nOur tool integrates explainability components addressing two major needs: conflict computation and visualisation, and interactive infeasibility restoration. The explainability features of our tool are tailored to scenarios where the workforce allocation problem is infeasible, where the constraints cannot be satisfied simultaneously (e.g., when there are insufficient resources available to allocate all tasks). By addressing these infeasibility cases, the tool aims to provide insights into its decision-making process."}, {"title": "Conflicts Computation and Visualisation", "content": "In complex allocation or scheduling scenarios, conflicts are often inevitable due to various reasons: overlapping tasks, resource constraints, and varying team availabilities. Our tool computes and visualises these conflicts, allowing users to see where and why the allocation process encounters issues. Visual representations of conflicts enable users to quickly grasp problematic areas and understand the constraints causing these issues. This transparency builds trust in the system, as users can see the logical reasoning behind the solver's decisions. Finding the best way to visualise the conflicts depends on user preferences, and this is the subject of ongoing work."}, {"title": "Interactive Infeasibility Restoration", "content": "Confronting infeasible problems is a common challenge in real-world applications [5]. Traditional CP solvers may report infeasibility without providing guidance on resolution. However, our tool offers the users an interactive method to solve conflicts in the problem; upon detecting an infeasible problem, users are presented with several methods to restore feasibility:\nResolving MUS conflicts interactively (local conflict resolution): This method involves resolving each MUS conflict one by one in an interactive manner (by selecting a constraint in the MUS to relax). Local conflict restoration refers to the process of addressing each conflict individually within its localized context, rather than attempting to solve all conflicts simultaneously. Users are guided through the process of addressing each local conflict sequentially, enabling a step-by-step restoration of feasibility.\nUsing MCS interactively (global conflict resolution): Instead of addressing conflicts individually, this approach computes one of the minimal correction subsets (MCS) to resolve all conflicts simultaneously on a problem-wide scale. Global conflict restoration refers to the process of identifying and correcting a minimal set of constraints that, when adjusted, will restore feasibility to the entire system. In our tool, we consider the scenario where the user can choose only a subset of the relaxations provided by a single MCS, and users may want to mix-and-match constraints relaxations from different MCSes. Hence, our tool re-computes a new MCS after a user has relaxed some constraints, making the process iterative and interactive.\nFine-tuning task priorities (prioritized conflict resolution): This method involves solving and optimising a relaxed version of the problem where task allocations become optional. Each task is given a priority/weight value which is taken into account in the optimisation criteria. Users can interactively change the priority level of tasks, allowing a lot of flexibility in the way the problem feasibility is restored, e.g. which tasks are more likely to remain or be removed.\nBy involving users in the resolution process, our tool ensures a more transparent, interactive, and trustworthy decision-making experience."}, {"title": "Implementation", "content": "The workforce allocation model was implemented using the CPMpy library [11], a flexible and user-friendly tool for modelling constraint programming (CP) problems. CPMpy offers an intuitive API that closely mirrors the functionality of numpy, making it accessible and easy to use for those familiar with numerical computing in Python. Using this modelling library allows us to test different solver backends, including ortools-cpsat [32], gurobi [13], pysat [14], or exact [7, 9]. It also includes some native utilities to compute MUSes or MCSes, which we use extensively in this research for conflict analysis and feasibility restoration.\nIn practice, several customization options regarding optimisation and explainability aspects are available through our configuration parameters tab within the tool, as illustrated in Figure 3."}, {"title": "Case study/Application example", "content": "The problems to be solved in the industrial use case range from scheduling tasks over a six-hour period to creating a full day (24-hour) schedule, involving the allocation of a few dozen activities to possibly up to one thousand. The number of available resources (i.e. our W teams) varies over time, but typically there are about 20 ($|W| \\approx 20$)."}, {"title": "Preliminary results", "content": "In this section, we present our initial findings on the computational performance of the optimisation method and on the explainability components across various scenarios. For both the optimisation and explainability experiments, we generated 20 instances of the allocation problem with different lengths: 6, 8 and 24 hours. These instances were generated to reflect a real-world scenario with specific constraints and conditions derived from historical data. This analysis serves as a foundation for further refinement and optimisation of our approach."}, {"title": "Optimisation results", "content": "Despite the workforce allocation problem being NP-Hard (akin to a list colouring graph problem), preliminary empirical runs and benchmarks on historical data have demonstrated good performance. Our preliminary results (Table 1) consider the mean computation time to optimality (or cut to timeout) for different lengths of the instances, different CP formulations of the CP model, and different solver settings. The column clique refers to the redundant clique constraint 6a and symmetry to the symmetry breaking constraint on used team 6b. The solver backend used is Ortools' CP-Sat solver, a state-of-the-art solver for CP problems [30, 31]. CP-Sat heavily relies on a portfolio approach to accomplish its search and using this feature usually will improve a lot the solving performance. To check this on our use case, we tested 2 different settings: using 1 or 6 search worker (column #w). As we expected, CP-Sat is more efficient in its multi-worker settings and found optimal solution on all instances in less than 1 second in average. From the multi-worker settings instances, we also observed that symmetry and redundant constraints have a clear negative effect on both initialisation time of the model and on solving time. On the contrary, in the mono-worker mode, the use of the symmetry constraints helps prove optimality for more instances and offers a computation time advantage (but still those have worse performance than their multi-worker equivalents).\nThese results show the efficiency of using CP-Sat with its full features activated, but it is important to note that these results do not constitute a comprehensive benchmark. Moreover, upon closer inspection of the results, we noticed mainly the LP-subsolver implemented in OR-tools contributed to finding a better bound during the search. Hence, it may be interesting to evaluate the performance of LP-specific solvers too such as Gurobi. Overall, further analysis and more extensive testing is required to validate and generalize these findings. Nonetheless, these results are promising and indicate the potential efficiency of CP solvers in handling complex workforce allocation problems."}, {"title": "Explainability results", "content": "We run a benchmark study to compute minimal unsatisfiable subset (MUS) conflicts across various scenarios by categorizing the problem constraints into soft and hard constraints directly from our tool interface (see Figure 3). Hard constraints were necessary conditions that must be met, while soft constraints were desirable but not mandatory. This process involved determining which constraints could not be satisfied simultaneously by extracting an MUS. The algorithm used for finding such a MUS is based on the well-known deletion-based method [25], which extracts any MUS from the problem. As this algorithm greatly benefits incremental solving [2], we used the Exact solver [7], a pseudo-Boolean solver which supports solving under assumptions.\nThe study was conducted on the same instances introduced in previous sections. The evaluation focuses on the time taken to compute one explanation of infeasibility for each instance and the size of the explanation, measured in terms of the number of constraints involved in the MUS.\nThe results (Table 2) indicate that as the instance length increases from 6 to 24 hours, the average calculation time for generating single explanations of infeasibility also increases (from 0.60s to 1.13s), while the average length of the explanations remains relatively consistent even for bigger instances. These results suggest that longer instances require more computation time, but the complexity of the explanations does not significantly increase. However, further experiments are necessary to draw definitive conclusions."}, {"title": "Visualising Conflicts and Restoring Feasibility: A Practical Demonstration of our tool", "content": "To showcase the capabilities of our explainability techniques and enable their evaluation by end users, we developed a demonstrator application using Streamlit\u00b9. This section offers an overview of its features and functionalities."}, {"title": "Solving the Problem", "content": "The first step in our application consists of encoding and solving the allocation problem using the CPMpy library. Our tool allows to load data and configure various parameters, such as choosing the optimisation solver (see Figure 3). Once the problem is encoded, the solver is called to find an optimal solution. The results, including the allocation of teams to tasks, are then displayed to the user (see Figure 4)."}, {"title": "Solution Refinement", "content": "After the solver generates a solution, users have the opportunity to review it and modify it. The application allows users to propose alternative allocations overriding the solver's decisions. This interactive review process ensures that users can make adjustments based on their expertise and knowledge of the specific context (see Figure 5)."}, {"title": "Conflict Computation and Visualisation", "content": "When the problem resolution is infeasible, the application computes and provides a visualisation of the conflicting constraints causing infeasibility. Conflicts are described with a basic text description of each of the constraints, along with a Gantt representation of the problem highlighting the activities involved in the conflict (see Figure 6). The displayed Gantt is built by solving an optimisation problem: it is the result of optimising the number of allocated tasks, e.g. it computes a size-maximal satisfiable subset. These tasks are then visualised, and non-allocated tasks are added to a virtual team we call \"Unset\", the top line of the plot. This method allows to have a visual representation even when dealing with infeasible problems where no solution (nor visualisation thereof) exists as is."}, {"title": "Feasibility Restoration", "content": "If the solver encounters an infeasible problem, our application offers several methods for restoring feasibility. These methods are designed to be interactive by involving the user in the resolution process."}, {"title": "Local Conflict Resolution", "content": "One approach to restoring feasibility is by resolving conflicts one by one interactively. The application identifies a minimum unsatisfiable subset (MUS) of constraints and guides users through the process of addressing each conflict individually. This local resolution method allows users to make targeted adjustments. The process is illustrated in Figure 7. In our preliminary experiment, similarly to the scenario depicted, few iterations were required to restore feasibility, and we surmise that this observation remains true for real scenarios."}, {"title": "Use of Minimum Correction Subset", "content": "Alternatively, users can employ a minimal correction subset (MCS) to resolve conflicts globally as shown in Figure 8. The application identifies a minimal set of constraints that need to be corrected to restore full feasibility. In the interactive setup, we consider that users can accept to remove only a subset of the constraints proposed by the tool (which would not completely restore the feasibility). We envisage providing multiple MCSs in the future if none of the corrective actions fits user preference."}, {"title": "Fine-tuning task priorities", "content": "Finally, the application provides the option to solve relaxed versions of the problem using a weighted Max-CSP formulation (optimisation variant of the satisfiability problem where each constraint is assigned a weight, and the goal is to maximize the sum of the weights of the satisfied constraints). We relax the constraint requiring each task to be allocated (constraint 1 of our model) and maximize the sum of allocated activities, where each activity a is weighted by a weight wa. This method can easily generate several alternative solutions, maximizing the weighted objective. If the user is unhappy with the relaxed solutions, it is possible to interact with the solver by setting different wa weights on some chosen activities. This method should lead to feasible solutions obtained using domain expert constraint relaxations (see Figure 9)."}, {"title": "Conclusion & Discussion on Future work", "content": "Our decision-making tool for workforce allocation combines the power of constraint programming with interactive and explainable features. By involving users in the decision-making process and providing clear explanations of conflicts and resolutions, we aim to enhance the trust and adoption of CP solvers in industrial settings. The prototype application demonstrates the practical implementation of these concepts and serves as a foundation for further development and evaluation within the TUPLES project. Our next step in the research is to evaluate the relevance of the generated explanations from a user perspective. These XAI methods should be assessed by expert users who can judge the usability and applicability of XAI/CP technology components in realistic scenarios. Hence, we plan to conduct scientifically rigorous user studies to determine preferred methods for infeasibility restoration. We also plan another user study focused more on a visual interface that will gather user feedback on conflict visualisations and description methods. We are currently implementing various visualisation approaches and textual description techniques to enhance user acceptability.\nIn this paper, we focused on a pure allocation problem where the activities are already scheduled and can't be shifted in time. In a more realistic model, the possibility of shifting tasks (e.g. changing the start time) in the feasibility restoration step should be considered. However, this would require to transform the model into a scheduling problem, and we are currently working in this direction. This raises interesting scalability challenges for the \u03a7\u0391\u0399 technology bricks such as MUS computation. To address the interpretability of large conflict explanations, we could consider using step-wise explanations [1]. By breaking down complex explanations into simpler steps, we can create short, interpretable sequences that collectively clarify the issue. Also, in this more complex setup where we consider scheduling constraints, there might be implicit constraints that the planners keep in mind but are not articulated in the problem formulation. Hence we are looking at the techniques from the literature on constraint acquisition [38]."}]}