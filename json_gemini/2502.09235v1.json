{"title": "Hybrid Answer Set Programming: Foundations and Applications", "authors": ["Nicolas R\u00fchling"], "abstract": "Answer Set Programming (ASP; [32]) is being increasingly applied to solve problems from the real-world. However, in many cases these problems have a heterogenous nature which requires features beyond the current capacities of solvers like clingo [19]. Consider for example the field of configuration [17]; one of the early successful applications of ASP [20, 23]. A configuration problem usually consists of (at least) a partonomy where parts are parameterized by attributes whose values in turn are restricted by constraints. While in simple cases these attributes are discrete, many industrial applications require attributes that range over large numeric domains (eg. precisions in the milimeter range might be needed). Further, calculations over these attributes can be of linear nature (eg. calculating the total weight by summing up the weight of all parts) as well as non-linear (eg. area or volume of an object, inclination of a conveyor belt, etc). Standards ASP solvers like clingo quickly reach their limits when dealing with numeric ranges and calculations as they need to explicitly ground all possible values. Apart from this, representing constraints in ASP that go beyond simple arithmetic expressions or aggregations generally requires considerable effort.\nOver the last years, hybrid solvers such as clingcon [3]\u00b9 and clingo[DL] [27]\u00b2 which make use of dedicated inference methods for certain kinds of constraints over finite integer domains have already been successfully applied to many problems such as train scheduling [2] and warehouse delivery [38]. However, what is still missing, is a solid, semantic underpinning of these systems.\nThis issue has first been addressed by introducing the Logic of Here-and-There with constraints (HTc; [12]) as an extension of the Logic of Here-and-There (HT; [25]) and its non-monotone extension Equilibrium Logic [36]. Nowadays, HT serves as a logical foundation for ASP and has facilitated a broader understanding of this paradigm. The idea is that HT (and other extensions; see Section 2) play an analogous role for hybrid ASP.\nThere remain many open questions about these logics regarding their fundamental characteristics as well as their practical use in solvers, ie. how they can guide the implementation. Having a formal understanding of these hybrid logics is also needed to better understand the inherent structure of the (real-world) problems they are applied to, eg. configuration, and to improve their representations in ASP.", "sections": [{"title": "1 Introduction", "content": "Answer Set Programming (ASP; [32]) is being increasingly applied to solve problems from the real-world. However, in many cases these problems have a heterogenous nature which requires features beyond the current capacities of solvers like clingo [19]. Consider for example the field of configuration [17]; one of the early successful applications of ASP [20, 23]. A configuration problem usually consists of (at least) a partonomy where parts are parameterized by attributes whose values in turn are restricted by constraints. While in simple cases these attributes are discrete, many industrial applications require attributes that range over large numeric domains (eg. precisions in the milimeter range might be needed). Further, calculations over these attributes can be of linear nature (eg. calculating the total weight by summing up the weight of all parts) as well as non-linear (eg. area or volume of an object, inclination of a conveyor belt, etc). Standards ASP solvers like clingo quickly reach their limits when dealing with numeric ranges and calculations as they need to explicitly ground all possible values. Apart from this, representing constraints in ASP that go beyond simple arithmetic expressions or aggregations generally requires considerable effort.\nOver the last years, hybrid solvers such as clingcon [3]\u00b9 and clingo[DL] [27]\u00b2 which make use of dedicated inference methods for certain kinds of constraints over finite integer domains have already been successfully applied to many problems such as train scheduling [2] and warehouse delivery [38]. However, what is still missing, is a solid, semantic underpinning of these systems.\nThis issue has first been addressed by introducing the Logic of Here-and-There with constraints (HTc; [12]) as an extension of the Logic of Here-and-There (HT; [25]) and its non-monotone extension Equilibrium Logic [36]. Nowadays, HT serves as a logical foundation for ASP and has facilitated a broader understanding of this paradigm. The idea is that HT (and other extensions; see Section 2) play an analogous role for hybrid ASP.\nThere remain many open questions about these logics regarding their fundamental characteristics as well as their practical use in solvers, ie. how they can guide the implementation. Having a formal understanding of these hybrid logics is also needed to better understand the inherent structure of the (real-world) problems they are applied to, eg. configuration, and to improve their representations in ASP."}, {"title": "2 Background", "content": "Nowadays, ASP solver clingo supports so-called theory atoms which allow for foreign inference methods [27, 30] following the approach of SAT modulo theories (SMT; [5]). This has greatly facilitated the development of ASP-based special-purpose systems which make use of dedicated inference methods for certain subclasses of constraints such as difference logic and linear programming. The general idea is that some external theory serves as an oracle by certifying some of a program's stable models and has been characterized for clingo in [11]. We proceed by giving a quick introduction of some of the hybrid solvers that are part of the POTASSCO suite 3.\nThe system clingcon is a solver for Constraint Answer Set Programming (CASP) and extends the input language of clingo with linear equations, represented as theory atoms of the form\n$\\&sum{k1*x1; ...;kn*Xn} < ko$\nwhere x\u2081 is an integer variable and k\u012f \u2208 Z an integer constant for 0 < i < n; and \u4eba is a comparison symbol such as <=, =, !=, <, >, >=. In clingo, theory predicates are preceded by '&'.\nSystem clingo[DL] has a more restricted syntax which allows for difference constraints over integers. This is a subset of the syntax in (1) where theory atoms have the fixed form $\\&sum{1*x; (\u22121)*y} <= k$ but are rewritten instead as:\n$\\&diff{x - y} <= k$\nwith x and y integer variables and k \u2208 Z.\nA third system is clingo[LP] 4 which extends clingo to solve linear constraints as dealt with in Linear Programming (LP). The syntax is identical to (1) but the domain now ranges over the real numbers.\nNotably, [11] contains a formal characterization of all three just mentioned systems.\nLastly, a recent addition is system fclingo 5 which makes use of clingcon to solve ASP modulo conditional linear constraints with founded variables. While in clingcon all integer variables need to have a value assigned, fclingo adds a notion of undefinedness and foundedness as known from ASP, ie. there needs to be a justification in the logic program if a variable receives a value in an answer set. Further, the conditional aspect of the linear constraints can be seen as a generalization of the concept of aggregates commonly used in ASP. The syntax of fclingo accomodates so-called assignments which guarantee that a variable only gets assigned a value if all other variables in its definition are itself defined, ie. justified at some other part in the logic program. For instance, the expression\n$\\&in{y..y} =: x$\nonly assigns the value of y to x if y has been defined by some other rule. Omitting the assignment would permit y and x to take arbitrary values if not defined elsewhere, thereby circumventing the principle of foundedness.\nFurther systems not developed by POTASSCO include ASP solver dlvhex [39] which supports a sim-ilar concept of theory atoms as clingo. Other CASP systems include dingo [28], mingo [34] and ezsmt [31]. Different from the aforementioned systems, all three rely on translations to non-ASP solvers."}, {"title": "2.1 Hybrid Solvers", "content": "Nowadays, ASP solver clingo supports so-called theory atoms which allow for foreign inference methods [27, 30] following the approach of SAT modulo theories (SMT; [5]). This has greatly facilitated the development of ASP-based special-purpose systems which make use of dedicated inference methods for certain subclasses of constraints such as difference logic and linear programming. The general idea is that some external theory serves as an oracle by certifying some of a program's stable models and has been characterized for clingo in [11]. We proceed by giving a quick introduction of some of the hybrid solvers that are part of the POTASSCO suite 3.\nThe system clingcon is a solver for Constraint Answer Set Programming (CASP) and extends the input language of clingo with linear equations, represented as theory atoms of the form\n$\\&sum{k1*x1; ...;kn*Xn} < ko$\nwhere x\u2081 is an integer variable and k\u012f \u2208 Z an integer constant for 0 < i < n; and \u4eba is a comparison symbol such as <=, =, !=, <, >, >=. In clingo, theory predicates are preceded by '&'.\nSystem clingo[DL] has a more restricted syntax which allows for difference constraints over integers. This is a subset of the syntax in (1) where theory atoms have the fixed form $\\&sum{1*x; (\u22121)*y} <= k$ but are rewritten instead as:\n$\\&diff{x - y} <= k$\nwith x and y integer variables and k \u2208 Z.\nA third system is clingo[LP] 4 which extends clingo to solve linear constraints as dealt with in Linear Programming (LP). The syntax is identical to (1) but the domain now ranges over the real numbers.\nNotably, [11] contains a formal characterization of all three just mentioned systems.\nLastly, a recent addition is system fclingo 5 which makes use of clingcon to solve ASP modulo conditional linear constraints with founded variables. While in clingcon all integer variables need to have a value assigned, fclingo adds a notion of undefinedness and foundedness as known from ASP, ie. there needs to be a justification in the logic program if a variable receives a value in an answer set. Further, the conditional aspect of the linear constraints can be seen as a generalization of the concept of aggregates commonly used in ASP. The syntax of fclingo accomodates so-called assignments which guarantee that a variable only gets assigned a value if all other variables in its definition are itself defined, ie. justified at some other part in the logic program. For instance, the expression\n$\\&in{y..y} =: x$\nonly assigns the value of y to x if y has been defined by some other rule. Omitting the assignment would permit y and x to take arbitrary values if not defined elsewhere, thereby circumventing the principle of foundedness.\nFurther systems not developed by POTASSCO include ASP solver dlvhex [39] which supports a sim-ilar concept of theory atoms as clingo. Other CASP systems include dingo [28], mingo [34] and ezsmt [31]. Different from the aforementioned systems, all three rely on translations to non-ASP solvers."}, {"title": "2.2 The Logic of Here-and-There and Hybrid Extensions", "content": "The logics HT and Equilibrium Logic nowawadays serve as a logical foundation for (plain) ASP, having brought upon fundamental results such as the notion of strong equivalence [33]. The idea of HT is that of two worlds h and t, generally called here and there. 6 More precisely, an HT-interpretation is a pair (H,T) of sets of atoms such that H C T. This gives rise to a three-valued logic where atoms can either be true, false or undefined. A formula o is satisfied or holds in a model \u3008H,T) in symbols (H,T) |= \u03c6, if it is true in the model, ie. satisfied at the h-world. A model (H,T\u3009 of a theory \u0393 is called an equilibrium model if (i) it is total, ie. H = T, and (ii) for any H' such that H' CT, (H,T) |\u2260 \u0393. The term equilibrium model was coined in [35] and there is complete agreement between equilibrium models and the stable models of logic programs as defined in [21].\nIn an attempt to provide a solid, logical foundation for hybrid systems such as the ones introduced in Section 2.1, a number of extensions of HT for incorporating constraints have been introduced.\nThe Logic of Here-and-There with constraints (HTc; [12]) allows for capturing constraint theories in the non-monotonic setting and has subsequently been extended with aggregate functions over constraint values and variables [9, 10]. In [10] specifications for aggregate functions in terms of HT are given based on two different semantic principles. While the semantics given in [18] ensures that aggregate terms are always defined, [22] prohibits so-called vicious cycles. We also refer to the former as Ferraris and to the latter as Gelfond-Zhang (GZ) aggregate semantics.\nThe Logic of Here-and-there with lower bound founded variables (HTLB; [8]) generalizes the con-cept of foundedness to integer variables. The idea is that variables get assigned the smallest integer value that can be justified. This can be seen as a generalization of plain HT if one regards Boolean truth values as ordered by letting true be greater than false.\nBoth of these extensions can be seen as black-box approaches in the sense that the constraints are incorporated as special entities whose syntax and satisfaction relations are generally left open. Thus, the intricacies of the hybrid part are mostly unknown from the logic program perspective. Another HT extension with a white-box approach of constraints is ASP(AC) [13] which generalizes logical connectives as a particular case of more general operations on weighted formulas over semirings. In this setting, operators like logical conjunction A become just one more possible operation that can be combined with others, such as addition or multiplication (depending on the underlying semiring). This results in a very expressive and powerful formalism but at the price of a more complex semantics and the requirement of a semiring structure.\nFurther white-box approaches are based on the incorporation of intensional or non-Herbrand func-tions in ASP. For instance, [6] added partial intensional functions to a quantified First-Order version of HT [37] and later extended this to sets and aggregates [7]."}, {"title": "2.3 Configuration", "content": "A wide range of approaches exist for representing and solving configuration problems across various paradigms [29, 26]. In recent years, ASP has emerged as a promising alternative, as evidenced by sev-eral applications [20, 16, 23, 24]. Moreover, [15] developed an object-oriented approach to configuration by directly defining concepts in ASP. In the context of interactive configuration, [14] conducted a com-parative evaluation of various systems, including the ASP solver clingo as well as SAT and CP systems, for their suitability in this context, finding clingo to be as capable as any other system."}, {"title": "3 Research", "content": "My research focuses on the foundations of hybrid ASP with the goal of both understanding better its fundamental properties and exploiting this knowledge to guide and improve solver implementations. Further, as this research is motivated by problems in real-world applications, another goal is to better understand the essence of these problems and how they can be solved using hybrid ASP. More precisely, the objective is to find mathematical or logical formalizations of these problems which subsequently serve as basis for succint but general ASP representations. These two goals are reciprocally beneficial as a deeper insight into real-world problems will make clearer the necessary research directions on the foundational level. In the context of applications, my current focus lies on problems in the realm of (industrial product) configuration."}, {"title": "3.1 Contributions and Future Work", "content": "Regarding the theoretical aspects of my research I am currently working on the theoretical foundations of solver fclingo with the goal of improving the current implementation. Here, one of the open issues is that current results in HT only allow for the use of GZ aggregate semantics (see Sec. 2.2) in fclingo. However, we would like to be able to use Ferraris aggregate semantics which guarantee definedness as known from clingo. Our current approach here consists of finding a suitable translation between the two semantics.\nAnother open issue is the formalization of solver clingo[DL] by means of logic HTLB. The concept of assigning a minimal, founded value to integer variables of HTLB seems like a natural match with the difference constraints in clingo[DL] which are defined as inequalities, thus, generally have multiple valid solutions but only one or a few minimal ones.\nOn the practical side of my research, preliminary results have been found in application of (plain and hybrid) ASP to configuration problems. In [40] we developed a principled approach to configuration that included a mathematical formalization of configuration problems with an ASP-based solution. We defined a configuration problem in terms of an abstract model and a concrete instantiation. While the model serves as a blueprint for all possible configurations, the instantation represents a solution. This work was accompanied by a corresponding fact format and two ASP encoding, one for clingo and one for fclingo, which were subsequently made public 7.\nA similar but slightly different work has been done in [4] where we developed the COOMSUITE 8, a workbench for experimentation with industrial-scale product configuration problems. The COOMSUITE is built around product configuration language CoOM[1]9 and provides a Coom grammar for parsing, a specialized ASP translator for conversion into facts, two encodings (one for clingo and one for fclingo) as well as various benchmark sets. The intention is to ease the development of powerful methods able to perform in industrial settings.\nFuture work here includes the further study of suitable representations for hybrid solver fclingo. The current fclingo encodings do not necessarily use all features the solver has to offer, eg. undefinedness of numeric variables, but rather leaves this to non-hybrid ASP. The reason for this is that these encodings have been constructed with a plain ASP encoding as base, only modifying the necessary parts. An approach we want to pursue here is to find a logical formalization of configuration problems in terms of HT and use this as basic for new encodings which make more natural use of fclingo's features. We expect that this will not only improve the knowledge representation but also the performance of the solver."}]}