{"title": "Static Analysis of Logic Programs via Boolean Networks", "authors": ["Van-Giang Trinh", "Belaid Benhamou"], "abstract": "Answer Set Programming (ASP) is a declarative problem solving paradigm that can be used to encode a combinatorial problem as a logic program whose stable models correspond to the solutions of the considered problem. ASP has been widely applied to various domains in AI and beyond. The question \"What can be said about stable models of a logic program from its static information?\" has been investigated and proved useful in many circumstances. In this work, we dive into this direction more deeply by making the connection between a logic program and a Boolean network, which is a prominent modeling framework with applications to various areas. The proposed connection can bring the existing results in the rich history on static analysis of Boolean networks to explore and prove more theoretical results on ASP, making it become a unified and powerful tool to further study the static analysis of ASP. In particular, the newly obtained insights have the potential to benefit many problems in the field of ASP.", "sections": [{"title": "Introduction", "content": "Answer Set Programming (ASP) has emerged as a powerful declarative programming paradigm for solving complex combinatorial problems under the umbrella of logic programming and non-monotonic reasoning [18]. Its basic idea is to describe the specifications of a problem by means of a logic program: solutions of this problem will be represented by the stable models of the logic program [12]. Then the logic program can be fed into a software system called an ASP solver such as DLV, Cmodels, Smodels, or clasp [16], which can compute some or all stable models of this program. With the constant improvements in both theory (e.g., expressive powers) and practice (e.g., efficient ASP solvers), ASP has been successfully ap- plied to a wide range of areas in AI (e.g., planning, knowledge representation and reasoning, semantic web, natural language processing, and argumentation) and beyond (e.g., systems biology, computational biology, bounded model checking, software engineering, robotics, and manufacturing) [13].\nIn general, the problem of deciding if a given ground normal logic program has some stable model is NP-complete [27]. It is thus natural to consider the static analysis of ASP, i.e., answering the question: What can be said about stable models of a logic program from its static information? Herein, a Logic Program (LP) is considered as a ground normal logic program [18] and its static information is mostly considered as graph representations of the LP such as (positive) dependence graphs [14], cycle and extended dependence graphs [7, 8], rule graphs [9], and block graphs [25]. Historically, the first studies of this research direction focused on the existence of a unique stable model in dependence graph-based classes of LPs including positive LPs [18], acyclic LPs [2], and locally stratified LPs [18]. In 1994, Fages proved the most important result about the coincidence between stable models and models of the Clark's completion (equivalently supported models) in tight LPs [14]. Being finer-represented than dependence graphs, cycle and extended dependence graphs were introduced and several improved results were obtained [7, 8]. However, there is quite limited progress regarding this direction. Moreover, it is noted that the cycle graph or the extended dependence graph of an LP can have exponentially many vertices as the LP can have an exponential number of cycles [7] or rules [8], respectively. Recently, we have been only aware of the work [15], which presents new understanding of the positive dependence graph to possibly strengthen some existing theoretical results. In summary, while the static analysis of ASP is important and has a wide range of useful applications in both theory and practice of ASP [14, 7, 11], there is quite limited progress on this research topic.\nBoolean Networks (BNs) are a simple yet efficient mathematical formalism that has been widely applied to many areas from science to engineering [35, 29]: mathematics, systems biology, computer science, theoretical physics, robotics, social modeling, neural networks, etc. A BN includes n Boolean variables associated with n corresponding Boolean functions that determine the value update of a variable over time. In this sense, a BN can be seen as a discrete dynamical system [36, 37]. Originated by the early work [37], the static analysis of BNs (i.e., studying relations between the dynamics of a BN and its influence graph) has a rich history of research [33]. In particular, most results focus on exploring relations between fixed points and the influence graph of a BN, where a fixed point is a state once entered, the BN's dynamics cannot escape from it [4]. To date, this research direction is still growing with many prominent and deep results [33, 32, 34].\nASP has found widespread applications in both the modeling and analysis of BNs. It has been notably used for important tasks on BNs (all are computational ones) such as fixed point enumeration [29], enumeration and approximation of attractors [29, 24], inference of BNs from biological data [31], model repair [17], and reprogramming [23]. In the opposite direction, there is however no significant work trying to use BNs for studying the static analysis of ASP. Indeed, the initial connection between ASP and BNs can be traced back to the theoretical work by [20]. In this work, the authors used LPs to model BNs, and vice versa. However, their investigations were limited to the conceptual level, and no subsequent studies have delved deeper into this connection so far.\nIn this work, we try to explore in depth the static analysis of ASP. Herein, static informa- tion of an LP is considered as its Dependence Graph (DG) [14]. The DG can be efficiently (syntactically) computed from the LP itself and might be in general more compact than other graph representations (e.g., cycle or extended dependence graphs [7, 8]), but can tell many significant insights about stable models of the LP as we shall show in this paper. Our"}, {"title": "Preliminaries", "content": "In this paper, we consider only ground normal logic programs. Unless specifically stated, a Logic Program (LP) means a ground normal logic program. \\(B = \\{0, 1\\}\\) is the Boolean do- main, and all Boolean operators used in this paper include \\(\u2227\\) (conjunction), \\(\u2228\\) (disjunction), \\(\u00ac\\) (negation), and \\(\u2194\\) (bi-implication).\nAn LP P is a finite set of rules of the form \\(p \u2190 p_1, ..., p_m, \\tilde p_{m+1}, ..., \\tilde p_k\\) where p and \\(p_i\\) are variable-free atoms (\\(k > m \u2265 0\\)), \\(\u223c\\) denotes the negation as failure. We use atom(P) to denote the set of all atoms of P. For any rule r of this form, p is called the head of r (denoted by h(r)), \\(b^+(r) = \\{p_1, ..., p_m\\}\\) is called the positive body of r, \\(b^\u2212(r) = \\{p_{m+1}, ..., p_k\\}\\) is called the negative body of r, \\(b(r) = b^+(r) \\cup b^\u2212(r)\\) is the body of r, and bf(r) = p1 \u2227 ... \u2227 pm \u2227 \u00acpm+1 \u2227 ... \u2227 \u00acpk is the body formula of r. If b(r) = \u2205, then r is called a fact and bf(r) is conventionally 1. An Herbrand interpretation I is a subset of atom(P), and is called an Herbrand model if for any rule r in P, \\(b^+(r) \u2286 I\\) and \\(b^\u2212(r) \u2229 I = \u2205\\) imply h(r) \u2208 I. P is positive if \\(b^\u2212(r) = \u2205\\) for all r \u2208 P. In this case, P has a unique least Herbrand model. An Herbrand interpretation I is a stable model of P if I is the least Herbrand model of the reduct of P with respect to I (denoted by PI) where \\(P^I = \\{h(r) \u2190 \\bigwedge_{p\u2208b^+(r)} p | r \u2208 P, b^\u2212(r) \u2229 I = \\emptyset\\}\\). We use sm(P) to denote the set of all stable models of P.\nThe Clark's completion of an LP P (denoted by cf(P)) consists of the following sentences: for each p \u2208 atom(P), let \\(r_1, ..., r_l\\) be all the rules of P having the same head p, then \\(p \u2194 bf(r1) \u2228 ... \u2228 bf(rl)\\) is in cf(P). If l = 0, then the equivalence is \\(p \u2194 0\\). In this paper, we shall identify a truth assignment with the set of atoms true in this assignment, and conversely, identify a set of atoms with the truth assignment that assigns an atom true iff it is in the set. Under this convention, a model of cf(P) is also a Herbrand model of P.\nAn Herbrand model A is a supported model if for any atom p \u2208 A, there is a rule r \u2208 P such that h(r) = p, \\(b^+(r) \u2286 A\\), and \\(b^\u2212(r) \u2229 A = \u2205\\). We use supp(P) to denote the set of all supported models of P. It is well-known that supported models of P coincide with models"}, {"title": "Main Results", "content": "For clarification, we make a summary of the results that shall be presented in this sec- tion. First, the known results with formal proofs include Theorem 1, Proposition 4, and Theorem 13. Second, the known results in the ASP folklore without formal proofs include Theorems 9 and 12. Third, the completely new results include Theorems 2 and 3, Proposi- tions 5 and 6, Lemmas 7 and 8, Proposition 10, Lemma 11, and Theorem 14."}, {"title": "Logic Programs and Boolean Networks", "content": "First of all, we recall Fages' theorem (see Theorem 1).\nTheorem 1 ([14]). Let P be an LP. If \\(dg^+(P)\\) has no cycle, then the set of stable models of P coincides with the set of supported models of P.\nNext, we define the BN encoding for LPs (see Definition 1)."}, {"title": "Cycles and Stable Models", "content": "We start with revisiting one well-known result in ASP (see Proposition 4). We provide a new proof for it, which relies on the relation between an LP and a BN.\nProposition 4. Let P be an LP. If dg(P) has no cycle, then P has exactly one stable model.\nProof. Let f be the encoded BN of P. Since \\(dg^+(P) \u2286 dg(P)\\), \\(dg^+(P)\\) has no cycle, then sm(P) = supp(P) by Theorem 1. Since ig(f) \u2286 dg(P), ig(f) has no cycle. By Theorem 1 of [33], f has a unique fixed point, thus P has a unique stable model.\nProposition 4 is the consequence of Theorem 2.5(iv) of [2] and Fages' theorem. Theorem 2.5(iv) of [2] shows that if dg(P) has no cycle, then cf(P) has a unique model, which is also the unique stable model of P by Fages' theorem. Indeed, the BN-based proof that we provide here is quite simpler than the above proof. We then present two newly small results considering LPs with very special structures (see Propositions 5 and 6). See Example 2 for illustration.\nProposition 5. Let P be an LP. Suppose that dg(P) is a positive cycle. If dg(P) has a negative arc, then P has exactly two stable models. Otherwise, P has exactly one stable model.\nProof. Let f be the BN encoding of P. Since dg(P) is a positive cycle, the in-degree of each vertex is one, leading to every fu is constant-free. Hence, ig(f) is also a positive cycle. By [30], f has exactly two fixed points. If dg(P) has a negative arc, then \\(dg^+(P)\\) has no cycle. It follows that supp(P) = sm(P) by Theorem 1. Hence, P has exactly two stable models. If dg(P) has no negative arc, then P is positive. Hence, it has exactly one stable model.\nIn the proof of Proposition 5, if P has exactly two stable models (say A and B), then A \u2229 B = \u2205 and A \u222a B = atom(P), since A and B are also the two fixed points of f where \\(A_v \\neq B_v, \u2200v \u2208 var_f\\) by [30]. Otherwise, the unique stable model of P is \u2205.\nProposition 6. Let P be an LP. Suppose that dg(P) is a negative cycle. Then P has no stable model.\nProof. Let f be the BN encoding of P. Since dg(P) is a negative cycle, the in-degree of each vertex is one, leading to every f is constant-free. Hence, ig(f) is also a negative cycle. By [30], f has no fixed point. It follows that P has no supported model. Since a stable model is also a supported model, P has no stable model.\nExample 2. Let P\u2081 be the LP: a \u2190 ~b; b \u2190 ~c; c \u2190 a. Let P\u2082 be the LP: a \u2190 b; b \u2190 ~c; c \u2190 a. Figures 2(a) and 2(b) show the DGs of P\u2081 and P\u2082, respectively. dg(P1) is a positive cycle and it has two negative arcs. P\u2081 has two stable models (A\u2081 = {a, c}, A\u2082 = {b}), which is consistent with Proposition 5. We also see that \\(A_1 \u2229 A_2 = \u2205\\) and \\(A_1 \u222a A_2 = \\{a, b, c\\} = atom(P_1)\\). dg(P2) is a negative cycle and P2 has no stable model, which is consistent with Proposition 6.\nNext, we investigate more deeply the effect of positive and negative cycles of the DG of P on its stable models. Recall that a Positive Feedback Vertex Set (PFVS) of a signed directed graph G is a set of vertices intersecting all positive cycles of G [33]."}, {"title": null, "content": "Lemma 7. Let P be an LP. If P has two distinct stable models (say A\u2081 and A\u2082), then dg(P) has a positive cycle C+ such that for every v \u2208 C+, either v \u2208 A\u2081 or v \u2208 A\u2082.\nProof. Let f be the BN encoding of P. A\u2081 and A\u2082 are also distinct supported models of P. By Theorem 3, A\u2081 and A\u2082 are distinct fixed points of f. By Lemma 1\u00b9 of [33], ig(f) has a positive cycle C+ such that for every v \u2208 C+, A\u2081(v) \u2260 A\u2082(v), i.e., either v \u2208 A\u2081 or v \u2208 A\u2082 because A1(v), A2(v) \u2208 B. C+ is also a positive cycle of dg(P) because ig(f) is a subgraph of dg(P).\nLemma 8. If a sign directed graph G is strongly connected and has no negative cycle or has no positive cycle, then G is sign-definite.\nProof. We first prove that each arc of G belongs to a cycle in G (*). Taken an arbitrary arc (uv, \u03b5) in G. Since G is strongly connected, there is a directed path from v to u. By adding (uv, \u03b5) to this path, we obtain a cycle.\nAssume that G is not sign-definite. Then there are two arcs: (uv, \u2295) and (uv, ). By (*), (uv, \u2295) (resp. (uv, )) belongs to a cycle in G (say C). C is a positive (resp. negative) cycle because G has no negative (resp. positive) cycle. Then (C \u2212 (uv, \u2295)) + (uv, ) (resp. (C \u2212 (uv, )) + (uv, \u2295)) is a negative (resp. positive) cycle in G. This implies a contradiction. Hence, G is sign-definite.\nTheorem 9. Let P be an LP. If dg(P) has no positive cycle, then P has at most one stable model. In addition, if P has no fact and every atom appears in the head of a rule in P, then P has no stable model."}, {"title": null, "content": "Proof. Assume that P has at least two stable models. Then dg(P) has a positive cycle by Lemma 7, which is a contradiction. Hence, P has at most one stable model.\nSince P no fact and every atom appears in the head of a rule in P, each vertex of dg(P) has at least one input vertex. Let G* be a strongly connected subgraph of dg(P) such that there is no arc from a vertex outside G* to a vertex in G*. Since dg(P) has no positive cycle, then G* also has no positive cycle. By Lemma 8, G* is sign-definite. Let f be the BN encoding of P. Since there is no arc from a vertex outside G* to a vertex in G*, there is a BN f* on the set of variables that are vertices of G* and \\(f^*_v = f_v, \u2200v \u2208 var_{f^*}\\).\nSince each vertex of dg(P) has at least one input vertex, each vertex of G* also has at least one input vertex. Let v be an arbitrary vertex in G*. Since G* is sign-definite, the sets of positive and negative input vertices of v are disjoint. By assigning 0 to all positive input vertices of v in G* and 1 to all negative input vertices of v in G*, we have \\(f^*_v = 0\\). Symmetrically, assigning 1 to all positive input vertices of v in G* and 0 to all negative input vertices of v in G*, we have \\(f^*_v = 1\\). Hence, \\(f^*_v\\) cannot be constant. It implies that the minimum in-degree of ig(f*) is at least one. Clearly, ig(f*) is a subgraph of G*, leading to ig(f*) has no positive cycle. Then f* has no fixed point by Theorem 22 of [6]. Let \u03b3(f) and (f*) be the SAT formulas characterizing fixed points of f and f*, respectively. Since f* has no fixed point, \u03b3(f*) has no model. Clearly, \u03b3(f*) is part of \u03b3(f), thus \u03b3(f) has no model. Hence, f has no fixed point. It follows that P has no supported model. Since a stable model is also a supported model, P has no stable model.\nProposition 10. Let P be an LP. For any PFVSU+ of dg(P), we have that \\(|sm(P)| \u2264 2^{|U^+|}\\).\nProof. Let f be the BN encoding of P. Since U+ is a PFVS of dg(P), dg(P) \u2212 U+ has no positive cycle. Since ig(f) \u2286 dg(P), ig(f) \u2212 U+ also has no positive cycle. Therefore, U+ is a PFVS of ig(f). By Theorem 9 of [4], \\(|fix(f)| \u2264 2^{|U^+|}\\). Since |sm(P)| \u2264 |fix(f)|, we can conclude that |sm(P)| \u2264 \\(2^{|U^+|}\\).\nNote that Proposition 10 can be directly proved by using Theorem 9. The main idea is that in any stable model of P, each atom in U+ can be either true or false. For each assignment of atoms in U+, we get a new LP whose DG has no positive cycle, then it has at most one stable model by Theorem 9. There are \\(2^{|U^+|}\\) possible assignments of atoms in U+, hence we can deduce \\(|sm(P)| \u2264 2^{|U^+|}\\).\nIt is well-known in the BN field that if ig(f) has no negative cycle, then f has at least one fixed point (Theorem 6 of [4]). Naturally, it is interesting to question whether an LP whose DG has no negative cycle has at least one stable model or not. Fages showed a counterexample for the case of infinite logic programs [14], but the case of finite logic programs is still open. We answer this question by Theorem 12.\nTo prove Theorem 12, we use the fixpoint semantics of logic programs [10]. To be self-contained, we briefly recall the definition of the least fixpoint of a logic program. A quasi-interpretation is a set possibly infinite of rules of the form \\(p \u2190 \\tilde p_1, ..., \\tilde p_k\\) where k \u2265 0 and \\(p, p_1, ..., p_k \u2208 atom(P)\\). Let r be the rule \\(p \u2190 \\tilde p_1, ..., \\tilde p_k\\), \\(q_1, ..., q_j\\) and let ri be rules \\(q_i \u2190 \\tilde q^1_i, ..., \\tilde q^{l_i}_i\\) where 1 \u2264 i \u2264 j and \\(l_i \u2265 0\\). Then \\(T_r(\\{r_1, ..., r_j\\})\\) is the rule"}, {"title": null, "content": "\\(p \u2190 \\tilde p_1, ..., \\tilde p_k, \\tilde q^1_1, ..., \\tilde q^{l_1}_1, ..., \\tilde q^1_j, ..., \\tilde q^{l_j}_j\\). We now introduce the transformation Tp on quasi-interpretations: \\(T_P(Q) = \\{T_r(\\{r_1, ..., r_j\\}) | r \u2208 P, r_i \u2208 Q, 1 \u2264 i \u2264 j\\}\\). Let lfp\u2081 = \\(T_P(\u2205)\\) = \\(T_P(T_P(...T_P(\u2205)))\\), then lfp = \\(\u222a_{i\u22651} lfp_i\\) is the least fixpoint of P.\nLemma 11. Let P be an LP and P' be its least fixpoint. If dg(P) has no negative cycle, then dg(P') has no negative cycle.\nProof. By Lemma 5.3 of [14], if vertex a has a negative path to vertex b in dg(P'), then a has also a negative path to b in dg(P). Note that the set of vertices of dg(P') is a subset of that of dg(P). It follows that if there is a negative cycle in dg(P'), then there is also a negative cycle in dg(P). Hence, if dg(P) has no negative cycle, then dg(P') has no negative cycle.\nTheorem 12. Let P be an LP. If dg(P) has no negative cycle, then P has at least one stable model.\nProof. Let P' be the least fixpoint of P. By Lemma 11, dg(P') has no negative cycle. Let f' be the encoded BN of P'. Since ig(f') \u2286 dg(P'), ig(f') also has no negative cycle. Therefore, f' has at least one fixed point by Theorem 6 of [4]. By Theorem 3, supp(P') = fix(f'). It is known that sm(P) = supp(P') (Theorem 4 of [10]). This implies that sm(P) = fix(f'). Hence, P has at least one stable model.\nThe technique used to prove Theorem 12 suggests a potential way to explore more theo- retical results: picking up a structural property of dg(P), seeing what it becomes in the DG of the least fixpoint of P, and checking how fixed points of the encoded BN of the least fix- point behave under the new property. For illustration, consider the class of locally stratified LPs. P is locally stratified if every cycle of dg(P) contains no negative arc [18]. Considering this property, we can prove that the DG of the least fixpoint of P has no cycle. In this case, the least fixpoint has exactly one stable model, leading to P has so. See the detailed proof in Theorem 13. This provides an alternative (maybe simpler) proof for the well-known result stating that a locally stratified LP has a unique stable model (Theorem 6.2.7 of [19]).\nTheorem 13. Let P be an LP. If P is locally stratified, then P has exactly one stable model.\nProof. Let P' be the least fixpoint of P. Recall that P' = lfp = \\(\u222a_{i\u22651} lfp_i\\). We show that dg(lfp i) has no cycle by induction on i.\nThe base case is trivial (i.e., i = 0). Consider an arbitrary rule r \u2208 lfpi+1 \\ lfp\u00bf. Let b = h(r) and a \u2208 b\u2212(r). By definition, there exists a rule r' \u2208 P such that h(r') = b and a \u2208 b\u2212(r'') with r'' \u2208 lfp i and h(r'') \u2208 b+(r'). Let c = h(r''). We use b \u2264\u2295 a (resp. b \u2264 a) to denote that there is a positive (resp. negative) path from b to a. We have that a \u2264 b in dg(lfpi+1). Note that lfp i \u2286 lfpi+1 by definition. If b \u2264\u2295 a in dg(lfp i), then b \u2264 a in dg(lfp i+1), leading to b \u2264 b in dg(lfp i+1) (also in dg(P')), which is a contradiction because dg(P') has no negative cycle by Lemma 5.3 of [14]. If b \u2264 a in dg(lfp i), then b \u2264 a in dg(P'), leading to b \u2264 a in dg(P) by Lemma 5.3 of [14]. Similarly, a \u2264 c in dg(P), since a \u2208 c in dg(lfp i). We use b \u2264o a to denote that there is a path of only positive arcs from b to a. We have c \u2264ob in dg(P). Then there is a cycle containing b and also negative arcs in dg(P), which is a contradiction because P is locally stratified. Hence, there is no path from"}, {"title": null, "content": "b to a in dg(lfpi). Since dg(lfp i) has no cycle by the induction hypothesis and adding the rule r to lfp does not introduce new cycles, dg(lfpi+1) has no cycle.\nIt follows that dg(P') has no cycle, then P' has exactly one stable model by Proposition 4. Since sm(P) = sm(P') by Theorem 4 of [10], P also has exactly one stable model.\nFinally, inspired by Theorem 12, we explore an interesting result shown in Theorem 14, which is actually the generalization of Proposition 5.\nTheorem 14. Let P be an LP. Suppose that dg(P) is strongly connected, has at least one arc, and has no negative cycle. If \\(dg^+(P)\\) has no cycle, then P has two stable models A and B such that \\(\u2200v \u2208 atom(P)\\), either v \u2208 A or v \u2208 B. In addition, A and B can be computed in polynomial time.\nProof. Let f be the BN encoding of P. Since \\(dg^+(P)\\) has no cycle, sm(P) = supp(P) = fix(f) by Theorems 1 and 3. We show that f has two fixed points that are complementary.\nSince dg(P) is strongly connected and has no negative cycle, it is sign-definite by Lemma 8. It implies that ig(f) is also sign-definite because ig(f) \u2286 dg(P). dg(P) has the minimum in-degree of at least one because it is strongly connected and has at least one arc. By using the deduction similar to that in Theorem 9, we have that f has no constant function. It is known that when dg(P) is strongly connected and has no negative cycle, its set of vertices can be divided into two equivalence classes (say S+ and S\u2212) such that any two vertices in S+ (resp. S\u2212) are connected by either no arc or a positive arc, and there is either no arc or a negative arc between two vertices in S+ and S\u2212 (Theorem 1 of [1]). Since ig(f) \u2286 dg(P) and ig(f) has the same set of vertices with dg(P), S+ and S\u2212 are still such two equivalence classes in ig(f).\nLet x be a state defined as: xi = 1 if i \u2208 S+ and xi = 0 if i \u2208 S\u2212. Consider a given node j. If xj = 0, by the above result, for all i \u2208 atom(P) such that ig(f) has a positive arc from i to j, xi = 1, and for all i \u2208 atom(P) such that ig(f) has a negative arc from i to j, xi = 0. Since f j cannot be constant, fj (x) = 1. Analogously, if xj = 1, then fj (x) = 1, implying that x is a fixed point of f. By using the similar deduction, we can conclude that x\u00af is also a fixed point of f where x\u00afi = 1 \u2212 xi, \u2200i \u2208 var f. Let A and B are two models of P corresponding to x and x\u00af. Clearly, A and B are stable models of P. We have that \u2200v \u2208 atom(P), either v \u2208 A or v \u2208 B. In addition, since S+ and S\u2212 can be computed in polynomial time, A and B can be computed in polynomial time.\nExample 3. Consider an LP P: a \u2190 ~b, b \u2190 ~a, b \u2190 ~c, c \u2190 ~b. The encoded BN f of P is: fa = \u00acb, fb = \u00aca \u2228 \u00acc, fc = \u00acb. dg(P) is strongly connected, has at least one arc, and has no negative cycle. Since \\(dg^+(P)\\) has no cycle, P has two stable models. Actually, P has two stable models: A = {b} and B = {a, c}. We easily see that \\(A \u2229 B = \u2205\\) and \\(A \u222a B = atom(P)\\)."}, {"title": "Discussion", "content": "Theorem 3 and the subsequent results immediately suggest that we can compute stable models of an LP P by using fixed points of its encoded BN f. Recall that a fixed point of f"}, {"title": "Computation of stable models", "content": "may be not a stable model of P, but checking whether a fixed point is a stable model or not can be done in linear time [12]. Notably, there is a rich history for computing fixed points in BNs: SAT-based methods [28], ILP-based methods [28], and structure-based methods [5].\nWe can first check if \\(dg^+(P)\\) does not contain any cycle. If so, sm(P) = fix(f) and we can apply directly some efficient methods for fixed point computation. Otherwise, we need to check if each fixed point is a stable model or not. This approach would be efficient if |fix(f) \\ sm(P)| is not too large. Note however that we can estimate |fix(f)| in prior by using some known upper bounds of the number of fixed points of a BN (e.g., \\(2^{|U^+|}\\) where U+ is a PFVS of dg(P), which can be efficiently computed by using some approximation methods [33] because U+ is unnecessarily minimum). If the chosen bound is too large, we can apply some transformations (e.g., [21]) to P to get a new LP P' such that sm(P) = sm(P') = fix(f') where f' is the encoded BN of P'. Such a transformation might introduce more atoms, but it seems that there are less changes in cycle structures (e.g., the size of the minimum PFVS seems to still retain [21]). In this case, structure-based methods for fixed point computation, especially the PFVS-based method [5] whose complexity is \\(O(2^{|U^+|} \u00d7 n^{2+k})\\) where the Boolean functions of the BN can be evaluated in time O(nk), would be very helpful in complementary to standard ASP solvers such as Cmodels, Smodels, and clasp."}, {"title": "Program correction", "content": "Theorem 12 has the potential to be useful in some other problems in ASP. It is related to the program correction problem [22], where we intend to modify an inconsistent LP P incon (i.e., having no stable model) to make it consistent (i.e., having at least one stable model). For example, by making some modification operators (e.g., removing rules, flipping signs of literals) such that dg(P incon) has no negative cycle, we can obtain the consistency for P incon.\nThese modifications might be not minimal, but they might provide a good upper bound for further searching. In the opposite direction, we might want to modify a consistent LP P con to make it inconsistent. By Theorem 9, we can make modifications such that dg(P con) has no positive cycle. Such a problem might be useful in program verification where the validation of a property can be encoded as the unsatisfiability of an SAT formula [26] or the inconsistency of an LP. We believe that exploiting Theorems 9 and 12 will give more benefits to the program correction problem, which we plan to study deeply in future."}, {"title": "Interplay between positive and negative cycles", "content": "The results presented in this paper show that positive and negative cycles are key structures to understand the relations between stable models and the DG of an LP. However, they use only information on either positive cycles or negative cycles. It is then natural to think that by using both kinds of cycles simultaneously, we can obtain more improved results. Indeed, this approach for BNs has been thoroughly investigated with many insightful results [32, 33, 34]. For example, it has been shown that if the IG of a BN has negative cycles but these cycles are isolated by positive cycles, then the BN behaves as in the absence of negative cycles, i.e., it has at least one fixed point [32]. Adapting these results for BNs to LPs seems to be promising as we are not aware of any similar studies in LPs. However, this direction is non-trivial because the mix between positive and negative cycles might hinder the techniques"}, {"title": null, "content": "that we propose in this paper. Other techniques, maybe still being under the umbrella of the connection between LPs and BNs, might be needed."}, {"title": "Conclusion and Future Work", "content": "Static analysis of ASP is important and has been proved very useful in both theory and practice of ASP. In this work, we for the first time bridged between ASP and BNs, and used this connection to study the static analysis of ASP at that depth. Specifically, we stated and proved several relations between positive and negative cycles in the DG of an LP and its stable models. The most important obtained results include 1) the existence and the non-existence of some stable model under the non-existence of negative cycles and the non-existence of positive cycles, respectively, 2) an upper bound of the number of stable models based on PFVSs, and 3) the connection and techniques we established, which provide a powerful and unified framework for exploring and proving more new theoretical results in ASP. In particular, we also demonstrated that the obtained results have the potential to be useful for solving two important problems in the field of ASP.\nIn the future, on the one hand, we shall explore more theoretical results following up the approach we established in this paper. First, we shall continue to discover more results by considering how a"}]}