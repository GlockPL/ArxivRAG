{"title": "Generative Sentiment Analysis via Latent Category Distribution and Constrained Decoding", "authors": ["Jun Zhou", "Dongyang Yu", "Kamran Aziz", "Fangfang Su", "Qing Zhang", "Fei Li", "Donghong Ji"], "abstract": "Fine-grained sentiment analysis involves extracting and or-ganizing sentiment elements from textual data. However, existing ap-proaches often overlook issues of category semantic inclusion and over-lap, as well as inherent structural patterns within the target sequence. This study introduces a generative sentiment analysis model. To address the challenges related to category semantic inclusion and overlap, a la-tent category distribution variable is introduced. By reconstructing the input of a variational autoencoder, the model learns the intensity of the relationship between categories and text, thereby improving sequence generation. Additionally, a trie data structure and constrained decoding strategy are utilized to exploit structural patterns, which in turn reduces the search space and regularizes the generation process. Experimental re-sults on the Restaurant-ACOS and Laptop-ACOS datasets demonstrate a significant performance improvement compared to baseline models. Ab-lation experiments further confirm the effectiveness of latent category distribution and constrained decoding strategy.", "sections": [{"title": "1 Introduction", "content": "Sentiment analysis, especially the fine-grained Aspect-Based Sentiment Analysis (ABSA), plays a vital role in Natural Language Processing (NLP) [11]. ABSA aims to convert unstructured text into structured records to achieve a profound comprehension of sentiment semantics. For instance, in the comment \"as far as gaming performance, the m370x does quite well\", the ABSA quadruple extraction task [3] seeks to extract aspect-level sentiment elements, including aspect, category, opinion, and sentiment polarity, represented as a structured quadruple (m370x, GRAPHICS#OPERATION_PERFORMANCE, well, POS). Given its"}, {"title": "3 Task Definition", "content": "The objective of sentiment quadruple extraction is to extract structured quadru-ples (a, c, o, s) from a given comment $X = [x_1,...,x_N]$ [3]:\n$X\\Rightarrow [(a_1, c_1, o_1, s_1), (a_2, c_2, o_2, s_2), ...]$                                    (1)\nwhere a represents the aspect, c denotes the category to which the aspect belongs, o signifies the opinion, and s indicates the sentiment polarity of the opinion. Since this study adopts a generative manner to the extraction task, using a Sequence-to-Sequence (Seq2Seq) framework to convert X into a linearized augmented language sequence Y [8], the task is specifically transformed into:\n$X \\rightarrow Y = [y_1, y_2,...$                                                         (2)\nwhere Y is a word sequence consisting of the essential elements of the quadruples, which can be extracted by parsing Y."}, {"title": "4 Model Structure", "content": ""}, {"title": "4.1 Latent Category Distribution", "content": "Latent Category Distribution (LCD) module (refer to Figure 1) models category distribution within text following Fei et al. [5], using a latent variable instead of explicit measurement. It reconstructs the variational autoencoder input to learn the LCD representation Z.\nEncoder The input to the LCD module is the Category Bag of Words (CBoW) features [5] $X_{Cbow} \\in R^L$. The construction of CBoW features involves: 1) Removing stopwords, meaningless words, and sentiment-related words from texts while preserving category- and aspect-related words to construct a CBOW vocabulary of length L. This step aims to ensure that representation Z contains comprehensive category information rather than general semantic information, while decreasing the BoW vocabulary size is beneficial for VAE training [5]. 2)\n$\n\\mu = f_\\mu(X_{CBOW})                                                              (3)\n$\n$log\\sigma = f_\\sigma(X_{CBOW})                                                                (4)\n$\nFollowing Bowman et al. [1], a latent variable $Z' = \\mu + \\sigma \\cdot \\epsilon \\in R^K$ is defined to represent the latent category distribution, where K is the number of categories, $\\epsilon$ is a Gaussian noise variable sampled from N(0,1). Z' is then normalized as follows:\n$Z = softmax(Z')$                                                             (5)\nConsequently, the latent category distribution can be reflected by variable Z.\nDecoder The LCD module employs variational inference [10] to approximate a posterior distribution over Z. It begins by applying a linear transformation $f_{lcd}( \\cdot )$ to Z:\n$R^{lcd} = f_{lcd}(Z, W_{lcd})$                                                    (6)\nwhere $W_{lcd} \\in R^{K \\times dim}$, dim is the encoding dimension. $R^{lcd}$ will be fed into the generative framework (Section 4.2) with category distribution information to enhance the generation. Subsequently, a FFNS $f_R( \\cdot )$ is employed to further decode $R^{lcd}$ into R:\n$R = f_R(R^{lcd}, W_R)$                                                        (7)"}, {"title": "4.2 Generative Framework", "content": "Encoder The generative framework (refer to Figure 1) employs a T5 encoder [14] for input encoding. Given a comment $X = [x_1,...,x_N]$, the encoder first converts the token sequence into a high-dimensional vector representation $E \\in R^{N \\times dim}$ using an internal embedding layer, where N is the sequence length, and dim is the dimension of the representation.\nSubsequently, E is passed through the T5 encoder which comprises multiple layers of Transformer [15] structure, to calculate context-aware representations:\n$H^{enc} = T5Encoder(E)$                                                  (10)\nwhere $H^{enc} \\in R^{N \\times dim}$.\nCategory-Text Attention After encoding the input sequence into represen-tation $H^{enc}$, the model computes attention score of the latent category distri-bution over the input sequence, to establish the relationship between them. The attention score is calculated as follows:\n$e_j = \\frac{dot(R^{lcd}, H^{enc})}{\\sqrt{dim}}$                                               (11)\nwhere dot() is the dot product, and $j \\in [1, N]$. Following this, e is fed to a softmax function to calculate the attention weights:\n$a = softmax(e)$                                                       (12)\na is then applied as weights to the representation of the input sequence to obtain the output vector V of the encoder:\n$V_j = a_j H^{enc}$                                                     (13)\nThe vector V, representing the input text and incorporating LCD information, is then fed into the decoder to provide contextual information for decoding."}, {"title": "Decoder", "content": "The model employs a T5 decoder [14] to sequentially generate the output sequence $Y = [y_1, . . ., y_i, . . .]$ in an auto-regressive manner. When predicting the output at step i, the decoder uses the context vector V and the previous outputs $y_{<i}$ as inputs to calculate the current hidden state of the decoder:\n$H^{dec} = T5Decoder(V, y_{<i})$                                                  (14)\nHere, each T5Decoder(\u00b7) layer comprises a Transformer structure and a cross-attention mechanism [15] for enhancing the representation of $H^{dec}$. The proba-bility distribution over target vocabulary at step i is calculated as follows:\n$P(y_i | y_{<i}, V) = Softmax(W H^{dec} + b)$                                          (15)\nwhere $W \\in R^{|V| \\times dim}$, V is the target vocabulary, and b is a bias vector.\nThe decoder repeats this procedure until it encounters the end token \u201c(eos)\u201d or reaches the maximum specified output length."}, {"title": "Loss Function", "content": "The loss function of the generative framework is defined as the cross-entropy loss between the generated sequence and the target sequence:\n$L(\\theta) = - \\sum_{i=1}^{M} log P(y_i | y_{<i}, V)$                                        (16)\nwhere $\\theta$ represents the parameters of the generative framework, and M is the length of the target sequence."}, {"title": "4.3 Constrained Decoding", "content": "Target Sequence Pattern Knowledge In generative models, a commonly used decoding approach is greedy decoding [8], where the model calculates the probability distribution over the entire vocabulary at each decoding step, and selects the word with the highest predicted probability as the output.\nHowever, this decoding strategy may lead to invalid structure patterns. For instance, 1) due to the limited number of category types, greedy decoding us-ing the entire vocabulary may yield invalid categories, 2) since each category corresponds to distinct subcategories, greedy decoding might generate subcat-egories that do not align with that category, 3) as sentiment polarity is finite, greedy decoding could result in invalid sentiment polarities, 4) incomplete se-quence structures, such as the failure to generate pairs of brackets, may occur. Following Lu et al. [8], information regarding the structural patterns of the tar-get sequence, which can be used to regulate its generation process, is referred to as target sequence pattern knowledge in this paper.\nConstrained Decoding Strategy Pattern knowledge of the target sequence can constrain the decoding process, reducing the search space and enhancing"}, {"title": "5 Experiments", "content": ""}, {"title": "5.1 Datasets", "content": "Two datasets, Restaurant-ACOS [3] and Laptop-ACOS [3], are used to evalu-ate model performance. Each sample comprises a review text and annotated sentiment quadruples, as summarized in Table 1.\nThese datasets also introduce the concept of implicit elements, where aspects or opinions within the review are considered implicit if they are not explicitly stated. For example, in the review \u201capparently apple isn't even trying anymore\u201d, the annotated quadruple (apple, COMPANY#GENERAL, Null, NEG) indi-cates that the opinion towards the aspect \"apple\" is not explicitly stated in the review and is considered implicit, labeled as \"Null\" in the annotation.\nThe statistics of implicit elements is shown in Table 2. Here, EA&EO repre-sents quadruples with only explicit aspects and opinions, IA&EO indicates those with implicit aspects and explicit opinions, EA&IO covers quadruples with ex-plicit aspects and implicit opinions, and IA&IO denotes quadruples with only implicit aspects and opinions."}, {"title": "5.2 Experimental Setup", "content": "A GeForce RTX 3090 (24GB) was utilized for computation. T5-base model was employed with a training batch size of 16, and encoding and hidden layer di-mensions set to 768. The AdamW optimizer was employed with a learning rate of 2e-5, and dropout was applied at a rate of 0.2. Experiments were initialized five times randomly, and the average result was considered the final outcome."}, {"title": "5.3 Baselines", "content": "The subsequent models were employed for comparative analysis:\nExtractive: DP-ACOS [3]: Utilizes the DP algorithm to extract sentiment triplets (a, o, s) and then determines the category of each triplet. JET-ACOS [3]: Employs JET [17] to extract triplets (a, o, s) and then predicts category of each triplet. TB-ACOS [3]: Utilizes TAS-BERT [16] for aspect-opinion joint ex-traction based on category-sentiment, then filters out invalid pairs. EC-ACOS [3]: Performs aspect-opinion joint extraction, then predicts category-sentiment pairs. SGTS [23]: Captures high-dimensional features of sentences, then uses grid labeling scheme and its decoding method for extraction.\nGenerative: BARTABSA [18]: A model based on BART [7], generates sen-timent quadruples by predicting the indices of target words and sentiment cate-gories. GAS [21]: Using T5, GAS models sentiment analysis and various subtasks as generative tasks. Paraphrase [20]: Transforms the quadruple extraction task into a paraphrase generation process using predefined templates. Seq2Path [9]: Formalizes the generated content as a tree, with sentiment tuples representing the paths of the tree."}, {"title": "6 Experimental Results and Analyses", "content": ""}, {"title": "6.1 Main Results", "content": "Table 3 presents the experimental results of the proposed model and baseline models on two datasets. The results highlight the superiority of generative models over extractive models. This advantage can be attributed primarily to two factors: 1) treating the extraction task as an end-to-end sequence generation problem reduces error propagation; 2) uniformly modeling the generation of each quadruple element facilitates more effective utilization of semantic knowledge in pretrained models, enhancing semantic sharing and decision interaction.\nFurthermore, the results in Table 3 suggest that the proposed model, utilizing LCD and CD, outperforms the comparing generative models on both datasets. Specifically, on the Restaurant-ACOS dataset, compared to the baseline model GAS, the proposed model shows a decrease of 0.004 in Precision, but an increase"}, {"title": "6.2 Implicit Element Extraction Results", "content": "As noted in Section 5.1, both datasets include implicit elements [3], which are not explicitly stated in the reviews. These elements necessitate a comprehensive understanding of the text and present a challenge for models, thus attracting considerable attention in recent sentiment analysis research [20, 23].\nTo assess the capacity of models in extracting implicit elements, the test set was divided into four subsets: EA&EO, IA&EO, EA&IO, and IA&IO, each targeting specific type of quadruples, whose meanings were introduced in Section 5.1. Results in Table 4 indicate that models excel in extracting explicit elements compared to implicit ones. For instance, on the Restaurant-ACOS dataset, the proposed model achieves an F1 score of 0.661 on the EA&EO subset, which is comprised solely of explicit elements, significantly outperforming scores of 0.544, 0.442, and 0.413 on the other three subsets containing implicit elements. Similar trends are also observed on the Laptop-ACOS dataset. These results highlight the challenge of extracting implicit elements."}, {"title": "6.3 Ablation Study", "content": "To assess the effectiveness of the proposed LCD module and CD strategy, ab-lation experiments were conducted on the datasets. Results in Table 5 indicate the impact of removing the LCD module (w/o LCD), excluding the CD strategy (w/o CD), and simultaneously excluding both components (w/o LCD&CD).\nAs shown in Table 5, performance deteriorates when LCD and CD are ex-cluded. Specifically, on the Restaurant-ACOS dataset, the removal of LCD alone resulted in an F1 decrease of 0.009, while excluding CD alone led to an F1 de-crease of 0.012. Simultaneous removal of both components resulted in an F1 de-crease of 0.014. Similar trends were also observed on the Laptop-ACOS dataset. These results suggest that the proposed LCD module enhances the extraction performance by capturing latent category features, while the CD strategy regu-lates and guides the generation process, mitigating the generation of erroneous patterns."}, {"title": "6.4 Visualization of Latent Category Distribution", "content": "As introduced in Section 4.1, the LCD module learns latent category distribu-tion representation Z for a sample. To visually illustrate the effectiveness of this module, five samples were selected with their learned LCD representations visu-alized in Figure 3. The x-axis denotes the total 23 categories, while the y-axis indicates the sample indices. Each row in the figure corresponds to a LCD rep-resentation vector of a sample across categories, with color intensity reflecting the magnitude of the vector in respective category. The five samples, along with their respective standard categories in parentheses, are as follows:\n1. the product is great, but the customer support is horrible. (LAPTOP, SUPPORT)\n2. second issue is with scaling of the ui. (SOFTWARE)\n3. asus, has a horrible reputation. (COMPANY)\n4. hdmi out doesn't work right. (PORTS)\n5. now i have to deal with warranty stuff and sending it back. (WARRANTY)"}, {"title": "7 Conclusion", "content": "This study introduces a generative model for extracting sentiment quadruples. To address challenges related to semantic inclusion and overlap among categories, the model incorporates a latent category distribution to capture the strength of"}, {"title": " the relationship between text and categories.", "content": "Moreover, a constrained decoding strategy based on a trie structure is employed to exploit knowledge of target sequence patterns, thereby reducing the search space and enhancing the genera-tion process. Experimental results demonstrate performance enhancements com-pared to baseline models, with ablation studies verifying the efficacy of the latent category distribution and constrained decoding strategy. Despite advancements, performance remains moderate, primarily due to task complexity and special expressions in language, including implicit elements. Future research could focus on enhancing feature extraction and representation, as well as improving con-textual understanding, and integrating coreference resolution and background knowledge, to improve the extraction process, including implicit elements."}]}