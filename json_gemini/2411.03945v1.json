{"title": "CAN CUSTOM MODELS LEARN IN-CONTEXT? AN EXPLORATION OF HYBRID ARCHITECTURE PERFORMANCE ON IN-CONTEXT LEARNING TASKS", "authors": ["Ryan Campbell", "Nelson Lojo", "Kesava Viswanadha", "Christoffer Grondal Tryggestad", "Derrick Han Sun", "Sriteja Vijapurapu", "August Rolfsen", "Anant Sahai"], "abstract": "In-Context Learning (ICL) is a phenomenon where task learning occurs through a prompt sequence without the necessity of parameter updates. ICL in Multi-Headed Attention (MHA) with absolute positional embedding has been the focus of more study than other sequence model varieties. We examine implications of architectural differences between GPT-2 and LLaMa as well as Llama and Mamba. We extend work done by Garg et al. (2022) and Park et al. (2024) to GPT-2/LLaMa hybrid and LLaMa/Mamba hybrid models \u2013 examining the interplay between sequence transformation blocks and regressive performance in-context. We note that certain architectural changes cause degraded training efficiency/ICL accuracy by converging to suboptimal predictors or converging slower. We also find certain hybrids showing optimistic performance improvements, informing potential future ICL-focused architecture modifications. Additionally, we propose the \"ICL regression score\", a scalar metric describing a model's whole performance on a specific task. Compute limitations impose restrictions on our architecture-space, training duration, number of training runs, function class complexity, and benchmark complexity. To foster reproducible and extensible research, we provide a typed, modular, and extensible Python package on which we run all experiments. This code is available at https://github.com/in-context-learning-2024/in-context.", "sections": [{"title": "1 Introduction", "content": "Popularized by Large Language Models such as GPT-2 [1] and GPT-3 [2], In-Context Learning (ICL) is the ability for highly expressive generative sequence models to predict phenomena by processing demonstrations without performing traditional gradient steps. Such phenomena vary from effective control systems [3] to answering questions in natural language [4, 5]. A large body of recent work has studied this phenomenon in transformer models [6, 7, 2, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], which derive in structure from Vaswani et al. [26]."}, {"title": "2 Related Work", "content": "There are many ways to capture qualitative aspects of ICL with quantitative measures. Weber et al. [17] compare the agreement between generations of a language model under varying prompts of equal meaning to test robustness to variations. Olsson et al. [22] compute a heuristic \"ICL score\" to measure an accuracy increase in predictions of a model given more context. We adapt this metric to fit our experimental setup more aptly, regularizing along both the number of in-context examples and against a baseline predictor.\nIn general, evaluating ICL ability has been approached from two primary avenues: when the only solution at train time is to meta-learn an algorithm [6, 8, 28, 11, 19] and when optimal loss at train time can also be satisfied by memorization or otherwise leveraging previously trained-on data [10, 23]. In this work, we take the former approach through learning a regression algorithm for randomized simple function classes [6, 11, 15].\nFurther still, non-transformer architectures are capable of ICL [8]. Lee et al. [8] observed ICL in numerous sequence model architectures (e.g. RNNs, Mamba, S4, CNNs, GPT-2, and Llama) and found qualitative differences in each architecture's performance. Chan et al. [25] found that Transformers depend on \"burstiness\" and long-tail distributions of natural data to outperform RNNs and LSTMs in ICL tasks. Park et al. [14] uses simple function classes similar to Garg et al. [6] in evaluating the ICL ability of Mamba, S4, S4-Mamba, and GPT-2. They find an overlapping but"}, {"title": "3 Methods", "content": "As established by Garg et al. and extended by recent work, our ICL tasks take the following form [6, 8, 14]:\n$\\xo, f_\\theta(x_0), x_1, f_\\theta(x_1), ..., x_N, f_\\theta(x_N)$\nwhere P is a series of input-output pairs followed by a lone query. The model predicts a completion based on the prompt it received. The function parameters @ and the inputs xi are randomly sampled from a function class domain and an input domain, respectively. The tasks we regress to are summarized in Table 1 and detailed in Section 3.1\nWe train models for ICL by minimizing the expected loss over a distribution of prompts and corresponding function outputs. This approach allows us to observe qualitative differences in model architectures by their ability to behave similarly to optimal or baseline estimators. To further simplify ICL aptitude evaluation, we introduce a proxy value summarizing a given model's ICL ability for a specific task. This metric averages the error of a model normalized by the baseline error at each context length. We detail this further in Section 3.3.", "equations": ["$\\xo, f_\\theta(x_0), x_1, f_\\theta(x_1), ..., x_N, f_\\theta(x_N)$"]}, {"title": "3.1 Training", "content": "To determine task-specific ICL ability, our sequence models regress onto the functions shown above [14]. We replicate the function classes Linear Regression, Sparse Linear Regression, 2-Layer MLP, and Decision Tree from Garg et al. [6] as they present a wide range of \"difficulty\" for sequence models. In addition, to capture the existence of some ICL ability, we also regress onto the two function classes examined in Park et al. [14]: parity function with induced sparsity (Sparse Parity) and parallel associative recall (Vector MQAR).\nUnless otherwise specified, we train all models with 12 layers, 8 attention heads, an expansion factor of 4 (in the case of models with Mamba Mixer layers), and linear layers to transform the input sequences into and from the embedding dimension of 256. We use the ADAM optimizer with a learning rate of 0.0001 for 500k steps. Our expansion factor was selected to ensure similar parameter counts across baselines and all other hyperparameters were chosen for consistency with Garg et al. [6]. Note for the four function classes from Garg et al., the same curriculum was used during training. No curriculum is used for the two new function classes from Park et al. [14]. For our compute\u00b3, we utilized 898.90 hours on an A10, 55.74 hours on an RTX 3090, 151.90 hours on an RTX 4090, 75.48 hours on an RTX 4070 Ti, and 9.83 hours on an RTX 6000.\nLinear Regression and Sparse Linear Regression Each function in these tasks is parametrized as a single weight vector (w) of dimension equal to that of the x-values (i.e. 20) so that $y = w^Tx$. We sample the coordinate values from a normal distribution, and in the Sparse Linear case zero out all values except k randomly selected coordinates. In essence, one can consider Linear Regression to be the degenerate case where the k = 20. We preserve these tasks from Garg et al. [6] to verify that none of our hybrid modifications lose the near-optimal performance that was already found with GPT-2.\n2-Layer MLP Regression We fill two weight matrices $W^{(1)} \\in R^{100\\times20}$ and $W^{(2)} \\in R^{1\\times100}$ with scalar samples from a normal distribution. y values are computed as the result of a forward pass through a 2-layer multi layer perceptron with a ReLU activation. That is: $y = W^{(2)}ReLU(W^{(1)}x)$. Garg et al. [6] found GPT-2 to be highly performant on this complex function class.\nDecision Tree Regression We construct full decision trees of depth 4 with leaf values sampled from a normal distribution and branching conditions to be selected uniformly at random over the coordinates of the input dimension. The left branch is taken if the selected input coordinate is less than 0 and the right branch is taken otherwise. Garg et al. [6] found that GPT-2 was able to achieve much lower error for lower context lengths than XGBoost or Greedy Tree Learning, suggesting that this task can capture some ICL ability of an architecture.\nSparse Parity We select k = 2 values to consider and compute their parity, expressed as either \u20131 or 1. That is, we uniformly sample without replacement 0 ~ {1, ..., 10}* and compute $y = \\prod_{i \\in \\theta} x[i]$. Along with a higher learning rate", "equations": ["$y = w^Tx", "$W^{(1)} \\in R^{100\\times20}$", "$W^{(2)} \\in R^{1\\times100}$", "$y = W^{(2)}ReLU(W^{(1)}x)$", "$y = \\prod_{i \\in \\theta} x[i]$"]}, {"title": "3.2 Architectures", "content": "As detailed by Radford et al. [1], GPT-2 is almost identical to the original decoder-only transformer, with absolute positional embedding, pre-norm layer normalization, and a GELU activation function in the feed-forward network (FFN) (which is otherwise a multi-layer perceptron). In contrast, Llama [29, 30] combines a number of modern transformer modifications, including swapping layer norm with RMS norm [31], changing the architecture and activation function of the FFN, and using rotary positional embeddings instead of absolute positional embeddings [32]. We acknowledge that the larger variations of Llama2 [30] and both variations of Llama3 [33] used Grouped-Query Attention (GQA), however we surmise that at our model scales of ~10 million parameters, GQA will not significantly affect the performance of our models. From an entirely different method of sequence modeling, Mamba forgoes positional embedding entirely, combining features of the Gated Linear Unit and state space expansion to remove the need for distinct attention and"}, {"title": "3.3 Evaluation", "content": "In addition to the baseline metric (squared error as a function of context length) from Garg et. al. [6], we've established another metric: ICL regression score. This is a scalar expressing overall performance of a model on a task. Abstractly, the metric aims to capture the proportion of the baseline error saved by a model. The regression score is calculated by (1) computing the difference in error achieved by the model and the zero estimator at each context length, (2) computing the average of this value over the length of the sequence, (3) computing the same value for the baseline estimator, and (4) taking the ratio of (2) and (3).\nIn summary, ICL regression score can be calculated as follows:\n$S_{model} = \\frac{\\frac{1}{n} \\sum_{i=0}^{n} (s_0^{(i)} - s_{model}^{(i)})}{\\frac{1}{n} \\sum_{i=0}^{n} (s_0^{(i)} - s_{base}^{(i)})}$\nwhere $s_{model}, s_{base}, and s_0$ are the squared errors at context length i of the model, baseline, and zero estimator respectively. Figure 2a provides an interpretation for each of the possible values of our ICL regression score. We list our baselines in Table 2b.\nSummation over context length allows our ICL regression score to compare tasks with significantly differing context lengths. This approach builds off of Olsson et al.'s \"ICL Score\" [22] by generalizing their selection of 50 and 500 in-context examples and reducing along the context length, allowing for tasks with widely different context lengths to be directly compared.", "equations": ["$S_{model} = \\frac{\\frac{1}{n} \\sum_{i=0}^{n} (s_0^{(i)} - s_{model}^{(i)})}{\\frac{1}{n} \\sum_{i=0}^{n} (s_0^{(i)} - s_{base}^{(i)})}"]}, {"title": "3.4 Reproducibility Statement", "content": "For ease of experimentation and reproducibility, we have built a typed, extensible, and modular Python codebase. We achieved this by identifying isolated processes in the training regime and structuring our code to reflect them. In particular, the specification of (1) a function class, (2) a model type, (3) an evaluation scheme, and (4) a stage of training under a curriculum are all inherent to the experiment archetype as proposed by Garg et al. [6] and repeated by others [8, 15, 14]. For logging and reporting, we integrate Weights and Biases [34]. We also leverage fast implementations of attention [35] and 1-D convolutions [36]. Our codebase follows a configuration-based system for training, loading, and evaluating models to facilitate frictionless repeatability of all experiments, as shown in Figure 3."}, {"title": "4 Results", "content": "We confirm the results from Garg et al. [6] and Park et al. [14] that GPT-2 and Mamba can learn our first four regression tasks in-context. Park et al. [14] shows that Mamba struggles to perform Vector MQAR while transformers and hybrid architectures excel. We note that Llama and GPT-2 have very comparable performance in Sparse Parity and Vector MQAR. We plot all qualitatively non-optimal squared error profiles in Figure 4 and all squared error profiles in Appendix B.\nModels can converge to suboptimal regression schemes. We find that some model-task pairs produce suboptimal predictions not as a result of insufficient training. A clear example is GPT-2 RMS SwiGLU (model 1.4) on Sparse Linear Regression. This model doesn't attain optimal error \u2013 achieving an ICL Regression Score of only 0.754, opposed to ~ 0.93 for other models \u2013 and its performance does not significantly improve with more gradient steps. We plot the squared error achieved by various checkpoints for model 1.4 in Figure 5a. We observe that this error profile appears similar to that of models trained on the Linear Regression task. We also examine the prediction quality of the same model (GPT-2 RMS SwiGLU trained on Sparse Linear Regression) on Linear Regression in Figure 5b. Indeed, model 1.4 mimics the error profile of least squares. This result builds on Aky\u00fcrek et al.'s [19] findings on the functions for which transformer models develop representations. Aky\u00fcrek et al. analyzed algorithms representable by GPT-2-like architectures, but we note that they did not examine other layer types such as Mamba Mixer or SwiGLU.\nModels can escape suboptimal regression schemes. We see that GPT-2 SwiGLU (model 1.3) on Sparse Linear Regression adopts a suboptimal regression scheme (least squares) partway in training, eventually unlearning this scheme in favor of the optimal regression scheme (lasso). We plot the squared error on Sparse Linear achieved by various checkpoints for Model 1.3 in Figure 6a, noting that the error of the checkpoint at 100k steps closely matches the error of least squares. We also examine the squared errors on Linear Regression for various checkpoints of Model 1.3 in 6b and find that the checkpoint at 100k most closely matches least squares. This suggests that model 1.3 learned the linear regression scheme in the beginning of training, but was eventually able to learn to utilize the sparse nature of its training data."}, {"title": "5 Discussion", "content": "Even simple function classes leave room for local minima. Despite distilling down the phenomenon of In-Context Learning to regression against simple function classes, there still exists room for models to adopt various regression schemes. This is supported by the apparent convergence of the error profiles of GPT-2 RMS (model 1.1) and GPT-2 RMS SwiGLU (model 1.4) to least squares regression for shorter context lengths.\nHybrid architectures and function classes have varying levels of compatibility. Specific hybrid architectures can hesitate to learn/converge for certain function classes. This behavior is especially apparent in GPT-2 RMS's (model 1.1) Decision Tree error graph and GPT-2 RMS SwiGLU's (model 1.4) Sparse Linear performance. It seems that GPT-2 RMS SwiGLU shows greater affinity towards learning least squares instead of LASSO. Certain hybrid architecture variations may place inductive biases on certain solution forms, resulting in extreme convergence times when these solution forms greatly vary from the optimal predictor's form.\nExtensible Research as Reproducible Research. In the development of this work, continuously iterating to minimize the friction of reproduction has enabled rapid extension of our Python artifacts to support even abstractly defined hybrid architectures, which are often considered inextricable from highly bespoke code or dedicated packages such as xFormers [37]. We implore the reader to seriously consider the value of making their research extensible with a minimum of friction. We hope that our attempts to maximize extensibility and reproducibility contribute to the longevity of this work as a reliable, tested, and simple framework to use for studying simple function classes-in context."}]}