{"title": "GNN APPLIED TO EGO-NETS FOR FRIEND SUGGESTIONS", "authors": ["Evgeny Zamyatin"], "abstract": "A major problem of making friend suggestions in social networks is the large size of social graphs, which can have hundreds of millions of people and tens of billions of connections. Classic methods based on heuristics or factorizations are often used to address the difficulties of scaling more complex models. However, the unsupervised nature of these methods can lead to suboptimal results. In this work, we introduce the Generalized Ego-network Friendship Score framework, which makes it possible to use complex supervised models without sacrificing scalability. The main principle of the framework is to reduce the problem of link prediction on a full graph to a series of low-scale tasks on ego-nets with subsequent aggregation of their results. Here, the underlying model takes an ego-net as input and produces a pairwise relevance matrix for its nodes. In addition, we develop the WalkGNN model which is capable of working effectively in the social network domain, where these graph-level link prediction tasks are heterogeneous, dynamic and featureless. To measure the accuracy of this model, we introduce the Ego-VK dataset that serves as an exact representation of the real-world problem that we are addressing. Offline experiments on the dataset show that our model outperforms all baseline methods, and a live A/B test demonstrates the growth of business metrics as a result of utilizing our approach.", "sections": [{"title": "Introduction", "content": "The link prediction task is one of the fundamental problems of graph analysis. It is widespread in the industry, especially in social networks. Many of their long-term metrics depend on the users' social activity, and recommender systems help support and promote this activity. The social graph of a modern service represents a heterogeneous continuous-time dynamic graph. Various connections between users appear and disappear, including friendships, messages, likes, profile visits and others. Many of them are characterized by timestamps and intensities. The task of building methods that can effectively take into account all the available information about user relationships is very important, as the solutions' quality can directly affect business performance.\nOne of the specifics of working with social networks is the lack of meaningful features that describe users. General attributes such as sex, age or interests are often available, but they are not sufficient to model a user's social dynamics. Some bioinformatics problems can be seen as examples of tasks with rich node features, where units have natural descriptions that precisely define the principles of link formation. In the case of social networks, the structural information of the graph is of particular importance.\nDespite active research [1, 2] on graph neural networks, heuristics-based approaches still play a significant role in the industry. Methods such as common neighbors, Adamic-Adar [3], Preferential Attachment [4], etc. are widely used. Many recent papers refer to them as strong baselines [5, 6, 7], and the field of research aimed at finding ways to generalize them shows high potential [5, 8, 6]. Most of the heuristics do not rely on node features, which is an important property for the task of link prediction in social networks. The scalability, simplicity and efficiency of such methods make them attractive for industry use.\nMost popular heuristics rely on local neighborhood analysis, which makes it possible to scale them to large graphs. To compute them, storing the whole graph in memory is not needed, since some local structures are enough. For"}, {"title": "Related works", "content": "Traditionally, the problem of link prediction in large-scale graphs is solved by one of two types of methods. One is based on local neighborhood analysis using heuristics, while the other is based on graph embeddings construction. Approaches that use neural networks, in most cases, turn out to be too complex to scale and are not directly applicable to large-scale graphs. However, given that in our work we reduce the large-scale problem to a series of low-scale tasks, the work related to building complex models for the link prediction problem is also relevant here.\nHeuristic Methods. Despite the advanced age of most graph heuristics, they are still applicable due to their efficiency, simplicity and scalability. In contrast to most complex models, these methods do not require the presence of node features. The most popular among them are first- and second-order heuristics. Higher-order heuristics are much more difficult to scale on large graphs, so they much less commonly used in the industry. Most used first-order heuristics are Common Neighbours (CN) and Preferential Attachment (PA) [4]. Adamic-Adar (AA) [3] and resource allocation (RA) [13] are examples of second-order heuristics. Murata et al. [14] and Lu et al. [15] also consider the weighted versions of these algorithms. All of these heuristics were invented a long time ago, but remain strong baselines for many link prediction problems.\nZhang et al. [5] proposed the SEAL method, which can automatically learn heuristics via analyzing local subgraphs around each potential link. While this approach performed well, the relative uplift compared to the well-known Adamic-Adar was below 5% in most cases. On the other hand, the disadvantage of SEAL is the difficulty of scaling it to large graphs.\nEpasto et al. [6] proposed an original idea of analyzing local communities within ego-nets to improve the common neighbors heuristic. Their friendship score similarity measure the co-occurrences of two nodes in different ego-net's clusters. This approach shows high accuracy and scales well to industrial graphs, but still relies on heuristic approaches. Since a variation of this method is deployed on VK, we use it as a baseline in our online tests.\nTaking the idea of link prediction using ego network analysis as a starting point, our work builds on it by exploring the use of supervised methods to obtain more accurate solutions.\nEmbedding Methods. Most works on link prediction using large graphs belongs to this family of methods. Embedding methods learn a representation for each node by capturing the edge structure of the graph. A dot or cosine similarity measure is most commonly used for recommendations. The classical methods such as DeepWalk [7], node2vec [16] and LINE [17] have proven to be robust and efficient methods for link prediction in static homogeneous graphs. Meanwhile, in case of heterogeneous or dynamic graphs, these methods lose their effectiveness due to the unsupervised nature of learning. CTDNE [18] extends the DeepWalk method to the case of continuous-time dynamic graphs and shows good results. However, the principle of temporal walks can essentially be considered heuristics rather than supervised learning, so it can be suboptimal. Various methods [19, 20, 21, 22] for multi-relational knowledge graphs can be applied to heterogeneous graphs, but they are difficult to adapt for a temporal setting.\nEmbedding-based methods are attractive in terms of scalability, but still not flexible enough for supervised learning. Our work is not directly compared to these methods, but in this subsection we show the importance of research on the application of supervised approaches to large-scale graphs.\nGraph Neural Nets. Generally, complex transductive models do not scale well to large graphs due to the graphs' huge number of parameters and nonlinear structure. In this paper, we reduce the problem of link prediction in a complete graph to the low-scale graph-level problems on ego-nets, which is why we can use GNNs.\nAt present, the most popular way of constructing graph neural networks is the message-passing framework [23]. Its main idea is to hierarchically build representations of nodes through convolutions of neighbors. The GraphSAGE [24], TGAT [25], GAT [26] and GCN [27] models are all different variations of MP-GNNs. They show good results on a number of problems, but fail at tasks with no natural node attributes.\nAn active line of research is focused on evaluating the impact of node availability and quality of node characteristics on the accuracy of graph neural networks. Xu et al. [28], Morris et al. [29] and Dehmamy et al. [30] consider the"}, {"title": "Algorithm", "content": "In this section, we first present a framework for building recommendations on large graphs by analyzing ego-nets. This framework is a generalization of the idea proposed by Epasto et al. [6]. Following them, we called it the Generalized Ego-network Friendship Score. Essentially, it represents a combination of in-ego model and out-ego aggregation.\nThen, we will present a model we called WalkGNN, which we use in our framework. This model is inspired by the graph walk counting algorithm, and unlike most popular GNNs, builds representations of node pairs instead of nodes. Its key component is the novel layer WalkConv, which generates a state transition matrix for each edge and propagates the corresponding node pair states through it."}, {"title": "Generalized Ego-network Friendship Score", "content": "To illustrate our framework, consider the following scenario: each user of a social network is asked to estimate the probability of friendship between each of her or his friends based on some context. This context is the user's knowledge about his friends and the relationships between them. We can call this value the local relevance of one user to another with respect to their common friend. Then, for each pair of users, we can analyse all the local relevancies of their common friends and infer the global relevance of one user to the other. The values obtained from this process can be used to create a list of recommended friends for each user. This idea is key to our recommendation building framework.\nInstead of asking users, we will use a machine learning model that, for a pair of users u and v, will predict their local relevance with respect to their common friend e. Global relevance for u and v is defined as an aggregation of local relevance of all their common friends. As the context of e, we use its ego-net. As described above, ego-nets are a very convenient structure in large-scale settings. Both scalability and informativeness of ego-nets allow building accurate predictions for hundreds of millions of users.\nOur framework consists of two components. The first and the most important one we call in-ego model. This model takes an ego-net as input and produces a matrix of pairwise relevance of all nodes of this ego-net. Essentially, the in-ego model generalizes the link formation laws across graphs using their topology. The second component is the out-ego aggregation. This is just a function that reduces values for pairs of nodes, which occurs in several ego-nets. Both of these components are used in the corresponding phases of our framework."}, {"title": "WalkGNN", "content": "Our framework can easily scale to graphs of any size, but this property also imposes certain limitations, since in-ego models must consider all ego-nets independently of each other. In other words, natural node identifiers cannot be used within the model, and therefore, collaboration information is unavailable. The edges in our task change dynamically and can be of different types such as friendships, messages, likes and others. Finally, there are no natural features of users that would provide sufficient information about their social connections' dynamics. Only general features such as sex, age or country are available. These kinds of features provide only auxiliary information and cannot be a reliable basis. Thus, the problem can be described as graph-level link prediction on heterogeneous temporal graphs without node attributes.\nThe lack of node attributes in the graph-level setting limits model design. Therefore, we have two options available. The first is to build the model in the node representation paradigm and craft synthetic node features. Such methods have been widely studied by the community and have shown a strong dependence on hand-crafted features. In contrast, the second option of models based on node pair representations is much less studied, but existing works show promising results [8]. Morris et al. [29] and Maron et al. [44] proved that the k-GNN model is at most as powerful as the k-WL"}, {"title": "WalkConv", "content": "Suppose we have representations of node pair relations at the k-th iteration. That is, the state matrix Wk of dimensions [n \u00d7 n \u00d7 d] is computed, and we need to compute Wk+1. A key principle of our architecture is that we treat each edge as an information filter through which we propagate the state. Remember that each edge is parameterized by different attributes, such as the age of the friendship, the number of messages, likes or profile visits, and so on. In general, for each edge, we have a vector of its attributes \u0113. On top of it, we can build a Multilayer perceptron (MLP), which would transform\u0113 into a d\u00b2-dimensional vector. It can later be reshaped to a [d \u00d7 d] dimensional matrix. The obtained matrix is the linear filter used for propagating the state. The transition formula is as follows:\n$W_{u,v}^{k+1} = \\sum_{(t,v,e) \\in E} W_{u,t}^{k} \\times EdgeMLP_k(e)$\nwhere d is the dimension of the state, E is a set of edges and EdgeMLPk is an MLP that takes the attributes of an edge as input and returns a matrix of dimension [d \u00d7 d]. This expression can also be represented in Einstein notation, as presented in Algorithm 2. The complexity of WalkConv is O(n\u00b3 \u00d7 d\u00b2), where n is the number of nodes and d is the number of hidden units. This is the most computationally intensive part of our model, but it can be implemented efficiently as a dense multiplication of two matrices of dimensions [n \u00d7 n \u00d7 d] and [n\u00d7n \u00d7 d\u00d7d].\nThe WalkGNN model itself is a stack of WalkConv layers. To improve learning stability, we also use a residual connection after each layer (see Algorithm 2 and 3 for pseudocode)."}, {"title": "Experiment", "content": "Firstly, we compare the accuracy of the WalkGNN\u00b2 model with classical heuristics as well as some of the most diffused models in the literature that are applicable in our setting. Then, we describe the results of an online test based on VK's"}, {"title": "Online Experiment", "content": "We test Generalized Ego-network Friendship Score with the WalkGNN model in a People You May Know (PYMK) recommendation block of the VK social network (see Figure 2). The block is shown to the users of the news feed with more than 100M monthly users. To compare our method with the production solution, we divide this audience into two parts for the AB test. The algorithm on the control group is a modified version\u00b3 of the friendship score [6], which outperformed our previous solutions such as Adamic-Adar and Node2Vec with a large margin. Both methods work offline and build and export suggestions for all VK users every day. Pipeline consists of three parts: ego-nets materialization, per ego-net computation and results aggregation. All stages together take up about 3k cores and 3Tb RAM of a hadoop [49] cluster and take about 10 hours to complete. The results of the online test showed a 12% increase in friend requests' CTR."}, {"title": "Ablation Study.", "content": "To prove the importance of components of the WalkGNN model, we perform a series of ablation experiments on the Ego-VK dataset. We take the model described in Section 4.1 as the base configuration and make one change in each experiment:\n\u2022 Use 2 WalkCony blocks instead of 6\n\u2022 Use 4 WalkConv blocks instead of 6\n\u2022 Use 8 WalkConv blocks instead of 6\n\u2022 Ignore node features\n\u2022 Ignore edge features\nResults. The results of the experiments are presented in Table 3. The accuracy of the model grows with the number of convolution blocks, and saturates around 6 on our task. The edge attributes have a significant impact on the accuracy of the model, as the performance degradation when ignoring them is more than 50%. In contrast, the results of ignoring node features show the insignificance of their influence on model performance due to their low quality or inefficient use. We leave the study of how to effectively utilize node features for future works."}, {"title": "Conclusion", "content": "In this paper, we presented a framework for building friend suggestions on large-scale graphs. Our solution is capable of leveraging the accuracy of complex models while maintaining scalability. As part of our framework, we addressed the graph-level problem of predicting friendships within ego-nets. We developed the WalkGNN model that satisfies all the requirements of our framework and is capable of outperforming state-of-the-art solutions. To measure the quality metrics relevant to our task, we introduced the Ego-VK dataset, which represents a supervised graph-level link-prediction task. We believe that our dataset could be useful for further research addressing the expressive power of graph models.\nAn interesting direction for future work is to investigate more complex local relevance aggregation methods that can be extended from scalar values to multidimensional vectors. Another option is to develop a way to efficiently incorporate node attributes into the WalkGNN architecture."}]}