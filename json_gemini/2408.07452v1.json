{"title": "CMU'S IWSLT 2024 Simultaneous Speech Translation System", "authors": ["Xi Xu", "Siqi Ouyang", "Brian Yan", "Patrick Fernandes", "William Chen", "Lei Li", "Graham Neubig", "Shinji Watanabe"], "abstract": "This paper describes CMU's submission to the IWSLT 2024 Simultaneous Speech Translation (SST) task for translating English speech to German text in a streaming manner. Our end-to-end speech-to-text (ST) system integrates the WavLM speech encoder, a modality adapter, and the Llama2-7B-Base model as the decoder. We employ a two-stage training approach: initially, we align the representations of speech and text, followed by full fine-tuning. Both stages are trained on MuST-c v2 data with cross-entropy loss. We adapt our offline ST model for SST using a simple fixed hold-n policy. Experiments show that our model obtains an offline BLEU score of 31.1 and a BLEU score of 29.5 under 2 seconds latency on the MuST-C-v2 tst-COM\u039c\u039f\u039d.", "sections": [{"title": "1 Introduction", "content": "This paper presents CMU's submission to the IWSLT 2024 (Carpuat et al., 2024) Simultaneous Speech Translation (SST) task, focusing on streaming English speech to German text translation. Recent advancements in large language models (LLMs) have demonstrated their potential to be a strong backbone for offline ST (Huang et al., 2023; Zhang et al., 2023). In this year's submission, we build an end-to-end offline ST model with WavLM (Chen et al., 2022) and Llama2-7B-Base (Touvron et al., 2023) following the practice of LST (Zhang et al., 2023). Then we adapt the offline model for simultaneous translation.\nWe prepare our end-to-end ST model in the following steps:\n1. Offline ST with WavLM and Llama2-7B-base.\n2. Online adaptation of offline model via hold-n policy and incremental beam search."}, {"title": "2 Task Description", "content": "The IWSLT 2024 SST track\u00b9 English-German direction is a shared task for streaming speech-to-text translation of English TED talks. The task requires the system to generate the translation without modifying its previous outputs. The average lagging (AL) (Ma et al., 2019) of SST systems must be below 2 seconds on MuST-C v2.0 tst-COMMON set (Di Gangi et al., 2019). Note that AL has been modified from its original definition (Ma et al., 2020a). Following the constraint of data and pretrained weights, we use MuST-C v2.0 as the only training set and leverage pretrained models of WavLM and Llama2-7B-Base."}, {"title": "3 System Description", "content": "As shown in Figure 1, our offline ST models consists of three primary components: a speech encoder, an adapter, and a LLM decoder.\nFor the speech encoder, we employ the WavLM model 2, which has been pre-trained on 94,000 hours data including LibriLight (Kahn et al., 2020), VoxPopuli (Wang et al., 2021) and GigaSpeech (Chen et al., 2021). We use the output of last encoder layer as the speech representation.\nThe modality adapter consists of two components: a length adapter and a modality adapter. The length adapter consists of two 1-dimensional convolutional layers with a kernel size of 5, a stride size of 2, padding of 2, and a hidden size of 1024. The modality adapter is a linear layer that projects the output of the length adapter to the embedding space of LLM.\nWe use Llama2-7B-Base as the LLM decoder. The LLM decoder takes the output of the modality adapter and autoregressively generate the target text translation."}, {"title": "3.1 Offline Speech Translation (ST)", "content": "For each sample, given speech $X^S$, the reference translation $X^T$, and the prompt $X^P$, we initially transform the speech signal into a feature representation via the speech encoder:\n$H^S = Encoder(X^S)$,\n(1)\nwhere $H^S = [h_1^S,...,h_T^S]$ with T denoting the sequence length of the feature representation. To reconcile the length difference between the speech feature sequence $H^S$ and its corresponding text, we downsample the speech with a length adapter.\nTo clarify further, the length adapter transforms $H^S$ using a pair of 1-dimensional convolutional layers, which can be represented as:\n$Z^S = Length adapter(H^S; k, s,p, h)$,\n(2)\nwhere k is the kernel size, s is the stride, p is the padding, and h denotes the number of convolutional filters. The reduced temporal dimension is $Z^S = [z_1^S, ..., z_N^S]$, where\n$N = \\frac{T-k+2P+1}{S}$,\n(3)\nNext, a projector is applied to transform the speech features $Z^S$ into $E^S$ with the same dimension as the LLM input embedding. We use a single hidden layer as the projector,\n$E^S = Linear(Z^S)$.\n(4)\nFinally, we feed the speech embedding $E^S$, translation embedding $E^T$, and prompt embedding $E^P$ into the template to compose the final input E of LLM,\n$E^T = Emb(Tokenizer(X^T))$,\n(5)\n$E^P = Emb(Tokenizer(X^P))$,\n(6)\n$E = \\begin{cases}\nTemplate(E^S, E^P, E^T) \\quad if \\ training,\nTemplate(E^S, E^P, E^T) \\quad if \\ inference,\n\\end{cases}$\n(7)\nwhere Emb is the LLM embedding layer, $E^T$ is the embedding of model's previously generated tokens. The template is formatted as:\n<P> USER: <S> ASSISTANT:<T>\nwhere <P> represents the system prompt\u00b3, <S> denotes the speech embedding, and <T> is the target reference or generated translation.\nWe finetune our offline ST model following a 2-stage strategy. In the first stage, we finetune the speech encoder together with the adapters, while keeping the LLM frozen. In the second stage, we finetune the entire model. We employ cross entropy loss in both stages. In addition, we apply rule-based filtering (Ouyang et al., 2022) of the dataset"}, {"title": "3.2 Simultaneous Speech Translation (SST)", "content": "We adapt our offline ST model for streaming inference using hold-n policy. Our scheme uses a fixed duration (e.g. 2 seconds) to compute the encoder representations on chunks of input speech. With each new chunk, we re-compute the encoder representations using the entire given input speech.\nAs shown in Algorithm 1, for each chunk c, we obtain the corresponding hypotheses $W(c)$ using beam search given partial speech input. We then determine the number of tokens n' to withhold based on the minimum of the predefined value n and the length of the current chunk's hypotheses l.\nThe prefix $W_{0:l-n'}^{c}$ is obtained by selecting the tokens from index 0 to $1 -n'$."}, {"title": "4 Experimental Setup", "content": "We use the AdamW optimizer with a cosine learning rate decay and a warmup ratio of 0.2. The learning rate commences at 2e-4 for the first training stage and is reduced to 2e-5 for the second stage. We train the first stage for 6 epochs and train the second stage for 1 epoch.\nWe employ an early stopping strategy with a patience of 6 epochs, evaluating every 1000 steps in Stage 1 and every 200 steps in Stage 2. The batch size is set to 128 for both stages. All models are trained on 4 Nividia A6000 GPUs with Deepspeed's ZERO training strategy. The training times for the first and second stages are approximately 29 hours and 9 hours, respectively. We select the checkpoints with the lowest dev loss for testing.\nFor offline testing, we use a beam size of 4 to generate translations. In the simultaneous testing scenario, we set the start seconds to 2, indicating the initial wait time before processing speech chunks. We employ a hold-n strategy with n set to 7, meaning that the last 7 tokens of each chunk are withheld until more context is available. The beam size is set to 4, and the chunk size is set to 2500ms.\nWe evaluate translation quality using Sacre-BLEU (Post, 2018). We evaluate translation latency for SST with average lagging (AL) (Ma et al., 2020b) and length-adaptive average lagging (LAAL) (Papi et al., 2022) using SimulEval toolkit (Ma et al., 2020b)."}, {"title": "5 Results", "content": "Table 1 shows the quality and latency of our SST system as measured on En-De tst-COMMON. We also include the offline ST performance of our model for reference. We implement the Alignatt policy (Papi et al., 2023) as a baseline for our model, we set start seconds to 2, speech segment size to 1000ms. We set number of frames to 20 and"}, {"title": "6 Conclusion", "content": "In this paper, we describe the submission of CMU's English to German simultaneous speech-to-text translation systems for the IWSLT 2024 Simultaneous track. We start by building a offline speech-to-text system which leverages self-supervised speech and text foundation models. We then adapt this offline model for streaming inference, enabling simultaneous speech-to-text translation."}]}