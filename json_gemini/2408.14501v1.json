{"title": "Applying graph neural network to SupplyGraph for supply chain network", "authors": ["Kihwan Han"], "abstract": "Supply chain networks describe interactions between products, manufacture fa-\ncilities, storages in the context of supply and demand of the products. Supply\nchain data are inherently under graph structure; thus, it can be fertile ground for\napplications of graph neural network (GNN). Very recently, supply chain dataset,\nSupplyGraph, has been released to the public. Though the SupplyGraph dataset\nis valuable given scarcity of publicly available data, there was less clarity on de-\nscription of the dataset, data quality assurance process, and hyperparameters of\nthe selected models. Further, for generalizability of findings, it would be more\nconvincing to present the findings by performing statistical analyses on the distri-\nbution of errors rather than showing the average value of the errors. Therefore,\nthis study assessed the supply chain dataset, SupplyGraph, with better clarity on\nanalyses processes, data quality assurance, machine learning (ML) model specifi-\ncations. After data quality assurance procedures, this study compared performance\nof Multilayer Perceptions (MLP), Graph Convolution Network (GCN), and Graph\nAttention Network (GAT) on a demanding forecasting task while matching hyper-\nparameters as feasible as possible. The analyses revealed that GAT performed best,\nfollowed by GCN and MLP. Those performance improvements were statistically\nsignificant at $\\alpha = 0.05$ after correction for multiple comparisons. This study also\ndiscussed several considerations in applying GNN to supply chain networks. The\ncurrent study reinforces the previous study in supply chain benchmark dataset with\nrespect to description of the dataset and methodology, so that the future research in\napplications of GNN to supply chain becomes more reproducible.", "sections": [{"title": "1 Introduction", "content": "Graph neural network (GNN) has demonstrated its values over multiple domains where their datasets\nare in a graph structure, such as social network [Wu et al., 2020], transportation network [Zheng et\nal., 2020], knowledge graph [Hamaguchi et al., 2017], and geospatial data [Derrow-Pinion et al.,\n2021]. GNN has also shown its utility in other conventional datasets including object detection [Hu\net al., 2018], semantic segmentation [Zhao et al., 2020], recommendation system [Ying et al., 2018],\nand document classification [Yao et al., 2019]. Refer to Wu et al., 2021 and Zhou et al., 2020 for a\nreview. Supply chain is another domain that GNN can be applied. It is reasonable to assume that\nleveraging supply chain graph in ML models would be helpful in various supply chain use cases.\nHowever, it is challenging to obtain data for research due to sensitive nature of supply chain data in\nbusiness setting. Very recently, supply chain dataset, SupplyGraph, has been released to the public\n[Wasi et al., 2024]. Given the scarcity of publicly available supply chain datasets, the SupplyGraph\ndataset is a valuable benchmark dataset for supply chain analyses. Researchers can utilize this dataset\nto evaluate various GNN approaches to address supply chain problems. Though the SupplyGraph\ndataset is valuable and various GNN approaches were implemented in the previous study, there was\nless clarity on description of the dataset, data quality assurance process, and hyperparameters of\nthe selected models. Further, to generalize study findings for supply chain network, it would be\nmore convincing to present the findings by performing statistical analyses with actual distribution of\nerrors rather than showing the average value of the errors as a performance metric. Here, the current\nstudy assessed the supply chain dataset, SupplyGraph, with better clarity on analyses processes, data\nquality assurance, machine learning (ML) model specifications. Subsequently, this study investigated\nwhether GNN is indeed useful to the supply chain over other approaches without using supply chain\nnetwork. After demonstrating the benefit of GNN in the supply chain dataset, this work also discussed\nseveral considerations in applying GNN to supply chain network. The author believe that the current\nstudy reinforces the previous study in supply chain benchmark dataset with respect to description of\nthe dataset and methodology for reproducible future research in applications of GNN to supply chain."}, {"title": "2 Materials and Methods", "content": "2.1 Data\nThis study used SupplyGraph, which is a benchmark dataset for supply chain planning [Wasi et al.,\n2024]. Wasi et al., 2024 collected data from the central database system of Fast Moving Consumer\nGoods company in Bangladesh. Nodes in SupplyGraph were 40 distinct products associated with\nthe supply chain of the company. The nodes had multiple types according to product group, product\nsub-group, plant, and storage locations. The SupplyGraph dataset includes four different types of\nedges: products, sub-group, plant, and storage. For each node, there were four different temporal\nfeatures: production, sales order, delivery to distributors, and factory issues. Production quantifies\noverall product output considering sales order, customer demand, vehicle fill rate, and deliver urgency.\nSales order represents distributor-requested quantities. Delivery to distributor refers to dispatched\nproducts aligning with the orders. Factory issues cover total products shipped from manufacturing\nplant to distributors or storage warehouses. The temporal features include 221 time points.\n2.2 Use case\nMultiple use cases can be formulated from SupplyGraph, and different graph types can be formulated\naccording to the use cases. For example, heterogeneous graph with multiple node types and edge\ntypes. In this report, the author selected a demanding forecasting use case, which is straightforward\nand one of the most typical examples of supply chain planning. Following the previous study [Wasi\net al., 2024], the current work formulated a homogeneous graph with plant edges and sales order as\nnode feature.\n2.3 Quality Assurance of Data\nTo ensure quality of data and analysis, several data quality assurance processes were implemented\nafter exploratory data analysis. First, duplicate nodes were removed, yielding a total of 40 nodes.\nAccordingly, duplicated edges were removed. Initially, the author visualized plant graph using\nNetworkX library [Hagberg et al., 2008]. The visualized graph (Fig. 1 left) replicated the supply\nchain graph from the previous study [Wasi et al., 2024]. However, the author found that the visualized\ngraph could be misleading in that there was no directionality in the graph layout. The plot for the\nadjacency matrix (Fig. 1 right) revealed that the edge has directionality. Thus, the type of the graph\nfor this use case is homogeneous, directed, and binary graph.\nThe exploratory data analysis on temporal features revealed that features from 11 nodes were all or\nmost of the values were zeros. Thus, the author masked out those nodes from the graph, yielding 29\nnodes for the demand forecasting use case.\n2.4 Preprocessing\nStandard preprocessing steps were applied to node features, including (1) splitting the whole dataset\ninto train and test data sets with ratio of 0.95 to ensure enough data volume for the training data set,\n(2) temporal normalization to z-score by its mean and standard deviation, and (3) construction of\nsequence examples with rolling time window of size five. The label values were created by the next\ntime point."}, {"title": "2.5 Model Training", "content": "In this experiment, three models were implemented: Multilayer Perceptions (MLP), Graph Convo-\nlution Network (GCN) [Kipf et al., 2017], and Graph Attention Network (GAT) [Veli\u010dkovi\u0107 et al.,\n2018]. MLP served as a model without incorporating supply chain graph whereas GCN and GAT\nutilize supply chain graph for demand forecasting. MLP was implemented on PyTorch [Paszke et\nal., 2017], and GCN and GAT models were built from PyG [Fey et al., 2019]. GCN and GAT were\nstandard GNN model architecture. Briefly, GCN [Kipf et al., 2017] essentially aggregates node\nfeatures after convolution of neighbor nodes in the computation graph. Note that GCN employs\nlayer-specific weights, not node-specific weights. GAT [Veli\u010dkovi\u0107 et al., 2018] applies node-specific\nattention weights prior to the aggregation step, in addition to layer-specific weights.\nTo focus on assessing the effect of utilizing graph structure in supply chain modeling, the current study\nstrived to match hyperparameters as best as possible rather than performing extensive hyperparameter\ntuning (Table 1). The MLP model comprised of one hidden layer of 8 neurons, ReLU activation,\na dropout layer with ratio of 0.5, and an output layer. GCN model consisted of one hidden GCN\nlayer of 8 neurons, ReLU activation, a dropout layer with ratio of 0.5, and an output GCN layer. GAT\nmodel was built from one hidden GAT layer of 4 neurons with 6 attention heads, ReLU activation, a\ndropout layer with ratio of 0.5, and an output GAT layer. Refer to Fig. A.1 for the model architectures.\nAll the models were trained with Adam optimizer [Kingma et al., 2017], learning rate of 0.001,\nweight decay of 5e-4, and mean squared error (MSE) loss function for 200 epochs."}, {"title": "2.6 Statistical analyses", "content": "In addition to comparing MSE across the three models, the author also performed statistical analyses\non squared errors (SE) across products and time points from the training and test datasets for each of"}, {"title": "3 Results", "content": "The learning curves from the three models indicated model training performance was stabilized at\n200 epochs (Fig. 2). Though loss values for the GNN models were higher than loss values for the\nMLP at earlier epochs, loss values for the GNN models reduced better than MLP, indicating that the\nGNN model learned from the data patterns better than the MLP model.\nAfter 200 epochs, the GAT model performed best on MSE for the training and test dataset, followed\nby the GCN model (Table 2). The MLP model performed the worst (Table 2).\nConsistent with results for MSE, the median SE after model training reveal that the GAT model\nperformed the best, followed by GCN and MSE (Table 3). Note also that median SE was quite lower\nthan MSE, meaning that the distributions of SE were skewed with long tail. The observed skewness\nof the distribution indicates that model performance could be further improved with more datasets.\nRefer to limitation section for more details.\nQualitatively, the plots for predicted and actual sales order over time from example products demon-\nstrated that the GAT model performed best, followed by GCN and MLP (Fig. 3). The MLP appeared\nto be struggling with predicting fluctuating sales order patterns without incorporating the supply\ngraph.\nThe box plots for prediction errors and squared errors (Figs. 4 and 5) summarized the qualitatively\nobserved sales order predictions over time. The prediction errors were centered around zero demon-\nstrating face validity of the trained models (Fig. 4 left). However, the median of the prediction errors\nfor GAT was shifted closer to zero than GCN and MLP. There were noticeable differences in spread\nof the distributions of the prediction errors across the models. The box plots for the squared errors"}, {"title": "4 Discussion", "content": "This study demonstrated that graph neural network incorporating supply chain graph performed\nbetter at demand forecasting task than deep neural network models without supply chain graph. The\nperformance improvement with GNN approaches were consistent with findings from the previous\nstudy [Wasi et al., 2024]. The reason why GNN approaches outperformed MLP might be because\nsupply chain demand might fluctuates according to supply chain network and the GNN approaches\nutilized such patterns manifested from the supply chain network. In fact, the previous study found\ntemporal correlations across product demands [Wasi et al., 2024]. As the SupplyGraph dataset\nhas great potential to serve as a benchmark dataset for ML-based supply chain use cases [Wasi\net al., 2024], the current study provided clearer descriptions of the dataset and GNN parameters\nso that the work can be reproducible, and the dataset can be useful for further studies. Example\nincludes data quality assurance procedure such as duplicate nodes removal, correction for mislabeled\nedges, and removal of time series feature with mostly zeros. The current studies also performed\nadditional statistical analyses, not demonstrated in the previous study [Wasi et al., 2024] or other\nstudies that compared performance of GNN in supply chain [Kosasih and Brintrup 2022, Kozodoi et\nal., 2024]. As such, there were statistically significant improvement in squared errors for GAT and"}, {"title": "5 Acknowledgements", "content": "The author would like to thank Ajit Patankar for his comments and feedback."}, {"title": "A Supplemental material", "content": "A.1 Supplemental figure"}]}