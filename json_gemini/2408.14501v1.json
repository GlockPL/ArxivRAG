{"title": "Applying graph neural network to SupplyGraph for supply chain network", "authors": ["Kihwan Han"], "abstract": "Supply chain networks describe interactions between products, manufacture fa-cilities, storages in the context of supply and demand of the products. Supply chain data are inherently under graph structure; thus, it can be fertile ground for applications of graph neural network (GNN). Very recently, supply chain dataset, SupplyGraph, has been released to the public. Though the SupplyGraph dataset is valuable given scarcity of publicly available data, there was less clarity on de-scription of the dataset, data quality assurance process, and hyperparameters of the selected models. Further, for generalizability of findings, it would be more convincing to present the findings by performing statistical analyses on the distri-bution of errors rather than showing the average value of the errors. Therefore, this study assessed the supply chain dataset, SupplyGraph, with better clarity on analyses processes, data quality assurance, machine learning (ML) model specifi-cations. After data quality assurance procedures, this study compared performance of Multilayer Perceptions (MLP), Graph Convolution Network (GCN), and Graph Attention Network (GAT) on a demanding forecasting task while matching hyper-parameters as feasible as possible. The analyses revealed that GAT performed best, followed by GCN and MLP. Those performance improvements were statistically significant at $\\alpha = 0.05$ after correction for multiple comparisons. This study also discussed several considerations in applying GNN to supply chain networks. The current study reinforces the previous study in supply chain benchmark dataset with respect to description of the dataset and methodology, so that the future research in applications of GNN to supply chain becomes more reproducible.", "sections": [{"title": "1 Introduction", "content": "Graph neural network (GNN) has demonstrated its values over multiple domains where their datasets are in a graph structure, such as social network [Wu et al., 2020], transportation network [Zheng et al., 2020], knowledge graph [Hamaguchi et al., 2017], and geospatial data [Derrow-Pinion et al., 2021]. GNN has also shown its utility in other conventional datasets including object detection [Hu et al., 2018], semantic segmentation [Zhao et al., 2020], recommendation system [Ying et al., 2018], and document classification [Yao et al., 2019]. Refer to Wu et al., 2021 and Zhou et al., 2020 for a review. Supply chain is another domain that GNN can be applied. It is reasonable to assume that leveraging supply chain graph in ML models would be helpful in various supply chain use cases. However, it is challenging to obtain data for research due to sensitive nature of supply chain data in business setting. Very recently, supply chain dataset, SupplyGraph, has been released to the public [Wasi et al., 2024]. Given the scarcity of publicly available supply chain datasets, the SupplyGraph dataset is a valuable benchmark dataset for supply chain analyses. Researchers can utilize this dataset to evaluate various GNN approaches to address supply chain problems. Though the SupplyGraph dataset is valuable and various GNN approaches were implemented in the previous study, there was less clarity on description of the dataset, data quality assurance process, and hyperparameters of the selected models. Further, to generalize study findings for supply chain network, it would be more convincing to present the findings by performing statistical analyses with actual distribution of errors rather than showing the average value of the errors as a performance metric. Here, the current study assessed the supply chain dataset, SupplyGraph, with better clarity on analyses processes, data quality assurance, machine learning (ML) model specifications. Subsequently, this study investigated whether GNN is indeed useful to the supply chain over other approaches without using supply chain network. After demonstrating the benefit of GNN in the supply chain dataset, this work also discussed several considerations in applying GNN to supply chain network. The author believe that the current study reinforces the previous study in supply chain benchmark dataset with respect to description of the dataset and methodology for reproducible future research in applications of GNN to supply chain."}, {"title": "2 Materials and Methods", "content": "This study used SupplyGraph, which is a benchmark dataset for supply chain planning [Wasi et al., 2024]. Wasi et al., 2024 collected data from the central database system of Fast Moving Consumer Goods company in Bangladesh. Nodes in SupplyGraph were 40 distinct products associated with the supply chain of the company. The nodes had multiple types according to product group, product sub-group, plant, and storage locations. The SupplyGraph dataset includes four different types of edges: products, sub-group, plant, and storage. For each node, there were four different temporal features: production, sales order, delivery to distributors, and factory issues. Production quantifies overall product output considering sales order, customer demand, vehicle fill rate, and deliver urgency. Sales order represents distributor-requested quantities. Delivery to distributor refers to dispatched products aligning with the orders. Factory issues cover total products shipped from manufacturing plant to distributors or storage warehouses. The temporal features include 221 time points."}, {"title": "2.2 Use case", "content": "Multiple use cases can be formulated from SupplyGraph, and different graph types can be formulated according to the use cases. For example, heterogeneous graph with multiple node types and edge types. In this report, the author selected a demanding forecasting use case, which is straightforward and one of the most typical examples of supply chain planning. Following the previous study [Wasi et al., 2024], the current work formulated a homogeneous graph with plant edges and sales order as node feature."}, {"title": "2.3 Quality Assurance of Data", "content": "To ensure quality of data and analysis, several data quality assurance processes were implemented after exploratory data analysis. First, duplicate nodes were removed, yielding a total of 40 nodes. Accordingly, duplicated edges were removed. Initially, the author visualized plant graph using NetworkX library [Hagberg et al., 2008]. The visualized graph (Fig. 1 left) replicated the supply chain graph from the previous study [Wasi et al., 2024]. However, the author found that the visualized graph could be misleading in that there was no directionality in the graph layout. The plot for the adjacency matrix (Fig. 1 right) revealed that the edge has directionality. Thus, the type of the graph for this use case is homogeneous, directed, and binary graph.\nThe exploratory data analysis on temporal features revealed that features from 11 nodes were all or most of the values were zeros. Thus, the author masked out those nodes from the graph, yielding 29 nodes for the demand forecasting use case."}, {"title": "2.4 Preprocessing", "content": "Standard preprocessing steps were applied to node features, including (1) splitting the whole dataset into train and test data sets with ratio of 0.95 to ensure enough data volume for the training data set, (2) temporal normalization to z-score by its mean and standard deviation, and (3) construction of sequence examples with rolling time window of size five. The label values were created by the next time point."}, {"title": "2.5 Model Training", "content": "In this experiment, three models were implemented: Multilayer Perceptions (MLP), Graph Convo-lution Network (GCN) [Kipf et al., 2017], and Graph Attention Network (GAT) [Veli\u010dkovi\u0107 et al., 2018]. MLP served as a model without incorporating supply chain graph whereas GCN and GAT utilize supply chain graph for demand forecasting. MLP was implemented on PyTorch [Paszke et al., 2017], and GCN and GAT models were built from PyG [Fey et al., 2019]. GCN and GAT were standard GNN model architecture. Briefly, GCN [Kipf et al., 2017] essentially aggregates node features after convolution of neighbor nodes in the computation graph. Note that GCN employs layer-specific weights, not node-specific weights. GAT [Veli\u010dkovi\u0107 et al., 2018] applies node-specific attention weights prior to the aggregation step, in addition to layer-specific weights.\nTo focus on assessing the effect of utilizing graph structure in supply chain modeling, the current study strived to match hyperparameters as best as possible rather than performing extensive hyperparameter tuning (Table 1). The MLP model comprised of one hidden layer of 8 neurons, ReLU activation, a dropout layer with ratio of 0.5, and an output layer. GCN model consisted of one hidden GCN layer of 8 neurons, ReLU activation, a dropout layer with ratio of 0.5, and an output GCN layer. GAT model was built from one hidden GAT layer of 4 neurons with 6 attention heads, ReLU activation, a dropout layer with ratio of 0.5, and an output GAT layer. Refer to Fig. A.1 for the model architectures. All the models were trained with Adam optimizer [Kingma et al., 2017], learning rate of 0.001, weight decay of 5e-4, and mean squared error (MSE) loss function for 200 epochs."}, {"title": "2.6 Statistical analyses", "content": "In addition to comparing MSE across the three models, the author also performed statistical analyses on squared errors (SE) across products and time points from the training and test datasets for each of the three models. First, an omnibus test on the median of SE was performed using Kruskal-Wallis H test. Second, pairwise tests on the median of SE for MLP vs GCN and GCN vs GAT were performed using Wilcoxon-Mann-Whitney U test. Statistical significance was determined at alpha level of 0.05. For the pairwise tests, p-values were corrected for multiple comparisons using Bonferroni correction."}, {"title": "3 Results", "content": "The learning curves from the three models indicated model training performance was stabilized at 200 epochs (Fig. 2). Though loss values for the GNN models were higher than loss values for the MLP at earlier epochs, loss values for the GNN models reduced better than MLP, indicating that the GNN model learned from the data patterns better than the MLP model.\nAfter 200 epochs, the GAT model performed best on MSE for the training and test dataset, followed by the GCN model (Table 2). The MLP model performed the worst (Table 2).\nConsistent with results for MSE, the median SE after model training reveal that the GAT model performed the best, followed by GCN and MSE (Table 3). Note also that median SE was quite lower than MSE, meaning that the distributions of SE were skewed with long tail. The observed skewness of the distribution indicates that model performance could be further improved with more datasets. Refer to limitation section for more details.\nQualitatively, the plots for predicted and actual sales order over time from example products demon-strated that the GAT model performed best, followed by GCN and MLP (Fig. 3). The MLP appeared to be struggling with predicting fluctuating sales order patterns without incorporating the supply graph.\nThe box plots for prediction errors and squared errors (Figs. 4 and 5) summarized the qualitatively observed sales order predictions over time. The prediction errors were centered around zero demon-strating face validity of the trained models (Fig. 4 left). However, the median of the prediction errors for GAT was shifted closer to zero than GCN and MLP. There were noticeable differences in spread of the distributions of the prediction errors across the models. The box plots for the squared errors more clearly demonstrated improvement in forecasting performance with supply graph versus without supply graph (Fig. 4 right). Patterns of the performance on the test data were similar to those on the training data (Fig. 5). Omnibus test on the median of the squared errors confirmed that there were statistically significant differences in the spread of prediction errors across the three models ($p < 0.001$) at $\\alpha = 0.05$. Post-hoc analyses showed there statistically significant differences in the median of the squared errors on (1) GCN versus MLP (corrected $p < 0.001$) and (2) GAT versus GCN (corrected $p < 0.001$) at $\\alpha = 0.05$, respectively."}, {"title": "4 Discussion", "content": "This study demonstrated that graph neural network incorporating supply chain graph performed better at demand forecasting task than deep neural network models without supply chain graph. The performance improvement with GNN approaches were consistent with findings from the previous study [Wasi et al., 2024]. The reason why GNN approaches outperformed MLP might be because supply chain demand might fluctuates according to supply chain network and the GNN approaches utilized such patterns manifested from the supply chain network. In fact, the previous study found temporal correlations across product demands [Wasi et al., 2024]. As the SupplyGraph dataset has great potential to serve as a benchmark dataset for ML-based supply chain use cases [Wasi et al., 2024], the current study provided clearer descriptions of the dataset and GNN parameters so that the work can be reproducible, and the dataset can be useful for further studies. Example includes data quality assurance procedure such as duplicate nodes removal, correction for mislabeled edges, and removal of time series feature with mostly zeros. The current studies also performed additional statistical analyses, not demonstrated in the previous study [Wasi et al., 2024] or other studies that compared performance of GNN in supply chain [Kosasih and Brintrup 2022, Kozodoi et al., 2024]. As such, there were statistically significant improvement in squared errors for GAT and GCN over MLP. Statistical analyses inherently take account for randomness of model performance under probabilistic distributions, thus the findings demonstrated that graph-based models performed better than conventional deep learning approach in a more convincing manner.\nGNN incorporates supply chain graph into various supply chain use cases, thus it is expected that GNN outperforms neural network models without graph. However, there are a few of considerations for GNN applications in supply chain. First, there are multiple options to build supply graphs, thus it is important to model with graph aligning with a use case. In general, supply chain network dataset has rich number of attributes. For example, there were four types of edges in SupplyGraph: group, sub-group, plant, and storage location. Further, SupplyGraph includes corresponding four node types and four temporal node features. Design choices for base graph from this dataset would be whether to utilize homogeneous or heterogeneous graph, which edges will be utilized, whether to model binary or weighted edges, and whether to model static or dynamic graph. Among multiple options for base graph, one would consider the model complexity of supply chain networks and proper choice of edges in lieu of use case goal and available data volumes. For small amount of data, one would opt for simple homogeneous and binary graph. Then add more complexity to the graph model when more data are available at later stage of the model development process. Second, there are unique architectural considerations in GNN. Examples include an over-smoothing problem. The over-smoothing problem refers to a problem where all the node embeddings converge to the same value. The over-smoothing problem occurs because receptive field increases exponentially as the number of GNN layers increases. As the receptive field increases, shared neighbors grow, thus node embeddings become very similar to each other. Therefore, the number of GNN layers should be selected carefully based on graph size and other graph characteristics. Skip connection approach may mitigate this over-smoothing problem by retaining the impact of earlier layers on the final node embedding [You et al., 2021].\nLimitations of this study include short timeframe of the temporal data. The original SupplyGraph temporal data has only 221 time points spanning eight months. The number of time points is small, and graph size is small. Given this small size of the dataset, the choices of analyses, architectural designs were very limited. Further, eight months of data may be too short to represent dynamics of the products in the supply chain. Second, model performance in this study could be further improved by extensive hyperparameter tuning, by selecting GNN models incorporating temporal information, and by utilizing asymmetric loss function. However, this study rather focused on confirming improvement in model performance from incorporating supply chain network into analyses by matching hyperparameters as best as feasible. This study still demonstrates the utility of GNN with supply chain network over ML models without supply chain network. Lastly, it is still unclear details of the supply chain network. Based on the description from the SupplyGraph paper [Wasi et al., 2024], this study selected plant as the edges for the demand forecasting task. It was unclear what the plant edges refers to and what was underlying hypothesis of such choice of the edges. Perhaps, heterogeneous graph with plant and storage edges may better characterize supply chain network for the demand forecasting use case. The reason for less clarity on the description may be sensitive nature of the supply chain network data. Nonetheless, the current study highly values the SupplyGraph dataset as a bench mark dataset for GNN approaches to supply chain planning.\nIn conclusions, this study demonstrated that GNN with supply chain network outperformed product demand forecasting over the ML model without taking account of supply chain network. Future works include exploring use cases of GNN for internal supply chain networks data and identifying a variety of other applications of GNN to corporate data such as graph retrieval-augmented generation in large language model for questions and answers [Edge et al., 2024]"}]}