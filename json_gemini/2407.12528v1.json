{"title": "ON THE COMPLEXITY OF IDENTIFICATION IN LINEAR STRUCTURAL CAUSAL MODELS", "authors": ["Julian D\u00f6rfler", "Benito van der Zander", "Markus Bl\u00e4ser", "Maciej Li\u015bkiewicz"], "abstract": "Learning the unknown causal parameters of a linear structural causal model is a fundamental task in causal analysis. The task, known as the problem of identification, asks to estimate the parameters of the model from a combination of assumptions on the graphical structure of the model and observational data, represented as a non-causal covariance matrix. In this paper, we give a new sound and complete algorithm for generic identification which runs in polynomial space. By standard simulation results, this algorithm has exponential running time which vastly improves the state-of-the-art double exponential time method using a Gr\u00f6bner basis approach. The paper also presents evidence that parameter identification is computationally hard in general. In particular, we prove, that the task asking whether, for a given feasible correlation matrix, there are exactly one or two or more parameter sets explaining the observed matrix, is hard for VR, the co-class of the existential theory of the reals. In particular, this problem is coNP-hard. To our best knowledge, this is the first hardness result for some notion of identifiability.", "sections": [{"title": "Introduction", "content": "Recognizing and predicting the causal effects and distinguishing them from purely statistical correlations is an important task of empirical sciences. For example, identifying the causes of disease and health outcomes is of great significance in developing new disease prevention and treatment strategies. A common approach for establishing causal effects is through randomized controlled trials (Fisher, [21]) \u2013 called the gold standard of experimentation \u2013 which, however, requires physical intervention in the examined system. Therefore, in many practical applications experimentation is not always possible due to cost, ethical constraints, or technical feasibility. E.g., to learn the effects of radiation on human health one cannot conduct interventional studies involving human participants. In such cases, a researcher may use an alternative approach and establish cause-effect relationships by combining existing observed data with the knowledge of the structure of the system under study. This is called the problem of identification in causal inference (Pearl, [33]) and the approach is commonly used in various fields, including modern ML.\nA key ingredient of this framework is the way the underlying structure models the true mechanism behind the system. In general, this is done using structural causal models (SCMs) [33, 3]. In this work, we focus on the problem of identification in linear SCMs, known also as structural equation models (SEMs) [8, 19]. They represent the causal relationships between observed random variables assuming that each variable $X_i$, with $i = 1, . . ., n$ is linearly dependent on the remaining variables and an unobserved error term $\\varepsilon_i$ of normal distribution with zero mean: $X_j = \\Sigma_{i} \\lambda_{i,j}X_i + \\varepsilon_i$. The model implies the existence of some covariance matrix $\\Omega = (\\omega_{i,j})$ between the error terms. In this paper, we consider recursive models, i.e., we assume that, for all $i > j$, we have $\\lambda_{i,j} = 0$.\nLinear SCMs can be represented as a graph with nodes $\\{1, ..., n\\}$ and with directed and bidirected edges. A directed edge $i \\to j$ represents a linear influence $\\lambda_{i,j} \\neq 0$ of a parent node $i$ on its child $j$. A bidirected edge $i \\leftrightarrow j$ represents a correlation $\\Omega_{i,j} \\neq 0$ between error terms $\\varepsilon_i$ and $\\varepsilon_j$.\nWriting the coefficients of all directed edges as adjacency matrix\n$\\Lambda = (\\lambda_{i,j})$ and the coefficients of all bidirected edges as adjacency\nmatrix $\\Omega = (\\omega_{i,j})$, the covariances $\\sigma_{i,j}$ between each pair of observed\nvariables $X_i$ and $X_j$ can be calculated as matrix $\\Sigma = (\\sigma_{i,j})$:\n$\\Sigma = (I - \\Lambda)^{-T}\\Omega (I - \\Lambda)^{-1},$ \\label{eq:1}\nwhere $I$ is the identity matrix [22]. Knowledge of the parameters $\\Lambda_{ij}$ allows for the prediction of all causal effects in the system and the key task here is to learn $\\Lambda$ assuming $\\Omega$ remains unknown. This leads to the formulation of the identification problem in linear SCMs as solving for the parameter $\\Lambda$ using Eq. (1). If the problem asks to find symbolic solutions involving only symbols $\\sigma_{i,j}$, we call it the problem of symbolic identification. In the case when the parameter can be determined uniquely almost everywhere using alone $\\Sigma$, we call the instance to be generically identifiable (for a formal definition, see Sec. 2). If the goal is to find, for a given $\\Sigma$ of rational numbers, the numerical solutions, we call it the problem of numerical identification. In this paper, we study the computational complexity of both variants of the problem.\nPrevious Work. The identification in linear SCMs and its applications has been a subject of research interest for many decades, including the early work in econometrics and agricultural sciences [42, 41, 20, 9]. Currently, it seems, that one of the most challenging tasks in this field is providing effective computational methods that allow automatic finding of solutions, both for symbolic and for numeric variants, or to provide evidence that the problems are computationally intractable.\nThe generic identification can be established using standard algebraic tools for solving symbolic polynomial equations (1). Such an approach provides a sound and complete method, i.e., it is guaranteed to identify all identifiable instances. However, common algorithms for solving such equations usually use Gr\u00f6bner basis computation, whose time complexity is doubly exponential in the worst case [23]. So far, it has remained widely open whether the double exponential function is a sharp upper bound on the computational complexity of the generic identifiability.\n$\\lambda_{1,2} \\lambda_{2,3}$\n$\\lambda_{1,2}$\n$\\sigma_{1,3}$\n$\\sigma_{1,2}$. The\nMost approaches to solving the problem in practice are based on instrumental variables, in which the causal direct effect is identified as a fraction of two covariances [41, 9]. For example, in the linear model shown in Figure 1, one can calculate first $\\lambda_{1,2} = \\frac{\\sigma_{1,2}}{\\sigma_{1,1}}$ and then $\\lambda_{2,3} = \\frac{\\sigma_{1,3}}{\\sigma_{1,2}}$. The variable $X_1$ is then called an instrumental variable (IV). This method is sound but not complete, that is, when it identifies a parameter, then it is always correct. However, when the method fails due to a missing IV, then the parameter can still be identified by other means. This approach has inspired intensive research aimed at providing computational methods that may not be complete but enable effective algorithms and identify a significantly large number of cases.\nTo the most natural extensions of the simple IVs belong conditional IVs (cIV) [9, 32]. The corresponding identification method is based on an efficient, polynomial time algorithm for finding conditional IVs [38]. More complex criteria and methods proposed in the literature, which are also accompanied by polynomial time algorithms, involve instrumental sets (IS) [11] half-treks (HTC) [22], instrumental cutsets (IC) [29], auxiliary instrumental variables (aIV) [15], The generalized HTC (gHTC) [14, 40] and auxiliary variables (AVS) [14, 16] can be implemented in polynomial time provided that the number of incoming edges to each node in the causal graph is bounded. The methods based on generalized IS (gIS), a simplified version of the criterion (scIS), and generalized AVS (gAVS) appeared to be computationally intractable [11, 10, 12, 37, 16]. The auxiliary cutsets (ACID) algorithm [30] subsumes all the above methods in the sense that it covers all the instances identified by them. Recently [39, 25] provide the TreeID algorithm for identification in tree-shaped linear models. TreeID is incomparable since it is complete for the subclass of tree-like SCMs. However, TreeID does not even work for general SCMs, which is the focus of our work. Figure 2 summarizes these results."}, {"title": "Preliminaries", "content": "A mixed graph is a triple $G = (V, D, B)$ where $V := \\{1,..., n\\}$ is a finite set of nodes and $D \\subseteq V \\times V$ and $B\\subseteq \\binom{V}{2}$ are two sets of directed and bidirected edges, respectively. Let $R_D$ be the set of matrices $\\Lambda = (\\lambda_{i,j}) \\in R^{n \\times n}$ with $\\lambda_{i,j} = 0$ if $i \\to j$ is not in $D$ and let $P_D(n)$ denote the cone of positive definite $n \\times n$ matrices. Let $P_D(B)$ be the set of matrices $\\Omega = (\\omega_{i,j}) \\in P_D(n)$ with $\\omega_{i,j} = 0$ if $i \\neq j$ and $i \\leftrightarrow j$ is not an edge in $B$. In this work, we will only consider recursive models, i.e. we assume that, for all $i > j$ we have $\\lambda_{i,j} = 0$. Thus, the directed graph $(V, D)$ accompanied with the model is acyclic. In the paper, we will assume w.l.o.g. that the nodes are topologically sorted, i.e., there are no edges $i \\to j$ with $i > j$.\nDenote by $\\mathcal{N}_n (\\mu, \\Sigma)$ the multivariate normal distribution with mean $\\mu \\in R^n$ and covariance matrix $\\Sigma$. The linear SCMs $M(G)$ associated with $G = (V, D, B)$ is the family of multivariate normal distributions $\\mathcal{N}_n(0, \\Sigma)$ with $\\Sigma$ satisfying Eq. (1), for $\\Lambda \\in R_D$ and $\\Omega \\in P_D(B)$. A model in $M(G)$ is specified in a natural way in terms of a system of linear structural equations: $X_i = \\Sigma_{i \\in pa(j)} \\lambda_{i,j}X_i+\\varepsilon_i$, for $j = 1, . . ., n$, where $pa(j)$ denote the parents of $j$ in $G$. If $\\varepsilon = (\\varepsilon_1, . . ., \\varepsilon_n)$ is a random vector with the multivariate normal distribution $\\mathcal{N}_n (0, \\Omega)$ and $\\Lambda \\in R_D$, then the random vector $X = (X_1, . . ., X_n)$ is well defined as a solution to the equation system and follows a centered multivariate normal distribution with covariance matrix $(I - \\Lambda)^{-T}\\Omega (I - \\Lambda)^{-1}$ (see, e.g. [18]).\nFor a given (acyclic) mixed graph $G = (V, D, B)$ define the parametrization map\n$\\phi_G : R_D \\times P_D(B) \\to R^{\\binom{n}{2}}, \\quad (\\Lambda, \\Omega) \\mapsto (I - \\Lambda)^{-T}\\Omega (I - \\Lambda)^{-1}$\nand let $\\Theta := R_D \\times P_D(B)$. We define that $G$ is globally identifiable if $\\phi_G$ is injective on $\\Theta$ ([18]).\nGlobal identification can be decided easily, see [18, Theorem 2]. However, it is a very strong property. For instance, as seen in the introduction, in Figure 1, we can recover the parameter $\\lambda_{2,3}$ as $\\frac{\\sigma_{1,3}}{\\sigma_{1,2}}$. So identification fails only in the (very unlikely case) that $\\sigma_{1,2} = 0$. This leads to the concept of generic identifiability\nDefinition 1 (Generic Identifiability, [22]). The mixed graph $G$ is said to be generically identifiable if $\\phi_G$ is injective on the complement $\\Theta \\backslash V$ of a proper (i.e., strict) algebraic subset $V \\subset \\Theta$.\nGiven matries $\\Lambda_0 \\in R_D$ and $\\Omega_0 \\in P_D(B)$, the corresponding fiber is defined by\n$F_G(\\Lambda_0, \\Omega_0) = \\{(\\Lambda, \\Omega) \\mid \\phi_G(\\Lambda, \\Omega) = \\phi_G(\\Lambda_0, \\Omega_0), \\Lambda \\in R_D, \\Omega\\in P_D(B)\\}$.\nA fiber contains all pairs of matrices that induce the same observed covariance matrix $\\Sigma$. For $\\Sigma \\in im \\phi_G$, we also write $F_G(\\Sigma)$ for the fiber belonging to $\\Sigma$. We can phrase identifiabilty in terms of fibers:\n*   $G$ is globally identifiable, if $|F_G(\\Lambda_0, \\Omega_0)| = 1$ for all $\\Lambda_0 \\in R_D$ and $\\Omega_0 \\in P_D(B)$.\n*   $G$ is generically identifiable, if $|F_G(\\Lambda_0, \\Omega_0)| = 1$ for Zariski almost all $\\Lambda_0 \\in R_D$ and $\\Omega_0 \\in P_D(B)$.\nGeneric identifiability asks whether all parameters are almost always identifiable. It is also of interest to ask whether a single parameter $\\lambda_{i,j}$ is almost always identifiable. For this, we consider the projection of the fiber on the single parameter, which we will also call an edge fiber:\n$F^{e}_{ij}(\\Lambda_0, \\Omega_0) = \\{\\Lambda_{i,j} \\mid (\\Lambda, \\Omega) \\in F_G(\\Lambda_0, \\Omega_0)\\}$.\n*   $\\lambda_{ij}$ is generically edge identifiable, if $|F^{e}_{ij}(\\Lambda_0, \\Omega_0)| = 1$ for Zariski almost all $\\Lambda_0 \\in R_D$ and $\\Omega_0 \\in P_D(B)$.\nFor edge identifiability, we only consider parameters $\\lambda_{i,j}$ since parameters $\\omega_{kl}$ can be recovered from parameters $\\lambda_{i,j}$ [17].\nGlobal and generic identifiability are properties of the given mixed graph. In this work, we also study identification as a property of the observed numerical data, i.e., of the observed covariance matrix $\\Sigma$.\nDefinition 2 (Numerical Identifiability). Given an acyclic mixed graph $G = (V, D, B)$ and a feasible matrix $\\Sigma$, decide whether the parameters are uniquely identifiable, i.e. if $|F_G(\\Sigma)| = 1$?\nNote that this is a promise problem. We assume that $\\Sigma$ is feasible, i.e., in the image of $\\phi_G$. Therefore, we shall also study the feasibility problem: Given $\\Sigma$, is it contained in im $\\phi_G$?\nSimilarly we can also define numerical edge identifiability: For a given feasible $\\Sigma$, test whether the edge fiber $\\Sigma$ belongs to has size 1 or > 1."}, {"title": "The (Existential) Theory of the Reals", "content": "The existential theory of the reals (ETR) is the set of true sentences of the form\n$\\exists x_1...\\exists x_n \\varphi(x_1,...,x_n),$ \\label{eq:2}\nwhere $\\varphi$ is a quantifier-free Boolean formula over the basis $\\{\\vee, \\wedge, \\neg\\}$ and a signature consisting of the constants 0 and 1, the functional symbols + and $\\cdot$, and the relational symbols $<, \\leq$, and $=$. The sentence is interpreted over the real numbers in the standard way. The theory forms its own complexity class $\\exists \\mathbb{R}$ which is defined as the closure of ETR under polynomial-time many-one reductions. Many natural problems have been shown to be complete for ETR, for instance the computation of Nash equilibria [35], the famous art gallery problem [1], or training neural networks [5], just to mention a few.\nIt turns out that one can simplify the form of an ETR-instance. We can get rid of the relations $<$ and $\\leq$ and it is sufficient to consider only Boolean conjunctions. More precisely, the following problem is $\\exists \\mathbb{R}$-complete: Given polynomials $p_1,..., p_m$ in variables $x_1,..., x_n$, decide whether there is a $\\xi \\in \\mathbb{R}^n$ such that\n$p_1(\\xi) = \\dots = p_m(\\xi) = 0.$ \\label{eq:3}\nBy Tseitin's trick, we can assume that all polynomials are of one of the forms\n$ab-c, \\quad a+b-c, \\quad a-b, \\quad a-1, \\quad a$ \\label{eq:4}\nand all variables in each of the polynomials are distinct. Note that all polynomials in (4) have degree at most two. Therefore, this problem is also called the feasibility problem of quadratic equations QUAD. For a proof, see e.g. [35].\nUniversal Quantification. If, instead of considering existentially quantified true sentences, we consider universally quantified true sentences of the form\n$\\forall x_1... \\forall x_n \\varphi(x_1,..., x_n),$ \\label{eq:5}\nwhere $\\varphi$ is again a quantifier-free Boolean formula, and form the closure under polynomial-time many-one reductions, we obtain the complexity class $\\forall \\mathbb{R}$. Using De Morgan's law, it is easy to see the well-known fact that $\\forall \\mathbb{R} = co-\\exists \\mathbb{R}$, i.e. it is the complement class of $\\exists \\mathbb{R}$.\nIt is also possible to alternate quantifiers, giving rise to a whole hierarchy, see [36]. We call the corresponding classes $\\exists \\forall \\mathbb{R}, \\forall \\exists \\mathbb{R}, ...$.\nComplexity of $\\exists \\mathbb{R}$ and $\\forall \\mathbb{R}$. It is easy to see that quantification over real variables can be used to simulate quantification over Boolean variables by adding the constraint $x(x - 1) = 0$. This way we can convert 3SAT-formulas to ETR-formulas, proving the well-known containment $NP \\subseteq \\exists \\mathbb{R}$.\nWith his celebrated result about quantifier elimination, Renegar [34] proved that the truth of any sentence over the reals with a constant amount of quantifier alternations is decidable in PSPACE. This in particular implies\n$NP \\subseteq \\exists \\mathbb{R} \\subseteq PSPACE$ \\\\\n$coNP \\subseteq \\forall \\mathbb{R} \\subseteq PSPACE$ \\label{eq:6}\nWhile all these inclusions are believed to be strict, it is unknown for all of them."}, {"title": "Finding another solution", "content": "Numerical identification is a promise problem, we assume that the given input is feasible. Being a promise problem means that an algorithm for numerical identification should output the correct answer whenever the input is feasible. But it can output anything when the input is not feasible. We give some further information about promise problems in Appendix B for the reader's convenience.\nFor our hardness proof, we need to look at instances of ETR or QUAD that are satisfiable. Of course, deciding whether a satisfiable instance is satisfiable is a trivial task. So the task will be to decide whether the satisfiable instance has another solution. We call the corresponding promise problems ETR++ and QUAD++.\nIt turns out that these promise problems are $\\exists \\mathbb{R}$-hard. Since QUAD++ is a special case of ETR++, it suffices to prove this for QUAD++. Let y be an extra variable. We will plant an extra solution into the system (3):\n$y(y - 1) = 0$ \\label{eq:7}\n$yx_i = 0 \\qquad i = 1,..., n$ \\label{eq:8}\n$(y - 1)p_j = 0 \\qquad j = 1, ..., m$ \\label{eq:9}"}, {"title": "Hardness of Numerical Identifiability", "content": "This section is dedicated to proving:\nTheorem 2. Numerical identifiability is $\\forall \\mathbb{R}$-hard.\nThe proof consists of building a polynomial-time reduction from the complement of QUAD++ to numerical identifiability, i.e., we construct an acyclic mixed graph $G$ and a$\\Sigma \\in im\\phi_G$, such that the fiber $F_G(\\Sigma)$ has size 1 iff the given QUAD++-instance has only one solution. For this, we use the following characterization of fibers due to [17]:\nLemma 3. Let $G = (V, D, B)$ be an acyclic mixed graph, and let $\\Sigma \\in im \\phi_G$. The fiber $F_G(\\Sigma)$ is isomorphic to the set of matrices $\\Lambda \\in R^D$ that solve the equation system\n$[(I - \\Lambda)^T\\Sigma(I - \\Lambda)]_{i,j} = 0, \\qquad i \\neq j, i \\leftrightarrow j \\notin B$ \\label{eq:10}\nWe construct $G$ as follows: The directed edges form a bipartite graph with edges going from the bottom layer to the top layer. Every node at the bottom layer has outdegree one. Moreover bidirected edges exist between all pairs of nodes, except certain pairs of nodes of the top layer. See Figure 3 for an illustration.\nThis missing edge in Figure 3 corresponds to the equation\n$\\sigma_{ij} - \\sum_{l=1}^{n} \\sigma_{a_l i} \\lambda_{a_l r} - \\sum_{k=1}^{m} \\sigma_{i b_k} \\lambda_{b_k r} + \\sum_{l=1}^{n}\\sum_{k=1}^{m} \\sigma_{a_l b_k} \\lambda_{a_l r} \\lambda_{b_k r}$ \\label{eq:11}\nin Lemma 3.\nObservation 4. All $\\sigma$ values that appear in (11) cannot appear in any other missing edge equation of missing edges in the top layer, since the nodes in the bottom layer only have outdegree one. Furthermore $\\sigma_{ij}$ can obviously only appear in this equation.\nThe above observation means that we can freely \"program\" the equations. We start with a gadget with one node r in the top layer and n nodes in the bottom layer connected to it. It is used to store the value of each variable of our ETR instance, $\\lambda_{1,r}$ corresponds to $x_1$, $\\lambda_{2,r}$ corresponds to $x_2$, etc, see Figure 3 for an illustration.\nBy assuming all polynomials in our QUAD++-instance are of the forms (4), we need to be able to encode products and affine linear forms. We start by showing how to encode an arbitrary affine linear constraint $\\sum_{l=1}^{n} a_l x_l = \\beta$ using a single additional node $i$ in the top layer, \u201cconnected\u201d to $r$ via a missing edge as in Figure 4.\nSetting $\\sigma_{r i} = \\beta$ and $\\sigma_{a_l i} = a_l$ makes (11) together with $\\lambda_{l,r} = x_l$ directly equivalent to $\\sum_{l=1}^{n} a_l x_l = \\beta$.\nEncoding a product $x_a = x_b \\cdot x_c$ requires two additional nodes $i$ and $j$ in the top layer, with missing bidirectional edges between them and $r$. Furthermore we introduce two nodes $i'$ and $j'$ in the bottom layer, connected to $i$ and $j$ respectively, see Figure 4. Setting $\\sigma_{r,i} = \\sigma_{i',i} = 0$, $\\sigma_{r,i'} = -1$, $\\sigma_{c,i} = 1$, and $\\sigma_{l,i} = 0$, for all $l \\in \\{1, ..., n\\} \\backslash \\{c\\}$, ensures $\\lambda_{i',i} = \\lambda_{c,r}$. To further ensure $\\lambda_{j',j} = \\lambda_{i',i} = \\lambda_{c,r}$, we set $\\sigma_{i,j} = \\sigma_{i',j'} = 0$, $\\sigma_{i',j} = 1$, and $\\sigma_{i,j'} = -1$. After having copied $\\lambda_{c,r}$ twice, we are finally able to enforce the multiplication itself via $\\sigma_{r,j} = \\sigma_{r,j'} = 0$, $\\sigma_{a,j} = 1$, $\\sigma_{b,j'} = 1$, $\\sigma_{l,j} = 0$, for all $l \\in \\{1, ..., n\\} \\backslash \\{a\\}$, and $\\sigma_{l,j'} = 0$, for all $l \\in \\{1, ..., n\\} \\backslash \\{b\\}$.\nProof of Theorem 2. Let polynomials $p_1, ..., p_m$ in variables $x_1,...,x_n$ be a QUAD++-instance with all polynomials being one of the forms in (4). Let the number of affine linear polynomials among $p_1,...,p_m$ be $k$. Then the graph $G = (V, D, B)$ constructed above has $l := 1 + n + k + 4(m-k) = 1 + n + 4m - 3k$ nodes. Using Observation 4, we see that the construction induces a well-defined partial matrix $\\Sigma \\in \\mathbb{R}^{l \\times l}$. Every entry of $\\Sigma$ not defined by the construction is set to $0$ if it is off-diagonal and $l$ if it is on the diagonal. Since all $\\sigma_{ij}$ set in the construction are from $\\{-1,0,1\\}$ and off-diagonal, this makes $\\Sigma$ strictly diagonally dominant and thus positive definite by the Gershgorin circle theorem [24].\nRemains to prove $\\Sigma \\in im\\phi_G$. Let $\\xi \\in \\mathbb{R}^n$ be any solution with $p_1(\\xi) = \\dots = p_m(\\xi) = 0$. The existence of $\\xi$ is guaranteed by the promise of QUAD++. Create $\\Lambda \\in \\mathbb{R}^{l \\times l}$ as follows: $\\lambda_{i,r} = \\xi_i$ for $i \\in \\{1, ..., n\\}$ and $\\lambda_{i',i} = \\lambda_{j',j} = \\xi_c$ whenever the vertices $i, i', j, j'$ are the vertices added by the construction due to a multiplication. All other entries of $\\Lambda$ are 0. Then $I - \\Lambda$ is invertible and we have $\\Sigma = \\phi_G(\\Lambda, \\Omega)$ for $\\Omega = (I - \\Lambda)^T\\Sigma (I - \\Lambda)$. Furthermore $\\Omega$ is positive definite due to $\\Sigma$ being positive definite and $\\Omega \\in P_D(B)$.\nBy Lemma 3, this implies that $|F_G(\\Sigma)|$ is precisely the number of solutions of our QUAD++-instance and the theorem now follows from the the $\\forall \\mathbb{R}$-hardness of the complement of QUAD++ which is equivalent to Corollary 1."}, {"title": "Upper Bound for Numerical Identifiability", "content": "In this section, we show a $\\forall \\mathbb{R}$ upper bound for numerical identifiability and thus, combined with Theorem 2, prove an almost3 matching lower and upper bound. We start with the following lemma.\nThe $\\exists \\mathbb{R}$ part will be needed in the next section.\nLemma 5. Membership in $P_D(n)$ and $P_D(B)$ can be expressed in $\\exists \\mathbb{R}$ and $\\forall \\mathbb{R}$.\nProof. For the $\\exists \\mathbb{R}$ expression, we use the fact that every real positive definite matrix $A \\in \\mathbb{R}^{n \\times n}$ has a Cholesky decomposition $A = L L^T$ where $L$ is a real lower triangular matrix with positive diagonal entries. We can thus express $A \\in P_D(n)$ as\n$\\exists L \\in \\mathbb{R}^{n \\times n} : A = L L^T \\wedge (L_{i,i} > 0) \\wedge (L_{i,j} = 0).$ \\label{eq:12}\ni\\in\\{1,...,n\\} \\quad j\\in\\{i+1,...,n\\}\nWe quantify over matrices and consider matrix equations in (12). But this can be easily rewritten as an ETR-instance by quantifying over all entries of the matrix and having one individual equation for each entry of the matrix equation.\nFor the $\\forall \\mathbb{R}$ expression, we directly use the definition of positive definite matrices to express $A \\in P_D(n)$ as\n$\\forall x \\in \\mathbb{R}^n : x \\neq 0 \\implies x^T A x > 0.$ \\label{eq:13}\nFor membership $A \\in P_D(B)$, in both $\\exists \\mathbb{R}$ and $\\forall \\mathbb{R}$, we add the constraint $\\forall (i,j) \\notin B \\wedge i \\neq j A_{i,j} = 0$ to (12) and (13), respectively.\nWe remind the reader that numerical identifiability is a promise problem with the promise that the input $\\Sigma \\in im \\Phi_G$, so it suffices to check whether all elements in the fiber $F_G(\\Sigma)$ are identical.\n$\\forall \\Lambda_1, \\Lambda_2 \\in R_D, \\Omega_1, \\Omega_2 \\in P_D(B) :$\n$\\phi_G(\\Lambda_1, \\Omega_1) = \\phi_G(\\Lambda_2, \\Omega_2) = \\Sigma \\implies (\\Lambda_1 = \\Lambda_2 \\wedge \\Omega_1 = \\Omega_2).$ \\label{eq:14}\nThe checks $\\phi_G(\\Lambda_i, \\Omega_i) = \\Sigma$ are implemented using $\\Omega_i = (I - \\Lambda_i)^T \\Sigma (I - \\Lambda_i)$, which is equivalent due to $I - \\Lambda$ being invertible for any $\\Lambda_i \\in R_D$. This proves the following:\nTheorem 6. Numerical identifiability is in (the promise version of) $\\forall \\mathbb{R}$.\nLemma 8. Membership in im $\\phi_G$ can be expressed in $\\exists \\mathbb{R}$.\nProof. We use the expression $\\exists \\Lambda \\in R_D, \\Omega \\in P_D(B) : (I - \\Lambda)^T\\Sigma (I - \\Lambda) = \\Omega$, where we use Lemma 5 to express $\\Omega \\in P_D(B)$ in $\\exists \\mathbb{R}$, that is, we quantify over an arbitrary matrix $\\Omega$ first and add the ETR expression from Lemma 5 to ensure that $\\Omega$ is in $P_D(B)$.\nSo we can check in $\\exists \\mathbb{R}$ whether the input $\\Sigma$ is feasible and then in $\\forall \\mathbb{R}$ whether the fiber has only one element. Using Renegar's algorithm, we get:\nCorollary 2. Numerical identifiability can be decided in polynomial space."}, {"title": "Generic Identifiability is in PSPACE", "content": "Let DIM denote the following problem: Given an encoding of a semi-algebraic set $S$ and a number $d$, decide whether dim $S \\geq d$.\nLemma 9 ([28]). The problem DIM is $\\exists \\mathbb{R}$-complete. Moreover, this is even true when the set is given by an existentially quantified formula as in (2).\nWe use the same notation as in Section 2.1. Let $G = (V, D, B)$ be a mixed graph. Let $S_G = \\{(\\Lambda, \\Omega) \\mid |F_G(\\Lambda, \\Omega)| > 1, \\Lambda \\in R_D, \\Omega \\in P_D(B)\\}$.\nObservation 10. $G$ is generically identifiable iff dim $R_D \\cdot$ dim $P_D(B) >$ dim $S_G$.\nProof. As $S_G \\subseteq R_D \\times P_D(B)$ and dim$(R_D \\times P_D(B)) =$ dim $R_D \\cdot$ dim $P_D(B)$, the righthand side is just the definition of being generically identifiable.\nWe postpone the proof that membership in $S_G$ can be expressed in $\\exists \\mathbb{R}$, in favor of first giving our algorithm to decide generic identifiability, using this observation:\nTheorem 11. Generic identifiability is both in $\\forall \\exists \\mathbb{R}$ and $\\exists \\forall \\mathbb{R}$.\nProof. Let $G$ be the given mixed graph. Formulate membership in $R_D$, $P_D(B)$, and $S_G$ as instances of ETR using Lemmas 5 and 12. Note that the number of variables and the sizes of these instances are polynomial in the size of $G$.\nWe first assume that we have oracle access to ETR, that is, we can query ETR a polynomial number of times. We decide whether $G$ is generically identifiable as follows:\n1.  Use Koiran's algorithm repeatedly to compute dim $S_G$ by checking whether dim $S_G \\geq d$ for $d = 0, ..., m^4$. (We could even use binary search.)\n2.  Compute dim $R_D$ and dim $P_D(B)$ in the same way. Here it suffices to check up to the maximum possible dimension of $d = m^2$.\n3.  Accept if dim $R_D \\cdot$ dim $P_D(B) >$ dim $S_G$, and reject otherwise.\nThe algorithm is correct by Observation 10. The algorithm above would already show the PSPACE upper bound for generic identifiability.\nHowever, we can implement the algorithm above by a single formula by replacing the repeated use of Koiran's algorithm by a big disjunction:\n$\\bigvee_{d_1=0}^{m^2} \\bigvee_{d_2=0}^{m^2}$ (dim $R_D \\geq d_1 \\wedge$ dim $P_D(B) \\geq d_2 \\wedge$ dim $S_G < d_1 d_2$).\nNote that the check dim $S_G < d_1 d_2$ needs to be implemented as $\\neg$(dim $S_G \\geq d_1 d_2$), thus being in$\\forall \\exists \\mathbb{R}$ by De Morgan's laws. The existential and universal quantifiers are however independent, giving upper bounds of both $\\forall \\exists \\mathbb{R}$ and $\\exists \\forall \\mathbb{R}$.\nUsing Renegar's algorithm this implies:\nCorollary 3. Generic identifiability can be decided in PSPACE.\nOnly remains to show how to express membership in $S_G$ as an ETR-formula.\nLemma 12. Membership in $S_G$ can be expressed in $\\exists \\mathbb{R}$."}, {"title": "A note on cyclic graphs", "content": "Our results so far have depended on the fact that every matrix $I - \\Lambda$ with $\\Lambda \\in R_D$ is invertible if the graph is acyclic. However, if the graph is cyclic, $I - \\Lambda$ is not necessarily invertible. So in this case, we need to explicitly consider the subset $R^{reg}_D$ of matrices $\\Lambda \\in R_D$ such that $I - \\Lambda$ is invertible.\nFor matrices $\\Lambda_0 \\in R^{reg}_D$ and $\\Omega_0 \\in P_D(B)$, [22] define fibers as\n$F_G(\\Lambda_0, \\Omega_0) = \\{(\\Lambda, \\Omega) \\mid \\phi_G(\\Lambda, \\Omega) = \\phi_G(\\Lambda_0, \\Omega_0), \\Lambda \\in R^{reg}_D, \\Omega \\in P_D(B)\\}$."}, {"title": "Edge Identifiability", "content": "For edge identifiability, we obtain the same results as for identifiability itself."}, {"title": "Hardness of Numerical Edge Identifiability", "content": "If we analyze the reduction in Theorem 2 in a bit more detail, we can use the same reduction to show\nCorollary 4. Numerical edge identifiability is $\\forall \\mathbb{R}$-hard.\nProof. If instead of starting with an arbitrary QUAD++-instance, we start with a QUAD++-instance generated by Lemma 1 and Corollary 1. These instances have a distinguished variable y, such that there is always a single solution with $y = 1$ and possibly multiple solutions with $y = 0$. W.l.o.g. let $x_1$ be this distinguished variable. Following the reduction in Theorem 2 we construct a graph $G$ and a $\\Sigma \\in im \\phi_G$, such that the fiber $F_G(\\Sigma)$ is isomorphic to the solutions our QUAD++-instance. In particular the value of $\\Lambda_{1,r}$ in the elements of $F_G(\\Sigma)$ is exactly the value of $x_1$ in solutions to the QUAD++-instance. Thus $|F^{e}_{i}(2)| = 1$ iff the QUAD++ instance has exactly one solution, otherwise $|F^{e}_{i}(2)| = 2$."}, {"title": "Upper Bound for Numerical Edge Identifiability", "content": "Similarly to (14), we can express numerical edge identifiability as the $\\forall \\mathbb{R}$-formula\n$\\forall \\Lambda_1, \\Lambda_2 \\in R_D, \\Omega_1, \\Omega_2 \\in P_D(B) :$\n$\\phi_G(\\Lambda_1, \\Omega_1) = \\phi_G(\\Lambda_2, \\Omega_2) = \\Sigma \\implies (\\Lambda_1)_{i,j} = (\\Lambda_2)_{i,j}.$ \\label{eq:15}\nThis yields\nTheorem 13. Numerical edge identifiability is in (the promise version of) $\\forall \\mathbb{R}$.\nAgain using Renegar's algorithm we also get\nCorollary 5. Numerical edge identifiability can be decided in polynomial space."}, {"title": "Generic Edge Identifiability is in PSPACE", "content": "We modify the algorithm of Section 6 to work with generic edge identifiability for some $\\Lambda_{i,j}$ rather than generic identifiability. Let $S^{e}_{ij} = \\{(\\Lambda, \\Omega) \\mid |F^{e}_{ij}(\\Lambda, \\Omega)| > 1, \\Lambda \\in R_D, \\Omega \\in P_D(B)\\}$. Then we have the following analog to Observation 10:\nObservation 14. $\\Lambda_{i,j}$ is generically edge identifiable iff dim $R_D \\cdot$ dim $P_D(B) >$ dim $S^{e}_{ij}$."}, {"title": "Promise problems", "content": "We give some background information on promise problems for the readers convenience. In a classical decision problem $L$, we are given an input an we have decide whether $x \\in L$ (the so-called yes-instances) or $x \\notin L$ (the no-instances). For instance, in the classical SAT problem, we are given a formula $F$ in CNF. The yes-instances are the satisfiable formulas and the no-instances are the unsatisfiable one.\nPromise problems have a third type of instances, the so-called do-not-care-instances. On these instances, an algorithm can do what it wants and give any output. For instance, consider the problem SAT++, where ask the question of whether a satisfiable formula in CNF has another satisfying assignment. The yes-instances are all $F$ with at least two satisfying assignments, the no-instances are all $F$ with exactly one satisfying assignment, and the do-not-care-instances are all unsatisfiable $F$. An algorithm solving SAT++ has to output \u201cyes\u201d on every $F$ with at least two satisfying assignments and \"no\" on every $F$ with exactly one satisfying assignment. On unsatisfiable formulas, it can output whatever it wants. Note that every classical decision problem is also a promise problem with the do-not-care-instances being the empty set.\nWe can also define many-one reductions for promise problems: A function $f : \\{0,1\\}^* \\to \\{0,1\\}^*$ is called a many-one reduction from a promise problem $L$ to another promise problem $L'$, if $f$ maps yes-instances of $L$ to yes-instances of $L'$ and no-instances of $L$ to no-instances of $L'$. $f$ can map do-not-care-instances of $L$ to any instance of $L'$. By using a similar trick of encoding an additional satisfying assignment like in the case of ETR++, one can show that SAT++ is NP-hard, since we can reduce SAT to it. This reduction maps the unsatisfiable formulas (no-instances of SAT) to formulas with one satisfying assignment (no-instances of SAT++) and satisfiable formulas (yes-instances of SAT) to formulas with two or more satisfying assignments (yes-instances of SAT++). Since SAT is a classical decision problem, there are no do-not-care-instances. SAT++ is, however, not contained in NP for formal reasons, because NP only contains classical decision problems."}, {"title": "Semialgebraic sets", "content": "For the reader's convenience, we give a brief introduction to semialgebraic sets and discuss the notations important for this work. For details and proofs, we refer to the book [4].\nA semialgebraic set in $\\mathbb{R}^n$ is a finite Boolean combination (finite number of unions and intersections) of sets of the form $\\{(x_1,...,x_n) \\mid f(x_1,...,x_n) > 0\\}$ and $\\{(x_1,...,x_n) \\mid g(x_1,...,x_n) \\geq 0\\}$. Here $f$ and $g$ are real polynomials in $n$ variables.\nA semialgebraic function is a function $\\mathbb{R}^n \\to \\mathbb{R}^{n'}$ with a semialgebraic graph, that is, the set of all $\\{(x, f(x)) \\mid x \\in \\mathbb{R}^n\\}$ is a semialgebraic set.\nFrom this definition of semialgebraic sets, it is easy to see that semialgebraic sets are the solutions of ETR-instances, that is, all $(x_1,...,x_n)$ satisfying $\\varphi(x_1,...,x_n)$ in (2) form a semialgebraic set."}, {"title": "Koiran's algorithm", "content": "Koiran mainly works in the so-called BSS-model of real computation. In this model, one is also allowed to use arbitrary real constants in the algorithm as well as real inputs. In $\\exists \\mathbb{R}$, we only allow the constants 0 and 1 and the inputs are given by some binary encoding. However, Koiran also considers the bit model. [28, Theorem 6] proves the computational equivalence of DIM and 4FEAS in the bit model. Since 4FEAS is $\\exists \\mathbb{R}$-complete [35], this implies that DIM is $\\exists \\mathbb{R}$-complete. Note that at the time Koiran wrote his paper, the class $\\exists \\mathbb{R}$ was not formally defined and therefore, Koiran does not mention it explicitly.\nFor the moreover part, note that [28, Section 1.1] discusses the representations of semi-algebraic sets that are supported by his proof. There he mentions existentially quantified formulas explicitly."}]}