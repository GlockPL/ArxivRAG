{"title": "Tracking Software Security Topics", "authors": ["Phong Minh Vu", "Tung Thanh Nguyen"], "abstract": "Software security incidents occur everyday and thousands of software security reports are announced each month. Thus, it is difficult for software security researchers, engineers, and other stakeholders to follow software security topics of their interests in real-time. In this paper, we propose, SOSK, a novel tool for this problem. SOSK allows a user to import a collection of software security reports. It pre-processes and extracts the most important keywords from the textual description of the reports. Based on the similarity of embedding vectors of keywords, SOSK can expand and/or refine a keyword set from a much smaller set of user-provided keywords. Thus, SOSK allows users to define any topic of their interests and retrieve security reports relevant to that topic effectively. Our preliminary evaluation shows that SOSK can expand keywords and retrieve reports relevant to user requests.", "sections": [{"title": "1 Introduction", "content": "Software security incidents occur everyday. While most are trivial, some high profile incidents could lead to big financial losses or even human lives. To discover new software security vulnerabilities or enhance their software systems with latest security updates, software security researchers, engineers, and other stakeholders have to closely monitor software security topics of their interests. However, this is a difficult task because thousands of software security reports are announced each month. For example, in 2023, there are in total nearly 30,000 records newly added to CVE (Common Vulnerability and Exposures) - the most popular database of software security vulnerabilities\u00b3. The CVE website has a simple function for searching CVE reports. A user can provide one or several keywords to search for records containing those keywords in their textual description\u00b9. However, it is still difficult for users, because they need to provide all relevant keywords to a specific topic of their interests.\nTo address this problem, in this paper, we propose SOSK, a novel approach for extracting keywords and tracking security reports. SOSK allows a user to download a database of software security reports. It then pre-processes and extracts the most important keywords from the textual description of the reports. Based on the similarity of embedding vectors of keywords, SOSK can expand and/or refine a keyword set from a much smaller set of user-provided keywords."}, {"title": "2 Approach", "content": "In this section, we will discuss our approach in detail. SOSK is designed as a document management system with three main components: 1) a document store (DS); 2) a dictionary of keywords (KD); and 3) an index mapping keywords to documents (IX).\nThe document store DS is a locally stored database containing the security reports that SOSK has imported and indexed. Each report has two main attributes: its created date and its textual content. Keywords are stored in a dictionary KD. Each keyword has a textual value (like sql or overflow), a weighting score (like 0.95 or 0.73), and an embedding vector of 768 real values. To simplify the indexing and tracking steps, the textual values of keywords are converted to low-case. The index IX stores for each keyword a hash map containing the ids of documents (security reports) containing that keyword and its positions in each document. Keywords and such positions are extracted from the documents' content while indexing.\nBecause SOSK is designed for software security domain, in addition to common English words (nouns, verbs, adjectives), the keyword dictionary KD also contains domain-specific names and identifiers such as windows, win32, sql, linux, Is (a command in Linux), http (a network protocol), or svchost (a process in Windows OS). We pre-populated this keyword dictionary with a dictionary of English words extracted from WordNet [3] and a domain specific vocabulary for software documents collected from previous studies [6,1,2]. Users can also import user predefined dictionaries to add more domain-specific vocabulary.\nSOSK has two main functions: indexing and tracking. When a user imports one or (typically) a collection of security reports into SOSK, it will perform indexing on imported documents to update its document store, keyword dictionary, and index. In tracking, SOSK allows a user to define a topic as a list of keywords, expand this list with more related keywords recommended by SOSK,"}, {"title": "2.1 Indexing", "content": "SOSK performs indexing each document (security reports) by low-casing and tokenizing its textual content first. SOSK tries to correct each token using a common for mapperly misspelled words and names provided by MARK [6]. For example, watsapp is corrected as whatsapp (the name of a popular mobile app for texting). Then, for each string token, if it exists in the keyword dictionary KD as a domain specific term (e.g., windows or sql), no stemming is applied. Otherwise, if it is a common English word, Snowball Stemmer is used for stemming. If the token does not exist in the dictionary, it is added as a new keyword.\nDuring this process, SOSK will update the index IX and the keyword dictionary KD for each keyword. The index IX will be updated to keep track of the original positions of each keyword in the document under indexing. This is necessary in case users want to identify or highlight the analyzed text on the actual document later. The occurrence count of each keyword and co-occurrence count of each pair of keywords are also updated for calculating the keywords' scores and embedding vectors later.\nEmbedding vectors According to recent advances in natural language processing and language modeling, the semantic similarity of words can be measured by the distance of their embedding vectors. Thus, SOSK calculates for each keyword an embedding vector of 768 real numbers using Glove [5]. Then, for two keyword a, b with corresponding embedding vectors va, vb, their similarity is define as\n$\\rho(a, b) = \\frac{Va.Vb}{||Va||.||Vb||}$\nKeyword scores SOSK calculates for each keyword a score for later ranking. Currently, this score is its inverse document frequency (idf). If the document store DS has in total N documents and a keyword a appears in Na documents, then its idf score is\n$d(a) = log(N/Na)$"}, {"title": "2.2\nTracking", "content": "In SOSK, a topic is a set of keywords. A document contains one of some of those keywords will be considered to be relevant to that topic. For example, the set {buffer, memory, overflow} could be used to define the topic buffer overflow. \u0391 security report contains such words will likely be written about vulnerabilities from buffer overflow.\nSOSK calculates the relevance of a document to a topic based on the Vector Space Model. Assume a keyword a occurs $n_{a,s}$ times in a document S and S has"}, {"title": null, "content": "in total ns word occurrences. The term frequency (tf) of keyword a in document S is defined as\n$t(a, S) = n_{a,s}/n_s$\nThe relevance of keyword a to document S is t(a, S).d(a). Then, the relevance of a topic Q to a document S is the total relevance from all its keywords\n$\\Gamma(Q, S) = \\sum_{a \\in Q} t(a, S).d(a)$\nThat means, the more keywords are used to define a topic, the higher relevance is calculated for documents containing keywords of that topic. However, a user might not know all the keywords to define a topic of his interest. Therefore, a key function in SOSK is to recommend more keywords to expand a user-defined topic. For a topic Q, SOSK will calculate the list of recommended keywords:\n$\\chi(Q) = {b | \\exists a \\in Q : \\rho(a, b) > \\theta}$\nThis list contains every keyword b that is sufficiently similar (e.g. higher than a threshold \u03b8) to at least a keyword a in Q. This list will be ranked descending by the keyword scores d(b) and presented to the user. He can add some of those keywords into Q and repeat the recommending step until satisfied.\nAfter the user defines a topic Q, SOSK uses the index IX to find every document S containing at least a keyword in Q. Then, it calculates the relevance score \u0393(Q, S). The user can rank those documents by their relevance scores or by their created dates (e.g., to focus on more recent security reports first)."}, {"title": "3 Evaluation", "content": "In this section, we report a preliminary evaluation on a dataset of 112,197 security reports from the Common Vulnerability and Exposures (CVE) database, dated from 1999 to 2016.\nWe first downloaded this dataset and imported it into SOSK for indexing. Then, we pre-loaded the embedding vectors for all applicable keywords (common English words and technical names) in SOSK with the pre-trained embedding vectors from the English Wikipedia dump. After that, the co-occurrence counts from SOSK indexing step were used to fine-tuning those embedding vectors.\nThat task was needed to produce high quality embedding vectors for SOSK. Because the CVE dataset contains only very short and descriptive documents, it is not sufficient to learn high quality embedding vectors. Using pre-trained vectors and fine-tuned them using a domain-specific dataset reinforces the embedding vectors of common words that appear in both corpora (Wikipedia and CVE), while the technical or domain-specific keywords in the CVE dataset would have more significant embedding vectors."}, {"title": "3.1 Studying previously reported security topics", "content": "Neuhaus and Zimmermann published a study of trend analysis for security problems in the CVE dataset in 2009 [4]. However, as per technological advance, the security topics may have changed after that. Therefore we picked three major topics SQL Injection, Cross-site Scripting and Buffer Overflow from their study and used our tool on more recent CVE reports to answer two questions: 1) How did their trends changed after 2009; and 2) What are the actual descriptions of the security problems for those topics?\nThe results are shown in Table 1, Table 2, and Figure 1. In Table 1, the column Seeded Keywords lists the keywords used by Neuhaus and Zimmermann in their study. We fed them into SOSK and SOSK recommended new keywords in the right column (with a similarity threshold of 0.9).\nHow did security trends changed after 2009? As shown in Figure 1, even though we used a different approach, the shape of the trends from 2000 to 2009 reported by SOSK is similar to the findings reported in [4]. Then, after 2009 topic SQL Injection had a sharp decline in the total number of reports, while the reports for Cross-site Scripting fluctuated for the next few years. While the percentage of this type of attack was reduced dramatically during the those years, its actual number remained steady. Finally, after the gradual drop observed by Neuhaus and Zimmermann, Buffer Overflow attacks kept declining slowly only to increased again during 2015 and 2016. These numbers could indicate that SQL Injection is not a popular breach around 2009 - 2016, but Cross-site Scripting and Buffer Overflow are still prevalent.\nWhat are the actual descriptions of the security reports? To answer the second research question, we printed out the descriptions matched keywords of the studying topics. Table 2 shows some examples. More can be viewed completely along with the artifacts of this paper. For SQL Injection, we can see"}, {"title": "3.2 Exploring new topic", "content": "One topic not reported in the original study of Neuhaus and Zimmermann was security risk in mobile devices. With CVE data at the time (from 1999 to 2009), the LDA method could not identify the rising of security reports related to mobile devices despite of a booming first year of iPhone being introduced to the world in 2017-2018. It is also not a pre-defined security topic at cvedetails.com."}, {"title": "4 Related work", "content": "Neuhaus and Zimmermann analyzed 39,393 vulnerability reports in the Common Vulnerability and Exposures (CVE) database from 1999 to 2009 [4]. They applied topic modeling (LDA) on descriptions of those CVE reports to find prevalent"}, {"title": "5 Conclusions", "content": "In this paper, we introduce SOSK, a tool for tracking software security reports by keywords. A user can collect a database of software security reports (typically text-based) and import it into SOSK. While importing, SOSK pre-processes and extracts the most important keywords from the textual description of the reports. Using pre-trained and fine-tuned embedding vectors of keywords, SOSK can compute their similarity and is able to expand and/or refine a keyword set from a much smaller set of user-provided keywords. Our preliminary evaluation shows that SOSK can enable users to define several topics of their interests and retrieve security reports relevant to that topic effectively."}]}