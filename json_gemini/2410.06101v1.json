{"title": "Coevolving with the Other You: Fine-Tuning LLM with Sequential Cooperative Multi-Agent Reinforcement Learning", "authors": ["Hao Ma", "Tianyi Hu", "Zhiqiang Pu", "Boyin Liu", "Xiaolin Ai", "Yanyan Liang", "Min Chen"], "abstract": "Reinforcement learning (RL) has emerged as a pivotal technique for fine-tuning large language models (LLMs) on specific tasks. However, prevailing RL fine-tuning methods predominantly rely on PPO and its variants. Though these algorithms are effective in general RL settings, they often exhibit suboptimal performance and vulnerability to distribution collapse when applied to the fine-tuning of LLMs. In this paper, we propose CORY, extending the RL fine-tuning of LLMs to a sequential cooperative multi-agent reinforcement learning framework, to leverage the inherent coevolution and emergent capabilities of multi-agent systems. In CORY, the LLM to be fine-tuned is initially duplicated into two autonomous agents: a pioneer and an observer. The pioneer generates responses based on queries, while the observer generates responses using both the queries and the pioneer's responses. The two agents are trained together. During training, the agents exchange roles periodically, fostering cooperation and coevolution between them. Experiments evaluate CORY's performance by fine-tuning GPT-2 and Llama-2 under subjective and objective reward functions on the IMDB Review and GSM8K datasets, respectively. Results show that CORY outperforms PPO in terms of policy optimality, resistance to distribution collapse, and training robustness, thereby underscoring its potential as a superior methodology for refining LLMs in real-world applications.", "sections": [{"title": "1 Introduction", "content": "Large language models (LLMs) have achieved impressive success across diverse downstream tasks, including dialogue systems [Ouyang et al., 2022, Touvron et al., 2023], code generation [Roziere et al., 2023], and robotic control [Driess et al., 2023, Brohan et al., 2023]. However, as the capabilities of LLMs advance, the challenges associated with further performance gains become increasingly intricate. Fine-tuning LLMs for specific tasks presents a significant challenge, prompting recent exploration of LLM fine-tuning paradigm such as supervised fine-tuning (SFT) [Wu et al., 2021], reinforcement learning (RL) fine-tuning [Shojaee et al., 2023], and direct preference optimization (DPO) [Rafailov et al., 2024]. RL fine-tuning demonstrates promising potential for refining LLM.\nCompared to SFT, RL fine-tuning offers a more direct optimization path, aligning training with desired outcomes and potentially leading to better out-of-distribution performance [Kirk et al., 2023]. Compared to DPO, RL fine-tuning allows fine-tuning on rule-based reward functions without requiring preference data.\nHowever, contemporary RL algorithms are not specifically designed for LLMs. When fine-tuning an LLM using these RL algorithms, they exhibit instability and vulnerability to distribution collapse, which means that the LLM is over-optimized and exhibits highly biased behavior [Zheng et al., 2023, Yang et al., 2024b]. From the perspective of RL, LLM fine-tuning has several challenges, including large discrete action space and sparse rewards. Taking the RL fine-tuning of Llama-2 [Touvron et al., 2023] as an example, the dimension of the action space of Llama-2 can reach to 32000, representing 32000 potential vocabulary choices. Moreover, the reward signal is received only after generating the complete response, which results in a sparse reward problem. The above challenges hinder the exploration in such a vast search space, causing the instability of popular algorithms like PPO [Schulman et al., 2017].\nCooperative multi-agent reinforcement learning (MARL) represents a paradigm shift in the field of artificial intelligence (AI), where multiple autonomous agents coevolve within a complex system, resulting in the emergence of new skills [Foerster, 2018, Yang and Wang, 2020, Oroojlooy and Hajinezhad, 2023, Zang et al., 2023]. Language is an outcome of such multi-agent coevolution. In a society, numerous individuals utilize language for communication. Languages develop through agent interactions and are shaped by societal and cultural influences. As languages progress, they influence and are influenced by these interactions [Cavalli-Sforza and Feldman, 1981, Du\u00e9\u00f1ez-Guzm\u00e1n et al., 2023]. Inspired by this, fine-tuning an LLM within a cooperative MARL framework might lead to the emergence of superior policies during coevolution.\nIn this paper, we propose a plug-and-play method named CORY, which extends the RL fine-tuning of LLMs to a sequential cooperative MARL framework. In CORY, the LLM to be fine-tuned is initially duplicated into two autonomous agents\u00b3, assigned two roles respectively: a pioneer and an observer. There are two fundamental mechanisms in CORY to enable the coevolution of the two LLM agents. The first is knowledge transfer, where the pioneer generates a response according to a task query independently, and the observer generates response based on the query as well as the response from the pioneer. The second is role exchange, where the roles of the two LLM agents are exchanged periodically during training. The two agents share a collective reward, calculated as the sum of individual task rewards, and they are trained simultaneously with their respective samples. Ultimately, CORY acts as a form of bootstrapping, wherein the collaborative learning between LLMs enhances the effectiveness of RL fine-tuning. Notably, this approach remains algorithm-agnostic, offering flexibility for integration with various RL algorithms beyond PPO, while maintaining simplicity and compatibility with existing methods.\nIn the experimental evaluation, we systematically investigate the efficacy of our proposed method across two types of reward functions: subjective and objective. Subjective reward functions are models trained to align human preferences, while objective reward functions are pre-defined functions typically established by domain experts. For the assessment of subjective rewards, we leverage the IMDB review dataset [Tripathi et al., 2020], a well-established benchmark for sentiment analysis. Meanwhile, the evaluation of objective rewards is conducted using the GSM8K dataset [Cobbe et al., 2021a], which focuses on mathematical word problem reasoning. Experiment results indicate that CORY surpasses PPO regarding policy optimality, resilience to distribution collapse, and robustness during training, highlighting its potential as an advanced method for improving LLMs in practical applications."}, {"title": "2 Problem Formulation", "content": "To understand LLMs through the lens of RL, we present a sequential decision-making problem formulation for the next-token prediction in causal language models. The next-token prediction is precisely defined by the concept of language-augmented Markov decision process [Li et al., 2022], denoted as M =< V, S, A, r, P, \u03b3 >. Here, V represents a vocabulary of a language model, encompassing all possible tokens. The w \u2208 V represents a specific token within this vocabulary. The"}, {"title": "3 Method", "content": ""}, {"title": "3.1 Coevolving with the Other You (CORY)", "content": "To extend the RL fine-tuning of LLMs to a cooperative MARL framework, the LLM to be fine-tuned in CORY is initially duplicated into two copies, each is treated as an autonomous agent. Then, two roles, a pioneer and an observer, are assigned to these two LLM agents. We design two fundamental mechanisms to facilitate the coevolution between the two agents. The first design is knowledge transfer. The LLMs asynchronously take action, with the pioneer transferring its response (action) to the observer. The observer then utilizes this information to guide its own decision. The second design is role exchange. Once the observer achieves a satisfactory performance, it exchanges roles with the pioneer. In the following, we provide a comprehensive description of each element, and the\nKnowledge Transfer. To enable collaboration between the two LLM agents for improved response generation, we introduce a knowledge transfer mechanism. Given a query denoted as 80, the pioneer acts first and generates a response denoted as a1. Subsequently, the observer receives both the original query so and the pioneer's response a\u2081 to generate its own response a2. This sequential interaction facilitates knowledge transfer, where the observer leverages the pioneer's output to guide its own generation process, potentially leading to a superior response due to the in-context learning capabilities of LLMs. The sentence-level policies of the pioneer and observer can be formulated as follows:\n$a_1 \\sim \\pi_{pio}(\\cdot|s_0), a_2 \\sim \\pi_{obs}(. | s_0, a_1).$\nDuring the training process, the parameters of the pioneer and the observer are optimized separately through an RL algorithm such as PPO. A cooperative relationship exists between the two LLM agents.\nRole Exchange. During training, the observer may develop a prompt bias due to consistently receiving inputs in the form of (80, a1). This reliance on prompts that combine the original query with the pioneer's response, hinders the observer's ability to generate responses independently. To address this issue, we introduce a role exchange mechanism. This mechanism involves exchanging the roles of the pioneer and observer periodically during training:\n$\\pi_{pio}(\\cdot|s_0) = \\pi_{pio}(\\cdot|s_0; \\theta_1), \\\\ \\pi_{pio}(\\cdot|s_0) = \\pi_{pio}(\\cdot|s_0; \\theta_2),$\n$\\pi_{obs}(\\cdot|s_0, a_1) = \\pi_{obs}(\\cdot|s_0, a_1; \\theta_2), \\text{ if swap = False} \\\\ \\pi_{obs}(\\cdot|s_0, a_1) = \\pi_{obs}(\\cdot|s_0, a_1; \\theta_1), \\text{ if swap = True},$\nwhere swap is initialized as False, and reverse periodically. This exchange ensures that both the LLMs experience both roles (pioneer and observer) multiple times throughout the training process. Through this role exchange mechanism, they are forced to adapt to both prompt formats: so alone and the combined format (80,01). This allows us to use either LLM individually during inference. From a representational learning perspective, this role exchange mechanism encourages the LLMs to develop a unified representation for so and (80, a1). This unified representation captures the essential information from the task query, regardless of the specific prompt format presented during training or inference.\nThese two key mechanisms in CORY act as a form of bootstrapping. The two LLM agents collaborate, with the observer potentially learning better policies by leveraging the pioneer's output. Role exchange ensures both the LLMs benefit from this collaborative learning, similar to cooperative learning among humans. Importantly, CORY is an algorithm-agnostic approach, meaning it can be theoretically compatible with various RL algorithms beyond PPO. Additionally, CORY offers the advantages of simplicity in implementation and seamless integration with existing frameworks, making it a plug-and-play solution."}, {"title": "3.2 Understanding CORY", "content": "Following the explanation of CORY in Section 3.1, this section provides an empirical demonstration of why the proposed method surpasses the single-agent RL fine-tuning method.\nIn fact, RL fine-tuning with KL penalty inherently formulates a multi-objective reinforcement learning problem. The LLM agent strives to concurrently maximize the task reward and minimize the KL divergence. Unfortunately, these two objectives may be in opposition to one another. This is because maximizing the task reward will inevitably lead to the output distribution deviating from the pre-trained model, resulting in an increase in KL divergence. Hence, the optimization process seeks a trade-off between the task reward and the KL divergence, ideally driving the policy towards a Pareto frontier [Ngatchou et al., 2005]. This frontier covers all achievable policies where no policy can improve on one objective without sacrificing performance on the other. Formally, the Pareto frontier can be defined as:\n$F := {J_r(\\pi) | \\pi \\in \\Pi \\wedge \\nexists \\pi' \\ne \\pi: J_1(\\pi') \\ge J_1(\\pi)},$\nwhere $J_r(\\pi) = E_{\\pi}[\\sum_{t=0} \\gamma^t r(s_t, a_t)]$. r(s,a) \u2208 Rm is a vector-valued reward function and \u03a0 denotes the set of all policies. Given a fixed reference vector w \u2208 \u03a9 \u2286 Rm, one could scalarize the multi-objective reward into a single objective by using the weighted sum $w^r(s, a)$. Under this preference weighting, the ideal outcome for the policy is to converge to a point on the Pareto frontier,\nHowever, due to the inherent complexities of natural language, achieving perfect policy convergence to the Pareto frontier is often intractable. Nevertheless, by adjusting the preferences, these sub-optimal policies can still form a frontier for simplicity, we term it the sub-optimal frontier. Our hypothesis is that the sub-optimal frontier achieved by CORY lies closer to the true Pareto frontier compared to that achieved by single-agent RL method.\nTo verify this hypothesis, we fine-tune the Llama-2-7b-chat model on the grade school math 8K (GSM8K) dataset [Cobbe et al., 2021b] using both PPO and CORY. We measure the KL divergence and the task reward obtained by each policy after convergence. By adjusting the preference, i.e., \u03b7 in Equation 2, we are able to generate sub-optimal frontiers. It is important to note that the Y-axis represents the negative KL divergence (larger values indicate better performance). As expected, the sub-optimal frontier achieved by CORY consistently outperforms that of PPO, empirically validating the hypothesis.\nOur analysis through the lens of multi-objective RL offers valuable insights into the effectiveness of CORY. The knowledge transfer mechanism inherently addresses the optimization challenges faced by the observer. By leveraging the reference response provided by the pioneer, the observer actually experiences a guided optimization process. Such guided process can alleviate the optimization pressure on the task reward side, and prioritize improvement on the KL penalty side. However, since the observer's policy during training takes both the task query and the pioneer's response as inputs, the optimized policy is not the one we really want (we need the policy which only takes the task query as input), resulting in the prompt bias issue. The role exchange mechanism can effectively address this issue, and transfer the skills learned by the observer back to the pioneer, reducing the pioneer's optimization pressure. Notably, CORY demonstrates significantly better stability and robustness compared to single-agent RL method. It consistently"}, {"title": "4 Experiments", "content": "This section systematically investigate the performance of CORY across two types of reward functions: subjective reward function and objective reward function. Subjective reward functions are reward models trained on data capturing human preferences. They essentially translate the human sentiment or judgment into a numerical reward signal that guides alignment. Objective reward functions are pre-defined rule-based functions, typically established by domain experts. This categorization reflects real-world scenarios where reward functions might be learned from human preferences or manually crafted by domain experts."}, {"title": "4.1 Subjective Rewards on IMDB Review", "content": "Task Setup. To evaluate our method under the subjective reward setting, we select the IMDB Review dataset [Tripathi et al., 2020]. This dataset contains 50K <text,label> pairs, with the training set and the test set each contains 25K pieces of data. The texts in the IMDB dataset are movie reviews, and the labels are the binary sentiment classification labels. The distilbert-imdb model trained on the dataset is employed as the reward model. We fine-tune GPT2-Large (774M)5 by using single-agent PPO (single-PPO) and CORY respectively. In addition, GPT2-XL (1.5B) is fine-tuned by using single-PPO as an ablation on model size. In this task, we randomly sample text snippets from the IMDB dataset. The first 2 to 8 tokens (representing the beginning of the review) are retained as prompts for sentiment completion. The LLMs generate continuations that transform the prompts into positive sentiment comments. After that, the reward model evaluates the generated text to assign a sentiment score. The objective is to maximize the average sentiment score of the completed comments.\nIn the experiments, each method undergoes 100 training iterations using a batch size of 256. For simplicity, GPT2-Large and GPT2-XL fine-tuned by single-PPO are termed as PPO-GPT-2-1 and PPO-GPT-2-xl, respectively. GPT-2-Large that fine-tuned by CORY are referred to CORY-LLM1 and CORY-LLM2, where the former one is the LLM that initialized as the pioneer, and the latter one is the LLM that initialized as the observer.\nResults and Analysis. We monitor the training process by visualizing task reward, KL divergence, and a combined reward function that incorporates both the above objectives. Denoted as $r_c(s_0, a)$, the combined reward function can be expressed as $r_c(s_0,a) = r(s_0,a) + \\eta * KL(s_0, \\pi_0, \\pi)$, where $r(s_0, a)$ and $KL(s_0,\\pi_0, \\pi)$ are the sentence-level task reward part and the KL penalty part, respectively. And the KL penalty part can be calculated as $KL(s_0, \\pi_0, \\pi) = \\sum_{i=0,1,...,N}KL(\\pi_0(\\cdot|s_0, w_{1:i-1}), \\pi(\\cdot|s_0, w_{1:i-1}))$.\nIt is important to note that, the actual reward used for training in CORY is not the combined reward. The actual training reward not only includes the KL penalty and the task reward from the target agent,\nbut also includes the task reward from the other agent. In fact, the combined reward $r_c(s_0, a)$ is the real overall objective that needs to be optimized, and can be aligned with the single-agent RL fine-tuning, making it easier to compare performance of all the methods.\nThe training curves of task reward, KL divergence, and the combined reward are illustrated in Figure 3. The results show that single-PPO and CORY achieve similar task reward levels after 100 training iterations. However, the curve of KL divergence related to single-PPO is significantly higher than that of CORY, reaching more than twice the level of CORY after all the training iterations. This indicates CORY's ability to achieve similar task reward levels with a smaller deviation from the pre-trained policy. Moreover, it can be observed that the curves of CORY-LLM1 and CORY-LLM2 are very close, indicating that the two LLM agents initially playing different roles finally achieve very similar performance levels at the end of the training. Consistent with the motivation of CORY, both the fine-tuned LLM agents can be used to finish tasks individually, which verifies the effectiveness of the bootstrapped learning and coevolution principles in CORY.\nFinally, Figure 3(c) visually confirms CORY's advantage in combining the two objectives. The combined reward curve for CORY consistently rises, indicating its effectiveness in simultaneously improving task reward and minimizing KL divergence. Conversely, PPO's combined reward curve exhibits a decreasing trend, suggesting its struggle in balancing these objectives."}, {"title": "4.2 Objective Rewards on GSM8K", "content": "Task Setup. To evaluate our method under a rule-based objective reward function, we select the GSM8K task [Cobbe et al., 2021a]. GSM8K comprises 8.79K high-quality, linguistically diverse grade school math word problems, with 7.47K allocated for training and 1.32K for testing. For each question in the dataset, a response is obtained via LLM. The precise answer is extracted from the responses using a regular expression, typically the final set of numbers in the response. If the number in question matches the ground truth as recorded in the dataset, a reward of 1 is awarded. Conversely, if the number is incorrect, a reward of 0 is given. The Llama-2-7b-chat7 model is selected as the pre-trained model. To reduce the training overhead, the model is quantised to 4-bit. For simplicity, the 4-bit Llama-2-7b-chat model fine-tuned with single-PPO is referred to as PPO-Llama-2. The copied models fine-tuned with CORY are referred to CORY-LLM1 and CORY-LLM2, where the former is the LLM that initialized as the pioneer, and the latter is the LLM that initialized as the observer.\nResults and Analysis. Similar to Section 4.1, We monitor the training process by visualizing task reward, KL divergence, and the combined reward. As shown in Figure 4, the jitter observed in all curves suggests the challenge posed by GSM8K. The vast exploration space presents inherent instability for the RL algorithms. As Figure 4(a) illustrates, the task reward curve of single-PPO peaks around 50 training iterations, followed by a decline. Single-PPO's KL divergence exhibits no convergence trend, reaching a maximum value during training (Figure 4(b)). The instability of single-PPO results the high KL divergence after 50 iterations, leading to a poor performance on combined reward (Figure 4(c))."}, {"title": "4.3 Ablations", "content": "In ablation experiments, we ablate the influence of model size, knowledge transfer, and role exchange under the subjective reward setting on IMDB review dataset. For method names depicted in Figure 6, REx indicates role exchange, KT indicates knowledge transfer, LLM1 and LLM2 refer to LLMs who are initialized as the pioneer and the observer respectively.\nAblation on Model Size. Our method employs two models during training, with the total parameters trained being doubled in comparison to single-PPO. In order to ablate whether the enhancement of CORY is derived from the expansion of the model parameters, an additional fine-tuning of GPT2-XL (1.5B) with single-PPO is conducted on the IMDB dataset, which has twice the number of parameters as GPT2-Large. The results are presented in Figure 3. While the task reward of the model rapidly reaches its maximum value, the KL penalty part does not exhibit a notable improvement compared to GPT2-Large. The KL divergence continues to increase, leading to the collapse of the distribution.\nAblation on Knowledge Transfer. We maintain role exchange, and the two models still share a collective task reward (Equation 4), but disable knowledge transfer. This resembles PPO with individual queries as inputs. However, without the observability of the pioneer's outputs, this equivalent to adding noise to the PPO reward signal. Consequently, the task rewards become unstable, and the KL divergences are higher compared to CORY as shown in Figure 6. This highlights the importance of observability for framing RL fine-tuning as a true multi-agent cooperation problem.\nAblation on Role Exchange. We maintain knowledge transfer but disable role exchange. As evident from Figure 6, both LLMs achieve good task rewards, but their KL divergences are much higher than that of CORY. Notably, the observer LLM exhibits significantly lower KL divergence compared to the pioneer LLM. This observation highlights a fascinating phenomenon in cooperative learning:\nby receiving the pioneer's response, the observer can effectively optimize the KL divergence. This suggests that the observer leverages the pioneer's exploration to refine its policy while maintaining good performance, potentially leading to a more stable learning process."}, {"title": "5 Related Work", "content": "The most related topic is reinforcement leanring from human feedback (RLHF). InstructGPT [Ouyang et al., 2022] fine-tunes GPT-3 like models [Brown et al., 2020] to enhance helpfulness by combining SFT with RL based on human preference dataset. Askell et al. [2021] trains a preference model for aligning the LLM with human values. It argues that ranked preference modeling proves to be the most effective training objective for distinguishing between desirable and undesirable LLM behaviors. Bai et al. [2022] incorporates an iterative online training mode where preference model and LLM are updated weekly using fresh human feedback data. Existing research acknowledges the inherent complexity, instability, and hyperparameter sensitivity of RLHF, particularly when employing PPO [Zheng et al., 2023]. Several works have attempted to address these challenges by introducing max-entropy regularization [Wen et al., 2024], hyperparameter tuning [Zheng et al., 2023], and reward shaping [Yang et al., 2024a]. However, these methods does not show significant improvement over the vanilla PPO algorithm. This inspires us to explore alternative method from a different perspective that extent the RL fine-tuning of LLMs to a cooperative MARL problem.\nAnother related topic is MARL. Under the interaction relationship (cooperation, competition, mixed), multi-agent could spontaneously emerge complex and diverse policies, so as to solve the complex problems that single-agent reinforcement learning is difficult to solve. For example, in Kim et al. [2023], the RL based prompt tuning is decomposed into multi-agent joint tuning. The huge joint action space is equally split across agents, learning better and longer prompt. Such mechanisms have also been applied in the field of combinatorial optimization. The paper that is most similar to us on the architecture of agent training is Gao et al. [2023]. It proposes an asymmetric training symmetric execution framework to deal with the two-agent Stackelberg game Fang et al. [2021]. In the Stackelberg game, two agents make decisions asynchronously. The agent that makes the decision later can observe the former agent, but the former agent cannot observe the later agent. The training framework proposed by the authors is able to converge in Stackelberg equilibrium empirically. This inspires us to design the training framework for LLMs under a sequential cooperative setting."}, {"title": "6 Discussion", "content": "Experimental evidence suggests that CORY yields more stable and superior performance in RL fine-tuning. This can be attributed to our extension of single-agent RL fine-tuning into a cooperative MARL version. In this section, we delve into a discussion of how the multi-agent learning can benefit LLM fine-tuning. The primary benefit is that multi-agent learning encourages the coevolution of LLMs through collective living, social relationships and major evolutionary transitions [Du\u00e9\u00f1ez-Guzm\u00e1n et al., 2023]. This process generates a variety of new data, which further facilitates coevolution. This mechanism contributes to many breakthroughs in games AI, such as Go [Silver et al., 2016, 2017, Clark and Storkey, 2015], StarCraft II [Vinyals et al., 2019], and Diplomacy [Bakhtin et al., 2022].\nIn this paper, we investigate the application of cooperative MARL to address challenges in RL fine-tuning. Cooperative MARL fine-tuning appears to increase training robustness and prevent distribution collapse. While we concentrate on cooperation, competitive MARL, especially population-based methods, represents a promising direction for future research. These approaches create an auto-curriculum mechanism driven by a natural arms race, which propels agent learning and enables mastery of complex tasks. Besides the interaction paradigm, the scale of agents is crucial to emergence. While we examine a setting involving two LLMs, incorporating more LLMs in MARL fine-tuning is an intriguing prospect for future studies."}, {"title": "7 Conclusion", "content": "In this paper, we extend the RL fine-tuning of LLMs to a sequential cooperative MARL framework. To this end, we duplicate the pre-trained LLM into two LLM agents with different roles, and design two key mechanisms: knowledge transfer and role exchange. These mechanisms enable the two LLM agents to learn collaboratively, and after the fine-tuning process, either the LLM agent can be chosen to perform the task independently. We also provide an in-depth analysis of RL fine-tune from the perspective of multi-objective RL, revealing the existence of a Pareto frontier between KL divergence and task reward. We empirically illustrate that CORY has an advantage over single-agent RL method in approaching the Pareto frontier. Experiment results indicate that CORY surpasses PPO regarding policy optimality, resilience to distribution collapse, and robustness during training, highlighting its potential as an advanced method for improving LLMs in practical applications."}, {"title": "F Limitations", "content": "Although our method shows promising results in training robustness, policy optimality, and avoiding distribution collapse, it requires duplicating the LLM into two copies, doubling the computational resources needed. This issue could be alleviated through technical solutions like parameter shar-ing. Furthermore, as Moore's Law predicts the growing affordability of computational power, this limitation may become less important over time."}, {"title": "G Broader Impacts", "content": "A better RL fine-tuning method can improve the performance of LLMs in specialized tasks such as robot control and code generation. Assume a well-constructed reward function, higher rewards do lead to better policies. There exists an optimal policy that maximizes this function. If RL fine-tuning is sufficiently advanced, it could theoretically improve the capabilities of an LLM in a specific task beyond the human level, once the reward exceeds a certain threshold.\nA major concern is the potential of abuse, including the generation of misleading and harmful content. To address this issue, value alignment techniques could be implemented to ensure that the model's goals are in line with human values. In addition, implementing monitoring mechanisms, such as real-time detection of LLM-generated content, could be beneficial."}, {"title": "A Implementation Details", "content": "The code repository we utilize is TRL8. Our experimentation employs 2 AMD EPYC 7773X CPUs and 8 NVIDIA A6000 GPUs (48GB each). Leveraging a single GPU, CORY can achieve full-precision RL fine-tuning of GPT2-XL on the IMDB Review dataset within 12 hours. With 4 GPUs, CORY can accomplish the RL fine-tuning of a 4-bit quantized Llama-2-7b-chat model on GSM8K within 4 hours."}, {"title": "A.1 Hyperparameters", "content": "The hyperparameter settings for fine-tuning GPT2 followed the default configuration in TRL for the IMDB dataset, while the hyperparameter setting of Llama-2 primarily adhered to the guidelines provided by StackLlama. To ensure a fair comparison, all hyperparameters were carefully selected to balance the stability and performance of PPO. A grid search was conducted over a and \u03b7, with the sets a le-6, 1e-5, 1e-4 and \u03b7 1e-3, 1e-2, 1e-1, 0.2, 0.3, respectively, to identify the hyperparameter that yielded the most stable training for PPO. Given CORY's robustness to hyperparameters (Appendix E), most PPO hyperparameters, except for the learning rate a, were applied directly to CORY. For the GSM8K dataset, In the GSM8K dataset, we adjusted the learning rate a for CORY."}, {"title": "A.2 Prompt Details", "content": "IMDB Review. The prompts used in IMDB Review are as follows. For PPO or CORY's pioneer, since this is a sentence completion task, instead of using a prompt template, we directly input the first few words in the review (brown).\nFor CORY's observer, we use pioneer's response (blue) to complete the sentence as a reference for observer, and retype the first few words of the comment at the end of the prompt for observer to complete.\nGSM8K. The prompts used in GSM8K are as follows. For PPO or CORY's pioneer, we provide a example question and answer. This is followed by a question from the dataset (brown). Then the prompt ends with 'Answer:' to guide the LLM to answer.\nFor CORY's observer, the question is followed by 'Reference' (blue), which is the pioneer's response. Finally, it also ends with \u2018Answer' to guide the model to answer."}, {"title": "B Token-Level Policy Update of CORY", "content": "We first derive the formula of Q-function when fine-tuning LLM with PPO. The token-level reward function is given in Equation 2.\n$Q_{\\pi"}, "s_i, w_i) = E_{w_{i+1},..., w_N \\sim \\pi} \\sum_{k=0}^{N-i} \\gamma^k r(s_{i+k}, w_{i+k})$\n$= E_{w_{i+1},..., w_N \\sim \\pi} \\sum_{k=0}^{N-i} r(s_{i+k}, w_{i+k}) - \\eta E_{w_{i+1},..., w_N \\sim \\pi} \\sum_{k=0}^{N-i} \\gamma^k KL \\big[ \\pi(\\cdot | s_{i+k}), \\pi_0(\\cdot | s_{i+k}) \\big"], "is": "n$L_{\\phi}^V = E_{\\pi_{\\theta}} [V_{\\pi_{\\theta}}(s_i) - V_{\\phi}(\\hat{s_i})]^2,$\nwhere $V_{\\phi}(s_i)$ is the predicted state value, $ represents the parameters of the corresponding value network. For policy loss, the optimisation objective with clip is used.\n$L^P = E_{\\pi_{\\theta}} \\Big[min\\Big(\\frac{\\pi_{\\theta}(w_i | \\hat{s_i})}{\\pi_{\\theta_{old}}(w_i | \\hat"}