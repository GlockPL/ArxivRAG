{"title": "A Survey of NL2SQL with Large Language Models: Where are we, and where are we going?", "authors": ["Xinyu Liu", "Shuyu Shen", "Boyan Li", "Peixian Ma", "Runzhi Jiang", "Yuyu Luo*", "Yuxin Zhang", "Ju Fan", "Guoliang Li", "Nan Tang"], "abstract": "Translating users' natural language queries (NL) into SQL queries (i.e., NL2SQL) can significantly reduce barriers to accessing relational databases and support various commercial applications. The performance of NL2SQL has been greatly enhanced with the emergence of Large Language Models (LLMs). In this survey, we provide a comprehensive review of NL2SQL techniques powered by LLMs, covering its entire lifecycle from the following four aspects: (1) Model: NL2SQL translation tech- niques that tackle not only NL ambiguity and under-specification, but also properly map NL with database schema and instances; (2) Data: From the collection of training data, data synthesis due to training data scarcity, to NL2SQL benchmarks; (3) Evaluation: Evaluating NL2SQL methods from multiple angles using different metrics and granularities; and (4) Error Analysis: analyzing NL2SQL errors to find the root cause and guiding NL2SQL models to evolve. Moreover, we provide a rule of thumb for developing NL2SQL solutions. Finally, we discuss the research challenges and open problems of NL2SQL in the LLMs era.", "sections": [{"title": "I. INTRODUCTION", "content": "Natural Language to SQL (i.e., NL2SQL), which con- verts a natural language query (NL) into an SQL query, is a key technique toward lowering the barrier to accessing relational databases [1]\u2013[7]. This technique supports various important applications such as business intelligence, customer support, and more, making it a key step toward democratiz-"}, {"title": "II. NL2SQL PROBLEM AND BACKGROUND", "content": "In this section, we first formalize the definition of the NL2SQL task (Section II-A). We then introduce the workflow"}, {"title": "A. Problem Formulation", "content": "Definition 1 (Natural Language to SQL (NL2SQL)). Natu- ral Language to SQL (NL2SQL), also known as Text-to-SQL, is the task of converting natural language queries (NL) into corresponding SQL queries (SQL) that can be executed on a relational database (DB). Specifically, given an NL and a DB, the goal of NL2SQL is to generate an SQL that accurately reflects the user's intent and returns the appropriate results when executed on the database."}, {"title": "Discussion.", "content": "In some cases, the corresponding SQL to an NL query may be multiple due to the ambiguity or underspecifi- cation of the NL, or the ambiguity of the database schema. In addition, even when the NL, database schema, and database content are clear and specific, there may still be multiple equivalent SQLs that can satisfy the given NL query."}, {"title": "B. NL2SQL Human Workflow", "content": "When humans, such as Database Administrator (DBA), perform the NL2SQL task, they first attempt to understand NL, then examine the database schema and contents, and finally write the corresponding SQL based on their SQL knowledge. Next, we will provide a detailed description of this process, as shown in Figure 2(a)."}, {"title": "Step-1: Natural Language Query Understanding:", "content": "Given the NL query \"Find the names of all customers who checked out books on exactly 3 different genres on Labor Day in 2023\", the first task is to comprehend the user's intent and identify the key components of the NL. To this end, the DBA may first identify some key terms and phrases in the given NL. For example, in this query, the key terms are: 1) Entities or Attributes: \u201cnames\u201d, \u201ccustomers\u201d, \u201cbooks\", and \"genres\"; 2) Temporal Context: \u201cLabor Day in 2023\"; and 3) Specific Conditions: \"exactly 3 different genres\"."}, {"title": "C. NL2SQL Task Challenges", "content": "As mentioned in Section II-B, there are three key steps in the NL2SQL task. From these steps, we can identify three inherent challenges: the uncertainty of the natural language, the complexity of the database, and the translation from the"}, {"title": "C1: The Uncertain Natural Language Query.", "content": "Natural lan- guage often contains uncertainties due to ambiguity and un- derspecification [30]. In NL2SQL tasks, the challenges related to NL can be summarized as follows:"}, {"title": "\u2022 Lexical Ambiguity:", "content": "This occurs when a single word has multiple meanings. For example, the word \u201cbat\" can refer to an animal or a baseball bat (noun) or the action of swinging (verb)."}, {"title": "\u2022 Syntactic Ambiguity:", "content": "This occurs when a sentence can be parsed in multiple ways. For example, in the sentence \"Mary saw the man with the telescope\", the phrase \"with the telescope\" can mean either that Mary used a telescope to see the man or that the man had a telescope."}, {"title": "\u2022 Underspecification:", "content": "This occurs when linguistic expres- sions lack sufficient detail to convey specific intentions or meanings clearly. For example, \"Labor Day in 2023\" refers to September 4th in the US but May 1st in China."}, {"title": "C2: The Complex Database and Dirty Content.", "content": "The NL2SQL task requires an in-depth understanding of the database schema, including table names, column names, and the interrelations between tables, as well as the database con- text involving the attributes and values of data. The complexity of modern database schema and the vast volume of data present substantial challenges to the effective operation of NL2SQL tasks. These complexities include:"}, {"title": "A", "content": ""}, {"title": "\u2022 Complex Relationships Among Numerous Tables:", "content": "database can include hundreds of tables interconnected through complex relationships. NL2SQL systems must be able to understand and utilize these relationships accurately when generating SQL queries."}, {"title": "\u2022 Similarity in Column Names:", "content": "Managing columns with similar names across different tables is a common chal- lenge in the NL2SQL task. For example, a database might contain multiple tables each with a column named \u201cdate\u201d, where one might represent the \"creation date\" while another might represent the \"expiration date\u201d."}, {"title": "\u2022 Domain-Specific Schema Variations:", "content": "Different fields may have unique database designs, which means an NL2SQL system must adapt to each specific schema's difference, making generic solutions challenging. For example, table and column names are often expressed using abbrevia- tions or vague expressions in the finance domain."}, {"title": "C3: NL2SQL Translation.", "content": "The NL2SQL task differs from the compilation of a high-level programming language to a low-level machine language, as it usually has a one-to- many mapping between the input NL and output SQL queries. Specifically, the NL2SQL task faces several unique challenges:"}, {"title": "\u2022 Free-form NL vs. Constrained and Formal SQL:", "content": "the SQL queries follow a strict syntax, whereas natural language is more flexible and varied. Translating NL queries into corresponding SQL queries requires adherence to SQL syntax rules to ensure they are executable."}, {"title": "\u2022 Multiple Possible SQL Queries:", "content": "a single NL query can correspond to multiple SQL queries that satisfy the re- quirements, leading to ambiguity in determining appro- priate SQL translation (see the example in Figure 2(a))."}, {"title": "Technical Challenges in Developing NL2SQL Solutions.", "content": "Developing robust NL2SQL solutions involves addressing sev- eral technical challenges. These include:"}, {"title": "\u2022 Efficiency of the Model:", "content": "Ensuring the model can process natural language queries and convert them to SQL effi- ciently, minimizing latency. This consideration is crucial as efficiency directly impacts user experience and opera- tional costs, especially in scenarios requiring low latency."}, {"title": "D. Challenges Solving with Large Language Models", "content": "The evolution of NL2SQL technology has been marked by substantial advancements over the years, driven primarily by progress in Natural Language Processing (NLP)."}, {"title": "III. LANGUAGE MODEL-POWERED NL2SQL OVERVIEW", "content": "We summarize the key modules of NL2SQL solutions utilizing language models, especially PLMs and LLMs, as illustrated in Figure 5. Additionally, we compare the key module differences of existing NL2SQL solutions in Table I."}, {"title": "IV. PRE-PROCESSING STRATEGIES FOR NL2SQL", "content": "The pre-processing step is crucial for the NL2SQL transla- tion process because it identifies the most relevant tables and columns (i.e., Schema Linking) and retrieves suitable database contents/cell values (i.e., DB Content Retrieval) used for generating SQL queries in advance. What's more, it enriches context by adding domain-specific knowledge (i.e., Additional Information Acquisition), enhances efficiency by focusing on relevant data, improves the understanding of the query context, and corrects errors to prevent their propagation."}, {"title": "A. Schema Linking", "content": "The purpose of the schema linking is to identify the tables and columns related to the given NL query. It ensures the accurate mapping and processing of key information within the limited input, thereby improving the performance of the NL2SQL task. In the LLMs era, schema linking has become increasingly crucial due to the input length limit of LLMs."}, {"title": "B. Database Content Retrieval", "content": "The purpose of database content retrieval is to efficiently retrieve cell values through textual searching algorithms and database indexing. Unlike schema linking, which focuses on finding relevant tables and columns based on the NL query, database content retrieval emphasizes efficiently retrieving cell values. Given the large scale of databases, retrieving cell values from them is resource-intensive and poses potential risks of exposing sensitive data [77]. Therefore, it is crucial to implement appropriate strategies for the scenario requirement."}, {"title": "C. Additional Information Acquisition", "content": "Additional information (e.g., domain knowledge) plays an essential role in improving the comprehension capabilities of NL2SQL models for understanding the NL query, performing the schema linking, and benefiting the NL2SQL translation. This information can provide demonstration examples, domain knowledge, formulaic evidence, and format information for the NL2SQL backbone model or specific modules, thereby enhancing the quality of the generated results."}, {"title": "V. NL2SQL TRANSLATION METHODS", "content": "In this section, we delve into NL2SQL translation methods using language models. As shown in Figure 6, we will elabo- rate on their encoding (Section V-A), decoding (Section V-B), and task-specific prompt strategies (Section V-C). We will then discuss how intermediate representations can benefit the NL2SQL translation process (Section V-D)."}, {"title": "A. Encoding Strategy", "content": "Encoding in the NL2SQL task refers to the process of transforming NL and database schema into a structured format that can be effectively utilized by a language model. This transformation is crucial as it converts unstructured and semi- structured data into a form that can be processed for generating SQL queries. The encoding process involves capturing the se- mantic meaning of the NL input and the structural information of the database schema, enabling the model to understand and map the user's intent to the corresponding SQL query."}, {"title": "B. Decoding Strategy", "content": "Decoding plays a crucial role in NL2SQL translation, as it is responsible for converting the representations generated by the encoder into the target SQL queries. The choice of decoding strategy directly affects the quality and performance of the generated SQL queries. An excellent decoding strategy not only produces syntactically correct SQL queries but also ensures that the semantics of the SQL queries align with the NL and can even optimize the execution efficiency of the queries."}, {"title": "C. Task-specific Prompt Strategy", "content": "In the era of LLMs, prompt engineering can harness the capabilities of LLMs and has been widely adopted in natural language processing, with various frameworks developed for specific tasks [103]\u2013[105]. In the NL2SQL field, task-specific prompt strategy refers to the tailored prompt engineering techniques used in the NL2SQL translation process. These strategies instruct the LLMs to optimize the SQL query gen- eration process according to task-specific rules, improving the accuracy of translating complex semantic NL query into the corresponding SQL query."}, {"title": "VI. POST-PROCESSING STRATEGIES FOR NL2SQL", "content": "After the NL2SQL model generates the SQL, we can refine it to better meet user expectations. This process is called post-processing. Post-processing involves adding information or using other models to further improve the generated SQL. The current approach to post-processing primarily focuses on correction, consistency, execution, and the n-best list to amend the SQL. It is worth noting that the NL2SQL model may adopt multiple post-processing methods for better results."}, {"title": "A. SQL Correction Strategies", "content": "The SQL generated by the model may sometimes contain syntax errors. SQL Correction Strategies aim to prompt LLMs to correct syntax errors in SQL."}, {"title": "B. Output Consistency", "content": "To enhance the consistency of model outputs, the concept of self-consistency [112] has been proposed in previous work. The motivation behind the self-consistency method is that, in complex reasoning problems, there are multiple reasoning paths that can lead to a unique correct answer. It first samples multiple different reasoning paths and then selects the most consistent answer to significantly improve the quality of the output. The NL2SQL task, being similar to reasoning tasks, can also have multiple ways to write SQL queries that express the same meaning."}, {"title": "C. Execution-Guided Strategies", "content": "In the NL2SQL scenario, the execution result of an SQL query is also a crucial piece of information, as it may indicate the quality of the query itself. For instance, if the query execution results in errors or NULL values, it might indicate an issue with the SQL query. Currently, many models incor- porate the results of SQL queries into their post-processing steps, using these results to guide subsequent processing of the SQL. The current NL2SQL models have varying approaches to utilizing the output results."}, {"title": "D. N-best Rerankers Strategies", "content": "In NL2SQL tasks, particularly in cross-domain scenarios, the generated SQL queries may exhibit nuanced variances"}, {"title": "VII. NL2SQL BENCHMARKS", "content": "In this section, we will first elaborate on the different types of NL2SQL datasets, highlighting their characteristics, as shown in Figure 10. We will then perform an in-depth analysis of existing NL2SQL datasets (Section VII-I)."}, {"title": "A. Single-Domain NL2SQL Datasets", "content": "Early NL2SQL datasets focused on specific domains, of- ten featuring simple SQL query structures. The ATIS [117] dataset, for example, is centered on flight information, while GeoQuery [118] uses a database of US geographical facts."}, {"title": "B. Cross-Domain NL2SQL Datasets", "content": "After the introduction of early single-domain datasets, the focus of the NL2SQL field shifted towards cross-domain datasets. Cross-domain datasets challenge the generalization capabilities of NL2SQL systems across different domains, requiring these systems to generalize not only to new SQL queries but also to new databases."}, {"title": "C. Multi-Turn NL2SQL Datasets", "content": "As the NL2SQL field progressed, there has been a growing interest in building NL2SQL systems centered on multi-turn interactive dialogues. To meet this demand, various multi- turn datasets have been developed."}, {"title": "D. NL2SQL Datasets: Considering Robustness", "content": "In real-world applications, NL2SQL systems need to handle diverse user groups and various database domains, making robustness a growing focus within the community."}, {"title": "E. NL2SQL Datasets: Considering SQL Efficiency", "content": "Databases in real-world scenarios often contain massive amounts of data, and a user question can be solved by multiple SQL queries. However, these SQL queries can vary in execution efficiency, which has attracted attention from the community."}, {"title": "F. Knowledge-Augmented NL2SQL Datasets", "content": "NL2SQL systems often require domain-specific knowledge to effectively perform the NL2SQL task in real-world appli- cations within specific domains. Integrating domain-specific knowledge into the NL2SQL task has recently gained increas- ing interest."}, {"title": "G. NL2SQL Datasets: Considering NL Ambiguity", "content": "In real-world NL2SQL tasks, various ambiguities often arise, such as semantic ambiguities in NL and overlapping database schema. Evaluating the performance under the ambiguity of NL2SQL systems has gained growing attention."}, {"title": "H. Synthetic NL2SQL Datasets", "content": "As shown in Table II, despite the fact that many datasets have been manually annotated so far, the rapid development of LLMs in the NL2SQL field has led to a growing demand for NL2SQL data. Consequently, the automatic NL2SQL data synthesis has become an area of increasing interest within the community."}, {"title": "I. In-depth Analysis of Existing NL2SQL Datasets", "content": "To further explore and compare the complexity of different datasets, we utilize NL2SQL360 [46] evaluation framework to statistically analyze each dataset. The statistics include three main categories: Redundancy Measure, DB Complexity, and Query Complexity. The detailed results are shown in Table II."}, {"title": "VIII. EVALUATION AND ERROR ANALYSIS", "content": "In this section, we will first introduce the well-established metrics for evaluating NL2SQL solutions (Section VIII-A). We will then present existing evaluation toolkits for assessing NL2SQL solutions from different perspectives with low human cost (Section VIII-B). Finally, we will introduce an error taxonomy to organize and analyze the SQL errors from the NL2SQL process (Section VIII-C)."}, {"title": "A. Evaluation Metrics", "content": "Evaluation metrics are crucial for assessing the performance of NL2SQL systems. Researchers have proposed various met- rics to evaluate from multiple perspectives. We define $N$ as the dataset size, $Q_i$ as the NL question of the i-th example, $V_i$ as the execution result set of the ground-truth SQL query $Y_i$ and $V_i$ as the execution result set of the predicted SQL query $Y_i$ by the NL2SQL system."}, {"title": "B. NL2SQL Evaluation Toolkits", "content": "With the advancement of the NL2SQL field, the perfor- mance of NL2SQL systems on various benchmark datasets has improved. However, in real-world applications, the style of NL questions, the database schemas across different domains, and the characteristics of SQL queries may vary in different scenarios. Evaluating NL2SQL systems using overall metrics on existing benchmark hold-out datasets cannot fully capture their real-world performance and robustness."}, {"title": "\u0421. \u0410 \u0422\u0430\u0445\u043e\u043f\u043emy for NL2SQL Errors Analysis", "content": "Error Analysis refers to the process of examining the errors made by a model aimed at directing future corrective measures and enhancing model performance. Error Analysis is a critical aspect of NL2SQL research, as it provides valuable insights into the limitations and challenges faced by current models. By systematically examining errors, researchers can identify specific areas for improvement, enhance model robustness, and develop more effective training strategies."}, {"title": "IX. PRACTICAL GUIDANCE FOR DEVELOPING NL2SQL SOLUTIONS", "content": "In this section, we present a roadmap for optimizing LLMs for the NL2SQL task, based on data privacy and data volume (Section IX-A). Designing an NL2SQL system is complex and necessitates careful consideration of various scenarios. Therefore, we provide a decision flow for selecting appropriate NL2SQL modules tailored to various scenarios (Section IX-B)."}, {"title": "A. A Data-Driven Roadmap of Optimizing LLMs for NL2SQL", "content": "In Figure 13(a), we outline a strategic roadmap designed to optimize LLMs for NL2SQL task, based on data privacy and data volume. Data privacy affects the choice of open- source and closed-source LLMs, while data volume affects the strategies for optimization for training and inference."}, {"title": "X. OPEN PROBLEMS", "content": "In this section, we present several open problems and discuss the research challenges for NL2SQL."}, {"title": "A. Open NL2SQL Problem", "content": "In many real-world scenarios, such as government open data platforms, citizens may pose questions that require querying multiple databases and aggregating results for a response. For example, a citizen might ask, \"What is the average processing time for tax returns in the last five years?\" Answering this question involves retrieving relevant tables from different databases, such as tax records, processing time logs, and statistical reports databases, and then generating multiple SQL queries over these databases."}, {"title": "XI. CONCLUSION", "content": "In this paper, we provide a comprehensive review of NL2SQL techniques from a lifecycle perspective in the era of LLMs. We formally state the NL2SQL task, discuss its challenges, and present a detailed taxonomy of solutions based on the language models they rely on. We summarize the key modules of language model-powered NL2SQL methods, covering pre-processing strategies, translation models, and post-processing techniques. We also analyze NL2SQL bench- marks and evaluation metrics, highlighting their characteristics and typical errors. Furthermore, we outline a roadmap for practitioners to adapt LLMs for NL2SQL solutions. Finally, we maintain an updated online handbook to guide researchers and practitioners in the latest NL2SQL advancements and discuss the research challenges and open problems for NL2SQL."}]}