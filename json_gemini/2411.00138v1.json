{"title": "Learning Low-Dimensional Strain Models of Soft Robots by Looking at the Evolution of Their Shape with Application to Model-Based Control", "authors": ["Ricardo Valadas", "Maximilian St\u00f6lzle", "Jingyue Liu", "Cosimo Della Santina"], "abstract": "Obtaining dynamic models of continuum soft robots is central to the analysis and control of soft robots, and researchers have devoted much attention to the challenge of proposing both data-driven and first-principle solutions. Both avenues have, however, shown their limitations; the former lacks structure and performs poorly outside training data, while the latter requires significant simplifications and extensive expert knowledge to be used in practice. This paper introduces a streamlined method for learning low-dimensional, physics-based models that are both accurate and easy to interpret. We start with an algorithm that uses image data (i.e., shape evolutions) to determine the minimal necessary segments for describing a soft robot's movement. Following this, we apply a dynamic regression and strain sparsification algorithm to identify relevant strains and define the model's dynamics. We validate our approach through simulations with various planar soft manipulators, comparing its performance against other learning strategies, showing that our models are both computationally efficient and 25x more accurate on out-of-training distribution inputs. Finally, we demonstrate that thanks to the capability of the method of generating physically compatible models, the learned models can be straightforwardly combined with model-based control policies.", "sections": [{"title": "I. INTRODUCTION", "content": "Continuum soft robot's inherent compliance and embodied intelligence make them promising candidates for close collaboration between humans and robots and contact-rich manipulation [1], [2]. Modeling their dynamical behavior [3] with computationally tractable models is important for many applications, such as model-based control [4], state estimation [5], and co-design [6].\nDeveloping such (low-dimensional) dynamic models is challenging and is an active area of research [3], [7]. The use of data-driven approaches have been extensively investigated in this context [7]\u2013[10]. These learned models exhibit poor extrapolation performance [11], a lack of interpretability and (physical) structure preventing us from directly leveraging closed-form control solutions such as the PD+feedforward [4]. Instead, researchers had to fall back to computationally expensive planning methods such as Model Predictive Control (MPC) [7], [9].\nThe traditional avenue established by the robotics and continuum dynamics communities has been to derive the dynamical model directly from first principles [3], [4], [12], [13] which provides physical interpretability and structure at the cost of needing substantial expert knowledge, for example in the selection of the proper kinematic approximations (e.g., Piecewise Constant Curvature (PCC) [14], Piecewise Constant Strain (PCS) [12], Geometric Variable Strain (GVS) [13]). Suboptimal choices or even errors in applying this modeling procedure can lead to significant"}, {"title": "II. PRELIMINARIES", "content": "In the following, we will provide some background on the PCS kinematic model and the derivation of soft robot dynamics following a Lagrangian approach, which are two fundamental topics for this research paper."}, {"title": "A. Piecewise Constant Strain (PCS) Kinematics", "content": "The PCS model [12] describes the kinematics of continuum soft robots by assuming that the six elemental local backbone strains (shear, axial, bending, twist) are piecewise constant across $n_s$ segments but variable in time. We remark that other popular kinematic models for soft robots, such as Piecewise Constant Curvature (PCC) [14], are often times a special case of the PCS model.\nFor the planar case, the configuration of the $i$th segment is referred to as $q_i = [\\kappa_{be,i}\\ \\theta_{sh,i}\\ \\sigma_{ax,i}] \\in \\mathbb{R}^3$, where $\\kappa_{be,i}, \\ \\theta_{sh,i}, \\sigma_{ax,i}$ are the bending, shear, and axial strains, respectively, and $i \\in \\{1,...,n_s\\}$. Therefore, the configuration of the entire soft robot is defined as $q \\in \\mathbb{R}^{n_q}$, where $n_q = 3n_s$. We also have access to closed-form expressions for the forward and inverse kinematics of a single constant strain segment [22]. As a consequence, forward and inverse kinematics for the entire planar PCS soft robot can be implemented using an iterative procedure starting at the proximal end without having to resort to differential (inverse) kinematic techniques. Namely, the forward kinematics $\\pi : \\mathbb{R}^{n_q} \\rightarrow SE(2)$ allow us to compute the pose $X_j = [p_{x,j}\\ p_{y,j}\\ \\theta_j] = \\nu(q, s_j)$, where $s_j \\in [0, L]$ is the backbone abscissa/coordinate, $L$ is the length of the entire continuum structure in an undeformed configuration,"}, {"title": "B. Lagrangian Dynamics", "content": "The Lagrangian of a mechanical system as a function of the configuration $q\\in \\mathbb{R}^{n_q}$ and the corresponding time derivative $\\dot{q} \\in \\mathbb{R}^{n_q}$ can be expressed as\n\n$\\mathcal{L}(q, \\dot{q}) = \\mathcal{T}(q, \\dot{q}) - \\mathcal{U}(q) = \\frac{1}{2} \\dot{q}^T M(q) \\dot{q} - \\frac{1}{2} q^T K q - \\int_{0}^{q} G(q) dq,$\\label{eq:Lagrangian}\n\nwhere $\\mathcal{T}(q, \\dot{q}), \\mathcal{U}(q)$ are the kinetic and potential energy of the system, respectively, and $M(q) > 0 \\in \\mathbb{R}^{n_q \\times n_q}$ is referred to as the mass matrix. $G(q) \\in \\mathbb{R}^{n_q}$ contribute the gravitational forces and $K\\in \\mathbb{R}^{n_q \\times n_q}$ represents the linear elastic stiffness of the system. Subsequently, the Euler-Lagrangian equation can be leveraged to derive the Equations of Motion (EOM) of continuum soft robots as [4], [16]\n\n$\\frac{d}{dt} \\frac{\\partial \\mathcal{L}}{\\partial \\dot{q}} - \\frac{\\partial \\mathcal{L}}{\\partial q} + \\frac{\\partial \\mathcal{L}}{\\partial \\dot{q}} \\dot{q} + D\\dot{q} = \\tau$\n\nwhere we are also considering the generalized dissipative forces $D\\dot{q}$ and the actuation torques $\\tau\\in \\mathbb{R}^{n_q}$. In this work, we assume, without loss of generality, that both the stiffness matrix $K = diag(k_1, ..., k_{n_q})$ and the damping matrix $D = diag(d_1, ..., d_{n_q}) \\ge 0$ are diagonal."}, {"title": "III. METHODOLOGY", "content": "In this work, we propose a strategy for automatically identifying low-dimensional strain models for continuum robots directly from shape trajectories, as outlined in Figure 1. We assume that we have access to the poses of $N$ markers along the backbone that represent a discretized shape description of the soft robot. These could be provided by, for example, a motion capture system or, as done in this work, extracted using computer vision techniques from images. We remark that while in this work, we mostly regard the planar case with $SE(2)$ poses as the input, this strategy generalizes to 3D cases with $SE(3)$ inputs.\nThe goal is now to identify kinematic and dynamical models that allow (a) to represent the shape with $n_s$ PCS segments [12], where necessarily the final $n_s < N$, and (b) to predict the future shape evolution of the soft robot. We tackle this task by (i) identifying a low-dimensional parametrization (e.g., number of constant strain segments, the length of each segment, etc.) of the kinematics over a series of static snapshots, and (ii) identifying the parameters of the Lagrangian model and simultaneously eliminating strains from the model that do not have a significant effect on the shape evolution. We refer to component (i) as the Kinematic Fusion algorithm as it is an iterative approach to merge parts of the backbone that exhibit a similar strain into constant strain segments. The component (ii), named Dynamic Regression & Strain Sparsification algorithm, is an iterative procedure that, at each iteration, first regresses in closed-form the coefficients of the dynamic using linear least-squares and then eliminates strains from the dynamic model if the stiffness associated with a strain exceeds a given threshold. The intuition here is that strain would oscillate at very high frequencies, which are usually not relevant for practical control, and that it would take very"}, {"title": "A. Kinematic Fusion", "content": "As previously introduced, the algorithm is provided for each training dataset sample $k \\in \\{1,...,T\\}$ with $N$ pose measurements $x$ and associated backbone abscissas $s\\in \\mathbb{R}^{N}$ distributed along the backbone of the soft robot. Therefore, we initialize at $l = 1$: $^1n_s = N$ and $^1X = X$, where $l \\in \\mathbb{N}_{>1}$ denotes the iteration index.\nAt the beginning of each iteration, we leverage the closed-form inverse kinematics to compute the configuration $q = \\rho(^lX,^l s)$ of a $^{l}n_s = [N-1]$ segment PCS model. We now compute between each of the total $^{l}n_s - 1$ segment pairs, the following normalized strain similarity measure\n\n$d_{i,i+1} = \\frac{\\sqrt{\\sum_{k=1}^{T} |^lq_{i+1}(k) - ^lq_{i}(k)|^2}}{q^{max} - q^{min}}, \\ \\forall i \\in \\{1, ^{l}n_s-1\\},$\\label{eq:dissimilarity}\n\nwhere\n\n$q^{min} = \\min_{i \\in N_{n_s}, k \\in T} q_i(k), \\qquad q^{max} = \\max_{i \\in N_{n_s}, k \\in T} q_i(k),$\\label{eq:qmin_qmax}\n\nare the minimum and maximum configuration values across the dataset, respectively. This normalization is necessary as strains usually exhibit vastly different magnitudes. For example, the bending strains are usually more than one order of magnitude larger than the axial strains. We keep all segment pairs with $|d_{i,i+1} > h$, where $h$ is a tunable threshold, separate. Oppositely, we merge all neighboring/adjacent segments with $|d_{i,i+1} \\le h$ into one single segment of constant strain. If indeed $\\exists i \\in \\{N \\mid ^{l}n_s|\\ i \\le h\\}$, then then kinematic model is reduced to $^{l+1}n_s$ segments, where $^{l+1}N_s < ^{l}n_s$. As a final step of the iteration, we now subsample the Cartesian poses $^{l+1}X$ and the associate backbone coordinates $^{l+1}s$ such that they only contain the tip of each of the fused segments.\nThe kinematic fusion step is repeated with $l = l + 1$ for $n_{kf}$ iterations until no more merging is possible, which can occur either if $d_{i,i+1} > h\\ \\forall i \\in \\{1, ^{n_{kf}}n_s - 1\\}$ (i.e., the strain similarity measure is larger than $h$ for every pair of segments) or the model gets reduced to a single segment (i.e., $^{n_{kf}}N_s = 1$)."}, {"title": "B. Dynamic Regression & Strain Sparsification", "content": "After obtaining a kinematic model with the Kinematic Fusion algorithm, we can employ the identified parametrization as a foundation for deriving a dynamic model. First, we symbolically derive the basis functions of the PCS dynamical model. Subsequently, we implement an iterative procedure to (i) regress dynamic coefficients with linear least squares, and (ii) identify strains that can be neglected and remove them from the dynamical model.\n1) Parametrization of the PCS Dynamic Model with Basis Functions: In order to easily regress the dynamic parameters with linear least squares, we first derive the PCS dynamics for a $n_s$ segment soft robot from first principle [3], [4], with all rotational and linear strains taken into account, and subsequently parametrize both the Lagrangian and Euler-Lagrangian equations as a linear combination of monomial basis function.\n\n$\\mathcal{L}(q, \\dot{q}) = \\sum_{j=1}^{n_f} \\pi_j f_j(q, \\dot{q}), \\qquad \\tau = \\sum_{j=1}^{n_{\\psi}} \\pi_{\\psi j} \\Psi_j(q, \\dot{q}, \\ddot{q}) \\in \\mathbb{R}^{n_q},$\n\nwhere $f_j: \\mathbb{R}^{n_q} \\times \\mathbb{R}^{n_q} \\rightarrow \\mathbb{R}$ denotes each of the basis functions, and $\\pi \\in \\mathbb{R}^{n_f}$ the corresponding coefficients. Analog, we derive symbolically the EOM using an Euler-Lagrangian approach (see Section II-B) and now state the corresponding basis functions as $\\Psi(q, \\dot{q}, \\ddot{q}) \\in \\mathbb{R}^{n_{\\psi} \\times n_q}$ with $\\Psi_j: \\mathbb{R}^{n_q} \\times \\mathbb{R}^{n_q} \\times \\mathbb{R}^{n_q} \\rightarrow \\mathbb{R}^{n_q}$ such that\n\n$\\tau = \\sum_{j=1}^{n_f} \\pi_j \\left[\\frac{\\partial^2 f_j}{\\partial (\\dot{q})^2} \\ddot{q} + \\frac{\\partial^2 f_j}{\\partial \\dot{q} \\partial q} \\dot{q} - \\frac{\\partial f_j}{\\partial q}\\right] + D\\dot{q},$\n\nwhere $\\pi^+ = [\\pi^T \\ d]^T \\in \\mathbb{R}^{n}$ contains the associated coefficients and consists of $\\pi$ and the damping coefficients $d = diag(D) \\in \\mathbb{R}^{n_q}$.\n2) Regression of Dynamic Parameters: In order to es-timate the dynamic coefficients, we formulate the lin-ear regression problem as $\\mathcal{T} = X\\pi^+$, which accommo-dates the dataset of positions, velocities, and accelerations $X = [\\Psi(q(1), \\dot{q}(1), \\ddot{q}(1)), ..., \\Psi(q(T), \\dot{q}(T), \\ddot{q}(T))] \\in \\mathbb{R}^{T n_q \\times n_{\\psi}}$ and the corresponding actuation inputs $\\mathcal{T} ="}, {"title": "IV. VALIDATION", "content": "To validate the proposed approach, we verify the kinematic and dynamic regression algorithms separately. We test the kinematic fusion algorithm on simulated continuum soft robots that behave according to the PCS and Piecewise Affine Curvature (PAC) model. Subsequently, we compare the dynamic prediction performance of the proposed method against multiple ML baseline methods on various PCS soft robots. Finally, we demonstrate how the regressed methods can be used in a plug-and-play fashion within a closed-form, model-based setpoint regulation framework."}, {"title": "A. Experimental Setup", "content": "1) Evaluation Cases: Case 1: 1S PCS, Case 2: 2S PCS and Case 3: 3S PCS represent one-, two- and three-segment planar PCS soft robots ($n_s \\in \\{1,2,3\\}$), respectively, with configurations $q \\in \\mathbb{R}^{n_q}$ where $n_q \\in \\{3,6,9\\}$ and actuation $\\tau\\in \\mathbb{R}^3, \\mathbb{R}^6, \\mathbb{R}^9$, assuming full actuation. Case 4: 1S PCS H-SH is a one-segment PCS robot with high shear stiffness three orders of magnitude larger than in Case 1. Case 5: 2S PCS H-AX/SH is a two-segment PCS robot, where the 1st segment has a significantly increased axial stiffness and 2nd segment an increased shear stiffness w.r.t Case 2. Case 6: 1S PAC considers a one-segment PAC robot whose curvature can be described by an affine function [24].\n2) Dataset Generation: In order to illustrate the end-to-end nature of our proposed method, we generate the datasets as short video sequences of the soft robot's movement. Therefore, we mimic a camera placed parallel to the robot's plane of motion to capture the soft robot's ground-truth dynamics. At each time step, we render an image of the soft robot that contains $N = 21$ equally distant, visually salient features. In the real world, this could be achieved by attaching markers to the soft robot that allows tracking of points along the backbone across time [25]. We simulate the robot's ground-truth dynamics using the planar PCS simulator presented in [22].\nFor Cases 1 to 4, we include in the training set eight trajec-tories with randomly sampled initial conditions. We consider stepwise actuation sequences for which we randomly sample a torque every 10 ms. Each trajectory produces a 0.5s video captured at 1000 Hz. For Case 6, since the PAC simulator only accounts for kinematics, we generate an image sequence featuring the robot in 500 randomly selected configurations. As the test set, an additional trajectory with 7s duration is generated by applying a sinusoidal actuation sequence with $\\tau = a_1 sin (w_1t) + a_2 cos (w_2t) \\in \\mathbb{R}^{n_q}$, where $a_1$ and $a_2$ are random amplitudes, and $w_1$ and $w_2$ are random frequencies.\n3) Backbone Shape Detection from Images: To apply our proposed model identification method, we first extract the motion of several Cartesian-space samples along the robot's backbone. As we consider a planar problem setting and rendered images of the soft robot's shape, the goal is to extract the SE(2) poses of N cross-sections along the robot. To satisfy the assumption behind the Kinematic Fusion algorithm, the number of extracted poses N should be significantly larger than the expected number of PCS segments required to model the robot's behavior accurately: N\u226b ns. We leverage the OpenCV library for detecting the soft robot contour (findContours) and extracting pose measurements along its backbone (minAreaRect). Each frame is binarized, and the contours of cross-sections are identified. This allows the extraction of the center position (px,j, py,j) and orientation $\\theta_j$ of each cross-section (also referred to as marker). As in our case, the markers are equally-distant, we compute, without loss of generality, the backbone abscissa as $s_j = \\frac{j-1}{N-1}L$. For T video frames, this results in a time sequence of SE(2) poses \\{x(1), ..., x(T)\\}, where $x_j = [x_1...x_N] \\in \\mathbb{R}^{3N}$, and $j \\in \\{1,..., N\\}$. We leverage a Savitzky-Golay filter (3rd-order, window length 25) to estimate the associated pose velocities $\\dot{X}$ and velocities $\\ddot{X}$.\n4) Evaluation metrics: To evaluate the models quanti-tatively, we introduce position and orientation task-space metrics. We use a Cartesian-space Mean Absolute Error (MAE) measuring the deviation of the estimated from the actual robot body shape, given by\n\n$e^{body}_p = \\frac{1}{NT}\\sum_{k=1}^T \\sum_{i=1}^N ||p_i(k) - \\hat{p}_i(k)||_2, \\quad e^{body}_a = \\frac{1}{NT}\\sum_{k=1}^T \\sum_{i=1}^N |\\theta_i(k) - \\hat{\\theta}_i(k)|,$\n\nwhere $p_i(k)$ and $\\theta_i(k) \\in \\mathbb{R}$ are the estimated position and orientation of point $i$ along the structure, respectively, while $p_i(k)$ and $\\hat{\\theta}_i(k)$ are the ground-truth counterparts. These metrics give the average pose error across all T frames of a trajectory and all N cross-sections tracked along the robot, enabling a good evaluation of the kinematic model by capturing how well it represents the overall shape of the soft robot structure.\nIn addition, we consider an end-effector Cartesian-space"}, {"title": "B. Kinematic Fusion Results", "content": "1) Cases 1, 2 and 3: Figs. 3(a) & 3(b) presents the average strain distances between the adjacent segment pairs for Cases 2-3, as the result of the first and final iteration of the kinematic fusion algorithm. The plots for Cases 2 and 3 reveal one and two peaks, respectively, revealing where we need to separate segments in the kinematic model. The number of segments and respective lengths for the resulting models obtained with a threshold of h = 0.2 are presented in the third column of Table I and by comparing to the second column, it is easily visible that our algorithm almost perfectly identified the segment lengths. As a consequence of the correct identification of the number of segments and segment lengths, the identified kinematic model also accurately captures the shape of the robot with the position errors below 0.2% of the robots' length, as it can be seen from the body shape reconstruction errors stated in the first three rows of Table I. We remark that the error can be further reduced by using a finer discretization of backbone pose markers (i.e., increasing N).\n2) Case 6: Even though the kinematics of many continuum soft robotic manipulators can be described by PCS/PCC kinematics, other continuum soft robots can only be described by piecewise constant models in the limit $N \\rightarrow \\infty$ as they exhibit polynomial curvature [25], [26] or even more generally GVS [13]. This is particularly the case when external or gravitational forces dominate the elastic and actuation forces [4]. In order to verify that our approach is also able to identify effective models in such situations, we test the kinematic fusion algorithm on the case of an affine curvature robot [24] and plot the resulting average strain distances in Fig. 3(c). Indeed, the strain distance plot now does not exhibit anymore clear, isolated peaks (i.e., a single solution). Therefore, we formulate a Pareto front in Fig. 3(d) (by varying the strain distance threshold h) that describes the tradeoff between the number of PCS segments (i.e., the DOF of the kinematic model) and the shape reconstruction accuracy. Analyzing and exploiting this tradeoff allows the user to choose their sweetspot between model complexity and performance. In this case, we find that three segments represent a suitable compromise between model complexity and shape reconstruction accuracy as it exhibits a position error of only 0.5% of the robot's length."}, {"title": "C. Dynamic Model Identification Results", "content": "1) Verification of Dynamical Regression: We verify the dynamical regression algorithm on one and two-segment PCS robots (i.e., Cases 1 & 2) both with and without measurement noise. After regressing the dynamic parameters on the training set, we perform a rollout on the test set and compare the resulting predicted trajectory with the ground truth. To confirm that the dynamic regression is also effective when applied to real-world data, we apply in some experiments Gaussian noise that mirrors measurement noise as we would encounter it for motion capture data, computer vision detection errors, etc. to the poses included in the training set (i.e., $x = x + \\mathcal{N}(0, \\sigma_x)$). For Case 1, we sample the noise from a normal distribution with standard deviations 0.5 mm and 1\u00b0 for the position and orientation measurements, respectively. Analog, we define the standard deviation of the noise for Case 2 as 0.1 mm and 0.5\u00b0.\n2) Verification of Strain Sparsification: Next, we verify that the strain sparsification algorithm can detect and eliminate strains that do not have a significant effect on the dynamics and can be, therefore, neglected to reduce the model complexity. For this purpose, we apply the integrated Dynamic Regression and Strain Sparsification algorithm to Cases 4 & 5, which exhibit no shear strain and no axial strain (1st-segment) & no shear strain (2nd-segment), respectively. We define the maximum elastic and shear modulus as $E_{max} = 100$ MPa which leads to the stiffness thresholds for each segment $K_{max} = diag (12.6 Nm^2, 168 N, 126 kN)$. For example, in Case 4, after determining the dynamic parameters during the first iteration, the algorithm detects that the estimated shear stiffness $K_{sh} = 1200N > K_{max} = 168 N$. Therefore, the shear strain is eliminated from the dynamic model, and the dynamic parameters are newly regressed during the next iteration. Similarly, the algorithm correctly neglects the axial strain for the 1st segment and the shear strain for the 2nd segment of Case 5."}, {"title": "D. Benchmarking of Identified Dynamical Model against ML Baselines", "content": "We benchmark the derived dynamical model of Case 2 (i.e., a two-segment planar PCS soft robot) against several models trained using machine learning approaches. Specifically, we consider various learning-based approaches that"}, {"title": "E. Demo of Model-based Control", "content": "To demonstrate how the derived models can be used in a plug-and-play fashion for model-based control, we simulate the closed-loop dynamics of a simulated two segment PCS"}, {"title": "V. CONCLUSIONS", "content": "In this work, we present a data-driven method that utilizes the PCS strain model to derive low-dimensional kinematic and dynamic models for continuum soft robots from discrete backbone pose measurements, outperforming ML-based models like neural networks by maintaining the physical robot structure. This enhancement improves data efficiency and performance beyond the training set, allowing for direct and effective model-based control design. Future work will explore expanding this approach to 3D models and real-world applications, aiming to further refine the actuation matrix for underactuated systems."}]}