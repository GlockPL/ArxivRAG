{"title": "Learning to Embed Distributions via Maximum Kernel Entropy", "authors": ["Oleksii Kachaiev", "Stefano Recanatesi"], "abstract": "Empirical data can often be considered as samples from a set of probability distributions. Kernel methods have emerged as a natural approach for learning to classify these distributions. Although numerous kernels between distributions have been proposed, applying kernel methods to distribution regression tasks remains challenging, primarily because selecting a suitable kernel is not straightforward. Surprisingly, the question of learning a data-dependent distribution kernel has received little attention. In this paper, we propose a novel objective for the unsupervised learning of data-dependent distribution kernel, based on the principle of entropy maximization in the space of probability measure embeddings. We examine the theoretical properties of the latent embedding space induced by our objective, demonstrating that its geometric structure is well-suited for solving downstream discriminative tasks. Finally, we demonstrate the performance of the learned kernel across different modalities.", "sections": [{"title": "Introduction", "content": "Most discriminative learning methods conventionally assume that each data point is represented as a real-valued vector. In practical scenarios, however, data points often manifest as a 'set' of features or a 'group' of objects. A quintessential example is the task of predicting a health indicator based on multiple blood measurements. In this case, the single data point of a patient has multiple, or a distribution of, measurements. One approach to accommodate such cases involves representing each input point as a probability distribution. Beyond mere convenience, it is more appropriate to model input points as distributions when dealing with missing data or measurement uncertainty, as often encountered when facing the abundance of data, which commonly presents a challenge for data-rich fields such as genetics, neuroscience, meteorology, astrophysics, or economics.\n\nThe task of regressing a mapping of probability distributions to a real-valued response is known as distribution regression. Distribution regression has been successfully applied in various fields, such as voting behavior prediction [13], dark matter halo mass learning [41], human cancer cells detection [42], brain-age prediction [6], among others [36, 31, 61]. The versatility and effectiveness of this framework underscore its power in solving complex problems [62, 27]. Kernel methods have become a widely used approach for solving distribution regression tasks by exploiting a kernel between distributions referred to as a distribution kernel. Despite the multitude of proposed kernels, the practical application of kernel methods remains challenging due to the nontrivial choice of the appropriate kernel. While some efforts focus on identifying kernels with broad applicability and favorable statistical properties [52], others aim to tailor kernels to the geometric characteristics of specific input spaces [6]. Remarkably, the question of learning data-dependent kernels has received limited attention. This study is thus driven by a fundamental question: What are the"}, {"title": "Preliminaries", "content": "We first introduce the main concepts necessary to formalize our learning framework: kernel mean embeddings and covariance operator embeddings."}, {"title": "Kernel Embeddings of Distributions", "content": "Consider an input space \\( \\mathcal{X} \\) and a positive-definite (p.d.) kernel \\( k : \\mathcal{X} \\times \\mathcal{X} \\rightarrow \\mathbb{R} \\). Let \\( \\mathcal{H} \\) be the corresponding reproducible kernel Hilbert space (RKHS) induced by such kernel. Consider a probability distribution \\( P \\in \\mathcal{P}(\\mathcal{X}) \\). The kernel mean embedding map embeds the distribution \\( P \\) as a function in Hilbert space:\n\\[\\mu_P = \\mu(P) := \\int_{\\mathcal{X}} k(x,.) dP(x) = \\int_{\\mathcal{X}} \\varphi(x) dP(x),\\]\nwhere \\( \\varphi : \\mathcal{X} \\rightarrow \\mathcal{H} \\) is a feature map such that \\( \\varphi(x) = k(x,\\cdot) \\).\n\nImportantly, if the kernel \\( k \\) is characteristic [48], the mapping \\( \\mu : \\mathcal{P}(\\mathcal{X}) \\rightarrow \\mathcal{H} \\) is injective, implying that all information about the original distribution is preserved in \\( \\mathcal{H} \\). This last property underscores much of power under recent applications of kernel mean embeddings [39, 46, 14]. The natural empirical estimator for the kernel mean embedding approximates the true distribution with a finite sum of Dirac delta functions:\n\\[\\hat{\\mu}_P := \\frac{1}{N} \\sum_{i=1}^{N} \\varphi(x_i) \\in \\mathcal{H}\\]"}, {"title": "Covariance Operators and Entropy", "content": "A second way of mapping a probability distribution to a Hilbert space can be defined by means of a covariance operators. For a given feature map \\( \\varphi(x) = k(x, \\cdot) : \\mathcal{X} \\rightarrow \\mathcal{H} \\), and a given probability distribution \\( P \\in \\mathcal{P}(\\mathcal{X}) \\), the covariance operator embedding is defined as:\n\\[\\Sigma_P := \\int_{\\mathcal{X}} \\varphi(x) \\otimes \\varphi(x) dP(x)\\]\nwhere \\( \\otimes \\) is a tensor product. \\( \\Sigma_P \\) is a self-adjoint positive semi-definite (p.s.d.) operator acting on \\( \\mathcal{H} \\). Such operator can be seen as a mean embedding w.r.t. the feature map \\( x \\rightarrow \\varphi(x) \\otimes \\varphi(x) \\) and therefore, for a universal kernel \\( k \\), the map \\( P \\rightarrow \\Sigma_P \\) is injective (see Bach [1]).\n\nSimilarly to Eq. (2), the natural empirical estimator is:\n\\[\\hat{\\Sigma}_P := \\frac{1}{N} \\sum_{i=1}^{N} \\varphi(x_i) \\otimes \\varphi(x_i)\\]\nFor a translation-invariant kernel \\( k(x,x') = k(x - x') \\) normalized such that \\( k(x,x) = 1 \\), the covariance operator \\( \\Sigma_P \\) is a density operator [1]. Henceforth, entropy measures can be applied to it, and the quantum R\u00e9nyi entropy of the order \\( \\alpha \\) can be defined as:\n\\[S_\\alpha(\\Sigma_P) := \\frac{1}{1-\\alpha} \\log \\text{tr} [(\\Sigma_P)^\\alpha] = \\frac{1}{1-\\alpha} \\log \\sum_i \\lambda_i^\\alpha\\]\nwhere \\( {\\lambda_i}_i \\) are the eigenvalues of \\( \\Sigma_P \\). The Von Neumann entropy can be seen as a special case of R\u00e9nyi entropy in the limit \\( \\alpha \\rightarrow 1 \\). However, in our work, we focus primarily on the second-order case of R\u00e9nyi entropy, i.e. \\( \\alpha = 2 \\) (see Carlen [9], M\u00fcller-Lennert et al. [40], Wilde [58], Giraldo et al. [15] for an in-depth overview of the properties and theory of quantum entropies)."}, {"title": "Unsupervised Distribution Kernel Learning", "content": "In this section, we discuss the key topics in distribution regression, including problem setup, the notion of a 2-stage sampling process, and the common solutions to regression employing kernel methods.\n\nDistribution regression extends the common regression framework to the setup where covariates are given as probability distributions available only through samples. Formally, consider the task of finding a regressor \\( f : \\mathcal{P}(\\mathcal{X}) \\rightarrow \\mathcal{Y} \\) from the dataset of samples \\( \\Gamma_M = \\{(P_i, y_i)\\}_{i=1}^M \\) where \\( P_i \\in \\mathcal{P}(\\mathcal{X}) \\) are distributions provided as a set of i.i.d. empirical samples \\( x_1, ..., x_N \\sim P_i \\) (see Poczos et al. [43], Szab\u00f3 et al. [51, 52] for a comprehensive analysis). A viable approach to solving this problem is to define a kernel \\( K : \\mathcal{P}(\\mathcal{X}) \\times \\mathcal{P}(\\mathcal{X}) \\rightarrow \\mathbb{R} \\) that is universal in \\( \\mathcal{P}(\\mathcal{X}) \\). By setting up such a kernel \\( K \\), we can utilize kernel-based regression techniques, with SVM often being the preferred method for classification tasks [37] or Kernel Ridge Regression (KRR) when the space \\( \\mathcal{Y} \\) is continuous [35].  To this end, several kernels have been proposed over time (see details in Sec. 4)."}, {"title": "Dataset Embedding", "content": "Instead of using standard kernels designed to encapsulate the geometry of the input space, we consider learning a data-dependent kernel, tailored to the specific properties of the dataset. In a similar vein, Yoshikawa et al. [61] proposed learning an optimal kernel (or equivalently, a feature map) jointly with the classifier to address the text modality. In this work, we focus on an unsupervised problem, aiming to learn a data-dependent kernel between probability distributions without access to classification labels.\n\nWe first introduce proper parametrization to ensure both expressivity and robustness followed by the definition of the optimization objective. Leveraging the idea of 2-level kernel setup, we define the embedding kernel as\n\\[k_{\\theta} : \\mathcal{X} \\times \\mathcal{X} \\rightarrow \\mathbb{R} = k_{emb}(f_{\\theta}(x), f_{\\theta}(x')).\\]\nwhere \\( f_{\\theta} \\) is a trainable encoder function \\( f_{\\theta} : \\mathcal{X} \\rightarrow \\mathcal{Z} \\), \\( \\mathcal{Z} \\) is a latent encoding space, and \\( k_{emb} \\) is a kernel defined on the latent space \\( k_{emb} : \\mathcal{Z} \\times \\mathcal{Z} \\rightarrow \\mathbb{R} \\). The encoder function \\( f_{\\theta} \\) transforms every input probability distribution \\( P \\in \\mathcal{P}(\\mathcal{X}) \\) into a distribution over the latent space \\( P_{\\theta} \\in \\mathcal{P}(\\mathcal{Z}) \\).\n\nBy the definition of the encoding process, \\( P_{\\theta} \\) is a push-forward measure. For an empirical probability distribution \\( q = \\sum_{i} \\delta(x_i) \\in \\mathcal{P}(\\mathcal{X}) \\) and a measurable map \\( f : \\mathcal{X} \\rightarrow \\mathcal{Z} \\), the push-forward measure \\( f_{\\#}q \\in \\mathcal{P}(\\mathcal{Z}) \\) is defined as \\( \\sum_{i} \\delta(f(x_i)) \\)."}, {"title": "Unsupervised Optimization Objective", "content": "This dataset level representation depends on the choice of first and second level kernels \\( k, K \\) and, in turn, on the trainable function \\( f_{\\theta} \\) parameterized by the set of parameters \\( \\theta \\). In this work, we propose learning the parameters \\( \\theta \\) to maximize quantum entropy of the dataset embedding, i.e.,\n\\[\\hat{\\theta} = \\arg \\max_{\\theta} \\{S_2(\\hat{\\Sigma}_D) := - \\log \\text{tr} [(\\hat{\\Sigma}_D)^2] \\}.\\]\nAs we will describe in brief, optimizing this target has clear benefits inherited from the underlying geometry of the setup. But, first, we show how to empirically compute \\( S_2(\\hat{\\Sigma}_D) \\). Building upon previous work [1], we exploit the following property of the covariance estimator:\n\\[\\text{tr} [(\\hat{\\Sigma}_D)^2] = \\text{tr} \\left[\\left(\\frac{1}{M} \\hat{K}_D\\right)^2\\right],\\]\nwhere \\( \\hat{K}_D \\in \\mathbb{R}^{M \\times M} \\) is the distribution kernel matrix, with \\( [\\hat{K}_D]_{ij} = K_{distr}(\\mu_{P_i}, \\mu_{P_j}) \\). This equation follows directly from the fact that \\( \\hat{\\Sigma}_D \\) and \\( M \\hat{K}_D \\) share the same set of eigenvalues. Leveraging this relationship, we can define tractable unsupervised training loss, which we term Maximum Distribution Kernel Entropy (MDKE), with respect to the parameters of the encoder \\( f_{\\theta} \\):\n\\[\\mathcal{L}_{MDKE}(\\theta) := -S_2(\\hat{\\Sigma}_D) = \\log \\text{tr} \\left[\\left(\\frac{1}{M} \\hat{K}_D\\right)^2\\right] = \\log \\sum_{i=1}^{M} \\lambda_i^2 \\left(\\frac{1}{M} \\hat{K}_D\\right) = \\log \\|\\frac{1}{M} \\hat{K}_D\\|_F^2,\\]\nwhere the latter relies on the fact that the Frobenius norm \\( \\|A\\|_F^2 = \\sum_i \\lambda^2(A) \\), where \\( \\lambda_i(A) \\) are eigenvalues \\( A \\).\n\nThe MDKE objective is differentiable w.r.t. \\( \\theta \\) for commonly used kernels, provided that the encoder \\( f_{\\theta} \\) is differentiable as well. While the entropy estimator \\( S_2(\\hat{\\Sigma}_D) \\) is convex in the kernel matrix \\( \\hat{K}_D \\),"}, {"title": "Geometrical Interpretation", "content": "The optimization objective is specifically designed to minimize the variance within each distribution (inner-distribution variance) while simultaneously maximizing the spread of distributions over the compact latent space \\( \\mathcal{Z} = \\mathbb{S}^{d-1} \\). This shaping of the distributions embeddings in the latent space facilitates easier separation in downstream tasks. In this section we show that the geometry of the optimal (w.r.t. the MDKE loss) configuration of mean embeddings in the RKHS attains describe properties. For doing so we leverage the notion of distributional variance \\( \\mathcal{V}_H \\) (Definition 1 in Muandet et al. [38]).\n\nDefinition 3.2. For a set of \\( M \\) probability distributions \\( \\mathcal{D}_M \\), distributional variance \\( \\mathcal{V}_H(\\mathcal{D}_M) \\) of the mean embeddings in the RKHS \\( H \\) is given by\n\\[\\mathcal{V}_H(\\mathcal{D}_M) := \\frac{1}{M} \\text{tr} [G] - \\frac{1}{M^2} \\sum_{i=1}^{M} \\sum_{j=1}^{M} G_{ij},\\]\nwhere \\( G \\) is the \\( M \\times M \\) Gram matrix of mean embeddings in \\( H \\), i.e. \\( G_{ij} = \\langle \\mu_{P_i}, \\mu_{P_j} \\rangle_H \\) [38].\n\nHere we show that the distributional variance \\( \\mathcal{V}_H \\) can be equally reformulated into two separate contributions:\n\\[\\mathcal{V}_H(\\mathcal{D}_M) = \\frac{1}{M} \\sum_{i=1}^{M} \\|\\mu_{P_i}\\|^2 - \\|\\mu_{\\hat{P}}\\|^2,\\]\nwhere \\( \\hat{P} \\) denotes mixture distribution with elements of \\( \\mathcal{D}_M \\) being uniformly weighted mixture components (see proof in the Appendix A.1).\n\nThe relevance of distributional variance for MDKE objective is established by the following result.\n\nProposition 3.3. For a set of \\( M \\) probability distributions \\( \\mathcal{D}_M \\), the second-order R\u00e9nyi entropy \\( S_2 \\) of the empirical covariance operator embedding \\( \\hat{\\Sigma}_D \\) induced by the choice of Gaussian distribution kernel \\( K_{RBF} \\) over points in the RKHS \\( H_{emb} \\), as defined in Eq. (8), \\( -\\) is upper bounded by the distributional variance \\( \\mathcal{V}_{H_{emb}}(\\mathcal{D}_M) \\), i.e.,\n\\[2^{-S_2(\\hat{\\Sigma}_D)} \\le \\mathcal{V}_{H_{emb}}(\\mathcal{D}_M)\\]\nwhere \\( \\gamma \\) is the bandwidth of the distribution kernel \\( K_{RBF} \\).\n\nThe proof of this proposition is provided in Appendix A.3. This result formalizes the fact that our objective increases distributional variance, pushing up the average squared norm of mean embedding of input distributions while minimizing squared norm of the mean embedding of the mixture. We further explore the geometrical implications of such optimization by formalizing connection between the variance of the distribution and the squared norm of the its mean embedding in RKHS.\n\nProposition 3.4. Under Assumption 3.1, the maximum norm of kernel mean embedding is attained by Dirac distributions \\( \\{\\delta_z\\}_{z \\in \\mathcal{Z}} \\).\n\nThis result is trivial due to the fact that the set of mean embeddings is contained in the convex hull of \\( \\{k_{emb}(z,\\cdot)\\}_{z \\in \\mathcal{Z}} \\), and, under Assumption 3.1, \\( \\forall z \\in \\mathcal{Z} : \\|k_{emb}(z,\\cdot)\\|_{H_{emb}} = k_{emb}(z, z) = 1 \\).\n\nProposition 3.5. Under Assumption 3.1, uniform distribution \\( \\mathcal{U}(\\mathcal{Z}) \\) is a unique solution of\n\\[\\arg\\min_{P \\in \\mathcal{P}(\\mathcal{Z})} \\{\\|\\mu_{emb}(P)\\|_{H_{emb}}^2 = \\iint_{\\mathcal{Z} \\times \\mathcal{Z}} k_{emb}(z,z') dP(z)dP(z') \\}.\\]"}, {"title": "An Illustrative Example", "content": "We use a simple example to illustrate the connection between geometrical configurations of embedded distributions and distribution kernel entropy \\( S_2(\\Sigma_D) \\) (see Fig. 2). We sample a number of points from 6 different Gaussian distributions and project on a sphere \\( \\mathbb{S}^2 \\) varying their projected variance \\( \\gamma \\). As \\( \\gamma \\) decreases, the distributional variance of the overall distribution of Gaussians increases (Fig. 2a). For very small \\( \\gamma \\) each distribution converges to a point (a Dirac distribution). This results in the entropy interpolating between lower and upper bounds, demonstrating how entropy behaves in response to changes in distribution variance. Fig. 2b showcases the behavior of two terms comprising distributional variance (Eq. (16)): the average kernel norm of the distributions alongside the kernel norm of the mixture. The increase in entropy and variance corresponds to a 'flattening' effect on the spectrum of the distribution kernel matrix. This example provides a simplified picture of how input distributions configurations influence kernel entropy."}, {"title": "Limitations", "content": "Runtime complexity. The applicability of a data-dependent distribution kernel to solving discriminative tasks relies on the structure of the dataset being well-suited for distribution regression modeling. The model performs best when the number of input distributions is relatively small (e.g., thousands rather than millions), while the number of samples per distribution is large. It is crucial to note that the computational complexity of the proposed method, which is a common concern in practical applications, is most favorable for the tasks described. A detailed analysis of runtime complexity can be found in Appendix B.3.\n\nBroader impact. We wish to emphasize that the distribution regression framework has emerged as a powerful tool for analysis and predictive modeling, especially in domains where traditional methods face challenges, including social science, economics, and medical studies. We urge researchers and practitioners applying distribution regression in these areas to give special consideration to issues such as bias, fairness, data quality, and interpretability, - aspects that are currently under-researched in the context of distributional regression, largely due to the relative novelty."}, {"title": "Related Work", "content": ""}, {"title": "Distribution Regression", "content": "Distribution regression was introduced in Poczos et al. [43], while the seminal work of Szab\u00f3 et al. [52] provides a comprehensive theoretical analysis of this regression technique. A natural approach"}, {"title": "Experiments", "content": "We here demonstrate that our proposed method successfully performs unsupervised learning of data-dependent distribution kernel across different modalities. The experimental setup is divided into two phases: unsupervised pre-training and downstream regression classification using the learned kernel.\n\nFor each dataset, we select a hold-out validation subset with balanced classes, while the remainder of the dataset is utilized for unsupervised pre-training. We use mini-batch ADAM [22] with a static learning rate of 0.0005. We report mini-batch based (instead of epoch based) training dynamics as our tasks do not require cycling over the entire dataset to converge to the optimal loss value. All experiments use Gaussian kernel both as an embedding kernel and distribution kernel, the hyperparameter selection is performed as described in Appendix B.1.\n\nOnce the samples encoder \\( f_{\\theta} \\) is learned, we employ it to compute distribution kernel Gram matrix, used as an input to the Support Vector Machine (SVM) for solving downstream classification tasks. A grid search with 5 splits (70/30) is conducted to optimize the strength of the squared \\( l_2 \\) regularization penalty \\( C \\), exploring 50 values over the log-spaced range \\( \\{10^{-7}, ..., 10^{5}\\} \\). The best estimator is then applied to evaluate classification accuracy on the validation subset, which we report.\n\nAdditional experiments exploring the application of data-dependent distribution kernels in domains where distribution regression models are less common, such as image and text, are presented in Appendix D."}, {"title": "Flow Cytometry", "content": "Flow Cytometry (FC) is a widely used technique for measuring chemical characteristics of mixed cell population. Because population-level properties are described through (randomized) sampling of cells, FC is used as a canonical setup of distribution regression. For this study we used a dataset [54] where more than 100.000 cells are measured per each patient (subject). For each cell a total of ten parameters are reported, hence, we treated each subject as an empirical distribution over \\( \\mathbb{R}^{10} \\). We considered downstream classification tasks on two different sets of labels. The first ('Tissue' classification) contains peripheral blood (pB) and bone marrow (BM) samples from \\( N = 44 \\) subjects. The second ('Leukemia' classification) presents healthy and leukemia BM cell samples, \\( N = 50 \\). Classes were balanced in both cases."}, {"title": "Conclusion", "content": "In this work, we presented an unsupervised way of learning data-dependent distribution kernel. While previous studies in distribution regression predominantly relied on hand-crafted kernels, our work, in contrast, demonstrates that entropy maximization can serve as a powerful guiding principle for learning adaptable, data-dependent kernel in the space of distributions. Our empirical findings show that this technique can not only serve as a pre-training step to enhance the performance of downstream distribution regression tasks, but also facilitate complex analyses of the input space. The interpretation of the learning dynamics induced by the proposed objective relies on a theoretical link between the quantum entropy of the dataset embedding and distributional variance. This theoretical link, which we have proven, enables us to approach the optimization from a geometrical perspective, providing crucial insights into the flexibility of the learned latent space encoding.\n\nWe hope that theoretically grounded way of learning data-dependent kernel for distribution regression tasks will become a strong alternative to the common practice of hand-picking kernels. More broadly, our results present a methodology for leveraging the distributional nature of input data along side the novel perspective on the encoding of complex input spaces. This highlights the potential to extend the application of more advanced learning methods, embracing the ever-increasing complexity of data by going beyond more conventional vector-based representations."}, {"title": "Connection to Other Frameworks", "content": ""}, {"title": "Distributional Regression Landscape", "content": "As the distributional regression task differs from common Machine Learning (ML) setups where inputs are given as vectors, the effective practical solution requires unique considerations.\n\nThe most obvious approach would be to ignore the fact that inputs are given as distributions and learn classifier on the space of samples, with a proper aggregation of posteriors (e.g. with a simple sum over histograms). This approach, while being simple, has been shown not to yield practically useful results, and was explicitly excluded from reported performance on different tasks by different authors [37, 44].\n\nViable approaches to solving distributional regression could be, approximately, split up into the following categories.\n\nDiscriminate generative models. The idea is to fit each input distribution to a parametric family, e.g. Gaussian Mixture Model (GMM), to use available closed-form solutions to compute kernel or similarity or distance between distributions. This group of methods originated from the work on hidden Markov models and it's applications to processing sequence modalities, like text, DNA, proteins, and more. Early work [17] on learning discriminative classifier for generative models leveraged the fact that parametric models forms a Riemannian manifold with local metric given by Fisher information, they derived kernel function termed Fisher kernel suitable for running SVM between generative models. Driving motivation was classification between hidden Markov models, with the developed method being applied to DNA and protein sequence analysis. Following the same modeling approach of analysing DNA sequences with discriminative models between Markov models, Jebara and Kondor [18] proposed to use Bhattacharyya distance between distributions from exponential families to derived so-called Expected Likelihood Kernel. Jebara et al. [19] explored the method of computing kernel between distributions as the integral of the product of pairs of distributions, termed Probability Product Kernel. A new family of kernels was applied to the same setup of discriminating task on text modality, hidden Markov models for biological data. The model was also successfully applied for analysis of linear dynamical systems for time series data. Critical advantage of this work was access to computationally effective way of computing kernel for the distributions without having access to analytical closed-form parametrization (only relying on samples). In Sec. 5.1 we used fitting distributions to GMM with Fisher Kernel applied to learn parameters as a baseline for the performance on the task.\n\nPoint clouds. This group includes methods that model each input distribution as a set of points (also known as 'point cloud' or 'feature group' in computer vision) and use kernel or similarity function defined on sets. Large portion of the methods in this group arised in computer vision (CV) field when local features extractor were widely employed to pre-process images yielding either per-image histograms or sets of low dimensional vectors. The group includes kernels based on nonparametric divergence estimates, quantized set kernels, and so-called 'nearest-neighbor' set kernels to name a few [50, 28, 32, 16, 5, 5, 55]. Such kernel were employed to many CV tasks though the successfully application required not only a good kernel but also high-quality feature extractor. Special attention goes to methods leveraging Wasserstein distance (including both kernel-based and similarity-based solutions). Wasserstein distance as a metric-aware discrepancy measure for probability distributions is a natural choice of deriving kernels or similarity functions between point clouds [44]. While being computationally problematic for large-scale problems, Sliced Wasserstein kernels were succesfully adopted [23, 35] as they provided both reliable way for the point set comparison with a reduced cost leveraging sliced formulation. In Sec. 5.1 we compared performance of Sliced Wasserstein-1 and Sliced Wasserstein-2 kernels, with the latter yielding significantly lower performance. Such a behavior is consistent with theoretical analysis stating that Sliced Wasserstein-1 has favoriable properties when compared to kernel based on Wasserstein-2 distance.\n\nKernel Mean Embeddidngs. Muandet et al. [37] proposed to leverage kernel mean embedding of measures in RKHS, so that the distributional regression could now be casted to a regression the corresponding Hilbert space. While the original work leveraged kernel between RKHS embeddings to train SVM, Szab\u00f3 et al. [51] provided theoretical guarantees for the for learning Ridge regressor from distribution embeddings in the Hilbert space to the outputs. Law et al. [26] applied the same"}, {"title": "Hyperspherical Uniformity Gap", "content": "The link between entropy maximization in the space of distribution, the gap between average norm and norm of the mixture distribution marginalized over the dataset (i.e. 'average' distribution), and properties of distributions that minimize and maximize kernel mean embedding norm (as described in Sec. 3.4) unveils a subtle yet significant connection to the concept of the Hyperspherical Uniformity Gap (HUG), introduced in [30]. HUG has been developed to generalize the phenomenon of neural collapse observed in supervised classification settings. In our approach, working directly with samples from input distributions grants us explicit access to the 'grouping' of points in the input space. Even though the HUG framework setup does not have a notion of 'grouping', we can close the gap by noting that class labels provided with the dataset implicitly create 'groupings' of points, which can be interpreted as empirical samples drawn from latent probability distributions (one for each class).\n\nHowever, a notable distinction lies in the dimensional aspect: HUG focuses on the distribution of points on the surface of a finite-dimensional hypersphere, whereas our work encompasses an infinite-dimensional hyperball setting, given the use of points in kernel induced RKHSs. Furthermore, the loss function introduced in our study presents a unified optimization objective that weaves together both the inner-group and inter-group dynamics while being derived from first principles. In the HUG framework these two aspects are addressed separately.\n\nEstablishing a more formal connection between these frameworks emerges as a promising direction for future research. Such an endeavor could offer a novel perspective on supervised classification, particularly by conceptualizing class prototypes as probability distributions rather than mere vectors. This exploration might bridge the gap between these distinct approaches, enriching our understanding of classification paradigms in high-dimensional spaces."}, {"title": "Additional Experiments", "content": "In the following section, we present additional experiments on learning data-dependent distribution kernels in the image and text domains. While representing text as empirical samples from the finite space of tokens (i.e., words from the dictionary) is quite common, the choice to model images as histograms over pixel positions is more subtle. We demonstrate that, in both scenarios, unsupervised pre-training of the encoder yields distribution kernel that achieves strong performance on downstream classification tasks, showcasing the versatility of the proposed learning framework in scenarios where distribution regression formulations are uncommon."}, {"title": "Image Classification Tasks", "content": "MNIST [12] and Fashion-MNIST [60] consist of 28 \u00d7 28 pixel grayscale images divided into 10 classes. We considered each individual image to be a probability distribution (via rescaling pixel"}, {"title": "Text Classification Tasks", "content": "To assess our method's performance in a larger discrete support space, we utilized the \"20 News-groups\" [25], a multi-class text classification dataset. We reduced the size of the dataset to 5 classes (resulting in 2, 628 sentences and 38, 969 unique words) by subsampling both training and test subsets. We treated sentences as empirical distributions over words, assuming word sets to be enough for topic classification, despite no positional info.\n\nThe encoder \\( f_{\\theta} \\) mirrored the setup used in the MNIST case (Appendix D.1), with 12 normalized word embeddings on \\( \\mathbb{S}^{31} \\).\n\nHowever, while in the MNIST case embeddings computations were performed exactly, here con-sidering the entire embedding kernel Gram matrix is impractical due to its large size. Instead, we optimized embeddings by randomly sampling 20 words per sentence, making the inner product be-"}, {"title": "Implementation Details", "content": "In this section, we provide an example illustrating the implementation of the proposed method using the PyTorch framework. All experiments were performed on a single machine with 1 GPU and 6 CPUs.\n\nFunctions to compute distribution kernel Gram matrix:\n\ndef pairwise_kernel(x, gammal):\nB, T = x.size(0), x.size(1)\nX_unroll = x.reshape(B*T, -1)\ndist = (X_unroll[:, None, :] - X_unroll[None, :, :])**2\ndist = torch.sum(dist, dim=2)\nG = F.avg_pool2d(\n dist[None, :, :],\n kernel_size=(T, T),\n stride=(T, T)\n )\nreturn torch.exp(-(gamma1/2.) * G.squeeze(0))\n\ndef distribution_kernel_gram(x, gammal, gamma2):\nGxy = pairwise_kernel(x, gamma1=gamma1)\nGx = Gy = torch.diag(Gxy)\nG = Gx[:, None] + Gy[None, :] - 2*Gxy\nK = torch.exp(-(gamma2/2.) * G)\nreturn Gxy, K"}]}