{"title": "Comparative Analysis of AES, Blowfish, Twofish, Salsa20, and ChaCha20 for Image Encryption", "authors": ["Rebwar Khalid Muhammeda", "Ribwar Rashid Azizb", "Alla Ahmad Hassanb", "Aso Mohammed Aladdin", "Shaida Jumaah Saydahd", "Tarik Ahmed. Rashide", "Bryar Ahmad Hassan"], "abstract": "Nowadays, cybersecurity has grown into a more significant and difficult scientific issue. The recog-\nnition of threats and attacks meant for knowledge and safety on the internet is growing harder to\ndetect. Since cybersecurity guarantees the privacy and security of data sent via the Internet, it is\nessential, while also providing protection against malicious attacks. Encrypt has grown into an an-\nswer that has become an essential element of information security systems. To ensure the security\nof shared data, including text, images, or videos, it is essential to employ various methods and strat-\negies. This study delves into the prevalent cryptographic methods and algorithms utilized for pre-\nvention and stream encryption, examining their encoding techniques such as advanced encryption\nstandard (AES), Blowfish, Twofish, Salsa20, and ChaCha20. The primary objective of this research is\nto identify the optimal times and throughputs (speeds) for data encryption and decryption pro-\ncesses. The methodology of this study involved selecting five distinct types of images to compare\nthe outcomes of the techniques evaluated in this research. The assessment focused on processing\ntime and speed parameters, examining visual encoding and decoding using Java as the primary plat-\nform. A comparative analysis of several symmetric key ciphers was performed, focusing on handling\nlarge datasets. Despite this limitation, comparing different images helped evaluate the techniques'\nnovelty. The results showed that ChaCha20 had the best average time for both encryption and de-\ncryption, being over 50% faster than some other algorithms. However, the Twofish algorithm had\nlower throughput during testing. The paper concludes with findings and suggestions for future im-\nprovements.", "sections": [{"title": "Introduction", "content": "Nowadays, studying cybersecurity has grown increasingly significant. It has become increasingly\nharder to recognize dangers and assaults meant for knowledge and security on the internet. Cyberse-\ncurity requires urgent attention. as it assures the security and integrity of data transmission over the\nInternet, while also offering protection against harmful assaults. Fortunately, encryption has grown\nfrom an issue to a demand in information security systems. To protect shared data, several strategies\nmust be implemented. The times of encryption and decryption, and throughputs (speeds) of some of\nthe most popular block and stream encryption techniques and algorithms have been investigated in\nthis study [1].\nMoreover, cybersecurity has evolved become an increasingly significant and demanding field of\nresearch. Very grow increasingly harder to identify threats and attacks aimed at information security\nvia the Internet. Because it enables protection against malicious attacks and guarantees the\nconfidentiality and authenticity of data transferred via the Internet. While creating and developing\nweb applications and websites, challenges may arise due to open-source platforms like WordPress [2],\nwhich can inadvertently expose vulnerabilities to malware attacks through images generated by such\nplatforms. Consequently, developers employ various techniques, such as encryption, to precaution\nthese applications against intruder attacks and preserve their integrity amidst potential intimidations\nand threats.\nEncryption has evolved into a premier solution, emerging as a vital component within systems to\nsafeguard sensitive information. Safeguarding information exchanged involves a variety of approaches.\nUtilizing the most common block and stream ciphers and algorithms, this study evaluated their\nencryption, decryption time, and throughput (speed) [3] advanced encryption standard (AES),\nBlowfish, Twofish, Salsa20 and ChaCha20 were evaluated. This study employing several sorts of photos.\nThe current research assesses each algorithm's efficacy according to two key indicators: processing\ntime and speed. This article explores and compares numerous symmetric key ciphers (AES, Blowfish,\nTwofish, Salsa20 and ChaCha20) are based on time-based encoding and decoding of picture files using\nJava as the programming language.\nIn this paper, we compare stream ciphers and block ciphers, describing the development of two\nstream cipher algorithms (Sales20 and ChaCha20) and three different algorithms for block ciphers:\nAES, Blowfish, and Twofish, as shown in figure 1. The methods used in this study, identified in\ncryptographic statements for cybersecurity, have been analyzed to find the best technique. In addition,\nthe evaluation was based on outcomes related to speed and time strategies."}, {"title": "", "content": "The primary motivation behind this research is the increasing complexity and importance of cy-\nbersecurity, particularly in the context of transmitting encrypted data. As internet threats and attacks\ngrow more sophisticated and harder to detect, ensuring the privacy and security of online data has\nbecome a critical concern. This study highlights the significance of encryption as an essential element\nof information security systems, aimed at protecting data from malicious attacks. To identify the most\nefficient and accurate technique, it is crucial to evaluate existing methods and be prepared to enhance\nand develop new algorithms. This involves assessing previous techniques using selected data, then\ngenerating novel approaches to help developers identify areas for future improvement and limita-\ntions. This process will be demonstrated through statistical experiments, covering throughput during\nencryption and decryption, as well as the time required for cryptographic analysis. In addition, after\ndiscussing previous works, the study focuses on five algorithms: AES, Blowfish, Twofish, Salsa20, and\nChaCha20. These algorithms are prevalent in cryptographic methods and were chosen for their effec-\ntiveness in stream encryption and prevention. They represent different symmetric cryptographic al-\ngorithms, including block ciphers and stream ciphers. The study also assists researchers in selecting\nthe best key size for stream ciphers, as well as the optimal block size and key size for block ciphers [4].\nBased on this motivation, the study selects plaintexts following the key size and block size stand-\nards specific to each algorithm. The selected images vary in pixel density and size to assess the statis-\ntical performance of the chosen techniques. Additionally, the study method evaluates the effective-\nness of the programming language used and addresses any issues encountered during the mathemat-\nical processes involved."}, {"title": "", "content": "However, several different objectives may influence the study. Despite these variations, certain\nkey points consistently contribute to the research. The following outlines the main contributions of\nthis study:\n\u2022 This study examines five symmetric encryption algorithms: AES, Twofish, Blowfish, Salsa20,\nand ChaCha20. Performance was evaluated based on throughput and encryption time, with\nJava used for implementation.\n\u2022 The study measured the throughput and encryption time of each algorithm using a 128-\nbit key, proving that ChaCha20 outperformed Twofish, Blowfish, and Salsa20 with the fastest\nprocessing time.\n\u2022 Based on overall throughput, ChaCha20 and AES were identified as the most suitable algo-\nrithms for image encryption and decryption.\n\u2022 The study conducted a comparative analysis of symmetric key ciphers, including key size\nand block size, emphasizing the importance of speed and efficiency in cryptographic tech-\nniques.\nThe remainder of the paper includes an overview of cyber methods, discussing how each algo-\nrithm is analyzed in cryptographic rounds. The second section reviews related works, focusing on up-\ndated reference papers. The third section includes materials for each algorithm and outlines the\nstudy's methodology as applied to the general problem. The fourth section presents the experimental\nresults. Section five is dedicated to a detailed discussion comparing the results of this study with pre-\nvious findings. Finally, the paper concludes with a discussion of conclusions and future works."}, {"title": "Related works", "content": "Recent surveys have investigated different cryptographic techniques, examining algorithms like\nBlowfish, Twofish, and AES within the realm of network security, cybersecurity, and cryptography [5],\n[6]. These studies offer an extensive exploration of encryption methods and their efficacy.\nIn their comprehensive analysis of Symmetric Key Cryptographic algorithms, Nema and Rizvi [7]\nmeticulously assessed the strengths and weaknesses inherent in each algorithm. Their research find-\nings highlighted Blowfish as surpassing its counterparts in security, adaptability, performance of en-\ncryption and memory use. Ganpati and Tyagi [8], in their assessment of Encryption Algorithms using\nSymmetric Keys, aimed to deepen comprehension of the cryptographic process while comparing the\nperformance of various symmetric encryption algorithms. Their results indicated that Blowfish exhib-\nited superior execution speeds compared to other prevalent algorithms such as Data Encryption\nStandard (DES), Triple Data Encryption Standard (3DES), and Advanced Encryption Standard (AES). Ad-\nditionally, among the evaluated algorithms, Blowfish demonstrated superior performance metrics in\nterms of encryption time, decrypt time, and speed, while 3DES showed a poor performance."}, {"title": "", "content": "Singh et al.'s [9] comparison of AES, DES, 3DES, and Blowfish algorithms concentrated on evalu-\nating security and power consumption. According to their simulation outcomes, AES emerged as the\nalgorithm displaying superior overall performance compared to the other algorithms scrutinized.\nIn 2013, Ramesh and Suruliandi [10] conducted an evaluation of specific symmetric algorithms,\nfocusing on their effectiveness. Their experimental observations and analysis of text file sizes led them\nto assert that the Blowfish method exhibited superior throughput, consuming less space in memory\nand time for execution. When compared to DES and AES, Blowfish operated approximately four times\nmore quickly. Additionally, in terms of memory utilization, Blowfish showed lower requirements. AES,\nrequiring more computational resources than other algorithms, delivered comparatively inferior per-\nformance outcomes. Not only does Blowfish emerge as the swiftest encryption algorithm, but its sub-\nstantial key size also contributes to its robust security profile, Therefore, it can be applied to a wide\nrange of tasks, such as Packet encryption, online security, and random bit generation.\nIn a survey conducted by Yegireddi and Kumar [11] Although AES and Blowfish have flexible key\nstructures, they are the only algorithms that provide speed and security when compared to more\npopular traditional encryption approaches. Extensive research on both symmetric and asymmetric\ncryptography algorithms has resulted in numerous studies aimed at enhancing and improving them\n[5], [12], [13]."}, {"title": "Methods and Materials", "content": "The study involves analyzing test images of various sizes, discussed in this section according to\ndifferent algorithms, clarified in each subsection. Following that, the methods used in cryptographic\nanalysis are provided. For further clarification, all methods are explained with pseudocode and exam-\nples, along with the programs used in the problem statements."}, {"title": "1.1. Advanced Encryption Standard", "content": "The Advanced Encryption Standard commonly known as AES encryption, is a symmetric block\ncipher designed to secure data blocks of 128 bits. Following a rigorous five-year public competition,\nThe United States government's latest encryption standard, AES, was accepted by the National Insti-\ntute of Standards and Technology (NIST) in 2000. AES offers a choice of three key sizes: 128 bits, 192\nbits, and 256 bits. The number of encryption rounds is determined by the key size, with 10 rounds for\n128-bit keys, 12 rounds for 192-bit keys, and 14 rounds for 256-bit keys. Widely recognized as one of\nthe most robust encryption algorithms available, AES plays a pivotal role in safeguarding sensitive data\nin a vast array of applications, encompassing government communications, financial transactions, and"}, {"title": "3.2. Blowfish Algorithm", "content": "Blowfish stands out as a symmetric cipher algorithm that excels in encrypting and safeguarding\nsensitive data. It boasts a flexible length of the key, which can be 32-448 bits, making it well-suited\nfor a wide spectrum of data security requirements. Blowfish's inception was driven by the need for a\nfast and freely available alternative to existing encryption algorithms. While it is not immune to weak\nkey vulnerabilities, no successful attack against it has been documented. Blowfish functions in the\nform of symmetric block cipher using 64 bits, capable of accommodating keys of variable length. The\nalgorithm's design is divided into two primary components: two modules: one for data encryption and\none for key extension. The task of transforming a key with up to 448 bits into a number of subkey lists\ntotaling 4168 bytes comes to the key extension function. Encrypting data is accomplished by a Feistel\nnetwork with 16 rounds, ensuring thorough protection of sensitive information. Blowfish is particularly well-suited for applications\nwhere the encryption key remains relatively static, such as secure communication links or automatic\nfile encryption systems [1].\nFurthermore, Blowfish employs a Feistel network structure, dividing input data into two halves\nand iteratively smearing a series of substitution and permutation operations. Despite its age, Blowfish\nrelics popular in various applications due to its speed, robustness, and the absence of any known suc-\ncessful cryptanalysis."}, {"title": "3.3. Twofish Algorithm", "content": "A symmetric-key encryption algorithm, the Threefish cipher boasts a 128-bit block size and a flex-\nible key length that can extend up to 256 bits. Renowned for its high level of security and adaptability,\nThreefish operates seamlessly on both 8-bit smart card processors and large processors. Its robust\ndesign incorporates a total of 16 rounds, ensuring that at least 32 bits of non-trivial data are processed\nin each round. Given two inputs, $a'$and $b'$ are defined in equation (1) and (2), the 64-bit data is divided into\nhalves, forming the basis for the Pseudo Hadamard Transform (PHT) [26]. This simple operation, em-\nployed for its efficiency in software implementations, can be executed using just two opcodes on mod-\nern microprocessors.\n$a' = a + b Mod 2^{32}$ (1)\n$b' = a + 2b Mod 2^{32}$ (2)"}, {"title": "3.4. Sales20 Algorithm", "content": "Salsa20 utilizes xoring the outcome of hash the private key, a nonce, and block number with the\nplaintext to create an encrypted a 64-byte plaintext block. With a 32-byte or 256-bit key $k = (k_0, k_1..., k_7)$ and an 8-byte or 64-bit a nonce $v = (v_0, v_1)$ as input, the stream encryption algorithm\nSalsa20 may operate on 32-bit or 4-byte words. The block counter $t = (t_0, t_1)$ then generates a series\nof keystream blocks, either 64 or 512 bits in size [27]."}, {"title": "3.5. Chach20 Algorithm", "content": "256-bit keys, 64-bit nonces, and 64-bit stream positions are used by Daniel J. Bernstein's stream\ncipher algorithm, Salsa20, to create 512-bit keystream blocks for evaluation in the eSTREAM project.\nIn particular, bitwise XORs, rotations, and 32-bit adds are the foundational add-rotate-xor (ARX) pro-\ncesses that drive its pseudorandom function. This combination of operations enables users to effi-\nciently access any position within the keystream in constant time. However, it's important to note that\ncertain attacks against Salsa20 have been documented.\nDrawing upon stream cipher principles, the algorithm incorporates a 256-bit secret key, a 512-bit\nblock size, and 20 rounds. Each round involves 16 XOR operations, 16 additions modulo $2^{32}$, and 16\nrotation operations (ARX operations). Additionally, the algorithm utilizes a 4x4 state matrix X, with 16\nelements processed in the QuarterRoundFunction (QRF) during data encryption and decryption oper-\nations [28]."}, {"title": "3.6 Implementation Method", "content": "Our implementation of various symmetric encryption algorithms in Java encompasses five algo-\nrithms: AES, Blowfish, Twofish, Salsa20, and ChaCha20. We evaluated their performance based on\nencryption and decryption time, throughput, and key size. The key size was set to 128 bits for AES,\nBlowfish, and Twofish, while ChaCha20 utilized a 256-bit key. This paper delves into a comparative\nanalysis of these cryptosystems using the following metrics and the throughput measurement metric\nis considered in formula (3):\nA. Encryption Time: Encryption time represents the duration required to convert plaintext\ninto ciphertext. It is influenced by factors such as key size, plaintext block size, and en-\ncryption mode. We measured the encryption time in milliseconds during our experi-\nments. System efficiency is strongly impacted by encryption time; faster and more re-\nsponsive systems usually correspond with shorter encryption times.\nB. Decryption Time: Decryption time refers to the time needed to recover plaintext from\nciphertext. Similar to encryption time, shorter decryption times are desirable to maintain\nsystem responsiveness and efficiency. In our experiments, decryption time was also\nmeasured in milliseconds. Decryption time plays a crucial role in overall system perfor-\nmance.\nC. Throughput: Throughput quantifies the speed of an encryption or method of decoding.\nIt is computed using the entire value of the encrypted data. or decrypted per unit time,\ntypically expressed in bits per second. Throughput is a critical metric for assessing the\nefficiency of encryption algorithms.\n$Throughput = \\frac{\u0422\u0440}{Et}$ (3)\nWhen $Tp$ represents the total plaintext measured in kilobytes, and $Et$ denotes the encryption\ntime in seconds.\nAs mentioned in the previous sections, finding the throughput and mathematical complexity for\nall algorithms follows a similar process. However, the functionality of each algorithm differs according\nto their specific standards. The analysis standards depend on whether the technique uses a block ci-\npher or a stream cipher. For example, each algorithm analyzes the program for encryption and de-\ncryption equations to determine the elapsed time for encrypting an image (using formula 4) and de-\ncrypting an image (using formula 5). The steps for analyzing the data are referenced in figure 5, which\nillustrates the performance steps for image encryption and decryption for all techniques used in the\nstudy.\n$Et = ENt \u2013 STt$ (4)\n$Dt = ENt \u2013 STt$ (5)"}, {"title": "", "content": "When evaluating encryption time (Et) and decryption time (Dt), Et represents the total time taken\nfrom the start time (STt) to the end time (ENt) of the image encryption process, and Dt represents the\ntotal time taken from STt to ENt of the image decryption process."}, {"title": "Results", "content": "After implementing each algorithm as discussed in the previous section, the focus was on\nthroughput and the time elapsed for encrypting and decrypting images of different sizes. Following\nthe encryption process, which was conducted on five selected images of varying sizes measured in\nkilobytes, the encryption times for all types are recorded in table 3, while table 4 presents the encryp-\ntion throughput. The test results reveal that Twofish requires more time for encryption compared to\nother techniques, whereas ChaCha20 exhibits shorter encryption times than the others. However,\nwhen considering encryption throughput, Twofish demonstrates smaller throughput sizes, while\nChaCha20 showcases greater throughput in the evaluation test.\nSimilarly, the encryption process was carried out on the same set of five selected images, varying\nin size and measured in kilobytes. These images were also selected for the decryption process. The\ndecryption times for all types are documented in table 5, while table 6 displays the decryption\nthroughput. Results indicate that Twofish, like in encryption, requires more time for decryption com-\npared to other techniques, whereas ChaCha20 demonstrates shorter decryption times than the oth-\ners. However, in terms of decryption throughput, Twofish shows smaller throughput sizes, while\nChaCha20 exhibits greater throughput in the evaluation test."}, {"title": "Discussion", "content": "ChaCha20 demonstrates the shortest encryption time, averaging 38.9 milliseconds, closely fol-\nlowed by AES at 51 milliseconds. Blowfish and Salsa20 comes next with an average encryption time of\n54.6 milliseconds and 73 milliseconds, respectively. Twofish show longer encryption times, with\n1318.2 milliseconds. These findings illustrate that the time consumption for the ChaCha20 technique\nis superior, consistent with previous studies across various data types, affirming its quality perfor-\nmance.\nTo further analyse and improve our results, we incorporated additional evaluation metrics and\nexpanded the range of experimental data. The results of the AES algorithm were compared with those\nfrom Kataria and his coauthors' study to enhance our findings based on time-elapsed performance\n[29]. Although the image sizes vary, the comparison is based on the percentage of average time"}, {"title": "", "content": "relative to the average size of images for all encrypted and decrypted images, as mentioned in related\nwork [7], [30]. This study found that encryption required less time than decryption, contrary to other\nresults where encryption took more time. When comparing the two cases, this study demonstrated\nsuperior evaluation and performance, achieving 1.2% for encryption and 1.9% for decryption in terms\nof average time per average size. Conversely, Kataria and his coauthors had higher averages [29]. Fur-\nthermore, researchers can compare these results with other specific cryptographic algorithms for fur-\nther evaluation. For further clarification, Table 7 demonstrates superior performance in presenting\nspecific results. Additionally, this work can be enhanced using statistical non-parametric tests to eval-\nuate the problem and its solutions. This approach, similar to some studies that optimize problems\nbased on heuristic results, can help in assessing and addressing the impacts effectively [31]."}, {"title": "", "content": "The analysis investigates into the nuanced performance attributes of various encryption algo-\nrithms, considering both encryption period and throughput metrics. Notably, ChaCha20 emerges as a\nstandout performer, showcasing remarkable efficiency in terms of throughput. Its efficient design and\nenhanced operations contribute to its ability to handle data rapidly and effectually. Equally, AES illus-\ntrates in terms of rapid encryption times, leveraging its progressive cryptographic techniques to expe-\ndite the encryption process without compromising security. However, Twofish presents a different\nprofile, considered by especially longer encryption times when associated to its counterparts. This"}, {"title": "", "content": "extended process duration proposes a trade-off between security and speed, highlighting the position\nof selecting the most appropriate encryption algorithm based on detailed application requirements.\nBesides, to delve deeper into cybersecurity algorithms, it is necessary to pinpoint precise solutions.\nThis involves optimizing real-world applications, particularly those emphasizing security, like the Inte-\ngrated Cyber-Physical-Attack for Manufacturing System [32]. Such advancements will play a crucial\nrole in verifying the integrity of these techniques in future endeavors."}, {"title": "Conclusions", "content": "Recently, with the internet and network services expanding at a rapid rate, encryption techniques are\ncrucial for protecting confidentiality of data. The current study examined the five most symmetric\nencryption algorithms namely: AES, Twofish, Blowfish, Salsa20 and Chach20. The measurements used\nfor assessment of performance are throughput and encrypt time. The prototype has been written in\nJava and compiled using the JDK 7.1 programming kit using the NetBeans IDE7.1.2 and the default\nconfigurations and an encryption key bit size of 128 was used. The outcomes of the studies demon-\nstrate that the Chacha20, works faster than the Twofish, Blowfish, and Salsa20 strategies and it has\nindicated a shorter time to process. The Chacha20 and AES strategy is more appropriate for image\ndecryption and encryption based to the overall findings according to the throughput detail. For future\nreading, the authors advise the reader could optionally read the following research works [33], [34],\n[35], [36], [37], [38], [39], [40], [41], [42], [43], [44], [45], [46], [47], [48], [49], [50]."}, {"title": "Data availability", "content": "Data will be made available on request."}, {"title": "Conflicts of interest", "content": "The authors declare that they have no known competing financial interests or\npersonal relationships that could have appeared to influence the work reported in this paper."}, {"title": "Funding", "content": "The authors did not receive support from any organization for the submitted work."}]}