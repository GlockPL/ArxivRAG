{"title": "AI Enhanced Ontology Driven NLP for Intelligent Cloud Resource Query Processing Using Knowledge Graphs", "authors": ["Krishna Chaitanya Sunkara", "Krishnaiah Narukulla"], "abstract": "The conventional resource search in cloud infrastructure relies on keyword-based searches or GUIDs, which demand exact matches and significant user effort to locate resources. These conventional search approaches often fail to interpret the intent behind natural language queries, making resource discovery inefficient and inaccessible to users. Though there exists some form of NLP based search engines, they are limited and focused more on analyzing the NLP query itself and extracting identifiers to find the resources. But they fail to search resources based on their behavior or operations or their capabilities or relationships or features or business relevance or the dynamic changing state or the knowledge these resources have. The search criteria has been changing with the inundation of AI based services which involved discovering not just the requested resources and identifiers but seeking insights. The real intent of a search has never been to just to list the resources but with some actual context such as to understand causes of some behavior in the system, compliance checks, capacity estimations, network constraints, or troubleshooting or business insights. This paper proposes an advanced Natural Language Processing (NLP) enhanced by ontology-based semantics to enable intuitive, human-readable queries which allows users to actually discover the intent-of-search itself. By constructing an ontology of cloud resources, their interactions, and behaviors, the proposed framework enables dynamic intent extraction and relevance ranking using Latent Semantic Indexing (LSI) and Al models. It introduces an automated pipeline which integrates ontology extraction by AI powered data crawlers, building a semantic knowledge base for context aware resource discovery.", "sections": [{"title": "1. INTRODUCTION", "content": "Current cloud search systems operate on lexical matching principles, limiting the user experience by requiring precise terminology and identifiers. A more user-friendly approach is to leverage NLP to extract intent from natural language queries and return relevant cloud resources. This document presents an approach to achieve this by constructing a knowledge graph out of the resource ontologies and using AI Models to process semantic queries. This innovation eliminates the need for machine-readable identifiers, significantly improving usability and accessibility for both technical and non-technical users"}, {"title": "2. INSPIRATION FROM HEALTHCARE ONTOLOGY", "content": "The inspiration for this cloud ontology approach comes from healthcare ontology, which has been widely used to structure and standardize medical knowledge. Just as healthcare ontology helps in medical diagnosis, drug interactions, and treatment recommendations, a cloud ontology helps in resource discovery, dependency mapping, and compliance enforcement. The below analogue is presented for better understanding that motivated the ontology based resource query approach"}, {"title": "3. METHODOLOGY", "content": null}, {"title": "3.1 ONTOLOGY CONSTRUCTION OF CLOUD RESOURCES", "content": "The proposed solution involves constructing an ontology of cloud resources and building a semantic search engine powered by Latent Semantic Indexing (LSI) and training AI models. The approach includes:\n1. Extracting metadata from cloud resources to create a knowledge base.\n2. Training Al models to categorize resources based on domain functionality.\n3. Using NLP to parse user queries, extract intent, and match resources accordingly.\n4. Implementing a search engine that integrates with cloud compliance policies (e.g., PCI, HIPAA).\nOntology extraction plays a crucial role in identifying cloud services and their interrelations. Data crawlers are used to collect design metadata, code repositories, configurations, read.me files, dependencies (upstream and downstream), and functionalities of various cloud services and release notes, which are then sent to AI Models (LLM) where the ontology of resources is built. Fig. 3.1 depicts the ontology structure representation in a cloud"}, {"title": "3.2. DATA COLLECTION OF CLOUD RESOURCES", "content": "The data from/about cloud resources is collected as a continuous process which involves collecting data from below sources and sent to AI models by data crawlers:\nResource Data:Configuration files, Service definitions, Deployment scripts, Code repositories.\nOperational Data: System logs, Performance metrics, Usage patterns\nDocumentation: API specifications, Service documentation, Usage guides\nThe data crawlers run at regular cadence for resources whose state is not changed frequently and event based (real-time) extraction for resources whose state frequently change. Any change in the state of a resource is sent as an event to event bus where the data crawler is subscribed that consumes the changes and fed to Al models."}, {"title": "3.3 DATA COLLECTION OF SAAS SERVICES", "content": "Al based crawlers are used to identify patterns in SaS functionalities and classify features. This involves intelligently building sample queries and query the APIs to understand the functionalities the SaaS service offers. Swagger documentation, API documentation, Unit test code repositories, metrics are all scraped to build feature mapping which is fed to AI models. For instance, if an end point listening at a particular port number lists several APIs which are related to ordering, catalog, check out, payment, then it is categorized as e-commerce. If the APIs are related to list promotions, leads, list prospectus customers, opportunities, list deals, lead scoring, schedule demo, it is more likely categorized as sales related service."}, {"title": "3.4 SAAS SERVICES AND CLOUD INFRASTRUCTURE MAPPING", "content": "The data crawlers extract information for both SaaS services and other cloud resources such as VCN, hosts, Subnets, Database, Block storage, buckets, OS, IP addresses, CIDR ranges, switches, routers, NLBs, firewalls. The AI models build the relationship between these services and cloud infrastructure like deployment and network architecture. For instance, the AI model builds the relationship between a CRM service and the bare metal machine which it is hosted with corresponding IP address, Subnet, VCN, NLB, firewall and Internet Gateway. This will help answer queries such as: \u201clist the NLB that fronts the CRM service in my production tenancy\""}, {"title": "4. KNOWLEDGE GRAPH STRUCTURE", "content": null}, {"title": "4.1 BUILDING KNOWLEDGE GRAPH FROM RESOURCE ONTOLOGIES", "content": "The ontology extracted during the AI based scraping phase of cloud resources, is used to infer the entities and their relationships and thus build knowledge graphs of entire cloud ecosystem. The knowledge graph is constructed using graph data structures, where nodes represent cloud resources, services, compliance policies, compute instances, database, storages, network components or any cloud resource and edges denote relationships between them.\nThe process involves the following steps:\n\u2022 Identifying unique entities such as compute instances, storage, and networking components\n\u2022 Establishing relationships such as dependencies, ownership, and compliance associations.\n\u2022 Representing the ontology in a graph database for efficient query processing.\n\u2022 Enhancing the graph with machine learning to improve relevance and discovery.\nFig. 4.1 depicts the knowledge graph representation of cloud resources and relationship"}, {"title": "5 ARCHITECTURE", "content": null}, {"title": "5.1 MODULES", "content": "The whole system involves these modules: AI enhanced data crawler, Cloud resource information base, AI models, Search engine, Observability meta info streamer, Logger, Metrics and Identity services (Identity"}, {"title": "5.2 KNOWLEDGE GRAPH QUERY EXECUTION IN CLOUD SEARCH", "content": "The extracted ontology-based knowledge graph enables semantic query execution by mapping user queries\nExample Query: \"List all compute instances in the production environment that have security vulnerabilities.'\nStep 1: Natural Language Query (NLQ) Processing\nThe query is parsed using NLP techniques to extract intent, entities, and relationships:\nEntity: Compute Instance\nCondition: Production Environment\nFilter: Security Vulnerabilities\nStep 2: Knowledge Graph Query Translation/generation\nThe extracted intent is mapped to the Knowledge Graph using structured queries.\nBelow is cypher query example for Neo4j graph database:\nMATCH (ci:ComputeInstance)-[:DEPLOYED_IN]->(:Environment {name: \"Production\"})\nMATCH (ci)-[:HAS VULNERABILITY]->(v:Vulnerability)\nRETURN ci.name, v.description\nStep 3: Execution & Graph Traversal\nThe system traverses the knowledge graph, fetching compute instances in the production environment and filtering those with vulnerabilities\nStep 4: Structured Output as the response"}, {"title": "Step 5: Natural Language Response", "content": "The system converts the structured response into a human-readable summary:\n\"There are two compute instances in the production environment with security vulnerabilities: ins-cloud- host-1427 with Open SSH port and Ins-cloud-host-2109 with unpatched software"}, {"title": "6. QUERY EXAMPLES", "content": "The system enables natural language queries similar to how health care providers diagnose conditions using symptom-based search. Below table 6.1 shows examples of how users can query cloud resources effectively:"}, {"title": "7. EVALUATION AND RESULTS", "content": "To ensure the validity of the proposed Ontology and NLP based search system for cloud resource querying, we designed and conducted rigorous experiments with real-world datasets. The evaluation methodology focuses on empirical testing across multiple dimensions, including accuracy, efficiency, and usability."}, {"title": "7.1 EXPERIMENTAL SETUP", "content": "The experiment was conducted on a simulated cloud environment with simulated infrastructure services, including Compute Instances, Databases, APIs, and SaaS applications. The system was tested with a dataset containing metadata from multiple cloud resources from service providers (AWS, OCI, Azure). The"}, {"title": "7.2 NLP MODELS AND KNOWLEDGE GRAPH IMPLEMENTATION", "content": "The search system was built using:\nPre-trained NLP Models: BERT (Bidirectional Encoder Representations from Transformers) and GPT models for query processing.\nOntology-Based Knowledge Graphs: Constructed using Neo4j, integrating cloud resource relationships.\nIndexing and Semantic Matching: Latent Semantic Indexing (LSI) and TF-IDF were used for semantic query retrieval."}, {"title": "7.3 PERFORMANCE METRICS", "content": "The following key metrics were used to measure system performance:\nPrecision: Ratio of correctly retrieved cloud resources to the total retrieved.\nRecall/Relevance: Ratio of correctly retrieved cloud resources to the total relevant resources.\nF1-Score: The harmonic mean of precision and recall.\nQuery Execution Time: The average time taken for queries to be processed."}, {"title": "7.4 COMPARATIVE ANALYSIS WITH TRADITIONAL SEARCH", "content": "The proposed system was compared with traditional keyword-based search engines using a controlled test environment:"}, {"title": "7.5 CASE STUDY: SECURITY COMPLIANCE QUERIES", "content": "A real-world test scenario was executed to determine how effectively the system processes compliance- related cloud queries.\nQuery Example: List all PCI-compliant services handling financial transactions.\nTraditional search retrieved 6 results, of which only 3 were correct due to keyword-based ambiguity.\nOntology-Driven NLP search retrieved 9 correct results, achieving a 50% increase in precision.\nThis demonstrates the advantage of context-aware, ontology-based search systems in compliance verification."}, {"title": "7.6 OBSERVATIONS AND DISCUSSION", "content": "1. Improved Accuracy: Ontology-based NLP significantly reduces false positives in search results.\n2. Faster Query Processing: The semantic understanding eliminates redundant queries and enhances efficiency.\nThese findings confirm that integrating NLP with ontology-driven knowledge graphs significantly improves cloud resource discovery, enhances compliance verification, and reduces search complexity."}, {"title": "8. CONCLUSION", "content": "The proposed NLP-powered cloud resource search system presents a novel approach to improving search accuracy and usability. By leveraging semantic indexing and machine learning, users can query cloud resources more intuitively, reducing search time and enhancing operational efficiency. It also streamlines resource management, compliance checks, and security audits, potentially reducing operational costs."}, {"title": "9. FUTURE SCOPE", "content": "There is a huge potential in conducting an usability study with cloud engineers. A statistical test (T-test, since the test subjects were low) with hypothesis testing could be performed on data sets built as part of the User Study and Statistical Validation and check if the impact of NLP-Ontology based cloud query processing is statistically significant. The experimental setup employed was naive and straightforward with a motivation to just prove the concept. The cloud resources were actually simulated services and ran on a single host, but testing on a real world production cloud environment with real cloud resources could result in more realistic results which is explored in future work enhancements of this methodology."}]}