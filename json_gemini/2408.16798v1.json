{"title": "Generative Al in Ship Design", "authors": ["Sahil Thakur", "Navneet V Saxena", "Prof Sitikantha Roy"], "abstract": "The process of ship design is intricate, heavily influenced by the hull form\nwhich accounts for approximately 70% of the total cost. Traditional methods\nrely on human-driven iterative processes based on naval architecture\nprinciples and engineering analysis. In contrast, generative Al presents a novel\napproach, utilizing computational algorithms rooted in machine learning and\nartificial intelligence to optimize ship hull design. This report outlines the\nsystematic creation of a generative Al for this purpose, involving steps such as\ndataset collection, model architecture selection, training, and validation.\nUtilizing the \"SHIP-D\" dataset, consisting of 30,000 hull forms, the report\nadopts the Gaussian Mixture Model (GMM) as the generative model\narchitecture. GMMs offer a statistical framework to analyze data distribution,\ncrucial for generating innovative ship designs efficiently. Overall, this approach\nholds promise in revolutionizing ship design by exploring a broader design\nspace and integrating multidisciplinary optimization objectives effectively.", "sections": [{"title": "1. Introduction", "content": "Designing a ship is one of the most\ncomplex and time-consuming process.\nFrom laying down the keel to\ncommissioning, the designing and building\nof a destroyer approximately takes 7-8\nyears in India [19]. The most important step\nin designing a ship is determining the\nshape of the hull form [3]. Also, the shape\nof the hull has a direct impact of 70% on the\ncost of the ship [1]. The conventional\napproach for designing the hull of a ship\ninvolves several key steps like, defining\nrequirements\nwhich\ninvolves\nunderstanding the purpose and operational\nrequirements of the ship, including speed,\ncapacity, range, and environmental\nconditions. After which the designer\ndevelops rough sketches and basic layouts\nof the hull shape based on requirements\nand initial feasibility assessments [2].\nThen an initial hull form is generated\nbased on the established guidelines and\nempirical formulas. Hydrodynamic analysis\nis conducted to evaluate the performance\nthe of the hull design, which also involves\nassessing parameters such as resistance,\nseakeeping behavior and stability. Then this\nhull form is iteratively refined based on the\ninsights gained from this analysis. The\nconventional form of optimization approach\nrelies on human expertise, naval\narchitecture principles and engineering\nanalysis to modify and optimize the design\n[1]."}, {"title": "2. Overview", "content": "Artificial Intelligence (Al) refers to the\nsimulation of human intelligence processes\nby machines, especially computer systems.\nIt encompasses various approaches and\ntechniques aimed at enabling machines to\nperform tasks that typically require human\nintelligence, such as reasoning, problem-\nsolving,\nlearning,\nperception,\nunderstanding natural language, and more\n[14].\nGenerative Al is a specific subfield of\nartificial intelligence focused on creating or\ngenerating new content, often in the form of\nimages, text, music, or other types of\nmedia. Instead of simply analyzing and\nprocessing existing data, generative Al\nsystems are designed to generate novel\noutputs based on patterns learned from\nlarge datasets.\nOne of the key techniques used in\ngenerative Al is Generative Adversarial\nNetworks (GANs), where two neural\nnetworks, known as the generator and the\ndiscriminator, are trained simultaneously.\nThe generator generates synthetic data\nwhile the discriminator evaluates the\nauthenticity of that data. Through this\nadversarial process, the generator learns to\ncreate increasingly realistic outputs.\nGenerative Al has applications\nacross various domains, including:\nCreative\nContent\nGeneration:\nGenerative Al can create artwork, music\ncompositions, or even generate new\ndesigns for products.\nData Augmentation: It can be used to\ngenerate synthetic data for training\nmachine learning models, thereby\nexpanding the available dataset, and\nimproving model performance."}, {"title": "3. Steps in creating Gen Al", "content": "After clearly defining the objectives and\nscope of the generative Al, the following\nsteps are followed to create a Gen Al [13]:\nData Collection: To train the generative\nmodel, relevant datasets are gathered.\nThese datasets should be sufficiently\ndiverse and large to capture the\nvariability in the data.\nData Preprocessing: The collected data\nis cleaned and preprocessed to remove\nduplicate entries, handle missing values,\nstandardize\nformat,\nand ensure\nconsistency.\nChoosing\na Generative\nModel\nArchitecture: The architecture defines\nthe structure of the model. This means\nthat it impacts the way the Al model\nanalyses the training data and how it\nuses this data to create new content.\nModel Training: The selected generative\nmodel is trained using pre-processed\ndata. This also involves optimizing the\nmodel parameters to minimize the loss\nfunction. The loss function measures the\ndifference between the generated\noutputs and the realistic data.\nModel Optimization: This is also known\nas\nHyperparameter\nTuning.\nHyperparameter tuning is like adjusting\nthe settings of a Machine Learning\nmodel to make it work better. These\nsettings are called hyperparameters\nwhich are like dials controlling how the\nmodel learns from the dataset. By fine-\ntuning hyperparameters such as the\nlearning rate, batch size etc., the model's\nperformance can be optimized and the\nrate at which it learns from the dataset.\nEvaluation: Evaluate and validate the\ngenerated output by comparing it with\nrealistic data and domain knowledge."}, {"title": "4. Dataset", "content": "For understanding and generating a novel\nhull form design using generative Al, the\ndataset used for training the generative\nmodel was taken from the work published by\nNoah J. Bagazinski and Faez Ahmed, in their\npaper \"SHIP-D: Ship Hull Dataset for Design\nOptimization Using Machine Learning.\u201d [1]\nThirty thousand hull forms with design and\nfunctional performance data, including\nmesh, parameterization, and point-cloud,\nmake up the content of the dataset [1]. Each\nhull form is defined by 45 parameters. This\ndataset was chosen as it consists of design\nrepresentation which is comprehensive\nenough to cover all the features of traditional\nhull forms. Previously, dimensionality\nanalysis performed on different parent hull\nforms, undertaken by Wang et al. and Kahn\net al, gave the results that 32 and 27\nparameters can construct a reasonably\ncomplex surface feature of hulls. For getting\na diverse spread of hull forms, the dataset\nchosen consist of hull forms defined by 45\nparameters.\nThe 45 parameters are as defined below:\nPrincipal dimensions of the hull are\ndefined by seven terms which are length,\nbeam, depth, draft, and tapers at the ends\nof the hull.\nThe cross section of the hull in the parallel\nmidbody is defined by four terms. These\nparameters can produce cross sections of\nthe flare, tumblehome, bilges, chines, and\nS-chines that are visible on classic hulls.\nThe tapered regions at the bow and stern\nof the hull are defined by a total of twenty\nterms. These parametric terms define\nfeatures such as drift angle, keel rise,\ntransom cross section, rake, and the\ntransition from the taper to the parallel\nmiddle body.\nThe bow and stern bulb geometries are\ndefined by fourteen terms, including terms\nthat define the size, vertical asymmetry,\nand the fillet transition of the bulb into the\nhull.\nThe hull forms defined by the parameters\nin the dataset were randomly generated and\nconsists of three distinct subsets of hulls [1].\nIf the randomly generated parameters\nresulted in a feasible hull shape, then only it\nwas included in the dataset. This way of\ngenerating hull forms was repeated until\neach subset comprised ten thousand hulls,\nmaking a total of thirty thousand hulls in the\ndataset."}, {"title": "5. Clustering", "content": "K-means clustering is a popular method\nfor clustering unlabeled datasets. K-means\nis an iterative algorithm that divides a\ndataset into K number of distinct and non-\noverlapping clusters. First, it is necessary to\nspecify the number of clusters that will be\ncreated [16].\nThe elbow method and silhouette method\nare two commonly used techniques for\ndetermining the optimal number of clusters\nin an unlabeled dataset. The elbow method\ninvolves plotting the within-cluster sum of\nsquares (WCSS) against the number of\nclusters and identifying the \"elbow\" point\nwhere the rate of decrease in WCSS slows\ndown significantly. This point can be taken\nas the optimal number of clusters that are\npresent in the dataset, as adding more\nclusters beyond this point will not\nsignificantly reduce the WCSS distance.\nThe silhouette method measures how\nsimilar a data point is to its own cluster when\ncompared to other clusters. It computes the\nsilhouette coefficient for each data point and\naverages it across all data points for different\nnumbers of clusters. A higher silhouette\nscore suggests better-defined clusters. By\ncomparing silhouette scores across different\nnumbers of clusters, the optimal number of\nclusters can be identified where the\nsilhouette score is highest. Both methods\nprovide valuable insights into the\nappropriate number of clusters, allowing for\nmore informed decision-making in clustering\nanalysis.\nThen,\nrandomly initialize K cluster\ncentroids (points representing the center of\neach cluster) in the feature space. Each data\npoint is then assigned to the nearest\ncentroid based on some distance metric,\ntypically Euclidean distance. This step\ncreates clusters where data points are\nclosest to the centroid of their respective\ncluster.\nAfter all data points have been assigned\nto clusters, the centroids are updated by\ncalculating the mean of all data points\nassigned to each cluster. The centroids are\nrecalculated based on the current\nassignment of data points. The above steps\nare repeated iteratively until convergence is\nreached. It can be said that convergence\noccurs when the centroids are no longer\nchanging significantly between iterations or\nelse when a specified number of iterations is\nreached. The result is a set of K clusters,\nwhere each data point belongs to the cluster\nwhose centroid it is closest to.\nK-means is computationally efficient and\nworks well with large datasets, making it\nwidely used in various applications such as\ncustomer\nsegmentation,\nimage\ncompression, and document clustering.\nHowever, it requires the number of clusters,\nK, to be specified beforehand, and it\nassumes clusters are spherical and of\nsimilar size, which may not always be the\ncase in real-world data.\nA python code was written to apply K-\nmeans algorithm to the dataset. The result\nof which indicated 06 optimal number of\nclusters in the dataset."}, {"title": "t-SNE", "content": "It is a dimensionality reduction technique\ncommonly used for visualizing high-\ndimensional data, particularly in scenarios\nwhere datasets are represented by a large\nnumber of parameters [17]. Unlike traditional\ntechniques such as PCA (Principal\nComponent Analysis), t-SNE preserves\nlocal similarities in the data, making it well-\nsuited for capturing complex structures and\npatterns in high-dimensional datasets.\nBy transforming high-dimensional data\ninto a lower-dimensional space while\npreserving local relationships, t-SNE\nenables the visualization of large datasets in\ntwo or three dimensions, making it easier to\ninterpret and analyze.\nThis makes t-SNE particularly useful for\nexploring and understanding complex\ndatasets with a large number of parameters,\nsuch as those encountered in fields like\ngenomics, image processing, and natural\nlanguage processing. However, it is\nimportant to note that t-SNE is\ncomputationally intensive and may not\nalways preserve global structures, SO\ninterpretation should be done cautiously,\nespecially with large datasets [17].\nt-SNE algorithm was applied on the\ndataset using a python code, and a plot was\ngenerated by reducing the 45 parameters\nwhich defines each hull form, to a dimension\nof two features only."}, {"title": "6. Model Architecture", "content": "A generative model is designed to\nunderstand the hidden and associated\npatterns in the dataset and reproduce the\nfeatures or characteristics of the data. An\nexample of this would be training the\ngenerative model with pictures of cats. The\nmodel's task is not just to identify that\nwhether the image projected is that of a cat\nor not, but rather to learn the features that\nmakes up that image of cat. Example of\nfeatures in this case would be their shape,\ncolours, patterns and textures. After\nunderstanding the features, it is able to\ngenerate new images of cats that looks\nrealistic but is not a replica of any images\nthat the generative model has been trained\non from the training dataset.\nGenerative architecture stands as a\npioneering force within contemporary\ndesign,\nleveraging\ncutting-edge\ntechnologies to revolutionize the process of\ndesign conception and implementation.\nWithin its arsenal of methodologies lie\ndiverse tools such as Cellular Automata,\nwhich adeptly generate intricate designs\nthrough fundamental rules, and Shape\nGrammar, a framework governed by\nstringent principles to delineate architectural\nforms [4]. Additionally, Genetic Algorithms\ndraw inspiration from natural processes to\nascertain optimal solutions for intricate\ndesign challenges, while Artificial Neural\nNetworks emulate cognitive functions,\nseamlessly navigating through vast datasets\n[5]. Furthermore, methodologies like Finite\nElement Analysis and Topology Optimization\ncontribute to the enhancement of structural\nintegrity and efficiency. Collectively, these\ntools facilitate the exploration of conceptual\nrealms, automate routine tasks, and amplify\ncreative endeavors within the realm of\narchitecture [6]. The generative model\narchitecture employed in this study is the\nGaussian Mixture Model (GMM)."}, {"title": "A Gaussian Mixture Model (GMM) is a", "content": "mathematical tool used to sort data into\ndifferent groups, based on their way of\ndistribution. It is like organizing different\ntypes of items into separate bins. This model\nis handy because it can figure out these\ngroups without needing to know anything\nabout them beforehand. GMMs are used in\nlots of areas, like analyzing pictures,\ntracking objects, and pulling important\nfeatures out of speech. The model works on\nthe idea that the data comes from a mix of\ndifferent patterns [7].\nThe Gaussian Mixture Model (GMM)\nserves as a statistical framework to explain\nthe distribution of data, by creating a fusion\nof numerous Gaussian distributions, each\ndefined by distinct mean and variance\nparameters. Its application holds particular\nsignificance in machine learning contexts\nwhere intricate and multi-dimensional\ndatasets are prevalent [7]. The key concepts\nassociated with GMMs are:\nGaussian Distribution: GMM assumes\nthat the data points within each cluster\nare generated from a Gaussian (normal)\ndistribution. A Gaussian distribution is\ncharacterized by its mean (\u00b5) and\ncovariance (\u03a3).\nMixture Model: GMM represents the\noverall distribution of the data as a\nmixture of multiple Gaussian\ndistributions, each associated with a\ndifferent cluster. The model calculates the\nprobability of a data point belonging to\neach cluster.\nCluster Parameters: For each cluster in\nthe mixture, GMM estimates parameters\nincluding the mean (\u00b5) and covariance (\u03a3)\nof the Gaussian distribution. These\nparameters are optimized during the\ntraining process to best fit the observed\ndata.\nCluster Assignment: GMM assigns each\ndata point to one of the clusters\nprobabilistically based on the likelihood of\nthe data point belonging to each cluster.\nThis is computed using Bayes' theorem.\nExpectation-Maximization\n(EM)\nAlgorithm: GMMs are typically trained\nusing the EM algorithm. In the E-step, the\nalgorithm estimates the probabilities of\ncluster assignments given the data and\nthe current parameters. In the M-step, it\nupdates the parameters (means and\ncovariances) based on these\nassignments.\nInitialization: GMM training often requires\nan initial guess for the parameters.\nCommon initialization methods include\nrandom initialization and K-means\nclustering.\nNumber of Clusters (K): The number of\nclusters in a GMM needs to be specified\nin advance. Determining the optimal\nnumber of clusters often involves"}, {"title": "7. Generating Novel Hull Design", "content": "techniques such as the elbow method or\ncross-validation.\nLikelihood Maximization: GMM training\naims to maximize the likelihood of\nobserving the data given the model\nparameters. This is typically achieved\nthrough iterative optimization techniques\nlike gradient ascent.\nSoft Clustering: Unlike hard clustering\nalgorithms (such as K-means), which\nassign each data point to a single cluster,\nGMM provides soft assignments where\ndata points can belong to multiple clusters\nwith varying probabilities.\nA novel design with regards to Gaussian\nMixture Models (GMM) typically refers to the\ncreation of new data points that closely\nresemble the distribution of the original\ndataset but are not exact replicas of any\nexisting data points.\nGenerating novel designs involves\nsampling from the learned GMM to produce\nnew\ndata points that exhibit similar\ncharacteristics to the original dataset but\nintroduce variations or combinations not\nexplicitly present in the training data. A\npython code was written so that the GMM is\ntrained on this pre-processed dataset,\nlearning the underlying patterns and\nstructures inherent in the data. Post-training,\nthe model can generate new designs by\nsampling from the learned probability\ndistribution, resulting in creations that exhibit\nsimilarities to the training data but feature\nnovel combinations and variations. To\nensure that the model generated is novel,\nanother code was written to check its\nuniqueness by comparing it with the hull\nforms on which the generative model was\ntrained.\nAnother important aspect to new\ngenerated hull form is to check whether it is\na feasible design or not. To meet the\nrequirements of a \"feasible\" hull shape, the\nsurface of the hull must adhere to two\nconditions:\nThe hull must be watertight, ensuring\nthere are no openings or gaps in its\nsurface.\nThe hull surface must avoid self-\nintersection, meaning it does not intersect\nwith itself.\nAs the hull surface is described by\nequations incorporating constants\ninfluenced by parameter values, assessing\nwhether a hull surface meets the primary\nfeasibility criteria can be achieved through\nalgebraic solutions. The benefit of solving\nthese conditions algebraically lies in the\nsubstantial reduction of computational\nresources required compared to feasibility\nchecks involving mesh generation [1]. Since\nthe dataset already consists of hull forms on\nwhich this feasibility check is already done,\nthere is no need to check the feasibility\ncriteria on the new generated hull form."}, {"title": "8. Resistance Calculation", "content": "Extracting novel designs after training a\nGaussian Mixture Model (GMM) and\ndetermining the optimal number of\ncomponents can be achieved through\nseveral methods:\nSampling: Randomly drawing samples\nfrom the learned GMM according to their\nrespective weights. This process\ngenerates new designs based on the\ndistribution learned from the dataset.\nPrototype Generation: Identifying the\nmeans\nof Gaussian components\nrepresenting unique or interesting\ndesigns. These means act as prototypes\nfor different design clusters, allowing for\nthe extraction of novel designs through\nmodification or combination of these\nprototypes.\nInterpolation: Employing interpolation\ntechniques within the latent space of the\nGMM to generate designs that lie\nbetween existing designs. This involves\ntraversing along the axes defined by the\nmeans of the Gaussian components to\nproduce intermediate designs.\nOutlier Detection: Identifying data points\nwith low likelihood under the GMM\ndistribution. These data points may\nrepresent novel or outlier designs that\ndeviate significantly from the dataset's\ntypical patterns.\nIn this project, the generation of novel\ndesign relied on the method of random\nsampling. By leveraging this approach, new\nand innovative designs were created by\nrandomly drawing samples from the learned\nGaussian Mixture Model (GMM), ensuring\ndiversity and exploration within the design\nspace. This process facilitated the\nexploration of unconventional design\nconfigurations, fostering creativity and\nenabling the discovery of unique solutions\nthat may not have been evident through\ntraditional design methods.\nThe new generated novel hull form can be\noptimized to get a better design. For this\nproject only resistance of the hull form was\noptimized and other form of optimizations\ncan also be incorporated in future works. To\ncalculate the resistance of the hull form,\nMichell Integral was chosen as the linear\nwave solver.\nThe Michell Integral, functioning as a\nlinear wave solver, has become an\ninvaluable asset in calculating hull form\nresistance, especially when compared to\nconventional methods\nsuch\nas\nComputational Fluid Dynamics (CFD) and\nFinite Element Method (FEM) analysis. Its\nadoption is primarily fueled by several\nnotable advantages [9]. Firstly, the Michell\nIntegral approach provides a streamlined\nmathematical framework for wave\nresistance analysis, offering computational\nefficiency in contrast to the intricate\nnumerical simulations of CFD and FEM.\nThis simplicity translates into reduced\ndemands on computational resources and\ntime, facilitating quicker analyses. Moreover,\nthe method's alignment with linear wave\ntheory, which assumes small-amplitude\nwaves and linearized flow conditions,\nrenders it particularly suitable for practical\nscenarios, notably in the initial design\nphases where swift assessments of hull\nperformance are crucial [11].\nAdditionally, its computational efficiency\nenables seamless parametric studies,\nenabling rapid evaluation of various design\nparameters' impacts on wave resistance\nand efficient hull form optimization.\nFurthermore, the Michell Integral method's"}, {"title": "9. Generating New Dataset", "content": "analytical nature fosters transparency in\ncomprehending the underlying physical\nprinciples of wave resistance calculations,\nenhancing result interpretation, and offering\ninsights into hull form hydrodynamics.\nDespite the high-fidelity results that CFD\nand FEM analyses may offer for complex\nflow phenomena, the Michell Integral\nmethod remains highly reliable for numerous\npractical cases, particularly when dealing\nwith conventional hull forms and moderate\nwave conditions.\nThe Michell Integral is a method used to\nanalyze the wave resistance of a ship's hull.\nIt was developed by John Henry Michell, an\nAustralian mathematician, in the late 19th\ncentury [11]. The principle behind the Michell\nIntegral is rooted in potential flow theory,\nwhich models fluid flow around an object\nwithout considering viscosity.\nThe Michell Integral works by making\nseveral fundamental assumptions about the\nfluid flow around a ship's hull and then\nintegrating the pressure distribution along\nthe wetted surface of the hull to determine\nwave resistance. Initially, it assumes that the\nfluid flow can be approximated by potential\nflow theory, where the fluid is considered\ninviscid (no viscosity) and irrotational (no\nvortices). As a ship moves through water, it\ngenerates waves at its bow and stern due to\npressure differences between the forward\nand aft ends, resulting in wave resistance\nopposing the ship's motion. The Michell\nIntegral integrates the pressure distribution\nalong the wetted surface, representing the\nportion of the hull in contact with water, to\ncalculate wave-making resistance [10]. This\nmathematical formulation provides with a\ntool to estimate wave resistance during the\nship design process.\nFor calculating resistance of the hull form\nusing Michell Integral [18], a python code\nwas written taking reference from the codes\ngiven by Noah J. Bagazinski and Faez\nAhmed [1] in their technical paper.\nFor calculating the resistance, the value\nchosen for speed was 10 knots and the draft\nwas given as 5 meters. The total resistance\nof the hull form was calculated as the sum of\nwave drag and skin friction drag: $R_t = R_w + R_f$\nThe wave drag ($R_w$) was calculated using\nthe Michell Integral. The formula used is:\n$C_w=\\frac{R_w}{\\frac{1}{2} \\rho U^2LOA^2}$\nThe skin friction drag ($R_f$) was calculated\nusing the formula given by ITTC [12]:\n$C_f = \\frac{0.075}{(Log_{10}(Re) -2)^2}$\nThe desired value for resistance was\nchanged in the code to modify the hull form\naccordingly. To achieve this, the code was\nrun in a loop till the desired value of\nresistance was gained.\nThe main aim of the Michell Integral code\nis to predict the wave drag from a ship\nprogressing at a steady speed, neglecting\nthe effects of viscosity. The first step is to\ngenerate the point grid and the inputs which\nare given for predicting the wave drag\ncoefficient [18].\nPoint grid is generated for accurately\nrepresenting the geometry of the hull form in\nthe computational model. The Z and X\nvectors are used for defining the spatial\ncoordinates of the grid points used in solver.\nThe X vector represents the longitudinal\npositions along the hull, ranging from 0\n(start) to the length overall (LOA) of the\nsubmerged hull. The Z vector represents the\nvertical positions below the waterline,\nranging from the negative draft (deepest\npoint) to 0 (water surface).\nThe Y grid represents the offsets of the\nship hull at each grid point. These offsets\ndefine the shape of the hull in two\ndimensions, perpendicular to\nthe\nlongitudinal and vertical axes. By\ndiscretizing the hull shape into a grid of\npoints, the solver can approximate the hull\ngeometry and compute wave drag more\nefficiently. The Y grid is essential for applying\nMichell Thin Ship Theory, which relies on the\nhull shape to predict wave drag accurately.\nThe waterline length (WL) is a\nfundamental parameter for ship\nhydrodynamics, representing the length of\nthe hull in contact with the water at a given\ndraft. It is crucial for accurately estimating\nthe flow patterns around the ship hull and\npredicting wave drag.\nThe inputs to the Michell Integral code are\nX, Y, Z vectors which is taken from the point\ngrid. The code calculates the value of wave\ndrag coefficients for combination of eight\nspeeds and four drafts. Thus, an array of 32\nwave drag coefficients is obtained. The\nspeed and draft are taken as input and fed\ninto the code, at which it is desired to\ncalculate the wave drag resistance. Another\nfunction is defined that takes in these\nspeeds and drafts to interpolate between\nthese to estimate the wave drag coefficient.\nThe 'CalcDrag' function takes various\nparameters related to the ship's geometry,\nspeed, and environmental conditions to\nestimate the total drag force. The function\nreturns a tuple containing the calculated\ntotal drag force and the Froude number (Fn).\nThe total drag force includes contributions\nfrom both wave drag and skin friction drag.\nThe function begins by calculating the\nskin friction coefficient (Cf) using the\nCalc_Cf function, which estimates the\nviscous drag based on the ship's speed and\nwaterline length. Next, it computes the skin\nfriction drag (Rf) using the formula for drag\nforce, considering the skin friction\ncoefficient, water density, wetted surface\narea, and ship speed. It calculates the\nFroude number (Fn), which is a\ndimensionless parameter representing the\nratio of inertial forces to gravitational forces\nand is crucial for hydrodynamic analysis.\nThe function then interpolates the wave drag\ncoefficient (Cw) based on the Froude\nnumber (Fn) and draft fraction (T) using the\ninterp_CW function. Using the interpolated\nwave drag coefficient, it computes the wave\ndrag force (Rw) considering water density,\nship length overall squared, and ship speed\nsquared. Finally, the function returns the\nsum of wave drag and skin friction drag as\nthe total drag force experienced by the ship.\nMultiple random samples were generated\nafter applying GMM to the training dataset.\nResistance of each these hull forms were\ncalculated using code written in Michell\nIntegral. The total resistance was calculated\nas the summation of the wave drag\nresistance and skin friction resistance. The\nwave drag resistance was calculated using\nthe Michell Integral and skin friction\nresistance was calculated using the formula\ngiven by ITTC. For calculating the wave drag\nresistance, the speed of the hull form\nmoving through the inviscid fluid was taken\nas 10 knots and the draft was taken as 5 m."}, {"title": "Conclusion", "content": "After calculating the total resistance of\neach hull form of the generated dataset, hull\nforms with resistance less than 5000 N were\ngrouped and saved in a different CSV file. A\ntotal of 150 hull forms were generated. The\ngeometry of each hull form in this CSV file is\nrepresented by 45 parameters. The\nadvantage of creating such a generative\nmodel is that a new dataset of hull forms can\nbe generated as per the constraints given by\nthe user, and then accordingly select the\nmost feasible hull form as per the given\nrequirements.\nFor visualizing this generated dataset,\nagain t-SNE was used. From the figure\ngiven below, it was observed that the\ngenerated dataset is within the distribution of\nthe training dataset.\nThis\nproject report outlines\na\ncomprehensive approach to designing and\noptimizing ship hull forms using generative\nAl techniques and traditional hydrodynamic\nanalysis methods. The conventional\napproach to ship design involves a time-\nconsuming process that heavily relies on\nhuman expertise and iterative refinement.\nHowever, the emergence of generative Al\noffers a paradigm shift by leveraging\ncomputational algorithms to explore a\nbroader design space, generate novel hull\nforms, and automate the optimization\nprocess.\nBy utilizing a dataset comprising 30,000\nhull forms and training a Gaussian Mixture\nModel (GMM) on this data, the generative Al\ncan learn underlying patterns and\nrelationships within the dataset, enabling the\ngeneration of novel and unconventional hull\ndesigns. This approach significantly reduces\nthe time and effort required for design\noptimization compared to\nmethods, offering a\noptimization framework that integrates\nvarious design objectives and constraints\nacross disciplines like hydrodynamics,\nstructures, and stability.\ntraditional\nmultidisciplinary\nMoreover, the report highlights the use of\nthe Michell Integral as a linear wave solver\nto calculate hull resistance, emphasizing its\nadvantages over conventional methods like\nComputational Fluid Dynamics (CFD) and\nFinite Element Method (FEM) analysis. The\nMichell Integral provides a streamlined\nmathematical framework for wave\nresistance analysis, offering computational\nefficiency, applicability to linear wave theory,\nsuitability for parametric studies,\ntransparency, and reliability for practical\ncases.\nOverall, the integration of generative Al\ntechniques and traditional hydrodynamic\nanalysis methods presents a promising\napproach to ship hull design and\noptimization. By harnessing the power of\ncomputational algorithms and machine\nlearning, naval architects and marine\nengineers can accelerate the\ndesign\nprocess, explore innovative design\nsolutions, and enhance the efficiency and\nperformance of ship hulls. This project report\nlays the foundation for future advancements\nin ship design methodologies, paving the\nway for more sustainable, efficient, and\ntechnologically advanced vessels."}]}