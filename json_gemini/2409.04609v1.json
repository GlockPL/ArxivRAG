{"title": "Detection of False Data Injection Attacks (FDIA) on Power Dynamical Systems With a State Prediction Method", "authors": ["Abhijeet Sahu", "Truc Nguyen", "Kejun Chen", "Xiangyu Zhang", "Malik Hassanaly"], "abstract": "With the deeper penetration of inverter-based resources in power systems, false data injection attacks (FDIA) are a growing cyber-security concern. They have the potential to disrupt the system's stability like frequency stability, thereby leading to catastrophic failures. Therefore, an FDIA detection method would be valuable to protect power systems. FDIAs typically induce a discrepancy between the desired and the effective behavior of the power system dynamics. A suitable detection method can leverage power dynamics predictions to identify whether such a discrepancy was induced by an FDIA. This work investigates the efficacy of temporal and spatio-temporal state prediction models, such as Long Short-Term Memory (LSTM) and a combination of Graph Neural Networks (GNN) with LSTM, for predicting frequency dynamics in the absence of an FDIA but with noisy measurements, and thereby identify FDIA events. For demonstration purposes, the IEEE 39 New England Kron-reduced model simulated with a swing equation is considered. It is shown that the proposed state prediction models can be used as a building block for developing an effective FDIA detection method that can maintain high detection accuracy across various attack and deployment settings. It is also shown how the FDIA detection should be deployed to limit its exposure to detection inaccuracies and mitigate its computational burden.", "sections": [{"title": "I. INTRODUCTION", "content": "Electric grid failures can often be linked to frequency deregulation, particularly in instances where there is a lack of coordination among different operators, or when cyber intrusions lead to an imbalance between supply and demand. For instance, during the Western Systems Coordinating Council (WSCC) event on February 7, 1996, a combination of events, including generation tripping and an inadequate response to extreme weather events led to a major blackout affecting the western United States and parts of Canada [1]. Similarly, the Northeast Blackout of 1965 was triggered by a relay misoperation in Ontario, Canada, which caused a cascading failure that eventually led to the collapse of the entire interconnected grid. While not a deliberate attack, it highlighted vulnerabilities in the power system's resilience, i.e. its ability to handle disturbances and recover from failures [2]. Physical failures can be exacerbated by cyberattacks, including false data injection attacks (FDIAs). FDIAs are a particular type of attack that aims to cause disruptions in the operation of the power grid by affecting the feedback mechanism that controls the grid. This is typically carried out by modifying the measurements used by the mechanism that approximates the state of the grid [3]. These attacks are not only confined to the sensor measurements but can also manipulate the controller parameters and input signals [4]. A recent example of FDIA is the Ukraine Power Grid Failure [5] where attackers used malware to remotely access and manipulate control systems [6], causing substations to trip and disrupting power supply for hundreds of thousands of customers.\nGiven how critical FDIAs can be, it is essential to equip power systems with reliable FDIA detection solutions. Attack and defense solutions against a steady-state power systems model have been extensively studied in the past such as [7], [8] in the context of steady-state estimation. To the authors' knowledge, similar investigations about the efficacy of state prediction methods to capture FDIAS have not been carried out in the context of dynamic power system models.\nThe importance of modeling the dynamics of power"}, {"title": null, "content": "system can be understood from two angles. First, to remain stealthy, an attacker could attempt to adopt a time-dependent attacking strategy. Understanding the physical effect and the stealthiness of this approach requires modeling the power system dynamics. Second, prior work has shown that a carefully crafted time-dependent FDIA strategy could also induce frequency dynamics instabilities of higher magnitude than steady FDIAs [9].\nPower system dynamics deals with the transient and dynamic behavior of the equipment such as the stabilizers systems and the machine models of the generators running in the power system. There, changes or disturbances in the operating conditions are reflected through fluctuations in the state variables such as rotor speed and angle that are not captured in steady-state systems. In turn, the effect of an FDIA can be more complex in a dynamical system than in a steady-state system. Hence, the objective of this work is to propose a detection method for FDIA, targeting power dynamical systems.\nTraditionally, FDIA detection methods use state-prediction methods to identify whether an unplanned disturbance took place, such as an FDIA [10]. The state predicted is the system's state to be expected under nominal operating conditions. If the actual observations deviate from the predicted state, an unplanned event such as an FDIA likely occurred. This approach is advantageous in that any anomaly can theoretically be detected, irrespective of its nature [11]. In practice, detecting an anomaly requires carefully calibrating the magnitude of state discrepancies that can be tolerated [3]. Furthermore, to ensure that the detection task is computationally efficient, a data-based approach [12] rather than a physics-based approach [13] may be adopted. A data-based approach is especially beneficial when complex state dynamics need to be predicted, as is the case here. However, in the presence of an unplanned disturbance, the input of the data-based state predictor can be expected to fall outside of its training data distribution, thereby posing the question of their applicability after all.\nExisting FDIA detection methods only determine whether the current state is under attack, which implies that the detection must be deployed at every single timestep. Although such a deployment is appropriate in a steady-state estimation, where the interval between timesteps are in the order of a few seconds or minutes, it is not efficient in dynamical systems where the interval is smaller (on the order of 10-3s [14]). Therefore, an appropriate FDIA detection method must also be computationally efficient in the case of dynamical systems.\nIn this work, several data-based state-prediction approaches are used to detect FDIA detection. The detection accuracy of these approaches under several FDIA types is evaluated and discussed. The novel contributions of this work are as follows:"}, {"title": null, "content": "1) A long-short term memory (LSTM) and a combined Graph Neural Network (GNN)-LSTM state predictor are demonstrated for the power dynamical system.\n2) The effect of observation noise, dataset size, network architectures, and training sample size used on the state prediction performances are evaluated.\n3) The FDIA detection accuracy using the state-predictors is evaluated for different FDIA schedules.\n4) Recommendations for the use of data-based state predictors in detecting FDIAs are formulated\nIn the rest of the paper, prior work on state-prediction methods for FDIA detection is reviewed in Sec. II. The specific problem targeted is described in Sec. III. Section IV describes the state-prediction methods and discusses their accuracy. The state-prediction methods are deployed to detect FDIA injection attacks in Sec. V and the efficacy of the approach is discussed in Sec. V-D."}, {"title": "II. PRIOR WORKS/ BACKGROUND", "content": "State estimation tasks for dynamic power systems are traditionally performed using a Kalman filtering approach [15], [16]. In Ref. [15], an iterated extended Kalman Filter (KF) based on the generalized maximum likelihood approach for estimating power system state dynamics is proposed, where the system considered can be subject to disturbances such as voltage collapse or line faults. A key deficiency noted is that the approach may be inappropriate under strong non-linearities of the system dynamics. Non-linearities can be better handled with Unscented Kalman Filters (UKF) [17]. However, UKFs are notoriously sensitive to the number of sigma points needed to perform the unscented transform [18], which can be problematic as the system dimensionality increases. In [16], a UKF approach that addresses numerical stability issues of UKF is proposed and demonstrated on a WSCC 3 machine and an NPCC 48 machine model. However, the approach is noise sensitive i.e. if the noise covariances are poorly estimated or if the noise change over time, the UKF is found to be unstable.\nDespite significant advances in the design of KFs, a key limitation remains about their computational cost for high-dimensional problems [19], and their robustness to non-Gaussian noise [20]. Another challenge with the use of KF is the need to for accurate approximation of the system dynamics [21]. By comparison, data-based approaches are more scalable with respect to the problem size and do not involve as many assumptions and system approximations [22].\nUnlike the Kalman filtering approach for state prediction, the model-free data-driven approach relies on historical data to make predictions. For instance, a data-driven power system state estimation is presented in [23] and such approaches are not only considered for future"}, {"title": "III. PROBLEM STATEMENT", "content": "The problem of interest is in ensuring the stability of frequency dynamics via a primary frequency controller. Frequency dynamics is an important concern when integrating distributed energy resources (DER) which are often inverter-based and are characterized by a lower inertia [31]. The physical problem is modeled using the swing equation [32], here formulated as:\n$\\theta_i = w_i$, (1a)\n$M_i \\dot{w_i} = P_i - P_{e,i} - D_i w_i - p^G_i$ (1b)\nwhere, $i \\in \\mathbb{N} = \\{1, ..., N\\}$ is the bus index, $\\theta_i$ and $w_i$ are the voltage phase angle and frequency deviation of bus $i$ respectively, and are the state variables of the swing equation. $M_i$ and $D_i$ are the inertia and damping coefficients. The net power injection at bus i is denoted by $p_i$. $p_i^G$ represents the power output from the generator on bus i. To maintain the system's frequency stability, the fast-responding Inverter-based Resources (IBR) on all $i$ buses participate in the system's primary frequency control following their designed droop rule, i.e., $p_i^G = k_i w_i$, where $k_i$ is the droop controller coefficient of the generator at bus i.\nIn this work, the goal is to first predict the future state of the state variables $\\theta_i^{t+1}$ and $w_i^{t+1}$, given an observation window length, $N_p$ of prior observations $\\{ \\theta_i^{t- N_p}, ..., \\theta_i^t \\}$ and $\\{ w_i^{t- N_p}, ..., w_i^t\\}$. In practice, $N_p > 0$ because of possible noise in the data acquired by phasor measurement units (PMU) [33]. Then by using the error between the actual measurements and the predicted state values, one would detect whether an FDIA occurred. The hypothesis behind the state prediction approach for FDIA detection is: State predicted based on an un-perturbed or an un-attacked system will deviate from the actual state on an attacked system. The FDIA considered in this work is one that affects the droop control coefficient $k_i$ to perturb the system dynamics. The system considered throughout this work is the Kron-reduced IEEE New England Transmission System with $N_b = 10$ buses on which both traditional synchronous machines and IBRs exist. The physics model is implemented using the available implementation of Ref. [34].\nIn Sec. IV, the state prediction approaches adopted and evaluated are further described. The trained state-prediction models paired with a classifier are then leveraged to detect FDIAs. The type of FDIAs considered, as well as the construction of the classifier are described in Sec. V. The overall pseudo code for the approach adopted for prediction followed by detection is shown in Algorithm 1."}, {"title": "IV. STATE PREDICTION FOR POWER SYSTEM DYNAMICS", "content": "In this section, the objective is to provide guidance in the design of state prediction approaches for power system dynamics. Two state prediction approaches are discussed and evaluated with different network architectures and under varying noise levels."}, {"title": "A. LSTM", "content": "Long Short-Term Memory (LSTM) networks are a type of recurrent neural network (RNN) architecture designed to address the vanishing gradient problem in traditional RNNs [35]. The gated architecture of LSTMs (comprising the input, forget, and output gate) regulates the flow of information within the network, enabling it to selectively remember or forget information from previous timesteps based on the current input. In turn, this helps LSTMs retain information over longer time intervals than RNNs. In the present case, a long-term memory is necessary to combat possible noise in the observed system state variables.\nHere, an LSTM autoencoder [36] is used instead of plain LSTM. LSTM autoencoders can effectively learn compact representations of input sequences by compressing them into a lower-dimensional space that captures the most important features. LSTM autoencoders were observed to lead to better performance in tasks such as sequence generation [37], anomaly detection [38], and denoising [39], which are all essential here.\nThe present implementation consists of encoder and decoder layers. The input dimension to the encoder is $Z\\in \\mathbb{R}^{N_pXN_f}$, where $N_p$ is the number of past sequence and $N_f$ is the number of features. The features are the state variables $\\theta$ and $w$ of the ten generator buses in the IEEE 39 New England Kron-reduced model. The number of LSTM units for the encoder layer is defined through $L_u$. The output from the encoder is fed into a decoder LSTM layer with the same number of LSTM units, $L_u$. The output is further passed through a dense layer of units $N_f$ and a TimeDistributed layer, which is a wrapper to apply a layer to every temporal slice of an input. Further, the model is compiled through the Adam optimizer [40] and a mean square error loss function is used. The dataset uses a 70-30 training/validation split and the model is trained for $N_e$ epochs. A tanh activation and a sigmoid recurrent activation are used in the respective encoder and decoder LSTM layers. The LSTM auto-encoder architecture is shown in Fig. 2. Here, $N_f = 20$ since there are 10 buses in the reduced model and each bus has two state variables $w$ and $\\theta$. Throughout all the experiments, $N_p = 5$."}, {"title": "B. GNN-LSTM", "content": "Unlike LSTMs, Graph Neural Networks (GNN) are neural networks designed to work with data structured as a graph [41]. GNNs leverage the graph structure of the problem to encode the necessary inductive bias. They allow performing tasks such as node classification [42], link prediction [43], graph classification [44], and graph generation [45]. Given the nature of the present problem, it is natural to consider combining the benefits of a GNN with the benefits of an LSTM for state prediction. The implementation adopted here is based on [46], originally applied to traffic forecasting.\nThe physical system considered here is modeled with a connected, undirected, weighted graph $G = (\\nu, \\varepsilon, W)$ that consists of a finite set of vertices $V$ with $|V| = N_b$, where $N_b$ is the number of buses, a finite set of edges $\\mathcal{E}$ and a weighted adjacency matrix $W \\in \\mathbb{R}^{N_b \\times N_b}$. If the buses $i$ and $j$ are connected, the corresponding weight of the edge $e = (i,j)$ connecting vertices $i$ and $j$ is assigned to $W_{ij}$. A signal or a function $f : V \\rightarrow \\mathbb{R}$ can be represented by a vector $f \\in \\mathbb{R}^{N_b}$, where $i^{th}$ component of the vector $f$ corresponds to state value at the vertex/bus $i \\in V$. The adjacency matrix considered for the $G$ is based on the Kron-reduced IEEE 39 model considered in [47].\nThe input data is passed through a Graph Convolution Network (GCN) Layer where a message passing operation is performed. GNNs typically operate through message-passing schemes where information is propagated between neighboring nodes in the graph. At each step of message passing, nodes aggregate information from their neighbors and update their own representations based on the aggregated information (Line 10 of Alg. 1).\nThere are three common types of aggregation considered: a) sum, b) mean, and c) max. In mean aggregation, the representations of neighboring nodes are averaged to compute the updated representation of the central node. It is simple and computationally efficient [48]. However, it may discard important information, especially in graphs where some neighboring nodes carry more relevant information than others. The sum aggregation sums the representations of neighboring nodes. It is computationally efficient and retains all the information from the neighborhood. However, it suffers from the problem of oversmoothing [49], where the representations of nodes become too similar after multiple message-passing steps, leading to loss of discriminative power. The max aggregation selects the maximum value from the representations of neighboring nodes. Such aggregation can capture the most relevant information from the neighborhood, making it robust to noise. However, it does not appropriately handle cases where multiple neighboring nodes carry relevant information [50]. These three aggregation types are evaluated in Sec. IV-D2.\nFinally, in the update stage, the node representation are updated by either concatenation or addition operation.\nTo process the time-dependent information, the outputs of the GCN is passed into LSTM encoder and decoder"}, {"title": "C. Dataset", "content": "The dataset considered comprises the state variables, phase angle ($\\theta$), and frequency ($w$) of the $N_b = 10$ buses in the IEEE 39 New England Kron-reduced model. This dataset is created using solution of the swing equation (Eq. 1). The configuration adopted corresponds to the environment used in a reinforcement learning (RL) environment developed by the same authors [9] and is available upon request. The dataset is assembled by simulating so-called \u201cepisodes\" which echoes the RL implementation mentioned above. Each episode in the environment comprises of 500 timesteps of size 0.01s each. The rationale behind the use of episodes is that the state-predictor should be equally capable during the overshoot phase and the stable phase of the system. Both phases are captured over the time interval (5s) considered here. In total, 10,000 episodes are generated by sampling the initial values of $w$ and $\\theta$ from the uniform distributions of $U(0,0.3)$ and $U(-0.03, 0.03)$ respectively. The states are predicted for every $(N_p+1)^{th}$ time instance for every $N_p$ past temporal state values. The observations are superimposed with varying levels of noise as typically observed in the Phasor Measurement Units (PMU) [33]. The noise is assumed to be additive and normally distributed as $\\mathcal{N}(0, \\sigma)$, where $\\sigma$ is the standard deviation of the noise, also referred to as noise level. The noise level $\\sigma$ is varied in the set $\\{0,0.001,0.005\\}$ in the rest of the paper. The same noise levels (defined by $\\sigma$) are used for each bus and state variable."}, {"title": "D. Result", "content": "Hereafter, the performances of the predictor are evaluated on the basis of mean absolute error (MAE) and mean relative error (MRE). The MAE and MRE are computed using the following equations:\n$MAE(X) = \\frac{\\sum_{i=1}^{D} \\sum_{j=1}^{N_b} |X_{i,j,act} - X_{i,j,pred}|}{D \\times N_b}$ (2)\n$MRE(X) = \\frac{\\sum_{i=1}^{D} \\sum_{j=1}^{N_b} \\frac{|X_{i,j,act} - X_{i,j,pred}|}{X_{i,j,act}}}{D \\times N_b}$ (3)\nwhere, $D$ is the number of data points in the testing set, $X_{i,j,act}$ and $X_{i,j,pred}$ refers to the actual and predicted state variables for the $i^{th}$ datapoint and the $j^{th}$ bus. In the following, $x$ can refer to either frequency or phase which is clarified by the use of the notations MAE($\\theta$) and MAE($w$). The MAE is considered since it is robust to outliers as compared to MSE. Note that the MRE can be useful to evaluate the relative accuracy but can also be misleading when the actual values are nearing zero. MRE is still reported for completeness.\n1) Evaluation of LSTM based prediction with non-noisy data and varying LSTM units: In this section, no noise is applied to the dataset, and this section aims to understand what architecture choices are needed to capture the system dynamics. The first network architecture variable investigated is the number of LSTM units. Increasing the number of LSTM units increases the model's capacity at capturing complex dynamics. With more units, the network can potentially learn richer representations, which leads to improved accuracy, especially for tasks that require modeling intricate temporal dependencies. For larger and more complex datasets, models with a greater number of units may be better able to capture the underlying patterns. However, for smaller datasets, increasing model capacity may also lead to overfitting. Adding more LSTM units increases the computational complexity of the model, making training and inference"}, {"title": "E. Discussion", "content": "From the experimental results, it can be inferred that the accuracy in the overshoot phase of the transient is affected by the number of LSTM units used in the encoder and decoder layers. It was observed that the GNN-LSTM"}, {"title": "V. FDIA DETECTION", "content": "Leveraging the state predictors proposed in Sec. IV, a detection model is devised to detect FDIAs via inspecting prediction errors. This section begins with establishing a threat model that specifies the FDIA detection problem, describes the proposed detection model, and finally presents a suite of experiments demonstrating the detection's efficacy under various settings."}, {"title": "A. Threat Model", "content": "Adversary. The FDI attacker is considered to be an intruder who has access to the control center of every inverter-based resource and can tamper with the droop coefficient of the controller. Denoting A as an adversary who can perturb the droop coefficients k of some bus i at time t, the adversary's goal is to induce frequency oscillations while remaining undetected by the system. Previous work [9] has shown that, by setting $k = -1$ of Eq. 1, the attack will result in damaging frequency oscillations. The adversary A is represented as a function $A(t) \\rightarrow \\{0,1\\}$ that decides whether to perturb the droop coefficient at timestep t. If A(t) = 1, the adversary sets the droop coefficient to -1.\nDetection. The goal of detection is to determine whether an FDIA has occurred. Note that the system does not have direct access to the values of $k_i$ but only to the measurements (i.e., frequencies and phases) at each timestep. For simplicity, the measurements of all buses are flattened at timestep t into a one-dimensional vector $x \\in \\mathbb{R}^d$. The detection is represented as a function $D(x_{t-N_p}, x_{t-N_p+1},...,x_t) \\rightarrow \\{0,1\\}$, where $x_t$ is the state observed as time t. A successful detection method returns 1 if an attack occurs at any of the timesteps from t - Np to t, and 0 otherwise."}, {"title": "C. Results", "content": "1) Experimental settings: A window-level detection with a window size of $N_p + 1$ ($N_p$ timesteps in the"}, {"title": "D. Discussion", "content": "From the experimental results, it can be inferred that the proposed state prediction method can be used as a building block for developing an FDIA detection that attains good performance across various attack and deployment settings. In particular, these experiments have shown that the detection method does not need to be deployed at every single timestep to remain effective. Instead, the cyclic deployment setting enables a low-cost and efficient way to execute the detection model. The"}, {"title": "APPENDIX A", "content": "This section outlines the hyperparameter tuning process for the classifier ho when conducting experiments in Section V-C. As above-mentioned, with respect to each implementation of the state predictor ge, Optuna [53] is used to tune hyperparameters of ho via Tree-structured Parzen Estimator algorithm. With h being an MLP, the following hyperparameters and search space are considered:"}]}