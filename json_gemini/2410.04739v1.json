{"title": "TableRAG: Million-Token Table Understanding with Language Models", "authors": ["Si-An Chen", "Lesly Miculicich", "Julian Martin Eisenschlos", "Zifeng Wang", "Zilong Wang", "Yanfei Chen", "Yasuhisa Fujii", "Hsuan-Tien Lin", "Chen-Yu Lee", "Tomas Pfister"], "abstract": "Recent advancements in language models (LMs) have notably enhanced their ability to reason with tabular data, primarily through program-aided mechanisms that manipulate and analyze tables. However, these methods often require the entire table as input, leading to scalability challenges due to the positional bias or context length constraints. In response to these challenges, we introduce TableRAG, a Retrieval-Augmented Generation (RAG) framework specifically designed for LM-based table understanding. TableRAG leverages query expansion combined with schema and cell retrieval to pinpoint crucial information before providing it to the LMs. This enables more efficient data encoding and precise retrieval, significantly reducing prompt lengths and mitigating information loss. We have developed two new million-token benchmarks from the Arcade and BIRD-SQL datasets to thoroughly evaluate TableRAG's effectiveness at scale. Our results demonstrate that TableRAG's retrieval design achieves the highest retrieval quality, leading to the new state-of-the-art performance on large-scale table understanding.", "sections": [{"title": "Introduction", "content": "Recent advancements have leveraged language models (LMs) for table understanding tasks [5]. This typically involves prompting LMs with entire tables to ensure thorough analysis [24, 3, 11, 22, 10, 29]. However, scaling to larger tables poses several challenges. First, LMs face context-length constraints; for example, a medium-sized table with 100 columns and 200 rows translates into over 40,000 tokens, surpassing the limits of popular LMs like LLaMA and the GPT series. Additionally, long contexts can degrade reasoning capabilities, a phenomenon known as the Lost-in-the-Middle [9]. Finally, computation costs and latency increase significantly with table size. Therefore, developing a scalable solution that efficiently handles large tables remains a critical area of research.\nNaive approaches to making large table understanding feasible, such as truncating the table or only reading the schema, often result in the loss of critical information. To address this, previous works have attempted to retrieve key rows and columns to construct a sub-table that captures essential information for answering queries [8, 17]. These methods encode entire rows and columns into sparse or dense embeddings to reduce token costs for LMs, yet they still face computational and performance challenges with extremely large tables. Encoding entire rows and columns requires processing the whole table, which is infeasible for large tables containing millions of cells. Furthermore, compressing long rows and columns into a fixed-size embedding can obscure semantic meaning, particularly when the table contains diverse or less semantically rich content (e.g., numerical values)."}, {"title": "Related Work", "content": "Research in table understanding has evolved from fine-tuning specialized architectures [6, 4] to leveraging LMs in few-shot setups [22, 10], capitalizing on the emerging reasoning capability of these models. To enable LMs to understanding tables, table information must be included in the prompts. Representative works like Dater [24], Binder [3] and subsequent works [22, 29, 11, 10, 28] typically require LMs to process entire tables. These methods, while effective in leveraging LMs' reasoning and programming capabilities for question answering, are often not feasible for larger tables due to the context length constraints.\nTo address the limitations of processing full tables, two main streams have emerged: schema-based and row-column retrieval methods. Schema-based methods, such as Text2SQL [30] and more recent developments [20, 18, 13, 14], focus primarily on schema understanding to generate SQL commands. This significantly reduces token complexity but at the cost of omitting valuable cell data. Row-column retrieval methods, such as ITR [8] and TAP4LM [17], attempt to address scalability issues by encoding and retrieving essential rows and columns. While this strategy reduces input lengths for reasoning, it still requires substantial computation to encode entire rows and columns and can suffer from poorer embedding quality for long sequences.\nOur approach, TableRAG, innovates by combining schema retrieval with selective cell value retrieval and frequency-aware truncation. This creates an efficient table prompting method where the input length to LMs is independent of table sizes. This strategy significantly reduces computational demands while preserving the benefits of accessing table contents, leading to superior performance compared to other methods across various scales."}, {"title": "TableRAG", "content": "In large-scale table understanding, we are presented with a table T, represented as $T = {V_{ij} \\mid i < N, j < M}$, where N is the number of rows, M is the number of columns, and $v_{ij}$ is the cell value at row i and column j. We address a natural language question Q and aim to produce an answer A by an LM L. Given the often impractical size of T for direct processing, a table prompting method P is employed to transform T into a more manageable prompt P(T), allowing L to effectively generate the answer $A = L(P(T))$. Our objective is to develop an efficient P that significantly reduces the size of the prompt, $|P(T)|$, compared to the original table, $|T|$, making it feasible for the LM to process large tables."}, {"title": "Core Components of TableRAG", "content": "Tabular Query Expansion To effectively manipulate the table, it is essential to pinpoint the precise column names and cell values necessary for the query. Unlike previous works [8, 17] that may use the question as a single query, we propose generating separate queries for both schema and cell values. For instance, for a question like \"What is the average price for wallets?\", the LM is prompted to produce potential queries for column names such as \"product\" and \"price\", and for relevant cell values like \"wallet\". These are then used to retrieve relevant schema and cell values from the table.\nFollowing schema retrieval, we proceed to extract specific cell values needed to answer the question. This involves building a database of distinct column-value pairs from T, denoted as $V = \\bigcup_{ij} (C_j, V_{ij})$, where $C_j$ is the column name of the j-th column. In practice, the set of distinct values is often much smaller than the total number of cells, as illustrated in Fig. 3. This discrepancy significantly enhances the efficiency of cell retrieval.\nCell retrieval plays an crucial role in TableRAG. It enhances LM's table understanding capabilities in:\nCell Identification: It allows LMs to accurately detect the presence of specific keywords within the table, which is essential for effective indexing. For example, it can distinguish between terms like \"tv\" and \"television\u201d, ensuring that searches and operations are based on precise data entries.\nCell-Column Association: It also enables LMs to associate particular cells with their relevant column names. This is crucial when questions pertain to specific attributes, such as linking the term \"wallet\" directly to the \"description\" column, thereby enables row-indexing.\nIt should be noted that cell retrieval is primarily beneficial when indexing by cell values is required. In other scenarios, simply knowing the schema may suffice. For example, to answer the question \"What is the average price?\", identifying the relevant column name for prices is sufficient because the actual computation of the average can be handled programmatically. Nevertheless, cell retrieval still improves TableRAG with additional key values from the table, which will be shown in Sec 4.8.\nCell Retrieval with Encoding Budget In the worst case, the number of distinct values could match the total number of cells. To maintain the feasibility of TableRAG in such cases, we introduce a cell encoding budget B. If the number of distinct values exceeds B, we restrict our encoding to the B most frequently occurring pairs, thus improving efficiency when processing large tables. It is important to note that the encoding budget impacts only the cell retrieval process. Even if a cell is not included for retrieval, the subsequent solver can still access the cell if its column name is known through schema retrieval or other cells. For instance, as shown in Fig. 8, the \"description\" column contains free-form text, which likely results in a high number of unique values, many of which may"}, {"title": "Token Complexity Analysis", "content": "The efficiency and latency of invoking LMs are significantly influenced by the number of input tokens. Therefore, we focus on analyzing token complexity, which refers to the complexity introduced by the number of tokens in the LM's input. We examine the token complexity of each operation within the TableRAG framework and other table prompting methods. We assume that the length of a column name, a cell value, and the question are all O(1). Note that N represents the number of rows, M represents the number of columns, D is the number of distinct text cell values, B is the cell encoding budget, and K is the number of top retrieval results.\nThe token complexity of primary table prompting approaches are shown in Table 1.\nRead Table feeds the entire table to LMs, resulting O(NM) tokens for reasoning.\nRead Schema only feeds the schema to LMs, which is O(M) tokens, but loss the information from the table content.\nRow-Column Retrieval encodes all rows and columns to embeddings, resulting O(NM) tokens for encoding. Then it retrieves top-K rows and columns to construct a $K \\times K$ sub-table for reasoning, which is O($K^2$).\nWe analyze the token complexity of each step in TableRAG as follows:\nTabular Query Expansion: The prompt to the LM is primarily based on the question, which typically comprises only a few words, thus the token complexity for this component is O(1).\nBuilding Schema Database: Each column name is encoded using the encoder function fenc, resulting in a token complexity of O(M) for the encoder.\nBuilding Cell Database: This operation involves encoding distinct column-value pairs using fenc. The total number of distinct pairs D is capped at B when exceeding the limit. Therefore, the token complexity for building the cell database is O(min(D, B)), ensuring that the most frequent data is\nprocessed to optimize performance. Note that it takes O(NM) CPU time to build the cell database, but the computation cost is negligible compared to LM calls. For example, computing the distinct values from 106 elements takes only 60 ms on a personal laptop, while it takes 1 second to encode merely hundreds of words on CPUs2.\nLM Reasoning: The query expansion process generally produces approximately 3-5 queries, which are considered O(1). Each query then retrieves the top-K results, leading to a total complexity of O(K) for the columns and cell values included in the LM's prompt. This step ensures that the LM processes only the most pertinent information from the table, enhancing efficiency and effectiveness in generating responses.\nOverall, given that typically M \u00ab B and D, the token complexity for TableRAG is O(min(D, B)) for encoding and O(K) for reasoning, with neither being dependent on the overall size of the table. Consequently, TableRAG maintains manageable costs even for large tables, optimizing computational resources and response times for large-scale table understanding tasks."}, {"title": "Empirical Studies", "content": "Existing TableQA benchmarks such as TabFact [2] and WikiTableQA [12] feature small web tables that fall within the context limits of most LMs, while others like Spider dataset [27] are designed purely as text-to-SQL tasks with access only to the schema. To better assess reasoning capabilities over larger, more realistic tables, we have developed two extensive table QA datasets, ArcadeQA and BirdQA, derived from the Arcade [26] and BIRD-SQL [7] datasets, respectively. ArcadeQA comprises tables with an average of 79, 000 rows and a maximum of 7 million cells, while BirdQA tables feature an average of 62, 000 rows with a peak at 10 million cells. Furthermore, we expanded TabFact to include synthetic tables ranging from 100 \u00d7 100 to 1,000 \u00d7 1,000, equivalent to a million of cells, to examine the impact of different table sizes under the same question and key information. Detailed methodology for dataset generation and the statistics of these datasets are provided in Appendix C and summarized in Table 7.\nWe compare TableRAG to four different approaches for incorporating table information into LMs. To ensure a fair comparison of table access strategies, we have implemented the baselines and our TableRAG based on the same PyReAct [10, 29] solver.\nReadTable This common approach in recent research includes embedding the entire table in the prompt, then asking the LMs to solve the problem with the provided table information. This approach is limited by the context length of the LMs. We discard data instances and consider them failures when the table size exceeds the context length.\nReadSchema Widely-used in Text2SQL literature, this method assumes that table content is not directly accessible. It incorporates column names and data types into the prompt, enabling LMs to execute commands based on these column names without direct access to the row data.\nRandRowSampling This method is a prevalent rule-based sampling approach [17] that randomly selects rows from the table with equal probabilities. When the total number of rows exceeds K, we select K rows to form a representative sample. This baseline is employed to underscore the benefits of more targeted retrieval methods, illustrating how they can provide more relevant and efficient data selection compared to random sampling.\nRowColRetrieval This state-of-the-art approach reduces table sizes prior to LM reasoning. Following the methodology of Sui et al. [17], we encode rows and columns and then retrieve the top K rows and columns based on their similarity to the question's embedding to form a sub-table. Since encoding all rows and columns requires 2NM tokens, which is impractical for large tables with millions of cells, we truncate the tables to B rows. This truncation limits the number of tokens encoded to B, aligning with the token limit in our TableRAG implementation."}, {"title": "Experimental Setup", "content": "Our experiments employ GPT-3.5-turbo [1], Gemini-1.0-Pro [19] and Mistral-Nemo-Instruct-24073 as LM solvers. In ablation study, we use GPT-3.5-turbo if not specified. We use OpenAI's text-embedding-3-large as the encoder for dense retrieval. For TableRAG, we set the cell encoding budget B = 10,000 and the retrieval limit K = 5. For RandRowSampling and RowColRetrieval, we increase the retrieval limit to K = 30. Each experiment is conducted 10 times and evaluated by majority-voting to ensure the stability and consistency. The evaluation metric is the exact-match accuracy if not specified."}, {"title": "Main Results", "content": "In evaluations across the datasets shown in Table 2, TableRAG consistently outperformed other methods, achieving the highest accuracies across all LMs on both ArcadeQA and BirdQA. The ReadTable method underperforms on both in ArcadeQA and BirdQA, indicating it suffers from long context. Among the three LMs, GPT 3.5 Turbo consistently delivers the best performance, regardless of the table prompting method used. These results demonstrate the effectiveness of TableRAG in handling large-scale TableQA tasks."}, {"title": "Retrieval Performance Analysis", "content": "To better understand the retrieval quality of various table prompting approaches, in Table 3, we assessed the recall, precision and f1 score for the prompts fed to LMs for reasoning. The ground truths are extracted from the program annotations in the ArcadeQA and BirdQA datasets. In column retrieval, while all methods achieved high recall due to the small number of columns, TableRAG demonstrated superior precision across both datasets, indicating its effectiveness in identifying the most relevant columns concisely. In contrast, ReadSchema and RowColRetrieval showed lower precision, suggesting that they retrieved more irrelevant columns. For cell retrieval, TableRAG consistently outperformed other methods on all metrics. TableRAG's high recall in cell retrieval marks a significant improvement over other table prompting methods, indicating it can retrieve most necessary cells for the subsequent reasoning. In summary, this analysis underscores TableRAG's efficacy in retrieving essential information in both the column and cell aspects."}, {"title": "Scalability Test on TabFact", "content": "To understand the performance across varying table sizes under similar conditions, we create a set of synthetic data from TabFact with table sizes ranging from 50 x 50, 100 \u00d7 100, 500 \u00d7 500, and 1000\u00d71000. The synthetic data allow us to analysis how table prompting methods perform in different scales with the same questions and key table contents. The results are shown in Fig. 4. ReadTable exhibited strong initial accuracy with the original data but failed dramatically as table sizes increased, infeasible for sizes 100 and beyond due to the context length limitations. Conversely, TableRAG demonstrated the most consistent and scalable performance, decreasing moderately from 83.1 to 68.4 as table size increased to 1000 rows and columns, showcasing its effectiveness in understanding larger tables. Both ReadSchema and RowColRetrieval showed declines in performance with increasing table size, yet maintained moderate accuracy, highlighting their relative scalability compared to ReadTable but less effectiveness than TableRAG in handling large tables."}, {"title": "Comparison with State-of-the-Art on WikiTableQA", "content": "To evaluate performance on small-scale TableQA datasets, we compared TableRAG with state-of-the-art approaches that rely on reading entire tables, using the commonly used WikiTableQA [12] benchmark. As shown in Table 4, TableRAG surpasses all existing methods, including TaBERT [25], Text-to-SQL [15], Binder [3], and Dater [24]. This highlights TableRAG's effectiveness, even in small-scale settings. These results confirm that, while TableRAG is designed for large-scale TableQA, its approach is versatile and maintains state-of-the-art performance across different table sizes and complexities."}, {"title": "Ablation Studies", "content": "Impact of Retrieval Methods in TableRAG: Table 6 compares different retrieval approaches within TableRAG. BM25 [16], a well-known statistical retrieval method, excels in efficiency and can process all cells but lacks semantic understanding. We also compare it with our embedding-based retrieval and\na hybrid approach that combines scores from both methods. The results show that embedding-based retrieval achieves the best performance, outperforming both BM25 and the hybrid method, despite not processing the entire table due to encoding constraints. This underscores the importance of semantic understanding in retrieval, where embedding-based methods offer better comprehension of table data, significantly enhancing TableRAG's performance.\nNumber of Top Retrieval Results K: Fig 5 illustrates the impact of varying the number of top retrieval results (K) on the performance and the token cost for the subsequent LM reasoning. The results demonstrate that that increasing the number K, while increasing the prompt lengths, does not consistently improve performance. Though larger K allows LMs access to more information, it also results in a longer context which can exacerbate the lost-in-the-middle phenomenon. In contrast, TableRAG excels by requiring fewer K values, thus reducing the context tokens needed and lowering subsequent reasoning costs while still outperforming other methods.\nEncoding Budget B: The results from Fig. 6 demonstrate how different token encoding budgets (B) affect the performance of TableRAG and RowColRetrieval. While a higher budget theoretically allows for more information to be retrieved, the results show that it does not always lead to better performance. Specifically, RowColRetrieval shows a decline in performance with increased budgets, potentially due to the retrieval of more rows that complicate selecting the correct ones and produce noisier embeddings from longer column sequences. In contrast, TableRAG maintains consistent performance across various budgets, indicating that its approach of building the corpus by cell frequency effectively captures essential information even with limited budgets.\nQuery Expansion: The effectiveness of our query expansion method is analyzed in Fig. 7. The results demonstrate that query expansion consistently enhances TableRAG's performance across various datasets and LMs."}, {"title": "Conclusion", "content": "In this work, we have presented TableRAG, the first framework to demonstrate effective and efficient LM-based table understanding with millions of tokens. To fill in the evaluation gap, we have introduced three new million-token scale table understanding benchmarks. TableRAG's retrieval design, combining schema and cell retrieval with frequency-aware truncation, significantly reduces computational costs and token usage without sacrificing performance. Our extensive experiments on both real-world and synthetic datasets showcase TableRAG's superior performance across various table sizes. TableRAG paves the way for future research on even larger and more complex table understanding tasks."}, {"title": "Limitations", "content": "Theoretically, the worst-case complexity for cell retrieval could reach O(NM) if all cell values are distinct, potentially leading to loss of crucial information even with frequency-based truncation. Also, our evaluation is limited to QA and verification tasks due to the scarcity of large-scale table benchmarks. Finally, we focus on benchmarking on comparing TableRAG with other representative table prompting methods using the same LM solver, rather than against the latest state-of-the-art techniques, to specifically assess its efficacy on large tables."}]}