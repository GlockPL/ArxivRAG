{"title": "Lateral Movement Detection via Time-aware Subgraph Classification on Authentication Logs", "authors": ["Jiajun Zhou", "Jiacheng Yao", "Xuanze Chen", "Shanging Yu", "Qi Xuan", "Xiaoniu Yang"], "abstract": "Lateral movement is a crucial component of advanced persistent threat (APT) attacks in networks. Attackers exploit security vulnerabilities in internal networks or IoT devices, expanding their control after initial infiltration to steal sensitive data or carry out other malicious activities, posing a serious threat to system security. Existing research suggests that attackers generally employ seemingly unrelated operations to mask their malicious intentions, thereby evading existing lateral movement detection methods and hiding their intrusion traces. In this regard, we analyze host authentication log data from a graph perspective and propose a multi-scale lateral movement detection framework called LMDetect. The main workflow of this framework proceeds as follows: 1) Construct a heterogeneous multigraph from host authentication log data to strengthen the correlations among internal system entities; 2) Design a time-aware subgraph generator to extract subgraphs centered on authentication events from the heterogeneous authentication multigraph; 3) Design a multi-scale attention encoder that leverages both local and global attention to capture hidden anomalous behavior patterns in the authentication subgraphs, thereby achieving lateral movement detection. Extensive experiments on two real-world authentication log datasets demonstrate the effectiveness and superiority of our framework in detecting lateral movement behaviors.", "sections": [{"title": "1. Introduction", "content": "Recently, the rapid development of the internet has profoundly transformed the digital environment, introducing unprecedented connectivity and avenues for information access. However, this high degree of connectivity has also triggered a series of significant cybersecurity challenges. In particular, the complexity and stealthiness of Advanced Persistent Threats (APTs) have escalated, posing severe threats to internet security. Among APT attacks, lateral movement attacks are especially prominent and have become a critical issue that urgently needs to be addressed in cybersecurity.\nLateral movement is a key stage in the APT attack. After gaining initial access to a node within the network, attackers employ various techniques to progressively infiltrate and expand their control within the network. This process allows attackers to escalate privileges, access sensitive data, and establish persistent access mechanisms (such as backdoors or malware). Fig 1 illustrates two typical lateral movement scenarios in an internal network: 1) External attackers successfully infiltrate an internal network host through phishing emails or vulnerability exploitation. After establishing an initial foothold, they gradually expand their control by scanning other devices in the network and exploiting inherent security weaknesses or by stealing credentials to escalate privileges; 2) Internal members leverage their initial legitimate access or stolen credentials to carry out unauthorized access, progressively extending their control over the system. The ultimate goal of lateral movement is to steal high-value resources, which can lead to significant losses for organizations. Therefore, detecting lateral movement behavior is critical to thwarting APT attacks.\nResearchers have developed various methods for detecting lateral movement, primarily including methods based on endpoint detection and response (EDR) [1], [2], [3], [4], [5], [6], [7], [8], machine learning (ML) and deep learning (DL) [9], [10], [11], [12], [13], [14], [15], [16], [17]. While these approaches have achieved certain success in detecting lateral movement, they still face several limitations. EDR-based methods can monitor endpoint devices in real-time and detect abnormal behaviors, but they are vulnerable to attackers who can evade detection by using legitimate tools and credentials. Additionally, EDR requires substantial computational resources to process large volumes of data, potentially leading to performance bottlenecks. ML-based methods demonstrate good performance in identifying complex behavioral patterns, but they rely heavily on large amounts of labeled data for training. As attackers continuously modify their tactics, existing models struggle to adapt to new attack means. DL-based methods excel in extracting complex features from data but also require extensive high-quality data for training, and the training process is complex and time-consuming. Moreover, DL-based models have poor interpretability, making it difficult to analyze and understand the detection results, thus posing challenges for security experts in threat response."}, {"title": "2. Related work", "content": ""}, {"title": "2.1. Traditional Lateral Movement Detection", "content": "Early lateral movement detection methods primarily relies on network configuration and vulnerability data, detecting potential lateral movement paths by identifying key assets and analyzing logs. However, these methods face limitations in addressing complex attack strategies, posing challenges for practical application. To overcome these limitations, researchers have gradually expanded and improved these approaches.\nFor instance, Noureddine and Nassar et al. [1], [3] proposed game-theoretic methods to dynamically model interactions between attackers and defenders, analyzing attackers' lateral movement paths and evaluating the effectiveness of defense strategies. However, these methods assume fixed behavior patterns for both attackers and defenders, without considering attackers' multi-step strategies and adaptability to defenses, which limits the models' practicality and generalization capabilities. Other studies leverage attack graphs for detection. Sawilla et al. [4] proposed the AssetRank algorithm, which ranks nodes in a dependency attack graph to identify critical attack assets. However, this method depends on precise network configuration and vulnerability data and requires expert knowledge for parameter settings and vector selection. The Hopper system [6] constructs a login activity graph from enterprise logs, identifying lateral movement paths through detection rules and anomaly scoring algorithms, achieving high detection rates and low false positive rates. However, its performance is influenced by network architecture, permission management policies, and log accuracy. Milajerdi et al. [8] developed the HOLMES system, which constructs high-level contextual graphs and uses host audit data to correlate information flows in APTs for lateral movement detection. However, this approach may miss lateral movement activities that lack direct system call information flow. Bai et al. [9] proposed a machine learning-based method utilizing Windows Remote Desktop Protocol (RDP) event logs, combining supervised learning with detection rules and a novel anomaly scoring algorithm to effectively identify RDP sessions related to lateral movement. However, this method depends on features extracted from a specific dataset, requiring adaptation and retraining for different environments or attack patterns. Smiliotopoulos et al. [11] introduced a comprehensive lateral movement detection approach based on Sysmon logs, combining supervised machine learning with feature selection techniques, achieving high F1 and AUC scores on the Windows platform. However, this method may not generalize well to operating systems other than Windows."}, {"title": "2.2. Lateral Movement Detection Based on GNNS", "content": "In recent years, Graph Neural Networks (GNNs) have demonstrated strong representation learning capabilities across various fields, such as fraud detection [23], [24], [25], cybersecurity [26], and social analysis [27], [28]. Their applications in the domain of lateral movement detection are also increasing. Researchers construct network service graphs, authentication graphs, and heterogeneous authentication log graphs, leveraging GNNs to capture and analyze complex relationships and dynamic changes within the network to achieve detection.\nFor example, Liu et al. [18] proposed the Latte system, which quickly identifies infected computers through combined analysis and forensics of known compromised nodes, using a remote file execution detector to filter rare paths and identify unknown lateral movement attacks. Although this system has demonstrated efficiency and effectiveness on large-scale datasets, it still faces challenges in distinguishing between attacker activity and normal actions by system administrators. Parra et al. [17] proposed a distributed deep learning framework for detecting phishing and application-layer DDoS attacks. The framework combines DCNNs in IoT devices with time-based LSTM models, effectively identifying cross-device distributed phishing attacks. Fang et al. [20] developed LMTracker, which constructs a heterogeneous graph based on authentication logs, abstracts lateral movement as a path, and uses predefined thresholds and meta-paths for unsupervised anomalous path detection. However, this approach does not consider temporal information, which is crucial for understanding the sequence of lateral movement by attackers. Liu et al. [22] used specific rules to model user behavior and applied clustering methods to group similar log entries, determining malicious behavior based on cluster size and quantity. King et al. [19] proposed the Euler system, which generates discrete dynamic graph snapshots for each time period, encoding the evolving topology using GNNs, and processes the outputs with sequential encoders such as recurrent neural network (RNNs) to capture network dynamics. However, this approach incurs significant computational overhead.\nAlthough GNN-based approaches have made some progress in detecting lateral movement, most studies primarily focus on individual connections between entities, potentially overlooking the existence of more intricate patterns in network behavior. Lateral movement is an ongoing process that involves a series of operations, and solely evaluating network activity via edge classification or link prediction may not fully uncover the complete attack path."}, {"title": "3. Heterogeneous Authentication Multigraph", "content": ""}, {"title": "3.1. Authentication Log Analysis", "content": "Authentication logs record authentication events occurring when a user or system accesses or attempts to access a computer system within an internal network. These logs typically include detailed information such as successful and failed login attempts, timestamps, user or system identifiers, authentication types (e.g., password, two-factor authentication), source IP addresses, and more. By analyzing real-world computer network datasets from Los Alamos National Laboratory (LANL) [29], we summarize the log field information as shown in Table 1. For example, one log entry"}, {"title": "3.2. Graph Construction", "content": "Based on these conclusions, we construct a heterogeneous authentication multigraph (HAMG) from a large volume of authentication logs, as illustrated in Figure 3. Specifically, we first parse each authentication log entry to extract key fields such as time, user ID, host ID and authentication event type, and standardize and format these fields uniformly. We then categorize five different types of entities (user, host, server, file, process) as well as four different types of interaction relationships (login, connection, access, creation). Considering that not all of the aforementioned entities are necessarily involved in a single authentication log entry, we further group these five types of entities into three broad categories: User-class (U: user), Device-class (D: host, server) and Object-class (O: file, process). These entities and relationships are represented as nodes and edges of HAMG, resulting in the following definition:\nDefinition 1. Heterogeneous Authentication Multigraph (HAMG). A heterogeneous authentication multigraph can be denoted as $\\mathcal{G} = {\\mathcal{V}, \\mathcal{E}, \\mathcal{X}, \\mathcal{E}, T_V, T_E, \\mathcal{Y}, \\mathcal{Z}}$, where $\\mathcal{V} = {v_1, v_2,\\dots, v_n}$ is the set of nodes (entities), each with a specific type indicated by $T_V : v \\rightarrow {\\text{user}, \\text{host}, \\text{server}, \\text{file}, \\text{process}}$, $\\mathcal{E} = {e_j | e_j = (v_i, v_j, t), v_i, v_j \\in \\mathcal{V}}$ is the set of edges (interaction relations), each with a specific type indicated by $T_E : e \\rightarrow {\\text{login}, \\text{connection}, \\text{access}, \\text{creation}}$, along with a timestamp $t$. $\\mathcal{X} = [X_1,X_2,\\dots,X_n] \\in \\mathbb{R}^{|\\mathcal{V}| \\times d_v}$ is the node feature matrix, where $\\mathbf{x}_v$ is the feature vector constructed by concatenating the type information (one-hot encoded) of node $v$; and its ID information, and $d_v$ is the dimension of node features. $\\mathcal{E} = [e_1, e_2,\\dots,\\mathbf{e}_m] \\in \\mathbb{R}^{|\\mathcal{E}| \\times d_e}$ is the edge feature matrix, where $\\mathbf{e}_e$ is the edge feature vector constructed by concatenating the information of interaction type, authentication type, logon type and authentication orientation, and $d_e$ is the dimension of edge features. The authentication event $z \\in \\mathcal{Z}$ involves interactions between three broad categories of entities, which can be represented as a quintuple $z = (t, U, D, O)$, and its label information $y_i$ is included in $\\mathcal{Y} = {(z_i, y_i) | z_i \\in \\mathcal{Z}}$.\nNote that a multigraph implies that multiple interactions may exist between entities, which are distinguished by different timestamps. Finally, HAMG can effectively represent complex network activities, providing a powerful data structure for subsequent lateral movement detection."}, {"title": "4. Methodology", "content": "The HAMG derived from billions of authentication logs is extraordinarily large, imposing a significant computational burden for subsequent analysis and detection. Additionally, existing studies often model lateral movement detection as either edge (path) classification or link prediction problem, neglecting the continuity and multi-stage nature of network behavior. Given the limitations of existing approaches in terms of detection paradigms and computational efficiency, we innovatively models lateral movement detection as a subgraph classification problem for the following reasons: 1) Lateral movement behaviors often involve a series of interactions among numerous entities, whose structure can be captured by subgraphs induced from lateral movement paths; 2) Subgraphs containing lateral movement behaviors"}, {"title": "4.1. Time-aware Subgraph Generation", "content": "Revisiting the definition of an authentication event $z_i = (t_i, U_i, D_i, O_i)$, where $t_i$ denotes the time of the event, and $U_i, D_i, O_i$ represent the three types of entities involved in the event. Our time-aware subgraph generator takes the event as input and samples the corresponding time-aware subgraph from the graph as output. Specifically, for the three entities involved in event $z$, we treat them as core nodes and retrieve their 1-hop neighbor sets, which are then merged:\n$\\mathcal{N}_{z_i} = \\mathcal{N}_{U_i} \\cup \\mathcal{N}_{D_i} \\cup \\mathcal{N}_{O_i}$ (1)\nNote that the three core nodes are also included in this set, i.e., $U_i, D_i, O_i \\in \\mathcal{N}_{z_i}$. We treat other nodes in this set as auxiliary nodes. Subsequently, we extract the subgraph $g_i = {\\mathcal{V}_{g_i}, \\mathcal{E}_{g_i}}$ from the graph, containing all nodes in $\\mathcal{N}_{z_i}$ along with their corresponding edges (For simplicity, the notation for the subgraph retains only the node set and edge set).\nCentered on the time $t_i$ when event $z_i$ occurs, we define a time interval and remove interactions (edges) from the subgraph that fall outside this interval:\n$\\mathcal{E}_{g_i} \\leftarrow \\mathcal{E}_{g_i} \\setminus {e_{ij} | e_{ij} = (v_i, v_j, t), v_i, v_j \\in \\mathcal{V}_{g_i}, |t - t_i| > \\tau}$ (2)\nConsidering the existence of multiple edges in the subgraph, we first perform edge aggregation, merging multiple interac-"}, {"title": "4.2. Multi-Scale Attention Encoding", "content": "After obtaining the subgraph dataset of authentication events, we further design a multi-scale attention encoding module to effectively capture behavior patterns of authentication events and detect potential malicious actions. Specifically, the multi-scale attention encoding module consists of three components: 1) a local attention encoder that characterizes local interactions between entities in the authentication subgraph, capturing fine-grained authentication behavior patterns; 2) a relative positional encoder that models"}, {"title": "4.2.1. Local Attention Encoding", "content": "Although the time-aware subgraph covers entities and interactions with the most temporally relevance, different interacting entities contribute variably to the representation of the target authentication event. For instance, in an internal network containing users, hosts, and servers, if the target authentication event involves user $u_1$ logging in to host $h_1$, then the authentication logs of host $h_1$ and the communication records with server $s_1$ may provide more directly relevant contextual information for the target event. In contrast, logs of other hosts $h_2$ or $h_3$ interacting with user $u_1$ within the time window, while still relevant, contribute comparatively less to the target authentication event. To effectively quantify these contribution differences, we introduce local attention computation to learn the mutual contribution weights between any entities within the authentication subgraph. Specifically, for a target node $v_i$ in subgraph $g$, the attention weight (contribution) of its neighbors $v_j \\in \\mathcal{N}_{v_i}$ can be represented as follows:\n$\\alpha_{ij} = \\frac{\\exp \\left(\\text{LeakyReLU}\\left(\\mathbf{a}^T [\\mathbf{h}^{(1)}_i || \\mathbf{h}^{(1)}_j] \\right)\\right)}{\\sum_{v_k \\in \\mathcal{N}_{v_i} \\cup {v_i}} \\exp \\left(\\text{LeakyReLU}\\left(\\mathbf{a}^T [\\mathbf{h}^{(1)}_i || \\mathbf{h}^{(1)}_k] \\right)\\right)}$ (3)\nwhere $\\mathbf{h}_i^{(1)}$ is the node feature vector and $\\mathbf{h}_j^{(0)} = \\mathbf{x}_j$ is the weight matrix used to transform node features at layer $l$, $\\mathbf{a}$ is the attention parameter vector for calculating similarity between nodes, LeakyReLU is the activation function, and $||$ denotes the concatenation operation. Once the attention scores are obtained, they are used to update the target node's features by aggregating information from its neighborhood:\n$\\mathbf{h}_{i, \\text{local}}^{(l+1)} = \\text{Elu} \\left( \\sum_{v_j \\in \\mathcal{N}_{v_i} \\cup {v_i}} \\alpha_{ij} \\Theta^{(l)} \\mathbf{h}^{(l)}_j \\right)$ (4)\nwhere a transformation parameterized by weights $\\Theta^{(l)}$ and Elu activation is used to generate the final node features. The local attention mechanism enables us to adaptively assign different weights to neighboring nodes, thereby capturing their different contributions to the target nodes. We represent the node feature matrix generated via local attention encoding as $\\mathbf{H}_{local}^{(L)}$, where $L$ is the number of layers for local attention encoding."}, {"title": "4.2.2. Relative Position Encoding", "content": "Network authentication activities involve complex, continuous interactions among numerous entities, with lateral movement behavior often manifesting as directed interactions traversing network entities. To effectively capture structural information within the authentication subgraph, we introduce a relative position encoding module to provide structural information during"}, {"title": "4.2.3. Global Attention Encoding", "content": "Lateral movement behavior typically manifests as an attacker infiltrating the system from an initial node, traversing multiple entities to gradually acquire more privileges and resources. Although certain entities may not be directly connected, long-distance dependencies can still be established through multi-step connections. For example, a user may access a specific server through multiple intermediary hosts. Thus, relying solely on a local information encoding module is insufficient to comprehensively understand the attacker's behavior patterns. To address this, we design a graph transformer as a global attention encoder, as illustrated in Figure 5, aimed at providing a global representation of the time-aware subgraph enriched with relative position information, thereby capturing higher-order features of network behavior. Specifically, our graph transformer utilizes node and edge features to compute global attention:\n$b_{ij} = \\text{ReLU}( ((\\Theta_Q \\mathbf{x}_i + \\Theta_K \\mathbf{x}_j) \\odot \\Theta_{\\text{el}} \\mathbf{e}_{ij}) + \\Theta_{b_{ij}})$ (9)\n$\\Beta_{ij} = \\frac{\\exp (b_{ij})}{\\sum_{o \\in \\mathcal{V}} \\exp (\\Theta_{\\beta_{oi}})}$ (10)\nwhere $\\Theta_Q$, $\\Theta_K$, $\\Theta_{\\text{el}}$, $\\Theta_b$, $\\Theta_\\beta$ are the learnable transformation weight matrices, $\\odot$ is the Hadamard product, $\\sigma(x) = (\\text{ReLU}(x))^{1/2} - (\\text{ReLU}(-x))^{1/2}$ maintains non-linearity and symmetry, which can help alleviate gradient vanishing or exploding issues to some extent. After obtaining the global attention, the target node's features will be updated by performing a weighted aggregation of the features of all other nodes and their corresponding interactions:\n$\\mathbf{h}_{i, \\text{global}} = \\sum_{j \\in \\mathcal{V}} \\Beta_{ij} (\\Theta_V \\mathbf{x}_j + \\Theta_{gb_{i,j}})$ (11)\nwhere $\\Theta_V$ and are the learnable transformation weight matrices. The global feature encoding module enables nodes to receive messages from any other node within the subgraph and adaptively integrate external information through global attention. We represent the node feature matrix generated via global attention encoding as $\\mathbf{H}_{global}$."}, {"title": "4.3. Model Training", "content": "To achieve lateral movement detection, we fuse the local and global features and apply global sum pooling to obtain the final representation of the authentication subgraph:\n$z_{g_i} = \\text{SumPooling} (\\mathbf{H}_{local}^{(L+1)} + \\mathbf{H}_{global})$ (12)"}, {"title": "5. Experiment", "content": ""}, {"title": "5.1. Dataset", "content": "We evaluate LMDetect on two commonly used datasets: LANL [29] and CERT [30]. We construct corresponding HAMG using these two datasets, with specific information shown in Table 2."}, {"title": "5.1.1. LANL [29]", "content": "Los Alamos National Laboratory released a comprehensive dataset covering multi-source cybersecurity events in 2015. Spanning 58 days, the dataset includes anonymized event data collected from five sources within the laboratory's internal network, including Windows-based authentication events, system start and stop events on individual machines, DNS queries, network traffic data at router locations, and red team events simulating malicious behavior. The total dataset size is approximately 12 GB, recording over 1,648,275,307 event entries generated by 12,425 users, 17,684 computers, and 62,974 processes. We extract 30 days of event data from this dataset for research and analysis."}, {"title": "5.1.2. CERT [30]", "content": "The Insider Threat Test Dataset from CERT, provided by Carnegie Mellon University, simulates employee activities and potential insider threats in a corporate network. We utilize the latest r6.2 version, which includes over 3.5 million user login events and 2 million file access events. This dataset covers operational activities of 4,000 users and 4,400 computers and includes five types of insider threat scenarios, totaling 470 labeled security events. We extract a two-month continuous sample from the dataset to support cybersecurity behavior analysis."}, {"title": "5.2. Comparison Methods", "content": "In order to validate the superiority of LMDetect in lateral movement detection, we compare it with a variety of existing state-of-the-art methods, including GNN-based detection methods as well as several classical graph-based detection systems. Note that traditional detection methods are not included in the comparison because they are no longer able to cope with the current complex attack scenarios.\nFor GNN-based methods, we select three commonly used GNN models for comparison: GCN [31], GAT [32] and GraphSAGE [33]. The Graph Convolutional Network (GCN) employs graph convolution operations, combining topological structure to uniformly aggregate information from neighboring nodes into the target node, thereby capturing interaction features among nodes. The Graph Attention Network (GAT) introduces an attention mechanism that adaptively adjusts the target node's reception of information from different neighbors by calculating attention weights between the node and its neighbors. GraphSAGE samples and aggregates the neighborhood information around the target node, enhancing scalability for representation learning in large-scale graphs. We use these three models, following a subgraph classification paradigm, to implement lateral movement detection. Note that versions with the \"-ts\" suffix indicate the use of time-aware subgraphs for lateral movement detection, whereas versions without the suffix indicate the use of randomly sampled subgraphs.\nFor graph-based lateral movement detection methods, we select LMTracker [20] and Euler [19] for comparison. LMTracker is a static graph-based detection method that models lateral movement detection as a path classification problem, leveraging the metapath2vec [34] method to learn representations of network entities and generate path information for detection. Euler is a temporal graph-based detection method that uses timestamp information to construct the authentication logs into a temporal graph composed of snapshots. It combines GNNs and recurrent neural networks (RNNs) to capture both topological and temporal features of network activity, enabling lateral movement detection. In this paper, we use combinations of GCN with GRU and LSTM for lateral movement detection, referred to as Euler GCN-GRU and Euler GCN-LSTM, respectively. Note that since the original Euler study did not include experiments on the CERT dataset, we have also excluded Euler's results on the CERT dataset in our work."}, {"title": "5.3. Evaluation Metrics", "content": "In previous studies, the performance evaluation of lateral movement detection models typically focused on one or two metrics. In contrast, we employ multiple performance metrics (precision, recall, F1-score, accuracy, and AUC) to more comprehensively assess the model's performance in real-world applications. Precision emphasizes the accuracy of positive predictions, making it suitable for scenarios where the cost of false positives is high. Recall focuses on positive"}, {"title": "5.4. Experimental Settings", "content": "The details of our experimental setup are as follows. The LMDetect is implemented using PyTorch and its associated Geometric library. We use 17,000 benign event samples and 400 malicious event samples on both datasets to simulate the actual sample imbalance problem. With such a sample distribution, we are able to more realistically reproduce the actual network environment, where malicious events occur much less frequently than normal events. This data imbalance property puts higher demands on the model, prompting it to accurately identify a small number of abnormal behaviors even when faced with a large number of normal behaviors. We divide the dataset into training, validation, and testing sets according to the ratio of 6:2:2, and set up 10 independent repeated experiments with different random seeds. For different modules in LMDetect, the settings of key parameters are presented in Table 3.\nFor GCN, GAT, GraphSAGE, we employ these three GNN models on our constructed HAMG. The number of message passing layers is set to 2 for all models, and use the same prediction header for subgraph classification. The batch size, learning rate, data size and data division of these models are all consistent with LMDetect. For LMTracker and Euler, we conduct the experiments strictly according to the detection process designed in their original papers and follow the parameter settings provided in their papers. The data size and data division are the same as LMDetect."}, {"title": "5.5. Evaluation on Lateral Movement Detecttion", "content": "We evaluate the effectiveness of different lateral movement detection methods across two datasets, with the results presented in Table 4. It is evident that LMDetect outperforms other methods across all detection metrics on both datasets. Notably, LMDetect performes exceptionally well on LANL dataset, achieving near-perfect recall, F1 score, accuracy, and AUC at approximately 99%. On CERT dataset as well, LMDetect also demonstrates outstanding performance with high scores. These results indicate that LMDetect possesses strong robustness and generalization, consistently achieving superior performance across various datasets.\nMoreover, the GNN-based methods (GCN, GAT, GraphSAGE) underperform compared to LMDetect. While GraphSAGE performes relatively better on LANL dataset, it still does not reach the level of LMDetect. GAT and GCN lag even further behind, particularly struggling in precision and recall, indicating high false positive and false negative rates. On CERT dataset, the performance of these methods generally declines, highlighting their limited applicability on this dataset. The underlying reason is that GCN and GAT rely on all surrounding information when capturing entity features, making them less effective at alleviating the impact of noisy data in logs. In contrast, GraphSAGE randomly samples neighboring information, somewhat alleviating noise interference and preventing model overfitting. Notably, the GNN-based methods that use time-aware subgraphs (GCN-ts, GAT-ts, GraphSAGE-ts) outperform their random-sampling counterparts across most metrics, with particularly significant improvement on CERT dataset. This suggests that time-aware subgraphs capture higher event relevance than random sampling, enabling the model to capture contextual information closely associated with lateral movement behaviors and thereby enhancing detection accuracy further.\nAdditionally, LMTracker and Euler perform relatively well in recall but demonstrate lower precision, along with a higher false positive rate. This limitation arises because they rely on link prediction for lateral movement detection, viewing network behavior in isolation and overlooking the fact that lateral movement typically involves a series of continuous actions, which restricts detection performance. In contrast, our LMDetect employs a time-aware subgraph generation module to extract highly relevant contextual information around authentication events and reduce noise. Furthermore, it uses a multi-scale attention encoding module to comprehensively characterize the behavior patterns of lateral movement attackers, achieving an exceptionally high detection rate with minimal false positive and false negative rates in lateral movement detection."}, {"title": "5.6. Ablation Analysis", "content": "To evaluate the contribution of each module in LMDetect, we conduct ablation experiments, with results shown in Table 5. Specifically, \"LMDetect w/o tg\" represents lateral movement detection using randomly sampled subgraphs"}, {"title": "5.7. Analysis of Time-aware Subgraph", "content": "We further analyze the impact of time-aware subgraph on lateral movement detection. Specifically, in this work, we filter only the 1-hop neighbors of entities within the target event to obtain the time-aware subgraph, denoted as \"TSG: 1-hop neighbors\". Additionally, we construct similarly scaled time-aware subgraphs by filtering both 1-hop and 2-hop neighbors, denoted as \"TSG: 2-hop neighbors\". We use these two types of time-aware subgraphs for lateral movement detection, with the results shown in Figure 6. It"}, {"title": "5.8. Analysis of Relative Position Encoding", "content": "We further analyze the influence of key parameter in relative position encoding (i.e., random walk step length K) on model's detection performance. Specifically, we varies $K$ within the set ${16, 24, 32, 36, 40}$ and observe the performance fluctuations, as shown in Figure 7. We observe that as $K$ increases, the model's performance initially improves but then declines, reaching optimal detection performance when $K = 32$. The underlying reason is that the relative position encoding module captures the relative dependencies between entities in the authentication subgraph by simulating random walks, thereby enhancing the model's understanding of the subgraph structure. When the step length is small, LMDetect only captures the local structure between entities, limiting its ability to represent long-range dependencies. Conversely, when the step length is too large, the relative position encoding introduces excessive noise and redundant information, which interferes with the model's reasoning to some extent. Therefore, an appropriate choice of step length is closely related to the scale of the subgraph, reflecting a balance in the model's ability to capture both local and global dependencies."}, {"title": "6. Conclusion", "content": "In this work, our proposed LMDetect framework effectively addresses the challenges of lateral movement detection in network authentication logs. By modeling authentication logs as a heterogeneous authentication multigraph and employing a time-aware subgraph classification approach, LMDetect captures both local and global dependencies, thus enhancing the detection performance for lateral movements. The use of a time-aware subgraph generator ensures that the model can efficiently extract relevant contextual information, while the multi-scale attention encoder comprehensively characterizes the behavior patterns of lateral movement. Experimental results on real-world datasets demonstrate that LMDetect achieves state-of-the-art performance across multiple evaluation metrics, consistently outperforming existing detection approaches. These results confirm LMDetect's robustness and scalability in detecting complex attack strategies, thereby contributing significantly to the field of network security. Future work may involve adapting the model to other types of cyber attacks, as well as exploring the applicability of time-aware subgraph classification in different security contexts."}]}