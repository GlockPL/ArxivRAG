{"title": "FuzzTheREST: An Intelligent Automated Black-box RESTful API Fuzzer", "authors": ["Tiago Dias", "Eva Maia", "Isabel Pra\u00e7a"], "abstract": "Software's pervasive impact and increasing reliance in the era of digital transformation raise concerns about vulnerabilities, emphasizing the need for software security. Fuzzy testing is a dynamic analysis software testing technique that consists of feeding faulty input data to a System Under Test (SUT) and observing its behavior. Specifically regarding black-box RESTful API testing, recent literature has attempted to automate this technique using heuristics to perform the input search and using the HTTP response status codes for classification. However, most approaches do not keep track of code coverage, which is important to validate the solution. This work introduces a black-box RESTful API fuzzy testing tool that employs Reinforcement Learning (RL) for vulnerability detection. The fuzzer operates via the OpenAPI Specification (OAS) file and a scenarios file, which includes information to communicate with the SUT and the sequences of functionalities to test, respectively. To evaluate its effectiveness, the tool was tested on the Petstore API. The tool found a total of six unique vulnerabilities and achieved 55% code coverage.", "sections": [{"title": "1 Introduction", "content": "Software has had a positive impact over the years and its adherence continues to grow. The ubiquity of information technology, coupled with the seamless availability of web services, such as REST, has made software much more accessible in today's interconnected landscape. However, considering its prevalence, the existence of software vulnerabilities is worrying. Nowadays, people depend on technology, and as such, poor-quality software can have detrimental effects. Considering that software is the backbone of many modern operations, ensuring software reliability and security is crucial [18,23,10].\nSoftware testing is one of the main contributors to software quality capable of answering the validation and verification standard [16]. Software testing encompasses a very extensive taxonomy of methods, each focusing on improving"}, {"title": "2 State-of-the-Art", "content": "Fuzzy testing is a vulnerability detection technique that has shown remarkable results in identifying software defects, particularly when automated [22,3,12,8]. This technique involves generating faulty input to feed the functionalities of a SUT and monitoring its behavior according to the actual requirements and performance of the system [28,23]. Since it consists of trying different inputs to find vulnerabilities, this method is prone to low code coverage due to randomness, and inefficient execution due to redundant tests [22] leading to a higher rate of missed vulnerabilities. However, it is generally more accurate and has fewer false alarms than static analysis [28].\nNowadays, web APIs are the de-facto standard for Software integration [19], being most software made available via RESTful APIs. As RESTful APIs gain momentum, so does their testing. Recent advances in the literature show that black-box testing of RESTful APIs has outputted effective results and is capable of contributing to the validity, reliability, and correctness of these systems.\nAtlidakis et al. [2] presented RESTler, a REST API fuzzy testing tool. The tool analyses the API specifications and generates a sequence of requests by inferring order dependencies and analyzing dynamic feedback of prior tests. Their tool was capable of detecting 28 bugs in various cloud services, which were"}, {"title": "3 Fuzz TheREST: A TestLab Module", "content": "This work presents FuzzTheREST, an automated black-box RESTful API fuzzer that leverages RL to strategically generate input values. The tool integrates the TestLab ecosystem, which is an automated software testing framework that integrates a diverse range of testing approaches across various levels and viewpoints [6]. FuzzTheREST's approach utilizes as main data source the OAS file for interoperability purposes. Several mutation methods were implemented to generate faulty input for the fuzzy tests. When successful, these result in the SUT's anomalous response, which the RL algorithm learns to improve input generation. In addition, the fuzzer documents the findings and performance of the RL, granting visibility into the process. This fuzzer sets itself apart through its novel RL algorithmic approach, explainability, adaptability, and interoperability."}, {"title": "3.1 Reinforcement Learning Design", "content": "This section describes meticulously the design and execution of the novel RL algorithmic approach employed in the fuzzer for improved input generation. Fig 1 depicts the custom environment and the agent characteristics, interactions, and architecture. The following subsections describe the data acquisition process, RL environment, and Agent's design, showcased in Fig 1.\nThe fuzzer requires four main sources of information to operate: (i) the OAS file, containing information to communicate with the SUT, (ii) the scenarios file, containing functionality execution sequences, (iii) the mutators, responsible for generating the faulty input, and (iv) the algorithm parameters, which will impact the learning process of the agent, therefore affecting its performance and the results obtained during testing.\nThe OAS file is divided into three main sections: (i) API information, (ii) API paths and operations, and (iii) reusable components for data schemas and security schemes. Since the OAS file contains a huge corpus of unnecessary data, before training the RL algorithm, this file was processed for dimensional reduction."}, {"title": "Reinforcement Learning Environment and Agent", "content": "The RL environment is composed of the observation and action space. The states of the observation space are the HTTP status codes. The action space is defined by the actions that the agent can take. In this context, it corresponds to the mutation methods previously mentioned. Considering the nature of the mutation methods, there is a relationship of one-to-many between the datatypes and actions.\nThe RL agent interacts with the environment, by acting according to the current state. In this environment, the action is making an HTTP request with the faulty input to the SUT, which generates a response containing the HTTP status code. The status is used to assign a reward, which can be positive or negative depending on the outcome, to the agent. In this work, rewards were modeled around HTTP status codes: 1XX rewards 0 points, 2XX and 3XX rewards 5 points, 4XX takes 20 points, and 5XX, grants 10 points. This action and reward system allows the agent to learn over time. Nonetheless, it is important to choose a suitable agent to interact with such a specific environment.\nAn agent is an algorithm that learns from the environment and makes decisions to maximize cumulative rewards. This is done by figuring out the best possible actions to take given its current state. The agent is a Multi-table Q-Learning algorithm [13] that is well-suited to the environment developed. The Multi-table approach was motivated by the relationship between datatypes and actions, assigning each datatype its own Q-Table. To optimize learning, an epsilon-greedy policy with exploration decay was implemented to balance exploitation and exploration."}, {"title": "4 Petstore API Case Study", "content": "To demonstrate the proposed fuzzer's effectiveness, a case study was conducted on the Petstore API [1]. The Petstore API is an illustrative Java-based RESTful API, designed around the concept of a pet store business, which includes three main entities: (i) Pets, (ii) Orders, (iii) and Users. For each entity, there are several variants of Create, Read, Update, and Delete (CRUD) methods. For the case study, three distinct scenarios targeting the functions of each entity were crafted in the CRUD order. This API is often used by many literature works in the testing field [15,4,17,5], and as such it was considered most relevant for the benchmark.\nThe Petstore API was deployed to a Docker container, to simulate a production environment, and a JaCoCo agent was set up for real-time code coverage. The API was tested using the fuzzer with the parameters described in Table 1. In bold are the parameters that had the best performance."}, {"title": "5 Conclusions", "content": "This work presents an RL-based black-box RESTful API fuzzer that tackles input generation, exhaustive testing, and function dependency problems. The system was evaluated in a case study API and was able to uncover six unique vulnerabilities whilst achieving considerable code coverage, highlighting its learning capability. The experiment also shows that the HTTP status codes cannot"}]}