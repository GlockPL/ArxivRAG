{"title": "FuzzTheREST: An Intelligent Automated\nBlack-box RESTful API Fuzzer", "authors": ["Tiago Dias", "Eva Maia", "Isabel Pra\u00e7a"], "abstract": "Software's pervasive impact and increasing reliance in the era\nof digital transformation raise concerns about vulnerabilities, emphasiz-\ning the need for software security. Fuzzy testing is a dynamic analysis\nsoftware testing technique that consists of feeding faulty input data to\na System Under Test (SUT) and observing its behavior. Specifically re-\ngarding black-box RESTful API testing, recent literature has attempted\nto automate this technique using heuristics to perform the input search\nand using the HTTP response status codes for classification. However,\nmost approaches do not keep track of code coverage, which is important\nto validate the solution. This work introduces a black-box RESTful API\nfuzzy testing tool that employs Reinforcement Learning (RL) for vul-\nnerability detection. The fuzzer operates via the OpenAPI Specification\n(OAS) file and a scenarios file, which includes information to communi-\ncate with the SUT and the sequences of functionalities to test, respec-\ntively. To evaluate its effectiveness, the tool was tested on the Petstore\nAPI. The tool found a total of six unique vulnerabilities and achieved\n55% code coverage.", "sections": [{"title": "1 Introduction", "content": "Software has had a positive impact over the years and its adherence contin-\nues to grow. The ubiquity of information technology, coupled with the seamless\navailability of web services, such as REST, has made software much more acces-\nsible in today's interconnected landscape. However, considering its prevalence,\nthe existence of software vulnerabilities is worrying. Nowadays, people depend\non technology, and as such, poor-quality software can have detrimental effects.\nConsidering that software is the backbone of many modern operations, ensuring\nsoftware reliability and security is crucial [18,23,10].\nSoftware testing is one of the main contributors to software quality capable\nof answering the validation and verification standard [16]. Software testing en-\ncompasses a very extensive taxonomy of methods, each focusing on improving"}, {"title": "2 State-of-the-Art", "content": "Fuzzy testing is a vulnerability detection technique that has shown remarkable\nresults in identifying software defects, particularly when automated [22,3,12,8].\nThis technique involves generating faulty input to feed the functionalities of\na SUT and monitoring its behavior according to the actual requirements and\nperformance of the system [28,23]. Since it consists of trying different inputs to\nfind vulnerabilities, this method is prone to low code coverage due to randomness,\nand inefficient execution due to redundant tests [22] leading to a higher rate of\nmissed vulnerabilities. However, it is generally more accurate and has fewer false\nalarms than static analysis [28].\nNowadays, web APIs are the de-facto standard for Software integration [19],\nbeing most software made available via RESTful APIs. As RESTful APIs gain\nmomentum, so does their testing. Recent advances in the literature show that\nblack-box testing of RESTful APIs has outputted effective results and is capable\nof contributing to the validity, reliability, and correctness of these systems.\nAtlidakis et al. [2] presented RESTler, a REST API fuzzy testing tool. The\ntool analyses the API specifications and generates a sequence of requests by\ninferring order dependencies and analyzing dynamic feedback of prior tests. Their\ntool was capable of detecting 28 bugs in various cloud services, which were"}, {"title": "3 Fuzz TheREST: A TestLab Module", "content": "This work presents FuzzTheREST, an automated black-box RESTful API fuzzer\nthat leverages RL to strategically generate input values. The tool integrates the\nTestLab ecosystem, which is an automated software testing framework that in-\ntegrates a diverse range of testing approaches across various levels and view-\npoints [6]. FuzzTheREST's approach utilizes as main data source the OAS file\nfor interoperability purposes. Several mutation methods were implemented to\ngenerate faulty input for the fuzzy tests. When successful, these result in the\nSUT's anomalous response, which the RL algorithm learns to improve input gen-\neration. In addition, the fuzzer documents the findings and performance of the\nRL, granting visibility into the process. This fuzzer sets itself apart through its\nnovel RL algorithmic approach, explainability, adaptability, and interoperability."}, {"title": "3.1 Reinforcement Learning Design", "content": "This section describes meticulously the design and execution of the novel RL\nalgorithmic approach employed in the fuzzer for improved input generation. Fig 1\ndepicts the custom environment and the agent characteristics, interactions, and\narchitecture. The following subsections describe the data acquisition process, RL\nenvironment, and Agent's design, showcased in Fig 1."}, {"title": "Data Sources and Processing", "content": "The fuzzer requires four main sources of infor-\nmation to operate: (i) the OAS file, containing information to communicate with\nthe SUT, (ii) the scenarios file, containing functionality execution sequences, (iii)\nthe mutators, responsible for generating the faulty input, and (iv) the algorithm\nparameters, which will impact the learning process of the agent, therefore affect-\ning its performance and the results obtained during testing.\nThe OAS file is divided into three main sections: (i) API information, (ii)\nAPI paths and operations, and (iii) reusable components for data schemas and\nsecurity schemes. Since the OAS file contains a huge corpus of unnecessary data,\nbefore training the RL algorithm, this file was processed for dimensional reduc-\ntion."}, {"title": "Reinforcement Learning Environment and Agent", "content": "The RL environment\nis composed of the observation and action space. The states of the observation\nspace are the HTTP status codes. The action space is defined by the actions\nthat the agent can take. In this context, it corresponds to the mutation methods\npreviously mentioned. Considering the nature of the mutation methods, there is\na relationship of one-to-many between the datatypes and actions.\nThe RL agent interacts with the environment, by acting according to the\ncurrent state. In this environment, the action is making an HTTP request with\nthe faulty input to the SUT, which generates a response containing the HTTP\nstatus code. The status is used to assign a reward, which can be positive or\nnegative depending on the outcome, to the agent. In this work, rewards were\nmodeled around HTTP status codes: 1XX rewards 0 points, 2XX and 3XX re-\nwards 5 points, 4XX takes 20 points, and 5XX, grants 10 points. This action and\nreward system allows the agent to learn over time. Nonetheless, it is important\nto choose a suitable agent to interact with such a specific environment.\nAn agent is an algorithm that learns from the environment and makes deci-\nsions to maximize cumulative rewards. This is done by figuring out the best pos-\nsible actions to take given its current state. The agent is a Multi-table Q-Learning\nalgorithm [13] that is well-suited to the environment developed. The Multi-table\napproach was motivated by the relationship between datatypes and actions, as-\nsigning each datatype its own Q-Table. To optimize learning, an epsilon-greedy\npolicy with exploration decay was implemented to balance exploitation and ex-\nploration."}, {"title": "4 Petstore API Case Study", "content": "To demonstrate the proposed fuzzer's effectiveness, a case study was conducted\non the Petstore API [1]. The Petstore API is an illustrative Java-based RESTful\nAPI, designed around the concept of a pet store business, which includes three\nmain entities: (i) Pets, (ii) Orders, (iii) and Users. For each entity, there are\nseveral variants of Create, Read, Update, and Delete (CRUD) methods. For the\ncase study, three distinct scenarios targeting the functions of each entity were\ncrafted in the CRUD order. This API is often used by many literature works in\nthe testing field [15,4,17,5], and as such it was considered most relevant for the\nbenchmark.\nThe Petstore API was deployed to a Docker container, to simulate a produc-\ntion environment, and a JaCoCo agent was set up for real-time code coverage.\nThe API was tested using the fuzzer with the parameters described in Table 1.\nIn bold are the parameters that had the best performance."}, {"title": "5 Conclusions", "content": "This work presents an RL-based black-box RESTful API fuzzer that tackles\ninput generation, exhaustive testing, and function dependency problems. The\nsystem was evaluated in a case study API and was able to uncover six unique\nvulnerabilities whilst achieving considerable code coverage, highlighting its learn-\ning capability. The experiment also shows that the HTTP status codes cannot"}]}