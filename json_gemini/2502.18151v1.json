{"title": "A Real-time Spatio-Temporal Trajectory Planner for Autonomous Vehicles with Semantic Graph Optimization", "authors": ["Shan He", "Yalong Ma", "Tao Song", "Yongzhi Jiang", "Xinkai Wu"], "abstract": "Planning a safe and feasible trajectory for autonomous vehicles in real-time by fully utilizing perceptual information in complex urban environments is challenging. In this paper, we propose a spatio-temporal trajectory planning method based on graph optimization. It efficiently extracts the multi-modal information of the perception module by constructing a semantic spatio-temporal map through separation processing of static and dynamic obstacles, and then quickly generates feasible trajectories via sparse graph optimization based on a semantic spatio-temporal hypergraph. Extensive experiments have proven that the proposed method can effectively handle complex urban public road scenarios and perform in real time. We will also release our codes to accommodate benchmarking for the research community", "sections": [{"title": "I. INTRODUCTION", "content": "The operation of autonomous vehicles in a complex urban environment presents great challenges. As one one of the core modules of autonomous driving, the trajectory planning needs to provide a spatio-temporal state sequence, guiding the vehicle to pass through or avoid various obstacles to reach certain locations on time. The usual way for the trajectory planning is to establish a unified potential field [1] or occupancy grid map [2] that can project different obstacles. Then, the problem is reduced to solving non-convex path planning problems. However, these methods based on two-dimensional space faces two limitations. First, it is difficult to fully utilize the semantic information (Such as vehicles, cyclists, pedestrians and lane markings, etc.) provided by the perception module, as obstacles are represented as potential or occupancy probabilities indiscriminately. Second, it is difficult to handle dynamic obstacles because projecting trajectories of dynamic obstacles onto a two-dimensional space is a distorted representation of time-dependent constraints. Therefore, it is necessary to further consider time dimensional information besides two-dimensional space and add semantic information to obtain a semantic spatio-temporal map, which can represent complex dynamic situations.\nAfter obtaining a semantic spatio-temporal map, we then need to search feasible and safe trajectories for autonomous vehicles. Existing methods based on state lattices [3] and spatio-temporal safety corridors [4] can produce feasible but not optimal solutions, because only a limited state space information has been utilized. Moreover, most existing methods ignore semantic information and cannot handle different types of obstacles differently.\nTo overcome the above problems, we propose a trajectory planning method based on multi-objective graph optimization (shown in Fig. 1). First, we construct a semantic spatio-temporal map with consideration of both static and dynamic obstacles. Second, we construct a semantic hypergraph and then reformulate the trajectory planning problem as a multi-objective graph optimization problem, which extensively expands the state space of feasible solutions. Last, we use the sparse graph optimization solver g2o [5] to solve the designed graph optimization problem to achieve the real-time performance. The contributions of this paper are as follows:\n\u2022 A new multi-dimensional semantic spatio-temporal map that can optimize the representation of static and dynamic semantic environments is proposed.\n\u2022 A spatio-temporal planner based on graph optimization that can handle multi-modal obstacles discriminatively is proposed.\n\u2022 Extensive experiments are performed to validate the proposed real-time planner, and the code will be released\u00b9.\nThe remainder of this paper is organized as follows. Section II discusses the related work. Section III describes the proposed trajectory planning method. Section IV presents the details of the experiments and the results. Finally, Section V concludes the paper."}, {"title": "II. RELATED WORK", "content": "The various trajectory planning methods proposed over the decades can be divided into two categories based on whether path (lateral) planning and velocity (longitudinal) planning are decoupled. A path-velocity decoupled planner first plans a path, and then attaches a velocity profile along the planned path (e.g., [6], [7], [8]). This cascaded process can be iterated multiple times [9] for better results. To further guarantee the solution completeness and optimality, more work focuses on coupled spatio-temporal planning that can simultaneously output paths and speeds. Ziegler et al. [3] made preliminary attempts by constructing a directed acyclic graph using state lattices sampled from spatio-temporal manifolds. Afterwards, improvements were made in lattice generation and search methods (e.g., [10], [11], [12]). However, these methods are difficult to achieve real-time performance due to huge computational complexity. Therefore, the sampling based Rapidly-Exploring Random Tree (RRT) and its derived methods, which have a speed advantage in high-dimensional space, are applied to spatio-temporal planning [13], [14]. Nevertheless, the accuracy of above methods is inevitably limited by the low sampling density in the state space.\nFurthermore, with the development of UAV planning methods in 3D space [15], Ding et al. [4], [17] migrated such methods to the spatio-temporal planning of unmanned vehicles. The nonlinear optimization problem with non-convex constraints can be reduced to a typical quadratic optimization problem by constructing a convex space sequence in non-convex environments and optimizing segmented B\u00e9zier curves, which greatly improves the computational efficiency while ensuring certain safety. The same method is presented in studies [18], [19], [20], [21]. However, Deolasee et al. [22] pointed out the significant limitation of this method is that the limited cuboidal corridor representation fails to make the most of free space for optimization, leading to the suboptimality of the solution. In addition, Gao et al. [23] mentioned that this type of hard constraints-based method has an inherent property that all free space in the safety corridor is treated equally, making the generated trajectories potentially very close to obstacles, as the gradient information formed by obstacles (especially dynamic obstacles) is ignored. Therefore, methods with soft constraints that use gradient information formed by obstacles, can greatly expand the space of feasible solutions, which lay the foundation for searching the optimal solution. However, so far, to the best of our knowledge, there is no spatio-temporal planning method based on soft constraint optimization."}, {"title": "B. Graph optimization", "content": "Many problems in autonomous driving are sparse, such as simultaneous localization and mapping (SLAM). Based on the sparsity, these problems can be reduced from complex nonlinear optimization problems to the least squares problems, which are easily solvable [5]. For example, graph optimization is one of the commonly used methods, and its related nonlinear optimization solver g2o [5] has been widely used in the SLAM field [24]. This method has been applied by R\u00f6smann et al. [25] to an elastic band-based trajectory planning of low-speed robots. The flexibility and robustness exhibited by this method have made it extremely popular among the robotics community. However, due to the large amount of calculation, there is no further research so far to make it adaptable to autonomous vehicles whose speed and planned trajectory length are dozens of times higher."}, {"title": "III. METHODOLOGY", "content": "The framework of the proposed trajectory planning method is shown in Fig. 2. It directly receives the drivable area and trajectory prediction of semantic obstacles offered by the perception module and the trajectory point sequence (also called reference trajectory) provided by the behavior planning module, and outputs a safe, feasible trajectory that meets the vehicle kinematics and dynamics requirements to the control module."}, {"title": "B. Semantic spatio-temporal map construction", "content": "In our method, we separate static obstacles and dynamic obstacles because they have different sparsity in constraining trajectory points. Static obstacles only exert a repulsive force on trajectory points that are spatially close to them, whereas dynamic obstacles consider the additional dimension of temporal distance to adjust the trajectory. Therefore, our semantic spatio-temporal map consists of a 2D static collision-free corridor and a 3D semantic spatio-temporal state graph. Here, if the speed of the obstacle is less than 0.2 m/s, we classify it as static, otherwise it is dynamic."}, {"title": "1) Static obstacle handling", "content": "The static obstacles occupy most of the grid when overlaying the layers of non-drivable areas, static semantic obstacles, and static irregular obstacles on a grid map. If all static grids are allowed to constrain the trajectory, the computational load will increase sharply. So, the main purpose of static obstacle handling is to avoid the waste of memory space and computing resources to represent a large number of static obstacles. According to the observation, when autonomous vehicles pass by static obstacles, they only need to maintain a safe distance from the obstacles closest to both sides of their route, rather than those farther away. Therefore, we propose a two-dimensional static collision-free corridor, which expresses the existence of static obstacles in a dual (i.e., obstacle free) manner."}, {"title": "Algorithm 1: Static Collision-free Corridor Generation", "content": "1. Inputs:\nDrivable area map $M_{ob}$, Static obstacle set $O_{static}$, Reference trajectory points {$S_0, S_1, ..., S_n$}$_{t \\in SE(2)}$ at time $t$, Minimum distance to obstacle $d_{obs}$, Maximum search distance $d_{max}$\n2. Initialize:\nBoundaries $B_i = \\emptyset$ of point $s_i$, Candidate Boundaries $B = \\emptyset$, Safety Corridor $B^* = \\emptyset$\n3. $M_{esdf} \\leftarrow ESDFMapGeneration(M_{ob}, O_{static})$\n4. for $s_i = s_0, s_1, ..., s_n$ do // Traverse every point\n5. $B_i \\leftarrow BoundarySearch(M_{esdf}, s_i, d_{obs}, d_{max})$\n6. $B \\leftarrow B \\cup B_i$\n7. end for\n8. $B^* \\leftarrow BoundaryAssociation(B)$\n9. return $B^*$"}, {"title": "ESDFMapGeneration:", "content": "This function projects the drivable areas of the road and static obstacles onto a grid map, and further calculates the Euclidean Signed Distance. Ultimately, the map will contain interval distance information from each obstacle free grid to the nearest obstacle grid."}, {"title": "BoundarySearch:", "content": "This function queries the ESDF map from right to left at a certain step size in the direction perpendicular to orientation of each trajectory point, and records grid points with a distance of $d_{obs}$ (mentioned in the Line 1 of Algorithm 1) from the obstacle (see Fig. 3)."}, {"title": "BoundaryAssociation:", "content": "This function pairs the left and right boundary points of each trajectory point in the vertical direction. When a trajectory point has multiple boundary pairs, it will choose the boundary pair with a high overlap rate with the boundary pair of the previous trajectory point. Finally, when connecting the left and right boundaries of all trajectory points, a closed safety corridor (see Fig. 3) is generated. It is worth mentioning that the collision-free corridor connected by discrete points can be made continuous through interpolation methods."}, {"title": "2) Dynamic Obstacle Handling", "content": "Typically, dynamic obstacles include moving vehicles, cyclists, and pedestrians. We simplify their predicted spatio-temporal poses through separate collision models and place them in a spatio-temporal domain composed of (x, y, t) (see Fig. 5), making it easier to search when constructing associations with the trajectory points of ego vehicle. It should be noted that the interaction effects of changes in the trajectory of ego vehicles on dynamic obstacles have been taken into account in behavior planning. In this work, we assume that the predicted trajectory of dynamic obstacles is fixed, and only the trajectory of ego vehicle will be affected.\nThe collision model is pill shaped (see Fig. 5), consisting of a line segment and a circle whose center can move on the line segment. The two endpoints of the line segment are the center points of the front and rear of the detected semantic bounding box, and the radius of the circle is equal to half the width of the bounding box. This allows for the preservation of the perceived length and width of obstacles while being simpler than a rectangular collision detection model. Note the ego vehicle needs to maintain a distance greater than the radius of the circle from the line segment when planning its trajectory."}, {"title": "C. Hypergraph generation and graph optimization", "content": "Here, we construct a hypergraph of sparse connections between obstacles and ego vehicle trajectory points and between ego vehicle trajectory points (see Fig. 6), and then use the g2o solver to optimize the graph to find the solution. We also call our method a spatio-temporal elastic band planner (STEB planner) as the generation of feasible trajectories during graph optimization is like deforming a spatio-temporal elastic band under various constraints.\nThe first task is to determine the hypergraph nodes. The classic trajectory planning [25] uses robot state sequence consisting of {x,y, $\\theta$} $\\in$ SE(2) in two-dimensional Special Euclidean Group as nodes. To adapt to dynamic environments, the variables are expanded to {x, y, $\\theta$, t}. Aiming to decrease computational complexity, we obtain $\\theta_k$ through the direction formed by two adjacent state points by (1), which can reduce the number of optimization variables and eliminate additional non holonomic motion constraints. Therefore, the final optimization variable was set to $S_k = {x_k, y_k, t_k}$, also called a STEB node, initialized from the reference trajectory. In addition, we define the pose point of reference trajectory $S' = {S'_k}_{k=1,\u2026\u2026,m}$, $m \\in N$ as $s'_k = {x'_k, y'_k, \\theta'_k, t'_k}$.\n$\\theta_k = arctan(\\frac{y_{k+1} - y_k}{x_{k+1}-x_k})$ (1)\nThe key idea of our proposed method is to adjust and optimize STEB nodes through multi-objective optimization methods by a weighted sum model as follows:\n$S^* = argmin \\sum \\alpha_i f_i(S)$ (2)\nwhere $S^*$ denotes the optimized STEB nodes, $S = {S_k}_{k=1,\u2026,n}$, $n \\in N$, $f_i(S)$ is the component objective functions, and $\\alpha_i$ is its weight. It is worth noting that the cost formed by the $f_i(S)$ terms in multi-objective optimization is considered a soft constraint. For the sake of convenience, the constraint terms mentioned later in the text refer to the sub-objective functions here.\nThe second step is to construct the edges of the hypergraph. There are two types of constraints for multi-objective optimization functions: continuous constraints and piecewise continuous constraints. The error functions for discontinuous constraints can be found in (3), (4), (5), and the specific constraint edges we constructed are as follows:\n$E_{inter} (x_k, x_{min}, x_{max}) = \\begin{cases} 0, & x_{min} \\leq x \\leq x_{max} \\\\ x_k - x_{max}, & x_k > x_{max} \\end{cases}$ (3)\n$E_{more} (x_k, x_{min}) = \\begin{cases} x_{min} - x_k, & x_k < x_{min} \\\\ 0, & x \\geq x_{min} \\end{cases}$ (4)\n$E_{less} (x_k, x_{max}) = \\begin{cases} 0, & x_k \\leq x_{max} \\\\ x_k - x_{max}, & x > x_{max} \\end{cases}$ (5)\nWhere $X_{min}$ and $X_{max}$ are parameters that predefine the minimum and maximum limits.\nC1: Shortest path distance constraint:\n$f_1(S) = \\sum_{k=1}^{n-1} ||(x_{k+1} - x_k, y_{k+1} - y_k)||$ (6)\nC2: Kinematic (minimum turning radius $r_{min}$) constraint:\n$f_2(S) = \\sum_{k=1}^{n-2} E_{more}(r_k, r_{min})$ (7)\n$r_k = \\frac{||(x_{k+1} - x_k, y_{k+1} \u2013 y_k)||}{2 \\times sin( |(\\theta_{k+1} \u2013 \\theta_k)| \\times 0.5)}$ (8)\nC3: Time constraints: including efficiency (less time spent) and to avoid a decrease in trajectory points over time:\n$f_3(S) = \\sum_{k=1}^{n-1} (t_{k+1} - t_k)$ (9)"}, {"title": "IV. EXPERIMENTAL RESULTS", "content": "We validate our method in the CARLA [16] simulation with a frequency of 20Hz. To demonstrate the robustness of the proposed algorithm for practical applications, we use the current position and bounding box of the obstacles output by the simulation, and the obstacle tracking is implemented by the Kalman filter, while trajectory prediction is generated by a constant velocity model based on High Definition (HD) map. To ensure the objectivity and fairness of experiments and analyses, our behavioral planning module, implemented as a simple finite state machine, only outputs reference trajectories with uniform longitudinal speed along with the routing path without making decisions that may interfere with the experiment. Additionally, the spatial resolution of the reference trajectory is set to 0.5 meters."}, {"title": "B. Qualitative Results", "content": "To demonstrate that the proposed method can cope with various common static and dynamic scenarios, the following representative experimental cases are conducted."}, {"title": "1) Static obstacle avoidance (Scenario A&B)", "content": "As shown in Fig. 7, we conducted experiments in two scenarios. The ego car needs to deal with the stationary obstacles in front (one or more parked cars in the red box). It can be seen from Figs. 7(a) and (b) that the continuous smooth trajectories planned by our method can maintain an appropriate distance from the obstacles. Figs. 7(c) and (d) show that our method considers the current state of the vehicle in speed planning and reduces speed in curved sections."}, {"title": "2) Unprotected left turn (Scenario C)", "content": "As shown in Figs. 8(a) and (b), the ego car in the blue box is ready to turn left following the blue arrow, but the car needs to negotiate with the consecutive obstacle cars in the red box traveling along the red arrow. This scenario indicates the interactive ability of the proposed method for the ego vehicle with vehicles from different directions. Experimental results show that our method can quickly find a feasible and safe trajectory in continuous opposing traffic flows."}, {"title": "3) Merging into dense traffic (Scenario D)", "content": "This case demonstrates the ability of our proposed method to interact with relatively high-speed traffic in the same traveling direction. According to Figs. 8(c) and (d), we can see that the ego car on the ramp plans a trajectory that can merge into the main road. After merging into the traffic flow, the ego car begins to follow the preceding vehicle by adjusting its speed."}, {"title": "4) Overtaking on an urban roadway (Scenario E)", "content": "In this scenario, ego vehicle needs to borrow the opposite lane on a two-way two-lane to overtake the slow-moving vehicle ahead. To ensure safety, it is necessary to quickly overtake the preceding vehicle and leave the opposite lane to return to the lane of the vehicle. As can be seen from Figs. 8(e) and (f), our method can complete the overtaking task quickly while ensuring a safe distance between vehicles."}, {"title": "C. Quantitative Results", "content": "This section will quantitatively verify that the proposed method can enable different semantic elements to impose different constraints on the planned trajectory, thereby meeting various requirements, such as safety. We will compare it with a similar method SSC proposed by Ding et al. [4], which constructs hard constraints for quadratic optimization problems using spatio-temporal corridors in the Fren\u00e9t frame. We design"}, {"title": "1) Comparison of planned trajectories", "content": "Experiments were conducted on the proposed STEB and SSC with the two aforementioned dynamic obstacles under different behavior planning directives (proceed and yield). The resultant planned trajectories are illustrated in Fig. 9, with corresponding metric analyses presented in Table II. The data reveal that STEB has a larger PET compared to SSC, with notably larger PET values observed during pedestrian interactions relative to vehicle interactions. This demonstrates that the trajectories planned by our method offer better safety profile compared to SSC. Furthermore, it highlights STEB'S capacity to differentially respond to diverse semantic objects based on the imposed trajectory constraints.\nMeanwhile, the average velocities of the STEB trajectory are not significantly deviate from those of SSC (slightly higher in some cases), indicating that our method can maintain high efficiency while providing better safety.\nIt is important to acknowledge that SSC, based on polynomial B\u00e9zier curve optimization, demonstrates superior comfort metrics. Notably, when the ego vehicle is required to traverse the conflict zone prior to pedestrian passage, STEB exhibits large jerk values. This phenomenon can be attributed to STEB's parameter settings, which necessitates rapid acceleration of the ego vehicle to ensure a safer separation distance from pedestrians, followed by deceleration post-conflict zone to adhere to speed limit constraints. In this scenario, reducing the weights of obstacle constraints C6 or increasing the weights of dynamic constraints C4 can result in a more comfortable trajectory, but it may have the side effect of lowering the PET value. These adjustments can be customized according to user needs."}, {"title": "2) Real-time Performance", "content": "Fig. 10 and Table III show the computational time of our proposed method in each scenario. The average, maximum, and minimum single run time of our algorithm in all experiments are 12.63ms, 29.48ms, and 2.9ms, respectively. The maximum value occurs when merging into dense traffic flow from a curved ramp. In addition, in the experiment of scenario F, our average and maximum time consumption are better than those of SSC. Overall, this shows that our method has real-time computing performance."}, {"title": "V. CONCLUSION AND FUTURE WORK", "content": "In this paper, we propose a trajectory planning method for autonomous vehicles based on multi-objective graph optimization. This method innovatively uses two-dimensional safety corridors and semantic spatio-temporal state graph to respectively represent the spatial constraints of static obstacles and spatio-temporal constraints of dynamic obstacles on trajectory planning. Then, by constructing a semantic spatio-temporal hypergraph, we transform trajectory planning problem into a multi-objective optimization problem and solve it using graph optimization theory. At the end, extensive experiments have been conducted to demonstrate that our method can utilize multi-modal results output from perception to cope with complex urban scenarios and achieves real-time computational performance.\nIn the future, we will design a matching behavior planner, which can provide better initial values for the proposed method and adjust its parameters as the scene changes to achieve better performance. Additionally, more types of constraints (such as social relationships) can be incorporated into the edges of graph optimization to further enhance trajectory planning."}]}