{"title": "VecLSTM: Trajectory Data Processing and Management for Activity Recognition through LSTM Vectorization and Database Integration", "authors": ["Solmaz Seyed Monir", "Dongfang Zhao"], "abstract": "Activity recognition is a challenging task due to the large scale of trajectory data and the need for prompt and efficient processing. Existing methods have attempted to mitigate this problem by employing traditional LSTM architectures, but these approaches often suffer from inefficiencies in processing large datasets. In response to this challenge, we propose VecLSTM, a novel framework that enhances the performance and efficiency of LSTM-based neural networks. Unlike conventional approaches, VecLSTM incorporates vectorization layers, leveraging optimized mathematical operations to process input sequences more efficiently. We have implemented VecLSTM and incorporated it into the MySQL database. To evaluate the effectiveness of VecLSTM, we compare its performance against a conventional LSTM model using a dataset comprising 1,467,652 samples with seven unique labels. Experimental results demonstrate superior accuracy and efficiency compared to the state-of-the-art, with VecLSTM achieving a validation accuracy of 85.57%, a test accuracy of 85.47%, and a weighted F1-score of 0.86. Furthermore, VecLSTM significantly reduces training time, offering a 26.2% reduction compared to traditional LSTM models.", "sections": [{"title": "I. INTRODUCTION", "content": "Predicting the trajectories of moving objects, such as vehicles or individuals, play a crucial role in various domains, including transportation, urban planning, and security [1]\u2013[3]. However, this task is inherently challenging due to the complexity and dynamic nature of real-world movements [4], [5]. In the context of ubiquitous computing, where understanding user behavior is vital [6]-[8] Identifying a mode of transportation such as driving or walking\u2014is an essential aspect of user behavior since it adds contextual information to mobility data [7]. State-of-the-art solutions [9], [10] for trajectory prediction mostly rely on machine learning models, particularly recurrent neural networks (RNNs) and Long Short-Term Memory (LSTM) networks. While these approaches have shown promising results, they come with their limitations: Traditional trajectory prediction models may struggle to capture intricate patterns in spatial-temporal data [11], especially when faced with irregularities or abrupt changes in movement behavior [12].\nThis paper presents VecLSTM (Vectorized Long Short-Term Memory), a framework that aims at enhancing trajectory prediction accuracy through advanced vectorization methodologies. Traditionally, trajectory data is treated as raw sequences, but VecLSTM introduces a vectorization process that transforms raw geographical coordinates (latitude, longitude) into a structured format resembling a grid-based heatmap. This structured representation allows the model to discern spatial patterns more effectively. Additionally, VecLSTM incorporates a one-dimensional convolutional neural network (CNN) for further feature extraction.\nAt a high level, the VecLSTM method involves the following steps. Firstly, the trajectory data is normalized, typically through preprocessing steps like scaling. Next, the normalized data is converted into a 2D grid representation using a vectorization function. This function essentially transforms the geographical coordinates into a structured grid format suitable for analysis. Subsequently, the vectorized data undergoes CNN-based feature extraction, where the CNN model is utilized to extract additional features from the grid representation. Finally, the processed data is fed into an LSTM network for prediction. By combining the outputs of the CNN and LSTM models, the hybrid architecture aims to capture both local and global spatial dependencies, thereby offering an improved understanding of the underlying movement patterns. Overall, the VecLSTM approach represents a comprehensive strategy to enhance trajectory prediction accuracy by leveraging vectorization and CNN-based feature extraction within a hybrid LSTM-CNN architecture, which overcomes the limitations of traditional sequence-based approaches.\nTo evaluate the effectiveness of VecLSTM method, we employ standard evaluation metrics such as Mean Squared Error (MSE) and F1-score. We conduct experiments on large-scale real-world trajectory datasets, comparing the performance of VecLSTM vectorization-enhanced model against traditional LSTM-based approaches. Our proposed VecLSTM framework leverages advanced vectorization techniques and optimized database operations to enhance the accuracy and efficiency of motion prediction, addressing the limitations of existing approaches. While traditional relational databases like MySQL are not typically used for high-dimensional vector retrieval, we leverage MySQL for its scalability and familiarity in handling structured data. Our method benefits from efficient indexing of vectorized trajectory data, allowing for rapid retrieval in large datasets.\nIn summary, this paper makes the following contributions:"}, {"title": "II. RELATED WORK", "content": "Trajectory prediction has been a subject of considerable interest in recent research, with several studies proposing diverse methodologies to address this complex problem. Numerous studies have explored different approaches to handle trajectory data and extract meaningful insights [13]. This research proposed [14] a deep learning-based method for trajectory prediction in urban traffic scenarios, achieving state-of-the-art accuracy by incorporating spatial-temporal attention mechanisms. However, while these methods have shown promising results, they often lack the ability to efficiently process large-scale datasets and capture complex spatial-temporal dependencies.\nThis research [15] proposed a hybrid CNN-LSTM model for aircraft 4D trajectory prediction, achieving significant improvements in prediction accuracy by combining CNN for spatial feature extraction and LSTM networks for temporal feature modeling [15]. Building upon these advancements, our research introduces a novel hybrid architecture specifically designed for trajectory prediction to addresses the limitations of existing trajectory prediction methods by proposing a novel hybrid architecture that further enhances the extraction and utilization of spatial-temporal features.\nTraditional methods like SMOT and CB-SMOT classify stops and moves without confidence levels, leading to ambiguities. Recent models estimate stop probabilities to filter low-confidence entries and reduce false positives [16]. Our VecLSTM framework advances this by using vectorization layers for efficient spatio-temporal data processing, outperforming traditional LSTM models in accuracy and efficiency. The exploration of parallelization strategies in [17], which aims to reduce training times for extensive datasets by distributing computations across multiple processors, resonates with this research's goal to enhance the efficiency of LSTM and CNN models when applied to trajectory prediction tasks. The paper referenced in [18], while not considering time explicitly, introduces a perspective aligning with this paper. The suggestion to model time as the third dimension of the grid or incorporate it as a parameter in each vector reflects a nuanced understanding of temporal dynamics. By addressing the temporal aspect through LSTM models and assessing the impact of vectorization, we bridge the gap between temporal modeling strategies and the efficiency of trajectory prediction models, contributing to the broader conversation on optimizing neural networks for sequential data, compared to conventional approaches like those based on GCNs [19] for traffic forecasting.\nDrawing from the observation made in previous research [20] regarding the lack of specific details in flawed urban planning detection using GPS trajectories, this research seeks to address this gap by providing a comprehensive analysis of the impact of vectorization on the training efficiency of LSTM models in the context of trajectory data. While the mentioned paper raises concerns about insufficient information on modeling techniques and methodologies, this study aims to contribute to the scientific rigor and reproducibility of trajectory-based analyses.\nWhile recent approaches such as TPNet [9] have made significant strides in motion prediction for autonomous driving by incorporating multimodal predictions and physical constraints, our proposed VecLSTM framework introduces several novel advancements that further enhance trajectory prediction accuracy and efficiency. Unlike TPNet [9], which operates as a two-stage prediction framework, VecLSTM seamlessly integrates advanced vectorization techniques with optimized vector database operations, resulting in a more streamlined and efficient approach to trajectory prediction. By leveraging the power of Long Short-Term Memory (LSTM) networks in conjunction with optimized vector database methods, VecLSTM effectively captures both temporal and spatial dependencies within trajectories while minimizing query times and improving system efficiency.\nThe Spatio-Temporal GRU model [21] represents a significant step forward in integrating spatial and temporal data, our proposed VecLSTM offers further advancements in efficiency, accuracy, and scalability. By addressing the shortcomings of previous models and leveraging optimized vectorization techniques. The approach proposed in [22] emphasizes the importance of analyzing human movement dynamics, particularly in understanding transportation modes' influence on behavior and mobility patterns. It highlights the significance of accurately identifying transportation modes, not only for improving traffic control and transport management. However, our approach builds upon this foundation by introducing a novel framework that leverages advanced vectorization techniques and optimized database operations. Unlike traditional methods that rely solely on raw GPS data, VecLSTM integrates these techniques to enhance trajectory prediction accuracy significantly. By transforming raw geographical coordinates into structured representations resembling grid-based heatmaps, VecLSTM captures both local and global spatial dependencies more effectively. Additionally, the incorporation of a one-dimensional CNN further enhances feature extraction, leading to improved prediction outcomes. Furthermore, VecLSTM advocates for the adoption of optimized vector database techniques to minimize query durations and fortify system efficiency."}, {"title": "III. PROBLEM STATEMENT", "content": "Let $T = \\{T_1, T_2, ..., T_N \\}$ denote a set of trajectories, where each trajectory $T_i$ is a sequence of spatial coordinates over time:\n$T_i = \\{(x_{i1}, y_{i1}, t_{i1}), (x_{i2}, y_{i2}, t_{i2}), ..., (x_{im_i}, y_{im_i}, t_{im_i})\\}$,\nwhere $(x_{ij}, y_{ij})$ represents the spatial coordinates and $t_{ij}$ represents the time stamp of the $j$-th point in trajectory $T_i$. The goal of trajectory is to assign each trajectory $T_i$ to one of C predefined classes $\\{c_1, c_2,...,c_c\\}$. Given a labeled dataset $\\{(T_1, y_1), (T_2, y_2),..., (T_n, y_n)\\}$, where $y_i \\in \\{c_1, c_2,..., c_C\\}$ is the class label of trajectory $T_i$, we aim to learn a function $f$ that maps trajectory $T_i$ to its corresponding class label $y_i$:\n$f: T\\rightarrow \\{c_1, c_2, ..., c_C\\}$,\nsuch that the classification accuracy is maximized. Given a dataset of trajectory data consisting of latitude (lat), longitude (lon), altitude (alt), and metadata coordinates, the objective is to predict the future trajectory points based on historical trajectory information. This prediction task can be formulated as follows:\nInput: A sequence of historical trajectory points $X = (lat_i, lon_i, alt_i, metadata_i)^N_{i=1}$, where N is the number of trajectory points in the sequence.\nOutput: Predicted future trajectory points $Y = \\{(lat_{N+1}, lon_{N+1}, alt_{N+1}, metadata_{N+1}), ..., (lat_{N+K}, lon_{N+K}, alt_{N+K}, metadata_{N+K})\\}$, where K is the number of future points to predict."}, {"title": "IV. METHODOLOGY", "content": "The VecLSTM framework seamlessly combines advanced vectorization techniques with optimized vector database operations. This method optimizes data representation, expedites computations, and enhances model training efficiency, offering a comprehensive solution for efficient trajectory data processing. The methodology consists of the following key components. We propose a vectorization mechanism to transform raw trajectory data into a structured and efficient format. This process involves encoding trajectory sequences into numerical vectors, capturing spatial and temporal information in a compact representation. The vectorization technique allows for the efficient storage and manipulation of trajectory data, facilitating faster processing and analysis compared to traditional non-vectorized methods.\nDefinition of vectorization. Let g denote a function that maps a trajectory $T_i$ to a feature vector $v_i$: $g: T_i \\rightarrow v_i$ where $v_i \\in \\mathbb{R}^d$ is a d-dimensional feature vector representing $T_i$. Let's denote the raw trajectory data as X = $(x_1,x_2,x_3, x_4)$, where $x_1$ represents the latitude, $x_2$ represents the longitude, $x_3$ represents the altitude, and $x_4$ represents the metadata. The vectorization process involves transforming the raw trajectory data into a structured format suitable for deep learning models.\nThe vectorization function vectorize($\\cdot$) maps the raw trajectory data to a vectorized representation:\nvectorize(X) = V =\n$\n\\begin{bmatrix}\nv_{1,1} & v_{1,2} & ... & v_{1,M} \\\\\nv_{2,1} & v_{2,2} & ... & v_{2,M} \\\\\n... & ... & ... & ... \\\\\nv_{L,1} & v_{L,2} & ... & v_{L,M}\n\\end{bmatrix}\n$\nwhere:\n$\n\\begin{aligned}\n& \\bullet \\quad X \\text { is the raw trajectory data. } \\\\\n& \\bullet \\quad V \\text { is the vectorized representation. } \\\\\n& \\bullet \\quad v_{i,j} \\text { represents the } j \\text {-th feature value of the } i \\text {-th trajectory } \\\\\n& \\text { point. } \\\\\n& \\bullet \\quad L \\text { is the length of the sequence. } \\\\\n& \\bullet \\quad M \\text { is the number of features. }\n\\end{aligned}\n$\nThe vectorization process converts the raw trajectory data into a structured format suitable for deep learning models. Each row of V corresponds to a trajectory point, and each column represents a feature of the trajectory data. This representation allows efficient processing of trajectory data by deep learning models."}, {"title": "A. Integration of VecLSTM", "content": "We propose the integration of the VecLSTM model into MySQL for efficient handling of vectorized data. This involves optimizing database operations to store and retrieve trajectory data that has been transformed into a structured format suitable for deep learning models. By implementing schema enhancements tailored for vector data [23] and utilizing SQL optimizations, we aim to streamline data storage and query processing. Performance metrics such as query response times and throughput will validate the effectiveness of our approach.\nThe vectorization process aims to transform raw trajectory data into a structured format suitable for neural network input. Given a trajectory represented by latitude (lat), longitude (lon), and altitude (alt), the vectorization function Vect() maps this trajectory to a 10x10 array, capturing spatial information. $T = [lat, lon, alt]$ Where lat, lon, and alt are vectors of latitude, longitude, and altitude values, respectively. The vectorization function Vect($\\cdot$) proceeds as follows:"}, {"title": "B. VecLSTM Model Architecture", "content": "Following vectorization, the LSTM and CNN models are combined into a single model using the concatenate layer. By combining the strengths of LSTM and CNN architectures in this way, the resulting model can effectively capture both temporal and spatial dependencies within trajectory data, leading to improved prediction accuracy. The hybrid architecture combines the spatial feature extraction capability of CNNs with the temporal sequence modeling capability of LSTMs to effectively predict future trajectory points. Define a hybrid model $f$ combining LSTM and CNN:\n$f(v_i) = softmax(FC(CNN(LSTM(v_i))))$ (4)\nwhere LSTM($\\cdot$) captures temporal dependencies, CNN($\\cdot$) extracts spatial features, and FC($\\cdot$) is a fully connected layer for classification. Given the training set $\\{(v_1, y_1), (v_2, y_2), ..., (v_N, y_N)\\}$, the objective is to minimize the cross-entropy loss:\n$C=-\\frac{1}{N} \\sum_{i=1}^{N} \\sum_{c=1}^{C} \\mathbb{1}_{\\{y_i=c\\}} log P_{ic}$ (5)\nwhere $p_{ic}$ is the predicted probability that $v_i$ belongs to class c, and $\\mathbb{1}_{\\{\\cdot\\}}$ is the indicator function."}, {"title": "1) Spatial Feature Extraction with CNN", "content": "Given the vectorized representation V of the trajectory data, the CNN extracts spatial features $F_{spatial}$ using convolutional layers. Let CNN($\\cdot$) represent the CNN model, and $F_{spatial}$ = CNN(V) denote the spatial feature map obtained by passing V through the CNN layers."}, {"title": "2) Temporal Sequence Modeling with LSTM", "content": "The LSTM processes the concatenated input sequence $S = (F_{spatial}, F_{temporal})$ to capture temporal dependencies. The LSTM consists of input gates, forget gates, output gates, and a memory cell. The LSTM updates its hidden state $h_t$ and memory cell $c_t$ at each time step t according to the following equations:\n$i_t = \\sigma(W_i[s_t, h_{t-1}] + b_i)$ (6)\n$f_t = \\sigma(W_f [s_t, h_{t-1}] + b_f)$ (7)\n$o_t = \\sigma(W_o [s_t, h_{t-1}] + b_o)$ (8)\n$g_t = tanh(W_g [s_t, h_{t-1}] + b_g)$ (9)\n$c_t = f_t \\cdot c_{t-1} + i_t \\cdot g_t$ (10)\n$h_t = o_t \\cdot tanh(c_t)$ (11)\nwhere $\\sigma(\\cdot)$ denotes the sigmoid function, $\\cdot$ denotes element-wise multiplication, $W_i, W_f, W_o$, and $W_g$ are weight matrices, $b_i, b_f, b_o$, and $b_g$ are bias vectors, $s_t$ is the input sequence at time step t, and $h_{t-1}$ is the previous hidden state."}, {"title": "3) Efficiency and Scalability with VecLSTM", "content": "VecLSTM, a novel framework combining vectorization, Convolutional Neu-ral Networks (CNN), and Long Short-Term Memory (LSTM) models, is engineered for unparalleled efficiency and scalability in processing trajectory data. The VecLSTM framework offers efficiency and scalability in trajectory prediction tasks through optimized data processing and model architecture."}, {"title": "4) Efficiency through Vectorization", "content": "VecLSTM streamlines the processing pipeline by first vectorizing trajectory data into a structured 10x10 array, optimizing it for LSTM input. This vectorization process significantly reduces training and inference times, enabling rapid analysis of trajectory datasets. Vectorization of trajectory data X results in a structured representation V, facilitating efficient computations. Let vectorize($\\cdot$) denote the vectorization function, then V = vectorize(X). This vectorized representation enables faster model training and inference."}, {"title": "5) Scalability in Handling Large Datasets", "content": "VecLSTM offers a scalable solution for processing trajectory datasets. While its combination of vectorization, CNN for spatial feature extraction, and LSTM for temporal dependency capture enhances scalability. VecLSTM scales efficiently to handle large-scale trajectory datasets. The vectorized representation V reduces memory footprint and computational complexity, allowing the model to process vast amounts of trajectory data without compromising performance."}, {"title": "V. EXPERIMENTS", "content": "Data Sets. The GeoLife dataset contains GPS trajectories from 182 users spanning three years, from April 2007 to August 2012. It includes over 17,000 trajectories, covering a distance of over 1.2 million kilometers and totaling more than 48,000 hours. The data records latitude, longitude, and altitude at various sampling rates, with 91 percent densely represented with updates every 1-5 seconds or 5-10 meters. The dataset captures diverse outdoor activities such as commuting, shopping, sightseeing, and sports. It holds great potential for research in mobility patterns, activity recognition [6], [7], [13], [25], [26]. For this research, a subset of the dataset was specifically utilized. This subset, consisting of 1,467,652 rows and 7 columns-namely, time, lat, lon, alt, label, user, metadata. We conducted experiments to evaluate the performance of models with and without vectorization. The experiments aimed to assess the impact of vectorization on training time and model performance metrics."}, {"title": "A. Experimental Setup", "content": "We used a dataset comprising 1,467,652 samples with 7 unique labels. For both experiments, we employed a neural network architecture consisting of LSTM layers followed by a Dense layer. The total number of parameters in the models was 71,357, all of which were trainable. Our experiments were conducted using consistent hardware configurations: NVIDIA RTX 3050 GPUs and an Intel i5-11400H processor clocked at 2.70GHz, with 16GB of RAM. The implementation, primarily in Python."}, {"title": "B. Effect of Vectorization on Training Dynamics", "content": "The training dynamics were influenced by the inclusion of vectorization, which efficiently translated raw trajectory data into a format suitable for machine learning. This step significantly reduced preprocessing time, showcasing the importance of effective data transformation. The Adam optimizer [27], [28] further played a crucial role in the training process. By dynamically adjusting learning rates for each parameter. The impact of vectorization on the training efficiency. In our research, we compare models trained with and without vectorization."}, {"title": "1) Training without vectorization", "content": "The trained classification model is a Sequential neural network implemented using TensorFlow and Keras, featuring a two-layer Long LSTM architecture followed by a Dense output layer. This model excels in capturing temporal dependencies within sequential data. The model undergoes a rigorous training regimen over 20 epochs, during which it dynamically adjusts its parameters to minimize the categorical crossentropy loss. This training results in a remarkable accuracy improvement, soaring from an initial 76.94% to a highly commendable 83%. The validation set mirrors this progress, attaining an accuracy milestone of 83.23%. These metrics underscore the model's ability to generalize well to unseen data, a key indicator of its robustness. Without Vectorization, the LSTM model exhibits noticeable progress, achieving a training accuracy of 83% and a validation accuracy of 83%."}, {"title": "2) Training with vectorization", "content": "The classification model is a deep learning architecture implemented using TensorFlow and Keras. It consists of a LSTM neural network, a type of recurrent neural network (RNN), designed to effectively capture temporal dependencies in sequential data. The model comprises two LSTM layers with 100 and 50 units, respectively, and a Dense output layer with softmax [29] activation for multi-class classification. The ROC analysis provides insights into the model's performance across different classes. A high AUC indicates strong discriminatory power, with values close to 1.0 suggesting excellent performance. Notably, Class 2 exhibits the highest AUC (0.98), indicating robust predictive capabilities for this specific class. Classes 0, 4, 5, and 6 also demonstrate strong performance with AUC values above 0.9. Class 3, while still respectable, shows a slightly lower AUC of 0.86. The micro-average ROC curve, considering all classes collectively, yields an AUC of 0.97."}, {"title": "C. Effect of Vectorization on VecLSTM Performance", "content": "The results indicate a notable reduction in training time with vectorization, from 1045.76 seconds to 772 seconds, representing a decrease of approximately 26.2%. Despite the reduced training time, the model's validation and test accuracies between the two experiments, at 82.47% to 85.47%. Furthermore which considers both precision and recall across all classes, exhibited a slight improvement with vectorization, rising from 0.83 to 0.86. This enhancement suggests that vectorization contributed to refining the model's overall performance Table I."}, {"title": "1) Time Efficiency with Vectorization", "content": "The combined LSTM-CNN model further enhances performance, reaching an accuracy of 85%, showcasing the synergistic benefits of combining both architectures. The reduction in training time for the Combined LSTM-CNN Model compared to the LSTM Model with Vectorization is approximately 53.94%. This means that the LSTM-CNN Model achieved a significant reduction in training time, specifically about 54% less time compared to the LSTM Model with out Vectorization, summarized in Table I."}, {"title": "2) Performance Comparison VecLSTM", "content": "Fig. 2a illustrates the training progress of three distinct models: LSTM, LSTM combined with vectorization (VecLSTM), and a combined model with vectorization. Throughout the training process, the LSTM model exhibited a gradual decrease in loss, starting from 0.9029 and converging to 0.4280. Simultaneously, its accuracy increased from 0.6430 to 0.8221. Incorporating vectorization into the LSTM architecture resulted in a notable improvement in performance. The VecLSTM model achieved a lower final loss of 0.3989 and a higher accuracy of 0.8313. The most significant performance enhancement was observed in the Hybrid model with vectorization, achieving the lowest loss of 0.3814 and the highest accuracy of 0.8392. The results indicate that combining LSTM with vectorization techniques yields superior performance compared to using LSTM. The performance of proposed framework, which harmonizes vectorization with the LSTM-CNN model, was evaluated using confusion matrices as shown in Figure 3 and accuracy metrics. Prior to vectorization, the model achieved a modest accuracy level. After the application of vectorization, a significant improvement in accuracy was observed."}, {"title": "D. Overall Performance Compared to State-of-the-Arts", "content": "The baseline LSTM model serves as the reference point for evaluating the performance improvements achieved by incorporating the VecLSTM layer. By analyzing metrics such as Root Mean Square Error (RMSE), Mean Absolute Error (MAE), and Mean Squared Error (MSE), we assess the impact of the VecLSTM layer on predictive accuracy. By comparing"}, {"title": "1) Analyzing the Effectiveness of Trajectory Prediction", "content": "The experimental results revealed significant variations in the accuracy of the models as shown in Figure 4. For RMSE, the values ranged from approximately 0.47 to 2.01, indicating the average magnitude of the errors between the predicted and actual trajectory points. The Hybrid+VecLSTM model achieved the lowest RMSE of 0.468, demonstrating its superior performance in minimizing prediction errors. The CNN+LSTM model showed a competitive RMSE of 1.156, indicating effective error minimization compared to other models. The LSTM+VecLSTM model recorded an RMSE of 1.633, while the LSTM model had the highest RMSE of 2.006. MAE, the values ranged from approximately 0.22 to 0.87, representing the average absolute errors between the predicted and actual trajectory points. The Hybrid+VecLSTM model exhibited the lowest MAE of 0.219, indicating its effectiveness in capturing the deviations between predicted and ground truth trajectories. The CNN+LSTM model achieved a notable MAE of 0.287. The LSTM+VecLSTM model recorded an MAE of 0.571, while the LSTM model had the highest MAE of 0.872. For MSE, the values ranged from approximately 0.22 to 4.03, reflecting the average squared errors between the predicted and actual trajectory points. The Hybrid+VecLSTM model demonstrated the lowest MSE of 0.219, highlighting its ability to minimize the overall prediction errors. The CNN+LSTM model had an MSE of 1.337. The LSTM+VecLSTM model recorded an MSE of 2.667, while the LSTM model had the highest MSE of 4.026."}, {"title": "2) Benchmarking and Comparative Analysis", "content": "In this research, we conduct a comprehensive benchmarking, summarized in Table II and comparative analysis of various prediction models. The models under evaluation include both those proposed in our research and established baselines from prior literature. In this benchmarking analysis, we compare the performance of our proposed VecLSTM model against several baseline models. Our VecLSTM model achieves notable results with an RMSE of 0.468, an MAE of 0.219, and an MSE of 0.219, showcasing its effectiveness in predicting the target variable. In comparison, our LSTM model, although respectable, demonstrates higher errors with an RMSE of 2.006, an MAE of 0.872, and an MSE of 4.026. The combination of CNN and LSTM in our architecture yields promising results, with an RMSE of 1.156, an MAE of 0.287, and an MSE of 1.337, indicating the synergistic benefits of utilizing both convolutional and recurrent neural network components. Moreover, our LSTM model with vectorization achieves competitive performance, with an RMSE of 1.633, an MAE of 0.571, and an MSE of 2.667. Comparing against baselines, our VecLSTM model outperforms previous research efforts, such as the baseline CNN-LSTM model, which had an RMSE of 10.192, an MAE of 8.595, and an MSE of 4.56. Similarly, another baseline LSTM model achieves an RMSE of 15.918, an MAE of 11.297, and an MSE of 6.69 [15]. In addition to our proposed model, we evaluate other baseline models, including those referenced in prior research papers. For instance, the EU baseline model achieves an RMSE of 0.388, an MAE of 0.457, and an MSE of 0.382 [30]. Moreover, the BTRAC(NE) and BTRAC baseline models attain an RMSE of 0.476, an MAE of 0.526, and an MSE of 0.495 [30]. Overall, our proposed VecLSTM model demonstrates superior predictive capabilities"}, {"title": "VI. CONCLUSION AND FUTURE WORK", "content": "In conclusion, this paper presents a new framework to process and manage trajectory data. The extensive comparison between the conventional LSTM model without vectorization and the proposed VecLSTM model with vectorization underscores the effectiveness of vectorization in improving neural network performance. With validation accuracy 85.57% vs. 82.47%, test accuracy 85.47% vs. 82.00%, and weighted F1-score 0.86 vs. 0.83. Furthermore, VecLSTM reduces the training time to 772 seconds compared to LSTM's 1,045.76 seconds. Incorporating the proposed VecLSTM model into our framework resulted in a significant reduction in training time, decreasing from 56.86 minutes to just 14.7 minutes when compared to non-vectorized models, which represents a remarkable 74.2% reduction. Our future endeavor will include exploring new and fine-tuning existing vectorization approaches tailored to specific trajectory data characteristics. We also plan to experiment with alternative data representations and validate orthogonal methods such as hypergraph-based algorithms."}]}