{"title": "Computing Game Symmetries and Equilibria That Respect Them*", "authors": ["Emanuel Tewolde", "Brian Hu Zhang", "Caspar Oesterheld", "Tuomas Sandholm", "Vincent Conitzer"], "abstract": "Strategic interactions can be represented more concisely, and\nanalyzed and solved more efficiently, if we are aware of the\nsymmetries within the multiagent system. Symmetries also\nhave conceptual implications, for example for equilibrium\nselection. We study the computational complexity of identi-\nfying and using symmetries. Using the classical framework\nof normal-form games, we consider game symmetries that\ncan be across some or all players and/or actions. We find a\nstrong connection between game symmetries and graph auto-\nmorphisms, yielding graph automorphism and graph isomor-\nphism completeness results for characterizing the symmetries\npresent in a game. On the other hand, we also show that the\nproblem becomes polynomial-time solvable when we restrict\nthe consideration of actions in one of two ways.\nNext, we investigate when exactly game symmetries can be\nsuccessfully leveraged for Nash equilibrium computation. We\nshow that finding a Nash equilibrium that respects a given\nset of symmetries is PPAD- and CLS-complete in general-\nsum and team games respectively that is, exactly as hard\nas Brouwer fixed point and gradient descent problems. Fi-\nnally, we present polynomial-time methods for the special\ncases where we are aware of a vast number of symmetries, or\nwhere the game is two-player zero-sum and we do not even\nknow the symmetries.", "sections": [{"title": "Introduction", "content": "In AI and decision making, we appreciate the presence of\nsymmetries, and they are of utmost importance in game the-\nory and multiagent systems. For one, central concepts such\nas cooperation, conflict, and coordination are usually pre-\nsented most simply on totally symmetric games, such as the\nPrisoner's Dilemma, Chicken, and Stag Hunt. The classic\nand performant Lemke-Howson algorithm for finding Nash\nequilibria is frequently (and without loss of generality) pre-\nsented for totally symmetric games (Nisan et al. 2007, Sec-\ntion 2.3) for the sake of clarity. Furthermore, sometimes in-\nteractions with symmetries can be described more concisely\nin comparison to enumerating the full outcome payoff func-\ntions: \u201cMatching Pennies is a two-player game where each\nplayer has two actions {0, 1}. If both players play the same\naction, player 1 wins, otherwise, player 2 wins.\u201d This is of-\ntentimes leveraged in games where we design the outcome\nand reward structures, such as in social choice (Brandt et al.\n2015) and mechanism design (Moulin 2004) via anonymity,\nneutrality, and fairness axioms.\nIndeed, notions of fairness have been connected to the\npremise that any participant of the game might be assigned\nto any player identity in the game, which forms a symmetry\nacross participants (Gale, Kuhn, and Tucker 1952). For the\nsake of fairness, one would then like the player identities to\nbe equally strong (cf. the Matching Pennies game, and the\n\u201cveil of ignorance\u201d philosophy (Rawls 1971; Emmons et al.\n2022)). Ham (2021), and the references therein, give a for-\nmal treatment of this in terms of game symmetries.\nThis symmetry idea that any participant (Als, humans,\netc.) might take on any player identity in the game (e.g.,\nblack versus white in chess) also reappears when reason-\ning about other agents of which we do not have a prior:\nsince the beginnings of machine learning, it has been pop-\nular to learn good strategies in self-play (Samuel 1959), that\nis, to assume that other players would use the same strat-\negy as oneself. Self-play continues to be a core contributor"}, {"title": "1.1 Motivation", "content": "In AI and decision making, we appreciate the presence of\nsymmetries, and they are of utmost importance in game the-\nory and multiagent systems. For one, central concepts such\nas cooperation, conflict, and coordination are usually pre-\nsented most simply on totally symmetric games, such as the\nPrisoner's Dilemma, Chicken, and Stag Hunt. The classic\nand performant Lemke-Howson algorithm for finding Nash\nequilibria is frequently (and without loss of generality) pre-\nsented for totally symmetric games (Nisan et al. 2007, Sec-\ntion 2.3) for the sake of clarity. Furthermore, sometimes in-\nteractions with symmetries can be described more concisely"}, {"title": "1.2 Structure and a First Overview", "content": "In Section 2, we start with background on game symme-\ntries in normal-form games. Our general notion of symme-\ntry encompasses any permutation of players and their action\nsets while keeping the utility payoffs unchanged. This is im-\nportant: the players in Matching Pennies take on different"}, {"title": "1.3 Are Symmetries Actually Helpful for Solving Games?", "content": "As discussed in the introduction, symmetries have been suc-\ncessfully used for state-of-the-art equilibrium computation\nmethods. Nonetheless, we should not be too quick to con-\nclude that symmetries, if present, ought to be used.\nPotential Harm We have already seen that in the coordi-\nnation game of Figure 1, the players might actually strongly\nprefer to play Nash equilibria that fail to respect symme-\ntries of the game. This effect is amplified in that game if\nwe take away the color red from the alternatives, leaving us\nwith a maximal symmetry-respecting payoff of 4. However,\nwe also note here that a similar argument can be given for\nthe opposite position. Take the totally symmetric two-player\ngame of chicken, that is, the bimatrix game $(A, A^T)$ where\n$A = \\begin{pmatrix}\n  1 & -1 \\\\\n  0 & -10\n\\end{pmatrix}$. In a Nash equilibrium that respects the\nsymmetry that swaps the players, the players play their first\nstrategy with probability 0.9, yielding each of them a payoff\nof 0.1. If they instead each search for an asymmetric Nash\nequilibrium, they may find distinct equilibria-for example,\nperhaps each player find the equilibrium that is best for that\nplayer. This results in the two players miscoordinating, re-\nsulting in the worst of all outcomes (each playing their sec-\nond strategy).\nPotential Slow-down Players also might want to ignore\nsymmetries present in a game for the sake of faster compu-\ntation. Take a totally symmetric bimatrix game $\\Gamma = (A, A^T)$"}, {"title": "2 Preliminaries on Game Symmetries", "content": "Definition 1. A (normal-form) game $\\Gamma$ consists of\n1. A finite set of players $N := \\{1, ..., N\\}$, where $N \\geq 2$\ndenotes the number of players,\n2. A finite set of actions $A^{i} := \\{1, . . ., m^{i} \\}$ for each player\n$i \\in N$, where $m^{i}$ denotes the number of actions, and"}, {"title": "4.1 Strategies, Nash Equilibria, Respecting Symmetries", "content": "As usual, we allow the players to randomize over their ac-\ntions. That is, they can choose a probability distribution-\ncalled strategy-over $A^{i}$. The strategy sets are denoted by\n$S^{i} = \\Delta(A^{i})$. A strategy profile $s$ and the strategy pro-\nfile set $S$ are defined similarly to their counterpart for ac-\ntions: $s = (s_1, ......., s_N) \\in S^{1} x ....... x S^{N} =: S$. Utili-\nties naturally extend to $S$ by taking the expectation $u^{i}(s) :=\n\\Sigma_{a\\in A} s_1 (a_1)..... s_N(a_N) u^{i}(a)$. For notational conve-\nnience, $s_i \\in X_{j \\neq i} S_{i} =: S_{-i}$ abbreviates the strategies\nthat all players are playing but $i$.\nDefinition 13. A strategy profiles $s \\in S$ is called a Nash\nequilibrium of $\\Gamma$ if for all player $i \\in N$ and all alternative\nstrategies $s' \\in S^{i}$ we have $u^{i}(s) = u^{i}(s_i, s_{-i}) \\geq u^{i}(s', s_{-i})$.\nThat is, every player plays their optimal strategy taken as\ngiven what the other players have chosen. It is well-known\nthat any game admits a Nash equilibrium (Nash 1950). Next,\nwe will discuss Nash's follow-up work that further shows\nthat symmetries-respecting Nash equilibria always exist.\nWorking towards that result, we first observe that a game\nsymmetry mapping $\\phi$ naturally extends to probability dis-\ntributions over actions, i.e., strategies. Thus, we can over-\nload notation and write $S \\ni s \\rightarrow \\phi(s)$. Symmetry $\\phi$ will\nthen also satisfy the invariance $u^{i}(s) = u^{\\pi(i)} (\\phi(s))$. Fur-\nthermore, we have:"}, {"title": "4.2 Orbits Are All You Need", "content": "If we are interested in respecting a set $\\Sigma$ of symmetries, it\nsuffices to know what actions are mapped to another action\nunder some symmetry in the subgroup $\\langle \\Sigma \\rangle \\leq Sym(\\Gamma)$ gen-\nerated by $\\Sigma$. This is called the orbit of an action $a \\in A$ un-\nder group $\\langle \\Sigma \\rangle$, denoted by $\\langle \\Sigma \\rangle a := \\{\\phi(a) : \\phi \\in \\langle \\Sigma \\rangle \\} \\subseteq A$.\nThe orbits $W((\\Sigma)) = \\{\\langle \\Sigma \\rangle a :a\\in A\\}$ partition the total set\nof actions $A$. We obtain a characterization that has already\nbeen noted in prior work that studied player symmetries.\nLemma 16 (cf. Emmons et al. 2022). Profile s respects a set\nof symmetries $\\Sigma \\subseteq Sym(\\Gamma)$ if and only if it respects $\\langle \\Sigma \\rangle$ if\nand only if for all orbits $\\omega \\in W((\\langle \\Sigma \\rangle))$ and actions $a, a' \\in\\omega$\nof respective players i, i' we have $s_i(a) = s_{i'}(a')$."}, {"title": "4.3 Computational Considerations", "content": "In games of three players or more, the only (symmetry-\nrespecting) Nash equilibrium might take on irrational values\n(Nash 1951) even though the game payoffs are integers. In\norder to represent solutions in finite bit length, we allow ap-\nproximate solutions up to some precision error $\\epsilon > 0$. An\n$\\epsilon$-Nash equilibrium must then satisfy $u^{i}(s) > u^{i}(s_i, S_{-i}) - \\epsilon$\nin Definition 13. We want $\\epsilon$ to be 'small' relative to the\nrange of utility payoffs, which-by shifting and rescaling\n(Tewolde and Conitzer 2024)\u2014we can w.l.o.g. assume to be\n[0, 1]. Then, $\\epsilon$ is given in binary, i.e., we seek algorithms that\ndepend polynomially on $log(1/\\epsilon)$.\nSince (1) symmetry-respecting Nash equilibria always ex-\nist, and (2) we can check whether a strategy profile is in-\ndeed a Nash equilibrium that respects a given set of symme-\ntries, we enter the complexity theory landscape of total NP\nsearch problems when it comes to finding such equilibria.\nIts subclasses are characterized by the proof technique used\nto show that each problem instance admits a solution. We\nwill be interested in the subclasses PPAD and CLS, which\nboth lie somewhere in between FP and FNP (the direct ana-\nlogues to P and NP when we deal with search problems).\nPPAD (\u201cPolynomial Parity Arguments on Directed graphs\u201d,\nPapadimitriou 1994) contains the problems where a solution\nis guaranteed to exist via a fixed-point argument, and CLS\n(\u201cContinuous Local Search\u201d, Daskalakis and Papadimitriou\n2011) is based on gradient dynamics on a compact polyhe-\ndral domain always admitting a solution.\nLast but not least, we will consider three representation\nschemes for the symmetries we require to be respected, in\ndecreasing order of explicitness: (1) Explicit form: A set\n$\\Sigma \\subseteq Sym(\\Gamma)$ is given as a list of symmetries, each given\nin explicit form. (2) Orbit form: A partition W of actions A"}, {"title": "5 Finding Symmetries-Respecting Equilibria", "content": "In this section, we analyze how hard it is to find a Nash equi-\nlibrium that respects symmetries."}, {"title": "5.1 Complexity Results", "content": "To start with the general case, let SYM-NASH denote the\nsearch problem that takes a game $\\Gamma$ in explicit form, a pre-\ncision parameter $\\epsilon > 0$ in binary, and symmetries of $\\Gamma$ in\norbit form. Given that, it asks for a strategy profile $\\mu$ of $\\Gamma$\nthat respects the said symmetries and that is an $\\epsilon$-Nash equi-\nlibrium."}, {"title": "6 Conclusion", "content": "The concept of symmetry is rich, with many applications\nacross the sciences, and in AI in particular. For game theory,\nthe situation is no different. Indeed, a typical course in game\ntheory conveys the most basic concept of a symmetric (two-\nplayer) game; to check whether it applies, no more needs to\nbe done than taking the transpose of a matrix. But there are\nother, significantly richer symmetry concepts as well, ones\nthat require relabeling players' actions or which do not al-\nlow arbitrary players to be swapped. We have studied these"}, {"title": "A More Proof Idea Sketches", "content": "Here, we give some additional proof idea sketches that are\nmissing in the main body due to space constraints.\nProof Idea of Theorem 3. Construct the graph $G$ with node\nset $N \\cup A \\cup A$ as in Theorem 1, and then check whether $G$ has\nan isomorphism that maps any player $i \\in N$ to a different\nplayer. We show this to reduce to Gl.\nWe show hardness with an independent proof: Given\ngraphs $G_1$ and $G_2$, create a zero-sum game of two players,\neach with action set $V_1 \\cup V_2$. When both players pick vertices\nfrom different graphs, nothing happens. In the case where\nboth choose vertices from the same graph $G_i$, player $i$ will\nstrongly prefer to choose a neighbor of the other player's\nchosen vertex, and gets slightly punished instead if they do\nnot manage to do so.\nProof Idea of Theorem 4. Hardness follows from Theo-\nrem 3. For inclusion, check whether, for every pair of players\n$i$ and $j$, the graph $G$ constructed in Theorem 1 has an auto-\nmorphism $\\phi$ whose restriction to $N$ is the transposition $(i, j)$.\nWe can show that this reduces to Gl."}, {"title": "B On Simulation and Imperfect Recall", "content": "Let us describe the connections between (1) being absent-\nminded, (2) being multiple copies of the same agent, and\n(3) symmetric agents playing symmetries-respecting pro-\nfiles. We illustrate it on a variant of an example that Kova\u0159\u00edk\net al. [2023, 2025] give for games with simulation of other\nplayers: Consider the perspective of an AI agent that han-\ndles a user's financial assets. It can either invest them, giving\nthe agent utility 1, or steal them, giving the agent utility 3.\nHowever, the user is not na\u00efve, and decides to first run the\nagent in simulation, but only once. If the user catches the\nagent stealing in simulation, the agent will not actually be\ngiven control of the assets, and will walk away with utility 0.\nCrucially, the agent is unable to tell the difference between\nbeing run in simulation and being run in the real world.\nTherefore, it must steal with some probability $p$ whenever\ncalled upon to act, and will thus receive expected utility\n$(1-p)^2 + 3p(1-p) = -2p^2 + p + 1$. Hence, it is optimal for\nthe agent to steal with probability 1/4 for an expected utility\nof 9/8. We can capture this decision problem by modeling\nthe agent as being absentminded, since it will not remember\nhaving been in the same situation before. Alternatively, we\ncan also model the decision problem as a game between two\ndistinct players that form a team, one acting first in simu-\nlation and one acting second in the real world. In order to\ndo so, we shall randomly assign the two roles (simulated\nor real) to the two players without revealing the assignment\nto them. This creates a symmetry between the two players.\nIf we then require that the players respect this symmetry,\nthey will both choose to steal with the same probability $p$.\nIndeed, without the random and secret role assignment, the\nteam can achieve utility 3 by letting the player in simula-\ntion invest and the player in the real world steal. Without\nthe constraint to respect the symmetry, the team prefers to\nhave one player invest and the other player steal, because"}, {"title": "C Other Related Work", "content": "In this section, we describe further related work.\nFirst, let us give more context on the open conjecture we\nresolved in Theorem 4: Cao and Yang (2018), more gen-\nerally, studied total symmetric, renaming symmetric, and\nname-irrelevant symmetric games from a structural lens. A\ngame is called renaming symmetric if one can \u201crelabel\u201d the\naction set of each action set, such that-if one considers\nthem as the same action set $A^*$-the relabeled game is to-\ntally symmetric. They derive Gl-completeness for deciding\nwhether a two-player team game with {0,1} utility payoffs\nis renaming symmetric."}, {"title": "D Further Background on Section 2", "content": "In this section, we define the game isomorphism problem,\nand give more background on the graph isomorphism and\nautomorphism literature."}, {"title": "D.1 Notation", "content": "Analogous to strategies, we write $a_{-i} \\in A^{i}$ for the parts in\na and $A$ that are associated to the other players from $i$."}, {"title": "D.2 Game Isomorphisms", "content": "Definition 19 (Gabarr\u00f3, Garc\u00eda, and Serna 2011). A (game)\nsymmetry between two games $\\Gamma = (N, (A^{i})_{i\\in N}, (u^{i})_{i\\in N})$\nand $\\Gamma' = (N', (A'^{i})_{i\\in N}, (u'^{i})_{i\\in N})$ is a bijective \u0442\u0430\u0440 $\\phi :$\n$A \\rightarrow A'$ satisfying"}, {"title": "D.3 Graph Isomorphisms and Automorphism", "content": "First, a comment on why there are indeed generator sets of\nlogarithmic size: If set $Z = \\{z_1, ..., z_k\\}$ is an inclusion-\nwise minimal generating set of group $G$, then $Z$ generates at\nleast $2^k$ distinct elements, namely $z_S := \\Pi_{i\\in S} z_i$ for each\nsubset $S\\subseteq [k]$.\nAn edge-labeled (hereafter simply labeled) graph is a tu-\nple $G = (V, E_1, ..., E_k)$, where $E_i$ is the set of edges with\nlabel $i$. Two labeled graphs are isomorphic if there is an\nedge-label-preserving isomorphism between them. In this\nsection, we state some known or simple results about\nvarious problems related to edge-labeled graphs."}, {"title": "E On Section 3 up until Section 3.1", "content": "In this section, we provide proofs to the results of Section 3\nexcluding Section 3.2."}, {"title": "F On Section 3.2", "content": "In this section, we establish Theorems 5 and 6, and also de-\nvelop their counterpart results for game isomorphisms be-\ntween two games in Theorem 12 and Theorem 13. Through-\nout this section, we will assume $m^{i} \\geq 2$ for all players.\nLet $S_N$ denote the symmetry group of permutations on\na finite set $N$. Later on, $N$ will stand for the player set.\nWe begin by specifying a few lemmas about computation\nin general symmetry groups and cosets. For the purpose of\ndiscussing algorithms, subgroups $G < S_N$ are specified by\ngenerating sets of size $poly(N)$, and cosets $xG = \\{xg : g \\in\nG\\}$ are specified as pairs $(x, G)$. Later on, $x$ will represent a\ngame isomorphism from game $\\Gamma$ to game $\\Gamma'$."}, {"title": "F.1 Search for Particular Properties", "content": "We can leverage the computation from Section 3.2 (Theo-\nrems 5, 6, 12 and 13) to further efficiently compute the sym-\nmetries and isomorphisms satisfying certain properties. Be-\nlow, we merely give an example of this:\nProposition 26. Given game and, optionally, another\ngame $\\Gamma'$, we can compute the following groups / cosets:\n1. In time $2^{O(|A|)}$ the game symmetries $\\phi$ of $\\Gamma$, or the game\nisomorphisms $\\phi : \\Gamma \\rightarrow \\Gamma'$, that map a particular action\n$a \\in A$ to another action $\\phi : a \\rightarrow b$, and\n2. In polytime the game symmetries $\\phi$ of $\\Gamma$, or the game\nisomorphisms $\\phi : \\Gamma \\rightarrow \\Gamma'$, that map a particular player\n$i \\in N$ to another player $\\phi : i \\rightarrow j$."}, {"title": "F.2 Excursion to Graphical Games", "content": "Proposition 12. The game automorphism (resp. isomor-\nphism) problem for graphical games is GA- (resp. GI-)hard,\neven in team games with 2 actions per player."}, {"title": "G Further background on Section 4", "content": "In this section, we give more context to Section 3 and prove\nstatements from it."}]}