{"title": "Chemical Reaction Neural Networks for Fitting Accelerated\nRate Calorimetry Data", "authors": ["Saakaar Bhatnagar", "Andrew Comerford", "Zelu Xu", "Davide Berti Polato", "Araz Banaeizadeh", "Alessandro Ferraris"], "abstract": "As the demand for lithium-ion batteries rapidly increases there is a need to design these cells\nin a safe manner to mitigate thermal runaway. Thermal runaway in batteries leads to an\nuncontrollable temperature rise and potentially fires, which is a major safety concern. Typically,\nwhen modelling the chemical kinetics of thermal runaway calorimetry data (e.g. Accelerated\nRate Calorimetry (ARC)) is needed to determine the temperature-driven decomposition kinetics.\nConventional methods of fitting Arrhenius Ordinary Differential Equation (ODE) thermal\nrunaway models to Accelerated Rate Calorimetry (ARC) data make several assumptions that\nreduce the fidelity and generalizability of the obtained model. In this paper, Chemical Reaction\nNeural Networks (CRNNs) are trained to fit the kinetic parameters of N-equation Arrhenius\nODEs to ARC data obtained from a Molicel 21700 P45B. The models are found to be better\napproximations of the experimental data. The flexibility of the method is demonstrated by\nexperimenting with two-equation and four-equation models. Thermal runaway simulations are\nconducted in 3D using the obtained kinetic parameters, showing the applicability of the obtained\nthermal runaway models to large-scale simulations.", "sections": [{"title": "1 Introduction", "content": "Thermal runaway in battery packs is a major safety concern for commercial applications such as electric\nvehicles, potentially leading to catastrophic outcomes like battery pack fires. This phenomenon occurs\ndue to thermal abuse conditions that lead to exothermic degradation reactions of battery components,\nsuch as anode decomposition, cathode conversion, SEI decomposition, and electrolyte breakdown[1, 2].\nTypical thermal abuse failure modes include, but are not limited to, physical damage, internal short\ncircuits, overcharging, or overheating (e.g., extreme temperature exposure) [1]. The heat released un-\nder such conditions, when a cell or group of cells fails, can lead to a chain reaction where adjacent\ncells enter a self-heating state and undergo thermal runaway [3]. This propagation can consume an\nentire battery module or pack. These safety concerns are even more pressing in today's electrification\nenvironment, particularly as the industry moves towards higher power and energy density cells[1, 4].\nTo address these concerns, cell and pack manufacturers must adhere to strict safety protocols to avoid\ncatastrophic outcomes. Simulation-driven design offers a platform to optimize designs and aid in the\nprevention and mitigation of thermal runaway. For example, thermal analysis of novel heat shield\nmaterials can be conducted efficiently to understand their effectiveness at mitigating propagation.\nTypically, when modeling thermal runaway, chemical decomposition kinetics are represented by\nmultiple Arrhenius Ordinary Differential Equations (ODEs) [2, 5, 6]. These reaction rates, combined\nwith the reaction enthalpy, allow for the prediction of chemical heat generation under abuse scenarios.\nFor each of the Arrhenius ODEs, the kinetic parameters and heat of reaction must be determined. In\nthe literature, a popular model is that proposed by Hatchard et al. [5]. This model utilized calorimetry-\nderived data to model thermal runaway in an 18650 Lithium Cobalt Oxide (LCO) cell for the anode,\ncathode, and SEI decomposition reactions. The model utilized a lumped approach, that is treating the\njellyroll as a single temperature, and demonstrated excellent agreement with experimental oven tests.\nThis model has been the basis of a number of subsequent models and has been extended to simulate\nother cell types, 3D domains (i.e. not lumped), additional decomposition reactions (e.g., electrolyte\nbreakdown and short circuit events), and different cathode chemistries[6-10]. In addition to these\nHatchard-derived models, parameter estimation for the generic Arrhenius ODE have been proposed in\nthe literature. The model by Shelkea et al. [11], which is similar to [5] and [6], but with the addition of\na mix term to match the experimental accelerated rate calorimetry (ARC) data, is one example. Ping\net al. [12] demonstrated a five-stage model also based on ARC data. The kinetic and reaction heat\nparameters were determined through a combination of parameter fitting and literature data. More\ndetails regarding this method are provided later. Feng et al. [13] proposed an elaborate mathematical\nmodel based on literature (e.g. [5]) and some novel formulations, demonstrating excellent agreement\nwith the ARC experimental data. Their model utilized parameters from the literature and adjusted\nthe parameters to fit experimental data; limited details of the fitting methods were provided. Chen\net al. [14] introduced an ARC-derived two-stage model. The advantage of this model is it requires\nfewer parameters than the four-stage NREL model. Their approach demonstrated good agreement\nwith the ARC experimental data. In general, the models currently in literature can intricately model\nthe physics of thermal runaway, but parameter identification often relies on literature data or laborious\nand not necessarily robust identification methods.\nParameter estimation for thermal runaway modelling remains a major challenge and typically re-\nlies on calorimetry data to measure chemical heat release. In literature, there are several types of\ncalorimetry data used, each with their own advantages and disadvantages. Some examples include:\nAccelerated Rate Calorimetry (ARC)[11, 13-17]; Fractional Thermal Runaway Calorimetry (FTRC)\ndeveloped by NASA [18]; and Differential Scanning Calorimetry (DSC) [2, 19, 20]. FTRC can ac-\ncurately measure heat generation and gas release during thermal runaway, offering the advantage of\nshorter experimental time frames compared to other calorimetry-based approaches. To the authors'\nknowledge, no fitting has been done on this data yet, but it represents a promising method. DSC is\na thermal analysis technique that measures heat flow into or out of a sample (e.g. cathode material)\nas it undergoes a controlled temperature ramp. This heat flow can be used to characterize the heat\ngeneration of individual battery components, separately. Finally, ARC is one of the most common\nways to characterize battery thermal runaway response for a single cell. In this experiment, the intact\ncell is first placed inside a thermally isolated cell holder in a sealed calorimeter chamber. The test\ninitiates in a heat-wait-seek mode, where a heater heats the calorimeter incrementally, then pauses\nto allow thermal transients to decay and equilibrium conditions to be reached. If any increase in\ntemperature rate surpasses a preset threshold value (indicating exothermic reactions), the calorimeter\nswitches to exotherm mode. In this mode, the calorimeter tracks the temperature rise and maintains\nzero temperature differential between the cell surface and the calorimeter walls, ensuring adiabatic\nconditions. The final phase involves either full thermal runaway and subsequent cooling or simply\ncooling if the temperature rate falls below the preset threshold value.\nTypically in the literature, the most common method for determining reaction heat and kinetic\nparameters from ARC calorimeter-based data involves introducing temperature stages and linearizing\nthe governing Arrhenius kinetic ODE within these stages[12, 14]. Parameters are then determined using\nleast squares fitting. Dividing the data into more stages generally leads to a better representation of\nthe underlying data. These types of thermal runaway models can be considered cell-based models\nas they do not directly elucidate the individual reaction kinetics of the electrodes[21]. Alternative\nmodels that provide more detailed reaction kinetic information, are the DSC component-based models\n(e.g. [19, 22]). Unfortunately, for the cell-based models, the numerous approximations made during\nthe linearization process reduce the fidelity of the model and often fail to accurately represent the\nunderlying data (see section 3.2). Some of these inaccuracies can be alleviated through manual tuning,\nultimately yielding a reasonable representation of the original data and the physical phenomena can\nbe obtained, albeit through a laborious process.\nChemical Reaction Neural Networks (CRNNs) have been proposed to discover reaction coefficients,\nparameters and pathways in systems governed by the Arrhenius equations [23]. In CRNNs, the differ-\nential equation\n$\\frac{dc}{dt} = f(c, \\theta, t),$\\n is integrated in a fully differentiable manner w.r.t $\\theta$, similar to Neural ODEs [24], where $f$ is the\nneural network formulated using the system of ODEs governing the chemical reactions modelled, $\\theta$ are\ntime-independent parameters to be learnt using stochastic gradient descent using a loss metric, and $c$\nrepresents the time-dependent system state.\nPuliyanda et al. [25] used CRNNs to obtain chemical kinetic models from noisy spectroscopic\ndata, achieving significant performance improvements over least squares regression. Kircher et al.\n[26] proposed the Global Reaction Neural Network (GRNN) architecture, embedding thermodynamic\nand stoichiometric prior knowledge into the network architecture, which autonomously learned kinetic\nmodels directly from noisy reactor data. Koenig et al. [22] used CRNNs to learn the thermal decompo-\nsition models of Nickel-Cobalt-Manganese (NMC) cathodes using DSC data, obtaining more physically\nconsistent fits by avoiding empirical assumptions made when fitting using the Kissinger method[27].\nThese studies demonstrated that, since the learned parameters are constrained to obey the governing\nODEs, the physics-informed nature of the CRNN method outperformed other data-driven methods in\nterms of better accuracy and lower data requirements. Additionally, the resulting models are physi-\ncally interpretable in the form of the governing ODEs.\nThis work proposes a novel method to obtain accurate fits for Arrhenius equation-based thermal\nrunaway models from experimental Accelerated Rate Calorimetry (ARC) data. CRNNs are utilized to\nlearn the required parameters. A staging and linearization-based fitting method is demonstrated on the\ndata, showing its shortcomings in creating accurate models. The obtained parameters are then tuned\nvia training a CRNN, resulting in learned models that better represent the data. The experiment is\nconducted on two and four-stage models, showing the flexibility of the method. The tuned parameters\nare tested in 3D simulations of ARC and oven tests, demonstrating improved workflow and performance\ncompared with more traditional methods cited in the literature."}, {"title": "2 Experimental Setup", "content": "The battery cell under investigation was a Molicel 21700 P45B with a mass of 0.066kg and a capacity of\n4.5Ah. The sample cell was inserted into a holder within the ARC reactor. The cell was preconditioned\nby gradually heating it to a controlled temperature of 50\u00b0C. These conditions were allowed to equi-\nlibrate to ensure a uniform baseline temperature. To investigate thermal runaway, a Heat-Wait-Seek\n(HWS) testing protocol was employed. Initially, the cell underwent a temperature ramp exceeding\n0.02\u00b0C/min to bring it close to the onset of self-heating. Once stabilized at this temperature, the\nARC initiated the HWS protocol. During this protocol, the sample was heated in increments of 5 \u00b0C\nand then allowed to equilibrate (\u201cwait\u201d) for over 40 minutes. Adiabatic conditions were maintained by\nadjusting the chamber temperature to match that of the cell. Subsequently, the calorimeter entered\na \"seek\" mode for 10 minutes to detect any exothermic activity: If any signs of self-heating (e.g.,\na sustained temperature rise of 0.02 \u00b0C/min ), the ARC transitioned to exotherm mode, otherwise\nthe heat-wait-seek cycle was repeated. In exotherm mode, the ARC tracked the temperature rise due\nto exothermic reactions and endeavored to maintain adiabatic conditions by dynamically adjusting\nthe chamber temperature and provide detailed thermal behavior such as cell (top, middle and bot-\ntom) as well as ambient temperature. The setup of the cell within the chamber and the location of\nthermocouples on the cell surface are shown in Figures (1a)-(1c).\nThe collected ARC data is used to determine the heat rate (in \u00b0C/min) versus temperature (in\n\u00b0C), as well as temperature versus time. Figures (1d) and (1e) show the collected data for heat rate\nversus temperature and temperature versus time, respectively."}, {"title": "3 Methods and Models", "content": ""}, {"title": "3.1 TR ODE System", "content": "The thermal runaway modelling equations in this work take the form of an Arrhenius reaction equation\nto model the decomposition kinetics and are given by,\n$\\frac{dc_i}{dt} = f_i(c_i) A_i e^{\\frac{-E_{a,i}}{k_bT}}, i=1,2...,N$\\n$f_i(c_i) = c_i^{n_i} (1 - c_i)^{m_i},$\\nwhere $c_i$ is the normalized reactant concentration, $A_i$ is the frequency factor, $E_{a,i}$ is the activation\nenergy, $k_b$ is the Boltzmann constant, T is the temperature, and N refers to the number of stages in\nthe model. $m_i$ and $n_i$ are reaction orders from the rate law. The reaction orders determine whether\nthe reaction is nth order (when $m_i= 0$) or an auto-catalytic type i.e. the reaction increases as the\nproduct is generated ($m_i > 0$) [28, 29].\nThe heat $Q_i$ from each exothermic stage decomposition can be calculated using\n$Q_i = h_i \\frac{dc_i}{dt},$\\nwhere $h_i$ is the reaction enthalpy. The temperature update of the cell due to the thermal runaway\ncan then be computed using\n$m_{cell}C_p \\frac{dT}{dt} = \\sum_{i=1}^N Q_i + Q_{diss},$\\nwhere $m_{cell}$ and $c_p$ represent the mass and specific heat of the cell respectively, and $Q_{diss}$ is the\ndissipative heat flux due to natural convection and radiation. This term is modelled as\n$Q_{diss} = A_{cell}[h_{conv} (T_{\\infty} - T) + \\epsilon \\sigma (T_{\\infty}^4 - T^4)],$\\nwhere $A_{cell}$ refers to the area of the cell, $h_{conv}$ is the convective heat transfer coefficient [30], $\\epsilon$ = 0.8,\n$\\sigma$ is the Stefan-Boltzmann constant, and $T_{\\infty}$ is the far field temperature.\nA good model representing the the thermal runaway process is achieved by obtaining the values of\nthe following kinetic and reaction heat parameters,\n$\\theta_i = [A, E_a, h, m, n]_i, \\forall i=1,2..N,$\\nsuch that the temperature and heat rate profiles (shown in Figure 2) predicted by integrating the\nmodel are a close match to the experimental ARC data."}, {"title": "3.2 Linearized Arrhenius kinetics", "content": "The most common method for fitting the unknown parameters described by Equation 7 to ARC data\ninvolves staging and linearizing the governing equations of the model. The number of stages, N,\ndepends on the specific model. For example, Chen et al. [14] used a two-stage model, whereas Sun\net al. [31] and Ping et al. [12] used four and five-stage models, respectively, to describe the thermal\nrunaway process.\nThe linearization method, although straightforward to implement, relies on a set of assumptions\nthat limits its applicability. For example, it typically assumes a linear decrease in reactant concentra-\ntion as a function of temperature [31]. However, in practice, integrating the models usually reveals\na nonlinear dependency of $c_i$ on T [14]. Furthermore, the reaction orders ($m_i, n_i$) are often adopted\nfrom previous studies and, therefore, may not fit the current dataset, resulting in a sub-optimal fit."}, {"title": "3.3 CRNN for ARC data fitting", "content": "In a CRNN, the parameters to be fitted are treated as trainable variables. Instead of linearizing the\ngoverning ODEs, and obtaining the parameters by minimizing a least squares error, the governing\nODEs are directly learned using the data, with parameter updates made iteratively via a gradient-\nbased approach. An advantage of this method is that no simplifying assumptions are made on the\nODE system, leading to no loss of accuracy or generality during the fitting process. Figure (4a) shows\nthe setup of a CRNN subnetwork for stage i, where each stage has a corresponding subnetwork with\nunique trainable parameters. The orange nodes denote trainable parameters (obtained via gradient-\nbased optimization), and the blue nodes denote state variables, the time histories of which are obtained\nvia ODE integration. The output of a subnetwork is the concentration reaction rate $\\frac{dc_i}{dt}$ and the rate\nof heat generated $Q_i$ by stage. Figure (4b) shows how each subnetwork is assimilated into the overall\ntraining loop. The resultant system of ODEs is integrated via a differentiable ODE integrator, and the\nsystem state $[c_1(t), c_2(t), ...c_N (t), T]$ is used to compute the loss $I$ relative to the experimental data.\nReverse-mode automatic differentiation [32] is leveraged to compute $\\frac{\\partial L}{\\partial \\theta_i}$, which is then used to update\nthe values of $\\theta_i$ via gradient descent.\nIn this work, the trainable parameters $\\theta_i$ in the CRNN are initialized using the linearization method\n(Section 3.2). This improved initial guess, over random initialization, accelerates the optimization\nprocess. The loss function used to measure the difference between the predicted solution is the L2\nnorm of temperature history:\n$Loss = \\frac{\\sum_{j=1}^{N_{ts}} (T_{j}^{pred} - T_{j}^{truth})^2}{N_{ts}},$\\nwhere $N_{ts}$ is the number of timesteps.\nThe fully differentiable computational training loop was set up using the JAX [33] automatic\ndifferentiation framework. The differentiable ODE solver library Diffrax [34], based on JAX, was used\nto solve the CRNN ODE system. Kvaerno's 5th order method [35] is employed for the numerical stiff\nODE solve, and the Adam [36] optimizer is utilized to minimize the loss. For all results shown, the\noptimization is done for 10,000 steps with a scheduled learning rate, starting at 10-3 and decreasing\nby a factor of 0.9 every 300 steps."}, {"title": "4 Results and Discussion", "content": "A CRNN is used to fit the ARC data shown in Figure 2. The data is divided into N stages, every stage\nis linearized and a fit for the kinetic parameters $\\theta_i$ is obtained $\\forall i = 1.....N$. The obtained parameters\nare used to initialize the CRNN and are improved via optimizing the loss of the CRNN (given by\nEquation 10) iteratively. The fitting process is demonstrated for N=2 and N=4, showing the flexibility\nof the proposed method. The model obtained from the four-stage fit is used in a 3D simulation of ARC\nand oven tests, to demonstrate the portability of the resulting thermal runaway models to accurate\ninto thermal runaway and the overall peak temperature. As an additional observation, the obtained\ntemperature profile for the four-stage fit (Figure 6b) adheres better to the experimental data compared\nwith the two-stage fit (Figure 5b). This is attributed to the four stages giving the model more ability\nto accurately represent the data.\nComparing Figure (6c) and (6d), the linear part of the rate curve, corresponding to the slow\nincrease in temperature, is once again better approximated after the CRNN training. The sudden\nincrease in heat rate occurring around 200 \u00b0C is captured slightly more accurately when compared to\nthe two-stage model, leading to a better prediction of the time when thermal runaway occurs.\nTable 4 shows the parameters for each stage, before and after CRNN optimization. The initial\nvalues of $A_i$ and $E_{a,i}$ for stage 4 are set as the initial values for stage 3. This was done because the\nparameters obtained via linearization for stage 4 were too poor to use as initial conditions for the\nCRNN training.\nThe results obtained in Sections 4.1 and 4.2 demonstrate the improvement in parameters achieved\nthrough linearization using the CRNN method. The works by Chen et al. [14] and Ping et al. [12]\nutilize the linearization method, which, as shown in previous sections, can result in poor fits. The\nobtained parameters often require manual fine-tuning, making reproducibility of the method problem-\natic. The CRNN addresses this issue by automatically determining the parameters that best model the\nexperimental data using gradient descent, thus eliminating the need for manual tuning and ensuring\nreproducibility.\nFurthermore, as noted in Table 4, the linear fit for the final stage in a four-stage model can be so\npoor that some parameters from stage 3 need to be used as initial guesses. Sun et al. [31] and Feng\net al. [37] instead modeled the heat release of the final stage using a cumulative enthalpy method, which\nmeasures the total energy released by the last stage of the process and reuses the same function in\nfuture simulations. While this method is simple to implement, it does not generalize well to simulations\noutside of the ARC test because it does not attempt to model the dynamics of the stage. The CRNN\nmethod, however, is able to automatically find parameters governing the dynamics of stage 4, removing\nthe need for approximations such as the cumulative enthalpy method."}, {"title": "4.3 21700 battery cell simulation", "content": "To demonstrate the fitted parameters in a realistic scenario, 3D simulations of a single 21700 cell were\nconducted under ARC and oven test conditions. Figure (7a) depicts the battery geometry. Thermal\nrunaway was modeled using the modified energy equation, which includes an additional source term\n$S_{TR}$, given by\n$\\rho c_p \\frac{\\partial T}{\\partial t} = \\nabla \\cdot (\\kappa \\nabla T) + S_{TR},$\\nwhere is $\\rho$ the density, $C_p$ is the heat capacity, and $\\kappa$ is the thermal conductivity. $S_{TR}$ is then given\nby the fitting values obtained from the OD model, that is\n$S_{TR} = \\sum_{i=1}^N h_i \\frac{dc_i}{dt}.$\\nWhere $h_i$ represents the enthalpy of different battery components. $S_{TR}$ is active only within the\njellyroll of the cell and is modeled using a four-stage thermal runaway model and the parameters\nobtained in Section 4.2. The governing energy equation includes boundary conditions for radiation\nand natural convection. In the ARC test, the ambient temperature is determined by the temperature\nrecorded inside the chamber. For the oven test, the temperature reference is a single value repre-\nsenting the oven temperature. While more accurate simulations could incorporate natural convection\nvolume surrounding the cell (e.g. the ARC chamber), these were simplified in the current simulations.\nSimulations were performed in the multi-purpose CFD software Altair\u00ae AcuSolve\u00ae. The governing\nEquation (19) is discretized using a Galerkin least squares stabilized finite element method. The bat-\ntery geometry consisted of three main components: the jellyroll; the aluminium positive and negative\ntabs/terminals; and a steel can. A summary of the material properties for each of these components\nis provided in Table 5. The jellyroll, an effective material representation of the true wound geome-\ntry, has cylindrical anisotropic properties for thermal conductivity; the through-plane conductivity is\nsignificantly lower than in-plane conductivity.\nFigure (7b) shows the temperature distribution in the cell during thermal runaway, highlighting\nthe core of the battery heating up as the components of the jellyroll decompose. Figure (8a) displays\nthe mean temperature history from a 3D ARC test simulation, compared to experimental temperature\nmeasurements. The model accurately predicts the occurrence and peak temperature of thermal run-\naway, although some deviation afterwards was observed due to differing experimental and simulation\nconditions.\nOven test results in Figure (8b) for temperatures of 160\u00b0C, 200\u00b0C, and 240\u00b0C show expected\ntrends: higher oven temperatures accelerate thermal runaway and result in higher peak temperatures.\nThese findings demonstrate that the thermal runaway model, derived using parameters from CRNN,\neffectively predicts thermal behaviour in 3D simulations under varying physical and environmental\nconditions."}, {"title": "5 Conclusion", "content": "This work explored using Chemical Reaction Neural Networks (CRNNs) to perform kinetic parameter\nfitting of multi-stage thermal runaway models governed by the Arrhenius equations to ARC data. The\nissues with using linearization to obtain the kinetic parameters were discussed and demonstrated, and\nthe linear fit results were improved using a CRNN for both two-stage and four-stage models. The\nobtained parameters showed much better agreement with experimental data. The four-stage fit was\nalso used to simulate ARC and oven tests in 3D, with results showing agreement with experiments. This\nfurther demonstrated the applicability of the derived thermal runaway models to simulations involving\nbatteries or battery packs, where thermal runaway is a major safety concern and hence is a crucial\ndesign factor. The proposed method is flexible and can generalize to several stages, cell types, and\nstoichiometries, representing a step toward enhanced battery pack safety through simulation-driven\ndesign."}, {"title": "6 CRediT Authorship Statement", "content": "Saakaar Bhatnagar: Conceptualization, Formal Analysis, Methodology, Software, Visualization,\nWriting- Original Draft\nAndrew Comerford: Conceptualization, Project Administration, Supervision, Validation, Visu-\nalization, Writing- Review and Editing\nZelu Xu: Conceptualization, Formal Analysis, Validation\nDavide Berti Polato: Data Curation, Investigation, Resources\nAraz Banaeizadeh: Project Administration, Supervision, Writing- Review and Editing\nAlessandro Ferraris: Data Curation, Investigation, Resources"}]}