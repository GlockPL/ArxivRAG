{"title": "MACHINE LEARNING-BASED ANDROID INTRUSION DETECTION SYSTEM", "authors": ["Madiha Tahreem", "Bilal Zahid Hussain", "Ifrah Andleeb", "Arsalan Hameed"], "abstract": "The android operating system is being installed in most of the smart devices. The introduction\nof intrusions in such operating systems is rising at a tremendous rate. With the introduction of\nsuch malicious data streams, the smart devices are being subjected to various attacks like Phishing,\nSpyware, SMS Fraud, Bots and Banking-Trojans and many such. The application of machine learning\nclassification algorithms for the security of android APK files is used in this paper. Each apk data\nstream was marked to be either malicious or non malicious on the basis of different parameters.\nThe machine learning classification techniques are then used to classify whether the newly installed\napplications' signature falls within the malicious or non-malicious domain. If it falls within the\nmalicious category, appropriate action can be taken, and the Android operating system can be shielded\nagainst illegal activities.", "sections": [{"title": "Introduction", "content": "The Android smartphone operating systems currently at 85% occupy one of the largest market spaces, including mobile\nphones, tablets, and even smartwatches. Given their presence in the market, one would believe they are relatively\nimmune to malware and malicious activities but that does not seem to be the case. Unlike Apple's iOS, Android\nOperating Systems are open source which gives ample opportunity to hackers to use and create their own malware and\nget hold of the user's sensitive information. Java is used to build Android applications which are then fabricated by\ndata and resource files into an archive known as Android Package Kit(APK). APKs are responsible for the source code,\nassets and resources integral for running an application. There are currently more than 970 million pieces of malware\ncirculating the internet right now(AV-test institute). In a recent report, Cisco Umbrella received a record-high 96.39\npercent threat detection rate. The sheer number of samples has exhibited the manual analysis, and classification as\nmajorly impractical, and this, in turn, has made cybersecurity [Sabir et al., 2021] researchers, mobile app store holders,\nand antivirus companies automate the threat recognition process. On top of that, it is estimated that about a whopping\n47% of mobile anti-malware apps fail to detect critical threats. Every threat in an android smartphone is related to a\nparticular dimension such as privacy, data and communication. Some of these security challenges include Phishing,\nSpyware, SMS Fraud, Bots and Banking-Trojans. It has been claimed that Download-Trojan apps download their\nharmful code after installation, making it difficult for Google technology to readily identify them. Malware attacks are\ndone through the permission mechanism and untrusted APKs[Ma et al., 2014] and include even simple web browsing\nwhich ends up in installing a malicious code on the device in backend; Privacy attacks including leakage of a user's\nconfidential data, financial details and social media platform's credential. These are usually done through means of\nsuspicious SMS and emails in which the user may end up losing sensitive information. These results in cyberattacks\nmaking money illegally. Physical attacks consist of recognising the password pattern of a device through means of touch\nscreen. The existing antivirus tools can only help against known malware[Mira, 2021], implying that unrecognized\nor newly developed malware can go unnoticed for months. To tackle this, machine learning[Hussain et al., 2021]\nalgorithms in android malware detection systems have proven to be immensely useful in identifying malware through\nbehavior-based and anomaly based software analysis.\nContribution: The main contributions of this paper can be summarized as follows:\n(i) Utilize the various machine learning classifiers to detect behavior using features from an Android device, majorly the\npermissions required by an APK file to detect malicious activity, mainly monitoring Binder API features, install-time\npermissions and runtime permissions.\n(ii) Discuss the best classier methodology based on performance metrics; Random Forest Classifier[9] and discuss the\nnumber of trees in the forest and the amount of random features chosen for each tree node are varied for Android-based\nfeatures, assess the accuracy of the Random Forest classifier."}, {"title": "RELATED WORK", "content": "Machine Learning is extensively used to perform various tasks such as object and text identification and recognition,\nfeature extraction. Moreover, it is also being used in detection of malicious Android applications.\nLiu et al. [2021] in their research work proposed a deep network fusion model-based strategy for detecting malicious\nAndroid applications. The technique extracts the static core code features by decompiling APK files. It then vectorizes\nthe code and applies a deep learning network for classification and descrimination.\nKakavand et al. [2018] in their paper validated two Machine Learning algorithms, K-Nearest Neighbors (KNN) and\nSupport Vector Machine (SVM) to conduct supervised learning based classification of the feature set into either\nhazardous or benign applications. The experimental results show average accuracy rates for a dataset of realistic\nmalware and benign applications are 80.50% and 79.08% respectively.\nKolosnjaji et al. [2016] also deployed Convolutional Networks, long-term and short-term memory networks to evaluate\nthe calling sequence in their research work. Although, the feature information is insufficient, and they merely model\nand classify harmful call sequences"}, {"title": "METHOD", "content": "To stop attacks that evolve daily, intrusion detection systems must be regularly updated. Anomaly-based network\nintrusion detection systems are now a commonly used technology in the attack detection stage in this context. We chose\na variety of machine learning techniques for this use-case since machine learning may be used to successfully achieve\noutstanding accuracy and precision. The dataset used, the suggested operational framework, the proposed network's\ndesign, and the evaluation metrics are all covered in the parts that follow."}, {"title": "Dataset", "content": "The proposed machine learning models are trained and evaluated using an open-access benchmark dataset called \"Deep\nLearning for Cyber Security\u00b9\u201d, which contains 8078 samples. The dataset shows a collection of APK files together\nwith their permissions. Fig. 1 depicts the distribution of malicious and non-malicious samples. We divided the dataset\n70:30 for testing and training our suggested model. The dataset used to train the suggested machine learning models\ncomprises 4039 malicious and 4039 non-malicious samples."}, {"title": "Evaluation Metrics", "content": "Accuracy One way to gauge how frequently a machine learning classification algorithm classifies a data point\ncorrectly is to look at the algorithm's accuracy. The proportion of accurately predicted data points among all the data\npoints is known as accuracy. The number of true positives and true negatives divided by the total number of true\npositives, true negatives, false positives, and false negatives is how it is more precisely described. A data point that the\nalgorithm correctly identified as true or untrue is referred to as a true positive or true negative. On the other hand, a\nfalse positive or false negative is a data item that the algorithm misclassified.\nPrecision Precision, or the caliber of a successful prediction made by the model, is one measure of the model's\nperformance. Precision is calculated by dividing the total number of positive predictions by the proportion of true\npositives (i.e., the number of true positives plus the number of false positives). For instance, in a customer attrition\nmodel, precision is the ratio of the total number of consumers the model properly anticipated would unsubscribe to the\nnumber of customers who actually did so.\nRecall The recall is determined as the proportion of Positive samples that were correctly identified as Positive to all\nPositive samples. The recall gauges how well the model can identify Positive samples. The more positive samples that\nare identified, the larger the recall. Only the classification of the positive samples is important to the recall. This is\nunrelated to the manner in which the negative samples are categorized, such as for precision. Even if all of the negative\nsamples were mistakenly classified as Positive, the recall will be 100% when the model labels all of the positive samples\nas Positive."}, {"title": "Methodology and approach", "content": "In the study, Accuracy, Precision and Recall parameters were calculated by running iterations of SVM, Random Forest,\nLinear Discriminant Analysis and Light GBM classifiers.\nSupport Vector Machines(SVM) [Boser et al., 1992] The interval maximization in the eigenspace is defined by a\nlinear classifier as the basic model of the two-class SVM. The learning strategy of SVM is to maximize the interval,\nwhich can be formalized as a problem of solving convex quadratic programming. This technique is also referred to as\nthe maximum edge algorithm, and it has the advantage of having a strong generalization ability that allows it to address\nproblems such as nonlinearity, small sample size, high dimension, etc. Using the linear separable SVM as an example,\nthe principle of SVM is to find a separable hyperplane in a particular eigenspace and then split the sample space into\ntwo categories: a positive class and a negative class, which correspond to two different types of samples."}, {"title": "Random Forest", "content": "Random Forest is an ensemble learning algorithm. An approach known as an\nensemble learner produces numerous individual learners and aggregates the outcomes. An improvement on the bagging\nmethod is used by random forest. In a typical decision tree, each feature characteristic is taken into consideration while\nmaking a decision at a node split. However, in Random forest, a random selection of features is used to choose the\noptimal parameter at each node of a decision tree. In addition to helping Random Forest scale effectively when there\nare numerous features in each feature vector, this random selection of features also makes it less susceptible to data\nnoise and reduces the interdependence (correlation) between the feature qualities."}, {"title": "Linear Discriminant Analysis", "content": "It is a fairly straightforward probabilistic classification model that\ngenerates reliable predictions even when its strong assumptions about the distribution of each input variable are broken.\nA probabilistic model for each class is created using the technique, based on the unique distribution of observations\nfor each input variable. Consequently, in classifying a new example is to determine the conditional likelihood that it\nbelongs to each class before choosing the one with the highest probability."}, {"title": "Light GBM", "content": "A gradient boosting framework that uses tree based learning algorithms. While other\nalgorithms grow trees horizontally, Light GBM grows vertically, which translates to Light GBM growing trees leaf-wise\nwhile other algorithms grow level-wise. The leaf with the greatest delta loss will be chosen to grow. It can reduce loss\nmore than a level-wise approach when expanding the same leaf. Light GBM is preferred since it uses less memory, can\nhandle even large amounts of data and its emphasis on precise outcomes."}, {"title": "Results & Discussion", "content": "Table 1 compares various approaches such as SVM, Random Forest, LDA and Light GBM for Android malware\ndetection. It is clearly evident from Table 1 that results from all other methods show lower accuracy than Random Forest.\nAll the algorithms are trained for the same \"Deep Learning for Cyber Security\" Dataset for uniform comparisons.\nRandom Forest provides an exceptionally high accuracy, recall and precision of 99.11%, 99.53% and 99.88% respectively\nwhich proves the efficiency of this algorithm. Random Forest is set for 10 folds, 10 N_splits and 140 N_estimators.\nMaximum depth is taken to be 22 for optimal results. All the hyperparameters are tuned by using GridsearchCV. The\ntop 10 focus features for the Random Forest classifier are shown in Fig. 6.\nWe can analyse the following about the Android features under consideration based on our experimental findings from\n10-fold cross validation:\nHigh Accuracy of Random Forest Random forest has an unusually high accuracy, properly classifying over 99.1%\nof the data. The Recall and Precision are 99.53 and 99.88 respectively. With n_estimators=140, max_depth=22 and\nrandomly chosen features were the best configuration.\nMisclassified malicious samples Across all tests, the majority of misclassified cases resulted from malicious class\nsamples being incorrectly categorized as benign class samples. This is based on looking at the confusion matrix that is\ngenerated for each experiment condition. Although the present dataset produces some extremely encouraging findings,\nits current form makes it difficult to use for real-time monitoring of malware infestations on Android devices. The\nexisting detection method would show promise in the case where the Android.apk executable application file is tested in\na private setting before being installed on a real device or before being made available to the general public. But this\ndoesn't happen very often. We must comprehend that the features found in the dataset are of a global nature."}, {"title": "Conclusion", "content": "Numerous classification techniques from machine learning have been used, as detailed in this work, to determine\nthe best method for identifying malware infections on mobile devices. On mobile devices, both signature-based and\nbehavior (Anomaly)-based techniques are being tested, much like when detecting malware infestations on PCs. In\nthis research, we investigate if and to what extent malware infections can be detected using the machine learning\nclassifiers SVM, Random Forest, Linear Discriminant Analysis, and Light GBM. The dataset was automatically created\nby keeping track of a collection of 70 APK permission attributes. Random Forest provided an extraordinarily high\naccuracy of over 99.1% of the samples accurately identified in our trials, which were based on a 10-fold cross validation."}]}