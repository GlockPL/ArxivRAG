{"title": "Generalized Mission Planning for Heterogeneous Multi-Robot Teams via LLM-constructed Hierarchical Trees", "authors": ["Piyush Gupta", "David Isele", "Enna Sachdeva", "Pin-Hao Huang", "Behzad Dariush", "Kwonjoon Lee", "Sangjae Bae"], "abstract": "We present a novel mission-planning strategy for heterogeneous multi-robot teams, taking into account the specific constraints and capabilities of each robot. Our approach employs hierarchical trees to systematically break down complex missions into manageable sub-tasks. We develop specialized APIs and tools, which are utilized by Large Language Models (LLMs) to efficiently construct these hierarchical trees. Once the hierarchical tree is generated, it is further decomposed to create optimized schedules for each robot, ensuring adherence to their individual constraints and capabilities. We demonstrate the effectiveness of our framework through detailed examples covering a wide range of missions, showcasing its flexibility and scalability.", "sections": [{"title": "I. INTRODUCTION", "content": "In recent decades, there have been substantial research efforts on the development of cooperative multi-agent systems [1,2]. As we look toward the future, we anticipate a society where robots with diverse capabilities become integral to daily life, contributing to a pro-social and harmonious society [3,4]. These robots could assist in various ways, such as helping an elderly person navigate urban streets, performing search and rescue operations, helping in a medical emergency, or ensuring the safety of a child in dangerous situations such as a busy road (see Fig. 1). The heterogeneity of these robots allows them to collaborate and form dynamic teams [5,6], and successfully carry out intricate operations that are required to accomplish complex missions. To realize this potential, it is essential to design generalized mission-planning frameworks that can accommodate the diverse capabilities of heterogeneous multi-robot teams.\nMission and task planning involve breaking down complex objectives into smaller, manageable tasks, ensuring alignment with available resources and adherence to system constraints. In heterogeneous multi-robot teams, each robot, with its own distinct capabilities and limitations, must be strategically assigned tasks that contribute to the mission in a coordinated and efficient manner. While there are many robot- and task-specific planning approaches, ranging from dexterous manipulation [7,8] to trajectory planning for autonomous vehicles [9\u201311], the literature lacks generalized mission planning approaches for heterogeneous multi-robot teams. Moreover, existing mission planning approaches for heterogeneous multi-robot teams are often tailored to specific scenarios [12], which limits their flexibility and adaptability across a wide range of real-world applications.\nA key limitation of conventional mission planning systems is their lack of general intelligence and common-sense reasoning, both of which are essential for managing the dynamic and unpredictable nature of real-world environments. Consequently, these systems often struggle to generalize across different mission types, limiting their effectiveness in diverse contexts. Recent advancements in Large Language Models (LLMs) such as GPT [13], Gemini [14], and LLaMA [15] have demonstrated emergent capabilities that suggest they might be useful in addressing the shortcomings of mission planning systems to reason over diverse and novel situations. Therefore, we hypothesize that incorporating LLMs into mission planning systems enables more robust and adaptable planning for heterogeneous multi-robot teams, significantly increasing their potential for real-world applications.\nThe mission in Multi-Robot Task Allocation (MRTA) problems can be categorized as elemental, simple, compound, or complex [16,17]. Among these categories, the most challenging tasks are complex missions with complex task dependencies (CD), where each task can be completed in multiple ways. Our focus is on complex missions of type CD[ST-MR-TA], which involve multiple robots (MR), where each robot performs a single task (ST) at a time. Task allocation and scheduling take into account time-extended assignments (TA), meaning both current and future tasks are considered during planning.\nIn recent years, significant progress has been made in multi-robot coordination and task allocation, with researchers exploring various approaches such as probabilistic methods based on partially observable Markov decision pro-"}, {"title": "II. BACKGROUND AND FORMULATION", "content": "We present a mission-planning pipeline for a team of heterogeneous robots with diverse constraints and capabilities. This work focuses exclusively on high-level mission planning, assuming the availability of scene understanding [32] and low-level motion planning [33,34] for task execution. The mission-planning module receives relevant scene information from the scene-understanding component, interprets the high-level mission objective, formulates a plan, and assigns tasks to the available robots accordingly. Identifying the overall mission objective from scene understanding can be facilitated by an LLM. In this work, we assume the availability of such a mission objective. Additionally, it is assumed that the low-level planner can successfully execute the task assignments for each robot.\nLet $R = \\{r_1,...,r_m\\}$ be the set of robots. Each robot $i \\in R$ can be of different types and can have various capabilities and limitations denoted by the sets $C_i$ and $L_i$, respectively. For example, a transportation robot may have the capabilities defined as [reach location, follow agent, carry load] and limitations defined as [max speed = 2 m/s, max load capacity = 4 Kg]. Each robot $i$ can perform a set of actions $A_i$ based on its capabilities $C_i$. For instance, a robot with the \"follow\" capability may have an action set that includes actions such as get_follow_path, follow_path, and send_location_to_server. These actions represent various executable sub-routines that can be performed by the robot, and will be referred as primitive actions throughout the paper. The system may have redundancy, and hence, in general $A_i \\cap A_j \\neq \\emptyset$ for $i \\neq j, i, j \\in R$.\nWe represent the mission using a hierarchical tree, where the objective is to incrementally decompose the mission objective until the level of primitive actions $a \\in A_i$ that can be executed by the robot $i \\in R$. This approach is inspired by TAEMS, a framework designed to represent large task hierarchies along with the complex relationships between tasks.\nFig. 2 provides an example of such a hierarchical tree. The root node represents the overall mission objective, which is progressively decomposed into simpler tasks, represented as nodes in the tree. These task nodes are classified into two types: primitive tasks (depicted as rectangular nodes) and non-primitive tasks (depicted as round nodes). Primitive tasks are the most basic actions a robot can directly execute based on its capabilities, while non-primitive tasks are abstract tasks that combine with primitive tasks to provide a meaningful structure for achieving the mission objective. At each level, child nodes are linked to their parent nodes via a logical constraint \\{AND, XOR\\}. For AND, all child tasks must be completed to satisfy the parent task, whereas for XOR, exactly one child task must be completed to fulfill the parent task. Additionally, temporal constraints, such as task precedence (illustrated by blue arrows in Fig. 2), may exist between tasks. Collectively, tasks across various levels of the tree contribute to achieving the root-level mission objective.\nTo evaluate each task, each primitive task $a \\in A_i$ is assigned a utility $u_a(i)$. In the TAEMS framework [30], this utility is often defined as a function of a triple $(q_a(i), d_a(i), c_a(i))$, where $q_a(i)$ represents the quality of the action, $d_a(i)$ represents the time duration of the action, and"}, {"title": "III. MISSION PLANNING FRAMEWORK", "content": "We now discuss the mission-planning framework consisting of hierarchical tree construction using LLMs and tree decomposition into MRTA alternatives.\n\nThe goal of the mission planning is to map the mission objective into a set of multi-robot task assignments, consisting of primitive tasks that can be executed by the robots. This becomes particularly challenging in complex class CD problems, where the mission can be accomplished in multiple ways, and tasks may have intricate dependencies. To address this, we leverage the intelligence and common-sense reasoning of LLMs to construct hierarchical trees for a wide range of real-world complex missions.\nHowever, while LLMs are strong in common-sense reasoning, their outputs can be unstructured and prone to hallucinations. This challenge makes it difficult for LLMS to construct a well-organized hierarchical tree with zero-shot prompting. To overcome this, we design various tools and APIs to assist the LLM, utilizing its function-calling capabilities to reliably generate the hierarchical tree.\nIn the hierarchical tree, all leaf nodes terminate at primitive tasks, which are defined based on the capabilities of the robots. Given a set of robot resources R, we construct a predefined set of subtree routines corresponding to system capabilities, denoted by $C = C_1 \\cup ... C_m$. Each subtree routine is a function that creates a pre-defined subtree based on system resources, constraints, and other functional arguments, e.g., FollowSubtree (agent, resources) routine constructs a follow subtree (Fig. 3) to follow an agent while adhering to robot capabilities and constraints.\nThis approach offers multiple advantages. First, for each subtree, we can include a node for all (or a subset of) robots capable of performing a subtree task, thereby integrating the multi-robot team formation (robot selection) process directly into the hierarchical tree construction. Second, multiple subtrees can be merged together to create more complex subtree routines, such as SearchAndFollowSubtree (agent, resources), to search and follow an agent. Lastly, since all subtrees adhere to the hierarchical structure and are common across a wide range of missions (as they are often context-independent), the LLM can leverage these predefined subtree routines to automatically generate the necessary subtrees and seamlessly integrate them into the overall hierarchical tree. Similar to primitive tasks, all hierarchical trees constructed via LLM should now terminate with a subtree attachment.\nIn addition to the subtree routines, we design a set of APIs such as HierarchicalTreeConstructor, CreateAndAddSubtask, addMultiSubtasks, attachMultiSubTrees, plotTree, printTree, and others to assist the LLM in constructing the hierarchical tree. The function definitions, along with details of their arguments, are provided to the LLM in JSON format. The LLM then leverages its function-calling ability to request these function calls with the appropriate arguments. The system executes the function calls requested by the LLM, ensuring the reliable construction of the hierarchical tree while reducing the LLM's overhead. Fig. 4 shows the overall mission planning pipeline."}, {"title": "B. Generating MRTA Alternatives", "content": "To decompose the hierarchical tree into several MRTA alternatives, we develop a heuristic algorithm as outlined in Algorithm 1. This recursive algorithm begins at the primitive nodes and progressively builds upwards, concluding at the root node. Let $alt(task) \\subseteq A = A_1 \\cup ... A_m$ represent an unordered set of all actions that, when executed, lead to the completion of task.\nThe cardinality of the alt set is influenced by factors such as the mission tree, available resources, and constraints. For missions with abundant resources and minimal constraints, the MRTA alternative generation process can experience combinatorial explosion, resulting in factorial complexity. To address the potential combinatorial explosion, the heuristic algorithm prunes the minimum-utility results at each step to make the problem tractable. During the procedure, the algorithm computes the utility of the set task_alt by summing the utility of each primitive task in the set, i.e., $u(task\\_alt) = \\sum_{a(i) \\in task\\_alt} u_a(i)$. It is important to note that, while the greedy approach in the pruning stage leads"}, {"title": "IV. RESULTS", "content": "We utilize the state-of-the-art GPT-40-2024-08-06 as our chosen LLM for this work, due to its capability to generate structured outputs and reliably execute function calls. We employ a system message and chain-of-thought prompting [36,37] to obtain reliable hierarchical trees. In our experiments, we focus on mobility tasks and select a set of robots as outlined in Table I. Each robot has its set of capabilities, constraints, and primitive actions. For brevity, we omit the detailed descriptions. For all primitive actions, instead of defining utility for each action individually, we assign a uniform utility based on the robot's capability. Specifically, each primitive action of robot i in a subtree corresponding to a capability receives the same utility, as shown in Table I. We use a simple utility function $u_a(i) = q_a(i)$ and set $d_a(i), c_a(i) = 0$. However, the framework allows for complex utility functions based on the system designer's preferences. The following subtree routines:\n(i) Search (agent, resources)\n(ii) Follow (agent, resources)\n(iii) Reach (agent, resources)\n(iv) SearchAndFollow (agent, resources)\n(v) Transport (agent, location)\n(vi) ReachAndTransport (agent, location)\nand following function APIs:\n(i) HierarchicalTree_init (objective)\n(ii) CreateAndAddSubtask (parentString, isPrimitive, taskName, LogicalConstraint)\n(iii) addMultiSubtasks (parentString, isPrimitiveList, taskNameList, LogicalConstraint)\n(iv) attachMultiSubTrees (parentString, treeNames, treeArguments, LogicalConstraint, contraintsPairs)\n(v) plotTree ()\n(vi) printTree ()\nwere provided to the LLM.\nThe following is an example of a hierarchical tree generation process by the LLM for the mission objective \"Reunite mom with her lost child\" (see also Fig. 5a).\nSystem: You are an advanced multi-agent decision-making system responsible for generating a Hierarchical Tree for a given mission objective. The process begins by establishing the mission objective as the root node. From this root, you can add nodes or entire subtrees to build the structure. Each node represents a subtask derived from its parent task, and the children of each node are connected through logical constraints that define their relationships. The hierarchical structure must ensure that all paths terminate in a valid subtree, meaning that every leaf node must be a subtree itself. You have access to a variety of predefined subtrees, which you can select based on the task requirements with appropriate arguments. To assist in creating the optimal tree, you can utilize various functions available through tool calls. After each tool call, you will receive the output from the corresponding function, which you can use to refine your decision-making process and continue building the tree. Your goal is to construct a coherent and logically consistent tree that effectively represents the mission's objectives and constraints. Before constructing the hierarchical tree by calling functions, think step by step how would you construct this tree. Think about the important agents, available subtree routines, and arguments you would use to create these subtrees. Remember that in the hierarchical tree, each branch must terminate with a subtree. Note that a hierarchical tree can contain multiple ways of solving the mission objective through the use of appropriate logical constraints."}, {"title": "V. LIMITATIONS AND FUTURE WORK", "content": "The system has a few limitations. In missions where available robot capabilities are insufficient, the LLM may hallucinate, leading to unrealistic solutions. Naturally, without adequate resources, not all problems are feasible. The performance of the system relies on the available subtree routines. Therefore, it is expected from the system designer to design a comprehensive set of subtree routines that align with the robot capabilities. Another limitation lies in the heuristic tree-search algorithm, which, due to its pruning process, may not always yield globally optimal solutions. Investigating alternative MRTA algorithms with provable optimality properties is an important avenue for future research. Additionally, the system's overall performance is closely tied to the reliability and efficiency of the scene-understanding module and low-level task execution.\nIn future work, we aim to conduct closed-loop simulations that integrate the scene-understanding and low-level planner modules. Additionally, we would like to fine-tune [38] the LLM for hierarchical tree construction task to obtain better quality trees. Lastly, Developing re-planning strategies for mission failures will also be a key focus."}, {"title": "VI. CONCLUSIONS", "content": "In this paper, we have introduced a mission-planning framework specifically designed for heterogeneous multi-robot teams. The framework utilizes hierarchical trees to represent and systematically decompose complex missions into manageable tasks. We developed various APIs and tools to automate the construction of these hierarchical trees, leveraging the function-calling capabilities of large language models (LLMs). We present a heuristic algorithm that provides multiple alternative multi-robot task assignments to accomplish the mission objective. Our results demonstrate that the framework effectively generates optimized schedules for the robots, ensuring that each task aligns with the unique constraints and capabilities of eachindividual robot."}]}