{"title": "FTA generation using GenAI with an Autonomy sensor Usecase", "authors": ["SNEHA SUDHIR SHETIYA", "DIVYA GARIKAPATI", "VEERAJA SOHONI"], "abstract": "Functional safety forms an important aspect in the design of systems. Its emphasis on the automotive industry has evolved significantly over the years. Till date many methods have been developed to get appropriate FTA(Fault Tree analysis) for various scenarios and features pertaining to Autonomous Driving. This paper is an attempt to explore the scope of using Generative Artificial Intelligence(GenAI) in order to develop Fault Tree Analysis(FTA) with the use case of malfunction for the Lidar sensor in mind. We explore various available open source Large Language Models(LLM) models and then dive deep into one of them to study its responses and provide our analysis. This paper successfully shows the possibility to train existing Large Language models through Prompt Engineering for fault tree analysis for any Autonomy usecase aided with PlantUML tool.", "sections": [{"title": "I. INTRODUCTION", "content": "With the advent of technology, safety has become a crucial aspect today. According to [1], it is mandatory to ensure safety into the products put into circulation in any country. Safety is more so relevant today due to the amount on equipment installed on the vehicles. Particularly in the Autonomy usecase, we have innumerable sensors like Lidar, Radar, Camera and others necessary to enable the self-driving features of the vehicle in consideration. The two most important standards which come to the mind when we think about safety of Automotive is ISO 26262(Functional Safety of Road Vehicles) [2] and PAS-21448(Safety Of The Intended Functionality)[3]."}, {"title": "A. FuSa(Functional Safety) and SOTIF(Safety Of The Intended Functionality)", "content": "Algorithms are developed that can make decisions in real-time by weighing the potential outcomes of different actions. These algorithms must be transparent and understandable to ensure public trust. It is necessary to establish transparent and clear policies for how autonomous vehicles should be-have in different scenarios and ODD (Operational Design Domain)[4]conditions. This can be then communicated to the public to build trust and acceptance. One approach can be to combine FuSa and SOTIF principles to create a multi-layered safety approach that ensures both the reliability of the vehicle's systems and the safety of its intended functionalities. Data from real-world driving and simulations can be used to continually improve the decision-making algorithms, ensuring they remain effective as new ethical challenges and scenarios emerge. For FuSa and SOTIF to be merged and safety use cases to be created, the GenAI based approaches can be leveraged to come up with different analysis at different stages of FuSa/SOTIF HW/SW development."}, {"title": "B. Gen AI Introduction and types", "content": "Generative Artificial Intelligence(GenAI) is a concept that has evolved from Artificial Intelligence[5] . Earlier there was the advent of neural networks[6] which were built from basic mathematical principles of backpropagation [[7]]. Overtime these neural networks were used to train Machine Learning models for prediction algorithms. Multiple use cases of this were to study crop withering[[8]], object detection for ba-sic self driving features [[9]] and so on. Eventually Natural Language Processing gained prominence and paved the way for the advent of Large Language Models [10]. The popular examples for these models today are OpenAI's ChatGPT-4 and Google's Gemini. Its common place now to utilize these technologies to leverage code optimizations and do other redundant work like framing emails and generating AI images. GenAI in a nutshell can be defined as technology focused on creating new data often resembling existing data. Some common types of this technology are elaborated below1:\n1. Generative Adversarial Networks(GANs) This has two neural networks in its design: Generator and a Discriminator. Generator's job is to create new data and the discriminator, as the name suggests tries to distinguish real data from Gen-erator's creation The output of this combination will give the desired creative result. This is majorly used in creating product designs, composing music and developing novel materials.\n2. Variational Autoencoders (VAEs) VAEs also work with data. It used encoding/decoding techniques to generate new data. It has a neural network which compresses the training data when encoding and then decodes it back to reconstruct it.VAE introduces randomness when decoding. This helps to create variable outputs which are similar to the input data. This is majorly used to create variations in existing artwork, generate realistic 3D models and anomaly detection.\n3. Autoregressive models These ML models generate data sequentially, predicting the next element based on the previ-ously generated elements. This can be text, code or any other sequential data type. This is majorly used in creative writing, chatbot responses and music composition.\n4. Transformer-based models These are another set of pow-erful neural network based models which deal with sequential"}, {"title": "C. HAZOP(FMEA/FTA analysis)", "content": "Hazard and Operability Study originally developed as an engineering tool utilized in the process industries to pre-vent occurrence of industrial hazards and plan mitigation strategies [11]. Overtime, its applications increased in various industries including identifying risk and hazards in engineering systems. The focus of HAZOP is mainly to avoid workplace hazards. But we will be leveraging the contents given in the HAZOP process to effectively consider a usecase in Autonomous driving and perform safety analysis for the same. Failure Mode and Effects Analysis (FMEA) [12] is a process that identifies potential failures with assets and other areas of business. The benefits of utilizing FMEA include reducing potential failures, saving lives, and lowering excessive costs. FMEA analysis is out of scope for the current paper and will be elaborated in the next research paper.\n1) Benefits of FTA in Automotive: Proactive Risk Identification: FTA helps pinpoint potential failures before they occur, preventing costly recalls and reputational damage. Improved Safety: By identifying hazards and their root causes, OEMs can implement measures to enhance vehicle safety. Enhanced Reliability: FTA contributes to designing and manufacturing vehicles that are less likely to break down, leading to increased customer satisfaction. Regulatory Compliance: FTA can help ensure that vehicles meet safety standards and regulations, avoiding fines and legal issues. Cost Reduction: Identifying potential failures early can save money by preventing costly repairs and downtime. Optimized Design and Manufacturing: FTA can inform design decisions and manufacturing processes, leading to more reliable and efficient vehicles."}, {"title": "II. EXISTING RESEARCH", "content": "Initial methods for effective FTA analysis have been illus-trated in [15]. This standard describes in detail the required risk analysis and evaluation procedure and safety measures, while appropriately reflecting on the system design defini-tion. Therefore, much research has been done on the risk analysis procedure, wherein the design information is mostly extracted from physical components of similar systems already in operation, the information traced back to obtain constituent functions, and then methods of identifying risk sources are studied. The paper has good conceptual design work done. Eventually its the job of safety engineers to leverage this to perform the fault tree analysis and risk analysis of the system in consideration.\nAutomotive Airbag system is the first non-classical feature of modern cars which complements the safety systems that protect the occupants of the vehicle.Airbags are majorly to protect in a crash situation, however may result in adverse effects if inadvertently deployed [16]. This paper performs FTA"}, {"title": "III. NEED FOR GEN AI IN FTA ANALYSIS", "content": "The entire FTA process currently involves a lot of manual analysis and the process can't be completed without taking help from multiple stakeholders. It is heavily based on the documentation and recording of different failure modes in a natural language.\nAs the complexity of the automotive SoC(System On Chip) grows, there will be a need to digitize these FTAs. Digitization of FTA is for processing and analyzing the FTA data to understand the potential hardware/software risks. To improve the quality of FTA, there will be a growing need to use the co-pilot who is trained with the prior/parent FTA data which can be further enhanced by the co-pilot[19] by regenerating failure modes based on this empirical data. In the context of AI, a co-pilot is an AI-powered virtual assistant designed to work alongside users, providing guidance, assistance, and even completing tasks on their behalf. It leverages large language models (LLMs) to understand and process information, and can be used in various domains and industries. For example, AI can analyze large datasets (e.g., historical failure data, and maintenance logs) to identify common failure modes and their causes. This can help in quickly generating an initial list of potential failures. AI algorithms can automate the probabil-ity calculation of various complex events by estimating the probability of occurrence of simple events.\nMajor contribution of the paper: 1. The paper discusses on various Large Language Models available in the Industry under Generative AI domain. 2. Initial tests are proved on an open source LLM model which shows promising results. 3. Experiments are conducted for various positive and negative scenarios for FTA generation using a GenAI model in the form of UML(Unified Modeling Language) code. 4. PlantUML is explored in its entirety to generate FTA diagrams. 5. Successful experiments open up scope for future work."}, {"title": "IV. STANDARDIZED SHAPES FOR FTA", "content": "Several standards documents and technical papers related to Fault Tree Analysis (FTA) have been published, outlining standard shapes and methodologies used in this analysis.[20] Here are some key references: NRC NUREG-0492: This standard[21] is specifically tailored for the nuclear power industry and outlines methodologies for FTA. It has been revised for aerospace applications by NASA. SAE ARP4761: This is a standard[22] for civil aerospace, providing guide-lines for performing FTA in the context of aviation safety. MIL-HDBK-338: This military handbook[23] addresses FTA methodologies applicable to military systems, ensuring reli-ability and safety in defense applications. IEC 61025: This international standard[24] is designed for cross-industry use and has been adopted as European Norm EN 61025, providing a comprehensive framework for conducting FTA across var-ious sectors. These documents collectively provide a robust foundation for understanding and implementing Fault Tree Analysis, including the standard shapes and logic used in constructing fault trees. For more specific standards related to transit and mobility data, the FTA Report No. 267[25] discusses interoperability standards and specifications, which may also include graphical representations relevant to FTA methodologies in public transportation contexts."}, {"title": "A. Most commonly used standard shapes in FTA", "content": "In Fault Tree Analysis (FTA), several standard shapes and symbols are commonly used to represent events and logical relationships3. Here are the key shapes:\n1. Event Symbols Basic Event: Represents a failure or error in a system component (e.g., a switch stuck in the open position).\n2. External Event: Indicates an event that is normally ex-pected to occur due to external factors but is not a fault.\n3. Undeveloped Event: Represents an event with insufficient information or one that is deemed inconsequential.\n4. Conditioning Event: Reflects conditions that affect the logic gates (e.g., mode of operation)."}, {"title": "1) Gate Symbols", "content": "OR Gate: The output occurs if any input occurs. AND Gate: The output occurs only if all inputs occur. Exclusive OR Gate: The output occurs if exactly one input occurs. Priority AND Gate: The output occurs if inputs occur in a specified sequence. Inhibit Gate: The output occurs if the input occurs under a specific enabling condition."}, {"title": "2) Transfer Symbols", "content": "Transfer Symbols: Used to connect the inputs and outputs of related fault trees, such as linking a subsystem's fault tree to its overall system fault tree. These symbols are essential for visually representing the relation-ships and events in an FTA, facilitating a clear understanding of system failures and their causes."}, {"title": "B. Benefits of using standardized shapes in FTA", "content": "Using standardized shapes in Fault Tree Analysis (FTA) provides several key benefits:\n1) Improved Clarity and Understanding: The use of stan-dardized event, gate, and transfer symbols creates a common visual language that makes fault trees easier to interpret and communicate. This clarity facilitates collaboration among diverse stakeholders like engineers, maintenance teams, and management.\n2) Consistency and Comparability: Adhering to standard shapes enables consistency in FTA modeling across an or-ganization. This allows for better comparison of fault trees, identification of common failure patterns, and benchmarking of results.\n3) Alignment with Industry Best Practices: Major standards like NRC NUREG-0492, SAE ARP4761, and IEC 61025 specify the standard shapes to be used in FTA. Employing these shapes ensures alignment with industry best practices and facilitates compliance with regulations.\n4) Ease of Interpretation: The symbolic representations of events, gates, and transfers intuitively convey the relationships and logic in a fault tree. This makes the diagrams easier to interpret, especially for complex systems.\n5) Compatibility with FTA Software: FTA software tools are designed to work with the standard shapes. Using these shapes ensures compatibility and enables the use of automated analysis features provided by the software.\nIn summary, standardized shapes are essential for creating clear, consistent, and industry-aligned fault trees that can be readily interpreted and analyzed. They form a critical component of effective FTA practice."}, {"title": "C. Leverage these standardized shapes to help train individuals or models to do an FTA on a component described", "content": "To leverage standardized shapes in Fault Tree Analysis (FTA) for training purposes, the following strategies can be employed:\n1. Structured Training Modules Develop training modules that focus on the specific standardized shapes used in FTA, such as basic events, gates (AND, OR, etc.), and transfer symbols. Each module can include: Visual Aids: Use diagrams to illustrate each shape and its meaning. Examples: Provide real-world examples of fault trees that utilize these shapes effectively.\n2. Interactive Learning Tools Utilize software tools that allow trainees to create fault trees using standardized shapes. This hands-on approach can include: Simulation Exercises: Create scenarios where trainees must identify potential failures and construct a fault tree using the correct shapes. Feedback Mechanisms: Implement systems for providing immediate feedback on the accuracy of the fault tree diagrams created by trainees.\n3. Collaborative Workshops Organize workshops that en-courage collaboration among participants from different dis-ciplines. This can enhance understanding through: Group Activities: Facilitate group exercises where participants work together to analyze a component and construct a fault tree. Cross-Disciplinary Perspectives: Involve engineers, mainte-nance personnel, and safety experts to provide diverse insights on the component being analyzed.\n4. Case Studies and Best Practices Incorporate case stud-ies that highlight successful applications of FTA in various industries. Focus on: Lessons Learned: Discuss how stan-dardized shapes helped identify critical failures and improve system reliability. Regulatory Compliance: Emphasize how using standardized shapes aligns with industry regulations and best practices, enhancing safety and compliance efforts.\n5. Continuous Improvement and Updates Encourage on-going learning by: Regularly Updating Training Materials: As new standards or shapes emerge, ensure training content reflects the most current practices. Feedback Loops: Collect feedback from trainees to continuously improve the training process and materials. By implementing these strategies, or-ganizations can effectively train personnel in FTA using stan-dardized shapes, ultimately leading to better risk management and system reliability."}, {"title": "V. USING LLMS TO PRODUCE BASIC FTA MODELS", "content": "We used several publicly available LLMs like OpenAI's ChatGPT[27], Google's Gemini[28] and Perplexity[29] to train them to generate desired Fault Tree analysis through Prompt Engineering. Following are the results:\n1. Gemini: When we requested Gemini to generate an FTA for the lidar sensor keeping in mind Autonomous Driving, it gave us links[30][31] to existing research which do FTA analysis. We went a step ahead and requested it to produce by itself. It then gave a theoretical explanation which was a standard FTA diagram with no reference to Lidar and also revealed its incapability to generate images.\n2. ChatGPT: This model was smarter in its approach than Gemini. Initially when we requested it the same question like Gemini to generate an FTA for the lidar sensor, it gave theoretical approach with detailed analysis to do the desired FTA. It also requested us if we need it in graphical format. Upon confirming, figure 4 was generated. However this did not suit our needs as we needed a flowchart with standard gates as mentioned in earlier sections.\nFrom the figure4e, we can observe that the image is not readable. The model has tried its best to represent the hardware and its subsequent fault analysis. However it cannot pass as valid FTA."}, {"title": "A. Major challenges faced in this experiment", "content": "1. We realized that although we can use these standardized LLMs to get FTAs, we cannot get the standardized flowchart shapes. 2. There is a need to build an example LLM model that recognizes these shapes. 3. Need to evaluate possibility of different modeling techniques and sync them with Perplexity to get FTAs.\nIn order to overcome above challenges, we took the aid of PlantUML[32]. PlantUML is a powerful tool that allows you to create various types of diagrams using a simple text-based syntax. This means you can define diagrams using plain text, which can be easily integrated into your documentation or source code. The ease with which this can be integrated in our VS code environment was another major factor for us to choose this line of research for next experiments."}, {"title": "VI. UTILISE CODE GENERATION CAPABILITIES OF GENAI MODELS TO GENERATE FTAS", "content": "Like FTA, UML also has standard shapes illustrated in table 9"}, {"title": "A. PlantUML Initial FTA", "content": "The series of prompts provided to Perplexity to generate our first PlantUML diagram is illustrated in TableI:\nCode block1) was generated and the resultant figure is figure10 and 11. These have been split into two diagrams for better viewability as the diagrams were getting blurry when included in paper as a whole."}, {"title": "VII. TRAINING AND FINE TUNING", "content": "A. Evaluate potential PlantUML code generators\nBefore fixing upon our preferred way to get FTA, we evaluated potential tools to best fit our usecase.\n1) TopEvent FTA: This tool[34] was available open source and an Industry standard used in automotive FTA designs. Based upon our analysis, this tool was found to be specific to particular ECU(Electronic Control Unit) use cases and not fit to be used with our model.\n2) Mermaid: This tool[35] is a popular to generate se-quence diagrams in software applications. However as we needed more top-down analysis for our FTA and less se-quences, we decided not to use Mermaid.\n3) yUML: This is a web-based tool[36] that allows you to create UML diagrams using a simple text syntax. However we found we could use the simple tax which yUML uses but have it in-built as an extension in our VS code.\n4) Nomnoml and Kroki: These tools[37][38] are good for class diagrams and Kroki in particular is an API which uses backend to generate diagrams. As our usecase was not neces-sary software based, we decided not to use these approaches. We decided to use syntax similar to yUML but plug it in as an extension with VS code on our system to generate and verify UML diagrams."}, {"title": "B. PlantUML modified FTA to fix errors", "content": "1) Prompt 1:give a Plant UML code to generate an FTA for lidar sensor in for level 4 autonomy in all weather conditions: Code generated: ??\n, label=lst: PlantUMLmodifiedFTA]\n@startuml LIDAR Sensor Failure FTA\nskinparam packageStyle rectangle\nskinparam linetype ortho\nrectangle \"LIDAR Sensor Failure\" as TopEvent\npackage \"Hardware\" {\n}\nrectangle \"Emitter\" as Emitter\nrectangle \"Detector\" as Detector\nrectangle \"Scanner\" as Scanner\npackage \"Software\" {\nrectangle \"Processing\" as Processing\n}\npackage \"Environmental\" {\nrectangle \"Interference' as\nInterference\nrectangle \"Obstruction\" as Obstruction\n}\nTopEvent Hardware\nTopEvent Software\nTopEvent Environmental"}, {"title": "VIII. OBSERVATIONS", "content": "1. Initially the model was not using standard FTA shapes. When prompted to use AND/OR gates, the model ran into er-rors as PlantUML previewer could not understand complicated FTA shapes. Upon asking Perplexity itself to resolve errors, the model kind of back traced its errors to find an intermediate solution which used standard shapes and performs FTA.\n2. The model performance did not degrade and it provided the necessary UML code when we added additional events for FTA cause.\n3. The model understands the usage of AND/OR gates."}, {"title": "IX. CONCLUSION AND FUTURE WORK", "content": "Based on the learnings from training the LLM model, we conclude that the Perplexity model very well understands the technical aspects on the derivation of FTA for a particular failure. The model however needs sufficient training to get it in the right format with gates and ensure correctness as it modifies the UML code. As a next step, we will be using this for FMEA analysis in our next paper. Current paper majorly focuses on one particular usecase for Lidar failure. There is scope for lot of work to improvise on this by using various FTA usecases for sensors like cameras, Radars and their respective faults in the autonomous vehicle field. For our analysis, we focused on Perplexity and other open source LLM models. As a future scope, one can generate an LLM model specifically which does FTA for Autonomous features and the research in this paper can serve as ground work for the same. Also, once the new LLM model has been trained to output the entire FTA diagram with the relevant logic representation and blocks, PlantUML would be completely replaced with the LLM itself. This should enable performing the entire FTA using LLM with a single or fewer prompts. This capability of FTA generation from the LLM could then be used in different applications and use cases such as healthcare, aerospace, and others."}]}