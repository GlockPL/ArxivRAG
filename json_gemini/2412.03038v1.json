{"title": "MILLION: A General Multi-Objective Framework with Controllable Risk for Portfolio Management", "authors": ["Liwei Deng", "Tianfu Wang", "Yan Zhao", "Kai Zheng"], "abstract": "Portfolio management is an important yet challenging task in AI for FinTech, which aims to allocate investors' budgets among different assets to balance the risk and return of an investment. In this study, we propose a general Multi-objectIve framework with controLLable risk for portfolio maNagement (MILLION), which consists of two main phases, i.e., return-related maximization and risk control. Specifically, in the return-related maximization phase, we introduce two auxiliary objectives, i.e., return rate prediction, and return rate ranking, combined with portfolio optimization to remit the overfitting problem and improve the generalization of the trained model to future markets. Subsequently, in the risk control phase, we propose two methods, i.e., portfolio interpolation and portfolio improvement, to achieve fine-grained risk control and fast risk adaption to a user-specified risk level. For the portfolio interpolation method, we theoretically prove that the risk can be perfectly controlled if the to-be-set risk level is in a proper interval. In addition, we also show that the return rate of the adjusted portfolio after portfolio interpolation is no less than that of the min-variance optimization, as long as the model in the reward maximization phase is effective. Furthermore, the portfolio improvement method can achieve greater return rates while keeping the same risk level compared to portfolio interpolation. Extensive experiments are conducted on three real-world datasets. The results demonstrate the effectiveness and efficiency of the proposed framework.", "sections": [{"title": "1 INTRODUCTION", "content": "Portfolio management is an essential component of a trading system, which allocates a budget among different possible financial assets according to different objectives, such as maximizing returns at a given risk level [16, 24, 29, 41]. In 1952, Markowitz introduced a pioneer work, called Modern Portfolio Theory (MPT) [29]. MPT aims to construct a portfolio by solving a combinational optimization problem, leading to a higher return per risk than trading an individual asset [46]. Recently, the benefit of the portfolio compared with investing a single asset is further confirmed [46, 51], e.g., Eric Zivot [51] shows that the risk of a long-only portfolio is always lower than that of an individual asset, for a given expected return, as long as assets are not perfect correlated. Due to the desirable property of investing a bucket of assets, portfolio management has drawn much attention over the past decades.\nExisting studies on portfolio management can be roughly divided into three main lines, i.e., predict-then-optimize, reinforcement learning (RL) based methods, and deep learning (DL) based approaches, based on different optimization ways. The methods along the first line [4, 5, 12, 13, 16, 20, 50] first estimate future price or return rate of each asset, and then solve a combinational optimization problem, e.g., mean-variance model, to obtain the final portfolio. For example, Huang et al. [16] forecast the future price of each asset through a sliding window-based moving average and then optimize the robust median reversion problem with the estimated prices to obtain the portfolio. Despite its ability of great ease of use, the performance of these methods is strongly related to the accuracy of the forecasting model. Unfortunately, the accurate asset price or return rate cannot be accessible due to the volatility of the dynamic market. Thus, rather than focusing on accurate price prediction, RL-based methods [1, 14, 17, 24, 25, 35] aim to directly obtain a portfolio from the observed market state through maximizing the defined reward function. For example, Liu et al. [25] propose a general RL-based framework to achieve automated trading, in which they adopt classical RL methods, such as Proximal Policy Optimization (PPO), to optimize the neural networks using the cumulative return as their reward. However, these methods ignore the fact that the portfolio optimization problem is different from others, such as video gaming and cheesing, where the reward from many investing goals, such as Sharpe ratio [32] and cumulative return, is differentiable. Therefore, optimizing from a surrogate loss in RL is inefficient. The methods in the last line [42, 44-46]"}, {"title": "2 PRELIMINARIES", "content": "We present necessary concepts and define the problem addressed.\nDefinition 2.1 (Holding Period). A holding period is the minimum time unit to invest an asset. We follow previous studies that divide the whole investment period into multiple non-overlapped holding periods with fixed length, such as one day or one month.\nDefinition 2.2 (Asset Prices). The price of an asset is defined as a time series $p^i = \\{p_1^i, p_2^i, ..., p_T^i\\}$, where $p_t^i$ is the price of asset $i$ at $t$.\nDefinition 2.3 (Return Rate). The return rate of an asset $i$ at time $t$ is defined as $r_t^i = p_{t+1}^i/p_t^i \u2013 1$, which presents that if an investor spent $n$ cash to buy asset $i$ at time $t$, he can get profit $n * r_t^i$.\nDefinition 2.4 (Risk). Following the risk definition in MPT [29], we define the risk as volatility (i.e., variance) of return rate (i.e., $\\sigma^2 = E[(r^i - \\bar{r^i})^2]$, where $\\bar{r^i}$ is the expectation of $r^i$). The idea behind this definition is that the return rate of an asset has a lower variance, and the certainty of investing in this asset is higher, which induces lower risk. In this study, $\\sigma^i$ is calculated from a sliding window of historical asset return rate, in which the window size is consistent with $w$ in temporal modeling (cf. Section 3.1.2).\nDefinition 2.5 (Long Position). The long position is to buy an asset $i$ at time $t_1$ and then sell it at time $t_2$, aiming for a profit derived from an increase in the asset's price over this period. The produced profit can be formulated as $n * r_{t_1,t_2}^i$, where $n$ and $r_{t_1,t_2}^i$ denotes the investment amount and return rate from $t_1$ to $t_2$ of asset $i$, respectively.\nConversely, a short position operation represents the opposite strategy, where investors profit from the decline in an asset's price. In this study, we prohibit the short position operation, i.e., investors can only get profits when the prices of invested assets increase.\nDefinition 2.6 (Portfolio). Given $N$ assets to be invested, a portfolio is defined as a vector $b = (b_1, b_2, ..., b_N)$, where $b_i$ presents the proportion of the investment on asset $i$ and $\\sum_{i=1}^N b_i = 1$. The return rate of portfolio $b$ is $b^Tr$, where $r$ indicates the return rates of $N$ assets. The risk of portfolio is $b^T \\Sigma b$, where $\\Sigma \\in R^{N \\times N}$ is the return rate covariance matrix of $N$ assets.\nDefinition 2.7 (Portfolio Management). Portfolio management is a sequential investment, which determines portfolio $b$ at the end of each holding period. We pursue to achieve two goals in this study: (1) maximizing the portfolio return; (2) controlling the portfolio risk to a user-specific risk level."}, {"title": "3 METHODOLOGY", "content": "We propose a general multi-objective framework with controllable risk for portfolio management, named MILLION, as shown in Figure 1, which consists of two main phases, i.e., return-related maximization and risk control. In the return-related maximization phase,"}, {"title": "3.1 Return Maximization", "content": "Earning money is the primary goal for most investors, in which understanding the current market state is a fundamental and critical step to provide instructions to guide the investors' decision process. In this study, rather than designing a new DL-based model to effectively extract more powerful and predictive representations from raw features, we focus on developing a general framework that can fit various models. Thus, we directly adopt existing models, i.e., LSTMHA [9], with slight modifications to encode the market state. It should be noted that another model with the ability of spatial-temporal modeling can also be adopted to encode the state of assets [6, 26, 38, 40, 49]. As shown in the left panel of Figure 1, we model the spatial (i.e., relations among assets) and temporal (i.e., relations along timestamp) information with attention technique and LSTM, respectively, in which the covariance matrix between assets' historical return rate is incorporated into the attention module. After the representation of each asset is obtained, a multi-objective optimization module is appended, in which two portfolio-related objectives are adopted to improve the model generalization.\n3.  1.  1 Assets Indicators. Following previous studies, e.g., FinRL [25], we incorporate the eight indicators derived from the prices and volumes as our model input. These indicators include Moving Average Convergence/Divergence (MACD), Bollinger Bands (BOLL) (i.e., lower bound and upper bound of BOLL), Relative Strength Index (RSI), Commodity Channel Index (CCI), Directional Movement Index (DMI), and Simple Moving Average (SMA) (i.e., 30-days and 60-days). Given the disparate scales across these financial metrics, we employ Z-score normalization to standardize them.\n4.  1.  2 Spatio-Temporal Modeling. To construct an effective portfolio, we necessitate insight into the future market, particularly regarding the performance (e.g., return rate) of individual assets."}, {"title": "Temporal Modeling.", "content": "We use the vector $x_t^i$ to denote the history state of asset $i$ at time $t$, which consists of eight indicators as stated in section 3.1.1. Thus, the current state of asset $i$ at time $t$ is presented by a window size of $X_t^i$ (i.e., $X_t^i = \\{x_{t-w+1}^i, ..., x_t^i\\}$). A one-layer LSTM is adopted to recursively encode $X_t^i$ into a vector.\n$h_t^i = LSTM(X_t^i)$                                                      (1)\nwhere $h_t^i \\in R^{d_1}$ is the representation of asset $i$ at time $t$, which models the intra-correlation along the timestamps."}, {"title": "Spatial Modeling.", "content": "Despite the temporal dependency is encoded into $h_t^i$, the inter-correlation among assets are not included. Therefore, we leverage the attention technique to model the dynamic relations among assets, in which the covariance matrix between assets' historical return rates is integrated to remit the burden in the learning process.\n$\\hat{h}_t^i = \\frac{1}{\\beta+1}(\\beta h_t^i + \\sum_{k=1}^N \\alpha_{ik}c_{ik}h_t^k)$                                                                   (2)\n$\\alpha_{ik} = \\frac{exp(W_a h_t^k)}{\\sum_{k=1}^N exp(W_a h_t^k)}$\nwhere $W_a \\in R^{d_1 \\times d_1}$ is the to-be-learned parameters, $\\beta$ is a scalar to balance the weight between attention weights and covariance matrix, which is updated with the training goes on, $c_{ik}$ presents the covariance between asset $i$ and $k$, and $\\hat{h}_t^i$ is the encoded representation for asset $i$ at time $t$."}, {"title": "Portfolio Construction.", "content": "Based on the extracted feature from previous modules, we adopt a two-layer MLP with ReLU activation to evaluate each asset and construct a portfolio as follows:\n$v_t^i = MLP_p(\\hat{h}_t^i)$ \n$b_t^i = \\frac{exp(v_t^i)}{\\sum_{k=1}^N exp(v_t^k)}$                                                                        (3)\nwhere $v_t^i$ indicates the estimated valuation of investing on asset $i$, and $b_t^i$ is the portfolio weight of asset $i$."}, {"title": "3.1.3 Multi-Objective Optimization.", "content": "After obtaining the portfolio weight at each time step, we can directly optimize the Sharpe ratio or the cumulative return as the same with previous studies [45, 46]. However, while neural networks offer powerful representational ability, they often face challenges in generalizing to future market conditions effectively. To remit this problem, we propose a"}, {"title": "Portfolio Optimization.", "content": "To optimize the constructed portfolio, there are two common objectives [46] as follows:\n$(MaxCum)\\ \\mathcal{L}_{mc} = - \\sum_{t=1}^T (r_t + 1)$\n$(MaxSharpe)\\ \\mathcal{L}_{ms} = - \\frac{Mean(\\{r_t\\}_{t=1}^T)}{Std(\\{r_t\\}_{t=1}^T)}$\n$r_t = b_t^T r_t - c_t b_t^T b_{t-1}$                                                                     (4)\nwhere $r_t$ represents the return rate of each assets at time $t$, $\\bar{r}$ is the corresponding portfolio return rate, $c_t$ is the transaction cost rate, and $T$ is the total number of holding period. Max\u0421\u0438\u0442 focuses on maximizing the cumulative return, which will drive the model to construct a centralized portfolio (i.e., investing in a single asset that may achieve the highest return rate among other assets). MaxSharpe not only focuses on maximizing the portfolio return rate at each time but also aims to minimize its standard deviation, which will impose the model to construct a relatively conservative portfolio. Except for the two commonly used objectives, we also develop another objective as follows:\n$(MinDown)\\ \\mathcal{L}_{md} = - \\sum_{t=1}^T max(-r_t + \\delta_{\\alpha}, 0)$                                                                         (5)\nwhere $\\delta_{\\alpha}$ indicates a threshold, which presents the investors' expected return rate in each holding period. The goal of MinDown is to construct portfolios that can achieve a return rate larger than the given threshold $\\delta_{\\alpha}$. The lower $\\delta_{\\alpha}$ is, the more conservative the constructed portfolio is, which will endow the model with roughly risk-control ability. Moreover, $\\delta_{\\alpha}$ is unnecessary to be fixed, which can be dynamic according to the situation of the current market state. For example, a simple implementation is to replace $\\delta_{\\alpha}$ with the return rate of a benchmark such as NAS100 index."}, {"title": "Auxiliary Optimization.", "content": "Directly optimizing a single objective in portfolio optimization, the trained model may suffer from the overfitting problem (i.e., it has poor generalization in the future market) due to the highly dynamic market and low signal-to-noise ratio in historical information. To remit this problem, we introduce two auxiliary objectives [8, 10, 11, 34, 47], which are optimized combining with the objective in portfolio optimization.\n$(\\text{Prediction})\\ \\mathcal{L}_p = \\sum_{t=1}^T |\\mid r_t - \\hat{r_t} |\\mid_2^2$\n$(\\text{Ranking})\\ \\mathcal{L}_r = \\sum_{t=1}^T\\sum_{i=1}^N\\sum_{j=1}^N max(-(\\hat{r_t}^i - \\hat{r_t}^j)(r_t^i - r_t^j),0)$                                                            (6)\nwhere $r_t = [r_t^1, r_t^2, ..., r_t^N]$ and $\\hat{r_t} = [\\hat{r_t}^1, \\hat{r_t}^2, ..., \\hat{r_t}^N]$ is the predicted and the ground-truth return rate of N assets. $\\hat{r_t}$ is obtained through a MLP with $\\hat{h_t^i}$ has inputs. This neural networks share the same architecture with $MLP_p$ in portfolio construction but with different parameters. With these objectives, we define our final optimization objective as follows:\n$\\mathcal{L} = -\\xi_m \\mathcal{L}_m + \\xi_p \\mathcal{L}_p + \\xi_r \\mathcal{L}_r$                                                                                                                                     (7)\nwhere * is in {mc, ms, md}, and $\\xi_m$, $\\xi_p$, and $\\xi_r$ are the weights to balance the contributions of different objectives. In our experiments, we notice the performance of the constructed portfolio is sensitive to the weights. To reduce the efforts to search an optimal weights, we follow Kendal et al. [18] to set the weights adaptively.\n$\\mathcal{L} = - \\sum_{i \\in \\{m,p,r\\}} (\\xi_i \\mathcal{L}_i + log \\xi_i)$                                                                                      (8)\nwhere $\\xi_m$, $\\xi_p$, and $\\xi_r$ are to-be-learned parameters, which are adaptively updated in the training phase. The parameters of the neural networks are optimized through minimizing $\\mathcal{L}$ in Equation 8."}, {"title": "3.2 Risk Control", "content": "Despite risk management being a vital component in portfolio management, current DL-based and RL-based approaches are hard to achieve fine-grained risk control. For example, Zhang et al. [45] utilize neural networks to optimize the Lagrange formulation mean-variance model, in which the risk term is weighted and added to the portfolio return. It can achieve rough risk control in the training phase but without guaranteeing the unseen data. Moreover, existing studies always construct one portfolio for all investors at each holding period, which cannot satisfy investors' different preferences for risk-taking. Thus, we propose two methods, i.e., portfolio interpolation and portfolio improvement, to deal with these issues, which are elaborated as follows."}, {"title": "3.2.1 Portfolio Interpolation.", "content": "We denote $b_t^m$ as the portfolio at time $t$ obtained from the min-variance optimization, which has the lowest risk compared to any other portfolios. To control the risk of the constructed portfolio from the return maximization phase, we obtain the risk-adjusted portfolio $b_t^\\gamma$ with interpolation as follows:\n$b_t^\\gamma = (1 - \\gamma_t)b_t^* + \\gamma_t b_t^m$                                                                                                                                         (9)\nwhere $\\gamma_t \\in [0, 1]$ is the weight to control the amount of interpolation. With the above interpolation method, we have the following proposition, in which we denote $\\sigma_t^*$, $\\sigma_t^m$, and $\\sigma_t^\\gamma$ as the risk of the three portfolios $b_t^*$, $b_t^m$, and $b_t^\\gamma$, respectively (e.g., $\\sigma_t^* = b_t^{*T} \\Sigma b_t^*$).\nProposition 3.1. $\\sigma_t^\\gamma$ is a decreasing monotone function in terms of $\\gamma_t$ if $\\sigma_t^* \\neq \\sigma_t^m$, whose value is in the interval $[\\sigma_t^m, \\sigma_t^*]$.\nProof.\n$\\sigma_t^\\gamma = b_t^{\\gamma T} \\Sigma b_t^\\gamma$\n$= [(1 - \\gamma_t)b_t^* + \\gamma_t b_t^m]^T \\Sigma [(1 - \\gamma_t)b_t^* + \\gamma_t b_t^m]$\n$= (b_t^{*T} \\Sigma b_t^* - 2b_t^{*T} \\Sigma b_t^m + b_t^{mT} \\Sigma b_t^m) \\gamma_t^2$\n$+ 2(b_t^{*T} \\Sigma b_t^m \u2013 b_t^{*T} \\Sigma b_t^*) \\gamma_t + b_t^{*T} \\Sigma b_t^*$.                                                                    (10)\nWe represent the portfolios with the eigenvectors of $\\Sigma$ (i.e., $b_t^* = \\sum_{i=1}^N c_i x_i$ and $b_t^m = \\sum_{i=1}^N d_i x_i$). The eigenvalue of $x_i$ is denoted as $\\lambda_i$. It should be noted that $\\Sigma$ is symmetric and semi-positive whose eigenvalue is non-negative (i.e., $\\lambda_i \\geq 0, \\forall i \\in [1, N]$).\n$b_t^{*T} \\Sigma b_t^* - 2b_t^{*T} \\Sigma b_t^m + b_t^{mT} \\Sigma b_t^m$\n$= \\sum_{i=1}^N \\lambda_i c_i^2 - 2 \\sum_{i=1}^N c_i d_i + \\sum_{i=1}^N \\lambda_i d_i^2$\n$= \\sum_{i=1}^N \\lambda_i (c_i - d_i)^2 \\geq 0$                                                                                                              (11)\nWhen $\\sigma_t^\\gamma$ is a quadratic function in terms of $\\gamma_t$, we can know that this function is an upward opening and it gets the lowest when $\\gamma_t$ equals 1. Thus, this function is decreasing monotone when $\\gamma_t$ varies from 0 to 1 (i.e., $\\sigma_t^\\gamma \\in [\\sigma_t^m, \\sigma_t^*]$). Next, when the quadratic"}, {"title": "Proposition 3.2.", "content": "$r_t^\\gamma = [(1 - \\gamma_t)b_t^* + \\gamma_t b_t^m]^T r_t = (1 - \\gamma_t)b_t^{*T} r_t + \\gamma_t b_t^{mT} r_t$\n$= (1 - \\gamma_t)r_t^* + \\gamma_t r_t^m$                                                                                              (13)\nFrom above equation, we can see that the portfolio return rate is a linear function in terms of $\\gamma_t$, which achieves the lowest $r_t^m$ when $\\gamma_t$ equals to 1. Thus, $r_t^\\gamma$ is no less than $r_t^m$.\nProposition 3.2 demonstrates that no matter how we interpolate, the return rate of $b_t^\\gamma$ is always bounded by it of $b_t^*$ (i.e., upper bound) and $b_t^m$ (i.e., lower bound), which means that the portfolio interpolation method is safe and will not generate a portfolio that causes dramatic loss."}, {"title": "3.2.2 Portfolio Improvement.", "content": "Despite the advantages of the portfolio interpolation method, the portfolio after interpolation may be far away from the efficient frontier, which means there is an opportunity to improve the portfolio return while keeping the user-specified risk unchanged. We provide an illustration of this situation as shown in Figure 2(a). The horizontal and vertical axis represent the risk and return, respectively. The blue dash line presents the portfolio interpolation. From this figure, we can see that there may exist an orange area that cannot be obtained through interpolation, in which there exist points that have the same risk as the interpolated point but have higher returns. To reach these points, we propose a portfolio improvement approach, which is to optimize the portfolio from return maximization to push it to the orange area as shown in Figure 2(b). Then, the portfolio interpolation is adopted to control risk, in which the interpolated point is expected to have a higher return with the same risk compared with the portfolio from the pure portfolio interpolation method. Before introducing our approach, we first present a proposition as follows:\nProposition 3.3. Assume we have a set of portfolios $\\{b_t^1, b_t^2, ..., b_t^i, ...\\}$ whose return rates are the same. We apply the portfolio interpolation method to control their risks to a given risk $\\sigma_g$. The portfolio with the highest return after interpolation has the lowest $\\gamma_t$.\nFrom this proposition, the portfolio improvement approach is to minimize the interpolation weight $\\gamma_t$ for a user-specified risk level $\\sigma_g$. Specifically, we solve Equation 10 for a given $\\sigma_g$ to get $\\gamma_t$, in which $\\gamma_t$ can be presented as a function of $\\sigma_g$, $\\Sigma$, $b_t^*$, and $b_t^m$. Since $\\gamma_t$ is the root of a quadratic equation with one unknown, the function f is differentiable. Thus, we can directly minimize $\\gamma_t$ to optimize $v_t$ (i.e., the portfolio before Softmax, cf. Equation 3) to compel the portfolio constraint (i.e., $\\sum_{i=1}^N b_t^i = 1$).\n$\\mathcal{L}_{imp} = \\sum_{t=1}^T \\gamma_t$                                                                                                              (14)\nMoreover, since the goal of personalized risk control is to fit different investors' requests, it is time-consuming to finetune the whole model for each investor. Therefore, the model's parameters are fixed at the portfolio improvement, which can save the amount of calculation.\nHowever, only minimizing $\\gamma_t$ may cause unexpected damage to the portfolio return as shown in Figure 2(b), where the pink area will produce a smaller $\\gamma_t$ but also a smaller portfolio return. To deal with this situation, we incorporate a return objective when optimizing. The return-added objective can be formulated as follows:\n$\\mathcal{L}_{imp+ret} = -\\zeta \\sum_{t=1}^T (b_t^T \\hat{r_t}) + \\sum_{t=1}^T \\gamma_t$                                                                                       (15)\nwhere $\\hat{r_t}$ is the predicted assets' return rate, and $\\zeta$ is a weight to balance the loss of the two components. It should be noted that the predicted return rate is not constrained to obtained from our predictor in the return-related maximization phase but can be accessed from any predictors, such as LSTM or more advanced models, and training separately."}, {"title": "4 EXPERIMENTS", "content": "Dataset. The data from both the U.S. stock market and cryptocurrency market is obtained using FinRL\u00b9 and CCXT2, and then preprocessed with the FinRL library to extract the indicators detailed in section 3.1.1. In the case of the stock market, we specifically focus on stocks from two prominent U.S. stock indexes, namely NAS100 and DOW30. For the cryptocurrency market, we select the top 10 cryptocurrencies by market occupancy. Table 2 provides an"}, {"title": "4.1 Return-Related Maximization Performance", "content": "Overall. Table 1 displays the backtesting outcomes of various models across three datasets, while Figure 3 illustrates cumulative wealth curves. It's evident that among the predict-then-optimize approaches, no single model outperforms others consistently in terms of APR or ASR. This suggests that different market conditions favor different prediction models, making it challenging to"}, {"title": "4.2 Risk Control Performance", "content": "We conduct a comparative analysis of the proposed risk control methodologies alongside predict-then-optimize strategies, as illustrated in Figure 5. The horizontal axis represents user-defined risk"}, {"title": "4.3 Efficiency", "content": "In Figure 4, we present the training time required for each algorithm to reach convergence. Traditional machine learning methods, such as DT and RF, are executed on the CPU, while other models are run on an A100 GPU. Notably, MILLION demonstrates comparable training times to predict-then-optimize algorithms and outperforms RL-based methods in terms of speed. This is attributed to the stability of training in DL compared to RL, which typically requires over 100K steps to converge. Additionally, the interaction between RL agents and the environment is slower, further hampering the training efficiency of RL-based methods."}, {"title": "4.4 Case Study", "content": "To further understand the effectiveness of the proposed risk control approaches, we conduct a case study on DOW30 dataset."}, {"title": "Effect of uniform interpolation.", "content": "In Figure 6(a), the performance of uniform portfolio interpolation is depicted, showcasing the variation of $\\gamma_t$ from 0 to 1 with a step size of 0.1. The bottom curve represents the cumulative wealth attained from min-variance optimization, where $\\gamma_t$ is fixed at 1 for all $t$. Notably, as $\\gamma_t$ increases, both CW and AVOL gradually decrease. Furthermore, CW consistently remains bounded by the cumulative wealth obtained from min-variance optimization (MVM), underscoring the empirical validity of Proposition 3.2."}, {"title": "Effect of portfolio improvement.", "content": "Apart from the portfolio interpolation method, we demonstrate the effectiveness of portfolio improvement in Figure 6(b). Here, we maintain the portfolio risk at 5e-5 and iterate Equation (14) optimization 30 times. Each line in the figure represents a single iteration, with the green line depicting the outcome of portfolio interpolation and the red line representing the final result of portfolio improvement. Notably, all lines exhibit identical risk levels. From this visualization, we observe a notable enhancement in the CW value, rising from approximately 1.2 to 1.35 by the conclusion of the test period, underscoring the effectiveness of the proposed portfolio improvement. Additionally, we examine the performance of portfolio improvement with varying numbers of optimization epochs (refer to Equation 14 and Equation 15), showcased in Figure 7, where each data point corresponds to the same risk level. Incorporating the predicted return rate into the portfolio improvement yields a final portfolio with superior returns and reduced risk, despite potential inaccuracies in the predicted return rate. For instance, the predict-then-optimize framework yields a"}, {"title": "5 RELATED WORKS", "content": "In this section, we survey the related studies on predict-then-optimize and direct portfolio optimization.\nPredict-then-optimize Portfolio Optimization. Mean-variance model [29] is a classical method to construct a portfolio through solving a combinational optimization problem as follows:\n$max \\sum_{i=1}^N \\bar{r_t} b_t^i$\ns.t. $\\sum_{i=1}^N \\sigma_{it} \\leq \\sigma_{\\alpha}$\n$\\sum_{i=1}^N b_t^i = 1, 1 \\geq b_t^i \\geq 0, \\forall i$                                                                              (16)\nin which the return rate of each asset, i.e., $r_t$, and its covariance, i.e., $\\Sigma_t$, are supposed to be already known or simply estimated using the sample mean and sample covariance of historical assets' return rate. However, since the market is dynamic and volatile, the simple estimation may not reflect the future market. To construct a more effective portfolio, plenty of researchers are devoted to developing more powerful return rate prediction models. For example, Li et al. [21] propose Confidence Weighted Mean Reversion (CWMR) to estimate the next price relative as the inverse of the last of it. Huang et al. [16] exploit the reversion phenomenon via robust L\u2081-median estimators to predict the next price relative. With the fast development of machine learning, a number of advanced models are proposed. For example, Li et al. [22] propose a multimodal event-driven LSTM model using online news to predict stocks' return rates. Besides improving the accuracy of return rate prediction, there are lots of efforts in formulating a different portfolio optimization problem. For example, Rockafellar et al. [31] adopt conditional value-at-risk (CVaR) as the risk metric for portfolio construction. Furthermore, Lai et al. [19] propose a multi-trend CVaR as the risk"}, {"title": "6 CONCLUSION", "content": "In this paper, we propose a general multi-objective framework with controllable risk for portfolio management called MILLION, in which we decompose the portfolio management into two main phases, i.e., return-related maximization and risk control. In the first phase, we follow the DL-based portfolio framework and demonstrate that the multi-objective design is useful in improving return-related metrics, such as APR, and ASR, through backtesting on three real-world datasets. In the risk control phase, we propose two approaches to adjust the risk of the constructed portfolio to fit different investors' preferences in terms of risk-taking. Compared with methods in the predict-then-optimize framework, MILLION performs better in terms of ASR under the same risk level."}]}