{"title": "xApp Distillation: AI-based Conflict Mitigation in B5G O-RAN", "authors": ["Hakan Erdol", "Xiaoyang Wang", "Robert Piechocki", "George Oikonomou", "Arjun Parekh"], "abstract": "The advancements of machine learning-based (ML) decision-making algorithms created various research and industrial opportunities. One of these areas is ML-based near-real-time network management applications (xApps) in Open-Radio Access Network (O-RAN). Normally, xApps are designed solely for the desired objectives, and fine-tuned for deployment. However, telecommunication companies can employ multiple xApps and deploy them in overlapping areas. Consider the different design objectives of xApps, the deployment might cause conflicts. To prevent such conflicts, we proposed the xApp distillation method that distills knowledge from multiple xApps, then uses this knowledge to train a single model that has retained the capabilities of previous xApps. Performance evaluations show that compared conflict mitigation schemes can cause up to six times more network outages than xApp distillation in some cases.", "sections": [{"title": "I. INTRODUCTION", "content": "Open radio access networks (O-RAN) in 5G and beyond led to a number of new research and implementation opportunities for the telecommunication sector. One of the key features of O-RAN is xApp applications on beyond the fifth generation (B5G) cellular networks, and the capacity to host machine learning operations. xApp is a part of the RAN intelligent controller (RIC) that takes near-real-time actions as a third-party application to control the network parameters for the desired objectives. The RIC platform has the capability of storing and running multiple xApps [1]. ML-based xApps and their capabilities have been studied and proved to be beneficial for next-generation (NextG) cellular networks [2]. However, most of the studies assume there can be only a single xApp in the wireless communication environment and ignore the risk of conflicts [3]. For sequential decision-making applications, deep reinforcement learning (DRL)-based solutions are among the popular choices for ML-based xApps [4].\nO-RAN alliance defined several types of conflict situations [5]. 1) Direct conflicts are easy to detect due to the observability of the conflict before actions. Direct conflicts occur when multiple xApps try to control the same parameter in the network. 2) Indirect conflicts cannot be detected until actions are taken in the environment. These situations occur when different xApps adjust different parameters to optimise the same metric according to the respective objective. As an example of indirect conflicts, one xApp manages the resource block allocation while the other controls transmit power. Both of them have effects on the throughput value, but it is not always possible to predict how those actions will affect the performance. Besides the number of potential reasons, effects of implicit conflicts can only be observed on future KPIs which is not possible to avoid at the time of action [5].\nTo cope with conflicting xApps, the O-RAN Alliance proposes two different conflict mitigation schemes in the RIC architecture technical reports [5]. Since the issue is having multiple sets of actions for a single operation, conflict mitigation schemes aim to eliminate all actions and apply the best action among the set. O-RAN conflict mitigation decides on the optimised action, and disables all of the xApp actions except for the optimised one. This approach doesn't use the information of disabled actions.\nTo improve joint coordination of network, [6] proposed team-learning. Their approach proposes a joint learning scheme for multiple xApps by sharing actions with each other. Their results show improvements over individually trained DRL-based models in terms of overall throughput and packet drop rates. However, in their scenario, there are only indirect conflicts, and xApps perform only single operations. Moreover, the O-RAN conflict mitigation procedure [5] is not applied after RL agents take indirectly conflicting actions.\nIn this paper, we propose xApp distillation, a conflict mitigation scheme that learns from conflicting xApps to create an enhanced xApp with improved performance by using policy distillation. The major contributions of this letter are summarized as follows:"}, {"title": "II. SYSTEM MODEL", "content": "This paper considers a connected urban system model with multiple users moving in a 250-by-250-meter area. The simulation is built on the mobile-env [7] Gymnasium environment to deploy multiple xApps. We add new resource types and a new reward design to optimise the network. The simulation has B base stations (BSs) and K mobile users. The designed environment uses an Okumura-Hata-based propagation model [8] to simulate an urban area.\n\nA. Connectivity model\nWe consider B BSs to provide connectivity to K users across the area. We defined the downlink data rate $r_{i,j}$ transmitted from BS j to user i according to calculated signal interference noise ratio (SINR) as follows:\n$r_{i,j} = R_{i,j}log(1+\\frac{a_jP_jh_{i,j}}{N_0 + \\sum_{k \\neq j}h_{i,k}P_k})$ (1)\nwhere\n\u2022 \u03c3 is the bandwidth of a single RB,\n\u2022 $R_{i,j}$ is the number of RBs allocated from BS j to user i,\n\u2022 $a_j$ is a binary indicator of connection of BS j,\n\u2022 $P_j$ is the transmit power level of BS j,\n\u2022 $h_{i,j}$ is the channel coefficient between BS j and user i.\nB. Resource management and xApp design\nThe designed environment enables RL agents to manage the network by controlling three type of resources in the network. These network operations in the environment are handover, RB allocation and cell transmit power control.\n1) Handover: We consider K users to be mobile in a rectangular area. Due to the change in received signal strength, the controller handovers users from one BS to another to seek better service availability.\n2) Resource block allocation: RB allocation represents the number of RB that is being used by the corresponding user. Although the number of available RBs in LTE was constant, in 5G new radio (NR) it varies depending on the guard bandwidth and single RB bandwidth. We considered using parameters given in Table I [9].\nAs a typical profile mode of 5G, we consider one RB to be 360 kHz and with the double guard band, there are 273 RBs in total."}, {"title": "III. XAPP DISTILLATION", "content": "The conflict mitigation schemes proposed by O-RAN ignore some of the xApps' actions to mitigate conflict by choosing one of the options and discarding others. Therefore, the chance to take a sub-optimal action in the environment becomes higher. Hence, we proposed the xApp distillation method that utilises all xApps by distilling their policies to form a single xApp that consists of all action capabilities of the candidate xApps. We build a knowledge base using experiences from all xApps's transition memories. These memories are collected in a replay buffer memory to train new xApps. Policy distilling is applied by having a teacher network i.e., pre-trained xApps to train a new model for the student network i.e., new xApp.\n\nA. Conflicting xApps\nIn this paper, we designed two xApps that have multiple operation capabilities. In xApp 1, we developed handover and RB allocation while xApp 2 operates handover and transmit power level control of BSs. The objective of this design is to introduce both direct and indirect conflicts simultaneously. Hence, we could analyse how xApp distillation conducts the mitigation for these xApps.\nB. Deep Q-Network\nAs a network controller we employed deep Q-network because of its advantages over tabular Q-learning on continuous state spaces. In the simulated environment according to users' trajectories, there can be an indefinite number of state-action transitions. Therefore, using a tabular-based method may be less likely to converge to an optimal solution.\nIn this paper, we designed a multi-headed multilayer perceptron (MLP) network model for RL agents. Therefore, each DQN model can perform multiple tasks in a single production of inference. For the xApps each head of MLP model corresponds to an operation such as a handover for users. The main reason to choose a multi-headed network structure is to avoid a sequential decision making process for users. Because in sequential decisions first users tend to take greedy actions while last ones are left with suboptimal options due to BS capacity or depleted RBs at cells.\n1) State: State includes BS connection indicator, SINR values for neighbouring BSs and a utility parameter for each user. The connection indicator is a one-hot encoded array of BS connections a = [\u03b11, ..., \u03b1\u03bd].\nSINR value for user i is calculated according to their distances to BSs. For BS j, it is calculated as follows:"}, {"title": "", "content": "SINR =$\\frac{P_jh_{i,j}}{N_0 + \\sum_{k \\neq j}h_{i,k}P_k}$ (2)\nThe last parameter of the state information is the utility value of users. Utility parameter provides an interface between state and reward to fulfill the Markov decision process (MDP). Utility corresponds to the logarithmic representation of downlink data rate $U_i = 10[\\frac{In(r_i) - In(L)}{In(U) - In(L)}]$, where ri is the data rate, w is a coefficient to scale the utility parameter. U and L are the upper and lower limit respectively. The overall state vector is given as follows:\nState = [a, SINRj=1:B, Ui=1:K] (3)\n2) Action: The action space represents the decisions that xApps produce according to the state of the environment. The type of action defines the ability of xApps. There are three different operations namely, handover, RB allocation and cell transmit power control. In this study, we wanted to simulate both direct and indirect conflicts as classified in [5] through the actions of RL agents.\nTo simulate direct conflict, we created two xApps, both employ handover capability. For the indirect conflict, xApp 1 allocates RBs among the users while xApp 2 controls the cell transmit power in addition to the handover operation. Both the number of allocated RBs and the transmit power level affect the overall channel capacity of users. Since these are different types of actions observing such conflict prior to action is almost impossible [5].\nIn the simulation, there are three types of actions and each xApp has a different ability to manage the network.\n\u2022 xApp 1: Handover and RB allocation\n\u2022 xApp 2: Handover and cell power level control\n\u2022 Final xApp: Handover, RB allocation and cell power level control\nThe action vectors of DQN models are designed as follows:\n\u03b1 = [[DC, \u03b11,1, ..., \u03b11,B], ..., [DC, \u03b1\u03ba,1], ..., [\u03b1\u03ba,\u0432]]\nR = [[R1,1, ..., R1,MR], ..., [RK,1, ..., RK,MR]]\nT = [[PL1,1, ..., PL1,MT], \u2026\u2026\u2026, [PLB,1], ..., [PLB,M\u0442]]\nAction = [a, R,T] (4)\nwhere R indicates the number of RB assigned to K users up to MR blocks, T is the transmission power levels for B BSs up to Mr level. We added \"DC\" disconnect action as a handover option to analyse how often RL agents cannot find an optimal BS to connect. Each operation in the action vector corresponds to the output head of the designed multi-headed DQN network.\n3) Reward: Reward design plays a crucial role in DRL applications that train a model to perform actions for specific tasks. Because it defines the task to which the model is trained to perform.\nTo avoid greedy actions for specific users and poor performance for the rest of the users, we chose to use proportional fairness as the reward function. While it increases with the throughput, it penalises too high or too low data rates by using a logarithmic data rate. The reward function for K users is calculated as follows:\n$P_F = \\sum_{i=1}^{K} log(r_i)$ (5)\nFor a fair service availability for each user, we employed proportional fairness where downlink data rate ri is calculated as in equation 1.\nC. Policy distillation\nPolicy distillation, originally proposed for transferring a pre-trained action policy into an untrained Q-Network [10]. In this paper, we consider a scenario in which the host purchases multiple xApps from different vendors and deploys them into the network that provides service on partially or fully overlapping areas. Since the host cannot intervene with the training stage of those xApps, our proposed method uses these pre-trained xApps to distil knowledge to a student policy that will take action on behalf of all teacher networks. To simplify the process, we divided it into four stages."}, {"title": "", "content": "The stage 4 of the xApp distillation is the deployment of the student policy to a DQN model for test and evaluation. In our simulations we experimented with distilling policies from heuristics, however distilling policy from another DQN model performed better.\nWhen distilling policy from a teacher network, choosing distillation loss plays a crucial role in the process. As proposed in [10] we employed KL divergence loss:\n$L_{KL}(D_T, 0_s) = \\sum_{i=1}^{|D|} \\sum_j softmax(\\frac{q^T_{i,j}}{\\tau}) log \\frac{softmax(\\frac{q^T_{i,j}}{\\tau})}{softmax(\\frac{q^s_{i,j}}{\\tau})}$ (6)\nwhere D is replay buffer memory, \u03c4 is the temperature, $q_i^T$ and $q_i^f$ are the Q-values from the teacher and student networks respectively.\nD. Conflict mitigation scheme\nO-RAN conflict mitigation method [5] essentially proposes two types of mitigation namely against direct and indirect conflicts.\nFor direct conflicts, it is easy to observe and avoid conflicts. O-RAN alliance proposes simply ignoring one of the xApps and applying the other for the network. However, for indirect conflicts, it is almost impossible to observe conflicts prior to the action. Therefore, they propose to monitor the network performance, and if the network performance deteriorates after the performed action, it rolls back the action and applies previous actions. These are the essential mitigation scheme for inter-xApp conflicts.\nIn both cases, it ignores some of the xApps and applies an action taken by different xApps or taken for the previous state of the network which leads to possible sub-optimal actions. However, the xApp distillation utilises all xApps' abilities by using their experiences on the policy distillation. Moreover, after xApp distillation, a single xApp which is the result of distillation is deployed on the environment. Thus, it eliminates inter-xApp conflicts."}, {"title": "IV. PERFORMANCE EVALUATION", "content": "In this paper, we use the \"mobile-env\" [7] wireless communication environment wrapped in the Gymnasium framework as a base of our simulations. To implement conflicts we added new resource types to control such as resource block allocation among users and base station transmit power level control.\nWe compared our results with individually trained and deployed xApps, and xApps that are trained using the team learning method [6]. Both methods are subject to O-RAN conflict mitigation due to the deployment of multiple xApps in a single environment.\n\nA. Performance parameters\nWe simulated this method using DQN models as the target of distillation. However, this is an open method to other DRL-based controllers. The DQN model structure we used for xApps is relatively lightweight. The structure of the model is an MLP, consisting of 4 layers, and hidden layers have 50 and 100 neurons respectively. We used SGD optimiser to update teacher xApp models throughout 100,000 episodes of pre-training with a learning rate of 0.01. After pre-training was completed we used 10,000 post-training steps to save S, A, R transitions that will be used to distil knowledge to the student model. The temperature value for distillation is set to 20.\nB. Numerical results\nO-RAN conflict mitigation applies one of the xApps during the conflicts and eliminates the rest. Therefore, alternating network control options creates inconsistent service for the users. In Figure 3, we illustrated the probability density function (PDF) of downlink data rate for the users to see the distribution of data-rate to analyse consistency. We compared our results with two different scenario. In Individual learning, the host purchases pre-trained xApps and deploys them in the same area by employing conflict mitigation by O-RAN Alliance. In team learning [6], xApps are trained jointly by receiving feedback on the action of the other xApp."}, {"title": "V. CONCLUSION", "content": "In this paper, we show that xApp distillation eliminates inter-xApp conflicts and it provides significantly better performance than state-of-the-art studies in terms of reliable and consistent service. Since indirect and implicit conflicts are almost impossible to detect or mitigate, our method takes advantage of using the experience of pre-trained xApps and take actions from a single decision-maker instead of applying multiple xApps actions simultaneously which can cause such conflicts. xApp distillation provided a consistent 10 Mbps downlink data rate where compared methods failed to provide up to more than 30 percent simulation runtime.\nIn our future work, we plan to extend this xApp distillation method to use more scalable RL controllers than DQN method such as Multi-agent RL and decomposed action-space methods. Moreover, we will increase the number of KPIs to analyse network in a more comprehensive way."}]}