{"title": "Quantum Hamiltonian Descent for Graph Partition", "authors": ["Jinglei Cheng", "Ruilin Zhou", "Yuhang Gan", "Qian Chen", "Junyu Liu"], "abstract": "We introduce Quantum Hamiltonian Descent (QHD) as a novel approach to solve the graph partition problem. By reformulating graph partition as a Quadratic Unconstrained Binary Optimization (QUBO) problem, we leverage QHD's quantum-inspired dynamics to identify optimal community structures. Our method implements a multi-level refinement strategy that alternates between QUBO formulation and QHD optimization to iteratively improve partition quality. Experimental results demonstrate that our QHD-based approach achieves superior modularity scores (up to 5.49% improvement) with reduced computational overhead compared to traditional optimization methods. This work establishes QHD as an effective quantum-inspired framework for tackling graph partition challenges in large-scale networks.", "sections": [{"title": "I. INTRODUCTION", "content": "Quantum computing with the principles of quantum mechanics can process information in different ways from classical computers. This is because qubits can exist in superposition, and therefore can represent multiple states simultaneously [1]. This capability, combined with entanglement and interference, allows quantum algorithms to solve certain classes of problems, such as integer factorization and combinatorial optimization, more efficiently than classical methods. Therefore, quantum computing has lead to advancements in cryptography [2], optimization [3], machine learning [4], and materials science [5]. In parallel, quantum-inspired algorithms bring similar quantum concepts to classical computing, with principles such as tunneling, adiabatic transitions, and Hamiltonian dynamics to address complex problems without requiring quantum hardware. These approaches have demonstrated enhanced performance in areas like traffic routing and combinatorial optimization, where classical systems emulate quantum behaviors to achieve good efficiency [6].\nGraph partition is an important problem in network analysis, and it's essential for interpreting the structural and functional organization of complex systems [7]. The overall goal is to identify partitions-groups of nodes with denser connections among themselves than with the rest of the network [8]. In large-scale graphs, which are common in various real-world applications such as social networks, biological systems, and communication networks, effective graph partition provides valuable insights into network behavior and properties, and can support applications like anomaly detection, network optimization, and information dissemination [9]. The impact of graph partition is deep across many domains. In social networks, it enables the identification of groups with shared interests or behaviors, which can enhance recommendation systems and targeted marketing strategies [10], [11]. In biological networks, graph partition reveals functional modules or protein complexes, and contributes to a better understanding of cellular processes and disease mechanisms [12], [13]. Additionally, fields like communication networks, financial systems, and transportation networks takes graph partition to optimize efficiency, bolster security, and improve resilience against failures or attacks [14], [15].\nDetecting partitions in large-scale graphs presents substantial computational challenges. Traditional algorithms often struggle with scalability, resulting in increased processing times and high resource consumption as network size grows [16]. Furthermore, maintaining the accuracy and quality of detected partitions becomes more complex with larger datasets due to the intricate network structures and the presence of noise [10]. These challenges call for the development of more scalable algorithms capable of handling large-scale graphs without compromising performance or accuracy [17].\nQuantum-inspired algorithms inherit conceptions from quantum computing to enhance classical computational methods [18]-[22]. Quantum Hamiltonian Descent (QHD) [23], [24] is an algorithm designed to efficiently solve optimization problems by leveraging quantum tunneling effects to escape local minima, and therefore enhances performance in non-convex optimization scenarios. By simulating the behavior of quantum systems, Quantum Hamiltonian Descent can navigate complex energy landscapes to find optimal solutions more effectively than some traditional optimization techniques [25]. This makes it a promising approach for tackling the computational demands of large-scale graph partition, where the formulation is not always convex.\nOur approach involves formulating the graph partition problem as a QUBO model as shown in Figure 1. The QUBO formulation is a versatile framework for representing combinatorial optimization problems where the objective is to minimize a quadratic function of binary variables [26]. By expressing graph partition in this form, we can apply optimization algorithms like Quantum Hamiltonian Descent directly. In this way, the challenge of running graph algorithms on GPUs can be addressed by transforming them into a QUBO formulation, which allows for the deployment of GPU-accelerated algorithms. Quantum Hamiltonian Descent is particularly effective for solving QUBO models due to its ability to efficiently explore huge and complex solution spaces. By mimicking the dynamics of quantum systems, it can avoid becoming trapped in local minima and converge rapidly to high-quality solutions. This efficiency is essential for large-scale problems where traditional optimization methods may be too slow or require excessive computational resources.\nTo further improve efficiency and solution quality, we have developed a multi-level algorithm that iteratively refines group assignments. This algorithm alternates between QUBO formulation and Quantum Hamiltonian Descent solving at different levels of graph granularity. Starting from a coarse representation of the graph, it progressively refines the group structure by incorporating more detailed information in each iteration. This hierarchical approach helps in escaping local optima and enhances the overall accuracy of the graph partition process.\nOur method has been benchmarked against GUROBI [27], which is a leading commercial solver renowned for its optimization capabilities. On smaller problem instances, our algorithm matches GUROBI's performance, demonstrating its effectiveness and reliability. Notably, for larger problems exceeding 1,000 variables, our approach surpasses GUROBI. This performance advantage is crucial for practical applications involving large-scale graphs where computational resources and time are significant constraints. Recognizing the computational intensity of large-scale graph partition, we have implemented our algorithm on multi-GPU architectures. GPUs offer massive parallel processing power, which accelerates the Quantum Hamiltonian Descent process and handles the extensive computations required for large graphs. Our implementation demonstrates excellent scalability and makes it feasible to analyze large networks in reasonable time budget. This efficient use of high-performance computing resources indicates the practicality of our approach for real-world applications.\nOur contributions are:\n\u2022 Formulated graph partition as a QUBO problem with an iterative multi-level refinement approach\n\u2022 Developed a novel quantum-inspired graph partition algorithm utilizing QHD optimization\n\u2022 Demonstrated competitive performance with GUROBI solver on small instances and superior scalability for problems exceeding 1,000 variables\nThe remainder of this paper is organized as follows. Section II provides the necessary background on graph partition, QUBO problems, and quantum-inspired optimization techniques. In Section III, we present the formal mathematical framework of our approach, detailing the QUBO formulation. Section IV describes our implementation, including the multi-level algorithm design and QHD algorithm. We present comprehensive experimental results and performance analysis in Section V. Finally, Section VI concludes the paper with a summary of our contributions and directions for future research."}, {"title": "II. BACKGROUND", "content": "A. Quantum Hamiltonian Descent\nQHD introduces a new quantum counterpart to classical gradient descent methods, derived through path integral quantization of the continuous-time limit of gradient descent algorithms. Unlike conventional approaches that only quantize specific components of classical algorithms, QHD quantizes the entire dynamical system, resulting in a quantum evolution governed by a Hamiltonian \\(\\hat{H}(t) = e^{s_t} (-\\Delta)+ e_{ext} f(x)\\), where \\(e^{s_t}\\) and \\(e_{ext}\\) are damping parameters controlling system energy flow. This formulation allows QHD to take advantages of quantum tunneling effects to escape local minima by considering all possible paths at the same time, including those prohibited in classical mechanics. The algorithm exhibits three distinct phases kinetic, global search, and descent - and has demonstrated superior performance over both classical gradient-based methods and quantum adiabatic algorithms in solving non-convex optimization problems.\nB. Graph Partition\nGraph partition (GP), also known as graph clustering or community detection, is one fundamental task in graph theory and network science with the main goal of identifying groups of nodes within a graph that are more densely connected to each other than the rest. Applications of graph partition span various fields, such as social network analysis [28], biology [29], computer networks, and recommendation systems [30]. Based on the definition of the nodes, applications, and the definition of a good partition. Various methods have been proposed, such as the modularity-based method [31], which aims to maximize modularity, which is a measure of the strength of the division of a network into partitions, spectral clustering, which involves the use the eigenvalues and eigenvectors of matrices like the Laplacian derived from the graph to identify group structures based on the network's spectral properties and hierarchical clustering which use methods such as divisive clustering to build a hierarchy of partitions either by progressively merging nodes (bottom-up) or recursively splitting larger partitions (top-down) based on similarity measures."}, {"title": "III. FORMALIZATION", "content": "In this section, we introduce how we transform the GP problem into QUBO form and the main considerations of our formulations.\nA. Modularity\nFormally, the graph partition problem with the goal of maximizing modularity can be formulated as follows: Given an undirected graph G = (V, E) with n = |V| vertices and m = |E| edges, the task of graph partition is to partition the vertices into k non-empty partitions such that nodes within the same group are more densely connected while nodes in different partitions are sparsely connected. One commonly used metric to measure how well the graph is partitioned is 'modularity' which is defined by:\n\\(Q = \\frac{1}{2m} \\sum_{i,j} (A_{ij} - \\frac{d_i d_j}{2m}) \\delta(c_i, c_j)\\)\nwhere Aij is the element of the adjacency matrix, di and dj are the degrees of nodes i and j. And \\(\\delta(c_ic_j)\\) is the Kronecker delta function that equals 1 if nodes i and j are in the same group and 0 otherwise.\nVarious heuristics have been proposed to address the graph partition problem. Cut-based methods aim to minimize inter-group edges while maintaining balanced partitions [32]. Modularity-based methods focus on maximizing the density of intra-group edges relative to a null model [33]. Another approach involves using quantum annealing; however, this method introduces additional overhead due to the need to embed the problem instance onto the quantum annealer [34].\nB. QUBO Formulation for Graph Partition\nInspired by previous classical and quantum methods, we propose a quantum-inspired method that takes Quantum Hamiltonian Descent to replace the original compute-intensive components of classical algorithms. This method first transforms the GP problem into a QUBO formulation, which is the first step for the use of both classical and quantum-inspired solvers that can be executed on GPUs without the need for direct embedding onto quantum hardware. The specific formalization is as follows.\n1) Direct QUBO Formulation for Small Networks: To adapt the modularity optimization problem for QUBO solvers, we construct a QUBO objective function that encapsulates both the modularity measure and the necessary constraints for valid group assignments. Let binary variables \\(x_{i,c} \\in {0, 1}\\), where:\n\\(x_{i,c} = \\begin{cases} 1 & \\text{if vertex i is assigned to group c,} \\\\ 0 & \\text{otherwise.} \\end{cases}\\)\nAssume a maximum of k partitions, with \\(c\\in {1,2,..., k}\\). The modularity contribution can be expressed using the binary variables as:\n\\(Q_M = \\frac{1}{2m} \\sum_{i,j \\in V} (A_{ij} - \\frac{d_i d_j}{2m}) \\sum_{c=1}^{k} x_{i,c} x_{j,c}.\\)"}, {"title": "IV. IMPLEMENTATION", "content": "A. QHD on QUBO\nQHDOPT [25] implements Quantum Hamiltonian Descent for solving nonlinear optimization problems. Its key innovation is implementing this optimization via quantum evolution governed by the time-dependent Schr\u00f6dinger equation:\n\\(i\\frac{\\partial}{\\partial t} \\Psi(t,x) = \\left( e^{s_t} \\left( -\\frac{\\Delta}{2} \\right) + e_{ext} f(x) \\right) \\Psi(t,x)\\)\nwhere \\(\\Delta\\) is the Laplacian operator and \\(e^{s_t}, e_{ext}\\) control the energy distribution of the quantum system.\nA significant computational advantage of this approach is that it requires only matrix multiplication operations, avoiding the need to solve linear systems (Ax=b). This makes the method particularly amenable to modern hardware acceleration. For practical implementation, QHDOPT employs a discretization and embedding strategy where the continuous Hamiltonian is discretized into an \\(N^n\\)-dimensional operator:\n\\(H(t) = e^{s_t} \\left( -\\frac{L_d}{2} \\right) + e_{ext} F_d\\)\nwhere \\(L_d\\) represents the discretized Laplacian and \\(F_d\\) encodes the objective function.\nThe method's matrix-multiplication-based formulation opens up possibilities for various compression techniques that can transform large sparse problems into smaller, denser ones. This includes techniques like tensor network compression [36], hierarchical matrix approximations [37], and randomized sketching methods [38]. Any additional constraints created during problem transformation can be efficiently handled through penalty-based methods, avoiding the need for complex constraint satisfaction algorithms.\nWhen dealing with QUBO problems, QHDOPT can be efficiently accelerated using GPUs through careful implementation of the quantum Hamiltonian dynamics. The key is mapping the QUBO problem \\(\\min_{x\\in {0,1}^n} x^T Qx + b^T x\\) to QHD's Hamiltonian framework in a way that exploits massive parallelism. Sparse operations can be particularly accelerated using specialized GPU packages like cuSPARSE [39] or MAGMA [40], which provide optimized implementations for sparse matrix operations. The time evolution can be implemented using GPU-optimized linear algebra operations, with the Laplacian operator \\(\\Delta\\) computed using parallel finite difference schemes and the potential term \\(e_{ext} f(x)\\) evaluated using batched matrix operations.\nBy leveraging frameworks like PyTorch [41] or JAX [42] that provide automatic differentiation and GPU acceleration, the quantum dynamics can be simulated efficiently the gradient computations for the Hamiltonian evolution can be parallelized across the quantum state dimensions, and the time evolution steps can be batched for exploring multiple initial conditions simultaneously. The classical refinement step in QHDOPT can utilize GPU-accelerated optimizers to efficiently project solutions back to binary values. This hybrid quantum-classical approach combines quantum effects with massive parallel computing capabilities, making it particularly effective for large-scale optimization problems where traditional methods might struggle.\nB. Multi-level Graph Partition\nThis multilevel graph partition algorithm is designed to efficiently handle large-scale graphs by employing a hierarchical approach. The algorithm operates in three main phases: First, in the coarsening phase, it repeatedly combines nodes to create a hierarchy of progressively smaller graphs while preserving the group structure. Once the graph is sufficiently small, it solves the graph partition problem directly on this coarsened graph. Finally, in the uncoarsening phase, it progressively maps the solution back to finer levels while refining the partitions at each step. This multilevel approach allows the algorithm to maintain both computational efficiency and solution quality by working with smaller problems during the initial solution while preserving the ability to make fine-grained adjustments during refinement."}, {"title": "V. EVALUATION", "content": "A. Evaluation Setting\nThe experimental evaluation was conducted on a system running Debian Linux with kernel version 5.10.0-22-amd64. The computing platform features a dual 16-core CPU (32 cores total). The server is equipped with 251 GB of RAM. Implementation of QHD on QUBO is running with four NVIDIA A5000 GPUs and the comparison with GUROBI is conducted with CPUs as mentioned.\nB. QUBO Solver with GUROBI and QHD\nComparing the computational performance between GUROBI and QHD presents unique challenges due to their different control parameters. While GUROBI can be configured with node exploration limits and termination times, QHD allows adjustment of sample sizes and iteration counts. To establish a fair comparison, we adopted a time-based benchmarking approach: first measuring QHD's execution time, then allocating GUROBI the same as its time limit. This methodology is justified because superior performance can be demonstrated either through faster execution at equal solution quality or through better"}, {"title": "VI. CONCLUSION", "content": "This work demonstrates the effectiveness of quantum-inspired optimization for graph partition through our QHD-based approach. By reformulating graph partition as a QUBO problem and leveraging GPU-accelerated quantum-inspired optimization, we achieve comparable or superior performance to traditional methods while reducing computational time. Our experimental results show strong performance on moderately dense networks, with up to 5.49% improvement in modularity scores and enhanced stability compared to GUROBI. The implementation of multi-GPU acceleration suggests further scalability potential for larger networks. These findings highlight the promising intersection of quantum-inspired algorithms and high-performance computing for complex network analysis tasks. Future work could explore extending this approach to other graph optimization problems and investigating additional acceleration techniques for handling ultra-large-scale networks. Better designed algorithms to formulate graphs into denser matrices can reduce the number of variables in QUBO, and combination with high-performance sparsity computation will also be helpful. Our results demonstrate that quantum-inspired methods, combined with modern computing architectures, offer a practical pathway for advancing the capabilities of graph partition in real-world network analysis applications."}]}