{"title": "THE RESTAURANT MEAL DELIVERY PROBLEM WITH GHOST KITCHENS", "authors": ["Gal Neria", "Michal Tzur", "Florentin D Hildebrandt", "Marlin W Ulmer"], "abstract": "Restaurant meal delivery has been rapidly growing in the last few years. The main challenges in operating it are the temporally and spatially dispersed stochastic demand that arrives from customers all over town as well as the customers' expectation of timely and fresh delivery. To overcome these challenges a new business concept emerged, \u201cGhost kitchens\". This concept proposes synchronized food preparation of several restaurants in a central complex, exploiting consolidation benefits. How- ever, dynamically scheduling food preparation and delivery is challenging and we propose operational strategies for the effective operations of ghost kitchens. We model the problem as a sequential decision process. For the complex, combinatorial decision space of scheduling order preparations, consolidating orders to trips, and scheduling trip departures, we propose a large neighborhood search procedure based on partial decisions and driven by analytical properties. Within the large neigh- borhood search, decisions are evaluated via a value function approximation, enabling anticipatory and real-time decision making. We show the effectiveness of our method and demonstrate the value of ghost kitchens compared to conventional meal delivery systems. We show that both integrated optimization of cook scheduling and vehicle dispatching, as well as anticipation of future demand and decisions, are essential for successful operations. We further derive several managerial insights, amongst others, that companies should carefully consider the trade-off between fast delivery and fresh food.", "sections": [{"title": "1 Introduction", "content": "The demand for restaurant meal delivery is booming. More and more people order food online and expect a fast and fresh delivery at low cost. The high expectations are often not met in practice, and customers complain about long waits and cold food. At the same time, restaurants and delivery platforms struggle to become profitable with meal delivery. One reason is the limited consolidation potential of orders. Customer orders come in over time from locations all over the city. Restaurants are distributed all over the cities as well. Combined with very tight delivery promises, this makes consolidation nearly impossible, or, when consolidated, food likely arrives not fresh at the customers. With these challenges in mind, new business concepts emerge, called \u201cGhost kitchens\u201d, \u201cDark kitchens\u201d, or \u201cCloud kitchens\""}, {"title": "Ghost Kitchens", "content": "(Shapiro 2023). All propose food preparation of several restaurants in one, central complex. The restaurants do not have dine-in customers, but exclusively prepare online orders that are distributed by a joint fleet of vehicles.\nHaving several restaurants in one place and serving online orders only brings many advantages. For each restaurant, the kitchens can be designed and operated to allow fast and high-quality processing of the online orders (Feldman et al. 2023). Further, due to the same origin of the food, delivery consolidation can be achieved more often and likely without diminishing the food's freshness. This is not the case for related concepts, also called ghost kitchens. In contrast to the concept considered in this work, these ghost kitchens are virtual restaurant brands that are prepared in partnering dine-in restaurants. They aim at maximizing the resource usage of the partner restaurant without cannibalizing its market share. This concept appeared during the COVID pandemic and is vanishing again due to its unpopularity rooted in long delivery times and unfresh meals (Creswell 2024). For the remainder of this work, ghost kitchens refer to delivery-only facilities where meals for multiple, virtual restaurants are prepared. For the ghost kitchen concept considered, an effective operation of food preparation and the vehicles' dispatching is necessary to allow fast and fresh delivery as well as consolidation. Delivery vehicles should be dispatched with food for customers in the same neighborhood. This avoids long travel and congestion of the delivery fleet.\nTo make this possible, the restaurants need to prepare the corresponding food in a way that it is ready for delivery roughly about the same time. Otherwise, at least one customer will receive cold food. At the same time, the restaurant resources should be used efficiently to avoid congestion of orders and long waiting for the corresponding customers. This leads to complex decisions about integrated order sequences and vehicle dispatching with several constraints on freshness and synchronization. All this has to be done in real-time while more orders enter the system every minute.\nIn this research, we propose strategies for the effective operations of ghost kitchens. We model the problem as a sequential decision process and demonstrate that the search over the complex, combinatorial decision space of integrated order scheduling and vehicle dispatching can be replaced by a search over decision representations of significantly reduced dimension. To further improve the search, we embed a novel polynomial algorithm that filters potential candidate decisions (of reduced dimension) via analytical feasibility checks. Then, a full-dimensional decision is generated if and only if feasibility is ensured. Our search over the reduced decision space is performed by a novel large neighborhood search (LNS). Within the LNS, decisions are evaluated via value function approximation (VFA), enabling anticipatory and instant dynamic real-time decision. The VFA is defined independently of the instance size. It is trained on small instances and then transferred to larger instances via transfer learning.\nIn our computational study, we compare the concept of Ghost kitchens to regular meal delivery systems with several independently operating restaurants. We further compare our strategy to several benchmark strategies for a wide range of instance settings. We derive the following insights: (1) Ghost kitchens bring significant advantages compared to conventional delivery systems with respect to service quality and workforce utilization. (2) Joint optimization of preparation and dispatching improves customer experience by reducing the average delay of deliveries for all customers throughout the city. (3) We observe an increase in bundling opportunities and a decrease in travel time. This does not only result from the elaborate search of the decision space. Anticipation of future orders and decisions is similarly important. (4) There is an explainable but potentially counterintuitive trade-off between the delivery speed and freshness of food. Fresh delivery may result in longer waiting for the customers while faster delivery may lead to less fresh food. (5) Sharing the fleet amongst restaurants is essential for successful operations of ghost kitchens. (6) A careful balance between the fleet and cook resources is crucial. A shortage in one resource cannot be compensated by the other. (7) For restaurants, reducing both preparation time volatility and length are important factors for the customers' experience.\nThe contributions of our work are both problem- and method-oriented. We are the first to analyze the operations of a new and innovative delivery concept that, compared to conventional meal delivery systems, has many advantages, which can be exploited via synchronization of the preparation and dispatching tasks. We demonstrate these advantages in our numerical study, where improved KPIs such as better food quality, higher speed of delivery and reduced travel times are presented. Based on these results we present valuable managerial insights. Methodologically, our contribution consists"}, {"title": "Ghost Kitchens", "content": "of first reducing the decision space to a significantly lower number of viable candidate solutions by: (i) Defining a novel reduced decision representation that can be searched more easily than the original one; (ii) Reducing the number of candidate decisions even further by filtering, based on analytical results, infeasible decisions; and (iii) Developing a novel LNS algorithm to search the remaining decision space, whose search steps are again based on analytical properties. Then, each candidate decision is evaluated via VFA, enabling the incorporation of its anticipated value instantly. In our experiments, we highlight the value of this combination and analyze the impact of balancing offline training effort with the online execution effort of the LNS-search. We note that the integration of scheduling and routing is rarely studied in a dynamic environment and that our method can likely be adapted to other related problems with a scheduling and routing component, e.g., in the fields of order picking and dispatching or dynamic production routing, see the discussion in Section 6.\nThe paper is organized as follows: In Section 2 we provide the literature review, in Section 3 we define the problem, in Section 4 we present our solution method, in Section 5 we provide our experimental study, in Section 6 we discuss the generality of our methodology as well as its applicability to other methods, and, in Section 7 we summarize our work. The paper also provides additional details in an Appendix."}, {"title": "2 Literature Review", "content": "Our work addresses the problem field of restaurant meal delivery, its model requires dynamic scheduling and routing, and the methodology focuses on quickly searching a large and complex decision space and evaluating decisions via value function approximation. In the following, we discuss related problem, model, and methodology literature."}, {"title": "2.1 Problem: Meal Delivery Routing", "content": "Work on restaurant meal delivery has surged in the last years. The majority of work aims on efficient and flexible routing strategies to deliver meals from different restaurants to dynamically requesting customers. Early work by Reyes et al. (2018), Steever et al. (2019), Liu (2019) and Ulmer et al. (2021) present intuitive heuristic methods to dynamically assign orders to vehicles. The general goal is to ensure timely service by balancing routing efficiency with fleet flexibility. Yildiz and Savelsbergh (2019) analyze optimal dispatching strategies in a deterministic setting deriving insights in the value of bundling operations and giving guidelines in demand management and the scheduling of delivery vehicles. Recently, first work on reinforcement learning was proposed by Jahanshahi et al. (2022) to determine anticipatory assignments and rejections of orders, i.e., learning the expected future revenue when a decision is taken. However, scheduling or routing decisions were not considered. Other work on meal delivery addresses arrival time predictions (Hildebrandt and Ulmer 2022) with the goal of providing accurate delivery time information to customers, the scheduling of the workforce (Ulmer and Savelsbergh 2020, Dai and Liu 2020, Auad et al. 2024) to ensure timely delivery without excessive workforce cost, or the zoning of the service area with respect to current and future demand (Ulmer et al. 2022, Auad et al. 2023). While most of the studies focus on timely delivery for customers, none of the considered studies analyzes ghost kitchens or considers integrated scheduling and routing decisions. In the problem addressed in this paper, we consider the assignment and scheduling of orders in combination with the vehicle dispatching. To achieve efficiency (and sometimes even feasibility) in the overall process, decisions regarding order preparation and the vehicle dispatching operations need to be coordinated in an integrated and anticipatory fashion. While synchronization in meal delivery has not been considered in the literature yet, the importance of synchronization in vehicle routing problems has been highlighted by Drexl (2012), who present a survey on vehicle routing problems with synchronization constraints."}, {"title": "2.2 Model: Combined Scheduling and Routing", "content": "From a modeling perspective, our problem may be considered as a combination of models for dynamic order scheduling, e.g., Xu et al. (2016), Zhao et al. (2018a), Zhao et al. (2018b) and D'Haen et al. (2023), and dynamic vehicle dispatching, e.g., Klapp et al. (2018). A combination of both is relatively rare, and we list here a few exceptions."}, {"title": "Ghost Kitchens", "content": "Moons et al. (2017) review the integration of production scheduling and vehicle routing decisions. They mentioned very few papers on stochastic problems and no papers that considered dynamic decisions, which they pointed to be a future research direction. Zhang et al. (2019) consider the online integrated order picking and delivery problem for an online-to-offline (O2O) community supermarket. They proposed an online algorithm with a theoretical competitive ratio of 2. Hossein Nia Shavaki and Jolai (2021) suggest a rule-based heuristic algorithm for order picking scheduling and delivery planning of online retailers with multiple order pickers. A stochastic dynamic arrival of orders is assumed, however, the delivery of products is performed from the warehouse to the (given) targeted cross-dock that services the corresponding customers. That is, no routing considerations are included. Liu et al. (2022) examine the integration of production and delivery when orders arrive dynamically. As in our problem, they assume that orders must be processed on one of a set of parallel machines before their delivery. Still, the delivery considered is to one mutual destination for all at given departure times. The authors proposed an approximate dynamic programming solution in which simple principles are used to reduce the decision space, e.g., shortest-processing time in production and first-in-first-out (FIFO) in delivery. Finally, Rijal et al. (2023) suggest integrated optimization of warehouse operations and delivery routing. In a static and deterministic setting, they compare sequential and integrated approaches and highlight the potential of joint optimization.\nTo conclude, the integration of scheduling and routing is rarely studied in a dynamic environment and usually without anticipation (i.e., consideration of future order arrivals when making decisions). The problem we address provides a more general setting that has become increasingly prevalent in the online delivery domain nowadays. Furthermore, we are among the first presenting an anticipatory policy that integrates scheduling and routing optimization."}, {"title": "2.3 Methodology: Search and Evaluation of Complex Decision Spaces", "content": "The methodological contribution of our work is to combine the search of a complex decision space with an evaluation via value function approximation (also known as reinforcement learning, RL). Value function approximations (and RL-methods in general) repeatedly simulate the decision process and store the observed values of decisions in an aggregated form. The values are used for decision making and updated over the simulation. As a recent review by Hildebrandt et al. (2023) shows, past research either focused on a comprehensive search without explicit evaluation or alternatively, an explicit evaluation via RL, but only for a very few potential decisions. There are, however, a few exceptions.\nRivera and Mes (2017, 2022) and Heinold et al. (2023) use RL to decide which freight to dispatch. The values are approximated via a linear function based on a set of post-decision state features. Mixed integer programming is used for searching the decision space. A similar concept is proposed by Silva et al. (2023) to decide about assignments in urban delivery, however, a neural net is used for approximation. This neural net is again linearized to allow the application of mixed integer programming. None of the works considers more complex decision spaces and problems that involve routing decisions with complex constraints. This slows down the search of the decision space while at the same time makes linearization of the features and the value function approximation more challenging.\nRecently, Neria and Tzur (2024) proposed using a metaheuristic instead to search the decision space quickly and evaluate decisions with a value function approximation. The general idea is similar to our approach. However, while our works share the general combination, our problem differs significantly from Neria and Tzur (2024) and the design of both search and evaluation methodology is therefore essentially different. For our problem, the decision space is very large and finding feasible decisions is a challenge. Thus, we propose an alternative decision formulation that reduces the burden to determine a complete decision and allows for fast feasibility checks based on a set of carefully derived propositions. With the more complex decision space and larger problem size, learning the values becomes more challenging as well. While the mentioned fast search reduces the training time significantly, simulating systems of realistic size and learning the values is still computationally expensive. Thus, we propose transfer learning, training our policy on small instances and transferring our trained policy to realistically sized instances."}, {"title": "3 Problem Statement", "content": "In this section, we introduce the Restaurant Meal Delivery Problem with Ghost Kitchens (RMD-GK). First, we describe the problem. Then, we illustrate the model's components with an example. Finally, we formally define the problem as a sequential decision process."}, {"title": "3.1 Problem Description", "content": "A ghost kitchen is a facility for the sole purpose of preparing delivery-only meals. It is partitioned into a set of kitchens, each with dedicated cooks, and uses a joint fleet of capacitated vehicles for delivery (e.g., cargo bikes or delivery cars). Each kitchen is associated with a fixed ghost restaurant that we refer to as a food type and prepares only orders from that food type.\nOver the course of the day, customers order food from the restaurants. In our setting, each order includes only one of the food types, i.e., can be prepared by one of the ghost restaurants. Each order is associated with a known preparation time and a customer location. Once an order is prepared, a vehicle picks up the order and delivers it (immediately or after some waiting time) to the respective customer, with or without other customers' orders at the same trip. If orders are bundled, and more than one order is dispatched in the same trip, the trip also captures the sequence of orders.\nThe scheduling of the orders in the restaurants and the scheduling of the delivery vehicles is done by a central information system. This system maintains and updates a schedule over time. The schedule determines for each restaurant which cook prepares which order, and when. We refer to this as the cook schedule. It further decides about the bundling of orders to trips, their assignment to vehicles, and the departure times of each trip. We refer to this as the vehicle schedule. A schedule is only feasible if each order's freshness is guaranteed when arriving at the customers. Thus, a schedule must ensure for each order that the ready-to-door time, i.e., the difference between the ready time of the food at the restaurant and the arrival time at the customer, does not exceed an order-specific duration. E.g., in case a cook is ready but upon the order preparation completion, a vehicle might not be available to deliver it fresh, the starting time of the order preparation may need to be postponed until a fresh delivery can be guaranteed. Customers expect fast delivery, ideally within 30 minutes after the order was placed. The goal of the platform is to meet the expectation by minimizing the average exceedance of delivery time (delay) over all orders."}, {"title": "3.2 Example", "content": "In the following, we provide a small example to illustrate the RMD-GK and to prepare the modeling. For the ease of presentation, we omit any notation and numbers.\nThe example is shown in Figure 3.2. On the top of the figure, a possible state of the system is shown. The middle and bottom parts depict the resulting system post-decision states for two potential decisions. In the example, the schedules of the numbered orders in the kitchens are depicted in the large box on the left. There are two food types (German and US), each with one cook. In the depicted state, five orders are shown in rectangular shape. The width of the shape indicates the preparation time for each order. Orders currently in preparation are depicted by the grey boxes. The size of each grey box corresponds to the remaining preparation time. Four of the orders (1, 2, 3, 4) are already scheduled, one is new (5). Orders 1, 3, and 5 belong to the first food type (German). Orders 2 and 4 belong to the second food type (US). Orders 1 and 2 are already in preparation. The current scheduling of the orders is (1,3) and (2,4) for the first and second food types, respectively. The gap between the finish time of order 1 and the start time of order 3 is the result of the vehicle departure plan, we discuss next.\nThere are also three vehicles, denoted A, B, and C, indicated by the three small squares with soft corners. The hourglasses beside the vehicles indicate that they are currently busy delivering orders. The geographical locations of the orders are shown on the right hand side. In the depicted state, Vehicle A is currently available and Vehicles B and C are out for delivery. Since the details of their current trips and deliveries do not matter for planning anymore, they are not depicted in the example. Only their return times matter, indicated by the hourglasses near the vehicles and depicted by the grey arrows in the schedules. Vehicle A just returned. Vehicle B returns earlier than Vehicle C. The planned bundles and trips for the vehicles are depicted on the right side of the figure. Specifically, it is planned that Vehicle A delivers"}, {"title": "Ghost Kitchens", "content": "orders 2 and 1 once they are finished. This sequence might be necessary to ensure freshness because preparation of order 2 finishes earlier than preparation of order 1. Once vehicle B (C) returns, it is scheduled to deliver order 4 (3). Because Vehicle C becomes available later, the start of preparation of order 3 is postponed. The scheduled later returns of the vehicles are depicted by the light arrows.\nIn the middle and bottom parts of Figure 3.2, two potential decisions are shown. Each decision integrates the new order in a certain way and consequently updates the preparation schedules, the bundles, and the trips of the vehicles. According to the first decision, the previous preparation schedule is kept and order 5 is added to it in a first-in-first-out (FIFO) manner. The same is true for the vehicles where order 5 is added as a direct trip to Vehicle A, leading to a second scheduled return for Vehicle A. An alternative decision is shown on the bottom part of the figure where order 5 is inserted before order 3. This allows joint delivery of orders 4 and 5, which are geographically close, by Vehicle B. To ensure feasibility, the preparation of order 4 is slightly postponed. Note that this decision causes a delay for order 3, indicated by the snail.\nThis small example already illustrates some of the complexities of decision-making and the trade-off of resources. Decisions need to consider scheduling and routing together to ensure freshness feasibility (and to minimize delays). Depending on the solutions, we can shift the workload between cooks and between cooks and vehicles. Further, we can sacrifice performance now for flexibility in the future. Switching orders 3 and 5 leads to less idling time for the cook of the first food type and earlier availability of Vehicle A. But it also leads to late delivery for order 3, later returns of Vehicles B and C, and it causes idling for the cook of the second food type."}, {"title": "3.3 Sequential Decision Process", "content": "The RMD-GK is stochastic and dynamic. It is stochastic, as orders are unknown until they are placed and their realizations follow known probability distributions in time and space. It is dynamic because decisions are made repeatedly over time. We model the problem as a sequential decision process. To that end, we first introduce the global problem notation. Then, we formally define the process components, namely, decision points, states, decisions, post decision states, costs, stochastic information, transitions, and objective."}, {"title": "Ghost Kitchens", "content": "We consider a capture phase [0, TC] during which orders can be placed. We further define a longer operation phase [0,T] with T > TC sufficiently large to allow the fulfillment of all placed orders. We denote the set of all possible orders by I. Recall that each order is associated with an order time, a certain food type, a known preparation time, and a customer location (the order's destination). The food types associated with orders are modeled via the set F. Each food type has a corresponding freshness time df , f \u2208 F, i.e., a maximum time allowed for the meal to take from the time it is prepared until it arrives at the order's destination. Furthermore, each order should be delivered within a promised delivery time \u03c4\u2208 R from its placement time, and exceeding it leads to a delay cost. The set of cooks is denoted by C with subsets Cf working on each food type f \u2208 F. The vehicles are modeled via a set V. The vehicle capacity, i.e., the maximum number of orders allowed to be simultaneously carried by each vehicle, is denoted by K\u2208 N. The travel time from the location of order i \u2208 IU {0} (or the ghost kitchen) to the location of order j\u2208 I\u222a {0} (or the ghost kitchen) is given by tij \u2208 R>0, where 0 denotes the location of the ghost kitchen.\nWe now present all elements of the sequential decision process, following the modeling framework of Ulmer et al. (2020)."}, {"title": "Decision Points.", "content": "A decision point k occurs whenever a new order is placed and at the end of the order capture phase at time TC when no more orders will arrive. As the realization of orders is stochastic, the number of decision points K is a random variable."}, {"title": "States.", "content": "A state Sk \u2208 S comprises all information relevant for decision-making. We categorize the state information according to order information, currently planned cook schedules, and currently planned vehicle schedules.\nFirst, we describe the order information. Except for the final state SK in TC , a state contains a new order. The new order in state Sk at time tk is denoted by ik. The set of open orders, i.e., orders that have been placed but have not yet left the ghost kitchen for delivery, is denoted by Ik and includes order ik. Each order i \u2208 Ik is represented by four variables indicating the food type fi \u2208 F of order i; the time of day at which order i was placed ti \u2208 [0, TC]; the preparation time of the corresponding meal ti \u2208 R>0; and the location of the order li. In summary, each order i \u2208 Ik is associated with (fi, ti, ti, li).\nSecond, we describe the currently planned cook schedules. The cook schedules were decided on in the last decision point k\u22121 and pruned in the transition to the current state (see Transition). They include all orders in Ik except the new order ik. In state Sk, the currently planned sequence of orders prepared by cook c\u2208 C is given by \u03c8kc = (i1c, i2c, . . .) \u2282 Ik \\{ik}. The set of all preparation sequences is given by \u03a8k = {\u03c8kc | c\u2208 C}.\nThe planned time of day at which the preparation of order i \u2208 Ik \\ {ik} is started is denoted by tis \u2208 [ti,T] where s is a symbol. The corresponding set is given by ts = {tis | i \u2208 Ik \\{ik}}. In summary, the state variables corresponding to the cook schedules are given by (\u03a8k,ts).\nThird, we describe the currently planned vehicle schedules. Analogous to the cook schedules, the currently planned vehicle schedules were decided on in the last decision point and pruned in the transition to the current state (see Transition). The schedules contain all orders in Ik except the new order ik. The sequence of trips performed by vehicle v \u2208 V is denoted by \u0398kv = (\u03b8kv1, \u03b8kv2, . . .). Each trip \u03b8 \u2208 \u0398kv consists of a sequence of orders (i1, i2, . . .) \u2282 Ik \\{ik}. The set of all planned trip sequences is given by \u0398k = {\u0398kv | v \u2208 V}. The planned time of day at which trip \u03b8 \u2208 \u0398k departs is denoted by tod \u2208 [tk, T] where d is a symbol. The set of all departure times is denoted by td = {tod | \u03b8 \u2208 \u0398k}. Each vehicle's v \u2208 V (next) return time to the ghost kitchen is denoted by trv\u2208 [tk, T] (r is a symbol), where its value is either tk if the vehicle is idling or its return time from its last trip that departed before tk (note that the trip itself is not part of the state Sk). The set of all vehicles' return times is given by tr. To summarize, we represent a state as the tuple"}, {"title": "Ghost Kitchens", "content": "Sk = (tk, Ik, \u03a8k, ts, Ok, td, tr).\nDecisions. A decision xk \u2208 X(Sk) is an update Xk = (\u02c6\u03a8k, t\u02c6s, O\u02c6k, t\u02c6d, tr) on the current plan (\u03a8k, ts, Ok, td, tr). This update must integrate the new order ik into the current plan (except for the final state SK in TC ) but may also"}, {"title": "Ghost Kitchens", "content": "change other parts of the plan. For example, it might reassign and reschedule orders to cooks or vehicles to adapt to changes in information. In general, an update on the current plan is feasible only if:\n\u2022 Each order is scheduled for preparation and delivery by exactly one cook and one vehicle;\n\u2022 The freshness constraint is satisfied, i.e., the time between the end of preparation and scheduled time of delivery of an order i is sufficiently small (i.e., less than \u03b4f\u2081);\n\u2022 Already started preparations remain unchanged;\n\u2022 Each order's preparation finishes before its delivery trip departs;\n\u2022 Only one order is prepared by a cook at a time;\n\u2022 Each trip of a vehicle departs only after the return from the previous trip;\n\u2022 Vehicles satisfy the capacity constraint;\n\u2022 Trips are elementary tours that start and end at the ghost kitchen.\nThe freedom of modifying the previous schedule combined with the various problem constraints yield a complex decision space X(Sk). For this reason, we model the decision space X(Sk) as a mixed integer linear program (MILP) in Appendix A.1."}, {"title": "Post-Decision States.", "content": "The post-decision state S \u2208 S represents the state directly after a decision is made but before it transitions to the next state (before the arrival of the next order ik+1). Thus, given the state Sk = (tk, Ik, \u03a8k, ts, Ok, td, tr) and the decision xk = (\u02c6\u03a8k, t\u02c6s, O\u02c6k, t\u02c6d, t\u02c6r), the post-decision state is defined as\nS\u02c6k = (tk, Ik, \u02c6\u03a8k, t\u02c6s, O\u02c6k, t\u02c6d, t\u02c6r )."}, {"title": "Costs.", "content": "The immediate cost D\u02c6k associated with state Sk and decision xk = (\u02c6\u03a8k, t\u02c6s, O\u02c6k, t\u02c6d, t\u02c6r) is given by the marginal difference in cost of the old plan (\u03a8k, ts, Ok, td) and the updated plan (\u02c6\u03a8k, t\u02c6s, O\u02c6k, t\u02c6d) (see Ulmer et al. 2020). The cost of a plan corresponds to the total \"planned\" delay of the orders, i.e., the delay that would be observed when following the plan. Let D(\u0398, td) denote the total delay for a given plan (\u03a8, ts, \u0398, td). We define D according to\nD(\u0398,td) =  \u2211\u03b8\u2208\u222av\u2208V\u0398kvmax(0, ti + \u2211|\u03b8|j=1tjj+1 \u2212tod\u2212\u03c4),\nwhere |\u03b8| denotes the union of all sets of trips contained in \u0398. In words, we sum over all trips of all vehicles. For each trip, we compute the delay of each order as the maximum of 0 and the difference of the time span from order placement to order arrival and the promised delivery time \u03c4. We define the marginal cost (the immediate cost) D\u02c6k as\nD(Sk, xk) = D(\u02c6\u0398k, t\u02c6d) \u2212 D(\u0398k, td).\nNote, that the marginal costs can be negative in case the delay of the new plan is smaller than the one of the previous plan. Further note, that the sum of marginal costs over all realized states coincides with the sum of realized delays over all orders. In the special case of the final state SK in TC , the process terminates after the decision was made."}, {"title": "Stochastic Information.", "content": "The stochastic information Wk+1 \u2208 \u03a9 is given by the new order ik+1 and corresponding food type fik+1, order placement time tik+1, meal preparation time ti k+1 , and order location lik+1. There is a special case where Wk+1 = \u2205, i.e., no more orders are realized. In that case, the sequential decision process moves to the final state TC ."}, {"title": "Transition.", "content": "The transition SM : S \u00d7 X \u00d7 \u03a9 \u2192 S maps a state-decision tuple and stochastic information to the next state Sk+1 = SM (Sk, xk, Wk+1). The current time is updated to tk+1 = tik+1. The new set of open orders is given by Ik+1 = \u22c3\u03b8\u2208\u02c6\u0398k{i \u2208 \u03b8 | t\u02c6d\u03b8 + tt\u02c6\u03b8r > tk+1} \u222a {ik+1}, i.e., all orders whose departure times are after tk+1.\nThe schedule of each cook c \u2208 C is truncated to include only orders in Ik+1. The new planned sequence of trips for each vehicle v \u2208 V is given by truncating trips \u03b8\u2208 \u02c6\u0398k with t\u02c6d\u03b8 < tk+1. The return time of each vehicle v \u2208 V is updated according to"}, {"title": "Ghost Kitchens", "content": "tk+1,v = max{tk+1, max\u03b8\u2208\u02c6\u0398k, t\u02c6d\u03b8 <tk+1(t\u02c6d\u03b8 +\u2211|\u03b8|j=1t\u02c6tjj+1) , max0,0  + tt01}."}, {"title": "Objective.", "content": "A mapping that assigns each state Sk a decision \u03c0(Sk) = xk is called a policy and denoted by \u03c0\u2208 \u03a0. Given an initial state So = (0, \u2205, \u2205, \u2205, \u2205, \u2205, \u2205), the objective is to find an optimal policy \u03c0\u2217 that minimizes the expected sum of delay. This coincides with minimizing the expected marginal costs over all decision points when starting in So and applying policy \u03c0 throughout the process:\nmin\u03c0\u2208\u03a0 E\u2211Kk=0[D\u02c6k(Sk, \u03c0(Sk))|So]."}, {"title": "4 Solution Method", "content": "In this section, we present our solution method. We first give a motivation and an overview in Section 4.1 before defining the two main components, search (Section 4.2) and evaluation (Section 4.3), in detail."}, {"title": "4.1 Motivation and Overview", "content": "The problem at hand requires fast and effective decisions. The small example in Figure 3.2 already illustrates the complexity of finding a feasible and effective decision for cook and vehicle schedules. Even for this small example", "Equation": "\u03c0\u2217(Sk) \u2208 arg minx\u2208X(Sk) D\u02c6k(Sk", "V(S\u02c6k)": "nV(S\u02c6k) = E[\u2211Kk'=k+1D\u02c6k'(Sk', \u03c0\u2217(Sk'))|S\u02c6k"}]}