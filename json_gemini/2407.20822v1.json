{"title": "Adding Circumscription to Decidable Fragments of First-Order Logic: A Complexity Rollercoaster", "authors": ["Carsten Lutz", "Quentin Mani\u00e8re"], "abstract": "We study extensions of expressive decidable fragments of first-order logic with circumscription, in particular the two-variable fragment FO\u00b2, its extension C\u00b2 with counting quantifiers, and the guarded fragment GF. We prove that if only unary predicates are minimized (or fixed) during circumscription, then decidability of logical consequence is preserved. For FO\u00b2 the complexity increases from CONEXP to CONEXPNP-complete, for GF it (remarkably!) increases from 2EXP to TOWER-complete, and for C\u00b2 the complexity remains open. We also consider querying circumscribed knowledge bases whose ontology is a GF sentence, showing that the problem is decidable for unions of conjunctive queries, TOWER-complete in combined complexity, and elementary in data complexity. Already for atomic queries and ontologies that are sets of guarded existential rules, however, for every k > 0 there is an ontology and query that are k-EXP-hard in data complexity.", "sections": [{"title": "Introduction", "content": "There are various approaches to defining non-monotonic logics such as default rules, autoepistemic operators, and circumscription. Most of these are mainly used with propositional logic rather than with first-order logic (FO), for two reasons. First, many of the approaches such as default rules can yield non-intuitive results when used with first-order logics, interacting in unexpected ways with existential quantification; see for example (Baader and Hollunder 1995) for a discussion of this issue. And second, the undecidability of first-order logic of course carries over to its non-monotonic variants.\nDescription logics (DLs) are decidable fragments of FO for which non-monotonic variations have been studied extensively, see e.g. (Baader and Hollunder 1995; Donini, Nardi, and Rosati 2002; Bonatti, Lutz, and Wolter 2009; Giordano et al. 2013; Bonatti et al. 2015b). It turned out that circumscription provides one of the most well-behaved of such variations: it does not interact in dramatic ways with existential quantification, has a simple and appealing semantics that boils down to minimizing the interpretation of certain predicates, and comes with a clean way to preserve the decidability of the base logic. The latter is in fact achieved by permitting only unary predicates to be minimized or fixed during minimization while binary predicates must be allowed to vary (Bonatti, Lutz, and Wolter 2009). This still covers the main application of circumscription which is reasoning about typical properties of objects that belong to a certain class. To model the statement that KR papers are typically interesting, for example, one may write\nKRPaper(x) ^ \u00ababKRpaper(x) \u2192 Interesting(x)\nand then minimize the unary 'abnormality predicate' abKRpaper. In this way, one may conclude that any concrete KR paper is interesting unless there is concrete evidence against that. For more information on DLs with circumscription, we refer to (Bonatti et al. 2015a; Stefano, Ortiz, and Simkus 2023; Lutz, Mani\u00e8re, and Nolte 2023)\nIt is well-known that DLs are generalized by various decidable and more expressive FO fragments, of which the two-variable fragment FO2, the guarded fragment GF, and the extension C\u00b2 of FO2 with counting quantifiers are the most important ones. In this paper, we ask the following questions: Do expressive decidable fragments of FO remain decidable when extended with circumscription (when only unary predicates are minimized or fixed)? And if so, what is the impact on computational complexity? The answers are, in our opinion, somewhat surprising.\nWe study the reasoning problems of circumscribed consequence and circumscribed querying. In the former, two sentences \u03c6 and \u03c8 are given along with a 'circumscription pattern' CP that specifies which predicates are minimized, fixed, and varying. We are then interested in deciding whether \u03c8 holds in every model that is minimal in the sense specified by CP, written \u03c6 |=CP \u03c8. Circumscribed querying is defined in the same way, but now \u03c6 is a knowledge base that consists of a sentence from the FO fragment under consideration (specifying an ontology) and a database, and \u03c8 is a query. As query languages, we consider single-atom queries (AQs), conjunctive queries (CQs), and and unions thereof (UCQs).\nWe start with studying FO\u00b2. Similarly to the case of description logic (Bonatti, Lutz, and Wolter 2009), a crucial step for proving decidability is to show that circumscribed FO2 has the finite model property (FMP) in the sense that if \u03c6 |=CP \u03c8, then there is a CP-minimal model A of \u03c6 with A |= \u03c8 that is of bounded size. To prove this, we build on a well-known construction from (Gr\u00e4del, Kolaitis, and Vardi 1997), used there to establish the FMP of non-circumscribed FO2, which converts a potentially infinite model A of an FO2 sentence \u03c6 into a model B of single exponential size. To apply this construction in the circumscribed case, however, we need an additional condition to be satisfied:"}, {"title": null, "content": "(\u2661) B must not realize any 1-type more often than A (for a suitable notion of 1-type).\nThe construction of (Gr\u00e4del, Kolaitis, and Vardi 1997) does not satisfy this condition. We remark that this is in contrast to filtration, the (much simpler) finite model construction used for description logics such as ALC.\nWe thus rework the construction of (Gr\u00e4del, Kolaitis, and Vardi 1997) in a suitable way, obtaining a version that satisfies Condition (\u2661). This yields the FMP for circumscribed FO2 and decidability as well as a CONEXPNP upper complexity bound for circumscribed consequence. A matching lower bound is obtained from ALC and thus circumscribed consequence in FO2 is of the same complexity as in (the much less expressive) ALC. We obtain the same result for the combined complexity of circumscribed AQ-querying and also show \u03a0P-completeness for data complexity, again the same as in ALC. Querying with UCQs is undecidable already for non-circumscribed FO\u00b2, so we do not study it.\nFor GF, we follow the same general approach, with a remarkably different outcome. There are two constructions that show the finite model property of GF, both of them rather intricate. The historically first one was proposed by Gr\u00e4del, based on a combinatorial construction due to Herwig (Gr\u00e4del 1999). Later, Rosati introduced a different finite model construction while studying certain integrity constraints for databases (Rosati 2006), and this construction, now known as the Rosati cover, has been adapted to GF in (B\u00e1r\u00e1ny, Gottlob, and Otto 2014). Both constructions fail to yield Property (\u2661) and modifying them to achieve this property turns out to be much more difficult than in the case of FO2. We give a modified version of the Rosati cover that yields finite models of non-elementary size, compared to single exponential size as for the original Rosati cover. This yields the FMP for circumscribed GF. We then show that the non-elementary size of finite models is unavoidable: circumscribed consequence in GF is TOWER-complete! To us, this huge difference to the FO2 case came as a big surprise. We also show that circumscribed querying in GF is decidable, generalizing recent work on DLs (Lutz, Mani\u00e8re, and Nolte 2023). In combined complexity, it is TOWER-complete with the lower bound applying to AQs and the upper bound to UCQs. Regarding data complexity, it is elementary in the sense that for each GF ontology O, circumscription pattern CP, and UCQ q, querying is in k-EXP for some k. We also show that there is no uniform bound on k: for each k \u2265 1 we identify an ontology O, circumscription pattern CP, and AQ q for which querying is k-EXP-hard. In fact, O is a set of existential rules, a 'positive' fragment of GF that is important for querying. We also show that with a single minimized predicate and all other predicates varying, the data complexity of AQ-querying is EXP-hard in GF. Note that since CQs are sandwiched beween AQs and UCQs, this also completely clarifies the (combined and data) complexity for this query language.\nIn addition, we provide first results on circumscribed consequence and AQ-querying in C2. Using a reduction to Boolean algebra with Presburger arithmetic, we show that these problems are decidable. The complexity remains open."}, {"title": "Preliminaries", "content": "When speaking of first-order logic (FO), we generally mean the version with equality and constants (unless otherwise noted) and without function symbols. FO\u00b2 is the two-variable fragment of FO, obtained by fixing two variables x and y and disallowing the use of any other variables (Scott 1962; Mortimer 1975; Gr\u00e4del, Kolaitis, and Vardi 1997). C\u00b2 is the extension of FO\u00b2 with counting quantifiers of the form \u2203<n, \u2203>n, and \u2203=n for every n \u2265 0 (Gr\u00e4del, Otto, and Rosen 1997; Pacholski, Szwast, and Tendera 1997; Pratt-Hartmann 2005). In FO2 and C2, we generally only admit predicates of arity at most two. In the guarded fragment of FO, denoted GF, quantification is restricted to the pattern\n$\\forall \\tilde{y}( \\alpha(\\tilde{x},\\tilde{y}) \\rightarrow \\phi(\\tilde{x},\\tilde{y}))$\n$\\exists \\tilde{y}( \\alpha(\\tilde{x},\\tilde{y}) \\wedge \\phi(\\tilde{x},\\tilde{y}))$\nwhere $\\phi(\\tilde{x},\\tilde{y})$ is a GF formula with free variables among $\\tilde{x}, \\tilde{y}$ and $\\alpha(\\tilde{x},\\tilde{y})$ is a relational atom $R(\\tilde{x},\\tilde{y})$ or an equality atom x = y that in either case contains all variables in $\\tilde{x}, \\tilde{y}$ (Andr\u00e9ka, N\u00e9meti, and van Benthem 1998; Gr\u00e4del 1999). The formula \u03b1 is called the guard of the quantified formula.\nWe use the standard notation of first-order logic, denoting structures with A and B, their universes with A and B, and the interpretation of predicates R with $R^{\\mathfrak{A}}$ and $R^{\\mathfrak{B}}$. We reserve a countably infinite set of predicates of each arity. We use $\\| \\phi \\|$ to denote the length of the formula \u03c6, that is, the length of \u03c6 when encoded as a word over a suitable alphabet.\nCircumscription. A circumscription pattern is a tuple CP = (\u227a, M, F, V), where M, F and V partition the unary predicates into minimized, fixed and varying predicates, and \u227a is a strict partial order on M called the preference relation. The order \u227a also induces a preference relation \u227aCP on structures by setting B \u227aCP A if the following conditions hold:\n1. B = A and ca = c for all constants c,\n2. for all P \u2208 F, $P^{\\mathfrak{B}} = P^{\\mathfrak{A}}$,\n3. for all P \u2208 M with $P^{\\mathfrak{B}} \\subsetneq P^{\\mathfrak{A}}$, there is a Q \u2208 M, Q \u227a P, such that $Q^{\\mathfrak{B}} \\nsupseteq Q^{\\mathfrak{A}}$,\n4. there exists a P\u2208 M such that $P^{\\mathfrak{B}} \\subsetneq P^{\\mathfrak{A}}$ and for all Q \u2208 M, Q \u227a P implies $Q^{\\mathfrak{B}} = Q^{\\mathfrak{A}}$.\nA CP-minimal model of an FO sentence \u03c6 is a model A of \u03c6 such that there is no B \u227aCP A that is a model of \u03c6. Note that predicates of arity larger than one always vary to avoid undecidability (Bonatti, Lutz, and Wolter 2009). We also assume that nullary predicates always vary, which is w.l.o.g. as they can be simulated by unary predicates.\nFor FO sentences \u03c6 and \u03c8, we write \u03c6 |=CP \u03c8 if every CP-minimal model A of \u03c6 satisfies A |= \u03c8. Take any fragment F of FO such as FO2. With circumscribed consequence in F we mean the problem to decide, given sentences \u03c6 and \u03c8 from F and a circumscription pattern CP, whether \u03c6 |=CP \u03c8.\nOntology-mediated querying. Ontology-mediated querying with circumscribed knowledge bases, as recently studied in (Lutz, Mani\u00e8re, and Nolte 2023), can be seen as a version of circumscribed consequence where \u03c6 encodes an ontology and a database and \u03c8 is a query. We next make this precise."}, {"title": null, "content": "A database is a finite set of ground atoms, in this context called facts. We use adom(D) to denote the set of constants that occur in D. A structure A satisfies a database D if (1) it satisfies all facts in it and (2) interprets all constant symbols c in adom(D) as ca = c (and thus no two such c denote the same element of A). We then also say that A is a model of D and write A |= D. Note that Point (2) is the standard names assumption, as usually made in the context of databases. A knowledge base (KB) K takes the form OD with O a finite set of FO sentences, called the ontology, and D a database. We usually denote K as a pair (O, D). We call K a GF-KB if all sentences in O fall into GF, and likewise for other FO fragments.\nA conjunctive query (CQ) is an FO formula of the form q = \u2203x\u03c6(x) where \u03c6 is a conjunction of relational atoms, possibly involving constants. An atomic query (AQ) is a CQ of the simple form R(c) with $\\bar{c}$ a tuple of constants. A union of conjunctive queries (UCQ) q(x) is a disjunction of CQs. Let K be a KB and q a UCQ. We write K |=CP q if A |= q for every CP-minimal model A of K. The notion K |= q is defined analogously, except that all models of K are considered, not only CP-minimal ones. Take a fragment F of FO such as GF and a query language Q such as UCQs. With circumscribed Q-querying in F, we mean the problem to decide, given a knowledge base K = (O, D) with O a set of sentences from F and a query q from Q, whether K |=CP q. When studying the combined complexity of this problem, all of K, CP, and q are treated as inputs. For data complexity, we assume O, CP, and q to be fixed and thus of constant size. We remark that our queries are Boolean, that is, they do not have answer variables. This is without loss of generality since constants are admitted in queries.\nWe shall also consider ontologies that are sets of guarded existential rules. An existential rule is an FO sentence of the form\n$\\forall \\tilde{x} \\forall \\tilde{y} (\\phi(\\tilde{x}, \\tilde{y}) \\rightarrow \\exists \\tilde{z} \\psi(\\tilde{x}, \\tilde{z}))$\nwhere \u03c6 and \u03c8 are conjunctions of relational atoms. We call \u03c6 the body of the rule and \u03c8 the head. The rule is guarded if the body contains an atom that contains all variables in it. When writing existential rules, we usually omit the universal quantifiers. For every ontology that is a set of guarded existential rules, there is a GF ontology O' such that for all databases D and UCQs q, we have (O, D) |= q iff (O', D) |= q (Cal\u00ec, Gottlob, and Lukasiewicz 2009). To construct O', one simply adds a fresh predicate to the head of each rule in O that contains all variables in the head, and then translates the resulting set of rules into an equivalent GF sentence in a straightforward way. This proof also applies to circumscribed querying, letting the fresh predicates vary.\nExample 1. Consider the database\nD = {W(w1), W(w2), E(w1), E(w2), offers(s, p)}.\nwhere offers(s, p) means that supplier s offers product p, W stands for warehouse, and E for express. Assuming that we have complete knowledge of all existing warehouses (e.g. in our company), we use a circumscription pattern CP that minimizes predicate W and lets all other predicates vary. Let the ontology O contain the guarded existential rules\noffers(x, y) \u2192 \u2203z supplies(x, y, z)\nsupplies(x, y, z) \u2192 W(z)\nwhere supplies(x, y, z) expresses that supplier x supplies product y to warehouse z. Note that since W is minimized, the existentially quantified variable z in the upper rule can only bind to w\u2081 and w2. We thus obtain\n(O, D) |=cp \u2203z (supplies(s, p, z) \u2227 E(z)).\nWe now illustrate a basic trick that underlies the hardness proofs in Section 5. Extend the database with mirror(w1, w2) and mirror(w2, w1) expressing that w\u2081 and w\u2082 are supplied with the same products by the same suppliers. We wish to extend O with\nsupplies(x, y, z\u2081) \u2227 mirror(z1, z2) \u2192 supplies(x, y, z2)\nwhich yields\n(O, D) |=cp supplies(s, p, wi) for all i \u2208 {1, 2}.   (*)\nHowever, the above rule is not guarded. We may work around this by using the guarded rules\nsupplies(x, y, z\u2081) \u2192 \u2203z2 (mirror(z1, z2) \u2227 supplies(x, y, z2))\nmirror(x, y) \u2227 mirror(x, y) \u2192 false\nand extend the data with mirror(wi, wi) for i \u2208 {1, 2}. Then if z\u2081 binds to w\u2081, the existentially quantified variable z2 can only bind to w\u2082 and vice versa, and we again obtain (*).\nSubstitutions, Signatures, Types. For a tuple \u0101, we generally use ai to denote the i-th element of \u0101, for 1 \u2264 i \u2264 |\u0101|. A substitution \u03c3 is a function that maps variables to variables. We typically write \u03c3x in place of \u03c3(x). For a tuple $\\bar{u}$ of variables and constants, we write $\\sigma \\bar{u}$ to denote the tuple obtained by applying \u03c3 componentwise, treating it as the identity on constants.\nA signature is a set of constants and relation symbols. For an FO sentence \u03c6, we use sig(\u03c6) to denote the set of such symbols in \u03c6, const=(\u03c6) to denote the set of constants in \u03c6, and const=(\u03c6) to denote the set of constants used in \u03c6 in an equality atom.\nFix a signature \u03a3. A term is a variable or a constant from \u03a3. An atom is of the form $R(\\bar{u})$ or $u_1 = u_2$ with R a relation symbol from \u03a3, $\\bar{u}$ a tuple of terms and $u_1, u_2$ terms. A literal is an atom or a negated atom. For every n \u2265 1, fix a sequence of variables $x_1, ..., x_n$. An n-type on \u03a3 is a maximal satisfiable set of literals that uses exactly the variables $x_1, ..., x_n$. Let A be a structure. If $\\bar{a} \\in A^n$, then the n-type on \u03a3 realized at $\\bar{a}$ in A, denoted tp\u03a3(\u0101), is the unique n-type t on \u03a3 with A |= t(\u0101). We may drop superscript n as n is always identical to the length of \u0101. For a set $S \\subseteq A$, we use $tp_\\Sigma^1(S)$ to denote the set of 1-types {$tp_\\Sigma^1(a) | a \\in S$}. As an abbreviation, we may write tp\u03a3(A) in place of $tp_\\Sigma^1(A)$."}, {"title": "The Two-Variables Fragment FO2", "content": "We show that circumscribed consequence is CONEXPNP-complete in FO2 and so is circumscribed AQ-querying, in combined complexity. Note that querying with CQs or UCQs is undecidable already for non-circumscribed FO2. We remark that this section showcases the general approach that we also use, in a more intricate form, for GF later on.\nAn FO2 sentence is in Scott normal form if it has the form\n$\\phi = \\forall xy \\phi_{\\forall} \\wedge \\bigwedge_{i=1..n_\\exists} \\forall x \\exists y \\phi_i$\n(*) with \u03c6\u2200 and \u03c6i quantifier-free. It has been shown in (Scott 1962; Gr\u00e4del, Kolaitis, and Vardi 1997) that every FO2 sentence \u03c60 can be converted in polynomial time into an FO2 sentence \u03c6 in Scott normal form that is a conservative extension of \u03c60: every model of \u03c6 is a model of \u03c60 and, conversely, every model of \u03c60 can be extended to a model of \u03c6 by interpreting the fresh predicates in \u03c6.\nWe now establish an improved finite model property for non-circumscribed FO2 that satisfies Property (\u2661) from the introduction.\nProposition 1. Let \u03c6 be an FO2 sentence of the form (*), \u03a3 = sig(\u03c6), A a model of \u03c6, and k = |\u03a3 \\ const=(\u03c6)|. Then there exists a model B of \u03c6 such that\n1. |B| < $\\| \\phi \\|^{n_\\exists^3+1}.2^{n_\\exists=4(k+6)}$;\n2. $tp_{\\Sigma}^1(A) = tp_{\\Sigma}^1(B)$;\n3. {$a \\in B \\mid tp_{\\Sigma}^1(a) = t$}| \u2264 {$a \\in A \\mid tp_{\\Sigma}^1(a) = t$}| for every 1-type t on \u03a3;\n4. cA = cB for all constants c in \u03c6.\nWe remark that the construction from (Gr\u00e4del, Kolaitis, and Vardi 1997) only yields Proposition 1 without Point 3, that is, it may increase the number of instances of some of the 1-types realized in the original model. We next use Proposition 1 to establish the following.\nProposition 2. Circumscribed FO\u00b2 has the finite model property: if \u03c6,\u03c8 are FO\u00b2-sentences with \u03c6 |=CP \u03c8, then there is a CP-minimal model A of $v = \\phi \\wedge \\neg \\psi$ with |A| < $\\|v\\|^{n_\\exists^3+1}.4^{n_\\exists=4(k+6)}$, where n\u2203 is the number of existential quantifiers in the Scott normal form of v and k = |sig(v) \\ const=(v)|.\nProof. Assume that \u03c6 |=CP \u03c8. Then there is a CP-minimal model A of \u03c6 with A |= \u03c8. Thus A is a model of $\\phi \\wedge \\neg \\psi$. By Proposition 1 there is a model B of $\\phi \\wedge \\neg \\psi$ that satisfies Points 1-4 of the proposition, with \u03a3 = sig($ \\wedge \\neg \\psi)$. We show that B is a CP-minimal model of \u03c6.\nAssume to the contrary that there is a model B' of \u03c6 such that B' \u227aCP B. To obtain a contradiction, we construct a model A' of \u03c6 such that A' \u227aCP A.\nOf course, A' must have the same universe as A, thus we set A' = A. By Point 3 of Proposition 1, we find an injection f : B \u2192 A such that $tp_{\\Sigma}^1(b) = tp_{\\Sigma}^1(f(b))$ for all b\u2208 B. We define A' so that its restriction to the range of f is isomorphic to B', with f being an isomorphism. In particular, this restriction interprets all constants. To define the remaining part of A', we use cloning. By Point 2 of Proposition 1 and choice of f, for every a \u2208 A that is not in the range of f we find a \u00e2 \u2208 A that is in the range of f and such that $tp_{\\Sigma}^1(a) = tp_{\\Sigma}^1(\\hat{a})$. We then make a \u00e2 a clone of a in A', that is, we set\n\u2022 $tp_{\\Sigma}^1(a) = tp_{\\Sigma}^1(a)$;\n\u2022 $tp_{\\Sigma}^2(a, b) = tp_{\\Sigma}^2(\\hat{a}, b)$ for all b in the range of f;\n\u2022 $tp_{\\Sigma}^2(a, b) = tp_{\\Sigma}^2(\\hat{a}, b)$ for all b not in the range of f.\nIt is easy to verify that A' is a model of \u03c6, since B' is. Note in particular that the cloning does not touch on the constants, that is, if we make element a a clone of \u00e2, then there is no constant c with $c^{\\mathfrak{A'}} = a$. This can be seen as follows. Assume that there was a constant c with $c^{\\mathfrak{A'}} = a$. Then Point 4 of Proposition 1, the definition of \u227aCP, and the construction of the initial A' yields $c^{\\mathfrak{A}} = \\hat{a}$. But then $tp_{\\Sigma}^1(a) = tp_{\\Sigma}^1(\\hat{a})$ implies a = \u00e2, which contradicts our initial assumption that a is in the range of f, but \u00e2 is not.\nIt can be verified that A' \u227aCP A, since B' \u227aCP B.\nIt is now easy to derive the main result of this section.\nTheorem 1. Circumscribed consequence in FO\u00b2 is CONEXPNP-complete.\nProof. The lower bound is inherited from the description logic ALC (Bonatti, Lutz, and Wolter 2009). The upper bound is based on Proposition 2, as follows.\nIt is not hard to see that there exists an NP algorithm that takes as input an FO2 sentence \u03c6, a circumscription pattern CP, and a finite structure A and checks whether A is not a CP-minimal model of \u03c6: the algorithm first checks in polynomial time whether A is a model of \u03c6, answering \u201cyes\u201d if this is not the case. Otherwise, it guesses a structure A' with A' = A and checks whether A' is a model of \u03c6 and A' \u227aCP A. It answers \"yes\" if both checks succeed, and \"no\" otherwise. Clearly, checking whether A' \u227aCP A can be done in time polynomial in the size of A.\nThis NP algorithm may now be used as an oracle in a NEXP-algorithm for deciding \u03c6 |=CP \u03c8: by Proposition 2, it suffices to guess a structure A with |A| < $\\|v\\|^{n_\\exists^3+1}.2^{n_\\exists=4(k+6)}$, check that it is not a model of \u03c8, and then use the NP algorithm from above to check that A is a CP-minimal model of \u03c6.\nFrom the above, we also obtain results on circumscribed AQ-querying.\nTheorem 2. Circumscribed AQ-querying in FO\u00b2 is CONEXPNP-complete in combined complexity and \u03a0P-complete in data complexity.\nProof. For combined complexity, it suffices to show that circumscribed consequence and circumscribed AQ-querying mutually reduce to one another in polynomial time. First, (O, D) |=CP R(c) is equivalent to \u03c6 |=CP, R(c) where\n$\\Phi = O \\wedge(\\bigwedge_{c,c' \\in adom(D)}c\\neq c' \\wedge \\bigwedge_{\\sigma \\in \\Delta} \\sigma)$\nwhere \n$\\Delta = \\{ \\forall x  (P_c(x) \\leftrightarrow x =c )| c \\in adom(D)\\}$.\nAnd second, \u03c6 |=CP \u03c8 is equivalent to \u03c6' |=CP' P(c) where \u03c6' = \u03c6 \u2227 (\u03c8 \u2192 P(c)), P is a fresh unary predicate that is varying in CP', and c a fresh constant.\nThe lower bound for data complexity is inherited from ALC (Lutz, Mani\u00e8re, and Nolte 2023). For the upper bound, we may argue exactly as in the proof of Theorem 1, where the structure A to be guessed is now of polynomial size since n and k are now constants in Propositions 1 and 2. For k, this depends on the assumption, which we may make w.l.o.g., that the database contains only predicates that occur also in the ontology or query."}, {"title": "Upper Bounds for the Guarded Fragment", "content": "We show that circumscribed consequence in GF is in TOWER and so is circumscribed UCQ-querying, in combined complexity. We also show that UCQ-querying is in ELEMENTARY in data complexity, that is, for every GF ontology O, circumscription pattern CP, and AQ A(z), there is a k \u2265 1 such that given a database D, it is in k-EXP to decide whether (O, D) |=CP A(x).\nWe remind the reader of the relevant complexity classes, namely ELEMENTARY = $\\bigcup_{k>1}$ k-EXP and\nTOWER = $\\bigcup_{f \\in FELEM}$USPACE(tower(f(n))\nwhere FELEM is the class of all elementary functions and tower(x) denotes a tower of twos of height x.\n4.1 Circumscribed Consequence\nWe consider GF sentences \u03c6 in Scott normal form. Such a sentence takes the shape\n$\\phi = \\forall xy \\phi_{\\forall} \\wedge \\bigwedge_{i=1..n_\\forall} \\forall x (\\alpha_i \\rightarrow \\gamma_i) \\wedge \\bigwedge_{i=1..n_\\exists} \\forall x (\\beta_i \\rightarrow \\exists \\tilde{y} (\\nu_i \\wedge \\psi_i))$\nwhere the \u03b1i, \u03b2i and \u03b3i are atoms and the vi and \u03c8i are quantifier-free. It has been shown in (Gr\u00e4del 1999) that every GF sentence \u03c6 can be converted in polynomial time into a GF sentence in Scott normal form that is a conservative extension of \u03c6.\nWe now state the improved finite model property for GF that satisfies Property (\u2661) from the introduction. Let tower(0, n) := n and, for every k \u2265 1, define tower(k,n) := 2tower(k\u22121,n), so that tower(k, n) refers to an exponentiation tower that consists of k twos followed by an n. A signature is unary if it only contains constants symbols and unary predicates.\nProposition 3. Let \u03c6 be a GF sentence, \u03a3 a unary signature that contains const=(\u03c6), and A a model of \u03c6. Then there exists a model B of \u03c6 that satisfies the following properties:\n1. |B| < tower(4|\u03a3|+4,||);\n2. $tp_{\\Sigma}^1(A) = tp_{\\Sigma}^1(B)$;\n3. {$a \\in B \\mid tp_{\\Sigma}^1(a) = t$}| \u2264 {$a \\in A \\mid tp_{\\Sigma}^1(a) = t$}| for every 1-type t on \u03a3;\n4. cA = cB for all constants c in \u03c6."}, {"title": null, "content": "The reader should think of \u03a3 as the signature that contains, apart from const=(\u03c6), all unary predicates that are minimized and fixed in a circumscription pattern.\nTo establish Proposition 3, we use a modified version of the Rosati cover that leaves untouched a selected part A from the original model. In addition, if A contains all the instances of some unary type in the original model, then so does A in the modified Rosati cover. The precise formulation follows.\nLemma 1. Let \u03c6 be a GF sentence and \u03a3 a unary signature that contains const=(\u03c6). For all models A of \u03c6 and all AC A that contain ca for every constant c in \u03c6, there exists a model B of \u03c6 that satisfies the following properties:\n1. |B| \u2264 $2^{(|\\Delta|+||)||+11}$;\n2. $tp_{\\Sigma}^1(\\Delta) = tp_{\\Sigma}^1(\\Delta)$;\n3. $tp_{\\Sigma}^1(A \\setminus \\Delta) = tp_{\\Sigma}^1(B \\setminus \\Delta)$;\n4. \u2206\u2282 B and cA = cB for all constants c in \u03c6.\nWe now prove Proposition 3 by using Lemma 1 and choosing an appropriate \u2206. For any \u2206 \u2286 A that contains ca for all constants c in \u03c6, we use rc(A, \u2206) to denote the finite model of \u03c6 produced by Lemma 1 (where \u2018rc' stands for 'Rosati cover').\nLet \u03c6, \u03a3, and A be as in Proposition 3. For every 1-type t on \u03a3, set\n$#_{\\mathfrak{A}}(t) := |\\{a \\in A \\mid tp_{\\Sigma}^1(a) = t\\}|$.\nThe challenge is to choose A so that Point 3 of Proposition 3 is satisfied. Call a 1-type t stable w.r.t. AC A if #rc(A,\u2206)(t) \u2264 #a(t) and call \u25b3 stabilizing if all 1-types are stable w.r.t. \u0394. \u03a4\u03bf attain Point 3, it clearly suffices to choose a stabilizing A.\nWe use a set \u2206 that contains all instances of 1-types realized only a certain number of times: for m \u2265 1, set\n$\\Delta_m := \\{a \\in A \\mid #_{\\mathfrak{A}}(tp_{\\Sigma}^1(a)) \\leq m\\} \\cup \\{c^{\\mathfrak{A}} \\mid c \\in const=(\\phi)\\}$.\nNow consider Am, for some m \u2265 1. For those 1-types t that are realized in A at most m times, it is clear from Points 2 and 3 of Lemma 1 that rc(A, Am) has the very same instances of t, and thus t is stable w.r.t. Am. Other types, however, may not be stable.\nSo can we find a value for m to make Am stabilizing? This is trivially the case for\nm := max({#a(t) | t \u2208 tp\u03a3(A), #a(t) < +\u221e}),\nbut we would like to have an m that is bounded from above to comply with Point 1 in Proposition 3.\nLemma 2. There exists a stabilizing set \u2206m such that 2 < m < tower(22|\u03a3|+4,||).\nProof. We start with m0 = 2 (starting with 1 would also work but using 2 simplifies calculations as we are dealing with towers of 2s). If Amo is stabilizing, we are done. Otherwise there must be a 1-type t on \u03a3 that is not stable w.r.t. Amo, i.e. #rc(A,\u2206mo)(t) > #a(t). This implies in particular that #a(t) is no larger than the size of the universe of rc(A, Amo). Using the bound from Point 1 of Lemma 1,"}, {"title": null, "content": "we set $m_1 = 2^{(|\\Delta_{m_0}|+||)||+11}$. Now all instances of t in A are contained in Am1 and by Points 2 and 3 of Lemma 1 we have #rc(A,\u2206m1)(t) = #a(t), thus t is stable w.r.t. Am1, and in fact for any Am with m \u2265 m1. We proceed in this way, with"}]}