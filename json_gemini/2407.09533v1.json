{"title": "Video Occupancy Models", "authors": ["Manan Tomar", "Philippe Hansen-Estruch", "Philip Bachman", "Alex Lamb", "John Langford", "Matthew E. Taylor", "Sergey Levine"], "abstract": "We introduce a new family of video prediction models designed to support downstream control tasks. We call these models Video Occupancy models (VOCs). VOCs operate in a compact latent space, thus avoiding the need to make predictions about individual pixels. Unlike prior latent-space world models, VOCs directly predict the discounted distribution of future states in a single step, thus avoiding the need for multistep roll-outs. We show that both properties are beneficial when building predictive models of video for use in downstream control. Code is available at github.com/manantomar/video-occupancy-models.", "sections": [{"title": "1 Introduction", "content": "Modeling the future is essential for planning. Predicting future events has long been a fundamental principle for learning in animals (Stachenfeld et al., 2017), driving recent deep learning research to focus on building better predictive models (Oord et al., 2018; Ho et al., 2022). Modeling the future from video data presents a significant challenge that requires addressing two fundamental questions. First, how detailed should such a model be? Should it produce pixel-level predictions, or should it operate at a more abstract level, such as a latent representation of the input? Second, how far into the future should the model predict? Should sampling from the model depend on a specific temporal timestep? This question is inherently linked to how many video frames a model processes at a given time to produce future samples. In the context of planning for downstream control, these remain open questions with multiple valid answers and various trade-offs.\nRegarding the first question, making predictions directly in the pixel space of input images is computationally complex and costly, often expending resources on predicting elements that are not useful for control. Capturing the essential information in a compact latent space and making predictions within this space is frequently a more efficient alternative. Significant progress has been made in learning better latent representations via self-supervised learning (He et al., 2022), and powerful generative models have been developed to make predictions in these latent spaces. These techniques offer good solutions to capturing information more abstractly but have seen limited use in making temporal predictions.\nFor the second question, most predictive models typically learn to make one-step predictions, which can be combined autoregressively to produce predictions further into the future. The successor representation (SR)(Dayan, 1993) captures the expected occupancy of future states in a single representation but does not provide the full sampling capability of a dynamics model. Recently, a generative analog of the SR, called y-models(Janner et al., 2020), was introduced. y-models can sample from the discounted future state occupancy distribution, reducing the need to unroll a standard one-step model over multiple timesteps. However, y-models have only been applied to problems with small state spaces and have not addressed the challenges of learning compact representations from rich pixel-level video data."}, {"title": "2 Background", "content": ""}, {"title": "2.1 Successor Representation and Gamma Models", "content": "The successor representation (SR) (Dayan, 1993) aims to capture a summary of future state occupancy. Specifically, it learns to estimate the expected occupancy of visiting a future state $s_e$ and is denoted as $M(s_e | s_t)$, where the conditioning is on the current state $s_t$. The SR can be learnt similar to how value functions are learnt, via temporal difference (TD) backups, described as follows:\n$M(s_e | s_t) = E_{s_{t+1}} (\\mathbb{I}[s_e = s_{t+1}] + \\gamma M(s_e | s_{t+1})),$ (1)\nwhere the reward is replaced by an indicator, SR reward. The SR reward is 1 if the next state is the same as the state for which the SR is computed, and 0 otherwise. When the state space is high dimensional, such an indicator reward can be replaced by a continuous feature reward, in which case the SR equivalently captures future feature or representation occupancy. The feature reward essentially refers to the features associated with an observation $x_t$, denoted as $\\phi(x_t)$. We call the features as a reward since they substitute for the reward in the TD update. This version of the SR is then fittingly termed Successor Features (Kulkarni et al., 2016).\n$M(\\phi(x_e) | \\phi(x_t)) = E_{s_{t+1}} (\\phi(x_1) + \\gamma M(\\phi(x_e) | \\phi(x_{t+1}))),$ (2)\nInstead of learning to estimate the expected state occupancy, one could also learn to estimate the entire distribution. Gamma models (Janner et al., 2020) achieves this capability via generative TD based sampling and uses either GANs or Flow models for capturing the SR distribution. In the next section, we will utilize the same idea of generative TD learning for learning distributions of future representations of observations."}, {"title": "2.2 Quantized AutoEncoding and Self-Supervised Models", "content": "Vector Quantized Variational Autoencoders (VQ-VAEs) (Van Den Oord et al., 2017) are a type of generative model designed to create high-quality discrete latent representations. They consist of an encoder that transforms input data into a latent space, a quantizer that maps these continuous latent vectors to a finite set of vector embeddings (codebook), and a decoder that reconstructs the data from these quantized vectors.\nDINO (Caron et al., 2021) (self-Distillation with No labels) is a self-supervised learning method aimed at learning visual representations without labeled data. It employs student and teacher networks of identical architecture, and uses the teacher network's predictions to align the student network's predictions. DINO uses stop-gradient and exponential moving average (EMA) on the teacher network to avoid representation collapse. This approach enables DINO to learn robust and transferable visual representations from large-scale unlabeled datasets, demonstrating high performance in various downstream tasks such as image classification and object detection."}, {"title": "3 Video Occupancy Models", "content": "Video Occupancy models consist of two parts, a dedicated representation space which captures information present in a short sequence of video frames, and a generative model that can produce temporal predictions over the representation space. A natural choice for the generative model is to use an autoregressive model and so we exclusively use a GPT-2 (Radford et al., 2019) model that autoregressively predicts a sequence of tokens. The representation space is responsible for producing this sequence of tokens that get fed into the generative model (see Figure 1). In particular, a continuous representation of a sequence of frames/observations is quantized into discrete tokens that are used as input to the generative model. Instead of processing a long sequence of frames, VOCs only encode a small number of observations into the current representation $z_t$. A temporal target is then computed in a similar fashion, capturing information present in future observations. The quantized versions of the current and the temporal target representation are then concatenated to form a sequence of discrete tokens. The GPT model (denoted as $M$) is trained to do next token prediction on this concatenated sequence of tokens. The temporal target is computed such that it captures future information within a single representation time-step. To achieve this, we sample the temporal target from a mixture distribution, that between the next time-step (quantized) representation $z_{t+1}$ and a bootstrapped output of the GPT model conditioned on the next time-step representation $M(\\cdot|Z_{t+1})$. The temporal target $Z_{temporal}$ can thus be defined as a sample from the following mixture distribution: $(1 \u2013 \\gamma) p( \\cdot | z_t) + \\gamma M'(\\cdot | Z_{t+1})$, where the $M'$ is the bootstrapped version of the GPT model. The sampling between these two distributions within the mixture is governed by the parameter $\\gamma$, which describes how myopic or farther-away-in-time the temporal target should be. In the case that $\\gamma = 0$ for instance, all the sampling weight is put on the next time-step distribution and so we recover a standard 1-step model. In all other cases, the bootstrap model output plays a role in sampling the temporal target and hence it carries more future information than a 1-step target. Note that this way of computing the temporal target is exactly how TD-learning functions, where the next time-step representation replaces the reward, and the parameter $\\gamma$ is typically called the discount factor. Once such a model is learnt, a single forward pass will generate a future representation (governed by the value of $\\gamma$), circumventing the issue of having to do multiple forward passes through a one step model to produce a future prediction.\nWith the TD-learning perspective in mind, it is fairly straightforward to view VOCs as a highly expressive generative analog of the successor representation (SR). In the SR context, future predictions are typically learnt by capturing an expectation of future state occupancy via TD learning using an indicator reward. However, when the observations are high dimensional, comparing observations pixel-by-pixel is clearly not a good idea in order to capture similarity. To that end, VOCs allow for learning a useful representation that only capture information about the abstract structure present in the observations, and not focus on the lower level detail, such as pixel intensities. Additionally, capturing an expectation of the future representations (as is typically done for learning the SR) is too limited as it does not allow us to use the model to sample future observations. An analogous generative version switches to learning the distribution of occupancy of future observations rather than just the expectation and thus allows for sampling from the model. These two properties produce a powerful combination within a single model.\nHaving described how the generative component of VOCs work, we now focus on how the representations are learnt. In this paper, we describe three different ways of doing so, each leading to a"}, {"title": "4 Experimental Analysis", "content": "In this section, we discuss three different instantiations of VOCs depending on how the representation space is constructed, namely \u2013 quantized autoencoding, inverse dynamics modelling, and self-supervised distillation. Additional details including hyperparameters are included in the Appendix. Finally, we include results on using VOCs in a model predictive control framework."}, {"title": "4.1 Quantized AutoEncoding", "content": "VQ-VAE VOCs. We begin by learning Video Occupancy models with a VQ-VAE representation space. We take a VQ-VAE model pretrained on ImageNet and then finetune it for specific MuJoCo-based datasets (Todorov et al., 2012; Tassa et al., 2018). The discrete codes produced by the VQ model act as tokens for the pixel-based observations. Each VQ encoded observation produces a 25-dim vector of discrete values with a vocabulary size of 1024. We then concatenate the VQ codes for three consecutive observations to produce the conditioning state $z_t$, akin to how frame stacking is necessary to capture and predict velocity information. We similarly generate a 75-dim (25-dim code vector \u00d7 3 observations) temporal target $Z_{temporal}$ and then concatenate the conditioning state and the target to form the input ({$z_t, Z_{temporal}$}) to the GPT-2 model. The generative model then does"}, {"title": "Benefit over a 1-step model.", "content": "We compare VOCs with a standard one-step model, which essentially corresponds to setting $\\gamma = 0$ for the VOC. Note that a single rollout step of the VOC models corresponds to a multi-step prediction, whereas a 1-step model must be unrolled for longer to produce a prediction corresponding to a given horizon length. A 1-step model thus suffers from accumulating errors in the autoregressive prediction the most. A VOC model on the other hand remedies this issue by using the TD-based backups in its model training and thus requires only a single pass to produce a multi-step prediction. The difference in accumulating errors in the 1-step model is directly reflected in the value function estimated with the model.  This result highlights how TD-learning might be a superior objective when learning autoregressively over pixel spaces.\nRemark 4.1. We use a TD(1) objective in VOCs, where the (1) corresponds to using the next representation and then following up by the bootstrap prediction. Similarly, we can use a multi-step TD objective, where a representation k timesteps in the future is first sampled with probability $\\gamma^{k-1}(1 \u2013 \\gamma)$ and then we sample the bootstrap prediction with the remaining probability. This forms a k-step TD estimator, akin to the case of n-step value estimation with rewards."}, {"title": "4.2 Inverse Dynamics Modelling", "content": "VQ-VAE spaces preserve most pixel-level information present in the input. However, in the case when we solely care about control, a lot of the information can be dropped. Learning a multistep inverse kinematics (MUSIK) (Efroni et al., 2021; Lamb et al., 2022; Islam et al., 2022) model is one way to achieve a more compressed representation of the input. MUSIK works by learning to predict the action given the current and future observation in a trajectory. The conditioning over the future input enforces learning long-term dependen-cies within the representation so as to better predict the action. In this sec-tion, we develop a quantized version of the MUSIK representation."}, {"title": "4.3 Self-supervised (distillation) Modelling", "content": "VQ-VAEs are based on convolutional networks (ConvNets) and have been shown to be less effective than transformer (ViT)-based self-supervised methods in capturing saliency maps of objects in images (Caron et al., 2021). This raises a natural question about comparing VQ-VAEs with more advanced tokenization schemes. Specifically, we use quantized DINO features as the token space for VOCs. The quantized version of DINO incorporates a VQ-bottleneck immediately after the ViT encoder, enabling it to provide tokens for an image.\nWe compare VQ-VAE and DINO-based Video Occupancy Models side by side in Figure 6. Here we compare the return estimation error computed via density estimation (using Eq. 4) for both the VQ-VAE VOC and DINO VOC models. Since the density-based return estimator requires a reward model, we use a common reward model for both DINO and VQ-VAE representations to ensure a fair comparison. We observe that quantized DINO representations lead to improved density value estimates on validation trajectories, resulting in lower errors in the corresponding return estimates."}, {"title": "4.4 Control with Video Occupancy Models", "content": "Having shown how VOCs can be learnt with different representation spaces and deployed for value function estimation, we finally move to using them for control. Our goal in this section is to use the most minimally feasible model-based setup to showcase VOCs ability to do downstream control. To that end, we adopt a model predictive control (MPC) (Nagabandi et al., 2018) approach. MPC works by querying the model with different candidate actions and choosing the action that leads to the maximum reward under the model's predictions. Since VOCs are not action conditioned, we cannot use them as is for ranking the utility of actions as in standard MPC. Instead, we select a set of candidate actions first and use a simulator to provide next step observations corresponding to the candidate actions given a starting observation. We then query the model for value estimates for these set of next step observations. Finally, we choose the action that leads to the observation with the maximum value as predicted by the VOC model.   However, overall, VOC value estimates can steer the control policy towards high returns."}, {"title": "5 Related Work", "content": "Video Predictive Models. The work in learning video prediction models can be broadly categorized into two main approaches: learning representations from video frame sequences and developing generative models to produce future frames.\nIn representation learning, the prominent methods include VideoMAE (Tong et al., 2022), which reconstructs masked videos, extending the Masked Autoencoders (MAE) concept from static images to multiple frames. A related approach involves masked image modeling that predicts within a representation space (Li et al., 2023). This method has been adapted for videos, where the prediction target is derived from future frame patches (Assran et al., 2023). Temporal contrastive learning approaches (Sermanet et al., 2018) have also been widely employed for learning control-oriented representations (Nair et al., 2022). Despite leveraging temporal information for prediction, these methods primarily result in fixed representations of given observations, rather than models capable of performing rollouts.\nOn the generative front, diffusion techniques have been extensively utilized to generate video frames by corrupting an entire sequence and then predicting the original, uncorrupted frames (Ho et al.,"}, {"title": "Successor Representation and Related Ideas.", "content": "The Successor Representation (SR) (Dayan, 1993) is a well-established concept in cognitive neuroscience and reinforcement learning. SR aims to encapsulate a summary of the future states likely to be encountered, independent of a specific reward function. This predictive map can be learned through Temporal Difference (TD) learning, using indicator state occupancy rewards. In a deep learning context, SR has been utilized by incorporating user-specified features and learning an SR estimation of these features (Kulkarni et al., 2016). A more recent method, the FB representation (Touati & Ollivier, 2021), eliminates the need for user-specified features by imposing a linear structure on the SR through forward and backward representations. However, the FB representation has yet to be applied to pixel-based observation tasks. Another related concept involves learning intent-conditioned value functions (ICVF), which use an intent variable to learn value functions, similar to how the F and B representations are parameterized (Ghosh et al., 2023). However, ICVF does not define intents over a representation space; instead, it uses resampled future frames as intents, encountering issues akin to the original indicator-reward based SR formulation. Lastly, \u03b3-models (Janner et al., 2020) and \u03b4-models (Wiltzer et al., 2024) propose learning generative and distributional analogs of SR, respectively. These models aim to capture not just the expectation but the entire distribution of future states. Both approaches still rely on indicator-rewards and have not been applied to pixel-based observations."}, {"title": "Representation Learning via Reinforcement Learning.", "content": "Recent research in control tasks often involves either pre-training representations through self-supervised learning or learning features in an end-to-end manner using a specific reward function. The general value function (GVF) principle (Sutton et al., 2011) offers a promising alternative by learning features on-the-fly through a Temporal Difference (TD) paradigm. This approach involves making predictions about features via temporally bootstrapped target predictions, enabling feature learning without relying on a specific extrinsic reward function. TD learning is powerful because it refines predictions using backups of incomplete models. Despite its potential, GVFs typically struggle due to the absence of a clear utility function for the features being learned. We address this issue by using representations learned from self-supervised methods as proxies for evaluating the usefulness of certain features. This allows the temporal difference objective to continue shaping these features, thus leveraging both self-supervised learning benefits and the dynamic refinement capabilities of TD learning."}, {"title": "6 Limitations and Future Work", "content": "This paper combined various representation spaces within VOC models. However, we restricted to pre-learnt representations for the most part. It would be interesting if the temporal predictions from the generative model can be used as a target to learn the VOC representation itself. Furthermore, this paper dealt with simple representation learning methods such as the VQ VAE and so required stacking VQ codes corresponding to multiple frame for temporal prediction. Such a design is non-ideal since the VQ codes contain a lot of redundant information. For instance, the background content between three consecutive frames remains almost the same. A downside of carrying over such redundant information is that temporal prediction is restricted to fewer timesteps in the future. Future work can alleviate this issue by using representation methods that capture information across multiple frames (e.g. video MAE representations), i.e. capture dyanmics-relevant information in the VOC representations. This would reduce redundant information and encourage predicting temporally for even longer horizons. Essentially, processing information across a stack of frames would then be amortized via both the representation and the temporal prediction axes.\nFinally, we presented one way to incorporate predictions made by VOCs for better control, i.e. via model predictive control. There remain multiple more powerful ways to combine VOC-like world models with model-based control, including search methods over the learned model (Silver et al., 2018)."}, {"title": "7 Conclusion", "content": "We introduce a new family of video prediction models called Video Occupancy Models (VOCs). VOCs work in a well defined latent space (that of discrete codes produced via different representation methods) and temporally predict via a generative TD loss. Since they are essentially trained with a generative version of the Successor Representation, they circumvent the issue of unrolling a model multiple times to produce future predictions. Instead, they produce future predictions (as governed by the parameter $\\gamma$) within a single forward pass. We show that not predicting at every timestep leads to better and faster rollout accuracy. Furthermore, these models can be used to value estimation when given access to a reward function, and subsequently can be embedded in a model-based algorithm for downstream control."}]}