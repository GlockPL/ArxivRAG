{"title": "Fast energy-aware OLSR routing in VANETs by means of a parallel evolutionary algorithm", "authors": ["Jamal Toutouh", "Sergio Nesmachnow", "Enrique Alba"], "abstract": "This work tackles the problem of reducing the power consumption of the OLSR routing protocol in vehicular networks. Nowadays, energy-aware and green communication protocols are important research topics, specially when deploying wireless mobile networks. This article introduces a fast automatic methodology to search for energy-efficient OLSR configurations by using a parallel evolutionary algorithm. The experimental analysis demonstrates that significant improvements over the standard configuration can be attained in terms of power consumption, with no noteworthy loss in the QoS.\nKeywords energy vehicular networks evolutionary algorithms parallelism", "sections": [{"title": "1 Introduction", "content": "In the last five years, the networking research community has shown a growing interest in vehicular ad hoc networks (VANETs), a technology that uses vehicles as nodes of a mobile network [24]. VANETs share their main concepts with generic mobile ad hoc networks (MANETs), but they also have several distinctive features. For example, the node mobility in VANETs is different from the models used in other mobile networks, since vehicles tend to move following organized patterns, and they are usually subject to restrictions in both their motion range and in the interactions with roadside infrastructure. In addition, VANETs integrate multiple ad hoc networking technologies (such as WiFi IEEE 802.11p, WiMAX IEEE 802.16, Bluetooth, etc.), posing a difficult challenge for attaining effective and simple communication between vehicles."}, {"title": "2 Energy aware routing in vehicular networks", "content": "This section introduces VANET routing, the OLSR protocol, the power consumption model used in our approach, and a review of related work. It also describes the methodology for finding energy-efficient OLSR configurations."}, {"title": "2.1 Routing in VANETs", "content": "Finding a stable routing strategy that guarantee the exchange of up-to-date information, maximizing reliability and minimizing delays is an important technical challenge when designing an architecture for vehicular communication. In VANETs, the links for vehicle-to-vehicle and vehicle-to-infrastructure communication tend to be shortlived, due to the intrinsic high-speed node mobility and the presence of obstacles. Therefore, a great deal of effort is dedicated to defining efficient routing strategies. Specific VANET protocols have appeared over the last few years, but most of them are based on prior mobile ad hoc networks. These protocols can be grouped into: topology-based (proactive, e.g. DSDV and OLSR, reactive, e.g., AODV and DSR, hybrid), position-based (e.g., GPSR, GEOTORA, GPCR), cluster-based (e.g., COIN, LORA CBF) and broadcasting (e.g., BROADCOMM, V-TRADE, HV-TRADE) [30,29].\nWithin those protocols originally proposed for MANETs, topology-based protocols are among the most studied for routing in VANETs [29]. In proactive protocols, all nodes have consistent and up-to-date routing information for each node permanently, unlike in reactive ones, where the routes are created when demanded by the source node [30]. Proactive protocols have the advantage of reduced end-to-end delays, since the routes are already established and it is not necessary to invoke a routing discovery process to find them, as in reactive protocols. However, proactive protocols require a continuous exchange of control messages to maintain the topological information stored in the routing tables. While negligible for small scenarios, control messages use significant additional bandwidth for large networks, leading to excessive power consumption, possibly preventing the use of devices fed by batteries or renewable energy sources in VANETs [23]."}, {"title": "2.2 Optimized link state routing protocol", "content": "OLSR is a proactive link-state routing protocol conceived for mobile ad hoc networks with low bandwidth and high mobility. OLSR relies on applying an efficient periodic flooding of control information using special nodes that act as multipoint relays (MPRs), reducing the number of required transmissions [32].\nOLSR daemons periodically exchange control messages to maintain the network topology information in the presence of mobility and failures. The core functionality is performed mainly by using three different types of messages:\nHELLO messages, exchanged between neighbor nodes to allow for link sensing, neighborhood detection, and MPR selection signaling. These messages are generated periodically, containing information about the neighbor nodes and about the links between their network interfaces.\nTC (topology control) messages, generated by MPRs to indicate which other nodes have selected it as their MPR. This information is used for routing table calculations. TC messages are broadcasted periodically, and a sequence number is used to distinguish between recent and old ones.\nMID (multiple interface declaration) messages, sent by the nodes to report information about their network interfaces, needed since multiple interfaces with different addresses can be involved in the communications.\nOLSR is regulated by a set of parameters defined in the OLSR RFC 3626 [12]:\nthe timeouts before resending each message type, HELLO INTERVAL, REFRESH INTERVAL, and TC INTERVAL, respectively;\nthe \"validity time\" of the information received for each message type, NEIGHB HOLD TIME, MID HOLD TIME, and TOP HOLD TIME;\nthe WILLINGNESS of a node to act as a MPR;\nthe time during which the MPRs record information about the forwarded packets, DUP_HOLD TIME.\nA set of default values for these parameters has been suggested by the OLSR standard RFC 3626 (see Table 1).\nOLSR has several features that make it suitable for highly dynamic ad hoc networks as VANETs: i) it is well suited for high density networks, with concentrated communication between a large number of nodes [12, 25]; ii) it is useful for applications requiring short delays in the data transmission, as most of warning information in VANETs [25]; iii) the protocol information can be extended with data to allow the hosts to know in advance the quality of the routes; iv) it permits an easy integration into existing operating systems and devices, including smartphones, embedded systems, without changing the header of the IP messages [19]; and v) it manages multiple interface addresses for the same host, allowing VANET nodes to use different network interfaces- WiFi, Bluetooth, etc., while acting as gateways to other devices, such as drivers and pedestrian smartphones, base stations, etc. [12]."}, {"title": "2.3 Power consumption model", "content": "Several agents are involved in VANET communications, such as on-board devices, smartphones, or traffic signs, which use wireless network interfaces to exchange information with each other. The energy required for each device to perform the communications depends on its mode:\nidle is the default state of wireless interfaces in ad hoc networks, where nodes keep listening and the interface can change the state and start transmitting or receiving packets.\ntransmit and receive states are for sending and receiving data through the medium.\nsleep state is when the node radio is turned off, and thus the node is not capable of detecting any signal.\nIn our work, we modify the behavior of OLSR in order to reduce the power consumption due to data exchange (control or information messages). We deal with energy-awareness in VANETs by optimizing the power consumption of the two operational states that act during the packet exchange: transmit and receive states. Therefore, we consider the per-packet power consumption [16] modeled by Cano et al. [8], in which only transmit and receive modes are taken into account to compute the power consumption to be optimized."}, {"title": "2.4 Related work", "content": "The need of providing efficient communications in MANETs and VANETS has motivated the research community to deal with the problem of optimizing the communication protocols employed in such networks. The related studies have mainly focused on obtaining dramatic improvements in terms of both QoS offered packet delivery ratio, delivery delays, etc. and resources consumed, e.g. power requirements. Due to the complexity of the underlying optimization problems, metaheuristics have been usually applied as the most appropriate techniques to solve them."}, {"title": "2.4.1 Metaheuristics for protocol optimization in MANETs and VANETs", "content": "Regarding optimization techniques in MANETs, Alba et al. [3] applied a specialized cellular multi-objective GA for finding an optimal configuration for the Delayed Flooding with Cumulative Neighborhood broadcasting strategy. Dorronsoro et. al [15] evaluated six different versions of GA for the design of ad hoc injection networks. Cheng et al. [10] also used a GA for dealing with the multicast routing problem in MANETs. More recently, Ruiz et al. [35, 36] applied a hybrid multi-objective optimization algorithm (CellDE) to maximize the coverage and minimize the power consumption and broadcast time of the EDB protocol.\nIn VANETs there are just a few approaches applying metaheuristics to optimize communication protocols. Garcia-Nieto et al. [18] employed a set of metaheuristic algorithms to optimize VDTP and AODV [17] protocols. Recently, Toutouh et al. [42] applied DE in order to improve the performance of OLSR routing protocol in such networks."}, {"title": "2.4.2 Methods for energy-efficient OLSR", "content": "The related literature presents a number of power-aware mechanisms proposed at the network layer in wireless networks, mainly due to the impact of the routing protocols on the overall power consumption. These protocols determine the power consumption in creating and maintaining the routes and the data packets forwarding. In this work, we aim to provide an energy-efficient OLSR configuration when applying this protocol for routing in VANETs. OLSR has been selected as a case study since it offers competitive QoS in such networks [41], but it also requires significant power consumption.\nSeveral approaches have been proposed to reduce the power consumption when using OLSR. Ghanem et al. [20] and Razalli et al. [33] evaluated new MPRs selection criteria based on the residual energy levels of the nodes. Routing path determination based on the overall power consumption to forward data and on the residual level of energy of intermediate nodes was explored by De Rango and Fotino [14] and Guo and Malakooti [22], respectively. Other authors have analyzed combinations of the aforementioned techniques [7, 13, 27, 31, 37]. Finally, De Rango et al. [13] presented Overhearing Exclusion, a mechanism that allows energy saving by turning off the device when a unicast message exchange happens in the device neighborhood.\nOur previous article [40] studied the possible energy savings when an efficient protocol configuration in terms of QoS (DE-OLSR) is used. That is the only existing work studying the best parameter configurations to improve the energy efficiency of OLSR specifically in VANETs. The impact of the parameters configuration in the network performance led us to perform the in-depth study of the OLSR parameter tunning that we now present, in order to find the best configuration in terms of energy efficiency in VANETs. As in previously presented MANET/VANET optimization problems, the use of metaheuristic techniques is mandatory to deal with such problems."}, {"title": "2.5 Methodology for energy efficient OLSR via parameter tuning", "content": "The standard OLSR parameter values in Table 1 can be fine-tuned automatically by using an optimization technique, with the aim of obtaining efficient OLSR configurations for VANETs. This procedure hopefully allows reducing the power consumption without incurring a significant loss of QoS in comparison with the standard OLSR definition in RFC 3626.\nThe search of possible combinations of OLSR parameter values is not an easy problem. The dimension of the search space increases exponentially with both the number and the range of possible parameter values. Thus, exact search methods are not useful for efficiently solving the problem. In this context, heuristic and metaheuristic optimization algorithms are viable options to compute accurate energy-aware configurations in reasonable times.\nIn our previous paper [42], the large amount of time required to perform the VANET simulations limited the proposed search method to work with a reduced population in order to obtain results in reasonable time. To overcome this drawback, this work proposes to use a parallel GA for efficiently searching the parameter values of the OLSR protocol. By using several computing resources simultaneously, the parallel implementation allows to reduce the simulation times.\nThe automatic search for energy-aware OLSR configurations is carried out by using the energy cost of the communications as the main objective to be optimized. However, since excessive reductions of power consumption of the protocol can cause it to malfunction, we use the packet delivery ratio (PDR) quality metric to guarantee a minimum level of QoS in the communications. Thus, the parallel GA for finding energy-efficient parameter values searches the best configuration that provides the most energy savings while maintaining PDR within margins of good performance (the degradation in the PDR value is kept below 15% of the PDR achieved with the standard OLSR configuration)."}, {"title": "3 Evolutionary computation", "content": "This section introduces the main concepts about evolutionary computation and the parallel model applied to the GA used in this paper."}, {"title": "3.1 Evolutionary algorithms", "content": "EAs are non-deterministic methods that emulate the evolutionary process of species in nature, in order to solve optimization, search, and other problems [6]. Over the last twenty years, EAs have been successfully applied for solving optimization and search problems underlying many complex real-life applications. An EA is an iterative technique (each iteration is called a generation) that applies stochastic operators on a pool of individuals (the population). Each individual in the population is the encoded version of a tentative solution of the problem. The initial population is generated either by using a random method or by applying a specific heuristic for the problem.\nAn evaluation function associates a fitness value with every individual, indicating its suitability to the problem. Iteratively, the population is modified by the probabilistic application of variation operators like the recombination of individuals or random changes (mutations) in their contents. A selection technique that gives a higher chance of survival to the best suited individuals,\nguides the EA to tentative solutions\nof better quality through the generations.\nThe stopping criterion usually involves a fixed number of generations or execution time, a quality threshold on the best fitness value, or the detection of a stagnation situation. Specific policies are used to select the individuals to recombine and to determine which new individuals are inserted in the population in each new generation. The EA returns the best solution ever found in the iterative process, taking into account the fitness function considered.\nThe classic GA [21] is an EA that defines recombination and mutation as variation operators, applying them to the population of potential solutions in each generation. The recombination is used as the main operator to perform the search (exploiting the characteristics of suitable individuals), while the mutation is used as a (seldom-applied) secondary operator aimed at providing diversity for exploring different zones of the search space.\nGAs are widely spread due to their versatility for solving optimization problems. Here, a parallel version of the classic GA has been applied to the problem of finding energy-aware OLSR configurations in VANETs."}, {"title": "3.2 Parallel evolutionary algorithms", "content": "Parallel implementations became popular in the last decade as an effort to improve the efficiency of EAs. By splitting the population or the fitness function evaluation into several processing elements, parallel EAs allow reaching high quality results in a reasonable execution time even for hard-to-solve optimization problems [2]. The parallel GA proposed here is categorized within the master-slave model according the classification by Alba and Tomassini [4]. The master-slave model (see Fig. 2) follows a classic functional decomposition of the EA, where different stages of the evolutionary process are performed in several computing resources. The evaluation of the fitness function is the main candidate to perform in parallel, since it usually requires larger computing time than the application of the variation operators. Thus, a master-slave parallel EA is organized in a hierarchic structure: a master process performs the evolutionary search and controls a group of slave processes that evaluate\nthe fitness function."}, {"title": "4 A parallel GA for energy-aware OLSR tunning", "content": "This section presents the implementation details of the parallel GA designed to find the energy-aware configuration of OLSR."}, {"title": "4.1 The MALLBA library", "content": "MALLBA [2] is a library of optimization algorithms that deals with parallelism in a user-friendly and efficient manner. MALLBA implements EAs and other metaheuristics as generic templates in software skeletons to be instantiated with the problem features by the user. These templates incorporate the knowledge related to the resolution method, its interactions with the problem, and the parallelism. Skeletons are implemented by required and provided C++ classes that abstract the entities in the resolution method:"}, {"title": "4.2 Parallel multithreading GA in MALLBA", "content": "The skeletons in MALLBA offer support for parallelism using the distributed memory approach (i.e., implementing distributed subpopulation models for metaheuristics). However, the library does not provide support for sharedmemory multithreading parallel programming.\nMultihtreading programming allows implementing efficient algorithms by using multiple threads within a single process. Multihtreading is well suited for multi-core computers, where each thread is executed on a single core. It provides a fast method for concurrent execution; communications and synchronizations are performed via the shared-memory resource, which is handled using mutually-exclusive operations in order to prevent simultaneous accesses. There is a runtime overhead for creating and destroying threads, and a common approach to avoid it is using a thread pool. Instead of creating a new thread, the application uses an available thread from the pool, performs its task, and returns the thread to the pool instead of destroying it. This reusing methodology improves the performance of the parallel program, by reducing the cost of performing the creation and termination of threads.\nThe multithreading master-slave parallel EA proposed in this work was implemented using the GA skeleton in MALLBA. Additional code was incorporated into the GA skeleton to implement several new features:\nto create and manage the pool of threads used for the fitness evaluation;\nto implement the master-slave hierarchy and the communications between master and slaves;\nto define the synchronization mechanisms between threads, used to read and write the shared memory.\nOur implementation starts by creating and initializing a pool of threads to distribute the fitness evaluation. Each thread receives several input parameters from the master process, including the solution to be evaluated, the thread identification, and the index in the array of fitness values. Then, each slave process, implemented in each thread, computes the fitness evaluation by simulating the mobile communications with the proposed OLSR parameters configuration in a given VANET scenario, using the ns-2 network simulator. The master process, implemented in the main thread of execution, is in charge of performing the domain decomposition for the problem, by assigning each thread the solutions to be evaluated. After that, the master process waits until all slave threads finish their execution and report the fitness value."}, {"title": "4.3 Problem encoding", "content": "The OLSR protocol is governed by eight different configuration parameters, already presented in Table 1. For this reason, in the parallel GA the solutions are represented by individuals encoded as a vector with eight genes, one for each parameter, as presented in Fig. 3."}, {"title": "4.4 Fitness function", "content": "The fitness function is crucial for the GA optimization mechanism, since it guides the population to solutions of better quality. The optimization proposed in this work mainly concerns to energy-aware communications, so the main component of the fitness function is the power consumed by the VANET nodes when using a certain OLSR configuration. However, if a given configuration excessively reduces the power consumption, the protocol may not satisfy the QoS requirements for the communication in VANET networks. So, there is a tradeoff between the energy efficiency and the QoS provided by the protocol. In order to take into account the previous consideration, the fitness function used in the parallel GA proposed in this work integrates the PDR metric in\norder to bias the search to solutions with acceptable QoS.\nThe fitness function is given by the expression in Equation 6, where $E(s)$ and $PDR(s)$ represent the power consumption and the PDR for a given OLSR configuration $s$, respectively. $E_{RFC}$ and $PDR_{RFC}$ are the reference values for the power consumption and the PDR when using the standard configuration in RFC 3626, respectively. Finally, $w_1 = 0.9$ and $w_2 = -0.1$ are the weights for the energy and PDR contributions, respectively, and $A=0.1$ is a normalizing offset to keep the fitness value in the interval [0, 1]."}, {"title": "4.5 Parallel GA operators", "content": "A classic GA has been applied for protocol tuning in a previous paper [18]. However, although it offered competitive results, that algorithm suffered from low population diversity and early stagnation. For this reason, in this work we decided to introduce some variations to the canonical initialization and mutation operators."}, {"title": "4.5.1 Initialization", "content": "The population initialization should distribute the individuals uniformly in the search space as much as possible. However, this uniform pattern is not easy to obtain when using random operators and small populations. Therefore, here we propose using a uniform initialization, to ensure that the initial population contains individuals from different areas of the parameters' search space. The initialization operator splits the search space into $pop\\_size$ diagonal subspaces (where $pop\\_size$ is the global population size of the parallel GA), and it forcibly ensures that there is an individual located in each diagonal subspace [11]. Equation 8 summarizes the procedure applied in the initialization operator.\n$x_{p,i}^{(0)} = z_{RFC} + a_i \\quad i \\in [0, 7], p \\in [0, pop\\_size-1]$\nIn Equation 8, $x_{p,i}^{(0)}$ is the initial value for each gene $i$ in the solution vector that encodes the p-th individual, set according to a population seed $z_{RFC}$, and a randomly distributed value $a^i$. $z_{RFC}$ is the value proposed by the RFC 3626 for the i-th OLSR parameter. $a^i$ is computed by using the diagonal subspace limits and a random value $\u03b2 \\in [0, 1]$, as expressed in Equation 9, where $z_{(i,MAX)}$ and $z_{(i,MIN)}$ are the upper and lower values for the i-th parameter, according to the ranges defined in Table 1."}, {"title": "4.5.2 Recombination", "content": "The parallel GA uses the classic arithmetic recombination operator for realvalued problem encodings. It defines a linear combination of two chromosomes, $x_p^{(g)}$ and $x_q^{(g)}$, according to Equation 10, where the best parent governs the reproduction according to the weight $\u03c3 \u2208 [0, 1]$.\n$x_{p,i}^{(g+1)} = \u03c3 \u00d7 x_{p,i}^{(g)} + (1 \u2212 \u03c3) \u00d7 x_{q,i}^{(g)} \\\\\n x_{q,i}^{(g+1)} = (1 \u2212 \u03c3) \u00d7 x_{p,i}^{(g)} + \u03c3 \u00d7 x_{q,i}^{(g)}$"}, {"title": "4.5.3 Mutation", "content": "The mutation operator introduces new genetic information, and therefore, diversity to the population of the parallel GA. After analyzing the algorithm of the OLSR protocol, we decided to introduce some problem-related information in the mutation operator. Thereby, the new genetic information is randomly generated, but it does not represent pointless OLSR configurations. The genes that encode OLSR related parameters, e.g., HELLO INTERVAL and NEIGHB HOLD TIME [12], are modified simultaneously, but using different policies and following the OLSR power-aware problem specifications. According to this idea, the mutation operator offers 22 different movements in the solution space. For example, Equation 11 presents the case in which\nHELLO INTERVAL ($x_{p,0}^{(g)}$) and NEIGHB HOLD TIME ($x_{p,4}^{(g)}$) genes are mutated in generation g. A similar procedure is employed for other parameters.\n$x_{p,0}^{(g+1)} = \u03b2_0 \u00d7 (z_{(0,MAX)} \u2013 z_{(0,MIN)}) \\quad \u03b2_0 \u2208 [0, 1] \\\\\n x_{p,4}^{(g+1)} = \u03b2_4 \u00d7 (z_{(4,MAX)} \u2013 z_{(4,MIN)}) \\quad \u03b2_4 \u2208 [0, 1]$"}, {"title": "5 Experimental analysis", "content": "This section introduces the set of VANET scenarios and the computational platform used to evaluate the proposed parallel GA. After that, the experiments to determine the best values for the GA parameters are presented. First, the experimental results when solving realistic VANET scenarios are analyzed, by presenting the numerical results and a comparative analysis of solution quality and computational efficiency when using a different number of threads. Last, the best solutions found are validated by studying their performance on a set of 36 VANET scenarios."}, {"title": "5.1 VANET scenarios", "content": "The experimental evaluation of the proposed parallel GA was performed using urban VANET scenarios covering real areas of the city of M\u00e1laga, Spain."}, {"title": "5.3 GA parameter setting experiments", "content": "A parameter setting analysis was performed to study the best values for the crossover probability ($p_c$) and the mutation probability ($p_m$) in the parallel GA. The analysis was done over a small VANET defined in scenario U1 (120000 m\u00b2 and 20 vehicles, with reference values $E_{RFC}$ = 5680 and $PDR_{RFC}$ = 88.23%). The population size of the parallel GA was fixed to 24 individuals, and the stopping criterion was set at 100 generations. The candidate values for the parameters were: $p_c$: 0.5, 0.7, 0.9; and $p_m$: 0.25, 0.0125, 0.006125.\nGAP energy =$\\frac{E_{RFC}-E(S)}{E_{RFC}}$(12) $GAPPDR =$$\\frac{PDR_{RFC} - PDR(s)}{100}$(13)"}, {"title": "5.4 Results and discussion", "content": "The experimental evaluation studied the quality of results and the computational efficiency of the parallel GA using the most promising parameter values identified in the previous subsection, to find an energy-aware configuration for OLSR in VANETs. In all the experiments reported in this subsection, the stopping criterion for the parallel GA was set at 500 generations.\nThe experimental analysis was performed over a medium-sized VANET defined in the scenario U2 (area 240 000 m\u00b2, and involving 20 vehicles). The reference values for energy and PDR for this scenario are $E_{RFC}$ = 9104.19 and $PDR_{RFC}$ = 87.12%."}, {"title": "5.4.1 Experimental results", "content": "Table 4 summarizes the results of the experimental analysis over the mediumsized U2 scenario. Three parallel GA variants were studied: implementations using 8, 16, and 24 individuals, and the same number of execution threads. In order to provide a baseline for the comparison, the analysis includes the results obtained with two sequential optimization methods: a classic GA, using a population of 8 individuals and a single thread for execution, and the previous QoS optimized version of OLSR by means of Differential Evolution (DE-OLSR) [40]."}, {"title": "5.4.2 Computational efficiency", "content": "The most common metrics used by the research community to evaluate the performance of parallel algorithms are the speedup and the efficiency.\nThe speedup evaluates how much faster a parallel algorithm is than its corresponding sequential version. It is computed as the ratio of the execution times of the sequential algorithm ($T_1$) and the parallel version executed on $m$ computing elements ($T_m$) (Equation 14). When applied to non-deterministic algorithms, such as the parallel GA applied in this work, the speedup should compare the mean values of the sequential and parallel execution times (Equation 15) [4]. The ideal case for a parallel algorithm is to achieve linear speedup ($S_m = m$), but the most common situation is to achieve sublinear speedup ($S_m < m$), mainly due to the times required to communicate and synchronize the parallel processes.\nThe efficiency is the normalized value of the speedup, regarding the number of computing elements used to execute a parallel algorithm (Equation 16). This metric allows the comparison of algorithms eventually executed in nonidentical computing platforms. The linear speedup corresponds to $e_m = 1$, and in the most usual situations $e_m < 1$.\n$S_m = \\frac{T_1}{T_m}$(14)\n$S_m = \\frac{E[T_1]}{E[T_m]}$(15)\n$e_m = \\frac{S_m}{m}$(16)"}, {"title": "5.5 Validation in other VANET scenarios", "content": "In order to confirm the efficacy of the results obtained in the experimental analysis, a set of validation experiments were conducted to compare the performance of the best OLSR configurations found using each parallel GA with the standard RFC configuration. The validation experiments involved simulations performed over 36 different unseen VANET scenarios, defined in the medium-size (U2) and large-size (U3) urban areas of M\u00e1laga, already presented in Section 5.1."}, {"title": "Quality of service", "content": "Regarding the QoS metrics, the results in Table 7 indicate that, when using the OLSR configuration computed by the parallel GA using 24 threads, the improvements in the power consumption are obtained without suffering large reductions in the PDR values\u20148% in average\u2014. This is an acceptable value for the loss in the QoS, when taking into account the important energy reductions achieved.\nAn extremely large decrease is obtained in the transmission times required to reach the destination nodes (E2ED) when using the energy-aware OLSR configuration. This result is mainly motivated by the absence of congestion, due to the low overload generated. The NRL values indicate that all configurations found using the parallel GA exchange significantly less control messages than the standard OLSR. In average, the network overload is 1/7 of the standard one, showing that OLSR employing the automatic configuration is less likely to be affected by network congestion problems than the standard OLSR. This feature allows the new configuration to be more useful than the standard one in situations where a large number of messages are transmitted, such as in city center areas, traffic jam scenarios, etc. However, the values of the hops metric indicates that the standard OLSR finds shorter paths than the energyaware OLSR. Anyway, the routing paths computed by the energy-aware OLSR do not use longer than 1.5 hops in average to reach the destination node, while the RFC configuration requires 1.20.\nThe previously commented QoS results indicate that the automatic energyaware OLSR configuration found by pGA-24, while keeping the PDR degradations under a controlled threshold, generates less network routing overload, and it also allows a faster delivery of the packets. The standard OLSR computes shorter routing paths, but the size difference with the routing paths computed with the new energy-aware OLSR is negligible, so both configurations can be considered as equivalent regarding this metric. Indeed, the standard configuration is much more congestion-prone due to the large network overload and collisions."}, {"title": "Experimental analysis: summary", "content": "The experimental analysis proved that the energy-aware OLSR configuration is able to obtain large reductions in the power consumption and significantly improve the time required to deliver the data packets, while only suffering a bounded degradation in the PDR metric. The relevance of all the considerations commented on the previous subsections increase when facing large-sized VANET scenarios where real-time transmissions are important, such as in traffic accidents, traffic jams, urban areas with high density of VANET users, etc. In these situations, the results obtained demonstrate the efficacy of the proposed automatic method for finding energy-aware OLSR configurations."}, {"title": "6 Conclusions", "content": "This article has studied the problem of finding energy-efficient configurations for the OLSR routing protocol in vehicular networks. The design of energyefficient communication protocols is an important issue in this research area, and few previous researches have tackled the OLSR configuration problem from an energy-oriented point of view. In this line of research, the main contribution of this article is to propose an automatic methodology for computing energy- efficient configurations for the OLSR protocol in VANETs, by using a parallel GA.\nThe automatic search for energy-aware OLSR configurations is carried out by considering the power consumption of the VANET nodes as the main objective to optimize, but also taking into account the level of QoS in the communications. A well-know energy model in wireless networks and the ns-2 network simulator were used. The proposed GA for solving the problem applies a master-slave parallel model. It enables the configurations search to be performed efficiently, by simultaneously using several computing resources to perform the VANET simulations. By reducing the execution times, the parallel GA allows increasing the population of candidate solutions in order to overcome the stagnation problem identified in previous proposals. The computational efficiency of the proposed parallel GA was almost-linear, obtaining efficiency values greater than 80%.\nRegarding the wireless communications, the experimental analysis demonstrates that significant reductions in the power consumption of the VANET nodes are obtained when using the automatic energy-aware OLSR configuration found by the parallel GA, when compared with the standard OLSR configuration suggested by RFC 3626. Average reductions up to 40.2% in the power consumption were obtained, and significantly better improvements (up to 77.54%) were computed for large and dense VANET scenarios. In addition, the energy-aware OLSR configuration found significantly reduces the network overload, and thus it allows reducing the average time required to deliver the data packets. All these important features are obtained while only suffering a bounded degradation (less than 8%) in the QoS of the communication, evaluated by the PDR metric.\nThe main lines for future work are related to two issues: improving the method used in the automatic search, and tackling the OLRS configuration as a multiobjective problem. Regarding the first issue, the use of new fitness functions should be considered, taking into account new power-aware and QoS metrics, such as the residual level of battery of the nodes and the packet delays, respectively. In addition, the approach proposed in this paper could be extended by using several VANET scenarios to evaluate each OLSR configuration, possibly by using other efficient models for parallel EAs. Thus, different situations will be taken into account to obtain more accurate fitness results. Regarding the second issue, the study of explicit multiobjective approaches for the problem is also suggested as future work, in view that the OLSR energy savings vary in inverse proportion with the QoS of the protocol."}]}