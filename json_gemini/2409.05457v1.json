{"title": "Visualizing Extensions of Argumentation Frameworks as Layered Graphs", "authors": ["Martin N\u00f6llenburg", "Christian Pirker", "Anna Rapberger", "Stefan Woltran", "Jules Wulms"], "abstract": "The visualization of argumentation frameworks (AFs) is crucial for enabling a wide applicability of argumentative tools. However, their visualization is often considered only as an accompanying part of tools for computing semantics and standard graphical representations are used. We introduce a new visualization technique that draws an AF, together with an extension (as part of the input), as a 3-layer graph layout. Our technique supports the user to more easily explore the visualized AF, better understand extensions, and verify algorithms for computing semantics. To optimize the visual clarity and aesthetics of this layout, we propose to minimize edge crossings in our 3-layer drawing. We do so by an exact ILP-based approach, but also propose a fast heuristic pipeline. Via a quantitative evaluation, we show that the heuristic is feasible even for large instances, while producing at most twice as many crossings as an optimal drawing in most cases.", "sections": [{"title": "1 Introduction", "content": "Computational models of argumentation provide methods for reasoning under uncertainty; they are among the core formalisms of knowledge representation and reasoning. Abstract argumentation (Dung 1995) is one of the key approaches to argumentative reasoning, with a broad range of applications in legal reasoning, medical sciences, and e-democracy, see, e.g., (Atkinson et al. 2017; Baroni et al. 2018). In Dung's argumentation frameworks (AFs), arguments are considered abstract; reasoning is entirely based on the conflicts between arguments. Argumentation semantics provide criteria for argument acceptance; they can be employed to determine sets of jointly acceptable arguments (extensions). The visualization of AFs is crucial for the deployment of formal argumentation. AFs are transparent and explainable by design; their graph-based structure allows for an intuitive and easy-to-understand visual representation of conflicting scenarios. For instance, Besnard et al. (2022) utilize the visualization of subgraphs of AFs for argumentative explanations. However, the design of powerful and flexible visualization tools is often considered secondary, in particular when it comes to depict the result in terms of extensions. To unleash their full potential, it is essential to provide customized visualizations of AFs rather than applying general-purpose graph drawing techniques.\nIn this work, we develop genuine methods for the graphical representation of AFs. We introduce a new visualization technique that draws an AF, together with an extension (as part of the input), as a 3-layer graph layout. Our technique supports the user to more easily explore the visualized argumentation framework, better understand extensions, and graphically verify algorithms for computing semantics.\nOur 3-layer approach allows us to highlight multiple properties of the provided extension: The layers make it easy to identify that the extension is conflict-free and admissible. Using different colors we further highlight various witness sets for admissibility and to show whether an extension is maximal. To optimize the visual clarity and aesthetics of this visualization, we propose to minimize edge crossings in our 3-layer drawing. We show that minimizing crossings under additional constraints imposed by the highlighting cannot be achieved by standard crossing minimization approaches for layered graphs. To optimize our visualizations, we therefore propose a fast heuristic pipeline and an exact integer linear programming approach, the latter being feasible only for small instances. We quantitatively evaluate the run times and number of crossings via a prototype implementation."}, {"title": "2 Preliminaries", "content": "We fix a non-finite background set U. An argumentation framework (AF) (Dung 1995) is a directed graph F = (A, R) where A \u2286 U represents a set of arguments and R \u2286 A \u00d7 A models attacks between them. We let $E^+ = \\{x \\in A | E \\text{ attacks } x\\}$ for a set E \u2286 A. For two arguments x, y \u2208 A, if (x, y) \u2208 R we say that x attacks y as well as x attacks (the set) E given that y \u2208 E \u2286 A.\nA set E \u2286 A is conflict-free in F iff for no x,y \u2208 E, (x,y) \u2208 R. E defends an argument x if E attacks each attacker of x. A conflict-free set E is admissible in F (E \u2208 ad(F)) iff it defends all its elements. A semantics is a function \u03c3 : F \u2192 2^{2^U} with F \u2192 \u03c3(F) \u2286 2^U. This means, given an AF F = (A, R) a semantics returns a set of subsets of A. These subsets are called \u03c3-extensions. In this paper we consider so-called complete, grounded, preferred, and stable semantics (abbr. co, gr, pr, stb).\nDefinition 1. Let F = (A, R) be an AF and E \u2208 ad(F). E \u2208 co(F) iff E contains all arguments it defends; E \u2208 gr(F) iff E is \u2286-minimal in co(F); E \u2208 pr(F) iff E is \u2286-maximal in co(F); E \u2208 stb(F) iff $E^+ = A\\E$.\nWe make use of argument labelings to visualize extensions (Baroni, Caminada, and Giacomin 2018). Let E be a \u03c3-extension. An argument a \u2208 A is labelled IN if a \u2208 E; OUT if there is b \u2208 E s.t. (b, a) \u2208 R; and UNDEC otherwise. A proper k-layer drawing of F = (A, R) consists of (i) a partition of A into k subsets A1, ..., Ak called layers such that for each edge (x, y) \u2208 R either x, y belong to the same layer Ai (intra-layer edge) or they belong to adjacent layers Ai, Ai+1 (proper edge), (ii) a permutation \u03c0i for each layer Ai mapping each argument a \u2208 Ai to a position (i, \u03c0i(a)) on a set of vertical lines in the plane, (iii) a straight-line segment connecting the endpoints of each proper edge, and (iv) an arc to the right of each layer connecting the endpoints of each intra-layer edge. We consider the cases of k = 2 and k = 3, see Fig. 1 (middle) for a 3-layer example."}, {"title": "3 Visualization Design", "content": "In this section we elaborate on the design of our visualization. We start by introducing and motivating the design decisions that underlie our layered AF drawings. Then we elaborate on how we optimize visual clarity and aesthetics. Finally, we prove a few properties of our drawings.\nDesign decisions. An important distinction between our AF visualization and existing works is that it is not solely a graphical interface for a solver that computes semantics. To the contrary, our technique for an AF F = (A, R) requires that the semantics have already been computed, and hence an extension E \u2286 A is also provided as input. We visualize both an AF F, as well as an extension E. For that, we propose the following basic design decisions (DDs).\n1. Visualize the AF F = (A, R) as a layered graph drawing.\n2. All arguments A are represented by vertices that are partitioned over (at most) three layers according to their argument labelings: the IN-, OUT-, and UNDEC-layers.\n3. The attacks R between arguments are represented as directed edges following proper 3-layer drawing standards.\nSee Fig. 1 (middle) for an example of a visualization adhering to these basic design decisions. DDs 1 and 3 are fairly standard; AFs are often visualized as graphs, in which arguments and attacks are represented as vertices and (directed) edges, respectively. However, DD 2 ensures that our visualization is distinctively different from existing work, by incorporating the given extension E into the layout of the graph. Compared to standard techniques (see Fig. 1 (left)), this emphasizes the arguments in the extension (the IN-layer) and structures the remaining arguments with respect to the extension (OUT- and UNDEC-layers). Note that we can easily verify that the set E is conflict-free, by the absence of edges between vertices in the IN-layer. Building on this basic design, we introduce further design decisions for attacks.\n4. Attacks from IN to OUT have a distinct color.\n5. For each argument in OUT, highlight one incoming edge.\n6. Odd cycles in UNDEC are highlighted.\nFor an example of these design decisions, see Fig. 1 (right): We chose orange as the color to distinguish attacks from IN to OUT; we highlight one edge for each argument in OUT in red and odd cycles in UNDEC using (light) green.\nDD 4 and 5 facilitate the visual communication of whether the extension is admissible. To see this, note that, by definition, edges starting in the IN-layer point to arguments in OUT, and edges between IN and UNDEC cannot exist for admissible extensions. Hence coloring and highlighting to verify admissibility can be restricted to edges between IN and OUT. Specifically, DD 5 is implemented by coloring certain edges red, which ensures a strong visual presence of a witness for admissibility. Moreover, DD 4 allows the user to further explore and understand the admissibility property. For example, the user can look for other witnesses among the (orange) colored edges, or find out that admissibility hinges on a single attack, the deletion of which would no longer make this extension admissible.\nFinally, DD 6 focuses on the UNDEC-layer. Arguments in UNDEC can potentially be added to E. This is especially interesting when arguments in OUT attack arguments in UNDEC: the attacked arguments in UNDEC are then already defended, and need to be added to E to obtain a complete extension. However, arguments in an isolated cycle of odd length cannot be part of a complete extension, by definition. DD 6 produces visual witnesses for arguments that cannot be added to a complete extension E, unless attacks outside the odd cycle interfere. Thus, this can trigger further investigation into whether E is or can become a complete extension. We round out the set of design decisions with a few design decisions for arguments.\n7. Attacking arguments are colored according to their attack.\n8. Arguments in IN that do not attack are highlighted.\n9. Arguments in UNDEC that are not attacked by other arguments in UNDEC are highlighted - DD 7 takes priority.\nAgain see Fig. 1 (right): Attacking arguments in IN match the (orange) color of the edges (even when highlighted in red) and arguments in UNDEC match the (light) green color of their odd cycle edges. Arguments in IN that do not attack are highlighted in (light) blue, while arguments in UNDEC that do not attack are highlighted in purple.\nDD 7 ensures a coherent look and makes it easier to trace attacks back to the attacking argument. DD 8 again helps in verifying admissibility of the extension: arguments in IN that do not attack are not defending any arguments and hence must be defended by another argument. Similar to DD 6 for the IN-layer, DD 9 focuses on the UNDEC-layer. DD 9 ensures that arguments that are already defended are highlighted. For admissible extensions, these attacks may be added to IN.\nOptimization. Given these design decisions, we want to produce visualizations that are as clear and legible as possible. Consider Fig. 1 once more, and observe that on the right, vertex orders are optimized to minimize edge crossings. Minimizing edge crossings is a well-known optimization criterion for graph drawings that ensures visual clarity and aesthetically pleasing visualizations (Purchase 1997).\nWe add non-standard constraints to our crossing minimization. Remember that the order of the vertices in the layers determines the crossings, and that we have intra-layer and proper edges. We argue that the crossings of different edges do not affect our visualization equally: the proper edges between the IN- and OUT-layer are crucial for the verification and exploration of extension properties. We therefore place more emphasis on minimizing their crossings.\nI. We introduce the red-edge constraint (REC): No two highlighted edges for DD 5 may cross.\nII. We minimize (1) the number of edge crossings between the IN- and OUT-layer as primary objective, and (2) all other edge crossings as secondary objective.\nLet AFCROSSINGMINIMIZATION be the optimization problem that asks to compute a layered AF drawing that minimizes crossings according to II. We consider variants of this problem under the REC (AFCROSSMINREC) and disregarding the REC (AFCROSSMIN)."}, {"title": "3.1 Properties of Optimal Layered AF Drawings", "content": "In this section we investigate the relation between AFCROSSMIN and AFCROSSMINREC. We consider very simple AFs that have only IN- and OUT-layers, only proper edges between IN and OUT, and small extensions of size two or three. We first show that solving AFCROSSMINREC and AFCROSSMIN on certain instances results in equal crossing counts (see Fig. 2).\nTheorem 1. Layered AF drawings of an AF F = (A, R) with stable extension E, with |E| = 2, obtained by solving AFCROSSMINREC and by solving AFCROSSMIN have the same number of total edge crossings.\nProof. Consider an arbitrary AF F = (A, R) with a stable extension E of size two. Let u, v \u2208 E \u2286 A be the arguments in the extension, and observe that the theorem holds when A\\E = \u2205. Thus assume that A contains other arguments. Without loss of generality we assume that u is drawn above v in the IN-layer of the layered AF drawing of F. Since E is a stable extension, all arguments in A \\ E will be drawn in the OUT-layer. We first observe that, drawing all degree-1 arguments adjacent to u at the top of the OUT-layer can prevent them from incurring any crossings, and symmetrically, all degree-1 neighbors of v can be drawn at the bottom of the OUT-layer. This leaves only the arguments that are adjacent to both u and v, and let there be k of such argument. These are (necessarily) drawn in the middle of the OUT-layer, between the degree-1 arguments (see Figure 2).\nEach of these k arguments will incur k - 1 edge crossings regardless of their ordering: Take an arbitrary argument a \u2208 A in this set of k arguments and let the k arguments be drawn in arbitrary order. The edge (u, a) (or (a, u)) will cross all edges between v and the degree-2 arguments above a. Symmetrically, (v, a) (or (a, v)) crosses all edges between u and the degree-2 arguments below a. This leaves us with $\\frac{k \\cdot (k-1)}{2}$ crossings in total for AFCROSSMIN (because we double count crossings when counting k-1 crossings for each of the k arguments).\nTo complete the proof, observe that the same approach can minimize crossings for AFCROSSMINREC: Place degree-2 vertices between the degree-1 arguments to incur $\\frac{k \\cdot (k-1)}{2}$ total edge crossings. Since any ordering of the degree-2 arguments results in the same number of crossings, we can sort the degree-2 arguments depending on whether the incident red edges originates from u or v. We place arguments with red edges coming from u above those with red edges from v to satisfy the REC (see Figure 2).\nTheorem 1 may seem to suggest that standard methods for crossing minimization can be used to solve AFCROSSMINREC. However, we can also prove that for some instances the optimal solutions to AFCROSSMINREC and AFCROSSMIN do not coincide (see Fig. 3). We therefore need new methods to solve AFCROSSMINREC.\nTheorem 2. There exists an AF F = (A, R) with extension E, with |E| = 3, for which solving AFCROSSMINREC results in more edge crossings than solving AFCROSSMIN.\nProof. Consider an arbitrary AF F = (A, R) with a stable extension E of size three. Let u, v, w \u2208 E \u2286 A be the arguments in the extension, and let A \\ E contain only degree-1 and degree-2 arguments. See Figure 3 (left) for an example the drawing constructed in the following paragraphs.\nWithout loss of generality that u, v and w are drawn in this order from top to bottom in the IN-layer of the layered AF drawing of F. Since E is a stable extension, all arguments in A\\E will be drawn in the OUT-layer. Drawing all degree-1 arguments adjacent to u at the top of the OUT-layer can prevent them from incurring any crossings, and symmetrically, all degree-1 neighbors of w can be drawn at the bottom of the OUT-layer. The degree-1 neighbors of v will be drawn between the other degree-1 arguments, so that the degree-1 arguments do not incur any pairwise crossings. Next we consider the degree-2 arguments adjacent to v. By placing the degree-2 arguments adjacent to u and v between their respective degree-1 neighbors, we prevent any crossings with the edges incident with the degree-1 neighbors. We can do a symmetric construction for v and w, Let there be ku\u03bd degree-2 arguments adjacent to u and v and kw\u03c5 degree-2 arguments adjacent to v and w. The construction so far then incurs $\\frac{k_{uv} \\cdot (k_{uv}-1)}{2} + \\frac{k_{w\u03c5} \\cdot (k_{w\u03c5}-1)}{2}$ crossings.\nThe only arguments left are the degree-2 arguments incident with u and w. Assume there is only one such argument a \u2208 A. To prevent crossings with the degree-1 neighbors of u and w, we place a between these degree-1 neighbors in the ordering of the OUT-layer.\nNow observe that all edges incident with v are crossed by at least one of the two edges incident with a: All edges incident with v to arguments above a cross (u, a) (or (a, u)), and all edges incident with v to arguments below a cross (w, a) (or (a, w)). Furthermore, if a is placed above a neighbor of both u and v, then (w, a) (or (a, w)) also crosses the edge incident with u, and symmetrically when a is placed below a neighbor of both v and w. Hence, ideally a is placed between the other sets of degree-2 arguments, such that the edges incident with a incurs exactly one crossing with each edge incident with v. Let E\u03c5 be the edges incident with v, then solving AFCROSSMIN can result in at most $\\frac{k_{uv} \\cdot (k_{uv}-1)}{2} + \\frac{k_{w\u03c5} \\cdot (k_{w\u03c5}-1)}{2} + |E\u03c5|$ crossings.\nTo complete the proof, observe that the direction of the edges can be such that, for a degree-2 neighbor incident with v the only incoming edge originates at v. Thus, this edge will be chosen as a red edge. Assume without loss of generality that this is true for a neighbor of u and v. Now the only incoming edge of a can also originate from u. To satisfy the REC, a must be placed above the previously considered degree-2 neighbor of u and v (see Figure 3 (right)). As explained in the previous this results in at least one additional crossing, compared to a placement of a between the other sets of degree-2 neighbors. In this case, solving AFCROSSMINREC results in at least $\\frac{k_{uv} \\cdot (k_{uv}-1)}{2} + \\frac{k_{w\u03c5} \\cdot (k_{w\u03c5}-1)}{2} + |E\u03c5| + 1$ crossings."}, {"title": "4 Algorithms", "content": "In this section we introduce two methods to solve AFCROSSMINREC: An ILP-based exact approach, and a heuristic pipeline; both are justified for an NP-hard problem.\nInteger linear programming. We have adapted an ILP for crossing minimization in multi-layer graph drawings (J\u00fcnger et al. 1997). We use Boolean variables for each pair of arguments in a layer, to model their relative order in the permutation. Using so-called transitivity constraints we ensure that these variables produce a valid total order. Furthermore, we partition the edges into four sets E1,..., E4 of edges between IN and OUT, within OUT, between OUT and UNDEC, and within UNDEC, respectively. We consider crossings only between edges within one such set, and employ Boolean crossing variables $C_{ijkl}$ for every pair of edges (i, j), (k, l) within a set En. These variables are set via constraints which differ between intra-layer and proper edge crossings. Our objective function multiplies the crossing variables with constants wijk as crossing weights.\n$\\text{minimize }\\sum_{n=1}^{4} \\sum_{(i,j),(k,l) \\in E_n} W_{ijkl} C_{ijkl}$\nBy default this weight is set to 1, but for n = 1 we set the weight to the total number of possible crossings in E2, E3, E4 to strictly prioritize crossing minimization in E1 according to condition II in the previous section.\nRed edges are selected via boolean variables $r_{ij}$ for each edge (i, j) from IN to OUT. Only one $r_{ij}$ can be set for each j in OUT, and dedicated constraints forbid crossings.\nThe full ILP is described in Appendix A.\nModern ILP solvers (e.g. Gurobi) may take over 30 minutes to find an optimal solution using the described ILP (see Section 5). Since we intend for our layered AF drawings to be used in interactive settings, we also introduce a faster (albeit often suboptimal) heuristic alternative.\nHeuristic pipeline. Our heuristic pipeline for solving AFCROSSMINREC consists of three main components:\n\u2022 Selecting red edges.\n\u2022 Iteratively applying (variants of) the barycenter method (see below) to enforce the REC and minimize crossings.\n\u2022 Employing a local search to improve red-edge selection.\nWhen selecting edges to be highlighted between the IN- and OUT-layer, we employ two strategies (A and B). Strategy A greedily selects as many edges originating from the same argument in IN as possible, ensuring that only few arguments in IN are incident with red edges. Strategy B tries to disperse the highlighted edges over as many arguments in IN as possible, by iteratively selecting (and removing) maximum matchings of edges from IN to OUT.\nThe (default) barycenter method reorders one layer, relative to a static adjacent layer, by placing vertices in the barycenter of its neighbors (Sugiyama, Tagawa, and Toda 1981). We use this method to ensure the solution adheres to the REC and secondarily to minimize crossings. We use variants of the barycenter method in four ways: First, we reorder OUT, such that arguments in OUT with red edges originating from the same IN-argument become consecutive. Second, we reorder each subset of OUT with red edges from the same IN-argument, minimizing crossings. Third, we reorder IN-arguments incident with red edges, to remove red-edge crossings. Fourth, we reorder all of IN to minimize overall crossings, while preventing new red-edge crossings.\nThe local search considers for each argument in OUT all its incoming edges from IN and tries to replace the selected red edge, by one of the incoming edges that was not selected. Then the sequence of barycenter methods is run, and the result is compared to the drawing before the red-edge swap. If the number of crossings is reduced, the new drawing is maintained, otherwise we revert to the pre-swap drawing.\nOur heuristic pipeline now works as follows. We first select a set of red edges (via strategy A or B). Then we apply the sequence of barycenter methods as described. Next, we perform the local search, and finally, we reorder UNDEC using the barycenter method (if it is non-empty)."}, {"title": "5 Evaluation", "content": "We have implemented our AF layout algorithms into an interactive prototype. Using this implementation, we quantitatively evaluate our algorithms, showcasing to what extent the exact ILP approach is scalable, and how well the heuristic performs in terms of minimizing crossings. For that, we measure the run time of our algorithms, as well as the number of crossings they achieve on a large set of AFs. Before elaborating on these results, we explain our experimental setup and the data used in our experiments.\nExperimental setup. We have implemented our heuristics in Javascript V8 (12.4.254.15) and run in Chrome (120.0.6099.217). The ILP model was built in Python 3.8.3 using gurobipy 10.0.3. We ran our evaluation on a machine with an Intel(R) Core(TM) i7-9700K CPU (3.60 GHz, 8 physical cores and 8 logical processors), and 16GB RAM.\nFor our heuristic pipeline, we observe that red-edge-selection strategy A often slightly outperforms strategy B in crossing minimization. Still, the choice of strategy does not heavily influence the end result, as the local search may later adapt the red edges. Due to space constraints, we evaluate only the variant of our pipeline employing strategy A.\nData. We used standard AF benchmarks from the ICCMA competition (J\u00e4rvisalo, Lehtonen, and Niskanen 2023) with light adaptations: To create a data set with a variety of characteristics (more/fewer arguments in IN/OUT/UNDEC, higher/lower density of attacks between or within certain layers) we removed vertices/edges uniformly at random from larger instances until the desired thresholds for number of vertices and/or edges were achieved. This resulted in 460 2-layer AF drawings and 86 3-layer AF drawings. The 2-layer instances vary from a minimum of 15 to a maximum of 940 total arguments and attacks. The 3-layer instances range from 27 to 1,374 total arguments and attacks.\nMeasurements. Table 1 shows the run times measured in our experiments, and Fig. 4 shows the relation between the instance size and the ratio between the number of crossings"}, {"title": "6 Conclusion", "content": "We proposed novel methods for the visualization of AFs. We employ techniques from graph drawing to optimize the visual clarity and support the user to explore and understand the structure of an extension. Future work will include user studies in order to understand to which extent our approach increases the understanding of argumentation semantics."}]}