{"title": "Machine Learning for Equitable Load Shedding: Real-time Solution via Learning Binding Constraints", "authors": ["Yuqi Zhou", "Joseph Severino", "Sanjana Vijayshankar", "Juliette Ugirumurera", "Jibo Sanyal"], "abstract": "Timely and effective load shedding in power systems is critical for maintaining supply-demand balance and preventing cascading blackouts. To eliminate load shedding bias against specific regions in the system, optimization-based methods are uniquely positioned to help balance between economical and equity considerations. However, the resulting optimization problem involves complex constraints, which can be time-consuming to solve and thus cannot meet the real-time requirements of load shedding. To tackle this challenge, in this paper we present an efficient machine learning algorithm to enable millisecond-level computation for the optimization-based load shedding problem. Numerical studies on both a 3-bus toy example and a realistic RTS-GMLC system have demonstrated the validity and efficiency of the proposed algorithm for delivering equitable and real-time load shedding decisions.", "sections": [{"title": "I. INTRODUCTION", "content": "Quick restoration of power balance during emergency events is vital for ensuring stable system operations and preventing system-wide cascading failures. In practice, load shedding serves as a common emergency response employed by system operators to maintain grid stability by selectively shutting off non-critical loads. During severe contingencies such as extreme weather events, timely and effective load shedding actions are critical to prevent grid collapse. However, the execution of load shedding would inevitably cause inconvenience for customers, and even raise safety and health concerns. Therefore, it is important to develop an equitable load shedding decision-making model to eliminate bias among different communities, while still meeting the time-sensitive requirement of such operations.\nTo account for grid-wide impact and pursue most economical decisions, optimization-based load shedding schemes have become popular. These problems are typically formulated to target either network operational limits (e.g., [1], [2]) or system power balance (e.g., [3], [4]). More recently, equity and fairness concerns have been investigated for inclusion in the load shedding decision-making framework. For example, the vulnerability of end users has been considered in [5] to prevent biased load shedding actions towards specific communities. Similarly, [6] presents methods to integrate fairness into the minimum load shedding problem, realized using second-order cone constraints. In addition, the equity and fairness of load shedding under a rolling-horizon setup have been also studied in [7], [8]. However, the majority of these works rely on relaxation techniques in the optimization formulation, but still cannot deliver the real-time computation necessary to meet the extremely time-critical requirements of load shedding.\nIn this paper, we aim to develop an efficient machine learning algorithm to enable real-time (in milliseconds) computation of the equitable load shedding decisions. To this end, we first formulate an optimization-based load shedding problem. To ensure fairness in load shedding actions, equity constraints are enforced to discourage disproportionate load shedding and eliminate bias against various features associated with each node or region. After that, we propose utilizing machine learning algorithms to accurately determine the binding or non-binding status of each inequality constraint based on different inputs. Once the binding constraints are identified, the original problem can be simplified to an equality-constrained optimization. By analyzing the optimality conditions, the optimal solutions to the original problem can be obtained by simply solving a set of linear equations. Instead of incorporating all the optimization constraints, the learning algorithm allows us to identify only the critical constraints in advance to the actual computation. These binding patterns can be then effectively used to establish a linear system, to facilitate the real-time computation of load shedding decisions.\nThis paper is organized as follows. Section II introduces the optimization formulation of the load shedding problem. Section III focuses on the optimality analysis as well as the machine learning algorithm. Section IV uses both a small system and a RTS-GMLC system to demonstrate the validity and computational efficiency of the proposed algorithm. Lastly, Section V concludes the paper."}, {"title": "II. EQUITABLE LOAD SHEDDING PROBLEM", "content": "Consider a transmission system with a total of N buses collected in the set $\\mathcal{N} := \\{1,...,N\\}$ and L lines in the set $\\mathcal{L} := \\{l = (i, j)\\} \\subset \\mathcal{N} \\times \\mathcal{N}$. For each bus i, let $\\theta_i$ denote its phase angle and collect all the angles in $\\theta \\in \\mathbb{R}^N$. Similarly, we use vectors $g \\in \\mathbb{R}^N$, $d \\in \\mathbb{R}^N$ to denote generation and load at all buses. Under DC power flow model, the line flows $\\{f_{ij}\\}$, represented by the vector $f \\in \\mathbb{R}^L$, are given as follows:\n\n$f = K\\Theta$ (1)\n\nwhere the matrix $K \\in \\mathbb{R}^{L \\times N}$ serves to map the phase angles of the buses to the line flows. The row of K associated with line (i, j) can be given by $b_{ij}(e_i - e_j)^T$, where $b_{ij}$ represents the inverse of line reactance. In addition, the following equation holds in accordance with the nodal power balance:\n\n$p = Af$ (2)\n\nin which p is the vector of net injection, and $A \\in \\mathbb{Z}^{N \\times L}$ is the incidence matrix for the underlying graph $(\\mathcal{N}, \\mathcal{L})$.\nDuring power system operations, load shedding is required occasionally to balance supply and demand, preventing system collapse and potential cascading failures. Optimization-based load shedding schemes can help accurately determine the most cost-effective solutions, but the corresponding decisions may exhibit biases across different locations. Such biases are even more likely to occur during emergency operations or in situations where load shedding is required to relieve local congestion. Therefore, it is crucial to account for various features (e.g., age, income, housing type, access to resources, etc) associated with each area when designing the load shedding algorithm to mitigate bias. Consider a collection of normalized vectors $v^k$ ($k = 1,\\dots, K$), each representing a unique feature across all nodes. Our goal is to determine the load shedding percentage $s_i \\in [0,1]$ for each node $i \\in \\mathcal{N}$ to promote equity in decision-making. Hence, the equitable load shedding problem can be formulated as follows:\n\n$\\begin{aligned}\n\\min_{0,g,f,s} & \\sum_{i \\in \\mathcal{N}} (a_i g_i^2 + b_i g_i + c_i) + \\lambda \\sum_{i \\in \\mathcal{N}} D_{ien} s_i d_i &  \\tag{3a} \\\\\ns.t. & f_l = b_{ij} (\\theta_i - \\theta_j), \\forall l = (i, j)  &  \\tag{3b} \\\\\n& \\sum_{l: i \\in N_l} f_l = g_i - (1 - s_i) d_i, \\forall i & \\tag{3c} \\\\\n& \\theta^{min} \\leq \\theta_i \\leq \\theta^{max}, \\forall i &  \\tag{3d} \\\\\n& g^{min} \\leq g_i \\leq g^{max}, \\forall i &  \\tag{3e} \\\\\n& f^{min} \\leq f_l \\leq f^{max}, \\forall l &  \\tag{3f} \\\\\n& 0 \\leq s_i \\leq s^{max} \\leq 1, \\forall i &  \\tag{3g} \\\\\n& \\frac{1}{N} \\sum_{i=1}^N s_i \\leq \\gamma,  &  \\tag{3h} \\\\\n& |s_i - s_j| \\leq \\delta_{ij}, \\forall (i, j) & \\tag{3i} \\\\\n& s^T v^k \\leq \\epsilon, \\forall k = 1, 2, \\dots, K. & \\tag{3j} \\\\\n\\end{aligned}$\n\nwhich constitutes a quadratic program (QP) that can be efficiently solved using optimization solvers such as Gurobi, CPLEX, and MOSEK. The objective includes minimizing the total generation costs, which are represented by a quadratic function of g, in which $a_i$, $b_i$, $c_i$ denote the quadratic, linear, and constant coefficients. In addition, the objective includes the total load shedding $D_{ien} s_i d_i$, where $s_i$ specifies the load shedding percentage for each node i. A coefficient $\\lambda$ is used to regulate the weight of the load shedding term in the objective function. In particular, we set the parameter $\\lambda$ using a sufficiently large number, to ensure the minimization of total load shedding is prioritized over the consideration of generation costs.\nThe decision variables include phase angles $\\theta$, generation g, line flow f, and load shedding s. Equality constraints (3b) and (3c) correspond to DC power flow and nodal power balance, per (1) and (2). The operational limits for the decision variables are specified in constraints (3d) - (3g), respectively. Notably, the upper limit of load shedding percentage $s^{max}$ can be adjusted to less than 1 to accommodate non-flexible critical loads. Constraint (3h) is enforced to ensure none of the load shedding is disproportionately high across the system. The parameter $\\gamma$ is chosen within the interval of $(1, N]$, where a smaller $\\gamma$ value helps to reduce bias and promote fairness of load shedding among all loads. Additionally, constraint (3i) is introduced to limit the discrepancy in load shedding of any pair (i,j), with a smaller $\\delta$ generally promoting more fair decisions. To further mitigate biased decisions under normalized features $0 < v^k < 1$, the constraint (3j) is enforced. The inner product $s^T v^k$ is constrained within $\\epsilon$, to encourage the load shedding decisions to be independent of each unique feature. A small $\\epsilon$ value encourages the decision vector to be orthogonal to these features to enhance equity, while larger $\\epsilon$ values relax the constraint and allow for greater flexibility in load shedding decisions under these features.\n\nRemark 1 (Notation of index). With slight abuse of notation, the nodal index $i \\in \\mathcal{N}$ is also used for generation, load and load shedding in (3). In scenarios where not all nodes are equipped with generation or load, the sets can be altered to G and D, with moderate modifications needed for the notations and formulations in (3).\n\nRemark 2 (AC load shedding formulation). In this work, our primary focus is on exploring the learning approach to the load shedding problem, which involves solving it repetitively to collect enough data inputs/outputs. For simplicity, we adopt the DC power flow-based optimization formulation in (3). A nonlinear formulation based on the AC power flow model is also possible (see e.g., [1], [3], [9]).\n\nWhile the QP problem (3) can be solved effectively using state-of-the-art optimization solvers, we are interested in investigating the learning-to-optimize approach in this research. The reasons for it are threefold:\n*   The decision-making for load shedding during emergency operations is highly time-sensitive, and thus developing an efficient learning algorithm can facilitate online solutions for real-time emergency responses."}, {"title": "III. LEARNING FOR REAL-TIME LOAD SHEDDING", "content": "For simplicity in the math expressions, let us first collect all the decision variables of problem (3) in a vector x such that $x=[\\theta^T g^T f^T s^T]^T$. Hence, the load shedding problem can be cast as the following QP in generalized form:\n\n$\\begin{aligned}\n& \\underset{x}{min} & \\frac{1}{2} x^T P x + q^T x + r &  \\tag{4a} \\\\\ns.t. & Ax \\leq b &  \\tag{4b} \\\\\n& Gx = h &  \\tag{4c} \\\\\n\\end{aligned}$\n\nwhere P is a positive semidefinite matrix, q is a vector of linear coefficients, and r represents the constant term. The inequality (4b) match with (3d) - (3j), and the equality (4c) correspond to (3b) and (3c) in problem (3).\nSuppose a subset of inputs to the optimization problem consistently lead to the same binding (tight) constraints $Ax = b$, then the remaining non-binding constraints can be eliminated as they do not \"actively\" restrict the problem or affect the solution (see also [10], [11]). Hence, computing the optimal solution to the original problem (4) is also equivalent to solving the following equality constrained QP problem:\n\n$\\begin{aligned}\n(equivalent) & \\underset{x}{min} & \\frac{1}{2} x^T P x + q^T x + r &  \\tag{5a} \\\\\ns.t. & A_{\\tau(\\pi)} x = b_{\\tau(\\pi)} &  \\tag{5b} \\\\\n& Gx = h &  \\tag{5c} \\\\\n\\end{aligned}$\n\nHere, the binding constraints at optimality $\\tau(\\pi)$ is given as a function of input parameters $\\pi$. Machine learning methods can be leveraged to effectively learn the binding constraints using inputs $\\pi$. Once the binding constraints are determined, the Karush-Kuhn-Tucker (KKT) conditions for this equality constrained optimization problem can be given as:\n\n$\\begin{aligned}\nP x^* + q + A_{\\tau(\\pi)}^T v^* + G^* w^* &= 0 \\tag{6} \\\\\nA_{\\tau(\\pi)} x^* &= b_{\\tau(\\pi)} \\tag{7} \\\\\nG x^* &= h \\tag{8} \\\\\n\\end{aligned}$\n\nThe vectors $v^*$ and $w^*$ denote dual variables associated with constraints (5b) and (5c), respectively. Equivalently, these conditions can be written as a linear system:\n\n$\\begin{bmatrix}\nP & A_{\\tau(\\pi)}^T & G^T \\\\\nA_{\\tau(\\pi)} & 0 & 0 \\\\\nG & 0 & 0\n\\end{bmatrix} \\begin{bmatrix}x^* \\\\ v^* \\\\ w^*\\end{bmatrix} = \\begin{bmatrix}-q \\\\ b_{\\tau(\\pi)} \\\\ h\\end{bmatrix}$ (9)\n\nAs the KKT matrix on the left-hand-side of equation (9) is a square matrix, the solvability of (9) is primarily determined by whether the KKT matrix is singular or nonsingular.\n\nCorollary 1. Given that the original load shedding problem (4) has a unique optimal solution, the linear system (9) is solvable and the KKT matrix is nonsingular.\nOn the other hand, the nonsingularity of the KKT matrix guarantees its invertibility and the existence of unique optimal primal-dual solutions $\\{x^*, v^*, w^*\\}$. According to the equivalent conditions [12, Ch. 10.1] of nonsingularity of KKT matrix, it is nonsingular if the block matrices have no nontrivial common nullspace:\n\n$\\ker(P) \\cap \\ker\\begin{bmatrix} A_{\\tau(\\pi)} \\\\ G\\end{bmatrix} = \\{0\\}$ (10)\n\nRecall that P is a sparse matrix with $2a_i$ on the diagonals. Meanwhile, as long as the coefficient matrix of equality constraints (5b) and (5c) is full rank, the nullspace (or kernel) of it is the zero vector. Accordingly, the two block matrices in (10) share only the trivial nullspace $\\{0\\}$, and the KKT matrix is nonsingular. Although one can compute the solution to the linear system by directly applying the inverse of the KKT matrix to both sides of equation (9), this method may not be the most efficient. Because the KKT matrix is both sparse and symmetric, it fits well for direct solvers [13] that use matrix factorization techniques (e.g., LU decomposition). In addition, in cases where the system size is large, indirect methods [14] (e.g., MINRES, SYMMLQ) can be also employed to facilitate online computation for making real-time decisions.\nClearly, solving the linear system (9) is much more efficient than directly tackling the original QP problem (4). However, it necessitates accurately learning the binding constraints offline to facilitate online computation. To identify binding or non-binding constraints, it typically involves the use of binary outputs. Although various classification algorithms (e.g., decision tree, random forest, support vector machine) are available, we adopt a generalized neural network model as it has a better capability to learn nonlinear relationships [15] and offers higher flexibility in model configuration. While the inputs $\\pi$ could represent any parameters associated with inequality constraints in problem (3), our focus in this work is primarily on using load as inputs. The outputs $\\tau$ constitute a vector of binary numbers to indicate the binding status of each constraint, where 1 represents binding and 0 is for non-binding. In addition to verifying the optimal solutions and their corresponding inequality bounds, the optimal dual solutions can be also utilized to determine the binding status.\n\nProposition 1 (Binding status via dual solutions). For any inequality constraint in (4b), the complementary slackness condition [12, Ch. 5.5] states that:\n\n$\\mu_i(A_i x - b_i) = 0, \\forall i$ (11)\n\nHence, if a dual variable $\\mu_i = 0$, the related constraint is non-binding or does not affect the optimal objective. On the other hand, if $\\mu_i > 0$, the constraint is binding. To that end, the binding status of each inequality constraint can be determined:\n\n$\\tau_i =  \\begin{cases}\n1, & \\text{if } \\mu_i > 0 \\\\\n0, & \\text{if } \\mu_i = 0\n\\end{cases} = \\mathbb{1}_{\\{\\mu_i > 0\\}}$ (12)\n\nwhich is a simple, single-step transformation once the original optimization problem is solved.\nThe relationship between the input and output across M layers in the neural network can be represented by a set of equations:\n\n$y^m = \\sigma^m(W^m y^{m-1} + b^m), \\forall m = 1, ..., M$ (13)\n\nwhere the first layer is $y^0 = \\pi$ and the last layer is $y^M = \\tau$. In the m-th layer, the weight matrix and bias vector are denoted by $W^m$ and $b^m$, and $\\sigma^m$ represents the activation function (e.g., ReLU, Sigmoid). The binary cross-entropy is a widely adopted loss function for binary classification tasks:\n\n$\\mathcal{L} = - \\frac{1}{J} \\sum_{i=1}^J [y_i \\log(\\hat{y}_i) + (1 - y_i) \\log(1 - \\hat{y}_i)]$ (14)\n\nHere, J is the number of inequality constraints to learn, $y_i$ is the true label for the i-th constraint, and $\\hat{y}_i$ is the predicted probability that the constraint is binding. In scenarios where one class dominates the classification of binding and non-binding constraints, the loss function can be adjusted to focal loss [16] to address class imbalance issues.\nIt is important to realize that our analysis to this point assumes a known load vector. However, due to the uncertainty of load, actual decision-making may require consideration under a broader range of load configurations [17]. For reliable load shedding operations, it is generally safer to assume larger loads when making decisions. By and large, assuming smaller loads is more risky, as the resulting load shedding is often limited and may be insufficient to recover the power balance. Accordingly, utilizing risk measures like Value at Risk (VaR) and Conditional Value at Risk (CVaR) allows for flexible adjustment of load inputs to match different levels of risk. Assume that each load $d_i$ is a random variable with cumulative distribution function $F_{d_i}(z) = P\\{d_i \\leq z\\}$. The VaR of $d_i$ can be defined as:\n\n$VaR_{\\alpha}(d_i) = \\min\\{z | F_{d_i}(z) \\geq \\alpha\\}, \\forall i \\in \\mathcal{N}$ (15)\n\nwhere $\\alpha \\in (0,1)$ is the confidence level (e.g. $\\alpha = 0.95$). Another risk measure is CVaR, which is designed to calculate the expected loss in the tail of distribution beyond VaR:\n\n$CVaR_{\\alpha}(d_i) = E[d_i | d_i \\geq VaR_{\\alpha}(d_i)], \\forall i \\in \\mathcal{N}$ (16)\n\nIn many applications, CVaR [18] is preferred over VaR as it is a more coherent risk measure and does not encourage risk-taking that could be obscured by the measure itself. Additionally, CVaR is less dependent on the underlying distribution and offers a more reliable measure for skewed distributions.\n\nProposition 2 (Risk-averse load shedding). To transition from the original risk-neutral (e.g., using predicted load values) to the risk-averse load shedding, one can use the CVaR of the load distribution at each node:\n\n$\\hat{d_i} = CVaR_{\\alpha}(d_i), \\forall i \\in \\mathcal{N}$ (17)\n\nwhere $\\hat{d_i}$ denotes the risk-averse load value, and $\\alpha_i$ allows for flexible adjustment of risk levels associated with each load. Thus, the collection of loads:\n\n$\\hat{d} = \\{\\hat{d_1}, \\hat{d_2}, ..., \\hat{d_N}\\}$ (18)\n\ncan serve as the input to obtain $\\tau$ in (9). Suppose each load is constrained within $d_{min} \\leq d_i \\leq d_{max}, \\forall i \\in \\mathcal{N}$, then it is also possible to pursue robust solutions by using:\n\n$\\hat{d_r} = \\{d^{max}, d^{max}, ..., d^{max}\\}$ (19)\n\nto ensure robustness against the worst-case scenario."}, {"title": "IV. NUMERICAL SIMULATION", "content": "In this section, we present the numerical simulation results using a 3-bus toy example and a 73-bus RTS-GMLC system with realistic datasets. The equitable load shedding problem is implemented with MATPOWER, and solved using Gurobi solver. The machine learning algorithm is implemented in MATLAB with deep learning toolbox. The simulations are performed on a regular laptop with Intel\u00ae CPU @ 2.60 GHz and 16 GB of RAM.\n\nA. Illustrative Example with a 3-Bus System\nWe begin with a small 3-bus system to verify the optimality condition and demonstrate how to efficiently handle the optimization problem by solving simple linear equations. The 3-bus system has two generators and three loads. We use the quadratic cost function $c(g_1) = g_1^2 + 3g_1$ and $c(g_2) = 2g_2^2 + g_2$, for each generator. The generation limits, load values, and the load shedding limits are provided in Figure. 2. The test case is designed so that the total load exceeds the generation capacity, which necessitates the load shedding operations. Furthermore, we have simplified the problem by removing the transmission constraint between any pair of buses. To this end, we can formulate the load shedding problem as the following:\n\n$\\begin{aligned}\n\\min & (g_1^2 + 3g_1 + 2g_2^2 + g_2) + \\lambda (20 s_1 + 30 s_2 + 40 s_3) \\\\\ns.t. & 0 \\leq g_1 \\leq 30, 0 \\leq g_2 \\leq 50 \\\\\n& 0 \\leq s_1 \\leq 0.1, 0 \\leq s_2 \\leq 0.1, 0 \\leq s_3 \\leq 0.2 \\\\\n& s_i \\leq 0.5 (s_1 + s_2 + s_3), \\forall i = 1,2,3 \\\\\n& g_1 + g_2 = 20(1 - s_1) + 30(1 - s_2) + 40(1 - s_3)\n\\end{aligned}$\n\nwhere the constraints include limits for both generation and load shedding, and power balance. In addition, a straightforward equity constraint is enforced to ensure that the load shedding at each bus does not exceed 50% of the total load shedding values. By solving the above optimization problem and eliminating all non-binding constraints, we arrive at the following equivalent problem:\n\n$\\begin{aligned}\n\\min & (g_1^2 + 3g_1 + 2g_2^2 + g_2) + \\lambda (20 s_1 + 30 s_2 + 40 s_3) \\\\\ns.t. & g_1 = 30  (\\upsilon_1), \\quad g_2 = 50  (\\upsilon_2) \\\\\n& s_1 = 0.1  (\\upsilon_3), \\quad s_2 = 0.1  (\\upsilon_4) \\\\\n& g_1 + g_2 + 20 s_1 + 30 s_2 + 40 s_3 = 90  (w_1)\n\\end{aligned}$\n\nLet $\\upsilon_1$, $\\upsilon_2$, $\\upsilon_3$, $\\upsilon_4$, $w_1$ denote the dual variables of each equality constraint above. Accordingly, the KKT conditions can be equivalently expressed as the following linear system:\n\n$\\begin{bmatrix}2 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 1 \\\\ 0 & 4 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 20 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 30 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 40 \\\\ 1 & 1 & 20 & 30 & 40 & 0 & 0 & 0 & 0 & 0 \\\\ 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\end{bmatrix} \\begin{bmatrix}g_1 \\\\ g_2 \\\\ s_1 \\\\ s_2 \\\\ s_3 \\\\ \\upsilon_1 \\\\ \\upsilon_2 \\\\ \\upsilon_3 \\\\ \\upsilon_4 \\\\ w_1\\end{bmatrix} = \\begin{bmatrix}-3 \\\\ -1 \\\\ -20 \\lambda \\\\ -30 \\lambda \\\\ -40 \\lambda \\\\ 90 \\\\ 30 \\\\ 50 \\\\ 0.1 \\\\ 0.1\\end{bmatrix}$\n\nIn this example, we can set the parameter to be $\\lambda = 1000$. By solving the optimization problem and the linear system, we arrive at the exact same primal solutions $g_1 = 30$, $g_2 = 50$, $s_1 = 0.1$, $s_2 = 0.1$, $s_3 = 0.1$ and the dual solutions $\\upsilon_1 = 937$, $\\upsilon_2 = 799$, $\\upsilon_3 = 0$, $\\upsilon_4 = 0$, $w_1 = -1000$.\nSuppose the machine learning algorithm identifies that every load configuration $\\{d_1, d_2, d_3\\}$ in a set S results in identical binding constraints for the problem above, then the optimal solutions can be directly obtained by solving the following:\n\n$\\begin{bmatrix}2 & 0 & 0 & 0 & 1 \\\\ 0 & 4 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 & 0 \\\\ 1 & 1 & 0 & 0 & 0\\end{bmatrix} \\begin{bmatrix}g_1 \\\\ g_2 \\\\ s_1 \\\\ s_2 \\\\ w_1\\end{bmatrix} = \\begin{bmatrix}-3 \\\\ -1 \\\\ -d_1 \\lambda \\\\ -d_2 \\lambda \\\\ 0\\end{bmatrix}$\n\nIn this toy example, we mainly demonstrate how to arrive at the equivalent linear system using KKT conditions once the binding constraints are determined. In addition, numerical results have confirmed the exactness of solutions from the linear system, as compared to the original optimization problem.\n\nB. RTS-GMLC System\nWe next perform numerical simulations on a more realistic RTS-GMLC system [19]. This synthetic system consists of 73 buses and 120 transmission lines, and covers an area of roughly 250 \u00d7 250 miles. It models an area in the southwestern United States, roughly extending from Los Angeles to Las Vegas in California. Since the system includes detailed geographic information, we utilize these locations to extract features associated with each node using the communities LEAP [20] data. Each bus in the system is assigned with a load, and we extract and normalize 5 nodal features for numerical validation, which are disability, language, minority status, transportation, and housing type, respectively. For the load shedding problem, we use a quadratic generation cost function and adopt a consistent parameter $\\lambda = 10^4$ throughout the simulations. A load shedding upper limit $s^{max} = 0.40$ is set for each bus. Note that for the orthogonality based equity constraint, the load shedding decision may not exhibit a direct correlation with the associated threshold, especially in high dimensional space under multiple features. Hence, during the simulation we simply set a uniform orthogonality threshold $\\epsilon = 0.5$ for each feature to prevent overly biased decisions. To start with, we investigate the load shedding solutions by varying $\\delta$ in (3i). The load shedding decisions for all buses under different $\\delta$ values are given in Fig. 4. As this parameter limits the load shedding variations among buses, a smaller $\\delta$ promotes more balanced and impartial decisions. It is important to note that pursuing a completely unbiased decision (e.g., $\\delta = 0$) may not always be the best option, as it often leads to uneconomical decisions and may face infeasibility due to the existence of other equity constraints.\nTo validate the learning performance and online computation efficiency, we vary the load configurations and solve the optimization repeatedly to collect learning samples. Specifically, we incrementally increase (by 5 MW) the load at buses 5 and 27 to generate 50 \u00d7 50 = 2500 inputs and solve each for learning outputs. Analysis of the learning samples reveals 7"}, {"title": "V. CONCLUSIONS AND FUTURE WORK", "content": "In this paper, we present an efficient machine learning algorithm for real-time equitable load shedding problem. The load shedding is formulated as an optimization problem, which aims to eliminate bias among different loads. By learning the binding constraints, the optimization problem can be simplified to solving a set of linear equations. As a result, the load shedding problem can be solved at the millisecond level, making it suitable for real-time operations. Future work includes investigation of efficient learning algorithms to support equitable decision-making in networked distribution systems."}]}