{"title": "WebPilot: A Versatile and Autonomous Multi-Agent System for Web Task Execution with Strategic Exploration", "authors": ["Yao Zhang", "Zhen Han", "Zijian Ma", "Yu Wu", "Yunpu Ma", "Volker Tresp"], "abstract": "LLM-based autonomous agents often fail to execute complex web tasks that require dynamic interaction, largely due to the inherent uncertainty and complexity of these environments. Existing LLM-based web agents typically rely on rigid, expert-designed policies specific to certain states and actions, lacking the flexibility and generalizability needed to adapt to unseen tasks. In contrast, humans excel by exploring unknowns, continuously adapting strategies based on new observations, and resolving ambiguities through exploration. To emulate human-like adaptability, web agents need strategic exploration and complex decision-making. Monte Carlo Tree Search (MCTS) is well-suited for this, but classical MCTS struggles with vast action spaces, unpredictable state transitions, and incomplete information in web tasks. In light of this, we develop WebPilot, a multi-agent system with a dual optimization strategy that improves MCTS to better handle complex web environments. Specifically, the Global Optimization phase involves generating a high-level plan by breaking down tasks into manageable subtasks, continuously refining this plan through reflective analysis of new observations and previous subtask attempts, thereby focusing the search process and mitigating challenges posed by vast action spaces in classical MCTS. Subsequently, the Local Optimization phase executes each subtask using a tailored MCTS designed for complex environments, effectively addressing uncertainties and managing incomplete information by iteratively refining decisions based on new observations. Experimental results on WebArena and MiniWoB++ demonstrate the effectiveness of WebPilot. Notably, on WebArena, WebPilot achieves SOTA performance with GPT-4, achieving a 93% relative increase in success rate over the concurrent tree search-based method. WebPilot marks a significant advancement in general autonomous agent capabilities, paving the way for more advanced and reliable decision-making in practical environments. Our code is publicly released at github.com/WebPilot.", "sections": [{"title": "1 Introduction", "content": "The advanced reasoning capabilities of Large Language Models (LLMs) (Yang et al. 2023; Achiam et al. 2023; Team et al. 2023; Anthropic 2024) have significantly expanded the potential for developing autonomous web agents capable of navigating and interacting within complex, dynamic environments (Lai et al. 2024; Deng et al. 2024). To fully harness this potential, these agents must excel in tasks such as complex information retrieval, long-horizon task execution, and the integration of diverse information sources (Wang et al. 2024; Zhou et al. 2023b).\nHowever, despite the advanced reasoning capabilities of LLMs, current LLM-based web agents (Sodhi et al. 2024; Ma et al. 2023) often fall short in executing complex web tasks that require dynamic interaction. This limitation arises primarily from their heavy reliance on rigid, expert-designed policies tailored to specific states and actions. While these policies are meticulously crafted to address well-defined scenarios, they inherently lack the flexibility and generalizability needed to adapt to the uncertain and variable nature of real-world web environments, as well as to unseen tasks.\nIn contrast, humans excel at handling complex web tasks due to their cognitive flexibility (Daw, Niv, and Dayan 2005), which allows them to explore unknowns, adjust plans dynamically based on new observations, and resolve ambiguities through trial and error. This adaptability enables humans to navigate uncertain environments, make decisions with incomplete information, and modify strategies in real time. Monte Carlo Tree Search (MCTS) mirrors this cognitive process, making it particularly effective in emulating human web navigation strategies. MCTS facilitates the exploration of unknowns by expanding nodes during the tree search, helping web agents discover effective actions. It adjusts tactical-level strategies during the search process, refining action generation at each node based on the feedback from the expansion, much like how humans iteratively adjust their actions in response to new observations. When encountering dead ends or unclear paths-nodes with low potential or uncertain outcomes-MCTS reassesses and explores alternative branches, effectively addressing the limitations of LLMs in handling unfamiliar web environments.\nDespite its potential, classical MCTS (Browne et al. 2012) struggles in complex web environments due to vast action spaces, unpredictable state transitions, and incomplete information. While recent methods like LLM-MCTS (Zhao, Lee, and Hsu 2024) and LATS (Zhou et al. 2023a) integrate LLMs for heuristic guidance, they are limited to tasks with smaller action spaces and lower complexity, reducing their effectiveness in real-world scenarios. Similarly, RAP (Hao"}, {"title": "2 Related Work", "content": "In this section, we provide a comparative analysis of LLM-based web agents and MCTS-based agents, with a detailed comparison presented in Tab. 1. For a more in-depth analysis of these agents, please refer to the Appendix.\n2.1 LLM-Based Autonomous Web Agents\nRecent advancements in LLMs have paved the way for the development of web agents that leverage the reasoning abilities of LLMs to interact with web environments. One line of LLM-based web agent (Kim, Baldi, and McAleer 2024; Sun et al. 2024; Prasad et al. 2023; Fu et al. 2024; Ma et al. 2023; Zheng et al. 2023; Tao et al. 2023) predominantly relies on environment-specific state-action pairs embedded within demonstrations to respond to specific observations. For instance, SteP (Sodhi et al. 2024), currently the SOTA on WebArena(Zhou et al. 2023b), utilizes rigid, expert-designed policies tailored to particular states and actions. However, these agents often struggle with exploring and adapting to realistic, unseen web tasks. Another line of web agents (Li et al. 2023; Zhou et al. 2023a; Pan et al. 2024; Koh et al. 2024) adopts a strategy of freely exploring and discovering unknown environments. Despite efforts like Auto Eval & Refine (Pan et al. 2024), which incorporates an evaluator into Reflexion (Shinn et al. 2024), and LM-Tree Search (Koh et al. 2024), which employs a search-based method in realistic environments, these agents still encounter challenges with complex tasks, leaving room for significant advancements. WebPilot, in contrast, is a multi-agent system employing a dual optimization strategy, excelling in exploring unseen tasks and dynamically adjusting strategies and actions based on new observations. This capability enables WebPilot to demonstrate superior adaptability in more complex environments.\n2.2 LLM-MCTS Applications\nMCTS, originally developed for the game of Go (Coulom 2006; Browne et al. 2012), is renowned for its effectiveness in handling exploration problems. Enhanced by the Upper Confidence bounds applied to Trees (UCT) method (Kocsis and Szepesv\u00e1ri 2006), MCTS has found extensive use in fields such as robotics(Zhao, Lee, and Hsu 2024), strategy games (Jang et al. 2021), and autonomous vehicles (Lenz, Kessler, and Knoll 2016). Recently, researchers have integrated LLMs with MCTS to tackle various NLP tasks, including QA (Hong et al. 2023; Xie et al. 2024; Chi, Yang, and Klein 2024), prompt refinement techniques (Wang et al. 2023), and complex mathematical reasoning problems (Tian et al. 2024; Zhang et al. 2024). Building on this integration, LLM-based agents have also incorporated MCTS to enhance their exploratory and decision-making capabilities. For instance, LATS (Zhou et al. 2023a) applies MCTS to simple web tasks. However, traditional MCTS-based methods often encounter difficulties in scenarios with vast action spaces, unpredictable state transitions, and incomplete information in web tasks. WebPilot addresses these challenges by utilizing a tailored MCTS designed specifically for complex environments, effectively navigating and optimizing decision-making processes even in highly uncertain situations."}, {"title": "3 Methodology", "content": "In \u00a73.1, we formally describe the web exploration task, highlighting the challenges posed by the uncertain nature and dynamic of these environments. To overcome these challenges, WebPilot employs a dual optimization strategy, i.e., Global Optimization and Local Optimization. During the Global Optimization phase, as detailed in \u00a73.2, WebPilot generates high-level plans and continuously refines these plans through reflective analysis. This is followed by the Local Optimization phase, described in \u00a73.3, where WebPilot engages in low-level strategic exploration. The entire process is outlined in Algo. 1, with additional details provided in the Appendix.\n3.1 Promblem Formulation\nOur objective is to enable the LLM-based web agent to effectively solve a task T in a web environment \\u00ad by emulating human web navigation strategies. Web environments are inherently partially observable, which limits the information available to agents and complicates problem-solving. This partial observability occurs because web content can change dynamically, meaning the agent cannot fully anticipate or know the state of certain elements such as updated content or availability-until it interacts with them. Consequently, agents must often make decisions under conditions of uncertainty and incomplete information. Following WebArena (Zhou et al. 2023b), we use an accessibility tree, referred to as actree, to represent the observation, which captures the structure and interactive elements of the web page. However, due to the lack of specific web domain knowledge, LLMs often struggle to recognize or utilize the functionalities of various web elements. As a result, the agent must actively explore the environment to gather critical information about both the task and the functionality of the web elements, making informed decisions despite these uncertainties and incomplete information.\nSpecifically, this process can be modeled as a Partially Observable Markov Decision Process (POMDP). The environment \\u00ad is defined by a state space S, an action space A, and an observation space O. The transition function F:S\u00d7A \u2192 S dictates how states evolve based on actions taken, typically in a deterministic manner governed by the environment. Task execution requires the agent to make decisions based on partial observations of at each time step t. Each action at results in a new state st+1 and an updated observation Ot+1. The evaluation function eval(a, s), defined by the environment, assesses the success of task execution. Here, a = {a1,...,an} represents the sequence of executed actions, and s = {s1,..., sn} denotes the corresponding sequence of intermediate states. This function evaluates whether the state transitions satisfy the criteria established by the task T.\n3.2 Global Optimization: Adaptive Strategy Refinement through Reflective Adjustment\nThe Global Optimization phase emulates human cognition by leveraging prior knowledge to generate an initial plan for unfamiliar tasks. However, due to the lack of specific"}, {"title": "3.3 Local Optimization: MCTS-Enhanced Decision Strategies", "content": "The Local Optimization phase in WebPilot is inspired by the human-like adaptability required to navigate and solve complex web tasks, effectively captured by MCTS. For each subtask Ti and its subtask-specific goals Objective, which define the expected outcomes or milestones to be achieved within that subtask, Explorer, Verifier, and Appraiser work together to complete the task. Explorer identifies optimal actions, Verifier ensures these actions are valid and non-redundant, and Appraiser evaluates both the immediate effectiveness of an action and its potential to achieve the intended goal, offering continuous feedback for a more nuanced and accurate assessment. Throughout this process, Controller assesses whether the subtask is completed and determines if further actions are needed, ensuring alignment with the overall task.\nThe Local Optimization phase of WebPilot, akin to classical MCTS, follows four key stages, as shown in Fig. 2: 1) Goal-Oriented Selection leverages the initial intuitions of LLMs to steer WebPilot toward the most promising paths for subtask completion, emulating how humans use prior knowledge to navigate tasks. 2) Reflection-Enhanced Node Expansion integrates feedback after each node expansion, enabling WebPilot to reassess and refine its strategy dynamically, much like human reflection informs decision-making. 3) Dynamic Evaluation and Simulation allows WebPilot to assess current states by analyzing executed actions and simulating potential outcomes, mirroring human foresight in evaluating consequences. 4) Maximal Value Backpropagation prioritizes long-term potential by continuously updating value estimates based on the maximum future rewards. Through this comprehensive Local Optimization phase, WebPilot effectively balances exploration and exploitation, leading to more efficient and informed decision-making in complex tasks.\nGoal-Oriented Selection (GOS) directs Explorer toward high-value nodes by leveraging the initial intuitions derived from the LLM. Although these intuitions are not specifically tailored to the environment, they provide valuable insights that effectively narrow the action space. These insights arise from the extensive pre-existing knowledge base of LLM, enabling it to make informed estimates about which actions are likely to be more promising, even without explicit training in the specific web domain. GOS employs a modified version of the PUCT selection method, inspired by AlphaGo (Silver et al. 2017):\n\\(U(s, a) = W_{puct} \\frac{\\sqrt{\\sum_{b} N(s,b)}}{1+ N(s,a)},\\)\nwhere \\(W_{puct}\\) represents the exploration bias factor balancing the exploration and exploitation, and N(s, a) represents the total count of conducting the action a in state s.\nUnlike classical MCTS, as deployed in RAP (Hao et al. 2023a), which prioritizes unexplored nodes due to the infinite potential assigned by traditional UCT (Kocsis and Szepesv\u00e1ri 2006), GOS refines this approach to better manage vast action spaces. The initial insights of LLM often assign high value to the first visited node based on its broad knowledge base. In contrast to UCT, which would mandate exploring unvisited nodes even when the current node is nearly optimal, GOS modifies the selection formula by adding a +1 term in the denominator. This adjustment enables GOS to direct the Explorer toward the most promising paths, minimizing unnecessary exploration and efficiently navigating complex environments, similar to how humans use prior knowledge in decision-making.\nReflection-Enhanced Node Expansion (RENE) navigates the vast action spaces of the web by integrating reflective feedback, i.e., Strategic Reflection and Tactical Reflection, at each step, enabling WebPilot to continuously refine its strategy, enhancing decision-making through focused exploration and exploitation.\nSpecifically, to explore the state space efficiently, WebPilot departs from traditional MCTS by generating and expanding only one action per step. Explorer generates actions"}, {"title": "4 Experiment", "content": "4.1 Experimental Setup\nDatasets and Metrics To demonstrate the broad applicability of WebPilot, we evaluate our method on two benchmarks: WebArena (Zhou et al. 2023b) and MiniWoB++ (Liu et al. 2018). WebArena, comprising 812 human-annotated web tasks, is designed to assess the ability of agents to perform actions on complex, realistic websites. These tasks are diverse, long-horizon, and closely mirror the types of activities humans routinely engage in online. Notably, WebPilot operates as a text-only agent, leveraging the accessibility tree, i.e., actree, of the webpage without relying on visual observations\u2014a limitation we aim to address in future work. WebArena is chosen as the primary benchmark due to its close simulation of real-world web environments. Additionally, we validate WebPilot on MiniWoB++, an environment offering a range of simpler yet varied web tasks, from basic interactions like button-clicking to more complex activities such as form-filling, which require reasoning capabilities. For evaluation, we use the Success Rate (SR) metric as defined in (Zhou et al. 2023b) for WebArena, and follow (Li et al. 2023) for MiniWoB++, focusing on 43 tasks that can be completed solely through text representation.\nBaseline Models We compare WebPilot against several baseline models, including the current SOTA SteP (Sodhi"}, {"title": "4.2 Results on WebArena", "content": "As shown in Tab. 2, WebPilot consistently outperforms existing methods. In WebArena, WebPilot with GPT-40 demonstrates a remarkable 93% relative increase in SR compared to concurrent tree search-based methods LM-TS, achieving a 37.2% SR. This performance surpasses the current SOTA method, SteP (Sodhi et al. 2024), which relies on rigid, expert-designed policies tailored to specific states and actions. This substantial improvement highlights the effectiveness of the adaptable and dynamic approach of WebPilot in navigating complex web environments."}, {"title": "Greater Flexibility and Adaptability in WebPilot", "content": "Greater Flexibility and Adaptability in WebPilot Compared with SteP, WebPilot demonstrates a significant 7.7% improvement in the Gitlab domain. This advantage arises from the strategic use of high-level demonstrations, which equip the agent with general web domain knowledge rather than confining it to rigid, expert-designed policies specific to certain states and actions, as SteP does. The Gitlab domain, characterized by its diverse and complex tasks, as well as dynamic, multi-step scenarios, highlights the ability of WebPilot to generalize knowledge and adapt strategies in real time. This broader understanding allows WebPilot to more effectively infer and address unseen tasks. Additionally, the exploratory approach of WebPilot, which mirrors human adaptability, facilitates dynamic navigation and problem-solving in unfamiliar scenarios, further enhancing its overall performance in uncertain web environments."}, {"title": "Superior Task Performance in WebPilot Through Strategic Decomposition and Reflective Feedback", "content": "Superior Task Performance in WebPilot Through Strategic Decomposition and Reflective Feedback WebPilot significantly outperforms the search-based method, LM-TS, particularly in the Reddit and GitLab domains, due to two key factors. First, the lack of strategic decomposition by the Planner in LM-TS makes navigating the vast state space considerably more challenging, as the agent lacks clear guidance, leading to less efficient exploration and poorer performance. The importance of this decomposition is highlighted by the superior results achieved by WebPilot, as demonstrated by the ablation studies in \u00a74.4. Second, WebPilot employs hierarchical reflections after each node expansion, enabling continuous reassessment and refinement of its strategy. Further details can be found in \u00a74.4."}, {"title": "Enhanced Reasoning and Planning Capabilities Remain Crucial for Improvement", "content": "Enhanced Reasoning and Planning Capabilities Remain Crucial for Improvement Even with the less powerful GPT-3.5, WebPilot demonstrates a significant improvement over the WebArena baseline, highlighting its effectiveness in leveraging MCTS-inspired strategies to navigate complex environments. However, transitioning from GPT-3.5 to GPT-40 yields substantial gains, particularly in the Shopping, Reddit, and GitLab, with SR increases of 11.8%, 6.6%, and 9.4%, respectively. These improvements are largely driven by the enhanced reasoning and planning capabilities of GPT-40, which are crucial for tasks requiring precise inference and information retrieval in Shopping, as well as for navigating the more complex and diverse environments of GitLab and Reddit. The advanced planning abilities and the capacity to generalize domain knowledge from limited demonstrations to unseen tasks enable WebPilot to generate more effective plans, better understand the environment, and execute accurate actions. This underscores the importance of addressing the core challenges that current LLMs face in reasoning and planning, suggesting that further enhancements can be achieved with more powerful LLMs."}, {"title": "4.3 Results on MiniWoB++", "content": "As shown in Tab. 3, WebPilot achieves results competitive with the SOTA, SteP. The slight edge of SteP is due to its use of 10 action-level demonstrations, while WebPilot uses only 4 high-level demonstrations, leaving exploration to the agent. The simplicity of many MiniWoB++ tasks, which require minimal actions, also reduced the need for extensive exploration, limiting the advantage of WebPilot. Despite this, our method proved effective with far fewer demonstrations compared to other LLM-based agents. Detailed analysis of MiniWoB++ can be found in the Appendix."}, {"title": "4.4 Ablation Studies", "content": "To evaluate the impact of each component in WebPilot, we categorized tasks into information-seeking (IS) and website interaction (WI), including site navigation and content configuration. IS tasks focus on extracting information, while WI tasks require executing complex action sequences. For the ablation experiments, we selected 50 IS tasks and 50 WI tasks where WebPilot successfully completed the objectives. This selection allowed us to focus on cases where the components are functioning optimally, providing a clearer understanding of how each component contributes to overall performance. The results highlight the critical role each component plays in the effectiveness of WebPilot. Notably, WI tasks are more adversely affected than IS tasks, underscoring the importance of our design in equipping the agent to handle complex web exploration tasks. Relevant examples illustrating the following findings are provided in the Appendix."}, {"title": "Importance of Child Reflection for Maintaining Coherent Thought Processes", "content": "Importance of Child Reflection for Maintaining Coherent Thought Processes The Child Reflection mechanism is crucial for maintaining a coherent thought process during exploration, aligning with the principles of Chain-of-Thought reasoning (Wei et al. 2022). This reflection ensures that when generating actions for child nodes, the model has access to the parent node behind previous actions and its intended next steps. This continuity enables the model to produce more accurate and contextually relevant actions, preserving the logical flow necessary for complex decision-making. Without Child Reflection, this coherence is disrupted, leading to a significant 30% decline in performance, particularly in WI tasks, where maintaining a consistent thought process is essential for success."}, {"title": "Critical Role of Sibling Reflection in Effective and Diverse Exploration", "content": "Critical Role of Sibling Reflection in Effective and Diverse Exploration Sibling Reflection is key to optimizing exploration within MCTS and expanding into diverse, promising areas, particularly for complex tasks. By leveraging insights from previously explored sibling nodes, WebPilot reduces redundancy and focuses on high-potential paths, ensuring valuable solutions are not missed. This mechanism enhances exploration effectiveness, especially for complicated web interaction tasks, as evidenced by WI tasks being more affected, as shown in Tab. 4."}, {"title": "Controller is Critical for Subtask Accuracy and High-Level Decision-Making", "content": "Controller is Critical for Subtask Accuracy and High-Level Decision-Making Controller is crucial for Global Optimization, enabling the reassessment and refinement of plans. After each subtask, Controller evaluates its completeness and, in collaboration with Planner, refines the overall plan. Without Controller, the verification of subtask completion is significantly compromised, leading to a noticeable performance decline, particularly in WI tasks. The greater impact on these tasks, which involve more subtasks, is due to the higher likelihood of incomplete subtasks as their quantity grows. This underscores the vital role of Controller in high-level strategic planning and refinement. This finding highlights the importance of trial-and-error, mimicking human problem-solving, where Controller serves as a key link between overarching goals and detailed task execution."}, {"title": "Planner is Essential for Maximizing WebPilot Performance in Complex Tasks", "content": "Planner is Essential for Maximizing WebPilot Performance in Complex Tasks The removal of Planner significantly degrades performance, particularly in complex WI tasks, due to the task complexity and the high number of subtasks. This decline stems from the inherent difficulty of MCTS with complex tasks. Task decomposition enables MCTS to operate more effectively."}, {"title": "4.5 Agent Behavioral Analysis", "content": "This section analyzes the behavior of WebPilot to show its effectiveness in mimicking human strategies, with examples provided below and additional details in the Appendix.\nWebPilot Can Learn Website Functionality by Exploring Unknowns When switching branches in GitLab, the model first tries a dropdown menu but fails due to too many options, reflecting its limited web knowledge. By exploring further, it adapts and successfully finds the correct branch using the Branch Option in the sidebar, demonstrating its ability to learn and navigate unfamiliar web environments.\nWebPilot Can Continuously Adapt Strategies and Actions Based on New Observations On certain pages, elements like \"link Project A\" and \"statictext Project A\" appear multiple times in the actree, referring to the same page. While interacting with the statictext yields no changes, clicking the link achieves the desired outcome. WebPilot observes the error with the statictext, adjusts, and shares this reflection with other nodes, enhancing future decisions and demonstrating its adaptive learning capacity.\nWebPilot Can Resolve Ambiguities Through Iterative Refinement When tasked with checking \"Merge request assigned to me\", the initial plan involves accessing the merge request and filtering results. However, during the first subtask, WebPilot discovers a more direct path to the goal. Upon successfully completing this subtask, Controller can determine that the remaining subtasks have been implicitly accomplished, demonstrating the ability of WebPilot to iteratively refine its strategy to resolve ambiguities."}, {"title": "4.6 Limitation", "content": "Despite the substantial progress achieved with WebPilot, limitations remain that impact its performance and could be addressed in future work. First, the effectiveness of WebPilot is limited by the capabilities of LLMs, particularly in accurately understanding and interacting with complex web environments via text-based actions. Second, the absence of visual information, which forces the LLM to infer context typically provided by visual cues, e.g., the number of stars associated with the item, places additional strain on its performance. These challenges highlight the need for advancements in LLMs and the integration of visual reasoning to better handle complex web tasks. Refer to the Appendix for details."}, {"title": "5 Conclusion", "content": "We introduce WebPilot, a multi-agent system with a dual optimization strategy to enhance the adaptability and effectiveness of autonomous agents in complex web environments. By combining global optimization with a tailored MCTS-based local optimization, WebPilot overcomes the limitations of rigid predefined policies, achieving SOTA results on WebArena. Our approach marks a significant step forward in general autonomous agent capabilities, paving the way for more advanced decision-making in complex environments."}, {"title": "D Illustrative Examples of Agent Behavioral Analysis", "content": "Beyond the example provided in \u00a74.5 of the main paper, this section presents additional illustrative examples that demonstrate the behavior of WebPilot to show its effectiveness in mimicking human strategies.\nD.1 Illustrative Example: WebPilot Learning Website Functionality by Exploring Unknowns\nThe ability of WebPilot to explore unknowns is consistently evident across various tasks. For example, in the CMS domain, a task requires accessing the \"Pages\" management section. Although the link is not immediately visible on the initial dashboard, WebPilot navigates the sidebar to locate it. This exploratory capability is also demonstrated in tasks involving navigation to specific pages via sidebar elements, highlighting the proficiency of WebPilot in adapting to and mastering unfamiliar web environments.\nD.2 Illustrative Example: WebPilot Adapting Strategies Based on New Observations\nThe ability of WebPilot to adapt its strategy is further illustrated in the following scenario. When searching for a user profile in the GitLab domain, WebPilot initially anticipates the results to be directly related to users. However, the search results default to displaying information about \"Projects,\" with the \"Users\" tab hidden. Upon observing the current page layout, WebPilot adapts its action strategy and suggests clicking the \"Users\" tab in its reflection for subsequent steps. This reflection acts as a hint for future actions, preventing the agent from incorrectly assuming that the user-related results are unavailable based solely on the initial search outcome.\nD.3 Illustrative Example: WebPilot Resolving Ambiguities Through Iterative Refinement\nAmbiguity can be divided into two categories: environmental ambiguity and task ambiguity. In \u00a74.5, we discussed how WebPilot addresses environmental ambiguity. An illustrative example of handling task ambiguity comes from the Reddit domain. The task is to \"Post in the most appropriate subreddit and ask for recommendations for noise-canceling headphones.\u201d The appropriate subreddit is not immediately apparent, making it challenging to create a comprehensive plan at the outset. To tackle this, Planner of WebPilot breaks down the task into a relevant subtask\u2014\"Navigate to a relevant subreddit, such as headphones or shopping\". Explorer then dynamically executes this subtask, selecting the appropriate forum after reviewing the full list of subreddits. Finally, Controller validates the execution results to confirm whether the desired subreddit has been reached. This collaborative approach effectively resolves the ambiguity inherent in the task, allowing WebPilot to adaptively navigate complex decision-making scenarios.\nD.4 Illustrative Example: High-Level Demos Generalize Better to Unseen Tasks\nHigh-level demonstrations equip the agent with general web domain knowledge, enabling WebPilot to generate more effective plans, better understand the environment, and even for tasks not explicitly covered in the demonstrations. For example, in the Shopping domain, the Planner used these demonstrations, as shown in \u00a7F.3 to create a plan for the following task \"Find the customer name and email with phone number 2137418080\""}, {"title": "D.5 Illustrative Example: Strategic Differences Between WebPilot and SteP", "content": "As shown in Tab. 2 of the main paper, WebPilot outperforms the current SOTA agent SteP, particularly in the Gitlab domain. Below, we analyze the strategic differences between WebPilot and SteP. The trajectory data is provided by SteP.\nAs Fig. 11 illustrates, SteP repeatedly attempted to navigate to the \"Settings\" page of the repository, despite these actions being clearly ineffective. This behavior reveals a critical limitation of SteP: its reliance on predefined action policies, which hinder its ability to adapt when those policies fail to produce the desired outcome. The dependence of Step on static, state-specific action policies limits its flexibility, causing it to become trapped in a loop of repetitive actions without recognizing the need to backtrack or explore alternative paths. This shortcoming highlights the importance of dynamic reflection, a mechanism that WebPilot employs effectively to avoid such pitfalls."}, {"title": "E More Discussions on Limitations", "content": "E.1 Comparative Analysis of Agent Behavior with GPT-3.5 and GPT-4\nCase 1: Environment Understanding Compared to GPT-3.5, GPT-4 demonstrates a significantly more accurate understanding of environments. This is particularly evident when dealing with pages containing items with similar attributes. For instance, on a page with multiple orders, each having its own status\u2014such as \"Cancelled,\" \"Complete,\" and \"Pending\"\u2014 GPT-4 is notably more effective at selecting a specific order based on a given attribute value.\nE.2 Text-based Observation vs. Vision-based Observation\nWhen processing text-based web observations, such as actrees, LLMs often interpret page content based on proximity principles. For instance, when asked to identify the order number of the most recent pending order, the correct answer should have been 189, as shown in Fig. 14. However, due to the layout of the text\u2014where a different element is positioned closer\u2014the LLM incorrectly identified the order number, resulting in an erroneous interpretation.\nThe challenge with text-based comprehension arises from the absence of visual context, which limits the ability of the agent to accurately interpret spatial relationships and distinguish between textually similar elements. Unlike humans, who can easily parse a webpage by leveraging visual cues such as color, layout, and spacing, LLMs rely solely on textual information. This reliance on text makes it difficult for the model to discern the correct relationships between elements, especially when similar or related items are positioned close to each other, increasing the likelihood of misinterpretation.\nAdditionally, certain visual information cannot be adequately represented through actrees, further complicating the ability of LLM to accurately interpret web content. For example, in the task \"Tell me the full names of the repositories where I made contributions and they got more than 100 stars\", the star information is presented solely as a link with a numeric value and an \"image\" item in the actree. The lack of visual representation makes it impossible for the LLM to correctly extract and interpret this information."}, {"title": "E.3 Dataset Limitation", "content": "Element Not Directly Observable On certain pages of WebArena, the state changes of specific elements are not effectively conveyed through the actree. For example, on the issue inspection page, clicking the \"Open,\" \"Closed,\" or \"All\" tabs triggers different filters that display the status of various issues. However, despite significant changes in the content displayed, the text-based state of the tab elements themselves remains unchanged. As a result, the agent, which relies on comparing the state of the target element before and after execution, may incorrectly interpret the action as a failure.\nInvisible Dropdowns In several domains within WebArena, there have been instances where certain dropdown menus fail to expand, limiting the performance of WebPilot in specific tasks."}, {"title": "F Algorithm Details", "content": "F.1 Summary of the Function of Each Agent\nF.2 Detailed Description of Action Effects Effect(at) in RENE\nAfter executing an action, Explorer assesses the resulting changes in the environment, referred to as the action effect Effect(at). This effect is then compared with the intended outcome It by Appraiser to determine how effectively the action has achieved its goal."}, {"title": "F.4 Pseudocode for WebPilot", "content": ""}]}