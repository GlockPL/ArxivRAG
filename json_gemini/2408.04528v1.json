{"title": "Reasoning about Study Regulations in Answer Set Programming", "authors": ["SUSANA HAHN", "CEDRIC MARTENS", "AMADE NEMES", "HENRY OTUNUYA", "JAVIER ROMERO", "TORSTEN SCHAUB", "SEBASTIAN SCHELLHORN"], "abstract": "We are interested in automating reasoning with and about study regulations, catering to various stakeholders, ranging from administrators, over faculty, to students at different stages. Our work builds on an extensive analysis of various study programs at the University of Potsdam. The conceptualization of the underlying principles provides us with a formal account of study regulations. In particular, the formalization reveals the properties of admissible study plans. With these at end, we propose an encoding of study regulations in Answer Set Programming that produces corresponding study plans. Finally, we show how this approach can be extended to a generic user interface for exploring study plans.", "sections": [{"title": "Introduction", "content": "Study regulations govern our teaching at universities by specifying requirements to be met by students to earn a degree. Creating a study program involves different stakeholders: faculty members designing study programs, administrative and legal staff warranting criteria, like studyability, faculty members teaching the corresponding programs as well as supervising their execution on examination boards, study advisors consulting students, and of course, students studying accordingly.\nGiven this impressive spectrum of use-cases, it is quite remarkable that study regulations are usually rather sparse and leave many aspects to the commonsense of the respective users. This is needed to cope with their inherent incomplete, inconsistent, and evolving nature. For instance, often study regulations leave open minor dependencies among modules. Sometimes associated courses overlap and certain modules cannot be taken in the same semester. And finally, studying happens over time, students' perspectives may change and faculty may rotate. Often these phenomena are compensated by changes, preferences, recommendations, defaults, etc. In fact, this richness in issues and notions from Knowledge Representation and Reasoning (KRR) makes study regulations a prime candidate for a comprehensive benchmark for KRR formalisms.\nOur approach is adaptable, though not universally applicable. Its foundations lie in the principles of Europe's Bologna Process, designed to harmonize higher education across the continent. European curricula, for example, are structured around credit points, often allocated to individual modules. The European Credit Transfer and Accumulation System (ECTS) provides guidance on program design and credit allocation. Similarly, our approach utilizes modules and credit points as fundamental building blocks. Our goal is to encompass all study regulations at the University of Potsdam, which share additional key principles. However, adaptation or even redesign may be necessary for other institutions with differing structures or requirements.\nIn fact, this work is part of a project conducted at the University of Potsdam to assist different users by automatizing study regulations. These users range from study administrators, over faculty in different functions, to prospective and advanced students. We started by analyzing more than a dozen different study regulations in order to identify their underlying principles. The conceptualization of the basic principles led us to a formal account of basic study regulations, presented in Section 2. For illustration, we provide the formalization of the master program Cognitive Systems. We refine this in Section 3 by showing how modules are passed by accomplishing their associated examination tasks. The formalization of study regulations reveals the properties of admissible study plans. To automatize reasoning about study regulations and their study plans, we capture their properties in Answer Set Programming (ASP; Lifschitz (2002)), a declarative problem solving paradigm, tailored for knowledge representation and reasoning. The ASP-based encoding of basic study regulations is discussed in Section 4. Moreover, we show in Section 5 how this encoding can be used together with an ASP-driven user interface to browse through study plans of given study regulations. We conclude in Section 7."}, {"title": "Conceptualizing study regulations", "content": "The basic concept of our study regulations are modules. Accordingly, a semester is composed of a set of modules and a study plan is a finite sequence of semesters. More formally, given a set $M$ of modules, a study plan of $n$ semesters is a sequence $(S_i)_{i=1}^n$ where $S_i \\subseteq M$ for $1 \\leq i \\leq n$. Study regulations specify legal study plans. To capture this, we propose an abstract characterization of study regulations and show how they induce legal study plans.\nA basic study regulation is a tuple $(M, G, c, s, 1, u, R_g, R_t)$, where"}, {"title": "Examination Tasks", "content": "Modules have specific examination tasks that define the criteria for successful completion. Students typically complete these tasks within courses, where they are carefully designed to align with the requirements of specific modules.\nStudy regulations focus on modules and their associated examination tasks. It is the responsibility of each department to provide a course selection that enables students to complete the modules required by their study program. Therefore, we concentrate in what follows on modules and their associated examinations, rather than courses.\nEach module has at least one examination task\u00b9 and these tasks are unique to each module. We distinguish between primary examinations (e.g. written or oral exams) and secondary examinations (e.g. weekly exercises), and denote them by $E_p$ and $E_s$, respectively. In analogy to study plans, examination plans are sequences of form $(E_i)_{i=1}^n \\subseteq (E_p \\cup E_s)^n$.\nInterestingly, a single module can offer flexibility through different combinations of primary and secondary examination tasks. Given a set of modules $M$ and sets $E_p$ and $E_s$ of primary and secondary examinations, we define the functions $e_p: M \\rightarrow 2^{2^{E_p}}$ and $e_s: M \\rightarrow 2^{2^{E_s}}$ to associate a module with different combinations of primary and secondary examination tasks, respectively.\nFor illustration, suppose module bm\u2081 requires as primary examination task either a written exam or a final project report, identified by $ep_{bm1,1}$ and $ep_{bm1,2}$. Also, two secondary examination tasks, a lecture attendance of 50% and the successful completion"}, {"title": "Encoding study regulations", "content": "In this section, we present an ASP-based approach to represent study regulations and gen- erate valid study plans. We explain in detail the representation of basic study regulations, and we discuss briefly its extension to examination tasks. As usual, the representation is divided in two parts: a specific instance and a general encoding. The instance represents the elements of a specific study regulation by a set of facts, while the encoding provides the semantics associated with study regulations. Given an instance that represents one study regulation, the answer sets of the encoding together with the instance correspond to the study plans for that study regulation.\nWe try to keep the notation as close as possible to the formalizations of the previous sections. We use the same symbols as before for sets and functions, but always in lowercase, to adapt to the conventions of ASP. For example, the sets S, Si and Mw are denoted by the terms s, s(i) and m(w), respectively. In what follows, we may use the logic programming notation to refer to those sets and functions."}, {"title": "ASP-driven user interface", "content": "In this section, we sketch our interactive prototypical User Interface (UI) for creating study plans in accordance with study regulations. Notably, the UI is generated and driven by ASP, more precisely the clinguin system."}, {"title": "Related work", "content": "ASP, event calculus and process mining techniques were already used in (Wagner et al. 2023) for solving study regulation problems. However, Wagner et al. (2023) presents an overview of the AIStudyBuddy project, and contains neither a formalization of study regulations nor any implementation details. Unlike this, Samaranayake et al. (2023) presents a web-based Decision Support System for a degree planning problem along with a mathematical formalization. Degree requirements are mentioned but not formalized. Also, Baldazo et al. (2023) considers educational planning problems. This includes stress and learning effects on students in a personalized study plan generation. It aims at reducing the duration of student plans and is implemented via integer linear programming. Schneider et al. (2018) present a curriculum timetable validation tool by modeling constraints in language B. Finally, Shen et al. (2022) present a data-driven approach for implementing"}, {"title": "Summary", "content": "We have introduced a conceptualization of study regulations based on set-based constraints. This formalization is both simple and general to capture a wide range of study regulations. We indicated how the basic formulation easily extends to more complex constructions. This will be further elaborated in future work. The identification of basic principles in study regulations also allowed us to obtain a very general ASP encoding. The building blocks of each study regulation are captured in terms of facts so that the actual encoding is also applicable to a large range of study programs. Finally, we have described an ASP-driven user interface for interactive elaboration of study plans. Again, the interface is designed in a generic way and broadly applicable. Moreover, this case study serves as a nice illustration of clinguin and how it can be used for interactive ASP applications.\nFinally, study regulations offer a very rich playground for applications of knowledge representation and reasoning techniques. Study plans have a light temporal flavor and resemble finite traces in linear temporal logic (De Giacomo and Vardi 2013). The creation of a study plans amounts to a configuration task, which also brings about interaction and explainability. Finally, we have so far only been concerned with the hard constraints emerging from study regulations but there is so much commonsense knowledge involved, like defaults, preferences, deontic laws, updates, etc."}]}