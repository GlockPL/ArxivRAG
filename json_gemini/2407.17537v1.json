{"title": "A process algebraic framework for multi-agent dynamic epistemic systems", "authors": ["Alessandro Aldini"], "abstract": "This paper combines the classical model of labeled transition systems with the epistemic model for reasoning about knowledge. The result is a unifying framework for modeling and analyzing multi-agent, knowledge-based, dynamic systems. On the modeling side, we propose a process algebraic, agent-oriented specification language that makes such a framework easy to use for practical purposes. On the verification side, we define a modal logic encompassing temporal and epistemic operators.", "sections": [{"title": "Introduction", "content": "The formal modeling of agent-based systems and the knowledge transfer enabled by the related interactions is a research field common to several areas, ranging from concurrency theory to epistemic logic.\nIn the former setting, two basic models are mainly adopted to describe the dynamics of systems: (i) Kripke structures are graphs where the nodes are annotated with atomic propositions stating what is true in the system state associated with the node, and (ii) labeled transition systems (LTSs) are graphs where the arcs are annotated with actions representing the events causing a change of system state. Both paradigms are equipped with temporal logics for the description of properties, like, e.g., Computation Tree Logic (CTL) for state-based structures [3] and Hennessy-Milner Logic (HML) for action-based systems [23].\nIn the latter setting, the focus is on reasoning about knowledge from the viewpoint of non-omniscient agents in terms of their capability of distinguishing different scenarios [17]. The standard way to model epistemic notions is through a state-based epistemic model called Kripke model. Every state (called possible world) is characterized by the propositional statements that hold in it, as in Kripke structures. At the same time, an accessibility relation determines, from the viewpoint of the agent under consideration, which worlds are compatible (indistinguishable) with her knowledge in the current world. In this setting, epistemic logic introduces a knowledge modality for reasoning about what agents know or can deduce from the information at their disposal and, possibly, for tracking the information flow among agents.\nThe connections between the two strands of research are evident and, in some cases, the mutual foundational influence between traditional concurrency models and epistemic models is investigated (see, e.g., [25,26,21,14]). Specific examples of cross-fertilization can be found in the formal analysis of security protocols; see [15] for a survey and, in particular, [11,4,28,7], where logical formalizations of knowledge are integrated into a modeling framework based on pi-calculus in order to characterize the intruder's capability of breaking security properties.\nThe main goal of this paper is to combine the advantages of the two approaches by merging in a novel, multi-agent framework the capability of the LTS-based semantics of modeling dynamic, temporal behaviors with the capability of the epistemic models of representing what agents know or do not know. The rough idea behind the combination is associating a Kripke model with each state of an LTS. As additional contributions, this novel framework is enriched with a logic including dynamic and epistemic modalities and a high-level, process-algebraic specification language.\nIn the following, we introduce the model of Kripke labeled transition systems (Section 2) as a combination of epistemic models and LTSs. We define a logic for describing properties for such a model and establish the equivalence relation that is characterized by the logic. Then, we propose a process algebraic language for modeling agent-oriented concurrent systems with semantics based on Kripke labeled transition systems (Section 3). To emphasize the usability of this language, we describe a case study based on a popular, classical board game (Section 4). Finally, we discuss related work and potential future directions (Section 5)."}, {"title": "Kripke labeled transition systems", "content": "Let A be a set of agents (ranging over i, j, ...), Act a set of actions (ranging over \\(\u03c0,\u03c0', ...\\)), and At a set of atomic propositions (ranging over p, q, . . .); we will use X, Y,... to denote subsets of At. First of all, we recall the definitions of labeled transition system and multi-agent epistemic model.\nDefinition 1. A labeled transition system (LTS) is a tuple \\((S,T, s_0)\\) where S is a non-empty set of states (with \\(s_0\\) the initial state) and \\(T \u2286 S \u00d7 Act \u00d7 S\\) is the action-labeled transition relation.\nIn the setting of computation modeling, LTSs describe the evolving behavior of discrete systems, where the actions labeling the transitions represent events leading from one configuration of the system to another.\nDefinition 2. A multi-agent epistemic model (called Kripke model) is a tuple \\((S, \\{R_i | i \u2208 A\\},v)\\), where S is a non-empty set of states; for every \\(i \u2208 A\\), \\(R_i \u2208 2^{S\u00d7S}\\) is a binary (accessibility) relation over S; \\(v : S \u2192 2^{At}\\) is a valuation function assigning to each state the set of propositions that hold in the state.\nA pointed (resp., rooted) Kripke model is a pair \\(((S, \\{R_i | i \u2208 A\\},v), s)\\), where \\(s \u2208 S\\) is the current (resp., initial) state. Kripke models serve as the basis of the semantics for various modal logics and, in the case of epistemic languages, allow us to reason about knowledge in terms of information accessibility.\nFor our purposes, combining the dynamic action-based nature of LTSs with the possible worlds description of Kripke models results in action-based systems, the states of which are associated with accessibility relations and valuations.\nDefinition 3. A Kripke labeled transition system (KLTS) is a tuple \\(M = (S,T, \\{r_i | i \u2208 A\\}, v)\\), where S is a non-empty set of states; \\(T \u2286 S \u00d7 Act \u00d7 S\\) is a transition relation; for every \\(i \u2208 A, r_i : S \u2192 2^{2^{At}x2^{At}}\\) is a function mapping each state to a binary (accessibility) relation over \\(2^{At}\\); \\(v : S \u2192 2^{At}\\) is a valuation function.\nFirstly, states should not be considered dependent on atomic propositions. They are primitive semantic objects so that the set of propositions satisfied by a state does not uniquely identify the state. Secondly, each accessibility relation \\(r_i(s)\\) relates elements of \\(2^{At}\\) and expresses the actual observational power of agent i in state s with respect to the truth of the propositions in At. In other words, \\(r_i(s)\\) describes the distinguishing power of agent i in s, intended as her capability of distinguishing the possible worlds identified by the values of the propositions. Under the indistinguishability interpretation of epistemic logic, \\(r_i(s)\\) expresses informational indistinguishability between possible worlds. More precisely, \\((X, Y) \u2208 r_i(s)\\) means that in s the agent i has insufficient information to establish whether we are in a state in which all and only the propositions of X hold or in a state in which all and only the propositions of Y hold. Hence, both X and Y are compatible with the knowledge of the agent i in s. By virtue of this interpretation, in the following we assume that the accessibility relations are equivalence relations. Thirdly, the transition relation T and the valuation function v are interpreted as usual.\nExample 1. If \\((\\{p\\} \u222a X, \\{p\\} \u222a Y)\\) belongs to \\(r_i(s)\\) for any choice of \\(X, Y \u2208 2^{At}\\), then, in s, all the possible worlds in which p holds are mutually indistinguishable from the viewpoint of agent i. If we also have that \\((\\{p\\}\u222aX, Y)\\) \\(\u2209 r_i(s)\\) whenever \\(p\u2209 Y\\), we conclude that agent i distinguishes all and only the pairs of worlds differing for the valuation of p. Later, we will realize that this means that, in s, agent i knows the truth value of p and is ignorant of any other proposition.\nRemark 1. From a KLTS, an LTS can be derived. In particular, if we omit from a rooted KLTS \\(((S, T, -, -), s_0)\\) the accessibility relations and the valuation function, we obtain an LTS. Moreover, the KLTS \\((2^{At},\u00d8, \\{r_i | i \u2208 A\\}, id)\\) where id is the identity function and \\(r_i(s) = r_i(s')\\) for all \\(i \u2208 A\\) and for any \\(s, s' \u2208 2^{At}\\) is a Kripke model.\nLTSs and Kripke models provide the semantics for interpreting properties expressed in various modal logics. Inspired by temporal logics and epistemic logics, we propose a modal logic that naturally combines temporal and epistemic ingredients, called Kripke Temporal (KT) logic.\nDefinition 4 (KT Logic). The language \\(L_{KT}\\) of the KT logic is defined by the following two-layers grammar:\n\\( \u03c6 \u2192 T | p |\u00ac\u03c6|\u03c6 \u2227 \u03c6 | <a>\u03c6 | \u03c8 \\)\n\\(\u03c8\u2192T | p |\u00ac\u03c8 \\ \u03c8 > \u03c8 | Ki\u03c8 \\)\nThe formulas are called epistemic formulas. Note that the KT logic results from the combination and encompasses both HML [23] and Epistemic Logic [17].\nDefinition 5. Given a KLTS \\(M = \\{S,T,\\{r_i | i \u2208 A\\},v\\}\\) and denoted \\(M_s = (2^{At}, \\{r_i(s) | i \u2208 A\\},id)\\), with \\(s \u2208 S\\), the truth of \\(y \u2208 L_{KT}\\) at \\(s \u2208 S\\), denoted \\(M,s = \u03c6\\), is defined as follows:\n1. \\(M, s |= T \\)\n2. \\(M,s |= p\\) iff \\(p\u2208v(s)\\)\n3. \\(M, s |= \u00ac6\\) iff \\(M, s \\neq \u03c6\\)\n4. \\(M, s |= 1\\wedge \u03c6_2\\) iff \\(M, s |= 1\\) and \\(M, s |= 2\\)\n5. \\(M, s |= <a>\u03c6\\) iff \\(\u2203s'. (s,\u03c0,s') \u2208T\\) and \\(M, s' |= \u03c6\\)\n6. \\(M, s |= Ki\u03c8\\) iff \\(M_{s,v(s)} |=_K Ki\u03c8\\), where the relation \\(|=_K\\) is defined as:\n(a) \\(M_{s, X} |=_K T \\)\n(b) \\(M_{s, X} |=_K p\\) iff \\(p\u2208 X\\)\n(c) \\(M_{s, X} |=_K \u00ac\u03c8\\) iff \\(M_{s, X} \\ncong \u03c8\\)\n(d) \\(M_{s, X} |=_K \u03c8_1 \\wedge 42\\) iff \\(M_{s, X} |=_K 1\\) and \\(M_{s, X} |=_K 2\\)\n(e) \\(M_{s, X} |=_K Ki\u03c8\\) iff \\(\u2200Y.(X, Y) \u2208 r_i(s) : M_{s, Y} |=_K \u03c8\\)\nNote that the formula \\(Ki\u03c8\\) is evaluated in \\(s \u2208 S\\) with respect to the accessibility relations associated with s, thus emphasizing the view of the KLTS as an LTS with a Kripke model \\(M_s = (2^{At}, \\{r_i(s) | i \u2208 A\\}, id)\\) for each state s. Hence, the semantics of an epistemic formula evaluated in s depends on such a Kripke model (\\(|=_K\\) is the classical satisfiability relation for Kripke models). By virtue of the indistinguishability interpretation we adopted, since we are assuming to work with accessibility relations that are reflexive, symmetric, and transitive, the reference system for the knowledge modality is S5 [9].\nBased on the semantics above, two states s and s' are modal equivalent, denoted \\(s = s'\\), if and only if they satisfy the same formulas. The KT logic characterizes the following notion of behavioral equivalence.\nDefinition 6. Let \\(M = (S,T, \\{r_i | i \u2208 A\\}, v)\\) be a KLTS. A binary equivalence relation B on S is a bisimulation iff whenever \\((s,t) \u2208 B\\) then:\n1. \\(v(s) = v(t)\\);\n2. if \\((s, a, s') \u2208T\\) then \\(\u2203t'. (t,a,t') \u2208T\\) and \\((s',t') \u2208 B\\);\n3. there exists a binary equivalence relation \\(B_{st}\\) between the worlds of the Kripke models \\((2^{At}, \\{r_i(s) | i \u2208 A\\}, id)\\) pointed at \\(v(s)\\) and \\((2^{At}, \\{r_i(t) | i \u2208 A\\}, id)\\) pointed at \\(v(t)\\), such that \\((v(s), v(t)) \u2208 B_{st}\\) and for any X, Y \u2208 2^{At}, whenever \\((X,Y) \u2208 B_{st}\\) then:\n- \\(X = Y\\);\n- if \\((X, X') \u2208 r_i(s)\\) for \\(i \u2208 A\\), then \\(\u2203Y'. (Y, Y') \u2208 r_i(t)\\) and \\((X', Y') \u2208 B_{st}\\).\nNote that conditions 1. and 3. resemble the definition of modal bisimulation for Kripke models [9], while condition 2. characterizes the strong bisimulation for LTSs [23]. Two states s and s' are bisimilar, denoted \\(s \\sim s'\\), if and only if there exists a bisimulation B such that \\((s, s') \u2208 B\\). The correspondence theorem relates bisimilar states and equivalent states whenever the KLTS is image finite, i.e., for all states and actions, the image of s (under any accessibility relation) and the image of \\(s, \u03c0\\) (under the transition relation) are finite.\nTheorem 1. For any image-finite KLTS, \\(\\sim\\) coincides with =.\nAs a consequence of the grammar structure and the semantics of the KT logic, decidability and verification algorithms are inherited from the results related to epistemic logic and HML."}, {"title": "A language for Kripke labeled transition systems", "content": "In this section, we define a process-algebraic, agent-oriented language with value passing, the semantics of which is given in terms of KLTSs. We start by defining a basic calculus (see, e.g., [18,20]) with value passing (see, e.g., [22,24]) for the description of sequential process terms. Let A be a set of action names (ranging over a, b, ...) including the special action names \\(\u03c4\\) and set. To model value passing, we will use variables (x, y, . . ., f, g, . . .), values (v, v', . . .) from fixed domains, and expressions (e, e', . . .) that usually represent simple values.\nDefinition 7. The set L of process terms of the calculus for sequential processes is generated through the following syntax:\n\\(P \u2192 0 | \\sum_{k\u20acI}\u03c0_k. P_k | C(e_1,...,e_n)\\)\n\\(\u03c0 \u2192 b | a(y, f) | \\overline{a}(i, \u03c8) | set(p, w)\\)\nwhere b \u2208 A\\{\\textit{set}\\}, \\(a \u2208 A\\{\\textit{t}, \\textit{set}\\}\\), I is any finite indexing set, w is a boolean value, C is a constant name with the natural n \u2265 0 being the arity of C.\nThe constant 0 stands for the inactive, halted process. The summation operator represents a nondeterministic choice enacting one of the guarded process terms \\(\u03c0_k.P_k\\), which executes action \\(\u03c0_k\\) and then behaves as process term \\(P_k\\) (we will use E to denote a non-empty summation). The constant C is used to express recursive processes with n \u2265 0 parameters, and must be associated with a defining equation of the form \\(C(x_1,...,x_n) := P\\). The notation \\(\u03c0\\) stands for any action, which can be an internal action b, an input action \\(a(y, f)\\), an output action \\(\\overline{a}(i, 4)\\), or an assignment action \\(\\textit{set}(p, w)\\).\nAn assignment action has the effect of setting the proposition p to the boolean value w. An output action communicates an epistemic formula & to the agent i, while an input action receives a formula assigned to the variable f from an agent assigned to the variable y.\nAs usual in calculi with value passing, each occurrence of any variable in a process term P is bound by either an input action or a constant definition. For instance, x is bound in \\(C(x) := \\overline{a}(x, p \u2227 q) . C(x + 1)\\) and in a(x, f) . b(x, T) . 0, but not in \\(\\overline{a}(x, p \u2227 q) . 0\\). Moreover, we write i/x and /f for substitutions of values for variables, and denote by P[i/x, 4/f] the result of substituting i (resp., 4) for all free (not bound) occurrences of x (resp., f) in P.\nFormally, the behavior of a process term Q is described in structural operational semantics style as the LTS rooted at Q and defined by the transition relation \\(T \u2286 L \u00d7 Act \u00d7 L\\) that is the least transition relation generated by the axioms and the rules in Table 1. All the pre- and post-conditions associated with knowledge-based behaviors (i.e., communications and assignments) will be defined when introducing the parallel composition of process terms and the knowledge structures.\nExample 2. The process term \\(\\textit{Agent} := \\textit{receive}(y, f).\\textit{send}(y + 1, f).\\textit{Agent}\\) represents an agent without parameters that is available to receive as input a formula from an agent y, and then forwards such a formula as an output to agent y + 1 (here, we assume that identities are naturals)."}, {"title": "Agents and pool of agents", "content": "Process terms represent behavioral patterns of agents, while an agent is an instance of a process term with a unique identity. Several agents may communicate with each other to form a network of agents. Hence, we need to formalize the notion of agent and how agents interact in a so-called pool of agents. A dynamic knowledge structure will be added to regulate such interactions.\nAgents are described by tuples of the form (i \u2208 A, P\u2208 L) and are ranged over by I, J,.... The semantics of (i, P) is given by the LTS expressing the behavior of P, up to the renaming of the actions as defined by the semantic rule:\n\\(\\frac{P \\xrightarrow{\u03c0} P'}{(i, P) \\xrightarrow{i.\u03c0} (i, P')}\\) (agent)\nSo far, we abstracted from the interaction among agents and the underlying knowledge base. Now, we combine the behavior of several agents by integrating the notion of knowledge, which will allow us to specify how they can interact.\nDefinition 8. A pool of agents is a tuple \\(P = (U_iZ_i, R, X)\\) where:\n- \\(U_iZ_i\\) is a finite set of agents;\n- \\(R = \\{R_i | i \u2208 A\\}\\) where each \\(R_i\\) is a binary accessibility relation over \\(2^{At}\\);\n- X At is the set of true propositions.\nThe behavior of the set \\(U_iZ_i\\) depends on the behavior of each \\(Z_i\\) and is defined as an element of the cartesian product \\((A\u00d7L)^n\\), where n denotes the cardinality (i.e., the number of agents) of the pool. Then, each accessibility relation \\(R_i\\) expresses the capability of the agent i to distinguish the possible worlds based on the values that can be attributed to the propositions of At. Finally, set X denotes the current truth assignment for the propositions of At.\nThe agents described by a tuple P can perform actions, either synchronously or autonomously, thus making the system dynamic. On the one hand, the internal"}, {"title": "Use case: playing Cluedo", "content": "The present case study is designed to highlight the modeling features and analysis opportunities of our framework. Despite its simplicity, this use case encompasses many of the features of real-world applications, including strategic thinking, private and public communications, and knowledge transfer. For the sake of brevity, instead of the full Cluedo game\u00b9 we model a simplified version. Let us consider a game set with 3 players, a dealer, and 8 cards, numbered from 1 to 8. At the beginning of the game, the dealer samples secretly and puts aside two cards, shuffles the remaining cards together, making sure none of the cards are seen by any of the players, and then deals two cards per player. Then, the game starts and proceeds by sequential turns. On her turn, each player makes publicly a suggestion of the form: I suggest that the two secret cards of the dealer are i and j. There are no constraints about the specific choice of i and j. Then, if the player on the right of the one making the suggestion has at least one of the cards mentioned, she must show one of these cards secretly to her. Then, the inquiry passes to the player on the left, with the same rule. At the end of her turn, the player wins the game if she has learned and can correctly declare what the dealer's cards are. Otherwise, the game proceeds with the following turns until one of the players wins.\nFormally, we model the game set through the propositions \\(p_i^j\\) and \\(q_i\\), for \\(0 \u2264 j \u2264 2\\) and \\(1 \u2264 i \u2264 8\\), where \\(p_i^j\\) means that player j has card i and \\(q_i\\) means that card i is one of the two secret cards of the dealer. The pool includes one dealer and three players and, initially, is defined as the tuple: ({(Mr. Black, Dealer), (0, Player(0)), (1, Player(1)), \u30082, Player(2))}, R, X). The three players have the same behavioral pattern, given by the process term Player, which is fed with a parameter representing the player identity. Set X is empty (the cards have yet to be shuffled by the dealer Mr. Black). The accessibility relation of the dealer, \\(R_{Mr.Black}\\), contains only the reflexive pairs, i.e., each possible world is a singleton. In fact, by assumption, the dealer is like an oracle and can distinguish any possible scenario. As we will see, \\(R_{Mr.Black}\\) is immutable. The accessibility relation for each player j, denoted \\(R_j\\), is such that two possible worlds are related if and only if they coincide for the values of the propositions \\(p_i^j\\), \\(1 \u2264 i \u2264 8\\). The intuition is that, at least, a player is able to distinguish two possible worlds differing in the values of the cards she receives. All such accessibility relations are equivalence relations but are not immutable, as the knowledge of the players will change as the game proceeds.\nInitially, the dealer shuffles the cards and chooses nondeterministically the two secret cards and the assignments for the players (see actions set):\n\\(\\textit{Dealer} := \\sum_{k_1,k_2} set(q_{k_1},1).set(q_{k_2},1).\\textit{Deal}(k_1,k_2)\\)\n\\(\\textit{Deal}(x, y) := \\sum_{i_1,i_2\\notin\\{x,y\\}} set(p_{i_1}^0, 1).set(p_{i_2}^0, 1). deal (0, pp).( \\sum_{i_3,i_4\\notin\\{i_1,i_2,x,y\\}} set(p_{i_3}^1, 1).set(p_{i_4}^1, 1). deal(1, pp).( \\sum_{i_5,i_6\\notin\\{i_1,...,i_4,x,y\\}} set(p_{i_5}^2, 1).set(p_{i_6}^2, 1).deal(2, pp^2). Play(0))\\)\nWhenever clear from the context, the bounds of a summation are not specified (in general, \\(\\sum_{i,j}\\) expresses a choice over all the possible unordered pairs of different values (i, j), each one ranging from 1 to 8). Process term Dealer models the random sampling of the two secret cards, and then the invocation of process term \\(\\textit{Deal}(k_1,k_2)\\) describes the following behavior of the dealer whenever \\(k_1\\) and \\(k_2\\) have been chosen. The sampling for each player is modeled analogously through a pair of subsequent actions set. The output action deal is used to communicate the assignments to the players. Then, the dealer coordinates the game rounds:\n\\(\\textit{Play}(x) := \\textit{start\\_turn}(x, T).(\\textit{end\\_turn}(-, -).\\textit{Play}((x + 1)\\textit{mod} 3) + \\textit{win}(-, -).0)\\)\nby assigning each turn (through the output action \\(\\textit{start\\_turn}\\)) to a different player, sequentially. Note that the output is sent to player x to inform that her turn is starting, without the need to communicate any other information (this justifies the choice of the truth constant T). Then, the dealer waits for a response: either the player turn terminates (input action \\(\\textit{end\\_turn}\\)) or the player wins the game by learning the secret pair during her turn (input action win). For the sake of convenience, whenever unnecessary, the arguments of an input action are left unspecified (symbol -).\nAfter receiving the cards through the input action deal, each player is available to start her turn (input action start_turn) or to manage inputs from the other players. The process term \\(\\textit{Player}(x)\\) is defined as follows:\n\\(\\textit{Player}(x) := \\textit{deal}(y, -). (\\textit{start\\_turn}(-, -). \\sum_{i_1,i_2} \\textit{ask}_{i_1,i_2} ((x + 1)\\textit{mod3}, T).\\textit{show}(-,-). \\sum_{i_1,i_2} \\textit{ask}_{i_1,i_2} ((x + 2)\\textit{mod} 3, T).\\textit{show}(-,-). (\\textit{end\\_turn}(y,\\neg\\phi_x).\\textit{Player}(x) + \\textit{win}(y, \\phi_x).0)) + \\sum_{i_1,i_2} \\textit{ask}_{i_1,i_2} (z, -). (\\textit{show}(3 - x - z, p_{i_1} \\lor p_{i_2}).(\\textit{show}(z, p_{i_1}).\\textit{Player}(x) + \\textit{show}(z, p_{i_2}).\\textit{Player}(x)) + \\textit{show}(3 - x - z, \\neg p_{i_1} \\land \\neg p_{i_2}).\\textit{show}(z, \\neg p_{i_1} \\land \\neg p_{i_2}).\\textit{Player}(x)) + \\textit{show}(-,-).\\textit{Player}(x))\\)\nWhen initiating a new turn, the player chooses nondeterministically two cards to be asked to each other player (output action ask) and then waits for the related answer (input action show). At the end of the turn, either the player learns the secret and wins the game (output action win) or passes the hand (output action end_turn). The winning condition for player x determining which output is executed is given by the knowledge of the formula \\(\\phi_x = \\bigvee_{(k,k')} K_x(q_k \\land q_{k'})\\), i.e., the player knows the secret pair. Then, players respond to incoming requests through the input action ask. If player x receives from player z a request about cards \\(i_1\\) and \\(i_2\\), then we distinguish two cases. Firstly, x may have at least one of the two cards \\((p_{i_1} \\lor p_{i_2})\\). In this case, x reveals one of the possessed cards to z, by choosing the card nondeterministically if necessary. Indirectly, even the third, silent player (identified by 3 - x - z) learns something, i.e., the fact that x has one of the two cards. We model this indirect transfer of knowledge through an explicit output directed to player 3 - \u0445 z. Secondly, x may have none of the two cards \\((\\neg p_{i_1} \\land \\neg p_{i_2})\\). In this case, the information is shared with both the other players. Finally, due to the outputs directed to player 3 X z, players must also be available to learn some information during the turns of the other players (through the input action show).\nIt is worth noting that the management of the knowledge base of the players is left to the semantics of the underlying Kripke model. At the level of the specification, only the initial setting and the communications are modeled explicitly. This is particularly significant from the viewpoint of usability, as an analogous model based on, e.g., classical Kripke structures, would be much more challenging. To appreciate this aspect, the same use case has been modeled in"}, {"title": "Related work and conclusions", "content": "A few approaches investigate the combination of LTS-based semantics and epistemic notions, e.g., in the setting of epistemic \u03bc-calculus [14] and of concurrent constraint programming paradigms [26,21]. The framework proposed in [25] is the closest to our approach in principle, as it integrates LTSs with accessibility relations stating the indistinguishability between states. However, agents observe (do not control) the path of performed actions and, based on this knowledge, deduce what the actual state is. Hence, the semantics of the formulas of the underlying logic is given in terms of paths. Notably, such a logic, similarly to the KT logic, is equipped with both temporal and epistemic modalities.\nAn important strand of research concerns dynamic extensions of Kripke models and epistemic logic, where the dynamic dimension is related to the execution of actions over time; see, e.g., [5,35,27,8,16,19,6,31,10] and the references therein. However, all these approaches differ in the way in which we encode the dynamics of epistemic models within the LTS-style semantics. The main advantage of our encoding is that the obtained semantics facilitates the definition of a high-level process-algebraic language for the description of multi-agent systems and knowledge-based interactions.\nIn the field of concurrency theory, some of the ideas presented in this paper can be found in the study of temporal logics encompassing features from HML and modal u-calculus [13]. As an example, a variant of the temporal logic CTL is defined in [33] to check properties over expressive models called L2TS. In these models, the idea is to combine transition labels expressing the action-based dynamic behavior of a system with state-based labels expressing the knowledge possessed in each state of the system. With respect to our proposal, no epistemic representation of derivable knowledge is given, so the study of the observational power of the agents is limited to the verification of state-based propositional logic formulas and on the model checking of temporal formulas.\nSummarizing, by following suggestions deriving from works on dynamic and temporal epistemic logics [30], we embedded a structure of pointed Kripke models into a labeled transition system, the actions of which act as model-transforming operations from the viewpoint of the Kripke models. These transitions naturally model the behavior of the system and the passage of (discrete) time, while the Kripke models linked to the states visited during the temporal evolution of the system represent the way in which the knowledge of every agent evolves over time. The process algebraic language that we introduced emphasizes these effects and allows for a compact and elegant description of multi-agent systems, where the details of the knowledge evolution are left to the underlying epistemic model.\nStarting from this point, several extensions can be envisioned. For instance, the semantics of our communication mechanisms assumes that only known truth can be transferred. Hence, we do not currently manage (possibly false) beliefs and the communication of information that is inconsistent with an agent's knowledge or belief. This would require the introduction of the belief modality and the treatment of contradictions resulting from the communication between agents. Moreover, this would also open to extensions in which it is possible to model the behavior of malicious agents sharing false information and, therefore, a theory of fake news [29,2]. Along the same lines, further modalities could be added to the epistemic component of our model.\nDealing with inconsistencies is a problem to face even in the present model, without bringing up the notion of belief. In particular, an unsuccessful formula is a formula that might become false as soon as it is communicated, like, e.g., in the case of p^\u00acKjp whenever agent i communicates it to agent j [34]. Several studies investigate the syntactic form of potential unsuccessful formulas, in particular in the setting of public announcements for multi-agent systems [32]. Obviously, even in our framework such forms can be recognized and, in particular, are limited to those cases in which a formula of the form \u00abKjy is involved in a communication to agent j. This is because the satisfaction of such a formula before the communication could be contradicted by sharing its knowledge with the agent suffering from such a kind of ignorance.\nFinally, in order to expand the theoretical development of our framework, we also plan to define: (i) an axiomatization for the KT logic, (ii) quantitative extensions of the KLTS model, by adding continuous time and probabilistic choices, and (iii) additional ingredients in the process-algebraic language, by including internal actions guarded by knowledge-based conditions, if-then-else constructs that are based on knowledge conditions, and broadcast communication in the style of [1]."}, {"title": "Proofs of results", "content": "The proof of Theorem 1 is an adaptation of standard approaches [9", "23": "."}]}