{"title": "A process algebraic framework for multi-agent dynamic epistemic systems", "authors": ["Alessandro Aldini"], "abstract": "This paper combines the classical model of labeled transition systems with the epistemic model for reasoning about knowledge. The result is a unifying framework for modeling and analyzing multi-agent, knowledge-based, dynamic systems. On the modeling side, we propose a process algebraic, agent-oriented specification language that makes such a framework easy to use for practical purposes. On the verification side, we define a modal logic encompassing temporal and epistemic operators.", "sections": [{"title": "Introduction", "content": "The formal modeling of agent-based systems and the knowledge transfer enabled by the related interactions is a research field common to several areas, ranging from concurrency theory to epistemic logic.\nIn the former setting, two basic models are mainly adopted to describe the dynamics of systems: (i) Kripke structures are graphs where the nodes are an-notated with atomic propositions stating what is true in the system state associ-ated with the node, and (ii) labeled transition systems (LTSs) are graphs where the arcs are annotated with actions representing the events causing a change of system state. Both paradigms are equipped with temporal logics for the de-scription of properties, like, e.g., Computation Tree Logic (CTL) for state-based structures [3] and Hennessy-Milner Logic (HML) for action-based systems [23].\nIn the latter setting, the focus is on reasoning about knowledge from the viewpoint of non-omniscient agents in terms of their capability of distinguishing different scenarios [17]. The standard way to model epistemic notions is through a state-based epistemic model called Kripke model. Every state (called possible world) is characterized by the propositional statements that hold in it, as in Kripke structures. At the same time, an accessibility relation determines, from the viewpoint of the agent under consideration, which worlds are compatible (indistinguishable) with her knowledge in the current world. In this setting, epistemic logic introduces a knowledge modality for reasoning about what agents know or can deduce from the information at their disposal and, possibly, for tracking the information flow among agents.\nThe connections between the two strands of research are evident and, in some cases, the mutual foundational influence between traditional concurrency models and epistemic models is investigated (see, e.g., [25,26,21,14]). Specific examples"}, {"title": "Kripke labeled transition systems", "content": "Let A be a set of agents (ranging over i, j, ...), Act a set of actions (ranging over \u03c0,\u03c0', ...), and At a set of atomic propositions (ranging over p, q, . . .); we will use X, Y,... to denote subsets of At. First of all, we recall the definitions of labeled transition system and multi-agent epistemic model.\nDefinition 1. A labeled transition system (LTS) is a tuple (S,T, so) where S is a non-empty set of states (with so the initial state) and T \u2286 S \u00d7 Act \u00d7 S is the action-labeled transition relation.\nIn the setting of computation modeling, LTSs describe the evolving behavior of discrete systems, where the actions labeling the transitions represent events leading from one configuration of the system to another.\nDefinition 2. A multi-agent epistemic model (called Kripke model) is a tuple (S, {Ri | i \u2208 A},v), where S is a non-empty set of states; for every i \u2208 A, Ri \u2208 2S\u00d7S is a binary (accessibility) relation over S; v : S \u2192 2At_is a valuation function assigning to each state the set of propositions that hold in the state.\nA pointed (resp., rooted) Kripke model is a pair ((S, {Ri | i \u2208 A},v), s), where s \u2208 S is the current (resp., initial) state. Kripke models serve as the basis of the semantics for various modal logics and, in the case of epistemic languages, allow us to reason about knowledge in terms of information accessibility.\nFor our purposes, combining the dynamic action-based nature of LTSs with the possible worlds description of Kripke models results in action-based systems, the states of which are associated with accessibility relations and valuations."}, {"title": "A language for Kripke labeled transition systems", "content": "In this section, we define a process-algebraic, agent-oriented language with value passing, the semantics of which is given in terms of KLTSs. We start by defining a basic calculus (see, e.g., [18,20]) with value passing (see, e.g., [22,24]) for the description of sequential process terms. Let A be a set of action names (ranging over a, b, ...) including the special action names \u03c4 and set. To model value pass-ing, we will use variables (x, y, . . ., f, g, . . .), values (v, v', . . .) from fixed domains, and expressions (e, e', . . .) that usually represent simple values.\nDefinition 7. The set L of process terms of the calculus for sequential processes is generated through the following syntax:\nP \u2192 0 | \u2211_{k\u2208I}\u03c0_k. P_k | C(e_1,...,e_n)\n\u03c0 \u2192 b | a(y, f) | \\bar{a}(i, \u03c8) | set(p, w)\nwhere b \u2208 A\\{set}, a \u2208 A\\{\u03c4, set}, I is any finite indexing set, w is a boolean value, C is a constant name with the natural n \u2265 0 being the arity of C.\nThe constant 0 stands for the inactive, halted process. The summation operator represents a nondeterministic choice enacting one of the guarded process terms \u03c0_k.P_k, which executes action \u03c0_k and then behaves as process term P_k (we will use \u03a3 to denote a non-empty summation). The constant C is used to express recursive processes with n \u2265 0 parameters, and must be associated with a defin-ing equation of the form C(x_1,...,x_n) := P. The notation \u03c0 stands for any action, which can be an internal action b, an input action a(y, f), an output action \\bar{a}(i, \u03c8), or an assignment action set(p, w).\nAn assignment action has the effect of setting the proposition p to the boolean value w. An output action communicates an epistemic formula \u03c8 to the agent i, while an input action receives a formula assigned to the variable f from an agent assigned to the variable y.\nAs usual in calculi with value passing, each occurrence of any variable in a process term P is bound by either an input action or a constant definition. For instance, x is bound in C(x) := \\bar{a}(x, p \u2227 q) . C(x + 1) and in a(x, f) . b(x, T) . 0, but not in \\bar{a}(x, p \u2227 q) . 0. Moreover, we write i/x and \u03c8/f for substitutions of values for variables, and denote by P[i/x, \u03c8/f] the result of substituting i (resp., \u03c8) for all free (not bound) occurrences of x (resp., f) in P.\nFormally, the behavior of a process term Q is described in structural oper-ational semantics style as the LTS rooted at Q and defined by the transition relation T \u2286 L \u00d7 Act \u00d7 L that is the least transition relation generated by the axioms and the rules in Table 1. All the pre- and post-conditions associ-ated with knowledge-based behaviors (i.e., communications and assignments) will be defined when introducing the parallel composition of process terms and the knowledge structures.\nExample 2. The process term Agent := receive(y, f).send(y + 1, f). Agent repre-sents an agent without parameters that is available to receive as input a formula from an agent y, and then forwards such a formula as an output to agent y + 1 (here, we assume that identities are naturals)."}, {"title": "Agents and pool of agents", "content": "Process terms represent behavioral patterns of agents, while an agent is an in-stance of a process term with a unique identity. Several agents may communicate with each other to form a network of agents. Hence, we need to formalize the notion of agent and how agents interact in a so-called pool of agents. A dynamic knowledge structure will be added to regulate such interactions.\nAgents are described by tuples of the form (i \u2208 A, P\u2208 L) and are ranged over by I, J,.... The semantics of (i, P) is given by the LTS expressing the behavior of P, up to the renaming of the actions as defined by the semantic rule:\n\u03c0\nP\\rightarrow P'\n(agent)\n(i, P) \\xrightarrow{i.\u03c0} (i, P')\nSo far, we abstracted from the interaction among agents and the underlying knowledge base. Now, we combine the behavior of several agents by integrating the notion of knowledge, which will allow us to specify how they can interact.\nDefinition 8. A pool of agents is a tuple P = (U_iZ_i, {R_i | i \u2208 A}, X) where:\nU_iZ_i is a finite set of agents;\nR = {R_i | i \u2208 A} where each R_i is a binary accessibility relation over 2^{At};\nX \u2286 At is the set of true propositions.\nThe behavior of the set U_iZ_i depends on the behavior of each Z_i and is defined as an element of the cartesian product (A\u00d7L)^n, where n denotes the cardinality (i.e., the number of agents) of the pool. Then, each accessibility relation R_i expresses the capability of the agent i to distinguish the possible worlds based on the values that can be attributed to the propositions of At. Finally, set X denotes the current truth assignment for the propositions of At.\nThe agents described by a tuple P can perform actions, either synchronously or autonomously, thus making the system dynamic. On the one hand, the internal"}, {"title": "Use case: playing Cluedo", "content": "The present case study is designed to highlight the modeling features and anal-ysis opportunities of our framework. Despite its simplicity, this use case en-compasses many of the features of real-world applications, including strategic thinking, private and public communications, and knowledge transfer. For the sake of brevity, instead of the full Cluedo game\u00b9 we model a simplified version. Let us consider a game set with 3 players, a dealer, and 8 cards, numbered from 1 to 8. At the beginning of the game, the dealer samples secretly and puts aside two cards, shuffles the remaining cards together, making sure none of the cards\nInitially, the dealer shuffles the cards and chooses nondeterministically the two secret cards and the assignments for the players (see actions set):\nDealer := \u2211_{k1,k2} set(q_{k1},1).set(q_{k2},1).Deal(k1,k2)\nDeal(x, y) := \u2211_{i1,i2 \u2209{x,y}} set(p_{i1}, 1).set(p_{i2}, 1). deal(0, T).(\u2211_{i3,i4 \u2209{i1,i2,x,y}} set(p_{i3}, 1).set(p_{i4}, 1). deal(1, T).(\u2211_{i5,i6 \u2209{i1,...,i4,x,y}} set(p_{i5}, 1).set(p_{i6}, 1).deal(2, T). Play(0)))\nWhenever clear from the context, the bounds of a summation are not specified (in general, \u2211_{i,j} expresses a choice over all the possible unordered pairs of different values (i, j), each one ranging from 1 to 8). Process term Dealer models the random sampling of the two secret cards, and then the invocation of process term Deal(k1,k2) describes the following behavior of the dealer whenever k1 and k_2 have been chosen. The sampling for each player is modeled analogously through a pair of subsequent actions set. The output action deal is used to communicate the assignments to the players. Then, the dealer coordinates the game rounds:\nPlay(x) := start_turn(x, T).(end_turn(-, -).Play((x + 1)mod 3) + win (-, -).0)"}, {"title": "Related work and conclusions", "content": "A few approaches investigate the combination of LTS-based semantics and epis-temic notions, e.g., in the setting of epistemic \u03bc-calculus [14] and of concurrent constraint programming paradigms [26,21]. The framework proposed in [25] is the closest to our approach in principle, as it integrates LTSs with accessibility relations stating the indistinguishability between states. However, agents observe (do not control) the path of performed actions and, based on this knowledge, deduce what the actual state is. Hence, the semantics of the formulas of the underlying logic is given in terms of paths. Notably, such a logic, similarly to the KT logic, is equipped with both temporal and epistemic modalities.\nAn important strand of research concerns dynamic extensions of Kripke mod-els and epistemic logic, where the dynamic dimension is related to the execution of actions over time; see, e.g., [5,35,27,8,16,19,6,31,10] and the references therein. However, all these approaches differ in the way in which we encode the dynam-ics of epistemic models within the LTS-style semantics. The main advantage of our encoding is that the obtained semantics facilitates the definition of a high-level process-algebraic language for the description of multi-agent systems and knowledge-based interactions.\nIn the field of concurrency theory, some of the ideas presented in this paper can be found in the study of temporal logics encompassing features from HML and modal u-calculus [13]. As an example, a variant of the temporal logic CTL"}, {"title": null, "content": "is defined in [33] to check properties over expressive models called L2TS. In these models, the idea is to combine transition labels expressing the action-based dynamic behavior of a system with state-based labels expressing the knowledge possessed in each state of the system. With respect to our proposal, no epistemic representation of derivable knowledge is given, so the study of the observational power of the agents is limited to the verification of state-based propositional logic formulas and on the model checking of temporal formulas.\nSummarizing, by following suggestions deriving from works on dynamic and temporal epistemic logics [30], we embedded a structure of pointed Kripke models into a labeled transition system, the actions of which act as model-transforming operations from the viewpoint of the Kripke models. These transitions naturally model the behavior of the system and the passage of (discrete) time, while the Kripke models linked to the states visited during the temporal evolution of the system represent the way in which the knowledge of every agent evolves over time. The process algebraic language that we introduced emphasizes these effects and allows for a compact and elegant description of multi-agent systems, where the details of the knowledge evolution are left to the underlying epistemic model.\nStarting from this point, several extensions can be envisioned. For instance, the semantics of our communication mechanisms assumes that only known truth can be transferred. Hence, we do not currently manage (possibly false) beliefs and the communication of information that is inconsistent with an agent's knowledge or belief. This would require the introduction of the belief modality and the treatment of contradictions resulting from the communication between agents. Moreover, this would also open to extensions in which it is possible to model the behavior of malicious agents sharing false information and, therefore, a theory of fake news [29,2]. Along the same lines, further modalities could be added to the epistemic component of our model.\nDealing with inconsistencies is a problem to face even in the present model, without bringing up the notion of belief. In particular, an unsuccessful formula is a formula that might become false as soon as it is communicated, like, e.g., in the case of p\u2227\u00acK_j\u03c8 whenever agent i communicates it to agent j [34]. Several studies investigate the syntactic form of potential unsuccessful formulas, in particular in the setting of public announcements for multi-agent systems [32]. Obviously, even in our framework such forms can be recognized and, in particular, are limited to those cases in which a formula of the form \u00acK_j\u03c8 is involved in a communication to agent j. This is because the satisfaction of such a formula before the communication could be contradicted by sharing its knowledge with the agent suffering from such a kind of ignorance.\nFinally, in order to expand the theoretical development of our framework, we also plan to define: (i) an axiomatization for the KT logic, (ii) quantitative ex-tensions of the KLTS model, by adding continuous time and probabilistic choices, and (iii) additional ingredients in the process-algebraic language, by including internal actions guarded by knowledge-based conditions, if-then-else constructs that are based on knowledge conditions, and broadcast communication in the style of [1]."}, {"title": "Proofs of results", "content": "The proof of Theorem 1 is an adaptation of standard approaches [9,23]. Consider the KLTSS M\u2081 = (S\u2081, T\u2081, {r\u2081_i | i \u2208 A}, v\u2081) pointed at s\u2080\u2081 and M\u2082 = (S\u2082, T\u2082, {r\u2082_i | i \u2208 A}, v\u2082) pointed at s\u2080\u2082."}]}