{"title": "Search-Based Path Planning among Movable Obstacles", "authors": ["Zhongqiang Ren", "Bunyod Suvonov", "Guofei Chen", "Botao He", "Yijie Liao", "Cornelia Fermuller", "Ji Zhang"], "abstract": "This paper investigates Path planning Among Movable Obstacles (PAMO), which seeks a minimum cost collision-free path among static obstacles from start to goal while allowing the robot to push away movable obstacles (i.e., objects) along its path when needed. To develop planners that are complete and optimal for PAMO, the planner has to search a giant state space involving both the location of the robot as well as the locations of the objects, which grows exponentially with respect to the number of objects. The main idea in this paper is that, only a small fraction of this giant state space needs to be explored during planning as guided by a heuristic, and most of the objects far away from the robot are intact, which thus leads to runtime efficient algorithms. Based on this idea, this paper introduces two PAMO formulations, i.e., bi-objective and resource constrained problems in an occupancy grid, and develops PAMO*, a search method with completeness and solution optimality guarantees, to solve the two problems. We then further extend PAMO* to hybrid-state PAMO* to plan in continuous spaces with high-fidelity interaction between the robot and the objects. Our results show that, PAMO* can often find optimal solutions within a second in cluttered environments with up to 400 objects.", "sections": [{"title": "I. INTRODUCTION", "content": "Path planning seeks a collision-free path from an initial state to a goal state while avoiding collision among static obstacles, which is of fundamental importance in robotics. This paper considers a problem called Path planning Among Movable Obstacles (PAMO) where obstacles consist of both movable obstacles (i.e., objects) and static (non-movable) obstacles, and the robot can interact with objects by pushing them away when needed. PAMO seeks a minimum-cost start-goal path for the robot where both the move and push actions of the robot incur costs, and there is no requirement on the ending poses of the objects. This problem was shown to be NP-hard [5], [20], and the challenge is to determine not only a start-goal path among static obstacles but also when and where to interact with the objects.\nThe goal of this paper is to develop runtime efficient planners for PAMO with completeness and solution optimality guarantees. For this purpose, we formulate PAMO problems as a search over a grid where robots and obstacles are represented by grid cells, and develop A*-like planners (Fig. 1). By doing so, the planner must search a giant state space that includes both the location of the robot and the locations of all objects, which thereby grows exponentially with respect to the number of objects. However, we take the view that, although the state space is huge, in practice, only a small fraction of the state space needs to be explored during planning as guided by a heuristic, and most of the objects that are \"far away\" from the robot are intact, which thus leads to runtime efficient algorithms.\nBased on this idea, we first introduce a bi-objective PAMO formulation, which requires minimizing the numbers of both move and push actions simultaneously. Considering the move and push actions as two independent dimensions has the potential to avoid naively scalarizing two different types of actions into a single objective. With multiple objectives, there is often no single solution that optimizes all objectives at the same time, and the problem thus seeks a set of Pareto-optimal solutions, which is usually computationally heavy. We thus introduce another resource-constrained formulation, which seeks a shortest path while ensuring the number of push actions does not exceed a given limit. To address the problems, we develop an approach called PAMO*, which leverages the recent advances in multi-objective and resource-constrained search [14], [15], and leads to algorithms that can find all Pareto-optimal solutions for the bi-objective PAMO and an optimal solution for the resource-constrained PAMO. Finally, we seek to get rid of the grid representation by developing Hybrid-state PAMO* (H-PAMO*), which combines PAMO* with hybrid-state A* [6] and a robot-object interaction simulator based on Box2D [1] to plan in continuous spaces with high-fidelity, at the cost of losing completeness and solution optimality guarantees.\nWe test PAMO* in various grid maps. The results show"}, {"title": "A. Related Work", "content": "PAMO was formulated in different ways. When representing the workspace and obstacles using a grid, PushPush and Push-1 problems are NP-hard [5]. With polygonal obstacles, navigation among movable obstacles (NAMO) were proposed and shown to be NP-hard [20]. NAMO was studied in environments that are known [17], partially known [12], and unknown [8], with search-based [17], sampling-based [18], and learning-based [21] methods. This paper differs from these work by considering multi-objective and resource-constrained formulations of PAMO in a fully known grid, and developing planners with completeness and solution optimality guarantees.\nBesides, box-pushing games, such as Sokoban, solve puzzles where an agent moves boxes (i.e., objects) from their initial to goal positions in a grid by push. These games were NP-hard [7] and has been addressed by heuristic search [10], Monte-Carlo Tree Search [4], Q-learning [19], to name a few. PAMO differs from these games since it seeks a start-goal path for the robot while these games move the boxes without imposing a goal location on the agent.\nOther related work includes manipulation of multiple objects [13], [16], objects rearrangement [11], etc, where various more complicated interaction between the robot and the objects are allowed other than solely push.\nMulti-objective search and resource-constrained search are two closely related topics, and a fundamental challenge in these problems is to quickly check paths for dominance, i.e., compare the vector cost of these paths [3], [9], [14], [15]. This paper leverages these search algorithms [14], [15] to solve the formulated PAMO problems."}, {"title": "II. PROBLEM FORMULATION", "content": "Let $G = (V, E)$ denote a 2D occupancy grid that represents the workspace, where each cell $v \\in V$ has coordinates $v = (x, y) \\in \\mathbb{Z}^+$ indicating the column and row indices of the cell in the grid. The time dimension is discretized into time steps. At any cell $v = (x, y)$, the possible actions of the robot move in one of the four cardinal directions and arrives at one of the neighboring cells ${ (x + 1, y), (x - 1, y), (x, y+ 1), (x, y - 1) }$. Each action takes a time step. Let $N(v)$ denote the set of neighboring cells of $v \\in V$. Each edge $e = (v_1, v_2) \\in E$ indicates the corresponding movement from cell $v_1$ to another cell $v_2$.\nAt any time, all cells in $V$ are partitioned into three subsets: free space $V_{free}$, static obstacles $V_{so}$, and movable"}, {"title": "A. PAMO* Search", "content": "PAMO is the problem name while PAMO* (with *) is the method name. Let $m = |V_{mo}|$ denote the number of objects, and let position vector $p = (v_1, v_2,\\ldots, v_m)$ denote the cells occupied by all objects. Let $s = (v,p)$ denote a search state,"}, {"title": "B. Procedures in PAMO*", "content": "1) GetSuccessors: The procedure FrontierCheck in PAMO* takes a state $s = (v,p)$ and returns its successor states. It considers all possible neighboring cells of the robot $N(v)$, and for each of them, there are three cases. First, the robot moves to a free cell, which yields a successor state $s' = (v',p)$ where $(v,v') \\in E$ and the position vector $p$ remains the same as in $s$. Second, the robot moves to a cell that is a static obstacle, which is not a valid move and yields no successor. Third, the robot moves to a cell that is occupied by an object $p_k$ (the k-th element in the position vector $p$). In this case, the procedure further predicts the motion of the object $p_k$ and checks if the object can be pushed to an adjacent free cell $u$. If so, a successor state $s' = (v', p')$ is generated, where $(v,v') \\in E$ and the position vector $p'$ is updated by first copying $p$ and then modifying $p_k$ to be $u$. Otherwise (i.e., $p_k$ is pushed to a static obstacle or another object), no successor state is generated.\n2) Heuristic Computation: PAMO* calculates the heuristic vectors as follows. PAMO* first runs a pre-processing before the search starts, which invokes a Dijkstra search backwards from $v_g$ to all other vertices in the grid while ignoring any objects. By doing so, for each cell $v \\in V_{free}$, we know the distance $d^* (v)$ to $v_g$ along a shortest path among static obstacles. We then use $(d^* (v), 0)$ as the heuristic vector for any label $l$ whose robot position is at $v$, ignoring object positions. This heuristic is a lower bound on the true cost-to-go from $v$ to $v_g$ for the number of both move and push."}, {"title": "C. Discussion", "content": "1) Implicit State Generation: The state space $S$ is never created explicitly, i.e., allocate the memory for each state before the search starts. Instead, the state space is created implicitly, i.e., the states and the frontier sets are created only when the search generates the states. PAMO* only requires a GetSuccessors procedure to create successors out of a given state in $S$, and never requires the full knowledge of $S$.\n2) Giant State Space: PAMO* has a small constant branching factor, which is the number of successors returned by GetSuccessors procedure. Although the states space $S$ is extremely large and grows exponentially with respect to the number of objects. In practice, guided by the heuristic, PAMO* often needs to explore only a small fraction of $S$ before finding the (Pareto-)optimal solution(s), even if there are many objects. Intuitively, most of the objects that are far away from the robot's path from $v_s$ to $v_g$ are never touched, and the corresponding element of them in the position vector $p$ are never changed during the search.\n3) Global and Local Checks: Intuitively, FrontierCheck can be regarded as a \"local\" check which compares a label against the existing non-dominated label at the same state. Correspondingly, SolutionCheck can be regarded as a global check which compares a label against \"global\" information, i.e., either the existing solution paths that have been found or the resource limit.\n4) Action Costs: In the problem formulation, both move and push take a time unit. Our method PAMO* can easily handle the case where push and move take different amount of time, or more generally speaking, incur various types of costs, as long as the costs can still be described by cost vectors and are still additive. The only place to be modified"}, {"title": "D. Properties", "content": "Let RC-PAMO* (and MO-PAMO*) denote the version of PAMO* when using Alg. 1 to solve RC-PAMO problem (and MO-PAMO problem, respectively). The completeness and solution optimality of PAMO* are inherited from EMOA* [15] and ERCA* [14]. In particular, RC-PAMO* (and MO-PAMO*) can be regarded as applying ERCA* (and EMOA*) onto the new state space $S$ with the new way of successor generation. EMOA* is guaranteed to be complete and able to find all cost-unique Pareto-optimal solutions for a given graph with vector edge cost [15]. ERCA* is guaranteed to be complete and can find a min-cost solution subject to resource limits in a given graph where each edge incurs cost and resource consumption [14]. As a result, we have the following theorems.\nTheorem 1: MO-PAMO* is complete and can find all cost-unique Pareto-optimal solutions for MO-PAMO.\nTheorem 2: RC-PAMO* is complete and can find an optimal solution for RC-PAMO."}, {"title": "IV. HYBRID-STATE P\u0391\u039c\u039f*", "content": "Based on PAMO*, we further develop Hybrid-state PAMO* (H-PAMO*) by leveraging the idea in hybrid-state A* [6] to plan the robot motion in continuous space and time, handle kinematic constraints of robots, and consider more detailed interaction between the robot and the objects. Same as Hybrid-state A* for path planning in continuous space, our H-PAMO* loses completeness and solution optimality guarantees for PAMO in continuous space."}, {"title": "A. Environment and Robot", "content": "We consider a first order unicycle model, where the robot pose is $\\xi = (x,y,\\theta) \\in SE(2)$ and control is $u = (v,\\omega) \\in U$ where $v$ is the linear velocity and $\\omega$ is the angular velocity, and $(v,\\omega)$ are subject to control limits. The robot satisfies the system dynamics $\\dot{\\xi} = (\\dot{x},\\dot{y},\\dot{\\theta}) = f_{dyn}(\\xi, u) = (v \\sin(\\theta), v \\cos(\\theta),\\omega)$. The workspace $W$ is a bounded 2D Euclidean space with a set of static rectangle obstacles $W_{obs}$. In the free space $W_{free} = W \\backslash W_{obs}$, there are rectangle objects. A search state now includes both the pose of the robot and the poses of all objects.\nThe robot-object interaction is described by a black-box function $f_{sim}$ which takes (i) a state (i.e., the poses of the robot and the objects), (iii) a control of the robot, and (iv) a small amount of time $dt$, conducts a forward simulation and returns the ending poses of the robot and the objects. Here, $f_{sim}$ only simulates the poses of the robot and the objects, and ignores the higher order terms (e.g. velocities)."}, {"title": "B. H-PAMO* Search", "content": "H-PAMO* is similar to PAMO* with the following differences. First, to simplify the presentation, H-PAMO* is developed as a single-objective algorithm, where all actions (either move or push) incur an action time, and H-PAMO*"}, {"title": "VI. CONCLUSION AND FUTURE WORK", "content": "This paper investigates PAMO by formulating the problem as a multi-objective search and a resource constrained search over a grid, and develop planners with completeness and solution optimality guarantees. The results verify that, although the state space is huge, in practice, only a small fraction of the state space needs to be explored during planning as guided by a heuristic, and most of the objects that are far from the robot's path are intact, which thus leads to algorithms that are often runtime efficient. This paper also seeks to get rid of the grid representation by developing Hybrid-state PAMO* (H-PAMO*) to plan in continuous spaces at the cost of losing completeness and solution optimality guarantees. We plan to consider the uncertainty of robot-object interaction in our future work."}]}