{"title": "Dynamic Neural Potential Field: Online Trajectory Optimization in Presence of Moving Obstacles", "authors": ["Aleksey Staroverov", "Muhammad Alhaddad", "Aditya Narendra", "Konstantin Mironov", "Aleksandr Panov"], "abstract": "We address a task of local trajectory planning for the mobile robot in the presence of static and dynamic obstacles. Local trajectory is obtained as a numerical solution of the Model Predictive Control (MPC) problem. Collision avoidance may be provided by adding repulsive potential of the obstacles to the cost function of MPC. We develop an approach, where repulsive potential is estimated by the neural model. We propose and explore three possible strategies of handling dynamic obstacles. First, environment with dynamic obstacles is considered as a sequence of static environments. Second, the neural model predict a sequence of repulsive potential at once. Third, the neural model predict future repulsive potential step by step in autoregressive mode. We implement these strategies and compare it with CIAO* and MPPI using BenchMR frame-work. First two strategies showed higher performance than CIAO* and MPPI while preserving safety constraints. The third strategy was a bit slower, however it still satisfy time limits. We deploy our approach on Husky UGV mobile platform, which move through the office corridors under proposed MPC local trajectory planner. The code and trained models are avail-able at https://github.com/CognitiveAISystems/Dynamic-Neural-Potential-Field.", "sections": [{"title": "I. INTRODUCTION", "content": "Mobile robots, which may act autonomously within human-oriented environments could become a significant assistants for human beings. They can be applied for different environments such as offices [1], shops [2], living flats [3], or medical buildings [4]. Autonomous work of the mobile robots require specific methods for planning its motion within the environment. Trajectory planning is often executed in two stages: first, rough global path is generated via search-based [5, 6] or sampling-based [7, 8] methods, second, global path is turned to a local trajectory under consideration of kinodynamic constraints and obstacles. The second stage is often executed online with receding horizon strategy. Solution of receding horizon trajectory planning may be obtained with model predictive path integral (MPPI) [9-11] or numerical model predictive control (MPC) [12-20]. MPPI may work with arbitrary obstacle maps [11], however it could provide invalid or chattering solutions. Numerical MPC provide fast and stable solutions however it require analytical representation of the collision danger either as a set of constraints [14] or as a cost term (repulsive potential) [20]. In this work we consider the task of local planning with numerical MPC in presence of dynamic obstacles (fig. 1). Avoiding collisions with dynamic obstacles (e.g. walking human beings in office environment) is especially challeng-ing. It means that the obstacle map for each frame within the prediction horizon will be different. The prediction of obstacle flow is the specific task [21-23], which is out of our scope. It may be solved with various methods. Here we consider dynamic obstacles to be predictable. Dynamic appearance of the obstacle model enlarge computational complexity of the MPC problem due to higher number of obstacle parameters. This work bases on the recent NPField planner for obstacle-aware MPC trajectory optimization [20]. NPField combine performance of numerical MPC with novel neural architecture for modelling collision danger. It showed good performance on static obstacle maps. However, as a neural model, NPField has high number of parameters near to the limits of real-time calculation. Adaptation of such an approach to more complicated dynamic scenarios is chal-lenging. In this work we propose and compare three strategies for neural modeling of dynamic collision danger. First, we model a dynamic environment as a reference of static environments, where each frame is represented with a single obstacle map. For this case we can use a static NPField to predict a repul-sive potential for each environment. However, the number of problem parameters is multiplied by the number of steps in the environment reference. We call this approach NPField-D1 (i.e. Dynamic NPField, variant 1). Second, a single neural model is trained to predict a reference of future potentials based on the known position and direction of the obstacle. We call this approach NPField-D2. Third, a potential for each step may be predicted based on the potential for the previous step. We call this approach NPField-D3. Motion prediction tools often provide data about pose, bounding box, and direction of the dynamic obstacles [22, 23]. NPField-D2 and NPField-D3 utilize this information directly, while NPField-D1 require projection of the predicted bounding boxes onto the obstacle map. We describe these models in details further and present their numerical comparison."}, {"title": "II. RELATED WORKS", "content": "This section discuss existing approaches to motion plan-ning, especially local planning in presence of moving ob-stacles and collision avoidance with use of neural networks. General planning task consist of finding the trajectory for moving from the given starting position to the given desti-nation position. Well-known global planners such as A* [5], Theta* [6], PRM [7] or RRT [8] generate a reference of intermediate positions of the robot (global geometric path). Following this reference lead to approaching the destination point. However, in the common case the geometric path is awareless of how to provide smooth and collision-free motion between intermediate positions. Basic global planners have special extensions, which provide planning with respect to kinodynamic constraints. A* search may be executed on a lattice of kinodynamically feasible motion primitives [24], which results in executable trajectory instead of rough geometric path. Motion primitives allow the planner to check that there are no collisions between the intermediate state, including collisions with dynamic obstacles [25-28]. Sampling-based planners may also be extended in order to satisfy kinodynamic constraints [29] and replan with avoiding dynamic obstacles [30]. Aforementioned methods aim to add dynamic collision avoidance into the procedure of global planning, which might be computationally excessive in case of long global plans and short local horizons. Prediction of dynamic obstacles is often obtained from actual sensor data and require replanning within relatively short predicting horizon strategy. Therefore further we narrow down receding horizon approaches to local planning."}, {"title": "A. Receding horizon planning and dynamic obstacles", "content": "The task of local planning is to turn a fixed part of the rough global plan into smooth trajectory segment under con-sideration of obstacles and kinodynamic constraints. Model Predictive Path Integral (MPPI) [9] achieve this via sampling random trajectory segments and generating a good solution based on these samples. Collision check for sample trajecto-ries may be systematically extended to the case of dynamic obstacles [31, 32]. Computational heaviness and nondeter-ministic nature are disadvatages of MPPI, therefore it may be used in the cases, when the process model is too complicated for MPC. Numerical MPC solve local planning task as an optimal control problem. Obstacle avoidance is formalized as a set of constraints (e.g. [14]) or as an additional cost term of the optimization problem (e.g. [20]). This formalization lead to a number of additional problem parameters, which express obstacle properties. The number of parameters should not be large as it would reduce the performance of MPC. Many approaches approximate obstacle map with a model, which has low number of parameters. Either obstacles or free space may be approximated with a set of simple geometric figures: points [13], circles [14, 18], rectangles [15], polylines [33], or polygons [12, 19, 34]. Some of these works explicitely consider the case of dynamic environment [33, 34], some other may be adopted for the dynamic environment in a straightforward manner (e.g. CIAO*[14, 15] use independent approximations of the free space at each timestep of the process; these approximations might be done with respect to dynamic obstacles). The lack of geometric approximation is that it could be computationally challenging or inaccurate. Many works (e.g. [12, 19]) do not consider of how to obtain geometric approximation from the arbitrary obstacle map. This map usually have a standard view of Occupancy Grid (the matrix projected onto the map; zero values correspond to free-space cells, while 1 values correspond to occupied cells). High-resolution grids have too much parameters to be passed to MPC-solver in a raw format. In the next subsection we consider a group of approaches, where obstacle data are modeled with the neural networks."}, {"title": "B. Trajectory optimization with neural collision model", "content": "Learning collision model for numeric trajectory optimiza-tion was considered in several works [20, 35-39]. It is challenging to balance precision and computational com-plexity of the collision model, therefore existing works are constrained in time of computation and complexity of the maps. [35-38] use neural models inspired by Neural Radiance Field [40]. These models learn the structure of a single obstacle map (in 2D or 3D) and may be used for navigation within the learned map. [35, 36] exploit network inference for trajectory optimization, while [37, 38] optimize trajectory within the learning procedure. Instead of learning a single obstacle map the models from [20, 39] aim to take obstacle representation as an input parameter. Both architectures include two submodels: the first one reduce dimensionality of obstacle representation, while the second one calculate the value of the collision score. Therefore the first submodel provide a vector of problem parameters for real-time MPC solver, while the second is included into this solver using L4CasADi [36] framework. The difference is that [20] utilize Occupancy Grid for footprint-aware collision avoidance of wheeled mobile robot, while [39] utilize depth images for 3D collision avoidance of the aerial robot. To our knowledge there are no neural obstacle models, which provide MPC avoidance from dynamic obstacles in real time. [38] exploit NeRF learning procedure for trajectory optimization in presence of moving obstacles, however, the computational procedure of the trajectory optimization take several tens second, which is obviously non-real-time. The aim of this work is to provide a model, which allow for online MPC collision avoidance with the neural model of static and dynamic obstacles."}, {"title": "III. BACKGROUND", "content": "Following [20] we define the statement and notations for model predictive local planning. We consider a non-holonomic wheeled robot with differential drive. System state vector x = {x, y, \u03b8, v} include 2D robot coordinates x and y, its orientation \u03b8 and linear velocity v (directed according to \u03b8). Control vector u = {a,\u03c9} include robot acceleration a (directed according to \u03b8) and angular velocity \u03c9. A formal statement for the trajectory optimization problem is the following:\n\n\narg min \u2211 (||x[i] \u2013 xr[i] ||wx + ||u[i]||wa+Jo(x[i], po[i])),\ni=k\n\nk+m\n{xopt[i], uopt [i]}\nk+m\ns.t. dx/dt = vcos \u03b8, dy/dt = v sin \u03b8, dv/dt = a, d\u03b8/dt = \u03c9.\n\nHere xr is a reference path, Jo is a repulsive poten-tial of obstacles, po is a vector of obstacle parameters. Aforementioned statement may be adopted to systems with other dynamic models (e.g. holonomic or car-like robots): this require the change of x, u, and (1b), while obstacle model will keep the same. Neural potential function is a neural network, which is trained to predict Jo based on x and po. In [20] po is an embedding of the obstacle map obtained from the neural encoder. Reference potential for each point is calculated based on signed distance (SDF) to obstacle border: Jo = w\u2081(\u03c0/2 + arctan(w2 - w2SDF)) (w1 and w2 are weighting coefficients). Reference potential for the whole robot is chosen as a maximum potential of the points within its footprint. Reference potential is non-differentiable as SDF and maximum values are calculated algorithmically. Therefore it cannot be directly used in the MPC loop. Instead, reference potential is used to generate a dataset for training the neural potential field. The difference between static and dynamic environment is that in the first case po is constant for the whole trajectory, while in the second case it depends on time."}, {"title": "IV. PROPOSED ARCHITECTURES", "content": "In this work, we introduce three variants of our proposed neural network architectures, identified D1 (Fig. 2 left), D2 (Fig. 2 right), and D3 (Fig. 3). These architectures have been meticulously designed to facilitate the prediction of repulsive potential in the context of the Model Predictive Control (MPC) trajectory sampling mechanism, optimized to handle dynamic obstacles. Aiming to ensure low inference time for the real-time operation of the MPC, the proposed architectures are compartmentalized into three distinct seg-ments, termed as the yellow, green, and red segments. The yellow segment initiates the network, symbolized as fmap. This segment performs computations singularly for each individual map and takes as its input the map 11\u00d750\u00d750, the robot footprint 11\u00d750\u00d750, and dynamic obstacle information represented as X and Y coordinates along with the heading direction \u03b8 (assuming constant velocity). This part of the network generates an embedding denoted as dynh1x676. The green segment sequentially conducts looping oper-ations during the MPC trajectory sampling process. Each sampling point is converted into an embedding denoted as hpoint = fpoint (Ix, Ly,Itheta) and combined with the precalcu-lated hmap embedding from the yellow section, resulting in hemb = hmap.hpoint. The computation of the repulsive potential P0, P1, ..., Pn for the given point is achieved using the fNPField main module, with variations in operation specific to the D1, D2, and D3 versions. Finally, the red section denoted as faux is exclusively employed during the training phase. This segment generates an auxiliary loss function with the aim of predicting the original map. The implication of this design is to fine-tune the model in alignment with the characteristics of the original map using the given hmap embedding, subsequently enhancing its predictive capabilities for repulsive potentials. NPField-D1 The peculiarities of the D1 architectural variant (Fig. 2 left) lies in its computation of the repulsive potential Po exclusively within the current map frame. This approach processes dynamic obstacle movement through in-tegration within the Model Predictive Control (MPC) solver, necessitating the prediction of the dynamic obstacle's future trajectory. NPField-D2 In implementing the D2 architectural variant (Fig. 2 right), our objective was to eliminate the necessity for an extraneous trajectory prediction module, enhancing the model's capability to anticipate the repulsive potential t = 10 steps ahead. The model achieves this by relying on dynamic obstacle information Idyn and generating a corresponding repulsive potential for each distinct time interval t0,t1,..., t10 for every input point. The D2 architecture incorporates sep-arate multilayer perceptron (MLP) heads for each temporal increment with the given hmap as an input. The feature of this approach is the relatively small number of model parameters. However, it entails a degree of inconsistency in temporal predictions given that the generation at step t +1 is independent of the output generated at the preceding step t. NPField-D3 In the D3 architectural variant that we pro-pose (Fig. 3), the model employs a generative pre-trained transformer-based model (GPT [41]) to function as fNPField. The Transformer model, recognized for its sequence process-ing capabilities, is highly pertinent to our method of predict-ing the future trajectory of dynamic obstacles. Contrasting with the D2 variant, wherein each time step prediction is independent, the D3 model employs an autoregressive method for generating the repulsive potential across time steps t0,t1,...,t10. Under this schema, the output generated at any phase t+n is conditioned on all preceding steps. This mechanism ensures the temporal consistency and continuity of predictions a crucial factor in the realm of dynamic obstacle navigation tasks. As such, the D3 architecture provides a sophisticated solution, effectively addressing the complexity of the problem at hand."}, {"title": "V. DATASET PREPARATION", "content": "A procedure of the dataset collection include choice of the static maps, the robot footprints, and the dynamic obstacles. Static maps were chosen based on the MovingAI [42] city map dataset and occupancy grid for an office building of the Moscow Institute of Physics and Technology. Husky UGV footprint has been used in this work. In addition to the robot footprints, one footprint suggested for the dynamic obstacle: it is supposed as 0.7\u00d70.5 m rectangle which moves in linear motion with a random orientation. Dataset collection include the following steps:\n1) The maps have been cropped into sub maps and represented as images with 50\u00d750 resolution (4), where each pixel corresponds to 10\u00d710 centimeters of the real environment (i.e. size of the map is 5\u00d75 meters). As a result of this step, we have gotten 1000 different sub maps on which the collection of dataset is continued.\n2) One random position with three random orientations has been suggested for the agent in each sub map. The prediction of 10 forwarded positions for this agent has been noted for every case and for each sub maps supposing the speed of the agent is 0.3 m/sec. As a result of this step, 31 copy for each sub map will be generated. First one represents the static obstacles without agent, copies from 2 to 11, 12 to 21, and 22 to 31 represent the sub maps with static obstacles and each one of 10 position of agent and every one of three direction respectively.\n3) Every sub map is transformed into a costmap where each cell is filled with the reference potential.\na) Signed distance function (SDF) is calculated al-gorithmically for each cell on the map. SDF is equal to the distance from the current cell to the nearest obstacle border. It is positive for free space cells and negative for obstacle cells.\nb) Repulsive potential is calculated for each cell: Jo = w\u2081(\u03c0/2+ arctan(w2 - w2SDF)). This is a sigmoid function, which is low far from obsta-cles, asymptotically strives to w\u2081 inside obstacles, and has maximum derivative on the obstacle border.\n4) For the proposed algorithm, two robot footprints have been suggested. Both footprints correspond to a real Husky UGV mobile manipulator. The first one is with a folded arm, the second one is with an outstretched arm.\n5) For each footprint of the robot, the potential value has been obtained as a result of placement of this footprint with 10 random orientations in every pixel for each copy of every sub map. Repulsive potential is calculated for each random pose of the robot within the submap. For this purpose robot's footprint is projected onto the map according to the pose. The maximum potential among the footprint-covered cells is chosen as a repulsive potential. Resulting dataset has a tubular shape with number of the sub map, values of position of the robot, position of the agent, and repulsive potential at these positions."}, {"title": "VI. IMPLEMENTATION", "content": "We consider nonlinear MPC task statement, which may be solved via Interior Point (IP) or Sequential Quadratic Programming (SQP). Modern frameworks provide the pos-sibility for realtime execution of these methods. IPOPT [43] and ForcesPro [44] implement IP, while ACADO [45, 46] and Acados [47] implement SQP. These frameworks rely on a more low-level CasADi framework [48] for algorithmic differentiation. We implement our MPC solver with Acados framework, which is the newest one and provide the fastest execution. Use of deep neural network within Acados solver require the specific integration tool. Two libraries are relevant for this task: ML-CasADi [49] and L4CasADi [36]. Both provide the CasADi description of Pytorch [50] neural models. However, the first method was proposed and used for re-placing complex models with local Taylor approximations to enable real-time optimization procedures, while the second method provides a complete mathematical description of the Pytorch model by CasADi formula. For our Pytorch model which describes the neural potential field of the obstacles surrounding the path of the robot, L4CasADi is more suitable because the description of the whole model is needed and not only at a linearizing point. Our local planner works together with Theta* [6] global planner, which generates global plans as polylines. Note that Theta* uses a simplified version of the robot footprint (a circle with a diameter equal to the robot width) as it fails to provide a safe path with a complete footprint model. This simplified model does not guarantee the safety of the global plan, therefore the safety of the trajectory is provided by our local planner."}, {"title": "VII. EXPERIMENTS", "content": "We evaluated our algorithm on 100 scenarios using the [51] framework, which includes tasks like navigating through narrow passages. The assessment covered standard metrics such as planning time, path length, smoothness, and angle-over-length, where a lower value is preferable for all. Ad-ditionally, we introduced a custom metric, \"safety distance\" (the minimum value of the SDF). The experimental results, as detailed in table I, compared three versions of the Dynamic NPField algorithm: D1, D2, and D3 as well as MPPI and the CIAO* [14, 15] trajectory optimization algorithm. For each waypoint of the reference CIAO* approximate free space around the robot with a convex figure (circle or rectangle) and constrain the robot to be inside this figure. NPField-D2 and NPField-D3 are directly using the data about the bounding box and motion direction of the dynamic obstacle, while NPField-D1 and CIAO* require projection of the predicted bounding boxes onto the obstacle map. Overall, CIAO* showed average performance, which aligns with its status as a SOTA method. MPPI had similar results where it was faster than CIAO* but failed to find opti-mal trajectory multiple times and overall had sub-par results. NPField-D1 was the fastest, registering a computation time of 359.51 ms, which is nearly 300 ms faster than CIAO*. In contrast, NPField-D3 opted for the shortest path and safest trajectory, as shown by the highest safety distance and lowest AOL, though at the cost of increased computation time and path length. This behavior, although anticipated due to the use of the GPT model, suggests that NPField-D3 might be the most appropriate choice for real-world scenarios where some trade-off in time and length is acceptable to enhance robot safety.\nWe tested the concept using a Husky UGV mobile manip-ulator (see Figure 6) as a ROS module. For local planning and control, we utilized MPC, and for global planning, we used the Theta* planner [6]. Our testing scenario involved the robot maneuvering through a complex map. The hardware specifications included an AMD Ryzen 5 3500 CPU and an NVIDIA GeForce RTX 2080 with CUDA support for Py-Torch and L4CASADI. The entire navigation stack included a Cartographer and RTAB-Map for the global planner, with a second RTAB-Map for the local planner. All components of the control system were implemented as ROS nodes, with a central node managing communication with the Husky UGV hardware. Real-time planning and execution can be viewed in the supplementary video."}, {"title": "VIII. CONCLUSION, LIMITATIONS AND FUTURE WORK", "content": "This article present a novel approach to MPC collision avoidance, which extend Neural Potential Field for the case of environment with dynamic obstacles. We propose three neural architectures (NPField-D1, NPField-D2, NPField-D3) for predicting dynamic neural potential. We implement them and compare with each other and with MPPI and CIAO* trajectory optimizers. NPField-D1 (modeling dynamic en-vironment with a reference of static maps) and NPField-D2 (predicting a reference of potentials at once) outperform CIAO* and MPPI in path lentgh and computation time. NPField-D3 (autoregressive potential prediction) is slower, however it shows better potential reconstruction in general. In common, performance measures from table I show that our controllers require hundreds of milliseconds to replan the trajectory. This is sufficient for indoor mobile robot with limited velocity and 1 Hz replanning rate, while faster systems such as cars or drones require higher rate. Performance may be improved via using more powerful hard-ware and development of faster models and implementations. Numerical MPC in general is sensitive to the quality of the initial guess. In general it is recommended to use it as local planner together with a global planner, which provide rough but suboptimal reference path. Also it is worth noting that NPField is a learning-based method and therefore it has no theoretical safety guarantees. Therefore obtained solution has to be checked for collisions before its execution (which may be easily done by projecting the footprint onto the optimized waypoints). A significant assumption for MPC problem is that for each dynamic obstacle we know either prediction of its future trajectory (NPField-D1) or constant direction of its movement. We compensate the inaccuracy of this assumption via replanning the trajectory on each step. A meaningful direction of future research consist in overcoming this limita-tion by integrating autoregressive potential forecasting with advanced motion prediction techniques."}]}