{"title": "AI-Driven Intrusion Detection Systems (IDS) on the ROAD dataset: A Comparative Analysis for automotive Controller Area Network (CAN)", "authors": ["Lorenzo Guerra", "Linhan Xu", "Paolo Bellavista", "Thomas Chapuis", "Guillaume Duc", "Pavlo Mozharovskyi", "Van-Tam Nguyen"], "abstract": "The integration of digital devices in modern vehicles has revolutionized automotive technology, enhancing safety and the overall driving experience. The Controller Area Network (CAN) bus is a central system for managing in-vehicle communication between the electronic control units (ECUs). However, the CAN protocol poses security challenges due to inherent vulnerabilities, lacking encryption and authentication, which, combined with an expanding attack surface, necessitates robust security measures. In response to this challenge, numerous Intrusion Detection Systems (IDS) have been developed and deployed. Nonetheless, an open, comprehensive, and realistic dataset to test the effectiveness of such IDSs remains absent in the existing literature. This paper addresses this gap by considering the latest ROAD dataset, containing stealthy and sophisticated injections. The methodology involves dataset labelling and the implementation of both state-of-the-art deep learning models and traditional machine learning models to show the discrepancy in performance between the datasets most commonly used in the literature and the ROAD dataset, a more realistic alternative.", "sections": [{"title": "1 INTRODUCTION", "content": "With the rapid development of Internet of Things (IoT) and Internet of Vehicles (IoV) technologies, network-managed vehicles, such as Autonomous Vehicles and Connected Vehicles, are progressively taking the place of traditional automobiles. Within IoV systems, there are typically two core components: intravehicle networks (IVNs) and external networks. In IVNs, the core infrastructure is the Controller Area Network (CAN) bus, which enables communication among Electronic Control Units (ECUs). In contrast, external vehicular networks utilize Vehicle-to-Everything technology to establish links between intelligent vehicles and other IoV elements.\nThe surge in connectivity has created a breeding ground for vulnerabilities. Malicious actions can be injected remotely through wireless communication systems, or physically through vectors like OBD-II ports, USB interfaces, CD drives, and more. In response to the growing threats, Intrusion Detection Systems (IDS) have emerged as a crucial defense mechanism. Leveraging the outstanding performance demonstrated by artificial intelligence, we aim to showcase the capabilities of various deep learning and conventional machine learning techniques in identifying anomalous behaviors.\nBy taking into consideration that the effectiveness and robustness of an Intrusion Detection System (IDS) are not solely dependent on the capabilities of the Al model in use, but also on the characteristics of the training dataset, we initiate the process of training different models using a unique dataset [28] that includes 11 discrete categories of stealthy attacks, validated on a real vehicle, marking a significant departure from previous datasets, which were predominantly composed of few unrealistic attacks [14]. Starting by labeling [28], this paper's contributions extend to the evaluation of a wide range of both supervised and unsupervised deep learning techniques, including the Transformer-based Attention Network (TAN) developed by Nguyen et al. (2023) [21], the Deep Convolutional Neural Network (DCNN) developed by Song et al. (2020) [24], and the model based on Long Short-Term Memory"}, {"title": "2 BACKGROUND AND LITERATURE REVIEW", "content": "Controller Area Network Bus\n2.1.1 Protocol. The CAN Bus, developed by Bosch in the 1980s for Local Area Networks (LAN), is a message-based protocol designed to enable numerous electric components, e.g., microcontrollers, ECUs, sensors, devices, and actuators, throughout the in-vehicle system to communicate with each other through a dual-wire bus. A standard CAN data frame (or message), featured in Figure 1, consists of several fields. The most important fields are described as follows:\n\u2022 Identifier (CAN ID): The CAN ID is represented by 11 bits in the standard format (CAN 2.0A) or 29 bits if the extended format is used (CAN 2.0B). It determines the priority of each message within the network. The CAN physical layer uses wired-AND signalling, meaning that a dominant level would be represented by a logical 0 and a recessive level by a logical 1, so the lower the ID, the highest the priority.\n\u2022 Data Length Code (DLC): Located within the control field, this parameter indicates the number of bytes present in the data field, with a valid range extending from 0 to 8 bytes.\n\u2022 Data field: Contains the actual contents of the message, which can be up to 8 bytes in size.\n\u2022 Cyclic Redundancy Check (CRC): a built-in error detection mechanism that ensures the reliability of the communication by detecting transmission errors and requesting a re-transmission if necessary.\n2.1.2 CAN vulnerabilities. Because of its simplicity, the CAN bus lacks essential security measures:\n\u2022 Missing Authentication: ECUs do not have to authenticate to be able to transmit messages on the bus, every device can connect and it is immediately able to receive and transmit data, which makes the bus very flexible but vulnerable to intruders. In a normal scenario, the ECU corresponding to a precise functionality, for example, the wheel speed sensor communicating the speed at which the vehicle is going, will only send information concerning its domain, and it would never transmit frames reporting the coolant temperature. But protocol-wise nothing prevents the ECU from sending any type of information, which in case of an intruder could lead to spoofing attacks performed with ease.\n\u2022 Missing Encryption: the data transmitted on the CAN bus is transparent and it is broadcasted to every ECU, meaning that any attacker could eavesdrop on unencrypted communication without anyone noticing. Combined with the missing authentication, this can lead to more complex attacks harder to detect since the normal behavior of ECUs can be anticipated, potentially suppressing the real messages. Spoofing attacks are also easy to perform by exploiting the transparency and the missing authentication, making detection exceptionally hard if such attacks are performed correctly.\nSome approaches to secure the communication on the bus have been experimented during the years [10], but unfortunately they have not gained enough traction. Consequently, the protocol does not respect 2 of the 3 fundamental properties focused on by information security principles, which are summarized by the CIA triad, Confidentiality, Integrity, Availability:\n\u2022 Confidentiality is not respected because of the missing encryption, since any intruder is able to eavesdrop on all the traffic just by connecting to the CAN bus.\n\u2022 Integrity is respected thanks to the CRC, detecting bit errors, while error frames force the bus dominant longer than the bit stuffing rule. Furthermore, automatic re-transmission occurs until the error limit is reached.\n\u2022 Availability is not respected because the authentication is missing, anyone connected to the bus can flood it with high-priority frames, overwhelming the communication and preventing the ECUs from sending any message.\nThe most difficult task for an attacker, considering the critical vulnerabilities of the CAN protocol, would be to access the bus. The main attack vectors are two [12], one is physical access, the other one is through one of the many wireless interfaces.\nTo reach the bus through physical access, the simplest way would be through the OBD-II port, mentioned in the previous section. This connector exposes the CAN bus without needing any authentication, so an intruder would be able to eavesdrop and inject messages just by connecting a malicious component to it. It is also possible to leave the component attached indefinitely, concealing it in the dashboard, where the OBD-II port is most commonly found. Another way to get physical access would be to install a counterfeit component in the car, so the supply chain itself needs to be secured, and only authorized repair shops should be able to replace components. Reaching the CAN bus through one of the wireless interfaces is less simple and would require such interfaces to be themselves vulnerable. Because of the large number of these devices in recent vehicles, it is not rare to find a vulnerability in one of them leading to access to the CAN bus.\nA challenge-response mechanism protects ECUs from being re-flashed and reading sensible memory. This challenge-response is performed through a seed-to-key challenge, but both seed and"}, {"title": "2.2 Literature review and research gaps", "content": "One of the first security analyses on real cars has been made in 2010 by Koscher et al. [12], assessing the behavior of the vehicle during specific attacks. They leveraged the security vulnerabilities of CAN to control a wide range of critical functions, like stopping the engine, disabling the brakes, or even braking on-demand individual wheels. However, they do not yet prove that these attacks are feasible remotely. In 2011 Checkoway et al. [5] analyzed purely the external attack surface of one vehicle to assess if it might be vulnerable to remote attacks exploiting the wireless interfaces present in the car, and they found out that it is indeed possible through multiple short-range and long-range vectors like Bluetooth or cellular interfaces.\nThe results of Checkoway et al. are particularly concerning if we take into consideration the paper published by Koscher et al.: these two studies show that intruders can preserve their anonymity controlling critical features of vehicles from long distances, potentially causing disastrous, life-threatening consequences.\nCharlie Miller and Chris Valasek are two researchers working on automotive cybersecurity who gained a reputation during the years by publishing multiple relevant papers on the topic. In 2013 [26] they tinkered with the CAN bus, exploiting its vulnerabilities to take control of critical functionalities of two different cars; in 2014 [17] they took Checkoway et al.'s previous research further by identifying the remote attack surface for a large range of vehicles, identifying the ECUs' capabilities and estimating the difficulty of remote exploitation; in 2015 [19] they brought to conclusion 3 years of research disclosing a long-range remote attack that can be performed on Jeep Cherokees without any physical interaction, causing Fiat Chrysler to recall 1.4 million vehicles [20]. One year later, in 2016 [18], they published another paper explaining how they performed a masquerade attack on the Jeep Cherokee and how they were able to deal with message confliction.\nCharlie Miller and Chris Valasek believe that attack detection represents an inexpensive and accurate way to greatly improve the security of CAN networks [17]. Current research on the topic focuses extensively on machine learning [1] and deep learning [15] approaches in order to reach an increasingly higher accuracy. Unfortunately, these systems are not yet perfect: in 2021 Bhatia et al. [2] explained how they developed a masquerade attack called DUET which could evade detection of Voltage-based Intrusion Detection Systems. This type of IDS is able to observe the voltage fingerprints of ECUs, thus recognizing the ones belonging to attackers. However, the DUET attack showed that VIDS are not a silver bullet against intrusions, so the authors introduced a lightweight defense mechanism called RAID, suggesting to modify the frame format in a protocol-compatible way in order to safeguard against the corruption of ECUs' voltage fingerprints.\nAccording to its design, an Intrusion Detection System can be categorized into two major families: anomaly-based and signature-based detection methods [16]. While signature-based IDSs compare the traffic with a database of known attack patterns, anomaly-based IDSs can be powered by machine learning techniques to model the normal behavior of the machine and they are able to detect unseen attacks as well.\nAlthough prior AI-based IDS models have yielded to promising results [29][11][24][21], there exists a remarkable gap in testing them on a more realistic dataset including sophisticated attack patterns. It is worth noting that the effectiveness of an IDS model depends heavily on the quality of the data it was trained on. Previously introduced approaches were tested on datasets characterized by a limited number of attack types, typically only three or four, which are considered simple and unrealistic as they are conducted in a testbed environment [14]. These attacks are easily detectable and not necessarily verified on a real car. To build a robust IDS able to detect stealthy attacks it is imperative to test the model against high fidelity attack scenarios."}, {"title": "3 DATASETS DESCRIPTION", "content": "ROAD dataset and Labeling\nThe Real ORNL Automotive Dynamometer (ROAD) dataset [28] includes 33 attack captures spanning 30 minutes and 12 ambient captures over 3 hours. It originates from a real undisclosed vehicle driven on a dynamometer of the Oak Ridge National Laboratory (ORNL) during 3 and a half hours of activity, reproducing various benign driving behaviors, while ambient and attack data were collected.\nThe logs are collected with the candump utility [3] and the output format is the following:\n(1040000000.000682) can0 OBA #04B7EC04000602C8\nUnixTimestamp Channel ID DataField\nThe dataset features eleven distinct classes depicted in Table 1 for which metadata for labelling was provided. An extra attack called \"accelerator attack\" is included in the dataset, although the labelling information was not disclosed by the authors due to the seriousness of the vulnerability.\nThe attack types can be summarized in 3 categories:\n(1) Fuzzing Attack: Frames with cycling IDs have been injected with a payload set to the maximum value (0xFFFFFFFF). This attack caused various physical effects, for example: the accelerator pedal became ineffective, the dash lights and headlights were illuminated and the seat positions moved.\n(2) Targeted ID Fabrication Attacks: These attacks are performed injecting a message immediately after the legitimate message targeting a specific ID. In this case only the target signal is modified. Differently from most of public datasets, the fabrication attacks in the ROAD dataset contain one"}, {"title": "3.2 The HCRL Car-Hacking dataset", "content": "The Car-Hacking dataset [7], according to Rajapaksha et al. (2023) [22], is the most popular dataset in literature, and in many recent publications it seems to be used without citation [28]. It is generated by injecting CAN messages into the Hyundai YF Sonata's CAN bus through the OBD-II port and includes both attack and regular messages. Each sample is composed by a timestamp, the CAN ID, the DLC and up to 8 bytes of the data field. The attack types are four:\n\u2022 DoS attack: This attack is simply performed by transmitting messages on the CAN bus with the ID containing only dominant bits (0) (i.e. ID=0x000) every 0.3 milliseconds. As seen in the previous section, the CAN bus is using wired-AND signaling, which means that the messages with the ID containing the largest number of dominant bits will be prioritized over any other ECU, which will have to patiently wait for the attack frame to be completely transmitted before trying to send another one. Therefore, an attacker with access to the CAN bus would simply need to continuously inject messages using this technique and the correct functioning of the system would be disrupted, needing a manual restart of the car [12].\n\u2022 Fuzzy attack: CAN messages with spoofed random ID and DATA values are injected every 0.5 milliseconds, causing an unexpected behavior of the vehicle.\n\u2022 RPM/Gear attack: CAN messages with spoofed ID relative to the RPM or Gear ECU are injected every 1 millisecond.\nFor each of the four attack datasets, the total number of messages is approximately 4,000,000 (Table 2), of which 13% to 16% are attack messages, therefore maintaining a relatively balanced attack proportion. There is a fifth file containing normal data in log format, but unfortunately, most of the papers employing this dataset seem to exclude the data contained in this additional log file, likely due to its limited benefits, as the other four CSV files already provide a considerable amount of benign messages."}, {"title": "3.3 The In-Vehicle Network Intrusion Detection Challenge dataset", "content": "The In-Vehicle Network Intrusion Detection Challenge dataset [9] was used during the \"Information Security R&D Data Challenge 2019\" and includes traffic data collected from three vehicles in stationary state: a Huyndai Sonata, a Kia Soul, and a Chevrolet Spark. We have used the datasets collected during the preliminary round, since they include three attack categories (Flooding, Fuzzy, and Malfunction) compared to the two attack categories of the final round. The attack types are the same of the Car-Hacking dataset, but with different names. The dataset is labelled and, like the Car-Hacking dataset, each sample is represented by a timestamp, a CAN ID, the DLC and the data field. For all three types of vehicles, the proportion of \"Flooding\" attacks is relatively high, about 20% of the"}, {"title": "4 FUNDAMENTALS OF MACHINE LEARNING AND DEEP LEARNING IDS MODELS", "content": "LCCDE and ML approaches\nTo compare neural network approaches to traditional machine learning ones, gradient boosting and decision tree based approaches have also been tested on the available datasets. Specifically we considered Random Forest, LightGBM and the LCCDE model. These methods, like other machine learning algorithms, are preferable because of their speed, efficiency and explainability. Furthermore, the Leader Class and Confidence Decision Ensemble (LCCDE) [29], an ensemble model based on gradient boosting algorithms, was able to reach state-of-the-art results. The ensemble algorithm is divided into two stages: training and prediction. In the training stage, the three base models are trained on the labeled data. For each class, the leader is selected based on the best F1-score of the models, obtained from cross-validation. In case of a tie in F1-score, the model with the highest speed is chosen.\nIn the prediction step, every model is first used to make predictions. Decisions are then taken based on the predicted classes:\n\u2022 If the predicted classes are the same, then this class will be the final prediction.\n\u2022 If the predicted classes are all different, the leader model associated with each predicted class is cross-referenced with the base learner that made the corresponding prediction. If a single pair of leader and base models align, their jointly predicted class is adopted as the final prediction. In cases where multiple pairs exist, the predicted class with the highest confidence level is selected as the ultimate prediction.\n\u2022 If only two of the predicted classes match, then the respective leader model is chosen for the final prediction.\nThe traditional machine learning models and the LCCDE were fed single frames with ID, DLC (if available) and data field as input and all these approaches involve multiclass classification, allowing a more precise prevention system based on the specific attack type detected."}, {"title": "4.2 LSTM-based model", "content": "LSTMs are a type of Recurrent Neural Networks (RNNs) that are frequently and effectively applied for sequence classification tasks, therefore we have selected the state-of-the-art LSTM model described by Hossain et al. [11] to test this approach on the previously specified datasets, since it achieved outstanding results on the Survival Analysis Dataset [8]. The authors have tested many hyperparameters for both binary and multiclass classification. The best performing model was composed by a single LSTM layer with 512 units using single time steps and batches of size 512 as input. Each input sample includes ID, DLC (if available) and the bytes of the data field. We have performed multiclass classification on every dataset and binary classification only on the ROAD dataset, to compare its results with the DCNN and the TAN models. However, the approach of analyzing single messages can be considered vulnerable to replay attacks and since the authors used single time steps, the utility of a LSTM for this purpose is questionable."}, {"title": "4.3 DCNN", "content": "The IDS model proposed by Song et al. [24] is based on a convolutional neural network (CNN), aimed at detecting the patterns of IDs appearing in the CAN traffic. During the training phase, the model employs a frame builder to extract sequences of IDs from the logged traffic data. To facilitate CNN processing, which typically works with grid-formatted input, the temporal sequential patterns of CAN traffic are processed as spatially-local correlation. The frame builder extracts the 29-bit identifiers, which are the maximum number of bits for representing an ID when using the 'extended format' [23], from the most recent 29 messages and builds a 29 \u00d7 29 bitwise frame by stacking them. A sliding window of size 29, with a step of 29 is used. This means that attack patterns might extend across 2 different frames and could not be easily recognized by the DCNN, which is unable to retain memory across frames. For this reason, we tested a different approach modifying the step of the sliding window to one, enabling the model to catch every pattern involving IDs and extending for any 29 consecutive frames.\nThe frame builder uses pure bits as input data without preprocessing, ensuring computational efficiency, given the high volume of messages on a CAN bus. The bit representation of the identifier explicitly illustrates the fluctuation of identifier patterns. The bit representation of the identifier, denoted as:\n$ID = b_i \\textrm{ (for i = 0, ..., 28)}$\nis assembled into a data frame as:\n$FRAME = b_{ij} \\textrm{ (for i = 0, ..., 28)}$\nwhere $b_{ij}$ represents the j-th bit value of the i-th ID in a frame. Each frame (grid) is then labeled as one if it contains an attack message, or zero for normal traffic."}, {"title": "4.4 \u03a4\u0391\u039d", "content": "The last approach for intrusion detection that we adopted in this study relies on a transformer-based architecture developed by Nguyen et al. [21]. Differently from the original transformer architecture [27], the TAN architecture only uses the encoder, the most essential component for classification, thus resembling the highly influential ViT model produced by Google [6]. Furthermore, the model has been tested for transfer learning, which aims to address a significant challenge in in-vehicle intrusion detection. This method enables the application of a model trained on a large amount of data from a specific vehicle to a different vehicle for which less data is available.\nThe authors have explored two different approaches, one which analyses single messages and their every field, but it is vulnerable to replay attacks, and one that analyzes sequences of CAN IDs. We have chosen the latter as it is a more solid choice and it could achieve very good results, despite part of the information relevant to intrusion detection is discarded. The sequence creation process involves a sliding window with a step equal to one. Multiple window sizes have been tested and we have selected a window size of 16 because of its balance between performance and memory requirements. The sequence creation process is illustrated in Figure 3 and consists in grouping sequences of consecutive CAN IDs, which are labelled as 1 if they contain an attack message, or 0 otherwise. This choice implies the approach of binary classification, therefore impeding us to distinguish what types of attack are detected."}, {"title": "5 EXPERIMENTAL ENVIRONMENT AND RESULTS ANALYSIS", "content": "Comprehensive Framework: Experiment Setup, Data Preprocessing, and Performance Evaluation Metrics\nOur research involves multiple models and multiple datasets, which demand distinct preprocessing for each case. In the case of the ROAD dataset, the logs are not labelled, so we parsed the metadata made available by the authors and used it to systematically parse and label each sample. Finally, we merged every log for the multiclass classification task, while we separately merged each log of every attack type for binary classification, resembling the HCRL Car-Hacking dataset setup.\nCommonly to every dataset, we parsed each field into CAN ID, DLC (unavailable for the ROAD dataset) and data field. We padded the latter to 8 bytes and then we divided it into 8 different features, allowing detection of attacks targeting specific bytes of this field. Each field is then converted from hexadecimal to decimal format, in order to be processed by the selected models, and every dataset is split into training and test sets with a 80/20 ratio.\nIt's worth noting that the ROAD dataset is highly imbalanced, as it can be seen on Table 1, and some classes need to be oversampled. For this reason we employed the SMOTE algorithm [4] on the training set to increase the number of samples of each attack to a fixed value of 100,000, therefore ensuring an equal distribution between them, that otherwise could have not been detected from any metric produced by our models after building the sequences. The In-Vehicle Network Intrusion Detection Challenge dataset has been oversampled in the same way. The resulting data can be directly fed to the traditional machine learning models and the LSTM-based"}, {"title": "5.2 Experimental Results and Discussion of the Models", "content": "LCCDE and ML approaches. The performance of the LCCDE model, consisting of three gradient boosting classifiers (LightGBM, CatBoost and XGBoost), has been reproduced on the HCRL Car-Hacking dataset and we obtained very good and constant results on the In-Vehicle Network Intrusion Detection Challenge dataset. However, the model has not performed as well on the ROAD dataset, despite having analyzed both the ID and data field, with an average F1 score of 0.3212 and standard deviation of 0.1723. It is worth noting that this model could not detect at all two of the five masquerade attacks. A similar situation involves Random Forests which on average outperform slightly LightGBM, but had worse results than LCCDE. Furthermore, the LCCDE model was the one that required the most computation time due to the original implementation and impossibility of parallelization, requiring about 32 hours and 40 minutes of running time for the classification task on the ROAD dataset, while LightGBM has only taken about 6 minutes, XGBoost has taken about 10 minutes and CatBoost has taken about one hour and 27 minutes, which means that the vast majority of the computation time is due to the LCCDE algorithm. The code for the LCCDE model was made available by the authors [13].\nDespite being more explainable and lightweight in terms of memory usage, these models were not able to reach satisfactory results on the ROAD dataset, therefore we can conclude that traditional machine learning approaches are not fit for this task."}, {"title": "5.2.2 LSTM-based model", "content": "The model showed an exceptional performance for binary classification on the ROAD dataset (Table 7), perfectly classifying almost every attack type except the fuzzing attack, where it still reached a very good F1 score of 0.9977. Unfortunately, a binary classification approach is not ideal for the purpose of an IDS, as it would require a different pre-trained model for every different attack type, making it particularly expensive and challenging to update. We can conclude that its real-world application is questionable.\nFor the multiclass classification on the ROAD dataset, the LSTM-based model was able to achieve, on average, the best performance compared to the other traditional machine learning models. Nonetheless, its performance is largely unsatisfying and the perfect recall and low precision for most of the attack types show a tendency to produce a large number of false positives. The model was able to obtain a good F1 score on the fuzzing attack thanks to the simplicity in detecting the data field set to the maximum value (0xFFFFFFFFFFFFFF) for every attack message. As for the other models, it reached particularly negative results on the Max Engine Coolant Temp Attacks for which it was unable to correctly classify any attack sample in the test set, likely due to their insufficient number (Table 1)."}, {"title": "5.2.3 DCNN", "content": "We have been able to reproduce the performance shown on the HCRL Car-Hacking dataset, which was built by the same authors of this model [24]. The results were not as stable on the In-Vehicle Network Intrusion Detection Challenge dataset, having a higher average standard deviation of 0.05 on the F1 score metric, while the model has seen worse performance and dramatic fluctuations on the ROAD dataset. This has probably been caused by the fact that this dataset contains attacks acting also on the data field and they are much more difficult to detect because of their stealthiness, described on the Section 3.1. Considering this, the DCNN has performed fairly well, sometimes producing less false positives than the TAN model, with a notable exception for the fuzzing attack. This attack is easily identifiable by the payload, always set on the maximum value, but this model only uses the ID field, that in this case has cycling IDs. The cycling pattern is hardly detectable from the input frame containing 29 consecutive IDs, which explains the unreliability of the model.\nAs mentioned in Subsection 4.3, the original frame generation of the DCNN is using a sliding window of size 29 with a step of 29, which means that some attack patterns shown in ID bits could be cut into two different frames. For this reason we created a different version of frame generation, employing a step equal to one, and we tested it on the ROAD dataset, labelling it as DCNNv2. As Table 7 shows, thanks to this small modification, the model could reliably and constantly improve its F1 score, going from an average of 0.6514 to an average of 0.7468, and it was able to beat the F1 score of the TAN for the majority of the attack types. Nonetheless, as for the LSTM-based model and the TAN, this approach is hardly applicable in a real-world scenario, as it would require multiple models running in parallel to detect only predefined attacks, other than a non negligible overhead for the frame generation."}, {"title": "5.2.4 TAN", "content": "The TAN was able to maintain a good performance for most of the attacks, and it reached very good F1 scores for most of the attack types except for the Max Engine Coolant Temp Attacks, which, as mentioned earlier, only have few attack samples available. Furthermore, its recall is always higher than its precision (as Table 7 shows), even drastically in the case of the variations of the Max Engine Coolant Temp Attacks, which means that it produces more false positives than false negatives.\nLike we previously mentioned, this model performs binary classification on sequences of CAN IDs, so it cannot distinguish the attack class detected and it was tested on every attack type singularly."}, {"title": "6 CONCLUSION", "content": "After an accurate analysis of different models on the novel ROAD dataset and two datasets established in previous literature, the HCRL Car-Hacking dataset and the In-Vehicle Network Intrusion Detection Challenge dataset, we encountered a sensible disparity in the results. Every model performing multiclass classification that had shown almost perfect predictions on the former datasets,"}]}