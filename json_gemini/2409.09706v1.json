{"title": "Exploring Utility in a Real-World Warehouse Optimization Problem: Formulation Based on Quantun Annealers and Preliminary Results", "authors": ["Eneko Osabat", "Esther Villar-Rodriguez", "Ant\u00f3n Asla"], "abstract": "In the current NISQ-era, one of the major challenges faced by researchers and practitioners lies in figuring out how to combine quantum and classical computing in the most efficient and innovative way. In this paper, we present a mechanism coined as Quantum Initialization for Warehouse Optimization Problem that resorts to D-Wave's Quantum Annealer. The module has been specifically designed to be embedded into already-existing classical software dedicated to the optimization of a real-world industrial problem. We preliminary tested the implemented mechanism through a two-phase experimentation against the classical version of the software.", "sections": [{"title": "I. INTRODUCTION", "content": "Being immersed in the NISQ-era, quantum-classical hybrid systems are destined to play a major role in the adoption of quantum computing to deal with industrial problems [1]. Within this framework, the challenge lies in figuring out how to combine classical and quantum computing in a way that produces a tandem that ultimately performs better than strictly classical conceptualizations.\nThis study focuses on a real-world industrial problem named Warehouse Optimization Problem (WOP). This problem describes a warehouse composed of a set of L locations and a number of I items to store. On the one hand, each location l \u2208 L is defined by its capacity $c_l$ (measure in m\u00b2), its type (floor or shelf), the time required to place an item on it, and a constant additional time for each height level. On the other hand, each item i \u2208 I is characterized by its type ID and the area $a_{i,l}$ it occupies, which is an integer constant value except for prohibited placements (typically in shelf-type locations) where $a_{i,l} = \\infty$. In addition, items of the same type can be stacked up to a maximum height of $h_i$ (where $h_i$=1 if item i cannot be stacked). The main purpose of WOP is to assign a storage location l and a specific height (if stacked) to each item i, where the objective function is both to minimize the storage time ($O_1$) and the total area occupied ($O_2$).\nThis problem has been identified by a Spanish company called Ertransit, which already counts with a classical Proof-of-Concept (PoC) algorithm to solve WOP. This PoC, which workflow is depicted in Figure 1, is composed of two modules: i) initialization module, devoted to creating a set of random feasible solutions to WOP; and ii) local-search module, which selects the best solution generated in the previous step and optimizes it using a local search optimization technique.\nThe tests conducted have shown that, despite promising results, this PoC has room for improvement. Taking this opportunity as our main motivation, this paper presents a quantum-classical mechanism coined as Quantum Initialization for Warehouse Optimization Problem (QI4WOP), which resorts to the Leap Constrained Quadratic Model (CQM) Hybrid Solver (LeapCQMHybrid) of D-Wave [2]."}, {"title": "II. DESCRIPTION OF QI4WOP MODULE", "content": "The tests on the classical PoC have demonstrated that the initialization module consumes a lot of computational resources. In response to that, the QI4WOP module presented in this paper substitutes the current initialization module. For this reason, QI4WOP is not focused on solving the whole WOP but on finding a large number of feasible solutions to the problem in a reduced computational time. Having said that, QI4WOP module is divided into two phases: i) First level placement phase and ii) Post-processing phase. Figure 2 represents the workflow of the $QI4WOP$ module.\nP1. First level placement phase: This first step is in charge of solving the here called sub-WOP subproblem, whose objective is to store as many items as possible at the ground level of the available set L of locations. This is the step in which LeapCQMHybrid is used. In a nutshell, LeapCQMHybrid deals with problems built as CQM, which is a mathematical model defined by integer, real, and binary variables. CQM admits linear and quadratic restrictions, allowing the introduction of equalities and inequalities and employing quadratic objective functions.\nRegarding the codification, a solution to sub-WOP is represented as a set $X = {X_1,...,X_I}$ of lists, in which each $X_i$ is associated with a single item i. Thus, $X_i = {x_{i1},..., x_{iL}}$, where $x_{il}$ is 1 if the item i is stored in location l, and 0 otherwise.\nThe main objective $o$ of sub-WOP is to maximize the amount of items stored, which can be formulated as\n$o = min - \\sum_{l=1}^L x_{il} \\forall i \\in {1, ..., I}$.\nNote that the objective is represented as a minimization due to CQM requirements. Furthermore, this objective is subject to four restrictions. The first constraint establishes that an item i must be stored in, at most, one location l:\n$\\sum_{l=1}^L x_{il} \\leq 1 \\forall i \\in {1, ..., I}$.\nThe second restriction assures that items located in one specific location l do not exceed its maximum available area:\n$\\sum_{i=1}^I x_{il} * a_{il} \\leq C_l \\forall l \\in {1,..., L}$.\nThe third restriction guarantees that only enabled items can be placed on shelves:\n$\\sum_{l=1}^L x_{il} * A_{il} \\geq 0 \\forall i \\in {1, ..., I}$.\nLast constraint imposes that all non-stackable items are stored.\n$(\\sum_{l=1}^I x_{il}) - p_i \\geq 0 \\forall i \\in {1, ..., I}$.\nwhere $p_i$ is 0 if item i can be stacked and 1 otherwise.\nP2. Post-processing phase: when solving sub-WOP, LeapCQMHybrid creates a population of partial solutions. Each of them undergoes two classical post-processing steps:\nStack non-stacked items: This step is devoted to completing the partial solution by stacking all items that have been left unstacked after P1. First, the number of stacks that can be built for each item type is calculated. Then, each unstacked item is assigned to one stack, respecting the maximum height $h_i$ defined for its corresponding item type. Thanks to this step, the partial solution is transformed into a complete WOP solution.\nCreate mutant: The motivation for this step is to add diversity to the population of solutions. To do this, a new mutant solution is created from the previously generated WOP solution, where all items placed at ground level are stacked in a feasible pile with a 50% probability. Solutions created in this step are added to the population.\nLastly, P2 ends by eliminating all repeated and unfeasible solutions (originated if any item remains unstacked after the post-process)."}, {"title": "III. PRELIMINARY EXPERIMENTATION", "content": "We conducted a two-phase experimentation to preliminary assess QI4WOP. The objective of the first phase is to compare the efficiency of both the classical initialization module (blue steps in Figure 1) and QI4WOP for creating feasible solutions. Five WOP instances have been used\u00b9, each named as LX_IY_TZ, where X is the number of available locations, Y is the amount of items to store, and Z is the number of item types. We depict in Table I the outcomes of these first tests, from which we can safely conclude that QI4WOP is able to generate significantly more feasible solutions in remarkably less time. Moreover, while the classic initialization struggles when the size of the instance increases, QI4WOP demonstrates to perform better as long as the complexity of the problem, and thus the solution search space, increases.\nThe objective of the second phase is to measure the quality of the solutions produced by QI4WOP. For this purpose, we have compared the results obtained by the existing full-classical PoC against the PoC with QI4WOP embedded (by replacing the steps outlined in Figure 1) when solving the biggest instance, L4_1124_T3. To draw rigorous conclusions, the execution times of the classical initialization module have been significantly increased so that the number of initial solutions generated by both methods is the same. After 25 independent runs, the PoC with QI4WOP embedded has outperformed the full-classical PoC in 48% of the executions.\nAs a general conclusion, we can preliminary state that the use of QI4WOP leads to similar performance in terms of results quality, while the savings in terms of computational time are remarkable. This latter aspect can certainly prove to be key in real industrial environments. The results obtained allow us to highlight the work carried out in this research as an example of what quantum computers can offer today, representing the first steps towards obtaining what is known as quantum utility [3]. In order to substantiate these conclusions, further tests will be carried out in the near future."}]}