{"title": "Scam Detection for Ethereum Smart Contracts: Leveraging Graph Representation\nLearning for Secure Blockchain", "authors": ["Yihong Jin", "Ze Yang"], "abstract": "The detection of scams within Ethereum smart contracts is a critical challenge due to their increasing exploitation\nfor fraudulent activities, leading to significant financial and reputational damages. Existing detection methods often\nrely on contract code analysis or manually extracted features, which suffer from scalability and adaptability\nlimitations. In this study, we introduce an innovative method that leverages graph representation learning to\nexamine transaction patterns and identify fraudulent contracts. By transforming Ethereum transaction data into\ngraph structures and employing advanced machine learning models, we achieve robust classification performance.\nOur method addresses label imbalance through SMOTE-ENN techniques and evaluates models like Multi-Layer\nPerceptron (MLP) and Graph Convolutional Networks (GCN). Experimental results indicate that the MLP model\nsurpasses the GCN in this context, with real-world evaluations aligning closely with domain-specific analyses. This\nstudy provides a scalable and effective solution for enhancing trust and security in the Ethereum ecosystem.", "sections": [{"title": "1 INTRODUCTION", "content": "The proliferation of Ethereum smart contracts has revolutionized decentralized finance, enabling automated and\ntrustless transactions across a wide range of applications. However, this innovation is accompanied by significant\nchallenges, including the exploitation of smart contracts for fraudulent activities. Scam contracts leverage\nvulnerabilities to defraud users, leading to substantial financial losses and undermining trust in the Ethereum\necosystem. Consequently, the development of robust scam detection mechanisms is of critical importance.\nCurrent scam detection methods can generally be categorized into two main approaches: those based on\ncontract code and those focused on behavior. Contract code analysis often faces scalability challenges due to the\nexponential growth of smart contracts and the prevalence of non-open-source code. Similarly, methods relying on\ntransaction behavior depend heavily on expert-crafted features, limiting their adaptability to the evolving nature of\nfraud. These limitations necessitate a scalable and automated approach to scam detection.\nIn this study, we present a new framework that utilizes graph representation learning to tackle these challenges.\nBy modeling Ethereum transactions as graphs, our approach captures the inherent network patterns and\ninteractions that characterize fraudulent activities. We utilize publicly available datasets, specifically COVID-19-"}, {"title": "2 RELATED WORK", "content": "Detecting fraudulent activities in Ethereum smart contracts has become a prominent research focus, with existing\napproaches generally divided into two categories: methods based on contract code analysis and those focused on\ndetecting abnormal trading behaviors."}, {"title": "2.1 Detection Methods Based on Contract Code", "content": "Initial efforts to identify fraudulent smart contracts focused on analyzing contract code, either manually or through\nautomated tools. These methods rely on statistical features and bytecode analysis to classify contracts. For instance,\nNorvill et al. [1] applied K-medoids clustering to group similar contract bytecodes, facilitating the classification of\nunknown contracts. Similarly, Chen et al. [2] utilized statistical features such as opcode frequencies and\nimplemented supervised learning models like XGBoost and Random Forest to detect Ponzi schemes.\nHowever, code-centric methods face several limitations:\nScalability Issues: These methods struggle to keep pace with the exponential growth of smart contracts.\nThe proliferation of non-open-source contracts further compounds this challenge, rendering many\nbytecode analysis techniques ineffective. For instance, symbolic execution-while powerful for\nidentifying vulnerabilities often encounters path explosion, making it impractical for large-scale\ndeployment [3].\nObfuscation and Similarity: Fraudsters increasingly employ code obfuscation or reuse parts of legitimate\ncode, reducing the discriminative power of methods relying solely on bytecode analysis. A prominent\nexample is the difficulty in detecting scams disguised as legitimate decentralized applications (dApps).\nThese limitations highlight the need for more robust and scalable approaches, as existing methods cannot\nreliably adapt to the growing diversity of scams."}, {"title": "2.2 Detection Methods Based on Abnormal Transaction Behavior", "content": "Unlike code-based approaches, transaction behavior analysis focuses on leveraging features derived from contract\ninteractions to identify scams. A Long Short-Term Memory (LSTM) network is utilized to extract features related to"}, {"title": "2.3 Summary and Challenges", "content": "Both contract code-based and behavior-based approaches provide significant contributions to the analysis of\nsmart contracts. However, their limitations highlight the need for a more scalable and automated approach.\nRecently, graph algorithms and machine learning approaches have been employed independently in risk alert\nsystems [11, 12, 13, 15], utilizing their respective strengths to detect potential threats across various domains. Recent\nwork on influence pathway discovery on social media explores the dynamics of ideological shifts driven by\ninfluencers, utilizing unsupervised interpretable embeddings to map beliefs into low-dimensional spaces for\nanalysis [10]. While this study focuses on social media, its methodological approach to analyzing network\ninteractions and influence propagation shares parallels with our graph-based representation of Ethereum\ntransactions. This motivates our proposed method, which combines the strengths of graph representation learning\nwith transaction behavior analysis, circumventing the reliance on code features or manually crafted attributes."}, {"title": "3 METHODOLOGY", "content": "This section outlines the end-to-end methodology for detecting scams in Ethereum smart contracts. It covers data\nacquisition, graph construction, feature engineering, handling label imbalance, and model training, ensuring a\ncomprehensive understanding of our approach."}, {"title": "3.1 Data Source and Preprocessing", "content": "We retrieved transaction records using the Google BigQuery Ethereum Cryptocurrency Database. To align with our\nground-truth scam labels, which are derived from a COVID-19-themed scam dataset [6], only transactions from\n2019 onward were considered. The transaction table was processed to construct a graph where nodes represent\nEthereum addresses (both externally owned accounts (EOAs) and contract accounts), and directed edges represent\ntransactions.\nTo improve computational efficiency, we performed data cleansing by removing nodes with a degree (inbound\nand outbound combined) of less than 2. This reduced the graph size from 137,733 to 12,874 nodes. Features for\neach node were normalized to ensure stability during training."}, {"title": "3.2 Graph Data Generation and Feature Representation", "content": "We transformed the transaction records into a directed graph, where features were assigned to nodes to enable\ngraph-based representation learning. The features capture critical topology information:\nDegree Centrality (3 dimensions): Measures the number of inbound or outbound edges for a node,\nreflecting trading frequency. High values indicate active trading, potentially linked to both normal and\nfraudulent behavior.\nPageRank Value (1 dimension): Evaluates a node's importance within the graph based on its connectivity,\nhelping detect scam addresses that artificially enhance their centrality. PageRank is a commonly used\nalgorithm in graph network analysis and recommendation [8,9].\nHITS Hub and Authority Values (2 dimensions): Determines node importance through two values-hub\n(outbound connections) and authority (inbound connections). Scams often function as hubs or authorities,\nmaking this critical for fraud detection.\nConnectivity (2 dimensions): Quantifies the number of reachable nodes (inbound or outbound) from a\ntarget node, revealing its relational network.\nShortest Path Length Maximum and Sum-up (4 dimensions): Focuses on the local patterns of shortest\npaths involving a target node, highlighting proximity and unique placement strategies of scam nodes.\nTransaction Value Sum (1 dimension): Considers the transaction volume through a node in Ethereum's\nWei currency, with high values potentially indicating fraudulent high-volume activity.\nEdges were assigned weights reflecting transaction values in Wei (Ethereum's smallest denomination). This\nfeature provides an intuitive measure of trading volume associated with each address."}, {"title": "3.3 Aggregate within EOA Neighborhood for Contract Features", "content": "The focus of our analysis is on smart contract nodes, as EOA nodes lack direct labels. To address this, we aggregate\nfeatures from EOAs within the neighborhood of each contract node. This aggregated feature vector replaces the\noriginal contract features. However, this process removes all existing edges in the graph. To address this, we\ngenerate new edges between contract nodes based on shared EOA neighbors. Specifically:\nFor Multi-Layer Perceptron (MLP), edges are irrelevant as the model operates solely on node features.\nFor Graph Convolutional Networks (GCN), edges are reconstructed to preserve connectivity between\ncontract nodes. This enables the GCN to effectively propagate information across the graph structure.\nAfter processing, the graph contains 3,409 contract nodes, including only 11 scam nodes with positive labels.\nThis extreme class imbalance necessitates specialized techniques, which we introduce below."}, {"title": "3.4 Addressing Class Imbalance", "content": "The extreme class imbalance in our dataset-only 11 positive labels assigned to contract nodes-poses a significant\nchallenge to the classification task. This imbalance adversely affects model performance, necessitating explicit\nintervention to mitigate its impact.\nTo handle class imbalance in the Multi-Layer Perceptron (MLP) model, we apply a combination of SMOTE\n(Synthetic Minority Oversampling Technique) and ENN (Edited Nearest Neighbors):\nSMOTE: Creates synthetic samples for the minority class by leveraging k-nearest neighbors.\nENN: Eliminates noisy samples from the majority class by evaluating their surrounding neighborhood."}, {"title": "3.5 Evaluation Metrics", "content": "To evaluate the performance of our models (MLP and GCN), we use the F1-score as the primary metric. This metric\nis well-suited for our imbalanced dataset as it balances the consideration of false positives and false negatives,\nproviding a fair assessment of model performance across both minority and majority classes. The models were\ntrained using Adam optimizer with weight decay and L2 regularization to prevent overfitting. Dropout was\nemployed for further robustness."}, {"title": "4 EXPERIMENTS AND DISCUSSION", "content": "This section outlines the experimental setup, assesses the performance of the proposed models, and validates the\nfindings with real-world data."}, {"title": "4.1 Experiment Setup", "content": "We conducted experiments using the dataset derived from the Google BigQuery Ethereum Cryptocurrency\nDatabase. The dataset was divided into training (80%) and testing (20%) sets, ensuring a balanced distribution of\npositive and negative samples. Both MLP and GCN models were implemented using PyTorch, and hyperparameters\nwere fine-tuned to achieve optimal performance. Key settings are listed below in Table 1:"}, {"title": "4.2 Performance Comparison", "content": "The F1 score, which harmonizes precision and recall, was chosen as the primary evaluation metric due to its\nsuitability for imbalanced datasets. The training loss and F1 scores for both models on training and test sets are\nillustrated in the figures below:\nMLP Results: The MLP model exhibited stable convergence on the training set and delivered outstanding\nperformance on the test set. The F1 score on the test set highlighted its robustness and ability to generalize\neffectively (Figure 1).\nGCN Results: While the GCN model performed comparably on the training set, its test set results showed\ngreater variability, suggesting weaker generalization (Figure 2)."}, {"title": "4.3 Real-World Validation", "content": "To validate the model's predictions, we cross-referenced the results with external tools such as EtherScan and\nisthiscoinascam. The safety scores and ratings of scam-predicted and non-scam-predicted contract addresses were\nevaluated. Table 3 provides examples of scam-predicted contracts, while Table 4 summarizes non-scam-predicted\ncontracts and their evaluations."}, {"title": "4.4 Parameter Visualization", "content": "We analyzed the weight parameters of the first linear layer from the optimal MLP model to visualize the\ncontribution distribution of different topology feature dimensions. The results, shown in Figure 3, indicate that the\nfeatures corresponding to the 6th, 7th, and 11th positions contribute the most to the first layer's aggregation. These\nfeatures represent inbound/outbound shortest path lengths and outbound connectivity, suggesting that\nconnectivity-related topology information plays a critical role in detecting scams within the transaction network."}, {"title": "4.5 Future Directions", "content": "Despite the promising results of our proposed framework, several challenges may arise in real-world deployment,\nwarranting further discussion and exploration of potential solutions.\nReal-Time Data Processing: Efficient real-time data processing is critical for practical application.\nFetching blockchain data directly by setting up a fully operational Ethereum node can be resource-\nintensive and complex. A more practical solution involves integrating with platforms such as Google\nBigQuery or Amazon Redshift, which maintain Ethereum transaction data as public datasets with near\nreal-time updates. These platforms not only reduce computational overhead but also simplify data\naccess, facilitating scalable and timely analyses.\nModel Update and Scalability: The dynamic nature of blockchain ecosystems necessitates frequent\nupdates to detection models to maintain accuracy. Batch processing can be employed to retrain models\nperiodically, leveraging updated transaction data. Additionally, incorporating external data sources,\nsuch as Etherscan's user-provided ratings, as training data could enhance model robustness and\nadaptability to emerging scam patterns. This strategy may mitigate the risk of obsolescence in evolving\nenvironments.\nCross-Chain Scam Detection: Scams are not confined to a single blockchain; cross-chain activities,\nespecially those involving bridges and wrapped tokens, represent a growing concern. Developing\ndetection mechanisms that span multiple blockchains could significantly improve security across the\necosystem. Future research could focus on identifying patterns of suspicious activities involving\ncentralized exchange-managed addresses and interactions across chains."}, {"title": "5 CONCLUSION", "content": "The rapid growth of Ethereum smart contracts has created opportunities for innovation while simultaneously\nincreasing the risk of scams, undermining trust and financial security within the blockchain ecosystem. This study\nintroduces a novel framework for scam detection leveraging graph representation learning. By modeling Ethereum\ntransactions as graphs and employing advanced machine learning models, we demonstrated an effective and\nscalable solution for identifying fraudulent smart contracts. Our approach combines robust feature engineering\nwith two learning architectures: Multi-Layer Perceptron (MLP) and Graph Convolutional Networks (GCN).\nExtensive experiments revealed that the MLP model outperformed GCN in terms of generalization, as the node\nfeatures already encapsulate key topology information. Real-world evaluations using external tools further\nvalidated the model's effectiveness, with predicted scams aligning strongly with high-risk tokens. This study\nadvances the state-of-the-art in Ethereum scam detection while also providing a foundation for broader\napplications in blockchain security."}]}