{"title": "ML-SceGen: A Multi-level Scenario Generation Framework", "authors": ["Yicheng Xiao", "Yangyang Sun", "Yicheng Lin"], "abstract": "Current scientific research witnesses various attempts at applying Large Language Models for scenario generation but is inclined only to comprehensive or dangerous scenarios. In this paper, we seek to build a three-stage framework that not only lets users regain controllability over the generated scenarios but also generates comprehensive scenarios containing danger factors in uncontrolled intersection settings. In the first stage, LLM agents will contribute to translating the key components of the description of the expected scenarios into Functional Scenarios. For the second stage, we use Answer Set Programming (ASP) solver Clingo to help us generate comprehensive logical traffic within intersections. During the last stage, we use LLM to update relevant parameters to increase the critical level of the concrete scenario.", "sections": [{"title": "I. INTRODUCTION", "content": "Over the years, the development of autonomous driving has soared. Society witnessed the gradual advent of driverless cars, as the notion no longer stays online but can be captured by our own eyes. However, as the technology of autonomous systems is evolving, from ontology-based methods to deep learning methods [1], [2], it is always hard to generate scenarios that can ensure both comprehensiveness and critical levels. Comprehensiveness requires a thorough search in the action space while evaluating critical levels sometimes requires crash data that are somehow unpatterned.\nCurrent research in autonomous driving systems heavily relies on Machine Learning [3], [4], Deep Learning, or Reinforcement Learning methods, which leads to a lack of interpretability. The outcome usually fails to attain the expected controllability of the users. Also, these methods rely heavily on real-world data, which might be biased and expensive to achieve. Using simulators and generating scenarios within the simulators are becoming an affordable and effective alternate solution.\nCurrently, there are three main types of simulators:\n\u2022\nRender Engine-Based Simulator: These simulators,\nsuch as CARLA [5], require manual modeling of scenes\nand objects. However, they face two key challenges: a\ndomain gap, as the simulated environments often differ\nfrom reality, and the difficulty of constructing realistic\nand complex scenes. The scenario realism is restricted\nby asset modeling and rendering qualities, and adding\ndigital assets to the scene is difficult to get started due\nto the complexity of the simulation system.\n\u2022\nVideo Generation-Based Simulators: These simula-\ntors utilize techniques like Diffusion Models to gener-\nate environments based on real-world data. While the\nresults closely resemble reality, the process introduces\nsignificant randomness and lacks control, leading to\noccasional abrupt changes in the generated data. They\nstruggle to maintain view consistency and face chal-\nlenges in importing external digital assets due to the\nabsence of 3D spatial modeling [6].\n\u2022\nScene Reconstruction-Based Simulators: Examples\nlike UniSim [7] leverage neural rendering methods such\nas NeRF (Neural Radiance Fields) [8] to reconstruct\nrealistic scenes. A notable limitation is that these sim-\nulators struggle to incorporate external digital assets.\nFrom the above descriptions, we can discover the problems\nof the current generation methods in simulators: lack of con-\ntrollability, bad scalability, and distance from reality [9]. We\ntherefore hope to devise a scalable framework that supports\nthe generation of scenarios from Functional to Logical, from\nLogical to Concrete. Our contributions are as follows:\n\u2022\nWe identify ASP solver to be a core part of our logical\nscenario generation framework to achieve comprehen-\nsiveness.\n\u2022\nWe leverage the ability of Large Language Model to\nhelp apprehend the possible danger factors and incor-\nporate them in the generated scenarios to increase the\ncritical levels.\n\u2022\nWe have conducted relevant experiments to demonstrate\nthe controllability of our framework."}, {"title": "II. RELATED WORK", "content": "A. Chatscene and TTSG\nChatScene is a novel large language model (LLM)-\nbased agent designed to generate safety-critical scenarios\nfor autonomous vehicles. Its primary function is to trans-\nlate textual descriptions of traffic scenarios into executable\nsimulations within the CARLA simulation environment. The\ncombination of textual generation, scenario decomposition,\nknowledge retrieval from a pre-constructed database, and\nexecution of simulation scripts supports ChatScene's ef-\nfectiveness in generating safety-critical scenarios. However,\nthe language ChatScene chose to generate is Scenic, which\nis a less popular language than OpenDrive, OpenScenario\nformat, and a less controllable domain-specific language for\nit only supports a limited range of control actions. Also,\nthe generation process of ChatScene is unguided, which\nleads to a high error rate and requires post-processing of\nthe generated result. [6]\nText-to-traffic scene generation (TTSG) framework is\nto autonomously generate diverse and customizable traffic\nscenarios from natural language descriptions, enhancing the\ntraining of autonomous vehicles. The framework aims to\novercome the limitations of traditional methods, which often\nrestrict scenario diversity by relying on predefined paths and"}, {"title": "B. Specification, Validation, and Verification of Autonomous System", "content": "fixed conditions. Users can specify various parameters such\nas weather conditions, vehicle types, and road signals, while\nthe system dynamically selects starting points and generates\nscenes from scratch, facilitating the representation of both\ncritical and routine traffic situations. However, the problem\nwith the method is that it cannot automatically generate\ncomprehensive scenario under a given circumstances. [10]\nMarius and Joseph presented a multilevel semantic frame-\nwork designed for the specification and validation of Au-\ntonomous Driving Systems (ADS) in 2021. [11] It addresses\nthe complexities of integrating these systems with non-\nexplainable AI technologies by formalizing physical environ-\nments as directed metric graphs. The framework introduces\nthree logics: Metric Configuration Logic (MCL) for mapping\nparameters, Mobile Metric Configuration Logic (M2CL)\nfor representing dynamic object distributions, and Temporal\nM2CL for time-related properties [12], [13]. This systematic\napproach facilitates the creation of detailed traffic rules and\ndynamic scenarios while tackling validation challenges like\nruntime verification and satisfiability. For scenario genera-\ntion, using the logical framework can help define logical\nscenarios and thus provide proper guidance towards concrete\nscenario generation.\nLi et al. presented a comprehensive framework for vali-\ndating autonomous driving systems (ADS) by integrating an\nindustrial simulator with a scenario generator and a runtime\nverification monitor based on the framework proposed above.\n[14] The proposed methodology focuses on systematically\ngenerating scenarios that explore high-risk situations, partic-\nularly at complex junctions, to uncover defects that standard\nrandom exploration might miss."}, {"title": "C. Answer Set Programming Solver", "content": "Answer Set Programming (ASP) offers a simple and pow-\nerful modeling language to describe combinatorial problems\nas logic programs. The clingo system then takes such a logic\nprogram and computes answer sets representing solutions to\nthe given problem. Clingo is part of the Potassco project\nfor Answer Set Programming (ASP), combining a grounder\n(Gringo) and a solver (Clasp) into a single tool. Problems\nare expressed in terms of rules, facts, and constraints,\nwhich specify the relationships and conditions to be satisfied.\nSolutions, called answer sets, represent possible scenarios\nthat satisfy all rules in the program. Usually, after formu-\nlating the problems into . lp file, the grounder will ground\n(Gringo) the program to generate a propositional formula,\nand the solver (Clasp) will solve the formula to find answer\nsets that satisfy constraints. An example of a calling program\nis shown as follows.\n% Facts\npeg(a;b;c).\ndisk(1..6).\ninit_on(1..6,a).\ngoal_on (1..6,c).\nmoves (63).\n% Rules\n{ move (D,P,T) : disk(D), peg(P) } = 1 :-moves (M), T = 1..M.\n:- move (D,_,T).\n:- init_on(D,P).\n:- move (D,P,T).\n:- on (D,P,T), not move (D,T+1), not moves(T).\nblocked (D-1,P,T+1) :- on (D,P,T), not moves(T).\n:- move (D,P,T), blocked (D-1,P,T).\n:- move (D,T), on(D,P,T-1), blocked (D,P,T).\n:- goal_on (D,P), not on (D,P, M), moves (M).\n{ on (D,P,T) } != 1, disk (D), moves (M), T = 1..M.\n% Display\n#show move/3."}, {"title": "D. Scenario Generator (OpenScenario XML)", "content": "OpenScenario and OpenDrive are standards proposed by\nthe Association for Standardization of Automation and Mea-\nsuring Systems (ASAM) and are widely used in autonomous\ndriving and traffic simulation environments.\nOpenScenario is an XML-based file format designed to\ndescribe dynamic traffic scenarios for testing and validation\nof autonomous driving systems [15], [16]. It specifies ma-\nneuvers, actions, and events involving vehicles, pedestrians,\nand other entities in a simulation. Key features include:\n\u2022\nDefinition of traffic participants and their actions.\n\u2022\nSupport for complex event triggering mechanisms.\n\u2022\nCompatibility with traffic simulation tools and au-\ntonomous driving platforms.\nFor detailed specification, you can refer to OpenScenario\nUser Guide.\nOpenDrive is a format used to define road networks\nand static environments in a simulation. It models lanes,\nroad geometries, intersections, and traffic signs, making it a\ncornerstone for creating realistic road layouts. Key features\ninclude:\n\u2022\nRepresentation of detailed road layouts and lane struc-\ntures.\n\u2022\nSupport for multiple coordinate systems and elevation\nprofiles.\n\u2022\nIntegration with OpenScenario for complete scenario\nmodeling.\nFor detailed specification, you can refer to OpenDrive User\nGuide.\nTogether, OpenScenario and OpenDrive enable the cre-\nation of rich and dynamic simulation environments, support-\ning the development and validation of autonomous driving\nsystems and ADAS (Advanced Driver Assistance Systems)."}, {"title": "E. Large Language Models", "content": "Large Language Models (LLMs) are advanced artificial\nintelligence systems trained on vast amounts of textual data\nto understand and generate human-like language [17]. Large\nlanguage models have demonstrated remarkable abilities in\nunderstanding context, generating answers, and handling\ncomplex tasks. The innate common sense embedded within\nlarge language models can help narrow the gap between sim-\nulated and real-world environments [18], which makes LLMs\na good choice to analyze the natural-language-described sce-\nnario and give proper suggestions for increasing emergency\nlevel for a scenario.\nGPT [19] is a pioneering work to generate human-like\ncontent, followed by the most popular LLMs, GPT-3.5\nand GPT-4, which provide more intelligent capabilities like\nchatting and coding. Some other outstanding models like\nLLaMA [20] also perform well in dealing with language\nunderstanding tasks.\nBased on LLM, [6] and [10] use LLM to generate specific\nscenario codes using natural language descriptions. [19]\nexploit the power of collaborative LLM agents to write\nPython files in simulation for autonomous driving [21],\n[22]. The idea of defining a group of well-organized agents\nto form operating procedures with conversation and code\nprogramming [23] is enlightening and practical with the\nhelp of tools like LangChain. But temporarily the code-\nwriting ability of LLMs is unstable and error-prone due to\nthe hallucination problem. This means the generated codes\nstill need manual adjustment before being applied."}, {"title": "III. METHODOLOGY", "content": "A. Motivation\nFrom the above sections, we are striving to set up a\nframework where we can not only generate comprehensive\nscenarios through formulating the traffic and getting satisfi-\nable solutions but also use LLM to analyze the critical factors\nand integrate them into the given scenario. Based on this, we\npropose the following three-stage framework.\nB. Framework Setup\nWe have divided the generation framework into three\nstages, which will generate scenarios from functional sce-\nnarios to logical scenarios to concrete scenarios. The imple-\nmentation detailed is as follows:"}, {"title": "1) Stage 1: Multi-agents Parser", "content": "In this project, we lever-\nage the collaboration of LLM agents to tackle our problem.\nFor a description we prompt into the LLM agents, we\nare hoping to use LLM to extract and reason valuable\ninformation for us to use in the latter modules. The first-\nstage agents will separately parse the inputs for the second\nstage and the input for the third stage."}, {"title": "2) Stage 2: ASP Solver + Interactive frontend", "content": "In this\nproject, we focus on generating all possible scenarios in\nuncontrolled intersections, where we can formalize the input\nfor the ASP solver with cars, the number of entry points,\nand the entry point for each car.\ncar(c), entry point(e), num entries(n)\nTherefore, for each car c at its entry point e, it will have\nin total n - 1 options to enter the next 1, 2, 3, ..., n - 1 road\nsegment. Then the final exit point for the car c will be\n(e + 1) mod n, (e + 2) mod n, ..., (e + n \u2212 1) mod n\nTherefore, there will be in total of (n - 1) scenarios if\nwe intend to calculate in this way. Therefore, we need to\nremove redundant scenarios."}, {"title": "3) Stage 3: Scenario Generator with LLM", "content": "After gen-\nerating the logical scenario, We have generated a set of pa-\nrameters that represent a randomly generated scenario. Since\nit's tough for people to directly modify an OpenScenario or\nOpenDrive file to increase the critical level of the concrete\nscenario, however, the OpenScenario and OpenDrive files\ngenerated by LLM are sometimes unexpected using non-\nexistent interfaces, we choose to generate the files with\nscenariogeneration, improving the output's stability\nand could customize a map for each scenario instead of reuse\na map for thousands of time which restrict the variation\nof scenarios. We use LLM to modify initial parameters,\nenhancing the criticality of the specific scenario. In this\nstage, we use deep-seek-chat as the model to update"}, {"title": "IV. EXPERIMENTAL SETUP", "content": "A. Esmini Installation\nRefer to Esmini official GitHub repo to find installation\nsteps for setting up the Esmini environment. We have used\nversion 2.40.1 for our project.\nB. Software and Hardware environment\nYou can check out the repo and use pip install\n-r requirements.txt to load the environment, the\nessential package we use in our environment is included\nin Table II and the hardware configuration is included in\nTable IV.\nWe are testing our framework on the following three\ncategories.\nC. Intersection Settings\n1) Four-Way Intersection - High Traffic Flow: \"A four-\nway intersection with vehicles approaching from all"}, {"title": "2) T-Intersection - Limited Visibility", "content": "\"A T-intersection\nwith obstructed views due to parked cars and a speed-\ning vehicle approaching the main road while another\nvehicle tries to merge.\""}, {"title": "3) Roundabout with Multiple Exits", "content": "\"A roundabout\nwith multiple exits, where one vehicle changes lanes\nabruptly to exit, causing potential conflict with another\nvehicle entering at high speed.\""}, {"title": "4) Skewed Intersection - Sharp Angles", "content": "\"A skewed in-\ntersection where vehicles approach at non-right angles,\nincluding a fast-moving car trying to overtake another\nvehicle while crossing.\""}, {"title": "5) Y-Intersection", "content": "\"A Y-intersection where a pedestrian\nsuddenly crosses while a vehicle speeds to make a left\nturn, and another vehicle merges from the right.\""}, {"title": "D. Dangerous Factors", "content": "1) Sudden Lane Changes: \"A car abruptly changes\nlanes in a roundabout while another vehicle acceler-"}, {"title": "2) Speeding Vehicles", "content": "\"Two speeding vehicles approach\na T-intersection simultaneously from opposite direc-\ntions, one trying to make an unprotected left turn.\""}, {"title": "3) Tailgating", "content": "\"A vehicle tailgating another car at a four-\nway stop, leading to a sudden braking event as a\npedestrian steps into the crosswalk.\""}, {"title": "4) Delayed Braking Response", "content": "\"A distracted driver\ndelays braking at a Y-intersection while another car\nmerges unexpectedly from the right.\""}, {"title": "5) Merging Conflicts", "content": "\"A car aggressively merges into\ntraffic at high speed in a roundabout while another\nvehicle prepares to exit.\""}, {"title": "6) Multiple Cars Scenarios", "content": "\"Ten cars arriving at a T\nintersection.\""}, {"title": "V. RESULTS", "content": "A. LLM analyzing ability\nLLM demonstrates good capability of understanding the\ndescription of a scenario in natural language. In phase 1,\nLLM could extract information on the proper number of cars\nand entrances described both ambiguously and explicitly.\nIn our testing, it has 100% correctness (for ambiguous\ndescriptions, generating proper values is considered correct)."}, {"title": "B. LLMs modification ability", "content": "Although LLM demonstrates a relatively good capability\nof coding, it is limited by the size of their training corpus and\nthe popularity of the specific language. Such generation for\nunderfitting tasks will result in greater illusion. We use LLM\nto parse hazardous factors and let it modify the parameters\nlist we provide."}, {"title": "VI. CONCLUSIONS", "content": "The ML-SceGen framework represents a significant ad-\nvancement in the field of scenario generation for autonomous\nvehicles, particularly in managing the complexities of uncon-\ntrolled intersections. By integrating Large Language Models"}]}