{"title": "Protecting Activity Sensing Data Privacy Using Hierarchical Information Dissociation", "authors": ["Guangjing Wang", "Hanqing Guo", "Yuanda Wang", "Bocheng Chen", "Ce Zhou", "Qiben Yan"], "abstract": "Smartphones and wearable devices have been integrated into our daily lives, offering personalized services. However, many apps become overprivileged as their collected sensing data contains unnecessary sensitive information. For example, mobile sensing data could reveal private attributes (e.g., gender and age) and unintended sensitive features (e.g., hand gestures when entering passwords). To prevent sensitive information leakage, existing methods must obtain private labels and users need to specify privacy policies. However, they only achieve limited control over information disclosure. In this work, we present Hippo to dissociate hierarchical information including private metadata and multi-grained activity information from the sensing data. Hippo achieves fine-grained control over the disclosure of sensitive information without requiring private labels. Specifically, we design a latent guidance-based diffusion model, which generates multi-grained versions of raw sensor data conditioned on hierarchical latent activity features. Hippo enables users to control the disclosure of sensitive information in sensing data, ensuring their privacy while preserving the necessary features to meet the utility requirements of applications. Hippo is the first unified model that achieves two goals: perturbing the sensitive attributes and controlling the disclosure of sensitive information in mobile sensing data. Extensive experiments show that Hippo can anonymize personal attributes and transform activity information at various resolutions across different types of sensing data.", "sections": [{"title": "I. INTRODUCTION", "content": "Smartphones and wearable devices are equipped with motion and position sensors that measure motion and orientation. The mobile devices provide the sensing data to various applications or third parties. Currently, mobile operating systems (OS) classify motion and position sensors as low-risk sensors, which means any app could access the raw sensing data without any permission restriction. For instance, Android allows an app to access sensor data at a sampling rate exceeding 200 Hz without explicit user consent [1]. Thus, a travel app that offers a compass bearing using motion sensors might access arbitrary activity-sensing data over an entire day.\nGenerally, mobile sensing data contains not only the information required by applications but also redundant and sensitive information that users do not intend to share, resulting in concerns related to over-privilege and user privacy leakage [2], [3]. There are two key overprivileged issues in mobile activity sensing data: (i) Metadata-level overprivileged issue: it allows apps to pinpoint users' private attributes such as age and gender. Activity-sensing data contains redundant personal attribute information, which is unnecessary for activity-sensing functionalities but has privacy implications. Users with distinct attributes perform physical activities differently. In consequence, attackers could exploit these unique features within the sensor data to infer users' sensitive attributes [4].\n(ii) Feature-level overprivileged issue: it allows apps to collect more fine-grained activity features than necessary. The fine-grained activity features can potentially compromise users' sensitive behaviors [5]. For instance, an elderly person wears a smartwatch for fall detection. While the primary purpose is safety, the collected sensor data can also track precise hand movements [6]. That means, by capturing the raw sensor data, a malicious service provider could potentially steal passwords entered by the users for their bank accounts [7]. Generally, malicious app developers can exploit the redundant fine-grained features in sensor data to learn sensitive behaviors and task-irrelevant concepts [8]. Therefore, what appears to be low-risk sensors may indeed carry a high privacy risk, given that fine-grained sensor data could compromise user privacy.\nMany research efforts have been devoted to coping with cases where data required for specific tasks is privacy-sensitive. In this work, we mainly consider the overprivileged issues that partial information in the data is task-unrelated but privacy-sensitive. For metadata-level overprivileged issues, adversarial training [9], [10] has been utilized to perturb personal attributes linked to sensor data, but they need to collect labeled private data for model training. For feature-level overprivileged issues, various filtering mechanisms [11], [12] have been proposed to limit data collection. For instance, mobile OS could control whether to release or hide an entire segment of raw data using privacy filtering mechanisms. However, existing solutions are impractical as they require specific privacy policies or labels of private data from users for data filtering. Moreover, current OS policy-based filtering methods are coarse-grained as they either wholly release or remove segments of raw data. If a data segment corresponds to a private activity, the whole data segment would be discarded, thereby damaging the data utility.\nA naive solution is to add noise [13], which can potentially perturb both private attributes and activity features. However, the sensor data has recurring patterns in continuous temporal windows. To prevent data cleaning methods from filtering out the added noise, existing methods need to introduce a substantial amount of noise into each window [14], which will greatly destroy the data utility (i.e., activity pattern recognition). As a result, existing noise-based methods are either ineffective or could destroy most of the data utility."}, {"title": "To tackle the above problems, we propose Hippo to limit the information in data by reconstructing multi-grained mobile activity sensing data. By integrating the idea of autoencoders and generative models, we design the latent feature guidance-based diffusion model to dissociate hierarchical information. Hippo learns to extract different granularity of latent feature representations by learning concept hierarchy from the data. Through the hierarchical information learning process, Hippo dissociates the fine-grained information including sensitive attributes (metadata) and multi-resolution hierarchical activity features in the raw sensor data. Hippo allows the users to remove sensitive information that they do not intend to disclose, in order to protect sensitive activity-sensing data. Hippo can be used as a middleware between OS and applications for private attributes and sensitive feature dissociation in raw sensor data.", "content": "To tackle the above problems, we propose Hippo to limit the information in data by reconstructing multi-grained mobile activity sensing data. By integrating the idea of autoencoders and generative models, we design the latent feature guidance-based diffusion model to dissociate hierarchical information. Hippo learns to extract different granularity of latent feature representations by learning concept hierarchy from the data. Through the hierarchical information learning process, Hippo dissociates the fine-grained information including sensitive attributes (metadata) and multi-resolution hierarchical activity features in the raw sensor data. Hippo allows the users to remove sensitive information that they do not intend to disclose, in order to protect sensitive activity-sensing data. Hippo can be used as a middleware between OS and applications for private attributes and sensitive feature dissociation in raw sensor data.\nThere are two main challenges in designing Hippo. First, how to perturb the metadata embedded in the sensor data while retaining raw activity features without labeling private data for training? Adversarial training based on labeled private data has been widely applied to perturb private attributes. Each private attribute needs to be labeled if multiple attributes are to be perturbed. Such supervised training methods are impractical considering the difficulty of obtaining labeled private data from users. As the sensitive side-channel metadata information is not used in applications such as activity recognition [9], [10], we propose to indiscriminately perturb metadata information while retaining raw activity features. This is achieved by reconstructing raw data from a carefully-designed diffusion-based process, which does not require private attribute labels for training.\nSecond, how to dissociate fine-grained activity features from sensing data to prevent sensitive activity information leakage? Existing approaches such as adding noise or blocking sensitive data could damage the data utility. In many cases such as fall detection, some fine-grained features (e.g., hand gestures) are unnecessary. Yet, discarding sensing data to eliminate fine-grained features would result in the loss of utility. To dissociate sensitive activity information, Hippo removes fine-grained features by reconstructing multi-grained data. Considering the hierarchical nature of human activities, where an activity is composed of a series of atomic actions. We design a latent diffusion guidance model to generate multi-grained data that naturally removes different granularity of activity information. Many apps such as travel apps and pedometer apps rely on data in its raw form rather than latent representations or activity labels, necessitating the process of data generation.\nWe evaluate the information leakage in multi-grained sensor data generated by Hippo using different attribute inference and activity recognition tasks. For metadata-level protection, Hippo can reduce the private attribute inference probability to 50%, while maintaining the same level of activity recognition accuracy as raw data. For feature-level protection, Hippo re-constructs multi-grained data with different levels of activity recognition performance. We also showcase Hippo on the pedometer application to demonstrate the feasibility that users can control data granularity to prevent unintended information leakage without affecting data utility.\nThe main contributions of this paper are threefold:\n\u2022 We propose a novel system based on the noise diffusion process to anonymize private sensing data while retaining activity recognition performance, without requiring users to specify private data and labels.\n\u2022 We design the hierarchical latent feature guidance diffu-sion model for multi-grained data generation to achieve fine-grained control of information disclosure and mitigate feature-level overprivileged issues.\n\u2022 We extensively evaluate the information and utility of reconstructed data from Hippo under metadata-level and feature-level information protection constraints."}, {"title": "II. RELATED WORK", "content": "There are two main approaches for metadata informa-tion protection for data anonymization. First, the adversarial training-based methods [9], [10] utilize a discriminator model to infer sensitive attributes from feature representations and a generative model to minimize the success rate of the discriminator. Second, variational autoencoders and information theory-based methods [15] aim to minimize the mutual information between private attributes and their representations.\nHowever, most methods require users to provide their private data and labels for model training. This is because the design of loss functions in the model optimization needs labeled private attributes. In contrast, Hippo's model training does not need any private information such as private attribute labels or sensitive activity patterns. Moreover, existing noise-based methods not only destroy metadata information but also degrade the utility of activity recognition [14]. By contrast, Hippo perturbs the private attributes and preserves much of the activity information in the raw data for downstream tasks."}, {"title": "A. Metadata Information Protection", "content": "There are two main approaches for metadata informa-tion protection for data anonymization. First, the adversarial training-based methods [9], [10] utilize a discriminator model to infer sensitive attributes from feature representations and a generative model to minimize the success rate of the discrimi-nator. Second, variational autoencoders and information theory-based methods [15] aim to minimize the mutual information between private attributes and their representations.\nHowever, most methods require users to provide their private data and labels for model training. This is because the design of loss functions in the model optimization needs labeled private attributes. In contrast, Hippo's model training does not need any private information such as private attribute labels or sensitive activity patterns. Moreover, existing noise-based methods not only destroy metadata information but also degrade the utility of activity recognition [14]. By contrast, Hippo perturbs the private attributes and preserves much of the activity information in the raw data for downstream tasks."}, {"title": "B. Semantic Information Protection", "content": "If the fine-grained activity semantic is sensitive, a naive idea is to add adaptive noise to degrade activity recognition performance. However, it is hard to balance the added noise and data utility. Differential privacy adds noise to cover the existence of any data record [16], but it targets a different problem than the feature-level overprivileged issue. Therefore, we propose to dissociate fine-grained motion features and only retain coarse-grained activity information in released data. Thus, Hippo generates multi-grained data, offering a more controllable way for the balance between data utility and privacy protection.\nAnother idea is to generalize labels from activity recognition APIs [17]. Yet, obtaining activity labels from trusted OS API remains challenging due to the variations in human behaviors and diverse hardware. More importantly, merely generalizing activity labels does not necessarily provide a privacy guarantee. Thus, many studies [11], [12] offer privacy-checking methods for deciding whether to release or suppress activity semantics."}, {"title": "If an activity has privacy implications, the existing methods brutally discard the entire segment regarding the activity. How-ever, many apps require the raw data. For instance, a game app utilizes motion sensor data to interpret user gestures, and a travel app relies on geomagnetic and accelerometer sensors to provide a compass bearing. Thus, for apps demanding raw sen-sor data, existing semantic privacy protection mechanisms are too coarse-grained. By contrast, for semantic-level protection, instead of blocking the whole sensitive data, Hippo dissociates sensitive features and releases non-sensitive but useful data to apps. In addition, Hippo can be integrated with existing privacy checking mechanisms [11], [12] to achieve fine-grained information disclosure with multi-grained data generation.", "content": "If an activity has privacy implications, the existing methods brutally discard the entire segment regarding the activity. How-ever, many apps require the raw data. For instance, a game app utilizes motion sensor data to interpret user gestures, and a travel app relies on geomagnetic and accelerometer sensors to provide a compass bearing. Thus, for apps demanding raw sen-sor data, existing semantic privacy protection mechanisms are too coarse-grained. By contrast, for semantic-level protection, instead of blocking the whole sensitive data, Hippo dissociates sensitive features and releases non-sensitive but useful data to apps. In addition, Hippo can be integrated with existing privacy checking mechanisms [11], [12] to achieve fine-grained information disclosure with multi-grained data generation."}, {"title": "III. PROBLEM FORMULATION", "content": "User privacy and system security are widely studied in literature [18], [19], [20], [21], [22]. In this work, we consider personal attributes and activity features that are unintended to be released as private information in the context of mobile activity sensing. Such privacy leakage can be achieved via different attacks such as attribute inference attacks and activity inference attacks in diverse activity recognition scenarios. The sensing data can be leaked to malicious third parties by data trading or stealing. First, in attribute inference attacks, an ad-versary aims to infer personal attributes (e.g., age, gender) [23]. For example, suppose a user adopts behavioral biometrics such as hand gesture [6] for authentication. The attackers can extract a large amount of personal attribute information such as gender and age from behavioral biometrics data. Second, in activity inference attacks, an adversary can obtain fine-grained activity semantics from mobile sensing data. For instance, an attacker can utilize the pedometer app to obtain sensitive daily schedules of users by implementing activity recognition using collected sensor data. Moreover, an attacker can steal passwords by modeling hand movements with motion-sensing data [7].\nMany activity recognition models can achieve more than 95% accuracy [24], which have become a powerful tool for divulging private activity information. In addition, we consider a strong attacker who can implement the re-identification at-tack [25]. Specifically, the attacker knows the defense methods and has a dataset with private attribute labels. Then, they can build a sanitized version of the dataset by passing the dataset through the defense methods. Finally, the attacker can train a new private attribute identification model based on the sanitized datasets. To protect activity-sensing information, we assume attackers can only access sensor data after being processed by Hippo. We assume the mobile sensors are trustworthy as they reside in the secure processing domain (e.g., ARM TrustZone [26]). Hippo can become a middleware between OS system and various applications."}, {"title": "A. User Privacy Leakage in Activity Sensing Data", "content": "User privacy and system security are widely studied in literature [18], [19], [20], [21], [22]. In this work, we consider personal attributes and activity features that are unintended to be released as private information in the context of mobile activity sensing. Such privacy leakage can be achieved via different attacks such as attribute inference attacks and activity inference attacks in diverse activity recognition scenarios. The sensing data can be leaked to malicious third parties by data trading or stealing. First, in attribute inference attacks, an ad-versary aims to infer personal attributes (e.g., age, gender) [23]. For example, suppose a user adopts behavioral biometrics such as hand gesture [6] for authentication. The attackers can extract a large amount of personal attribute information such as gender and age from behavioral biometrics data. Second, in activity inference attacks, an adversary can obtain fine-grained activity semantics from mobile sensing data. For instance, an attacker can utilize the pedometer app to obtain sensitive daily schedules of users by implementing activity recognition using collected sensor data. Moreover, an attacker can steal passwords by modeling hand movements with motion-sensing data [7].\nMany activity recognition models can achieve more than 95% accuracy [24], which have become a powerful tool for divulging private activity information. In addition, we consider a strong attacker who can implement the re-identification at-tack [25]. Specifically, the attacker knows the defense methods and has a dataset with private attribute labels. Then, they can build a sanitized version of the dataset by passing the dataset through the defense methods. Finally, the attacker can train a new private attribute identification model based on the sanitized datasets. To protect activity-sensing information, we assume attackers can only access sensor data after being processed by Hippo. We assume the mobile sensors are trustworthy as they reside in the secure processing domain (e.g., ARM TrustZone [26]). Hippo can become a middleware between OS system and various applications."}, {"title": "B. Mobile Activity Sensing Data Utility", "content": "For sensing data X such as the IMU sensor data, the activity semantic label of X and recognition confidence score are obtained by activity recognition models [27], [24]. If fine-grained activity features in X are eliminated, X can only be used for recognizing coarse-grained activity semantics. Our key insight is that human activities naturally follow a hierarchical semantic structure, which plays a crucial role in defining and modeling multi-grained activities [28]. An activity can be decomposed into atomic actions or generalized into coarse-grained activity semantics. For example, Jumping and running can be generalized into locomotion. Taking a deeper look into jumping, it includes atomic actions such as arms swinging and legs contracting.\nWe define activity sensing data utility function as $U(a, \\hat{a}) = U_a$ under unintended sensing information disclosure con-straints. $U_a$ is the recognition confidence score on raw data $a$ and $U_{\\hat{a}}$ is the confidence score on reconstructed data $\\hat{a}$. $U(a, \\hat{a})$ quantifies the utility of data after generalizing activity semantics from $a$ to $\\hat{a}$. For example, raw sensor data contains the highest-resolution features corresponding to fine-grained activity semantics. The maximum utility is 1 if we use the raw data. U(.) monotonically decreases when the semantic of X is generalized from a fine-grained $a_{i-1}$ to a coarse-grained $a_i$:\n$0 <U(a, \\hat{a_i}) <U(a, \\hat{a_{i-1}}),$                                                        (1)\nwhere i is related to the number of stacked convolutional autoencoders (CAEs) in Section IV-B. Users can designate the output features of the i-th stacked CAEs for the i-th granularity of data generation, noted as Granu.i, which balance the privacy and utility needs.\nA third party auditor can help users evaluate the utility of different granularity of reconstructed data. For example, a fall detection application on a smartwatch can collect the raw sensing sequence data $X_{hand}$ that represents \u201chand gesture\u201d. $X_{hand}$ contains high-resolution features that can recognize \"hand position\". A user can set i = 0, and then Hippo generates Granu.0 data by only perturbing the metadata information while keeping original features in raw data. Thus, the Granu.0 data can still be used for fall detection while discarding sensitive metadata information. If i = 1, Hippo generates Granu.1 data with the guidance of the output feature from the first stacked CAEs, which removes the high-resolution features including \"hand gesture\". Then, the Granu.1 data $X_{hand}$ can still be used in fall detection but only be recognized as coarse-grained semantics such as \u201cwalking\u201d. Similarly, if features of \"walking\" are removed in reconstructed data, it can only be recognized as \u201clocomotion\". In this manner, Hippo helps users avoid releasing sensitive sensing information."}, {"title": "IV. SYSTEM DESIGN", "content": "Hippo runs as a middleware between the OS sensor manager and various apps as shown in Fig. 1. The essential component of Hippo is the latent feature guidance-based diffusion model which carries out hierarchical information dissociation. During the training phase, first, we propose a self-supervised stacked"}, {"title": "A. System Model", "content": "Hippo runs as a middleware between the OS sensor manager and various apps as shown in Fig. 1. The essential component of Hippo is the latent feature guidance-based diffusion model which carries out hierarchical information dissociation. During the training phase, first, we propose a self-supervised stacked"}, {"title": "CAEs (e.g., CAE1) to extract multi-resolution activity features (e.g., Layer 1 Feature) without requiring users' private labels (Section IV-B). Then, conditioned on multi-resolution features, we design a hybrid conditional and unconditional diffusion model to reconstruct multi-grained data (Section IV-C). During the generation phase, for instance, as shown in Fig. 1, Hippo reconstructs Granu.3 data conditioned on Layer 3 features from the third CAE layer in stacked CAEs to achieve sensitive activity feature dissociation and metadata perturbation.", "content": "CAEs (e.g., CAE1) to extract multi-resolution activity features (e.g., Layer 1 Feature) without requiring users' private labels (Section IV-B). Then, conditioned on multi-resolution features, we design a hybrid conditional and unconditional diffusion model to reconstruct multi-grained data (Section IV-C). During the generation phase, for instance, as shown in Fig. 1, Hippo reconstructs Granu.3 data conditioned on Layer 3 features from the third CAE layer in stacked CAEs to achieve sensitive activity feature dissociation and metadata perturbation.\nOn one hand, if metadata information is not intended to be released but raw features are required by apps, Hippo can generate Granu.0 data to only perturb metadata. We pass the raw data in the forward diffusion process to add noise. Then, in the reverse diffusion process, Hippo removes the noise with the learning-based procedure. The residual noise after the learning process of denoising in Hippo reconstructs the raw data by perturbing the side-channel metadata information. Meanwhile, the raw activity sensing data features are retained.\nOn the other hand, if fine-grained activity information is not intended to be released, Hippo first extracts multi-resolution features from a segment of data X with the stacked CAE model. Then, given a random noise seed, conditioned on multi-resolution features, Hippo can generate multi-grained data using our designed latent guidance diffusion model. The generated data retains specific-layer feature information while discarding finer-grained features. As a result, the generated data contains different granularities of activity semantics expressed by the multi-resolution feature representations. The users can specify the i-th stacked CAEs for multi-resolution feature extraction and multi-grained data reconstruction."}, {"title": "B. Multi-Resolution Feature Extraction", "content": "We propose to apply label-free stacked CAEs to extract multi-resolution features, which guide the generation of multi-grained data. The convolution module (CM) is widely used to extract features from time series. Regarding the utility of extracted features, the advantages of CM are two-fold. First, CM can exploit local connectivity by focusing on multiple receptive fields of the input, which is suitable for time series data where local patterns are often more informative than individual data points. Second, CM applies weight sharing, meaning the same weight is applied across different filters. Each filter can capture patterns across different dimensions of time series. This ensures that the model can recognize a pattern regardless of its position in the time series. Therefore, CM can effectively extract robust features for activity recognition.\nHippo packs raw sensor data into a structured tensor to feed into stacked CAEs as shown in Fig. 1. For each CAE, the input is raw data X or the output feature $z_i$ of the previous CAE. The output of CAE is the feature $Z_{i+1}$, where i is the index of stacked CAEs. For example, the input of CAE-1 is X, and the output of CAE-1 is $z_1$, which is the input of CAE-2. Normally, $Z_{i+1}$ is in lower dimensional space than $z_i$. But to keep the same spatial dimension between $z_i$ and $Z_{i+1}$, we pad $z_{i+1}$ with zeros to the same dimension of $z_i$. The encoder of a CAE contains a convolutional layer and a pooling layer. In the encoding process, the convolutional layer and pooling layer learn multi-resolution activity features. The decoder of a CAE contains an unpooling layer and a deconvolution layer. In the decoding process, the unpooling and deconvolution layers are used to reconstruct the input data in each CAE. We train each CAE separately. The objective is to minimize the mean square error between input data and reconstructed data. After the learning process, we can use the encoder of stacked CAES to extract multi-resolution activity features.\nLemma 4.1: Given two stacked CAEs whose outputs are layer features $z_i$ and $z_j$ respectively. Then $z_j$ is low-resolution version of $z_i$ such that $H(z_j) < H(z_i)$ when i < j.\nDifferent resolutions of feature representations express varied amounts of activity semantic information, composing a hierar-chical information structure. Existing studies in visual analytics demonstrated that the convolutional layer can learn different aspects of data such as detecting edges and lines, and the deep convolutional neural network can capture multi-grained feature representations. For instance, the raw feature $z_0$ is regarded as the semantic granularity-0, which contains the most fine-grained motion features in Granu.0 data. The layer-1 feature $z_1$ corresponds to the semantic granularity-1, which contains"}, {"title": "coarse-grained motion information by blurring features in $z_0$ in Granu.1 data. The convolutional and pooling operations cause $z_1$ to dissociate detailed features in $z_0$. The information on the upper layer features $z_i$ will decrease as the number of stacked CAEs increases.", "content": "coarse-grained motion information by blurring features in $z_0$ in Granu.1 data. The convolutional and pooling operations cause $z_1$ to dissociate detailed features in $z_0$. The information on the upper layer features $z_i$ will decrease as the number of stacked CAEs increases.\nWe use the H-score H proposed in [29] to quantify the informativeness of extracted features. His computed in an information-theoretic framework as follows:\n$H(s) = E_{Py} [||E_{Px\\y} [1/2 \\S(X)|Y]||^2].$                                                   (2)\nThe input of the H function is the feature embedding matrix and label matrix of data samples. H measures the quality of features generated at any layer of the DNN. The larger value of H means more information in the feature embed-dings is related to the label. We compute the H-score on the feature embeddings generated from stacked CAEs using the DSA dataset [30]. Layer-1 feature H-score, layer-2 feature H-score, and layer-3 feature H-score are 7.717, 7.518 and 7.423, respectively. Therefore, using the framework, we show that stacked CAEs can extract multi-resolution features that contain different amounts of information. In the next section, we design the data generation model conditioned on the $z_i$, which generates data containing multi-grained features."}, {"title": "C. Multi-grained Sensing Data Generation", "content": "Suppose an app requires the i-th granularity of sensing data, which corresponds to the i-th layer feature $z_i$ in the stacked CAEs. With the well-trained latent feature guidance diffusion model, Hippo generates the i-th granularity data from random noise conditioned on a specific resolution feature $z_i$. Specifically, in the offline training stage, the raw data x can be encoded into a bipartite latent representation (x, $z_i$). The diffusion latent $x_t$ is generated from the forward diffusion process, which is the noisy version of x after many steps of adding noise. $x_T$ encodes the residual information necessary for reconstructing x under the reverse diffusion process. The multi-resolution feature $z_i$ is generated by the stacked CAE, and $z_i$ describes the multi-grained feature representations.\nFollowing notations in the work [31] about denoising diffu-sion probabilistic models, in the training phase, the diffusion model (DM) adds random noise $\\epsilon_t \\sim N(0, \\sigma_t I)$ to input data with a noise scheduler. Then, DM learns to remove $\\epsilon_{\\theta}(x_t, t)$, which is the predicted noise. The general learning objective is\n$L = ||\\mu_t - \\mu_{\\theta}|| = E_{t \\sim [1,T], x_0, \\epsilon_t} [||\\epsilon_t - \\epsilon_{\\theta}(x_t, t)||^2]$                                              (3)\n$= E_{t \\sim [1,T], x_0, \\epsilon_t} [[|\\epsilon_t \u2013 \\epsilon_{\\theta}(\\sqrt{\\bar{a_t}}x_0 + \\sqrt{1 \u2013 \\bar{a_t}}\\epsilon_t, t)||^2],$                                                                         \nwhere $\\mu_t$ is the posterior mean in the forward diffusion process, and $\\mu_{\\theta}$ is the predicted mean in the reverse diffusion process. $\\sqrt{\\bar{a_t}}$ is related to the noise schedule in the forward T diffusion steps, and $x_0$ is the raw input data.\nA key observation is that the learning objective L in Eq. (3) relies on the marginal $q(x_t|x_0)$ instead of the joint $q(x_{1:T}|x0)$. The forward process can be derived from Bayes' rule [32]:\n$q_{\\theta} (x_t|x_{t-1}, x_0) = \\frac{q_{\\theta} (x_{t-1}|x_t, x_0)q_\\theta(x_t|x_0)}{q_\\theta (x_{t-1}|x_0)}$                (4)"}, {"title": "Therefore, each $x_t$ depends on $x_{t\u22121}$ and $x_0$, making the process a non-Markovian process. Thus, L in Eq. (3) does not rely on a particular forward procedure. Therefore, we can sample part of the forward steps during the generation process if $q(x_t|x_0)$ is fixed. In this way, we can reduce the number of steps T and improve the data generation efficiency.", "content": "Therefore, each $x_t$ depends on $x_{t\u22121}$ and $x_0$, making the process a non-Markovian process. Thus, L in Eq. (3) does not rely on a particular forward procedure. Therefore, we can sample part of the forward steps during the generation process if $q(x_t|x_0)$ is fixed. In this way, we can reduce the number of steps T and improve the data generation efficiency.\nIn the reverse diffusion process, Hippo learns to remove noise in $x_T$ that is added in the forward diffusion process. Specifically, we design Hippo to reconstruct back to the original data $x_0$ from $x_T$ conditioned on the feature $z_i$. The guidance from $z_i$ helps the reconstructed data contain the same feature representation information as $z_i$ in the latent space. Consider P(x,z)\nthe generative model is formalized as $P(x|z) = \\frac{P(x,z)}{P(z)}$, and P(z) is a deterministic function of x in the multi-resolution feature extraction model, we only need to estimate $P(x, z)$. Thus, we propose to project the $z_i$ to the existing diffusion latent $x_t$:\n$\\epsilon_{\\theta}(x_T|z_i, T) = \\epsilon_{\\theta}(x_T|\\O,T) + s\u00b7 (\\epsilon_{\\theta}(x_T|z_i, T) \u2013 \\epsilon_{\\theta}(x_T|\\O,T)),$                                 (5)\nwhere s is the guidance scale, which is empirically set as 7.5 in our experiments. In Eq. (5), we can simultaneously train an unconditional diffusion model $p_{\\theta}(x_t)$ and a conditional diffusion model $p_{\\theta}(x_T|z_i)$. For the unconditional model, we replace the $z_i$ with a null vector with a probability such as 0.3. For the conditional model, the denoising process is conditioned on $z_i$. Thus, we can guide the data generation towards $z_i$ during the training phase.\nTo guarantee $q(x_t|x_{t\u22121})$ still satisfies conditional distribution that follows the Markov chain in the forward process, the reverse process $q_{\\theta}$ should satisfy the Gaussian function [32]:\n$q_{\\theta} (x_{t-1}|x_t, x_0) = N(\\mu, \\sigma^2I),$                                                                                               (6)\n$x_0 = \\frac{x_t - \\sqrt{1 - \\alpha_t}\\epsilon_{\\theta}(x_tz_i,t)}{\\sqrt{\\alpha_t}},$                                                                                                                                                     (7)\n$\\mu = \\sqrt{\\alpha_{t-1}}x_0 + \\frac{1/1 - \\alpha_{t-1}}{\\sqrt{1 - \\alpha_t}} \\sigma^2_t\u00b7 \\epsilon_{\\theta}(x_t|z_i, t).$                                                                                       (8)\nThus, given a subset ${X_{t+1},\u2026, X_{t+S}}$ where is a sub-sequence of [1,\u2026,t,\u2026,T] of length S, the model can be trained with arbitrary forward steps. We follow the setup to variance $\\sigma$ in [32] as follows:\n$\\sigma_t^2 = \\sqrt{(1 \u2013 \\alpha_{t-1})(1 \u2013 \\alpha_{t})}/\\sqrt{1 - \\alpha_{t}} \u00b7 \\sqrt{1 \u2013 \\alpha_{t-1}} \\sqrt{\\alpha_{t}}.$                                                (9)\nIt has been proven that the training objective in Eq. (3) is still applicable in the reverse process [32]. Finally, we train the diffusion model to approximate the conditioned probability distribution in the reverse process. Given the initial input noise $\\epsilon_t \\sim N(0, I)$, we sample $x_{t\u22121} \\sim P_{\\theta}(x_{t-1}|x_t)$ as follows:\n$x_{t-1} = \\mu + \\sigma\\epsilon_t,$                                                                                                                                                     (10)\nwhere u is defined in Eq. (8). With the same model for predicted noise $e_\\theta$, we can choose different $\\sigma$ without retrain-ing the model to generate different samples. In the sampling"}, {"title": "phase, the reverse process in the DM can generate multiple", "content": "phase, the reverse process in the DM can generate multiple"}, {"title": "V. IMPLEMENTATION AND EVALUATION", "content": "We evaluate Hippo on four datasets: HARBox [35], UCI HAR [36], MotionSense [37], and the daily and sports activity (DSA) dataset [30]. For the diffusion model training, we set random timesteps from 100 to 1000 because the model can be trained with any number of forward steps as designed in Section IV-C, and the training epochs are 100. In the multi-grained data generation phase, we set the inference time steps as 100 following the empirical experiments. The guidance scale of hierarchical features is set to 2. For sensitive attribute and activity recognition, we use the 5-fold cross-domain validation considering the training and testing dataset size, so as to avoid overfitting and provide more consistent and fair evaluations."}, {"title": "A. Experimental Setup", "content": "We evaluate Hippo on four datasets: HARBox [35", "36": "MotionSense [37"}]}