{"title": "Amorphous Fortress Online: Collaboratively Designing Open-Ended Multi-Agent AI and Game Environments", "authors": ["M Charity", "Mayu Wilson", "Steven Lee", "Dipika Rajesh", "Sam Earle", "Julian Togelius"], "abstract": "This work introduces Amorphous Fortress Online a web-based platform where users can design petri-dish-like environments and games consisting of multi-agent AI characters. Users can play, create, and share artificial life (ALIFE) and game environments made up of microscopic but transparent finite-state machine (FSM) agents that interact with each other. The website features multiple interactive editors and accessible settings to view the multi-agent interactions directly from the browser. This system serves to provide a database of thematically diverse AI and game environments that use the emergent behaviors of simple AI agents.", "sections": [{"title": "I. INTRODUCTION", "content": "Open-endedness in games is difficult to define and harder to design. Open-ended simulation environments and envi- ronments that promote artificial life offer a multitude of challenges and emergent scenarios for AI to solve [1], [2]. Such open-ended simulation games include the Sims or Dwarf Fortress where multi-agent interactions provide the core gameloop and create unique game experiences for the player. However, designing AI for these environments is limited to their specific domain and the behavior range of other agents. An AI designed to interact with the world and mechanics of Dwarf Fortress could not interact well with the world and mechanics of the Sims. As such, there exists a limitation to the types of AI that can be designed and trained in these environments and a limitation on the range of their emergent behavior.\nCommunity-centric games like ZZT12, Roblox, and Lit- tleBigPlanet rely on the players to design and share the modifiable elements of the game such as assets or levels to the game's network or database. This creates a constant flow of new and engaging user-generated content for the game. As a result, games with new genres, themes, objectives, and challenges all stem from the same engine and allow players"}, {"title": "II. BACKGROUND", "content": "A. Multi-Agent Simulations\nSimulation games such as the Sims, Dwarf Fortress, and even Conway's Game of Life depend on multiple autonomous agents interacting with each other in order to create unique experiences in the system. Sometimes these interactions lead to emergent behaviors behavior unseen or unexpected by the human designers and players for these simulation games. As such, simulation design with multi-agent systems in game AI research can create open-ended challenges through emergent design and unique environments for training AI such as reinforcement learning agents. Earle et. al [3] introduce a training environment for reinforcement learning agents in the game SimCity and examine population behaviors of cellular automata in Conway's Game of Life. Suarez et. al. take the mechanics of a large MMORPG to simulate and discover emergent agent behaviors and interactions in a confined sim- ulation environment [4]. Amorphous Fortress Online uses a multi-agent simulation engine in order to create unique, open- ended experiences and demonstrate emergent behavior from interactions with other autonomous agents and the player, even in such a small confined environment.\nB. Community-Made Content Design\nOnline game content design and collaborative, community- made content generation exists across multiple genres of games - typically in the form of levels for games with existing mechanics such as in Super Mario Maker or FreeRider Online or also in the form of in-game assets such as the texture pattern sharing feature of the Animal Crossing series. With an online sharing system for a game, a community of players can form around designing unique content for a game that others can use. In Al research, user created content generated with or without AI assistance can help to train and design AI systems capable of generating unique content. This design feedback loop between AI model and user can encourage more user engagement with the system and guide the generative design process. Examples of community-made content being used with AI systems include Picbreeder, an online system where users can guide the generation process of AI made images through interactive evolution and submit them for others to evolve on the website [5]. Similarly in game design, Baba is Y'all's recommendation system learns from user submitted puzzle levels for the Baba is You game to make levels with new mechanic combinations not previously found in the database [6]. The Aesthetic Bot system utilizes the crowd-sourced voting system of the Twitter API to compare the aesthetic quality of game maps against user submitted maps in order to improve its subjective map generation quality [7]. These systems demonstrate how creating a community that facilitates a constant flow of content generation and feedback reporting can be effective methods of guiding the generative process of AI systems.\nC. Open-Ended Game Design\nOpen-endedness and creativity in game design also makes use of community-made content generation to engage players with the system. However, with open-ended games, there is no limit to the domain or genre. The custom object-oriented programming language and bulletin board system (BBS) of the shareware game ZZT is an example of how players can remix and design the grid-world and ASCII characters to make new games including puzzle games, RPGs, and visual novels [8]. LittleBigPlanet is a platformer game designed around crowd-sourced content generation where users can share asset creations and upload their own levels using the game's base mechanics [9]. The sequel game, LittleBigPlanet2, expanded the genre domains outside of platformers including racing games, arcade multiplayer games, and even movies [10]. This later iteration of the series added more complex mechanics such as simple AI behavior programming through the Sockbots and logic gate programming for switches and other mecha- nisms.\nIn the areas of game Al research and the independent game development, much work has been done to develop game engines that facilitate online communities. User-bases for micro-game engines and fantasy console engines (i.e. Bitsy, PICO-8) allow users to share games made with these specific engines on platforms such as Itch.io or the website's BBS. The accessibility and simplicity of these game engines are what make them so popular and distinguishable in their design [11]. The ANGELINA system by Cook et. al. uses automated"}, {"title": "III. AMORPHOUS FORTRESS ONLINE", "content": "Amorphous Fortress Online is an open-ended simulation and game design system that allows users to create small multi-agent environments. These environments, or fortresses are made up of AI agents called entities that interact with each other in a simulation. Users can also make playable character entities that also interact with the automated entities in the fortress turning the zero-player simulation into a user controlled game environment. The following sections detail the components of the online system and the design pipeline users undergo to create, remix, and play the fortresses submitted to the website.\nA. Amorphous Fortress Engine\nThe underlying engine of the Amorphous Fortress On- line system is a JavaScript-ported version of the Amorphous Fortress Python engine [14], [15]. Many elements from the Python engine are retained in the JavaScript port, however Amorphous Fortress Online has further additions and im- provements for deeper agent interaction and gameplay in the fortresses.\nEach entity class of the Amorphous Fortress is defined by a singular ASCII character, a list of nodes, and a set of edges. Each instance of an entity has a unique identifier value. The ASCII character-rendering was directly inspired by classic terminal-based rogue-likes such as Rogue and Dwarf Fortress. These characters can be any symbol that can be represented on a terminal but lack the color variance found in some text-based roguelike games. Future iterations of Amorphous Fortress Online will introduce colors and sprite designs for better visual engagement.\nThe behavior for the autonomous entities of the system are defined using Finite State Machines (FSMs) abstract representation of an interconnected set of actions, states, and transitions represented by a graph that have been used to control a multitude of simple game AI behaviors [16]. The nodes of the FSM graph define the action of the agent while the edges determine conditions for transitioning between action states. The simplicity, explainability, and scalability of the FSM design creates an accessible interface for users to design new interactive AI behaviors in the Amorphous Fortress engine.\nThere are a total of 13 action behavior nodes defined for the entities' FSMs in the Amorphous Fortress. 10 of these nodes define automated behavior for the entity; actions that will occur without user interaction in the simulation. These nodes are defined and based on common Al game mechanics such as chase, or add. The remaining three action behavior nodes are player nodes nodes that depend on user input to enact the action. These three nodes player_move, player_push, and player_move_wall are based on their autonomous action nodes move, push, move_wall respec- tively. However, instead of using random movements, they use 5 directional user inputs: up, down, left, right, and a skip turn action which keeps the entity idle. Like the original Amorphous Fortress engine, each node can only be used once (excluding character permutations) to avoid redundancy.\nThe conditional edges define the transitions of the entity from one action state to another. A node for an entity can have multiple edges but only two directional edges can exist between two nodes (i.e. $A \\rightarrow B$ and $B \\rightarrow A$). The edges of a currently active node will transition to their corresponding node based on edge value priority. The fortress contains the environment where the simulation takes place and stores general information accessible to all of the entities defined. Each fortress in Amorphous Fortress Online consists of a 16 x 8 grid space containing all of the"}, {"title": "B. Example Scenario", "content": "To illustrate the potential of our system to emulate ab- stracted game and simulation dynamics, we use the FSM entity class definitions to design two simple example environments. These environments, inspired by The Legend of Zelda: Tears of the Kingdom [17], contains three entity class definitions: 'Link', 'Bokoblin' and 'Korok'. In the Zelda franchise, Koroks are characters normally revealed after the player, controlling the character Link, completes a puzzle or interacts with a unique hidden object, at which point the Korok gifts the player a seed that can be used as in-game currency. Bokoblin characters in the game also interact with the character Link by chasing him when he comes into range and trying to attack him\nFor scenario A, a single Link entity $L$ and a single Korok entity $k$ are initialized in the fortress with grass entities $w$ placed as decoration. Link's FSM is defined such that the character will move randomly on the map every 2 steps. When the Korok ('k') is next to Link ('L'), it transforms into a seed, '$'. When Link touches the seed, he takes it, removing the '$' character from the map. For scenario B, a Bokoblin entity $B$"}, {"title": "C. Entity Editor", "content": "When designing a new fortress or editing a previously submitted fortress in Amorphous Fortress Online, users are initially taken to the entity editor screen referenced in Figure 4. Entities are designed and edited with an interactive drag- and-drop and dropdown menu system. The nodes and edges of an entity's FSM are visualized and organized in a canvas editor (A). Users can add new nodes to the canvas by dragging nodes from the available node list section (C.) In the canvas, users can edit a node's value or delete it by right clicking on its FSM box and selecting through its dropdown menu screen. Edges can be added by selecting the starting node box and then clicking on its connecting end node. The edge condition can also be changed in a similar fashion as the nodes by right clicking on it. Alternatively, users can use list editor menu (E) to make changes directly based on value and add and delete entity FSM elements.\nThe user can quickly switch between the editing the current entity definitions through a dropdown menu above the visual FSM editor or by clicking on the entity's full definition box from the entity list area (F.). Users can input whatever name or character representation they would like their entity to have in the fortress (D.) Entities in the fortress are added or deleted with a dropdown menu (B) above the canvas editor.\nEach drop down menu has a limited selection of options for the user to choose from when designing their entity. The options for the node and edge values are limited to only the characters that have already been defined in fortress. For example, in a fortress with the entity character representations M, &, and + for the action node push only the options push M, & and push + would be shown."}, {"title": "D. Fortress Editor", "content": "After editing their entities, users can use the fortress editor to then place them in the fortress environment referenced in Figure 5. The fortress editor features a canvas window (B) with the fortress layout in a 14 by 6 grid space area. Users select"}, {"title": "E. Text Editor", "content": "For advanced users, Amorphous Fortress Online also in- cludes a text editor see Figure 6 accessible from the entity editor screen to allow users to directly edit the fortress definition. The text editor acts as an alternative to both the interactive entity and fortress editors. This particular editor is based off of the original Amorphous Fortress fortress definition files. Users can directly specify the entity FSM definitions and initial fortress layout with the text area interface (A.) The text editor features a custom made compiler for the Amorphous Fortress engine that checks for invalid nodes or edges, such as unknown node definitions, invalid FSM parameters, invalid characters, or invalid fortress layouts such as unknown charac- ters or incorrect fortress dimensions. To save the fortress (E) to the entity and fortress GUI editors, users must first validate (D) their input text through the compiler. This is to ensure that the text version of the fortress definition can be fully interpreted by the engine without issue. The compiler returns the type of error found from the text editor as well as the line number in a console (B) to the right of the editor for easier debugging for the user. Users can also paste entire fortress definitions into a smaller text area (C) and edit it line by line."}, {"title": "F. Play Screen", "content": "From both the entity editor and fortress editor screen, users can test and simulate their fortresses before submitting to the Amorphous Fortress Online database in the play screen (shown in Figure 7). The play screen details the name and author of the current fortress (A) and shows the fortress state during simulation in the main fortress view window (B) starting with its initial entity placement state. In the menu bar (D) under the main fortress view window, users can start, pause, or reset the simulation by pressing the play button or reset buttons. The play screen also includes a settings area (E) with"}, {"title": "G. Main Page", "content": "Once a user finishes editing their fortress, it is uploaded from the fortress editor to the Amorphous Fortress Online database and shown on the main landing page of the website (Figure 9a). The main page shows the most 120 recent fortresses submitted to the database with their fortress name, author, and initial fortress layout. Hovering over a fortress in the matrix list allows users to see the defined entity names in the fortress. Fortresses that include player action nodes include an outlined game controller next to their fortress rendering to indicate to users that they can be user controlled.\nWhen a user clicks on the fortress, they can view the full information, including the entity definitions, notes description about the fortress, and a link to the parent fortress ID if the fortress was remixed and edited by the author from a previously submitted fortress. An example fortress view is shown in Figure 9b. From this information view, users can either select to play the fortress themselves in the play screen window or edit and remix the fortress to make a new submission.\nThe main screen features two search bars at the bottom of the page to allow users to find specific fortresses submitted to the database. Users can search for fortresses by username, fortress name, or both. The most recently submitted fortresses matching the search criteria are returned. Users can register a username in order to claim authorship to their fortresses with a login authentication system. For password recovery, there is also an optional input to provide an email address with the username registration. Fortresses submitted anonymously without a user login will be authored by the default \"dork\" user account."}, {"title": "1) Backpack Feature", "content": "The backpack feature of Amorphous H. User Guide Fortress Online (demonstrated in Figure 10) allows users to save entity characters from submitted fortresses to their user account. By clicking on an entity definition from the fortress view window of the main page, users can save entities to their \"backpack\" storage a pop-up window found at the bottom of the screen. Up to 10 entities can be saved to the user's \"backpack\" storage. These saved entities can then be added to a new fortress in the entity editor. If a backpack entity has a reference to a character not found in the fortress, it will be randomly replaced with another entity. For example, if a backpack entity A contains the node take $ but the fortress only contains entities with the characters &, M, and +, then the node will be changed on addition to the fortress to either take &, take M, take +, or take A. This feature facilitates collaboration and remixing across environment design and the usage trends of different entity definitions and roles can be studied across fortress development.\nA user guide is provided for Amorphous Fortress Online as a tutorial, reference manual, and explanation for elements of the engine. The guide features sections on the Amorphous Fortress engine itself, the main screen, entity, fortress, and text editors, and the play screen. On each page of the guide are demonstrative GIFs to show the player how to interact with the Amorphous Fortress Online interface using examples from previously submitted fortresses."}, {"title": "IV. SHORT STUDY", "content": "We released the Amorphous Fortress Online v1 site on February 20, 2024. The website was promoted on various social media sites including X (formerly known as Twitter), BlueSky, LinkedIn, Facebook, and Reddit.\nWhile we didn't receive many new fortress submissions, we collected a total of 174 plays from the fortresses. Six authors submitted a total of 33 fortresses to the website. Unfortunately, a majority of these fortresses come from the authors only five additional fortresses were submitted after the release of the site. This stark difference of fortress plays vs. fortress creation can possibly attribute to a large learning curve to using the system. An unfamiliarity with the engine as opposed to more familiar domains and games that have online editors such as Free Rider and Baba is You may have also attributed to the lack of submissions.\nOutside of the author's submission of 21 fortresses, users submitted an average of two fortresses. There were a total of 143 entities made in the website and a total of 298 nodes. Figure 11 shows the frequency of each node type in the system. Interestingly, about 34.38% of submitted fortresses were remixed, with the longest lineage of fortresses having"}, {"title": "V. REFLECTION AND FUTURE WORK", "content": "Amorphous Fortress Online is intended to be a system to lay the foundation for future generative and recommendation game AI studies by utilizing the user submitted data. With this data, we would like to accentuate the environment design process and make the system more engaging by introducing mixed- initiative and collaborative AI systems trained from on-going submitted fortress data. The fortress information submitted to Amorphous Fortress Online along with the website source code will also be made open source and open access.\nA. Mixed-Initiative Fortress Design\nThe lack of fortress submissions is one of the most pertinent areas we would like to address for future work. To remedy the intimidation factor of using the system and trying to make a new fortress from scratch or from a remix of another user's fortress, we will introduce the fortress evolver system used in the design of the first 2 iterations of the system [14], [15]. This generator will allow users to have a starting point and edit the fortress towards their liking much like the creative process in the Baba is Y'all system. This mixed-initiative interface will also encourage and develop an effective feedback system between the AI generator and the human designer to create novel fortress environments for the system.\nB. Entity Recommendation\nDesigning and constructing thematically and semantic rel- evant entities for a fortress is a tedious process. This process is slightly alleviated with the backpack feature, however we would like to incorporate the entity and fortress-focused evolutionary components of the previous Amorphous Fortress works in the online version of the system to create a human-AI collaborative pipeline. Using the quality diversity methodology from previous work on the Amorphous Fortress [15], we will build a recommendation system for the entity editor. This system will suggest thematically relevant entities to the user that also enhance the multi-agent interactions within the fortress. This recommendation system will be modeled after the variance of roles entities and NPCs have in video games, ranging from decoration entities and items to simple background characters that act as NPCs to more complex entities such as enemy characters. The complexity of these entity FSM definitions would complement the user's current entities in the fortress and guide the fortress towards emergent behavior for the environment.\nC. Sprite Generation\nThe visuals of the Amorphous Fortress Engine are abstract and require more creative imagination from the user to inter- pret the actions and behaviors of the entities in the fortress. To make the system more visually appealing and engaging, the next iteration of Amorphous Fortress Online will feature a sprite editor to allow users to replace the entity ASCII character definitions with small 8x8 pixel 4-color sprites. The minimalist sprite designs is inspired by that of other easy-to- use microgame engines like PICO-8 and Bitsy. After users submit labeled text-sprite associations to their entities in the fortress, we will use this data to train a small generator model similar to architecture of the $5 model [18] to recommend and generate new sprites for the fortresses. This project will create a new database of labeled small scale images that will also continuously be updated based on site usage."}, {"title": "VI. CONCLUSION", "content": "This paper introduces Amorphous Fortress Online an online simulation / game design system based around community-centric user generated environment creation. We describe the features and interfaces available to users to engage with the site and submit open-ended and thematically diverse games and multi-agent environments. The growth and addition of new fortresses will set the groundwork to build a large dataset that can be used for future AI research in agent training and generative models."}]}