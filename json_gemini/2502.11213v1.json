{"title": "Stochastic Optimization of Inventory at Large-scale Supply Chains", "authors": ["Zhaoyang Larry Jin", "Mehdi Maasoumy", "Yimin Liu", "Zeshi Zheng", "Zizhuo Ren"], "abstract": "Today's global supply chains face growing challenges due to rapidly changing market conditions, increased network complexity and inter-dependency, and dynamic uncertainties in supply, demand, and other factors. To combat these challenges, organizations employ Material Requirements Planning (MRP) software solutions to set inventory stock buffers \u2013 for raw materials, work-in-process goods, and finished products \u2013 to help them meet customer service levels. However, holding excess inventory further complicates operations and can lock up millions of dollars of capital that could be otherwise deployed. Furthermore, most commercially available MRP solutions fall short in considering uncertainties and do not result in optimal solution for modern enterprises.\nAt C3 AI, we fundamentally reformulate the inventory management problem as a constrained stochastic optimization. We then propose a simulation-optimization framework that minimizes inventory and related costs while maintaining desired service levels. The framework's goal is to find the optimal reorder parameters that minimize costs subject to a pre-defined service-level constraint and all other real-world operational constraints. These optimal reorder parameters can be fed back into an MRP system to drive optimal order placement, or used to place optimal orders directly. This approach has proven successful in reducing inventory levels by 10-35 percent, resulting in hundreds of millions of dollars of economic benefit for major enterprises at a global scale.", "sections": [{"title": "1. Introduction", "content": "Global supply chain faced enormous challenges due to uncertainties introduced by the shocks in both supply side and demand side during the COVID-19 pandemic. A supply shock hit as the pandemic first emerged from mainland China and disrupted global supply. Over the ensuing months, global shutdowns and stay-at-home orders triggered a second shock, this time to the global demand. These two waves of unprecedented disruptions to the global supply chains exposed the inherent volatility of such networks. With this volatility to be continued in the post-pandemic era, a solution is required to handle uncertainties in the global supply chains. While battling the uncertainties by increasing capital spent on raising the inventory level, the enterprises begin to pay more attention at the concept of lean manufacturing which includes maximizing the resilience of the inventory availability while minimizing the amount of capital expenditure on inventory held.\nCurrent practice in today's supply chains suffer from numerous issues covering aspects including suppliers, transportation, manufacturing, distribution and customers (Fig. 1). Perturbations in each of the aspects are hardly specific only to itself. The network nature of the supply chains makes any issue in each of these aspects easily propagate and amplify upstream or downstream. On one direction, dynamic demand and order changes would impact production schedules and inventory management at manufacturing sites or distribution centers. In addition, available inventory and production requirements would inform supplier orders. The equipment reliability, product quality issues, and shipment uncertainties would impact part orders. On the other direction, supplier uncertainties and delays would affect production schedules, while order delays and quality issue would risk customer satisfaction. Furthermore, material movement delays would strain the entire supply chain. The Lack of end-to-end operational visibility would lead to delays across supply chains, excess inventory levels, quality issues, poor OTIF, or low customer satisfaction.\nMaterial Requirements Planning (MRP) is at the heart of the process in today's supply chain systems. MRP uses a deterministic logic that calculates the time and quantity of the orders that need to be placed, based on net material requirement, re-order parameters, current inventory, demand forecast and other inputs (Fig. 2). MRP computes material requirements based on demand forecast and schedules the arrivals as close as possible to the time they will be consumed. Re-order parameters such as Safety Stock Value (SSV) and Safety Time (ST) for the Safety Stock MRP system, or Reorder Point (RoP) for the Reorder Point MRP system are used as inputs to MRP to address the uncertainties"}, {"title": "2. Related Work", "content": "Solutions the MRP algorithm provides a heuristic approach for computing a sub-optimal but feasible solution for optimization problem, given SSV, ST, demand forecast, and other ordering parameters. To account for such limitations of MRP, new variations of MRP has been introduced. For example, Ptak and Smith (2011) introduced a new type of MRP called demand driven MRP (DDMRP). DDMRP leverages knowledge from theory of constraints, traditional MRP & distribution resource planning (DRP), Six Sigma and lean manufacturing. It leverages MRP for planning, and kan-ban techniques for execution across multi-echelon supply chains, which means that it has the strengths of both but also the weaknesses of both and it remains a niche solution (Velasco Acosta et al., 2020; Smith and Smith, 2014).\nSince the multi-commodity distribution system design was first introduced by the work of Geoffrion and Graves (2010), multiple optimization-based approaches have been proposed for the design of supply chain networks (Aikens, 1985; Geoffrion and Powers, 1995; Vidal and Goetschalckx, 1997). Most of these research, however, made the assumption that the supply chain are deterministic without considering the uncertainties from different sources such as demands and resource capacity. Supply chain disruption due to the ignorance of uncertain operating conditions will cause huge economic impact. A stochastic programming model was proposed by Santoso et al. (2005) to solve the supply chain network design problem.\nSince then, many attempts have been made to solve stochastic nature of supply chain network by leveraging mathematical methods. formulated A two-stage stochastic program targeting at an optimal operation plan was formulated by Ierapetritou and Pistikopoulos (1994) and a decomposition-based optimization approach was proposed to solve the program. Further improvement on the approach was made by incorporating a MILP planning model (Gupta and Maranas, 2000). A non-linear mixed integer formulation was proposed by Gupta and Maranas (2000) with non-convex objective and constraint functions.\nThe main issue with the methods above is that they have oversimplified the supply chain in order to model it as a mathematical optimization, which has resulted in the omission of critical real-world operational complexities (Agarwal, 2019). Furthermore, it order to make the problem solvable additional relaxing assumptions have been made which cannot be made on real examples in real world operations. Simulation-based method was brought into the picture because of its capability of taking into account specific business restrictions, control variables and uncertainties of the problem (K\u00f6chel and Niel\u00e4nder, 2005). However, a pure simulation-based approach won't lead to identification of best parameters to operate the system with, which could lead to optimal performance. As a result, a simulation-optimization approach has has been adopted recently to adequately model the complex system-level interactions and constraints and solve for optimal re-order parameters which leads to optimized inventory level and cost (Fu, 2002).\nOlafsson and Jumi Kim (2002) provided an overview of simulation optimization methods which were later adopted to solve the supply chain optimization problems. Given the involvement of multiple decision makers in the whole supply chain network. Swaminathan et al. (1998) proposed a multi-agent approach to represent critical supply chain components (e.g., retails, manufacturers) and simulate the supply chain based on their decisions. Mele et al. (2006) further extended agent-based simulation-optimization approach by incorporating genetic algorithm. Joines et al. (2002) leveraged a multi-objective GA methodology with an existing supply chain simulator to optimize the system parameters. Besides directly optimize the inventory which may be limited by operation constraints, a simulation-optimization framework was proposed by Jung et al. (2008) to optimize the safety stock levels with consideration of production capacity.\nThe majority of methods mentioned above did not prioritize treatment of the stochastic nature of inventory above the optimization. For the ones that formulate the issue as stochastic programming problem, they lack the details in the modeling to properly represent the dynamics of inventory in supply chain. Those drawbacks make it difficult to productionize those solutions at a large scale."}, {"title": "3. Methodology", "content": "We cast the problem at hand as a stochastic constrained optimization problem and solve for the optimal set of re-order parameters that minimize inventory levels subject to a given service level constraint. The objective function in the optimization problem includes costs associated with holding inventory, ordering and transportation. This cost is optimized with respect to operational constraints. These operational constraints include planning calendar, planning time fence, (expedited) lead time, rounding values, minimum order quantity, customer-dependent operational constraints, complex material pricing (e.g., volume-based pricing). Another important constraint is often the service level"}, {"title": "3.1. Problem formulation", "content": "We cast the problem at hand as a stochastic constrained optimization problem and solve for the optimal set of re-order parameters that minimize inventory levels subject to a given service level constraint. The objective function in the optimization problem includes costs associated with holding inventory, ordering and transportation. This cost is optimized with respect to operational constraints. These operational constraints include planning calendar, planning time fence, (expedited) lead time, rounding values, minimum order quantity, customer-dependent operational constraints, complex material pricing (e.g., volume-based pricing). Another important constraint is often the service level constraint which is defined as expected probability of not hitting a stock-out during the next replenishment cycle.\nThe stochasticities, or uncertainties, in the constrained optimization problem come partly from the fact that there are often unexpected delays and shortages on the arriving orders. In addition, the miscellaneous and blocked material movements that cannot be anticipated ahead of time are also categorized as uncertainties. Finally, the optimization result is required to be frequently adjusted based on the latest estimation of the future demand, which is subject to change from one day to the next and is often different from the actual demand, leading to another source of uncertainty.\nTo address the constraints and the uncertainties mentioned above, we formulate the problem in a model predictive control (MPC) setting, which is a well-established framework in the process control discipline Garcia et al. (1989); Mayne et al. (2000). At each timestamp t (also referred to as the sampling time), our problem can be formulated as the following optimization problem\n$\\begin{aligned}\n&\\min _{R^{t: t+H}}\\mathbb{Y}_{p}\\left[\\sum_{i=0}^{\\Gamma_{H}-1} x_{t+i \\mid t} \\cdot \\pi_{\\eta}+a_{t+i \\mid t} \\cdot \\pi_{\\tau}\\right] \\\ns.t. & \\Psi\\left(X^{t: t+H}\\right)-S L_{\\min } \\geq 0, \\\n& x_{t+i+1 \\mid t}=x_{t+i \\mid t}+a_{t+i \\mid t}-c_{t, t+i}^{D F} \\quad \\forall i \\in[0, \\ldots, H-1], \\\n& A_{i+1: t+H}=M R P\\left(x_{t+i \\mid t}, C_{t+i}^{D F}, r_{t+i \\mid t}, A_{i: t+H}\\right) \\quad \\forall i \\in[0, \\ldots, H-1], \\\n& p_{t+i+1 \\mid t}=p_{t+i \\mid t} \\quad \\forall i \\in[0, \\ldots, H-1], \\\n& R^{t: t+H} \\geq 0,\n\\end{aligned}$$\nwhere the variable H denotes the length of the prediction horizon, which limits the length of the inventory simulation we perform at sampling time t. The superscript represents the timestamp, and the $t + i\\vert t$ notation in the superscript depicts the value on timestamp $t + i$ predicted at the timestamp t. The variable $x \\in \\mathbb{R}^{1}$ denotes the stochastic inventory level, and $a \\in \\mathbb{R}^{1}$ depicts the stochastic expected order arrival quantity. Note that the expected order arrival quantity can be further split into the expected standard arrival (SA) and the expected expedited arrival (EA), which will be discussed in Section 3.2.1. The variable $\\pi_{\\eta}$ is the inventory holding cost, and $\\pi_{\\omicron,\\tau}$ represents both ordering and transportation costs. Note that objective function could take different forms depending on the business setting our customer has.\nThe notation $\\mathbb{Y}_{p}(\\cdot)$ in the objective function of Eq. 1 is the aggregation function that takes the specific percentile of a given uncertainty distribution, where the variable p represents the percentile of the uncertainty distribution, (e.g., if p = 50%, $\\mathbb{Y}_{p}$ returns the median of the uncertainty distribution). We want to point out that aggregating with function $\\mathbb{Y}_{p}(\\cdot)$ offers more flexibility than aggregating with the expectation (i.e., $\\mathbb{E}[]$), although the latter is more often used as the as the aggregation function for stochastic optimization problems.\nAs mentioned in Section 1, in all large scale operational settings where we intend to deploy our C3 SIO solution, the reordering of materials is done via legacy MRP systems. In order to respect that constraint and to ease the customer adaptation, we optimize for the reorder parameters, which are the inputs of the MRP system. Therefore, the decision variables in this formulation are denoted by $R^{t: t+H}$, which represents the reorder parameters of the MRP system up to step $t + H$. To be specific, $R^{t: t+H}$ is expressed as Eq. 2 below\n$R^{t: t+H}=\\left[r_{t \\mid t}, r_{t+1 \\mid t}, \\ldots, r_{t+H-1 \\mid t}\\right] \\in \\mathbb{R}^{H \\times 2}$    \nwhere the variable r at a given timestamp is a single pair of reorder parameters for the MRP system. Note that our formulation would work for MRP systems with a variety of replenishment strategies. However, throughout the paper, we limit the scope of our discussion within the Safety Stock MRP system. Therefore, the reorder parameters here include the safety stock value (SSV) and the safety time (ST), and the variable $r_{t+i \\mid t}$ can be represented by Eq. 3 below\n$r_{t+i \\mid t}=\\left[S S V_{t+i \\mid t}, S T_{t+i \\mid t}\\right] \\in \\mathbb{R}^{2}$    \nThe variable $X^{t: t+H}$ in the first constraint of Eq. 1 represents the vector of stochastic inventory level in the prediction horizon H, and is clearly defined in Eq. 4 below:\n$X^{t: t+H}=\\left[x_{t \\mid t}, x_{t+1 \\mid t}, \\ldots, x_{t+H-1 \\mid t}\\right] \\in \\mathbb{R}^{H}$    \nwhere the bold lower-case notation $x \\in \\mathbb{R}^{1}$ with superscripts represents the stochastic inventory level for a specific date, predicted at time t. The variable $S L_{\\min}$ represents the minimum target service level. The function $\\Psi(\\cdot)$ calculates the service level within the prediction horizon. It can be expressed as Eq. 5 below\n$\\Psi\\left(X^{t: t+H}\\right)=\\mathbb{Y}_{p S L}\\left[\\frac{\\sum_{i=1}^{H} \\delta\\left(x_{t+i \\mid t}\\right)}{H}\\right] \\in \\mathbb{R},$    \nwhere the notation $\\delta(\\cdot)$ is a level set function, which is defined as\n$\\delta(x)=\\begin{cases}1, & x \\geq 0 \\\\\n0, & \\text { otherwise }\\end{cases}$    \nNote here the service level is computed as the percentage of days on which the inventory level is not negative. There are other definitions of the service level, such as fill rate (details in Chu et al. (2015)), which is also supported by this formulation. Also note that the aggregation functions $\\mathbb{Y}_{p}$ (in Eq. 1) and $\\mathbb{Y}_{p S L}$ (in Eq. 5) are identical, but p and $p_{SL}$ could take different values, depending on the risk profile of the customer. We use different notation here for clarity."}, {"title": "3.2. Algorithm overview", "content": "Once the objective function and the constraints are configured (e.g., the hyper-parameters including $\\mathbb{Y}_{p}$ in Eq. 5 determined), Eq. 1 can be solved for at each sampling time. However, in practice, it is difficult for the customer to provide those hyper-parameters beforehand. Therefore, as part of the solution, we need to help the customer to configure the hyper-parameters that fit best for their business interest. In addition, MRP systems can be highly customized depending on the customer. There are pieces of logic such as order cancellation and order merging (i.e., flush window) that are difficult if possible at all to formulate as simple linear constraints for the optimization problem. This fact prevents us from directly feeding the optimization problem formulated in Eq. 1 in a traditional mixed-integer linear programming (MILP) solver.\nTo handle the challenges mentioned above, the C3 AI Inventory Optimization application introduces an AI Stochastic Inventory Optimization Algorithm (\"the algorithm\"). The algorithm learns a material plant's historical uncertainties in material movements - supply, demand, and other over a historical time period (\"training period\") to select the best hyper-parameters that are feasible to the customer. Then, the algorithm perturbs these learned material movement uncertainties into the material planning simulations in the future (i.e., \"validation period\", and \"live production\"). Based on those simulations and uncertainty realizations in the future, and with the help of the selected hyper-parameters, the algorithm recommends optimized reorder parameters (i.e., SSV and ST for the Safety Stock MRP system) that minimize inventory costs while meeting the target service level constraint.\nFig. 3 demonstrates the general workflow of the algorithm. The algorithm has two phases: a training (offline) phase and a validation or live production (online) phase. The training phase happens on a period of time further in the history while the validation phase is on a more recent time period. The term \u201csimulation period\u201d in this paper refers to the timestamps (i.e., days) either in the training or in the validation phase depending on the context. Note that the live production is a special case of the validation phase where the optimization is performed at \u201ctoday\u201d (the last date we have the data available). Therefore, the reorder parameters are only optimized for one timestamp in the live production phase.\nWe start the discussion of Fig. 3 from the validation"}, {"title": "3.2.1 Inventory simulation with MRP", "content": "As introduced previously, the MRP system sits at the core of C3 AI SIO Algorithm. For any given sampling time t, the MRP takes the reorder parameters along with other inputs including demand forecast ($C_{t}^{D F}$), lead time (LT), expedited lead time (ELT), planning calendar (PC), item volume pricing (IVP), etc. within a horizon (corresponds to the predictive horizon H in Eq. 1, then outputs the order placement in that horizon.\nAs is explained in Section 3.1, the optimization framework introduced by C3 AI SIO could support MRP systems with a variety of replenishment strategies. However, we limit the scope of our discussion in this paper to the Safety Stock MRP where the reorder parameters are safety stock value (SSV) and safety time (ST).\nSafety Stock MRP\nThe Safety Stock MRP system places orders for a window in the future based on the current inventory position, existing orders and demand forecast. The MRP projects the inventory position for every day in this future window. Orders are placed to arrive when the projected inventory drops below a predefined safety stock value, subject to reorder constraints such as lead time, factory calendar, planning calendar, minimum order quantity and rounding values, etc.\nAlgorithm 1 provides a simplified view of the Safety Stock MRP system, where the key pieces of logic are described in details. However, some auxiliary pieces logic including item volume pricing (IVP), lot size in days (LS), planning calendar (PC), order flushing (or, merging) are intentionally left out in this algorithm to improve the readability of the algorithm. Order cancellation logic, on the other hand, is explained in the next sub-section (Algorithm 2).\nInput data to Algorithm 1 include starting inventory $x_{t}$, demand forecast $C_{t}^{D F}$, the expected arrivals of existing standard orders $S A_{t+i}$ and existing expedited orders $E A_{t+i}$, where $i = 0, ..., H$, and H is the horizon. The algorithm simulates inventory for the horizon $\\hat{x}_{t+i}, i = 0, ..., H$. Notice that hat accent is used to denote inventory position within MRP. When $ELT <= i < LT$, where ELT and LT are expedited lead time and lead time, respectively, the algorithm places new expedited orders if projected inventory $\\hat{x}_{t}$ is about to go below 0. When $LT <= i < H$, the algorithm places new standard orders if projected inventory is about to go below safety stock value SSV. The quantity of new standard orders are modified to comply with minimum order quantity MO and rounding value RV."}, {"title": "3.2.2 Modeling of the uncertainties", "content": "In our algorithm, we consider four major sources of uncertainties, including demand forecast uncertainty, material movement uncertainty, supplier quantity uncertainty and supplier time uncertainty.\nDepending on the accuracy of the demand forecast model, the predicted demand can be quite different from the actual demand/consumption. Demand forecast uncertainty models the distribution of the difference between demand forecast and actual consumption.\nThere are two types of material movements, miscellaneous movements, and blocked movements. These are typically not considered in traditional MRPs and are not part of the amount represented in the demand forecast. Miscellaneous movements happen due to movement between facilities or customer returns. Blocked movements happen when parts arrived but cannot be consumed (e.g., due to a quality issue). As these material movements are generally unpredictable, they are treated as sources of uncertainty. Material movement uncertainty models the distribution of the sum of miscellaneous movements and blocked movements for a given SKU.\nSupplier quantity uncertainty models the distribution of the difference between the planned quantity in the purchase orders and the actual quantity received for a given SKU. Supplier time uncertainty models the distribution of the time difference of the planned delivery date and the actual delivery date of orders for a given SKU.\nIn reality, different suppliers can have different behaviors. One supplier may be more likely to delay and reduce quantity than another supplier. However, we usually don't have enough data points to accurately model the behavior of each supplier. Therefore, we average out different behaviors of all suppliers for a given SKU into one distribution.\nWe estimate the distribution of each source of uncertainty using an empirical distribution. Each empirical distribution is represented by a list of historical data points. We assume that all historical data points are equally likely, then we can sample the empirical distribution from the list of historical data points. The list of historical data points is retrieved from relevant quantities within a certain uncertainty sampling window (USW).\nThe USW for training is the entire training period. The USW during validation is a growing window with a fixed start date, where the initial length of the USW $L_{U S W}^{\\min}$ is given by\n$L_{U S W}^{\\min } = \\max \\left(L_{\\min }^{U S W}, L T+b^{U S W}\\right),$    \nwhere LT represents lead time, $b^{U S W}$ represents the buffer (or, the offset) of the USW length and $L_{\\min }^{U S W}$ denotes the minimum initial length of USW.\nThe empirical distribution for material movement uncertainty is represented by $U_{m m}$, which is a list of data points in the uncertainty sampling window, where each data point is the sum of miscellaneous movement and blocked movement at that time step. To be more specific,\n$U_{m m}=\\left[\\ldots, \\sigma_{m m}^{\\tau}+c_{b m}^{\\tau}, \\ldots\\right] \\in \\mathbb{R}^{L_{U S W}}, \\forall \\tau \\in U S W,$"}, {"title": "3.2.3 Optimization of the hyper-parameters", "content": "As mentioned earlier in the algorithm overview, we will help the customers to decide the risk profile that fits best to their business interest. The risk profile can be quantified by hyper-parameters including $p_{S L}$ for $\\mathbb{Y}_{p S L}$ in Eq. 5. This hyper-parameter is also referred to as service level percentile, or SLP. As will be discussed later, in the context of Safety Stock MRP system, the SLP directly affects the choice of SSV in the C3 SIO algorithm, but it does not have any impact on the choice of ST. To help with quantifying customer's risk profile on the time delay and recommending ST, we introduce another hyper-parameter, safety"}, {"title": "3.2.4 Forward-looking simulations", "content": "After selecting the hyper-parameters, we enter the reorder parameter estimation step. To find the optimal reorder parameters at a given sampling time t, we simulate inventory within a forward-looking window from t to H, where H is the horizon. This simulation is done with the MRP system and needs to be repeated multiple times, incorporating different samples from the uncertainty distributions. We refer to this process as the forward-looking simulation, which includes two steps:\n1. Run a MRP simulation within the forward-looking window;\n2. Generate multiple uncertainty realizations of the simulated inventory by perturbing the demand forecast, the delay and quantity shortage of the arriving orders.\nThe main inputs to the MRP simulation include:\n1. The demand forecast made on $\\tau$ for the forward-looking window $C_{t}^{D F} \\in \\mathbb{R}^{H}$,\n2. The existing orders scheduled to arrive within a seeding window\n$A_{t}^{\\text {seed }}=\\left[a_{t}^{\\text {seed }}, \\ldots, a_{t+t_{s}-1}^{\\text {seed }}\\right] \\in \\mathbb{R}^{t_{s}},$    \nwhere $t_{s}$ is the length of the seeding window, and $a_{\\tau}^{\\text {seed }}, \\forall \\tau \\in [t, ...,t + t_{s} - 1]$ represents the seeded arrival on timestamp $\\tau$,\n3. The candidate SSV and ST,\n4. The initial inventory position at sampling time $x_{t}$ (see Section. 3.2.6 for more details).\nNote that the size of the seeding window $t_{s}$ varies depending on the customers business logic, but oftentimes it is set to lead time (LT).\nGiven the new orders scheduled by MRP, we generate a total of $N_{r}$ realizations of inventory curves. The inventory at time $\\tau + 1$ for a realization r is given by\n$x_{\\tau+1}^{r}=x_{\\tau}^{r}-c_{d}^{\\tau}(r)-c_{m m}^{\\tau}(r)+s^{\\tau}(r) \\in \\mathbb{R}^{1}$  $\\forall \\tau \\in[t, \\ldots, t+H-1],$    \nwhere $x_{\\tau}^{r}$ is the inventory at time $\\tau$ for the r-th realization, $c_{d}^{\\tau}(r)$ is the sampled consumption at time $\\tau$, $c_{m m}^{\\tau}(r)$ is the sampled material movement at time $\\tau$, $s^{\\tau}(r)$ is sampled purchase order arrivals at $\\tau$. Note that the inventory level x here is no longer stochastic (not bold) with specific samples."}, {"title": "3.2.5 The k-iteration algorithm", "content": "The k-iteration algorithm (also included in the reorder parameter estimation step shown in Fig. 3) is used to map the hyper-parameters to the reorder parameter recommendations at each sampling time t. This algorithm is triggered in both training and validation (live production) phases of the algorithm workflow.\nThe procedure of the k-iteration algorithm can be found in Algorithm 3. At a sampling time t, the ST is determined by the STP and the empirical distribution of the supplier time uncertainty $U_{S T}$ in the corresponding USW. For SSV, it is initialized to 0. Then we enter the loop (i.e., the k-iteration) for increasing SSV incrementally till the $S L_{\\min}$ constraint in Eq. 1 is met. In every iteration of this loop, a total of $N_{r}$ realizations of the simulated inventory curves are generated (i.e., $X_{t: t+H}^{\\tau}(r), \\forall r \\in [1, ..., N_r]$) with the forward-looking simulation procedure. The inventory cost and SL associated with each of the realization of the simulated inventory (i.e., $X_{t: t+H}^{\\tau}(r)$) is computed. An inventory deficit h is calculated to quantify how much lift of the inventory is needed to make sure $\\Psi(X_{t: t+H})$ is greater or equal to $S L_{\\min}$. For example, in Fig. 8, if the minimum target SL and the SLP are both assumed to be 100%, the inventory deficit h would be the height of the red-boxed area, since that is how much the inventory level needs to be lifted so that 100% (SLP) of the realization curves would satisfy a minimum target SL of 100%. Note that for the MRP simulations in the k-iteration algorithm, the arrivals in [0, LT) (LT represents lead time) is seeded with the simulated arrivals from the MRP orders placed during the previous sampling time, since the order placed at the simulation of the current sampling time will not arrive the till after LT. Therefore, here the service level is computed in the time period of [LT, min(2LT + ST, H)] due to the fact that the service level in [0, LT) is not in any way affected by the choice of SSV at sampling time t, and the service level for later than 2LT + ST is likely overwritten in the next sampling time.\nOnce the inventory deficit h is determined, the SSV for the next iteration would be calculated by adding h to the current $S S V_{k}$ (k denotes the iteration). The new $S S V_{k+1}$ would be used to run the MRP simulation and the uncertainty realizations for the next iteration k + 1. As is shown in Fig. 9, the lifted SSV is usually identical to the lift of inventory level since it would result in a large order arrival"}, {"title": "3.2.6 Other algorithm treatments", "content": "There are a few key treatments of the workflow that would have significant impact on the performance and outputs of the algorithm. They include the batched uncertainty realizations with the MRP simulation, the \u201csteady-state\u201d initial inventory of the k-iteration algorithm, the optimization frequency, and the demand forecast pre-processing. We will explain those treatments in this section.\nBatched uncertainty realizations with MRP\nIn the k-iteration algorithm described above, each uncertainty realization r does not trigger another MRP simulation, which means for $N_{r}$ simulated inventory curves, the MRP simulation is only performed once. The rest of the curves are generated by simply perturbing the MRP result with the uncertainties sampled from the empirical distributions as a post-processing step. This process is referred to as the batched uncertainty realizations with MRP simulation. The benefit of such an approach is the reduction of computation time, since the uncertainty sampling is done much quicker in comparison to the MRP simulation. However, those realizations are referred to as the proxies since there could be difference between the results of this approach and those results if we sample uncertainty distributions during the MRP simulation processes (i.e., sequential uncertainty realizations with MRP).\nThe proxies of the simulated inventory is considered to be sufficiently accurate for the realizations of the simulated inventories, since those realizations are only used to determine how much SSV should be lifted, rather than accurately computing inventory cost and SL.\n\u201cSteady-state\u201d initial inventory\nIntuitively, the initial inventory used for the k-iteration algorithm at sampling time t is taken from the simulated inventory computed from the previous sampling time, shown in Eq. 28. Note that at the beginning of the simulation period (for either training or validation), the simulated inventory is seeded with the actual inventory.\n$\\tilde{x}_{t}^{i}=x_{t}^{s i m},$    \nwhere $\\tilde{x}_{t}^{i}$ represents the initial inventory for the k-iteration algorithm starting at sampling time t. The variable $x_{t}^{sim}$ represents the inventory simulated at the previous sampling time.\nThe initial inventory determined by Eq. 28 is sensitive to the simulation process. Specifically, if the simulated inventory is high at t, the initial inventory of the k-iteration would"}, {"title": "4. Inventory optimization at scale", "content": "C3 AI Suite (the Platform), serves as the platform that hosts both data and computational frameworks that back the C3 Stochastic Inventory Optimization Application, is capable to provide enterprise users with data integration, machine learning development and operation tools, in a generalized application-development software stack (Figure 12).\nSpecific to the C3 SIO Application, we leveraged the Platform to integrate various formats of datasets from different data sources to the Suite such that the data can be easily consumed and orchestrate with the deployed optimization framework. The computational intensity from proposed framework can be easily identified based on the nature of multiple simulation runs. Typically, customers from different industries have hundreds of thousands to millions types of SKUs to optimize, leading to necessity of effective large scale optimization. The Model Deployment Framework in C3 AI Suite enable users to scale-out up to millions of ML models within a single application through pre-packaged automation including automatic scoring, compute resource auto-scaling, version management, alerting, hyper-parameter optimization, and auto retraining. By leveraging the model deployment framework on C3 AI Suite, it allows us to perform inventory optimization and simulation experiments across millions of SKUs, at scale and in a distributed fashion."}, {"title": "4.1. Data integration", "content": "With the available data integration techniques supported on the Platform, we have configured the C3 Inventory Optimization Application to directly load the data from the enterprise resource planning (ERP) system to facilitate the data consumption of the SIO algorithm, as is shown in Figure 13. The C3 Source Collection Types are used to map the source data locations and it can be configured to retrieve the source files on regular basis automatically with only retrieving the increments. The C3 Canonical Types are used for mapping the table headers of different data formats, and translating them into the data format that is native to the C3 AI Suite. Specifically to the C3 SIO Application, we have two layers of Canonicals, with the first layer mapping directly to the ERP source data, and the second layer mapping from a set that are transformed from the first layer, which follow closely to the business logic and are in closer form to the entity types in the Application. This provides users flexibility to provide data in either of the Canonical forms, depending on data availability. The C3 Transform Types are used for converting the data from Canonical Types and mapping the converted ones either to an additional layer of Canonicals or directly to entity types. Within the C3 Inventory Optimization Application, these entity types hold the information associated with certain business modules in resource planning, e.g. inventory level, material movement transactions, purchase orders, production orders, demand forecasts, etc."}, {"title": "4.2. Model deployment", "content": "By leveraging C3 AI Suite, we first incorporated various features based on the feature engineering tools and developed C3 AI ML pipeline to incorporate the whole"}, {"title": "5. Case study results", "content": "The C3 Stochastic Inventory Optimization algorithm has been tested on customer data from a variety of verticals. Here, we show the performance of C3 SIO with different levels of details and demonstrate the inventory savings that can be achieved by applying our algorithm.\nIn Section 5.1, we talk about two representative SKUs come from one of our clients in the energy and manufacturing industry. We demonstrate in detail how the algorithm manages to recommend a lower SSV while keeping a satisfying service level. In the Section 5.2, we expand the dataset"}, {"title": "5.1. Optimization results for sampled SKUS", "content": "In this part, we apply C3 SIO on two representative SKUs (i.e., SKU A"}]}