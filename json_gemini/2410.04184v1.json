{"title": "Non-monotonic Extensions to Formal Concept Analysis via Object Preferences", "authors": ["Lucas Carr", "Nicholas Leisegang", "Thomas Meyer", "Sebastian Rudolph"], "abstract": "Formal Concept Analysis (FCA) is an approach to creating a conceptual hierarchy in which a concept lattice is generated from a formal context. That is, a triple consisting of a set of objects, G, a set of attributes, M, and an incidence relation I on G \u00d7 M. A concept is then modelled as a pair consisting of a set of objects (the extent), and a set of shared attributes (the intent). Implications in FCA describe how one set of attributes follows from another. The semantics of these implications closely resemble that of logical consequence in classical logic. In that sense, it describes a monotonic conditional. The contributions of this paper are two-fold. First, we introduce a non-monotonic conditional between sets of attributes, which assumes a preference over the set of objects. We show that this conditional gives rise to a consequence relation that is consistent with the postulates for non-monotonicty proposed by Kraus, Lehmann, and Magidor (commonly referred to as the KLM postulates). We argue that our contribution establishes a strong characterisation of non-monotonicity in FCA. To our knowledge, this is a novel view of FCA as a formalism which supports non-monotonic reasoning. We then extend the influence of KLM in FCA by introducing the notion of typical concepts through a restriction placed on what constitutes an acceptable preference over the objects. Typical concepts represent concepts where the intent aligns with expectations from the extent, allowing for an exception-tolerant view of concepts. To this end, we show that the set of all typical concepts is a meet semi-lattice of the original concept lattice. This notion of typical concepts is a further introduction of KLM-style typicality into FCA, and is foundational towards developing an algebraic structure representing a concept lattice of prototypical concepts.", "sections": [{"title": "1 Introduction", "content": "Formal Concept Analysis (FCA) is a lattice-theoretic approach to representing and reasoning about concepts and hierarchies in data. The view of concepts adopted in FCA has clear philosophical underpinnings, describing a concept as a pair representing the dualism between extension, what a concept refers to, and intension, what a concept means [9,8,19]. As such, the setting of FCA works with data in the form of a formal context, describing a relationship between objects and attributes.\nAn important component of FCA involves discovering implications in the data which describe a complete correspondence between sets of attributes [19]. A concern might be that complete correspondence is too strict a requirement, and implications may fail to capture relationships that, while useful, are only partial correspondences between attribute sets. To illustrate this point, we introduce a variation of the customary example of penguins, where we look at species of animals and some of their attributes (see Example 1 for a more detailed description) [10,13]. In our example we have three objects which have the attribute bird: duck, robin, and penguin. Of these, duck and robin also have the attribute flies, and obviously penguin does not. Consequently, the implication bird\u2192 flies is not valid in our context. One may argue that this behaviour is completely correct. Clearly, not all birds fly. A compelling response is that birds that do not fly are exceptions to the rule, and that the ability to express that birds usually do fly is useful.\nAssociation rules offer an existing approach to address this concern. These rules introduce a notion of confidence, which quantifies the proportion of data that conforms to a given rule, if the confidence is above a user-defined threshold are then accepted [8]. While association rules are capable of capturing partial relationships, this approach may be considered somewhat blunt, relying on something analogous to majority rules. The reliance on a threshold for rule acceptance limits the expressivity of these rules.\nWe propose an alternate approach which adopts the view that we can define a preference relation over the objects in our data. While we are - at present - agnostic about the origin of this preference relation, from an applied perspective it might represent an external sentiment that one object is more typical than another. Partial implications between attribute sets can then be captured through the idea that the correspondence holds for preferred objects [10,13].\nOnce we have a preference relation over the set of objects, and if we regard the relation as representative of the typicality of objects, we can introduce a notion of a typical concept. The motivation for typical concepts, and what they mean, rests on the notion that, given some set of attributes, we want a coherent way to derive a concept which has the attributes we typically expect. Continuing with the example from before, we might expect that, while the intent of the \"bird concept\" derived from the attribute bird does not include the attribute flies, it may be useful to have a notion of a typical concept which includes the attributes of prototypical birds.\nThe remainder of the paper is structured as follows: Section 2 provides an account of some basic notions in FCA. Then, Section 3 provides an introduction to classical notions of consequence, non-monotonic reasoning, and an intuition for how these translate to FCA. We introduce the announced extensions to FCA in Section 4 and discuss the semantics and properties of the consequence relation they allow. In Section 5 we develop the notion of typical concepts, derived from the preferential view of objects. In Section 6 we discuss some attempts to bring KLM-style defeasibility into other logical systems. We also discuss existing work within FCA which proposes to introduce more expressive notions of concepts."}, {"title": "2 Formal Concept Analysis", "content": "Two fundamental notions in FCA are formal context and formal concept. A formal context has a set-theoretic definition, where three sets of objects, attributes, and a binary relation are defined. However, in reasonably sized instances it can be represented as a cross-table, where rows represent the objects, and columns are the attributes. Naturally, the presence of an 'x' at a position in the table indicates that the respective object has the attribute from the respective column.\nDefinition 1. A formal context is a triple (G, M, I) where G refers to a finite, non-empty set of objects, M to a finite, non-empty set of attributes, and I \u2286 G \u00d7 M is an incidence relation. For (g,m) \u2208 I, we say object g has attribute m, otherwise g does not have attribute m.\nExample 1. Figure 1 shows a cross-table representation of a formal context, describing different animal species and some of their attributes.\nIn the build-up to defining formal concepts, one introduces two operators which define an order-reversing Galois connection between the power sets P(G) and P(M). These two operators, which share the same notation, describe the derivation from a set of objects to the shared attributes, and vice versa [8,9].\nDefinition 2. In a formal context, K = (G, M, I), the derivation operator (\u00b7)' is defined for sets A\u2286G and B\u2286M as:\n$A' := \\{m \u2208 M | \\forall g \u2208 A, (g, m) \u2208 I\\}$\n$B' := \\{g \u2208 G | \\forall m \u2208 B, (g, m) \u2208 I\\}$\nFor a set A \u2286 G of objects (resp. attributes), A' is just a set of attributes (resp. objects), and so A\" would be a set of objects (resp. attributes). The double application of derivation operators is in fact a closure operator, meaning it is extensive, idempotent, and monotonic.\nConcepts are represented as a pairs of sets of objects and attributes; as one might expect, these sets are not arbitrary. In fact, they completely determine one another. Conventionally, we might denote a concept as (A, B) with A \u2286 G, B \u2286 M. This may be a useful notation to express the demarcation between the extent and intent, but it is not strictly necessary, for, (A, A') and (B', B) would refer to the same concept."}, {"title": "2.1 Implications", "content": "A significant aspect of FCA involves implications between sets of attributes. These express the notion that certain attributes indicate the presence of others, in all objects of a formal context [8,19].\nDefinition 4. Let K = (G, M, I) be a formal context. An implication over M is an expression of the form A \u2192 B with A, B \u2286 M. We say that the implication is respected by another set C\u2286M, iff A \u2209 Cor B \u2286 C. K respects the implication, written K |= A \u2192 B, iff for every g \u2208 G, g' respects A \u2192 B.\nIt is useful to note that a formal context K = (G, M, I) respects an implication A \u2192 B over M exactly if B \u2286 A'', which, in turn, is equivalent to A' \u2286 B'."}, {"title": "3 Logical Consequence and Nonmonotonic Reasoning", "content": "A classical notion of logical consequence describes the circumstances under which one sentence is said to follow (logically) from another [6]. In a model-theoretic view, it is given as follows."}, {"title": "3.1 Logical Consequence", "content": "Definition 5. For two sentences \u03b1, \u03b2 in the language L, we say that \u03b2 is a logical consequence of \u03b1, expressed as \u03b1 |= \u03b2, iff for every valuation u \u2208 U where u |= \u03b1 then also u |= \u03b2.\nThis definition can easily be generalised to the notion of entailment: given a set of facts it would be useful to know what else we can know, or, what is entailed [10].\nDefinition 6. Given a set of sentences KB, another sentence \u03b1 is entailed by KB iff for every valuation u \u2208 U with u |= KB also u |= \u03b1 holds. This is expressed as KB |= \u03b1.\nA consequence operator, Cn, provides a general way to derive all sentences that should follow from a set of sentences KB, under some notion of logical consequence [10]. Using classical entailment from Definition 6, we could have Cn(KB) := {\u03b1 | KB |= \u03b1} [5,10]. A Tarskian consequence operator satisfies the following properties (which describe a closure operator).\nMonotonocity: if \u0393\u2286 \u0393' then \u0421\u043f(\u0393) \u2286 \u0421\u043f(\u0393) (1)\nIdempotence: \u0421\u043f(\u0393) = \u0421\u043f(\u0421\u043f(\u0393)) (2)\nInclusion: \u0393\u2286 \u0421\u043f(\u0393) (3)"}, {"title": "3.2 Consequence Relations", "content": "A more abstract notion of consequence is a consequence relation. This is a set of pairs, {(\u03931, \u03c81), ..., (\u0393n, \u03c8n), ...}, where it is typical to allow \u0393i to represent a set of formulae, and \u03c8i to represent a single formula in the language. The inclusion of a pair (\u0393i, \u03c8i) in the consequence relation - denoted as \u0393i \u22a9 \u03c8i - means that \u03c8i can be inferred from \u0393i [7,10].\nConsequence relations may be characterised by the properties they satisfy and, as such, correspond to a certain kind of reasoning an example of this is found in Definition 7 [7]. Conversely, an algorithmic description of a kind of reasoning may in turn give rise to a consequence relation, the properties of which provide strong intuition for the pattern of reasoning."}, {"title": "3.3 Non-monotonic Reasoning", "content": "Non-monotonic reasoning is concerned with developing formal reasoning process in which a conclusion drawn under a premise can be withdrawn under the addition of another premise [13]. The justifications for why we may want to reason non-monotonically are easy to accept - it is quite obvious that when humans reason we do so under the implicit assumption that, upon receiving new information we can change our mind. Without this assumption, navigating life would be very difficult; we would hesitate to come to any conclusion out of fear it may be the wrong one. Moreover, we frequently make statements for which we know exist exceptions, under the assumption that upon encountering an exception it would be treated as such [16].\nIn the setting of propositional logic, the problem is often introduced in the following way [10,13,21]: we want to accept that \"penguins are birds\", \"birds usually fly\" and \"penguins do not fly\". However, when we translate this into classical logic with the propositions penguin \u2192 bird, bird \u2192 fly and penguin \u2192 \u00acfly, we are forced to conclude penguin \u22a5. With respect to the attribute logic of FCA, we find a similar issue. Consider the context in Example 1. We do not have {bird} \u2192 {flies} as a valid implication, since penguins are an object with bird but not flies. This illustrates the final point made in the last paragraph \u2013 that monotonicity prevents us from making statements with known exceptions.\nIn the realm of concepts, we encounter another instance of this problem: the concept determined by bird is not a sub-concept of the concept determined by flies. Again, we lack the expressivity for the idea that typical birds are flying animals. In Section 4 and Section 5 we propose a solution to this lack of expressivity drawing inspiration from [12,13]."}, {"title": "3.4 Rational Consequence Relations", "content": "The style of non-monotonic reasoning we aim to develop in FCA is that of rational consequence relations. A rational consequence relation, \u22a9R, is based on preferential logics, where an order (or ranking) over valuations conveys the notion that certain valuations are preferred to others [12,14,20]. The semantics describe a notion of consequence where, if \u03b1, \u03b2 are formulae in the language then \u03b2 is a rational consequence of \u03b1, \u03b1 \u22a9 \u03b2, iff \u03b2 is true in all the most preferred models of \u03b1.\nThe KLM postulates, introduced in [12,14], with the inclusion of Rational Monotonicity are a set of inference rules that characterise a rational consequence relation.\nDefinition 7. A consequence relation, \u22a9, constitutes a rational consequence relation iff it satisfies Reflexivity, Left Logical Equivalence (LLE), Right Weakening (RW), Cut, And, Or, Cautious Monotonicity and Rational Monotonicity.\nReflexivity A\u22a9A Reflexivity is a somewhat basic notion of any notion of consequence; it essentially prevents a self-defeating pattern of reasoning where given something, you conclude as a consequence not that thing.\nLeft Logical Equivalence (LLE) $\\frac{A=B, A \\sim C}{B \\sim C}$ LLE enforces the notion that two things that are equivalent (under a coherent notion of equivalence) should have the exact same consequences.\nRight Weakening (RW) $\\frac{A \\rightarrow B, C \\sim A}{C \\sim B}$ RW states that the consequence of a classical implication, which has a defeasible consequence as a premise, can itself be derived from the original defeasible implication.\nCut $\\frac{A\\cup B \\sim C, A \\sim B}{A \\sim C}$ Cut allows us to use existing defeasible consequences in the premise of a new defeasible implication. However, the new implication is subject to failure should the defeasible conclusion in its premise be retracted.\nOr $\\frac{A \\sim C, B \\sim C}{A \\cup B \\sim C}$ Or is that given distinct premises with a common defeasible consequence, we should be able to draw this conclusion from the disjunction of the premises \u2013 that is, we need not explicitly know which one is true."}, {"title": "4 Introducing Nonmonotonicity in FCA", "content": "As a precursor to the non-monotonic conditionals in Subsection 4.3, we introduce the notion of an extended formal context."}, {"title": "4.1 Extended Formal Context", "content": "Definition 8. Let K = (G, M, I) be a formal context. An extended formal context simply adds a partial order over G. We denote this as a quadruple, K\u2264 = (G, M, I, \u227a).\nThe partial ordering is intended to convey a preference relation between objects. That is, for two objects, g, h \u2208 G, if g \u227a h, then we say that g is more preferred, or more typical, in comparison to h. For example, robin \u227a penguin tells us a robin is \"more typical\" than a penguin in our context."}, {"title": "4.2 Minimisation", "content": "The preference relation between objects provided by an extended formal context enables us to define how the derivation operators might behave when restricted to only care about minimal objects. We formalise this notion as a minimised derivation.\nDefinition 9. Let K\u2264 = (G, M, I, \u227a) be an extended formal context, and let B \u2286 M. Then the minimised derivation, B', of B, is the set\n$B' := \\{g \u2208 B' | \\nexists h \u2208 B' such that h \u227a g\\}$\nAs a reminder, for a set of attributes, B \u2286 M, B' provides us with all the objects which have all attributes of B. Following this, B\" extends B by including all other attributes which are shared by those objects which share attributes B.\nIf B' describes the process of going from a set of attributes to the minimal objects which share B, a reasonable question might concern the procedure for returning to a \"closed\" set of attributes: presumably, the set of attributes common to those objects described by B'. This is, in fact, just the composition of Definition 9 and Definition 2, taking the form (B')' - henceforth referred to as a minimised-return operation."}, {"title": "4.3 Non-monotonic Conditional through Minimisation", "content": "From the discussion in Subsection 2.1 it is clear that the semantics of classical implications in FCA can be defined through applications of closure operators on sets of attributes. With the introduction of the minimised-return operator, one might expect to find a different notion of consequence.\nThe minimised-return operator still refers to the same kind of process as the closure-operator, going from a set of attributes to a set of objects, and then back to a set of attributes. The similarity enable us to define a semantics which is only a minor departure from the original implication. For now we will use non-monotonic conditional to refer to the minimised-derivation based implications, and denote this by \u21aa.\nDefinition 10. Let K\u2264 = (G, M, I, \u227a) be an extended formal context, with A, B \u2286 M. K\u2264 respects a non-monotonic conditional K\u2264 |= A \u21aa B iff B \u2286 (A')' which is equivalent to A' \u2286 B'.\nAlthough we have yet to prove the characterisation, the non-monotonic conditional from above describes a notion of consequence with strong semblance to the preferential consequence relations discussed in Subsection 3.4."}, {"title": "4.4 Non-monotonic Conditionals and the KLM Postulates", "content": "We now present an argument that the consequence relation given by the non-monotonic conditional described in the previous sub-section satisfies all the KLM postulates required to be a characterisation of rational consequence relations. Before we prove this characterisation in Section 7, we should remind ourselves that the postulates are usually described in the language of some truth-theoretic logic. A consequence being that some initial work needs to be translated into the attribute-logic formalism considered here.\nFor Reflexivity and RW, the translation is obvious and doesn't require additional intuition. All that is required for LLE is to describe what a notion of equivalence between sets of attributes means. To this end, we say that in a formal context two attribute sets are equivalent, A = B, iff A' = B'. Cut says that if \u03b1 \u2227 \u03b2 \u22a9 \u03b3 and \u03b1 \u22a9 \u03b2 then \u03b1 \u22a9 \u03b3.\nThe conjunction of two formulae in a truth-theoretic logic requires satisfaction of each formula. In attribute logic, the equivalent notion is given by the union of two attribute sets, satisfied by objects with all attributes from both sets. The conjunction in CM and And is re-phrased in the same way.\nIt is not immediately clear what RM might mean, as it is uncommon to talk about implications with a negation. We use the following definitions to make this notion explicit."}, {"title": "5 Typical Concepts", "content": "The partial ordering over objects was introduced as a means to developing a non-monotonic consequence relation. We now show how this ordering, with some refinement, gives rise to a notion of typical concepts."}, {"title": "5.1 Naive Notions of a Typical Concept", "content": "Definition 13. Let K\u2264 = (G, M, I, \u227a) be an extended formal context. Then, for a set A \u2286 M, we define a typical concept as a concept of the form\n((A')'', (A')').\nThe set of all typical concepts of an extended formal context is denoted T(K\u2264).\nIn this case, the intent of a typical concept is the set of attributes common to the minimal objects which have A in their intent. The extent is then all objects which have this extended set of attributes. Referring back to Example 1, we add the partial order duck \u227a penguin and robin \u227a penguin, expressing the sentiment that ducks and robins are more typical than penguins, but incomparable to orcas. Given only the attribute bird, ({duck,robin},{northern,southern,flies,bird}) is the derived typical concept. Without this notion of a typical concept, the derived concept would be ({duck,robin,penguin}, {southern,bird}). Of course, both of these concepts exist in the classical concept lattice; however, typical concepts provide an instrument to, given only the condition of bird, to arrive at a concept which we might consider a more natural characterisation of things that are birds. We should remind ourselves that, while this example is picked to match real-world expectations, we should think of \"expectations\" as being an expression of the preference relation on objects.\nPerhaps un-intuitively, this formulation allows for a typical concept to contain non-typical objects in its extent, as long as they share all the attributes of their typical counterparts. We should recognise, however, that they do not contribute to describing the intent, they just happen to be consistent with it. Although we ascribe specific meaning to A', it can be considered to be an arbitrary set of objects. Then, per Definition 3, an arbitrary typical concept, ((X')'', (X')') where X \u2286 M, is always equivalent to some formal concept. As such, we can define a map from the set of concepts to the set of typical concepts.\nDefinition 14. Let K\u2264 = (G, M, I, \u227a) be an extended formal context,then B(K\u2264) denote the set of concepts of K\u2264, and I(K\u2264) denote the set of typical concepts of K\u2264. We define a map:\n\u03c6 : B(K) \u2192 T(K)\nFor a concept (A, B) \u2208 B(K\u2264), \u03c6 is defined as:\n\u03c6(A, B) := ((B')'', (B')')\nThe mapping function inherits idempotency from the minimised-return operator. For a typical concept (A, B) \u2208 T(K\u2264), there must exist some set C' \u2286 M such that (C')' = B. It follows that ((C')'')' = (C')' = B. Consequently, \u03c6(A, B) = (A, B), or, typical concepts map to themselves. Differently put, (A, B) = \u03c6(\u03c6(A, B)). We also note that by the extensive property of minimized-derivation, for any concept (A, B), we have (B')' \u2287 B and therefore \u03c6(A, B) = ((B')'', (B')') \u2264 (A, B). That is, \u03c6 is anti-extensive."}, {"title": "5.2 Restriction on the Partial Order", "content": "One cause of the aforementioned problem lies in the fact that we allow non-minimal objects to be included in typical concepts. This allows for rankings where non-minimal objects, which should be in the meet or join of two concepts, are lost. As a solution to this, we may restrict the partial orders to prevent non-minimal objects from being included in typical concepts.\nDefinition 15. Let K\u2264 = (G, M, I, \u227a) be an extended formal context. A valid partial order over objects is one which for all A \u2286 M, A' = (A')''.\nConsider a set of attributes X \u2286 M and then take Y \u2286 M to be the set of all attributes common to the minimal objects which satisfy X \u2013 of course, Y would be the set X with additional attributes. The restriction to orders that are valid ensures that any object that has all the attributes in Y must itself be minimal w.r.t. X. Put differently, Y serves as a total characterisation of the minimal objects satisfying attributes X, if an object matches this characterisation, then it should have been one of these minimal objects.\nIf we accept this restriction on the partial order, the set of typical concepts preserves meets, that is, the greatest common sub-concept of two typical concepts is itself a typical concept. Before this is shown, Definition 13, Definition 14, and Theorem 3 might be amended to reflect that the closure of a set A', where A \u2286 M, is superfluous.\nTheorem 4. For an extended formal context, K\u2264 = (G, M, I, \u227a), with a restriction on the partial-order such that for any A \u2286 M, A' = (A')'', the greatest common sub-concept of two typical concepts is itself a typical concept. Hence, the subset of typical concepts form a \u2227-subsemilattice of the concept lattice.\nProof. We note that it is a sufficient condition to show that A' \u2229 B' = C' for some C \u2286 M. We claim that we can choose C = (A')' \u222a (B')'. Note\nA' \u2229 B' = (A')'' \u2229 (B')'' = ((A')' \u222a (B')')',"}, {"title": "6 Related Work", "content": "There is a large corpus of work on developing KLM-style notions of non-monotonic reasoning outside of the standard of propositional logic. [4], and more extensively [18], introduce KLM-style defeasible reasoning to datalog, which can be considered a fragment of first-order logic used for database queries. [2,1] are recent efforts to introduce a notion of defeasible subsumption to description logics (DL) that follows the KLM properties. Remaining in the realm of DL, [17] is a general characterisation of to KLM in DL ALC. [3] investigates the KLM framework in the context of defeasible modalities, introducing new modal operators for defeasible necessity and distinct possibility.\nWith respect to work that extends our view of concepts in FCA, [11] introduces Rough Concept Analysis, a merging of rough set theory and FCA that uses equivalence classes on objects to define upper and lower-bound approximations of concepts. [22] investigates an expansion which enables \u201crough concepts\" to be defined not only by objects."}, {"title": "7 Conclusions and Future Work", "content": "By extending a formal context with a preference relation on the objects we have introduced a non-monotonic variant of implication between attribute sets which characterise a rational consequence relation*. This strictly increases the expressivity of the attribute logic of FCA by creating a notion of non-monotonicity that corresponds to the KLM view of how a logical non-monotonic system should behave. In terms of FCA, we have introduced a way of discovering and representing relationships between attribute sets that tolerates exceptions, and is capable of representing what our data (formal context) shows in the typical case.\nWith a slight restriction on what constitutes a valid preference relation over objects, we presented a formalisation of typical concepts which has its foundations in a KLM-style typicality. We were able to show that with this notion we could create a structure of typical concepts that at least preserved the sub-concept relation, and as such is a meet-subsemilattice of the original concept lattice.\nTo our knowledge, the introduction of KLM-style typicality, and preferences over a formal context as a whole, presents a novel view on, and non-trivial extension to FCA.\nThis work represents the initial investigation of introducing KLM-style typicality into FCA. As such, we believe there is a considerable amount that remains to be looked at. Addressing concerns of existing work, we aim to find an approach to defining typical concepts which is closed under joins (super-concepts), essentially meaning that the structure of the set of typical concepts would be a sub-lattice of the original concept lattice. To this end, we could neatly \"reduce\" a concept lattice to its typical counterpart. In another branch of this work, we would like to investigate the relationship between the set of all non-monotonic conditionals and the typical concept lattice; determining if something analogous to a canonical basis can be found."}, {"title": "Appendix", "content": "In the following we present the proofs for Theorem 2 along with their re-characterisation in attribute logic. In case the re-characterisation is non-trivial, we provide some explanation. Lemma 1 is a consequence of Galois connections, represented in the attribute logic of FCA. Lemma 2 is essential for Cut and CM.\nA \u22a9 A Reflexivity\nProof (Reflexivity). Let K\u2264 = (G, M, I, \u227a) be an extended formal context with A \u2286 M. In order to show that K\u2264 |= A \u22a9 A it needs to be shown that A' \u2286 A'. We have this by definition of the minimised derivation, that A' = {g \u2208 A' | \u2204 h \u2208 A' such that h \u227a g}. It is then obvious that A' \u2286 A' and so K\u2212 |= A \u22a9 A.\n$\\frac{A = B, A \\sim C}{B \\sim C}$ Left Logical Equivalence (LLE)\nWe do not have an existing notion of equivalence between attribute sets; however, for two sets A, B \u2286 M, we say that A = B iff A = B.\nProof (Left Logical Equivalence). Let K\u2264 = (G, M, I, \u227a) be an extended formal context, where A, B,C \u2286 M, K\u2264 |= A \u22a9 C and A = B. By assumption we have that A' \u2286 C' and that A' = B'. Clearly, we then have that B' \u2286 C' which is equivalent to K\u2264 |= B \u22a9 C.\n$\\frac{A \\rightarrow B, C \\sim A}{C \\sim B}$ Right Weakening (RW)\nProof (Right Weakening). Let K\u2264 = (G, M, I, \u227a) be an extended formal context, where A, B, C \u2286 M, K\u2264 |= A \u2192 B and K |= C \u22a9 A. The classical implication, A \u2192 B, is equivalent to A' \u2286 B'. Furthermore, C \u22a9 A is equivalent to C' \u2286 A'. Through transitivity, we have that C' \u2286 A' \u2286 B', and so C' \u2286 B'. And so, we have that K |= C \u21aa B.\nLemma 1. For any A, B \u2286 M, it is the case that A' \u2229 B' = (A\u222a B)'\nProof (Lemma 1). For a formal context K = (G, M, I) and two sets A, B \u2286 M we will show the \u2286 in both directions. To begin, let g be an object in A' \u2229 B'. Then, for an arbitrary m \u2208 A, it holds that (g, m) \u2208 I. Obviously, the same holds for attributes in B. So, for an arbitrary m \u2208 A \u222a B, it must also be the case that (g, m) \u2208 I. Given that g and m were arbitrary, this is equivalent to the definition of (A \u222a B)' = {g \u2208 G | \u2200 m \u2208 A \u222a B, (g, m) \u2208 I}. Consequently, A' \u2229 B' \u2286 (A \u222a B)'.\nTo show the other direction is simpler. Let g be an arbitrary object in (A \u222a B)', this means that for an arbitrary m \u2208 (A \u222a B), (g, m) \u2208 I. Trivially, A \u2229 B \u2286 (A \u222a B), so, from before, (g, m) \u2208 I for any m \u2208 (A \u2229 B). Again, this is our definition for A' \u2229 B' = {g \u2208 G | \u2200 m \u2208 A \u2229 B, (g, m) \u2208 I} - and we have that (A \u222a B)' \u2286 A' \u2229 B'."}]}