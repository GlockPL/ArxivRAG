{"title": "Generative AI Augmented Induction-based Formal Verification", "authors": ["Aman Kumar", "Deepak Narayan Gadde"], "abstract": "Generative Artificial Intelligence (GenAI) has demonstrated its capabilities in the present world that reduce human effort significantly. It utilizes deep learning techniques to create original and realistic content in terms of text, images, code, music, and video. Researchers have also shown the capabilities of modern Large Language Models (LLMs) used by GenAI models that can be used to aid hardware development. Formal verification is a mathematical-based proof method used to exhaustively verify the correctness of a design. In this paper, we demonstrate how GenAI can be used in induction-based formal verification to increase the verification throughput.", "sections": [{"title": "I. INTRODUCTION", "content": "Formal verification-based hardware verification is a highly desirable but labour-intensive task. It is an exhaustive verification technique that uses mathematical proof methods to verify if the design implementation matches its specifications [1]. Although formal verification ensures the functional correctness of the design, achieving a full proof of properties written to verify the design could be challenging, especially for complex designs [1]. Modern formal verification tools use k-induction-based proof. This approach allows them to prove the design correctness for all time, rather than just the first few time steps [2]. To avoid inductive step failures, it is necessary to use helper assertions that act as assumptions or invariants once proven. These helper assertions are also known as lemma. Moreover, in case an assertion fails in its inductive step, it takes human effort to find the root cause from Counter Example (CEX) and write a helper assertion to fix the failure. To address this complexity of formal verification, we explore the potential of GenAI to automate assertion generation, which has proved in recent times to be a suitable tool [3] [4]. We demonstrate GenAI based flow that can generate helper assertions based on a given RTL design and generate lemmas in the event of an inductive step failure during formal verification."}, {"title": "II. BACKGROUND", "content": ""}, {"title": "A. Induction-based Formal Verification", "content": "Bounded Model Checking (BMC) can find bugs in large designs. However, the correctness of a property is guaranteed only for the analysis bound. Induction-based proof must be applied to prove the design will work all the time rather than just the first S time steps. Induction is a method to check if the design is in a random good state (state of design that doesn't produce a CEX) whether it will be in a good state at the next cycle [2]. Induction with increasing depth k, consists of two steps, base and k-step induction as described in [5]. The base case utilizes the initial-state constraint, whereas the inductive step does not. Consequently, the inductive step may encompass unreachable states. At the inductive stage, the formal tool unrolls the design into small pieces and is unaware of the unreachable states. It can start from any arbitrary (unreachable) state and end up in a state where the property fails [6]. In practice, this might prevent the induction proof from succeeding without incorporating additional constraints, such as stronger induction invariants than the property itself [5]. These induction invariants or helper assertions rule out the CEX by reducing the state-space during the inductive step."}, {"title": "B. Generative Artificial Intelligence (GenAI)", "content": "GenAI is a type of AI technique that has the ability to produce original content across various formats, such as text, images, audio, and other forms of media. Propelled by the progress in deep learning, Natural Language Processing (NLP), and continuously improving data processing capabilities, LLMs stand at the forefront of GenAI. An LLM is a type of GenAI that specializes in understanding and generating human language by predicting subsequent parts of text based on the context provided in the input it receives. It is pre-trained on a large corpus of text and then fine-tuned for specific tasks or to improve its performance in generating coherent and contextually relevant text [7]. In hardware verification, GenAI can be utilized to aid the verification processes such as assertion generation, failure debugging, testbench and stimulus generation [3]."}, {"title": "III. LEMMAS USING GENERATIVE \u0391\u0399", "content": ""}, {"title": "IV. INDUCTION STEP FAILURE ANALYSIS USING GENERATIVE AI", "content": ""}, {"title": "V. RESULTS", "content": "We used the helper assertion generation flow described in this paper for fairly complex designs. We utilized both flows to generate general helper assertions as well as for induction step failure. The designs used were counters and ECC. Usually, the flow was able to figure out necessary helper assertions that helped in faster proof for complex properties. It was also observed that the quality of generated assertions was much better in the case of LLMs from OpenAI such as GPT-4-Turbo and GPT-40 compared to Llama or Gemini. This could be due to the fact that the LLMs from OpenAI are usually trained using relatively higher training data than the others."}, {"title": "VI. CONCLUSION", "content": "In this paper, we have demonstrated a flow to generate helper assertions or lemmas using GenAI to reduce the efforts for induction-based formal verification. The flow aims at generating usual helper assertions that reduce the proof time for complex properties as well as inductive invariants that help resolve induction step failures. Although LLMs prove to be effective in generating assertions for our designs, one must be aware of the limitations of using GenAI especially for artificial hallucinations that produce vulnerable results [8]. It is recommended to analyze the output from the LLM before using it productively to avoid false positives and comprehend the so-called human-in-the-loop AI."}]}