{"title": "Wafer Map Defect Classification Using Autoencoder-Based Data Augmentation and Convolutional Neural Network", "authors": ["Yin-Yin Bao", "Er-Chao Li", "Hong-Qiang Yang", "Bin-Bin Jia"], "abstract": "In semiconductor manufacturing, wafer defect maps (WDMs) reveal critical defect patterns essential for diagnosing issues and improving process yields. However, accurate categorization of WDM defects faces significant challenges due to noisy data, unbalanced defect classes, and the complexity of failure modes. To address these challenges, this study proposes a novel method that combines self-encoder-based data enhancement with a convolutional neural network (CNN). By introducing noise in the latent space to reconstruct the WDM, the self-encoder not only enhances data diversity but also mitigates the problem of class imbalance, thereby improving the model's generalization ability. The augmented dataset is then utilized to train the CNN, enabling it to extract hierarchical features and achieve precise classification of both common and rare defect patterns. Experiments conducted on the WM-811K dataset demonstrate that the proposed method achieves a classification accuracy of 98.56%, outperforming Random Forest, SVM, and Logistic Regression by 19%, 21%, and 27%, respectively. These results highlight the effectiveness of the proposed approach, offering a robust and accurate solution for wafer defect detection and classification.", "sections": [{"title": "1 Introduction", "content": "Semiconductor manufacturing is a highly intricate process that involves numer-ous stages of wafer fabrication, where even minor defects can lead to significantyield losses. As the size of semiconductor components continues to shrink dueto advances in manufacturing technology, ensuring the reliability and quality ofthe wafers has become increasingly essential. Yield analysis techniques, such aswafer map failure pattern recognition, play a central role in diagnosing and pre-venting manufacturing-related defects before they propagate through the productionpipeline. The ultimate goal of failure pattern recognition is to accurately classifydifferent failure modes observed in wafer maps, which aids in quickly identifying rootcauses and making necessary corrections to the manufacturing process.\nWafer maps are visual representations of the functional or non-functional dies(individual semiconductor components) on a semiconductor wafer. They dis-play spatial patterns where defects develop, often revealing systematic issues relatedto equipment malfunction, process variation, or material inconsistencies. Recog-nizing these patterns is critical for improving overall yield and reducing productiondowntime. However, automated recognition of these failure patterns is a challengingtask due to the complex and noisy nature of the wafer maps. Noise in wafer mapdata can originate from various factors, including measurement inaccuracies, environ-mental effects, or random variability in the manufacturing process, all of which canobscure the true failure patterns.\nTraditional techniques for wafer map failure pattern recognition have mainlyrelied on rule-based methods, statistical analysis, and conventional machine learningapproaches. Early efforts included manual inspection or heuristic algorithms that reliedon handcrafted features and predefined rules to detect specific failure patterns (e.g.,center, edge, or ring patterns). Unfortunately, these methods tend to be limitedin their generalization ability because they struggle to adequately capture the diversityof failure patterns present in real-world manufacturing data. Moreover, they often relyon domain-specific knowledge and require extensive fine-tuning of parameters.\nAs an alternative to rule-based approaches, machine learning techniques, such asSupport Vector Machines (SVM), K-Nearest Neighbors (KNN) , and decisiontrees , have been applied to improve the classification of wafer map failure pat-terns. These methods focus on learning features directly from the data, rather thandepending on predefined heuristics. For example, SVMs have been popular for patternrecognition due to their ability to handle high-dimensional feature spaces. However,despite offering improvements over traditional methods, machine learning classifiersare highly sensitive to noisy data, which can severely affect their performance.\nAdditionally, they rely on feature engineering, which requires significant human effortand domain expertise, and may not be effective in dealing with complex, nuancedfailure patterns .\nIn more recent years, deep learning, particularly Convolutional Neural Networks(CNNs), has brought substantial advances in the field of image recognition and hasbeen successfully applied to wafer map pattern classification tasks. CNNs auto-matically learn hierarchical representations of data and have achieved excellent resultsin various computer vision domains. For wafer maps, CNNs have been used to"}, {"title": "2 Dataset and Evaluation Protocol", "content": "To demonstrate the effectiveness of the proposed model algorithm, we utilized theWM811K semiconductor dataset for our experiments. This comprehensive waferdataset contains 811,457 wafer images along with supplementary information such aswafer core dimensions, batch numbers, and wafer indices. The dataset was collectedfrom 47,543 physical lots from a FAB, with each lot consisting of 25 wafers. However,although 47,543 lots would yield 1,557,325 wafers, the dataset contains only 811,457wafer images.\nThe manually labeled portion of the dataset comprises 172,950 images with 8distinct labels (0-7)."}, {"title": "2.2 Evaluation Metrics", "content": "In this paper, we evaluate the experimental results using four widely recognized met-rics: Precision, Recall, F1 score, and Accuracy. These metrics are especially usefulfor assessing recognition performance in the context of imbalanced datasets. Thecalculation formulas for these metrics are as follows:\nPrecision = $\\frac{TP}{TP + FP}$  (1)\nRecall = $\\frac{TP}{TP + FN}$  (2)\nF1-score = $\\frac{2 \\cdot Precision \\cdot Recall}{Precision + Recall}$ (3)\nAccuracy = $\\frac{TP+TN}{TP+FN+TN + FP}$ (4)"}, {"title": "2.3 Implementation Details", "content": "The experiments outlined in this study were performed on a system running theUbuntu operating system, specifically using Python version 3.8 as the primaryprogramming language. The machine learning models were implemented and trainedusing the TensorFlow 2.4 framework and Pytorch 1.9 , which provided then"}]}