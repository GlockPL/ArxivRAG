{"title": "Political Actor Agent: Simulating Legislative System for Roll Call Votes Prediction with Large Language Models", "authors": ["Hao Li", "Ruoyuan Gong", "Hao Jiang"], "abstract": "Predicting roll call votes through modeling political actors has emerged as a focus in quantitative political science and computer science. Widely used embedding-based methods generate vectors for legislators from diverse data sets to predict legislative behaviors. However, these methods often contend with challenges such as the need for manually predefined features, reliance on extensive training data, and a lack of interpretability. Achieving more interpretable predictions under flexible conditions remains an unresolved issue. This paper introduces the Political Actor Agent (PAA), a novel agent-based framework that utilizes Large Language Models to overcome these limitations. By employing role-playing architectures and simulating legislative system, PAA provides a scalable and interpretable paradigm for predicting roll-call votes. Our approach not only enhances the accuracy of predictions but also offers multi-view, human-understandable decision reasoning, providing new insights into political actor behaviors. We conducted comprehensive experiments using voting records from the 117-118th U.S. House of Representatives, validating the superior performance and interpretability of PAA. This study not only demonstrates PAA's effectiveness but also its potential in political science research.", "sections": [{"title": "Introduction", "content": "Legislative actions, such as proposing, reviewing, and voting on bills, enable political actors to influence national and societal development. Modeling these actors has emerged as an interdisciplinary focus within quantitative political science and computer science. The representations obtained from modeling political actors are applied to downstream tasks such as roll-call vote prediction (Feng et al. 2022; Mou et al. 2021), and political stance prediction (Feng et al. 2021; Li and Goldwasser 2019).\nIn this paper, we primarily focus on the problem of predicting legislators' roll call votes.With voting records, bill texts, and background knowledge, there are two main approaches to modeling political actors. The ideal point model, one of the most widely used methods for roll call vote prediction, represents legislators and bills as points in one or multiple dimensions (Clinton, Jackman, and Rivers 2004; Kraft, Jain, and Rush 2016). Recently, some studies have employed heterogeneous information graphs to represent legislators, bills, and contextual knowledge, including complex relationships between party affiliations, lobbying (Davoodi, Waltenburg, and Goldwasser 2020), and assets (Feng et al. 2022, 2021; Mou et al. 2024). These studies then use heterogeneous graph neural networks to generate embeddings for nodes within the graph and predict voting outcomes. Both approaches embed legislators and bills into a vector space and use neural networks or similarity measures to predict results.\nHowever, the aforementioned embedding-based methods exhibit several limitations: 1. Limitations of predefined features: The model's training relies solely on predefined features, preventing natural extension to new, untrained relationships. 2. Volume of training data: Most models depend on large datasets to achieve optimal performance, which is not feasible in real-world scenarios, such as predicting votes of newly elected legislators. 3. Interpretability of predictions: Predictions based on embeddings lack interpretability, particularly in providing insights in a manner understandable to humans.\nTo address these challenges, we have turned our attention to the accomplishments of agent research based on Large Language Models (LLMs) (Wang et al. 2024). With designed profile, planning, and action modules, LLM agents can exhibit intelligent decision-making behaviors. Some studies have applied LLM Agents in fields such as economics (Kim et al. 2024; Zhou et al. 2024a), social simulation (Mou, Wei, and Huang 2024; Chuang et al. 2024; Dai et al. 2024), and voting decision-making (Yang et al. 2024; Majumdar, Elkind, and Pournaras 2024a). As shown in figure 1, by reframing the problem of modeling political actors as constructing political agents, we introduce deeper insights into this field.\nSpecifically, we designed the Political Actor Agent (PAA) based on a role-playing architecture (Li et al. 2023), which offers several advantages: 1. Scalable Politician Profile: Each agent is equipped with a scalable profile. This profile is more flexible and easier to manage compared to manually designed relational rules. 2. Multi-view Planning: From various views, such as the delegate and trustee views (Alexander 2019), the PAA can formulate different voting plans. Decision-making reasons understandable to humans can better provide new insights for political science"}, {"title": "Related Works", "content": "This section introduces roll call voting prediction based on political actor modeling and the use of LLM agents for decision simulation."}, {"title": "Modeling Political Actors for Voting Prediction", "content": "Legislators' voting behavior in parliament has been a primary research focus due to its characteristic transparency and significance. One of the most popular techniques in political science is the ideal point model, constructed based on voting records and typically used to represent unidimensional or multidimensional ideological positions (Poole and Rosenthal 1985; Clinton, Jackman, and Rivers 2004). The ideal point model has been expanded in several studies. For instance, (Gerrish and Blei 2011) employ a topic model to perform a detailed analysis of legislative texts, enhancing the contextual understanding of votes. Further extending this approach, researchers have developed a topic factorized ideal point model that assigns ideal points for each topic rather than globally, allowing for more nuanced interpretations of legislative behavior (Gu et al. 2014). Additionally, efforts have been made to learn multidimensional embeddings of legislators and bills to improve prediction accuracy (Kraft, Jain, and Rush 2016), and to integrate broader political texts, such as speeches and tweets, into the ideal point model to enrich the dataset (Vafa, Naidu, and Blei 2020).\nIn terms of incorporating richer contextual information, graph-based methods, driven by advancements in knowledge graphs and graph neural networks, have gained popularity. External knowledge is introduced into voting prediction in the form of heterogeneous information graphs. Compared to ideal point models, graph-based models can more flexibly capture complex political relationships, such as cosponsorship (Yang et al. 2021), donors (Davoodi, Waltenburg, and Goldwasser 2020), and stakeholders (Davoodi, Waltenburg, and Goldwasser 2022). Additionally, more expert knowledge has been incorporated, such as news data (Feng et al. 2021), Twitter statements (Mou et al. 2021), wiki pages, and political think tanks (Feng et al. 2022).\nPolitical decision-making often involves highly complex mechanisms and background knowledge. Recent studies have focused on leveraging large language models (LLMs). For instance, (Mou et al. 2024) constructed a multi-view political knowledge graph to enhance the domain knowledge of LLMs. Similarly, (Mou et al. 2023) developed a pretraining architecture that maps language to actor representations."}, {"title": "LLM Agent in Decision Simulation", "content": "Roll call voting can be viewed as a decision-making behavior. As LLM agents demonstrate the potential for human-level intelligence (Wang et al. 2024), many studies have applied them in fields such as natural sciences (Boiko, MacKnight, and Gomes 2023), software engineering (Qian et al. 2023), and embodied intelligence (Wu et al. 2023). Some researchers are exploring the integration of large language models with social sciences, particularly in simulating decision-making behaviors. In economics, for instance, (Horton 2023) treat LLM agents as economic agents, observing their economic decisions under different conditions and scenarios. (Zhou et al. 2024b) propose a financial bias indicator framework, analyzing irrational biases in LLM agents through behavioral finance theories.\nIn the realm of voting decision simulation, studies like (Argyle et al. 2023) investigate the feasibility of using large language models to simulate human samples, designing agents based on demographic data to model the reactions of different populations. The article (Yang et al. 2024) finds that the input method and presentation of choices can affect the voting behavior of LLMs. (Majumdar, Elkind, and Pournaras 2024b) delve deeper into the issue of bias in the voting process, discovering that equal-share methods can lead to fairer voting outcomes.\nThe above research on decision simulation indicates that LLM agents can offer new insights into social sciences. Unlike agents based on demographic data, this paper explores a more sophisticated decision simulation. By setting detailed political profiles and voting mechanisms, we aim to predict the roll-call voting results of political actors. Our goal is to investigate the ability of LLM agents to simulate complex, diverse outcomes and to summarize their behavior based on specific political perspectives."}, {"title": "Method", "content": "In this section, we detail the framework of the Political Actor Agent (PAA) for roll call vote prediction. As illustrated in figure 2, we begin by collecting data from Wikipedia and legislative bills from the Congress. We then construct scalable agent profiles for each legislator, incorporating personal information, constituency details, and data on bills they have sponsored and voted on. Subsequently, we design a multi-view planning module for each agent to perform reasoning based on various political science views. Finally, in the simulated legislative action module, we implement an influence mechanism that allows leader agents associated with the bill to act first, with the remaining agents making their choices after learning the leaders' decisions. This approach leverages political science perspectives and LLM agents to achieve more accurate and interpretable voting predictions."}, {"title": "Profile Construction Module", "content": "Using a role-playing architecture, we simulate characters where agents assume specific roles to make voting decisions. The profile construction module is integrated into the prompt to influence the design and behavior of the LLMs. The design of the profile is highly scalable and can synthesize information from different data sources under various conditions, such as personal basic information, career history, voting records, etc. Specifically, the profiles we use include the following personal details:\nPersonal information This refers to the basic information of legislators such as party affiliation, committee memberships, core group affiliations, educational background, number of children, place of birth, and other relevant details.\nConstituency details This section details the legislator's constituency, including information such as the median family income of the district, urban-rural population distribution, and total population. This information helps model the social and economic context in which the legislator operates.\nSponsorship activity Each bill is initiated by a sponsor and possibly several cosponsors. Historical records of bill sponsorship are extremely useful for modeling a legislator's specific preferences. Past studies have also demonstrated the significance of sponsorship information in political actor modeling (Yang et al. 2021).\nVoting records: Historical voting records provide the most direct data on a legislator's political stance. Unlike previous political actor models, the PAA integrates past voting records directly into the profile without explicit model training. Leveraging the capabilities of large language models, we can predict voting outcomes based on a limited amount of known information, which is particularly useful when modeling newly elected legislators with less data available."}, {"title": "Multi-view Planning Module", "content": "Inspired by political science, the planning module decomposes the task of voting decision-making into three main views, aiding the agent in decision-making. In the appendix, we present the prompts used for these different views (Alexander 2019).\nTrustee view The Trustee view implies that the legislator relies on their expertise, making decisions based on what they believe to be the best policies for their constituents and the country.\nDelegate view The Delegate view indicates that the legislator sees their role as expressing the will of the majority of their constituents, acting in accordance with the wishes of their voters.\nFollower view Legislators in this category follow the opinions of their party leaders. They are not keen on reflecting public opinion directly and often lack substantial personal insights.\nPractical evidence shows that legislators' decisions are influenced by multiple views. After planning through these"}, {"title": "Simulated Legislative Action Module", "content": "Previous political actor models, while recognizing differences among legislators, typically generated predictions in a single step. Embedding-based methods fail to intricately simulate the decision-making processes of real legislators and do not effectively model the influence of leader figures. In the PAA, we have designed an \"influence mechanism\" to model how leading agents influence other agents.\nLeader agents Leader agents, denoted as $L$, comprise the following agents:\n$L = \\{S, R, D, CC,CM\\},\\qquad (1)$\nwhere $S$ represents the Speaker of the House, $R$ and $D$ represent the Republican and Democratic Leader, respectively, with information sourced from the official website \u00b9. $CC$ denotes the Chairperson of the committee introducing the bill, and $CM$ represents caucus members related to the bill. A congressional caucus is a group of members of the United States Congress who meet to pursue common legislative objectives, often actively pushing legislation through their actions.\nInfluence mechanism In the influence mechanism, leader agents first vote based on the multi-view planning module.\n$V_i = p(L),\\qquad (2)$\nwhere $V_i$ represents the voting prediction of leader agents, and $p$ represents the multi-view planning module. The voting prediction for the remaining agents $O$ is as follows:\n$V_o = p(O|V_i),\\qquad (3)$\nwhere $V_o$ represents the voting predictions of other agents, made under the condition of knowing $V_i$, $p(O|V_i)$ indicates that we include $V_i$ in the prompt to predict the vote of agent $O$. This method effectively approximates the real-world legislative process. It is worth noting that this influence mechanism is highly flexible and can be adapted to different conditions for selecting leadership agents. The configuration presented here is just one of the possible scenarios."}, {"title": "Experiments", "content": "In this section, we conduct a detailed evaluation of the Political Actor Agent (PAA) in predicting roll call votes. Section 4.1 introduces the datasets selected for the experiment and the baselines used. Section 4.2 details the experimental results across different dataset splits. Sections 4.3 and 4.4 feature extensive ablation studies, analyzing the impact of various PAA modules on the outcomes, with a deep dive into the profile module. Section 4.5 demonstrates the consistency of the PAA's results. Section 4.6 provides an interpretable example to illustrate how the PAA generates its predictions."}, {"title": "Datasets and Baselines", "content": "We selected voting data from the 117th to 118th House of Representatives, covering 432 legislators. In addition to the voting data for bills, we collected additional data for constructing profiles and heterogeneous information graphs. This includes the most recent Wikipedia pages of the legislators (as of March 2024), Wikipedia pages for all constituencies, data on the sponsors and cosponsors of bills, and Twitter posts by the legislators. We selected five methods as"}, {"title": "Roll Call Vote Prediction", "content": "Implementation We divided the dataset in chronological order and selected three different ratios for dataset splits.\n1. split244: 20% training, 40% validation, 40% testing.\n2. split433: 40% training, 30% validation, 30% testing.\n3. split622: 60% training, 20% validation, 20% testing.\nAs an agent-based approach, the PAA does not train models. Instead, we sample 20 voting records from the training set to construct the profile for each agent and directly evaluate the results on the test set.\nOur methods were tested using Llama-3-70B (PAAL) and GPT-40-mini (PAAG) as the base models. We chose accuracy and macro-averaged F1-score as metrics to evaluate the model's performance on a three-class task: in favor, against, and abstaining. We conducted experiments for PAAL on a four NVIDIA RTX A6000 GPUs, while the PAAG experiments were carried out using the OpenAI API\u00b2.\nResults The results are presented in table 1. The primary findings of the experiment indicate that PAAG consistently outperformed across all dataset splits, achieving superior results compared to state-of-the-art methods. PAAL performed particularly well in terms of the macro-averaged F1 score. This is largely due to the label imbalance in the three-class voting problem. As the proportion of the training set decreases within the dataset, the performance of embedding-based methods declines more rapidly, whereas PAA remains more stable. This suggests that PAA is better adapted to scenarios with limited data, such as predicting the voting behavior of new legislators.\nPAR and UPPAM performed next best to PAAG in the split622. PAR learns representations of legislators through"}, {"title": "Ablation Studies", "content": "Implementation We designed ablation experiments to further verify the impact of various modules on the performance of the PAA. On the split244, while keeping other conditions constant, we individually removed the profile module, the planning module, and the acting module to assess their individual contributions to the PAA's effectiveness.\n1. PAA w/o Pro: Remove profile module.\n2. PAA w/o Pla: Remove planning module.\n3. PAA w/o Act: Remove acting module.\nResult The experimental results are shown in table 2. The results indicate that different modules impact the performance of the PAA to varying degrees. Notably, the profile module has the greatest effect, as it contains a wealth of crucial information, including personal details, voting records, and more. Next, we will further explore the influence of the profile on the performance of the PAA."}, {"title": "Analysis of Profile Module", "content": "Implementation The profile module comprises four key components: legislator personal information, constituency details, legislative sponsorship activity, and voting records. We have designed experiments to address specific concerns related to the performance of the PAA. RQ1: The outstanding performance of PAA might be attributed to the fact that the agent, based on a large language model, had already been exposed to legislative information and legislator-related corpora during the pre-training phase. RQ2: Which part of the agent profile plays a more significant role in predicting outcomes? RQ3: Does an excessive length of voting records dilute the importance of other components and adversely affect the performance of the experiments?\nBased on the considerations above, for RQ1 and RQ2, we conducted detailed experiments on the split244 dataset with PAAG. For RQ3, we devised an experiment to analyze the effect of the length of voting records on the performance of the PAA. One approach involves sampling 20 data points from the training set to add to the profile, while another uses the entire training set. The PAA variants used in the experiment are as follows:\n1. PAAano: Anonymize the names of legislators and bill numbers. Names and bill numbers are replaced with random numbers.\n2. PAAdec: Introduce incorrect information to deceive the large language model; we swapped names of legislators with differing stances to observe whether PAA predicts based on pre-trained data."}, {"title": "Consistency Analysis", "content": "Implementation Unlike other embedding-based models that generate representations of legislators, large language models are prone to underlying hallucinations, potentially generating different results across multiple runs. Therefore, we analyzed the consistency of results produced by the PAA. We randomly selected 50 legislator agent and bill pairs and repeated the experiment 20 times.\nResults The experimental results using PAAG and PAAL are shown in figure 4 respectively. In the heatmaps, red indicates correct predictions, while blue denotes incorrect predictions. The horizontal axis represents different experimental runs, and the vertical axis represents different agent-bill pairs. Overall, we observed that the hallucination phenomenon commonly associated with large language models was not significant. Specifically, PAAL showed stronger consistency, with only a few instances where the same agent-bill pair produced different results across experiments. Meanwhile, PAAG achieved a higher number of correct predictions, though its consistency was not as strong as that of Llama-3-70B. Thus, conducting multiple experiments to mitigate the effects of hallucinations is highly beneficial."}, {"title": "Interpretability", "content": "As shown in figure 5, we present an example to illustrate the interpretability of the PAA's voting prediction results. In this example, the Agent explains its choice from three different views, each backed by factual evidence. It is noteworthy that he mentioned his conservative inclinations and the corresponding choice of leadership agent, which highlights the effectiveness of our multi-view planning module and influence mechanism."}, {"title": "Conclusion", "content": "In this study, we introduced the Political Actor Agent (PAA), an innovative approach leveraging Large Language Models (LLMs) for the predictive modeling of legislative behavior. By incorporating agents in a role-playing architecture, PAA uniquely simulates the dynamics of legislative decision-making, providing a robust framework for understanding and predicting roll call votes. The utilization of extensive pre-existing knowledge and reasoning capabilities from LLMs ensures high accuracy and interpretability without relying on massive bespoke training datasets. Additionally, although our experiments focused on U.S. legislators, PAA can be easily extended to other countries.\nHowever, the PAA also has several limitations: 1. Data Diversity: Despite achieving superior performance compared to baselines with fewer data types, the current architecture lacks support for integrating diverse data sources like social media commentary and news. 2. Task Diversity: Compared to existing political actor modeling methods, PAA primarily supports the task of roll call vote prediction. Developing mechanisms to support more downstream tasks remains an unresolved issue. 3. Hallucination: Stable and consistent prediction results are essential, although we have analyzed PAA's results from a consistency perspective, The hallucination issue in LLMs is complex, and consistency is only one measure of it.\nIn the future, we plan to further explore the integration of more diverse data types, such as real-time social media analytics and global news events, to enhance the predictive power of PAA. Additionally, we aim to design more versatile mechanisms to accommodate different downstream tasks, broadening the applicability and utility of the PAA in computational political science."}]}