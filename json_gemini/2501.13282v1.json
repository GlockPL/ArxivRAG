{"title": "Experience with GitHub Copilot for Developer Productivity at Zoominfo", "authors": ["Gal Bakal", "Ali Dasdan", "Yaniv Katz", "Michael Kaufman", "Guy Levin"], "abstract": "This paper presents a comprehensive evaluation of GitHub Copilot's deployment and impact on developer productivity at Zoominfo, a leading Go-To-Market (GTM) Intelligence Platform. We describe our systematic four-phase approach to evaluating and deploying GitHub Copilot across our engineering organization, involving over 400 developers. Our analysis combines both quantitative metrics, focusing on acceptance rates of suggestions given by GitHub Copilot and qualitative feedback given by developers through developer satisfaction surveys. The results show an average acceptance rate of 33% for suggestions and 20% for lines of code, with high developer satisfaction scores of 72%. We also discuss language-specific performance variations, limitations, and lessons learned from this medium-scale enterprise deployment. Our findings contribute to the growing body of knowledge about AI-assisted software development in enterprise settings.", "sections": [{"title": "Introduction", "content": "Developer productivity is a strategic priority at Zoominfo, driven by our funda- mental belief that the speed at which a company transforms ideas into customer outcomes is strongly correlated with their competitive advantage. As such, we are continuously evaluating and adopting new methodologies and tools that enhance our developer's productivity.\nThe emergence of AI-powered coding assistants has sparked significant in- terest in their potential to enhance developer productivity. GitHub Copilot (sometimes referred as \u201cthe tool\" in this paper), launched in 2021, represents a major advancement in this space, promising to accelerate software develop- ment through AI-generated code suggestions. However, while initial studies have shown promise, there remains limited empirical evidence of its evaluation, deployment, and effectiveness in medium- to large-scale enterprise environments.\nThis paper addresses this gap by presenting a detailed case study of GitHub Copilot\u2019s production deployment at Zoominfo, a leading Go-To-Market (GTM) Intelligence Platform, where it is used by over 400 developers who are geograph ically dispersed, with diverse technical disciplines, and programming languages. Our study aims to answer five key questions in a medium-scale enterprise set ting:\n1. How is GitHub Copilot evaluated to reach a production deployment deci sion?\n2. What are the acceptance rates for different programming languages?\n3. What are the key factors influencing developer satisfaction with AI-assisted coding?\n4. How effective is GitHub Copilot in improving developer productivity?\n5. What are the observed and potential limitations of GitHub Copilot?\nWe present a comprehensive case study of Zoominfo\u2019s evaluation, trial, and company-wide deployment of GitHub Copilot. As a major GTM platform man aging hundreds of millions of business contact and company profiles and pro cessing billions of daily events, we believe Zoominfo\u2019s experience offers valuable insights into the practical implementation and impact of AI-assisted software development at scale in similar enterprise companies.\nOur analysis of GitHub Copilot usage combines both quantitative metrics, focusing on acceptance rates of the tool\u2019s suggestions, and qualitative feedback through developer satisfaction surveys. The results show an average acceptance rate of 33% for suggestions and 20% for lines of code, with high developer satisfaction scores of 72%. The acceptance rates we have observed are in line with the acceptance rates reported by a few other companies in industry, e.g., GitHub and Google\nThe acceptance rates for the top four programming languages used by our developers, i.e., TypeScript, Java, Python, and JavaScript, are sustained at about 30%. Interestingly we observe smaller acceptance rates for HTML, CSS, JSON, and SQL.\nOur developers primarily enjoy the time savings (around 20%) due to GitHub Copilot while citing as limitations the tool\u2019s lack of domain-specific logic and lack of consistency in code quality. These limitations negatively impact time savings due to the need for additional scrutiny required while vetting the generated code.\nDespite these limitations, we believe GitHub Copilot usage significantly con tributed to the productivity of our developers. In addition the improvements in time savings and developer satisfaction, the number of lines of production code contributed is on the order of 100s of 1000s of lines of code."}, {"title": "Background: Zoominfo", "content": "Zoominfo[36] is the leading \"Go-To-Market (GTM) Intelligence Platform\"; it helps companies to acquire new customers as well as retain and grow their existing customer base. It has comprehensive and accurate data about 100s of millions of business contacts and companies. It has products built on the shared platform to serve multiple personas: Sales for sellers, Marketing for marketers, Talent for recruiters, Operations for data managers, and Data-as-a- Service (DaaS) for companies developing custom internal solutions.\nZoominfo has more than 37,000 customers (companies) and a few 100 thou- sands of monthly active users [36]. It has close to 4,000 employees in total, geographically distributed over the US, Europe, India, and Israel; a quarter of the employees are in the engineering department, and 400 engineers are active developers producing and deploying production software.\nZoominfo operates its platform on top of two public clouds, run by Google and Amazon. The platform consists of many microservices and a few mono- liths interacting with data streaming and data management platforms [35]. The most common programming languages are TypeScript, Python, Java, and JavaScript, distributed over 1000s of code repositories hosted mainly with self- hosted GitHub Enterprise Server instance but also remotely with GitLab.\nThe scale challenges at Zoominfo [4, 28] include the management of 100s of millions of business contact and company profiles, keeping them accurate and up-to-date, collecting and serving in real time billions of events per day, pro- cessing big data using AI and serving insights to users in real-time, responding to 10s of millions of search and other user queries a day, serving user experience queries in less than 1 second response time, providing 99.9% uptime per month for the most frequent user experience journeys (which means stability objectives more stringent than 99.9% for the backend systems), and delivering very high security and privacy requirements."}, {"title": "Productivity Refresher", "content": "At Zoominfo, the productivity principle we follow is this: How fast a company moves in transforming ideas into customer outcomes is the primary advantage"}, {"title": "Projected Benefits of GitHub Copilot", "content": "A few months after GitHub Copilot was released, the excitement it generated also prompted us to conduct an ad hoc assessment of its potential benefits. The result of this ad hoc assessment was positive, and we proceeded with procuring GitHub Copilot for a formal assessment.\nThe following benefits were projected based on this initial ad hoc assessment."}, {"title": "Augmenting Day-to-day Software Development", "content": "\u2022 Automated Code Generation: GitHub Copilot can generate code snippets and even complete functions based on the contextual information pro- vided. It can suggest logic for the developers while they're coding, which can be a significant time-saver, especially when dealing with routine or repetitive code patterns.\n\u2022 Code Review Assistance: Copilot can also serve as a pseudo-code-reviewer. It learns from billions of lines of code, meaning it can help spot potential bugs, suggest improvements, and ensure that the code aligns with best practices.\n\u2022 Documentation and Commenting: The AI can provide useful comments and assist with documentation. It can explain complex code snippets, making it easier for other team members to understand the codebase, hence promoting collaboration.\n\u2022 Learning New Technologies: When working with new languages, libraries, or frameworks, GitHub Copilot can be a great companion. It can pro-"}, {"title": "Overall Productivity Gains", "content": "\u2022 Time Efficiency: With automated code generation and intelligent sugges- tions, developers can save significant time. This time can be used for more critical tasks, such as designing software architecture or addressing complex problems.\n\u2022 Quality Improvement: By acting as a pseudo-code-reviewer, GitHub Copi- lot can help improve the quality of the code, reducing the likelihood of bugs and rework.\n\u2022 Onboarding and Training: For new hires or junior developers, GitHub Copilot can act as a learning tool, helping them quickly understand the codebase, best practices, and contributing effectively.\n\u2022 Accelerated Development Cycles: By reducing the time spent on routine tasks, improving code quality, and facilitating faster onboarding, GitHub Copilot can significantly accelerate our development cycles."}, {"title": "Methodology: From Evaluation to Rollout", "content": "After the initial ad hoc assessment in early July of 2023, we implemented a systematic four-phase approach from July to August of 2023 to evaluate and deploy GitHub Copilot across our engineering organization: Initial assessment phase, trial recruitment phase, the two-week trial phase, and the rollout phase. The rollout started in early September of 2023 and it took a few months for GitHub Copilot to be adopted by all the developers due to our pacing of the license distribution."}, {"title": "Phase 1: Initial Assessment Phase", "content": "We conducted an initial qualitative assessment with five engineers from July 10th, 2023 to July 17th, 2023 to evaluate GitHub Copilot's potential impact on development workflows. This preliminary evaluation focused on identifying key benefits and potential challenges within our existing software development lifecycle.\nThe preliminary feedback was overwhelmingly positive, with key metrics including:\n\u2022 Overall experience rating: 8.8 out of 10;\n\u2022 Productivity improvement rating: 8.6 out of 10; and\n\u2022 Code standards alignment: All five participants reported good to excellent alignment with existing coding standards."}, {"title": "Phase 2: Trial Recruitment Phase", "content": "We implemented a structured recruitment process for the controlled trial phase, conducted from July 17th to August 14th, 2023. The recruitment strategy employed stratified voluntary sampling to ensure representative participation across multiple dimensions of our engineering organization.\nThe trial cohort comprised 126 engineers (about 32% of the developers), with participation stratified across technical specializations, experience levels, geographical locations, and technology stacks.\nTo ensure compliance with organizational standards and maintain data in- tegrity, participants were required to fulfill several prerequisite conditions:\n1. Completion of internal security code review training.\n2. Written acknowledgment of corporate compliance requirements:\n\u2022 Generative AI usage policies,\n\u2022 General AI governance framework,\n\u2022 Data governance protocols,\n\u2022 Data ethics guidelines, and\n\u2022 Data classification standards.\n3. Commitment to provide structured feedback through a follow up survey."}, {"title": "Phase 3: Two-Week Trial Phase", "content": "We conducted a two-week controlled trial from August 15th to August 29th, 2023, with 126 participating engineers actively integrating GitHub Copilot into their daily development workflows.\nAt the trial's conclusion, we collected feedback through a comprehensive survey (72 respondents, about 57% response rate).\nThe survey addressed three key dimensions:\n1. Overall experience and productivity impact,\n2. Code quality and standards alignment, and\n3. Security considerations.\nThe overall experience was positive with the following ratings:\n\u2022 Mean satisfaction rating: 8.0 out of 10, and\n\u2022 Mean productivity improvement rating: 7.6 out of 10.\nDevelopers reported time savings for generating boilerplate and repetitive code, unit tests, meaningful variable names, documentation, and comments.\nRegarding code quality and standards alignment, the majority of partici- pants were satisfied:"}, {"title": "Phase 4: Rollout Phase", "content": "Following the successful trial, an analysis of the survey data from Phase 3 deter- mined that there were no outstanding issues that needed to be addressed before rolling out GitHub Copilot to the remainder of our engineers.\nThus, we initiated the full-scale deployment of GitHub Copilot across our engineering organization on September 7th, 2023 by releasing a ServiceNow Workflow for measured deployment of GitHub Copilot licenses, as shown in Fig. 1. This streamlined the process of GitHub Copilot provisioning and enabled tracking for compliance and utilization metrics. This also enabled ZoomInfo engineers to promptly get access to the tool."}, {"title": "Success Measure", "content": "The impact of GitHub Copilot on developer productivity seems difficult to mea- sure after a short-term usage. As such, we resorted to a measure that was rec- ommended by GitHub after it was found to be a \"better predictor of perceived productivity\" [34]: Acceptance rate of shown suggestions.\nAcceptance rate of shown suggestions [10] for one developer is the ratio of the suggestions accepted by the developer to the total number of suggestions shown to the developer.\nFor this measure, even a partial acceptance gets the full credit. Moreover, the number of lines shown is not included in the rate. This means a single line as well as 100s of lines get the same credit. Both of these may be seen as limitations of this measure but for now, the acceptance rate measure seems like a good one among the alternatives considered in [34].\nThe acceptance rate of shown suggestions for a team is the average over the rates for developers.\nAfter months of usage, we have also been monitoring for any changes in our regular developer productivity metrics such as the DORA metrics and devel- oper satisfaction scores. Once we establish a reliable causality between these metrics and the GitHub Copilot usage, we are planning to report the results in a subsequent paper."}, {"title": "Quantitative Results: Overall Acceptance Rates", "content": "Fig. 2 shows the table of data for 26 days in 2024, from from Nov. 11th to Dec. 9th. The table shows the number of suggestions, acceptances, lines suggested, and lines accepted.\nFor each prompt from a developer, GitHub Copilot makes a suggestion, which has one or more lines of code or comments, and the developer accepts or declines the suggestion. The ratio is the acceptance rate. The acceptance rates in terms of suggestions and lines are also given in the table.\nThe average numbers of suggestions and lines suggested are close to 6,500 and 15,000, respectively. The standard deviations are close to the half of these numbers in each case but such large deviations are due to the weekday and weekend periods rather than the variations from day to day. The averages over weekdays are about 20% and 35% larger than these overall averages. Similarly, the averages over weekends are about 60% and 75% smaller than these overall averages.\nNote that for our developers in Israel, the weekend is from Friday to Saturday while for the developers in the US and India, the weekend is from Saturday to Sunday.\nEach suggestion has a few lines of code or comments; the average is 2.8 lines"}, {"title": "Quantitative Results: Per Language Accep- tance Rates", "content": "Fig. 5 shows the table of data for about a month in 2024, from from Nov. 11th to Dec. 9th. The table shows per (programming) language the number of suggestions, acceptances, lines suggested, and lines accepted. These numbers are the largest for the top four languages in the table, i.e., TypeScript, Java, Python, and JavaScript, which is not surprising given the most of our codebase is in these four languages.\nFor simplicity, we include data in the table for only the top dozen languages, sorted in decreasing order of the total number of suggestions. We excluded data for languages such as Groovy, Shell (e.g., zsh or bash), Scala, Ruby, and the like since their numbers are too small.\nFig. 6 shows the same data in the table in Fig. 5 but as bar charts and line plots for ease of understanding. The top four languages cover close to 80% and 75% of the total number of suggestions and lines suggested, respectively, as well as close to 85% of the total number of acceptances and lines accepted.\nAs shown in Fig. 7, for the 26-day period discussed in this section, the acceptance rates per language varies between about 14% to 32%. The highest acceptance rate is for the Go language but the number of suggestions is far smaller. Interestingly the number of lines per suggestion for the Go language is also the highest, over 6, while the number ranges from 2 to 3 for the other languages.\nThe acceptance rates for the top three languages are among the highest, over 30%, which agrees with the overall acceptance rate we presented in the previous section. The acceptance rates for HTML, CSS, JSON, and SQL are interestingly smaller compare to those of the general-purpose languages. We do not know the reason for this difference."}, {"title": "Quantitative Results: Per Editor Acceptance Rates", "content": "Fig. 8 shows the table of data for the top two IDEs (\u201ceditors\") used by our developers: JetBrains (by JetBrains) and VS Code (by Microsoft). The usage of the former editor is more widespread, hence, the larger number of suggestions and lines suggested for JetBrains.\nThe acceptance rates of suggestions are close to each other and also close to the 30% figure we cited for the overall rate. At the same time, the lines acceptance rates differ with VS Code having about 50% higher value. We do not know the reason for this difference but it is interesting to note the lower number of lines per suggestion for VS Code."}, {"title": "Qualitative Results: Developer Satisfaction", "content": "In our pursuit of creating the best environment for engineering talent to thrive, we are committed to employing both quantitative and qualitative approaches"}, {"title": "Limitations: Observed and Potential", "content": "These are the limitations of GitHub Copilot that we were able to observe so far:\n\u2022 Contextual Understanding: Struggles with understanding domain-specific logic, leading to irrelevant or redundant suggestions.\n\u2022 Security Concerns: Potential security risks from auto-generated code re- quiring additional vetting.\n\u2022 Creativity Limitations: Generates predictable, less innovative solutions in some cases.\nThough we have not observed yet, we can envision a number of potential limitations with GitHub Copilot, as follows.\n\u2022 Sensitive Data Exposure: GitHub Copilot may inadvertently suggest or generate code containing sensitive or proprietary information due to its training on public repositories.\n\u2022 Intellectual Property Issues: GitHub Copilot might suggest code snippets resembling copyrighted or proprietary code, leading to potential intellec- tual property infringement."}, {"title": "Related Work", "content": "There are many factors that affect developer productivity. A high-level summary of those factors is given in [6]. \u00a7 3 presents a preview. For this section, we will consider only the factors that can be impacted by GitHub Copilot. For more information, refer to [7, 25, 8, 17, 21].\nThe news on the launch of GitHub Copilot is given in [9] with some additional information in [26]. The tool is launched as \"a new AI pair programmer that helps you [developers] write better code.\u201d The description of the tool reads \"GitHub Copilot draws context from the code you're working on, suggesting whole lines or entire functions. It helps you quickly discover alternative ways to solve problems, write tests, and explore new APIs without having to tediously tailor a search for answers on the internet. As you type, it adapts to the way you write code to help you complete your work faster.\"\nGitHub Copilot uses a version of Codex, which is originally a GPT language model from Open Al fine-tuned on publicly available code from GitHub [3]. The Codex introduction in [3] discusses limitations and impact of the model and provides related work on similar tools. The limitations and impact mention over-reliance, misalignment, bias and representation, economic and labor market impacts, security implications, environmental impacts, and legal implications. The paper also touches upon some risk mitigation.\nThere are a growing number of publications on measuring the impact of GitHub Copilot on developer productivity.\nA comprehensive, somewhat \"official\", report on the productivity impact of the tool is presented in [34] by researchers from GitHub, the company that had"}, {"title": "Conclusions and Future Work", "content": "In addition to sharing our comprehensive evaluation methodology, our study provides several key insights into the enterprise-scale deployment of GitHub Copilot for developers:\n\u2022 Quantitative impact: The tool shows consistent acceptance rates (33% for suggestions, 20% for lines) across different programming languages, indicating reliable utility across diverse development contexts.\n\u2022 Developer satisfaction: High satisfaction rates (72%) and positive feedback suggest that GitHub Copilot effectively supports daily development tasks, particularly in areas like boilerplate code generation and unit testing.\n\u2022 Implementation considerations: Our phased deployment approach, includ- ing security training and policy alignment, proved effective for managing the transition to AI-assisted development.\n\u2022 Limitations and challenges: While generally successful, the tool shows lim- itations in understanding domain-specific logic and requires careful con- sideration of security implications.\nFuture work should focus on long-term impact assessment, particularly re- garding DORA metrics, code quality, and maintenance implications. Addition- ally, investigating the tool's effect on developer learning and skill development would provide valuable insights for enterprise adoption strategies."}]}