{"title": "A Quantum-Inspired Analysis of Human Disambiguation Processes", "authors": ["Daphne Pauline Wang"], "abstract": "Formal languages are essential for computer programming and are constructed to be easily processed by computers. In contrast, natural languages are much more challenging and instigated the field of Natural Language Processing (NLP). One major obstacle is the ubiquity of ambiguities. Recent advances in NLP have led to the development of large language models, which can resolve ambiguities with high accuracy. At the same time, quantum computers have gained much attention in recent years as they can solve some computational problems faster than classical computers. This new computing paradigm has reached the fields of machine learning and NLP, where hybrid classical-quantum learning algorithms have emerged. However, more research is needed to identify which NLP tasks could benefit from a genuine quantum advantage. In this thesis, we applied formalisms arising from foundational quantum mechanics, such as contextuality and causality, to study ambiguities arising from linguistics. By doing so, we also reproduced psycholinguistic results relating to the human disambiguation process. These results were subsequently used to predict human behaviour and outperformed current NLP methods.", "sections": [{"title": "Introduction", "content": "In this research program, we investigate some properties of the English language using mathematical tools from Quantum Mechanics. We created quantum-inspired models of human disambiguation processes from linguistic data. Using these models, we provide promising evidence that this method leads to novel quantum computing methods for Natural Language Processing.\nArtificial Intelligence (AI), or how to perform intelligent tasks done by humans algorithmically, is a longstanding challenge in Computer Science. Amongst one of the most widely studied areas in AI is the field of Natural Language Processing (NLP), whose goal is to understand natural language. This field is currently widely dominated by the use of Large Language Models (LLMs), such as BERT or GPT, which consist of artificial neural networks trained over large corpora. These LLMs are incredibly successful in various NLP tasks, such as text generation or knowledge extraction. There are, however, several criticisms of them, including:\n\u2022 Lack of reproducibility, due to the immense resources needed for training;\n\u2022 Transparency, i.e. the impossibility of tracing back the decision process of the neural network;\n\u2022 Cognitive plausibility, i.e. whether these neural networks reproduce the way humans learn and process natural language data.\nIn parallel, computational linguistics aims to use computational tools to study human cognitive processes and natural languages. Computational linguistics and NLP are highly related, and their distinction is increasingly blurred.\nThe aim of this thesis is more in line with computational linguistics since we investigate features of the natural language using tools from NLP (e.g. LLMs). The thesis focuses on English, although our approach could be replicated in other languages.\nIn 1994, Peter Shor published his famous article describing a quantum algorithm that can factorise an integer in polynomial time [166], thus demonstrating the use of quantum systems to solve hard computational tasks. The discovery of this algorithm sparked the interest of the computer science research community in quantum information theory and quantum computing. The idea behind quantum computations is straightforward. Instead of using bits as in classical computing \u2013 information is encoded as qubits. Qubits can not only take values the values |0) or |1) but can also be expressed as the (complex) linear combination:\n$\\alpha|0\\rangle + \\beta|1\\rangle \\text{ such that } |\\alpha|^2 + |\\beta|^2 = 1$ (1)\nSimilarly, instead of considering operations between strings of bits as computations, we use operations between systems of qubits, which are subject to the laws of quantum mechanics.\nSince Shor's algorithms, it has been shown that quantum systems are capable of achieving speed-ups in various computational tasks in theory, in tasks such as database search [86], optimisation tasks [60] or simulation of physical systems [24, 16], and more recently in practice, in tasks such as sampling from a random quantum circuit [15] or boson sampling [202, 129]. In addition, although quantum advantages are more difficult to prove, quantum computations have started to find applications in various fields of computer science, including optimisation problems (e.g. [59, 60]) and AI (e.g. [65, 201, 182, 157]).\nMost research on quantum computing applications to AI and NLP consists of creating a quantum version of existing algorithms. Therefore, these approaches also suffer from the same issues as the classical approaches, including the need for more transparency and cognitive plausibility. In addition, the advantage of using quantum computing resources is not always clear and usually relies on heuristics.\nIn this work, we aim to address these problems for quantum NLP. By studying linguistic data using the formalisms of quantum mechanics, we create a parallel between linguistic phenomena and quantum systems, from which we can identify which features of natural languages would benefit from simulations on quantum hardware. We also show that, by using the mathematical frameworks developed to study quantum mechanics, we can uncover properties of the human disambiguation process.\nThis thesis uses the mathematics of category theory, in particular the notions of sheaves and presheaves. The main reason for doing so is the level of abstraction allowed by category theory, allowing us to draw parallels between quantum and linguistic systems. A second motivation is the categorical quantum mechanics research project which originated from the seminal paper of Samson Abramsky and Bob Coecke [7]. Indeed, the line of research showed that quantum mechanics can very elegantly be described in categorical terms (see more details in Chapter 1).\nOn top of that, this description has also been applied to various aspects of linguistics, notably in the Distributional Compositional Categorical models of meanings (also known as DisCoCat), which emanated from [42], or as semantics of Discourse Representation Theory [8].\nThis thesis is an additional example of the application of categorical quantum mechanics in linguistics to ambiguities in the English language. Ambiguities in English occur at different levels, from words to discourses. This project investigates the disambiguation process of two types of ambiguities, namely:\n\u2022 Lexical ambiguity which happens when a single word has multiple interpretations. For example, the word bank, which could refer to a financial institution or the bank of a river;\n\u2022 Syntactic ambiguity which happens when a phrase can have multiple grammatical structures. For example, in the sentence She saw a man with binoculars, the phrase with binoculars can either attach to the verb saw or to the noun-phrase a man.\nIn the case of lexical ambiguity, we have studied the statistics of the meaning activations of subject-verb and verb-object phrases, where each word is lexically ambiguous. We then used the mathematical framework arising from the study of quantum contextuality and causality to study these statistics. We were able to show that the observed statistics from lexical ambiguity data show are capable to exhibit quantum-like contextuality. In addition, we were able to rederive some psycholinguistics results that were originally based on eye-tracking data (which is not easily reproducible and expensive to obtain). Using these results, we produced quantum simulations of the disambiguation process of subject-verb and verb-object phrases, which could then be applied to NLP tasks.\nRegarding syntactic ambiguity, we also used the sheaf-theoretic frameworks originating from quantum contextuality and causality to create a model of the syntactic parsing process. This model was then used to make reading time predictions in special sentences, known as garden-path sentences. These predictions were closer to the human baseline than the ones obtained from state-of-the-art methods of computational linguistics.\nThe aim of Part I is to introduce the concept we will use in the rest of the thesis.\n\u2022 In Chapter 1, we introduce the different branches of categorical quantum mechanics that we will use in the subsequent parts.\n\u2022 In Chapter 2, we introduce the main literature regarding lexical (Section 2.1) and syntactic (Section 2.2) ambiguities. In particular, we will describe the psycholinguistic theories relating to these ambiguity types and the computational tools that have been used in the past in NLP and computational linguistics. Elements of Section 2.1 will be used in Part II, while theories introduced in Section 2.2 will be used in Part III.\nParts II and III correspond to the original contributions of the thesis. These parts can be read independently."}, {"title": "Quantum theory and applications", "content": "This chapter introduces the quantum physics formalisms we will use in Parts II and III. In particular, we will make use of the categorical description of quantum mechanics. We will, therefore, start by introducing the mathematics of category theory in Section 1.1. In Section 1.2, we will describe quantum correlations, notably in terms of sheaf theory, and in Section 1.3, we will give a categorical description of quantum processes.\nCategory theory originated in the work of Eilenberg and MacLane for homological algebra [57]. The field of category theory then rapidly evolved and reached other areas of mathematics such as algebraic geometry [85], set theory [115], as well as computer science [113, 66] and physics [7, 17].\nIn this section we introduce the basic concepts at the heart of category theory. This introduction is by no means comprehensive, and we will only present the elements that will be useful in subsequent chapters."}, {"title": "Basics of Category Theory", "content": "In this subsection, we start by defining the main notions of category theory, which will be subsequently expanded in Section 1.1.2 and Section 1.1.3.\nDefinition 1.1 (Category). A category C consists of:\n1. A collection of objects denoted as ob (C)\n2. A set[1] of morphisms for each pair of objects A, B \u2208 ob (C), denoted as C(A, B) equipped with:\n(a) Sequential composition: for morphisms f \u2208 C(A, B) and g \u2208 C(B, C) we have g \u25e6 f \u2208 C(A, C).\n(b) Identity morphism: for each object A \u2208 ob (C), there exists a unique morphism idA \u2208 C(A, A).\nsatifsfying the following properties:\n(a) For any f \u2208 C(A, B), g \u2208 C(B, C) and k \u2208 C(C, D):\nk \u25e6 (g \u25e6 f) = (k \u25e6 g) \u25e6 f (1.1)\nIn other words, sequential composition is associative.\n(b) For any f \u2208 C(A, B) and g \u2208 C(C, A):\nf \u25e6 idA = f idA \u25e6 g = g (1.2)\nExample 1.2. Here are standard examples of categories:\na. The category of sets and functions denoted as Sets. The objects of Sets are sets, and morphisms are functions between sets. Composition is the standard functional composition, and identity morphisms are identity functions:\nidA \u2208 Sets(A, A) a a (1.3)\nb. The category of sets and relations denoted as Rel. The objects are the same as the ones of Sets, and the morphisms are binary relations, i.e. Rel(A, B) =\nP(A \u00d7 B). The composition of relations u \u2208 Rel(A, B) and v \u2208 Rel(B, C) is defined as:\nv \u25e6 u \u2208 Rel(A, C) = {(a, c) | \u2203b \u2208 B. (a, b) \u2208 u \u2227 (b, c) \u2208 v} (1.4)\nThe identity morphisms in Rel are then defined as:\nidA \u2208 Rel(A, A) = {(a, a) | a \u2208 A} (1.5)\nc. The category of vector spaces denoted as Vect. Its objects are vector spaces, and morphisms between two vector spaces are linear maps. Composition is the standard composition of (linear) maps. We can also define the subcategory FdVect of Vect in which the objects are finite-dimensional vector spaces, and morphisms are defined as in Vect. In FdVect, morphisms can be seen as matrices (by fixing a basis), and composition as matrix multiplication. Similarly, the identity morphisms become identity matrices.\nd. A category is said to be a preorder if there is at most one morphism between two objects. This notion generalises the notion of order by taking the existence of a morphism between A and B to represent A < B. The presence of composition morphisms in a preorder means that the relation \u2264 is transitive, i.e. if A < B and B \u2264 C then A \u2264 C. Similarly, the existence of identity morphism indicates that the relation \u2264 is reflexive, i.e. A \u2264 A for any object A.\ne. A preorder is said to be a partial order (or a poset) iff A < B and B < A implies that A = B. Furthermore, a partial order is a total order iff for any pair of distinct objects A and B, either A < B or B \u2264 A.\nIt is often convenient to denote morphisms f \u2208 C(A, B) as arrows:\nA f B or equivalently f : A\u2192B\nThen, from associativity equation (1.1), the composition of several morphisms, say f\u2208 C(A, B), g \u2208 C(B,C), h \u2208 C(C, D) and k \u2208 C(D, E) can unambiguously be written as:\nA f B g C h D k E\nIn addition, identity morphisms can be omitted from equation (1.2).\nFrom this, we can define the notion of a diagram in a category C, which corresponds to a (labelled) directed graph such that nodes are objects in C and (labelled) arrows A + B correspond to the morphism \u0192 \u2208 C(A, B). Paths, therefore, correspond to the composition of morphisms. We then say that a diagram commutes iff the paths having the same endpoints are equal. For example, the commutativity of the following diagram represents the equation g\u25e6 f = l \u25e6 k \u25e6 h:\nf f\nA B\nhg /\nC E D\nIn addition, it can be seen that given a set of arrows of a category, reversing all of the arrows still leads to a valid category. This category is known as the opposite category.\nDefinition 1.3. Given a category C, its opposite category, denoted as Cop, is defined as follows:\n\u2022 The objects of Cop are the same as the objects of C;\n\u2022 Each morphism \u0192 \u2208 C(A, B) gives a morphism \u0192 \u2208 Cop(B, A). The composition g \u25e6 f \u2208 C(A, C), where \u0192 \u2208 C(A, B) and g \u2208 C(B, C), then gives g \u25e6 f = f \u25e6 \u011f \u2208 Cop(C, A).\nSo far, given a category C, the notion of \u201csameness\u201d of objects is only captured as the equality of objects. However, equality might be too restrictive in general. For example, in Sets, the two sets A\u2081 = {0,1,2} and A2 = {1,2,3} are different, but they have the same expressive power in the sense that any map f1 : A\u2081 \u2192 B can be translated into a map f2 : A2 \u2192 B and conversely. In the category Sets, this notion is conveyed by the existence of a bijection between the sets A\u2081 and A2, and this notion extends to an arbitrary category as the notion of isomorphism."}, {"title": "Sheaf theory", "content": "In this project, we will make use of sheaves and presheaves. The general idea is that presheaves and sheaves define a mathematical notion of consistency. These concepts will be at the core of description of sheaf-theoretic contextuality described in Section 1.2.1, and subsequently used in the models developed in Part II and III. Here, we review the main definitions of sheaf theory.\nDefinition 1.10. Given a category C, we define a presheaf over C as a functor F : Cop\u2192 Set.\nRemark 1.11. The above definition corresponds to the notion of set-valued presheaf. Depending on the school of thought, the term presheaf may also refer to the more general abelian presheaves or presheaves of modules, which take values in abelian groups or modules respectively instead of sets. Here, we will only consider set-valued sheaves and presheaves.\nThis work will mainly look at presheaves and sheaves over topological spaces. A topological space is usually defined as a tuple (X, T) where X is a set of points and T\u2286 P(X) is the set of open sets which contains the empty set and is closed under arbitrary unions and finite intersections.\nRemark 1.12. The class of topological spaces then extends to the category Top where objects are topological spaces and morphisms are continuous functions between them.\nGiven a topological space X = (X, t), we can define a preorder category T(X) where ob (T(X(( = \u05d6 and morphisms are inclusion relations, i.e. for any two open subsets U and V of X, there exists a morphism V \u2192 U iff V \u2286 U. A presheaf over a topological space X is then defined as a functor P : T(X)op \u2192 Sets. These inclusion morphisms V \u2192 U are mapped under the presheaf to restriction morphisms resVU : PU \u2192 PV. For each element of s \u2208 PU, we will denote the action of the restriction morphism on s as s|v, i.e.:\n$\\begin{array}{cccc} \\text{res}^U_V: & PU & \\rightarrow & PV\\\\  & s & \\mapsto & s|_V  \\end{array}$ (1.10)\nRemark 1.13. The notion of section (or cross section) is usually defined in the literature in terms of a bundle (i.e. map) p : E \u2192 X as maps \u03c3 : U \u2192 E such that U\u2192 E \\xrightarrow{p} X is the inclusion map U \u2192 X [128, 81]. There is, in fact, a one-to-one correspondence between elements of PU and sections of a canonical bundle [128] (see Appendix A for more details).\nSo far, we have looked at the consistency of data between subsets via restriction maps. We now describe the notion of consistency \u201cacross\u201d different open sets. Given a presheaf P over a topological space X, we say that there is a gluing between two sections su \u2208 PU and sv \u2208 PV of the open sets U and V, or equivalent that su and sv are locally consistent or compatible, iff:\n$s_U|_{U\\cap V} = s_V|_{U\\cap V}$ (1.11)\nIn terms of global consistency, we want to be able to define a gluing for every pair of open subsets. The notion of sheaves encodes this global consistent condition.\nDefinition 1.14. A presheaf P : T(X)op \u2192 Sets is a sheaf iff for any covering {Ui}i\u2208I of the space X = (X, t), i.e. \u222ai\u2208I U\u2081 = X, for every family of pairwise compatible sections {si \u2208 Ui}i\u2208I, then there exists a section s \u2208 PX such that:\nsUi = Si (1.12)\nfor all i \u2208 I.\nAlthough many had used concepts similar to sheaves before, the exact notion originates from the work of Jean Leray [118], who introduced them to study equations and transformations from a purely topological perspective \u2013 by getting rid of notions he found unnecessary. Subsequent work of Cartan and Serre then exported the ideas from sheaf theory to algebraic geometry [35, 163], which was then made categorical by Grothendieck in the seminal article [85]. The machinery of sheaf theory was then notably used to prove Weil's conjectures in algebraic geometry [84, 45].\nThe use of sheaves also arose, somewhat independently, from a logical perspective, notably from the work of Lawvere and Tierney [116, 176]. In particular, the category of sheaves (as well as the category of presheaves) forms a topos, which can be associated with a logic [81, 114, 98]. In foundations of mathematics, topos theory has provided alternative (and much simpler) proofs of results from set theory, notably the independence of the Continuum Hypothesis [177] and the Axiom of Choice [70] from the Zermelo-Fr\u00e6nkel axioms. In addition, categories of presheaves and sheaves were found to provide semantics for intiutionistic logic, usually referred to as Kripke-Joyal semantics [108].\nSheaf theory has recently been applied to topological data analysis [44] and quantum mechanics [6]. We will discuss the latter in more detail in Section 1.2.1."}, {"title": "Monoidal categories", "content": "We now turn our attention to another type of category which we will use in Chapter 4, namely monoidal categories. As we will see in Section 1.3, these categories are particularly useful in modeling process theories.\nDefinition 1.15. A monoidal category is category C which is equipped with the structure (\u2297, I, \u03b1, \u03bb, \u03c1) where:\n\u2022 The tensor product or monoidal product \u25ca is a bifunctor: : C \u00d7 C \u2192 C\n\u2022 I \u2208 ob (C) is the unit object. The morphisms e : I \u2192 A, where A \u2208 ob (C), will be called the elements of A\n\u2022 The associator a is a natural isomorphism with elements \u03b1A,B,C : (A \u2297 B)\u2297C \u2192 A \u2297(B \u2297 C) for any A, B, C \u2208 ob (C)\n\u2022 The left unitor \u03bb is an natural isomorphism with elements \u03bbA : I \u2297 A \u2192 A\n\u2022 The right unitor p is an natural isomorphism with elements \u03c1A : A \u2297 I \u2192 A such that the following diagrams commute:\n (A \u2297 I) \u2297 B \\xrightarrow{\\alpha_{A,I,B}} A \u2297 (I \u2297 B)\n \nPA \u2297 idB \u2193  idA \u2297 \u03bbB \u2193\n A \u2297 B  A \u2297 B (1.13)\n ((A \u2297 B) \u2297 C) \u2297 D \\xrightarrow{\\alpha_{A\u2297B,C,D}} (A \u2297 B) \u2297 (C \u2297 D)\n\n\u03b1A\u2297B,C,D \u2193 \u03b1A,B,C\u2297D \u2193\n (A \u2297 (B \u2297 C)) \u2297 D \\xrightarrow{\\alpha_{A,B,C}\u2297idD} A \u2297 ((B \u2297 C) \u2297 D) \\xrightarrow{idA\u2297\u03b1B,C,D} A \u2297 (B \u2297 (C \u2297 D)) (1.14)\n$\\alpha_{A,B\u2297C,D}$ \u2193 \u03b1A,B\u2297C,D \u2193\n A \u2297 ((B \u2297 C) \u2297 D) A \u2297 ((B \u2297 C) \u2297 D)\nThe equations (1.13) and (1.14) are referred to as the triangle and pentagon equations respectively.\nExample 1.16. Here are some examples of monoidal categories\na. The category Sets is a monoidal category where the tensor product is the standard cartesian product of sets, and the unit is the singleton set I = {*}. Since for any sets A, B, C, we have (A \u00d7 B) \u00d7 C = A \u00d7 (B x C), the associator consists of identity morphisms. In addition, we have {*} \u00d7 A ~ A for any set A and the the left unitor is defined as:\n\u03bb\u2081 :: (*, \u03b1) \u2208 I \u00d7 A \u21a6 a \u2208 A \u03bb\u2081\u00af\u00b9 :: a \u2208 A \u2194 (*, a) \u2208 I \u00d7 A\nThe right unitor can be defined similarly. Elements of an object A will correspond to the elements a of the set A.\nb. Similarly to the category of Sets, the category of sets and relations Rel is also monoidal, where the monoidal product is also the cartesian product. The associator is, as in Sets, simply consisting of identities and the left and right unitors are defined as:\n\u03bb\u2081 = {((*,a), a)} \u2286 (I \u00d7 A) \u00d7 A \u03c1A = {((a, *),a)} \u2286 (A \u00d7 I) \u00d7 A (1.15)\nElements of an object A \u2208 ob (Rel) will be isomorphic to subsets of A.\nc. The category of finite dimensional vector spaces FdVect is also a monoidal category. The standard choice of monoidal product is the tensor product \u00d0. For example, given two vector spaces V and W of dimension n and m respectively, the vector space V \u2297 W will have dimension n \u00d7 m. Furthermore, for each pair of linear maps A : U \u2192 V and B : W \u2192 X which can be seen as matrices:\nA =\n\u03b111 \u03b112 ... \u03b11k \n\u03b121 \u03b122 ... \u03b12k \n... ... ... ...\n\u03b1\u03b91 \u03b1\u03b92 ... \u03b1\u0131k \nB =\nb11 b12 ... b1m \nb21 b22 ... b2m\n... ... ... ...\nbn1 bn2 ... bnm\nthen the matrix corresponding to A & B will correspond to:\nA11B A12B ... \u03b11kB\nA21B A22B ... \u03b12kB\n...\n\u03b111B A12B ... \u03b1\u0131kB \n=\na11b11 a12b11 ... a1kb11\na21b21 a22b11 ... a2kb2m\n......\n\u03b111bn1 \u03b112bn1 ... \u03b1\u0131kbnm\nIt is very convenient to use string diagrams to represent objects and morphisms in a monoidal category. Generally speaking, each string diagram corresponds to an equivalence class of morphisms with respect to certain[2] isomorphisms in C. The objects of a monoidal category, as well as the identity morphisms, will be represented by wires:\nA\nwith the exception of the unit object I, which will generally not be represented (i.e., corresponds to the empty wire). Morphisms will be represented by boxes, e.g.:\nA\nf  = f : A\u2192B\nB\nAs we mentioned before, the identity morphisms will be represented by the wires themselves. Sequential composition of morphisms will be represented by \u201cstack-ing", "e.g.": "nA\nf \nB = A B  C\ng\nC\nRemark 1.17. Many conventions can be adopted regarding the direction of composition in string diagrams. Here, we will assume that sequential composition happens from top to bottom.\nLet us now look at the diagrammatic view of the monoidal structure. We will represent the tensor product of two objects as stacking wires in parallel:\nAB\nSimilarly, the action of the tensor product on morphisms will also be represented by concatenating the boxes in parallel, e.g.:\n A C\nf g\nB D\nIn particular, from the associator being a natural isomorphism coupled with the pentagon equation (1.14), it is not necessary to specify in which order the objects are being tensored as they will all lead to isomorphic objects (and therefore the same string diagram); consequently, we also do not need to represent morphisms aA,B,C.\nSimilarly, the representation of the unit object I as the empty wire is motivated by the existence of the left and right unitors, as well as the triangle equation (1.13), i.e.:\nA\nwould represent objects A, I \u2297 A and A \u2297 I alike.\nIn addition, elements e : I \u2192 A will be denoted as triangles in string diagrams, namely:\ne\n= e: I  A\nA\nMonoidal categories can be seen as process theories. Indeed, taking objects of the category to be systems or entities and morphisms to be processes, we can see the sequential composition of morphisms as the evolution of the entities through the sequence of processes. Similarly, the tensor product of morphisms will correspond to the execution of independent processes in parallel. Then, the string diagrams are graphical representations of the interactions of different systems under the action of some processes.\nSo far, the definition of a monoidal category only describes a very general process theory. In order to describe process theories satisfying some extra properties, we define more and more specialised monoidal categories by adding additional structure or axioms.\nWe start by defining a symmetric monoidal category, which is a monoidal category C equipped with a natural isomorphism with elements \u03c3A,B : A \u2297 B B A such that:\n\u03c3B,A \u25e6 \u03c3A,B = idA\u2297B (1.16)\nIn terms of string diagrams, we represent the isomorphisms \u03c3A,B as follows:\nAB\nB A\nIn addition, by naturality of o, this implies that \u201cmorphisms slides through the crossings", "i.e.": "nAB  AB\nf  g f \nB A \u03c3A,B \u03c3C,D B  A\nC D D gf C\nAs these morphisms are isomorphisms, two diagrams are equivalent in a symmetric monoidal category if they can be transformed into each other by crossing or uncrossing wires.\nWe now introduce another property that monoidal categories can have which will become very useful in Section 1.3, namely dual objects.\nDefinition 1.18. (Dual objects) An object R in a monoidal category C has a left-dual L\u2208 ob (C), or equivalently L has the right-dual R iff there exists morphisms \u03b7 : I \u2192 R \u2297 L, known as the unit, and \u2208 : L \u2297 R \u2192 I, known as the counit, such that the following diagrams commute:\n\u2297 idI \u03b7 \u2297 idL\nL I \u2297 L R \u2297 L \u2297 I L\n \u2193 \u03b1L,R,L \u2191\n R\u2297 L (\u2297 R) \u2297 L\nidI \u2297 n  idR\nR I \u2297 R  R \u2297 (L \u2297 R)\n\u2193 \u2193\nR R\nIn terms of string diagrams, it is useful to represent dual objects by decorating the wires with arrows going in the opposite direction, e.g.:\n L=    R=\nLR\nIn addition, by representing the morphisms \u03b7 and e as:\nL\u2193R R\n\u03b7 e  (1.21)\n LR\nthen equations (1.18) and (1.19) become respectively:\n L\nRL  L (1.22)\nL\nLR R\n  L  R (1.23)\nExample 1.19. The dual of a finite-dimensional vector space V \u2208 ob (FdVect) is the standard dual space of functions to the field V is defined over, i.e. V* = {f : V \u2192 I} or equivalently, looking at V = span ({e \u2208 B}) as the span vectors e in an orthonormal basis B, the space V* = span ({e | e \u2208 B}) is spanned by the transpose of all of the vectors in B. This space is both the left- and right-dual of V and is isomorphic to V. Having fixed the orthonormal basis B = {ezi|i \u2208 {1, . . ., dimV}}, we can define the unit and counit as:\n\u03c4\n\u03b5:: \u2211 \u03b1; ei \u03a3ai \u03a3\u03b1\ni,j i ej\nT (1.24)\nRemark 1.20. If the left- or right-dual of an object A in a monoidal category is isomorphic to A itself, we will drop the arrow decoration on the wire corresponding to A.\nIf every object in a category has a right-dual, the category is said to be a rigid or autonomous category. A rigid category C moreover gives rise to a dualising functor _* : C \u2192 Cop, such that the action of objects A \u2208 ob (C) gives the right-dual A* \u2208 ob (C) of A, and the action on morphisms f : A \u2192 B is defined as:\n B*\nA*\nf*\nf  A*\nB \n(1.25)\nIf a monoidal category C is both symmetric and rigid, it is said to be a compact-closed category.\nDagger structures The dualising functor is not the only interesting example of a functor C \u2192 Cop. Indeed, the notion of dagger functor \u2020 : C \u2192 Cop will become useful in the description of Hilbert spaces to encode the notion of inner products.\nDefinition 1.21. For any category C, we define a dagger functor as a functor \u2020 : C \u2192 Cop such that for any morphim f in C, (f\u2020)\u2020 = f. A category with a dagger functor is a dagger category. Respectively, a monoidal category endowed with a dagger functor is called a dagger monoidal category.\nExample 1.22. We finally introduce the category of Hilbert spaces Hilb and its sub-category FdHilb of finite-dimensional Hilbert spaces. In these categories, the objects are Hilbert spaces H, i.e. complex vector spaces equipped with an inner product \u3008_|_)H: H \u00d7 H \u2192 C such that d(x, y) = \u221a(x - y|x \u2212 y)\u2081 is a metric. The morphisms in Hilb and FdHilb will be taken to be bounded (or equivalently continuous with respect to the topology induced by the metric) linear maps between Hilbert spaces. Then, we define the action of \u2020 on objects to return the same Hilbert space, i.e. H\u207a = H for any H\u2208 ob (Hilb) (resp. FdHilb) and for any bounded linear map f : H \u2192 K, we take f\u2020 : K \u2192 H to be the unique map such that:\n(f(v)|w)x = (v|f(w))H (1.26)\nfor any v \u2208 H and w \u2208 K. Treating morphisms in FdHilb as complex matrices, taking the dagger correspond to taking the Hermitian conjugate of the matrix, i.e. given A : H \u2192 K, A\u2020 = (AT)* = (A*)T.\nA similar definition of a dagger functor can also be obtained for FdVect, but will then depend on a choice of inner product.\nFinally, in monoidal categories coming with both a dualising functor and a dagger functor, we may require some additional conditions on the interaction between the two structures.\nDefinition 1.23. A compact closed category (i.e. symmetric and autonomous) with a dagger functor is a dagger-compact category whenever the following hold for any pair of duals (L, R):\n L\u2020 \u2020\n(  )\u2020 =L and (R)\u2020=\nR (1.27)\nR L L R\nExample 1.24. The categories Hilb and FdHilb can be seen to be dagger-compact by taking the duals to be the same as the ones defined earlier for vector spaces and the dagger functor defined above."}, {"title": "Describing Quantum Correlations", "content": "The aim of this section is to introduce the concept of quantum contexutality, and in particular the framework of the sheaf-theoretic contextuality (introduced in details in Section 1.2.2), which will be a recurrent theme of the work described in Part II and III. The framework of Contextuality-by-Default is also introduced in Section 1.2.3, which will be widely used in Chapter 3.\nThe inherent probabilistic nature of quantum mechanics has been a longstanding source of debate. Namely, is nature non-deterministic, or is the apparent randomness due to our lack of knowledge about the observed system? This question has led to the development of theory-agnostic descriptions of observations from quantum systems. That is, only assuming classical probability theory, is it possible to describe the observed statistics? Or are the statistical correlations intrinsically non-classical (i.e. different from probabilistic classical physical systems)? These questions are answered by studying the contexutality of quantum systems.\nWe first introduce the standard formalisms of contextuality (Section 1.2.1), and then describe its categorical equivalent and its various extensions (Section 1.2.2). In Section 1.2.3, we introduce an alternative framework to the one of Section 1.2.2.\nIn terms of notation, we will also use the standard Dirac notation where vectors in a Hilbert space will be denoted as |\u03c8) \u2208 H, their Hermitian conjugate will be denoted as (|, and the inner product of two vectors |\u03c8), |\u03c6) \u2208 H will be denoted as (\u03a6\u03c8)."}, {"title": "Contextuality", "content": "The initial criticism of Einstein, Podolsky, and Rosen [58", "completing\\\" the description of the system with additional (unobserved) variables, one could obtain a deterministic system from which we can recover the observed statistics [58": ".", "58": "is that any physical theory should satisfy realism, i.e. every physical quantity, such as the position or the momentum of a particle, should possess a definite value at any given time which should not depend on whether it is observed or not.\nThe first and most widely known counterargument of the EPR paradox is attributed to John Bell [22"}]}