{"title": "A Multi-Agent DRL-Based Framework for Optimal Resource Allocation and Twin Migration in the Multi-Tier Vehicular Metaverse", "authors": ["Hayla Nahom Abishu", "A. Mohammed Seid", "Aiman Erbad", "Tilahun M. Getu", "Ala Al-Fuqaha", "Mohsen Guizani"], "abstract": "Abstract-Although multi-tier vehicular Metaverse promises to transform vehicles into essential nodes within an inter- connected digital ecosystem - using efficient resource allocation and seamless vehicular twin (VT) migration, this can hardly be achieved by the existing techniques operating in a highly dynamic vehicular environment, since they can hardly balance multi-objective optimization problems such as latency reduction, resource utilization, and user experience (UX). To address these challenges, we introduce a novel multi-tier resource allocation and VT migration framework that integrates Graph Convo- lutional Networks (GCNs), a hierarchical Stackelberg game- based incentive mechanism, and Multi-Agent Deep Reinforce- ment Learning (MADRL). The GCN-based model captures both spatial and temporal dependencies within the vehicular network; the Stackelberg game-based incentive mechanism fos- ters cooperation between vehicles and infrastructure; and the MADRL algorithm jointly optimizes resource allocation and VT migration in real time. By modeling this dynamic and multi-tier vehicular Metaverse as a Markov Decision Process (MDP), we develop a MADRL-based algorithm dubbed the Multi- Objective Multi-Agent Deep Deterministic Policy Gradient (MO- MADDPG), which can effectively balances the various conflicting objectives. Extensive simulations validate the effectiveness of this algorithm that is demonstrated to enhance scalability, reliability, and efficiency while considerably improving latency, resource utilization, migration cost, and overall UX by 12.8%, 9.7%, 14.2%, and 16.1%, respectively.", "sections": [{"title": "I. INTRODUCTION", "content": "A. Motivation\n\nThe Metaverse, in the realm of current and next-generation networks, is expected to revolutionize how we interact with digital environments. These networks will offer ultra-fast, low- latency, and dependable connectivity, crucial for immersive experiences [1]\u2013[3]. The Metaverse has been integrated into vehicular networks to provide immersive and interactive vehic- ular services, such as onboard information and entertainment systems where people may interact, learn, collaborate, and play [4]. As the world becomes increasingly connected, vehicles are evolving into integral components of a vast digital envi- ronment, transcending their traditional roles as mere modes of transportation. This evolution is being driven by advances in communication technologies, artificial intelligence, and edge computing, leading to the development of a dynamic and interconnected network known as the vehicular Metaverse [5]. Vehicular Metaverse has the potential to transform various aspects of the automotive industry, such as enhanced driving experiences through Augmented Reality (AR), Virtual Reality (VR), and Mixed Reality (MR), which can provide drivers with real-time information about their surroundings, including traffic updates, navigation assistance, and points of interest [6]. The vehicular Metaverse integrates advanced technologies into the automotive industry; improves the driving experience; pro- vides new forms of entertainment; and revolutionizes the way we interact with our vehicles. In vehicular Metaverses, each Vehicular Metaverse User (VMU) seamlessly connects with their Vehicular Twin (VT) to unlock immersive experiences. The VMUs continuously gather real-time data such as current location, historical trajectories, and service preferences [7], [8]. This information is used to generate VT tasks, ensuring seamless VT synchronization and enabling precise as well as dynamic interactions between the physical and virtual realms. Because the vehicles have limited local computation and storage resources to execute computation-intensive VT tasks [9], they migrate VTs into nearby Road Side Unit (RSU) to perform large-scale VT execution and synchronization tasks [10]. VT migration involves transferring a vehicle\u2019s digi- tal twin virtual representation across different computational nodes in the Metaverse architecture. This process ensures that the digital twin remains synchronized with the physical vehicle, while maintaining high performance, despite changes in network conditions [11]. However, due to vehicle mobility and limited coverage of RSUs, vehicles could be far from their VTs, increasing communication latency and reducing the Quality of Experience (QoE) of VMUs. Furthermore, the exponential growth in the number of vehicles and the massive data they generate places a significant strain on RSUs, which have limited computational and communication resources [12]. This means the resources required to execute their VT tasks may exceed the capacity of the source RSU servers in the coverage area. Besides, the source servers may malfunction or become overburdened to deliver the services required by VMUS."}, {"title": "B. Contributions", "content": "Concerning the mentioned scenario, recent studies have explored collaborative strategies among multiple RSUs to enhance resource allocation and VT migration in vehicular Metaverses [13]. For instance, a coalition game-based ap- proach has been proposed to ensure reliable VT migration, where RSUs form coalitions to jointly provide bandwidth resources, improving the QoE for VMUs [14]. Meanwhile, the study in [10] introduces a Multi-Agent Deep Reinforcement Learning (MADRL)-based Stackelberg game model, incor- porating social-awareness and queueing theory to optimize VT migration. Furthermore, a multi-attribute auction-based resource allocation mechanism has been proposed to opti- mize resource allocation during VT migration considering both price and nonmonetary attributes, such as location and reputation, to enhance the efficiency of VT migration in ve- hicular Metaverses [15]. These collaborative strategies among RSUs, utilizing game-theoretic approaches, are essential for optimizing performance and enhancing User Experience (UX) in vehicular Metaverses.\n\nThe existing VT migration and resource allocation solu- tions face significant challenges in effectively coordinating re- sources across vehicles, edge, and cloud layers due to dynamic mobility, fluctuating network conditions, and complex multi- tier architecture [16]. Those approaches overlook hierarchical integration and fail to fully utilize resources across these tiers, resulting in performance bottlenecks [17]. More specifically, cloud resources remain underutilized due to latency challenges and the lack of effective resource allocation and VT migration strategies that adequately integrate vehicle-specific factors such as location, speed, and connectivity into decision-making processes. This may result in increased delays, migration costs, and inefficient resource utilization in multi-tier Metaverse environments [18]. Many of the existing resource allocation and VT migration solutions fail to address the need for a fair and efficient incentive scheme that motivates system entities to engage actively and truthfully [19]. Additionally, the lack of real-time VT synchronization disrupts seamless connectivity between vehicles, RSUs, and virtual environments, making traditional approaches ineffective in addressing the stringent demands of the vehicular Metaverse.\n\nB. Contributions\n\nWe propose a novel multi-tier resource allocation and VT migration framework that integrates Graph Convolutional Networks (GCNs), a hierarchical Stackelberg game-based in- centive mechanism, and MADRL to enhance the Metaverse service provisioning. We utilize GCNs in the proposed solution to model spatial and temporal dependencies in multi-tier vehic- ular Metaverses, capturing interactions among vehicles, edge, and cloud servers. This GCN-based vehicle-centric solution considers vehicle-specific attributes like speed, location, and connectivity to prioritize real-time needs in resource allocation and VT migration. By analyzing spatial dependencies and communication patterns in multi-tier vehicular Metaverses, the proposed solution predicts resource demands and identifies optimal migration paths for VTs. This approach models the vehicular network as a graph, where the nodes represent vehicles, edge servers, and cloud servers, and the edges capture communication links. Our proposed approach dynamically learns and optimizes decisions to ensure seamless VT services and efficient utilization of resources. In this hierarchical struc- ture, each tier allocates resources based on real-time demands while optimizing for multiple objectives, such as migration success rate, UX, latency, and resource utilization. In addition, a game-theoretic incentive mechanism encourages cooperation among vehicles and network entities, aligning their objectives toward improving the overall system performance. To solve the joint resource allocation and VT migration optimization prob- lem, we proposed a MADRL-based approach, called Multi- Objective Multi-Agent Deep Deterministic Policy Gradient (MO-MADDPG) algorithm, which works in tandem with the GCN to optimize resource allocation and twin migration de- cisions. The MO-MADDPG framework leverages multi-agent reinforcement learning to handle the complexity of multi-tier vehicular networks, enabling agents to learn and adapt to the constantly changing environment. With the GCN providing insights into the network structure and dynamic interactions, the agents can make informed decisions regarding resource allocation and migration paths. The main contributions of this work are:\n\n\u2022 We propose a dynamic VT migration and resource allo- cation framework for the multi-tier vehicular Metaverse, integrating GCNs, a hierarchical Stackelberg game, and MADRL to enable real-time decision-making and effi- cient resource management by analyzing traffic patterns, road conditions, resources, and vehicle characteristics.\n\u2022 We introduce a hierarchical Stackelberg game-based in- centive mechanism for strategic decision-making, where entities across multiple layers (vehicle, edge, and cloud layers) set their strategies and respond optimally in the system.\n\u2022 We formulate a joint VT migration and resource alloca- tion optimization problem as a Markov Decision Process (MDP) and adopt a MO-MADDPG algorithm to solve the formulated optimization problem.\n\u2022 We evaluate the performance and scalability of the pro- posed approach using simulations and real-world experi- ments.\n\nThe remainder of this paper is organized as follows. Section II reviews related works. Section III describes the system model. Section IV formulates the optimization problem; presents the proposed MADRL-based solution. Section V discusses the performance evaluation. Section VI concludes this work."}, {"title": "II. RELATED WORKS", "content": "A. Resource Allocation in Metaverse System\n\nThe work in [20] investigated resource allocation strategies within an AR-enabled vehicular edge Metaverse, focusing on maximizing the Metaverse operator\u2019s reward by jointly optimizing the CPU frequency and transmit power of AR vehicles, the sizes of computation models, and the distri- bution of computational resources on the Metaverse server. The investigation in [21] proposed an adaptive edge resource"}, {"title": "III. SYSTEM MODEL", "content": "Our system model is shown in Fig. 1 that schematizes a joint resource allocation and VT migration framework across a three-tier network - comprising vehicle, edge, and cloud layers - providing real-time data processing, analysis, and immersive Metaverse services.\n\nWe consider a vehicular Metaverse system with different Metaverse services, such as healthcare services, augmented navigation, and immersive infotainment services. We de- fine the sets of source edge nodes (i.e., RSUs), destina- tion edge/cloud servers, and vehicles owned by VMUs as I := {1,...,J}, I := {1, ...,I}, and V := {1, ..., V}, respectively. In this scenario, Metaverse Service Providers (MSPs) own and manage the resources of both the source and destination servers. The set of MSPs is defined as P := {1, ..., P}. Each MSP provides one type of Metaverse service to VMUs with advanced AR/VR technologies, resulting in high-quality and immersive experiences, and also provides Metaverse resources when needed. Each vehicle is equipped with sensors, communication modules, and computational capabilities and has a VT representing its state, which includes sensor data, operational status, and contextual information. We consider the VTs require computational resources to process data, run applications, and communicate with other components in the Metaverse, whenever it is challenging to execute these services with local resources. The edge layers consist of RSUs located close to the vehicles to provide low- latency computation and storage. Still, edge layer resources are limited, and RSU coverage can be short, making it difficult to serve moving vehicles. When vehicles leave the coverage area of the source server or the source server lacks sufficient resources to complete the VT tasks, these tasks can be migrated to another server on the nearest RSU or cloud servers. In this process, the source server, the vehicle, and the destination servers collaborate via a hierarchical Stackelberg game-based incentive platform [29], [30], enabling optimal re- source allocation and an efficient VT migration strategy. In this regard, cloud data centers are considered to provide reliable resources and Metaverse services with seamless VT migration across multiple layers. The cloud servers are equipped with a large amount of communication, computing, and storage resources to execute and store computation-sensitive VT tasks in the vehicular Metaverse system. This can relieve resource constraints on the edge layer while maintaining reliable Meta- verse services.\n\nA. GCN-based Multi-Layer Network Modeling\n\nIn our scenario, GCN is employed to model the multi-tier vehicular network as a graph G := (V, E), where V represents nodes across three layers of the hierarchy: vehicle, edge, and cloud. Also, E represents the edges that define the commu- nication links between these layers, including vehicle-to-edge and edge-to-cloud interactions. The GCN extracts topological features and vehicle mobility patterns by processing node features through layers, generating embeddings that inform resource allocation and VT migration decisions. Each node vx is characterized by a feature vector Fx, containing parameters like CPU and bandwidth utilization, latency, migration cost, EC, and UX. The GCN processes these features using a layer- wise propagation rule, where the updated feature matrix at the (l + 1)-th layer is calculated as [31]:\n\n$H^{l+1} := \\sigma(D^{-1/2}\\bar{A}D^{-1/2}H^{(l)} W^{(l)});$\n\nwhere H(l) represents the node feature matrix at layer l, $\\bar{A} = A + I$ is the adjacency matrix with added self-loops, D corresponds to the degree matrix of $\\bar{A}$, W(l) is the trainable weight matrix, and \u03c3 denotes an activation function, such as ReLU. In this expression, I is an identity matrix of the same dimensions as the adjacency matrix A, ensuring self-loops that stabilize learning and preserve node features in GCN. The GCN generates node embeddings H(L) at the final layer:\n\n$H_{L} := \\sigma(D^{-1/2} A D^{-1/2} H^{(L-1)} W^{(L-1)}$\n\nThese embeddings H(L) serve as inputs to a MADRL framework to solve the multi-objective optimization problem by incorporating dynamic metrics such as UX $\\varepsilon$, latency L, EC $\\varepsilon$, utility U, and migration cost C into the node feature Fx, where"}, {"title": "B. Channel Allocation and Communication Model", "content": "In our proposed multi-tier architecture, we consider Orthog- onal Frequency Division Multiplexing (OFDM) for vehicular Metaverse communication [32]. The vehicles can enjoy the immersive Metaverse services through their VTs. To achieve reliable Metaverse services, it is essential to ensure seamless migration and synchronization of VT tasks while optimizing resource allocation. Our proposed resource allocation and VT migration strategy consider two scenarios: 1) vehicle-to-edge or cloud server migration, and 2) edge server-to-cloud server migration. In the first scenario, the vehicles can migrate their VTs to edge servers on RSUs or cloud servers owned by MSPs. The edge server j or the cloud server i is selected based on its resource availability and reliability, ensuring the VT task remains uninterrupted. In the second situation, if the VT is migrated to the nearest edge server j and the vehicle moves outside of its coverage area, the VT task must be relocated to another edge server or cloud server i owned by MSP p. In this case, once the edge node j receives the VT input task from the vehicle v, creates a VT task profile Yv := {Dv, \u03a9, Lmax} to migrate to the cloud servers or another edge node, where Dv is the VT data including the real-time VT states, historical interaction data, and vehicle configuration, \u03a9 is the required CPU cycles, and Lmax is the maximum tolerable delay. Let Xv,j,i \u2208 {0,1} be a binary migration decision variable and Xv,j,i \u2208 {$\\Chi^{vj}, \\Chi^{uji}, \\Chi^{vi}$}. This can be expressed as:\n\n$\\Chi^{vj}(t):= \\chi_{v,j,i}^{(t)}=1$, vehicle v migrates its $Y_v$ to the nearest edge server j\n\n$\\Chi^{uji}(t):= \\chi_{v,j,i}^{(t)}=1$, vehicle v migrates its $Y_v$ to cloud server i.\n\n$\\Chi^{vi}(t):= \\chi_{v,j,i}^{(t)}=1$, source server j migrates $Y_v$ of vehicle v to cloud server i,\n\nwhere $\\Chi^{vj} + \\Chi^{uji} + \\Chi^{vi}$ = 1. This decision variable helps vehicles and resource-providing servers to make VT migration and resource allocation decisions. The edge nodes (RSUs) or cloud servers can allocate resources, i.e., bandwidth and computing resources based on agreed-upon monetary incentives employing MDRL-supported Stackelberg game- based decision-making strategies. This hierarchical decision- making ensures optimal resource utilization while maintaining service quality and meeting stringent requirements of VT task execution. Let C, B, Yv, and Bv be the number of communication channels, the bandwidth of each channel, the VT of vehicle v \u2208 V, and the bandwidth requirements of VT task Yv, respectively. For efficient channel and bandwidth resource allocation and utilization, the following constraints must be satisfied, which indicates that each vehicle can only be associated with a single edge/cloud server at a time slot t.\n\n$\\sum_{j\\in J} \\sum_{i\\in I} \\chi_{v,j,i} \\leq 1, \\forall v\\in V, j\\in I, i \\in I.$\n\nSimilarly, the bandwidth resource allocation must satisfy the constraint presented in (4), which implies that the resource requirements (bandwidth Bv) of each VT must be less than the bandwidth of the channel allocated to it.\n\n$\\sum \\chi_{v,j,i} \\times B_{v} \\leq B.$\n\nOnce the required resources are allocated, the vehicles offload their VT task inputs to the servers on the nearest RSUS or cloud data centers. The transmission latency of vehicle v depends on the transmission rate of the channel between vehicle v and server j of MSP p, which is expressed as:\n\n$R^{v}_{j} = B \\log_2(1+\\frac{\\delta \\kappa d_{v,j}^{\\epsilon}}{\\bar{N}_0})$, where the parameters \u03b4, dv,j, \u03ba, \u03b5, and $\\bar{N}_0$ denote transmission power of vehicle v, the distance between vehicle v and server j, channel power gain, path-loss coefficient, and the Power Spectral Density (PSD) of the Additive White Gaussian Noise (AWGN), respectively. Thus, the transmission latency of VT task input of vehicle v at time t is calculated as:\n\n$L^{tr}_{v}(t) :=$\n\n$\\begin{cases}\n\\frac{D_v}{\\chi^{vj} R^{v}_{j}},\\\\\n\\frac{D_v}{\\chi^{vi} R^{v}_{tr}},\\\\\n\\end{cases}$\n\nwhere Dv and $R^{v}_{j,tr}$ are the VT task input size and the trans- mission rate between vehicle v and edge server j, respectively, and Rtr is the transmission rate between vehicle v and cloud server i. To eliminate redundancy, the vehicle-to-cloud node interaction is excluded, as it follows a formulation similar to the previously mentioned equation. The VT tasks received from vehicles are either stored and executed by the source edge node or migrated to other edge nodes / cloud servers."}, {"title": "C. Computation Model", "content": "In this multi-tier infrastructure, dynamically relocating VTs across the multi-tier network can optimize performance and resource utilization. This work aims to minimize the latency for processing VT tasks, balance the load across edge and cloud layers, and ensure real-time responsiveness and reliabil- ity for vehicular applications. Once the VT task is offloaded to the server j and the server decides to execute it with its local resources, the execution latency of the VT task can be calculated as $L^{ex}_{v}(t):=\\frac{\\chi D_v}{f_j}$, where fj is the allocated computational resource of the server j of MSP p. In another case, when the source edge node faces resource limitations or detects that a vehicle has moved out of its coverage area, it migrates the VT tasks to a destination edge node or cloud server via the physical link between the source and destination nodes. In this case, we consider transmission, queue, and re- instantiation delays. Thus, the transmission latency can be calculated as:\n\n$L^{mig}_{j,i}(t):=\\frac{\\chi^{ji}(t) D_v(t)}{R^{j,i}(t)}, \\forall v \\in V, j\\in I, i \\in I,$\n\nwhere Rij is the data transmission rate of the link between the source and destination nodes, which can be calculated as:\n\n$R_{j,i}(t) := b_{j,i} \\log_2(1+\\frac{\\delta \\kappa \\alpha}{N_0}),$\n\nwhere bj,i is the bandwidth allocated for the channel between the source and distention nodes. The parameters \u03b4, dj,i, \u03ba, \u03b5, and $N_0$ represent transmission power of source edge node j of MSP p, the distance between source node j and the i-th destination edge/cloud server, channel power gain, path-loss coefficient, and the PSD of the AWGN, respectively. After transmitting the VT task into the destination node, it might wait in a queue before it can be processed. The waiting delay can be affected by the network traffic and the processing capacity of the destination node. We consider an M/M/s with a non-preemptive priority queueing model to provide priority- based VT migration, where higher-priority VT tasks are served before lower-priority tasks, but once a task is being served, it cannot be interrupted. In this queuing model, the queuing delay calculation considers the arrival rates \u03bb, service rates \u03bc, num- ber of servers s, the number of VT tasks in queue Aq, and the prioritization of different VT tasks p. Thus, we calculate the queuing delay as: $L^{qu}_{v}(t) := \\frac{A_q}{\\rho \\mu(\\mu-\\lambda)}$. To restart the VT task processing on the new resource, the environment needs to be initialized and the VT task state needs to be loaded. Likewise, we calculate the re-instantiation delay as: $L^{id}_{v}(t):=\\frac{\\Omega(t)}{f_i(t)}$, where fi is the computation capacity of the destination node or cloud server i. The overall VT migration delay of task Yv is given as: $L_{v,j,i} := L_{tr}(t)+L_{ex}(t)+L_{mig}(t)+L_{qu}(t)+L_{id}(t)$.\n\nThis objective function aims to minimize the total latency, which is expressed as:\n\n$L := min \\sum_{v\\in V} \\sum_{j\\in J} \\sum_{i\\in I} \\chi_{v,j,i} L_{v,j,i}$\n\ns.t. C1: $\\sum_{v\\in V} \\chi_{v,j,i} \\Omega_{Y_{v}} \\leq \\Omega_j, \\Omega_i , \\forall v \\in V, j\\in I, i \\in I$\n\nC2:$\\sum_{j\\in J} \\sum_{i\\in I} \\chi_{v,j,i} = 1, \\forall v \\in V, j\\in I, i \\in I$\n\nC3: $L_{v,j,i} \\leq L_{max}, \\forall v \\in V, j \\in J, i \\in I$,\n\nIn (8), the constraint C1 states that the CPU cycles required to process the VT task must be less than the CPU cycles of the source server j and the destination node or the cloud server i; the constraint C2 enforces that the VT task can only be migrated to one destination edge/cloud server i; and the constraint C3 ensures that the total latency can not exceed the maximum latency threshold. We also evaluate the EC costs associated with the VT migration and update. We consider the VT task transmission energy $E^{vj}_{tr}$ required to transfer the task from the vehicle to the source edge node j or cloud server i, the VT task execution energy $E_x$ at the source edge node j, the VT task migration energy $E_{j,i}$ for transferring the task from the source node j to destination edge/cloud server i, and the VT task execution energy $E_i$ at the destination edge/cloud server i. The EC during the migration of the VT task from vehicle v to edge server j or cloud server i is given as:\n\n$E_v := \\sum_{j \\in J} \\frac{\\chi^{vj} P_v D_v}{B} + \\sum_{i \\in I} \\frac{\\chi^{vi} P_v D_v}{B}, \\\\\n$\n\nwhere Pv is the transmission power of vehicle v. The EC when executing the VT task at the edge server j is calculated"}, {"title": "E. User Experience Model", "content": "In this scenario, we also consider UX, which is a mea- sure of user satisfaction that is often inversely related to latency but can also be influenced by various factors such as service quality and reliability. The vehicle UX during VT task migration across different tiers of the network can be expressed as: $\\varepsilon = \\chi_{v,j,i} \\times \\sum_{n=1}^{N} A_n$, where An is the UX rating for VT task n, which can be modeled as function of latency f(L), service quality f(Q) and reliability f(R). We use a weighted sum to calculate experience rating as: $\\varepsilon_n := w_l f(L) + w_q f(Q) + w_r f(R)$, where $w_l, w_q,$ and $w_r$ are the weight parameters assigned to latency, service quality, and reliability, respectively, reflecting their relative importance. In this case, f(L) negatively impacts UX and should be a decreasing function of latency L, which can be expressed as $f(L) := a_l e^{-b_lL}$, where al and bl are parameters that control the shape of the exponential decrease. The functions f(Q) and f(R) positively impact UX and should be increasing functions of service quality Q and reliability R, which can be expressed as $f(Q) := a_q (1- e^{-b_qQ})$ and $f(R) := a_r (1- e^{-b_rR})$, respectively. The parameters aq, bq, ar, and br control the shape of the exponential increase in service quality and reliability in the user's experience rating. The objective function aims to maximize the vehicle UX as given below.\n\n$\\varepsilon (L,Q,R) := max \\sum_{v\\in V} \\sum_{j\\in J} \\sum_{i\\in I} \\chi_{v,j,i} \\varepsilon_v, \\\\$\n\ns.t. $\\varepsilon_v \\geq \\varepsilon_{min}; L \\leq L_{max}; R\\geq R_{min}; Q\\geq Q_{min}$.\n\nIn (13), the first constraint enforces that the vehicle UX must meet a minimum threshold to ensure satisfaction, while the second indicates that the latency must be less than the maxi- mum threshold. Similarly, the third and the fourth constraints ensure that the reliability and service quality must be greater than their minimum threshold values, respectively."}, {"title": "F. Utility Function", "content": "In this work, we consider the system utility that combines the utilities of individual participating nodes at each layer. We design a hierarchical Stackelberg game [34], [35] to structure the interaction between the vehicle, edge, and cloud layers, adopting a leader-follower framework where the decisions made at each layer impact not only its performance but also that of the other layers. This hierarchical Stackelberg game- based incentive structure consists of two distinct stages:\n\n1) In the first stage, the destination cloud/edge servers act as leaders and the source edge servers act as followers. Let $\\beta := {\\beta_j, \\beta_v}$ represent the unit of resource required by edge node j and vehicle v to migrate/host a VT. Similarly, let $\\theta := {\\theta_i, \\theta_j}$ represent the corresponding resource prices, where \u03b8i is the price set by the cloud server i for the resource demand Bj of the source node j, and \u03b8j is the price set by edge server j for the resource demand \u03b2 of vehicle v. The first stage of the game is formulated as follows."}, {"title": "IV. PROBLEM FORMULATION AND PROPOSED SOLUTION", "content": "Leaders\u2019 Pricing (Destination Cloud/Edge servers):\n\n$max U_i(\\beta_j, \\theta_i, \\beta_v)$\n\n$\\beta, \\theta \\geq 0$\n\ns.t. $\\sum \\beta_v + \\sum \\beta_j \\leq \\chi_i,$\n\nFollowers\u2019 Demand (Edge Servers):\n\n$max U_j(\\beta_v, \\theta_j)$\n\n$\\beta, \\theta \\geq 0$\n\ns.t.$\\\\ \\sum \\beta_v \\leq \\chi_j; lji \\geq lmin.$\n\n2) In the second stage, edge/cloud servers act as leaders by setting the prices for resources and VT migration/hosting, while vehicles-as followers-decide their resource and VT mi- gration/hosting demands in response to the prices established by the leaders. The second stage game is formulated as:\n\nLeaders\u2019 Pricing (Edge/Cloud Servers):\n\n$maxU_i(\\beta, \\theta) := maxU_i(\\beta_j, \\beta_v, \\theta_i, \\theta_i)$\n\n$\\theta>0$\n\n$\\theta>0$\n\ns.t. $\\sum \\beta + \\sum \\beta_v \\leq \\chi_i,$\n\nFollowers\u2019 Demand (Vehicles):\n\n$maxU_i(\\beta, \\theta)$\n\n$\\beta\\geq 0$\n\ns.t. $lji \\geq lmin.$\n\nThe system utility is calculated as $U := \\sum_{v=1}^{V} U_v + \\sum_{j=1}^{J} U_j + \\sum_{i=1}^{I} U_i$. For this hierarchical Stackelberg game, we applied a backward induction method [30] to identify the optimal strategy for each participant, ensuring the system reaches a stable equilibrium. In this process, each agent adjusts its decisions sequentially, predicting the optimal choices of the others, and equilibrium is attained when all agents\u2019 strategies are mutually optimal.\n\nDefinition 1: Let \u03b2* \u2208 {\u03b2, \u03b2*} and \u03b8* \u2208 {\u03b8,\u03b8} be the optimal resource demand and the corresponding optimal price [36], respectively. The point (\u03b2*,\u03b8*) is the SE if it satisfies the following conditions.\n\n$U_i(\\beta^*, \\theta^*) \\geq U_i(\\beta_j, \\theta).$\n\n$U_j(\\beta^*,\\theta^*) \\geq U_j(\\beta, \\theta_i) & U_j(\\beta^*, \\theta^*) \\geq U_j(\\beta_v, \\theta).$\n\n$U_i(\\beta^*,\\theta^*) \\geq U_i(\\beta^*, \\theta_j).$\n\nGiven the complexity of the optimization problem, determin- ing the optimal decision policy is difficult. To address this, we employ a multi-objective MADRL approach, specifically MO-MADDPG, to solve it. To confirm the existence and uniqueness of the SE in the game, we calculate the best response strategy for each player and derive the derivatives of the associated equations (16), (17), (14), and (15), with respect to \u03b2 and \u03b8 as in [37, Eqs. 16, 17].\n\nSince the objective functions are conflicting, we apply the weighted sum approach to combine them into a single optimization function that balances the conflicting factors.\n\n$\\Theta(t) := w_1 \\varepsilon + w_2 U - (w_3L + w_4E + w_5C),$\n\nwhere w1, w2, w3, w4, and w5 are the weights for UX, utility, latency, EC, and migration costs, respectively\n\nIV. PROBLEM FORMULATION AND PROPOSED SOLUTION\n\nA. Problem Formulation\n\nThe problems in our multi-tier vehicular Metaverse scenario are multifaceted, involving multi-objective optimization prob- lems and constraints. These problems demand a systematic approach to balance objectives such as latency, EC, migra- tion cost, and UX. The system leverages multiple MADRL agents distributed across the vehicle, edge, and cloud layers to collaboratively manage VT task migration and execution. These agents dynamically adapt to varying conditions, in- cluding network fluctuations, vehicular mobility, and resource availability, to ensure seamless task migration and optimal resource utilization. To achieve these objectives, we formulate the joint optimization problem based on (8), (11),(12), and (13), as follows.\n\nP:\n\n$max_{L,E,C,\\varepsilon,U} \\Theta(t)$\n\ns.t. C1: $\\chi_{v,j,i} \\in {0,1}, \\forall v \\in V, j\\in I,i \\in I$\n\nC2: $\\sum_{j=1}^{J} \\sum_{i=1}^{I} \\chi_{v,j,i} \\leq 1, \\forall v \\in V, j \\in I, i \\in I$\n\nC3 : $\\sum_{v\\in V} \\chi_{v,j,i} \\Omega_Y < \\Omega_j, \\Omega_i, \\forall v \\in V, j \\in I, i \\in I$\n\nC4 : $\\sum_{v\\in V} \\chi_{v,j,i} B_u \\leq B, \\forall v \\in V, j\\in I, i \\in I$\n\nC5: $L_{v,j,i} \\leq L_{max}, \\forall v \\in V, j\\in I, i \\in I$\n\nC6: $E_{v,j,i} \\leq E_{max}, \\forall v \\in V, j\\in I, i \\in I$\n\nC7: $C_{v,j,i} \\leq C_{max}, \\forall v \\in V, j\\in I, i \\in I$\n\nC8: $\\chi_{v,j,i} \\varepsilon_v \\geq \\varepsilon_{min}, \\forall v \\in V, j\\in I, i \\in I$\n\nC9: $R \\geq R_{min}$\n\nC10: $Q \\geq Q_{min}$,\n\nwhere C1 signifies a binary decision variable for VT task migration; C2 ensures that each vehicle can only associate with a single server at RSU or cloud server at a time; C3 and C4 affirm that the computing and bandwidth resource requirements of the VT task must be less than the allocated resources of source edge server j and cloud server i at a time t; C5, C6, C7, and C8 ensure that the latency, EC, migration cost, and UX meet the required threshold values; and C9 and C10 enforce the reliability and quality of services be greater than the minimum threshold values. The formulated optimization problem can be characterized as a Mixed-Integer Linear Programming (MILP) problem due to its complex interplay of multiple objectives, diverse constraints, and the need to optimize across a mix of discrete and continuous decision variables. As a result, solving this MILP problem with conventional techniques is quite challenging, if not impossible."}, {"title": "B. The Proposed MADRL-based Solution", "content": "1) MADRL-Based Framework: To handle the dynamics and complexity of decision-making in the vehicle-centric resource allocation and VT migration across multiple layers of the multi-tier vehicular Metaverse, we proposed a MADRL-based framework. This framework allows multiple agents at vehicle, edge, and cloud layers to make optimal decisions to balance the trade-off between latency, migration cost, EC, and UXs. The proposed MADRL-based algorithm can effectively deal with the multi-objective optimization"}]}