{"title": "asanAI: In-Browser, No-Code, Offline-First Machine Learning Toolkit", "authors": ["Norman Koch", "Siavash Ghiasvand"], "abstract": "Machine learning (ML) has become crucial in modern\nlife, with growing interest from researchers and the pub-\nlic. Despite its potential, a significant entry barrier prevents\nwidespread adoption, making it challenging for non-experts\nto understand and implement ML techniques. The increas-\ning desire to leverage ML is counterbalanced by its techni-\ncal complexity, creating a gap between potential and practi-\ncal application. This work introduces asanAI, an offline-first,\nopen-source, no-code machine learning toolkit designed for\nusers of all skill levels. It allows individuals to design, de-\nbug, train, and test ML models directly in a web browser,\neliminating the need for software installations and coding.\nThe toolkit runs on any device with a modern web browser,\nincluding smartphones, and ensures user privacy through lo-\ncal computations while utilizing WebGL for enhanced GPU\nperformance. Users can quickly experiment with neural net-\nworks and train custom models using various data sources,\nsupported by intuitive visualizations of network structures\nand data flows. asanAI simplifies the teaching of ML con-\ncepts in educational settings and is released under an open-\nsource MIT license, encouraging modifications. It also sup-\nports exporting models in industry-ready formats, empower-\ning a diverse range of users to effectively learn and apply ma-\nchine learning in their projects. The proposed toolkit is suc-\ncessfully utilized by researchers of ScaDS.AI to swiftly draft\nand test machine learning ideas, by trainers to effectively ed-\nucate enthusiasts, and by teachers to introduce contemporary\nML topics in classrooms with minimal effort and high clarity.", "sections": [{"title": "Introduction", "content": "Machine learning is now a fundamental part of our daily\nlives, powering the devices we use and enhancing the ser-\nvices we rely on. As it transforms our world, many people\nwant to understand its basic principles, potential, and lim-\nitations. Given its widespread presence, having some ba-\nsic knowledge of machine learning is increasingly benefi-\ncial. While courses on machine learning and artificial intel-\nligence are now part of many school curriculums, the rapid\nadvancements in AI outpace traditional educational tools.\nConsequently, there is an urgent need to develop educational\ntoolkits to support programs that teach ML concepts to the\nnext generation. To address this challenge and pave the way"}, {"title": "Related work", "content": "The development of no-code, browser-based machine learn-\ning toolkits such as Teachable Machine (Carney et al. 2020),\nLobe (Microsoft 2021), ml5.js (Shiffman 2020), and Ten-\nsorFlow.js (Smilkov et al. 2019) has accelerated in recent\nyears to make machine learning more accessible to non-\nexperts, aiming to enable faster experimentation and learn-\ning of machine learning concepts without requiring pro-\ngramming skills. Both Teachable Machine and Lobe, devel-\noped by Google and Microsoft respectively, allow for the\ntraining of image, audio, and other classification models. Al-\nthough their usage is straightforward, users are limited to\nthe existing use cases and models available in these tools.\nFurthermore, toolkits such as Teachable Machine require an\nactive and reliable Internet connection, as all computations\nare performed on the server side, which also raises con-\ncerns regarding their usage with sensitive data, particularly\nin schools. Other tools, such as Lobe, are only executable on\nspecific operating systems (e.g., Microsoft Windows), while\nml5.js and TensorFlow.js are JavaScript libraries for creating\nand training neural networks in the browser, although using\nthese libraries necessitates adequate programming skills.\nBrowser-based machine learning toolkits offer significant\nadvantages in accelerating the learning process of ML con-\ncepts. These platforms can provide immediate visual feed-\nback on model performance, facilitate rapid experimenta-\ntion with various architectures and hyperparameters, elim-\ninate complex setup procedures, and allow users to grasp\ncore ML concepts before delving into programming intri-\ncacies (Lane 2024). However, these tools are not without\nlimitations. Technical constraints restrict the complexity of\nmodels and the size of datasets that can be processed. Ad-\nditionally, they often lack the fine-grained control offered"}, {"title": "Design Concepts", "content": "The primary objective of this work is to develop a machine\nlearning toolkit that is accessible to a broad audience, aiming\nto (1) educate users on neural network principles, (2) lower\nentry barriers for novices, and (3) simplify the design, train-\ning, and testing processes of various machine learning mod-\nels for advanced users. Another key objective of this work\nwas prioritizing user privacy by design and to facilitate a\nseamless transition of developed models from conceptual\nstages to real-world applications and environments.\nIn response to these objectives, asanAI was conceived as\nan offline-first toolkit, operable on virtually any end-user de-\nvice. It features a no-code, browser-based graphical user in-\nterface, eliminating the need for prior programming exper-\ntise. This design choice ensures that any device with a mod-\nern internet browser can access and utilize the toolkit.\nasanAI places a strong emphasis on model explainability\nand interpretability, crucial aspects in modern ML applica-\ntions, via providing various intuitive forms of data represen-\ntation and visualizations. It also facilitates a smoother tran-\nsition to programming-based ML frameworks via automatic\ngeneration of programming codes, bridging the gap between\nno-code environments and professional ML development.\nThis holistic approach establishes asanAI as a significant\nadvancement in accessible yet powerful machine learning\ntools for education and prototyping, with a particular empha-\nsis on interactivity, interoperability, and intuitiveness.\nInteractive Interactive software with immediate re-\nsponse provides a more engaging, personalized, and efficient\nexperience compared to action button-based interfaces. This\napproach leads to higher engagement levels and better in-\nformation retention among users. To deliver such an engag-\ning experience, the asanAI user interface offers direct access\nto all configurable parameters and immediate feedback for\nevery user interaction. Furthermore, the graphical user in-\nterface is designed to be easily operable using touch screen\ninputs, in addition to standard mouse and keyboard inputs.\nThis ensures a smooth user experience on mobile devices\nlike tablets and smartphones. It also makes interactions with\nasanAI simple and intuitive for any age group, regardless of\ntheir previous experience with computers.\nInteroperability To ensure a high level of compatibility\nand enable seamless further usage of models, asanAI lever-\nages the features of widely used software and protocols. At\nevery stage of the neural network's design, training, and test-\ning, asanAI enables users to export the entire model, includ-\ning its architecture, weights, and data set. The exported data"}, {"title": "Intuitiveness", "content": "The asanAl is structured hierarchically, mir-\nroring the inherent nature of neural networks. This design\nadopts a default granularity at the layer level, allowing\nfor individual definition and adjustment of each layer. The\ngraphical user interface features a layer panel, displayed on\nthe left side , which presents all the layers con-\nstituting the model along with their corresponding config-\nurable parameters. By utilizing this interface, the necessary\ndata structures are generated, and then underlying functions\nare called to instantiate the model.\nChanges made in the graphical user interface result in an\nimmediate update to the model. It is important to note that\nonly one model can be loaded per page, as it is maintained\nas a singleton in browser memory. However, multiple tabs\nor browser windows can be opened, each containing a sep-\narate and independent model. Each layer, depending on its\ntype, has a distinct set of associated options. For example,\nthe dense layer type provides options such as whether it\ncan be trained, the inclusion of bias, the number of units, the\nactivation function, the initializers for both the kernel and\nbias, the regularizers for the kernel and bias, its visualiza-\ntion, and its data type. All these options are automatically\nselected within the GUI based on the chosen layer type.\nMoreover, asanAI incorporates diverse instant verifica-\ntion methods to aid users in their design decisions and pa-\nrameter selection. The level of this assistance can be cali-\nbrated by users to align with their expertise. To further assist\nnovice users in leveraging their custom data and to reduce\ninitial barriers to entry, asanAI automatically determines the\nmodel's shape. When this option is activated, depending on\nthe input data type, asanAI can accurately detect the net-\nwork's input shape. For instance, when dealing with images,\nthe system will automatically present options for adjusting\nthe widths and heights of images. For custom data types,\nsuch as CSV files, the input shape is determined by the num-\nber of input values. Additionally, in categorization tasks, the"}, {"title": "Usability of asanAI", "content": "The proposed toolkit is designed to prioritize usability while\nproviding users with full accessibility and flexibility to con-\nfigure the model settings according to their preferences. As\nsuch, the software is designed with sane default settings,\nwhich ensure that users can easily navigate and perform the\nnecessary functions without prior knowledge. Additionally,\nusers can customize the software settings as desired. This\ndesign principle is aimed at improving the software's ease-\nof-use, thus providing a more efficient and streamlined user\nexperience. In this way, asanAI is intended to be accessible\nto a wider audience, including those who may have limited\nto no experience or familiarity at all with machine learning\ntools.\nLayer Groups In a neural network, a layer is defined as a\ngroup of nodes (neurons) that work collaboratively at a par-\nticular depth within the network. Each layer processes in-\ncoming data and transmits the resulting output to the subse-\nquent layer. The typical architecture of a neural network in-\ncludes three primary types of layers: the input layer, hidden\nlayers, and the output layer. To enhance user understanding,\nasanAI categorizes these layers based on their functionality,\nsuch as \"Feature Detection\" or \"Classification.\" Each layer\nhas its own individual set of configuration parameters, which\nare intuitively accessible from the vertical layer panel on the\nleft side of the web GUI .\nOperational Mode Users at different skill levels have dis-\ntinct needs when it comes to software usability. To cater\nto this diversity, asanAI provides three operational modes:\nIntroductory, Beginner, and Expert. By default, asanAI\nlaunches in Beginner mode, which is suitable for users with\nbasic machine learning knowledge. This mode strikes a bal-\nance between guidance and flexibility, assisting users in their\nchoices while preventing them from making critical errors.\nIt restricts the selection of invalid layer types and automati-\ncally corrects changes that could potentially break the con-\nfigured model. This approach allows users to experiment and\nlearn without the risk of creating non-functional models.\nFor those with advanced skills and requirements, the Ex-\npert mode offers a more sophisticated experience. It provides\nusers with greater control over various aspects of model cre-\nation, including layer types, structures, input shapes, and\nother advanced features. While it offers less direct assistance\ncompared to the Beginner mode, it allows for extensive ex-\nperimentation and the ability to test various configuration\ncombinations. This freedom comes with the possibility of"}, {"title": "Live Training Progress", "content": "Once the training of a model be-\ngins, a series of live visualizations update continuously at the\nend of each batch or epoch, offering a real-time overview\nof the training progress. The Training tab presents vari-\nous configurable visualizations, including loss and accuracy\nprogress within each batch and epoch, time spent per batch,\nand a confusion matrix. The fully interactive live plots en-\nable users to closely examine the training behavior, facilitat-\ning interactive debugging of the designed model."}, {"title": "Immediate inference", "content": "At every stage after beginning the\ntraining of a model, the performance of model inference\ncan be tested using the features available on the Predict tab,\nwhich automatically adapts itself based on the input data\nshape. For image-like inputs, users can test the model perfor-\nmance using local image files, drawn figures using a mouse\npointer or touch input, or from a live webcam stream. For\nother custom inputs, users can enter a string representing\ntheir custom data structure, such as [[true, false]]."}, {"title": "Visualization", "content": "To enhance the comprehensibility and ex-\nplainability of the designed model, the asanAI GUI offers a\nrange of visualization options. These visualizations enable\nusers to gain a comprehensive understanding of the overall\nconnectivity of neurons, explore each individual layer of the\nnetwork, and monitor the training and prediction progress of\nmodels at their desired level of detail."}, {"title": "Own data import", "content": "asanAl currently offers three funda-\nmental types of data importers: CSV, Image, and Tensors.\nThe CSV importer processes a given CSV file using a spec-\nified separator. The first line is treated as the column title\nlist. Users can select which column serves as the input and\nwhich as the target set. Additionally, the data in each column\ncan be easily divided by any number (e.g., for normalization"}, {"title": "Export to Code", "content": "Following the creating of a neural net-\nwork in asanAI, the model can be translated into a Tensor-\nFlow format for Python integration. This is achieved through\nan internal process that generates Python code from the Ten-\nsorFlow.js model. The generated code automates the conver-\nsion and execution of the model, and includes annotations on\nhow to apply the model to local data.\nThe Python script automatically generated through this\nprocess dynamically constructs executable code for the Ten-\nsorFlow model. It also provides guidance on setting up a\nvirtual environment, installing dependencies, and executing\nthe script, thus streamlining the integration into standalone\nPython projects."}, {"title": "Implementation Considerations", "content": "In order to fulfil the defined goals of this work and address\ndesign concepts in the best possible yet technically viable\nway, certain considerations during the implementation were\nmade. Due to the wide usage of Ternsorflow in the com-\nmunity as well as its low-level access to data structures, to\nensure maximum interoperability and provide best compati-\nbility, asanAl is using TensorFlow.js library under the hood.\nOn every change made to the model-related elements\nof the site, the model is recompiled while retaining the\nweights (if enabled and possible, i.e., with the same shapes,\nlayer types). These processes are executed in parallel asyn-\nchronously wherever possible, so the main interface remains\nresponsive at all times. The execution speed is determined\nby the computer's hardware and capabilities.\nA function is triggered every 200 milliseconds to verify all\nfields and validate their contents. If a field does not contain\na valid value or the number is outside the specified range,\nthe field is marked in red to indicate an error. If a required\nfield is invalid or missing, training is disabled until the field\nis filled with valid values.\nThe generated Python codes are in principle strings that\nare put together depending on the internal data structure of\nthe network. This way, asanAl provides a deterministic code\ngeneration method that ensures preserving the logic of the\nexported model.\nIn the current implementation, for image data, the in-\nput shape is automatically set to [height, width,\n3], where height and width are the dimensions of\nthe input image, and 3 represents the three color chan-\nnels (red, green, and blue). For CSV data, the input shape is set\nto [nr_of_X_columns], where\nnr_of_X_columns is the number of feature columns in the input data set, and\nthe output shape is the number of output columns in the CSV.\nFor custom tensor data, the input shape is set to the shape of\nthe input tensor data, excluding the batch size dimension."}, {"title": "Conclusion and Future Works", "content": "asanAI presents a significant step towards democratizing ed-\nucation and access to machine learning. By introducing a no-\ncode, browser-based, offline-first toolkit, this work has low-\nered the barriers to entry for individuals seeking to engage\nwith ML, regardless of their technical expertise or resources.\nThe intuitive interface, offline operation, and seamless inter-\noperability of asanAI make it an ideal tool for users rang-\ning from beginners to experts, empowering them to design,\ntrain, and test ML models with ease. Furthermore, the edu-\ncational potential of asanAI is significant, as it simplifies the\nteaching of machine learning concepts in schools by remov-\ning all entry barriers, ensuring seamless compatibility with\nvirtually all devices, and functioning without a persistent in-\nternet connection. This enables educators to effectively in-\ntroduce students to the fundamentals of this rapidly evolving\nfield. With its open-source license and commitment to user\nprivacy, asanAI represents a significant contribution to the\ndemocratization of machine learning, paving the way for a\nfuture where the power of AI is accessible to all.\nTo further enhance asanAI, several future developments\nare planned, including the integration of a hyperparameter\noptimizer that automatically identifies optimal network ar-\nchitectures and hyperparameters through the Tree Parzen Es-\ntimator, a method akin to HyperOpt . Additionally, a potential improvement involves\nenabling the export of models to the ONNX (Open Neural\nNetwork Exchange) format, which would facilitate their uti-\nlization across a diverse array of machine learning frame-\nworks and technologies, extending beyond TensorFlow and\nTensorFlow.js. Furthermore, to streamline the utilization of\nthe tools developed within asanAI, we are in the process of\ncreating a library named asanai.js, which will allow users\nto seamlessly incorporate asanAI features directly into any\nweb application."}]}