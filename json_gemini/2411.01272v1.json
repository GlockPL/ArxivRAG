{"title": "Improving Energy Efficiency in Manufacturing: A Novel Expert System Shell", "authors": ["Borys Ioshchikhes", "Michael Frank", "Tresa Maria Joseph", "Matthias Weigold"], "abstract": "Expert systems are effective tools for automatically identifying energy efficiency potentials in manufacturing, thereby contributing significantly to global climate targets. These systems analyze energy data, pinpoint inefficiencies, and recommend optimizations to reduce energy consumption. Beyond systematic approaches for developing expert systems, there is a pressing need for simple and rapid software implementation solutions. Expert system shells, which facilitate the swift development and deployment of expert systems, are crucial tools in this process. They provide a template that simplifies the creation and integration of expert systems into existing manufacturing processes. This paper provides a comprehensive comparison of existing expert system shells regarding their suitability for improving energy efficiency, highlighting significant gaps and limitations. To address these deficiencies, we introduce a novel expert system shell, implemented in Jupyter Notebook, that provides a flexible and easily integrable solution for expert system development.", "sections": [{"title": "1. Introduction", "content": "As part of the European Green Deal, the European Union (EU) has committed to reducing greenhouse gas emissions by at least 55% by 2030, compared to 1990 levels [1]. The industrial sector plays a pivotal role in this context, being responsible for approximately 30% of greenhouse gas emissions, with energy use accounting for 24.2%, making it the primary source of emissions [2]. Among various decarbonization efforts, increasing the share of electricity across all sectors is a key strategy. Projections indicate a rise in electricity's share of final energy consumption from 20% currently to over 50% by 2050. In particular, the industrial sector was the largest consumer of electric energy in 2019, comprising 41.9% of the total consumption [3].\nIn response to these challenges, the revised Energy Efficiency Directive (EED) of the EU significantly raises the EU's ambition to enhance energy efficiency across various sectors, including industry. The EED gives legal standing to the fundamental EU energy policy principle of 'energy efficiency first', requiring EU countries to consider energy efficiency in all relevant policies and major investments [4]. However, despite regulatory efforts, several barriers hinder the improvement of energy efficiency in industry. These barriers include a shortage of specialized contractors, insufficient digital skills in the workforce for data analysis, and uncertainty about how to improve energy efficiency [5]. Expert systems (ESs) emerge as a potential solution to overcome these barriers. These systems can automatically identify energy efficiency potentials in manufacturing by analyzing energy data, pinpointing inefficiencies, and recommending optimizations that reduce energy consumption [6]. Although systematic approaches for developing such ESs exist [7, 8], there is an urgent need for streamlined software tools, known as expert system shells (ESSs), that provide a template that simplifies the creation of ESs [9]. Thus facilitating simple and rapid implementation.\nFollowing the introduction, section 2 elaborates the concept of ESs and describes the role that ESSs play in their development. Section 3 provides a comprehensive evaluation of existing ESSs regarding their suitability for improving energy efficiency in manufacturing. This review identifies significant gaps and limitations in their applicability, highlighting areas where current solutions fall short. To address these deficiencies, section 4 presents a novel ESS. Finally, section 5 concludes with a summary and an outlook."}, {"title": "2. Background", "content": null}, {"title": "2.1. Expert system fundamentals", "content": "ESs are computer programs designed to assist in decision-making and problem-solving in a particular domain [11]. Unlike conventional applications, ESs emulate human reasoning by representing human knowledge and utilize heuristic methods [12]. These heuristics, structured as IF-THEN rules, represent cause-and-effect relationships, with the IF part indicating causes (antecedents) and the THEN part indicating effects (consequents) [13].\nWithin the scope of improving energy efficiency in manufacturing, ESs can leverage expert knowledge and analyze data to automatically identify potentials [6]. ESs are comprised of several key components, as outlined by [13, 10] and illustrated in Fig. 1:"}, {"title": "2.2. Expert system development", "content": "To develop ESs for improving energy efficiency in manufacturing, we present a systematic approach in [8] based on the Design Science Research Methodology by [14]. The development proceeds in several steps: Initially, energy-relevant machines and information are identified, followed by the definition of energy performance indicators (EnPIs). The EnPIs are then used to set a rule base that mirrors the decision-making process of human experts. A fuzzy rule base is suitable for this purpose because it can deal with partially true or false conditions, which reflects the way human experts make decisions without precise information [15]. Within the development process, measurement data is acquired to implement algorithms or create data-driven models that automate time series analysis for calculating EnPIs. As development progresses, artifacts are generated, representing either standalone components like algorithms, models, a fuzzy rule base, or the complete ES built from these elements. The artifacts are then applied and validated. If they reveal functional deficiencies or issues with inherent properties, further refinement iterations are required."}, {"title": "2.3. Expert system tools", "content": "[10] indicate that software implementations of ESs for improving energy efficiency are highly heterogeneous, relying on a diverse range of programs and programming languages. Appropriate ES tools can generalize and formalize established concepts, thereby accelerating and simplifying the development process. Regarding development effort and application area, these tools can be categorized into the following four groups (see Fig. 2) [9]:\n1. Artificial intelligence (AI) programming languages, such as the logic-based language Prolog.\n2. General tools for knowledge representation, such as rules with forward chaining.\n3. Problem-specific tools (shells) that provide specific knowledge representations and problem-solving strategies.\n4. Problem-specific tools (shells) that possess basic application knowledge and only require supplementation with domain-specific knowledge."}, {"title": "3. Review of expert system shells", "content": "As shown in Fig. 2, the effort required to develop ESS decreases with a narrower application area of ES tools. For this reason, this paper focuses on the two latter groups. In general, ESSs can be defined as software containing a collection of functions that enable developers to build ESs. Selecting an ESS with the capabilities best suited to a particular problem can streamline system development and result in a more efficient solution [16].\nThe findings of [10] suggest that no ESSs for improving energy efficiency in manufacturing exist or have not yet been successfully established. In this section, we therefore describe criteria and evaluate their degree of fulfillment for existing ESSs. These criteria are based on [16, 17, 18] and supplemented by current development trends as described in [10]. The evaluation of ESSs is similar to other software, but additionally includes unique criteria. Unlike procedural programming, where knowledge is implicitly embedded, ESs use declarative approaches with explicit knowledge stored in structures like rules. Therefore, evaluation criteria must account for these knowledge representation schemes [16]. The evaluated ESSs were selected from the implementations reviewed in [10] and the results of an exploratory search for tools that meet or exceed group 2 in Fig. 2. Table 1 additionally features our novel Expert System Shell for Energy Efficiency (ESS4EE), which is presented in more detail in section 4. The evaluation criteria are grouped into five categories based on [16].\nThe end-user interface is decisive for the usability and acceptance of software. For ESs, the following criteria are especially relevant:\n\u2022 Result visualization [16, 17]: Built-in functions for data visualization displaying results, enabling clear graphical representation of information.\n\u2022 User interactivity [17]: Users can engage with and control the system for re-execution or making changes.\n\u2022 Documentation availability [16, 18]: Comprehensive guides and reference materials for users.\n\u2022 User training and support [16, 18]: Access to tutorials, training programs, and technical assistance for users.\nTogether with the end user interface, the development interface is the second human-centered category. It is crucial for building the ES and is divided into the following criteria:\n\u2022 Programming language popularity [16]: Widely used and highly demanded programming language according to [19].\n\u2022 Integrability [16]: Ability to connect and interact with external programs, databases, and other systems.\n\u2022 Extensibility [16, 18]: Ability to be expanded or modified to accommodate new features, knowledge representations, or functionalities.\n\u2022 User-friendly debugging [18]: Provides intuitive and powerful debugging tools to detect problems or inconsistencies in rule sets that may result in runtime errors.\n\u2022 Ease of learning [16, 18]: Measure of difficulty for a new user to understand and use the system.\nThe next two evaluation categories address technical aspects. The system interface is essential for integrating with other software and hardware components and involves the following criteria:\n\u2022 Portability [16, 18]: Ability of the ESS to operate across different platforms and environments with minimal modifications.\n\u2022 Embeddability [16, 18]: Refers to the ability to integrate the ESS into other software applications or systems.\n\u2022 Scalability [18]: Capacity to handle increasing amounts of data or more complex rules without significant performance loss.\n\u2022 Security [16]: Enables the system to be protected against unauthorized access, data breaches and vulnerabilities.\nThe second technical evaluation category focuses on core system capabilities. The ES functionality is fundamental for the classification outlined in Fig. 2 and encompasses the subsequent criteria:\n\u2022 Knowledge base modularization [18]: Capability to organize the knowledge base into separate, manageable modules or components.\n\u2022 Efficient rule handling [16]: Efficiency and manner in which the ES processes and applies rules to reach conditions.\n\u2022 Forward chaining [16]: Provides the reasoning method, which starts with known facts and applies inference rules to derive new conclusions.\n\u2022 Response to complex scenarios [16]: Capability to manage and resolve intricate multi-step scenarios.\n\u2022 Machine learning (ML) model integration [10]: Offers interfaces for integrating ML models for automated data analysis.\n\u2022 Process interface [17]: Provides interfaces for the connection of live machine and sensor data, e.g. via OPC UA or Modbus.\n\u2022 Real-time data processing [16, 18]: Ability to continuously read, process, and analyze data as it is generated, providing immediate insights with minimal latency.\n\u2022 Uncertainty handling [16, 17, 18]: Ability to deal with non-binary uncertainties in information and decision-making processes, e.g. using fuzzy logic."}, {"title": "4. Expert system shell for energy efficiency (ESS4EE)", "content": "In response to the shortcomings identified through the systematic evaluation of existing EESs in section 3, we develop the Expert System for Energy Efficiency (ESS4EE), which is available in a GitHub repository [24]. Its implementation is carried out within Jupyter Notebook, a web application for the creation and exchange of notebooks, code, and data [25]. The code used in our shell is written in Python. The ESS4EE is structured around a modular software architecture, as illustrated in Fig. 3, which allows for flexibility in adapting to various manufacturing environments, scalability to handle different industrial scenarios of varying complexity and integration with external systems.\nIn its default state, the ESS4EE can be assigned to group 3 according to the classification in Fig. 2, as it provides specific knowledge representations and problem-solving strategies. For example, the ESS4EE includes predefined components for EnPI definition, fuzzy inference system (for handling uncertainties with fuzzy logic), and ML model integration. These features enable the system to address energy data analysis and optimization tasks in manufacturing without requiring users to build the logic or representation structures from scratch. However, the ESS4EE can furthermore be associated with group 4 by adding predefined application knowledge, such as standardized EnPIs or industry-specific energy information.\nThe system architecture consists of several key components, each playing a distinct role in ensuring efficient knowledge management, data processing, and decision-making. The KnowledgeBase contains persistent expert knowledge provided by the knowledge engineer. This knowledge includes detailed descriptions of machinery, relevant data points, energy-related information, EnPIs, a rule base, and example datasets. Additionally, the KnowledgeBase can be modified and enriched with temporary knowledge related to specific use cases, which can be input by the user through the UserInterface. Measurement and process data from the production environment can be accessed via the Connectors provided by the ProcessInterface. This enables not only historical data but also live data from power meters and programmable logic controllers to be analyzed. Support functions are provided within the Helpers component to facilitate the integration of algorithms and ML models, providing advanced analytics capabilities. This component also handles the assignment of addresses to data points and includes visualization functions. The InferenceEngine is responsible for applying the fuzzy inference system. It features membership functions for input and output variables, an InferenceMechanism, and a machine-readable FuzzyRuleBase. Together, these elements enable the system to process data"}, {"title": "5. Summary and outlook", "content": "This paper presents a comprehensive evaluation of tools for developing ESs with a focus on improving energy efficiency in manufacturing. Through this evaluation, we identified several shortcomings in existing solutions, particularly concerning ES functionalities. In response, we developed our novel ESS4EE. Compared to currently available solutions, the ESS4EE offers tailored functionalities specifically designed to optimize energy efficiency in manufacturing environments. Key features include its process interface, which enables data access to the production environment, real-time data processing, and the ability to manage uncertainties through fuzzy logic. Moreover, the ESS4EE is the only tool to offer a structured framework that supports the systematic development of ESs within this domain. It includes problem-specific components such as templates for machine descriptions and the definition of EnPIs, which significantly streamline and accelerate the software development process. However, despite its improvements, the ESS4EE lacks the comprehensive documentation, user training, and support that established tools offer. Additionally, there is no community of users outside the development team to provide assistance or contribute to the tool's growth. Addressing these limitations will be critical to expanding the adoption of the ESS4EE in broader industrial context.\nThe outlook for the ESS4EE includes several key steps for further development. In the near term, we plan to develop multiple ESs across diverse industrial use cases to demonstrate the ESS4EE's adaptability and effectiveness. These implementations will be accompanied by user studies to assess the system's usability and identify areas for improvement. Furthermore, we aim to explore the integration of large language models (LLMs) to assist with knowledge acquisition and formalization within the ES. By leveraging LLMs, we can"}]}