{"title": "Optimization of Multi-Agent Flying Sidekick Traveling Salesman Problem over Road Networks", "authors": ["Ruixiao Yang", "Chuchu Fan"], "abstract": "The mixed truck-drone delivery systems have attracted increasing attention for last-mile logistics, but real-world complexities demand a shift from single-agent, fully connected graph models to multi-agent systems operating on actual road networks. We introduce the multi-agent flying sidekick traveling salesman problem (MA-FSTSP) on road networks, extending the single truck-drone model to multiple trucks, each carrying multiple drones while considering full road networks for truck restrictions and flexible drone routes. We propose a mixed-integer linear programming model and an efficient three-phase heuristic algorithm for this NP-hard problem. Our approach decomposes MA-FSTSP into manageable subproblems of one truck with multiple drones. Then, it computes the routes for trucks without drones in subproblems, which are used in the final phase as heuristics to help optimize drone and truck routes simultaneously. Extensive numerical experiments on Manhattan and Boston road networks demonstrate our algorithm's superior effectiveness and efficiency, significantly outperforming both column generation and variable neighborhood search baselines in solution quality and computation time. Notably, our approach scales to more than 300 customers within a 5-minute time limit, showcasing its potential for large-scale, real-world logistics applications.", "sections": [{"title": "1. Introduction", "content": "In the rapidly evolving landscape of aerial robotics, specifically drones, the reduction they can contribute to road traffic through aerial package delivery has drawn much attention. However, due to their limited battery capacity and carrying ability, drones are usually considered to accomplish tasks with the help of a ground vehicle. A common scenario is a delivery system where trucks carry drones to send packages to customers cooperatively. The Flying Sidekick Traveling Salesman Problem (FSTSP) [1], which is a variant of the famous TSP problem, models the problem of a drone working in tandem with a delivery truck to visit every customer. The problem captures the difficulty of synchronization between the truck and the drone but oversimplifies the path-finding problem between customers for the truck-drone system by an edge in the graph.\nIn this paper, to better capture the truck-drone delivery problem in the real world, we consider a multi-agent version of FSTSP over a road network, termed Multi-Agent FSTSP (MA-FSTSP). The FSTSP considers the TSP problem of one truck loaded with one drone on a fully connected graph, which only consists of one node to depart and to return called depot and a set of nodes to visit called customers. The two differences in MA-FSTSP setting from FSTSP are: (1) we consider multiple trucks carrying multiple drones instead of one truck with a single drone; (2) we consider the problem on real-world road maps which contain (many) nodes other than depots and customers and hence the graph is no longer fully connected. Those nodes can represent any location or address on the map. In MA-FSTSP, multiple truck groups start from different depots to visit a given set of customers. Each truck group consists of one truck and a fleet of drones, in which the drones are loaded on the truck. Similar to TSP, in MA-FSTSP, each customer must be visited exactly once by one member (a truck or a drone) in one of the truck groups. In addition, the trucks and drones must synchronize at the same node on the graph for the takeoff and land actions. While the trucks are constrained to move on the roads in the road network, the drones can fly freely between any pair of nodes. To model the limited battery capacity and carrying ability in practice, each drone is restricted to a maximum travel distance and a maximum number of customers it can serve before returning to the truck after each separation. Additionally, we only allow drones to land on the same truck from which they take off. Given this setup, the MA-FSTSP asks for the route that minimizes the total time for all truck-drone groups to finish the delivery job (i.e., all customers are visited.) It is worth noting that MA-FSTSP is also NP-hard as the TSP can be reduced to the MA-FSTSP by setting the number of truck groups to 1 and the number of drones in each group to 0.\nLiterature on multi-agent FSTSP and cooperative Multi-Agent Path Finding (MAPF) on road networks is scarce. To the best of our knowledge, only the methods in Lin et al. [2] and Gao et al. [3] are designed for FSTSP variants on graphs of road networks and solved them through variants of the Variable Neighborhood Search (VNS) method. The MAPF community, on the other hand, has not yet explored the collaboration between different agents well. Existing works [4, 5, 6] adapted the Conflict-Based Search (CBS) method for the cooperation. However, this search-based method suffers from scalability issues unless a decoupling mechanism is applied to divide the problem into smaller subproblems to solve it state-wise.\nIn this paper, we propose a novel 3-phase method (see Figure 1) for solving MA-FSTSP that can achieve state-of- the-art performance and good scalability. In the first phase, customers are assigned to the truck group starting from their closest depots under a set-based distance metric. In the second phase, we extend a TSP to a Set TSP by grouping the road nodes within a given distance to the customers to form a set. The Set TSP asks for a route that visits each set exactly once instead of the requirement of visiting each customer exactly once, which is designed to approximate the usage of drones. We adopt the method from Marcucci et al. [7] to solve the Set TSP via a Mixed-Integer Linear Programming (MILP). Finally, we plan for trucks and drones simultaneously to find the optimal routes that visit the customers in the same order as the Set TSP routes found in phase 2.\nWe evaluate our approach using real-world road networks from Manhattan and Boston, comparing it against established baselines from recent literature, including the work of Gao et al. [3] and a Hill Climbing combined Variable"}, {"title": "2. Related work", "content": "In practice, especially in drone-assisted delivery tasks, trucks usually start from and end at the same depot, framing the problem as a Traveling Salesman Problem (TSP) or a Vehicle Routing Problem (VRP). This context is crucial as it reflects real-world logistical constraints and optimization needs. The truck-drone delivery system in the delivery problem was first studied by Murray and Chu [1], who introduced the Flying Sidekick Traveling Salesman Problem (FSTSP). Their work laid the foundation for optimizing combined truck and drone deliveries, sparking numerous variants of this problem.\nOne significant research direction has been the generalization of the FS-TSP to multi-agent versions. These multi- agent variants can be classified into three main categories: (1) one truck carrying multiple drones, which expands the drone capacity of a single truck, potentially increasing delivery efficiency (Mbiadou Saleu et al. [8], Karak and Abdelghany [9], Murray and Raj [10], Cavani et al. [11], Salama and Srinivas [12], Bruni et al. [13]); (2) multiple trucks with one drone each, which focuses on the task allocation among truck-drone systems to consider a wider geo- graphical coverage (Sacramento et al. [14], Chiang et al. [15], Lu et al. [16], Luo et al. [17]); (3) multiple trucks with multiple drones each, which optimizes the previous two models simultaneously (Kitjacharoenchai et al. [18], Tamke and Buscher [19], Chen et al. [20], Gao et al. [21]). Each variant builds upon the original FSTSP model, addressing different practical scenarios and optimization challenges in truck-drone delivery systems. Given the computational complexity of solving these multi-agent FSTSP variants exactly using mixed-integer linear programming (MILP), researchers have developed many heuristics and metaheuristics to approximate optimal solutions efficiently. For the single-truck, multi-drone variant, approaches include the Clark and Wright heuristic Karak and Abdelghany [9], MILP models combined with three-phased heuristics Murray and Raj [10], and a two-phase method integrating simulated annealing (SA) and variable neighborhood search (VNS) Salama and Srinivas [12]. In the multi-truck, single-drone category, methods range from adaptive large neighborhood search Sacramento et al. [14] and genetic algorithms Chi- ang et al. [15] to evolutionary algorithms with specialized local search operators Lu et al. [16] and iterated local search Luo et al. [17]. For the most complex variant with multiple trucks and multiple drones, researchers have employed adaptive insertion algorithms Kitjacharoenchai et al. [18], adaptive large neighborhood search heuristics Chen et al. [20], and column generation methods Gao et al. [21]. This diversity of approaches underscores both the challenge of solving these problems and the ongoing efforts to develop efficient approximation methods that balance solution quality with computational tractability.\nWhile the multi-agent variants significantly expanded the scope of the FSTSP, most early models shared a common limitation in their representation of the operational environment. These models typically consider a fully connected graph consisting of only customers and depots. However, this simplification does not adequately model the complexity of real-world environments, particularly road networks, which can significantly impact routing decisions and overall system efficiency. Recognizing this limitation, Carlsson and Song [22] made a significant advancement by proposing that drones should be able to take off from any node in the 2D plain, not just depots and customer nodes. Such an extension enlarges the solution space too much, as the truck cannot move freely in practice. Li et al. [23] restricted the flexibility by allowing drones to synchronize only with trucks on arcs between customers rather than arbitrary locations. Both works must deal with the nonlinear term introduced with the continuous synchronization location space and suffer from the high computational cost. Recent works present a more efficient model. Lin et al. [2] and Gao et al. [3] extended the problem to incorporate actual road networks, allowing drones to take off and land at arbitrary"}, {"title": "3. Problem description", "content": "The MA-FSTSP requires finding the fastest tours for each truck group to visit a set of customers, ensuring each customer is visited exactly once while meeting the following constraints: (1) trucks can only travel on roads, whereas drones can fly directly between locations after departing from the truck; (2) drones have a limited flight distance due to battery capacity and must return to their truck; (3) drones can be dispatched from and collected by the same truck at different locations; (4) takeoff and landing actions occur only at road endpoints for simplicity; (5) drones can visit only one customer before returning to the truck due to limited payload capacity.\nFormally, MA-FSTSP considers shared road network represented as a strongly connected directed graph\u00b9 $G = (V, E)$, where $V$ is the set of vertices and $E$ is the set of edges. Each pair of vertices $u, v \u2208 V$ is associated with a distance $d(u, v) \u2265 0$, which may represent the Euclidean distance on a planar map or geometric distance on Earth. Let $P = {P_1, P_2,\u2026, P_m} \u2286 V$ be the set of $m$ depots for each truck group to start and end their tours, and $C = {C_1, C_2,\uff65\uff65\uff65, C_n} \u2286 V$ be the set of $n$ customers to visit. A customer $c \u2208 C$ can be visited by any agent starting from any depot $p \u2208 P$. Furthermore, we assume $C \u2229 P = \u00d8$.\nWe plan for a fleet of agents comprising $m$ truck groups starting from different depots, denoted as $T_p$, for each $p \u2208 P$. Each truck group consists of a truck carrying $k$ drones, denoted as $D_p$. We assume that trucks move along the edges at a constant speed $s_{tr} > 0$ and drones fly at a constant speed $s_{dr} > 0$ after being dispatched from the truck."}, {"title": "4. Mathematical formulation", "content": "According to the problem defined in Sec. 3, this section proposes the MILP model for MA-FSTSP.\n4.1. Notations\nBefore formulating the model, we summarize the parameters and decision variables in Tab. 1 and Tab. 2.\nDrones can take off from and land on their truck at any $v \u2208 V$ and can fly directly between any pair of vertices, independent of the road network. Once dispatched, the drone is limited to serve one customer due to the loading capacity and is limited to fly at most $r$ due to the battery capacity before landing back on the truck.\nNext, we formally define the truck route and the drone route that constitute a solution to the MA-FSTSP.\nDefinition 1 (Truck Route). We call a sequence of vertices $(v_0, v_1,\u06f0\u06f0\u06f0, v_l), v_j \u2208 V, j \u2208 {0, 1,\u2026\u2026,l}$, a truck route if $v_0 = v_l = p \u2208 P$, and $(v_j, v_{j+1}) \u2208 &, \u2200 j \u2208 {0, 1,\u2026\u2026 ,l \u2212 1}$.\nIntuitively, a truck route forms a cycle in the graph, starting and ending at a specific depot, as illustrated in Fig. 2(a). Before discussing drone routes, we define a drone delivery tuple to represent these routes effectively.\nDefinition 2 (Drone Delivery Tuple). Given a truck route $(v_0, v_1,\u00b7\u00b7\u00b7, v_\u03b9)$, a drone delivery tuple $(x, c, y)$ describes a delivery task that a drone carried by the truck takes off from $v_x$, visits customer $c$, and lands on the truck at $v_y$.\nDefinition 3 (Drone Route). A drone route is represented by a tuple $((v_0, v_1, \u00b7\u00b7\u00b7, v_l), {(x_1, c_1, y_1), (x_2, c_2, y_2), \u00b7\u00b7\u00b7 })$, where $(v_0, v_1,\u2026\u2026, v_l)$ is the truck route that the drone accompanies, and ${(x_1, c_1, y_1), (x_2, c_2, y_2), \u2026\u2026 }$ comprises drone delivery tuples of the delivery tasks executed by drones.\nFig. 2(b) shows an example of the drone route. We define the truck group route via the truck route and drone routes.\nDefinition 4 (Truck Group Route). Given truck group $T_p$ starting from depot $p$, the route is represented as a $(k + 1)$-tuple $\u03c0_p$, where $\u03c0_p[0] = (v_0, v_1,\u2026, v_l)$ is a truck route that $v_0 = v_l = p_i$, $\u03c0_p[j] = {(x_1^{(j)}, c_1^{(j)}, y_1^{(j)}), (x_2^{(j)}, c_2^{(j)}, y_2^{(j)}, \u2026\u2026\u2026 }$, $j = 1,2,... k$, are $k$ sets of drone delivery tuples such that $(\u03c0_p[0], \u03c0_p[j])$, $j = 1,2,\u2026\u2026k$, are all drone routes.\nThe total cost of a truck group route $\u03c0_p$, denoted as $cost(\u03c0_p)$, is defined as the minimum time needed for the truck group $T_p$ to address all drone delivery tasks and return to the depot $p$. Now, we formally state the MA-FSTSP.\nProblem 1 (MA-FSTSP). Given a strongly connected directed graph $G = (V,E)$, and $m$ truck groups starting from different depots in set $P \u2286 V$ to visit a set of $n$ customers $C \u2286 V$, find a set of $m$ truck group routes ${\u03c0_p}_{p\u2208P}$, one for each truck group, to visit every customer $c \u2208 C$ exactly once that minimizes the total cost $\u2211_{p\u2208P} cost(\u03c0_p)$.\n4.2. Mathematical model\nmin\n$\u2211_{p\u2208P} T_{p,p,T}$\n(1a)\ns.t.\n$\u2211_{p\u2208P} a_{p,c} = 1, \u2200 c \u2208 C,$\n(1b)\n$\u2211_{u\u2208V} \u2211_{c\u2208C} a_{p,c} \u2265 \u2211_{c\u2208C} \u03b2_c, \u2200 p \u2208 P,$\n(1c)\n$\u2211_{u,v\u2208V} e_{p,u,v,t} \u2264 1, \u2200 p \u2208 P, t \u2264 T,$\n(1d)\n$\u2211_{v\u2208V} e_{p,u,v,t+1} \u2264 \u2211_{v\u2208V} e_{p,u,v,t}, \u2200 p \u2208 P, t \u2264 T,$\n(1e)\n$\u2211_{u\u2208V} \u2211_{t\u2264T} e_{p,u,v,t} = \u2211_{u\u2208V} \u2211_{t\u2264T} e_{p,v,u,t+1}, \u2200 p \u2208 P, v \u2208 V,$\n(1f)\n$\u2211_{v\u2208V} \u2211_{t\u2264T} e_{p,u,v,t} = \u2211_{v\u2208V} \u2211_{t\u2264T} e_{p,v,u,t+1}, \u2200 p \u2208 P, v \u2208 V, t \u2264 T \u2013 1,$\n(1g)\n$\u2211_{u\u2208V} \u2211_{t\u2264T} x_{u,c,t} = \u03b2_c, \u2200 c \u2208 C,$\n(1h)\n$\u2211_{u\u2208V} \u2211_{t\u2264T} y_{u,c,t} = \u03b2_c, \u2200 c \u2208 C,$\n(1i)\n$\u2211_{t\u2264T} x_{u,c,t} \u2265 \u2211_{t\u2264T} y_{u,c,t}, \u2200 c \u2208 C, t \u2264 T,$\n(1j)\n$\u2211_{u\u2208V} \u2211_{t\u2264T} x_{u,c,t} d(u, c) + y_{u,c,t} \u00b7 d(c, u) \u2264 r, \u2200 c \u2208 C,$\n(1k)\n$\u2211_{t<T} e_{p,c,u,t} - e_{p,c,c,t} \u2265 1 \u2212 \u03b2_c \u2013 (1 \u2212 a_{p,c}) \u2022 M, \u2200 p \u2208 P, c \u2208 C,$\n(1l)\n$D_p \u2211_{v\u2208V} e_{p,v,u,t} \u2265 \u2211_{c\u2208C} x_{v,c,t} a_{p,c}, \u2200 p \u2208 P, v \u2208 V, t \u2264 T,$\n(1m)\n$D_p \u2211_{v\u2208V} e_{p,u,v,t} = \u2211_{c\u2208C} y_{v,c,t} a_{p,c}, \u2200 p \u2208 P, v \u2208 V, t \u2264 T,$\n(1n)\n$\u2211_{v\u2208V} \u2211_{t\u2264T} |C|\u00b7 e_{p,u,v,t} - \u2211_{v\u2208V} \u2211_{t\u2264T} |C|\u00b7 e_{p,u,u,t} \u2265 \u2211_{c\u2208C} x_{u,c,t} a_{p,c} + y_{u,c,t} a_{p,c}, \u2200 p \u2208 P, u \u2208 V,$\n(1o)\n$l_{p,1} = |D_p| - \u2211_{c\u2208C} x_{p,c,1} \u00b7 a_{p,c}, \u2200 p \u2208 P,$\n(1p)\n$l_{p,T} = |D_p|, \u2200 p \u2208 P,$\n(1q)\n$l_{p,t} \u2264 |D_p|, \u2200 p \u2208 P, t \u2264 T,$\n(1r)\n$l_{p,t} - l_{p,t-1} = \u2211_{u\u2208V} \u2211_{c\u2208C} y_{u,c,t} - \u2211_{u\u2208V} \u2211_{c\u2208C} x_{u,c,t} , \u2200 p \u2208 P,2 \u2264 t \u2264T ,$\n(1s)\n$\u03c4_{p,u,t} \u2264 \u03c4_{p,u,t+1}, \u2200 p \u2208 P, u \u2208 V, t \u2264 T \u2013 1,$\n(1t)\n$\u03c4_{p,u,t} \u2265 \u03c4_{p,v,t-1} + e_{p,v,u,t} \u2022 d^{tr} (v, u)/s_{tr} \u2013 (1 \u2013 e_{p,v,u,t}) \u00b7 M, \u2200 p \u2208 P, u, v \u2208 V, 2 \u2264 t \u2264 T,$\n(1u)\n$\u03c4_{p,u,t} \u2265 \u03c4_{p,v,s} + x_{v,c,s+1} \u00b7 a_{p,c} \u00b7 d(v, c)/s_{dr} + y_{u,c,t}\u00b7 a_{p,c} \u2022 d(c, u)/s_{dr} \u2212 (2 \u2212 x_{v,c,s+1} - y_{u,c,t}). \u041c, \u2200 p \u2208 P, u, v \u2208 V, c \u2208 C, s < t \u2264 T.$\n(1v)\nThe objective function 1a minimizes the overall time cost to visit all customers and return to the depots. Constraint 1b assigns each customer to exactly one truck group. Constraints 1c-1g ensure the truck route of each truck group is a valid cycle as people did in TSP. Constraints 1h-1i select the take-off and land vertices for customers drones visit. Constraint 1j ensures the correct drone take-off and landing order. Constraint 1k limits the flying distance of drones for each customer visit. Constraint 1l ensures trucks to visit their assigned customers. Constraints 1m and 1n synchronize the truck and drones at the selected take-off and land vertices. Constraints 1p-1s track and constrain the number of available drones throughout the route. Constraint 1t maintains the time consistency along the route. Constraint 1u accounts for the truck travel time, while constraint 1v accounts for the drone travel time.\nThe product term of binary variables $x_{u,c,t}a_{p,c}$ can be linearized as a new binary variable $z_{u,c,t}$ which satisfies $z_{u,c,t}\u2265 x_{u,c,t} + a_{p,c} - 1$, $z_{u,c,t} \u2264 x_{u,c,t}$,, and $z_{u,c,t} \u2264 a_{p,c}$. The term $y_{u,c,t} a_{p,c}$ can be linearized similarly, so the model is a MILP. For readability, the product terms are kept in the constraint formulations."}, {"title": "5. Methodology", "content": "Algorithm 1 Framework to solve MA-FSTSP\nInput: Road network $G$, customer set $C$, depot $P$, truck speed $s_{tr}$, drone speed $s_{dr}$, drone endurance $r$, pairwise distance $d$\n1: Initialize solution SOLN as empty set\n2: for (u, v) \u2208 C X C do\n3: $d(u, v)$ - ShortestPathLength(u, v; G)\n4: end for\n5: Assign customers {$C_i$}\n$P$\nPartition(C, P; $d_{tr}, d$)\n6: for i \u2208 {1,2,..., m} do\n7:\n$S_i \u2190 {{$n \u2208 V(G) : w(n, c) <r/2} : c \u2208 C_i} \u222a {{p_i}}$ \u25ba For each customer c collect nearby vertices\n8:\nORDER \u2190 SetTSP(S; $d_{tr}, d; s_{tr}, s_{dr}$)\n9:\nSOLN[i] \u2190 GetRoute($C_i, p_i$; ORDER; $d_{tr}, d; s_{tr}, s_{dr}$)\n10: end for\n11: return SOLN\nWe propose a three-phase algorithm to solve MA-FSTSP, as shown in Alg. 1. In phase 1, the problem is decom- posed to $m$ subproblems (recall that $m$ is the number of depots) of a single truck carrying multiple drones to visit customers on road networks by allocating customers to truck groups via set-based partition algorithms. Next, in phase 2, a set TSP heuristic is applied to determine the visiting order of customers for each truck group. Finally, in phase 3, a truck-drone route is computed given the restriction of customers' visiting orders. The pseudocode for the proposed algorithm is shown in Alg. 1. Line 1~4 is the preparation for data. Line 5 corresponds to phase 1. Line 7 computes the set for each customer, and lines 8~9 correspond to phases 2 and 3, respectively. Methods of phase 1~3 are introduced in Sec. 5.1, Fig. 5.2, and Sec. 5.3, respectively. An acceleration method for Set-TSP is introduced in Sec. 5.4. The computational complexity analysis of each phase is detailed in Appendix A."}, {"title": "5.1. Phase 1: Set-based partition algorithms", "content": "The first phase of our proposed algorithm focuses on efficiently assigning customers to truck groups. This section introduces a novel set-based extension approach that addresses the limitations of existing assignment methods for truck-drone delivery systems.\nCommonly used strategies for customer assignment in multi-agent systems include the nearest-neighbor algo- rithm [24, 25, 26] and the minimum spanning tree partition algorithm [27]. However, these methods often fall short in practical scenarios where geometric proximity does not accurately reflect travel time or cost. For example, two geographically close vertices in practice might be distantly connected in road networks, commonly seen in practical scenarios such as places around highways and rivers, one-way roads, and traffic bottlenecks. In these cases, neither geometric nor road map distance accurately estimates the time required for a truck group to travel between customers.\nTo address these limitations, we propose a set-based distance metric that more accurately approximates the point- wise distance for truck groups. This approach extends the nearest-neighbor and minimum spanning tree partition algorithms to their set versions.\nInspired by Marcucci et al. [7], we define a set of neighboring vertices for each customer $c \u2208 C$ as follows:\n$S_c(\u03b8) := {n \u2208 V(G) : d(n, c) \u2264 \u03b8}$ (2)\nwhere $\u03b8$ is a distance parameter, and $d(n, c)$ represents the distance between vertex $n$ and customer $c$. It is worth noting that if $\u03b8 \u2264 r$, each vertex in $S_c$ serves as a valid takeoff or landing point for a drone visiting customer $c$. Using this set, we define the distance from set $S_c(\u03b8)$ to set $S_{c'}(\u03b8)$ as\n$d^{set}(S_c(\u03b8), S_{c'}(\u03b8)) := min_{\u03bd \u2208 S_c(\u03b8), \u03bd' \u2208 S_{c'}(\u03b8)} {d(c, \u03bd)/s_{dr} + d^{tr}(\u03bd, \u03bd')/s_{tr} + d(\u03bd', c')/s_{dr}} \u00b7 s_{tr},$ (3)\nwhere $d^{tr}$ is the shortest path length for the truck, and $s_{dr}$ and $s_{tr}$ are the speeds of the drone and truck, respectively. This distance metric is normalized based on the time required for a truck group to visit customer $c'$ after visiting customer $c$. Since the vertex $p$ can also be viewed as a set $S_p(\u03b8+)$ containing $p$ only, we extend the domain of $S_c$ from $c \u2208 C$ to $c \u2208 C \u222a P$. Without ambiguity, we omit $\u03b8$ and abbreviate the distance as $d^{set}(c, c')$ for $c, c'\u2208 C \u222a P$.\nAlgorithm 2 Pseudocode for Set-Based Paritition\nInput: Road network $G$, customer set $C$, depot $P$, truck speed $s_{tr}$, drone speed $s_{dr}$, radius $\u03b8$, pairwise distance $d$\n1: for $c \u2208 C$ do\n2:\n$S_c(\u03b8) \u2190 {\u03bd \u2208 V(G) : d(v, c) < \u03b8}$\n3: end for\n4: for $p \u2208 P$ do\n5: $S_p \u2190 {p}$\n6: end for\n7: Construct fully connected graph $G'(C \u222a P)$ using edge weight $w(c, c') = d^{set}(c, c')$ \u25ba Using Eq. 3\n8: ${C_p}_{p\u2208P} \u2190 NearestNeighbor(P, C) or MinimumSpanningTreePartition(P, C)\n9: return assignment ${C_p}_{p\u2208P}$\nThe pseudocode for this assignment is given in Alg. 2. We compute the pairwise $d^{set}$ (line 1-6) to construct a fully connected graph (line 7), on which we run the NN or MST partition algorithm to get the assignment (line 8).\nNext, each group finds their own shortest tours in phase 2-3."}, {"title": "5.2. Phase 2: Set traveling salesman problem heuristic", "content": "Following the same insight in Sec. 5.1, we extend the TSP heuristic to a set version as well to take the usage of drones into account, which is formally stated as:\nProblem 2 (Set TSP). Given n location sets $V_1, V_2,\u2026, V_n$ and the traveling costs between each pair of locations, find the route with the lowest total cost that visits each location set exactly once and returns to the starting location set. A visit to a location set is defined as consecutively visiting one or more locations within that set."}, {"title": "5.3. Phase 3: Decode solution from heuristic", "content": "Even when the customers' visiting order is given, determining the optimal route for the truck group is an NP-hard problem. To approximate the optimal solution in polynomial time, we only consider the action of dispatching all drones simultaneously. Intuitively, when using multiple drones outperforms using one drone, the customers are close to each other within O(r) distance, which means that the assumption does not sacrifice the performance a lot if r is small.\nBased on the assumption above, dynamic programming can finish the decoding procedure within a polynomial time. Given visiting order $O_i$ for truck group $T_i$, we first define TIME(u, v; s, t) to be the minimum time needed for the truck group to visit customers {$O_s, O_{s+1},\u2026,O_{s+t-1}$} with $t$ drones, which are dispatched together from u, and the last one is collected at vertex v. The initial state TIME(u, v; s, 1) is the time for the truck with one drone to visit the customer $O_i$ starting from u to v, i.e.,\nTIME(u, v; s, 1) = $ { d(u,O_s)+d(O_s,v) \\\\ {Str} \trm{if} max( d(u,O_s)+d(O_s,v) \\\\ {Sdr} ,d(u,v)) ,d(u,v) > r ; \\\\ max(duO_s)+d(O_s,v) ,d(u,v) ) \trm{otherwise.} (8)$.\nIn the first case, the drone cannot finish the delivery task due to the energy limit given the position of u, v, and $O_s$. We set TIME(u, v; s, 1) as the time needed for the truck to finish the delivery task. In the second case, where the drone can finish the delivery task, we set TIME(u, v; s, 1) as the minimum time in which the truck can move from u to v along the road network and the drone can fly from u to $O_i[s]$ and then to v. For $t \u2265 2$, if the t-th drone can finish the delivery task, i.e., $d(u, O_{s+t\u22121}) + d(O_{s+t\u22121}, v) \u2264 r$, we compute the minimum time needed to finish the t delivery tasks by identifying"}, {"title": "5.4. Accelerate Set-TSP", "content": "The Set-TSP proposed in the second phase is solved |P| times in the problem, making its acceleration crucial for computational efficiency. We present acceleration strategies that significantly speed up the computation with minimal impact on solution quality."}, {"title": "6. Experiments and analysis", "content": "In this section, we report experiments to validate our method. In Sec. 6.1, we show the effectiveness and scalability by comparing our method with two baselines: a column generation-based method [3] and a hill-climbing algorithm. We give the empirical optimality gap an upper bound by comparing it with a lower bound. In Sec. 6.2, we explore the scalability of our approach by varying the problem size in different ways. We validate the set extension approach and the acceleration strategies in Sec. 6.3 and Sec. 6.4. In Sec. 6.5, we do the sensitivity analysis to explore the influence of drone speed, distance limit for drones, and number of drones.\nAll experiments are performed on a server running on Ubuntu 20.04.6 LTS with an AMD Ryzen Threadripper 3990X 64-Core Processor. The MILP solver was Gurobi 10.0.2 [29]. The proposed models and algorithms are implemented in Python. The time limit for all test instances is set to 7200 seconds.\n6.1. Comparison against baselines"}, {"title": "6.2. Scalability analysis", "content": "In this section, we evaluate the scalability of our proposed methods. For this analysis, we employ the set-NN algorithm in Phase 1 and the accelerated set-TSP algorithm in Phase 2. Our scalability tests involve varying two key parameters: the number of customers |C| and the number of depots (truck groups) |P|. We conduct three distinct experiments: (1) fixed number of depots |P| with an increasing number of customers |C|; (2) fixed number of customers"}, {"title": "6.3. Effectiveness of set-based methods", "content": "In this section, we evaluate the effectiveness of our set extension approach. We compare different methods in both phases of our algorithm. For the first phase, we examine the nearest neighbor (NN) method, the minimum spanning tree (MST) method, and their set extensions. In the second phase, we compare the standard and set TSP.\nTo validate these methods, we tested all combinations of first and second-phase algorithms on three datasets. Each dataset contains 100 instances sampled uniformly from the Manhattan road network, consisting of 5 depots and 50, 100, or 150 customers.\nThe results of our analysis are presented in Tab. 4. Our key findings are as follows.\nThe combination of Set-MST and Set TSP produces the best cost but also requires the most computational time. Set TSP consistently provides lower costs than standard TSP across all first-phase methods, though it contributes the most to the increased computational time. This advantage of Set TSP over standard TSP becomes more pronounced as customers increase.\nWe found that MST outperforms NN in both its original and set versions. However, MST incurs higher compu- tational costs. This is likely due to the more unbalanced allocation in the MST-based method, which leads to higher computational demands in the second phase due to the exponential time complexity.\nInterestingly, when the second phase uses standard TSP, employing set-based methods in the first phase doesn't necessarily lead to better performance than their original counterparts. However, when Set TSP is used in the second"}]}