{"title": "Poster: Long PHP webshell files detection\nbased on sliding window attention", "authors": ["Zhiqiang Wang", "Haoyu Wang", "Lu Hao"], "abstract": "Abstract-Webshell is a type of backdoor, and web applications\nare widely exposed to webshell injection attacks. Therefore, it is\nimportant to study webshell detection techniques. In this study,\nwe propose a webshell detection method. We first convert PHP\nsource code to opcodes and then extract Opcode Double-Tuples\n(ODTs). Next, we combine CodeBert and FastText models for\nfeature representation and classification. To address the challenge\nthat deep learning methods have difficulty detecting long webshell\nfiles, we introduce a sliding window attention mechanism. This\napproach effectively captures malicious behavior within long\nfiles. Experimental results show that our method reaches high\naccuracy in webshell detection, solving the problem of traditional\nmethods that struggle to address new webshell variants and anti-\ndetection techniques.", "sections": [{"title": "I. INTRODUCTION", "content": "The webshell injection plays a vital role in the hacker\nattack chain, enabling the attacker to remotely control devices,\nacquire sensitive data, and further expand attack activities.\nTherefore, Detecting and removing webshells is an effective\nway to defend against attacks and ensure web security.\nTraditional webshell detection methods [1], [2] based on\npattern matching usually rely on recognizing known features,\nincluding source code features, traffic features, dynamic func-\ntion calls and other relevant features. However, as attack\ntechniques evolve, the variability and obfuscation of webshells\nhave become more prevalent. Attackers often use obfuscation,\ndynamic loading, encryption and decryption techniques to\nevade detection, making traditional detection methods inad-\nequate for recognizing new types of webshells.\nIn this context, webshell detection methods using deep\nlearning [3], [4], [5], including those based on source code\nor opcode, have become a research hotspot and have shown\npromising results. However, current deep learning-based web-\nshell detection methods still face challenges [6]. For datasets,\npublicly available datasets are outdated and do not contain\nthe latest samples. Therefore, their performance in real-world\nenvironments for detecting may not be good. For data process-\ning, a good data processing method is often more important\nthan the detection model. The opcode-based detection methods\ntypically extract only a single sequence of opcode instructions\n(called Opcode Single-Tuples) without effectively capturing\nlow-level code features. The source code-based method is\ncomplicated for processing webshells that use anti-detection\ntechniques. In addition, detecting long sequence files (such as\ncomplex dynamic encryption and decryption scripts or large\nfiles) is quite challenging. Methods such as sample slicing [3]\nor TextRank [5] are often used to reduce data size, which\nmay result in some loss of code information or disruption of\ncontextual relationships.\nThis study focuses on the PHP language because PHP\nis used by 75.1% of all the websites whose server-side\nprogramming language [7]. To address the challenges, this\nstudy contribution includes (1) collating a new high-quality\nWebshell dataset, (2) proposing a PHP code data processing\nmethod to extract Opcode Double-Tuples(ODTs) including\nopcode instructions and operands instead of Opcode Single-\nTuples(OSTs), (3) introducing a window attention mechanism\nto solve the long text problem."}, {"title": "II. METHODOLOGY", "content": "The detection method consists of two steps. First, the\nPHP source code in the dataset is processed into ODTs.\nSecond, using a sliding window attention mechanism,\nwe combine the CodeBert model [8] and the Fasttext\nmodel [9] for feature representation and binary classifica-\ntion of the ODTs. Our dataset and processing code are\npublicly available: https://github.com/w-32768/PHP-Webshell-\nDetection-via-Opcode-Analysis\nAfter getting the global feature representation of the ODTs,\nwe input them into a binary classifier. The classifier consists\nof fully connected layers and activation functions, trained by\nminimizing the binary cross-entropy loss function. It distin-\nguishes between benign PHP code and malicious webshells.\nWe introduce a sliding window attention mechanism to\naddress the high computational complexity of global self-\nattention mechanisms for long opcode sequences. The op-\ncode sequence is divided into multiple windows of size W\nwith a stride of $Sr(Sr < W)$. Specifically, Self-attention\nis calculated independently within each window. The global\nfeature representation is obtained by averaging the last hidden\nstates from the CodeBert encoder across all windows. This\nmechanism reduces memory requirements and allows longer\nsequences to be processed. Furthermore, the overlap between\nadjacent windows allows information exchange, making it\npossible to detect malicious behaviors.\nThe sliding window attention mechanism reduces compu-\ntational complexity and preserves the contextual information\nof the opcode sequence. Thus, the problem of incomplete\ninformation caused by other methods is avoided."}, {"title": "III. CONCLUSION", "content": "This study presents a PHP webshell data processing method\nthat extracts ODTs, addressing the limitations of single-tuples\ndetection. Additionally, we introduce a sliding window atten-\ntion mechanism that effectively mitigates the challenges of\nlong text detection. This study offers a new perspective on\nthe field of malicious code detection. In the future, we aim to\ncontinually explore multi-language webshell detection tasks to\nimprove detection performance and generalization capabilities."}]}