{"title": "Wake-Informed 3D Path Planning for Autonomous Underwater Vehicles Using A* and Neural Network Approximations", "authors": ["Zachary Cooper-Baldock", "Stephen Turnock", "Karl Sammut"], "abstract": "Autonomous Underwater Vehicles (AUVs) encounter significant energy, control and navigation challenges in complex underwater environments, particularly during close-proximity operations, such as launch and recovery (LAR), where fluid interactions and wake effects present additional navigational and energy challenges. Traditional path planning methods fail to incorporate these detailed wake structures, resulting in increased energy consumption, reduced control stability, and heightened safety risks. This paper presents a novel wake-informed, 3D path planning approach that fully integrates localized wake effects and global currents into the planning algorithm. Two variants of the A* algorithm-a current-informed planner and a wake-informed planner- are created to assess its validity and two neural network models are then trained to approximate these planners for real-time applications. Both the A* planners and NN models are evaluated using important metrics such as energy expenditure, path length, and encounters with high-velocity and turbulent regions. The results demonstrate a wake-informed A* planner consistently achieves the lowest energy expenditure and minimizes encounters with high-velocity regions, reducing energy consumption by up to 11.3%. The neural network models are observed to offer computational speedup of 6 orders of magnitude, but exhibit 4.51\u201319.79% higher energy expenditures and 9.81\u201324.38% less optimal paths. These findings underscore the importance of incorporating detailed wake structures into traditional path planning algorithms and the benefits of neural network approximations to enhance energy efficiency and operational safety for AUVs in complex 3D domains.", "sections": [{"title": "1. Introduction", "content": "Autonomous underwater vehicles (AUVs) operate in complex, rapidly changing environments, with limited sensory data available. This lack of sensory perception in a complex environment complicates the effective control of these vehicles from a guidance and navigation perspective. This is further compounded by the addition of multiple vehicles or the undertaking of challenging manoeuvres, such as underwater launch and recovery (LAR) of smaller platforms in the unsteady flow wake of a larger platform [1, 2]. Whilst underwater and in operation, AUV platforms are free to move with 6 degrees of freedom and in doing so need to maintain effective surge, heave and sway control, in addition to pitch, yaw and roll [3].\nThe underwater environment is further complicated by communications challenges, current and dynamic flow effects and the size of the working environment [3]. To ensure safe and efficient navigational paths in the underwater domain, a variety of different path planning methods have been developed or adapted [4]. The majority of these methods seek to optimize travel time [5], energy consumption [6], and obstacle avoidance [7] and can be broadly classified into node-based, sampling-based, or bioinspired, depending on their operational principles and original inspiration.\nLimited research has addressed path planning where vehicle wake structures are included, specifically in 3D applications, opting to instead focus on global current effects [8], geometric obstacle avoidance or simplified [9] flow field structures. The inclusion of flow structures is primarily limited to 2D [8, 9]. Works that have sought to investigate path planning within 3D flows for autonomous applications have stopped short of incorporating the 3D field directly within the model [10], favoring the recommendation of navigational best practices instead. Other research focusing on unmanned aerial vehicle (UAV) navigation in turbulent 3D domains, using the A* algorithm, opted to completely avoid turbulent regions of the path to ensure flight safety [11].\nHowever, for close-proximity underwater operations between vehicles, such as LAR, the turbulent structures are large, strong, and hard to positionally approximate [1, 2]. Due to this, when conducting close-proximity operations between vehicles complete avoidance as detailed in other works [11], is not possible. Subsequently, this necessitates an intelligent, rapid response, and computationally efficient means of navigating near or through wake structures.\nIn response to these challenges, this paper proposes, develops, and tests a wake-informed, 3D path planning framework for AUVs that integrates detailed hydrodynamic data directly into the planning algorithm. This approach is demonstrated to enable more energy-efficient and safer navigation through complex wake structures. An investigation is then undertaken into the ability of neural networks to approximate the calcu-"}, {"title": "2. Background", "content": "A substantial body of literature exists on AUV path planning in complex underwater environments. Many different variations of planning algorithms have been proposed, each seeking to best address a specific challenge that impacts underwater vehicles. The vast majority of these works can be first attributed to aerial and terrestrial path planning algorithms before modification for underwater applications. These approaches can be further divided according to their method of operation, such as node-based, sampling-based, and bioinspired planning [12]."}, {"title": "2.1. Path Planning Methods", "content": "Node-based methods, such as the A* algorithm, are widely used due to their ability to find optimal paths in discretized environments [13]. Node based methods typically operate on a grid or graph representation of the environment and consider factors such as travel time, energy consumption and obstacle avoidance. Sampling-based methods, like Rapidly-exploring Random Trees (RRT) and Probabilistic Roadmaps (PRM), are particularly useful in high-dimensional spaces and can handle complex constraints [14, 15]. The sampling-based methods are effective in real-time applications due to their probabilistic completeness and ability to find feasible paths quickly, which some computationally intensive methods, such as bioinspired methods, can struggle with. The bioinspired algorithms, such as Ant Colony Optimization and Genetic Algorithms, mimic natural processes to find efficient paths [16, 17]. These methods are advantageous in handling dynamic environments and optimizing multiple objectives simultaneously, but are not guaranteed to provide the optimal path in all cases."}, {"title": "2.2. Incorporating Environmental Effects", "content": "Within each path planner, multiple effects can be modeled or accounted for. For the operation of underwater vehicles, environmental effects are important. The environment that an AUV exists in can affect its ability to safely or effectively navigate. Previous works have incorporated a range of effects, seeking to produce an informed planner. These have included the inclusion of ocean currents to help identify optimal time and energy"}, {"title": "2.3. Limitations in Current Research", "content": "For underwater applications, and specifically those with two or more interacting vehicles, an understanding of the best path through a fully realized 3D field is important. These operations are common and include, but are not limited to launch and recovery, formation flying and multi-vehicle cable/pipe inspection underwater. In these applications, the 3D flow field, wake structures and shed hydrodynamics from vehicles may pose control, safety and energy efficiency effects that are important to account for [23].\nTo date, limited research has sought to account for these effects within a path planner that incorporates full 3D hydrodynamic models, including the wake structures of nearby vessels. Existing methods either simplify the flow field in relation to its dimensionality (3D to 2D), include only the current, avoiding turbulent regions altogether, or use approximated hydrodynamic models [24, 25]. These simplifications may not accurately account for dynamics of importance in close proximity operations, such as berthing. Research focusing on UAV navigation in turbulent 3D aerial domains using the A* algorithm opted to completely avoid turbulent regions to ensure flight safety [26]. When conducting close proximity operations between vehicles, such as docking or formation keeping, avoiding these regions is not always a practical option as it can limit the possible safe approach trajectories that the vehicle can employ.\nBuilding on these gaps, it is theorized that a machine learning-based planner, trained on trajectories generated by a high-fidelity A* planner, could learn to replicate or closely approximate the performance of optimal solutions. Such an approach would enable the rapid prediction of feasible, energy-efficient paths without the need for computationally expensive online searches, potentially bringing real-time 3D wake-informed navigation within reach."}, {"title": "2.4. Contribution", "content": "This paper makes three primary contributions, namely it:\n1.  proposes a wake-informed A* path planning algorithm that integrates full 3D hydrodynamic data, including complex wake structures, to achieve more energy-efficient and safer AUV navigation. Bridging the gap between simplified flow models and the complex realities of 3D underwater environments is crucial for operations involving significant wake effects [1, 2].\n2.  introduces a machine learning framework trained on wake- and current-informed A* solutions, enabling rapid trajectory generation that approximates near-optimal paths in real-time, levering existing techniques for ML informed planning [27, 28].\n3.  develops a robust set of metrics to holistically evaluate energy consumption, path length, turbulence exposure, and computational efficiency, advancing the understanding of AUV path planning performance in complex 3D flows."}, {"title": "3. Computational Domain", "content": "Underwater LAR involves one vehicle advancing towards the other whilst both are fully immersed in the fluid domain. The immersion results in a three dimensional flow field, where the flow may move in the x, y or z directions. This leads to the presence of complex fluid structures that can impact the performance, stability and control of the involved vessels. In the domain as proposed in this investigation, it is assumed that a smaller underwater vehicle will be recovered within a larger underwater vehicle. The smaller vehicle will navigate upstream, from behind the stern of the steadily moving larger craft, during the approach with the goal of being recovered inside a payload bay located onboard the larger vessel.\nThis method of recovery has already been proposed and hydrodynamically assessed [1, 2], but remains challenging due to the fluid structures present during the manoeuvre which are excluded in current path planners. The propeller race and vehicle wake of the lead vessel presents a complex navigational challenge to the approaching vehicle. Approaching with limited knowledge of the strong flow structure, instead accounting only for the current, can complicate attempts to make a safe recovery. Thus, a smart means of avoidance is required. This presents an optimal task by which to assess, benchmark and evaluate efficient methods for wake-informed path planning in 3D domains.\nThe LAR domain is modeled as a pseudo-static environment. The larger vehicle, an extra-large uncrewed underwater vehicle (XLUUV) is located within the center of the computational grid. This grid represents a 155 \u00d7 155 \u00d7 by 155 meter physical domain. The larger vehicle to which the recovery is made is modeled to be 22 meters in length, 2.2 meters wide and 2.7 meters tall. This vehicle is equipped with an INSEAN E1619 propeller, based on the work of [1]. It is modeled with a central payload bay that is 5.5 meters long, 1.5 meters wide and 2.2 meters tall. It is assumed that for each planned trajectory, the XLUUV velocity and heading are constant. These manoeuvres take place at a modelled depth of 100m, with a constant current and no wave or free surface effects.\nThis payload bay is accessible from the bottom, mimicking the payload bay LAR as assessed by [1] and [2], which indicated such a maneuver is possible. This domain is contained within a dataset of 500 distinct flow conditions, as discussed in Section 4.2. The velocity magnitude contained within the ANSYS Fluent CFD data has been interpolated from the mesh nodes of each simulation onto the regularly spaced 3D grid structure used in the planner. This was undertaken using a nearest-neighbor approach between vertexes of the CFD data and the 3D grid structure as discussed in Section 4.1. Example trajectories through the domain are provided in Fig. 1 and 2 which show the larger vehicle, the wake structure and an example approach trajectory."}, {"title": "4. Methodology", "content": "The environment is first discretized into a three-dimensional grid $G \\subset Z^3$, where each cell (voxel) represents a discrete location in 3D space. The grid dimensions are defined to be ([1,128], [1,128], [1,128]) representing the 3D 1283 grid structure. Each individual cell in the grid corresponds to a node $n \\subset G$. These nodes are connected to their neighbors based on a 26-connected grid. This considers movement in all directions: up, down, left, right, forward, backward and diagonals. For a node n, its set of neighbors $N(n)$ includes all adjacent nodes that are within the grid bounds and are traversable (not occupied by obstacles). The Euclidean distance (as denoted in Eq. (1)) is used to determine the distance between the current node n and the next node n'.\n$d(n,n') = \\sqrt{(X_{n'} - X_n)^2 + (y_{n'} - y_n)^2 + (z_{n'} - z_n)^2}$ (1)\nThe cost of moving from node n to the next node n' is defined based on the energy required to overcome drag forces $F_D$, in addition to the distance traveled d. This can be determined, as the velocity throughout the local environment is known across all cells, and an approximation of the force of drag ($F_D$) can be made via Eq. (2).\n$F_D = \\frac{1}{2} \\rho v^2 C_D A$ (2)\nin which $\\rho$ denotes density, v denotes the relative velocity between the vehicle and the fluid domain, $C_D$ denotes the coefficient of drag and A denotes the cross-sectional area of the vehicle in the drag direction. In turn, $F_D$ is then used to approximate the energy ($E_D$) required to overcome drag over a distance, d, such that:\n$E_D = F_D \\times d$ (3)\nSubsequently, $E_D$ is used to define the movement cost c between two nodes n and n' as seen below in $c(n, n')$. A weighting term $w_1$ has also been introduced, which can be used to weight the importance of drag, which may be important, depending on the application.\n$c(n, n') = d(n, n') \\times w_1 \\cdot E_D(n')$ (4)\nin which d(n, n') is used to denote the Euclidean distance between nodes n and n', and $E_D(n')$ represents the energy cost due to drag at node n'. This then results in the cost function comprising the following:\n$g(n) = \\sum_{i=1}^{k} c(n_{i-1}, n_i) = \\sum_{i=1}^{k} d(n, n') \\times w_1 E_D(n')$ (5)\nwhich can be further decomposed into the cost such that:\n$g(n) = \\sum_{i=1}^{k} d(n, n') \\times w_1 \\rho v^2 C_D A$ (6)\nwhere $n_0$ is the starting node and $n_k$ is the final node, comprising the set of trajectory points such that $P = [n_0, n_1, ..., n_k]$. The initial starting location is $n_0$ which is randomly uniformly distributed on the rear entrance of the domain. The goal location, $n_k$, is localized to the center of the payload bay. The goal of the path planning optimization is to determine a path, $P^*$, from the starting location $n_0$ to the goal location $n_k$ that minimizes the total cost such that:\n$P^* = arg \\min c(n, n')$ (7)\nTwo variants of this path planner are used, where the velocity (v) from the drag equation has different levels of fidelity. In the uninformed path planner, only the current field velocity ($v_c$) is known. In the informed path planner, the wake structure and current field ($v_T$) of the velocity is known. The A* algorithm is then used to plan the path through the grid $G \\subset Z^3$ in accordance with Eq. (7) between a starting node and goal node within a traversable graph space. The heuristic function estimates the cost to reach the goal from the starting node using the average drag energy per unit distance and the aforementioned Euclidean distance. This heuristic is defined to be the sum of the average drag energy per unit distance ($E_D$) within the grid $G \\subset Z^3$ and distance such that:\n$h(n) = E_D \\times d(n, n')$ (8)\nThe heuristic is admissible as it will not overestimate the true minimum cost to reach the goal. This is ensured by the use of the average drag energy, which provides a reasonable estimate to guide the search within the domain, without comprising optimality. For each neighbor n' of the current node n, the algorithm calculates the tentative cost to reach n' via n and updates the scores accordingly. The nodes are stored in a priority queue order, sorted by their f(n) = g(n) + h(n) values to ensure that the most promising nodes are explored first.\nTo assess the importance of knowing the wake structures, two variants of the planner will be assessed. The first variant, $P_C$ will only be informed of the current within the computational domain. The second variant, $P_W$, will be informed of both the current and the vehicle's wake structure. $P_C$ will be applied to the flow field across a range of wake fields behind a large underwater vehicle. The current and wake dataset was generated from prior work by the authors and is comprised of high fidelity computational fluid dynamics (CFD) data interpolated onto the discrete grid $G_C \\subset Z^3$ [1] [2]. The data contains a local current from 0.10 m/s to 5.00 m/s in increments of 0.10 m/s. Additionally, a strong propeller wake is included, with wake structures at 0\u00b0 to 60\u00b0 degrees of separation, simulating a turn of the vehicle in question. This was done via the simulation of an INSEAN E1619 propeller. The wake free velocity field ($v_c$) containing only the current, will be the same field, with the wake structure's components filtered out and only global current retained."}, {"title": "4.2. Path Generation", "content": "For the wake structure dataset, with local current from 0.10 m/s to 5.00 m/s in increments of 0.10 m/s and angles of inci-"}, {"title": "4.3. Path Assessment Metrics", "content": "Energy capacity onboard AUVs remains a constant challenge, where small hull structures limit the physical size of battery systems, resulting in tightly constrained vehicles. It is important that the trajectories generated are assessed from an energy cost perspective, as well as the variance in energy cost, as these factors can have a significant effect on the viability of a given path. Additionally, when approaching a larger vessel, the wake structure shed by it can cause significant approach challenges, particularly with respect to effective control of the smaller vehicle [1] [2]. It is for this reason that the hydrodynamic effects should be assessed to determine the proportion of the trajectory where a control risk exists. We define this control risk to be both regions on the trajectory where there is a higher than expected flow speed, and where the velocity is fluctuating in the x, y or z direction.\nTo make this assessment, each generated path, P, is decomposed into a set of N nodes such that:\n$P = {n_1, n_2, n_3,..., n}$ (9)\nEach node $n_i$ in the set corresponds to a 3-dimensional coordinate ($x_i$, $y_i$, $z_i$) in the grid. The velocity at node $n_i$ is $V(n_i)$. v denotes the median velocity of the entire grid, and $\\sigma_v$ denotes the standard deviation of the velocities in the grid. These values are used to identify high velocity cells, where we define the high velocity cell threshold $V_{threshold}$ to be a function of the velocity field's standard deviation $\\sigma_v$:\n$V_{threshold} = v + \\sigma_v$ (10)\nAfter the velocity threshold for these cells is identified, the path P is used to determine the number of cells along the trajectory that exceed this threshold. The number of high velocity cells is then summed over the trajectory, denoted by $N_{high-velocity}(P)$ and calculated via Eq. (11), where the cutoff threshold for a high velocity cell is denoted by the indicator function in Eq. (12) and given via $\\delta_{HV}$.\n$N_{high-velocity}(P) = \\sum_{i=1}^{N} \\delta_{HV}(V(n_i))$ (11)\n$\\delta_{HV} (v) = \\begin{cases} 1, & \\text{if } v \\geq V_{threshold} \\\\ 0, & \\text{otherwise} \\end{cases}$ (12)\nTo assess the fluctuations in velocity, or the turbulence along the path P, a similar method is applied. $D(n_i)$ denotes the velocity disparity at a given node $n_i$. At any node where the disparity value is non zero, it is summed. This keeps track of the number of disparity cells along the path P, denoted by $N_{disparity}(P)$. This is determined via the application of Eq. (13). Again, the cutoff threshold for a velocity fluctuation cell is denoted by the indicator function $\\delta_D$ defined as follows, using a non-zero offset ($\\epsilon$ = 0.005) to ensure calculation robustness. This is provided in Eq. (14)\n$N_{disparity}(P) = \\sum_{i=1}^{N} \\delta_D(D(n_i))$ (13)\n$\\delta_D (d) = \\begin{cases} 1, & \\text{if } d \\geq \\epsilon \\\\ 0, & \\text{otherwise} \\end{cases}$ (14)\nTo determine the energy cost of a path, the drag force $F_D(n)$ at a given node $n_i$, is obtained from the cost array. Then, for each segment between nodes $n_i$ and $n_{i+1}$, the Euclidean distance $d_i$ is calculated via the application of Eq. (1) and the force of drag determined via Eq. (2). These are then combined and determined for each cell along the trajectory, allowing for a path energy, denoted by E(P), calculation via Eq. (15).\n$E(P) = \\sum_{i=1}^{N-1} F_D(n_i) \\times d_i$ (15)\nThe total Euclidean distance (path length) along path P, denoted L(P), is the sum of the distances between consecutive nodes where $d_i$ is as previously defined:\n$L(P) = \\sum_{i=1}^{N-1} d_i$ (16)\nThe path length in cells, denoted by $N_{cells}(P)$, is simply the number of nodes (n) on each given path:\n$N_{cells}(P) = N$ (17)"}, {"title": "5. Neural Network Design", "content": "Whilst A* calculation of a trajectory results in extremely optimal paths, this calculation requires more substantial computing resources than are typically available on an AUV within it's limited computational hardware and energy budget, rendering it either impractical or impossible. Neural networks (NNs), in contrast, are capable of learning complex mappings from input features to outputs. This makes them ideal candidates to approximate the function of both the wake- and current-informed path planning A* algorithms [29]. Beneficially, NNs are significantly less computationally intensive (once trained) and offer the ability to rapidly generate and update the trajectories based on a new inputs, unlike the recalculations required for traditional A*. This section details the steps taken to develop, train and assess the NNs designed to approximate the two planners."}, {"title": "5.1. Dataset Preparation", "content": "To train the networks to predict the trajectories of the current and wake-informed A* planners, a dataset of their trajectories will be used. Each dataset consists of 18,000 trajectories generated by the wake-informed and current-informed A* planners counterparts, as described in Section 4.2. Each trajectory comprises up to 130 waypoints, with each waypoint represented by its three-dimensional coordinates ($x_i$, $y_i$, $z_i$). The input features for the neural network include the vehicle's starting position ($x_{start}$, $y_{start}$, $z_{start}$), goal position ($x_{goal}$, $y_{goal}$, $z_{goal}$), flow speed v \u2208 [0.1, 5.0] m/s, and flow angle \u03b8 \u2208 [0\u00b0, 60\u00b0]. The network output is a vector of sequential waypoint coordinates representing the predicted trajectory. Due to varying path lengths, all trajectories were padded to a fixed length of 130 waypoints, and a mask was applied during training to handle the variable lengths, that may be shorter than this length of 130 cells."}, {"title": "5.2. Model Architecture", "content": "Both neural network architectures are fully connected feed-forward networks, designed to regress the sequence of waypoint coordinates directly from the input features. The architecture consists of an input layer, two hidden layers and an output layer as detailed below:\n\n*   Input Layer: Accepts an 8-dimensional input vector comprising the normalized starting position, goal position, flow speed, and flow angle.\n*   1st Hidden Layer: 128 neurons with ReLU activation.\n*   2nd Hidden Layer: 256 neurons with ReLU activation.\n*   Output Layer: Outputs a 390-dimensional vector representing the flattened sequence of waypoint coordinates ($x_i$, $y_i$, $z_i$) for i = 1, ..., 130."}, {"title": "5.3. Training Procedure", "content": "Both input features and output waypoint coordinates were normalized using the standard score as represented by Eq. (18).\n$Z = \\frac{x - \\mu}{\\sigma}$ (18)\nwhere x is the feature value, u is the mean, and is the standard deviation computed from the training set. The dataset was then split into training and validation sets using an 80/20 split, resulting in 14,400 training samples and 3,600 validation samples. The split was stratified to ensure a uniform distribution of flow speeds and angles in both sets. A masked mean squared error (MSE) loss function was employed to account for variable trajectory lengths and padded waypoints as denoted by Eq. (19).\n$L = \\frac{\\sum_{i=1}^{N} m_i (y_i - \\hat{y_i})^2}{\\sum_{i=1}^{N} m_i}$ (19)\nwhere $y_i$ and $\\hat{y_i}$ are the true and predicted waypoint coordinates, respectively, $m_i$ is the mask indicating valid waypoints ($m_i$ = 1) or padded positions ($m_i$ = 0), and N is the total number of waypoint coordinates in the batch.\nThe network was trained using the Adam optimizer [31] with a learning rate of 1 \u00d7 10-4. Adam was chosen for its adaptive learning rate capabilities and robustness in training deep neural networks. The batch size was set to 64, and the model was trained for 50 epochs. Weight initialization was performed using the Xavier initialization method to ensure stable gradients at the start of training [32]."}, {"title": "5.4. Regularization Techniques", "content": "To prevent overfitting, three regularization techniques were implemented:\n\n*   Early Stopping: The validation loss was monitored, and training was halted if the loss did not improve for a set number of epochs (10).\n*   Dropout: Although not included in the final model, dropout layers were experimented with during hyperparameter tuning but did not yield significant improvements.\n*   L2 Regularization: L2 weight decay was applied implicitly via the Adam optimizer's default settings."}, {"title": "5.5. Evaluation Metrics", "content": "The model's performance was evaluated using the root mean squared error (RMSE) between the predicted and true waypoint coordinates on the validation set only. Additionally, the trajectories generated by the neural network were assessed using the same metrics as the A* planners, including total energy consumption, path length, number of high-velocity cells, and number of disparity cells, as defined in Section 4.3 and presented in Section 6."}, {"title": "5.6. Implementation Details", "content": "The neural network was implemented using PyTorch [33], a widely used deep learning framework that provides dynamic computation graphs and efficient GPU acceleration. Training was performed on a workstation equipped with an NVIDIA RTX2070 GPU to expedite the computational process.\nComputational Efficiency. Compared to the traditional A* algorithms, the neural network offers significant computational speed-ups due to its feedforward nature, eliminating the need for iterative graph traversal. This efficiency is particularly advantageous for real-time applications where computational resources are limited and thus why it has been selected for analysis in this work."}, {"title": "5.7. Limitations and Considerations", "content": "While the neural network provides rapid trajectory predictions, it inherently relies on the quality and diversity of the training data. As the model is trained on trajectories generated by the A* planners, its performance is directly tied to the scenarios represented in the training set. Extrapolation to unseen flow conditions or starting positions not represented in the training data may result in decreased accuracy, and will be assessed within this analysis."}, {"title": "5.8. Comparison with Related Work", "content": "Our approach aligns with recent trends in leveraging deep learning for path planning tasks [27, 28]. Unlike methods that use convolutional neural networks (CNNs) to process occupancy grids or reinforcement learning to learn navigation policies, our model directly predicts the sequence of waypoints, simplifying the integration into existing navigation systems."}, {"title": "6. Results", "content": "In this section, a comprehensive analysis of the performance of the four path planning approaches: the current-informed A* planner (C.I.A*), the current-informed neural network (C.I.NN), the wake-informed A* planner (W.I.A*), and the wake-informed neural network (W.I.NN) is provided. The evaluation metrics are the energy expenditure (E), path length (L), the number of high-velocity cells encountered (nh,vel), turbulent cell count (nturb.), and computational time (t) of each trajectory. The results are summarized in Table 1, with Fig. 4, 5 and 6 provided to further substantiate the results. The most optimal results are bolded for clarity in Table 1."}, {"title": "6.1. Energy Expenditure", "content": "Energy efficiency is critical in AUV operation due to their limited onboard energy resources. The wake-informed A* planner (W.I.A*) consistently demonstrates the lowest total energy expenditure across all speed ranges, as shown in Table 1. At the lowest speed range of 0.1-0.5m/s, W.I.A* achieves an average energy expenditure of 51.49 joules with a standard deviation of 52.82 joules, outperforming the current-informed A* planner (C.I.A*) by approximately 11.3%. This persists at higher speeds, with W.I.A* maintaining lower energy consumption compared to the other models. At the maximum tested speed range of 4.0-5.0m/s, W.I.A* records an average energy expenditure of 11,952.30 joules, 7.2% less than C.I.A*.\nThe neural network models, C.I.NN and W.I.NN, based on their counterpart A* implementations, exhibit higher energy expenditures compared to their calculated A* trajectories. W.I.NN performs better than C.I.NN, but does not match the energy efficiency of the wake-informed A* planner. The increased energy expenditure (ranging between 10.03\u201313.12%) in the neural network counterparts may be attributed to approximation errors inherent in learning-based approaches, where it remains challenging to capture the optimality of the A* algorithm in path planning, especially in the presence of complex wake structures. Provided in Fig. 4 is a depiction of the variation in standard deviation against speed and angle for both planners and networks. It can be seen that the current-informed NN has significant variation in path energy, indicating it may struggle to understand how best to traverse the domain, particularly at high speeds."}, {"title": "6.2. Path Length", "content": "The path length metric (L) reflects the total distance traveled by the AUV along the planned trajectory. Shorter paths generally result in quicker LAR missions, for a given speed, but may traverse more hazardous areas. The current-informed A* planner (C.I.A*) achieves the shortest average path lengths across all speed ranges, with consistent trajectory lengths of 104.22-104.31m and a standard deviation of approximately 9.5m. This suggests that C.I.A* is able to generate the most direct paths, but without considering wake structures and associated hazards. In contrast, the wake-informed A* planner (W.I.A*) shows slightly longer path lengths, averaging around 107 m, indicating that it deliberately avoids certain areas to minimize energy expenditure and exposure to high-velocity regions. The neural network models, particularly C.I.NN, exhibit significantly longer path lengths with higher variability. For example, C.I.NN records an average path length of 133.27m in the 4.0-5.0m/s speed range, approximately 27% longer than C.I.A*. This suggests that the neural networks may not approximate the optimal path lengths as effectively, potentially leading to suboptimal routing. Fig. 5 provides an assessment of the median path length of the models against speed and angle. It can be seen that the A* current-informed method is the most consistent, with the A* wake-informed method also exhibiting similar performance. The neural networks result in a higher median path length, with suboptimal path generation at low speed and angles for the wake-informed NN."}, {"title": "6.3. High-Velocity Cells Encountered", "content": "Navigating through high-velocity cells poses increased risk and potential for energy expenditure, due to increased drag and control challenges associated with traversing the larger vehicle's wake structure. The wake-informed A* planner (W.I.A*) exhibits the lowest average number of high-velocity cells encountered (nH, vel) across all speed ranges, as it has knowledge of the structures. At speeds between 0.5-1.0 m/s, W.I.A* encounters an average of 2.73 high-velocity cells, significantly lower than C.I.A* (7.32) on average. This indicates that W.I.A* sufficiently avoids the high-velocity regions it is informed of, enhancing operational safety. Both neural network models exhibit less consistent performance in this metric. C.I.NN is observed to reduce high-velocity cell encounters compared to C.I.A*, whilst W.I.NN generally encounters more high-velocity cells than W.I.A*. This suggests that the neural networks may not fully capture the nuances of avoiding hazardous regions, possibly due to limitations in the training data or model capacity. Fig. 6 details the median number of high velocity cells encountered by each method. Similar performance is observed for the current-informed A* and NN, and the wake-informed NN. The wake-informed A* planner exhibits beneficial performance in comparison to the other models, with typically 0 - 5 cells encountered irrespective of speed and angle."}, {"title": "6.4. Turbulent Cell Count", "content": "The turbulent cell count (nturb.) reflects the number of cells along the trajectory where any velocity fluctuation occurs, which would pose an additional control challenge for the AUV. It should be noted that no thresholding is applied to this, so small and large fluctuations are treated equally. The current-informed A* planner (C.I.A*) records"}]}