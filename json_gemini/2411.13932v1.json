{"title": "XAgents: A Framework for Interpretable Rule-Based Multi-Agents Cooperation", "authors": ["Hailong Yang", "Mingxian Gu", "Renhuo Zhao", "Fuping Hu", "Zhaohong Deng", "Yitang Chen"], "abstract": "Extracting implicit knowledge and logical reasoning abilities from large language models (LLMs) has consistently been a significant challenge. The advancement of multi-agent systems has further enhanced the capabilities of LLMs. Inspired by the structure of multipolar neurons (MNs), we propose the XAgents framework, an interpretable multi-agent cooperative framework based on the IF-THEN rule-based system. The IF-Parts of the rules are responsible for logical reasoning and domain membership calculation, while the THEN-Parts are comprised of domain expert agents that generate domain-specific contents. Following the calculation of the membership, XAgetns transmits the task to the disparate domain rules, which subsequently generate the various responses. These responses are analogous to the answers provided by different experts to the same question. The final response is reached at by eliminating the hallucinations and erroneous knowledge of the LLM through membership computation and semantic adversarial generation of the various domain rules. The incorporation of rule-based interpretability serves to bolster user confidence in the XAgents framework. We evaluate the efficacy of XAgents through a comparative analysis with the latest AutoAgents, in which XAgents demonstrated superior performance across three distinct datasets. We perform post-hoc interpretable studies with SHAP algorithm and case studies, proving the interpretability of XAgent in terms of input-output feature correlation and rule-based semantics.", "sections": [{"title": "1 Introduction", "content": "The human brain contains specific types of neurons, namely pyramidal neurons (PyMN) (Jossin and Cooper, 2011) and purkinje multipolar neurons (PuMN) (Herndon, 1963), as illustrated in Figure 1. PyMNs perform a variety of functions within the brain, including transmitting and integrating information, modulating of brain activity, and contributing learning and memory processes (Silberberg and Markram, 2007). The multi-axonal structure of PyMNs can span different regions of the brain to form long-range connections. The connections allow for more efficient and extensive information exchange between different brain regions, forming the basis for complex brain functions such as sensory processing, motor control and cognitive functions. PuMNs play a central role in cerebellar function as the multi-dendritic structure is capable of integrating inputs from multiple sources (Hirano, 2018). The dendrites receive synaptic inputs from parallel fibers in the granule cells and crawling fibers in the inferior olivary nucleus. Integration of these inputs is critical for the fine modulation of cerebellar output signals."}, {"title": "2 Related Works", "content": "LLM-based Agent. The initial research on agent systems focused on the analysis of single-agent systems, which contains distant reasoning mechanisms. The most notable works are Chain-of-Thought (CoT) (Wei et al., 2022), which demonstrated the capacity of LLMs to devise their own thought processes for problem-solving. Subsequent research has been conducted in several areas, including least-to-most prompting for solving complex tasks (Zhou et al., 2023), zero-sample CoT (Kojima et al., 2022), self-consistent reasoning mechanisms (Wang et al., 2023a), and iterative self-refine by feedback (Madaan et al., 2023). As the research progresses, the agent systems evolve from a simple structure to a complex structure. Auto-GPT (Yang et al., 2023) represents an early example of a single-agent complex system that employs a LLM-based autonomous agent to accomplish tasks through the utilization of a range of tools. However, Auto-GPT is only capable of functioning independently and can't facilitate processing complex tasks. One method of enhancing the task-solving capability of agent systems is to create distinct roles based on LLMs, and facilitate their coordination of actions to achieve the common objective. CAMEL (Li et al., 2023) is the early chat-based multi-agent framework that guide agents to finish complex tasks through inception prompting and role-playing. MetaGPT (Hong et al., 2023) is also a multi-agent framework that creates and assigns different roles to multiplex agents based on LLMs, which collaborate to solve complex tasks in the process of collaborative software development. Recent research has investigated the potential of LLMs to adaptively generate roles instead of having static presets for the agents. SPP (Wang et al., 2023b) is a mechanism that adaptively generates multiple personas based a common LLM to enhance the abilities of processing complex tasks in multi-turn self-collaboration. AutoAgents (Chen et al., 2024) draws a connection between tasks and roles by dynamically generating multiple agents based on the task content and design an executable solution from a planner agent, achieving the task through the collaborative efforts of multiple specified agents. Concurrently, the framework incorporates observer roles with the objective of reflecting and enhancing the specified plans and the responses of the agents.\nRule-based System. Rule-based systems automate problem-solving know-how and provide means for that capture and refines human expertise (Hayes-Roth, 1985; Davis and King, 1984). Rule-based systems have been further developed in the field of mixture of expert (MoE) systems (Grosan et al., 2011; Yuksel et al., 2012) in several application areas, including classification, generation, recognition, and logical reasoning etc. The study of rule-based systems' interpretability has been a very crucial direction in the field of artificial intelligence. Explainable artificial intelligence (XAI) aims to address the problem of black-box models. Wang et al. proposed Bayesian Rule Set (BRS) based on Bayesian theory and proved its interpretability (Wang et al., 2017). Liu et al. investigated the interpretable representations of rule-based networks showing that rule-based models help to discover deep knowledge (Liu et al., 2017). SHAP (Van den Broeck et al., 2022) is a game theory-based approach that aims to provide global explanations of the predictions of any machine learning model. RuleXAI (Macha et al., 2022) is an interpretability study of rule-based models based on the SHAP algorithm, in which the authors demonstrate that the rule-based and tree-based models used for classification, regression and survival analysis tasks are explicable."}, {"title": "3 Interpretable Rule-Based Multi-Agents Cooperative Framework: XAgents", "content": "XAgents is a multi-agent framework based on domain rules, comprising two principal phases: task planning and task execution. In the planning phase, the planner agent (PA) is responsible for organizing a workflow appropriate for the input task. This step involves the generation of a task execution graph (TEG) that represents the sequence of tasks to be performed. Additionally, the PA assigns specific roles to the agents within the nodes of the graph designated to have special responsibilities. In the TEG, the complex task is initially decomposed into a series of discrete, relatively simple sub-tasks. Finally, the outputs of these sub-tasks are integrated to generate the final result.\nAs illustrated in Figure 2, the Task Node represents the initial node T at the commencement of the TEG, followed by the sub-task nodes connected to it. The sub-tasks [T\u2081, ..., TN] constitute the primary component of the TEG, and the final result is attained by integrating the responses of all the sub-tasks through the fusion node F, as showed in Eq. (1). The TEG is an unweighted directed acyclic graph, tailored to each intricate task.\nG = (V,E) = PA(x) (1)\nWhere x is the complex task, G is the task execution graph, PA is the planer agent processing unit for initializing all the agents of the whole task workflow which is to build TEG, V = {T, T\u2081, ..., TN, F} is the node set of the TEG, E is the edges set of the TEG, E = {T \u2192 T\u2081, T \u2192 T\u2082, ..., TN \u2192 F}.\nThe effective completion of sub-tasks is crucial to the success of the XAgents execution phase. The fulfillment of each sub-task node requires the involvement of multiple agents, including a Inference Expert Agent (IEA), a Domain Analyst Agent (DAA), Domain Expert Agents (DEAs), and a Fusion Expert Agent (FEA), as illustrated in the Sub-Task Node part of Figure 2. These agents are integrated into an IF-THEN rule-based system. In the planning phase, the planner agent does not generate detailed domain rules or set up the relevant DEAs. Instead, it delegates the task of generating specific domain rules to the DAA in the execution phase, following domain analysis, as shown in Eq. (2). Consequently, during the execution phase, each sub-task node is dynamic, as are the domain rules associated with it, as shown in Eq. (3). FEA fuses the domain responses from DEAs with different domain-specific knowledge in the THEN-Parts of Domain rules, as shown in Eq. (4).\nRules = [Rule\u00b9, Rule\u00b2,\u2026\u2026\u2026, Rule] = DAA(T) (2)\nRrules = [Rrule1,\u2026\u2026\u2026, Rrulek] = IEA(Rules, Ti, Pi) (3)\nRsub = FEArules (Rrules) (4)\nwhere DAA(.) is the domain analyst agent processing unit, IEA(.) is the inference expert agent processing unit, FEArules(.) is the fusion expert agent processing unit for rules, Ti is the ith sub-task, Rules are the rules generated by the DAA, Pi is the input to the i-th sub-task node and the response of the previous node, Rsub is the output of the i-th sub-task, Rules = [Rule\u00b9, Rule\u00b2,...,Rule], K is the number of the domain rules in the sub-task, and Rules is the rule set of the rule-based system in the sub-task node, which generalized form is shown in Eq. (5), k = 1,2, ... \u039a.\nIF x is of the k-th domain, THEN y = DEA(x) (5)\nAt the end of the execution phase, the fusion expert agent fuses the outputs of the previous sub-task nodes to output the final result.\nRfinal = FEAsub(F,Pf) (6)\nWhere FEAsub is the fusion expert agent processing unit for the sub-tasks, Pf is the input to the fusion node, Pf = [Rsub1, Rsub2,..., Rsubm], M is the number of the sub-tasks for fusion, and Rfinal is the final result of the whole task.\nDomain Rule-based Logical Reasoning. The rule-based system is located at each sub-task node, generated dynamically and adaptively based on specific task domains. Each rule comprises two distinct parts: IF-Part and THEN-Part. The IF-Part is concerned with calculating the membership of the sub-task with each rule, while the THEN-Part contains a DEA able to cope with the domain-specific tasks. The domain membership calculation in XAgents is carried out by semantic reasoning from the DAA instead of mathematical computation. As a result, the results are discrete semantic terms (High, Sub-High, Low etc.) instead of continuous values. Each rule processes tasks from distinct specific domains and provide expert responses from its own individual domain. The logical reasoning based on rules is built from the semantic reasoning of the IF-Parts, which determine the membership of the task according to the domain rules. The THEN-Part contains a DEA that is able to process domain-specific tasks and generate domain-specific responses. The rule-based logical reasoning system is capable of resolving the ambiguity and uncertainty inherent in the task, thereby generating crisp and precise results.\nMulti-View Knowledge Enhance. In the XAgents, each DEA in the THEN-Part represents a view from a specific knowledge domain. Therefore, the rule-based system is a multi-view system with distinct pieces of domain knowledge. When processing a task, the system employs the multi-view mechanism to obtain the responses from multiplex domain expert views. These individual responses are then combined by a FEA to deliver a final response of superior quality. The rule-based system facilitates the generation and enhancement of knowledge through the multi-view mechanism, while simultaneously mitigating the potential for illusions and ambiguities that may arise in LLMs."}, {"title": "4 Experiments", "content": "4.1 Datasets and Experiment Setting\nTask1.Trivia Creative Writing (Wang et al., 2023b). The task tests LLMs' ability to retrieve and integrate diverse information from their internal knowledge. In this task, a model must craft a coherent story around a given topic while incorporating answers to N trivia questions. We evaluate the models with N set to 5 and 10, where a higher N requires more extensive domain knowledge. Our benchmark includes 100 instances for each N, totaling 1,000 trivia questions.\nTask2. Logic Grid Puzzle. The task is from the Bigbench dataset (Srivastava et al., 2023), which comprises 200 instances. Each instance describes a logic puzzle involving 2 to 5 houses, each occupied by a person with specific characteristics, such as playing the piano. The goal is to answer questions about house numbers based on given clues, requiring multi-step reasoning and the selection of relevant information. For evaluation, we measure the accuracy of the predicted house numbers by comparing them to the ground truth targets provided by the dataset.\nTask3. Codenames Collaborative (Wang et al., 2023b). The task is an extension of the Codenames task from the BigBench. Codenames Collaborative is a collaborative task that examines a model's knowledge, reasoning, and theory of mind abilities by assigning two player roles: the Spymaster and the Guesser. The Spymaster's role is to provide a hint word related to the target words, excluding some other distractor words, while the Guesser's role is to identify the target words based on the given hint and the full list of words. Evaluation Metrics. Drawing on the approach of (Wang et al., 2023b), we adopt an automatic metric to identify factual errors and measure a model's capacity to integrate diverse domain knowledge. We conduct string matching with the veridical target answers for each question on the generated output. The generalized form is shown as Eq. (7).\nScore = $\\frac{Acorrect}{Na}$ (7)\nWhere Na is the number of questions, Acorrect is the number of correct answer mentions, Score is the metrics score for the tasks.\n4.2 Performance Analysis"}, {"title": "5 Discussion", "content": "XAgents vs MoE. MoE is a machine learning model architecture that combines multiple specialized models (experts) to handle different parts of a task (Masoudnia and Ebrahimpour, 2014). The essential elements of MoE model are the experts, the gating network, and the combined outputs (Yuksel et al., 2012). The gating network determines which experts are to be used for each input. In the context of XAgents, the primary roles of a rule-based system are that of a domain expert, domain analyst and fusion expert. MoE and the rule-based XAgents exhibit notable similarities in the terms of system structure. However, the XAgents framework incorporates a rule-based reasoning process, which facilitates the elimination of errors and ambiguous information. XAgents does not necessitate the provision of training resources or datasets, with the requisite knowledge derived from LLMs. Furthermore, XAgents allows for the incorporation of expert knowledge and experience through rule-based embedding, which capability is not available with MoE.\nXAgents vs Ensemble Learning. Ensemble learning (EL) (Dietterich, 2000) is an approach to accomplish tasks such as classification by constructing multiple weak learners and combining them into one strong learner. It can be demonstrated that EL methods can significantly enhance prediction performance in comparison to an individual learner. The rule-based system of XAgents integrates domain expert agents, which are analogous to pre-trained strong learners of EL. However, XAgents is unable to learn knowledge in the same way as EL, due to the fact that it can't update the domain knowledge of the pre-trained LLMs. Instead, the agents are capable of thinking and reasoning in order to gain more useful knowledge. In contrast, EL has no rule-based reasoning ability and is therefore unable to solve problems by further drawing on the leaners' intrinsic knowledge and hidden patterns."}, {"title": "Conclusions", "content": "Inspired by the structure of multipolar neurons, we designed XAgents, a multi-agent framework based on rule-based systems. We conducted the experiments on three datasets and analyzed the performance of XAgents. The results demonstrates that XAgents outperforms the state-of-the-art Auto-Agents. For a task, XAgents generates the responses from different domain experts and fuses these responses to obtain a final result of high quality. In terms of interpretability, we investigated the rule-based interpretability of XAgents using the SHAP algorithm, proving that XAgents exhibits global interpretability. We also study the intrinsic rule-based interpretability of XAgents through the case study at the semantic level. XAgents creatively uses the two mechanisms to solve the adversarial problems between various rules to suppress the hallucinations of LLMs. Though XAgents has an excellent performance, there are areas for improvement. Firstly, XAgents do not support multi-modal data processing. Secondly, the structure of the task execution graph generated by the planner is static and cannot be dynamically adjusted. Future works will focus on making to support multi-modal tasks and expand its application scope."}, {"title": "4.3 Interpretability Analysis", "content": "In order to further analyze the interpretability of XAgents, we semantically analyzed a specific sub-task processing on the Trivia Creative Writing. First, the question of the sub-task was analyzed by DAA and found to be highly related to the Entertainment-and-Media domain, to a medium degree to the Arts-and-Design and History domains, as shown in the Figure 5. DAA then generates three corresponding IF-THEN domain rules, namely Rulel, Rule2 and Rule3 in the Figure. The sub-task is processed by the three rules in three different domains and then fused by FEA to obtain the final answer.\nSemantically Interpretability. In the example shown in Figure 5, after the DAA analysis, it determines that the sub-task is highly correlated with the Entertainment-and-Media domain, and less correlated with the Arts-and-Design and History domains, consistent with the judgements of the human experts. After processing these three rules, the DEAs generates the answers from three expert perspectives. According to the analysis, the answers of Rulel and Rule3 are semantically highly consistent, and the fused answer is also consistent with the real target. The correlation between Rule2 and the sub-task is medium, and therefore the output with conflicting semantics has a minimal impact on the final result. This reasoning process conforms to the human prior knowledge and demonstrates the semantically interpretability that XAgents offers in the process of domain rule-based reasoning.\nSemantic Adversarial Generation. In Figure 5, Rule2's answer semantically conflicts with the other answers, and the main disagreement is the movie name. From the semantic analysis, both Rulel and Rule3 support that the name is \"Guess Who's coming to Dinner\" (1967) while Rule2 supports that it was \"The Lion in Winter\" (1968). XAgents solves the problem of semantic conflict and fuses the domain rules' answers into a consistent final result by two mechanisms. Initially, we implement a voting mechanism that assigns trust degrees based on the votes of distant semantics. The higher votes lead to a higher trust degree, while the fewer votes result in a lower trust degree. Subsequently, by considering the domain membership, we evaluate the trust degree of semantics, awarding a high trust degree to those semantics which are generated by the domain rule with high membership and a low trust degree to those with low membership. By utilizing the two mechanisms, XAgents remove the semantic pieces of information with low trust degree. Furthermore, our analysis demonstrates that XAgents is capable of solving semantic adversarial problems and generating results that are highly trustworthy. This is evidenced by the additional cases presented in Part 6 of the Supplementary Materials."}]}