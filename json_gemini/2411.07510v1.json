{"title": "An Attack Traffic Identification Method Based on Temporal Spectrum", "authors": ["Wenwei Xie", "Jie Yin", "Zihao Chen"], "abstract": "To address the issues of insufficient robustness, unstable features, and data noise interference in existing network attack detection and identification models, this paper proposes an attack traffic detection and identification method based on temporal spectrum. First, traffic data is segmented by a sliding window to construct a feature sequence and a corresponding label sequence for network traffic. Next, the proposed spectral label generation methods, SSPE and COAP, are applied to transform the label sequence into spectral labels and the feature sequence into temporal features. Spectral labels and temporal features are used to capture and represent behavioral patterns of attacks. Finally, the constructed temporal features and spectral labels are used to train models, which subsequently detects and identifies network attack behaviors. Experimental results demonstrate that compared to traditional methods, models trained with the SSPE or COAP method improve identification accuracy by 10%, and exhibit strong robustness, particularly in noisy environments.", "sections": [{"title": "1 Literature Review", "content": "In early research, Gupta et al.[6] proposed a network intrusion prevention system (IPS) model based on tree classifiers, focusing on anomaly detection in IoT traffic. The model's effectiveness was validated within IoT environments. Ma et al. [7] combined support vector machines (SVMs) with clustering methods to classify traffic features, this method significantly enhances detection capabilities in complex network environments. Traditional machine learning methods typically select features with high relevance with target variables form an optimal feature subset to reduce data dimensionality and computational costs. These features are then used to train classifiers, which ultimately detect and identify attack traffic.\nHowever, traditional machine learning approaches often focus only on specific key features of network traffic, neglecting inter-feature relationships. Due to the massive scale and complex structure of network traffic data, these methods face limitations in processing capabilities, making it difficult to perform comprehensive and accurate analysis, which results in frequent false positives and false negatives. As attack types grow increasingly complex, traditional methods show significant shortcomings in handling high-dimensional data and diverse attack patterns. Their performance gradually weakens in emerging, complex network environments, making reliable detection increasingly difficult[8].\nDeep learning methods have recently become the mainstream for network traffic analysis. Wang et al. [9] introduced a model combining Generative Adversarial Networks (GANs) and Transformer architectures, achieving improved accuracy in identifying malicious behaviors in complex network traffic. Jung et al. [10] employed Autoencoders to capture both continuous and discontinuous patterns in data, detecting anomalies through reconstruction errors, effectively handling large-scale network traffic. Zamanzadeh et al. [11] highlighted the ability of deep learning to capture temporal and spatial features, significantly improving the accuracy and robustness of time-series anomaly detection.\nFurthermore, Feng et al.[12] utilized Convolutional Neural Networks (CNNs) to classify VPN traffic, addressing inefficiencies in traditional methods when dealing with encrypted and obfuscated traffic. CNN-based feature extraction from raw data enhanced classification accuracy, particularly for encrypted traffic, achieving higher identification rates in real-world network environments. Long Short-Term Memory (LSTM) networks, well-suited for handling sequential data, excel in capturing temporal characteristics such as timestamps and durations in traffic data[13], Bahe et al. [14] demonstrated the superiority of LSTM in traffic aggregation prediction, showing its ability to uncover intrinsic correlations among features.\nExisting studies reveal that both traditional and deep learning methods have unique strengths in network traffic attack detection. Traditional approaches like SVM and clustering techniques achieved remarkable success in the early stages but struggle with high-dimensional and complex traffic[8]. Although deep learning excels in feature extraction and temporal modeling, its dependency on large, high-quality datasets makes models vulnerable to instability when processing noisy data[15][16].\nTo enhance model robustness, techniques such as adversarial training and data augmentation can be applied[17]. However, network traffic often suffers from imbalanced sample distributions, where normal samples far outnumber abnormal ones. Constructing balanced datasets demands substantial time and effort. Additionally, deep learning methods require significant computational resources, making it challenging to meet the demands of real-time analysis.\nDeep learning techniques demonstrate substantial advantages in capturing complex features and temporal dependencies. To better extract time-series features, Tang et al. [18] proposed a multi-network anomaly detection framework combining label neural networks with LSTM. By learning business logic labels, this approach improved model robustness and detection accuracy. S\u00f8rb\u00f8 et al. [19] explored the impact of label generation strategies on detection performance, emphasizing the importance of label generation methods in enhancing detection outcomes. Pekar et al. [20] introduced a network attack detection method based on advanced flow label generation. Through improved data flow labeling and spectral analysis, their model exhibited enhanced adaptability to dynamic traffic in real-world scenarios."}, {"title": "2 Research Methodology", "content": "The overall framework, as illustrated in Figure 1, consists of two main components: Dataset Construction and Model Training. The \"Dataset Construction\" component involves converting raw network packets and labels into datasets for model training, while the \"Model Training\" component focuses on training regression or classification models and evaluating their performance.\nFirst, network data is extracted from PCAP files and segmented into multiple traffic sequences and corresponding label sequences with a sliding window. Each traffic sequence is a set of sequential network packets, and each label sequence is a set of original labels. Next, through feature selection and a flattening operation, the two-dimensional traffic sequences are transformed into traffic features, and the SSPE/COAP algorithm is applied to convert label sequences into spectrum-based labels. Finally, the constructed traffic features and spectrum labels are used to create a new dataset for subsequent model training.\nThis study employs two sets of experiments to validate the effectiveness of SSPE/COAP in detecting and identifying attack traffic by training classification and regression models: The dataset undergoes standardization, sampling, and splitting into training and testing sets before training models. For the attack detection task, the spectrum labels are binarized and used as training labels to train a binary classification model, with its performance evaluated. For the attack identification task, the spectrum labels are directly used as training labels, and the model outputs are analyzed to identify attack types based on the distribution of spectrum values."}, {"title": "2.2 Traffic Feature Construction", "content": "Traffic feature construction involves four main steps: Missing Temporal Point Filling, Feature Selection, Traffic Sequence and Label Sequence Generation, and Feature Aggregation.\nIn raw traffic data, missing temporal points are common. To address this issue, this study randomly samples normal traffic data from normal samples to fill the missing points, ensuring the continuity of the time series. This approach facilitates better feature extraction. Figure 2 illustrates the results of the filling process."}, {"title": "2.3 Spectrum Label Construction", "content": "The label sequence is a binary time series, where 0 represents normal traffic and 1 represents attack traffic. Spectrum label construction maps the label sequence to a real number, which serves as the spectrum label. This study employs two methods for generating spectrum labels: COAP (Count of Attack Packets) and SSPE (Sum of Sinusoidal Positional Encoding).\nThe COAP method disregards positional information within the sequence and directly counts the number of attack packets. COAP intuitively reflects the intensity of an attack, making it suitable for scenarios requiring rapid evaluation of attack frequency. The calculation is defined as shown in Formula 1:\n$L_{COAP} = \\sum_{pos=0}^{N} Label_{pos}$ (1)\nWhere:\n\u2022\t$N$ is the length of the label sequence.\n\u2022\t$Label_{pos} \\in {0,1}$ is the original label of the $pos$ number packet.\n\u039f\tA label of 0 indicates normal traffic.\n\u039f\tA label of 1 indicates abnormal (attack) traffic.\n\u2022\t$L_{COAP}$ is the spectrum label.\nTo address the loss of positional information in the COAP method, this study adopts the sinusoidal positional encoding approach as referenced in the paper[21]. This method encodes the positions in the traffic sequence using sine and cosine functions. The position encodings are then multiplied with the corresponding label values and summed to generate the spectrum label.\nSince the label sequence is a binary time series, multiplication can effectively filter out the influence of normal traffic (with label value 0), leaving only the information related to attack traffic. SSPE can more precisely describe the temporal changes in attack behavior. The calculation method is shown in Formula 2.\n$L_{SSPE} = \\sum_{pos=0}^{N} \\sum_{i=0}^{dmodel} Label_{pos} \\times PE_{pos,i}$ (2)\nWhere:\n\u2022\t$N$ is the length of the label sequence.\n\u2022\t$Label_{pos} \\in {0,1}$ is the original label of the $pos$ number packet.\n\u039f\tA label of 0 indicates normal traffic.\n\u039f\tA label of 1 indicates abnormal (attack) traffic.\n\u2022\t$dmodel$ is a hyperparameter that represents the encoding dimension.\n\u2022\t$PE_{pos,i}$ is the position encode of the $pos$ and the $i$ dimension.\n\u2022\t$L_{SSPE}$ is the spectral label.\n$PE_{pos}$ represents the position encode of the $pos$ packet, and the calculation method is shown in Formula 3.\n$PE_{pos} \\begin{cases} PE_{(pos,2i)} = sin(\\frac{pos}{10000^{2i/dmodel}})\\ PE_{(pos,2i+1)} = cos(\\frac{pos}{10000^{2i/dmodel}})\\ \\end{cases}$ (3)\nWhere:\n\u2022\t$dmodel$ is a hyperparameter that represents the encoding dimension.\n\u2022\ti is the dimension index."}, {"title": "2.4 Data Preprocessing", "content": "The Z-Score method is used to standardize the feature values, with the calculation method shown in Formula 4.\n$x'_{i,j} = \\frac{X_{i,j}-\\mu_j}{\\sigma_j}$ (4)\nWhere:\n\u2022\t$X_{i,j}$ is the value of the $j$ feature of the $i$ sample.\n\u2022\t$\\mu_j$ is the mean of the $j$ feature.\n\u2022\t$\\sigma_j$ is the deviation of the $j$ feature.\n\u2022\t$x'_{i,j}$ is the standardized value the $j$ feature for the $i$ sample."}, {"title": "2.5 Model Training", "content": "This study verifies the model's robustness with noise through two tasks: attack detection and attack identification. The attack detection task uses a binary classification model to distinguish the normal and attack traffic, without identifying the type of attack traffic. The attack identification task uses a regression model to output the spectrum labels of the traffic, and the attack type is identified based on the similarity of the spectrum labels distribution.\nThe constructed spectrum labels are continuous values. Before training the binary classification model, the spectrum labels are binarized with a threshold. The processing method is shown in Formula 5\n$x' = \\begin{cases} 1 \\ \\ 0 \\ \\end{cases} \\begin{matrix} if \\ x \\geq \\tau \\\\ if \\ x < \\tau \\end{matrix}$ (5)\nWhere:\n\u2022\tx is the spectrum label.\n\u2022\t$\\tau$ is the pre-defined threshold.\n\u2022\tx' is the binarized label.\nIn this study, the threshold $\\tau$ is determined based on the percentile corresponding to the proportion of attack samples. The calculation method is shown in Formula 6.\n$\\tau = Percentile(X,\\frac{N_1}{N} \\times 100)$ (6)\nWhere:\n\u2022\tX is the spectrum label sequence arranged in ascending order.\n\u2022\tN is the length of the sequence.\n\u2022\tN\u2081 is the number of elements in the sequence with a label of 1.\n$\\tau$ is the selected threshold.\nThe attack type is identified by calculating the similarity between the model's output spectrum labels distribution and the true spectrum labels distribution. Cosine similarity[22] is used for the similarity calculation. The method is shown in Formula 7.\nc* = argmin\u00bf(1 $\\frac{y \\cdot xi}{||y||||xi||}$) (7)\nWhere:\n\u2022\ty is the spectrum labels distribution vector output by the model.\n\u2022\txi is the spectrum labels distribution vector of the i attack in the dataset.\n\u2022\tc* is the identified attack type.\nIn this study, AutoML tool H2O (V3.46.0.4) was employed for training. Total five models, including ANN, GBM, GLM, RF, and XGBoost, were selected for classification and regression tasks. The modified hyperparameters are shown in Table 2 (with default values for unchanged parameters)."}, {"title": "2.6 Model Evaluation", "content": "In the attack detection task, the binary classification model directly outputs classification results, and is evaluated using common classification metrics, including Accuracy, Precision, Recall, and F1-score.\nIn the attack identification task, the identification is performed based on similarity, and the evaluation metric is the identification accuracy, with the calculation method shown in Formula 8.\nAccuracy = $\\frac{Correctly Identified Samples}{Total Samples}$ (8)"}, {"title": "3 Simulation Experiments", "content": "In this study, the dataset Edge-IIoTset[5] was used, which is a network security dataset specifically designed for the Industrial Internet of Things (IIoT). The dataset was generated by capturing network packets with the tool of tcpdump to create PCAP files, and then using tools such as Zeek and TShark for session aggregation and feature extraction. The Edge-IIoTset dataset contains 14 attack types related to IoT and IIoT devices, which are categorized into five major attack types: Denial of Service (DoS/DDoS) attacks, information gathering, man-in-the-middle attacks, injection attacks, and malware attacks.\nThis study builds upon the experiment in of the dataset Edge-IIoTset by simulating real-world application scenarios through the addition of random noise to feature values. The robustness of models trained using the SSPE/COAP methods was evaluated under different noise ratio environments.\nFirst, samples to be noised were randomly selected based on a specified ratio. Then, random noise was added to the feature values of the selected samples. In this study, 11 test sets with varying noise ratios ranging from 0% to 100% (in increments of 10%) were constructed through this process, as detailed in Table 3."}, {"title": "3.3 Experimental Results", "content": "During the construction of spectrum labels with SSPE and COAP, the impact of sliding window size and sinusoidal positional encoding dimension on the results was carefully analyzed. Multiple experiments were conducted with varying sliding window sizes (10, 20, 30, 40, 50, 60) and sinusoidal encoding dimensions (2, 4, 8, 16, 32, 64, 128, 236, 256). The optimal sliding window size and sinusoidal encoding dimension were determined based on the similarity and normality of the generated spectrum labels distributions. The selected parameters are shown in Table 4, and the resulting spectrum labels distributions are depicted in Figure 5. The results indicate that compared to COAP, spectrum labels generated using SSPE exhibit more details and are closer to one or multiple normal distributions.\nIn the attack detection task, we trained five classification models: ANN, GBM, GLM, RF, and XGBoost. These models were tested in environments with varying noise ratios, and their performance was evaluated by metrics including Recall, Precision, Accuracy, and F1-score.\nThe average performance of these models with noise ratio is shown in Figure 6 (with the horizontal axis is the noise ratio and the vertical axis is the evaluation metrics). In an environment with a noise ratio of 100% (all samples are noised), the performance of each model is detailed in Table 5.\nThe results show that models trained using traditional methods experience a rapid performance decline as the noise ratio increases. In contrast, models trained using the SSPE or COAP methods demonstrate significantly better noise resistance, with comparable robustness between the SSPE and COAP methods.\nIn a fully noisy environment (where 100% of the samples contain random noise), models trained using the SSPE and COAP methods achieved an average accuracy improvement of 10% compared to those trained with the baseline method. As presented in Table 6.\nWe trained five regression models: ANN, GBM, GLM, RF, and XGBoost, to identify attack types by calculating the similarity between the model output spectrum labels distribution and the true spectrum labels distribution. These models were tested in environments with varying noise ratios to evaluate their accuracy. The average accuracy of these five models as a function of noise ratio is shown in Figure 7 (the horizontal axis is the noise ratio, and the vertical axis is identification accuracy). In an environment with a noise ratio of 100% (where all samples are noised), the performance of each model is shown in the table 7. The results indicate that models trained using SSPE perform better in the attack identification task."}, {"title": "3. Conclusion and Future Work", "content": "This paper presents a method for identifying attack traffic through time-series spectra labels, aiming to address issues such as insufficient model robustness, unstable features, and noise interference in existing network traffic attack detection and identification tasks. The method segments the traffic using a sliding window, applies the Flatten operation to convert traffic sequences into features, and converts label sequences into spectrum labels using the SSPE or COAP algorithms.\nExperimental results show that models trained on datasets constructed using SSPE or COAP outperform traditional machine learning methods in both attack detection and identification tasks, particularly in noisy environments, where the models exhibit stronger robustness. In a fully noisy environment, SSPE and COAP methods achieved 10% improvement of average accuracy.\nIn the future, we will deeply research in the following two areas: First, we will explore combining spectrum generation methods with deep neural networks and large models to enhance the model's expressive ability and improve network attack identification accuracy. Second, we will experiment with SSPE and COAP algorithms to transform feature values, enriching the features to further enhance the network attack recognition capability."}]}