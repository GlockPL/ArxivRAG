{"title": "Exploring Feature Importance and Explainability Towards Enhanced ML-Based DoS Detection in AI Systems", "authors": ["Paul Badu Yakubu", "Evans Owusu", "Abdellah Chehri", "Lesther Santana", "Mohamed Rahouti", "Kaiqi Xiong"], "abstract": "Denial of Service (DoS) attacks pose a significant threat in the realm of AI systems security, causing substantial financial losses and downtime. However, AI systems' high computational demands, dynamic behavior, and data variability make monitoring and detecting DoS attacks challenging. Nowadays, statistical and machine learning (ML)-based DoS classification and detection approaches utilize a broad range of feature selection mechanisms to select a feature subset from networking traffic datasets. Feature selection is critical in enhancing the overall model performance and attack detection accuracy while reducing the training time. In this paper, we investigate the importance of feature selection in improving ML-based detection of DoS attacks. Specifically, we explore feature contribution to the overall components in DoS traffic datasets by utilizing statistical analysis and feature engineering approaches. Our experimental findings demonstrate the usefulness of the thorough statistical analysis of DoS traffic and feature engineering in understanding the behavior of the attack and identifying the best feature selection for ML-based DoS classification and detection.", "sections": [{"title": "I. INTRODUCTION", "content": "Internet Service Providers (ISPs) around the globe continue to experience a dramatic growth in network attacks. Notably, the Denial of Service (DoS) is considered one of the most harmful attacks on networked systems. Such attacks cost an average of $22,000 for every minute of downtime they cause, resulting in an average loss of $120,000 per attack for small to medium-sized businesses [1]. Therefore, understanding DoS traffic behaviors and containing DoS attacks become necessary and substantial.\nUnder DoS attacks, the network can become overwhelmed by the burst of traffic, rendering it unavailable to process legitimate service requests from clients or other network entities. DoS type of network anomalies is classified into exploitation and reflection attacks. The escalation of these anomalies on the Internet has remarkably shifted the attention of researchers/service providers to explore network threats deeply [2]. Various studies have been conducted to investigate network anomalies' potency and propose novel detection and mitigation mechanisms in the past [3], [4]. However, a noticeable problem remains challenging in this direction. It is related to the stealthiness of application layer DoS attacks, as this type of anomaly does not typically manifest at the network level, allowing these anomalies to evade the conventional network layer detection solutions. It is crucial to have an in-depth perception of network traffic behaviors and promptly detect and control network DoS attacks. Thus, this work tries to analyze the traffic behaviors of various DoS anomalies and distinguish them from normal network traffic for further lightweight detection.\nSpecifically, we aim to leverage component analysis and ML techniques for efficient traffic analysis and detection of DoS attacks, the dominant security threat to the Internet. Most existing efforts rely on threshold-based heuristics and/or simple statistics, which cannot meet the real-time requirement of Internet systems, especially facing the ever-growing number and scales of different types of DoS attacks. We propose to fill this gap by properly deploying feature selection with efficient exploratory analysis of DoS behavior for resource-efficient characterization of Internet traffic flows. That is, we present an efficient methodology for network traffic flow characterization and classification models based on a broadly-used statistical method and new traffic data screening and selection. In addition to the commonly used flow-level features, we consider more informative metrics that capture traffic flow's volume and velocity features to improve the analysis's accuracy and precision."}, {"title": "II. RESEARCH PROBLEM AND GOALS", "content": "DoS attacks remain a significant threat to computer networks, causing disruption and loss of service. ML techniques have been widely used to detect and prevent these attacks. However, the large volume and high-dimensional nature of network traffic data present a challenge for accurately and efficiently detecting DoS attacks using these ML algorithms.\nIn this work, we aim to investigate the effectiveness of using Principal Component Analysis (PCA) procedures to filter out irrelevant features from the LYCOS-IDS2017 dataset [5] before training ML models for detecting DoS attacks. We hypothesize that using PCA to filter out irrelevant features from the dataset will improve the accuracy of the ML models while reducing the computational cost. Additionally, we expect that by comparing the performance of different ML models, including decision trees (DTs), random forests (RFs), and support vector machines (SVMs), we can identify the most effective model for DoS attack detection.\nFurther, finding highly relevant/important features to exploring DoS patterns in the network dataset is vital. Therefore, we must examine the highly pertinent features for each flow class label and discard irrelevant (low-importance) features. This can assist in training the classification model in a lightweight setup (lightweight classifier) with a small set of features while alleviating the overfitting problem.\nThe overall research goal is to explore how feature importance and explainability can help enhance the learning model performance and DoS detection accuracy and how to optimally analyze the behavior of DoS events based on dataset component comparisons. For this goal, the dataset must first be preprocessed by removing irrelevant features and then conduct a comprehensive exploratory analysis of feature importance. We will next train multiple ML models, including DTs, RFs, and support vector machines, to detect DoS attacks using the preprocessed dataset. We will evaluate the performance of the trained models using various metrics such as accuracy, precision, recall, and F1 score.\nWe will further compare the performance of our methods with other state-of-the-art ones for detecting DoS attacks, including ML techniques that do rely on component analysis procedures for feature selection. By comparing the results, we will identify the most effective method for detecting DoS attacks using the LYCOS-IDS2017 dataset. The objectives of this work are (1) reducing the networking traffic dataset dimensionality, (2) alleviating the selection of correlated features (selecting only the important features that capture the majority of the variation in the data), and (3) enhancing the results' interpretability and generalizability (by reducing the risk of overfitting and improving the ability of ML models to generalize to new and unseen traffic patterns). The outcome of this work can provide a better understanding of the effectiveness of using component analysis procedures to filter out irrelevant features from the network traffic datasets for anomaly detection."}, {"title": "III. RELATED WORKS", "content": "The escalation of DoS attacks on networks has significantly shifted the attention of researchers/service providers to investigate network-based DoS events intensively [2]. Several studies have been carried out to explore the potency of DoS events and to introduce novel detection and mitigation approaches in the past years [3], [4], [6], [7]. Further, DoS event traffic does not usually manifest at the network level, and they, therefore, can easily evade the traditional network layer detection methods.\nOn the one hand, feature engineering can implicitly impact the DoS events detection efficiency [8]. Thus, the effect of feature/component analysis procedures on Internet traffic is worth exploring as most of the statistical and ML solutions typically do not rely on exploratory analyses of feature importance, thus introducing distortion in the traffic, degrading the detection accuracy and capability to monitor the traces of DoS attacks [9]. On the other hand, understanding the statistical similarities in Internet flows can help differentiate DoS attacks from flush crowd events. Several existing studies tried to address such traffic characterization by utilizing discrimination techniques based on the flow statistical metric similarity obtained from the collected traffic [10].\nFurther, feature selection is crucial in real network traffic, especially in high-dimensional network flows. A large number of Internet traffic features can lead to lengthy, resource and time-consuming training processes (especially under the presence of highly-correlated features), while the prediction accuracy does not consequently improve [11]. Several studies investigated feature selection approaches for DoS event detection. Among them, Saha et al. [12] evaluated the performance of feature selection approaches in DoS detection using deep learning and ML models. Sarhan et al. [13] examined essential feature sets to improve the generalisability of ML-based anomaly classification."}, {"title": "IV. METHODOLOGY", "content": "We used the LYCOS-IDS2017 datasets [16] created by LycoSTand flow extractor [5], which consists of five datasets corresponding to five days of the week. The dataset comprises 1,837,498 entries, each representing a network flow with 83 features. To split the dataset, we followed the same approach as the Lycos authors, which involves building training and test sets by randomly selecting 50% of each attack for the training set, 25% for the cross-validation set, and 25% for the test set. \nThe selection of the LYCOS-IDS2017 dataset over other datasets, such as CIC-IDS2017 [17], is justified in [18]. One key advantage is the efficient handling of TCP session terminations during flow and packet processing. In UDP, the end of a flow is determined by a timeout, which is comparable to the way some TCP communications end. In typical TCP connections, flow duration is calculated between the synchronization (SYN) and finish (FIN) flags. In the LycoSTand flow extractor, UDP flows are closed with a configurable timeout of 120s, whereas TCP flows are closed as soon as a packet with reset (RST) or FIN flags are detected. The flowID is then added to the \u201cTCP terminated\u201d list. When a new TCP packet arrives, it checks if the flowID is in the TCP terminated list. If it is, LycoSTand drops packets associated with that session termination until a new flow with the SYN flag is detected, which starts a new session. The TCP terminated list is then updated with each packet by removing packets older than the maximum duration, calculated using timestamps [18]."}, {"title": "B. Data Pre-processing and Exploratory Analysis", "content": "PCA is used to reduce the dimensionality of a dataset by transforming the original features into a new set of uncorrelated features, aka principal components. Reducing the number of variables in our dataset may lead to a loss in accuracy. Still, the aim is to trade some accuracy for simplicity, which speeds up the analysis of data points for ML algorithms. The goal is to establish a smaller dataset that is easier to work with and still retains much of the original traffic information.\nFurther, since all entries were initially null in the output flow file, we removed the three URG flag-related in addition to the flow characterization features (id, src and dest IPs and port, and protocol). Next, since we had ample feature space, we used PCA for dimensionality reduction. PCA has a tunable number of components to keep, determining the variance retained in the data. We utilized a pipeline of Z-score normalization and PCA with a DT using the training dataset to find the number of components to maintain. We measured how model performance varied by the number of components to keep using five-fold cross-validation. Building upon this, we computed the accuracy, precision, recall, F1, false positive rate (FPR), and training and inference for different targets of variance explained by the PCA components (50%, 60%, 70%, 80%, 90%, 95%, and 99%). Note that FPR is the percentage of benign traffic classified as attacks."}, {"title": "C. Dimensionality Reduction using DT", "content": "Separately identifying important features relevant to DoS patterns in the dataset is crucial. Here, we aim to explore the highly pertinent features for each flow class label and discard irrelevant (low-importance) ones. As a result, this helps train the classification model with a small set of features (lightweight classifier) while alleviating the overfitting problem.\nThe analysis of feature importance using a DT identifies the most crucial features in enabling the model to differentiate between benign traffic and DoS attacks accurately. Also, fitting the DT on top of these features produced an accuracy of 99.50%, precision of 99.50%, recall of 99.50%, F1 score of 99.50%, and FPR of 4.3%. The identified features are sorted in order of importance as follows. 1) flag_rst: indicates the number of TCP RST packets in a flow used to terminate TCP connections; 2) pkt_len_std: indicates the standard deviation of packet lengths in the flow; 3) fwd_subflow_bytes_mean: represents the mean number of bytes per subflow (a subset of packets in a flow sharing common characteristics, such as IP addresses and ports) in the forward direction; 4) flow_duration: represents the flow duration, which can be used to identify short-lived flows-based attacks; 5) bwd_pkt_len_mean: indicates the mean size of packets in the backward direction of a flow.; and 6) bwd_pkt_len_tot: represents the total size of packets in the backward direction of a flow."}, {"title": "V. EVALUATION", "content": "Figures 2a and 2b depict two ways to estimate how many components to keep. On the one hand, Fig. 2a plots the eigenvalues of each principal component to find the point where the slope decreases (or elbow) to avoid choosing the components that explain less significant additional variance. On the other hand, Fig. 2b gives the cumulative ratio of variance captured by each principal component sorted from highest to lowest to find how many to choose to retain a certain variance amount.\nBased on the obtained results k-NN achieved the highest precision, recall, and F1 score, with an accuracy of 99.80% and an FPR of only 0.06%. DT and RF also achieved high accuracy scores of 99.66% and 99.81%, respectively, but with higher FPRs compared to k-NN.\nFurther, the linear discriminant analysis (LDA) achieved an accuracy of 90.13%, the lowest among all the algorithms. The quadratic discriminant analysis (QDA) and SVM achieved high accuracy scores of 97.46% and 96.93%, respectively, with SVM incurring the highest FPR of 3.84%. Regarding computational efficiency, k-NN had the longest inference time (6.06 seconds), while SVM had the longest training time (135.68 seconds). DT has relatively larger training times compared to LDA and QDA. DT, LDA, QDA, and SVM had significantly short inference times, while RF had relatively longer inference times. Overall, the results suggest that k-NN performs the best in terms of accuracy and FPR, while LDA has the highest FPR and lowest accuracy.\nThe results using the test dataset indicate that k-NN achieved the highest accuracy, precision, recall, and F1 score, with an accuracy of 99.80% and an FPR of only 0.06%. DT and RF algorithms also showed high accuracy scores of 99.66% and 99.81%, respectively, although with slightly higher FPRs than k-NN. In contrast, LDA showed the lowest accuracy score of 90.13% among all algorithms. QDA and SVM algorithms achieved high accuracy scores of 97.46% and 96.93%, respectively, but SVM showed the highest FPR of 3.84%. Regarding computational efficiency, k-NN had the longest inference time of 6.06 seconds, while SVM had the longest training time of 135.68 seconds. DT had relatively larger training times compared to LDA and QDA. DT, LDA, QDA, and SVM had significantly short inference times, while RF had relatively longer ones. In summary, k-NN showed the best accuracy and FPR, while LDA exhibited the lowest accuracy score and the highest FPR.\nTable V shows the models' performance without the PCA dimensionality reduction pipeline. Comparing it with Table IV and focusing on the FPR, we see better results when PCA is not used. For instance, the FPR of LDA decreased from 2.384% to 0.44%, QDA from 0.64% to 0.40%, k-NN from 0.06% to 0.04%, DT from 0.22% to 0.09%, and RF from 0.10% to 0.03% and SVM from 3.84% to 0.81%. Regarding the other metrics (precision, recall, and F1 score), all models showed performance improvements. For the inference time, the k-NN significantly increased to 3,064 from 6.06 seconds. As a lazy learning algorithm, k-NN has a slower inference process because the dataset has much higher features.\nTable VI shows the performance metrics for different attacks using K-NN as the detection model. The table reports the precision, recall, F1 score, and support for each type of attack. The support column shows the number of instances for each attack in the dataset. K-NN delivers perfect detection performance for the four most common attacks, with precision, recall, and an F1-score of 1.0, meaning that K-NN can accurately detect these attacks without false positives or negatives. However, for the less common attacks, performance varies. For example, for the DoS_goldeneye attack, K-NN has a precision of 95%, which means that 5% of the instances detected as DoS_goldeneye were false positives. The recall is 98%, indicating that the model correctly detected 98% of the DoS_goldeneye attacks in the dataset.\nSimilarly, for the webattack_bruteforce attack, K-NN has a lower precision of 70%, indicating that 30% of the instances detected as webattack_bruteforce were false positives. The recall is 81%, indicating that K-NN correctly detected 81% of the webattack_bruteforce attacks in the dataset. Finally, for the attacks Webattack_xss, Webattack_sql_injection, and Heartbleed, K-NN's performance is poor, with precision and recall of 0 or close to 0. In conclusion, K-NN shows excellent performance for the most common attacks but struggles with less frequent attacks. This highlights the importance of using multiple detection models or developing specialized models for specific attacks to improve overall network security. Ultimately, the k-NN classification results in IV imply that using PCA for feature selection in network intrusion detection models can maintain performance with faster inference times, allowing the model to identify and respond to potential threats quickly."}, {"title": "VI. CONCLUSION", "content": "This work presented exploratory strategies using component analysis processes to investigate the importance of traffic features. Such strategies further help identify the contribution of features to the overall ML-based models for DoS detection. This work can enrich the literature by demonstrating the impact of feature selection on ML solutions for network anomaly detection. The evaluation results showed the importance of exploring feature importance and explainability toward accuracy-improved ML-enabled DoS detection."}]}