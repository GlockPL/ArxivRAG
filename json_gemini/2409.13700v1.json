{"title": "MAS4POI: a Multi-Agents Collaboration System for Next POI Recommendation", "authors": ["Yuqian Wu", "Yuhong Peng", "Jiapeng Yu", "Raymond S. T. Lee"], "abstract": "LLM-based Multi-Agent Systems have potential benefits of complex decision-making tasks management across various domains but their applications in the next Point-of-Interest (POI) recommendation remain underexplored. This paper proposes a novel MAS4POI system designed to enhance next POI recommendations through multi-agent interactions. MAS4POI supports Large Language Models (LLMs) specializing in distinct agents such as DataAgent, Manager, Analyst, and Navigator with each contributes to a collaborative process of generating the next POI recommendations. The system is examined by integrating six distinct LLMs and evaluated by two real-world datasets for recommendation accuracy improvement in real-world scenarios. Our code is available at https://github.com/yuqian2003/MAS4POI.", "sections": [{"title": "1 Introduction", "content": "Location-Based Social Networks (LBSNs) like Foursquare and Facebook Places platforms have induced smartphone technology advancement by providing users social opportunities to share check-in records, images, and Points of Interest (POIs) reviews. They have generated a wealth of data and new avenues for academia and industrial research on POI recommendation systems, a subfield of recommender systems. The next POI Recommendation are designs to predict a user's probable location supported by historical data such as geographical contexts, temporal patterns and personal preferences. An illustration of a user's historical trajectory is shown in Fig. 1.\nLLM-based multi-agent systems (MAS) specialize LLMs into distinct agents with each contributes to functionalities, and tailor the interactions among these agents for complex real-world tasks management [5]. LLM-based MAS collaborate with planning, discussion, decision-making, mirroring human group endeavour in problem-solving are effective in software development [6], multi-robot systems [7], social simulation [8], gaming [9], science debate, code debugging [26],"}, {"title": "2 Related Work", "content": "Next POI Recommendation. Traditional POI recommendation methods rely heavily on feature engineering like collaborative and content-based filtering to extract patterns such as check-in records and ratings from historical data [3,15]. However, they struggle with large-scale dynamic data, cold-start issues, and often overlook environmental and temporal influences on travel preferences [4]. Deep learning (DL) models like GNNs enhance recommendation quality by capturing complex spatial relationships and user interactions [13, 14] requiring extensive labeled datasets, high computational costs, lack interpretability which hinder strategic planning and users trust to interact in real-time [4]. Large Language Models (LLMs) have advantages in processing LBSN data textual features with embedded commonsense knowledge and broad understanding of everyday concepts [11,12, 24, 25]. LLMs unify the heterogeneous data types processing to maintain contextual integrity. They redefine the next POI recommendation task as an intuitive question-answering mode to mitigate cold-start issues effectively [25], and their complex reasoning capabilities can interpret geographical correlations and sequential transitions in user movements often overlooked by traditional models [11]. Although it remains difficult to fully capture geographical contexts and mitigate aberration but they have zero-shot recommendation scenarios potentials [24]. LLMs can improve POI recommendations' precision and clarity by integrating long-term and current user preferences with spatial analysis for personalized location-based services [12]. MAS4POI framework is based on these strengths to specialize LLMs into distinct functional agents, collaborate with planning, discussion, decision-making, mirroring human group endeavour in problem-solving real-world interactions.\nMulti-Agent Collaboration In multi-agent collaboration [1], individual agents assess the requirements and capabilities of other agents and seek engagement on cooperative actions and information sharing. This approach can improve task efficiency, collective decision-making and address unsolved real-world issues by single agent i.e. the next POI recommendation. Specifically, downstream agents can focus on upstream agents' outputs when they follow certain rules for organization [19]. For example, AutoGen [16] and CAMEL [2] support the strengths of individual agents to foster cooperative relationships, while Agent Verse [17] assembles adaptive agent teams dynamically based on task complexity. MetaGPT [18] standardizes agent inputs/outputs into engineering documents and encodes them into agent prompts to structure collaboration among multiple agents inspired by the classical waterfall model in software development. But, the lack of corresponding cooperative rules, frequent interactions between multiple agents can amplify aberrations indefinitely to hinder collaboration. Furthermore, these multi-agent frameworks are unexplored in the next POI recommendation scenarios."}, {"title": "3 Problem Statement", "content": "The proposed MAS4POI is to construct a multi-agent collaboration system formalization as follows: Consider a set of Points of Interest (POIs), denotes as P = {P1,P2,...,\u0440\u043c}, where each POI is represents as (id, cat, glat, glon) and M represents the number of distinct POIs. Here:\nid refers to the unique identifier for each POI;\ncat denotes the POI category (e.g., \"Accommodations\", \"Residential\"), providing semantic information;\nglat, glon specify the geo-coordinates (latitude and longitude).\nEach check-in record is represented as a tuple co,t = (u,p, t) \u2208 U \u00d7 P \u00d7T, where:\nu denotes a unique user from the user set U = {u1,u2,...,un}, where N represents the total number of users;\np denotes a POI from the set P = {P1,P2,...,PM};\nt denotes the timestamp from the set T = {t1,t2,...,tz} of each check-in record, where Z represents the number of distinct time stamps.\nA trajectory is formed as Tu = {Cp1,t1, Cp2,t2,..., Cpm-1,tz\u22121, Cpm,tz }, represents a sequence of POIs visited by user u at time stamp t. For simplicity, the trajectory T denotes as T = {P1,P2,...,PM}. The user's check-in sequence is segmented into a set of consecutive trajectories {T,T,...,T}, where each trajectory Ty = {cpmjstmj..., Cpmj+1;-1,5m;+1; -1} represents a distinct sequence of POIs visited by user u \u2208 U in a short time interval (e.g., 24 hours). Given a historic trajectory T' = {CP1,1, CP2,2,, Cum,tz } of user u, MASPOI task is to predict the probable subsequent POI pm+1 to improve location-based services relevance and personalization."}, {"title": "4 Method", "content": "4.1 Framework Overview.\nA MAS4POI system overall framework is illustrated in Fig. 2. It comprises of three primary applications: Next POI Recommendation, Q&A, and Navigation. The next POI Recommendation is the core of the workflow with Q&A and Navigation as supplementary tasks with details as follows:"}, {"title": "4.2 Role Agents.", "content": "Manager coordinates and optimizes system performance through two primary states: monitoring and operational. In the monitoring state, it monitors various agents' progresses and awaits tasks completion:\n$M_{monitor}(T) = \\prod_{a=1}^{N} (1 \u2013 \\delta(D_a(t)))$ (1)\nwhere d(Da(t)) is an indicator function that returns 1 if the task assigned to agent a is incomplete at the given time, and 0 otherwise. Then Manager allocates tasks based on the current system state S(T) and available resources R(\u03c4) in the operational state:\n$Allocatesi(T) = f(S(t), R(t))$ (2)\nHere, Allocatesi(T) represents the sub-tasks assigned to agent a. The Manager effectively coordinates the activities of other agents within the system by controlling these assignments."}, {"title": "Algorithm 1 Reflector with in MAS4POI, all details have been discussed in section 4.2", "content": "Require: Input x, Manager M4, Reflector R4, prompts {pm, Pth, Pre}, number of iterations N, Ending condition end(.)\nEnsure: Corrected Next POI Recommendation \u0177\n1: Generate initial output yo = M+(pm || x) \u25b7 Initialization (Eqn. 3)\n2: for 0 to N-1 do\n3: Refi = R+(pth || X || Yi) \u25b7 Reflection (Eqn. 4)\n4: if end(Refi, i) then \u25b7 Ending Condition\n5: break\n6: else\n7: Yi+1 = R+(Pre || x || yo || Refo || ... || yi || Refi) \u25b7 Refine (Eqn. 6)\n8: end if\n9: end for\n10: return Yi\nReflector are crucial processes for agent's self-assessment and iterative improvement. It focuses on Reflection and Refinement of the Manager's outputs to identify improvement areas and optimize the overall process. Given input x, the Manager M- generates initial output yo based on the prompt pm.\n$Yo = M_{+}(Pm || x)$ (3)\nReflector proposes reflections Refi in the REFLECTION process based on the reflection prompt Pth.\n$Refi = R(Pth || X || Yi)$ (4)\nAfter REFLECTION, the Reflector refines the prediction strategy and candidate selection based on the reflection prompt pre to generate an accurate subsequent output Yi+1 in REFINE.\n$Yi+1 = R_{+}(Pre || x || Yt || Refi)$ (5)\nFinally, Reflector alternates between REFLECTION and REFINE until an ending condition (end(Refi, i)) is met. This condition, defined by end(Refi, i), can"}, {"title": null, "content": "either be a specified iteration limit or a stopping indicator triggered by the reflection results.\n$Y_{i+1} = R_{+}(P_{re} || x || y_0 || Ref_0 || ... || y_i || Ref_i)$ (6)\nTo ensure the Reflector learns from previous iterations and avoids repeating mistakes, the history of all prior feedback and outputs are retained, appended to the prompt and stored in short-term memory during each iteration. The last refined output \u0177 is used as the final recommendation. The overall process is listed in Algorithm 1.\nDataAgent preprocess and structure check-in data integral for precise POI recommendations. For each user u, the raw check-in records sequence Cu = {CP1,1, C2,2, Con,tn } is processed. The DataAgent filters out POIs and users with fewer than 10 visit records by equation 7, leading to the filtered sequence:\n$C_{u}^{filtered} = \\{C_{p_i,t_i} | count(c_{p_i,t_i}) \\geq 10\\}$ (7)\nDataAgent aggregates filtered data into structured POI information P subsequently, including geo-coordinates and categories, and segments the user's check-ins into trajectories {T,T,...,T}, where each Tu comprises of a list of POIs visited within a 24-hour interval. The comprehensive dataset is then formed as:\nCheck-in Data = ($\\{\\{C^{filtered}_u\\}\\}_{u \\in U}$, $\\{P^{filtered}\\}$) (8)\nto improve POI recommendations reliability and accuracy.\nNavigator improves user experience by providing precise route planning and visual route maps through Amap APIs integration. This process begins with geocoding user-provided addresses into geographic coordinates. After obtaining these coordinates, Navigator calculates the optimal route using the selected mode of transportation with the Haversine Formula for precise distance measurement:\n$\\Delta d = R \\cdot \\Delta \\sigma$ (9)\nwhere \u0394\u03c3 represents the angular distance in radians, determined by:\n$\\Delta \\sigma = 2 \\arcsin \\sqrt{\\sin^2(\\frac{\\Delta \\phi}{2}) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2(\\frac{\\Delta \\lambda}{2})}$ (10)\nHere, \u0394\u03c6 and \u0394\u03bb are the differences in latitude and longitude, and R is the Earth's radius. Navigator also generates static maps to visually represent routes for landmark recognition and effective navigation.\nAnalyst is based on the user's past visit records Hu (consist of long-term and recent records) and candidate set Cu, which are defined as follows:\n$H_u = \\{(p_i, cat(p_i), t_i) | i = 1, 2, ..., H\\}$, $C_u = \\{(p_j, \\Delta d(p_j, p_{last}), cat(p_j))\\}_{j=1}^{M'}$ (11)"}, {"title": null, "content": "where H indicates total historic records and pi denotes a visited POI defined in 3, cat(pi) is its category, and ti is the visit timestamp. Ad(pj, Plast) represents the distance (calculated through 9) between a candidate POI pj and the last visited POI Plast, and cat (pj) represents the candidate POI's category. The Analyst combines Hu and Cu into a prompt pan to generate the list of initial recommended POIs with explanation.\n$YA+ = A_{+}(Pan || Hu, || Cu)$ (12)\nUserAgent interacts with the user to collect requirements, store user accounts, and retrieve user historical records to generate initial POI recommendations.\nSearcher The Searcher processes the user's query q using a set of tools Ts with the Searcher prompt pse to generate the final response ys:\n$ys\u2081 = S_{+}(q || Ts || Pse)$ (13)\nwhere s indicates the total number of tools and Ts is defined as:\n$Ts = \\{tool_1, tool_2,..., tool_s\\}$ (14)"}, {"title": "5 Experiments", "content": "5.1 Experiment Setup\nDataset. There are two real-world datasets derived from location-based social media platforms for the experiments: NYC(Foursquare-NYC) and TKY (Foursquare-TKY) are. NYC contains 103,941 check-ins (check in records?)collected from 1,048 users across 4,981 POIs. TKY includes 405,000 check-ins from 2,282 users across 7,833 POIs. Both datasets are collected over approximately from April 2012 to February 2013 as listed in Table 2.\nBaseline Methods. The experiments used six distinct LLMs, including GLM-3-Turbo [20], GPT-3.5-Turbo [21], MoonShot-v1, QWEN-turbo [22], Claude-3.5, and Gemini-Pro [23]. They are integrated MAS4POI for evaluation. Evaluation\nMetrics. MAS4POI is evaluated by two standard metrics: Acc@k and Mean Reciprocal Rank (MRR) as described in [24,25]. Acc@k analyses the correct POI is within the top-k recommendations as an unordered list. MRR considers the correct POI position is within the ordered list. For a dataset with M sample trajectories, the metrics are defined as follows:\n$Acc@k = \\frac{1}{M} \\sum_{i=1}^{M} I(r_i < k)$ $MRR = \\frac{1}{M} \\sum_{i=1}^{M} \\frac{1}{rank_i}$"}, {"title": "5.2 Main Results", "content": "MAS4POI integrates six LLMs across three datasets experiments results are listed in Table 3. For NYC dataset, it is noted that the Claude model achieved the best Acc@1 and MRR scores 0.8172 and 0.8251 respectively, which are 1.6% and 0.55% higher than the second-best Gemini model accordingly. It is noted that Claude's Acc@5 and Acc@10 are near to Gemini's scores 0.8325 and 0.8470. While Gemini surpasses their scores 0.8333 and 0.8517, indicating that Claude are slightly advantaged than Claude's Acc@5 and Acc@10. For TKY dataset, it is noted that the QWEN model achieved the best Acc@1 and MRR scores 0.8831 and 0.9279 respectively, which are higher than other models. QWEN outperformed Gemini in MRR by 4.0%, indicating that its relevance and accuracy. It is also noted that the MoonShot model achieved average Acc@1 and MRR scores 0.7304 and 0.7520 on the NYC dataset respectively. For TKY dataset, the MoonShot model has achieved Acc@1 and MRR scores 0.6533 and 0.6742 respectively, indicating that MoonShot has deficiencies in Acc@k and MRR. It is also noted that the Claude model performed satisfactory at the NYC dataset, while the QWEN model performed satisfactory at the TKY dataset. Hence, it is considered that Claude and QWEN are suitable LLMs for MAS4POI. It is also noted that the GPT model is widely used in various fields [27] but the performance between GPT and QWEN at the TKY dataset is insignificant at Acc@k (k=1, 5, 10) with 2.11%, 1.31%, and 1.0% differences. Hence, GPT remains as the primary LLM for MAS4POI. Therefore, we recommend Claude and QWEN as the main LLM choices for MAS4POI."}, {"title": "5.3 User Cold Start Analysis.", "content": "Users are categorized into three groups based on the trajectories number: inactive (bottom 30 in trajectory count), normal, and very_active (top 30 in"}, {"title": "5.4 Case Study", "content": "A MAS4POI's workflow using the NYC dataset is illustrated in Fig. 3. It showed that the Manager oversaw the Analyst to generate initial recommendations from user's requirements on the next POI recommendation task, but these recommendations often have geographical mismatches. For example 1) 2440 Sherman Ave is located at Jersey City, does not meet the user's requirement for POIs current location (New York), 2) time factors are disregarded such as BCC West Hall was not near to the public at specific times. Hence, the Reflector corrects these recommendations by focusing on the user's real-time location to prioritize nearby POIs. For example, the current POI to Calvary Hospital is only an 11-minute drive. Additionally, the userid=150 frequently visits places about performing arts such as Performing Arts Venue and Theater, resulting Walter Kerr Theatre is a personalized recommendation based on this context since userid=150 complete historical trajectories are provided by the system's open-source code. For Q&A, MAS4POI supports user queries through the Searcher. For example, when the user expresses interest in St. Patrick's Cathedral the Searcher retrieves detailed information and summarizes historical data from a reliable source like Wikipedia"}, {"title": "5.5 Ablation Study", "content": "This section examines the REFLECTION and REFINE stage iterations of the Reflector in MAS4POI's performance. The results are illustrated in Fig. 4. It showed that MAS4POI improves performance across different datasets as the stages number increase. For example, at the TKY dataset, transitioning from state yo (without Reflector) to y\u2081 resulted 5.43%, 3.65%, 3.63%, and 5.38% at Acc@k (k=1, k=5, k=10) and MRR respectively. For the NYC dataset, the performance results increase from the initial 0.7166, 0.7566, 0.7833, and 0.7363 to 0.7680, 0.7940, 0.8070, and 0.7691 after three iterationsaccordingly. However, it is noted that the improvement gradually diminish at the MRR metric in particular and time cost increase as the Reflector's REFLECTION and REFINE iterations number increase."}, {"title": "6 Conclusion", "content": "In this research, we proposed a Multi-Agent System for next POI recommendation (MAS4POI), comprising seven role agents: DataAgent, Manager, Analyst, Reflector, UserAgent, Searcher, and Navigator. Each agent plays a specific role: Manager optimizes coordination, Reflector enhances system accuracy through iterative self-assessment, DataAgent preprocesses and organizes structured POI data, Navigator handles route planning, Analyst generates recommendations from user historical check-in records, UserAgent manages user profiles and interactions, and Searcher processes specific queries. We deployed six different"}]}