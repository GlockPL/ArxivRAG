{"title": "Bug Analysis Towards Bug Resolution Time Prediction", "authors": ["Hasan Yagiz \u00d6zkan", "Poul E. Heegaard", "Wolfgang Kellerer", "Carmen Mas-Machuca"], "abstract": "Bugs are inevitable in software development, and their reporting in open repositories can enhance software transparency and reliability assessment. This study aims to extract information from the issue tracking system Jira and proposes a methodology to estimate resolution time for new bugs. The methodology is applied to network project ONAP, addressing concerns of network operators and manufacturers. This research provides insights into bug resolution times and related aspects in network softwarization projects.", "sections": [{"title": "I. INTRODUCTION", "content": "Network softwarization entails replacing dedicated hardware for specific applications with programmable components, leading to advantages like easy maintenance, flexibility, scalability and decreased costs associated with development and operations [1]. Software Defined Networking (SDN) and Network Function Virtualization (NFV) are examples of these softwarization efforts. In this context, manufacturers rely on open-source solutions to provide extra functionalities while complying with the standards. However, despite the advantages of network softwarization, operators are reluctant to use these solutions as the software is more complexity, incurring to more bugs, as well as the code reliability is uncertain as it is open to any software developer(s) differing in terms of programming skills, experience, trustiness, etc.\nIn order to increase the transparency of software reliability, any bugs which are encountered during the operation of a software, are reported in open repositories. These repositories allow knowing the reported bugs, their status, etc., which are useful to evaluate the software reliability. Each software project has defined a bug resolution process, which should be followed by any software developer (i.e., debugger) of that project.\nThe goal of this study is first of all, give an overview of the information that can be extracted from these repositories. Some information can be directly obtained from the gathered data, but some other need some processing. Secondly, we propose a methodology that can be used to estimate the resolution time of new bugs. The proposed methodology has been applied to several network related projects such as ONOS, ONAP, etc. We believe that network operators and manufacturers using an open source project like those, are concerned about the bug resolution times and other aspects addressed in this paper.\nThe contributions of this paper are:\nCollection strategy of reported bugs and the required filtering.\nBasic data analysis such as identification of the most common paths in the workflow, the transition distribution between different states, bug resolution time distribution, etc.\nAdvance data analysis e.g., impact of aspects such as priority, reporter to the debugging time.\nInvestigating state probabilities of the bugs in time.\nComparison of the bug resolution time prediction with different strategies\nPredicting the exact bug resolution time for different bugs with neural network.\nThe paper is organized as follows: Section II gives an overview of the state of the art on bug data analysis and bug resolution time models. Section III introduces the bug repositories and the data that can be extracted from them. Section IV presents the proposed bug collection and the data analysis used in this work. Section V proposes a machine learning model to estimate the bug resolution time of new bugs. Finally, Section VI concludes the paper."}, {"title": "II. RELATED WORK", "content": "This section will discuss previous works on bug data analysis and bug resolution processes.\nIssue tracking systems are mined, and researchers of [2] use this process to offer the dataset of all the issues from different projects. Additionally, the authors of [3] conduct various analyses of the collected data, which comes from 55 different Apache projects. These 55 projects are classified into 9 categories, such as big data, security, and libraries. The authors examine the percentage of fields that change the reporting of the bugs. They define bug resolution duration time from the creation and closure of a bug as a bug-fix effort and compare the bug resolution times across different project categories. Additionally, they investigate when the priority and assignee are defined and analyze the number of bugs in which these values change after the initial bug report. Furthermore, the study delves into the changes in bug status, analyzing the"}, {"title": "III. DATA REPOSITORIES", "content": "Issue tracking systems are software tools used to manage software projects' development, maintenance and debugging processes [2]. These systems use issues which can describe bugs, feature requests, milestones and any other tasks, depending on the requirements of the considered project. Moreover, issue tracking systems also serve as a repository for the history of reported and addressed issues. Thus, they offer an excellent opportunity to understand the software project's development and debugging process. Most open-source software use publicly available issue-tracking systems because it facilitates collaboration among software developers and debuggers by giving access to the status, process, and resolution of the reported issues.\nJira is one of the most popular issue-tracking systems used by many different open-source projects [6]. As an issue tracking system, the issue types in Jira extend beyond 'Bug,' including 'Task,' 'Story,' and more. Every issue is kept in the Jira repository of the respective project. Therefore, Jira repositories become a valuable information source for the project's development history. Jira defines a workflow, which comprises of a sequence of stages that issues may undergo, from their creation (referred as \"Open\") and ending with their resolution (referred as \"Closed\"). The workflow is depicted in Fig. 1 in blue color. Although Jira provides this initial workflow, it can be customized to meet the specific requirements of a project."}, {"title": "A. Bug related data", "content": "In this work, we are interested in the bug resolution time and hence, all issues other than 'Bug' are filtered out. Jira provides a collection of reported bugs. This collection contains details about the bug and its resolution process. Certain information is provided when a bug is reported, while others change throughout the resolution process. The following information is utilized in our analysis:\nPriority indicates the importance of the bug. The priority levels vary between projects. Hence, in this work, priorities 1 and 2 refer to the highest and second highest priority of any project.\nReporter is the person reporting the bug.\nAssignee is the person who is responsible for fixing the bug."}, {"title": "B. Bug resolution process", "content": "As bugs in Jira are a specific type of issue, they also follow the workflow for the issues. While other transitions from Fig. 1 are also utilized, a primary path within the workflow is typically followed for the bug resolution process. A bug begins in the 'Open' state when it is initially reported. Once a developer starts working on the bug resolution, the state is changed to 'In Progress'. The state of the bug changes to the 'Resolved' state, once the bug is resolved, where it awaits approval by another team member. After approval, the bug is closed by moving to the 'Closed' state. However, a bug may reappear so that it can be reopened and returned to the 'Reopen' state."}, {"title": "IV. BUG COLLECTION AND ANALYSIS", "content": "A developed Python script has been deployed for the proposed bug collection and analysis. It is important to mention that the bugs for ONAP and ONOS were collected directly from Jira. However, the bugs for Apache were collected from the dataset at [3]. The data analysis included in this work focuses on the two top-priority bugs (i.e., priority 1 and 2)."}, {"title": "A. Bug collection and filtering", "content": "The collected data in this study includes the reported bugs from the start of each project to the collection date (in this case, 05.04.2023). The collected data encompasses all bug related details (refer to Section III-A) as well as all related information during the bug resolution process such as transition states and times, authors involved in each change, etc.\nIn this study, we investigate the bug resolution process. However, the dataset does not only include the data relevant to our study, but it also includes exceptional/unwilling data,"}, {"title": "B. Bug resolution time distribution and common flows in transition workflow", "content": "The resolution time is defined as the time elapsed from the reporting of a bug (i.e., in the \"Open\" state) to the time when it reaches the \"Closed\" state. The resolution time is the sum of the time spent on various states, but it does not provide information about the duration spent on each individual state.\nIn this section, we introduce the resolution time analysis for the particular case of the priority 1 bugs of the ONAP project. These priority 1 bugs amount to a total of 906 in the project.\nThe most common resolution paths for all the ONAP priority 1 bugs, can be found, as summarized in Table II. It can be observed in this case, that almost 91% of the bugs follow the seven main paths. Furthermore, 45% of the bugs follow the path Open-In Progress-Closed or Open-Closed.\nThe time spent at each state before any possible transition can also be found. These time distributions are crucial for bug resolution time estimation from a specific state to the 'Closed' state. For this purpose, Table III provides the mean and median time spent in a state before a particular transition to a different state, as well as the number of such transitions. Upon close examination of the transitions from the 'Open' state, it becomes apparent that the duration is longer when a bug transitions directly to the 'Closed' or 'Delivered' states compared to transitioning to the 'In Progress' or 'Submitted' states. One possible explanation for this phenomenon is that"}, {"title": "C. Impact of different bug aspects", "content": "This section investigates the impact of different properties of the bugs on the bug resolution time. Properties like priority level, assignee and reporter of a particular bug may impact its resolution duration. The Apache dataset encompasses various projects, but we have excluded this data to eliminate variations caused by project differences. The number of bugs in ONOS should be higher to ensure a meaningful comparison. Thus, ONAP is the preferred option for investigating the assignee's and reporter's influence. Similar to the previous case, the bugs are separated based on priority.\nLet us first analyse the impact of the reporter on the bug resolution time. The reporter of the bug may impact the time given his/her experience by providing an accurate and clear bug description as well as listing all the essential information to reproduce the bug accurately.\nFig. 2 depicts the impact of the top 10 reporters who reported the highest number of bugs, on the bug resolution time for priorities 1 and 2. The ordering of reporters is determined by the median value of the priority 2 bugs, taking into consideration that some reporters have a limited number of priority 1 bugs, with half of them reporting fewer than 20 bugs. The total number of reported bugs is shown under the x-axis of the graph, whereas the median resolution time for each case is given at the top of the graph. The decision to use the median value instead of the mean value is made in order to prioritize typical values over outliers, as the mean value can be heavily influenced by the outliers. Firstly, it is noteworthy that the resolution time for priority 1 bugs is generally shorter than that of priority 2 bugs for most reporters. Secondly, the"}, {"title": "D. Bug Distribution across States over Time", "content": "In this section, the distribution of bug states over time is presented. It presents the probabilities of being in specific"}, {"title": "V. PREDICTING RESOLUTION TIME WITH NEURAL NETWORK", "content": "Even after doing filterings, which are explained in Section IV, there are still bugs that can be filtered. One of the main reason to filter is the long living bugs, which are discussed in Subsection IV-D. Possible reasons of the short and long living bugs and different possibilities to filtering those bugs are discussed in [8], [9]. It has been explained that some bugs are forgotten, wrongly labeled or reported after its resolution. Therefore removing short living bugs or long living bugs might improve prediction quality. In results we compared different filtering strategies for the bugs. In [8], authors discuss removing long living bugs with the help of inner fence and outer fence. We also used the same strategy if all the bugs outside of inner fence is removed it is called removing mild outliers in case of all bugs above outer fence is removed is called removing extreme outliers. As an extend to these outlier removal we also proposed to remove the bugs without any update (comment, state change etc.) for more than 30 days. We compared these filtering methods and investigate their impact on the results.\nWe used neural networks (NN) to predict the resolution time of the bugs. The results are compared with Naive Bayesian (NB) and k Nearest Neighbour (kNN) algorithms. These two algorithms are chosen because they are widely used for resolution time prediction [4], [5], [8], [9]. Since the NB and KNN cannot be applied to get numerical results but only used for classification, the results which used for comparison takes two classes into account. These two classes divided depending on the resolution time. If the resolution time is shorter than median resolution time of the training dataset, the bug considered as 'fast' bug otherwise it is classed as 'slow' bug.\nThe input of the NN is the information related to the priority, subproject, assignee, reporter and either the assignee is same person of the reporter or not. Two different NN model compared for the classification one of them is trained for binary classification and returns either the bug is belongs to 'fast' or 'slow' group and the other one predicts the exact resolution time. The size and input of those models are same, where the difference lies on the loss, activation functions and the output values. For binary predicted output values are either 0 or 1 and for exact value prediction values are time to solve as hours. Since the exact time prediction is not same as binary classification, the time prediction values should be converted to two class depending on either it is predicted lower than median time or higher than median time to resolve. Both two NN consist of 5 layers, where the first one is dedicated to normalization of the input data.\nThe ONAP project is selected for the model training, because it has more bug reports than the ONOS project and insufficient amount of data might impact the performance of the NN. In order to make prediction we divided the dataset into two group, training, which corresponds to 80% of all dataset and test which is the rest of the dataset. In order to be able to generalize the results we cross validate our results with randomly dividing the dataset 10 times. As it can be seen from the Fig.6, even though NN does not make binary estimation of 'slow' and 'fast' its accuracy is higher than KNN estimation for any type of filtering. NN results for binary classification provides either best or second best results in any case. The filtering does not help to improve the results, one reason for that can be the reduction of the training dataset. Another possible reason is the filtered bugs mostly have similar information like assignee or subproject and classifying them as 'slow' increase the accuracy.\nThe results for exact time prediction is given in Figure 7. It can be seen that the median normalized prediction error is 20% for all bugs and 30% for filtered bugs. One of the reason for this high error can be the holiday periods and weekends. The bug report day actually plays an important role on its resolution time. Even though there is an error around 20% between predicted and real time to solve, predicted value can"}, {"title": "VI. CONCLUSION", "content": "In this work the importance of different aspects of the bugs on their resolution process has been shown. The time to solve a bug decrease, when the reporter is assigned to the issue. Also the impact of different resolution process or strategy to report this process has been shown. It has been seen that in Apache projects, reaching to the 'Closed' state is not forced like ONAP, instead the bugs stays in 'Resolved' state for long time. It has been shown that bug resolution time can be estimated with neural networks and the predicted value can be used by the developer teams to distribute their workforce according to the estimation. This work can be extended with using different machine learning techniques like pretraining and data augmentation to make a valid prediction for new and smaller projects."}]}