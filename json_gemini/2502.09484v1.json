{"title": "PenTest++: Elevating Ethical Hacking with A\u0399 and Automation", "authors": ["Haitham S. Al-Sinani", "Chris J. Mitchell"], "abstract": "Traditional ethical hacking relies on skilled professionals and time-intensive command management, which limits its scalability and efficiency. To address these challenges, we introduce PenTest++, an AI-augmented system that integrates automation with generative AI (GenAI) to optimise ethical hacking workflows. Developed in a controlled virtual environment, PenTest++ streamlines critical penetration testing tasks, including reconnaissance, scanning, enumeration, exploitation, and documentation, while maintaining a modular and adaptable design. The system balances automation with human oversight, ensuring informed decision-making at key stages, and offers significant benefits such as enhanced efficiency, scalability, and adaptability. However, it also raises ethical considerations, including privacy concerns and the risks of AI-generated inaccuracies (hallucinations). This research underscores the potential of AI-driven systems like PenTest++ to complement human expertise in cybersecurity by automating routine tasks, enabling professionals to focus on strategic decision-making. By incorporating robust ethical safeguards and promoting ongoing refinement, PenTest++ demonstrates how AI can be responsibly harnessed to address operational and ethical challenges in the evolving cybersecurity landscape.", "sections": [{"title": "1 Introduction", "content": "Ethical hacking [16] plays a critical role in modern cybersecurity, providing organisations with proactive measures to identify and address vulnerabilities before they can be exploited. However, the practice remains highly resource-intensive, requiring advanced technical expertise and substantial time investments across all stages, from reconnaissance to exploitation. As cyber threats continue to evolve, ethical hackers face mounting challenges in keeping pace with the dynamic threat landscape and managing the complexities of large-scale, diverse environments.\nA key limitation in traditional ethical hacking lies in its reliance on skilled professionals to manually execute and interpret intricate processes. This dependency restricts scalability and efficiency, making it difficult to meet the growing demands of increasingly interconnected systems. Moreover, the necessity to"}, {"title": "2 Research Problem, Hypotheses, and Contributions", "content": "2.1 Problem Statement\nThe ethical hacking process, comprising reconnaissance, scanning, exploitation, post-exploitation, and reporting, remains a resource-intensive endeavour requiring substantial expertise and time. To address this challenge, this research explores the integration of AI-augmented automation, leveraging GenAI to streamline ethical hacking workflows while maintaining user control and reducing cognitive load. This approach aims to enhance efficiency, accuracy, and adaptability in response to the increasing complexity of modern cybersecurity threats.\n2.2 Research Questions\nThis study seeks to address the following research questions:\n1. Is it possible to automate the ethical hacking process effectively in a user-centric manner?\n2. How can GenAI be integrated into this automation to enhance efficiency and accuracy?\n3. How much human intervention is required to ensure the accuracy and ethical compliance of an AI-driven ethical hacking system?\n2.3 Contribution to Knowledge\nPenTest++ advances the field of cybersecurity by addressing critical gaps in automation and AI integration within ethical hacking. The contributions of this study include:\nDemonstrating the feasibility of automating the ethical hacking five-phase process through an AI-augmented tool.\nIntroducing a mixed-initiative system that balances AI-driven automation with user oversight, fostering trust and adaptability in penetration testing workflows.\nHighlighting the potential of GenAI to enhance vulnerability identification, data analysis, and real-time decision-making, thereby reducing the cognitive load on testers.\nExploring the ethical implications of AI in penetration testing, including privacy risks, AI hallucinations, and the need for robust safeguards to prevent misuse.\nProviding a proof of concept for AI-driven automation in cybersecurity.\nProviding empirical evidence and insights to support future theoretical and practical advancements in AI-augmented cybersecurity tools."}, {"title": "3 GenAI and ChatGPT", "content": "The advent of GenAI, with models like ChatGPT4 [8] being prominent, represents a major shift in the AI landscape. These systems, moving beyond the traditional AI focus on pattern recognition and decision-making, excel in content creation, including text, images, video, and code. The ability to learn from extensive datasets and produce outputs that mimic human creativity is a major advance.\nCentral to this revolution is the GPT (Generative Pre-trained Transformer) architecture, the basis of models like ChatGPT. Developed by OpenAI, GPT models are built on deep learning techniques using transformer models, designed specifically for handling sequential data. These models undergo pre-training, where they learn from a wide array of various resources, including Internet texts, followed by fine-tuning for specific tasks. This process enables models to grasp not just the structure of language but also its context, essential for generating human-like text.\nEach iteration of ChatGPT has demonstrated enhanced contextual understanding and output relevance. Its primary function lies in interpreting user prompts and generating coherent, contextually appropriate responses. This versatility extends from conducting conversations to performing complex tasks, including coding, content creation, and, as we propose in this paper, ethical hacking. The GPT model family, including ChatGPT, owes much of its success to the transformer model, introduced by Vaswani et al. in 2017 [17]. This architecture revolutionises sequence processing through attention mechanisms, enabling the model to focus on different parts of the input based on its relevance to the task.\nThe latest iteration, GPT-405, provides significant advances in speed, multi-modal capabilities, and overall intelligence. GPT-40, now available to a broader user base, including free-tier users, improves upon the GPT-4 model by offering enhanced performance in understanding and generating text, as well as new capabilities in processing voice and images. These improvements position GPT-40 as a powerful tool not only in natural language processing but also in applications such as real-time communication and data analysis, making it a key asset in modern cybersecurity practices.\nIn exploring the intersection of AI and cybersecurity, understanding Chat-GPT's foundational aspects is vital. Its generative nature, contextual sensitivity, and adaptive learning capacity can lead to innovative approaches in cybersecurity practices. Our focus will be on how these qualities of ChatGPT can be used to support ethical hacking, exploring the technical, ethical, and practical implications."}, {"title": "4 PenTest++ Operation", "content": "The operation of PenTest++ follows a systematic methodology aimed at optimising ethical hacking workflows by combining automation, user oversight, and GenAI support. This approach enhances efficiency, accuracy, and adaptability across the key phases of penetration testing. The PenTest++ operation is outlined below.\n1. Reconnaissance: PenTest++ automates network discovery by executing commands to identify live systems within the target environment. Users select the desired target for subsequent phases.\n2. Scanning & Enumeration: PenTest++ executes vulnerability scanning, employing tools such as nmap and gobuster to identify critical open ports, services, and misconfigurations. GenAI interprets scan outputs, correlates findings with known vulnerabilities, and provides recommendations for targeted enumeration.\n3. Exploitation: PenTest++ facilitates exploitation by generating tailored payloads to exploit identified vulnerabilities, such as misconfigured services or insecure functionalities. GenAI offers strategic guidance to craft precise attack sequences, while users dynamically adjust tactics in response to real-time inputs and recommendations provided by the system.\n4. Documentation: PenTest++ automates report generation, by leveraging GenAI to produce a comprehensive penetration testing report, including logs, methodologies, key findings, and actionable recommendations. GenAI refines the structure and clarity of the documentation, ensuring it provides actionable insights for enhancing the security posture of the tested systems."}, {"title": "5 Laboratory Setup", "content": "5.1 Development Language\nWe developed our automation system using Python 3 due to its versatility, extensive libraries, and seamless integration with AI tools like OpenAI's ChatGPT API. Python's user-friendly syntax, open-source nature, and suitability for scripting and automation make it a popular choice among ethical hackers. While Python was our primary language, alternative scripting engines, such as Bash or Google's Go, could also be employed depending on the specific requirements and target environments. The adaptability of Python ensured efficient development and the incorporation of advanced features like AI-driven analysis.\n5.2 Physical Host and Virtual Environment Configuration\nThe experiments used a standard MacBook Pro with 16 GB RAM, a 2.8 GHz Quad-Core Intel Core i7 processor, and 1 TB of storage, providing sufficient computational capabilities for virtualisation.\nVirtualisation of the network was achieved using VirtualBox 7, a reliable tool for creating and managing virtual machine environments. The virtual setup included the following VMs.\n1. Kali Linux VM This machine functions as the primary attack platform for conducting the penetration tests. It is equipped with the necessary tools and applications for ethical hacking. This VM also hosts the scripting engine for PenTest++, serving as the execution environment where penetration testing assignments are performed.\n2. Linux VM 1 This 64-bit Debian Linux system, allocated 512 MB of memory, is one of the main targets in this study and is configured as a primary focus for various ethical hacking phases.\n3. Linux VM 2 Another 64-bit Linux-based system with 512 MB of memory allocation, this VM serves as an additional target in this paper, providing an alternative focus for specific penetration testing tasks.\nThe network configuration was established in a local NAT (Network Address Translation) setup, allowing for seamless communication between the VMs and simulating a realistic network environment suitable for penetration testing.\n5.3 GenAI Tool\nThe experiments leveraged ChatGPT-406 (a paid version) for its advanced AI capabilities and efficient response time. The selection of ChatGPT-4 was also based on its prominent status as a leading GenAI tool, offering cutting-edge technology to enhance the ethical hacking process. Of course, other GenAI tools are also available, e.g. Google's Bard"}, {"content": "GitHub's Co-Pilot and DeepSeek, which could potentially be used in similar contexts. The methodologies and processes described are applicable to both the paid and free versions of ChatGPT, with the paid version chosen for improved performance in this study.\nIn this paper, we chose to utilise an online LLM (Large Language Model) rather than a local one. This approach ensures automatic and continuous updates, guaranteeing that the LLM remains equipped with the latest information, capabilities, and knowledge. By prioritising these updates and the convenience and ease of use they provide, this approach inherently places less emphasis on privacy a topic we plan to explore in future work.\n5.4 ChatGPT-PenTest++ Integration\nTo integrate ChatGPT programmatically with PenTest++, we utilised OpenAI's GPT-4 API, which operates on a subscription-based model10. This integration"}, {"title": "6 Prototype Implementation", "content": "We now summarise the experimental procedure followed during each stage of the prototype implementation.\n6.1 Reconnaissance Module\nReconnaissance, the first stage of ethical hacking, can be categorised into passive (non-intrusive observation) and active (direct interaction with the target) methods. In this study, we prioritised active reconnaissance to dynamically discover potential targets within the network.\nThe PenTest++ system begins by determining the IP address and subnet mask of the attacker's machine dynamically. Using this information, the subnet range of the target network is calculated. The total number of hosts in the network is derived using the standard formula 2^(32-CIDR) \u2013 2, where CIDR (Classless Inter-Domain Routing) represents the number of bits used for the network portion of the address, and the subtraction of 2 accounts for the network and broadcast addresses. This ensures that all potential IP addresses are identified for subsequent scanning. The system then prompts the user to confirm the correctness of the detected subnet range. If incorrect, users can manually input the correct subnet range, and the system recalculates the total number of hosts accordingly. This user-driven flexibility ensures adaptability to diverse network configurations.\nPenTest++ proceeds to actively scan the target network using the nmap command (nmap -sn -T4 subnet) to detect live hosts, where -sn specifies a ping scan to identify active devices without port scanning, -T4 sets an aggressive timing for faster execution, and subnet defines the network range to be scanned. The results display the IP addresses of all active hosts, from which the user can select a target (see Fig. 1). While nmap was the primary tool employed, the design of PenTest++ is modular, allowing for future integration of other scanning tools such as arp-scan, netdiscover, or Masscan. These additional tools may be recommended to users in future iterations based on the availability of tools on the attack machine or the size and complexity of the target network."}, {"title": "6.2 Scanning & Enumeration Module", "content": "This module constitutes a critical phase of the penetration testing process, aimed at identifying open ports, running services, and potential vulnerabilities on target systems. This phase transitions from host discovery to a more detailed examination of the target infrastructure, including port scanning and vulnerability enumeration.\nIn the PenTest++ system, the scanning process is automated through the use of nmap, a widely adopted tool for network exploration and vulnerability assessment. The system programmatically executes nmap scans using Python's subprocess library. By default, the scan employs the following command: nmap -p- -A -T4. The options in this command are designed for a comprehensive and efficient assessment:\n-p-: Scans all 65,535 TCP ports to ensure no open port is overlooked.\n-A: Enables service version detection, OS identification, script execution, and traceroute output to provide detailed insights into the target system and its network topology.\n-T4: Configures the scan for faster execution without compromising reliability.\nThe scan results are processed programmatically to extract key information, including:\nport, the port number and associated protocol (e.g., TCP or UDP);\nstatus, the state of the port (e.g., open, closed, filtered);\nservice, the service running on the port (e.g., HTTP, SSH); and\nversion, version information and additional details, such as software banners.\nThe extracted data are presented in a structured tabular format using the PrettyTable library (see Fig. 2). This format facilitates the clear communication"}, {"title": "6.3 Gaining Access Module", "content": "The Gaining Access Module represents a critical phase in the ethical hacking process, focusing on exploiting vulnerabilities identified during scanning to gain initial footholds in the target system. This module automates the exploration of potential attack vectors based on port and service enumeration results.\nAfter the scanning phase, the PenTest++ system processes open ports and associated services identified on the target. Users are presented with a list of available ports, including details such as the port number and the corresponding service (e.g., HTTP, SSH, or NFS). The system supports an iterative workflow, allowing users to select a port and service for detailed analysis and targeted exploitation.\nFor specific services, PenTest++ employs tailored attack strategies, as follows.\nNFS (port 2049): If NFS is detected, the system checks for accessible shares and potentially exploitable misconfigurations.\nFTP (port 21): PenTest++ evaluates the FTP service for anonymous login capabilities or weak credentials.\nHTTP/HTTPS (port 80): HTTP-based services are examined for potential vulnerabilities, including directory traversal, misconfigurations, and local file inclusion (LFI). Identified endpoints, such as /dev/index.php, are further investigated for exploitability.\nSSH (port 22): For SSH services, PenTest++ integrates with ChatGPT to analyse logs and deduce valid credentials or private key information. If necessary, brute-force techniques are employed to crack SSH passwords, ensuring multiple avenues of access are considered.\nHTTP Proxy (port 8080): When proxy services are identified, the system evaluates potential misconfigurations that could allow unauthorised access.\nAdditional services can be integrated and automated due to the modular architecture of the PenTest++ system.\nThe module emphasises user flexibility by enabling manual input of credentials, customisation of attacks, and iterative analysis. For example, if a private key is password-protected, users are prompted to provide the associated"}, {"title": "Gaining Access to VM 1: 192.168.1.7", "content": "The first case study focuses on VM 1 (192.168.1.7), illustrating how the system dynamically automates the steps necessary to exploit a target machine while ensuring that the user remains in control at every stage. This user-centric approach balances efficiency and oversight, empowering the user to make informed decisions while benefiting from a high level of automation.\nIn the case of VM 1, PenTest++ first performed a detailed nmap scan on 192.168.1.7. The results identified the following services as potential entry points:\nFTP (Port 21): Anonymous login was enabled, allowing access to files such as note.txt.\nHTTP (Port 80): The server displayed the default Apache page, hinting at potential vulnerabilities in Apache 2.4.38.\nSSH (Port 22): No immediate vulnerabilities were evident, but potential attacks could involve brute-forcing weak credentials or exploiting OpenSSH 7.9p1.\nAt each step of the reconnaissance process, PenTest++ presented the findings to the user in a clear and actionable manner, enabling them to select the next course of action.\nFTP Attack Vector (Port 21) Using the PenTest++ system, the FTP service on port 21 was exploited dynamically. The system automatically logged in as an anonymous user, retrieved the file note.txt, and sent it to ChatGPT for in-depth analysis. ChatGPT returned its findings in JSON format, which PenTest++ parsed and displayed to the user in a tabular format using PrettyTable. This user-friendly presentation allowed the user to review and confirm key insights before proceeding.\nThe analysis of note.txt revealed the following key insights:\nA hashed password: cd73502828457d15655bbd7a63fb0bc8, likely MD5.\nA SQL INSERT statement, suggesting possible SQL injection vulnerabilities."}, {"title": "HTTP Attack Vector (Port 80)", "content": "Focusing on the HTTP service, PenTest++ leveraged gobuster to identify hidden directories on the web server, using this command:\ngobuster dir -u http://192.168.1.7 -w wordlist\nwhere:\ngobuster is the tool used for brute-forcing web directories and files;\ndir specifies directory brute-forcing mode;\n-u http://192.168.1.7 is target URL for the scan (u: URL); and\n-w wordlist represents the wordlist used for guessing directory and file names (w: wordlist). PenTest++ computes the number of entries in the wordlist to keep the user informed and help balance accuracy with scanning time.\nPenTest++ thus successfully discovered three hidden directories on the site: uploads, academy, and phpmyadmin, which could be accessed by appending the directory names to the site URL, e.g.: http://192.168.1.7/academy/. The academy directory contained a login form for an online course management system.\nThe credentials (10201321 and student) were successfully utilised to authenticate to the web application. Within the user profile page, an image upload functionality was identified. Following guidance from ChatGPT, this feature was exploited to upload a PHP reverse shell, disguised as an image file, to facilitate further access to the target system.\nPenTest++ dynamically generated a PHP reverse shell file containing the code (see Fig. 4):\n<?php exec(\"/bin/bash -c 'bash -i >& /dev/tcp/192.168.1.4/6655 0>&1'\"); ?>\nThis file was successfully uploaded through the web interface. Simultaneously, the PenTest++ system set up a Netcat listener on the attack machine (192.168.1.4) on port 6655, using the command nc -nvlp 6655, where:\n-n: Disables DNS resolution for faster execution.\n-v: Enables verbose mode to provide detailed connection information.\n-1: Configures the machine as a listener to await incoming connections.\n-p 6655: Specifies port 6655 as the listening port.\nThis provided shell access to the target machine, which was verified through the listener.\nSummary of Exploitation Steps To summarise, the following steps were carried out to gain access to VM 1 (192.168.1.7):\n1. nmap scanning identified FTP, HTTP, and SSH as potential attack vectors.\n2. Anonymous FTP access retrieved note.txt, which was analysed by ChatGPT.\n3. Hashcat was used to crack the MD5 hash, revealing the password student.\n4. Hidden directories were identified using gobuster, leading to the discovery of a login form in the academy directory.\n5. The credentials (10201321 and student) were used to authenticate and exploit an image upload vulnerability.\n6. A PHP reverse shell was uploaded and executed, granting shell access to the target machine (see Fig. 5).\nThis case study highlights the seamless integration of automation and GenAI in PenTest++, showcasing its capability to efficiently identify and exploit vulnerabilities with minimal user intervention while keeping the user in control. The user remained in control throughout, approving each significant step before proceeding."}, {"title": "Gaining Access to VM 2: 192.168.1.10", "content": "We now detail the systematic steps taken to gain access to the second target VM (192.168.1.10), showcasing PenTest++'s capabilities in automating and guiding the exploitation process. As with the previous case study, the user maintained full control, approving each step in the workflow.\nInitial Analysis and NFS Exploitation The nmap scan output identified several open services on 192.168.1.10, including NFS (port 2049), SSH (port 22), and HTTP (ports 80 and 8080). Among these, the NFS service provided the first viable attack vector. PenTest++ dynamically executed showmount -e 192.168.1.10 to identify shared directories, revealing /srv/nfs as accessible.\nThe system mounted the shared directory at a local mount point (/tmp/nfs_mount__srv_nfs) and listed its contents. A file named save.zip was discovered but found to be password-protected. PenTest++ automatically prepared the zip file for password cracking by converting it into a hash format suitable for John the Ripper (JTR). Using the popular rockyou.txt wordlist, JTR successfully identified the password as java101 (see Fig. 3). The file was then decompressed, revealing two files: an SSH private key (id_rsa) and a text file (todo.txt). The todo.txt file contained task notes, offering potential clues about the system's setup and the user (jp). Simultaneously, the private key (id_rsa) provided a possible means of SSH authentication. However, attempts to use the private key for direct SSH access failed, as additional credentials were required.\nHTTP Enumeration on Port 80 Moving to the HTTP service on port 80, PenTest++ leveraged its automated functionalities to conduct directory enumeration using gobuster (gobuster dir -u http://192.168.1.10 -w wordlist). The system autonomously identified accessible directories, including /app, /config, and /database. Upon discovering the /config directory, PenTest++ automatically initiated a download of the config.yml file, dynamically prompting the user for confirmation before proceeding.\nFollowing the download, PenTest++ executed a thorough scan of the file for sensitive content using a predefined list of keywords. During this process, the system detected database credentials, including the password (I_love_java) associated with the bolt user. The results were seamlessly formatted into a user-friendly table using PrettyTable, ensuring clear presentation and efficient decision-making.\nExploiting HTTP Service on Port 8080 When analysing the HTTP service running on port 8080, PenTest++ detected the presence of the BoltWire CMS and identified a Local File Inclusion (LFI) vulnerability. Leveraging guidance from ChatGPT, the system generated an LFI payload targeting the /etc/passwd file: http://192.168.1.10:8080/dev/index.php?p=action.search&action=../../../../../../../etc/passwd."}, {"title": "SSH Access via Port 22", "content": "Building on the information obtained through LFI exploitation, PenTest++ targeted the SSH service on 192.168.1.10. Using the jeanpaul account and the retrieved private key (id_rsa) protected by the passphrase I_love_java, PenTest++ ensured the private key had proper permissions by verifying and adjusting them to 600. In Linux, 600 represents file permissions where the owner has read and write access, but all other users are denied access, ensuring the private key remains secure and adheres to SSH security protocols. The system executed the following chmod command to enforce these permissions: chmod 600 id_rsa. After setting the correct permissions, PenTest++ executed the SSH command: ssh -i id_rsa jeanpaul@192.168.1.10, where:\n-i id_rsa: Specifies the private key file (id_rsa) to be used for authentication.\njeanpaul: Indicates the username for the target system.\n192.168.1.10: Represents the target system's IP address to establish the SSH connection.\nThis successfully established an SSH session and granted shell access to the target system (see Fig. 6).\nTo enhance user experience, PenTest++ launched the SSH session in a new terminal window using supported terminal emulators like gnome-terminal or xterm. By doing so, it ensured the main terminal remained undisturbed, allowing users to interactively proceed with other tasks, such as generating penetration test reports or conducting further investigations. This feature facilitated seamless multitasking, enabling the system to guide users through subsequent steps while maintaining access to the target system.\nIf the private key was unavailable or ineffective, PenTest++ employed sshpass to attempt password-based authentication using previously discovered credentials. Users were presented with a list of available usernames, enabling them to choose the most suitable option. The system dynamically adapted to the selected authentication method, ensuring all viable access points were tested.\nIn cases where authentication attempts failed, PenTest++ integrated the Hydra password-cracking tool to perform brute-force attacks on the SSH service. The system allowed configuration of parameters such as target usernames, thread count, verbosity, and custom password lists, enabling tailored attacks. For example, to brute-force the root account, PenTest++ executed the following Hydra command, allowing users to tailor the inputs as needed: hydra-lroot-P/usr/share/wordlists/rockyou.txtssh://192.168.1.10-t4-f-V, where:"}, {"title": "Summary of Exploitation Steps", "content": "The PenTest++ system successfully executed a complex, chained attack to gain initial access to the target system by systematically utilising critical information gathered from three key ports. Through the NFS service on port 2049, PenTest++ identified a passphrase-protected SSH private key stored within a password-protected zip folder, both of which were successfully cracked. On port 80, the system discovered the passphrase (I_love_java) for the private key within a configuration file located in a misconfigured directory. Next, on port 8080, PenTest++ identified and exploited a Local File Inclusion (LFI) vulnerability, which required authentication on the target website. The LFI exploitation enabled the retrieval of the /etc/passwd file, revealing the username associated with the previously discovered private key. Finally, PenTest++ started an SSH session on port 22 using the private key, the passphrase (I_love_java), and the username (jeanpaul), successfully establishing access to the target system.\nThis case study demonstrates PenTest++'s capability to automate complex exploitation workflows, including file extraction, password cracking, vulnerability exploitation, and multi-vector attack chaining. The system balances automation with user involvement by requiring confirmation at key stages, ensuring transparency and maintaining user control. This synergy between automation and user input underscores the practical effectiveness of PenTest++ in penetration testing scenarios.\n6.4 Reporting and Documentation\nThe PenTest++ system automates the creation of a comprehensive penetration testing report, ensuring that ethical hackers deliver detailed documentation for each engagement. Using the findings from the penetration testing activities,"}, {"title": "7 Discussion and Analysis", "content": "7.1 Answers to the Research Questions\nWe now address the research questions posed.\n1. Is it possible to automate the ethical hacking process effectively in a user-centric manner? Yes, automation of the ethical hacking process is achievable in a user-centric manner through the integration of systems like PenTest++. By leveraging modular design principles, PenTest++ combines task automation with user oversight, ensuring that ethical hackers remain in control of the process. The system allows users to confirm decisions at key points, adjust strategies, and maintain a clear understanding of the workflow.\n2. How can GenAI be integrated into this automation to enhance efficiency and accuracy? GenAI can be integrated into automation systems by serving as an analytical assistant that interprets tool outputs, suggests exploitation strategies, and structures reporting. For example, GenAI augments efficiency by parsing large datasets, identifying vulnerabilities, and correlating findings with known exploits. This integration reduces manual effort while maintaining a high degree of precision and adaptability.\n3. How much human intervention is required to ensure the accuracy and ethical compliance of an AI-driven ethical hacking system? Human intervention is essential at multiple stages to ensure both accuracy and ethical compliance. Users are required to validate AI-generated outputs, such as commands or analyses, to prevent reliance on potentially erroneous or inappropriate recommendations. Furthermore, human oversight is crucial to ensure that actions align with ethical hacking principles, including data privacy, informed consent, and responsible use of identified vulnerabilities. Finally, PenTest++ enables GenAI-powered automation with minimal human intervention, ensuring efficient operation while maintaining user control.\n7.2 Benefits and Features\nThe PenTest++ system offers a structured approach to penetration testing by combining automation with analytical capabilities through the integration of GenAI. Its design prioritises user oversight while enabling efficiency in ethical hacking workflows.\nAutomation with User Control PenTest++ automates numerous repetitive tasks, such as scanning, enumeration, and exploitation. By programmatically generating and executing commands, the system reduces manual effort and operational complexity. Importantly, it maintains user involvement by requiring confirmation at key decision points, ensuring adaptability to specific contexts. For example, users can dynamically adjust payloads, authentication methods, or scanning parameters based on the system's prompts. The PenTest++ system thus simplifies and automates the process of gaining access to target machines. Despite the high degree of automation, the user is consulted at critical decision points, ensuring adaptability, flexibility, and control.\nGenAI Integration The integration of ChatGPT enhances the system's analytical capabilities. ChatGPT assists in interpreting tool outputs, suggesting targeted exploitation strategies, and resolving challenges during various phases of testing. For example, it provided guidance on exploiting directory traversal vulnerabilities and analysing configuration files to uncover sensitive credentials. This integration allows testers to address complex scenarios effectively while benefiting from contextual insights."}, {"title": "Efficient Data Processing", "content": "The system effectively processes extensive datasets, presenting results in a structured and actionable format. For example, PenTest++ utilises structured tables to organise findings from tools such as nmap and gobuster, supporting informed decision-making. ChatGPT enhances this functionality by identifying and highlighting relevant information within large outputs, such as extracting critical credentials from configuration files or scripts.\nDetailed Reporting and Documentation A significant feature of PenTest++ is its ability to automate the generation of penetration testing reports. By integrating ChatGPT, the system produces well-structured documents that include an executive summary, findings, risk assessments, and recommendations. These reports can be generated in various formats, such as text, JSON, or PDF, ensuring accessibility for different audiences. This automation enhances documentation quality and saves time in post-engagement reporting.\nModular and Adaptable Design The modular architecture of PenTest++ allows for the seamless integration of additional tools and functionalities. For example, users can incorporate custom scanning tools or exploit new attack vectors based on specific requirements.\nCross-platform Compatibility The system's reliance on Python ensures compatibility across multiple platforms, making it suitable for diverse environments, including Windows, macOS, and Linux.\n7.3 Limitations and Risks\nWhile PenTest++ provides notable benefits, its implementation is not without limitations and potential risks, which require careful consideration.\nEthical Concerns and Misuse Risks The automation of sensitive tasks, such as crafting custom payloads or brute-force attacks, raises ethical considerations. Misuse of these features could lead to unauthorised exploitation or data breaches. Ensuring that PenTest++ is used within ethical and legal boundaries is critical to mitigating these risks. Clear guidelines and access controls are necessary to prevent the system's misuse by malicious actors.\nLimited Scope and Generalisability This study evaluated PenTest++ in a controlled virtual environment, focusing on two Linux VMs. While the system demonstrated robust performance, its generalisability to real-world networks with diverse operating systems (OSs), defensive mechanisms, and complex configurations remains to be validated. Further research is required to assess its scalability and adaptability in more dynamic environments."}, {"title": "Privacy and Data Sensitivity Compliance", "content": "The use of ChatGPT in analysing sensitive outputs, such as configuration files and system logs, raises privacy concerns. Ensuring compliance with data protection laws and ethical standards is critical to maintaining the integrity of the penetration testing process. Explicit safeguards must be implemented to prevent unauthorised data exposure and to ensure that the use of AI aligns with ethical principles.\nHallucinations ChatGPT's propensity for generating inaccurate or fabricated information, referred to as hallucinations, poses a risk in cybersecurity applications. During testing, some recommendations required manual adjustments or validation due to inaccuracies. For example, prior research [4] revealed that ChatGPT occasionally suggested incorrect commands or inappropriate parameters, highlighting the need for vigilant oversight. Over-reliance on AI without verification can lead to errors, emphasising the importance of human expertise in ethical hacking workflows.\n7.4 Future Directions\nTo address the limitations identified, the following improvements are recommended for PenTest++:\nOffline AI Integration: Implementing offline AI models could reduce reliance on internet connectivity and mitigate data privacy concerns.\nExpanded Target Compatibility: Enhancing compatibility with diverse OSs and network configurations would improve the system's applicability in real-world scenarios.\nQuantitative Evaluation: While this study primarily focused on qualitative observations of PenTest++ contributions, introducing robust quantitative metrics would enable a clearer, data-driven assessment of the system's performance. Metrics such as time saved in task execution, the success rate of automated recommendations, and improvements in workflow efficiency could provide concrete evidence of the system's value. Additionally, tracking the number of accurate versus inaccurate suggestions generated by integrated AI tools like ChatGPT would allow for a systematic evaluation of its contributions. This approach would not only highlight areas of strength but also identify opportunities for refinement, enabling continuous improvement in the system's design and functionality.\nComparative Analysis: Evaluating PenTest++ alongside other AI-driven systems could provide a broader understanding of its strengths and weaknesses.\nEthical Safeguards: Incorporating built-in mechanisms to ensure compliance with ethical guidelines and data privacy standards would strengthen the system's responsible use."}, {"title": "7.5 Summary", "content": "PenTest++ demonstrates the potential of combining automation and GenAI to enhance penetration testing workflows. While it provides significant benefits, addressing its limitations and ensuring adherence to ethical principles are essential for its responsible deployment. By refining its capabilities and expanding its scope, PenTest++ could serve as a valuable tool for ethical hacking, contributing to improved security assessments in an increasingly complex cybersecurity landscape."}, {"title": "8 Related Work", "content": "The intersection of AI and cybersecurity is a highly active area of research, with studies ranging from AI's role in detecting intrusions to aiding in offensive security including ethical hacking. The rise of sophisticated language models like GPT-3, introduced by Brown et al. [8", "11": "review the application of machine learning in cybersecurity, emphasising its role in areas like zero-day malware detection and anomaly-based intrusion detection, while also addressing the challenge of adversarial attacks on these algorithms. Other studies, including that by Gupta et al. [10", "15": "and identify the root causes of incidents in cloud environments [1", "12": "shows how advances in AI's deep learning algorithms can be used to enhance acoustic side-channel attacks against keyboards, achieving impressive keystroke classification accuracy via common devices like smartphones and Zoom. This development poses a significant threat, potentially enabling"}]}