{"title": "Flow-based Detection of Botnets through Bio-inspired Optimisation of Machine Learning", "authors": ["Biju Issac", "Kyle Fryer", "Seibu Mary Jacob"], "abstract": "Botnets could autonomously infect, propagate, communicate and coordinate with other members in the botnet, enabling cybercriminals to exploit the cumulative computing and bandwidth of its bots to facilitate cybercrime. Traditional detection methods are becoming increasingly unsuitable against various network-based detection evasion methods. These techniques ultimately render signature-based 'fingerprinting' detection infeasible and thus this research explores the application of network flow-based behavioural modelling to facilitate the binary classification of bot network activity, whereby the detection is independent of underlying communications architectures, ports, protocols and payload-based detection evasion mechanisms. A comparative evaluation of various machine learning classification methods is conducted, to precisely determine the average accuracy of each classifier on bot datasets like CTU-13, ISOT 2010 and ISCX 2014. Additionally, hyperparameter tuning using Genetic Algorithm (GA), aiming to efficiently converge to the fittest hyperparameter set for each dataset was done. The bioinspired optimisation of Random Forest (RF) with GA achieved an average accuracy of 99.85% when it was tested against the three datasets. The model was then developed into a software product. The YouTube link of the project and demo of the software developed: https://youtu.be/gNQjC91VtOI", "sections": [{"title": "I. INTRODUCTION", "content": "As the Internet grows, so does the platform on which sophisticated botnets can thrive to facilitate cybercrimes, increasingly for the purposes of financial gain. A machine can be infected with a 'bot binary' executable via traditional attack techniques, such as viruses and worms distributed through user downloads and email links, which runs silently in the background of a user machine. Once the bot binary is running, the machine becomes a 'zombie' whereby it waits for commands from a Command and Control (C&C) server, controlled by the 'botmaster', or from another bot.\nOver 1400 large-scale botnet attacks targeted critical infrastructure, peaking in August-September, with Mirai, XorDDoS, Gafgyt, and hailBot dominating. China and the US were primary targets, and IoT devices, especially routers, were most vulnerable due to weak security. Mirai family controlled the largest number of devices, with QakBot and Mirai leading in Command and Control (C&C) servers, primarily in the US. UDP Flood was the prevalent attack vector, while Linux/IoT botnets, leveraging Go language, showed increased activity. Windows botnets focused on data theft and malware distribution. Predictions for 2024 include intensified infrastructure attacks, more sophisticated botnet activities, and enhanced malware concealment (Nsfocus, 2023).\nA zombie machine will not generate a large amount of network traffic or processor activity until commanded to act. The traffic generated by a zombie on a network before the attack execution is for C&C server or another bot (Vacca, 2010), therefore, the proportion of the traffic generated and received by the zombie remains minimal and unnoticed.\nA group of zombies under the control of a botmaster, forms a botnet to perform distributed computing tasks having control of all of the resources provided by the zombies in terms of raw computing power and network bandwidth. Botnets can be utilised for a large range of attacks, from performing Distributed Denial of Service (DDoS) attacks, to sending spam and stealing personal information to facilitate cyber crimes, such as financial fraud.\nThe Qrator Q1 2024 DDoS Attacks Statistics and Overview report reveals a significant growth in the largest recorded botnet, which expanded to 51,400 devices, up from 16,000 in the previous quarter. However, this number remains lower than the same period in 2023, when a botnet comprised 131,628 devices (Qrator, 2024).\nBotnet usage can extend beyond DDoS attacks. They are a dynamic and heterogeneous cyber threat, even extending into modern information warfare and misinformation. Networks that control critical infrastructures, such as power and health services, are at serious risk. If a nation's infrastructure is sufficiently affected by botnet attacks, it may prompt a military response against the suspected nation. Such a response may get out of control with available nuclear weapons, therefore contributing to the Doomsday Clock being calculated at being still 2 minutes to midnight' (Mecklin, 2020).\nAs the usage of botnets as means of generating profit is increasing, especially in Cybercrime-as-a-Service (CaaS) wherein subsets of a botnet are rented out (Putman et al., 2018), botmasters must ensure that their bot evades the Intrusion Detection Systems (IDSs), to ensure that they can maintain operational persistence, allowing them to gain the trust of buyers. As a result, they can increase the potential for botnet growth to attract higher profits from buyers requiring a large amount of cumulative bandwidth and processing power.\nThis research aims to create a network-based IDS suitable for the behavioral differentiation between normal and malicious traffic, eliminating the need of monitoring any communication protocols, ports, architectures, and payload-based evasion mechanisms for botnet detection. Different machine learning (ML) classification algorithms were evaluated using publicly available botnet datasets, with the bio-optimised tuning of classifiers' hyperparameters to ensure optimal performance. The bioinspired and optimized behavioral models were then utilized in the design of an IDS for transformation into a software product.\nThe rest of the paper is as follows: Section II looks into the related works followed by Section III describing the proposed work. Section IV explains the three datasets in more detail. Section V explains the feature extraction process. Section VI provides details on the important feature to be used. Section VII provides information about the program structure and the techniques. Section VIII represents the ML models, their parameters and their experiment results. Section IX displays the optimization algorithm with its search space. Section X shows the product design followed by section XI displaying the implementation for the product/software. Section XII explains the detection testing followed by Section XIII presenting the results. Section XIV informs about the future work to be carried out followed by Section XV which is the conclusion."}, {"title": "II. RELATED WORK", "content": "1) Architecture: A bot needs to communicate with a botmaster to successfully form a botnet following centralised or decentralised topologies (Gardiner, 2014). In a centralised architecture, a classical star overlay topology is implemented, facilitating the direct communication to and from one central C&C server, generally from using the IRC protocol for a simple deployment, to Hypertext Transfer Protocol (HTTP) and HTTPS (secure HTTP) for an effective firewall traversal (Vacca, 2010). Since HTTP is the most common web protocol, running on port 80 (or 443 for HTTPS), the C&C traffic can be disguised within normal network activity.\nFor the architecture to be more redundant, a decentralised approach was adopted for C&C communications, whereby no single central C&C server exists, thus removing the single point of failure (Holz, 2005). A simple implementation of a decentralised architecture is by the utilisation of a distributed set of C&C servers, geographically separated to control their subset of bots, enabling load balancing and increasing the scalability potential of the botnet. If any single C&C server stops responding for any reason, the bots can redirect their traffic to other C&C servers in the botnet (Spamhaus, 2019). Additionally, portions of the botnet can then be rented or sold to buyers looking to target attacks at certain entities, increasing the profitability for bot masters by providing their botnet-as-a-service.\nPeer-to-peer (P2P) bot-architecture has emerged, as a means of increasing resilience to C&C server take-down attempts. In P2P, any bot can be a C&C server, with the ability to propagate new commands to peer bots (Wang et al., 2009).\n2) Operation: Botnets exhibit a certain operational behaviour, similar to that of a biological life cycle, in that they are born, communicate and reproduce to grow in size. To increase the size of the botnet, a host must be exploited and subsequently infected, via one or more of the active or passive propagation methods that are employed by bots (Acarali et al., 2008), such as autonomous vulnerability scanning and exploitation on a LAN (also known as a 'worm') (Gebhart, 2004), and via socially engineered spam, containing a malicious download (Gardiner et al, 2014). If the bot binary is executed on a computer, it can then use its rallying mechanisms and become a new participant in further propagation efforts of the botnet.\n3) Bot Detection Evasion Methods: As detection methods have evolved to more effectively detect bot activity, bot binary developers have naturally responded with the implementation of various evasion methods to reduce detection and thus more effectively allow bots to maintain undetected operational persistence. Some of these methods include communication payload encryption and packet fragmentation. In a polymorphic blending attack, wherein a 'normal' profile of the traffic on the network can be established by a bot prior to communication and the characteristics of the payload can subsequently mimic the normal profile when the payload is constructed. This process operates via padding the payload with specific characters as to more closely match the normal payload byte frequency profile, synthesised via a network activity \u2018learning phase' of the bot, allowing the malicious traffic to blend in and thus more effectively evade specific anomaly-based detection, such as the aforementioned \u2018PAYL\u2019method ((Folga, 2006; Song, 2007)."}, {"title": "B. Network-based Detection", "content": "Botnet detection techniques are classified into four categories: signature-based, anomaly-based, DNS-based, and data mining-based. Signature-based methods rely on known patterns, while anomaly-based approaches identify unusual network traffic but risk false positives. DNS-based techniques analyze traffic flow for irregularities in DNS queries. Data mining methods extract features from network traffic, leveraging machine learning models like Naive Bayes, Random Forest, and Support Vector Machines to classify botnet activity effectively. Supervised learning models and deep learning (e.g., HMM scores, CTU-13 dataset) show strong results in botnet detection. Unsupervised clustering methods like k-means reveal dissimilarities in traffic. IoT and smartphone-specific botnets are detected using balanced datasets and advanced machine learning techniques like SMOTE, ensemble learning, and neural networks (Mannikar et al., 2024). We will discuss some selected approaches below.\n1) Signature-based Detection: For communication with a C&C server or other peers, a bot must be a participant in the network. The Network Intrusion Detection Systems (NIDS), such as Snort, can be utilised to help detect any such communication. The signature-based detection has been the most widely used method in practice. It works by matching the pre-defined signatures to each packet's content data; generating an alert if a match is found, deeming it as a malicious behaviour (Baker et al., 2004). However, this requires analysis of every network packet, which is, naturally, computationally intensive (Roesch, 1999) and shown in research to suffer from a large proportion of packet drops when saturated at higher network speeds (Shah Issac, 2018). Furthermore, experimentation shows that Snort's false positive rate (FPR) can be high, with the default rule sets, rendering it difficult to analyse or trust the alerts (Shah Issac, 2018). The FPR can be calculated with the following formula in equation-1, where FP is false positive and TN is true negative:\n```latex\nFPR = \\frac{FP}{FP + TN}\n```\n2) Anomaly-Based Detection: Anomaly-based detection techniques, such as a payload-based IDS also known as 'PAYL' method, of n-gram analysis and modelling of the byte frequency distribution of malicious polymorphic payloads that was developed by Wang and Stolfo (2004), can be effective in detecting byte-based payload instances that exhibit a significant Mahalanobis distance from the normal distribution profile of the network traffic. The greater this distance, the more likely that the payload is anomalous and malicious due to it exceeding a dynamic threshold; as such, an alert will then be generated."}, {"title": "C. Supervised Machine Learning", "content": "Due to the inadequate performance of signature-based intrusion detection systems, especially in cases where detection evasion methods are employed, other detection methods must be explored in order to ascertain techniques and methodologies that can be utilised to create a suitable IDS. Machine Learning algorithms are becoming increasingly utilised within many areas of academic research due to their ability to make classification predictions from trained models, which are generally trained in a supervised manner using labelled datasets. The classification algorithms operate via attempting to 'fit' the model to the data provided.\nChen et al. utilised conversational features from the CTU-13 botnet dataset scenarios, allowing the training of models via a range of classifiers, including DecisionTump, BayesNet and Random Forest Classifier methods (Chen et al, 2017). A feature selection algorithm, via the Random Forest Classifier's ability to rank feature importance values during training on the dataset, is used in order to help reduce the size (the dimensions) of the training dataset. Overall, the Random Forest Classifier outperformed the other classification methods under test in the evaluation, achieving a detection rate (DR) of 93.6% and false positive rate (FPR) of 0.3%. Although the FPR is favourable when compared to those present in the performance of Snort, the results are difficult to extract real world performance from due to the Detection Rate metric, which only takes into account the true positives (TP) and false negatives (FN) in the results. This may not give an accurate representation of the performance of the detection method in the context of the CTU-13 dataset scenarios, which are shown to contain a large class imbalance, whereby the malicious data accounts for an insignificant portion of the dataset. Thus the true negatives (TN) and false positives (FN) are not taken into account.\nAnother evaluation of classification methods for the detection of HTTP-based botnets is conducted by Dollah et al. (2018) using a research test bed with HTTP bot samples. They collected botnet traffic and merge the malicious traffic data with legitimate web browsing traffic in order to create a labelled dataset to facilitate their evaluation efforts (Dollah, 2018). Decision Tree, k-Nearest Neighbour, Naive Bayes and Random Forest classifiers are utilised in the supervised learning mode and evaluated against Accuracy, Precision, Recall and False Positive Rate metrics. Overall, the k-Nearest Neighbours classifier resulted in the best detection performance, with an average accuracy of 92.93%. Surprisingly, this experiment showed the Decision Tree Classifier outperforming the Random Forest Classifier for each of the HTTP datasets. This is unexpected as the Random Forest Classifier is an ensemble method, whereby it utilises multiple decisions trees in order to synthesise better models. Additionally, despite the advantages of the use of multiple bot samples in the evaluation, the use of test bed-generated dataset scenarios rendered the results even more questionable. The performance cannot be easily validated by other researchers, where a publicly available dataset can be used in multiple evaluations to help compare the results from different methodologies. Moreover, the class balances or counts of the datasets are not discussed or listed, resulting in a more difficult analysis of the research as a whole, as the results cannot be correlated back to the datasets they were trained on when attempting to identify anomalies. The hyperparameters utilised for the classifiers are also not discussed or listed.\nAI-based botnet detection has advanced significantly, leveraging machine learning (ML) and deep learning (DL) techniques to identify and mitigate botnet threats. Researchers have developed models such as convolutional neural networks (CNNs) and recurrent neural networks (RNNs) to analyze network traffic and detect anomalies indicative of botnet activity. A comprehensive review by Mahi (2023) examines the application of ML and DL in detecting botnet attacks on Internet of Things (IoT) devices, highlighting the evolution of detection techniques in response to sophisticated botnet strategies. Additionally, studies have focused on the resilience of detection frameworks against adversarial attacks, emphasizing the importance of robust Al models in cybersecurity (Almashor et al., 2024). The integration of Al in botnet detection continues to evolve, addressing emerging challenges in the cybersecurity landscape."}, {"title": "III. PROPOSED WORK", "content": "Botnets and their network behaviour was analysed to ascertain a basis to formulate the solution. The formulation of the anomaly-based detection methods involved an investigation into the current techniques to detect malicious network flows, namely the signature-based detection methods in current NIDSs. The paper looked into the need for further techniques to be explored, i.e., to the application of ML and Neural Network (NN) in the detection of botnets in terms of their effectiveness, integrated with a strong optimisation technique. The ML implementation was facilitated through the use of higher-level Python3 libraries via supervised learning techniques, such as Scikit-Learn (sklearn) and TensorFlow, to train, evaluate and optimise models on botnet datasets.\nThe feature selection/reduction was applied to identify the features in the datasets that have the largest influence in the classification of the label. Data processing algorithms can be created, if necessary, to create NetFlow datasets from normal packet capture files (\u2018*.pcap'). Netflow is a protocol that will allow to collect the IP addresses from the network traffic. An experimental comparison of classification algorithms will be carried out to identify which of them has the most desirable performance metrics.\nAs labelled botnet data were used from the datasets, supervised learning can be used to train models. An algorithm is used to fit the model to some training data so that the model can predict the labels for new or unseen data. The dataset can be split into training and testing sets to allow the performance of each algorithm to be assessed. Additionally, cross-validation, such as K-Fold or ShuffleSplit (Scikit-learn, 2019a), was used to reduce any model over-fitting. A separate final testing set of untrained data can then be used to evaluate their performance.\nAnalysis of the performance of various supervised learning classification algorithms was done to ascertain which performed best in terms of the model's evaluation metrics, such as the F1-score, recall, precision and accuracy. A range of algorithms were used via sklearn such as Decision Trees, Random Forest, K-Neighbours, Naive Bayes, Support Vector Machine and ANN.\nFigure-1 shows the project overview in terms of creating the model and processing the data.\nSubsequent experiments were conducted via the utilisation of multiple hidden layers in Artificial Neural network (ANN) algorithms. This is to explore the initial effects of deep learning. These algorithms are based on the theory of neurons arranged in a network in layers, whereby neurons can take multiple inputs and compute a certain output after being processed through hidden layers. This will be conducted through the use of Tensorflow (TensorFlow, 2019).\nFurther optimisation was carried out in the experimentation phase through tuning a classifier's hyper-parameters. After testing several combinations of hyper-parameters for each algorithm, the optimal parameters will produce the best model score. However, brute-forcing the optimisation requires a large amount of human intervention to converge on the best hyperparameter values. Algorithms such as the Exhaustive Grid Search and Randomised Parameter Optimisation exist to reduce the workload (Scikit-learn, 2019b). These methods can be compared to various biologically-inspired algorithms to evaluate the best hyper-parameter optimisation methods available for model training in this scenario. Bio-inspired algorithm can include the Genetic Algorithm (GA), Firefly Algorithm (FA), Particle Swarm Optimisation Algorithm (PSO) etc. (God'\u0131nez-Bautista, 2018), though we will focus on GA because of its support in existing literature.\nThe final model was implemented into a detection engine and a software prototype was created. Testing of the program was carried out to validate the performance of the anomaly detection engine compared to conventional NIDS methods, potentially on synthetic traffic from the datasets. Testing also included evaluating the software in terms of its quality and suitability for the desired purpose."}, {"title": "IV. DATASETS", "content": "Supervised ML can only be conducted when classifiers are provided with a sufficient amount of labelled data, especially in the case of low volume traffic bot communications (Khattak et al., 2014). This will allow the classification algorithms to create an accurate model, from which future predictions can be made on new unseen data. Additionally, the data format of the datasets are to be consistent to maintain the same feature headers and structure. If the data format is not correct, it can be corrected through the pre-processing stage, where manual feature extraction can be done."}, {"title": "A. The Case for Network Flows", "content": "If normal traffic packet capture datasets were to remove the application layer (payload) data, signature-based detection methods are then rendered unsuitable, as the content-matching rules have no content to operate on. Although, this would address the privacy concerns but would only leave the packet headers for analysis. Using such a method, without any application data to compare known signatures, makes it very difficult to identify a bot's network communication. Hence, the flow-based features are becoming increasingly popular in traffic analysis research, as they are inherently exempt from privacy concerns by not including raw payload data, but instead extract various features from each network flow (Liu et al., 2010). Moreover, research by Haddadi, et.al shows that flow-based detection systems outperform packet-orientated rule-based detection systems (Haddadi et al., 2016). Packets belonging to the same communication connection between a source and destination are aggregated together with this method, which is then processed into a representation of the whole connection. This takes the form of a 'network flow'. Therefore, this can provide a method of representing bot communication behaviours despite the bot's employing evasion techniques like packet fragmentation and encryption.\nThe process of obtaining flow data is generally performed through the aggregation of raw packets into flows, then extracting uni or bi-directional features from the flow data, which is exported to a collection client for analysis. For example, this can be conducted using a flow-exporting enabled network device, such as a Cisco router exporting net flows, which are then collected by a network administrator's computer (the flow collector).\nThe resulting flow output can take the form of a comma separated Value (.csv) text file, which is a common file format and is supported in most data analysis software and ML libraries. Additionally, as no raw payload data is stored, such as in a .pcap file, the file sizes of network captures, in a flow format are considerably smaller and take up a fraction of the storage space. This also can help to decrease ML training time due to the smaller dataset size (Gardiner et al., 2014)."}, {"title": "B. Selected Datasets", "content": "Considering the factors mentioned in the previous subsection, the datasets that are most suitable are used in this work as they are collected within a physical environment (i.e. not generated through a simulation tool). They are realistic as they contain real bot traffic and are used by other researchers. Also note that multiple datasets are fundamental to sufficient evaluation of a detection system (Sommer Paxson, 2010). The following selected datasets contain a range of bot samples exhibiting their network-based communication and operational characteristics. Moreover, the resulting class balances are more representative of real scenarios, wherein the proportion of bot traffic is negligible.\nOnce all datasets have been pre-processed and labelled, the resulting class distributions can then be counted and analysed. This is to ensure that the datasets are consistent with the requirements to ensure that the data is representative of real world scenarios, with a realistic class balance (depending upon included traffic) and will aid in future analysis of evaluation and experimentation results that utilise these datasets. The label classes are in the form of binary categorical strings ('Normal' and 'Botnet'), which are suitable for binary classification.\n1) CTU-13: The CTU-13 dataset was captured in 2011 at the Czech Technical University (CTU) and includes 13 scenarios, in both .pcap (botnet capture only) and labelled bi-directional network flow formats (including all background, normal and botnet traffic) (Garcia et al., 2014). It includes 7 different bot samples each exhibiting unique operational behaviour. The scenarios cover botnet usage areas including DDoS, spam, click-fraud (CF) and port scanning (PS), each of which utilises different communication protocols and architectures, such as IRC, HTTP and P2P. The total size of the 13 extended feature set network flow datasets equals 4.58GB.\n2) ISOT 2010: The ISOT 2010 dataset is a merged product of malicious and normal traffic datasets (Saad et al., 2011). The malicious traffic, from the French chapter of the Honeynet Project, comprises of activity from the Storm, Waledac and Zeus botnets. The normal background traffic datasets are the product of merged datasets from Ericsson Research and the Lawrence Berkeley National Laboratory. This data includes traffic from HTTP web browsing, gaming and P2P clients. The published dataset takes the form of a single .pcap file, 10.6GB in size.\n3) ISCX Botnet 2014: Similar to ISOT 2010, the ISCX Botnet 2014 dataset utilised a similar dataset merging methodology, with the various subsets of the included datasets being replayed over a network testbed topology, which includes a range of bot samples in the training and testing sets, to create a more generalised dataset for evaluation of botnet detection methods (Beigi et al., 2014). The dataset combines 15% of the ISOT 2010 dataset, a subset of the normal traffic from the ISCX 2012 IDS and four separate bot scenarios from the CTU-13 (CIC, 2014). This dataset also takes the form of a .pcap file, with the training portion totalling 4.9GB.\nIn the majority of the CTU-13 datasets, the proportion of botnet traffic is negligible, with only three CTU-13 scenarios (9, 10 and 11) exhibiting a more significant botnet traffic class percentage. This is expected due to the nature of the bot attack behaviours that are exhibited. These specific attacks generally operate at volume in order to allow the botnet to sufficiently propagate and perform their malicious actions at a larger scale, thus producing more traffic than that of solely periodic C&C communication. Scenario 9 has attacks consisting of spamming, click-fraud and port scanning through 10 Neris bot instances, scenario 10 has UDP and ICMP DDoS attacks by Rbot using 10 bots instances and scenario 11 has 3 bot instances, respectively as in Table-I (Garcia et al., 2014). CTU-13's scenario 7 (Sogou) exhibits the lowest botnet class percentage with only 0.06%, which is coupled with the fact that this dataset contains second lowest number of total flows; as a result, only 63 flows are in the botnet class. This is indicative of the challenges of botnet detection, as bots do not communicate at volume Gu et al., 2008), which highlights the importance of the requirement that datasets contain a large volume of normal traffic and are conducted over a long period of time, to ensure that sufficient botnet communication and attack behaviour can be recorded.\nThe largest bot class proportion is present in the ISCX Botnet 2014 dataset, possibly due to the fact that it includes multiple bot samples. This results in cumulative bot attack behaviour flows, increasing the overall proportion of bot traffic. This dataset will still be utilised in the evaluation in order to understand the effect of models that are trained on more bot behaviours, allowing an evaluation of the effect of behavioural model generalisation when applied to normal traffic.\nCTU-13 and ISOT 2010 datasets have been produced towards providing a range of realistic and representative bot behaviours, where the proportion of botnet traffic compared to normal traffic is lower, as they intend to operate without causing detectable noise on the network or impact performance when they are not conducing volumetric attacks (Khattak et al, 2014). Thus there is an inherent realistic class imbalance in the majority of the datasets, which is a desirable characteristic when they will be applied in an evaluation of behavioural modelling classification algorithms."}, {"title": "V. FEATURE EXTRACTION", "content": "The CTU-13 is already in the required network flow format, with both base and extended feature extracted datasets publicly available. However, this is not the case for the ISOT 2010 and ISCX 2014 datasets, which are available as .pcap files only. Therefore, they must be processed via feature extraction, into network flow format, with the same feature set present in the extended CTU-13, as to maintain consistency.\nTwo main feature sets are present in the CTU-13, namely the base and extended network flow datasets, which include a total of 15 and 33 features respectively (including the 'Label' field) (Garcia et al., 2014). The base feature set includes both source and destination IP addresses and port numbers, along with basic total bytes and packet counts that occurred during the connection. In contrast, the extended feature set expands connection data analysis with the presence of additional feature fields. These fields intend to provide more specific information about both the source and destination total bytes, packets, rate, application layer bytes, time-to-live (TTL) values, estimated number of hops from the flow collector, along with TCP-extracted flow information such as source and destination window sizes, round-trip-time (RTT) and connection setup times. The full feature descriptions for both the base and extended datasets are available in Table-IV, and these are derived from the 'ra' man page (Bullard, 2020). The extended array of more detailed features available in the extended datasets can cover more sophisticated details of specific network activities. In a comparative evaluation by Haddadi et.al between the base and extended CTU-13 datasets (Haddadi et al., 2016), facilitated by 10-fold cross-validation of the C4.5 decision tree algorithm on each dataset, it is shown that the extended feature sets yield higher detection rate performance. They concluded that the specific categories present in the extended feature set are more suitable for bot communication detection. Therefore, the extended feature set will be utilised in this proposed work for experimentation and evaluation. This feature set is also more suitable for feature selection as compared to the base feature set."}, {"title": "B. Process", "content": "As the CTU-13 dataset is already available with an extended feature set, only the ISOT 2010 and ISCX Botnet 2014 datasets are required to be specifically processed, with the feature set matching that of CTU-13. The feature extraction process, from raw packet capture files to network flow data, is conducted via the use of the Argus network flow collector and processor to create flow records (Argus, 2012). This data can then be passed into the Argus Client command 'ra' which reads argus data, where the delimiter character is set to a comma (-c ','), to present the data in .csv format with the correct feature set (Bullard, 2020). Additionally, the required fields can be defined using -s command-line option to align with those present in the CTU-13 extended network flow feature set. Bash scripts were developed to process the ISOT 2010 and ISCX Botnet 2014 packet capture datasets into the required network flow datasets.\nFor example, the script in Table-V can be used for extended network flow feature extraction, from a raw packet capture file, used for the ISCX Botnet 2014 dataset."}, {"title": "C. Dataset Preparation and Pre-Processing", "content": "To facilitate ML in Python 3.7, using the sklearn library (Pedregosa et al., 2011), the datasets must first be loaded from the .csv file into the program's Random-access memory (RAM), into a format suitable and supported by sklearn. This is achieved via the Pandas library with its DataFrame data structure object (Pandas, 2014a), chosen for the wide range of object attributes and data manipulation functions available. Dataset loading is conducted via pandas.read_csv (Pandas, 2014b), which returns the data as a DataFrame object. Additionally, the CTU-13's labels contain verbose descriptions of the exact network activity, such as flow=From-Botnet-V50-4-TCP-WEB-Established-SSL and flow=From-Normal-V50-Stribrek, which are not suitable for categorical binary classification due to the range of descriptions. Therefore, during the pre-processing iterations, the 'Label' feature vector fields for CTU-13 were normalised to only contain 'Normal' and 'Botnet' categorical binary string labels. In the case of the ISOT 2010 and ISCX Botnet 2014, which are not directly labelled due to their packet capture file format, labels must be added to identify the network flow traffic, depending upon the identified infected machines' IP addresses, detailed in each dataset's documentation."}, {"title": "VI. FEATURE SELECTION/REDUCTION", "content": "Through a process of feature selection and reduction, the dataset dimensionality can be reduced, thus reducing ML classifier fitting times, whilst retaining the more important features, without inducing a significant negative impact on classifier performance (Fatima et al., 2019; Khan et al., 2019). As a side effect of such a process being carried out, feature importance metrics can be computed and subsequently help to provide an avenue down and the various behavioural characteristics can be analysed. This will help to gain an understanding of how different bot behaviours can be identified via the specific subsets through network flow features, providing the most variance in the classification process."}, {"title": "A. Manual Feature Exclusion", "content": "Features vectors from the dataset that are not essential were removed from the training data, such as the network flow metadata, dates, connection start and end time, along with the source and destination IP addresses. This is a cardinal part of data preprocessing for the design of the model's capabilities, as feature vectors that are manually excluded ensure that the classifiers are trained, evaluated and operated in a desirable way. The aim is to develop a detection system that is completely independent of the port numbers and protocols that are being utilised by bots in the network flow-based communications data (Mahmoud et al., 2015). Such considerations must be applied in the context of the range of botnet detection evasion methods that are being increasingly utilised and therefore must be taken into account, such as the dynamic port fluxing methods (Beigi et al., 2014). This can also allow to train a model to allow generalisation to only the behavioural feature vectors (Haddadi et al., 2016).\nWhen these considerations were applied and the related features were excluded, the original extended dataset feature set was reduced to 24 instead of 33 (shown with a checkmark in table-IV), which only contains integer and float data types. This exclusion takes place within the dataset splitting function, via defining the feature labels that are to be maintained, as a result of the manual feature exclusion process, in an array and then utilising the 'pandas.DataFrame.loc' attribute (Pandas, 2014c), allowing the resulting 'X' feature vector DataFrame to be returned containing only the relevant features."}, {"title": "B. Computing Feature Importance", "content": "Each feature in the feature set exhibits a 'weight' in the classification of data and thus weaker or irrelevant features can be removed to reduce the dimensionality of the dataset. This allows training time to significantly reduce whilst keeping the classifier performance to acceptable values (Scikit-Learn, 2019b). One of the most prominent methods is Random Forest (RF) classifier that proves to be effective and will be utilised in this work (Chen et al., 2017). Further exploration of feature selection methods with a comparative evaluation was carried out by Pektas, & Acarman (2017), whereby tree-based feature selection via a RF provides the highest F1-score of 0.99/1.0 with 10-fold cross-validation on ISOT dataset.\nIn this work, the feature ranking was performed using RF in sklearn, fitting the dataset results in a model object that contains a feature_importances_ attribute array. In this methodology, only the top 15 features of each dataset were retained for training and testing of each classifier's performance."}, {"title": "C. Feature Importance Analysis", "content": "Once the feature selection methodology was applied to each dataset, the feature importance values were collected, averaged and presented in Figure-3. It is clear from this analysis that sTos, dTos, ackDat and DstWin result in the lowest average feature importance values. Therefore, we can conclude that the general botnet network communication behaviour in these particular weak features are close to the normal network traffic behaviour and thus cannot be used to differentiate the traffic well."}]}