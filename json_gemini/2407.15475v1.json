{"title": "A Multi-Level Corroborative Approach for Verification and Validation of Autonomous Robotic Swarms", "authors": ["Dhaminda B. Abeywickrama", "Suet Lee", "Chris Bennett", "Razanne Abu-Aisheh", "Tom Didiot-Cook", "Simon Jones", "Sabine Hauert", "Kerstin Eder"], "abstract": "Modelling and characterizing emergent behaviour within a swarm can pose significant challenges in terms\nof assurance. Assurance tasks encompass adherence to standards, certification processes, and the execution of\nverification and validation (V&V) methods, such as model checking. In this study, we propose a holistic, multi-level\nmodelling approach for formally verifying and validating autonomous robotic swarms, which are defined at the\nmacroscopic formal modelling, low-fidelity simulation, high-fidelity simulation, and real-robot levels. Our formal\nmacroscopic models, used for verification, are characterized by data derived from actual simulations, ensuring both\naccuracy and traceability across different system models. Furthermore, our work combines formal verification with\nexperimental validation involving real robots. In this way, our corroborative approach for V&V seeks to enhance\nconfidence in the evidence, in contrast to employing these methods separately. We explore our approach through a\ncase study focused on a swarm of robots operating within a public cloakroom.", "sections": [{"title": "I. INTRODUCTION", "content": "Swarm robotics offers a method for coordinating a large number of robots, inspired by swarm behaviours\nin nature [1]. The collective behaviours of a swarm are not directly engineered into the system. Rather,\nthey arise due to interactions among individual robots and their environment, called emergent behaviour [2].\nModelling and characterizing emergent behaviour can pose significant challenges [3], presenting an obstacle\nto ensuring assurance of swarms. Assurance tasks encompass adhering to standards, obtaining certification,\nand conducting verification and validation (V&V).\nVerification involves ascertaining that an artifact complies with its specified requirements, while validation\ninvolves ascertaining that an artifact will effectively perform its intended functions in the real world [4].\nAutonomous robotic systems are inherently complex, thus a range of distinct verification methods, known as\nheterogeneous verification (e.g., testing, simulation, and formal verification), is required to foster confidence\nin these systems. Formal verification encompasses various mathematical techniques (e.g., theorem proving,\nmodel checking) used to prove properties concerning a formal representation of a system [4]. Model\nchecking is employed for verifying that a formal model satisfies temporal logic properties by exhaustively\nexploring the entire state space. The outcome of this process usually manifests as a Boolean value,\nsignifying whether the model fulfills a specified property [4]. When the model fails to satisfy a property, a\ncounterexample (error trace) is generated, describing the sequence of states that resulted in the violation\nof the property. Probabilistic model checking additionally allows the calculation of probabilities that the\nspecified properties will be fulfilled.\nValidation is a process which, in common with heterogeneous verification, uses a range of techniques\n(e.g., design reviews, integration testing, and user trials) to establish whether a system is fit for purpose in\nits intended real-world environment. In this work, validation is performed on our swarm robot platform,\nDOTS (Distributed Organisation and Transport System) [5], via a system integration test using physical\nhardware in a swarm arena environment representing the intended real-world operational design domain.\nMost existing approaches to swarm system modelling focus on simulations, which can be low-fidelity\n(LF) or high-fidelity (HF). There are several macroscopic formal approaches that aim to analyze overall\nswarm behaviour [6], [7], [8], [9], [10]. However, only a few approaches provide a unified, multi-level\nrepresentation of swarms ([11], [12], [13], [14]). Nevertheless, none of these utilize data obtained from\nactual simulations to characterize the formal models, nor do they investigate the emergent properties that\narise from the inherent qualities of swarms. The main contributions of this paper are:\n\u2022 Multi-level Swarm Modelling: We propose a holistic swarm system modelling approach that spans\nmacroscopic formal modelling, LF simulations, HF simulations, and real-robot levels (see Fig. 1).\n\u2022 Incorporation of Simulation Data in Formal Models: Unlike existing approaches, our formal\nmacroscopic models for verification are characterized using data derived from both LF and HF\nsimulations, ensuring accuracy and traceability across different system models.\n\u2022 Corroborative Approach to V&V: We integrate formal verification with experiments involving real\nrobots, aiming to instill greater confidence in the evidence compared to using these techniques in\nisolation.\n\u2022 Case Study on a Public Cloakroom: We apply our approach to a case study involving a swarm of\nrobots operating within a public cloakroom, demonstrating its effectiveness in a practical scenario.\nThe paper's structure is as follows. Section II provides background information on this work, key\nrelated works, and a brief description of the case study. In Section III we present our macroscopic formal\nmodel. Section IV describes the simulations and the data used to characterize our formal models, while\nSection V discusses our formal verification approach. In Section VI, we validate our work using real-world\nexperiments. Finally, Section VII concludes the paper."}, {"title": "II. BACKGROUND", "content": "The requirements used in this paper are based on the overall specifications derived in [2], which\nproposes a process called AEROS for safety assurance of emergent behaviour in autonomous robotic\nswarms. AEROS consists of six stages within the emergent behavior lifecycle [2]. It is derived from the\nAMLAS process [15], which is centered on the assurance of machine learning in autonomous systems."}, {"title": "B. Swarm System Modelling", "content": "Swarm robotic system modelling can occur at four levels of abstraction: macroscopic formal modelling,\nLF simulations, HF simulations, and real robots [11], [16]. The macroscopic level provides a high-level\nrepresentation of swarm dynamics, particularly beneficial for large-sized swarms. Most existing approaches\nto swarm system modelling focus on simulations. In LF simulators, details of the environment and\nreal-world physics are abstracted and simplified whilst retaining the most relevant features of the robots in\nthe system [17], [18]. In contrast, HF simulators strive to replicate the real-world as closely as possible in\norder to obtain realistic results to the degree of precision and accuracy required [5].\nThe existing literature in macroscopic modelling can be categorized into three groups: those using rate or\ndifferential equations, employing classical control and stability theory for swarm properties, and utilizing\nother approaches [14]. In [6], the authors propose a five-step approach based on differential equations\nto develop a macroscopic probabilistic model for swarm robotic systems. Subsequently, [7] extend the\nwork in [6] by using it for verifying the global swarm behaviour with the PRISM model checker [19].\nMeanwhile, the authors in [8] discuss a robot controller designed for a simplified foraging scenario and\npresent a set of differential equations to illustrate the dynamics of their collective behaviour. In other\napproaches, Dixon et al. [10] and Winfield et al. [9] employ linear-time temporal logic to specify properties\npertaining to both individual robots and the entire swarm. A similar methodology is explored by Konur et\nal. [7] and Brambilla et al. [14], wherein they analyze swarm robotic systems using probabilistic model\nchecking. The authors in [10] only consider a very small swarm consisting of two or three robots.\nHowever, only a few approaches offer a unified, multi-level representation of swarms ([11], [12], [13],\n[14]). These follow either a bottom-up or top-down method but do not elaborate on specific V&V processes.\nAdditionally, they do not utilize data from actual simulations to characterize formal models to ensure\naccuracy and traceability across different system models, nor do they investigate emergent properties\narising from the inherent qualities of swarms."}, {"title": "C. Case Study: The Cloakroom", "content": "Our case study involves a robotic swarm managing a public cloakroom at events attended by 50 to 10,000\npeople [20], [2]. In this cloakroom, a group of robots assists event attendees in depositing, storing, and\nretrieving their personal items, such as jackets [20]. Given the swarm's operation in a public environment,\nthe system places a high priority on ensuring public safety, which includes measures that prevent harm\nfrom collisions and mitigate fire hazards caused by obstructions.\nThe scenario presented here is a version of the cloakroom operating in a small window of time (a few\nminutes), focused at the retrieval of items towards a deposit zone. This scenario was chosen as an example\nof a logistics task and could be adapted to other scenarios. In this scenario, the robots in the swarm\ninitially search for \u201ccarriers\u201d, which are platforms used for transporting objects in the cloakroom [20].\nRobots must position themselves below a carrier to lift it up. When a robot finds a carrier, it picks it up\nand transports it to the designated delivery area, employing a random walk while also making efforts to\navoid obstacles such as other robots or walls [20]. The cloakroom (see Fig. 2) contains three zones with\nthe following usage:\n\u2022 Red zone: To prevent blocking the fire exit, robots must not enter this zone. The dimensions of this\nzone have been chosen to adequately cover the realistic width of a human doorway (90-100 cm). The\nred zone is located in the bottom left corner of the cloakroom, with a width of 85 cm and a height of\n185 cm.\n\u2022 Amber zone: This zone is a buffer for the red zone; robots should avoid it or spend minimal time in\nthis zone. The dimensions of this zone have been chosen to allow for a maximum of two robots in this"}, {"title": "III. MACROSCOPIC FORMAL MODEL", "content": "In this section, we describe our macroscopic model for the overall swarm, adapted from [7], [6] for\nthe cloakroom case study. At the macroscopic level, the swarm is viewed as a unified entity, offering a\nhigh-level representation of swarm dynamics that enhances adaptability, especially in large-sized swarms.\nIn our approach, we construct a probabilistic finite state machine (PFSM) for the swarm, which contains\nthe exact same states as those found in an individual robot. Additionally, we include a counter to track the\nnumber of robots in each state. Furthermore, we develop a set of \u2018differential equations' for each state\nwithin the PFSM of the cloakroom. Instead of modelling each robot as a separate PFSM and employing\nparallel composition to compose the behaviours of all these state machines, we utilize a counting abstraction,\nalso known as a population model."}, {"title": "A. Probabilistic Finite State Machine Model", "content": "The PFSM for the swarm consists of six states (refer to Fig. 3): SEARCHING, PICKUP, DROPOFF, and\ntheir corresponding collision avoidance states\u2014AVOIDANCE_S, AVOIDANCE_P, and AVOIDANCE_D.\nThe associated probability values for these states are as follows: the probability of finding a carrier ($P_s$),\nthe probability of picking up a carrier ($P_p$), and the probability of transitioning to an avoidance state ($P_a$).\n$T_s$ is the total number of timesteps a robot can be in a particular state. The robots in the swarm can\ntransition to an avoidance state with a probability of $P_a$ from the SEARCHING, PICKUP, and DROPOFF\nstates. Initially, the robots in the swarm are in the SEARCHING state, where they search for carriers by\nperforming a random walk. At each timestep, the robots in the swarm transition to the PICKUP state with a\nprobability of $(1 \u2013 P_a)P_s$. The robots in the swarm remain in the SEARCHING state with a probability of\n$(1 \u2013 P_a)(1 \u2013 P_s)$. From the PICKUP state, robots in the swarm can transition to the DROPOFF state with a\nprobability of $(1 \u2013 P_a) P_p$, while they stay in the PICKUP state with a probability of $(1 \u2013 P_a)(1 \u2013 P_p)$. If a\nrobot cannot complete a carrier drop-off, it returns to the SEARCHING state or remains in the DROPOFF\nstate with a probability of $(1 \u2013 P_a)$."}, {"title": "B. Differential Equations", "content": "The differential equations describe the evolution of the average number of robots transitioning between\nstates at a higher swarm level. These equations were inspired by the work in [7], [6], adapted here for the\ncloakroom context. Currently, timeouts in different states are not considered in this work. These equations\nhave been provided as an example of the type of equations one may define, but these are not intended to\nbe exhaustive. At time t, let:\n\u2022 $N_{Sk}(t)$ be the number of robots in the SEARCHING state for k timesteps ($k \\epsilon 0, ..., T_s \u2212 1$). Similarly,\nwe can define $N_{Pk}(t)$ and $N_{Dk} (t)$, which are the number of robots in PICKUP and DROPOFF states.\n\u2022 $N_{Asm,k} (t)$ be the number of robots in the AVOIDANCE_S for k timesteps ($k \\epsilon 0, ..., T_s \u2013 1$) who have\nsearched for carriers in m timesteps previously ($m \\epsilon 0, ..., T_s \u2212 1$). Similarly, the number of robots in\nAVOIDANCE_P and AVOIDANCE_D states can be defined.\nThe total number of robots N in the swarm in timestep k can be obtained by equation 1:\n$N = N_{Sk} + N_{Pk} + N_{Dk} + N_{Asm,k} + N_{Apk} + N_{Adk}}, {"title": "IV. SIMULATIONS", "content": "This section describes our LF and HF simulations developed for the cloakroom case study. First, we\npresent a brief description of the simulation setup."}, {"title": "A. Simulations Setup", "content": "Carriers have fixed initial locations: (-1, 0), (0, 0), (1, 0), where all coordinates are in meters. Robots\nare initialized at random at the start of each trial within the blue deposit area. They are modelled to match\nthe properties of the DOTS robots which perform object detection (robot, carrier or wall) via ArUco\ntags [5]. Figure 2 is a snapshot of the LF simulator and illustrates the scenario. Table I summarizes the\nconfiguration."}, {"title": "B. Low-Fidelity Simulation", "content": "The LF simulator, developed in C++, is an abstraction of the cloakroom arena used for real-world\ntrials [5]. The simulator has been configured to match the real-world setting and DOTS robots as closely\nas possible in order to minimise the reality gap. Notably, the carriers have been simplified in the LF\nsimulator, and are modelled as objects of circular circumference, 25 cm in diameter. Robot movement is\nstochastic and a new heading is selected at random every 0.4 seconds (s). Robots also perform obstacle\navoidance upon detection of an object in range of their infra-red laser sensors, and they have an additional\n5 cm avoidance margin to prevent physical collisions. Object detection is assumed to have 100% accuracy\nand precision in this scenario. Carriers are removed from the arena as soon as they have been deposited.\nFigure 2 shows a snapshot of the LF simulation environment.\nData Generation: Four datasets were generated for each trial, where at each timestep we collect: (i) the\ntotal number of robots in each state where states are defined as in Section III-A; (ii) the state of each\nindividual robot; (iii) the (x, y) coordinates of each robot (for REQ 1); and (iv) the velocity for each\nrobot and whether a robot is in the delivery zone (for REQ 2). A total of 1000 trials were carried out,\neach lasting 10,000 timesteps (equivalent to a duration of 200 s), which is sufficient to observe the robots\nretrieving items in our cloakroom."}, {"title": "C. High-Fidelity Simulation", "content": "The HF and LF simulators differ mainly in the detail of the simulation environment. The HF simulator\nis based on a physics simulator constructed with Gazebo, as shown in Fig. 4. This allows modelling the\nphysics of the environment more accurately, enabling realistic interactions between objects, including\nfactors such as gravity, friction, and collision dynamics, which are crucial for robotics and autonomous\nsystems. In addition, this approach introduces more realistic noise into the simulation, mimicking the\nuncertainties and variations present in real-world scenarios, which is essential for robust testing and\nvalidation of algorithms in unpredictable environments. Another difference is that once the robots deposit\nthe carriers in the deposit zone they remain there until the end of the simulation, while in LF they disappear\nonce they have been deposited. The code used in the HF simulator is directly transferred to the physical\nrobots, bridging the gap between HF and reality.\nA total of 10 HF trials were conducted, each for a duration of 200 s. The dataset obtained from these\nsimulations comprises three key pieces of information: the unique identifier for each robot, a timestamp\nmeasured in seconds (s), and the corresponding (x, y) coordinates of the robot at that specific moment\n(for REQ 1)."}, {"title": "V. FORMAL VERIFICATION: MODEL CHECKING", "content": "In this section, we describe the modelling, specification, and verification of our formal models using the\nPRISM model checker. A unique feature of our approach is the characterization of formal models using\nthe LF and HF simulation data as introduced in the preceding section."}, {"title": "A. Modelling", "content": "The formal modelling process comprises three steps: data cleaning, data discretization, and modelling\nin PRISM.\nData cleaning involves transforming the raw LF and HF datasets into a form suitable for model checking.\nFor example, (i) in the fire exit requirement, determining whether a robot is in a red or amber zone based"}, {"title": "B. Specification and Verification", "content": "In this study, we utilize PRISM's property specification language, specifically employing Continuous\nStochastic Logic (CSL) [19]. We employ PRISM in verification mode to evaluate all possible runs against\nCSL formulae. A range of properties are created (about 55), for example, to reason about the probability\nof an event's occurrence (P operator); path properties (e.g., F for eventual or future, G for always or\nglobally); non-probabilistic properties; and reward-based properties (R operator). In addition, we use the\nexperiments feature of PRISM to graphically illustrate results of automating multiple instances of model\nchecking."}, {"title": "VI. VALIDATION: EXPERIMENTS WITH PHYSICAL ROBOTS", "content": "A system is required to be demonstrably fit for its intended purpose [22]. Validation is a process that\ncollects the evidence needed to make this assessment, ideally producing a binary outcome. However, \u201cfit\nfor purpose\" can be subjective, and the evidence used for assessment can be biased, for instance, by\nthe set of tests performed and the test conditions. Therefore, rather than producing a binary assessment,\nvalidation can be described as a process to assess the level of confidence that a system meets the needs of\nits stakeholders."}, {"title": "VII. DISCUSSION AND CONCLUSION", "content": "In this section, we discuss key observations made during V&V, identify limitations of our approach, and\nprovide insights for future work. The LF and the HF simulations and physical tests agree that the fire exit\nrequirement is violated. This consistency is crucial in development where evidence is needed to support\nnecessary changes to a system, and for a developer, the justification to incur additional developmental\ncosts to address them. When analyzing the LF and HF fire exit simulation data, we expected variations in\nthe probabilities of a robot entering the red zone or the amber zone. These variations were anticipated due\nto the use of the two different simulators, and differences in the implementation of the robot controllers\nat the different levels of granularity (e.g., random walk, collision avoidance, localization). Our analysis"}]}