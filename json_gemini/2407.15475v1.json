{"title": "A Multi-Level Corroborative Approach for Verification and Validation of Autonomous Robotic Swarms", "authors": ["Dhaminda B. Abeywickrama", "Suet Lee", "Chris Bennett", "Razanne Abu-Aisheh", "Tom Didiot-Cook", "Simon Jones", "Sabine Hauert", "Kerstin Eder"], "abstract": "Modelling and characterizing emergent behaviour within a swarm can pose significant challenges in terms of assurance. Assurance tasks encompass adherence to standards, certification processes, and the execution of verification and validation (V&V) methods, such as model checking. In this study, we propose a holistic, multi-level modelling approach for formally verifying and validating autonomous robotic swarms, which are defined at the macroscopic formal modelling, low-fidelity simulation, high-fidelity simulation, and real-robot levels. Our formal macroscopic models, used for verification, are characterized by data derived from actual simulations, ensuring both accuracy and traceability across different system models. Furthermore, our work combines formal verification with experimental validation involving real robots. In this way, our corroborative approach for V&V seeks to enhance confidence in the evidence, in contrast to employing these methods separately. We explore our approach through a case study focused on a swarm of robots operating within a public cloakroom.", "sections": [{"title": "I. INTRODUCTION", "content": "Swarm robotics offers a method for coordinating a large number of robots, inspired by swarm behaviours in nature [1]. The collective behaviours of a swarm are not directly engineered into the system. Rather, they arise due to interactions among individual robots and their environment, called emergent behaviour [2]. Modelling and characterizing emergent behaviour can pose significant challenges [3], presenting an obstacle to ensuring assurance of swarms. Assurance tasks encompass adhering to standards, obtaining certification, and conducting verification and validation (V&V).\nVerification involves ascertaining that an artifact complies with its specified requirements, while validation involves ascertaining that an artifact will effectively perform its intended functions in the real world [4]. Autonomous robotic systems are inherently complex, thus a range of distinct verification methods, known as heterogeneous verification (e.g., testing, simulation, and formal verification), is required to foster confidence in these systems. Formal verification encompasses various mathematical techniques (e.g., theorem proving, model checking) used to prove properties concerning a formal representation of a system [4]. Model checking is employed for verifying that a formal model satisfies temporal logic properties by exhaustively exploring the entire state space. The outcome of this process usually manifests as a Boolean value, signifying whether the model fulfills a specified property [4]. When the model fails to satisfy a property, a counterexample (error trace) is generated, describing the sequence of states that resulted in the violation of the property. Probabilistic model checking additionally allows the calculation of probabilities that the specified properties will be fulfilled.\nValidation is a process which, in common with heterogeneous verification, uses a range of techniques (e.g., design reviews, integration testing, and user trials) to establish whether a system is fit for purpose in its intended real-world environment. In this work, validation is performed on our swarm robot platform,"}, {"title": "II. BACKGROUND", "content": ""}, {"title": "A. Specification: AERoS Process", "content": "The requirements used in this paper are based on the overall specifications derived in [2], which proposes a process called AEROS for safety assurance of emergent behaviour in autonomous robotic swarms. AEROS consists of six stages within the emergent behavior lifecycle [2]. It is derived from the AMLAS process [15], which is centered on the assurance of machine learning in autonomous systems."}, {"title": "B. Swarm System Modelling", "content": "Swarm robotic system modelling can occur at four levels of abstraction: macroscopic formal modelling, LF simulations, HF simulations, and real robots [11], [16]. The macroscopic level provides a high-level representation of swarm dynamics, particularly beneficial for large-sized swarms. Most existing approaches to swarm system modelling focus on simulations. In LF simulators, details of the environment and real-world physics are abstracted and simplified whilst retaining the most relevant features of the robots in the system [17], [18]. In contrast, HF simulators strive to replicate the real-world as closely as possible in order to obtain realistic results to the degree of precision and accuracy required [5].\nThe existing literature in macroscopic modelling can be categorized into three groups: those using rate or differential equations, employing classical control and stability theory for swarm properties, and utilizing other approaches [14]. In [6], the authors propose a five-step approach based on differential equations to develop a macroscopic probabilistic model for swarm robotic systems. Subsequently, [7] extend the work in [6] by using it for verifying the global swarm behaviour with the PRISM model checker [19]. Meanwhile, the authors in [8] discuss a robot controller designed for a simplified foraging scenario and present a set of differential equations to illustrate the dynamics of their collective behaviour. In other approaches, Dixon et al. [10] and Winfield et al. [9] employ linear-time temporal logic to specify properties pertaining to both individual robots and the entire swarm. A similar methodology is explored by Konur et al. [7] and Brambilla et al. [14], wherein they analyze swarm robotic systems using probabilistic model checking. The authors in [10] only consider a very small swarm consisting of two or three robots.\nHowever, only a few approaches offer a unified, multi-level representation of swarms ([11], [12], [13], [14]). These follow either a bottom-up or top-down method but do not elaborate on specific V&V processes. Additionally, they do not utilize data from actual simulations to characterize formal models to ensure accuracy and traceability across different system models, nor do they investigate emergent properties arising from the inherent qualities of swarms."}, {"title": "C. Case Study: The Cloakroom", "content": "Our case study involves a robotic swarm managing a public cloakroom at events attended by 50 to 10,000 people [20], [2]. In this cloakroom, a group of robots assists event attendees in depositing, storing, and retrieving their personal items, such as jackets [20]. Given the swarm's operation in a public environment, the system places a high priority on ensuring public safety, which includes measures that prevent harm from collisions and mitigate fire hazards caused by obstructions.\nThe scenario presented here is a version of the cloakroom operating in a small window of time (a few minutes), focused at the retrieval of items towards a deposit zone. This scenario was chosen as an example of a logistics task and could be adapted to other scenarios. In this scenario, the robots in the swarm initially search for \u201ccarriers\u201d, which are platforms used for transporting objects in the cloakroom [20]. Robots must position themselves below a carrier to lift it up. When a robot finds a carrier, it picks it up and transports it to the designated delivery area, employing a random walk while also making efforts to avoid obstacles such as other robots or walls [20]. The cloakroom (see Fig. 2) contains three zones with the following usage:\n\u2022 Red zone: To prevent blocking the fire exit, robots must not enter this zone. The dimensions of this zone have been chosen to adequately cover the realistic width of a human doorway (90-100 cm). The red zone is located in the bottom left corner of the cloakroom, with a width of 85 cm and a height of 185 cm.\n\u2022 Amber zone: This zone is a buffer for the red zone; robots should avoid it or spend minimal time in this zone. The dimensions of this zone have been chosen to allow for a maximum of two robots in this"}, {"title": "1) Example Requirements:", "content": "Based on the requirements obtained for the cloakroom (refer to Table 1 in [2]), we identify the following safety-assurance requirements, which are used as examples in this paper. The focus here is on the emergent behaviours of the swarm that could not be predicted from the robot controllers alone.\n\u2022 REQ 1: Do not block fire exit: Several safety assurance levels with increasing criticality are considered, resulting in the following two requirements: (i) The robots in the swarm shall not enter the red zone at a fire exit at any time; (ii) Not more than one robot in the swarm shall enter the amber zone surrounding a red zone at any time. Additionally, we consider the scenario where a single robot enters the amber zone.\n\u2022 REQ 2: Swarm density: The swarm shall ensure fewer than 10% of its robots remain stationary outside the delivery site at any time [2]. Robots are considered stationary if they have not moved for over 10 seconds."}, {"title": "III. MACROSCOPIC FORMAL MODEL", "content": "In this section, we describe our macroscopic model for the overall swarm, adapted from [7], [6] for the cloakroom case study. At the macroscopic level, the swarm is viewed as a unified entity, offering a high-level representation of swarm dynamics that enhances adaptability, especially in large-sized swarms. In our approach, we construct a probabilistic finite state machine (PFSM) for the swarm, which contains the exact same states as those found in an individual robot. Additionally, we include a counter to track the number of robots in each state. Furthermore, we develop a set of \u2018differential equations' for each state within the PFSM of the cloakroom. Instead of modelling each robot as a separate PFSM and employing parallel composition to compose the behaviours of all these state machines, we utilize a counting abstraction, also known as a population model."}, {"title": "A. Probabilistic Finite State Machine Model", "content": "The PFSM for the swarm consists of six states (refer to Fig. 3): SEARCHING, PICKUP, DROPOFF, and their corresponding collision avoidance states\u2014AVOIDANCE_S, AVOIDANCE_P, and AVOIDANCE_D. The associated probability values for these states are as follows: the probability of finding a carrier ($P_s$), the probability of picking up a carrier ($P_p$), and the probability of transitioning to an avoidance state ($P_a$). $T_s$ is the total number of timesteps a robot can be in a particular state. The robots in the swarm can transition to an avoidance state with a probability of $P_a$ from the SEARCHING, PICKUP, and DROPOFF states. Initially, the robots in the swarm are in the SEARCHING state, where they search for carriers by performing a random walk. At each timestep, the robots in the swarm transition to the PICKUP state with a probability of $(1 \u2013 P_a)P_s$. The robots in the swarm remain in the SEARCHING state with a probability of $(1 \u2013 P_a)(1 \u2013 P_s)$. From the PICKUP state, robots in the swarm can transition to the DROPOFF state with a probability of $(1 \u2013 P_a) P_p$, while they stay in the PICKUP state with a probability of $(1 \u2013 P_a)(1 \u2013 P_p)$. If a robot cannot complete a carrier drop-off, it returns to the SEARCHING state or remains in the DROPOFF state with a probability of $(1 \u2013 P_a)$."}, {"title": "B. Differential Equations", "content": "The differential equations describe the evolution of the average number of robots transitioning between states at a higher swarm level. These equations were inspired by the work in [7], [6], adapted here for the cloakroom context. Currently, timeouts in different states are not considered in this work. These equations have been provided as an example of the type of equations one may define, but these are not intended to be exhaustive. At time t, let:\n\u2022 $N_{sk}(t)$ be the number of robots in the SEARCHING state for k timesteps ($k \\epsilon 0, ..., T_s \u2212 1$). Similarly, we can define $N_{pk}(t)$ and $N_{dk}(t)$, which are the number of robots in PICKUP and DROPOFF states.\n\u2022 $N_{Asm,k}(t)$ be the number of robots in the AVOIDANCE_S for k timesteps ($k \\epsilon 0, ..., T_s \u2013 1$) who have searched for carriers in m timesteps previously ($m \\epsilon 0, ..., T_s \u2212 1$). Similarly, the number of robots in AVOIDANCE_P and AVOIDANCE_D states can be defined.\nThe total number of robots N in the swarm in timestep k can be obtained by equation 1:\n$N = N_{Sk} + N_{Pk} + N_{Dk} + N_{ASk} + N_{APk} + N_{ADk}$ (1)"}, {"title": "IV. SIMULATIONS", "content": "This section describes our LF and HF simulations developed for the cloakroom case study. First, we present a brief description of the simulation setup."}, {"title": "A. Simulations Setup", "content": "Carriers have fixed initial locations: (-1, 0), (0, 0), (1, 0), where all coordinates are in meters. Robots are initialized at random at the start of each trial within the blue deposit area. They are modelled to match the properties of the DOTS robots which perform object detection (robot, carrier or wall) via ArUco tags [5]. Figure 2 is a snapshot of the LF simulator and illustrates the scenario. Table I summarizes the configuration."}, {"title": "B. Low-Fidelity Simulation", "content": "The LF simulator, developed in C++, is an abstraction of the cloakroom arena used for real-world trials [5]. The simulator has been configured to match the real-world setting and DOTS robots as closely as possible in order to minimise the reality gap. Notably, the carriers have been simplified in the LF simulator, and are modelled as objects of circular circumference, 25 cm in diameter. Robot movement is stochastic and a new heading is selected at random every 0.4 seconds (s). Robots also perform obstacle avoidance upon detection of an object in range of their infra-red laser sensors, and they have an additional 5 cm avoidance margin to prevent physical collisions. Object detection is assumed to have 100% accuracy and precision in this scenario. Carriers are removed from the arena as soon as they have been deposited. Figure 2 shows a snapshot of the LF simulation environment.\nData Generation: Four datasets were generated for each trial, where at each timestep we collect: (i) the total number of robots in each state where states are defined as in Section III-A; (ii) the state of each individual robot; (iii) the (x, y) coordinates of each robot (for REQ 1); and (iv) the velocity for each robot and whether a robot is in the delivery zone (for REQ 2). A total of 1000 trials were carried out, each lasting 10,000 timesteps (equivalent to a duration of 200 s), which is sufficient to observe the robots retrieving items in our cloakroom."}, {"title": "C. High-Fidelity Simulation", "content": "The HF and LF simulators differ mainly in the detail of the simulation environment. The HF simulator is based on a physics simulator constructed with Gazebo, as shown in Fig. 4. This allows modelling the physics of the environment more accurately, enabling realistic interactions between objects, including factors such as gravity, friction, and collision dynamics, which are crucial for robotics and autonomous systems. In addition, this approach introduces more realistic noise into the simulation, mimicking the uncertainties and variations present in real-world scenarios, which is essential for robust testing and validation of algorithms in unpredictable environments. Another difference is that once the robots deposit the carriers in the deposit zone they remain there until the end of the simulation, while in LF they disappear once they have been deposited. The code used in the HF simulator is directly transferred to the physical robots, bridging the gap between HF and reality.\nA total of 10 HF trials were conducted, each for a duration of 200 s. The dataset obtained from these simulations comprises three key pieces of information: the unique identifier for each robot, a timestamp measured in seconds (s), and the corresponding (x, y) coordinates of the robot at that specific moment (for REQ 1)."}, {"title": "V. FORMAL VERIFICATION: MODEL CHECKING", "content": "In this section, we describe the modelling, specification, and verification of our formal models using the PRISM model checker. A unique feature of our approach is the characterization of formal models using the LF and HF simulation data as introduced in the preceding section."}, {"title": "A. Modelling", "content": "The formal modelling process comprises three steps: data cleaning, data discretization, and modelling in PRISM.\nData cleaning involves transforming the raw LF and HF datasets into a form suitable for model checking. For example, (i) in the fire exit requirement, determining whether a robot is in a red or amber zone based"}, {"title": "B. Specification and Verification", "content": "In this study, we utilize PRISM's property specification language, specifically employing Continuous Stochastic Logic (CSL) [19]. We employ PRISM in verification mode to evaluate all possible runs against CSL formulae. A range of properties are created (about 55), for example, to reason about the probability of an event's occurrence (P operator); path properties (e.g., F for eventual or future, G for always or globally); non-probabilistic properties; and reward-based properties (R operator). In addition, we use the experiments feature of PRISM to graphically illustrate results of automating multiple instances of model checking."}, {"title": "1) Analyzing LF and HF fire exit simulation data:", "content": "We define several properties (see Listing 1) to determine the probabilities of a robot eventually entering the red zone of the fire exit, and at least two robots (termed \u2018amber critical') or a single robot entering the amber zone. For this we use the 'F' operator, signifying a property that eventually becomes true at some point along the path. We analyze models created using both LF and HF simulation data (see results in Fig. 5). Additionally, we employ the \u2018filters' feature of PRISM to return values for all states of the model. For instance, we print and count states that satisfy the properties where a robot is in the red zone or where more than one robot or a single robot is in the amber zone. Additionally, we calculate the sum and average values of the property over the satisfying states. The count, sum, and average values for property checking a robot in the red zone are 14, 14, and 0.07, respectively. In the HF case, these values correspond to 46, 46, and 0.23."}, {"title": "2) Analyzing the progress of the main states against their avoidance states:", "content": "We also utilize reachability reward properties, specifically cumulative reward properties that associate a reward with each path of a model, constrained by a specific time limit (see Listing 2). These properties have been created to verify if"}, {"title": "3) Analyzing the rates of robots:", "content": "Using the experiments feature of PRISM we show the probabilities of the SEARCHING, PICKUP and DROPOFF states (see Fig. 7), and their avoidance states (see Fig. 8). Figures 7 and 8 also confirm that the probabilities of the main states are comparatively lower than those of their avoidance states. Additionally, we create properties using the bounded variant of path property (U) and F operator to check whether the probability level of the SEARCHING state needs to be at a certain level (e.g., >= 3) at each timestep in the first half of the simulation, while in the latter half, the DROPOFF state needs to be at a certain level (e.g., >= 3) (see Listing 3). In addition, we analyze the probabilities of unsafe situations eventually occurring. For example, in the LF simulation: (i) the violation of REQ 2 (density requirement); (ii) a robot entering the red zone of the fire exit; and (iii) the progression of avoidance states over their main states (Fig. 9)."}, {"title": "4) Counterexample traces and witness executions::", "content": "We utilize counterexamples and witnesses generated by CTL properties in the forms of A[ G\u201cinv\u201d] and E [F \u201cgoal\u201d], respectively. In the former, PRISM generates a counterexample illustrating a path that reaches a state where \u201cinv\u201d is not true. In the latter, it generates a path reaching a \u201cgoal\u201d state. For instance, let's consider the property A[G!\u201cunsafe_red\u201d] where"}, {"title": "VI. VALIDATION: EXPERIMENTS WITH PHYSICAL ROBOTS", "content": "A system is required to be demonstrably fit for its intended purpose [22]. Validation is a process that collects the evidence needed to make this assessment, ideally producing a binary outcome. However, \u201cfit for purpose\" can be subjective, and the evidence used for assessment can be biased, for instance, by the set of tests performed and the test conditions. Therefore, rather than producing a binary assessment, validation can be described as a process to assess the level of confidence that a system meets the needs of its stakeholders."}, {"title": "VII. DISCUSSION AND CONCLUSION", "content": "In this section, we discuss key observations made during V&V, identify limitations of our approach, and provide insights for future work. The LF and the HF simulations and physical tests agree that the fire exit requirement is violated. This consistency is crucial in development where evidence is needed to support necessary changes to a system, and for a developer, the justification to incur additional developmental costs to address them. When analyzing the LF and HF fire exit simulation data, we expected variations in the probabilities of a robot entering the red zone or the amber zone. These variations were anticipated due to the use of the two different simulators, and differences in the implementation of the robot controllers at the different levels of granularity (e.g., random walk, collision avoidance, localization). Our analysis"}, {"title": "Enhancing swarm behaviour to reduce the number of violations:", "content": "Our work has identified property violations across LF and HF simulations, as well as in real-robot scenarios. The next step is to enhance swarm behaviour. For example, considering REQ 1, we could modify the environment by placing a Bluetooth beacon [5] indicating the fire exit door and modify the design of the robots to avoid that area. Regarding REQ 2, we could disperse the robots more effectively to minimize the formation of potential clusters. Subsequently, we can apply our corroborative approach to assess whether the specification is now met."}, {"title": "Progressing main states over avoidance states:", "content": "As mentioned in Section V-B, during the verification of LF datasets, a key observation was that avoidance states occur more frequently than main states, which could potentially lead to livelock situations. To prevent this, we plan to introduce random timeouts to the avoidance states, aiming to prevent potential resource starvation and improve the progress of the main states in our formal models and designs."}, {"title": "Explicit DROPOFF state:", "content": "Initially, our LF simulation lacked an explicit DROPOFF state, resulting in an immediate transition from PICKUP to SEARCHING within a single iteration. In response to feedback from verification engineers, the designers introduced an explicit DROPOFF state. Moving forward, applying the lessons learned from this experience, the swarm FSM will be reviewed by the design and the verification engineers before developing the simulation."}, {"title": "", "content": "For future work, there is significant value in utilizing the collective behaviour specified at the macroscopic level to automatically synthesize correct-by-construction, provably correct collective behaviour for the swarm. Such an approach would not only offer formal guarantees on fulfilling collective objectives but also aid in automating swarm design and deployment. However, a key challenge lies in specifying and synthesizing controllers capable of responding to dynamically changing and potentially adversarial environments [28]. As an initial step towards synthesis, we will explore building a synthesizer that can take our formal properties and automatically configure or parameterize different swarm behaviours that satisfy those formal properties and the specification."}]}