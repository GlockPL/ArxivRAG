{"title": "Zweistein: A Dynamic Programming Evaluation Function for Einstein W\u00fcrfelt Nicht!", "authors": ["Wei-Lin Hsueh", "Tsan-sheng Hsu"], "abstract": "This paper introduces Zweistein, a dynamic programming evaluation function for Einstein W\u00fcrfelt Nicht! (EWN). Instead of relying on human knowledge to craft an evaluation function, Zweistein uses a data-centric approach that eliminates the need for parameter tuning. The idea is to use a vector recording the distance to the corner of all pieces. This distance vector captures the essence of EWN. It not only outperforms many traditional EWN evaluation functions but also won first place in the TCGA 2023 competition.", "sections": [{"title": "1 Introduction", "content": "EinStein w\u00fcrfelt nicht! (abbr. EWN) is a two-player stochastic game with perfect information [5], played on a 5\u00d75 board. Pieces are red or blue and labeled 1 to 6. Red starts in the top left, blue in the bottom right. The board's initial placement is usually symmetrical (see Fig. 1).\nPlayers roll dice to move pieces. A piece can only move if its label matches the dice roll; otherwise, the player can move a piece with the next higher or lower number. Red pieces move right, down, or diagonally right-down, while blue pieces move left, up, or diagonally left-up. Pieces capture any piece at their destination, regardless of color.\nTaking Fig.2 as an example, the red side has pieces 1, 2, and 6. With a dice roll of 4, piece 4 is unavailable. Thus, the movable pieces are 6 (next higher) and 2 (next lower). Moving piece 6 to the right captures piece 2, as shown in Fig.3. In the next move, with a dice roll of 1, the blue side must move piece 1. The available moves for blue are also depicted in Fig. 3.\nThe game ends when one side captures all opponent pieces or a piece reaches the opponent's corner square (bottom right for red, top left for blue), with no draws possible.\nDespite the game's simple rules, designing an AI for EWN is challenging due to its inherent randomness and the strategic balance between defense and attack."}, {"title": "2 Background", "content": ""}, {"title": "2.1 Motivation", "content": "Evaluation functions are essential in computer gaming programs. Claude E. Shannon recognized this as early as the 1940s [1], noting that an ideal eval-uation function should correlate positively with the quality of a game position.\nAchieving an ideal evaluation function, however, is equivalent to solving the game, which is infeasible for most popular games, including EWN. In practice, evaluation functions are approximations. Using Minimax search can reduce errors and strengthen the computer program.\nDesigning an effective evaluation function often requires extensive human knowledge, with no standardized method. For games like chess, abundant human insight makes creating a strong evaluation function easier, as demonstrated by IBM's Deep Blue [11], which defeated top human players.\nFor newly invented or complex games with limited human knowledge, de-signing evaluation functions can be time-consuming. Go, for example, requires fine-tuning numerous parameters. While GnuGo [2] was a strong program in the early 2000s, it still could not defeat top players.\nRecent methods, such as Monte Carlo tree search and reinforcement learning, minimize reliance on human knowledge. AlphaGo [3] used these techniques to beat the best Go players, showing that avoiding human expertise may be more effective for games with limited knowledge.\nHowever, these methods do not provide insights that help players improve. Therefore, we introduce a dynamic programming approach to construct an evalu-ation function that requires no manual fine-tuning and offers a human-understandable heuristic."}, {"title": "2.2 Related works", "content": "EWN, being a game with only 20 years of history, has limited human knowledge available. Consequently, designing an evaluation function for EWN is challenging and complex. Most researchers have focused on using Monte Carlo tree search techniques to develop EWN programs [5] [6] [7] [8].\nSeveral attempts have also been made to craft evaluation functions for EWN, often focusing on balancing attacking and defending power through parameter tuning [9] [10].\nThere was another evaluation function similar to Zweistein, called Schwarz table. [14] In the experiments section, we will compare the performance of Zweis-tein with these existing functions."}, {"title": "3 Methods", "content": "This section primarily discusses the details of implementing Zweistein, which represents the win rate of EWN-simple, introduced below."}, {"title": "3.1 EWN-simple", "content": "Zweistein employs a new concept from EWN-simple. While this new game re-sembles the original EWN rules, EWN-simple simplifies the win rate calculation significantly. The main difference between EWN-simple and vanilla EWN is the elimination of piece-capturing rules. Some adjustments were necessary to account for the removal of these rules.\nFirst, since EWN-simple does not allow piece capturing, two different pieces can overlap when they move to the same space.\nSecond, EWN-simple introduces a special rule. Without the piece-capturing rule, each piece cannot interfere with others, there is no reason for a player to go along a longer path to the corner. Meaning players will always move their pieces toward the goal along the shortest path. To simplify the calculation, players are restricted to moving only along the shortest path, ensuring that the Cheby-shev distance to the goal corner decreases by 1 with every move. The table of Chebyshev distance to the corner is shown in Fig. 5."}, {"title": "3.2 Collapse an EWN-simple board into a distance array", "content": "This section is the core of Zweistein. The reason for removing the piece-capturing rules in EWN-simple is that it creates numerous isomorphic boards, allowing us to collapse all isomorphic boards into a single array form. This significantly reduces the space complexity.\nTake Fig. 6 for example. We can use an array to describe the distance each piece has to the corner. For instance, according to Fig. 5, red piece 1 has a distance of 4, red piece 2 has been captured, red piece 3 has a distance of 3, and so on. Finally, the array for the red side and the blue side will look like Fig. 8.\nWhen collapsing the example in Fig.7 to an array, the result will be the same as the array shown in Fig.8. Therefore, Fig.6 and Fig.7 have the same distance array."}, {"title": "3.3 Building a database for EWN-simple", "content": "To save more space, Zweistein does not directly store the win rate for every possible game position. Instead, it employs some techniques to further reduce space complexity."}, {"title": "Viewing a player as a random variable", "content": "The first technique is to model a player as a random variable representing the number of steps required for any piece to reach the corner. To simplify this term, the number of steps required for any piece to reach the corner will be abbreviated as DTC (distance to corner).\nFor example, let X be a random variable that describes a player's behavior. The probability that the player's DTC is equal to d is given by:\n$P(X = d)$ (1)\nThe range of DTC is [1, 19]. When DTC is 0, there is no need to calculate the evaluation function because the game has ended. The upper limit of 19 comes from the worst-case scenario: in this scenario, all 6 pieces initially have a distance of 4. They all move to a position where the distance is reduced to 1, which takes 18 steps. Finally, in the next step, one piece must reach the goal, adding up to a total of 19 steps."}, {"title": "Calculate Win rate of EWN-simple using DTC comparison", "content": "Because there is no piece-capturing rule in EWN-simple, the only way to win an EWN-simple game is to reach the corner. Therefore, the win rate of our side is the probability that our DTC is less than our opponent's DTC.\nEven if our side has the same DTC as the opponent, it is still considered a loss. When evaluating a game position, we have already completed our move, and the opponent will move next. Therefore, having the same DTC as the opponent is not sufficient for our side to win.\nTo express this mathematically, let the DTC random variable of our side be denoted as X, and the DTC random variable of our opponent as Y. The probability that our DTC is less than our opponent's DTC can be written as:\n$P(X <Y)$ (2)"}, {"title": null, "content": "However, the value of this probability cannot be directly calculated. The formula should be split by the value of DTC, which ranges from 1 to 19.\n$P(X < 0)P(Y = 1) + P(X < 1)P(Y = 2)+\n... + P(X \\leq 18)P(Y = 19)$ (3)\nThe summation form for (3) is thus:\n$\\sum_{i=1}^{19}P(X \\leq i - 1)P(Y = i)$ (4)\nEquation (4) shows that using a probability density function (abbr. pdf) and a cumulative density function (abbr. cdf) database of a DTC random variable is sufficient to calculate Zweistein, which represents the win rate in EWN-simple. The pseudo-code for utilizing the pdf and cdf database to compute Zweistein is provided in Algorithm 1.\nAs discussed in Section 3.2, calculating Zweistein requires collapsing the game into a distance array. Since there are only $5^6 = 15625$ different distance arrays for each side, we can use any encoding function to map a distance array to an index in the range [0, 15624]. This index can then be used to query the pdf and cdf database to determine the win rate."}, {"title": "Building the pdf database", "content": "Since constructing a cdf from a pdf is a straight-forward programming task, this paper will focus on demonstrating how to build a DTC pdf database.\nAlgorithm 2 is the pseudo-code for constructing the DTC pdf database. It fol-lows a process similar to building an endgame database: perform a tree search for every game position and store the results after calculation. Because the database is very small, the entire building process takes less than a second to complete.\nThere is a GitHub repository [12] that implements this algorithm in C, avail-able for anyone interested in using this evaluation function."}, {"title": "4 Experiments", "content": ""}, {"title": "4.1 Comparison with other functions", "content": "In Section 2.2, we mentioned some previous attempts to craft an evaluation function for EWN. In this section, we will compare Zweistein with those earlier approaches.\nAll of the experiments were conducted on a computer equipped with dual AMD EPYC 9354 32-core processors, with the program written in C++. For each searching depth, Zweistein played with the other function 100,000 times.\nThe first function we will compare is called ODEMA [10]. This function com-bines the attacking power, threat power, and blocking power with the formula:\n$attack\\_factor \\times Attack + Block - threat\\_factor \\times Threat$ (5)\nFor our experiment, we used the parameters provided in the original paper: $attack\\_factor = 2.5, threat\\_factor = 0.05$. Although the value of parameter N was not specified in the paper, it is necessary to calculate Block. So we use $N = 2$ for the experiment."}, {"title": "4.2 Comparison with exact win rate", "content": "In this section, we use simple boards for which the exact win rate can be calcu-lated by brute force. We then compare the exact win rate and evaluation values of Zweistein. Since Zweistein does not include piece-capturing rules, when each piece is separated from the others and capture is not possible on the next move, Zweistein's evaluation value closely approximates the exact win rate. For exam-ple, in Fig.9, if the blue side moves first, the exact win rate for the red side is 0.564142, while Zweistein's value is 0.588791."}, {"title": "4.3 Comparison with Schwarz table", "content": "A 2005 student study report introduced a similar evaluation function called the Schwarz Table. [14] Instead of calculating the win rate of EWN-simple, the expected value of DTC was calculated. In this subsection, we will compare the value of Zweistein with that of the Schwarz Table.\nIn Fig.11, it is a guaranteed win for red when blue moves first. The value of Zweistein is 1, while the value of Schwarz table is 3.532407-2.000000 = 1.532407.\nIn Fig.12, the win rate for red is 0.829276. The value of Zweistein is 0.837577, while the value of Schwarz table is 5.581104 - 3.305556 = 2.275548.\nTherefore, Zweistein is an improved version of Schwarz Table, as the latter sometimes underestimates strong board positions (e.g., Fig.11) or overestimates less favorable ones (e.g., Fig.12)."}, {"title": "5 Computer tournaments", "content": "Zweistein participated in the TCGA 2023 tournament and secured first place among 8 contestants. Table 5 provides the contest record, demonstrating the strength and effectiveness of this evaluation function."}, {"title": "6 Concluding remarks and future work", "content": "In this paper, we introduced a novel approach to designing an EWN evaluation function by simplifying the game rules and constructing a database based on these simplified rules. This resulted in a simple, yet powerful, evaluation function that requires no parameter tuning. It also acts as a strong and simple baseline when crafting a stronger EWN evaluation function.\nAlthough experiments demonstrate that it is possible to construct an evalu-ation function with performance similar to Zweistein using traditional methods, these functions typically require parameter tuning and are significantly more computationally expensive to develop. Additionally, the potential for improving traditional evaluation functions is limited. Due to the curse of dimensionality [13], adding a new parameter to the function exponentially multiplies the time complexity of grid search.\nFor example, EWNNY [9] requires an extensive grid search to acquire an optimal set of parameters, with each set of parameters necessitating a 100,000-round experiment.\nThe current version of Zweistein requires only a few megabytes of space, which is relatively small by today's standards. This suggests substantial potential for further development and optimization. Expanding the database to include partial rules for piece capturing presents a promising direction for enhancing Zweistein's performance."}]}