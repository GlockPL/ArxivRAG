{"title": "Dominating Set Reconfiguration with Answer Set Programming", "authors": ["MASATO \u039a\u0391\u03a4\u039f", "TORSTEN SCHAUB", "TAKEHIDE SOH", "NAOYUKI TAMURA", "MUTSUNORI BANBARA"], "abstract": "The dominating set reconfiguration problem is defined as determining, for a given dominating\nset problem and two among its feasible solutions, whether one is reachable from the other\nvia a sequence of feasible solutions subject to a certain adjacency relation. This problem is\nPSPACE-complete in general. The concept of the dominating set is known to be quite useful\nfor analyzing wireless networks, social networks, and sensor networks. We develop an approach\nto solve the dominating set reconfiguration problem based on Answer Set Programming (ASP).\nOur declarative approach relies on a high-level ASP encoding, and both the grounding and\nsolving tasks are delegated to an ASP-based combinatorial reconfiguration solver. To evaluate\nthe effectiveness of our approach, we conduct experiments on a newly created benchmark set.", "sections": [{"title": "1 Introduction", "content": "Combinatorial reconfiguration (van den Heuvel 2013; Ito et al. 2011; Nishimura 2018)\nis a relatively young research field of increasing interest in an international community,\nas witnessed by the international series of CoRe workshops. The aim of combinatorial\nreconfiguration is to analyze the structure and properties of the solution spaces of com-\nbinatorial problems. The typical topics of this field include the reachability, optimality,\ndiameter, and connectivity of the solution spaces. Each solution space has a graph struc-\nture, in which each node represents an individual feasible solution, and edges represent a\ncertain adjacency relation. The reachability problem of combinatorial reconfiguration is\ndefined as the task of determining, for a given combinatorial problem and two of its fea-\nsible solutions, whether there exists a sequence of adjacent feasible solutions from one to\nanother. We refer to this problem as the Combinatorial Reconfiguration Problem (CRP).\nThe study of combinatorial reconfiguration problems draws its motivation from a va-\nriety of fields such as statistical physics (Mohar and Salas 2009), combinatorics (Knuth\n2011), puzzles (Hearn and Demaine 2009), industrial applications (Inoue et al. 2014),\nand many others. For illustration, the Potts model in physics is closely related to graph\ncoloring reconfiguration under an adjacency relation called Kempe change. One moti-\nvation for combinatorial reconfiguration research is of theoretical nature. Combinatorial\nreconfiguration plays an important role in proving the (parameterized) computational\ncomplexity of reconfiguration counterparts of many central combinatorial problems. An-\nother motivation is very practical. Reconfigurations are needed in many mission-critical\napplications. For instance, in power distribution networks (Inoue et al. 2014), we need to\nfind a sequence of feasible switch configurations from one to another without causing any\nblackout. Regarding adjacency relations, in many cases on graph problems, the simplest\nrelations (e.g., token jumping and token sliding) have been studied in the literature. But,\nin general, adjacency relations originate from applications.\nA solid theoretical foundation for combinatorial reconfiguration problems has been\nestablished over the last decade. Particularly, for many NP-complete problems, their re-\nconfiguration counterparts have been proven to be PSPACE-complete (Ito et al. 2011).\nExamples include SAT reconfiguration (Gopalan et al. 2009; Mouawad et al. 2017), in-\ndependent set reconfiguration (Ito et al. 2011; Kaminski et al. 2012), graph coloring\nreconfiguration (Bonsma and Cereceda 2009; Brewster et al. 2016; Cereceda et al. 2011),\nclique reconfiguration (Ito et al. 2015), Hamiltonian cycle reconfiguration (Takaoka 2018),\nset cover reconfiguration (Ito et al. 2011), and many others. Very recently, starting with\na series of international competitions (CoRe challenge 2022 and 2023 (Soh et al. 2024)),1\nthere has been a growing interest in the practical aspects of combinatorial reconfiguration\nproblems (Christen et al. 2023; Ito et al. 2023; Toda et al. 2023).\nDominating Set Reconfiguration Problems (DSRP; (Haas and Seyffarth 2014; Bonamy\net al. 2021; Haddadan et al. 2016; Suzuki et al. 2016)) is one of most theoretically\nstudied combinatorial reconfiguration problems. This problem is based on the well-known\nDominating Set Problem (DSP). For a graph $G = (V, E)$, a subset of nodes $S \\subseteq V$ is\ncalled a dominating set of $G$ when the union of $S$ and the set of adjacent nodes to $S$\nequals $V$. In other words, any $v \\in V\\S$ is adjacent to at least one node in $S$. The task\nof DSP is to decide, for a given graph $G$ and a positive integer $k$, whether there exists\na dominating set of size $k$. In general, DSP is NP-complete, and its reconfiguration (i.e.,\nDSRP) is PSPACE-complete. From a practical viewpoint, the dominating set problem\nhas been well explored since the concept of the dominating set is quite useful for analyzing\nwireless networks, social networks, and sensor networks (Blum et al. 2005). However, little\nattention has been paid so far to the practical aspects of dominating set reconfiguration.\nIn this paper, we present an approach to solve the dominating set reconfiguration\nproblem based on Answer Set Programming (ASP; (Lifschitz 2019)). In our approach, a\nDSRP instance is first converted into ASP facts. Then, these facts are combined with a\ncollection of ASP encodings for DSRP solving, which are afterwards solved by the ASP-"}, {"title": "3 Comparison of traditional ASP encodings for minimum DSP finding", "content": "The Dominating Set Reconfiguration Problem (DSRP) is based on the Dominating Set\nProblem (DSP). Therefore, for the first step toward efficient DSRP solving, we compare\ntwo traditional ASP encodings for solving the minimum DSP. The task of this problem\nis to find, for a given graph, a dominating set of the minimum size."}, {"title": "4 ASP-based approach to dominating set reconfiguration", "content": "We now present an approach to solve the dominating set reconfiguration problem based\non ASP. The architecture of our approach is shown in Figure 2. The resulting solver\naccepts a DSRP instance in DIMACS format and converts it into ASP facts. And then,\nthese facts are combined with a collection of ASP encodings for DSRP solving, which are\nafterwards solved by the recongo solver. recongo is an ASP-based CRP solver powered\nby clingo's multi-shot ASP solving."}, {"title": "Reachability checking with recongo", "content": "For a given DSRP instance $I$ in fact format,\nrecongo constructs a logic program $ye = I \\cup base \\cup \\bigcup_{t=0}^l step(t) \\cup check(l)$. Here, base,\nstep(t), check(l) correspond to the three subprograms given in Listing 4, respectively.\nWe note that ye represents the dominating set reconfiguration problem of a bounded\nlength $l$. For solving $ye$, recongo delegates the grounding and solving tasks to the clingo"}, {"title": "Hint constraints", "content": "We develop a hint constraint, called token destination, to boost\nthe performance of DSRP solving. This domain-specific hint is intended to forbid invalid\ntoken moves. Our ASP encoding for the token destination is shown in Listing 5. The rule\nenforces that a token moves from the node X to one among its neighbors if the token is\nremoved from the node X at step t and no token is placed on all its neighbors at step\nt-1. For illustration, an invalid move forbidden by this hint is shown in Figure 3. Indeed,\nnode 1 is neither in a dominating set nor adjacent to any node in it if a token jumps\nfrom node 1 in $Xt\u22121$ to 5 in $Xt$."}, {"title": "Extension", "content": "Finally, we extend our encoding to DSRP solving under token addition-\nremoval. In the token addition-removal, a single token is added or removed in each transi-\ntion as long as the total number of tokens in each state does not exceed a given threshold.\nAn extended encoding is shown in Listing 6. The major difference from token jumping in"}, {"title": "5 Benchmark generation and Experiments", "content": "We carry out experiments on a newly created benchmark set to evaluate the effectiveness\nof our approach. We compare the combination of our ASP encoding and hint constraints\nfor DSRP solving under token jumping. We also address the competitiveness of our\napproach by empirically contrasting it to a ZDD-based approach (Ito et al. 2023).\nBenchmark generation. No benchmark set of DSRP has been available so far. We\ntherefore create a benchmark set of DSRP under token jumping. The resulting bench-\nmark set consists of 442 instances in total, in which 310 are reachable, and 132 are\nunreachable. The number of nodes and edges ranges from 11 to 1,000 and from 20 to\n449,449, respectively. All benchmark instances are in DIMACS format used in a series\nof international competitions (CoRe challenge), and can be useful for other approaches\nand solvers. More precisely, our benchmark set is generated as follows:\n(1) We considered all 167 instances (viz., graphs) used in the third benchmark set of\nCoRe Challenge 2022. We ran experiments for enumerating the optimal solutions\nof the minimum DSP. 5 The time-limit is 5 minutes for each instance. clingo was\nable to fully enumerate the optimal solutions of 57 instances.\n(2) For each of the 57 instances, we tried to construct its solution space using breadth-\nfirst search. A solution space is a graph in which each node represents a dominating"}, {"title": "Overview of experiments", "content": "We compare the combination of our ASP encoding in\nListing 4 and hint constraints for DSRP solving under token jumping. In addition to\nour hint constraint on token destination (t3) in Listing 5, we consider the following hint\nconstraints.\n\u2022 Distance from the start and goal states (d1 and d2):\nThe d1 hint represents that there must be at most t nodes that are in the start\nstate but not in $Xt$. Let us consider a reconfiguration sequence of length l. The d2\nhint represents that there must be at most $l - t$ nodes that are in the goal state\nbut not in step $Xt$.\n\u2022 Forbidding redundant token moves (t1 and t2):\nThe t1 hint represents that, in two consecutive states, no token moves back to a\nnode from which a token moved before. Similarly, the t2 hint represents that no\ntoken moves from a node to which a token moved before."}, {"title": "Benchmark results", "content": "We first analyze the effectiveness of single hint constraint. The\nnumber of solved instances is shown in Table 2. The columns show in order reachability\n(reachable, unreachable, or total) and the number of solved instances by each single hint.\nnohint indicates our ASP encoding without any hint. The best results are highlighted in\nbold. Our t3 hint solved the most, namely 354 out of 442 instances, which is 23 more than\nnohint. For reachable instances, the t2 hint solved the most, but no big difference from\nthe others. For unreachable instances, our t3 hint solved the most, namely 58 instances,\nwhich is 20 more than nohint.\nNext, we consider all possible combinations of {t1,t2,t3}, each of which solved more\nthan nohint in Table 2. The number of solved instances for each combination is shown\nin Table 3. The t1t2t3 hints solved the most, namely 363 instances. It is 32 more than\nnohint and 9 more than the best single hint t3. For reachable instances, the t2 hint\nsolved the most as before, but again no big difference from the others. For unreachable\ninstances, the t2t3 hints solved the most, namely 69 instances. It is 31 more than nohint\nand 11 more than the best single hint t3."}, {"title": "Comparison with other approaches", "content": "Our comparison considers a state-of-the-art\napproach to CRP solving based on Zero-suppressed binary Decision Diagrams (ZDD;"}, {"title": "Summary and discussion", "content": "Our basic ASP encoding in Listing 4 solved 331 instances\nwithout any hint constraints. In contrast, our best encoding involving t1t2t3 hints solved\n363 instances. The improvement by ASP is therefore 331 instances, and the additional\n32 instances are contributed by our hint constraints. From the perspective of ZDD versus\nASP in Figure 7, ddreconf and recongo(nohint) solved 273 and 331 instances, respec-\ntively. This result shows that our ASP-based method is more effective in DSRP solving\nthan ZDD, even without the help of hint constraints. .\nThe most recent competition (CoRe challenge 2023) has six metrics in the single solver\ntrack. The independent set reconfiguration problems under the token jumping have been\nused in CoRe challenge 2023. The recongo solver won four gold and two silver medals,\nwhich is followed by two gold and four silver medals of PARIS (Christen et al. 2023),\nand by six bronze medals of ddreconf. The gap between recongo and ddreconf at the\ncompetition is very similar to the results on DSRPs in Table 4. We used the ddreconf\nsolver in our comparison, since, among solvers that participated in a series of CoRe\nchallenge, only ddreconf can deal with dominating set reconfiguration. In principle, it is\npossible for other CRP solvers like PARIS to handle it, but significant efforts of high-level\nmodeling and/or encoding are needed."}, {"title": "6 Related work", "content": "Recent advances in ASP such as multi-shot ASP solving (Gebser et al. 2019) encourage\nresearchers to tackle hard problems in combinatorial reconfiguration. The use of multi-\nshot ASP for combinatorial reconfiguration was first studied in (Yamada et al. 2023;\n2024). They proposed a general approach called bounded combinatorial reconfiguration\nfor solving combinatorial reconfiguration problems based on ASP, including algorithms,\nsolver developments, encodings, and empirical analysis. The resulting ASP-based solver\nrecongo is an award-winning solver of the most recent CoRe challenge 2022 and 2023.\nThe bounded combinatorial reconfiguration has been applied to some specific reconfig-\nuration problems. Yamada et al. (2023; 2024) developed a collection of ASP encodings for\nindependent set reconfiguration under the token jumping rule, including basic encodings\nfor problem solving and some hint constraints. Hirate et al. (2023) explored Hamiltonian\ncycle reconfiguration under the well-known k-opt rule of the traveling salesperson prob-\nlem. They presented new ASP encodings for solving Hamiltonian cycle problems and\nextended one of them for Hamiltonian cycle reconfiguration.\nThis paper tackled the dominating set reconfiguration problem (DSRP). The major\ncontribution of this paper is the development of ASP encodings and a hint constraint\n(named token destination) for DSRP solving under token jumping as well as token\naddition-removal. Particularly, our best hint constraint is shown to be highly effective\nin deciding unreachability. This hint is domain-specific to DSRP and is different from\nthe ones used in the previous works (Yamada et al. 2023; 2024; Hirate et al. 2023). Our\napproach has a similarity to the previous works in the sense that both the grounding and\nsolving tasks are delegated to the recongo solver.\nThere is a rapidly growing interest in the practical aspects of combinatorial reconfigu-\nration. However, many important problems remain untouched, such as the connectivity,\noptimality, and diameter of the solution space. We will investigate the possibility of using\nASP for those challenging problems."}, {"title": "7 Conclusion", "content": "We developed an approach to solve the dominating set reconfiguration problem based on\nAnswer Set Programming (ASP). Our declarative approach relies on a high-level ASP\nencoding, and both the grounding and solving tasks are delegated to the ASP-based\ncombinatorial reconfiguration solver recongo. We established the competitiveness of our\ndeclarative approach by empirically contrasting it to a more algorithmic ZDD-based\napproach. All source code and benchmark problems are available from the web. 7\nFuture work includes benchmark generation for DSRP under token addition-removal,\nusing real-data of social and sensor networks. From a broader perspective, combinatorial\nreconfiguration is related to automated planning, in the sense of transforming a given\nstate to another state. It would be interesting to study the relationship between them and\ninvestigate the possibility of their synergy. For a synergy, we plan to develop a framework\nof cost-optimal combinatorial reconfiguration with multiple adjacency relations."}]}