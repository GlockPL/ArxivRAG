{"title": "Dominating Set Reconfiguration with Answer Set Programming", "authors": ["MASATO \u039a\u0391\u03a4\u039f", "TORSTEN SCHAUB", "TAKEHIDE SOH", "NAOYUKI TAMURA", "MUTSUNORI BANBARA"], "abstract": "The dominating set reconfiguration problem is defined as determining, for a given dominating set problem and two among its feasible solutions, whether one is reachable from the other via a sequence of feasible solutions subject to a certain adjacency relation. This problem is PSPACE-complete in general. The concept of the dominating set is known to be quite useful for analyzing wireless networks, social networks, and sensor networks. We develop an approach to solve the dominating set reconfiguration problem based on Answer Set Programming (ASP). Our declarative approach relies on a high-level ASP encoding, and both the grounding and solving tasks are delegated to an ASP-based combinatorial reconfiguration solver. To evaluate the effectiveness of our approach, we conduct experiments on a newly created benchmark set.", "sections": [{"title": "1 Introduction", "content": "Combinatorial reconfiguration (van den Heuvel 2013; Ito et al. 2011; Nishimura 2018) is a relatively young research field of increasing interest in an international community, as witnessed by the international series of CoRe workshops. The aim of combinatorial reconfiguration is to analyze the structure and properties of the solution spaces of combinatorial problems. The typical topics of this field include the reachability, optimality, diameter, and connectivity of the solution spaces. Each solution space has a graph structure, in which each node represents an individual feasible solution, and edges represent a certain adjacency relation. The reachability problem of combinatorial reconfiguration is defined as the task of determining, for a given combinatorial problem and two of its fea-"}, {"title": "2 Background", "content": "The dominating set reconfiguration problem is defined as the task of deciding, for a given DSP instance and two among its feasible solutions Xs and Xg, whether there exists a sequence of transitions: Xs = X0 \u2192 X1 \u2192 X2 \u2192 \u00b7 \u00b7 \u00b7 \u2192 Xe = Xg. Each state Xi represents a feasible solution (viz., dominating set). We refer to Xs and Xg as the start and the goal states, respectively. We write X \u2192 X' if state X at step t is followed by state X' at step t + 1 under a certain adjacency relation. We refer to the sequence from Xs"}, {"title": "3 Comparison of traditional ASP encodings for minimum DSP finding", "content": "The Dominating Set Reconfiguration Problem (DSRP) is based on the Dominating Set Problem (DSP). Therefore, for the first step toward efficient DSRP solving, we compare two traditional ASP encodings for solving the minimum DSP. The task of this problem is to find, for a given graph, a dominating set of the minimum size."}, {"title": "4 ASP-based approach to dominating set reconfiguration", "content": "We now present an approach to solve the dominating set reconfiguration problem based on ASP. The architecture of our approach is shown in Figure 2. The resulting solver accepts a DSRP instance in DIMACS format and converts it into ASP facts. And then, these facts are combined with a collection of ASP encodings for DSRP solving, which are afterwards solved by the recongo solver. recongo is an ASP-based CRP solver powered by clingo's multi-shot ASP solving."}, {"title": "5 Benchmark generation and Experiments", "content": "We carry out experiments on a newly created benchmark set to evaluate the effectiveness of our approach. We compare the combination of our ASP encoding and hint constraints for DSRP solving under token jumping. We also address the competitiveness of our approach by empirically contrasting it to a ZDD-based approach (Ito et al. 2023).\nBenchmark generation. No benchmark set of DSRP has been available so far. We therefore create a benchmark set of DSRP under token jumping. The resulting bench- mark set consists of 442 instances in total, in which 310 are reachable, and 132 are unreachable. The number of nodes and edges ranges from 11 to 1,000 and from 20 to 449,449, respectively. All benchmark instances are in DIMACS format used in a series of international competitions (CoRe challenge), and can be useful for other approaches and solvers. More precisely, our benchmark set is generated as follows:\n(1) We considered all 167 instances (viz., graphs) used in the third benchmark set of CoRe Challenge 2022. We ran experiments for enumerating the optimal solutions of the minimum DSP. The time-limit is 5 minutes for each instance. clingo was able to fully enumerate the optimal solutions of 57 instances.\n(2) For each of the 57 instances, we tried to construct its solution space using breadth- first search. A solution space is a graph in which each node represents a dominating"}, {"title": "6 Related work", "content": "Recent advances in ASP such as multi-shot ASP solving (Gebser et al. 2019) encourage researchers to tackle hard problems in combinatorial reconfiguration. The use of multi- shot ASP for combinatorial reconfiguration was first studied in (Yamada et al. 2023; 2024). They proposed a general approach called bounded combinatorial reconfiguration for solving combinatorial reconfiguration problems based on ASP, including algorithms, solver developments, encodings, and empirical analysis. The resulting ASP-based solver recongo is an award-winning solver of the most recent CoRe challenge 2022 and 2023.\nThe bounded combinatorial reconfiguration has been applied to some specific reconfig- uration problems. Yamada et al. (2023; 2024) developed a collection of ASP encodings for independent set reconfiguration under the token jumping rule, including basic encodings for problem solving and some hint constraints. Hirate et al. (2023) explored Hamiltonian cycle reconfiguration under the well-known k-opt rule of the traveling salesperson prob- lem. They presented new ASP encodings for solving Hamiltonian cycle problems and extended one of them for Hamiltonian cycle reconfiguration.\nThis paper tackled the dominating set reconfiguration problem (DSRP). The major contribution of this paper is the development of ASP encodings and a hint constraint (named token destination) for DSRP solving under token jumping as well as token addition-removal. Particularly, our best hint constraint is shown to be highly effective in deciding unreachability. This hint is domain-specific to DSRP and is different from the ones used in the previous works (Yamada et al. 2023; 2024; Hirate et al. 2023). Our approach has a similarity to the previous works in the sense that both the grounding and solving tasks are delegated to the recongo solver.\nThere is a rapidly growing interest in the practical aspects of combinatorial reconfigu- ration. However, many important problems remain untouched, such as the connectivity, optimality, and diameter of the solution space. We will investigate the possibility of using ASP for those challenging problems."}, {"title": "7 Conclusion", "content": "We developed an approach to solve the dominating set reconfiguration problem based on Answer Set Programming (ASP). Our declarative approach relies on a high-level ASP encoding, and both the grounding and solving tasks are delegated to the ASP-based combinatorial reconfiguration solver recongo. We established the competitiveness of our declarative approach by empirically contrasting it to a more algorithmic ZDD-based approach. All source code and benchmark problems are available from the web.\nFuture work includes benchmark generation for DSRP under token addition-removal, using real-data of social and sensor networks. From a broader perspective, combinatorial reconfiguration is related to automated planning, in the sense of transforming a given state to another state. It would be interesting to study the relationship between them and investigate the possibility of their synergy. For a synergy, we plan to develop a framework of cost-optimal combinatorial reconfiguration with multiple adjacency relations."}]}