{"title": "GeNet: A Multimodal LLM-Based Co-Pilot for Network Topology and Configuration", "authors": ["Beni Ifland", "Elad Duani", "Rubin Krief", "Miro Ohana", "Aviram Zilberman", "Andres Murillo", "Ofir Manor", "Ortal Lavi", "Kenji Hikichi", "Asaf Shabtai", "Yuval Elovici", "Rami Puzis"], "abstract": "Communication network engineering in enterprise environments is traditionally a complex, time-consuming, and error-prone manual process. Most research on network engineering automation has concentrated on configuration synthesis, often overlooking changes in the physical network topology. This paper introduces GeNet, a multimodal co-pilot for enterprise network engineers. GeNet is a novel framework that leverages a large language model (LLM) to streamline network design workflows. It uses visual and textual modalities to interpret and update network topologies and device configurations based on user intents. GeNet was evaluated on enterprise network scenarios adapted from Cisco certification exercises. Our results demonstrate GeNet's ability to interpret network topology images accurately, potentially reducing network engineers' efforts and accelerating network design processes in enterprise environments. Furthermore, we show the importance of precise topology understanding when handling intents that require modifications to the network's topology.", "sections": [{"title": "1 INTRODUCTION", "content": "Communication network engineering in enterprise environments is largely a complex, time-consuming, and error-prone manual process, necessitating large IT, Netops, and engineering teams. It involves designing network topologies, mapping existing networks, configuring components according to policies, adhering to network security best practices, and more. These tasks have become more challenging as the heterogeneity and complexity of modern enterprise network architectures have increased [14].\nIndustry and academia have been working on simplifying and automating network engineering workflows. One notable approach is intent-based networking (IBN) [20] which aims to serve as a bridge between high-level network requirements, commonly referred to as intents, and low-level implementations. Originally, IBN frameworks relied on a formal language to express intents and provided tools for optimizing the network configurations to satisfy them [7]. Later approaches incorporated natural language processing (NLP) tools to reduce the formality, further assisting network engineers [16, 38]. Inspired by advancements in co-pilots for programming, such as GitHub Copilot [11] and Amazon CodeWhisperer [5], researchers have proposed co-pilots and recommendation systems to assist network engineers in configuring network devices [13, 42].\nHowever, most research on network engineering automation has concentrated on configuration synthesis (see \u00a7\u00a7 2.1 and 2.2), often overlooking the preliminary task of network topology design. Wang et al. [37] indicated that adding information such as network topology images could provide further context for the generation of network configurations. This, in turn, requires visual question answering (VQA) capabilities to process the images. (see \u00a7 2.3)\nIn \u00a7 3, we introduce GeNet, a co-pilot that streamlines network engineering workflows in enterprise environments. For that purpose, GeNet leverages a multimodal LLM to process network topology images, a unique aspect of GeNet, and device configurations, and update them to implement user intents. GeNet includes two modules: topology understanding (\u00a7 3.1) and intent implementation (\u00a7 3.2). The following is an example of a typical scenario in which GeNet can assist novice engineers:"}, {"title": "2 BACKGROUND AND RELATED WORK", "content": "In this section, we review network engineering automation with and without LLMs and VQA."}, {"title": "2.1 Automated Network Configuration", "content": "Network engineers' complex, unscalable, and error-prone manual workflows have motivated research aimed at automating these workflows. The leading automation approach is intent-based networking (IBN), a paradigm that provides an abstraction layer between the high-level network requirements or specifications, often referred to as intents, and the low-level device configurations. IBN emphasizes the desired functionality outcome of the network service rather than prescribing how it should be implemented [20].\nHigh-level intents can be expressed in different ways, from a fixed standardized predefined syntax in traditional IBN implementations [7, 10, 34] through structured data [19, 33], to natural language in modern IBN implementations [16, 32, 37, 38]. While using a predefined syntax or specific data structures requires time for the practitioner to gain proficiency, NLP techniques [18] give the practitioner more freedom and flexibility.\nRegardless of their representation, intents are translated into low-level configurations using traditional compilers [7], deep learning (DL) methods [8, 13, 32, 37, 38, 42], search-based methods [10, 19, 33, 34], or a combination thereof [16]. Guo et al. [13] presented a recommendation tool that generates configuration templates utilizing a knowledge graph and a graph neural network (GNN). Further information on IBN can be found in relevant surveys [20, 41].\nGeNet leverages IBN and LLMs to provide network engineers with user-friendly holistic assistance based on natural language intents."}, {"title": "2.2 LLMs and Network Configuration", "content": "The recent emergence of transformer-based LLMs [36] has revolutionized the artificial intelligence (AI) domain, introducing conversational and code writing capabilities, and enabling reasoning, and the execution of complex tasks. Recent network engineering studies examined the use of LLMs to streamline IBN by translating high-level intents into low-level configurations [15, 32, 37] or mapping specific device configurations to the unified software-defined network (SDN) device model [8]. Huang et al. [15] noted LLMs' potential in employing various external tools through APIs to perform complex networking tasks.\nRecent studies introduced evaluation frameworks to examine LLMs' networking reasoning and inference abilities, comparing the performance of various LLMs in networking-related tasks [9, 30, 37]. These studies highlight that GPT-4 [4] outperforms other popular LLMs across most tasks and experiments. Based on the above, we rely on GPT-4 in this paper.\nInspired by the emergence of programming assistants such as GitHub Copilot [11] and Amazon CodeWhisperer [5], co-pilots for assisting network engineers are being developed. For instance, Zhao et al. [42] presented a framework that generates configurations given natural language intents, utilizing an LLM and retrieval augmented generation (RAG) [21].\nFine-tuning an LLM may improve its performance in network configuration tasks [8]. However, Wang et al. [37] argued that fine-tuning may harm LLM performance in general networking tasks due to their high heterogeneity. In this paper, we explore GPT-4's ability to implement network intents without fine-tuning.\nIn contrast to our research, most related studies focused solely on synthesizing low-level configurations and did not address physical network topology design. As noted by Mondal et al. [32], LLM-based approaches do not handle large and complex network topologies well. Although it is still an open challenge, chain of thought [39] and network segmentation, where each topology segment is treated separately, are possible"}, {"title": "2.3 Visual Question Answering (VQA)", "content": "With the integration of vision capabilities in LLMs [1, 25], multimodal LLMs have become state-of-the-art tools for VQA [35, 40]. Given an image and a natural language question, a VQA system returns a natural language answer as output. In turn, it inspired the development of LLM-based tools for tasks that require vision capabilities [22, 23, 26, 27] and benchmark datasets to evaluate them [6, 17, 24, 28, 29].\nInspired by the above, we apply VQA techniques to produce textual representations of network topology images. To the best of our knowledge, this is the first attempt to leverage the visual modality by translating network topology images into respective textual representations and using them as context for network intents fulfillment with the assistance of LLMs."}, {"title": "3 THE GENET FRAMEWORK", "content": "In this section, we introduce GeNet, a co-pilot that assists network engineers in updating both network topologies and configurations. GeNet simplifies and streamlines such tasks by leveraging the power of GPT-4 [4], a state-of-the-art LLM, to automatically provide relevant and effective guidance. It does this by suggesting configuration or topology updates, we refer to as GeNet solutions, which fulfill the user's intents. GPT-4 is a multimodal LLM, meaning that it is capable of processing information in various modalities such as text, images, and files. It was chosen for GeNet's implementation, since it has strong knowledge and problem-solving skills, particularly in the networking domain [9, 30, 37].\nAs input, GeNet receives a natural language intent and a network specification file, which includes a topology image and a device configurations file. Subsequently, it outputs an updated specification file that complies with the intent. To enable this functionality, we designed GeNet in a modular fashion, based on the working assumption that LLMs demonstrate improved performance on smaller tasks [37]. First, relying on a multimodal LLM, the topology understanding module extracts detailed textual representations of network topology images (see \u00a7 3.1). Then, in the intent implementation module, another LLM reasons about the user intent and modifies the topology representation, and device configurations so they match it (see \u00a7 3.2). Moreover, it offers explanations about the changes made, enabling users to build their expertise in this area."}, {"title": "3.1 Topology Understanding Module", "content": "In GeNet's first phase, the topology understanding module generates a detailed textual representation of the network's topology based on the input image. To accomplish this task, we rely on GPT-4's VQA ability [3]. In addition to the input image, the model receives a prompt that provides detailed guidelines regarding the task it is required to perform\nFirst, the model is briefed on its role as a network topology analyst. Next, it is instructed to deliver a thorough description of the components (e.g., routers) and the connections illustrated in the topology image. Furthermore, since network topology diagrams often denote logical groups of components, such as LANs, the model is requested to highlight them if they are present. Lastly, the model is directed to refrain from including any unnecessary information about the diagram to prevent redundancy, a behavior observed in our preliminary experiments."}, {"title": "3.2 Intent Implementation Module", "content": "In GeNet's second phase, the intent implementation module updates the network specification file so that it is aligned with the user's intent. To achieve this, we employ OpenAI's Assistants API [2], which enables the application of tailored AI assistants. Such AI assistants can execute complex tasks based on general instructions provided at their setup, using various models and tools such as GPT-4 and file search. The assistant is initialized with detailed instructions, similarly to the topology understanding module.\nFirst, we clarify the assistant's role as an expert in network topology and configuration and specify its expected inputs. Next, the assistant's tasks are precisely defined, since in our preliminary experiments we observed its tendency to misinterpret instructions or partially complete complex tasks. Updating the topology or device configurations involves accessing and modifying several files; thus, we instruct the assistant to 1) update the textual representation of the topology if a change is required to align with the user's intent, and 2) configure any added component (e.g., router) and update the device configurations file accordingly. Lastly, the assistant is asked to provide explanations for the changes made.\nThe assistant accesses the device configurations file and the topology textual representation. Following its instructions, it performs the required updates to the files so that they match the intent and outputs the files, along with explanations regarding the modifications made. It is worth noting that we intentionally keep our instructions general and do not encourage the assistant to use a specific configuration language in its outputs, with the aim of making GeNet as generic as possible. In addition, we did not fine-tune GPT-4, since we wanted to examine its inherent ability to fulfill topology and configuration update intents."}, {"title": "4 EVALUATION", "content": "In this section, we aim to answer the following research questions:\nRQ 1. To what extent does GPT-4 Vision understand network topology images?\nRQ 2. How well can GeNet assist with network topology update intents vs. configuration update intents?\nRQ 3. To what extent does the quality of GeNet's solutions depend on its topology image understanding?\nTo answer these research questions, we utilize a set of typical network engineering scenarios, which are listed in \u00a7 4.1 where we also describe the experimental setup. Next, we assess the quality of GeNet using criteria formulated for each scenario as described in \u00a7 4.2. Finally, we present and discuss the evaluation results in \u00a7 4.3."}, {"title": "4.1 Dataset and Experimental Setup", "content": "GNS3 Vault [31] provides training labs with scenarios of varying difficulty levels to assist network engineers in preparing for certification exams. Inspired by this, we interviewed several IT experts to build our dataset and formulated 10 scenarios spanning diverse tasks, each comprising an intent and a specification file. Five scenarios include intents that necessitate network topology updates, and five only require configuration updates. In the remainder of the paper, we refer to these scenarios as topology and configuration scenarios, respectively.\nThe scenarios' environment, before fulfilling the intent, was implemented in GNS3 [12], a network emulator. The respective topology image and device configurations, extracted from GNS3, are used as context for the user intent in each scenario.\nGeNet's solutions for the scenarios listed above depend on both the scenarios' specification files and the creativity of the LLM, which is controlled by the temperature parameter. Lower temperature values lead to deterministic outputs, whereas higher values result in diverse outputs. We examined five temperature values: [0, 0.1, 0.5,0.9, 1]. With higher temperature values, GeNet produced many errors and frequently failed to produce comprehensible results. Every scenario with every temperature was executed five times, resulting in 250 GeNet solutions for 50 test cases."}, {"title": "4.2 Solution Quality Criteria", "content": "4.2.1 Topology image understanding score (TIUS).\nThe semi-structured output of the topology understanding module was automatically compared to a ground-truth representation manually constructed for each scenario. The TIUS quantifies whether all visual elements within the topology image were described correctly. We computed the LLM's accuracy in identifying the diagram elements, i.e., the number of correctly identified elements of a specific type out of the total number of elements of that type. The diagram elements considered are nodes (e.g. routers) (N), specific node labels (NL), node icons (NI), links between the nodes (L), labels of the links (LL), and their connections to nodes, (e.g. specific router interfaces) (LNL). The TIUS is a weighted sum of relative correct assessments: TIUS = 0.3\u00b7N + 0.2\u00b7NL + 0.05\u00b7NI + 0.35\u00b7L + 0.1\u00b7(LL+LNL). We set the weights subjectively according to the relative importance of the errors. This score is primarily used to evaluate the topology understanding module's performance.\n4.2.2 Fast screening score (FSS). Since each scenario has an intent and a specification file, we formulated scoring keys to assess how well GeNet fulfilled each intent. The scoring keys were developed based on the scenario solutions provided by GNS3 Vault [31] for the configuration scenarios and our interviews with IT experts for the topology scenarios.\n4.2.3 Emulator validated screening score (EVSS). Occasionally, GeNet may suggest different solutions for the same scenario, especially at high-temperature levels. We divided GeNet's solutions into groups according to the approach taken to fulfill the user intent.\n4.2.4 Standardized solution screening score (S3-Z).\nThe FSS and the EVSS complement each other by providing different perspectives on GeNet's solutions. The FSS focuses on the fulfillment of the intent and the general approach taken by GeNet, while the EVSS focuses on the errors it made and the effort required to correct them. For each grader, we standardized the scores so that the mean=0 and std.=1 across all of GeNet's 250 solutions."}, {"title": "4.3 Results", "content": "Topology image understanding (RQ 1): The topology understanding module scored high in topology understanding, with a minimal TIUS of 0.73. This result confirms the potential of multimodal LLM-based co-pilots to use images of network topologies as was suggested by Wang et al. [37]. As can be seen, the temperature level did not have a significant influence on the TIUS. To further evaluate the influence of the temperature, scenarios, and the types of scenarios on the TIUS, we measured their information gain (IG). The scenarios explain most of the variance in the TIUS, with an IG value of 0.44.\nTopology vs. configuration intents (RQ 2). On average, GeNet scored higher in the configuration scenarios than in the topology scenarios.\nTopology understanding vs. intent implementation (RQ 3).\nThe intent implementation module is dependent on the topology understanding module, since they work in a pipeline; this dependence is reflected in our results. However, the fact that the temperature levels influence the intent implementation module's scores more than topology understanding module's scores means that the intent implementation module's degraded performance for high-temperature levels was not only a result of its dependence on the topology understanding module's performance.\nwe see a positive correlation between the S3-Z and the TIUS for the topology scenarios. This result is intuitive, given the importance of understanding the topology in order to update it. The relation between the TIUS and S3-Z is less emphasized in configuration scenarios, suggesting that configurations can be updated adequately even without precise information about the topology."}, {"title": "5 CONCLUSION", "content": "In this paper, we introduced GeNet, a multimodal co-pilot for enterprise network engineers. GeNet is a novel framework that leverages an LLM to streamline network design workflows, by updating network topologies and device configurations based on user intents. A unique aspect of GeNet is its use of topology images to interpret the network's topology, which makes it agnostic to the topology input format rather than being tailored to a specific format or operating system. Whereas most research in the domain of network engineering automation has focused on configuration synthesis, we take a step further by automating the fulfillment of intents in which updates to both topology and configurations are required. Our results demonstrate GeNet's ability to interpret network topology images accurately and confirm the potential of multimodal LLM-based co-pilots to use images of network topologies. In turn, this possibly can reduce network engineers' efforts and accelerate network design processes in enterprise environments. Furthermore, we show the importance of LLM's precise topology understanding when it handles intents that require modifications to the network's topology.\nCurrently, GeNet does not support outputting updated topologies as images but rather outputs natural language descriptions. Although GPT-4 can generate diagrams, it still struggles to produce high-quality topology images [9]. While automatically generating markup language scripts to be rendered as diagrams is possible, achieving accurate and comprehensible layouts is still an open challenge. Therefore, to support this functionality, further advancements in multimodal LLMs are needed, we leave integrating this capability into GeNet as future work. Finally, we note that network specifications commonly include sensitive information. Therefore, enterprises would likely prefer local LLMs rather than APIs for network engineering co-pilots."}]}