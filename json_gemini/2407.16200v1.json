{"title": "MCTS Based Dispatch of Autonomous Vehicles under Operational Constraints for Continuous Transportation", "authors": ["Milan Tomy", "Konstantin M. Seiler", "Andrew J. Hill"], "abstract": "Continuous transportation of material in the mining industry is achieved by the dispatch of autonomous haul-trucks with discrete haulage capacities. Recently, Monte Carlo Tree Search (MCTS) was successfully deployed in tackling challenges of long-run optimality, scalability and adaptability in haul-truck dispatch. Typically, operational constraints imposed on the mine site are satisfied by heuristic controllers or human operators independent of the dispatch planning. This article incorporates operational constraint satisfaction into the dispatch planning by utilising the MCTS based dispatch planner Flow-Achieving Scheduling Tree (FAST). Operational constraint violation and satisfaction are modelled as opportunity costs in the combinatorial optimisation problem of dispatch. Explicit cost formulations are avoided by utilising MCTS generator models to derive opportunity costs. Experimental studies with four types of operational constraints demonstrate the success of utilising opportunity costs for constraint satisfaction, and the effectiveness of integrating constraints into dispatch planning.", "sections": [{"title": "I. INTRODUCTION", "content": "Automated dispatch strategies enable the efficient utilisation and growth of autonomous fleets in transportation and logistic applications such as public shuttle systems, automated warehouses, construction and mining. A key aspect of automated dispatch is satisfaction of critical constraints imposed on the system to ensure safe and feasible operations. Mine-sites are subject to a variety of operational constraints to ensure safety and satisfaction of personnel, prolong life-time of equipment and prevent disruptions to the flow and processing of material. These constraints affect the dispatch decisions either by limiting the operational availability of vehicles in the fleet or by enforcing conditions on the requirement of material at locations. For example, safe battery levels in battery electric trucks and safe tyre temperatures are imposed to avoid disruptions and hazards due to breakdown of the vehicle. Maintenance routines and shift-change breaks restrict dispatch decisions within time windows to ensure safety and satisfaction of operators.\nTypically, operational constraints are satisfied by conflict resolution after dispatch planning. Heuristic controllers detached from dispatch planners, or interventions by human-operators correct any dispatch decision that would lead to a constraint violation [1]. However, the deployment of such heuristic controllers require setting up of expensive infrastructure for enabling correction of dispatch decisions. Thus, developing strategies that optimise haul-truck dispatch while accounting for operational constraint satisfaction could result in financial gains by preventing additional operational cost"}, {"title": "II. RELATED WORK", "content": "Haul-truck dispatch algorithms have evolved from the most popular greedy heuristics [4] to mixed integer linear programming (MILP) solutions of instantaneous allocation problems [5] or evolutionary algorithms [6], and eventually to reinforcement learning based methods such as MCTS (FAST [3]) and deep neural networks (DNN) [7], [8]. FAST and DNN methods address the previous shortcomings of long-term optimality and scalability. However, FAST is more adaptable than DNN based methods as re-training is not required when production goals, mining locations and operational constraints change over time to accommodate evolving strategic mine plans. Physical constraints affecting the mine and haul-trucks dynamics such as coordination and interaction at locations are accounted for in the algorithms mentioned above. However, satisfaction of operational constraints are rarely considered.\nThough seldom studied in the mining domain, satisfaction of safety constraints in task planning has been considered in robotics. A multi-robot system with a formal safety specification, similar to the nature of operational constraints in mining is studied in [9]. The system is modelled with general stochastic petri network (GSPN) which allows specification of constraints as restrictions on the model. However, the GSPN formulation supports a specific type of constraint specification and produces offline solutions. Given a MILP formulation of a system, a variety of temporal constraints are incorporated into the dispatch planning of a heterogeneous team of robots in [10]. Off-the-shelf solvers are used to solve the MILP and generate offline policies. Due to the difference in problem formulation and offline solutions, these constraint satisfaction strategies cannot be directly incorporated into online dispatch framework of FAST.\nWithin MCTS, constraint satisfaction can been incorporated by designing constraint-specific penalty functions for each violation [11], or by modifying the selection policy to accommodate a constraint satisfaction heuristic [12]. Both these methods require a knowledge of the objective function, to design penalty functions or estimate tuning parameters that bias MCTS exploration appropriately. Instead, we design heuristic constraint-specific functions to generate an opportunity cost which avoids additional sensitive parameters that risk biasing the MCTS exploration."}, {"title": "III. SYSTEM DESCRIPTION", "content": "For the haul-truck dispatch problem, a simplified mine M = (H, R, A, T, Cp, Co) is described by the set of haul-trucks H = {V1, V2, \u00b7 \u00b7 \u00b7 } available for operation, the road network graph R=(L, E) determining the transportation path, the set of activities A defining all possible operational stages of a haul-truck, the set of haulage tasks T = {T1, T2,\u2026\u2026} defining the target rate at which material must be transported between locations, the set of physical constraint functions Cp = {c\u00b9, c\u00b2,\u2026\u2026}, and the set of operational constraint functions Co = {c\u2081, c\u2082,\u2026}. Haul-trucks $v_i \u2208 H$ with a finite load capacity are dispatched to transport material between loading and unloading stations to achieve a continuous material flow rate set by a higher-level mine plan. The set of materials M = {m1, m2,\u2026\u2026} excavated at various loading stations at the mine include different grades of ore and waste. While ore materials are transported to crushers and stockpiles for processing or blending to meet production requirements, waste material is transported to a dumpsite. The traversable roads e\u2208 E between these locations l\u2208 L are determined by the directed weighted graph in road network R.\nThe production goals of the mine are represented by continuous haulage tasks Tj\u2208T. Each task Tj = (ls, la, mn,r) is defined by the transportation of material type mn \u2208 M from loading station ls \u2208 L to unloading station la \u0395 L at a target flow rate of r\u2208 R tonnes per hour. Accomplishing haulage tasks requires repeated allocation of"}, {"title": "IV. PROBLEM DEFINITION", "content": "With the goal of developing a haul-truck dispatch planner considering operational constraints Co, we address the problem of integrating operational constraint satisfaction into the MCTS based dispatch planner FAST. The objective of haul-truck dispatch is to ensure continuous transportation of material to achieve production targets. Let o(te) be a cumulative objective function o: R \u2192 R that scores the"}, {"title": "V. FAST", "content": "Flow-achieving Scheduling Tree (FAST) optimises haul-truck dispatch by reasoning over the sequence of system-wide dispatch decisions on a decision tree. A decision tree node represents haulage task allocations of haul-trucks at time t. FAST employs MCTS to efficiently explore the vast search space and optimise over the non-linear objective function in real-time. MCTS is an anytime algorithm that grows the tree towards promising nodes by balancing exploration and exploitation based on a heuristic informed by random samples [13], [14].\nEach decision node encapsulates information for tracking progress of dispatch tasks, interactions among trucks and activity stations and decision node values. The value of a decision node is estimated by forward simulation and random sampling with an efficient rollout policy. A high-performance state transition model capturing the interactions and asynchronous execution of vehicles allows speedy rollouts in MCTS. Physical constraints are satisfied in FAST by disallowing actions causing violations and providing alternates that satisfy constraints in the state transition models. Each haul-truck $v_i \u2208 H$ is deterministically chosen by selecting the vehicle that finishes an action execution earliest. Thus, the decision nodes in the tree represent decisions at sequential time points ordered such that earlier haul-truck decisions and activities are closer to the root. For balancing exploration and exploitation, FAST utilises a self-tuned variant of UCB algorithm [13] for the selection of action or haulage task a\u2208T for haul-truck $v_i$ at time t based on node values.\nFor estimating decision node values, FAST introduced a cumulative objective function o(te) that measures the overall deviation from targets defined in haulage tasks T\u2208T, by tracking the cumulative volume of material moved by the system until time te. A goal function g:T\u00d7R \u2192 R maps a task T\u2208T to the cumulative target volume of material mn \u2208 M to be moved from loading station l \u2208 L to unloading station la \u2208 L by time te. Similarly, a flow function f:LxL\u00d7R\u2192 R, defines the cumulative volume of material moved between a pair of locations ls and la with decisions taken from the action space A = T until time te. Thus, the simplified cumulative objective function is:\n$$o(t_e) = \\sum_{T \\in T} e (f(l_s, l_a, t_e) \u2013 g(T, t_e))$$ (2)\nwhere e is an application specific error function designed to penalise deviation from target material flow rates. Hence, o(te) depends on haulage task completion duration, which is determined by the activity durations of the haul-trucks performing the task. Exponential discounting with a discount factor \u03b6\u2208 (0,1) is incorporated to bound the objective o(t) over an infinite time horizon, and prioritise immediate rewards over those obtained later into the horizon. The discounted objective is calculated across uniformly discretised timesteps \u2206t and is given by o(n\u2206t) = 0(0) + \u03a3\u03b6\u2071 (\u03bf(it) \u2013 \u043e((i \u2013 1)\u2206t)).\nFAST executes the decision from the root that maximises the objective and re-runs MCTS for obtaining decisions at later time points. Thus, by quickly re-planing over a fixed horizon with receding horizon control, FAST approximates long-term optimality, and accounts for uncertainty and disruptions without explicit stochastic optimisation."}, {"title": "VI. OPERATIONAL CONSTRAINT SATISFACTION", "content": "The intractable search space for decisions feasible under operational constraints poses the challenge in dispatch planning with constraint satisfaction. We tackle this challenge by leveraging MCTS and opportunity costs estimated from MCTS generator models for efficient search.\n\nA. Opportunity cost\nCost functions penalise the objective on constraint violation and direct the search towards higher-valued decisions which also satisfy constraints. In our problem, designing costs for violations is challenging due to the interdependence of haul-truck decisions and incomplete knowledge on the range of the objective function o(te). For example, estimating the cost of battery constraint violation in Figure 1 is difficult as any loss incurred could be accounted for by other vehicles in the system. Assigning costs for such violations without knowing the range of objective values can reduce MCTS rewards and bias MCTS exploration away from nodes propagating low reward values, resulting in sub-optimal solutions.\nHence, opportunity costs provide a suitable framework for comparing decision values without explicitly formulating cost functions or knowing the complete reward distribution.\nAn opportunity cost of a decision is the value forgone [15]. Here, opportunity costs are the rewards forgone by executing actions that do not contribute towards task progression instead of actions that only contribute to task progression. Actions that result in constraint violation incur opportunity costs by increasing the chance of disrupting task progression. Actions a\u2208 Ac = {charge, park} also incur opportunity costs as they delay task progression while aiding constraint satisfaction. Thus, a cumulative opportunity cost can be defined as OC(te) =\u014d(te)-0(te), where \u014d(te) is the return on executing actions a\u2208 {AUT} causing possible constraint violations and delays to task progression until te, and o(te) denotes the return on taking actions a\u2208T that only progress task execution without any constraint violations until te. We avoid explicit formulation and tuning of cost functions by directly estimating the new objective \u014d(te) = o(te)+OC(te) with heuristic MCTS generator models.\n\nB. Generating opportunity costs\nFor estimating the cumulative objective augmented with opportunity cost, \u014d(te), a suitable variable that creates a loss in o(te) on constraint satisfaction and violation must be identified. In our context, o(te) is dependent on the sum of all activity durations dat, resulting from actions $a_t \u2208 A$ taken by vehicles $v_i \u2208 H$ at time points t, until te. Thus, o(te) in Equation 2 can also be represented as $o(t_e) = f(\\sum_{v_i \u2208 H} \\sum_{t<t_e} d_{i, t} | a_{i, t} \u2208 T)$. Activity duration $d_{i, t}$ is determined by a function g: TUA\u00d7A\u00d7 R \u2192 R which maps an action a, the resulting activity a\u2208 A, and nominal activity duration Da \u2208 R to dit \u2208 R, based on domain specific models of the activity type \u0101 and interaction among vehicles. Here, Da is the nominal duration of the activity without interactions obtained from the data on mine operations. Hence, the activity duration is given by $d_{i, t} = g(a_t, \\overline{a}, D_a)$.\nWhen an action a\u2208TU Ac leads to constraint violation, its activity duration dat can be manipulated by adding a delay it to impose a loss. Thus, the cumulative opportunity cost OC(t) is generated by the cumulative delay in achieving targets imposed by actions that violate constraints and procrastinate task completion. The opportunity cost inclusive cumulative objective \u014d(te) at the end of planning horizon H is estimated as follows:\n$$\\overline{o}(H) = o(H) + OC(H)$$\n$$= f(\\sum_{v_i \u2208 H} \\sum_{t<H} d_{i, t} | a_{i, t} \u2208 T) + OC(H)$$\n$$= f(\\sum_{v_i \u2208 H} \\sum_{t<H} d_{i, t} | a_{i, t} \u2208 T \\cup A_c) - (\\sum_{v_i \u2208 H} \\sum_{t<H} \\delta_{i, t})$$ (3)\nThe delays incorporated affect function f, the cumulative material moved in Equation 2, allowing us to estimate \u014d(te) with the same formulation. No opportunity costs are incurred when an action at does not result in constraint violation as $\\delta_{i, t} = 0$, and when no actions $a_t \u2208 A$ are taken. Including opportunity costs for constraint satisfaction allows the planner to reason among different actions that satisfy the same constraint, and trade-off between competing constraint satisfaction and objective maximisation. Delay dit incurred on violating a constraint controls the rate at which cost accumulates in \u014d(te). Hence, we design delay generator functions to estimate dit and approximate the augmented cumulative objective \u014d(te).\n\nC. Designing violation delay\nOperational constraints considered in this system can be classified based on i) flexibility \u2013 hard or soft constraints; ii) specificity the constraint is satisfied individually by each vehicle in the fleet or collectively by only a subset of the fleet. The violation delay dit incurred is dependent on the type of operational constraint considered. We define an infinite delay for the violation of hard constraints Ch since it continuously accumulates error over the horizon, as shown in Equation 2, leading to a diminishing the value of \u014d(te). In contrast, di, is defined by a function fu : Rn \u2192 R for soft constraints Co, such that the delay is proportional to the error in constraint satisfaction. Thus, constraint violation delay resulting from action a is:\n$$\\delta_{i, t} = f_v(v_c) \\quad c^o \u2208 C^o \\subseteq C_o$$\n$$\\delta_{i, t} = \\infty \\quad c^o \u2208 C^h \\subseteq C_o$$ (4)\nwhere fe is a constraint-specific function that generates delay based on the constrained variable ve. For vehicle-specific constraints, the violation delay dit is incurred on a single vehicle vi that violated the constraint. However, for collective constraints, the dit is incurred by all trucks executing an activity a \u2208 A specific to the constraint violation. Violation delay dit represents delays incurred when constraint violation results in the worst-case or undesirable behaviour and need not accurately estimate the dynamics of the system. Next, we design delay function fe for four different types of operational constraints typical for a mine-site."}, {"title": "D. FAST with operational constraints \u2013 FASTOC", "content": "The activity durations dit and constraint violation delays dit are utilised to formulate the opportunity cost inclusive objective \u014d(te) in Equation 3 while maintaining the same formulation of objective o(te) introduced in FAST (Equation 2). Thus, we maintain the entire framework of FAST including the state and action space, state transition and interaction models, MCTS characterisations and online receding horizon execution. The state space is augmented with constrained variables required for monitoring constraint violation, and action space includes constraint specific actions Ac in addition to tasks T\u2208 T. The state transition model includes dynamics and delays for calculating the cost inclusive cumulative objective as described in Section VI-C.\nThe rollout policy in MCTS may have to select among task specific actions a\u2208T and constraint specific actions a\u2208 Ac. Randomly sampling from the action space TU Ac with a uniform probability distribution results in noisy rollouts and un-informed exploration in MCTS. To ensure unbiased exploration and exploitation, a rollout policy should make random choices with realistic outcomes [16]. Uniform sampling selects actions at \u2208 A too often when they are not required and accumulates opportunity costs. These low rewards bias the exploration resulting in sub-optimal decisions. Thus, to model realistic outcomes, the probability of selecting a constraint-specific action p(at\u2208 Ac) = h(v) is determined by the closeness of the state variable to constraint violation. For example, the probability of charging is given by $p(charge) = \\frac{100-b}{100-B_{min}}$ for battery constraints bi > Bmin \u2200vi \u2208 H. Then, the probability of task execution is pexecute = 1-p(charge), and the probability of selecting a task Tj \u2208 T proportional to the required flow rate as in FAST. For constraints with no new actions, the rollout heuristic in FAST is sufficient as there is no additional opportunity cost for constraint satisfaction."}, {"title": "VII. EMPIRICAL ANALYSIS", "content": "Each operational constraint is studied individually without the influence of the other constraints on the system to experimentally evaluate the ability of FASToc in satisfying operational constraints while optimising the objective.\n\nA. Experimental Setup\nAll experiments were run in simulation and built on a miniature toy mine M. FASToc was implemented on python and simulated with a state-based simulator on a desktop computer with Intel Core i7-6700K CPU and 16GB of RAM.\n1) Environment: The road network R used for the experiment is shown in Figure 2. A set of four dispatch tasks T has been described for M: i) To = (L1, UL1, M1, 100), which signifies the task of continuously transporting M1 from L\u2081 to UL1 at a target rate of 100 tonnes per hour; ii) T\u2081 = (L2, UL2, M2, 100); iii) T2 = (L3, UL3, waste, 100); iv) T3 = (L4, UL1, M3, 200). Note that T3 is significantly shorter than other three tasks. We assume H to be a set of 5 haul-trucks with 100 tonnes capacity each. Without any operational constraints C\uff61, M = (H, R, A, T, Cp) represents a self-sufficient system capable of achieving targets.\n2) Tuning parameters: Optimal planning horizon H and discount rate for maximising objective score and satisfying constraints were obtained by analysing performance indicators for varying H and constant (, and vice-versa. Longest duration to observe reward dr is utilised to express H and \u03b6. The duration dr varies depending on the constraint imposed. Planning horizon is expressed as H = fhzdr, where fhz is the horizon factor. Halftime H0.5 denotes the time to halve the objective value with \u03b6. The relation between H0.5 and ( is given by $\\zeta = \\frac{ln 2}{H_{0.5}}$, where H0.5 can be expressed in terms of half-time factor fhf as $H_{0.5} = f_{hf}d_r$.\n3) Performance indicators: The online plans generated are analysed based on the following major performance metrics of the mine-site: i) Score of plan - Score describes the deviation of total material moved from the targets. It is defined by the error function used in Equation 2. A positive score indicates that the target flow rates for tasks are maintained or exceeded; iii) Operational time \u2013 The total fleet duration for loading, unloading and transiting; iv) Queuing time; and other constraint-specific durations indicating the total fleet duration for constraint satisfaction or violation.\n4) Baseline planners FASTHC: Typically, each operational constraint is handled at the mine-site with a heuristic controller detached from the dispatch planning process. Thus, a fully tuned FAST with no constraints and independent heuristic controls for constraint satisfaction are developed as a baseline. The heuristics utilised are described briefly:\na) Battery & tyre temperature heuristic: For all possible tasks from the current state, the heuristic deterministically looks ahead to evaluate if executing a partial task and taking a constraint-satisfying action in Ac will result in a hard constraint violation. If the look-ahead check indicates a constraint violation for any of the tasks, then the conservative heuristic decides on a constraint-satisfying action.\nb) Capacity heuristic: A minimum number of trucks must always execute the task corresponding to the location where the minimum capacity constraint has been imposed.\nc) Ratio heuristic: The volume ratio of the material with lower proportion is maintained lesser than or equal to specified constraint ratio by assigning arriving trucks to a buffer queue when their contribution violates the ratio.\n\nB. Results & Discussion\nResults presented are the averages across 15 simulations, with same initial conditions. Online plans were generated for one day and analysed to obtain key performance indicators for each experiment. For each online decision, MCTS was run with 10,000 iterations, and At discretisation for reward calculation was set to 600s.\n1) Battery constraints: \u2200vi \u2208 H : bi > Bmin\nTuning results of FASToc, for varying the horizon is presented in Figure 3. Performance in terms of objective"}, {"title": "VIII. CONCLUSION", "content": "In this article, MCTS based FAST was extended to FASToc by incorporating operational constraint satisfaction. Opportunity costs on the objective function were utilised to model constraint violations and satisfaction. Given an objective in terms of cumulative error, heuristic delay functions were designed to estimate opportunity costs for a variety of constraints by leveraging generator models in MCTS. The success in utilising opportunity costs for constraint satisfaction was demonstrated empirically. Performance improvements of FASToc over FASTHC motivate the need to integrate operational constraint satisfaction into dispatch planning to improve overall production rates and prolong life of equipment. In future work, we aim to develop strategies to combine multiple operational constraints while maintaining scalability and test on data from real mine operations."}]}