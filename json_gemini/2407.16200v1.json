{"title": "MCTS Based Dispatch of Autonomous Vehicles under Operational Constraints for Continuous Transportation", "authors": ["Milan Tomy", "Konstantin M. Seiler", "Andrew J. Hill"], "abstract": "Continuous transportation of material in the mining industry is achieved by the dispatch of autonomous haul-trucks with discrete haulage capacities. Recently, Monte Carlo Tree Search (MCTS) was successfully deployed in tackling challenges of long-run optimality, scalability and adaptability in haul-truck dispatch. Typically, operational constraints imposed on the mine site are satisfied by heuristic controllers or human operators independent of the dispatch planning. This article incorporates operational constraint satisfaction into the dispatch planning by utilising the MCTS based dispatch planner Flow-Achieving Scheduling Tree (FAST). Operational constraint violation and satisfaction are modelled as opportunity costs in the combinatorial optimisation problem of dispatch. Explicit cost formulations are avoided by utilising MCTS generator models to derive opportunity costs. Experimental studies with four types of operational constraints demonstrate the success of utilising opportunity costs for constraint satisfaction, and the effectiveness of integrating constraints into dispatch planning.", "sections": [{"title": "I. INTRODUCTION", "content": "Automated dispatch strategies enable the efficient utilisation and growth of autonomous fleets in transportation and logistic applications such as public shuttle systems, automated warehouses, construction and mining. A key aspect of automated dispatch is satisfaction of critical constraints imposed on the system to ensure safe and feasible operations. Mine-sites are subject to a variety of operational constraints to ensure safety and satisfaction of personnel, prolong life-time of equipment and prevent disruptions to the flow and processing of material. These constraints affect the dispatch decisions either by limiting the operational availability of vehicles in the fleet or by enforcing conditions on the requirement of material at locations. For example, safe battery levels in battery electric trucks and safe tyre temperatures are imposed to avoid disruptions and hazards due to breakdown of the vehicle. Maintenance routines and shift-change breaks restrict dispatch decisions within time windows to ensure safety and satisfaction of operators.\nTypically, operational constraints are satisfied by conflict resolution after dispatch planning. Heuristic controllers detached from dispatch planners, or interventions by human-operators correct any dispatch decision that would lead to a constraint violation [1]. However, the deployment of such heuristic controllers require setting up of expensive infrastructure for enabling correction of dispatch decisions. Thus, developing strategies that optimise haul-truck dispatch while accounting for operational constraint satisfaction could result in financial gains by preventing additional operational cost"}, {"title": "II. RELATED WORK", "content": "Haul-truck dispatch algorithms have evolved from the most popular greedy heuristics [4] to mixed integer linear programming (MILP) solutions of instantaneous allocation problems [5] or evolutionary algorithms [6], and eventually to reinforcement learning based methods such as MCTS (FAST [3]) and deep neural networks (DNN) [7], [8]. FAST and DNN methods address the previous shortcomings of long-term optimality and scalability. However, FAST is more adaptable than DNN based methods as re-training is not required when production goals, mining locations and operational constraints change over time to accommodate evolving strategic mine plans. Physical constraints affecting the mine and haul-trucks dynamics such as coordination and interaction at locations are accounted for in the algorithms mentioned above. However, satisfaction of operational constraints are rarely considered.\nThough seldom studied in the mining domain, satisfaction of safety constraints in task planning has been considered in robotics. A multi-robot system with a formal safety specification, similar to the nature of operational constraints in mining is studied in [9]. The system is modelled with general stochastic petri network (GSPN) which allows specification of constraints as restrictions on the model. However, the GSPN formulation supports a specific type of constraint specification and produces offline solutions. Given a MILP formulation of a system, a variety of temporal constraints are incorporated into the dispatch planning of a heterogeneous team of robots in [10]. Off-the-shelf solvers are used to solve the MILP and generate offline policies. Due to the difference in problem formulation and offline solutions, these constraint satisfaction strategies cannot be directly incorporated into online dispatch framework of FAST.\nWithin MCTS, constraint satisfaction can been incorporated by designing constraint-specific penalty functions for each violation [11], or by modifying the selection policy to accommodate a constraint satisfaction heuristic [12]. Both these methods require a knowledge of the objective function, to design penalty functions or estimate tuning parameters that bias MCTS exploration appropriately. Instead, we design heuristic constraint-specific functions to generate an opportunity cost which avoids additional sensitive parameters that risk biasing the MCTS exploration."}, {"title": "III. SYSTEM DESCRIPTION", "content": "For the haul-truck dispatch problem, a simplified mine M = (H, R, A, T, Cp, Co) is described by the set of haul-trucks H = {V1, V2, \u00b7 \u00b7 \u00b7 } available for operation, the road network graph R=(L, E) determining the transportation path, the set of activities A defining all possible operational stages of a haul-truck, the set of haulage tasks T = {T1, T2,\u2026\u2026} defining the target rate at which material must be transported between locations, the set of physical constraint functions Cp = {c, c,\u2026\u2026}, and the set of operational constraint functions Co = {c\u2081, c\u00ba, }. Haul-trucks vi \u2208H with a finite load capacity are dispatched to transport material between loading and unloading stations to achieve a continuous material flow rate set by a higher-level mine plan. The set of materials M = {m1, m2,\u2026\u2026} excavated at various loading stations at the mine include different grades of ore and waste. While ore materials are transported to crushers and stockpiles for processing or blending to meet production requirements, waste material is transported to a dumpsite. The traversable roads e\u2208 E between these locations l\u2208 L are determined by the directed weighted graph in road network R.\nThe production goals of the mine are represented by continuous haulage tasks Tj\u2208T. Each task Tj = (ls, la, mn,r) is defined by the transportation of material type mn \u2208 M from loading station ls \u2208 L to unloading station la \u0395 L at a target flow rate of r\u2208 R tonnes per hour. Accomplishing haulage tasks requires repeated allocation of vehicles across the planning horizon. On assignment of a task Tj to haul-truck vi, the following activities are executed in sequence by Vi i) transiting empty to the excavator; ii) queuing at the excavator; iii) loading; iv) transiting loaded to the unloading station; v) queuing at the unloading station and; vi) unloading. Additionally, haul-trucks are allocated actions Ac = {charge, park} for re-fuelling or recharging, maintenance and shift changes, to ensure operations around the clock. Then, the set of activity types A={transit, load, queue, unload, charge, park} define the operational stages of a haul-truck at the mine-site. Thus, an activity a = (l,\u0101) is uniquely determined by the activity type a\u2208 A executed at a location l\u2208 L, resulting in the set of activities A = {a| \u2200l \u2208 Land \u2200\u0101 \u2208 A}. Each dispatch decision or action results in the activity transition of a haul-truck. The action duration of a haul-truck is equivalent to the duration da of the activity a \u2208 A to which the truck transitioned. Activity duration da is determined by a, l, the dispatch decisions and activity duration of other interacting vehicles, and domain specific interaction models.\nPhysical constraints c\u00ba \u2208 Cp are imposed by R, H, A and the interaction model of the mine. These are inviolable constraints which determine the dynamics of the system. They constrain the volume of material moved by a vehicle, execution order of activities and activity duration. Their statisfiability can be determined by monitoring the current state of the system. In contrast, operational constraints c\u00ba \u2208 Co are non-markovian constraints which impact dispatch decisions without affecting the critical dynamics of the system. Violation of operational constraints increase risk of safety hazards, equipment failure and consequent disruptions. Unlike physical constraints, operational constraints cannot be satisfied by disallowing or enforcing actions in TU Ac based on a state, as the state from which a violation can occur cannot be easily identified. A history or sequence of states is required to assess the constraint satisfiability. From the simplified scenario in Figure 1, charge action could be taken from so or 83 for constraint satisfaction, and states causing violation cannot be identified without complete forward simulation. Thus, deciding an action based on a single state can lead to sub-optimal and conservative solutions. This non-determinism is exacerbated due to haul-truck interactions as the decision of each truck and progress of constrained variables is dependent on the decisions of others. Hence, haul-truck dispatch involves optimising allocation and scheduling of haulage tasks T and constraint actions Ac to achieve production goals while satisfying the operational constraints of the mine-site."}, {"title": "IV. PROBLEM DEFINITION", "content": "With the goal of developing a haul-truck dispatch planner considering operational constraints Co, we address the problem of integrating operational constraint satisfaction into the MCTS based dispatch planner FAST. The objective of haul-truck dispatch is to ensure continuous transportation of material to achieve production targets. Let o(te) be a cumulative objective function o: R \u2192 R that scores the progress of haulage tasks or goals until time te. The cumulative objective o(te) is determined by the progress made by all actions or decisions at of all haul-trucks vi \u2208 H until te. Thus, haul-truck dispatch under operational constraints in a mine M = (H,R,A,T, Cp, Co) with decision space A = {TU Ac} is formulated as the following constrained sequential decision-making problem over a time horizon H:\n$\\begin{aligned}\n&\\arg \\max _{a \\in A} \\quad o(H) \\\\\n& \\text { subject to } c_{p}^{i}(v) \\leq 0 \\quad \\forall c_{p} \\in C_{p} \\\\\n& \\quad \\quad \\quad c_{o}^{i}(v) \\leq 0 \\quad \\forall c_{o} \\in C_{o}\n\\end{aligned}$$\nwhere a \u2208 A represents the action or decision taken at time t by haul-truck vi \u2208 H, and v is an n-dimensional vector representing system variables. Operational constraint satisfaction depends on the sequence of decisions made by the multi-vehicle system as shown in the example in Figure 1. The feasibility of an operational constraint can only be checked by monitoring the sequence of decisions chosen over a horizon. Thus, the search space of feasible decisions grows exponentially with the action space of the vehicles, and the number of decisions made within a horizon which depends on the fleet size and length of planning horizon. Hence, solution of the problem requires methods that allow efficient exploration of the extensive search space for objective maximisation within a limited execution time."}, {"title": "V. FAST", "content": "Flow-achieving Scheduling Tree (FAST) optimises haul-truck dispatch by reasoning over the sequence of system-wide dispatch decisions on a decision tree. A decision tree node represents haulage task allocations of haul-trucks at time t. FAST employs MCTS to efficiently explore the vast search space and optimise over the non-linear objective function in real-time. MCTS is an anytime algorithm that grows the tree towards promising nodes by balancing exploration and exploitation based on a heuristic informed by random samples [13], [14].\nEach decision node encapsulates information for tracking progress of dispatch tasks, interactions among trucks and activity stations and decision node values. The value of a decision node is estimated by forward simulation and random sampling with an efficient rollout policy. A high-performance state transition model capturing the interactions and asynchronous execution of vehicles allows speedy rollouts in MCTS. Physical constraints are satisfied in FAST by disallowing actions causing violations and providing alternates that satisfy constraints in the state transition models. Each haul-truck vi \u2208 H is deterministically chosen by selecting the vehicle that finishes an action execution earliest. Thus, the decision nodes in the tree represent decisions at sequential time points ordered such that earlier haul-truck decisions and activities are closer to the root. For balancing exploration and exploitation, FAST utilises a self-tuned variant of UCB algorithm [13] for the selection of action or haulage task a\u2208T for haul-truck vi at time t based on node values.\nFor estimating decision node values, FAST introduced a cumulative objective function o(te) that measures the overall deviation from targets defined in haulage tasks T\u2208T, by tracking the cumulative volume of material moved by the system until time te. A goal function g:T\u00d7R \u2192 R maps a task T\u2208T to the cumulative target volume of material mn \u2208 M to be moved from loading station l \u2208 L to unloading station la \u2208 L by time te. Similarly, a flow function f:LxLXR\u2192 R, defines the cumulative volume of material moved between a pair of locations ls and la with decisions taken from the action space A = T until time te. Thus, the simplified cumulative objective function is:\n$\\begin{equation}\no.ber o(t_{e})=\\sum_{T \\in T} e\\left(f(l_{s}, l_{a}, t_{e})-g(T, t_{e})\\right)\n\\end{equation}$$\nwhere e is an application specific error function designed to penalise deviation from target material flow rates. Hence, o(te) depends on haulage task completion duration, which is determined by the activity durations of the haul-trucks performing the task. Exponential discounting with a discount factor \u03b6\u2208 (0,1) is incorporated to bound the objective o(t) over an infinite time horizon, and prioritise immediate rewards over those obtained later into the horizon. The discounted objective is calculated across uniformly discretised timesteps \u2206t and is given by o(n\u2206t) = 0(0) +\n\u03a3i<n\u03b6i(o(it) \u2013 \u043e((i \u2013 1)\u2206t)).\nFAST executes the decision from the root that maximises the objective and re-runs MCTS for obtaining decisions at later time points. Thus, by quickly re-planing over a fixed horizon with receding horizon control, FAST approximates long-term optimality, and accounts for uncertainty and disruptions without explicit stochastic optimisation."}, {"title": "VI. OPERATIONAL CONSTRAINT SATISFACTION", "content": "The intractable search space for decisions feasible under operational constraints poses the challenge in dispatch planning with constraint satisfaction. We tackle this challenge by leveraging MCTS and opportunity costs estimated from MCTS generator models for efficient search.\nA. Opportunity cost\nCost functions penalise the objective on constraint violation and direct the search towards higher-valued decisions which also satisfy constraints. In our problem, designing costs for violations is challenging due to the interdependence of haul-truck decisions and incomplete knowledge on the range of the objective function o(te). For example, estimating the cost of battery constraint violation in Figure 1 is difficult as any loss incurred could be accounted for by other vehicles in the system. Assigning costs for such violations without knowing the range of objective values can reduce MCTS rewards and bias MCTS exploration away from nodes propagating low reward values, resulting in sub-optimal solutions.\nHence, opportunity costs provide a suitable framework for comparing decision values without explicitly formulating cost functions or knowing the complete reward distribution.\nAn opportunity cost of a decision is the value forgone [15]. Here, opportunity costs are the rewards forgone by executing actions that do not contribute towards task progression instead of actions that only contribute to task progression. Actions that result in constraint violation incur opportunity costs by increasing the chance of disrupting task progression. Actions a\u2208 Ac = {charge, park} also incur opportunity costs as they delay task progression while aiding constraint satisfaction. Thus, a cumulative opportunity cost can be defined as OC(te) =\u014d(te)-0(te), where \u014d(te) is the return on executing actions a\u2208 {AUT} causing possible constraint violations and delays to task progression until te, and o(te) denotes the return on taking actions a\u2208T that only progress task execution without any constraint violations until te. We avoid explicit formulation and tuning of cost functions by directly estimating the new objective \u014d(te) = o(te)+OC(te) with heuristic MCTS generator models.\nB. Generating opportunity costs\nFor estimating the cumulative objective augmented with opportunity cost, \u014d(te), a suitable variable that creates a loss in o(te) on constraint satisfaction and violation must be identified. In our context, o(te) is dependent on the sum of all activity durations dat, resulting from actions a\u2208 A taken by vehicles vi \u2208 H at time points t, until te. Thus, o(te) in Equation 2 can also be represented as\no.ber o(t_{e})= f(\\sum_{v_{i} \\in H} \\sum_{t<t_{e}} d_{t, 1_{a \\in T}}). Activity duration dit is determined by a function g: TUA\u00d7A\u00d7 R \u2192 R which maps an action a, the resulting activity a\u2208 A, and nominal activity duration Da \u2208 R to dit \u2208 R, based on domain specific models of the activity type \u0101 and interaction among vehicles. Here, Da is the nominal duration of the activity without interactions obtained from the data on mine operations. Hence, the activity duration is given by dit = g(a, a, Da).\nWhen an action a\u2208TU Ac leads to constraint violation, its activity duration dat can be manipulated by adding a delay it to impose a loss. Thus, the cumulative opportunity cost OC(t) is generated by the cumulative delay in achieving targets imposed by actions that violate constraints and procrastinate task completion. The opportunity cost inclusive cumulative objective \u014d(te) at the end of planning horizon H is estimated as follows:\n$\\bar{o}(H)=o(H)+O C(H)$ \n\n$\\quad=f\\left(\\sum_{v_{i} \\in H} \\sum_{t<H} d_{t, 1_{a \\in T}}\\right)+O C(H)$  \n\n$\\quad=f\\left(\\sum_{v_{i} \\in H} \\sum_{t<H} d_{t, 1_{a \\in T U A c}}\\right)$  \n\n$\\quad=f\\left(\\sum_{v_{i} \\in H} \\sum_{t<H}\\left(d_{t, 1_{a \\in T}}+\\delta_{t, 1_{a \\in A c}}\\right)\\right)$ \n\nThe delays incorporated affect function f, the cumulative material moved in Equation 2, allowing us to estimate \u014d(te) with the same formulation. No opportunity costs are incurred when an action at does not result in constraint violation as dit = 0, and when no actions a \u2208 A are taken. Including opportunity costs for constraint satisfaction allows the planner to reason among different actions that satisfy the same constraint, and trade-off between competing constraint satisfaction and objective maximisation. Delay dit incurred on violating a constraint controls the rate at which cost accumulates in \u014d(te). Hence, we design delay generator functions to estimate dit and approximate the augmented cumulative objective \u014d(te).\nC. Designing violation delay\nOperational constraints considered in this system can be classified based on i) flexibility \u2013 hard or soft constraints; ii) specificity the constraint is satisfied individually by each vehicle in the fleet or collectively by only a subset of the fleet. The violation delay dit incurred is dependent on the type of operational constraint considered. We define an infinite delay for the violation of hard constraints Ch since it continuously accumulates error over the horizon, as shown in Equation 2, leading to a diminishing the value of \u014d(te). In contrast, di, is defined by a function fu : Rn \u2192 R for soft constraints Co, such that the delay is proportional to the error in constraint satisfaction. Thus, constraint violation delay resulting from action a is:\n$\\begin{aligned} &\\delta_{t}=f_{c}(v) \\quad c^{o} \\in C^{o} \\subseteq C_{o} \\\\\n&\\delta_{t}=\\infty \\quad c^{o} \\in C^{h} \\subseteq C_{o}\n\\end{aligned}$$\nwhere fe is a constraint-specific function that generates delay based on the constrained variable ve. For vehicle-specific constraints, the violation delay dit is incurred on a single vehicle vi that violated the constraint. However, for collective constraints, the dit is incurred by all trucks executing an activity a \u2208 A specific to the constraint violation. Violation delay dit represents delays incurred when constraint violation results in the worst-case or undesirable behaviour and need not accurately estimate the dynamics of the system. Next, we design delay function fe for four different types of operational constraints typical for a mine-site."}, {"title": "1) Battery constraints:", "content": "Battery life restricts the available operational time of battery electric haul-trucks. Let bi \u2208 [0,100] denote the battery of haul-truck vi. Then, the constraint function is b\u2081 > Bmin Vvz \u2208 H, with constant Bmin. These are hard, vehicle-specific constraints imposed to prevent disruptions due to haul-truck breakdown. We assume a recharge system with limited charging stations at a charging bay, and linear charging and discharging models. Updated battery b is given by b\u2081 = bi + kadat, where ka is the charging rate or activity dependant discharging rate, and dat is the activity duration for any action a. The haul-truck is assumed to charge till maximum capacity when a \u2208 A results in a charging activity, resulting in a delay imposed by charging duration dist = 100-bi obtained from the charging model. Regardless of the battery model, infinite violation delay dit for each truck violating the hard constraint emulates the effect of a truck being inoperable when battery constraints are violated.\nka"}, {"title": "2) Tyre temperature constraints:", "content": "Short dispatch tasks decrease the overall tyre temperature, while long tasks result in an overall increase. Thus, allocation of tasks to haul-trucks should maintain safe tyre temperature to avoid life-threatening hazards from tyre bursting. These can be hard or soft constraints that must be satisfied by each vehicle. Let Yi \u2208 [35,95] denote the tyre temperature of haul-truck vi. The soft constraint function is Yi < YTh vi \u2208H, where YTh is the constant soft threshold to be maintained. The heating of tyres is modelled with linear function y' = Yi + khadat and cooling of tyres is given by the exponential function y = 35\u00b0C + yie-keda, where kh is the constant heating rate, ke is the constant cooling rate of the tyre and 35\u00b0C is the ambient temperature. Tyres heat for any action leading to an activity type a = transit and cool otherwise. An opportunity cost for satisfying constraints is only imposed when a = park and is determined by the tyre cooling model dit = ln Yfinal-35. Violation delay da of the soft constraint Yi < Yth resulting from an action at for a truck vi is generated by the function:\n$\\delta_{t}=f_{c}(y)=\\left\\{\\begin{array}{cc}K d_{a t}, & \\text { if } a=\\text { transit } \\\\0, & \\text { otherwise }\\end{array}\\right.$$\nwhere K is a scaling factor that can be constant or proportional to the violation error. In our experiments K = 1, which models the truck slowing down when transiting with hot tyres, imposing a delay on task progress. No delays are imposed while the truck is cooling down."}, {"title": "3) Capacity constraints:", "content": "Minimum capacity at locations is modelled as a hard, collective constraint-specific to an unloading activity. These operational constraints define the minimum volume of material Vmin required at unloading stations such as a crusher.When a crusher is operated with volume of material V(t) < Vmin, the components of the crusher are prone to damage, increasing the likelihood of crusher failure. We assume the crusher processes material at a constant rate p tonnes per hour. The volume of material in the crusher V(t) \u2208 R+ increases when an action at results in the activity a = (crusher, unloading) and continuously decreases at a rate p till the next unload activity. As minimum capacity constraints must be collectively satisfied, no particular vi causes the constraint violation. Thus, when the constraint is violated, i.e., V(t) \u2264 Vmin, the violation delay dit = \u221e is augmented for any truck vi performing the specific activity a = (crusher, unloading) at time t. Infinite violation delay on these trucks emulates the effect of the crusher being inoperable and hindering the progress of all tasks involving the crusher. None of the constraint-satisfying actions a\u2208T incur opportunity costs."}, {"title": "4) Ratio constraints:", "content": "These are soft and collective constraints defining the required ratio among the volume of materials at a location. Ratio constraints are imposed at the crusher for blending different grades of ore or for limiting the volume of sticky or challenging material to avoid clogging the crusher and risk of failure. Hence, ratio constraints determine the sequencing of dispatch decisions at locations. Assuming the crusher dynamics as in Section VI-C.3, let Vm; (t) denote the volume of material type mj in the crusher bin, V(t) be the total volume of material in the crusher, Vmax tonnes be the maximum bin capacity of the crusher and p be the processing rate. As the errors in required ratios em; (t) increase, the processing rate of the crusher is reduced exponentially to pe-maxj emj (t), to model the gradual blockage and ultimate breakdown of crusher. The error in required ratio rm for volume of material mj is given by emj rm; (t) = rm; (t)-rm mi, where mi Then Vmj (t) Vmax rm, mj As the processing rate slows down, the total volume in the crusher bin V(t) approaches the maximum Vmax delaying unloading activity and progress of any task involving the crusher. Thus, the violation delay is proportional to error in constraint satisfaction and is augmented to all trucks interacting at the location. The action at by vehicle vi at time t results in a delay dit only when the at causes the activity a = (crusher, queue) and is given by:\n$\\delta_{i t}=\\left\\{\\begin{array}{c}0, \\text { if } C_{i}+v_{i}+V(\\operatorname{tg}) \\leq V_{\\max } \\\\\n\\left(C_{i}+V\\left(t_{q}\\right)-V_{\\max }\\right)\\left(\\frac{1}{p e^{-\\max _{j} e m_{j}\\left(t_{q}\\right)}}- \\frac{1}{p}\\right), o . w .\\end{array}\\right.$$\nwhich is the additional duration for the crusher to process volume equivalent to the capacity Ci of truck vi before unloading. The delay and error is dependent on time ta denoting the time at which vi reaches the front of the queue."}, {"title": "D. FAST with operational constraints \u2013 FASTOC", "content": "The activity durations dit and constraint violation delays dit are utilised to formulate the opportunity cost inclusive objective \u014d(te) in Equation 3 while maintaining the same formulation of objective o(te) introduced in FAST (Equation 2). Thus, we maintain the entire framework of FAST including the state and action space, state transition and interaction models, MCTS characterisations and online receding horizon execution. The state space is augmented with constrained variables required for monitoring constraint violation, and action space includes constraint specific actions Ac in addition to tasks T\u2208 T. The state transition model includes dynamics and delays for calculating the cost inclusive cumulative objective as described in Section VI-C.\nThe rollout policy in MCTS may have to select among task specific actions a\u2208T and constraint specific actions a\u2208 Ac. Randomly sampling from the action space TU Ac with a uniform probability distribution results in noisy rollouts and un-informed exploration in MCTS. To ensure unbiased exploration and exploitation, a rollout policy should make random choices with realistic outcomes [16]. Uniform sampling selects actions at \u2208 A too often when they are not required and accumulates opportunity costs. These low rewards bias the exploration resulting in sub-optimal decisions. Thus, to model realistic outcomes, the probability of selecting a constraint-specific action pla\u2208 Ac) = h(v) is determined by the closeness of the state variable to constraint violation. For example, the probability of charging is given by p(charge) = 100-b for battery constraints bi > Bmin Vui \u2208 H. Then, the probability of task execution is pexecute = 1-p(charge), and the probability of selecting a task Tj \u2208 T proportional to the required flow rate as in FAST. For constraints with no new actions, the rollout heuristic in FAST is sufficient as there is no additional opportunity cost for constraint satisfaction.\n100-Bmin"}, {"title": "VII. EMPIRICAL ANALYSIS", "content": "Each operational constraint is studied individually without the influence of the other constraints on the system to experimentally evaluate the ability of FASToc in satisfying operational constraints while optimising the objective.\nA. Experimental Setup\nAll experiments were run in simulation and built on a miniature toy mine M. FASToc was implemented on python and simulated with a state-based simulator on a desktop computer with Intel Core i7-6700K CPU and 16GB of RAM.\n1) Environment: The road network R used for the experiment is shown in Figure 2. A set of four dispatch tasks T has been described for M: i) To = (L1, UL1, M1, 100), which signifies the task of continuously transporting M1 from L\u2081 to UL1 at a target rate of 100 tonnes per hour; ii) T\u2081 = (L2, UL2, M2, 100); iii) T2 = (L3, UL3, waste, 100); iv) T3 = (L4, UL1, M3, 200). Note that T3 is significantly shorter than other three tasks. We assume H to be a set of 5 haul-trucks with 100 tonnes capacity each. Without any operational constraints C\uff61, M = (H, R, A, T, Cp) represents a self-sufficient system capable of achieving targets.\n2) Tuning parameters: Optimal planning horizon H and discount rate for maximising objective score and satisfying constraints were obtained by analysing performance indicators for varying H and constant (, and vice-versa. Longest duration to observe reward dr is utilised to express H and \u03b6. The duration dr varies depending on the constraint imposed. Planning horizon is expressed as H = fhzdr, where fhz is the horizon factor. Halftime H0.5 denotes the time to halve the objective value with \u03b6. The relation between H0.5 and ( is given by H0.5 2, where H0.5 can be expressed in terms of half-time factor fhf as H0.5 = fhfdr.\n3) Performance indicators: The online plans generated are analysed based on the following major performance metrics of the mine-site: i) Score of plan - Score describes the deviation of total material moved from the targets. It is defined by the error function used in Equation 2. A positive score indicates that the target flow rates for tasks are maintained or exceeded; iii) Operational time \u2013 The total fleet duration for loading, unloading and transiting; iv) Queuing time; and other constraint-specific durations indicating the total fleet duration for constraint satisfaction or violation.\n4) Baseline planners FASTHC: Typically, each operational constraint is handled at the mine-site with a heuristic controller detached from the dispatch planning process. Thus, a fully tuned FAST with no constraints and independent heuristic controls for constraint satisfaction are developed as a baseline. The heuristics utilised are described briefly:\na) Battery & tyre temperature heuristic: For all possible tasks from the current state, the heuristic deterministically looks ahead to evaluate if executing a partial task and taking a constraint-satisfying action in Ac will result in a hard constraint violation. If the look-ahead check indicates a constraint violation for any of the tasks, then the conservative heuristic decides on a constraint-satisfying action.\nb) Capacity heuristic: A minimum number of trucks must always execute the task corresponding to the location where the minimum capacity constraint has been imposed.\nc) Ratio heuristic: The volume ratio of the material with lower proportion is maintained lesser than or equal to specified constraint ratio by assigning arriving trucks to a buffer queue when their contribution violates the ratio.\nB. Results & Discussion\nResults presented are the averages across 15 simulations, with same initial conditions. Online plans were generated for one day and analysed to obtain key performance indicators for each experiment. For each online decision, MCTS was run with 10,000 iterations, and At discretisation for reward calculation was set to 600s.\n1) Battery constraints: \u2200vi \u2208 H : bi > Bmin Tuning results of FASToc, for varying the horizon is presented in Figure 3. Performance in terms of objective score, material moved and constraints satisfied is maximised as H increased to 10.5 hours and H0.5 increased to 7 hours ie; discount factor of 0.98. This is because MCTS makes decisions by trading-off more accurate representations of opportunity costs. Our battery model restricts the operational availability of a vehicle to about 3-4 hours with a fully charged battery, and requires about 4 hours to fully charge. Thus, MCTS rollouts can only estimate the opportunity cost of satisfying the constraint by looking beyond 8 hours. For small horizons, low charging durations indicate that few charge decisions were made to avoid constraint violations.\nA decrease in objective is noticed for H greater than 10.5 hours and discount factors of 1 or H0.5= \u221e. When ( is 1, rewards accomplished early and later into the horizon are equally weighted. Thus, the controller is unable to prioritise avoiding delays and accomplishing higher rewards sooner. This leads to an increase in queuing time. It also tends to prioritise shorter tasks over longer ones as they prolong the operational time by using lesser battery life, enabling greater quantity of tasks to be done within a horizon. Longer horizons with no discounting tends to prefer quantity over quality, resulting in a significant decrease in objective score while maintaining the quantity of material moved.\nResults show that best tuned FASToc improves the cumulative material moved and operational time of FASTHC by about 45%, while satisfying the hard constraint. FASToc accomplishes more work by charging opportunistically and queuing lesser. The queuing time of FASToc is 84% lower than that of FASTHC, as it coordinates with vehicles in the system and accounts for contention of resources. Though all vehicles started with similar battery levels, FASTOC scheduled charging such that queuing at the charging bay was minimised. Additional rules such as ensuring staggered battery values is required to avoid such queuing with FASTHC.\n2) Tyre temperature soft constraints: \u2200vi \u2208 H : Yi < YTh Positive objective scores in Figure 4 show all targets are achieved regardless of the tyre temperature constraints. From the tuning experiments, the performance of FASToc in terms of objective score and soft constraint satisfaction peaks when 4 hrs < H < 8 hrs with H0.5 = 1.2 hrs or \u03b6 = 0.97. High queuing durations corresponding to low hot tyre durations within these horizons show that FASTOC controlled the tyre temperature by making smart dispatch decisions, without relying on parking actions. This is because MCTS is able to trade off between the opportunity costs of satisfying constraint. A prominent decrease in performance is observed with large horizons and large discount factors, as MCTS cannot accurately trade off opportunity costs as delays are not discouraged. A high duration in hot tyres is observed with FASTHC as it only controls the hard constraint Yi < Ymax. The best tuned FASToc spends 96% lesser time with hot tyres than FASTHC, with 1% improvement in terms of objective score.\n3) Capacity and Ratio Constraints: i) Volume at UL1 > Vmin; ii) Material volume ratio at UL\u2081 is VM\u2081 : VM\u2083 = 1 : 2. As tuning trends are similar, results have been tabulated in Table I to avoid duplicating graphs. FASToc was able to achieve targets with H > 1.6 hrs and \u03da > 0.5. Results show comparable performance of best tuned FASToc and FASTHC in terms of objective score, material moved, maintaining zero hard constraint violation and minimising soft constraint violation. FASToc achieves 5% reduction in queuing time and consequent increase in operational time. Thus, FASToc minimises constraint violation by effectively sequencing and scheduling the dispatch decisions, unlike FASTHC which enforces queuing for constraint satisfaction.\n4) Discussion: Table I presents the range of H and H0.5 for maximising objective and ensuring constraint satisfaction, and online execution time for a single decision with maximum branching. The execution time of FASToc is determined by the number of actions to select from, efficiency of heuristics and horizon length in MCTS rollouts. Note that the optimised version of FAST with no constraints in [3] takes less than 2.5s for a decision in an environment with 8 loading and 8 unloading stations, 30-40 trucks and H = 40 mins. Tuning results in Table I indicate the acceptable ranges of horizon and half-times are constraint dependant and can be in conflict with other constraints. Running arbitrarily large horizons with large discount factors lead to delayed reward accumulation, inaccurate opportunity cost estimation and noisy rewards if the environment is subject to change. This is undesirable for MCTS rollouts as it can cause a biased exploration resulting in sub-optimal solutions. Thus, combining multiple constraints together is non-trivial with opportunity cost formulation of constraint satisfaction. Moreover, dependence on long time horizons for generating accurate opportunity costs makes the MCTS rollouts expensive. Parellelization of MCTS will be required to make algorithm scalable. A drawback of utilising generator models to create the opportunity cost is that the trade-off between constraint satisfaction and maximising objective cannot be controlled."}, {"title": "VIII. CONCLUSION"}]}