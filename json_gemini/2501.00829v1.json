{"title": "An LLM-Empowered Adaptive Evolutionary Algorithm For Multi-Component Deep Learning Systems", "authors": ["Haoxiang Tian", "Xingshuo Han", "Guoquan Wu", "An Guo", "Yuan Zhou", "Jie Zhang", "Shuo Li", "Jun Wei", "Tianwei Zhang"], "abstract": "Multi-objective evolutionary algorithms (MOEAs) are widely used for searching optimal solutions in complex multi-component applications. Traditional MOEAs for multi-component deep learning (MCDL) systems face challenges in enhancing the search efficiency while maintaining the diversity. To combat these, this paper proposes \u00b5MOEA, the first LLM-empowered adaptive evolutionary search algorithm to detect safety violations in MCDL systems. Inspired by the context-understanding ability of Large Language Models (LLMs), \u03bc\u039c\u039f\u0395\u0391 promotes the LLM to comprehend the optimization problem and generate an initial population tailed to evolutionary objectives. Subsequently, it employs adaptive selection and variation to iteratively produce offspring, balancing the evolutionary efficiency and diversity. During the evolutionary process, to navigate away from the local optima, \u03bc\u039c\u039f\u0395\u0391 integrates the evolutionary experience back into the LLM. This utilization harnesses the LLM's quantitative reasoning prowess to generate differential seeds, breaking away from current optimal solutions. We evaluate \u00b5MOEA in finding safety violations of MCDL systems, and compare its performance with state-of-the-art MOEA methods. Experimental results show that \u00b5MOEA can significantly improve the efficiency and diversity of the evolutionary search.", "sections": [{"title": "Introduction", "content": "Multi-component deep learning systems (MCDL systems) are intricate and characterized by significant uncertainty due to their complexity. These systems often involve multiple interacting modules, each with its own set of parameters and behaviors, leading to unpredictable emergent properties. In real-world scenarios, MCDL systems are increasingly being deployed in domains with substantial societal impact, such as autonomous vehicles, healthcare, and financial services. For instance, autonomous driving systems integrate various components (e.g., object detection, path planning, and decision-making), where even minor faults in one component can lead to catastrophic outcomes (Bojarski et al. 2016). Therefore, it is crucial to detect as many safety violations as possible in these systems to mitigate risks and ensure reliability (Goodfellow et al. 2017).\nMulti-objective evolutionary algorithms (MOEAs) are widely applied to search for elite solutions to find safety violations in MCDL systems (Tian et al. 2022a; Abdukhamidov et al. 2023b,a). They can be formulated as multi-objective optimization problems (Zhou et al. 2011). In practical evolutionary search solutions based on genetic algorithms, these multiple objectives correspond to various perspectives (e.g., maximize the quality of the solution, improve the diversity of solutions, balance the cost of solutions against benefits) (Ehrgott, Ide, and Sch\u00f6bel 2014; Long 2014). However, there are trade-offs between these objectives as they conflicts with each other in many real-world scenarios.\nThe evolutionary search process generally consists of three steps: 1) initializing the initial population, 2) evaluating each generated individual with a defined fitness function, and 3) selecting high-fitness individuals to conduct variation operators to generate offspring iteratively. However, existing MOEAs for detecting safety violations in MCDL systems (Tian et al. 2022a) face two challenges that have not been well addressed.\n\u2022 Challenge-1: The initialization of the population highly affects the search efficiency for elitist solutions. However, in many MOEAs, the initial population is created by random initialization of parameters in the entire search space, which is highly contingent and uncertain.\n\u2022 Challenge-2: The evolutionary search process is prone to get stuck at local optima. In existing MOEAs, the individuals of each generation are generated by the high-fitness individuals retained from previous generations, which tend to cause convergence prematurely and result in a large number of iterations that only find few similar safety violations of the MCDL systems.\nThe goal of this paper is to overcome the above challenges and improve the evolutionary search efficiency and diversity."}, {"title": "Background", "content": "MCDL systems are characterized by their intricate internal logic, extensive interactions, and high coupling among various components (Amodei et al. 2016; Varshney 2016). Their complexity and opaqueness are further exacerbated by the substantial uncertainty, high degree of interdependence, and unpredictable nature of interactions across different deep learning models within the systems. Thus an MCDL system is often referred to as a \"black box\" (Hassija et al. 2024), making it challenging to thoroughly detect potential safety issues under varying conditions. It is necessary and urgent to have effective methods for the examination and detection of the internal problems in MCDL systems, without requiring a detailed understanding of the intricate workings.\nA proven strategy to detect safety violations in MCDL systems is to generate solutions that simulate the diverse operational conditions and assess the system's behaviors (including responses, decisions, operations/actions) (Tian et al. 2022b) to validate whether it adheres to the safety specifications (Borg et al. 2018; Guo et al. 2024). Ensuring the safety and reliability of MCDL systems requires diverse solutions to detect various potential vulnerabilities and failures of MCDL systems in a wide range of conditions (Asharf et al. 2020; Tian et al. 2022a). However, given the large state space of MCDL systems, traditional methods struggle to cover more possible cases efficiently. Thus, there is a growing need for more adaptive and comprehensive approaches to safety assessment of MCDL systems."}, {"title": "MOEAS For MCDL Systems", "content": "MOEAs, represented by NSGA-II (Deb et al. 2002), are widely used in detecting safety violations in MCDL systems. They are capable of exploring the vast and complex space of system behaviors and identify any misbehaviors (Mishra et al. 2019). This is achieved with evolving and optimizing solutions to cover possible situations (Wirsansky 2020) where the system behaviors violate the safety specifications.\nThe overall process of an MOEA (e.g., NSGA-II) is given as follows.\n\u2022 Initial population: NSGA-II commences by initializing a population of N solutions, which is randomly generated within the solution space.\n\u2022 Fitness function: given a solution space $S$ and objective functions $f_1, f_2,..., f_m$, the multi-objective optimization can be formulated as: $maxx\u2208s{f_1(x), f_2(x), ..., f_m(x)}$. To detect the safety violations in MCDL systems, the multiple objectives commonly include maximizing the fault detection and solution diversity.\n\u2022 Ranking-based selection: in the i-th generation, the solutions are evaluated by the fitness function and sorted by the crowding distance. $P_i$ consists of the non-dominated solutions obtained by each Pareto frontier. NSGA-II selects k solutions from $P_i$.\n\u2022 Variation: NSGA-II calculates the crossover probability and mutation probability for each selected solution, and compares the probability with the threshold of variation to determine whether to conduct multi-point crossover or value mutation on it. The probability of variation is calculated by a random value in (0, 1) and the threshold is pre-defined by a fixed value in (0, 1).\n\u2022 Iterative generations: after generating N offspring solutions, the next generation's population is determined by selecting the best N solutions from the current population $P_i$ and the offspring population $P_{i+1}$. NSGA-II iteratively searches and refines candidate solutions based on their performance against these defined objectives."}, {"title": "Methodology", "content": "We introduce \u00b5MOEA, a novel LLM-empowered adaptive evolutionary search algorithm for MCDL systems. The detailed process of \u00b5MOEA is illustrated in Algorithm 1 and Figure 1. It consists of three steps: instructing the LLM to create the initial population (line 2), evolving the population adaptively to search for optimal solutions (line 3-12), guiding the LLM to generate differential seeds based on the feedback of the evolutionary process (line 13-14). Below we give detailed explanation of each step."}, {"title": "Instructing LLM to Create Initial Population", "content": "When starting an evolutionary search, instead of randomly initializing N solutions as the initial population, \u00b5MOEA makes the LLM understand the evolutionary task and create the initial population by considering the objectives of the search. This is achieved with the linguistic prompt. An example of the prompt patterns are shown in Table 1, which are designed from the following aspects:\n\u2022 The structure of the solution, including essential blocks of the test case, the participant or element that each block represents. This promotes the LLM to understand the correct representation of solutions.\n\u2022 The keyword/statement, essential attributes and their value ranges of each block. This promotes the LLM to reason within the feasible ranges.\n\u2022 The examples of feasible solutions and their explanations of the requirements. This promotes the LLM to learn the test requirements.\nThese components of the prompt pattern enable \u00b5MOEA to facilitate the LLM to understand the requirement and learn how to generate individuals for the initial population. This also addresses the limitation of the LLM that struggles with high-dimensional search spaces."}, {"title": "Evolving Population Adaptively for Optimal Solutions", "content": "Based on the initial population, \u00b5MOEA adaptively evolves them to search for diverse optimal solutions to detect safety violations in the MCDL system. Each solution is encoded as an individual $P_i = {C_1, C_2, ...C_n}$, where $C_n$ represents the n-th chromosome consisting of a series of genes (a chromosome commonly corresponds to an element or object in the solution, and a gene corresponds to an action or operation). Different from existing MOEAs where the parent individuals and their chromosomes undergo the same level of mutation and crossover, \u00b5MOEA adopts adaptive selection and adaptive variations, to improve the heritability of the elite features and search efficiency."}, {"title": null, "content": "(1) For each generation, \u00b5MOEA builds improved Pareto-optimal solutions considering multiple objectives to measure the potential of solutions to expose safety violations of the MCDL system. The criticality metric is used to evaluate how close the tested MCDL system's behavior is to safety violations. The multi-objectives of \u00b5MOEA include criticality and diversity. Practically, criticality is formulated as: $f_{ci} = min_{t\u2208S_i}{SVMCDL}$, where $SV$ is the distance to safety violations. The diversity metric is used to evaluate the coverage of the test cases generated by previous generations. Practically, diversity is formulated as: $f_{di} = \\sum_{n=1}^{S_i S_j} \\frac{S_i S_j}{TD_{SiSj}}$. The fitness function is represented as:\n$S \u2190 arg_{i\u2208G} {min f_c(i), max f_d(i)}$\nwhere G represents the current generation; $f_c$ is the metric that evaluates how close the tested MCDL system's behavior is to safety violations; $f_d$ is the metric that evaluates the coverage of test cases generated by previous generations.\n(2) Based on (1), \u00b5MOEA performs adaptive selection, which selects high-fitness solutions based on the fitness evaluated by the multiple objectives as parents for variation to generate offspring, iteratively producing Pareto-optimal solutions. To determine the solutions for crossover and mutation, \u00b5MOEA varies the probabilities of crossover and mutation adaptively in response to the fitness values of the current population, which promotes high-fitness solutions having larger crossover probabilities and low-fitness solutions having larger mutation probabilities.\n(3) For the selected individuals, \u00b5MOEA performs adaptive variation: which includes adaptive crossover and adaptive mutation. It dynamically selects different types of variation operations based on the ranking of chromosomes' scores in the population on each objective, which makes elite chromosomes better spread their features into the offspring with more different chromosomes, and makes inferior chromosomes more disrupted. Below we give detailed description of these two steps."}, {"title": "Adaptive Selection", "content": "For the current population and its parents, \u00b5MOEA adaptively determines the candidate solutions to conduct crossover and mutation according to their fitness values and fitness level of the population. For the solution $s_i$ with fitness $f_i$ in the population $p_n$, $f_{max}$ and $f_{min}$ represent the maximal and minimal fitness values in $P_n$ respectively. For each population $p_n$, \u00b5MOEA calculates the average values of fitness, represented as $\\bar{f}$. The mutation probability of $s_i$ is $P_{M_i}$. For the two solutions $s_i$ and $s_j$, their crossover probability is represented as $P_{C_{i,j}}$, and $f_{i,j}$ is the larger of the fitness values.\nFor the selection of solutions for crossover, the higher the fitness value of one solution, the larger the probability of crossover between it and the other candidate solution. For $s_i$ and $s_j$, The closer $f_{i,j}$ is to $f_{max}$, the larger the $P_{C_{i,j}}$ is. The crossover probability of $s_i$ and $s_j$ is computed as follows, where $0 < k_2,k_4 \u2264 1$. If $P_{M_i} > threshold_n$, \u00b5\u039c\u039f\u0395\u0391 will conduct adaptive mutation on it.\n$PM\u2081 = min{k_2(f_{max} - f_i)/(f_{max} - \\bar{f}), k_4}$\nFor the selection of solutions for mutation, the smaller the fitness value of the solution, the higher the probability of mutating its parameters. For $s_i$, the closer $f_i$ is to $f_{min}$, the larger $P_M$ is. The mutation probability of $s_i$ is computed as follows, where $0 < k_2, k_4 \u2264 1$. If $P_{M_i} > threshold_m$, \u00b5\u039c\u039f\u0395\u0391 conduct adaptive mutation on it.\n$PM\u2081 = min{k_2(f_{max} - f_i)/(f_{max} \u2212 \\bar{f}), k_4}$,\nTo disrupt the solutions with above-average fitness values to search the spaces for the region with global optimum, and ensure that all solutions with subaverage fitness values compulsorily undergo mutation, we use a value of 0.6 for $k_1$ and $k_2$, and 1.0 for $k_3$ and $k_4$. These values can be changed according to the actual needs.\nSince the threshold of variation ($threshold_n$) has great effects on the overall variation of the population $p_n$, different from the MOEAs that pre-define a fixed value for the threshold, \u00b5MOEA computes $threshold_n$ for each population $p_n$ adaptively based on the population's overall level of fitness values. When the fitness values of the solutions in $p_n$ converge, \u00b5MOEA decreases the $threshold_n$ to facilitate the crossover and mutation to create more different offspring. Similarly, if the fitness values of the population scatter, \u00b5MOEA increases the $threshold_n$ to accelerate the convergency to find an optimal solution. The calculation of $threshold_n$ is given as follows, where $0 < c_1, m_1 \u2264 1$.\n$threshold_n = c_1(f_{max} - \\bar{f}) + m_1(\\bar{f} - f_{min})$"}, {"title": "Adaptive Variation", "content": "This includes adaptive crossover and adaptive mutation. The variation strategy has a higher probability that the generated offspring can integrate the advantages of parents in convergence and diversity.\nFor adaptive crossover, given two candidate solutions of crossover, based on the objective that the solution ranks highest in the population, the chromosome with the highest value on the objective is selected for crossover using the single-point crossover with a random chromosome in the other candidate solution.\nFor adaptive mutation, given the candidate solution of mutation, different types of mutation operations are dynamically determined based on the fitness values of chromosomes in the solution. If the chromosome has a high score on any objective in the population, \u00b5MOEA adjusts its parameters slightly (e.g., modifying the parameters of some genes on it) to better explore the surrounding space. Otherwise, \u00b5MOEA makes major changes to it, e.g., changing the combinations or sequences of genes on it, adding new actions/operations into it, replacing some genes with new actions/operations."}, {"title": "Guiding LLM to Generate Differential Seeds", "content": "For the generated solutions, \u00b5MOEA runs them to detect the safety violations in the MCDL system. During the adaptive evolutionary search, we find that as the iterations increase, the evolutionary search is prone to falling into local optimality, causing the newly generated solutions similar to those optimal solutions generated by previous generations. To solve the issue, when the evolutionary search gets stuck, \u00b5MOEA generates differential seed solutions for the next generation, which encourages the exploration of more diverse solutions.\nSpecifically, when the high-fitness solutions in t consecutive generations remain the same, \u00b5MOEA selects the optimal solutions generated by the previous iterations (collecting their chromosomes in SE), and generates the feedback prompt using Rule 1 in Table 2 (where SN represents the chromosomes of non-optimal solutions). The prompt pattern of Rule 1 is to promote the LLM to learn the characteristics of previous evolutionary iterations, and then create differential seed solutions leveraging its reasoning capability.\nConsidering that the LLM is typically accustomed to generating outputs that resemble the examples provided in the input, \u00b5MOEA examines the differences between the LLM's generated solutions to the input solutions. For the solution $s_i$, its difference from the input solutions is calculated as: $d_i = (\\sum_{x_0\u2208(S_N\u222aS_E)} ED_{s_i,x_0})/r$, where ED represents the Euclidean Distances between two solutions. For the LLM's generated solutions that do not meet the difference requirements with the previous solutions, \u00b5MOEA generates the prompt based on Rule 2 in Table 2 to make the LLM re-generate qualified differential seed solutions."}, {"title": "Evaluation", "content": "To evaluate the effectiveness and advancement of \u00b5MOEA, we apply it to search for solutions that detect safety violations of the representative MCDL system, and compare \u00b5MOEA's performance to the SOTA method."}, {"title": "Experiment Setup", "content": "MCDL System. Autonomous driving systems (ADSs) exemplify a prototypical case of multi-component deep learning (MCDL) systems, comprising various components built upon multiple deep learning models. These components and models engage in high-frequency communication and input-output interactions. Given the considerable social implications of autonomous driving technology, detecting safety violations of ADSs is of substantial importance.\nWe select the industrial full-stack ADS, Baidu Apollo (apo 2013) to evaluate the ability of \u00b5MOEA in finding safety violations of MCDL systems, due to the representativeness, practicality and advancedness. (1) Representativeness. Apollo ranks among the top 4 leading industrial ADS developers (Funicello-Paul April 1, 2024) (the other three ADSs, Waymo, Ford, and Cruise, are not released publicly). (2) Practicality. Apollo can be readily installed on vehicles for driving on public roads (Hersey April 1, 2024) (it has provided self-driving services for real vehicles (autoware-foundation Sepetem 1, 2023; Baidu April 1, 2024)). (3) Advancedness. Apollo is actively and rapidly updated (the releases of Apollo update on a weekly basis).\nTest Platform. We conducted the experiments on Ubuntu 20.04 with 500 GB memory, an Intel Core i7 CPU, and an NVIDIA GTX2080 TI. SORA-SVL (Huai 2023) (an end-to-end AV simulation platform which supports connection with Apollo) and San Francisco map are selected to execute the generated solutions. During the experiments, all modules of Apollo are turned on, including perception module, localization module, prediction module, routing module, planning module, and control module.\nEvaluation Metrics. To evaluate the effectiveness of the method in detecting diverse safety violations of the ADS, the metrics include the following aspects:\n\u2022 How many types of safety violations are detected?\n\u2022 How many solutions are generated on average to detect one safety violation?\n\u2022 How long does it take on average to detect the first safety violation and all found types of safety violations?\nTo metric how distinct the different types of detected safety violations are, we calculate the average difference among them by Euclidean Distances. For two solutions $S_i$ and $s_j$, the calculation of Euclidean Distance, $ED_{s_i,s_j}$ is given as follows:\n$ED_{S_iS_j} = \\frac{1}{\u03b1} \\sum_{s=1}^{\u03b1} \\sqrt{ \\sum_{k=0}^{m} (x_{s_i^n.k} - x_{s_r^n.k})^2 + (y_{s_i^n.k} - y_{s_r^n.k})^2 }$\n$TD_{S_iS_j} = \\sqrt{ \\sum_{k=0}^{m} (x_{s_i^n.k} - x_{s_r^n.k})^2 + (y_{s_i^n.k} - y_{s_r^n.k})^2 }$\nThe larger the distance, the more different the safety-violation types. $s$ represents the n-th chromosome in $s_i$. $|s_i|$ and $|s_j|$ represent the number of chromosomes in $s_i$ and $s_j$ respectively. $(x_{s^n.k}, y_{s^n.k})$ represents the position of k-th gene of the n-th chromosome in $s_i$. a represents the minimal number of genes in the two chromosomes $s^n_i$ and $s^n_r$."}, {"title": "Effectivenss of \u00b5MOEA", "content": "We run \u00b5MOEA for 24 hours to detect safety violations of Apollo. For the found safety violations, we analyze their root causes by locating the incorrect operations of modules in Apollo. Furthermore, based on the analysis, we classify the found safety violations into distinct types. To account for the randomness, the experiments are repeated five times and the average results are provided as follows.\nFor each run, on average, 3756 solutions (min 3346 and max 4015) are generated by \u00b5MOEA and 313 (min 292 and max 355) out of them have safety violations of Apollo. \u00b5MOEA can detect 10 distinct types of safety violations of Apollo, which are all revealed in the first 14 hours.\nTo evaluate the benefit of the LLM-based initial population creation and differential seed generation, we conduct the ablation experiments of \u00b5MOEA. Two variant versions \u00b5MOEAr and \u00b5MOEAn are implemented. \u00b5MOEAr creates the initial population by random initialization of solutions, and \u00b5MOEAn evolves the solutions without differential seeds. We run \u00b5MOEA, \u00b5MOEAr and \u00b5MOEAn for the same amount of time, and compare their effectiveness and efficiency. The results are shown as Table 3 (where SV is the abbreviation for safety violation) and Figure 2.\n\u00b5MOEAr can detect 10 types of safety violations of Apollo, and \u00b5MOEAn can detect 6 types of safety violations of Apollo. On average, in the 24-hour run, \u00b5MOEAr generates 3922 solutions (min 3853 and max 4014), and 308 of them (min 289 and max 315) detect safety violations of Apollo. For \u00b5MOEAn, it generates 3352 solutions (min 3099 and max 3480), and 138 of them (min 121 and max 150) detect safety violations of Apollo.\nTable 3 shows that \u00b5MOEAr takes the most time to detect the first safety violation of Apollo. It can be seen from Figure 2(a) that in early-generation solutions, the number of safety violations detected by \u00b5MOEAr is the least. We can conclude that \u00b5MOEA's creation of initial population creation helps generate better initial population than random initialization.\nFor \u00b5MOEAn, Table 3 shows that the number of safety violation types detected by it is fewer than \u00b5MOEA and \u00b5MOEAr, and it takes more time to detect all found types of safety violations. The average Euclidean Distance across the detected different safety violation types of \u00b5MOEA is 81.10 meters, and that of \u00b5MOEAr is 69.72 meters. From Figure 2(b), we can see that as the iterations of evolutionary search increase, the growth of safety violations detected by \u00b5MOEAn is slowest. We can conclude that the differential seeds of \u00b5MOEA can help solve the local optimal and detect more diverse types of safety violations.\nIt's worth noting that, during the iterations of \u00b5MOEA and \u00b5MOEAr, after a few types of safety violations have been found, the detection of safety violations grows faster. We analyze that it benefits from the feedback-based differential seed generation. As the evolutionary iterations increase, the solutions of feedback increase. \u00b5MOEA can better learn more experience about the characteristics of optimal solutions, which can improve the quality of the generated differential seed solutions."}, {"title": "Advancement of \u00b5MOEA", "content": "We evaluate \u00b5MOEA in comparison to the SOTA method that uses the multi-objective genetic algorithm (NSGA-II) to detect safety violations of Apollo: MOSAT (Tian et al. 2022a). MOSAT generates the first population by randomly initialized individuals. Based on them, MOSAT uses multi-objective genetic algorithm to csearch for optimal and diverse solutions. The individuals are evaluated by multi-objective fitness function, which contains the elitism and diversity. MOSAT determines crossover probability and mutation probability of parent individuals by random rates and the fixed variation threshold. The variation operators that are defined to manipulate individuals include uniform crossover and mutation.\nWe run MOSAT on the same road in San Francisco as \u00b5MOEA. For the sake of fairness, in each 24-hour running, the number of individuals in each generation of MOSAT and \u00b5MOEA are the same. The comparison results of \u00b5MOEA and MOSAT are shown as Table 4.\nIn each 24-hour running, MOSAT can find 6 types of safety violations of Apollo. On average, MOSAT generates 3541 solutions (min 3208 and max 3719), and 57 (min 49 and max 61) out of them detect safety violations of Apollo. \u00b5MOEA detects 10 distinct types of safety violations of Apollo and all of them are detected in the first 14 hours. MOSAT detects 6 types of safety violations of Apollo and all of them are detected in the first 19 hours. The average Euclidean Distance across the detected different safety violation types of \u00b5MOEA is 81.10 meters, and that of \u00b5MOEAr is 64.70 meters. Moreover, the 6 types of safety violations are all revealed in the 10 types of safety violation detected by \u00b5MOEA. It takes \u00b5MOEA less time to detect the first safety violation of Apollo than MOSAT. Therefore, compared with MOSAT, \u00b5MOEA can detect more types of safety violations of Apollo in a shorter time. On average, one safety violation of Apollo occurs in 12 solutions generated by \u00b5MOEA. MOSAT generates 62 solutions to find one safety violation of Apollo. The safety-violation exposure frequency in \u00b5MOEA is higher, which shows that \u00b5MOEA can efficiently detect more safety violations of Apollo. The comparison results show that \u00b5MOEA can more effectively detect more types of safety violations in the MCDL system."}, {"title": "Related Work", "content": "Recent advancements in large language models (LLMs) have demonstrated their potential in a variety of tasks (Ji et al. 2024), including quantitative reasoning. LLMs have tremendous capabilities in solving complex tasks, from quantitative reasoning to understanding natural language (Romera-Paredes et al. 2024). Early models such as GPT-3 have been shown to generate coherent text and perform well in tasks that require contextual understanding, but they often struggle with more complex reasoning tasks, particularly those that involve multi-step logic or abstract thinking.\nTo address these limitations, researchers have proposed various approaches to enhance the quantitative reasoning capabilities of LLMs. One notable method is the integration of external knowledge bases and joint multi-cues (Mann et al. 2020; Ji et al. 2024), which has been shown to improve the accuracy and depth of reasoning by providing models with additional contextual information. Another approach is the use of prompt engineering (Reynolds and McDonell 2021), where carefully designed prompts guide the model towards better reasoning outcomes. Furthermore, there has been growing interest in the application of LLMs to quantitative reasoning tasks in specific domains, such as mathematical problem-solving, where domain-specific training data can significantly enhance the model performance."}, {"title": "Multi-Objective Evolutionary Algorithms", "content": "Multi-objective evolutionary algorithms (MOEAs) have become a prominent tool for solving multi-objective optimization problems due to their ability to find a set of Pareto-optimal solutions in a single run (Fonseca, Fleming et al. 1993; Ishibuchi, Tsukamoto, and Nojima 2008; Zitzler, Laumanns, and Thiele 2001). Populations in MOEAs generally evolve through high-performing candidate solutions being mutated or recombined to form the next generation.\nOne of the most typical MOEAs is the Non-dominated Sorting Genetic Algorithm II (NSGA-II) (Zitzler and Thiele 1999; Deb et al. 2002), which introduced key innovations such as fast non-dominated sorting and crowding distance mechanisms to find the optimal solutions and maintain solution diversity. NSGA-II has since become a benchmark for comparing other MOEAs due to its balance between computational efficiency and solution quality, which has led to a better understanding of the trade-offs involved in using MOEAs for different types of multi-objective problems"}, {"title": "Conclusion and Discussion", "content": "In this paper, we propose \u00b5MOEA, an LLM-empowered adaptive evolutionary search method for MCDL systems. Different from existing MOEAs that detect safety violations of MCDL systems starting by randomly initialized population, \u00b5MOEA leverages LLM's ability in language understanding and quantitative reasoning to better comprehend the evolutionary task and create high-quality solutions for the initial population. Based on these, \u00b5MOEA adopts an adaptive multi-objective evolutionary algorithm to efficiently search for optimal and diverse solutions. To navigate the search away from the local optima, when the evolutionary process gets stuck, \u00b5MOEA feedbacks the characteristics of iterations into the LLM to facilitate the learning of evolutionary experience and population characteristics. Then it promotes the LLM to generating differential seed solutions for the next generation. We uses \u00b5MOEA to detect safety violations of a representative MCDL system, industrial autonomous driving system. Furthermore, we evaluate the performance of \u00b5MOEA by ablation experiments and compare it with the SOTA method that uses multi-objective genetic algorithm to search solutions for diverse safety violations of the system. The experimental results show that \u00b5MOEA can effectively and efficiently detect safety violations of MCDL systems and surpass the SOTA method.\nTo leverage the LLM's capability, \u00b5MOEA inputs the prompt into GPT-4 by sending the API request, which brings extra time cost for waiting the model output. Moreover, the LLM has a limit on the number of input characters, which limits the potential capability of \u00b5MOEA due to the limited number of samples for context learning and thought chain. Currently, \u00b5MOEA generates the feedback prompt incrementally and updates the early iterations with latest iterations when the characters of the prompt exceeds the limit.\nAs future work, we aim to employ a local LLM to reduce the time cost for request, and intelligently select the input examples for the feedback, with the potential to further improve the performance and ability of \u00b5MOEA. However, there are two main economic implications for deploying \u00b5MOEA in the real world: (1) operational costs of remote LLM access; and (2) infrastructure costs of local LLM deployment. For MCDL systems with infrequent updates or without complicated test requirements, remote access to GPT may be cost-effective. For defect detection tasks, local training and deployment of an LLM on the target system is generally more economical."}]}