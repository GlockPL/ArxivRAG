{"title": "FuzzyLight: A Robust Two-Stage Fuzzy Approach for Traffic Signal Control Works in Real Cities", "authors": ["Mingyuan Li", "Jiahao Wang", "Bo Du", "Jun Shen", "Qiang Wu"], "abstract": "Effective traffic signal control (TSC) is crucial in mitigating urban congestion and reducing emissions. Recently, reinforcement learning (RL) has been the research trend for TSC. However, existing RL algorithms face several real-world challenges that hinder their practical deployment in TSC: (1) Sensor accuracy deteriorates with increased sensor detection range, and data transmission is prone to noise, potentially resulting in unsafe TSC decisions. (2) During the training of online RL, interactions with the environment could be unstable, potentially leading to inappropriate traffic signal phase (TSP) selection and traffic congestion. (3) Most current TSC algorithms focus only on TSP decisions, overlooking the critical aspect of phase duration, affecting safety and efficiency. To overcome these challenges, we propose a robust two-stage fuzzy approach called FuzzyLight, which integrates compressed sensing and RL for TSC deployment. FuzzyLight offers several key contributions: (1) It employs fuzzy logic and compressed sensing to address sensor noise and enhances the efficiency of TSP decisions. (2) It maintains stable performance during training and combines fuzzy logic with RL to generate precise phases. (3) It works in real cities across 22 intersections and demonstrates superior performance in both real-world and simulated environments. Experimental results indicate that FuzzyLight enhances traffic efficiency by 48% compared to expert-designed timings in the real world. Furthermore, it achieves state-of-the-art (SOTA) performance in simulated environments using six real-world datasets with transmission noise.", "sections": [{"title": "1 Introduction", "content": "Motivations. Real-time adaptive traffic signal control (TSC) enhances urban transportation network efficiency [30, 34, 35, 46]. In real-world TSC deployments (as shown in Figure 1), existing solutions [22] utilize terminal sensing devices like radars and cameras to capture real-time traffic data. These data are then processed and transmitted to the TSC algorithm, which determines the appropriate traffic signal phase (TSP) or phase duration. However, the transmission process is vulnerable to noise interference from various sources, including adverse weather conditions [32] and network factors [9]. Noise-affected data can lead to incorrect TSP or phase duration, potentially causing traffic congestion and safety hazards [12, 29].\nMost current reinforcement learning (RL) TSC methods rely on online learning, which requires a trial-and-error process with neural networks to determine the appropriate TSP. This dependence on real-time interaction during training could result in inefficient phase selections, which exacerbates traffic congestion. Furthermore, most RL-based methods focus solely on TSP selection without specifying phase duration. Generating appropriate phase duration is crucial for enhancing driver anticipation, preventing sudden road incidents, and improving TSC safety [23]. It also allows better adaptation to current road conditions, thus increasing vehicle throughput [44].\nChallenges. Recent RL advances have enabled TSC algorithms to surpass traditional rule-based methods. However, existing RL-based TSC algorithms face several real-world challenges that hinder their practical deployment:\n(1) Sensor accuracy deteriorates with increased detection range, and data transmission is prone to noise, potentially resulting in poor TSC performance. Although compressed sensing technology has shown promise in noise suppression through sparse representation and regularization techniques [3, 11, 21], it faces limitations in TSC applications. Real-time traffic flow data often lacks the necessary sparsity, and sensors have limited detection ranges [39]. Expanding detection areas significantly increases deployment costs. Notably, the optimal TSC performance is achieved using vehicle information within a specific range [38].\n(2) The training process of RL requires extensive interaction with the intersection environment, leading to inefficiencies in training and limited generalization to diverse traffic scenarios. Traditional RL-based TSC algorithms often need millions of interactions with the environment to converge [36], which is impractical for real-world deployment. Moreover, these algorithms typically struggle to generalize across different intersection layouts and traffic patterns [5]. Recent work has attempted to address these issues through transfer learning [26] and meta-learning [41] approaches, but challenges remain in achieving efficient training and robust generalization across a wide range of urban traffic conditions.\n(3) Most current TSC algorithms focus exclusively on TSP decision, overlooking the critical aspect of phase duration. This oversight affects both driver and pedestrian efficiency. Existing online TSC DRL algorithms primarily output TSP decisions. Methods for determining phase duration often rely on preset configurations based on expert experience [24, 42, 43, 45], failing to adjust green light durations based on real-time traffic data. These approaches can result in underutilized or insufficient green light times, leading to idle periods that reduce traffic efficiency or cause congestion and delays.\nContributions. In this paper, we propose FuzzyLight, a robust two-stage fuzzy approach that integrates compressed sensing and RL for TSC. FuzzyLight leverages fuzzy logic [40] to handle uncertainty and imprecision in TSC. Integrating multiple factors (e.g., traffic flow and expert knowledge) and employing diverse rules and fuzzification functions offer a comprehensive solution to address various TSC challenges efficiently. Our main contributions are summarized as following:"}, {"title": "2 Background", "content": "2.1 Traffic Signal Control\nA traffic network comprises multiple intersections, each with various lanes facilitating vehicle movement across the intersection, including turning left, proceeding straight, or turning right.\nAn incoming lane is defined as a lane where vehicles enter an intersection, while an outgoing lane facilitates the exit of vehicles. The set of incoming lanes at intersection i is denoted as $L_{in}$."}, {"title": "2.2 Fuzzy Logic", "content": "Fuzzy logic is a reasoning method based on fuzzy set theory designed to handle uncertainty and vagueness in information [10, 17]. Unlike classical binary logic, fuzzy logic allows elements in a set to have partial membership degrees from membership functions, rather than just zeros or ones. By employing fuzzy logic, we can better capture the fuzzy and vague relationships and rules in complex systems, making it an effective tool for dealing with uncertainty in real-world environments.\nThe fuzzyification technique involves transforming input into fuzzy sets $F_i$ and $U_i$, it can be a neural network or any other membership function [1, 2]. Simple inputs refer to the information obtained from the traffic network, such as queue lengths.\nReasoning Engine pertains to the determination of which specific fuzzy rule is to be executed in a given context. Fuzzy Rules [14] contain a set of rules in the form of IF-THEN conditions:\nFor rules = 1, 2, ..., N :\nif $x_1 \\in F_1, x_2 \\in F_2$ ...\nThen y is $U_i$, i = 1, .., N\nwhere x and y are inputs and outputs, F and U denote fuzzy sets.\nDefuzzification is a step in fuzzy logic that transforms the fuzzy set into accurate output. It performs the defuzzification process in which the membership relations of fuzzy sets are mapped to actual values, converting the fuzzy output into a clear, concrete, and non-fuzzy result for subsequent decision or control operations."}, {"title": "2.3 Compressed Sensing", "content": "Compressed Sensing [11] is an advanced signal processing technique that enables the reconstruction of signals from a small number of measurements. The principles of compressed sensing can be represented by the following equation:\n$y = Ax + \\eta$ (1)\nwhere $A \\in R^{m \\times n}$ is the observation matrix, y is the observed signal, $x \\in R^n$ is the original signal, and $\\eta \\in R^m$ represents the noise interference. Given the observed signal y and the observation matrix A, we aim to recover the original signal x with far fewer observations than required by the Nyquist sampling theorem. To solve this underdetermined problem, we assume that x is sparse. This transforms the optimization problem into the following equation:\n$\\min ||x||_1$ subject to $||y \u2013 Ax||_2 \\le \\delta$ (2)\nAnd d is the upper limit of noise estimation. Using the Basis Pursuit Denoising (BPDN) algorithm [28], we can recover the original signal $\\hat{x}$ and allow some error 8 between $\\hat{x}$ and x. This approach leverages the sparsity of x to find the solution that best fits the observed data y while minimizing the impact of noise n."}, {"title": "2.4 Reinforement Learning", "content": "The Markov decision process (MDP) is defined as M = (S, A, P, r, \u03b3), where S denotes a set of states, A is a set of actions, P defines a transition probability, r is a reward function, and y (\u03b3 \u2208 [0, 1]) is a discount factor. The RL algorithm usually learns a policy \u03c0 online for MDP to determine the best action a (a \u2208 A) considering the given state s (s \u2208 S). The objective of RL is to maximize the expected return $G_t$ at time t:\n$G_t = \\sum_{t=0}^{+\\infty} \\gamma r_t$ (3)"}, {"title": "3 Methods", "content": "In this section, we elucidate the structure and functionality of our proposed FuzzyLight model, which is segmented into two distinct stages: Fuzzy Phase Inference and Fuzzy Duration Inference. These stages are designed to generate the TSP and their respective durations (as shown in Figure 3)."}, {"title": "3.1 Fuzzy Phase Inference", "content": "The Fuzzy Phase Inference stage employs compressed sensing techniques to process data into a sparse matrix format and subsequently defuzzifies it to extract accurate traffic data (vehicle information). The system uses fuzzy logic rules to determine the optimal TSP for the current traffic conditions.\n3.1.1 Fuzzification: membership function with compressed sensing. Initially, to meet the requirements of compressed sensing, a negotiation between the sensor and the traffic signal controller establishes a random matrix $A \\in R^{z \\times n}$. Following this, we construct the sensor data into a sparse matrix $X \\in R^{n \\times m}$ to fulfill the sparsity condition essential for effective compressed sensing. It represents the number of waiting vehicles in all lanes, where n represents the number of entry lanes at the intersection Lin, and $m = ER_{slice}$. In this matrix, $slice = v_i + safe_{er}$, where $v_i$ is the vehicle queue length, enhancing the sparsity, and $safe_{er}$ is the safety distance between vehicles. The ER denotes the effective observation range used to calibrate the sensor deployment, optimizing cost and performance.\nNext, the distance $d_i$ of each vehicle in lane i from the stop line is measured using sensors (e.g., radar, cameras). These measurements are used to populate the sparse matrix as per the membership functions:\n$X [i, j] = \\begin{cases}\n1 &\\text{if } j < \\frac{d_i}{slice} < j + 1, \\\\\n0 & \\text{else}\n\\end{cases}$ (4)\nThe processed data y = AX is transmitted from the sensors to the traffic signal controller. During transmission, noise $\\eta \\in R^{z \\times m}$ can interfere, resulting in y' = AX + \u03b7. Compressed sensing is applied to reconstruct the original data X according to Equation 2.\n3.1.2 Defuzzification: denoising function and fuzzy rules for TSP. Subsequently, a defuzzification function is applied to obtain precise vehicle information:\n$X_{defuzi} = round(max(\\hat{X}, 0))$ (5)\nwhere round signifies rounding up to the nearest integer. Based on $X_{defuzi}$, the number of waiting vehicles for each phase $WV_{p_i}$ is calculated, and fuzzy rules (detailed in Algorithm 1 lines 7-9) are used to determine the phase $P_{dynamic}$ corresponding to the largest number of waiting vehicles.\nThe specific procedures are detailed further in Algorithm 1."}, {"title": "3.2 Fuzzy Duration Inference", "content": "Fuzzy Duration Inference is also guided by fuzzy logic and RL process to calculate the phase duration. Here, we design a neural network fuzzy membership function to fuzzify the number of waiting vehicles in segments to the [0,1] interval. Then, the defuzzification function and RL process are designed to output the precise phase duration.\n3.2.1 Fuzzification: Neural network fuzzy membership function (NNFM). Lane Embedding Layer: First, we extract the number of vehicles of different segments (seg = k * slice) of each traffic movement by recovered vehicle matrix X. Where k defines the length of the segment within each lane. To allow more capacity in feature extraction, each segment of the lane is embedded from one-dimensional into a higher dimensional latent space using a layer of multi-layer perception (MLP):\n$h_{embed}(l) = \\sigma(X_e * W_e + b_e)$ (6)\nwhere $X_e \\in R^{m \\times n}$ is lane embedding matrix and $X_e = x_i(l)$. One row ($x_i, i=1, 2, ..., m$) expresses the number of waiting vehicles in the segment of each lane. $W_e \\in R^{n \\times d}$ and $b_e \\in R^{m \\times d}$ are weight matrix and bias vector to learn, respectively. \u03c3 is the sigmoid function.\nMultihead Attention Layer: To focus on information about vehicles in different segments. A multi-head-attention (MHA) layer is used to understand the impact of different segments:\n$h_{con}(l) = Concat(h_{embed}(l_j), h_{embed}(l_k)), l_j, l_k \\in L_{in}$ (7)\n$\\hat{h}_{att}(p) = Mean(MHA(h_{con}(l_j), h_{con}(l_j))),l_j \\in L_{in}$ (8)\nwhere $l_j, l_k$ are the lanes corresponding to the phase pair, and $L_{in}$ is the set of participating entering lanes.\nLane Fusion Layer: To learn the segment information of the lanes corresponding to different phase pairs. We concat the lane attention information of each phase pair and multiply it with the one hot phase vector:\n$h_{fusion}(p) = Multiply(P_{onehot}, Concat(\\hat{h}_{att}(p_1), \\hat{h}_{att}(p_2), .., \\hat{h}_{att}(p_i))), p_i \\in P$ (9)\nwhere $P_{onehot} \\in R^{1 \\times n}$ is phase output from fuzzy phase inference and n is the number of phase.\nMultilayer Perceptron (MLP): Then, using two linear layers and Relu function to output the embedding hidden layer:\n$h_{layer_1}(p) = relu(h_{fusion}(p) * W_c + b_c),$ (10)\n$h_{final}(p) = relu(h_{layer_1}(p) * W_d + b_d)$\nFinally, using the sigmoid function to blur the input features into the [0,1] interval:\n$h_{fuzzi}(p) = sigmoid(h_{final}(p))$ (11)\n3.2.2 Defuzzification: TSP duration defuzzification function and RL process. Next, we design a new defuzzification function to output precise phase duration:\n$t_{duration} = clip (h_{fuzzi} * refer_{duration} + \\epsilon, low, high)$ (12)\nWhere the OU noise [25] \u0454 is used for enhancing phase duration exploration. The $refer_{duration}$ is calculated by maximum lane length MaxLaneLength divided by maximum lane speed MaxLaneSpeed:\n$refer_{duration} = \\frac{MaxLaneLength}{MaxLaneSpeed}$\nWe clip the phase duration to a maximum and minimum value to guarantee safety. To ensure pedestrian safety, set the pedestrian crossing time as the minimum duration of green lights low.\nTo output the phase duration according to the real-time traffic flow more accurately, we design the RL module based on the Deep Deterministic Policy Gradient(DDPG) [25] to update the fuzzy neural network \u03bc\u03b8. The actor and critic networks have the same hidden layers, but the final MLP layer differs between them. The actor network parameters are updated by the following equation, N is the sample size:\n$\\nabla_\\theta J \\approx \\frac{1}{N} \\sum_{i=1}^{N} \\nabla_\\theta Q(s_i, \\mu_\\theta(s_i))|_{h_{fuzzi}=\\mu_\\theta(s_i)}.$ (13)\nThe critic network parameters are updated by the following equation, $s_{i+1}$ is the next state observed from the environment:\n$L_{critic} = \\frac{1}{N} \\sum_{i=1}^{N}(L_i-Q_w(s_i, h_{fuzzi}))^2$ (14)\n$L_i = r_i +\\gamma Q_{w-}(s_{i+1}, \\mu_{\\theta-}(s_{i+1})),$ (15)\nBoth the actor and critic networks are updated by function:\n$w^{-} = \\tau w + (1-\\tau)w^{-}$\n$\\theta = \\tau \\theta + (1-\\tau)\\theta^{-}$"}, {"title": "4 Experiments", "content": "We conduct extensive experiments in real-world and simulated environments. Moreover, we demonstrate the performance of FuzzyLight on a scalable and generalizable platform for city-level TSC and heterogeneous intersections.\n4.1 Environments\nWe have two types of environments for experiments: real-world environment and simulated environment.\nReal-world environment:\n\u2022 City1 dataset: The road network has 4 (2 x 2) intersections. Each intersection is four-way, with two 400-meter (East-West) and two 800-meter (South-North) roads.\n\u2022 City2 dataset: The road network has 18 (1 x 14 and 1 x 4) intersections. Each intersection has three lanes in the north-south direction. In the east-west direction, the number of lanes is uneven, with some having 2 or 3 lanes. The lane lengths vary, being either 400 or 800 meters. The intersections are either four-way or three-way junctions.\nSimulated environment:\n\u2022 JiNan datasets: The road network has 12 (3 \u00d7 4) intersections. Each intersection is four-way, with two 400-meter (East-West) roads and two 800-meter (South-North) roads.\n\u2022 HangZhou datasets: The road network has 16 (4 \u00d7 4) intersections. Each intersection is four-way, with two 800-meter (East-West) roads and two 600-meter (South-North) roads."}, {"title": "4.2 Evaluation Metrics and Settings", "content": "We use: (1) the number of stops and throughput as metrics for real-world deployment; and (2) average travel time (ATT) [7, 13] as evaluation metrics for the simulated environment.\nEach green signal is followed by a three-second yellow signal and a two-second all-red time to clear the vehicles at an intersection.\nMore details on experiment settings in Appendix A.\n4.3 Compared Methods\nFor real-world deployment, we use the current expert time duration as the compared method. We conduct a three-month experiments, calculating the number of stops and throughput.\nFor simulated environment, we use classic traditional and latest DRL methods as the baselines. We train these DRL Methods 50 rounds for each model and each round is a 60-minute simulation. We compute results as the average and variance of the last ten testing episodes. A brief introduction to these methods is shown below."}, {"title": "4.4 Results", "content": "In this section, we analyze the results of the FuzzyLight on different real-world and simulation environments.\n4.4.1 Real-world results. We conducted a three-month experiment with FuzzyLight in the real world, spanning two cities (City1 and City2) and covering 22 intersections. Compared to the expert-determined time durations over one month, the results are shown in Figure 4.. We collect data on the average number of vehicle stops and throughput for all intersections during three different time periods: peak hours (including morning and evening peak hours for three hours), normal hours (daytime for six hours), and off-peak hours (other times). The results show that during peak hours, the throughput increases by 36% in City1 and 24% in City2, and the number of stops decreases by 46% in City1 and 38% in City2. During normal hours, the throughput increases by 22% in City1 and 37% in City2, and the number of stops decreases by 11% in City1 and 4% in City2. During off-peak hours, the throughput increases by 3% in City1 and 5% in City2, and the number of stops decreases by 48% in City1 and 50% in City2. These experiment results indicate that using our proposed FuzzyLight significantly improves traffic efficiency in both cities across different time periods compared to expert time duration.\nThe significant improvement during peak hours suggests that FuzzyLight effectively reduces congestion and improves throughput in high traffic volumes by optimizing the phase and duration of the signal. This could be due to its ability to adapt dynamically to fluctuating traffic conditions and prioritize movements that alleviate congestion. While improvements during normal and off-peak hours are also notable, the smaller relative gains compared to peak hours indicate that FuzzyLight is particularly beneficial when traffic demand is high and complex. During less busy times, the algorithm still enhances efficiency, but the impact is naturally less dramatic due to lower initial congestion levels."}, {"title": "4.4.2 Simulated results.", "content": "We simulate the performance of FuzzyLight in two conditions: the presence of transmission noise and noise free.\nPerformance with noise: As shown in Table 1, FuzzyLight outperforms all other methods even under the maximum noise scale and performs close to noise-free performance. Additionally, the visualization of compressed sensing recovery as shown in Figure 6 demonstrates that our algorithm effectively recovers data from noise interference and validates its robustness.\nPerformance without noise: In the noise free of transmission, as shown in Table 2, FuzzyLight outperforms other methods across three datasets, achieving state-of-the-art (SOTA) performance. Additionally, its performance on other datasets is close to existing SOTA methods, demonstrating that FuzzyLight effectively reduces the average travel time of vehicles.\n4.4.3 Training performance. We examine the training stability of FuzzyLight to validate if it could deploy to real world environment. As shown in Figure 7, FuzzyLight maintains high performance from the early stages of training due to the selection of appropriate phases in phase inference and the constraints on maximum and minimum green light duration in duration inference. Other RL-based phase selection methods cannot be applied in the real world due to the increased traffic congestion risk during their early trial-and-error training phase. This result guide our real-world deployment.\n4.4.4 Generalization performance. For the TSC problem, model generalization is crucial. We transfer a model trained on one dataset to another dataset to achieve better performance. We conduct transfer experiments on five datasets to verify the model's generalization ability. The following metric is used to evaluate the model's transferability: $U_{transfer} = \\frac{t_{transfer}}{t_{train}}$. The transfer results are shown in Figure 5. For $v_{transfer}$, a smaller value is better. We observe that the JiNan and HangZhou datasets exhibit high transferability.\n4.5 Ablation Experiments\nTo verify the effectiveness of the fuzzy phase and fuzzy duration inference, we conduct comparison experiments. We use FuzzyLight-Cycle (cycle phase selection and duration inference) and FuzzyLight-Phase (fuzzy rules phase selection and fixed duration) for comparison, the result is shown in Figure 9(a). After using both fuzzy phase and fuzzy duration inference, the ATT improves about 3. 7% compared to FuzzyLight-Cycle and FuzzyLight-Phase. It demonstrates the effectiveness of the two-stage process.\nTo validate the effectiveness of the fuzzy logical in compressed sensing, we conduct a comparison without using fuzzy logical (w/o). As shown in Figure 9(b), incorporating the fuzzy logical results in significant performance improvement under transmission noise across five datasets and it confirms the effectiveness of FuzzyLight."}, {"title": "5 Discussion", "content": "(1) Why not use other SOTA RL algorithms in the real world?\nThe deployment of current SOTA RL algorithms in real-world scenarios is hindered by issues like weather and network conditions that introduce data noise. Furthermore, as shown in Figure 7, training these RL algorithms in the real world is unstable and cause congestion. To the best of our knowledge, this is the first deployment of the TSC algorithm in real cities. Consequently, city traffic management authorities mandate that the algorithms demonstrate robust noise resistance. Regarding safety, the authorities have only allowed us to compare our algorithm with the existing expert time duration.\n(2) The RL process still needs to interact with the environment during the fuzzy duration inference process. Is this conducive to deployment?\nFuzzyLight employs a two-stage process that innovatively combines fuzzy logic with compressed sensing. The first stage ensures data integrity and reliability by using fuzzy rules to determine appropriate signal phases based on traffic flow dynamics without trial-error process. This initial process reduces the need for multiple interactions, facilitating faster setup and deployment. Despite these advancements, the fuzzy duration inference process still requires some level of interaction with the environment. However, integrating RL with fuzzy logic has been shown to significantly accelerate the convergence of the training process (as illustrated in Figure 7).\n(3) How to set the refer duration and effective range (ER) for the FuzzyLight?\nTo set the reference duration in FuzzyLight, we experiment with values ranging from 30 to 50 seconds across various training datasets to assess their impact on ATT. As shown in Figure 8(a), selecting a refer duration close to the mean duration of actual traffic flows is appropriate. The impact of different ER values is also evaluated, particularly in how FuzzyLight processes different state variables like lane vehicle count and lane queue count. As shown in Figures 8(b) and 8(c), reducing ER leads to a decrease in the ATT. This decline is mainly due to the fact that the reduced data does not fully capture intersection conditions, highlighting the importance of a properly set ER to ensure comprehensive data utilization and optimal algorithm performance.\n(4) What are the differences between the real world and the simulated world?\nIn the real world, factors such as weather and network transmission could lead to sensor delays and disconnections. Additionally, we have implemented safety modules for pedestrians and cyclists to ensure they have the shortest green light time when crossing the street. However, the behavior of violating drivers is still constrained by traffic laws. Furthermore, traffic throughput varies at different times, and traffic flow changes could be instantaneous. These sudden fluctuations could lead to intersection overflow problems, where vehicles queue at the intersection waiting to exit. These issues distinguish the real world from simulation-based environments.\n(5) How does the performance vary under different levels and types of noise?\nWe have unintentionally exposed the sensors within Gaussian and U-rand noise in different noise levels, the result is shown in Table 3 and Table 4. It can be seen that the ATT performance remains good at a max scale of 100% and below. As the noise scale increases, the ATT performance gradually declines. These experiments help illustrate how our model adapts to different noise levels, enhancing its robustness and applicability to real-world environments."}, {"title": "6 Conclusion", "content": "In this paper, we propose FuzzyLight, a novel two-stage approach that outputs signal phase decisions and corresponding phase durations simultaneously. FuzzyLight leverages compressed sensing technology to effectively mitigate the impact of noise interference during transmission, showcasing robustness and reliability. Meanwhile, it integrates fuzzy logic with deep reinforcement learning to determine optimal phase durations. Our experimental results also confirm that FuzzyLight achieves state-of-the-art performance in real-world and simulated environments, maintaining high performance even under conditions of transmission noise. In the future, we aim to optimize our method to further enhance the effectiveness and efficiency of TSC systems in practical applications."}, {"title": "6 Conclusion", "content": "First, we use the following formula to represent the throughput\n        rate of an intersection:\n\n\n\n        \\\n\n\n        where represents the distance of the last vehicle\n        from intersections and v denotes the average speed of the vehicle.\n\n\n        \\\n\n\n        where is the lane corresponding the phase pair. We assume\n        that the last car through the intersection time is\n        \\\n\n\n        if then. Our FuzzyLight model can\n        learn the effect of different parts of the road on the phase time, set\n        the appropriate phase time for different phases and improve the\n        throughput rate of the intersection.\n\n\n        \\\n\n\n        and compared to the previous E-W phase in 4s throughput rate of\n        1.25 improved by 40%."}]}