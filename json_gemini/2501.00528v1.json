{"title": "PyMilo: A Python Library for ML I/O", "authors": ["AmirHosein Rostami", "Sepand Haghighi", "Sadra Sabouri", "Alireza Zolanvari"], "abstract": "PyMilo is an open-source Python package that addresses the limitations of existing Machine Learning (ML) model storage formats by providing a transparent, reliable, and safe method for exporting and deploying trained models. Current formats, such as pickle and other binary formats, have significant problems, such as reliability, safety, and transparency issues. In contrast, PyMilo serializes ML models in a transparent non-executable format, enabling straightforward and safe model exchange, while also facilitating the deserialization and deployment of exported models in production environments. This package aims to provide a seamless, end-to-end solution for the exportation and importation of pre-trained ML models, which simplifies the model development and deployment pipeline.", "sections": [{"title": "I. INTRODUCTION", "content": "The Python programming language has emerged as a top choice for machine learning applications, owing to its simplicity, flexibility, and vast community support [1]. However, despite the numerous tools and libraries developed by the Python community, a significant challenge persists: sharing and deploying trained machine learning models in a secure and transparent manner. This concern is particularly pressing in high-stakes domains such as healthcare, where model integrity and accountability are essential [2]. Lack of transparency and safety in model sharing can have severe consequences, including the potential for malicious code injection and data breaches.\nThe widespread use of binary formats for saving machine learning models [3]\u2013[5], such as pickle and joblib [5], has introduced significant security risks, as these formats are not human-readable and can be exploited by malicious actors [6]. Furthermore, tools such as ONNX and PMML convert the original model into alternative representations with structural differences. This conversion enhances compatibility across diverse environments, but it also introduces new challenges, such as performance degradation.\nTo address these concerns, the machine learning community requires an end-to-end transparent way of communicating and verifying model information. This necessitates the ability to inspect model parameters, which involves machine learning models and their components to be transparently serializable. Here in this paper, we introduce a transparent, non-executable, safe and human-readable approach for serializing and deserializing machine learning models. Our approach is implemented as a Python package named PyMilo\u00b9. PyMilo serves as a transporter that serializes trained models generated from machine learning frameworks into a transparent, nonexecutable, safe and human-readable formats, like JSON, and deserializes it back into the exact same original machine learning model (Figure 1). PyMilo transportation is completely end-to-end, providing a standalone process from exporting to importing machine learning models. \"End-to-end\" here refers to a full process from exporting the trained model to importing and retrieving the same original machine learning model. This approach enables the transportation of machine learning models to any target device, where they can be executed in inference mode without requiring additional dependencies. This provides a general solution for creating human-readable, transparent, and safe machine learning models that can be easily shared, inspected, and deployed. PyMilo benefits a wide range of stakeholders, including machine learning engineers, data scientists, and AI practitioners, by facilitating the development of more transparent and accountable AI systems. Furthermore, researchers working on transparent AI [7], user privacy in ML [8], and safe AI [9] can use PyMilo as a framework that preserves transparency and safety in a machine learning environment. In the next section, we will review existing solutions and related efforts in serialization of machine learning models to provide a better understanding of the context and relevance of our approach.\nRelated works: In this section, we review existing ap- proaches for transporting (serializing & deserializing) trained machine learning models in Python, highlighting their limita- tions and security concerns.\nPickle is the standard Python library to serialize and deserialize Python objects into binary files. While it provides a convenient way to store and load Python objects, the use of Pickle is not secure due to the risk of executing malicious code during deserialization. As warned in the Python documentation\u00b2, Pickle is not intended to be secure against erroneous or maliciously constructed data. This vulnerability can lead to arbitrary code execution, making it a potential security risk. As an alternative, the use of JSON serializers is recommended whenever possible.\nSKOPS [10] is a Python library that facilitates sharing and de-"}, {"title": "II. TECHNICAL OVERVIEW", "content": "PyMilo facilitates the comprehensive export (serialization) of machine learning (ML) models, capturing their full al- gorithm, including structural architecture, parameter values, and custom functionality implementations. This ensures that models can be reconstructed precisely in new environments. As an end-to-end solution, it provides all the required tools for the precise reconstruction (deserialization) of the exported models. Additionally, PyMilo introduces a novel feature called \"ML Streaming\" that simplifies the deployment and utilization of models in web environments. In the following, we present the architecture and capabilities of these two features.\nA. Model Serialization\nPyMilo's serialization mechanism captures the core structure and custom features of machine learning models. Each model has a unique structure that defines its behavior. For example, in decision trees, this includes attributes like the number of nodes and their connections. PyMilo ensures these essential components are stored, allowing accurate reconstruc- tion of the model. Additionally, some models have custom components, such as specialized loss functions or optimization algorithms. PyMilo supports the serialization of these custom elements, ensuring models retain their original behavior across different platforms."}, {"title": "III. DEMONSTRATION OF FUNCTIONALITY", "content": "In this section, we train a LinearRegression model representing the equation: y = xo + 2x1 + 3. There is a set of data points (X, y) available and the model is trained as follows.\nUsing PyMilo Export class, the model is serialized and exported into a JSON file.\nAs it is shown in Figure 5, the exported file is in JSON format and is not an executable. Thus, there is no risk of malware execution. The exported file is transparent, human-readable, and safe. The exported model can easily be opened in an editor. Having a non-executable and transparent export file becomes essential when the trained model is provided by an untrustworthy third-party. You can see all the learned parame- ters of the model in the file and change them if you want. This JSON representation is a transparent version of the trained model."}, {"title": "IV. QUALITY CONTROL", "content": "To ensure the reliability and accuracy of PyMilo, we employed a comprehensive testing framework using the pytest unit test framework [23]. Currently, PyMilo supports Scikit- learn, with plans to expand support to PyTorch and Tensorflow. Our testing framework covers 100 distinct machine learning models available in Scikit-learn. Each model undergoes a systematic evaluation within the pipeline, which involves: (1) fitting the model on a designated training dataset, (2) com- puting the evaluation metrics\u2014Mean Squared Error (MSE) and coefficient of determination (R2) for regression models, hinge loss and accuracy score for classification models, and (3) exporting the model using PyMilo and storing it in JSON format.\nTo evaluate the integrity of the transportation process, we subsequently retrieve the model using the PyMilo Import class. After transportation, we recalculate the correspond- ing evaluation metrics (MSE and R2 for regression models, hinge loss and accuracy score for classification models). For clustering models, we compare the predictions on the same test dataset before and after transportation. The criterion for passing a test case is established such that the cumulative absolute differences between the pre-PyMilo and post-PyMilo evaluation metrics, or the differences in clustering predictions, must be less than 10-8. This pipeline is executed across eight Python versions (from Python 3.6 to Python 3.13) and three distinct operating systems (Linux, macOS, and Windows), resulting in a total of 24 testing stages. Each Pull Request (PR) should pass all of the automated tests and be approved by at least 2 main reviewers in order to get approved and be merged."}, {"title": "V. APPLICATIONS AND REUSE POTENTIAL", "content": "A. Use Cases\nPyMilo is designed to be highly reusable, and we encourage researchers and practitioners in machine learning and MLOps to leverage its capabilities. The software can be easily cloned and modified to suit specific use cases, allowing users to tailor the library to their needs. PyMilo focuses on a gap in the AI ecosystem, particularly for scenarios that prioritize safety, transparency, and authenticity:\n\u2022 Model Sharing: PyMilo enables the secure exchange of machine learning models. Its transparency and human- readability ensure that the models remain unchanged, safe, and harmless throughout the sharing process.\n\u2022 End-to-end Deployment: With PyMilo, models can be exported after the development phase and be imported and deployed on production. This simplifies the transi- tion from development to production, ensuring consistent performance.\n\u2022 Safety and Authenticity: PyMilo provides traceability and verification features that confirm the model's origin and"}, {"title": "VI. LIMITATIONS AND FUTURE WORKS", "content": "Currently, PyMilo supports all machine learning models available in the scikit-learn library. Our next goal is to extend support to PyTorch models, followed by TensorFlow. Additionally, for the ML Streaming feature, we plan to expand protocol compatibility by adding support for WebSocket and MQTT, making PyMilo a more versatile and extensible tool."}]}