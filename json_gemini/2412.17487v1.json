{"title": "DeepMF: Deep Motion Factorization for Closed-Loop Safety-Critical Driving Scenario Simulation", "authors": ["Yizhe Li", "Linrui Zhang", "Xueqian Wang", "Houde Liu", "Bin Liang"], "abstract": "Safety-critical traffic scenarios are of great practical relevance to evaluating the robustness of autonomous driving (AD) systems. Given that these long-tail events are extremely rare in real-world traffic data, there is a growing body of work dedicated to the automatic traffic scenario generation. However, nearly all existing algorithms for generating safety-critical scenarios rely on snippets of previously recorded traffic events, transforming normal traffic flow into accident-prone situations directly. In other words, safety-critical traffic scenario generation is hindsight and not applicable to newly encountered and open-ended traffic events. In this paper, we propose the Deep Motion Factorization (DeepMF) framework, which extends static safety-critical driving scenario generation to closed-loop and interactive adversarial traffic simulation. DeepMF casts safety-critical traffic simulation as a Bayesian factorization that includes the assignment of hazardous traffic participants, the motion prediction of selected opponents, the reaction estimation of autonomous vehicle (AV) and the probability estimation of the accident occur. All the aforementioned terms are calculated using decoupled deep neural networks, with inputs limited to the current observation and historical states. Consequently, DeepMF can effectively and efficiently simulate safety-critical traffic scenarios at any triggered time and for any duration by maximizing the compounded posterior probability of traffic risk. Extensive experiments demonstrate that DeepMF excels in terms of risk management, flexibility, and diversity, showcasing outstanding performance in simulating a wide range of realistic, high-risk traffic scenarios.", "sections": [{"title": "I. INTRODUCTION", "content": "Ensuring the safety of autonomous driving is crucial, as it directly impacts public trust and acceptance of this technology [1]. Before AVs can be fully deployed in the real world, it is essential to test the robustness of AD systems across a wide range of potential driving scenarios. Generally, there are two types of test data: one is collected from the real world, such as the Waymo [2] and nuScenes [3] datasets, and the other is generated by simulators, which create test scenarios by adjusting parameters related to driving safety, such as traffic flow [4], vehicle behavior patterns [5], and weather conditions [6].\nScenarios collected from the real world most accurately reflect actual traffic conditions and natural human driving behaviors. In everyday driving situations, normal traffic scenes are predominant, while safety-critical scenarios such as a neighboring vehicle suddenly cutting in or a leading vehicle making an emergency stop are exceedingly rare. This discrepancy contributes to the long-tail distribution problem within the dataset. Nevertheless, these extreme scenarios are essential for evaluating the robustness of AD algorithms. ISO 21448 [7] also emphasizes the importance of continuous improvement in understanding and managing safety-critical scenarios.\nOn the other side, leveraging traffic simulators can automatically generate risk scenarios by adjusting parameters, such as increasing traffic density or programming surrounding vehicles (SVs) to behave unpredictably. However, this method requires careful manual adjustments of parameters and introduces a degree of randomness. Although the generation of safety-critical scenarios is virtually limitless with the aid of traffic simulators, the behavior of vehicles in these generated risk scenarios may not align with the intentions of human drivers, leading to a decrease in naturalness [8].\nIn our previous work [9], we found that combining the two methods mentioned above, that is, converting a large number of normal scenes into safety-critical scenes in the simulator, can effectively test AD systems and conduct adversarial training. However, the previous work [9] still has many limitations, such as adversary selection relying on manual labels and risk scenarios being open-loop, which means it cannot respond to the reaction of AV in real time and is limited in generation time. In this paper, we propose a light and closed-loop safety-critical scenario simulation framework called DeepMF, which considers both risk and realism. It is highly interactive which means it can respond to the continuously changing behavior of the AV in real-time and generate dynamic risk scenarios contrapuntally. DeepMF learns natural driving behaviors from real-world driving logs and aims to maximize the risk probability of the generated scenarios based on the deep-bayesian scenario factorization technique. The adversarial scenario generation problem is decomposed into the opponent forecasting and interdependent standard motion prediction sub-problems, which are solved step by step. At different time steps, DeepMF replans attack behaviors based on the newly observed traffic environment. The decoupled deep neural network that implements aforementioned theoretical analysis leverages vectorized and rasterized information simultaneously to capture the complex features of agents based on the global scene.\nOur contributions are as follows:\n(i) We propose the closed-loop Deep Motion Factorization (DeepMF) framework, which factorizes the accident-prone scenarios simulation problem into four components:"}, {"title": "III. PROBLEM FORMULATION", "content": "In the traffic scene, the observed states $X = (M,S)$ denotes the perception results of the traffic environment and surrounding agents. $M$ and $S$ denote the driving map and traffic participants respectively. Based on the observed states $X$, we can predict the future states of agents $Y$.\nWe define a binary variable $Coll$, which takes the values ${True, False}$, indicating whether a collision event occurs between AV and SV in the scenario. The expected value of a traffic accident occurring is denoted by $E(Coll | X)$, presenting potential safety risk in the scenario.\n$E(Coll|X)=1\\times P(Coll=True|X)+0\\times P(Coll=False|X)$ (1)\n$P(Coll = True|X)$ can be expressed as an integral over possible future states of the AV and OV:\n$\\int_{Y_{AV}}\\int_{Y_{OV}}P(Coll=True,Y^{AV}, Y^{OV} |X)$ (2)\nUtilizing Bayesian formula, we can further decompose Eq. (2) into a product of the joint distribution and the conditional probability:\n$\\int_{Y_{AV}}\\int_{Y_{OV}}P(Y^{AV}, Y^{OV}|X)P(Coll=True|Y^{AV},Y^{OV}, X)$ (3)\nThe joint distribution can be factorized as the prior $Y^{OV}$ and the conditional $Y^{AV}$ as follows:\n$P(Y^{AV}, Y^{OV} |X) = P(Y^{OV} |X)P(Y^{AV} |Y^{OV}, X)$ (4)\nOur objective is to maximize the possibility of a traffic collision occurring for AV, thereby generating accident-prone scene with the highest risk. From the above derivation, $\\max E(Coll | X)$ can be expressed as:\n$\\max_{Y^{OV}} \\int_{Y^{AV}} P(Y^{OV} |X) P(Y^{AV} | Y^{OV}, X)P(Coll=True|Y^{AV}, Y^{OV}, X)$ (5)\nThis deep-Bayesian scenario factorization formula in Eq. (5) breaks down the safety-critical scenario generation problem into multiple subcomponents that can be efficiently solved, including opponent prediction, motion prediction, and possible collision detection. The traffic agent with the highest safety risk for AV should be chosen as the opponent. Then based on the observation $X$, the motion is predicted, including behavior prediction for $Y^{OV}$ and interactive response prediction for $Y^{AV}$ conditioned on $Y^{OV}$. For each predicted pair of $Y^{OV}$ and $Y^{AV}$, the likelihood of a collision is evaluated.\nBased on computations using this formula, the most adversarial behavior of the opponent $Y^{OV}$, which is most likely to lead to a traffic accident, is selected as the final prediction. The following sections will introduce the implementation of this idea."}, {"title": "IV. METHOD", "content": "The architecture of our approach is shown in Fig. 1. The opponent prediction module aims to forecast the suitable attacking agent. It assigns each SV a predicted score, which reflects the possibility of being considered as the risky one. The trajectory prediction module forecasts the most aggressive path which is most likely to cause a safety-critical scenario for OV. Possible trajectories of OV are predicted firstly. Based on the marginal-OV predicted results, conditional-AV behaviour which make possible response to newly predicted OV trajectories are also being forecasting. By iterating through all predicted OV-AV trajectory pairs, we evaluate their collision potential and choose the OV trajectory from the pair that causes the highest risk as the final prediction. The implementation code of DeepMF is summarized in Alorithm 1. Fig. 2 provides a clear explanation of this idea."}, {"title": "B. Opponent Prediction", "content": "1) Heuristic supervised signals generation Task. We expound on the simplistic design concept of this task below. The core idea is to generate supervisory signals for all SVs by determining whether they have a high level of interaction with the AV. Generally, SVs with similar driving routes and close proximity to the AV tend to interact more frequently with the AV, potentially having a greater impact on the AV's decision-making and being more suitable as attackers. In contrast, it is neither intuitive nor realistic for a distant SV to rapidly attack the AV by crossing the traffic flow in between.\nTo determine whether an SV has a high interaction possibility with the AV and is more likely to pose a potential safety risk, we calculate whether there is an overlap in the bounding boxes of their driving trajectories in the real-world dataset, which indicates whether their driving paths are similar. For example, situations where they drive sequentially on the same road. We also calculate whether the centroid distance between the two vehicles is less than the length of the AV, which indicates whether they are very close. For example, situations where they drive side by side in adjacent lanes.\nThis technique generates pseudo-labels, categorizing the SVs into positive samples with a high potential for causing safety risks and negative samples with lower potential. Then the opponent prediction network could learn the complex inherent structural information of the data based on these generated supervisory signals.\n2) Opponent Prediction Network. The network utilizes both vectorized and rasterized information simultaneously. Vectorized features are extracted by the hierarchical graph neural model VectorNet [17], which encodes the global map and traffic participants. The backbone network VGG16 [18] processes rasterized features where the traffic flow is represented as images. The prediction head consists of an MLP and a fully connected layer.\nTo address the issue of class imbalance between positive and negative samples, we applied focal loss as a mitigation strategy. Compared to the cross-entropy loss function, it introduces a modulation factor that increases the model's focus on hard-to-classify samples and improves the model's performance in situations with class imbalance. The loss function is defined as:\n$L_{f1} = -a_t (1-p_t)^{\\gamma} \\log(p_t)$ (6)\nwhere $a_t$ is used to balance the weights of positive and negative samples, while $\\gamma$ adjusts the model's focus on samples of varying difficulty levels.\n3) Implementation Detail. When generating supervisory signals and training the opponent prediction network, real-world driving scenarios are used, including environmental map and agents' trajectories within the episode. However, during inference, the network only requires the map information to understand the traffic scenario and a short-term historical trajectory of the vehicles to comprehend their driving behavior. During inference, the opponent prediction network assigns risk scores to all SVs and selects the one with the highest score as the active attacker to generate a safety-critical scenario."}, {"title": "C. Opponent Trajectory Prediction", "content": "1) Marginal-OV Trajectory Prediction. We utilize target-driven method DenseTNT [19] to predict possible OV trajectories with corresponding scores. The network extracts features of traffic flow using sparse representation and employs a dense goal encoder to generate probability distributions of goals to capture finer-grained information. The higher the relevant score of the predicted trajectory, the better the prediction result is, and the closer it aligns with the vehicle's actual driving behavior.\n2) Conditional-AV Trajectory Prediction. We incorporate the predicted trajectory information of the OV from the aforementioned step as additional data into the vectorized and rasterized features, serving as supplementary guidance for AV trajectory prediction. Specifically, the predicted coordinates of the OV trajectories are added to the end of existing vectorized features and incorporated into the existing image with newly added channels. It means that the AV trajectories, with their relevant predicted scores, are generated based on the real-time predicted trajectories of the OV from the above step. We also utilize DenseTNT as the conditional trajectory prediction model, where the input includes traffic context and the additional predicted information of the OV.\n3) Potential Collision Judgement. We pair these predicted AV-OV trajectories and calculate the product of their respective predicted scores. Additionally, we judge whether they would crash in that predicted situation. If a collision is predicted, we also record the expected time of the crash. A collision is considered to occur if the bounding boxes of the AV and OV overlap at the same time.\n4) Opponent Trajectory Selection. If some AV-OV path pairs have potential collision, just within this range, we select the OV trajectory from the pair with highest multiplied score as final result. Otherwise, we directly retrieval all pairs to seek it, who from the highest multiplied score pair."}, {"title": "V. EXPERIMENTS", "content": "1) Real-world Human Driving Dateset. Waymo Open Motion Dataset (WODM), a driving dataset including abundant real-world traffic environment [2]. We conduct experiments on 1,500 scenarios, with each episode lasting 9 seconds, using 1 second of historical motion data to predict the following 8 seconds of future trajectory.\n2) Traffic Environment Simulation Platform. We import experimental scenarios into the lightweight simulator MetaDrive [4]. Two automatic driving planners are utilized during the evaluation, which are the replay planner and the IDM planner. The replay planner directly paybacks 8 seconds future motion of AV from WODM driving log. The IDM planner replans the AV's behavior based on the newest traffic environment at each step, making it more interactive.\n3) Adversarial scenario generation Baselines. Five SOTA safety-critical scenario generation algorithms are considered as baselines, which are STRIVE, ART, BBO, BGA, and BRS. The latter three are bicycle-based models that are implemented based on the principles of the AdvSim [13] framework. They utilize three different search algorithms which are Bayesian Optimization [20], Genetic Algorithm [21], and Random Search [22] respectively. They optimize kinematic bicycle parameters based on black-box methods to generate safety-critical scenarios."}, {"title": "B. Evaluation Metrics", "content": "We evaluate algorithms from two aspects, which are the efficiency of generating adversarial environments and the naturalness of the generated attack trajectories. The efficiency measurement mainly includes four metrics, which are collision rate, collision time, collision relative velocity and the consumption time of generating per scenario. The naturalness measurement mainly includes two aspects. On one hand, it measures the similarity of action distribution using Kullback-Leibler Divergence and Wasserstein Distance metrics. On the other hand, it assesses the similarity of the generated trajectories utilizing Symmetric Segment-Path Distance and Hausdorff Distance metrics.\n1) Efficiency-level Evaluation. The collision rate indicates the proportion of accidents that actually occur in the generated scenarios. A higher collision rate suggests that more challenging scenarios are being created. In the event of an accident, collision time and collision relative speed of AV and OV are also recorded. Earlier collision time and higher collision relative velocity indicate higher risk and more severe accidents. Generation Time is used to assess the speed of the model's operation.\n2) Naturalness-level Evaluation. It is used to assess the realism of the generated adversarial scenarios, specifically examining whether the driving behavior of the opponent vehicle resembles the decisions made by human drivers. Vehicle acceleration similarity is measured using Kullback-Leibler Divergence and Wasserstein Distance, while trajectory similarity is assessed through Symmetric Segment-Path Distance and Hausdorff Distance."}, {"title": "C. Analysis of DeepMF Simulation", "content": "We conduct multiply experiments on four versions of the DeepMF algorithm, namely DeepMF-G, DeepMF-S1, DeepMF-S2, and DeepMF-S4. The G version operates as an open-loop method, generating 8 seconds of future adversarial trajectory all at once. In contrast, the S version is a closed-loop method, where DeepMF replans the attack motion based on the currently observed traffic environment at different time steps. The S1 version refers to DeepMF replanning every second, while the S2 and S4 versions follow the same logic, replanning every 2 seconds and 4 seconds, respectively. We carried out two sets of experiments, one for replay planner and another for IDM planner. The experimental results are presented in Tab. I."}, {"title": "D. Comparision of Baselines.", "content": "Tab. 2 shows the efficiency-level evaluation results of baselines with Replay planner and IDM planner respectively. It shows that DeepMF achieves the highest collision rate, the shortest collision time, and the highest collision relative velocity, demonstrating its ability to generate more frequent and severe accidents.\nIn terms of average challenging scene generation time, BRS has the shortest duration, taking 1.55 seconds and 1.49 seconds with Replay planner and IDM planner, respectively. However, it also exhibits the lowest collision rates, at 46% and 34%, indicating its relatively poor aggressiveness. DeepMF ranks second for the scene generation time, with durations of 3.58 seconds and 3.61 seconds, significantly lower than the four algorithms STRIVE [16], ART [15], BRS, and BGA, which all exceed 40 seconds. It demonstrates that DeepMF strikes a balance between aggressive and lightweight, attaining optimal attack outcome with a faster generation speed. Figure 5 shows the qualitative evaluation results, where various algorithms generate adversarial trajectories based on the same raw scenario. In the raw scenario, both the ego agent and the opponent agent are moving straight in the same direction. ART's sluggish motion attack results in no collision where Ego vehicle driving in front of Opponent vehicle. BBO and BGA attack successfully, but their generated trajectories are unstable. BRS exhibits excessive randomness, attacking from the opposite side of the lane, which deviates from normal driving behavior. STRIVE's attack fails and even exceeds the driving area directly. DeepMF controls opponent to gradually approach the AV, generating a natural trajectory and successfully executing the attack.\nTab. III also presents the naturalness-level evaluation results of baselines with Replay planner and IDM planner respectively. It shows that DeepMF scores the lowest for both Kullback-Leibler Divergence and Wasserstein Distance, indicating that it achieves the highest action similarity, and its action distribution closely aligns with realistic scenarios. Additionally, DeepMF achieves the lowest scores in Symmetric Segment-Path Distance and Hausdorff Distance, signifying that the generated trajectories closely resemble the driving paths of human drivers."}, {"title": "VI. CONCLUSION", "content": "In this paper, we propose the DeepMF framework, which is based on the deep Bayesian scenario factorization technique, designed to generate accident-prone scenarios. The framework breaks down the complex task of scenario generation into four key components, that is, the adversarial evaluation of traffic participants, the marginal-motion prediction of selected opponents, the conditional-reaction estimation of AV and the probability estimation of the collision happend. At different time steps, DeepMF replans attack behaviors based on the newly observed traffic environment. Experimental results show that DeepMF outperforms other baselines in efficiency-level and naturalness-level evaluations and is capable of generating diverse and challenging environments in a short amount of time."}]}