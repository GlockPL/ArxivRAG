{"title": "Neural Collaborative Filtering to Detect Anomalies in Human Semantic Trajectories", "authors": ["Yueyang Liu", "Hossein Amiri", "Lance Kennedy", "Andreas Z\u00fcfle"], "abstract": "Human trajectory anomaly detection has become increasingly important across a wide range of applications, including security surveillance and public health. However, existing trajectory anomaly detection methods are primarily focused on vehicle-level traffic, while human-level trajectory anomaly detection remains under-explored. Since human trajectory data is often very sparse, machine learning methods have become the preferred approach for identifying complex patterns. However, concerns regarding potential biases and the robustness of these models have intensified the demand for more transparent and explainable alternatives. In response to these challenges, our research focuses on developing a lightweight anomaly detection model specifically designed to detect anomalies in human trajectories. We propose a Neural Collaborative Filtering approach to model and predict normal mobility. Our method is designed to model users' daily patterns of life without requiring prior knowledge, thereby enhancing performance in scenarios where data is sparse or incomplete, such as in cold start situations. Our algorithm consists of two main modules. The first is the collaborative filtering module, which applies collaborative filtering to model normal mobility of individual humans to places of interest. The second is the neural module, responsible for interpreting the complex spatio-temporal relationships inherent in human trajectory data. To validate our approach, we conducted extensive experiments using simulated and real-world datasets comparing to numerous state-of-the-art trajectory anomaly detection approaches.", "sections": [{"title": "1 INTRODUCTION", "content": "A trajectory is a trace generated by a moving object in a geographic space, usually represented by a sequence of chronologically ordered points [54]. A semantic trajectory [34] is a sequence of chronologically ordered points where some points may be enriched with semantic information such as the type of a visited place of interest.\nAn anomaly is commonly defined as a data point that is significantly different from the remaining data. Anomalies are also referred to as abnormalities, discordants, deviants, or anomalies in the data mining and statistics literature [1].\nFinding anomalous behavior in semantic trajectories has many applications:\n\u2022 Infectious Disease Early-Warning: a large number of people staying at home from work may indicate an outbreak of an infectious disease even before people notice more severe symptoms [33].\n\u2022 Elder Monitoring: A person suffering from dementia wandering the park at 11pm may indicate that the person might be lost and in need of assistance [42, 46].\n\u2022 Child Safety: A child being taken to a far away house when they should be at school may indicate a possible child abduction [14].\nDespite these important applications, the implementation of systems to support them is challenging, as it becomes very difficult to decide: What part of a trajectory is anomalous? What part is normal? For example, Figure 1 shows the six-week trajectory of a user in GeoLife. This trajectory allows us to observe the users patterns of life: including their home location, their work or school location, and other places the user likes to visit. Existing work on trajectory-based user identification has shown that an individual's patterns of life are like a unique fingerprint [13, 41], thus allowing identification of any individual human even among a large crowd of users. But the goal of this work is not to identify users, but to detect anomalous behavior within a user's trajectory. Such anomalies, of having users deviate from their normal patterns of life, may indicate a stolen phone or indicate distress, such as an abducted child or a lost elder with dementia. To illustrate the problem of trajectory anomaly detection, Figure 1 depicts the multi-week trajectory of GeoLife user 15. Let us assume that this trajectory belongs to a nine-year-old child named Maria. Also, assume that the one trip to the East of the City happened during a time when Maria would normally be at school. Do we think that this trip is anomalous? Could it be that Maria was abducted? We don't really have enough information to answer this question without knowing the semantics of the visited place. Maybe this is the location of the National History Museum that high school classes commonly visit and Maria is happily looking at dinosaur fossils? Maybe this is the location of the home of Maria's friend, whom other children like Maria often visit to skip school. None of these cases would be cause for safety concerns. We use this stylized example to show that we need to know more than just time and location to infer anomalous behavior: We need the semantics of places: What other individuals visited this place? Even though Maria never visited this place: Is it normal for others like Maria to visit this place?\nOver the past few decades, a considerable amount of research has been dedicated to trajectory anomaly detection across multiple domains, including human mobility [5, 30], maritime [29], and transportation [12]. These works mainly define anomaly trajectories as those that exhibit a large distance (in space and time) from other trajectories. However, the above example shows that space and time alone do not suffice to discriminate between normal-but-not-yet-observed and anomalous movement. To fill this research gap, we propose to consider using the semantics of locations: What is the (latent) semantic or purpose of a visit?\nBut how can we infer the latent semantics of a trip when trajectory data only includes location information? To answer this question, we propose to use a Collaborative Filtering (CF) approach. CF is traditionally used in recommendation systems and leverages the known preferences of a group of users to make recommendations or predict the unknown preferences of other users [43]. For example, in the Netflix Prize competition, the winning proposal, \"Cinematch,\" demonstrated the effectiveness of CF by surpassing Netflix's own system by more than 6% [6]. The advantage of CF is that it does not require semantic data to infer semantic information: In the movie recommendation example, without needing to know the semantics of movies (genres, actors, etc.) and without knowing the preferences of users (children, action, anime, love stories), CF allows one to estimate the rating that a user will give to a movie by looking at similar users (similar in terms of what movies they liked) and similar movies (similar in terms of liked by similar users).\nWhile these systems estimate the likelihood that a user will like a movie, our idea is to use collaborative filtering to estimate the likelihood that a person will visit a place. Even though Maria never visited the National History Museum and even though the Museum is far from her home and school, our model may give a high likelihood for Maria to visit the Museum. That's because other children (who visit places similar to Maria, such as elementary schools, playgrounds but not universities and bars) have also visited the Museum in the past. The CF will give us, for each (person, place)-pair a likelihood that the user would (normally) visit this place. For (person, place) pairs for which the model estimates a very low likelihood of a visit, the model tells us: \"This person should not normally visit this place\". If we observe such a visit in the data, the model will be surprised. We can measure this surprise as the difference between the expected value and the observed value in test and use it report anomalous.\nTo illustrate this concept.\nDespite the broad applications for anomaly detection in semantic trajectories, this area remains substantially under-researched. A main reason is a lack of semantic trajectory data with ground truth anomaly labels. Both privacy considerations and a lack of participant initiative result in datasets that are sparsely populated [9, 16, 44]. For example, the commonly used GeoLife dataset [55] includes only 182 users. But over the five years covered by the dataset, more than 60% of the users have fewer than 50 recorded trajectories, and around 70% of POIs are visited by only one or two users. In addition, this dataset has no ground truth on whether any segments of the trajectories can be considered as anomalous.\nWe also step towards filling this research gap by providing trajectory datasets that have labels for anomalous trajectories. We provide (1) a dataset generated via user-based simulation for which we change the decision-making process of users while they are anomalous, and (2) a dataset generated from GeoLife in which we artificially introduce anomalous behavior by replacing the normal trajectory of users with the trajectory of other users.\nTo address the sparsity of the data, we leverage a deep learning approach to fill the gaps of missing data. Existing work in trajectory mining focusing primarily on temporal information for sequence embedding or integrating spatial information into Graph Neural Network (GNN) architectures [11, 48]. However, these approaches significantly increase computational costs [31] and require high-quality POI annotation. To address these challenges, we propose a collaborative filtering-based unsupervised anomaly detection approach in the context of human trajectory anomaly detection tasks. To address those issues, we provide a modified neural collaborative filtering architecture to capture person-level human trajectory anomalous. The main contributions of this work are as follows.\n(1) We present a neural collaborative filtering architecture to model the users' daily patterns of life without prior knowledge.\n(2) We ascertain that neural collaborative filtering (NCF) can be effectively applied to the spatial-temporal anomaly detection domain. By employing an appropriate surprise function and training strategy, the model's cold start performance can be significantly enhanced.\n(3) We perform extensive experiments on three highly sparse and extremely imbalanced datasets [2, 55] to demonstrate the effectiveness and the promise of our neural collaborative filtering approaches on the user-level spatial-temporal anomaly detection domain.\nThis paper is organized as follows: In Section II, we explicate the basic concepts of user-level spatial-temporal trajectories and anomalous, as well as various anomaly detection methods and collaborative filtering techniques. For better understanding, Section III introduces the fundamental concepts and definitions of our method. Section IV introduces our methodology and its structure, detailing a Multi-Layer Perceptron (MLP) module and Matrix Factorization (MF) module. It also includes a discussion of the designed surprise functions and other relevant components of our approach. Section V details the experiments conducted on several datasets using our methodology. Finally, Section VI presents our conclusions and future work."}, {"title": "2 RELATED WORKS", "content": "Here, we summarize widely used trajectory anomaly detection methods, both traditional and machine learning approaches in Section 2.1 followed by a introduction to the collaborative filtering method, covering its algorithm, applications, and recent developments in Section 2.2."}, {"title": "2.1 Trajectory Anomaly Detection", "content": "anomalyOver the past few decades, a broad spectrum of trajectory outlier detection methstatistical, knowledge-driven,. In this section, we approachegorize these approaches into conventional techniques and machine learning-driven methodologies."}, {"title": "2.1.1 Statistical Approaches", "content": "Those methods are commonly used in conventional anomaly detection. These methods rely on distance or probability distributions, such as the Gaussian distribution, to identify data points that significantly deviate from the norm.\nKnorr and Ng [22] pioneered the concept of anomaly detection algorithms. In their distance-based approach, a data point is identified as an anomaly if fewer than k other points are within a specified distance (8) from it in the dataset. Liu et al. [27] introduced the Isolation Forest algorithm(IForest), which detects anomalies using binary trees. This method operates on the principle that anomalous are a minority and have attributes that differ markedly from normal instances. The algorithm isolates these anomalies by recursively partitioning the data into smaller subsets. If a forest of random trees consistently produces shorter path lengths for specific data points, those points are identified as anomalies. Laxhammar et al. [24] conducted a comparative study of the Gaussian Mixture Model (GMM) and Kernel Density Estimator (KDE) for anomaly detection in maritime traffic. Their study found that while KDE excels at capturing the intricacies of normal traffic, especially along sea lanes, both GMM and KDE have their limitations in detecting anomalies. Ristic et al. [38] proposed a method to extract motion patterns from historical AIS data, which are then used to build anomaly detectors based on adaptive kernel density estimation (AKDE). This method supports real-time anomaly detection by sequentially applying the detector to incoming AIS data. Wang et al. [47] proposed a trajectory-based anomaly detection algorithm using multidimensional Hidden Markov Models (HMMs) for model training and likelihood estimation. Their approach allows for real-time detection of anomalous from sensor data, effectively identifying long-term deviations from normal behavior patterns. Piciarell et al. [36] developed a system for detecting anomalous events using trajectory analysis, particularly for video and traffic surveillance. Their system clusters anomalous trajectories with support vector machines (SVMs). Thang & Kim [45] proposed an improved DBSCAN algorithm, known as DBScan-MP, where each cluster may have different epsilon and minpts values, enhancing its adaptability and performance in identifying clusters and anomalous."}, {"title": "2.1.2 Knowledge-Driven Approaches", "content": "Knowledge-driven approaches leverage expert knowledge-such as traffic rules, navigational experience, and established physical models-to assess whether a ship, vehicle, or individual is exhibiting anomalous behavior [10]. These approaches are particularly effective in domains like anomalous ship behavior detection (DBAS) and vehicle-to-vehicle (V2V) obstacle detection.\nAvram et al. [3] introduced a method that combines expert knowledge with ship behavior data to develop a ship anomaly detector. This integrated approach optimizes purely data-driven models by refining their structure and making secondary corrections to their outputs. Wu et al. [50] developed the DB-TOD model to detect anomalous in vehicle trajectories. By capturing driving behavior and preferences from historical data, this probabilistic model calculates the latent costs of routing decisions using feature counts and latent biases, effectively identifying anomalous in both full and partial trajectories. Zhu et al. [60] proposed the Time-Dependent Popular Route (TPRO) algorithm, which evaluates trajectory anomalies by considering spatial and temporal characteristics. The TPRO algorithm accounts for the varying popularity of routes between locations, assigning different weights to each when calculating anomaly scores. Yuan et al. [52] developed the Trajectory Outlier Detection based on Structural Similarity (TOD-SS) algorithm. This method segments trajectories based on angles at each point and calculates distances between sub-trajectories using features such as direction, speed, angle, and location. Yu et al. [51] presented the Trajectory Outlier Detection using Common Slice Subsequence (TODCSS) algorithm, which improves accuracy by combining features like direction, position, and continuity to detect anomalies across consecutive anomalous segments. Kinematics extraction, as discussed in studies like [12, 25, 29], Those methods integrates kinematic principles to produce precise and physically realistic trajectory predictions."}, {"title": "2.1.3 Machine Learning Approaches", "content": "Recent advancements in machine learning have introduced promising solutions for anomaly detection, utilizing sophisticated neural network architectures to improve the identification of anomalies. These developments offer enhanced capabilities for detecting complex patterns and deviations that traditional methods might miss. Given the challenges of trajectory data sparsity and anomaly characteristics, Graph Neural Networks (GNNs) are increasingly employed in trajectory anomaly detection due to their ability to work with graph-structured data and ability to capture complex spatial patterns [40].\nRecently, there has been a significant advancement in GNN: Goodge et al. [18] proposed LUNAR which utilizes information from a node's nearest neighbors to identify anomalies. Zhou et al.[59] introduced AST-GNN, an attention-based spatio-temporal graph neural network that enhances pedestrian trajectory prediction by effectively capturing complex interactions and unique motion patterns. Zheng et al. [53] introduced AddGraph, which combines an extended temporal GCN with an attention-based GRU to detect anomalies in dynamic graphs. It captures node and edge information, updating node embeddings and hidden states at each time step. Anomaly scores are assigned to edges based on the associated nodes.\nAnother category of deep learning models, aside from GNNs, includes various neural network approaches that treat the trajectory as a series to learn complex patterns and identify anomalies known as series learning models. These methods, including Recurrent Neural Networks (RNNs) and Long Short-Term Memory (LSTM) networks, are particularly effective for analyzing sequential or temporal data.\nFor example: Niu et al. [32] introduce an adaptive LSTM that utilizes temporal continuity in sequential data. By incorporating a mask gate and maintaining span, this LSTM can update memory adaptively based on changes in the sequence input at each time step. Autoencoder methods have also been effectively applied to trajectory anomaly detection. Liu et al. [28] proposed a semi-supervised approach based on a Variational Autoencoder (VAE) called GM-VSAE, which models the probability distribution of route patterns in the latent space using a Gaussian mixture distribution. This method allows for the identification of anomalous by assessing the likelihood of a trajectory being generated from normal patterns. Similarly, Han et al. [19] introduced DeepTEA, a semi-supervised method designed to detect time-dependent trajectory anomalous. DeepTEA employs a Convolutional Neural Network (CNN) to model road traffic conditions and utilizes a Gaussian Mixture VAE to capture latent trajectory patterns."}, {"title": "2.2 Collaborative Filtering", "content": "Collaborative Filtering (CF), first introduced in the 1990s [17], is a widely used technique in recommendation systems. Originally, CF involved users collaborating to filter information by recording their reactions to documents they read, allowing others to access these reactions. As a popular recommendation model, collaborative filtering utilizes ratings or other forms of user feedback to identify shared preferences among users. It then provides personalized recommendations based on these similarities, without requiring external information about the items or users. Collaborative Filtering employs two main techniques: the neighborhood approach and latent factor models. [23]. The neighborhood approach models a user's preference for an item based on their ratings of similar items, while latent factor models utilize a shared latent factor space between items and users to explain ratings. Nowadays, by leveraging advanced techniques such as matrix factorization [8], singular value decomposition [35] and integration of deep learning [7, 20, 49] have further enhanced the accuracy and scalability of collaborative filtering models."}, {"title": "3 PRELIMINARIES", "content": "In this section, we present the key concepts and definitions essential to our study on trajectory anomaly detection used in the following sections."}, {"title": "3.1 Human Semantic Trajectory Representation", "content": "A semantic trajectory is represented as a sequence of staypoints (or \"check-ins\") $T = {p_1 \\rightarrow p_2 \\rightarrow  \\dots \\rightarrow p_n}$ where n is the number of staypoint observations in the trajectory. Each staypoint observation $p_i$ in this sequence is a six-tuple (userID, $x_i$, $y_i$, $t_{ci}$, $t_{li}$, $s_i$), userID is a unique identifier of an individual user, $x_i$ is the longitude, $y_i$ is the latitude, $t_{ci}$ is the \u201ccheck-in\u201d timestamp when the trajectory T reaches point $p_i(x_i, y_i)$, $t_{li}$ indicates the time the user leaves that point, and $s_i$ provides semantic information about the visited location such as the type of PoI. The collection of all users' trajectories can be denoted as $T = {T_1, T_2,..., T_m}$, where m is the number of trajectories or users.\nGiven the above definitions, here we formally formulate the trajectory anomaly detection problems:"}, {"title": "3.2 Human Spatial-temporal Trajectory Anomaly Detection", "content": "We assume the availability of (1) a training period during which we assume that users exhibit normal behavior and (2) a test period during which some users may exhibit anomalous behavior. The goal of trajectory anomaly detection is to identify the set of anomalous users during the test period using models of normal behavior learned using the train period. Formally,\nDefinition 3.1 (Train and Test Period). Let $T = {T_1, T_2, . . ., T_m}$ be a set of trajectories of m users. We assume that any staypoint that started before a specific staypoint in time $t_{split}$ exhibits normal behavior and anomalous behavior may occur after $t_{split}$. Then, we can define a training trajectory:\n$T^{Train} = {(userID, x_i, y_i, t_{ci}, t_{li}, t_i) \\in T_i|t_{ci} <= t_{split}}$,\nand a testing trajectory:\n$T^{Test} = {(userID, x_i, y_i, t_{ci}, t_{li}, t_i) \\in T_i|t_{ci} > t_{split}}$.\nThis allows us to define a train dataset as\n$T^{Train} = [T_1, ..., T_m]$,\nand a test dataset as\n$T^{Test} = [T_1, ..., T_m]$.\nThe goal of trajectory anomaly detection is to detect trajectories $T^{Test} \\in T^{Test}$ what exhibit changes that deviate so much from their normal behavior that they rouse suspicion that they may have been generated by a different process. Intuitive, such different process may be different individuals (for example due to a stolen cellphone), a sudden change in behavior (such as exposure to an infectious disease), or a gradual change in behavior (such as the progress of a mental illness).\nDefinition 3.2 (Trajectory Anomaly Detection).\nLet $T = {T_1, T_2, ..., T_m}$ be a trajectory dataset split into $T^{Train}$ and $T^{Test}$, and let $P \\subseteq T^{Test}$ be a set a anomalous trajectories. The task of Trajectory Anomaly detection is to find P.\nGiven a training set of users U and their normal trajectory pairs $T_u$, the objective is to identify anomaly users $U_{anomaly}$ in the test set who exhibit substantial deviations from the typical trajectory patterns established across the training population. These deviations are quantified using a score function $f_{score}$, which measures the extent of divergence from the common patterns observed within U.\nThis goal presents several unique challenges:\n(1) Challenges in sparse data:\n(2) Challenges in quantifying anomalous:"}, {"title": "4 METHODOLOGY", "content": "In this section, we introduce our neural collaborative filtering-based unsupervised anomaly detection approach for human trajectory analysis. While this section provides ideas, concepts, and theory, the interested reader may find implementation details in our GitHub Repository at https://github.com/alex-cse/NCF_AHSTD. Notably, our method can identify anomalous users without any explicit semantic information of places. Instead, our approach extracts latent semantic information using collaborative filtering (based on users visiting similar places and places visited by similar users). Our framework comprises two modules:\n(1) The Collaborative Filtering Module uses collaborative filtering to model the User-POI visit matrix observed in the train period. It identifies anomalous users by measuring surprise, that is by detecting deviations from typical (model) trajectory patterns observed in the test period.\n(2) Neural Module: This module take the advantage of neural networks to interpret the complex spatial-temporal relationships within the data. Traditional methods like collaborative filtering often fall short when dealing with those spatial-temporal data because they may not fully capture non-linear patterns or subtle dependencies within the dataset.\nTo effectively quantify anomalous users, we employ an accumulator based on a continuous-state Markov chain to calculate anomaly scores. This approach is grounded in the principle that each user's trajectory is conceptualized as a sequence where each event is influenced by the preceding one, but making the simplifying (Markov-)assumption that the future is conditionally independent of the past given the present. We assume that when a trajectory exhibits anomalous behavior, this behavior not only affects a single staypoint, but affects a chain of subsequent events. For instance, this might manifest as an increase in travel distance or as visits to a POI during an atypical time frame. To capture these anomalies, the accumulator evaluates each POI for every user based on the trajectory sequence. By doing so, our method can detect not only extreme anomalous but also users with moderate deviations from the expected patterns in their overall trajectory."}, {"title": "4.1 Neural Collaborative Filtering Model", "content": "To thoroughly explore and understand the spatio-temporal interactions between users and POIs, we propose a streamlined neural collaborative filtering approach [20, 37]. This model leverages a Multi-Layer Perceptron (MLP) module to effectively capture and learn both the temporal and spatial mobility of users, as well as the spatio-temporal relationships among various locations. By integrating the MLP module with a matrix factorization framework, we enable a comprehensive analysis of users' behaviors over time and the intricate spatial interactions between different POIs.\nOur proposed architecture is illustrated in Figure 5. Specifically, within the trajectory pairs denoted as T, we analyze the interactions between users u and their respective POI $p_i$, forming trajectory pairs $T_{ui}$. In the context of $T_{ui}$, we consider several key parameters.\n\u2022 $h\\in [0,23]$ is the hour of check-in, providing a temporal resolution on an hourly basis.\n\u2022 $d\\in [0,6]$ is the day of the week when the check-in occurs.\n\u2022 The geographical location I specifies the geographical location of the check-in, which is critical for spatial analysis.\nAdditionally, we preprocess the data within each trajectory pair $T_{ui}$ make it encompassed a set of movement attributes, including stay duration, and distance traveled. The stay duration indicates the time spent at a particular location, while movement speed and distance provide insights into the mobility patterns and travel behaviors of the user. The final tuples Z of user i and POI j pair can be represent as:\n$Z_{ij} = \\begin{bmatrix}U_i\\\\h_j\\\\d_j\\\\l_j\\end{bmatrix}$     (1)\nIn this context, $h_j$, $d_j$, and $l_j$ denote the embeddings corresponding to the hour of the user's arrival at the POI, the week of of day the user's visit the POI, and the movement distance from previous check-in POI (calculate base on latitude and longitude) of the POI, respectively. After that we applied a three-layer MLP module to learn the interactions of latent features, the equation can represented as:\n$\\varphi_{MLP} = \\alpha_3 (W_3(\\alpha_2 (W_2(\\alpha_1(W_1 Z+b_1))+b_2))+b_3)$  (2)\nHere, Z is the input latent feature vector, $W_i$ and $b_i$ are the weight matrices and bias vectors of each layer, and $\\alpha_i$ represents the activation functions applied at each layer. For the Generalized Matrix Factorization component, we also utilize embeddings derived from the vectors Z, incorporating additional information about the POI type t. Given that users $u_i$ have features like hour $h_i$, week of day $w_i$, and distance $d_i$, and POI $p_j$ have features like type $t_j$, the equation for matrix factorization incorporating these auxiliary features can be written as:\n$T^{MF} \\approx \\approx u^T p + (w_1 . h_i + w_2 \u00b7 d_i + w_3 \u00b7 h_i) + (w_4 . t_j)$ (3)\nWhere the $w_1$, $w_2$, $w_3$, $w_4$ are weights for the corresponding auxiliary features. This equation combines the latent factor model with additional terms that account for the auxiliary features, allowing us to capture both latent features (inferred from similar users visiting the same POI) and explicit features (such as known types of POIs like restaurants or schools).\nIn our Spatial-Temporal model, we extend beyond the conventional method by integrating not only user and POIs latent variables but also additional latent features specifically designed to capture spatial and temporal dynamics. This includes geographic information that captures the spatial context of the interactions, as well as temporal attributes that detail the duration of stays and specific visit times. The geographic information provides a framework for understanding the spatial relationships and locations of the staypoints of interest, while the temporal attributes offer insights into the timing and frequency of visits. After the initial embedding layer, the model utilizes multiple fully connected layers, which function as neural collaborative filtering layers.\nThe overall MLP module was trained on the training dataset $T^{Train}$, with the objective of capturing the representation of normal patterns. Once trained, any deviations from these established patterns are indicative of anomalies in the test dataset $T^{Test}$. In the following section, we describe how to measure these deviations and to identify anomalous users."}, {"title": "4.2 Quantification of Anomaly Scores", "content": "We propose two measures to quantify the degree to which an individual is anomalous: The first measure directly considers the difference (the surprise) between the expected (by the NMF model) $\\varphi_{MF}$ of an individual i visit a place j (described in the previous section) and the observed visits $T^{Test}_{ij}$. While some places are visited by a large number of individuals every day, other places may have very few or no daily visits. For such places, it becomes difficult to predict which individual may visit them, and, consequently, a (normal) visit may incur a large surprise to the model. To avoid incurring such false positives, we additionally propose not only to predict (and measure surprise) for individual POIs, but also for the type of POI visited. As an intuitive example, it may surprise the model that individual A visits, during lunch time, a new German restaurant that none have visited during the training period (because the restaurant may not have opened yet). But it is not surprising that A visits a restaurant during lunchtime as they always do. This section describes details for both these measures."}, {"title": "4.2.1 User-POI Matrix Reconstruction Surprise", "content": "This surprise function assesses the discrepancy between the User-POI visit status matrix in the test set and its training set Matrix Factorization reconstruction. The User-POI visit status matrix is a binary matrix where each entry signifies whether a specific user has visited a particular POI. A high difference in the User-POI Reconstruction Error indicates that the reconstructed matrix significantly deviates from the actual visit status matrix, suggesting that the user's behavior is inconsistent with the expected patterns and should be considered anomalous. In the training matrix, each observed User-POI pair is given a value of 1 if the corresponding user visited the corresponding POI, and 0 otherwise. The factorized model aims at reconstructing this matrix using compressed information, thus assigning a visit score to each User-POI pair. We note that these scores may be less than 0 or greater than 1 and thus, should not be interpreted as probabilities.1\nApplying a Generalized Matrix Factorization provides a matrix $\\varphi_{MF}$ with dimensions m \u00d7 n, where n represents the number of individuals and m denotes the number of POIs. We propose to simply use the absolute difference between this prediction and the observed visits as follows:\n$surprise_{ij} = | \\varphi_{MF} - T^{Test}_{ij}|$   (4)\nThis method ensures that user-POI visit will receive a low surprise if the user visits the POI in the test period but the POI is considered a typical location based on the collaborative filtering. Conversely, an anomalous POI, which deviates from the expected pattern, will be assigned a higher surprise. We note that this surprise function also gives a high surprise to a place that is NOT visited in the test period but is expected to be visited by the collaborative filtering model.\nIf we have additional information about the semantics of the anomalies that were expecting to find, we can adopt the above surprise function accordingly. For example, if we know that anomalous agents visit places they would not normally visit (such as going to random places), we can reflect this apriori knowledge in the surprise by only counting surprise for POIs visited in Test:\nsurpriseNewPOI = min(0, $T^{Test}_{ij} - \\varphi_{MF}$)   (5)\nAnalogously, if we know that anomalous agents stop visiting places they would normally visit (such as skipping going to work), we can adopt the surprise function to only consider POIs that were not visited in Test:\nsurprise MissingPOI = min(0, $\\varphi_{MF} - T^{Test}_{ij}$) (6)\nIf we have no apriori knowledge about how anomalies manifest, we can use the surprise function $surprise_{ij}$ in Equation 4.\nThe surprise functions defined in Equations 4-6 provide us with anomaly scores for individual individual-POI pairs. To obtain anomaly scores at the individual user level, we aggregate these scores by individual. The accumulated error for user i can be computed as:\nsurprisei = $\\sum_{j=1}^m surprise_{ij}$ (7)\nThe implicit assumption that we make here is that an anomalous user may have more than a single anomalous visit. Depending on apriori information of what may constitute anomalous behavior of an individual user, we can adapt this surprise function accordingly."}, {"title": "4.2.2 POI Type Surprise", "content": "In addition to measuring surprise at individual POI level, we also propose to measure surprise the the POI type level. The surprise function at the POI type level quantifies the divergence between the model's predicted POI type and the actual POI type. This approach is specifically designed to address the issue of data sparsity: Even though individual POIs may not have enough visits to allow the collaborative filtering to model the latent features of the P\u039f\u0399.\nGiven a set C = {$c_1$, ..., $c_{|C|}$ } of types (classes) of POIs, and letting c($p_j$) be the class of POI $p_j$, then the probability of class k \u2208 C visited by user $u_i$ can be calculated as:\n$P_{ik} = \\frac{\\sum_{j=1}^m \\varphi^{Train}_{uj}  \\cdot I(c(p_j)=k)}{\\sum_{j=1}^m  \\varphi^{Train}_{uj}}$   (9)\nwhere m is the number of POIs and $I(c(p_j)=k)$ is an indicator function that returns 1 if POI $p_j$ has type k and zero otherwise. Then, for each user we can define their most likely POI type, as:\nmostLikelyPOI\u00a1 = arg max k \u2208 C($P_{ik}$)\nTo measure surprise of a user $u_i$, we count the number of visits observed during the test period that do not match the user's most likely POI:\nsurprise POIType = $\\sum_{j=1}^m I(mostLikelyPOI_i \\neq T^{Test}(i,j) \\cdot T^{Test}(i,j)$ (10)\nOur final anomaly score of each user is then defined as the sum of the two surprise scores:\nAnomalyScore\u00a1 = surprise\u00a1 + surprise P OIType where surprise\u00a1 is the User-POI Matrix Surprise described in Section 4.2.1 and surprise POIType is the POI Type Surprise described in Section 4.2.2."}, {"title": "5 EXPERIMENTAL RESULTS AND ENVIRONMENTAL SETUP", "content": "In this section, we conduct a comprehensive evaluation of our neural collaborative filtering model using multiple simulated and real-world datasets. The subsequent parts of this section will provide detailed information about each dataset, including their anomaly characteristics and the specific preprocessing steps applied. Additionally, we will outline the anomalous settings and configurations in the simulated datasets used for our model."}, {"title": "5.1 Experimental Datasets", "content": "To evaluate the performance of our proposed model, we utilized simulated and real-world dataset. The simulated datasets were generated using the Agent-Based Patterns-of-Life Simulation (POL) [21, 61], while the real-world dataset was based on the GeoLife dataset [57]."}, {"title": "5.1.1 Agent-Based Simulation of Patterns of Life", "content": "The Patterns of Life simulation is an existing simulation that was designed to emulate human needs and behaviors in an urban environment [61", "setting": "Fairfax County", "behaviors": "hunger anomalous", "follows": "n\u2022 Hunger anomalous: An agent under this category becomes hungry more quickly. Such agents have to go to restaurants or their homes much more often to satisfy their food needs.\n\u2022 Social anomalous: This type of agent randomly selects recreational sites to meet and spend leisure time, rather than being guided by their attributes and social"}]}