{"title": "FASST: Fast LLM-based Simultaneous Speech Translation", "authors": ["Siqi Ouyang", "Xi Xu", "Chinmay Dandekar", "Lei Li"], "abstract": "Simultaneous speech translation (SST) takes streaming speech input and generates text translation on the fly. Existing methods either have high latency due to recomputation of input representations, or fall behind of offline ST in translation quality. In this paper, we propose FASST, a fast large language model based method for streaming speech translation. We propose blockwise-causal speech encoding and consistency mask, so that streaming speech input can be encoded incrementally without recomputation. Furthermore, we develop a two-stage training strategy to optimize FASST for simultaneous inference. We evaluate FASST and multiple strong prior models on MuST-C dataset. Experiment results show that FASST achieves the best quality-latency trade-off. It outperforms the previous best model by an average of 1.5 BLEU under the same latency for English to Spanish translation.", "sections": [{"title": "Introduction", "content": "End-to-end simultaneous speech translation (SST) translates incomplete speech input into text in a different language (Ma et al., 2020b), which is widely used in multilingual conferences, live streaming and etc. Compared to offline ST where speech input is complete, SST needs to decide whether to continue waiting or to generate more translation after receiving new speech input. A common approach in building performant SST streaming models involves pretraining for offline translation and optional finetuning for simultaneous translation (Agarwal et al., 2023; Communication et al., 2023). The quality-latency trade-off of simultaneous streaming models thus heavily depends on its offline performance.\nLarge language model (LLM) have recently demonstrated its potential to be a strong backbone of offline E2E ST (Huang et al., 2023; Zhang et al., 2023b). However, LLM introduces larger computation overhead compared to regular-sized models when applied to SST. Figure 1 shows that the computation latency of a LLM-based 7B model makes it inferior for real-time application.\nThe computation overhead of SST models comes from both encoding new speech input and decoding new translation. While the latter one has been heavily optimized for LLM (Pope et al., 2022; Kwon et al., 2023; Dao, 2024), the former one has not been optimized for SST. As new speech input arrives, most SST models re-encode the entire speech and start autoregressive decoding afterwards, ignoring the incremental nature of streaming speech input. More importantly, the LLM decoder needs to recompute hidden states due to the updated speech features, significantly slowing down the computation.\nIn this work, we propose a FAst LLM-based SST (FASST) method to avoid recomputation while maintaining its translation quality. We develop a blockwise-causal speech encoding technique that incrementally encodes new speech input and introduce incremental LLM decoding with consistency mask. We also design an 2-stage training strategy for FASST: 1) aligning speech encoder outputs"}, {"title": "Related Works", "content": "End-to-End SST translates partial speech input into text in another language without generating intermediate transcription. A variety of speech segmentation techniques and policies have been proposed to optimize the quality-latency trade-off. Ren et al. (2020); Dong et al. (2022); Zeng et al. (2023); Zhang et al. (2023c) learn to segment streaming speech input by word boundaries. Zhang and Feng (2023) further learns to segment speech at moments that are beneficial to the translation. On the policy side, Ma et al. (2020b) adapts wait-k and monotonic multihead attention (MMA) from simultaneous text translation to SST model. Ma et al. (2023) further improves the numerical stability of MMA. Papi et al. (2023b) constructs source-target alignment with attention information to guide the simultaneous inference. Zhang and Feng (2022) decides whether to translate based on accumulated information of source speech. Pol\u00e1k et al. (2023) conducts blockwise beam search when doing incremental decoding. The translation quality of SST models depend on not only their policies, but also their offline performance (Agarwal et al., 2023). Recently LLM has been shown as a strong backbone of offline ST (Zhang et al., 2023b; Huang et al., 2023), but its computation overhead prevents it from being used in SST scenarios. FASST is one of the first LLM-based SST models with a reasonable quality-latency trade-off.\nEfficient ST To reduce the computation cost of ST models, Wu et al. (2020); Ma et al. (2020c); Raffel and Chen (2023); Raffel et al. (2023) use segments and explicit or implicit memory banks to calculate self-attention only within the segment. Zhang and Feng (2023); Chen et al. (2021); Wu et al. (2021) adopt unidirectional attention during speech encoding. These methods focus on encoder-side optimization and can be integrated with FASST.\nTranslation with LLM While LLMs are capable of zero-shot machine translation (Brown et al., 2020; OpenAI, 2023; Touvron et al., 2023a,b), their performance can be further improved via in-context learning (Vilar et al., 2023; Zhang et al., 2023a), supervised and semi-supervised finetuning (Rothe et al., 2020; Yang et al., 2023; Zhang et al., 2023d; Xu et al., 2023). For simultaneous machine translation (SMT), Guo et al. (2024) propose a collaborative translation model with two LLM agents and Koshkin et al. (2024) design a finetuning strategy by adding a special \"wait\" token. Raffel et al. (2024) propose SimulMask to mask token connections under certain policy. SimulMask is a concurrent work with us and only works on text translation."}, {"title": "The FASST Method", "content": "In this section, we first review the problem formulation of simultaneous speech translation (SST) and then describe the architecture of our proposed model, FASST, followed by its training and inference strategies."}, {"title": "Problem Formulation", "content": "Simultaneous speech translation (SST) needs to generate translations while receiving streaming speech input. Let $S = (s_1, s_2, ..., s_{|S|})$ be a speech waveform where $s_i$ are real numbers. The streaming speech input is cut into segments $S_1, S_2, ...$ and the SST model $P_{\\theta}$ needs to emit partial translations $T_1, T_2, ...$ after receiving each of them,\n$T_i \\sim P_{\\theta}(\\cdot | S_{\\le i}, T_{\\le i})$.\t\t\t(1)\n$T_i$ can be an empty string, indicating that the SST model needs more speech input to continue the translation. After receiving all inputs $S_1, S_2,..., S_m$ and emitting all translations $T_1, T_2,..., T_m$, we obtain the final translation $T = \\underset{i=1}{\\overset{m}{\\Concatenate}} T_i$ by concatenating all partial ones."}, {"title": "Model Architecture", "content": "As shown in Figure 2, our model is composed of a speech encoder, an adapter and a LLM decoder.\nBlockwise-Causal Speech Encoder (BCSE) extracts contextualized acoustic features from the raw waveform incrementally. It consists of several casual convolutional layers as the audio feature extractor and a blockwise-causal Transformer Encoder as the contextual encoder.\nOur causal convolutional layers are built upon non-causal ones. Denote $H_{in} \\in R^{l \\times d}$ as the input vectors to non-causal convolution $Conv(\\cdot)$ with kernel size $w$. We add additional zero padding $Pad \\in R^{(w/2-1) \\times d}$ to its left so that each output vector only depends on input vectors to its left, and remove the last $\\frac{w}{2}-1$ states to keep its output length the same as before,\n$H_{out} = Conv\\left(\\left[ Pad; H_{in}\\right]\\right)_{:l-\\frac{w}{2}+1}.$\t\t\t\t\t\t(2)\nBesides, we apply blockwise-causal masking to Transformer Encoder. Define attention mask $M$ of speech encoder as follows\n$M_{Q,j_Q}^{j_K} =\\begin{cases} 1 & \\lfloor \\frac{j_Q}{b} \\rfloor \\ge \\lfloor \\frac{j_K}{b} \\rfloor \\\\\n0 & otherwise\\end{cases}$\t\t\t\t\t(3)\nwhere $b$ is the block size, i.e., the number of hidden states of the speech encoder corresponding to one segment, and $j_Q, j_K$ are row indices of query matrix $Q$ and key matrix $K$. The attention output of speech encoder during training can then be written as\n$O \\  Softmax\\left(\\frac{QK^T}{\\sqrt{d}} + M \\right)V,$\t\t\t\t\t\t\t(4)\nwhere $V$ is the value matrix.\nAdapter receives speech encoder outputs and converts them to the LLM embedding space. It consists of two causal convolutional layers to reduce the length of speech encoder outputs by four and one linear layer to project features into the LLM embedding space. We call the adapter outputs as speech embeddings,\n$E_i = Adapter(BCSE(S_{\\le i})).$\t\t\t\t\t\t\t\t(5)\nLLM receives speech embeddings and embeddings of previously generated tokens to decode autoregressively according to a wait-k-stride-n policy $\\pi$.\n$T_i \\sim LLM(\\cdot | E_i, T_{<i}, \\pi).$\t\t\t\t\t\t\t\t(6)"}, {"title": "Training", "content": "As shown in Figure 2 (b), we employ a 2-stage approach to train our model.\nStage 1. Speech-text alignment. We align the speech embedding with LLM input embedding using word-aligned contrastive (WACO) loss. Both transcription embeddings $E^t$ and speech embeddings $E^s$ are grouped into word embeddings $W^t$ and $W^s$ by word boundaries. Word boundaries of speech are obtained through Montreal Forced Aligner. We treat speech and transcription embeddings of the same word as positive pair and others as negative pairs and train the speech encoder and the adapter with contrastive loss,\n$L_{CTR} = -\\sum_i log \\bigg[ \\frac{exp(sim(W^s_i, W^t_i)/\\tau)}{\\sum_j exp(sim(W^s_i, W^t_j)/\\tau)} \\bigg]$,\t\t\t\t\t\t\t\t\t(7)\nwhere $\\tau$ is the temperature and $sim(.)$ is the cosine similarity function. LLM parameters are frozen during stage 1.\nStage 2. Finetuning for simultaneous translation. We finetune the entire model for simultaneous speech translation using wait-k-stride-n policy. Speech input is encoded into speech embeddings $E^s$. Then we concatenate $E^s$ with embeddings of reference translation and feed them to LLM. Position indices of both speech embeddings and translation embeddings start with the same index and ascend separately, so that text generation during inference does not affect the positional embeddings of speech embeddings.\nThen we randomly select $k \\in K$ and mask out attentions from translation words with indices"}, {"title": "Efficient Simultaneous Inference", "content": "Figure 2 (c) illustrates how we conduct efficient simultaneous inference. FASST waits for k segments at the beginning and then start generating. Suppose now we have received $S_1, S_2,\\cdots, S_i$ where $i > k$.\nIncremental Speech Encoding The blockwise-causal mask of speech encoder allows us to use KV cache of previous speech segments to avoid recomputation. Let $H^O = (h_1,\\dots,h_i)$ be input vectors of the attention. We group them into blocks $B_j = \\left[ h_{(j-1)b+1},..., h_{jb}\\right]$ where $1 \\le j \\le i$ and $ib = li$. The query, key and value matrices can be written as follows\n$Q = H^OM_Q = (B_1M_Q,\\dots,B_iM_Q)$\t\t\t\t\t\t\t(9)\n$K = H^OM_K = (B_1M_K,\\dots,B_iM_K)$\t\t\t\t\t\t\t(10)\n$V = H^OM_V = (B_1M_V,\\dots,B_iM_V)$\t\t\t\t\t\t\t(11)\nHere the keys and values of previous segments $(B_1M_K,\\dots, B_{i-1}M_K)$ and $(B_1M_V,\\dots, B_{i-1}M_V)$ are stored in the KV cache. Now we only need the KV cache and the query $B_iM_Q$, key $B_iM_K$ and value $B_iM_V$ of the latest segment to compute its attention output,\n$\\begin{equation}\nO = Softmax\\left(\\frac{B_iM_Q \\left(B_iM_K\\right)^T}{\\sqrt{d}} \\right) V\n\\end{equation}$\t\t\t\t\t(12)\nThis results in same output as running attention with full query, key and value matrices and a blockwise-causal mask. In this way, we reduce the time complexity of attention from $O(l_id^2 + l_id)$ to $O(bd^2 + l_ibd)$. Here b is a constant while $l_i$ increases with the longer speech input.\nAdapting We store the speech encoder outputs of previous segments and concatenate them with encoder outputs of segment i. Then we pass them to the causal convolutional layers and the linear layer to obtain the speech embeddings $E_i$."}, {"title": "LLM Decoding with Consistency Mask", "content": "We partition speech embeddings $E_i$ into $E_{i_1},..., E_{i_b}$ by speech segment. Following the wait-k-stride-n, the inputs to LLM are organized in the follow way\n$I = E_1 \\oplus \\dots \\oplus E_k \\oplus Emb(T_k) \\oplus E_{k+1} \\oplus Emb(T_{k+1}) \\oplus\\dots \\oplus E_i,$\t\t\t\t\t\t\t\t\t(13)\nwhere $T_{1:k-1}$ are empty strings and $T_j$ consists of n words for each $k < j < i$. Now we need to reuse KV cache of previous i - 1 speech segments and partial translations to compute LLM hidden states of ith segment. Since speech embeddings are always ahead of text embeddings during training, we design a consistency mask to ensure speech segments can only attend to speech segments before them.\nLet $\\delta(z)$ be indicator function that equals to 1 if $z_{th}$ position of input I belongs to text and 0 otherwise. Define consistency mask $M^c$ as follows,\n$M_{z_Q z_K}^c =\\begin{cases} 0 & z_Q \\ge z_K and \\delta(z_Q) \\ge \\delta(z_K) \\\\\n-\\infty & otherwise\\end{cases}$\t\t\t\t\t\t\t\t(14)\nLet $Q_i, K_i, V_i \\in R^{t_i\\times d}$ be query, key and value matrices of segment i and $K_{<i}, V_{<i}$ be cached key and value matrices. We first concatenate $K_i$ and $V_i$ with cache to obtain $K_{<i}$ and $V_{<i}$. Then attention output of segment i can then be computed as follows\n$\\begin{equation}\nO_i = Softmax\\left(\\frac{Q_iK_{<i}^T}{\\sqrt{d}}\\,+\\, M^c_{:,:}\\right)V_{<i} \\oplus  Softmax\\left(\\frac{Q_iK_i^T}{\\sqrt{d}}\\,+\\, M^c_{:,:}\\right)V_i.\n\\end{equation}$\t\t\t\t\t(15)\nAfter computing hidden states for speech segment $S_i$, the LLM decodes n words autoregressively following the policy."}, {"title": "Experiment", "content": "We conduct experiments on two language directions of MuST-C v1.0 dataset (Di Gangi et al., 2019): English Spanish (En-Es) and English German (En-De). Each language direction contains around 400 hours of audio recordings. The average duration of utterances is less than 10 seconds. To simulate long speech scenarios, we concatenate adjacent utterances in the same TED talk so that each resulting utterance is around 30\nseconds. We call the induced dataset as MuST-C-Long and the original one as MuST-C-Short. The duration distribution of both datasets are shown in Figure 4."}, {"title": "Model Configurations", "content": "Architecture We intialize our speech encoder with wav2vec 2.0 large model (Baevski et al., 2020) and our LLM with Llama2 7b Base (Touvron et al., 2023a). Wav2vec 2.0 large consists of a 7-layer convolutional feature extractor and a 24-layer Transformer encoder with 1024 hidden units. The block size of speech encoder is set to 50, i.e., around 1 second each block. The adapter connecting wav2vec 2.0 and Llama2 consists of two 1-D convolutional layers with kernel size 3, stride 2 and hidden size 1024 and a linear layer to project hidden size from 1024 to 4096 to match that of LLM embedding. Llama2 7b Base adopts a 32-layer Transformer decoder with hidden size 4096. It uses a vocabulary of size 32000 and rotary positional embedding (Su et al., 2023).\nTraining We train our model with mixed MuST-C-Short and MuST-C-Long data. The input speech is raw 16-bit 16kHz mono-channel waveform. We filter out speech that is shorter than 320ms during training. The batch size of stage 1 is 16.7 minutes and that of stage 2 is 14 minutes. We use AdamW optimizer with cosine learning rate decay. The warmup steps of stage 1 is 25k and that of stage 2 is 500 steps. The maximum learning rate of stage"}, {"title": "Evaluation", "content": "We use SimulEval (Ma et al., 2020a) to evaluate our models and baselines. All models are evaluated on MuST-C-Long tst-COMMON with batch size of 8 during inference to simulate heavy workload. Since SimulEval does not support batch-ing multiple instances, we duplicate each instance by 8 during model forwarding. We report Sacre-BLEU (Post, 2018) for translation quality and computation-aware length-adaptive average lagging (LAAL-CA) (Papi et al., 2022) for latency. All models are evaluated using a single A6000 GPU."}, {"title": "Baselines", "content": "Wait-k-Stride-n LST waits k fixed-length speech segments and translates n words every time (Ma et al., 2020b; Zeng et al., 2021). We run wait-"}, {"title": "Main Results", "content": "Main results are shown in Figure 5. Our model achieves the best quality-latency trade-off for En-Es direction. Although wait-k-stride-n LST has a 2 BLEU score advantage at the latency of 8 seconds, its bidirectional encoding and inefficient use of KV cache prohibit it reaching latency smaller than 6 seconds. Comparing to EDAtt and AlignAtt which do not use LLM and has much less parameters (115M) than our model (7B), our model has similar computation aware latency while achieving a 1.5 BLEU score improvement. For En-De direction, FASST achieves competitive results to AlignAtt, with slightly better quality when latency is smaller than 4 seconds or larger than 6 seconds."}, {"title": "Ablation Studies", "content": "We conduct ablation studies to examine the impact of each component in our model.\nSpeech Encoder and LLM We replace wav2vec 2.0 large with HuBERT large (Hsu et al., 2021) and Llama2 7B base with Mistral 7B v0.3 base (Jiang et al., 2023) to examine whether FASST is sensitive to the choice of pretrained speech encoder and LLM. We also train Wait-k-Stride-n LST baseline with these configurations as a comparison. Results are shown in Figure 6. For all configurations, FASST has lower latency than the baseline. FASST with HuBERT results in the best quality"}, {"title": "Generalizability to Other Policy", "content": "We have demonstrated that our method works with wait-k-stride-n policy. However, plenty of policies other than wait-k and its variants have been developed to conduct simultaneous translation. Here we apply our method to hold-n policy (Liu et al., 2020) to exemplify how our method works on a different"}, {"title": "Conclusion", "content": "In this work, we introduce FASST, a fast LLM-based simultaneous speech translation model. FASST consists of blockwise-causal speech encoding, incremental LLM decoding with consistency mask, and a novel 2-stage training strategy. Experiments on MuST-C dataset show that FASST significantly reduce computation overhead while maintaining its translation quality. Our generalization study shows that policies that spend more time on encoding than decoding benefit more from FASST."}, {"title": "Limitations", "content": "There might be data leakage since LLM is trained on vast amount of text data, so we cannot guarantee LLM does not see the test translation data during pretraining.\nFASST is only tested on two language directions instead of all 8 language directions of MuST-C, so its generalizability to other language directions is unknown.\nThere is still a quality gap between blockwise-causal speech encoding and bidirectional speech encoding. It is unclear how to further close the gap.\nWe only explore one LLM-ST architecture in the paper and we cannot guarantee that FASST or its idea works on other architectures."}]}