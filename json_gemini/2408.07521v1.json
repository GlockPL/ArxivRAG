{"title": "Optimising Dynamic Traffic Distribution for Urban Networks with Answer Set Programming", "authors": ["Matteo Cardellini", "Carmine Dodaro", "Marco Maratea", "Mauro Vallati"], "abstract": "Answer Set Programming (ASP) has demonstrated its potential as an effective tool for concisely representing and reasoning about real-world problems. In this paper, we present an application in which ASP has been successfully used in the context of dynamic traffic distribution for urban networks, within a more general framework devised for solving such a real-world problem. In particular, ASP has been employed for the computation of the \"optimal\" routes for all the vehicles in the network. We also provide an empirical analysis of the performance of the whole framework, and of its part in which ASP is employed, on two European urban areas, which shows the viability of the framework and the contribution ASP can give.", "sections": [{"title": "1 Introduction", "content": "Avoiding congestion and controlling traffic in urban scenarios is becoming nowadays of utmost importance due to the rapid growth of our cities' population and vehicles. The effective control of urban traffic as a mean to mitigate congestion can be beneficial in an economic, environmental and health way. At the end of the 21st century, the world population is expected to increase to 10.9 Billion, adding well over 3 Billion people to the current population (Max Roser and Ortiz-Ospina 2013). This massive growth,\nIn this paper, we present an application in which Answer Set Programming (ASP) (Niemel\u00e4 1999; Baral 2003; Brewka et al. 2011; Gelfond and Lifschitz 1991) has been successfully used in the context of dynamic traffic distribution for urban networks, within a more general framework devised for solving such a real-world problem. The framework, which allows to efficiently optimise and simulate traffic flow in a large roads' network with hundreds of vehicles, is composed of four phases: network analysis, domain-independent search, route optimisation, and mobility simulation. Within the framework, ASP is employed for representing and reasoning about the optimisation of the flow of traffic inside a road network by finding the best combination (schedule) of routes for all the vehicles in the network. We have performed an analysis on real-world traffic data from two European urban areas in UK and Italy, utilising the state-of-the-art Urban Mobility Simulator SUMO (L\u00f3pez et al. 2018) to keep track of the state of the network: the analysis tested the correctness of the solution, and proved the efficiency and capabilities of the presented solution to reduce the metrics considered, sometimes significantly. Moreover, it shows the contribution ASP gives in terms of performance and metrics: all instances of Milton Keynes and Bologna up to 600 vehicles inside the network are solved, optimally, in a short time.\nThe paper is structured as follows. Section 2 presents preliminaries about ASP. Then, Section 3 introduces the problem and the solution framework. The last two phases of the framework, i.e., the optimisation via ASP and the mobility simulator, are presented in Section 4 and Section 5, respectively, together with the experiments we performed on real data. The paper ends in Section 6 and 7 by discussing related work and by drawing some conclusions, respectively."}, {"title": "2 Background on ASP", "content": "Answer Set Programming (ASP) is a programming paradigm developed in the field of non-monotonic reasoning and logic programming. In this section, we overview the language of ASP. More detailed descriptions and a more formal account of ASP, including the features of the language employed in this paper, can be found in (Brewka et al. 2011; Calimeri et al. 2020). Hereafter, we assume the reader is familiar with logic programming conventions.\nSyntax. Variables are strings starting with an uppercase letter, and constants are non-negative integers or strings starting with lowercase letters. A term is either a variable or a constant. A standard atom is an expression $p(t_1, ..., t_n)$, where p is a predicate of arity"}, {"title": "3 Case Study and Proposed Solution Framework", "content": "In this section, we present our case study about dynamic traffic distribution for urban networks, and the solution framework we propose, in two separate subsections."}, {"title": "3.1 Problem Description", "content": "Urban traffic routing aims to mitigate traffic congestion by navigating the vehicles and recommending less-congested routes, hence supporting a better use of the capacity of the urban network. Recent advances in connected autonomous vehicles (CAVs) technology provide an opportunity for routing approaches to be increasingly practicable and to revolutionise the field, as the communication capabilities of CAVs can allow roadside agents to collect real-time traffic information, and can support real-time communication between the vehicle and a centralised traffic control system (Shladover 2018; Vallati and Chrpa 2018). A centralised approach aims to provide the optimal routes for each CAV from the perspective of the traffic management centre, with the clear benefit of having a holistic vision of the controlled urban region. In other words, the centralised approach allows considering both the dynamic system optimal principle (Merchant and Nemhauser 1978) and the dynamic user optimal principle (Friesz et al. 1989) when routing vehicles, and the trade-off between the two according to traffic conditions.\nIn this work, we consider a centralised scenario where a controller oversees the network in real time. The controller has knowledge of the network structure, that can possibly be updated according to accidents or other unexpected events. While in operation, the controller is provided with the list of incoming vehicles (controlled), and the position of the vehicles already navigating the network (hereinafter referred to as simulated). On the basis of this information, the controller provides an optimised route for controlled vehicles, that aims at minimising overall congestion while considering the dynamic aspects of traffic.\nWe assume that vehicles entering the controlled region communicate to the controller their destination and their current path, via an existing Vehicular Ad-hoc Network"}, {"title": "3.2 The Solution Framework", "content": "Figure 1 presents our solution framework and its four components. In the following, we describe the first two components, i.e., the Network Analyser and the Domain Independent Search, while the last two components will be presented in Sections 4 and 5, respectively.\nThe purpose of the Network Analyser component is to simplify the topology of the network. It takes several inputs, including the network structure represented as a XML file, the list of incoming new vehicles, and the positions of vehicles that already have a route within the network. For the sake of this implementation of the framework, all input files are in the format used by the SUMO simulator. The Network Analyser then generates a simplified logical representation that describes the network, creating a model of the search space where viable solutions can be found in the next phase.\nTo achieve this, the Network Analyser employs a preprocessor that is specifically designed to build an internal model of the road network. The preprocessor performs various tasks to simplify the network, for instance, (i) joining small streets together, (ii) simplifying intersections in roundabouts, and (iii) removing streets from the network that cannot be used by vehicles, such as no-traffic zones or streets reserved for public transportation.\nRegarding (i) and (ii), it is important to highlight a technical detail implemented by the processor. The output of the Network Analyser serves as input for the Domain Independent Search component and, subsequently, to the ASP Optimiser component. Since these components need to capture the complete flow of traffic, they must be time-dependent. To achieve accurate time-dependent analysis, it is crucial to discretise time into steps that are the right trade-off: being small enough to capture real traffic nuances but large enough to allow for efficient planning. The problem of finding the right discretisation step when planning in temporal scenarios is a well-known problem in planning (see, e.g., (Gigante et al. 2022; Cardellini et al. 2024b)). In our case, a large discretisation step could greatly impact on the quality of the produced plan. To exemplify this, let us suppose that a vehicle is about to navigate two streets, $s_1$ and $s_2$, with $s_1$ leading to $s_2$. The time to navigate $s_1$, at a speed of 45km/h is of 14s, and the time for $s_2$ is of 12s. In an ideal settings with constant speed and continuous time, it would take a vehicle 26s in total to cross the 2 streets. If instead we account for a discretisation step of 10s, both $s_1$ and $s_2$ will take 2 discretisation steps to cross, i.e., 20s, with a total time of 40s. It is evident that large discretisation steps can lead to significantly misleading navigation times being considered. Further, with large discretisation steps, the times needed to cross streets tend to be the same, and thus the ASP Optimiser component could opt for solutions where the vehicles take routes with the less number of streets possible, but which in reality would amount to greater running times. Having a smaller discretisation step, like of 1s, could guarantee that the solution is more cogent to the reality, but this would greatly increase the complexity of the optimisation problem and negatively affect the total solving time. Moreover, this discretisation step has an impact on the network's topology. For example, in most of the existing traffic simulation tools, a roundabout comprises multiple small streets that connect all incoming and outgoing streets at various intersections. However, representing each small street individually during the optimisation phase would not be accurate, as each of these small streets would need to be run in a time equal to the discretisation step, resulting in a large simulated running time not representative of the real running time. To address this, the preprocessor combines the small streets that connect the incoming and outgoing streets of the roundabout, creating one longer street for each enter/exit combination of the roundabout, which can more realistically model the flow of traffic within the discretised time steps. As a result of this grouping, a single street is represented multiple times in the network. Ensuring that the total capacity of the roundabout is respected becomes the responsibility of the optimiser, which will ensure that the maximum number of vehicles inside the roundabout will be respected. Moreover, having removed any streets from the network that cannot be used by vehicles, such as no-traffic zones or streets reserved for public transportation, we might be left with intersections with only two intersecting streets and which can thus be joined to better deal with the discretisation step. In our experimental settings, after having performed the aforementioned simplifications, we performed a simulation analysis on how different discretisation steps would have affected the running times of a vehicle that needed to run through several runs and choose the one that allowed for a total running time as close as possible to the real running time. We thus chose the discretisation step of 5s.\nDomain Independent Search. The Domain Independent Search component receives the simplified network representation generated by the Network Analyser as input. Its"}, {"title": "4 ASP for the Optimisation Phase", "content": "In the section, we detail the third component of the solution framework, referred to as ASP Optimiser, which has the role to select the best route for each vehicle entering the network. Specifically, the input of the component is a set of ASP facts, referred to, in the following, as Data Model, and it uses an ASP encoding to compute the best route for every vehicle approaching the network.\nThe data model consists of the following atoms:"}, {"title": "5 Experiments, Monitoring, and Execution", "content": "For the last phase of the framework (Mobility Simulator), we have employed SUMO (L\u00f3pez et al. 2018), which is a state-of-the-art Urban Mobility Simulator to monitor the state of the network, execute the computed optimal solution plan, and verify its quality through the computation of Key Performance Indicators (KPIs), such as Total Duration (i.e., the time the last vehicle exits the network), Average Route Length, Speed, Duration, Waiting Time (i.e., the time vehicles spend in queues) and Depart Delay (i.e., the time vehicles spend waiting for the road to free to enter the network). This phase takes the responsibility for executing the optimal plan found by the ASP Optimiser and to account for all the real-world (microscopic) nuances not modelled in the previous phases. For example, we leave to this component the job of simulating the flow of traffic light at intersections, cadenced by the switching phases of traffic lights. The overtakes among vehicles, the use of lanes, and the order in which vehicles are queued in traffic, are other aspects overlooked in the previous phases, in which the streets are considered as buckets with no particular order between them and the managed aspect is how much each vehicle will occupy (on average) the single street.\nGiven the fact that the previous steps reason with an abstracted representation of the problem to solve, it is possible that the execution of the plan leads to a state of the world that is significantly different from the expected one. For instance, some roads expected to have free flows of vehicles can be very congested, and there can be vehicles queuing at junctions because of traffic not leaving the controlled region at the expected rate. These discrepancies can be provided as feedback to the Domain Independent Search, that can take them into account to define the current state of the network. Further, there may be disruptions that are modifying the viability of part of the network. For instance, a car accident can happen (they can be simulated in SUMO by modifying the behaviour of drivers), unexpected road works may be required, or extreme weather conditions can affect the area: this kind of events can reduce the capacity of roads, or completely block"}, {"title": "5.1 Empirical Settings and Results", "content": "We assess the proposed approach using SUMO and by considering two scenarios: Bologna and Milton Keynes. The Bologna (Bieker et al. 2014) scenario considers the 7th city in Italy by population (approx. 400,000). The considered area was constructed around the \"Andrea Costa\u201d road in Bologna, in which the football stadium is located. The network, represented in Fig. 3b, includes more than 110 junctions and more than 170 links. The total length of the modelled links is more than 33 kilometres. The scenario includes the demand for Bologna's peak hour (8am \u2013 9am) in which 8,620 vehicles roam the network, in some days of November 2008. The interested reader is referred to (Bieker et al. 2014) for a detailed description of how the network was constructed.\nThe Milton Keynes scenario considers the largest town in Buckinghamshire, United Kingdom, with a population of approximately 230,000. A diagram of the considered network is shown in Fig. 3a: it covers an area of approximately 2.9 square kilometres. The network includes more than 25 junctions and more than 50 links. The total length of the modelled links is more than 45 kilometres. The model simulates the morning rush hour, and has been built by considering historical traffic data collected between 8am and"}, {"title": "5.2 ASP Evaluation", "content": "We now evaluate the ASP encoding presented in Figure 2 in terms of capacity to rapidly find a high-quality solution to the routing of new vehicles inside the network. Every time one vehicle approaches the network, the Network Analyser calls the Domain Independent Search, and then the ASP Optimiser is invoked to find optimal routes for the approaching vehicles. The discretisation step has been set to 5 seconds according to some preliminary experiments. As ASP Optimiser, we employed CLINGO configured with the option --parallel-mode=2 which executes the task in two threads, one using the Branch and Bound algorithm (Gebser et al. 2015), and one using the Unsatisfiable Core algorithm (Andres et al. 2012). This approach has already been proven effective in other application domains, e.g., (Cardellini et al. 2024a). Figure 4 presents the scalability results and dimensionality for the network of Milton Keynes and Bologna. It shows the correlation between the solving time of CLINGO (Top) and the number of vehicles which roam the network (Bottom). The x-axis is grouped in bins of 50, and the histogram below shows the number of instances (i.e., each time a new vehicle enters the network) for each bin. The instances of Milton Keynes and Bologna with less than 600 vehicles can all be solved optimally within 30 seconds (actually, in the majority of cases, in less than 10 seconds). When the dimensionality increases, the solver can still find optimal solutions in most of the cases (the median of the boxplot is always under 30 seconds), but for some instances the cut-off time is reached, and a suboptimal solution is returned. As shown in Table 1, this approach can still improve the performances inside the networks."}, {"title": "6 Related Work", "content": "One of the most common methods in the literature to optimise traffic flow in road networks is to schedule traffic signal switching phases, or signal phase plans, with the aim of minimising vehicles' delay (Dotoli et al. 2006; Papageorgiou et al. 2003). The well-known real time adaptive traffic control system SCOOT (Bretherton 1990), for example, makes use of this methodology and is used extensively throughout Europe and the United Kingdom. Unfortunately, managing only the switching phases of traffic lights has some limitations: the only metric which is controllable and optimisable is the waiting time at intersections (which has a direct impact on the total travel time of vehicles) but is not straightforwardly expandable to consider other metrics (e.g., fuel consumption). Moreover, the (macroscopic) point of view of traffic lights, which manages the flow of traffic modelling incoming and outgoing lanes as queues of vehicles, does not allow for a more"}, {"title": "7 Conclusion", "content": "In this paper, we presented a framework for dealing with the problem of dynamic traffic distribution for urban networks. The framework is composed of four phases: Network Analyser, Domain Independent Search, ASP Optimiser and Mobility Simulator. The third phase of the approach relies on ASP for the computation of the optimal routes. The whole framework has been assessed on real-world data from two urban areas of the UK (Milton Keynes) and Italy (Bologna). Results show that the framework can significantly improve the considered traffic KPIs, and that the advantages depend also on the topology of the networks. Further, the contribution ASP can give is evaluated in terms of performance and metrics: results outline that all instances of Milton Keynes and Bologna up to 600 vehicles inside the network are solved, optimally, in a short time.\nWe see several avenues for future work. First, we are interested in assessing the framework in different urban areas, and in enhancing the feedback capabilities by considering a number of critical failures and their impact. Second, we plan to extend the proposed approach to deal with vehicles that do not follow the provided instructions. Finally, we are interested in integrating the proposed framework into the larger urban traffic control infrastructure, so that information about calculated traffic flows can be exploited to inform traffic authorities policies and actions."}]}