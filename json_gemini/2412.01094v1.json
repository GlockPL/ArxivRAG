{"title": "A Hierarchical Heuristic for Clustered Steiner Trees in the Plane with Obstacles", "authors": ["Victor Parque"], "abstract": "Euclidean Steiner trees are relevant to model minimal networks in real-world applications ubiquitously. In this paper, we study the feasibility of a hierarchical approach embedded with bundling operations to compute multiple and mutually disjoint Euclidean Steiner trees that avoid clutter and overlapping with obstacles in the plane, which is significant to model the decentralized and the multipoint coordination of agents in constrained 2D domains. Our computational experiments using arbitrary obstacle configuration with convex and non-convex geometries show the feasibility and the attractive performance when computing multiple obstacle-avoiding Steiner trees in the plane. Our results offer the mechanisms to elucidate new operators for obstacle-avoiding Steiner trees.", "sections": [{"title": "I. INTRODUCTION", "content": "Minimal-length trees enable to model optimal networks in the plane. Since the inquiry by Fermat on how to minimally connect three points in the plane, and the formalization by Gilbert-Pollack [1], minimal Steiner trees has received relevant attention due to applications in graph query, network design, network location, VLSI, biology, mathematical modeling, supply chain management, and multi-agent planning problems.\nThe Euclidean Steiner Tree problem (EST) aims at interconnecting n terminal nodes by a shortest possible network while allowing the addition of extra nodes whenever necessary (the extra nodes are also known as the Steiner points or Fermat points) [2]. When obstacles in the plane are involved, the edges of the minimal Steiner tree are to avoid overlapping with the obstacles. The community has studied polynomial algorithms and approximation heuristics for tailored ESTs [3].\nAlthough the existing approaches use nature-inspired and concatenation algorithms to construct single ESTs that avoid overlap with obstacles, the study of efficient schemes to generate multi-ESTs which are free of clutter and overlapping with arbitrary obstacle geometry has received little attention in the community. As such, in this paper, we study an approach based on hierarchical bundling schemes to compute multiple obstacle-avoiding Euclidean Steiner trees in the plane. In particular, our contributions are as follows:\n\u2022 We propose a hierarchical approach for clustered Steiner trees in the plane. Our method uses hierarchical trees to construct and concatenate multi-Euclidean Steiner trees via hierarchical bundling of routes and trees, effectively avoiding clutter and overlapping with arbitrary obstacles."}, {"title": "II. OBSTACLE-AVOIDING MULTI-EUCLIDEAN STEINER TREES", "content": "In this section we describe the overall framework and basic ideas behind our proposed approach.\nWe aim at constructing multiple Steiner trees that connect a set of points in the plane while avoiding clutter and overlap with obstacles. As such, we consider the following inputs as given a-priori:\n\u2022 A set of terminal nodes $P = {P_1, P_2, ..., P_n}$ whose locations are given in the 2-dimensional Euclidean plane, and\n\u2022 A set of obstacles $O = {O_1, O_2,..., O_x}$ in the Euclidean plane represented by polygons of arbitrary geometry (in this paper, for simplicity and without loss of generality, we consider obstacles with arbitrary geometry, e.g. convex and non-convex geometries).\nThe key motivation behind the idea of constructing multiple Euclidean Steiner trees in the plane is inspired by the need of considering the deployment of teams of multi-agents (robots, sensors, hubs) in the environment, thus the configuration of Steiner trees allows to model not only efficient information/communication/distribution networks, but also the decentralized/modular control schemes. In this application domain, the obstacle geometry is of convex or non-convex nature.\nThe basic idea to generate multiple Steiner trees is as follows:\n1) Cluster the set of terminal nodes $P$ by a hierarchical (agglomerative) clustering scheme, rendering the cluster tree $Z$ (dendrogram). And for a given depth of $Z$, find $s$ clusters and terminal subset $M = {M_1, M_2,..., M_i,..., M_s }$, $M \\subset P$.\n2) For each cluster in the set $M$, generate a Steiner tree using the hierarchical bundling of shortest paths.\n3) To generate the more compact structures of Steiner trees, concatenate (bundle) Steiner trees by using the tree $Z$ and by repeating step (2) until a user-defined criterion is met."}, {"title": "B. Hierarchical Clustering", "content": "To generate the cluster tree Z, we used the hierarchical clustering scheme with complete linkage (farthest distance) and the Euclidean norm between two coordinates as a distance metric. Also, for a given depth of Z, we find s clusters by finding the smallest depth in the cluster tree Z that renders s or fewer modules; in which the set of modules (clusters) is labeled with $M = {M_1, M_2, . . ., M_i, . . ., M_s }$, and cluster $M_i \\subset P$ for $i\\in [1,s]$. The set of nodes in the cluster $M_i$ becomes non-intermediate nodes of the Steiner trees."}, {"title": "C. Hierarchical Bundling of Shortest Paths", "content": "To generate multiple Steiner trees, we find the root node $R_i$ in cluster $M_i$ with minimal distance to other nodes. Due to the above, the root $R_i \\in M_i$ and $R_i \\in P$. And for each cluster $M_i$, we construct a Steiner tree $t_i$ by using a hierarchical bundling of the set of shortest paths from root $R_i$ to every terminal node in $M_i$, whose basic idea is depicted by Fig. 2. Here, we assume a cluster with proximal terminal nodes being identified on the plane as shown in Fig. 2-(1). Let a cluster be defined with\n$M_i = {P_1^i, P_2^i, . . ., P_k^i, ..., P_{m_i}^i } \\cup {R_i}$    (1)\nwhere $P_k^i$ is the k-th terminal node in the i-th cluster, $m_i$ in the number of terminal nodes in the i-th cluster, and $R_i$ is the root of the i-th cluster. Then, we construct a Steiner tree $t_i$ by the following procedure:\n1) First, for each cluster $M_i$, $i \\in [1, s]$, we compute the set of shortest paths from the root $R_i$ to every other terminal node in $M_i - {R_i}$, $i \\in [1, s]$. The set of shortest paths is represented by the set of tuples\n$S_i = {(R_i, ..., P_k^i), i \\in [1, s], k \\in [1, m_i]}$,    (2)\nTo exemplify the above, Fig. 2-(2) shows the root $R_i$ in blue-colored sphere and the shortest paths are depicted with dark-colored lines and labeled with symbols A, B, C, D, E, F. To compute the shortest paths in arbitrary convex and non-convex polygonal domains, we use the A* algorithm with visibility graphs.\n2) Second, we cluster the set of shortest paths $S_i$ by a hierarchical agglomerative approach with a distance metric as follows:\n$d(S_{i,u}, S_{i,v}) = G(u, v) \\cdot cos^{-1} (\\frac{\\mathbf{a} \\cdot \\mathbf{b}}{||a|| ||b||})$    (3)\n$G(u, v) = \\sum_{h=1}^{NP} ||S_{i,u}^h \u2013 S_{i,v}^h||^2$    (4)\n$\\mathbf{a} = \\mathbf{P_{k_u}^i} - \\mathbf{R_i}$    (5)\n$\\mathbf{b} = \\mathbf{P_{k_v}^i} - \\mathbf{R_i}$    (6)\nwhere $d(S_{i,u}, S_{i,v})$ denotes the similarity between the u-th and v-th shortest paths from the set $S_i$, $S_{i,u}^h$ is the h-th coordinate sampled from the shortest path $S_{i,u}$, NP is the number of points for piecewise interpolation between shortest paths, the vector $\\mathbf{a}$ describes the orientation from the root $R_i$ to terminal node $P_{k_u}^i$ of the u-th shortest path, and $||.||$ denotes the Euclidean norm. The result of the hierarchical clustering of shortest paths is a dendrogram $Z_i$ as shown in Fig. 2-(3) which encodes the similarity structure among shortest paths and modules hierarchically.\nThe distance metric used in Eq. 3 has two roles: to measure the piecewise gaps $G(u,v)$ and to estimate the orientation gaps to the terminal nodes through the difference of angles. As such, piecewise and orientation gaps are considered to construct the hierarchy $Z_i$. This choice implies that overlapped shortest paths sharing similar directions are considered close, thus they are subject to bundling operations through the ordering of the dendrogram $Z_i$. Exploring distinct distance metrics has the potential to explore tailored forms of Steiner tree generation.\n3) Third, we compute Steiner points by searching for intermediate points lying in the convex hull of the shortest paths rendered from the dendrogram $Z_i$. The goal is to find Steiner points that minimize tree length. The search for intermediate points is realized through trust region algorithm based on Sequential Quadratic Programming (SQP) [30]. To enable the efficient search over the plane with obstacles, we sample solutions over the triangulated feasible search space. In particular, the representation of Steiner points is as follows\n$\\tau = (\\Gamma, r_1, r_2)$    (7)\nwhere $\\Gamma$ is an integer number encoding the order of the triangle derived from the Delaunay triangulation of the free space, and $r_1, r_2 \\in [0,1]$. The above representation maps to the Cartesian coordinate [31]:\n$(r_x, r_y) = (1 - \\sqrt{r_1}) a_\\tau + \\sqrt{r_1} (1 - r_2) b_\\tau + \\sqrt{r_1r_2} c_\\tau$    (8)\nwhere $a_\\tau, b_\\tau, c_\\tau$ are the Euclidean coordinates of the vertices of the $\\tau$-th triangle derived from the triangulated search space (Delaunay triangulation from the visibility graph of the map). The above-mentioned representation scheme is advantageous to enable the efficient search and sampling of feasible Steiner points that implicitly avoid overlap with obstacles, rendering a convex search space in which checks of point inside obstacles becomes unnecessary.\nFurthermore, the bundling of shortest paths is performed through a recursive/hierarchical approach guided by the tree structure $Z_i$. Thus, to consider the local and global topology of the tree, the bundling operators are performed in bottom-up (from terminal to root) and top-down (from root to terminal nodes)."}, {"title": "D. Concatenation of Steiner Trees", "content": "To generate the more compact and larger Steiner tree structures, we construct new Steiner trees by concatenating (bundling) Steiner trees and by using the hierarchical tree Z computed in step 1 of section II-A.\nSince points clustered into the cluster tree Z encodes both the closeness and the similarity between Steiner trees, the cluster Z is able to guide the construction of more compact Steiner trees by concatenation/bundling operations. As such, to concatenate Steiner trees $t_i$ and $t_j$, each of which is associated to modules $M_i$ and $M_j$, respectively, we find the joint set of terminal nodes $M_{i,j} = M_i \\cup M_j$, and perform the hierarchical bundling of shortest paths over the set $M_{i,j}$ (section II-C).\n$t_{i,j} = t_i \\odot t_j$    (9)\nwhere $t_i$ is the i-th Steiner tree rendered from set $M_i$, $\\odot$ denotes a bundling operator between Steiner trees, and $t_{i,j}$ denotes the concatenated (bundled) Steiner tree. Bundling Steiner trees implies updating the topology of the Steiner tree as a result of updating the root and Steiner points. For efficiency considerations, the concatenation (bundling) of Steiner trees brings the following benefits:\n\u2022 It becomes possible to re-use the computed shortest paths from the component sets $S_i$ and $S_j$, since they share common elements with the set $S_{i,j}$.\n\u2022 Since computing the Steiner tree points occurs within the local search space of the convex hull of closest shortest paths, it becomes possible to re-use the previously computed Steiner Points as the initial guess for subsequent Sequential Quadratic Programming (SQP) optimization in step (3) of section II-C.\n\u2022 Furthermore, it becomes possible to re-use computed distances from the roots of component Steiner trees to terminal nodes.\nSince the concatenation of Steiner trees is guided by the binary cluster tree Z, the concatenation of Steiner trees is a binary bottom-up process that aims at joining Steiner tree components into larger structures. Fig. 3 renders an example of the concatenation of Steiner trees following a binary bottom-up approach (depicted by the corresponding colored regions and following the sequence of orange-colored arrows). By observing Fig. 3, one can observe the feasibility of computing larger tree structures and the corresponding changing topologies and root locations. Also, one can observe from Fig. 3 that the concatenation/bundling of Steiner trees follows a sequential process that is based on the cluster tree Z and is expected to end when a user-defined criterion is met. In this paper, we propose using the following criterion:\n$F = w_l L_t + w_a L_d$    (10)\n$L_t = \\sum_{i=1}^{S} L(t_i)$    (11)\n$L_d = \\sum_{1 < i < j < s} ||R_i - R_j||$    (12)\nwhere $L_t$ is the sum of the lengths of all the Steiner trees in the plane, $L_d$ is the sum of the distances among the roots of the Steiner trees, and $w_l$ and $w_a$ are user-defined coefficients. Whereas $L_t$ aims at measuring the size of Steiner trees, $L_d$ aims at measuring the separation between roots, as potential hubs, corresponding to the entire set of Steiner trees. Thus, finding the optimal configuration of multi-Steiner trees implies minimizing Eq. (10) for user-defined coefficients $w_l$ and $w_a$.\nGiven that Steiner tree concatenation follows a sequential process guided by the cluster Z, Eq. (10) naturally serves as a guiding criterion to evaluate the overall Steiner tree bundling process.\nTo exemplify such mechanism, Fig. 4 denotes the landscape of a cost function that corresponds to Eq. (10) for fixed $w_l$ and $w_a$. In Fig. 4, the x-axis denotes the order of the concatenation (bundling) operation, and the y-axis denotes the value of the cost function computed by Eq. (10). The cost function of the initial set of Steiner trees can be measured when the bundling step is equivalent to one (Step 1 as shown in Fig. 4). Then, subsequent concatenation (bundling) operations render multi-Steiner tree configurations with a lower cost function. However, the landscape of the cost function reaches a flat region starting at bundling step 5-6 (as shown by Step 6 and Step 8 in Fig. 4). Such flat regions in the landscape of the cost function suggest the desirable circumstances to stop the concatenation (bundling) of Steiner trees. For the purpose of the example, Fig. 4 also shows the topologies for Step 12 and Step 17, both of which render an elevated cost function. The landscape of Fig. 4 is dependent upon the configuration of nodes and obstacles in map, and the setting of user-defined coefficients $w_l$ and $w_a$."}, {"title": "III. COMPUTATIONAL EXPERIMENTS", "content": "In order to evaluate the feasibility and the effectiveness of our proposed approach, we performed computational experiments portraying the generation of multiple Steiner trees on the Euclidean plane. This section describes our experimental settings and obtained observations."}, {"title": "A. Settings", "content": "To evaluate the feasibility of generating multi-Steiner trees that avoid clutter and overlap with arbitrary obstacles in the environment, we have generated arbitrary geometries of obstacles and configurations of terminal nodes in the plane. Thus, for our environments for evaluation, we used the following setup:\n\u2022 We used 50 maps in the 2-dimensional domain bounded by a square of 200 by 200 units. Although we use A* algorithm for shortest path finding, our approach is independent of the size of the map due to the fact of computing visibility graphs.\n\u2022 Each map contained five non-overlapping obstacles modeled by polygons with 7 edges considering both convex and non-convex geometry. The generation of obstacle geometry and location within the map was realized through a randomized scheme.\n\u2022 For each map in the 2-dimensional domain, we arbitrarily generated 100 (terminal) nodes over the free navigable space, that is regions outside the obstacle domains.\n\u2022 Also, for each map in the 2-dimensional domain, we considered the computation of diverse configurations of Steiner tree modules corresponding to a parameter $\\theta$ which represents a fraction of the number of terminal nodes n. In particular, we used the ratios $\\theta = {0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5}$."}, {"title": "B. Results and Discussion", "content": "In order to show a glimpse of the kind of trees that our proposed approach is able to generate, Fig. 6 shows examples of multiple Euclidean Steiner trees on the plane for $s = {5, 10, 15, 20, 30}$. By observing Fig. 6, we observe the following facts:\n\u2022 The configuration of obstacles are shown by blue-colored polygons. The root of each Euclidean Steiner tree is shown in a blue-colored sphere, whereas terminal nodes are shown in black-colored spheres. The edges of the Steiner trees are colored by lines with different colors.\n\u2022 Steiner points were automatically added to each corresponding structure of Steiner tree as shown in black colored spheres of smaller size compared to terminal nodes.\n\u2022 It is possible to obtain compact tree structures despite the presence of non-convex obstacles in the map.\n\u2022 The constructed Steiner trees are able to avoid clutter and overlapping with obstacles. This is due to the fact of using a representation of coordinates rendered from the triangulated free navigable space. As such, nodes and edges of the obtained Steiner trees avoid overlap with the obstacles.\n\u2022 Over various tree configurations, it is possible to observe regions that divide the 360\u00b0 into three equal angles. Such configurations are reminiscent to the Fermat-based and hexagonal-based formulations of Steiner trees. In this paper, we make no assumption on the resulting geometries of trees. As such, all obtained tree topologies are the result of the hierarchical bundling of shortest routes and the result of searching for Steiner points over a convex search space by Sequential Quadratic Programming (SQP).\n\u2022 The scenario with $s = 5$ modules of Steiner trees renders relatively larger trees that span wide regions in the map.\n\u2022 The scenario with $s = 30$ modules of Steiner trees renders smaller tree components with 4-5 terminal nodes.\nThe above-mentioned observations show the potential and the feasibility of generating multiple Euclidean Steiner trees in the plane under arbitrary geometry and configuration of terminal nodes and obstacles in the plane.\nIn order to show the overall efficiency and size characteristics of the rendered Steiner trees, Fig. 7 shows (a) the time used to compute Steiner trees as a function of ratio $\\theta$, (b) the average length of trees of Steiner, and (c) the average number of nodes per Steiner tree. By observing the results from Fig. 7, one can observe the following facts:\n\u2022 Generating fewer modules of Steiner trees ($\\theta = 0.05$, $s = 5$) implies rendering Steiner tree structures with more nodes; thus, the higher number of nodes per Steiner tree.\n\u2022 For the above-mentioned cases, the time used to compute each Steiner tree is between 20 and 50s.; whereas trees with a smaller number of nodes can be computed in the order of fewer than 5 s. For instance, computing Steiner trees with 15 - 20 nodes take about 5 s. The large time used in computing relatively larger Steiner trees is due to the shortest path computation in large areas and complex configurations of the visibility graph while taking into account a larger set of terminal nodes.\n\u2022 Generating Steiner trees with $\\theta \\geq 0.25$ takes about 5 s., and the time to generate Steiner trees remains within the upper bound of 5 s. for large $\\theta$.\nIn a second set of experiments, we evaluated the overall efficiency when varying the number of nodes in the plane in the range of 100-1000 nodes, and when varying the number of obstacles in the plane. For faster computations, we used an Intel i9-9900K. Fig. 8 shows the time to compute Steiner trees as a function of $\\theta$. The y-axis of Fig. 8 shows the time profiles used to compute Steiner trees for various configurations of the number of nodes in the map (within the range 100-1000 nodes). Fig. 8 shows the length of the Steiner trees for larger number of nodes. By observing Fig. 8 and Fig. 9, one can note that computing the largest number of Steiner trees takes about 15 - 20 s. and that the overall behaviour of the time performance is consistent with the results obtained in Fig. 7.\nBoth Fig. 7 and Fig. 8 indicate that to compute larger Steiner trees, it is desirable to generate small-scale Steiner tree components, and then concatenate (bundle) the existing components. The computation of multi-Steiner trees as well as the concatenation (bundling) are prone to parallelization schemes. Studying the parallelization performance and the overall scalability in larger networks is left in the scope of our future work.\nIn order to show the characteristics of the cost function for Steiner tree concatenation, Fig. 10 shows the landscape of Eq. (10) for ten arbitrary Steiner tree configurations as a function of concatenation step (bundling step). Here, for simplicity and without loss of generality, we used coefficients $w_a = 0.5$, and $w_l$ in the range of [0.1,12]. By observing Fig. 10, one can note the following facts:\n\u2022 The larger values of $w_l$, as shown by red color in Fig. 10, penalizes the Steiner tree length; thus the cost function shows a decreasing behaviour suggesting that tree concatenation steps (bundling steps) are necessary to minimize the overall cost function.\n\u2022 As a result of executing larger number of concatenation steps (bundling steps), fewer modules of Steiner trees can be obtained.\n\u2022 On the other hand, relatively smaller values of $w_l$, as shown by blue-colored lines in Fig. 10, suggests the existence of u-shaped regions portraying the desirable circumstances to stop tree concatenation.\n\u2022 It is possible to model user-defined cost scenarios for Steiner tree construction and evaluation by using the proposed criterion in Eq. 10.\nThe above-mentioned observations on the cost function are essential to allow users to evaluate tradeoffs between the length of the Steiner trees and the installation of potential multiple roots (hubs) in the plane. Furthermore, the above-mentioned results portray the potential to render obstacle-avoiding multi-Euclidean Steiner trees in the plane. It has been observed that such trees are compact, avoid clutter, and overlap with obstacles. Since the search problem of Steiner trees is an NP-hard combinatorial problem, the use of decentralized networks brings an implicit parallelization feature, which has the potential to compute Steiner trees in decentralized regions of the map with utmost efficiency. Also, we used hierarchical clustering as the main grouping method for modules and shortest paths. Investigating the role of clustering and agglomeration methods on Steiner tree geometry has the potential to elucidate tailored operators for enhanced performance."}, {"title": "IV. CONCLUSION", "content": "In this paper, we explored the feasibility of using a hierarchical bundling approach for constructing obstacle-avoiding multi-Euclidean Steiner trees in the plane. Our method utilizes hierarchical trees to guide the construction of multi-Steiner trees via optimization-based bundling and concatenation of shortest routes and Steiner trees, effectively avoiding clutter and overlap with arbitrary obstacles. This approach not only generates a collection of obstacle-avoiding multi-Euclidean Steiner trees but also concatenates them through hierarchical bundling operations based on a user-defined cost function. Our computational experiments, which involved generating over 500 Steiner trees across 50 maps with various obstacle configurations, demonstrate the feasibility and performance landscape when computing minimal obstacle-avoiding trees in the plane. Investigating the role of additional tree operators in large maps and evaluating decentralized forms of agglomeration strategies is left for future work in our agenda. Also, this paper assumed the fixed roots; investigating the geometry and the optimality of root placement with nonlinear optimization heuristics has the potential to render the versatile instances of multi-Euclidean Steiner. Furthermore, our results have the potential to elucidate new nature-inspired strategies to compute Euclidean Steiner trees in the plane."}]}