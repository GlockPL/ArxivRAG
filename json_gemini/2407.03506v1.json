{"title": "AntibotV: A Multilevel Behaviour-based Framework for Botnets Detection in Vehicular Networks", "authors": ["Rabah Rahal", "Abdelaziz Amara Korba", "Nacira Ghoualmi-Zine", "Yacine Challal", "Mohamed Yacine Ghamri-Doudane"], "abstract": "Connected cars offer safety and efficiency for both individuals and fleets of private vehicles and public transportation companies. However, equipping vehicles with information and communication technologies raises privacy and security concerns, which significantly threaten the user's data and life. Using bot malware, a hacker may compromise a vehicle and control it remotely, for instance, he can disable breaks or start the engine remotely. In this paper, besides in-vehicle attacks existing in the literature, we consider new zero-day bot malware attacks specific to the vehicular context, WSMP-Flood, and Geo-WSMP Flood. Then, we propose AntibotV, a multilevel behaviour-based framework for vehicular botnets detection in vehicular networks. The proposed framework combines two main modules for attack detection, the first one monitors the vehicle's activity at the network level, whereas the second one monitors the in-vehicle activity. The two intrusion detection modules have been trained on a historical network and in-vehicle communication using decision tree algorithms. The experimental results showed that the proposed framework outperforms existing solutions, it achieves a detection rate higher than 97% and a false positive rate lower than 0.14%.", "sections": [{"title": "1 Introduction", "content": "With the proliferation of connected cars, vehicular networks enabled the concept of autonomous fleets of vehicles. Indeed, vehicular networks became a distributed transport fabric capable of making its own decisions about driving customers to their destinations [1]. Nowadays, vehicular networks are used in diverses applications ranging from safety such as blind-spot warning to entertainment such as streaming media. Unlike other wireless networks, the nodes in vehicular networks move at high speeds, causing frequent disconnections, and reducing communication time between nodes. In addition, due to mobility, it is possible to move from one environment to another, and each environment has its characteristics (obstacles, signal propagation, etc.) that influence the quality of communication. To adapt to these challenges, specific communication standards have been proposed to ensure efficient communications between vehicles and infrastructure, among these standards we find the dedicated short-range communication standard (DSRC). DSRC is a communication tech-"}, {"title": "2 Background", "content": "This section provides a description of network and in-Vehicle architecture and communication, as well as a brief state of the art about botnet detection."}, {"title": "2.1 The architecture of vehicular networks", "content": "A vehicular network organizes and connects vehicles with each other, and with fixed-locations resources (Road Side Units). Many telematics architectures, including navigation, traffic information, entertainment, emergency, and safety services can be provided. In these architectures, traffic information and navigation services are generally provided by central TSPs (Telematics Service Providers) through a vehicle-to-infrastructure communication [9]. On the other hand, the emergency and safety services are supplied by an Onboard Unit (OBU) installed by the individual car manufacturers, to allow mutual communication among different vehicular nodes (vehicle-to-vehicle) [10]."}, {"title": "2.1.1 Network stack architecture", "content": "To ensure vehicle-to-vehicle and vehicle-to-infra-structure communication, the automotive industry has developed the dedicated short-range communication standard (DSRC), (Figure 1). A communication technology that relies heavily on several cooperatives and interoperable standards [11]. At the PHY and MAC layers, DSRC utilizes IEEE 802.11p Wireless Access for Vehicular Environments (WAVE). WAVE is an approved amendment of the IEEE 802.11 standard that enables secure wireless communication and physical access for high speed (up to 27 MB/s), short-range (up to 1000 m), and low latency. The spectrum allocated to it is from 5.850 to 5.925 GHz, divided into seven 10 MHz channels [12]. Channel 178 is reserved for control information and the others six channels are used for service applications (Figure 2). At the MAC sublayer extension of DSRC, the IEEE 1609.4 standard is deployed. It is used for priority access, management services, channel switching, and routing [13] in order to enable to operating efficiently on seven channels alternately [14]. As regards the IEEE 1609.2 standard, it includes techniques used to secure application messages and describes administrative functions necessary to support the core security functions [15]. At the Network Layer, DSRC uses the IEEE 1609.3 standard. A standard that supports two protocol stacks, Wave Short Message Protocol (WSMP) and IPv6. The choice between using WSMP or IPv6+UDP/TCP depends on the requirements of the application. For the"}, {"title": "2.1.2 In-Vehicle architecture", "content": "Nowadays, we are witnessing the automotive industry converging to replace the mechanical components of the vehicle with other electronic components labeled electronic control units (ECU), the number of deployed units is expected to reach 3.29 billion by 2025 [17]. ECUs simplify the interior architecture of vehicles, thus repair and diagnose even for those who know nothing about vehicles. Each ECU contains its sensors and actuators, it receives input from its sensors and implements specific functions by its actuators. Communication between these ECUs is ensured through a dedicated bus type especially for vehicular networks; called Controller Area Network (CAN bus). ECUs and CAN buses together form the In-vehicle network (Figure 3). In this In-vehicle network, there are two types of CAN bus (high-speed and low-speed) connected by a gateway [6]. For the communication of critical modules (power train, brake, etc.), the high-speed CAN bus is used. For the other types of modules (telematics, body control, etc.) a low-speed CAN bus is used. The transmission on CAN bus is done sequentially. However, if more than one device transmits at the same time, a media access control (MAC) protocol Carrier-sense multiple access with Collision Resolution (CSMA-CR) is used. CSMA/CR uses priorities in the frame header to avoid collisions [18]."}, {"title": "2.2 Botnets", "content": "A botnet is a collection of internet-connected devices (computers, smartphones, IP cameras, routers, IoT equipment, etc.) called bots that are infected by a malware, to be controlled remotely by an operator (botmaster) without users' knowledge. The communication between the botmaster and the bots is ensured through the Command and Control (C&C) server. Botnets can be used to achieve harmful attacks, such as: launching Distributed Denial-of-Service (DDoS) on rival websites or services, send spam, distribute malwares, stole user/equipment private information, and applying interior activities on the infected devices. For example, the Mirai botnet [19] in 2016, was able to carry out a massive DDoS attack that brought down major sites like Amazon, Netflix, Paypal, and Reddit [20]."}, {"title": "3 Related Work", "content": "Researchers have worked on detecting botnets and overcoming their negative impact. They proposed methods suited to the characteristics of each type of network (communication stack, protocols, characteristics of equipment, etc). Other worked on the protection against DDoS attacks that can be caused by a botnet [21, 22, 23, 24]. We find also different anomaly detection, revolutionary, and hybrid classification techniques proposed to deal with new types of botnets [25, 26, 27, 28, 29, 30, 31, 32, 33]. In [21], the authors proposed an ML-based DDoS detection and identification approach using native cloud telemetry macroscopic monitoring. A lightweight method and completely agnostic to specific protocols and services, which can detect any kind of DDoS attack that target the resources without the need for previous training. The authors in [22] have worked on the detection of Low-Rate DDoS (LR-DDoS) attack (exactly the Shrew attack). They proposed a new mechanism which not only detects and mitigates the shrew attack but traces back the location of the attack sources as well. The attack is detected using the information entropy variations, and the attack sources are traced back using the deterministic packet marking scheme. If the DDoS attack is caused by a botnet, the traceability mechanism can be used to identify bot nodes in the network. Approaches that deal with DDoS can be used to mitigate the effects of botnets (and even to identify bot nodes), however, if the botnet is used for other attacks (e.g. information theft), DDoS detection techniques will not be effective. In [25], the authors proposed a model (known as \"AS-IDS\") that combines two detection approaches (anomaly-based and signature-based) to detect known and unknown attacks in IoT networks. The proposed model has three phases: traffic filtering, preprocessing, and"}, {"title": "4 Threat Models", "content": "In this section, we provide a detailed description of the three categories of cyberattacks that can be executed against a target vehicle using bot malwares. First, we provide a detailed description of two zero-day DDoS attacks. Then based on existing attacks on privacy, we define new scenarios applicable to the vehicular context. Finally, we present some in-vehicle attacks that exist in the literature. Figure 4 shows the different categories of cyberattacks that a hacker may execute using bot malware."}, {"title": "4.1 DDoS attacks", "content": "Due to the differences between DSRC stack and the TCP/IP stack, it is important to consider DDoS attack scenarios specific to the vehicle network, and not be limited to DDoS attacks common to all IP networks. Therefore, in this paper, we consider two zero-day attacks specific to vehicle networks. Both attacks exploit the WAVE Short Message Protocol (WSMP) which is used by security and traffic management applications for the transfer of critical data such as vehicle speed, kinematic state, etc. Both attacks can prevent the transfer of safety messages between vehicles and thus cause catastrophic damage. The WSM packets (Figure 5) exchanged between vehicles are composed of the following fields: WSMP version that gives the version of the protocol, channel number, and data rate to specify which channel and data rate are used for the transmission, WAVE element ID represents the WSMP header, WAVE Length to specify the length of the packet, and the WSM Data field contains the payload data. The Provider Service Identifier field (PSID), identifies the service that the WSM payload is associated with. For example, if an application tries to get access to the WAVE service, it should be registered with its unique Provider Service Identifier (PSID). The WAVE provider devices use PSID in their announcement messages to indicate that a certain application is provided by this device. On the other hands, as the vehicle passing the roadside device, user devices, which may host such application, upon reception of such announcement, compares to check if there is a match between the PSIDs in the announcements and PSIDs in its tables, then the vehicle establishes communication with that roadside unit [11, 12]. In both attacks, the hacker attempts to misuse the WSMP protocol. In the first attack, WSMP flood, the hacker sends to the victim vehicle WSM packets with unknown PSID field values (not associated with any WAVE service). Upon the reception of the forged WSM packet, the target vehicle attempts to check (lookup) for the corresponding entry within its PSID/Service table. Checking the PSID of one WSMP frame will not be a problem. However, checking the PSID of a huge amount of WSM packets at the same time will exhaust the resources of the target vehicle and make it unable to respond or receive legitimate security and convenience application packets. The second attack, geographic WSMP flood, has the same operating mode as WSMP flood, but wider"}, {"title": "4.2 Theft of information", "content": "A team of academics from the University of California at San Diego and the University of Washington has found out that the audio surveillance inside the vehicles is possible [54]. In such situations, the attacker indirectly uses virtual assistance tools (like Siri [55]) by giving it malicious commands hidden in recorded music, innocuous-sounding speech [56] or a low-powered laser [57]. Siri begins recording the conversations using the vehicle's internal microphones and sends them to a remote server belonging to the hacker every 10 or 20 seconds [58]. In the case of GPS tracking, the hacker may attempt to track the vehicle's location in real-time, check the location, or retrieve the complete trajectory. For real-time tracking, the GPS information must be sent every second (streaming) to the botmaster. For the other two types of GPS tracking, the information are sent periodically or on-demand. In this paper, we consider the real-time GPS tracking scenario. The bot vehicle sends the"}, {"title": "4.3 In-Vehicle attacks", "content": "The in-vehicle networks brought convenience to manufacturers, drivers, and after-sales services. However, they raise vulnerabilities [6] that can be exploited by a hacker to conduct the following attacks:\nFrame Falsifying and injection: CAN frames are sent in plaintext, which allows the bot malware within the vehicle to retrieve and analyze their contents. Using the captured data, the bot malware can fabricate fake frames that contain erroneous data to mislead the ECUs. Subsequently, the fabricated frames are injected in CAN bus to carry out malicious activities such as: falsifying the fuel level, changing the speedometer reading, or displaying failure information that may mislead the driver.\nReplay Attack: The frames are transmitted through CAN bus using broadcast and without authentication. Thus, CAN frames can be easily captured by the bot malware to be analyzed and replayed in a second step. In [60], the authors found that the range of valid CAN frames is small. Hence, by iteratively testing CAN frames (i.e., the fuzzing test mentioned in [60]), adversaries can discover many functions of selected ECUs. The replay attack could be used to open the door, start the engine, turn on the lights or remotely drive the vehicle.\nDoS Attack: messages transmitted with the smallest identifier are the messages with the highest priority. The bot malware could use this vulnerability to monopolize the transmission channel, and thus delay or prevent the transmission of legitimate CAN frames. For instance, the bot malware can prevent"}, {"title": "5 AntibotV Framework", "content": "In this section, we describe in detail the AntibotV, a multi-level framework to detect vehicular botnets. Moreover, we describe the detection process based on machine-learning algorithms."}, {"title": "5.1 AntibotV overview", "content": "We suppose that network traffic generated by a bot malware is different from legitimate traffic. In other words, the bot malware alters the traffic pattern of the vehicle. This hypothesis comes from the fact that connected cars run specialized applications related to safety and convenience, such as cooperative collision warning, V2V post-crash notification, congested road notification, etc... Running specialized and particular applications, makes connected vehicles' network traffic pattern regular as long as it is not compromised. Thus, we believe bot malware that compromises a connected vehicle should alter its network traffic pattern. Likewise, at the in-Vehicle level, because of the regularity of communication patterns, it is possible to identify a legitimate in-vehicle traffic pattern, and thus, detect malicious bot activity. The AntibotV is a host-based intrusion detection system, running the system in a vehicle, rather than at some point of the network. The proposed system monitors communication with outside through analyzing network traffic, and it monitors in-vehicle communication by analyzing CAN bus frames. The two-level monitoring allows an effective detection of bot malware activity which consists of sending data and receiving commands from the botmaster, at the network level, and executing control commands, falsify the fuel level, change the speedometer reading or display failure in-formation at the in-vehicle level. The network traffic is characterized using a set of statistical features such as flow duration, total packets sent in the forward direction, minimum packet length, etc (a detailed description of used features is provided in the next section). To characterize the in-vehicle communication a set of twelve features is used including timestamp (recorded time), CAN ID (identifier of CAN message in HEX), DLC (number of data bytes, from 0 to 8), DATA[07] (data value in byte)."}, {"title": "5.2 Traffic collection module", "content": "Used to collect and process the vehicle traffic and apply several pre-treatment operations to extract from the raw data a vector of features, which will be used by the analyzer module. It collects two types of traffic: network flow and CAN bus frames."}, {"title": "5.2.1 Network traffic collector", "content": "This module collects information about network traffic from exchanged packets. Each packet is mapped to a network flow identified by five attributes namely source IP, destination IP, source port, destination port, and protocol. The RFC 3697 [62] defines traffic flow as \"a sequence of packets sent from a particular source to a particular unicast, anycast, or multicast destination that the source desires to label as a flow\". TCP flows are usually terminated upon connection teardown (by FIN packet) while UDP flows are terminated by a flow timeout. Table 2 shows the list of network flow-based features extracted for each network flow. In the end, the network traffic collector generates a vector of calculated features, then transfers it to the analyzer module."}, {"title": "5.2.2 In-vehicle traffic collector", "content": "The in-vehicle traffic collector module analyses frames exchanged on CAN bus. Unlike the network traffic, which is processed as flows, the in-vehicle traffic is analysed using the deep frames inspection technique. The analysis is carried out through real-time observation of frames as they traverse CAN bus links. A CAN bus frame contains the following fields: the Start of Frame (1b), Message-ID (an 11b identifier that represents the message priority), Control fields (3b), Data Length (number of data bytes, 4b, from 0 to 8), Data[07] (Data to be transmitted, 0-64b), CRC (15b), ACK fields (3b), End of Frame Delimiter (7b) [63]. The in-vehicle traffic collector generates a features vector with the following fields: timestamp (recorded time), CAN ID, DLC, and the DATA, as illustrated in table 3. The timestamp and CAN ID fields could be used to detect DoS and replay attacks, which exploits the vulnerability of ID priority as described previously in section 4. The DLC and DATA fields could be used to detect falsified and injected frames. Then, the feature vector is transferred to the analyzer module."}, {"title": "5.3 Analyzer module", "content": "It is the most important module of the framework. Since this module handles two types of independent traffic, it uses two analyzers. The first analyzer is responsible for analyzing network traffic, the second one to analyze CAN bus frames. The network analyzer is a classifier trained using supervised machine learning algorithms on legitimate and malicious network traffic. The legitimate network traffic is generated by running specialized vehicular application related to safety [64], convenience [65] and commercial [66] applications. The malicious network traffic is related to typical bot malware's ac-tivities such as DOS and information theft attacks. The in-Vehicle analyzer is a classifier trained using super-vised machine learning algorithms on legitimate and malicious (DoS, Fuzzy, RPM, and Gear) CAN frames. Both classifiers are generated in a central server then integrated into the framework. Within the vehicle, the two classifiers are used for continuous monitoring of network traffic and CAN bus traffic. The network analyzer uses the calculated network features to classify the received network flow in one of three classes: normal, DOS, or information theft. The in-Vehicle analyzer classifies CAN bus frames based on the calculated features into four classes: normal, DOS, frames injection or Replay attack. If a malicious net-work flow or CAN bus frame is detected, then the ana-lyzer module sends an alert to the manager module to take immediate action. Otherwise, it will be ignored. To train both analyzers we use the following supervised machine learning algorithms. For each analyzer, we choose the algorithm that gives the best perfor-mances. The following algorithms are selected for their known efficiency and classification performances:\nNaive Bayes Algorithm: It is a probabilistic classifier that makes classifications using the maximum a posteriori decision rule in a Bayesian setting. It operates on a strong independence assumption, which means that the probability of one attribute does not affect the probability of the other.\n$P(c | x) = \\frac{P(x | c) * P(c)}{P(x)}$ (1)\n$P(c | x) = P(x1 | c)*P(x2 | c)*...*P(xn | c)*P(c)$(2)\nP(cx) is the posteriori probability of class (target) given predictor (attribute). P(c) is the prior probability of class. P(x|c) is the likelihood, which is the probability of predictor given class. P(x) is the prior probability of predictor.\nSupport Vector Machine(SVM): Each data item is plotted as a point in n-dimensional space (where n is the number of features) with the value of each feature being the value of a particular coordinate. Then, the classification technique is performed to differentiate the classes and define which one the data points belong to.\nK-Nearest Neighbour: the k-nearest neighbours algorithm (k-NN) is a non-parametric method used for classification and regression [67]. It works based on minimum distance from the query instance to the training samples to determine the K-nearest neighbours. After gathering the K nearest neighbours, it takes a simple majority of these K-nearest neigh-"}, {"title": "5.4 Manager module", "content": "The manager module handle alerts and triggers adequate response measures according to the detected attacks. Whenever the analyzer module detects a botnet activity, it sends an alert to the manager module. The latter logs the traces of the corresponding event and notify the driver. If a DoS attack is detected the manager module terminates the network session with the victim vehicle. In the case of theft of information, the manager saves logs and notifies the driver. If the driver does not approve the transfer, the connection to the destination address will be blocked. Otherwise, the flow will be ignored. At the in-vehicle level, when the analyzer detects a CAN frame as belonging to a botnet activity, it sends an alert to the manager, which will notify the driver. To avoid interrupting wrongly vehicle's services, whatever the type of detected attacks, the manager module asks for the driver's approval before undertaking any response measures. When the driver is notified depends on the attack. The most serious cases (disabling brake attacks) require direct notification. However, in other scenarios that do not have an impact on the driver's"}, {"title": "6 Experimentation", "content": "In this section, we provide the evaluation results of the proposed framework. First, we describe in details the datasets used in this research, and the pre-processing operations we have carried out. Since the proposed framework monitors the in-vehicle and network communication, we have used two datasets to evaluate its performance, the first one contains vehicular network traffic, the second one in-vehicle traffic [70]. A detailed description of the two datasets is provided below."}, {"title": "6.1 Network traffic dataset", "content": "To the best of our knowledge, no real vehicular network traffic dataset including botnet traffic is publicly available. Thus, we simulate vehicular botnet activity discussed in section 4. To generate realistic benign vehicular network traffic, we have implemented 17 applications including safety, convenience and commercial applications, the list of applications (inspired from [71]) with their brief description is provided in table 4, and the simulation parameters and scenarios are described further in this section. To ensure that the generated traffic is representative of real benign traffic and covers diverse types of application, we have considered the following factors for choosing applications: 1) physical-layer channel (CCH & SCH); 2) transfer protocols (IP & WSMP); 3) message TTL (single-hop & multi-hop); 4) routing protocol (geocast, broadcast & unicast); 5)"}, {"title": "6.1.2 Features extraction", "content": "After collecting the network traffic generated during simulation (as PCAP files), we have extracted a set of 79 network features (see table 2). To extract features we have used CICFlowMeter [75], a network traffic flow generator distributed by the Canadian Institut for Cyber Security (CIC). It generates bidirectional flows, where the first packet determines the forward (source to destination) and backward (destination to source) directions. Note that TCP flows are usually terminated upon connection teardown (by FIN packet) while UDP flows are terminated by a flow timeout. The flow timeout value can be assigned arbitrarily by the individual scheme e.g., 600 seconds for both TCP and UDP. The list of network flow-based features extracted for each network flow is composed of three categories of features: time, bytes, and packets based features. We believe that time-based features (Flow IAT, Fwd IAT and Idle Time) are useful to detect DoS attacks because the time interval between successive packets is too short. Also, time-based features allow detection of periodic events such as periodic transfer of collected information in the case of theft of information. The bytes/packets based features allow the detection of large and abnormal traffic increases, which are symptomatic of DoS attacks."}, {"title": "6.1.3 Data pre-processing and features selection", "content": "For the data pre-processing step, we did the cleaning and the normalization. To check missing values and"}, {"title": "6.3 Results and discussion", "content": "To build the classification models for both analyzers (network and in-vehicle), we apply the supervised machine learning algorithms described in section 5.3 with their default paramaters. For each analyzer, we choose the algorithm that gives the best performances. We train, validate and test the two classification models separately (network and in-vehicle analyzer). From each dataset, we take 60% of the dataset to train and validate the classification model through 10-fold cross-validation, and the remainder 40% for testing the model. Six common metrics, accuracy, precision, recall, F1_score, false fositive rate, and false negative rate have been selected to evaluate the classification performances, the aforementioned metrics can be calculated as follows:\nAccuracy = (TP + TN)/(TP + FP + FN + TN) (7)\nPrecision =TP/(TP + FP) (8)\nRecall = TP/(TP + FN) (9)\nF1_score =(2*(precision*recall))/(precision+recall) (10)\nFPR = FP/(TN + FP) (11)\nFNR = FN/(TP + FN) (12)\nwhere TP, FP, TN and FN denote true positive, false positive, true negative, and false negative, respectively."}, {"title": "6.3.1 Malicious network traffic detection", "content": "In this experiment, we evaluate the performances of AntibotV on classifying a network connection as legitimate or as malicious. As we can see from table 10, all the classifiers show high accuracy (>85%), the highest accuracy is achieved by decision tree (99.4%) followed by random forest (99.3%), while naive Bayes presents the lowest accuracy. However, accuracy is not enough to evaluate and select the best classification model. Therefore, other important metrics such as recall (detection rate), precision, false negative rate (FNR) and false positive rate (FPR) need to be taken into consideration. Figure 8 compare the recall, F1-score, FNR, and FPR for benign and malicious traffic. Decision tree presents the best average recall, however, the malicious detection rate is found to be 79,70%, which represents an intolerable false negative rate (>20 %). Although the decision tree can recognize legitimate traffic with high precision, the malicious traffic detection performance is not promising. The poor detection rate of malicious traffic is due to the heterogeneity of legitimate traffic. Unlike the other types of networks, in vehicular networks, there are two types of network traffic: IP and WSMP. The two network traffic show different traffic patterns influenced by several factors such as the context of use, duration, size of packets, etc. This difference represents a challenge in training the classification model and subsequently mislead the classifier on differentiating between legitimate WSMP and malicious traffic. To overcome the aforementioned issue, we create two classes of legitimate traffic by separating WSMP"}, {"title": "6.4 Discussion and comparison", "content": "We compared our solution against the solution presented in [7] that tackled the detection of vehicular botnets, the authors used anomaly detection technique to allow detection of new forms of injected BSMs messages. The detection solution assumes a specific botnet communication protocol (GHOST), which makes it unable to detect botnet using a different communication protocol. The proposed framework AntibotV does not suppose a particular botnet communication protocol, so the detection approach works independently of the botnet communication protocol. Limiting detection to monitoring only network communication, makes [7] unable to detect in-vehicle attacks. Thanks to two-level monitoring, AntibotV can also detect in-vehicle attacks. Compared to [7], AntibotV delivers better accuracy and lower false positive rate (see table 14). In [70], the authors considered in-vehicle threats, they proposed an anomaly detection framework based on convolutional neural network and deep neural network. Although AntibotV delivers better performances, the proposed approach [70] can detect unseen attacks, but to the detriment of false alerts. Furthermore, deep learning techniques require a large amount of computational and memory resources, which could be constraining in vehicular context. The authors in [22] have proposed a mechanism which, detects, mitigates and traces back the location of a Low-Rate DDoS attacker. If the DDoS attack is caused by a botnet, the traceability mechanism can be used to identify bot nodes in the network. However, if the botnet is used to apply other threats (e.g. information theft), the proposed detection techniques will not be effective anymore, unlike our proposed framework (Antibotv), which is able to deal with different types of botnet threats at different levels. Table 14 provides a qualitative comparison between AntibotV and [7, 22] (different databases), and a quantitative comparison with [70] (the same in-vehicular traffic database)."}, {"title": "7 Conclusion", "content": "In this paper, we have proposed AntibotV, a multilevel behaviour-based framework to detect vehicular botnets. We have considered new zero-day attacks, as well as a wide range of DoS and in-vehicle attacks. The proposed framework monitors the vehicle's activity at network and in-vehicle levels. To build the detection system, we have collected network traffic data of legitimate and malicious applications. Then, training using decision tree a new classifier with a set of features that we have extracted and selected. Likewise, we have trained a decision tree with in-vehicle data. The experimental"}]}