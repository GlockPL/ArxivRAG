{"title": "Fast and Memory-Efficient Video Diffusion Using Streamlined Inference", "authors": ["Zheng Zhan", "Yushu Wu", "Yifan Gong", "Zichong Meng", "Zhenglun Kong", "Changdi Yang", "Geng Yuan", "Pu Zhao", "Wei Niu", "Yanzhi Wang"], "abstract": "The rapid progress in artificial intelligence-generated content (AIGC), especially with diffusion models, has significantly advanced development of high-quality video generation. However, current video diffusion models exhibit demanding computational requirements and high peak memory usage, especially for generating longer and higher-resolution videos. These limitations greatly hinder the practical application of video diffusion models on standard hardware platforms. To tackle this issue, we present a novel, training-free framework named Streamlined Inference, which leverages the temporal and spatial properties of video diffusion models. Our approach integrates three core components: Feature Slicer, Operator Grouping, and Step Rehash. Specifically, Feature Slicer effectively partitions input features into sub-features and Operator Grouping processes each sub-feature with a group of consecutive operators, resulting in significant memory reduction without sacrificing the quality or speed. Step Rehash further exploits the similarity between adjacent steps in diffusion, and accelerates inference through skipping unnecessary steps. Extensive experiments demonstrate that our approach significantly reduces peak memory and computational overhead, making it feasible to generate high-quality videos on a single consumer GPU (e.g., reducing peak memory of AnimateDiff from 42GB to 11GB, featuring faster inference on 2080Ti)\u00b9.", "sections": [{"title": "1 Introduction", "content": "Recent years have witnessed continual progress and advancements in artificial intelligence-generated content (AIGC). Among them, diffusion models allow artists and amateurs to create visual content"}, {"title": "2 Related Work", "content": "Video Diffuison Models. For video generation, various approaches have been proposed, with VDM [17] as a leading example. VDM transforms the conventional U-Net [30] architecture of image diffusion models into a 3D U-Net structure, employing joint training on both images and videos. MagicVideo [49] is the first work that introduces Latent Diffusion Model (LDM) for text-to-video (T2V) generation in latent space. LVDM [13] introduces a mask sampling technique that enhances its longer video generation capability. ModelScope [36] incorporates spatial-temporal convolution and attention into LDM. Video LDM [4] trains a T2V network composed of three training stages, enabling higher quality and longer video generation. Show-1 [45] first introduces the fusion of pixel-based and latent-based diffusion models for T2V generation. Recently, Stable Video Diffusion (SVD) [3] identifies three key stages for training video LDMs: text-to-image (T2I) pretraining, video pretraining, and high-quality video finetuning.\nArchitectural Efficiency of Video Diffusion Models. There are various research efforts exploring either architectural efficiency or model compression techniques for image/video generation. For example, ED-T2V [24] freezes parameters to reduce training costs and proposes a attention mecha-nism to ensure temporal coherence. SimDA [40] devises a parameter-efficient training approach by maintaining the parameter of the T2I model and uses two adapters to train it. For model compression, Diff-pruning [6] employs structural pruning techniques to reduce inference time at each sampling step. Additionally, the work [22] implements quantization on diffusion models using low-precision data types. However, these methods take substantial efforts to retrain or finetune the diffusion model to recover performance, which is costly, time-consuming, and may raise data privacy concerns. Furthermore, applying post-training compression techniques in one-shot [8, 7, 34] may save the retraining/fine-tuning efforts, but suffers from significant performance degradation.\nSample-Efficient Video Diffusion Models. To address the iterative denoising process in diffusion models and improve the sampling efficiency, two approaches are proposed. The first approach [2, 19, 5, 25] focuses on creating rapid solvers to resolve the differential equation associated with the denoising process more effectively. The works [31, 27, 21] utilize knowledge distillation methods to compress and simplify the sampling trajectory efficiently, thereby enhancing overall performance. Imagen video [15] is one of the first methods to apply progressive distillation on video diffusion models, incorporating guidance and stochastic samplers. Recent work Deepcache [26] proposes a novel training-free paradigm that accelerates diffusion models by reusing the high-level features."}, {"title": "3 Motivation", "content": "Peak memory and computation analysis. Existing open-source video diffusion models [11, 3, 36, 46] typically adopt a pretrained T2I 2D-UNet as backbone. Their temporal layers are seamlessly integrated into the backbone 2D-UNet, positioned after every spatial layer. Here, we use SVD as an example to demonstrate how peak memory and computational overhead scale with the number of frames. The SVD model is trained with two distinct configurations: regular SVD is designed to generate 14 frames, while SVD-XT is tailored to produce 25 frames. To generate 14 or 25 video frames concurrently with SVD, its latent features require massive GPU memory and computation consumption, estimated to be approximately 14\u00d7 or 25\u00d7 higher than its base T2I model. This"}, {"title": "4 Streamlined Inference Framework", "content": "To address the above massive peak memory and computation costs, in this section, we propose a training-free framework named Streamlined Inference, which is composed of three core components: Feature Slicer, Operator Grouping, and Step Rehash. First, we discuss Feature Slicer, designed to partition input features of spatial and temporal layers, and enable the potential of massive peak memory reduction. Next, we introduce our Operator Grouping technique to aggregate homogeneous and consecutive operators into the same group, achieving the full potential of Feature Slicer to reduce peak memory through reusing the memory of intermediate result from previous sliced feature. Finally, we discuss our Step Rehash method to reuse the same feature for a few consecutive steps due to their high similarity. It accelerates the inference without increasing peak memory overhead as it skips certain denoising steps with less computations."}, {"title": "4.1 Feature Slicer", "content": "Video diffusion models contain spatial and temporal layers which extract the corresponding infor-mation from their specific domains. On this basis, we propose a feature slicer that consists of two components: Spatial-layer slicer and Temporal-layer slicer, to divide the feature map into multiple batches/sub-features, ensuring accurate computation without introducing additional operations. The slicer is further utilized for Operator Grouping to reduce peak memory cost.\nSpatial layers slicer. Based on our profiling (more details can be found in Appendix A) for memory allocation of various video diffusion models, we find that performing slices at spatial layers can greatly reduce the memory footprint. The 5-D feature in the spatial layer $X \\in \\mathbb{R}^{B \\times T \\times C \\times H \\times W}$ can be reshaped to a 4-D feature $X \\in \\mathbb{R}^{(B \\times T) \\times C \\times H \\times W}$, where B,T, C, H, W are the batch size, number of frames, channels, height, and width, respectively. Thus, we slice it into k sub-features, ${X_i \\in \\mathbb{R}^{n_i \\times C \\times H \\times W}}_{i=1}^{k}$, where $n_i = \\lceil B \\times T/k \\rceil$ with $\\lceil \\cdot \\rceil$ denoting the least integer greater than or equal to the input. If $\\lceil B \\times T/k \\rceil \\neq B \\times T/k$, the dimension of the last sub-feature $n_k$ is different"}, {"title": "4.2 Operator Grouping", "content": "Although Feature Slicer converts the original feature map into multiple smaller sub-features with reduced memory footprint, the peak memory can not be reduced since the intermediate results of multiple sliced features require re-consolidation to send to the next layer/operator as inputs. It still needs to store all intermediate outputs of sliced features to form the united/unsliced intermediate feature map without actual peak memory reduction. Therefore, to address this problem, we propose Operator Grouping to group the operators accordingly in the computational graph, achieving the full potential of Feature Slicer with effective peak memory reduction due to less memory reserved for intermediate results. Furthermore, a pipeline technique is proposed to optimize the inference of operator groups with improved parallelism and practical acceleration."}, {"title": "4.2.1 Grouping Operators for Peak Memory Reduction", "content": "Operator Grouping directly re-uses existing operators by aggregating consecutive homogeneous operators into the same group. Homogeneous operators indicate these operators extract features from coherent domains and dimensions. In video diffusion models, different operators can be grouped into Group$OP_t$ (temporal operator groups) and Group$OP_s$ (spatial operators groups) to ensure the well-preserved semantics of sliced sub-features within each group. For example, in the SVD Model [3], consecutive GroupNorm, Conv2D, SiLU, and Up/DownSample operators in the Spatial ResBlock can be aggregated to one group, as these operators all extract features from spatial domain and are deemed homogeneous. As shown in Fig. 4, when computing the output feature $X^o$ for an operator group (GroupOP), the input feature X is sliced into multiple sub-features $X_1, X_2, ..., X_k$ with Feature Slicer. Each sub-feature $X_i$ goes through the operator group and their outputs are concatenated after all outputs are available, as shown in Eq. (1),\n$X^o = Concat(GroupOP(X_1), GroupOP(X_2), ..., GroupOP(X_k))\\qquad(1)$\nwhere k is the number of slices, and Concat is the concatenation operation.\nReducing peak memory cost. As shown in Fig. 4, the peak memory with the operator group is determined by the memory footprint of the input feature, the output feature, and the intermediate"}, {"title": "4.2.2 Pipelining with Improved Parallelism and Practical Acceleration.", "content": "With the proposed Feature Slicer and Operator Grouping, the peak memory will decrease significantly with a marginal increase for the computation runtime (based on the basic for-loop implementation). With a deeper investigation for the computation patterns, we find that the for-loop implementation cannot maximize GPU parallelism, and further employ the pipelining technique to optimize the for-loop implementation for faster inference without additional memory cost.\nWith Operator Grouping, there are multiple operators in one group to process one sliced sub-feature sequentially. With the naive for-loop implementation, before feeding each sliced sub-feature into another operator group, it needs to wait until the last sub-feature finishes its computation within the group. The parallelism can be further improved with the proposed pipeline method. Specifically, in an operator group, after a sliced feature map is computed by the out-of-place computation operator (e.g., Conv, GroupNorm, Attention, etc.) and sent to the next operator, its previous allocated memory is no longer required, but it is still reserved during inference, leading to resource waste. We can pipeline all operators in the same group to mitigate this issue. As shown in Fig. 4(c), once the Conv operator completes processing a sliced feature $X_i$ as described in Eq. (1) and its outputs are sent to the next operator Norm, the subsequent sliced feature $X_{i+1}$ is immediately piped into the same Conv operator, reusing the reserved memory of $X_i$. In this way, multiple operators are executed simultaneously with improved parallelism. No additional memory is required, as we only make use of previously reserved memory.\nAcceleration performance. With the naive for-loop implementation, only one operator in an operator group is executed at a time. However, our pipeline method can simultaneously execute multiple operators (such as Conv, Norm, and Activation as depicted in Fig. 4 (c)) without incurring additional memory. Consequently, the inference speed can be further improved. Accordingly, integrating the pipeline within Operator Grouping can mitigate 10% speed degradation caused by feature slicing."}, {"title": "4.3 Step Rehash", "content": "In this section, we further introduce our step rehash method to optimize the iterative denoising steps for effective acceleration in video diffusion generation. Capitalized on the high similarity between adjacent steps, our approach accelerates the video generation, while ensuring both high quality and temporal consistency across video frames, without extra memory cost. Next we first discuss our observations for the high feature similarity and then explain details of our step rehash."}, {"title": "4.3.1 Similarity of Temporal Features between Steps", "content": "Similarity visualization. The denoising process of U-Net in diffusion models requires multiple steps and the features of different steps may share certain similarities with minor differences [26]. To explore this, we analyze the feature maps averaged over multiple images at different parts of the model and plot the similarity between features of different steps, with an example shown in Fig. 5 (and more results and details demonstrated in Appendix C). We find two key insights below:"}, {"title": "4.3.2 Step Rehash", "content": "Here we specify the details of our step rehash. The video diffusion models typically use a U-Net architecture with 4 down-sampling and 4 up-sampling blocks, and their output features can be represented by $D^s_b$ and $U^s_b$, respectively, with s denoting the current step number as shown in Fig. 6. Typically, $U^s_b$ is obtained by feeding $D^s_b$ and $U^{s-1}_b$ into the bth (b > 0) up-sampling block, and $U^s$ is the final output of the sth step. Based on similarity analysis, in the next step s + 1, we can directly reuse the output features of the temporal layer from the previous step s without actual exact computations. Our insights into the similarity indicate that deeper and middle blocks do not consistently demonstrate high similarity. Reusing their features results in significant degradation of generation quality. Therefore, we rehash features of the temporal layer in the final up-sampling block. Specifically, to obtain $U^{s+1, 3}$ for step s + 1, we feed the output features of the temporal layer from $U^{s, 3}$ (current full computation step) into the final up-sampling block. Note that we only compute part of $U^{s+1, 3}$ and do not need to compute $D^{s+1,3}$ for concatenation, since our reused temporal layer is deeper than the concat operator for features from $D^{s+1}_b$, as shown in Fig. 6. We further propose a step search algorithm to solve the when to skip problem, algorithm details can be found in Appendix B."}, {"title": "5 Experimental results", "content": "5.1 Models, Datasets and Evaluation Metrics\nWe conduct the experiments on representative video diffusion models, including SVD [3], SVD-XT [3], and AnimateDiff [11]. For evaluation, we use the following evaluation protocols: The first frame of the video clips are extracted as the image condition for image-to-video generation and their captions are considered as the prompts. All experiments are conducted on a NVIDIA A100 GPU."}, {"title": "6 Conclusion and Limitation", "content": "In this paper, we propose a novel training-free framework that significantly reduces peak memory and computation costs for video diffusion model inference by leveraging its spatial and temporal charac-teristics. Our approach can be seamlessly integrated into existing models. Extensive experiments on"}]}