{"title": "UniMTS: Unified Pre-training for Motion Time Series", "authors": ["Xiyuan Zhang", "Diyan Teng", "Ranak Roy Chowdhury", "Shuheng Li", "Dezhi Hong", "Rajesh K. Gupta", "Jingbo Shang"], "abstract": "Motion time series collected from mobile and wearable devices such as smart- phones and smartwatches offer significant insights into human behavioral patterns, with wide applications in healthcare, automation, IoT, and AR/XR due to their low- power, always-on nature. However, given security and privacy concerns, building large-scale motion time series datasets remains difficult, preventing the develop- ment of pre-trained models for human activity analysis. Typically, existing models are trained and tested on the same dataset, leading to poor generalizability across variations in device location, device mounting orientation and human activity type. In this paper, we introduce UniMTS\u00b9, the first unified pre-training procedure for motion time series that generalizes across diverse device latent factors and activities. Specifically, we employ a contrastive learning framework that aligns motion time series with text descriptions enriched by large language models. This helps the model learn the semantics of time series to generalize across activities. Given the absence of large-scale motion time series data, we derive and synthesize time series from existing motion skeleton data with all-joint coverage. Spatio-temporal graph networks are utilized to capture the relationships across joints for gener- alization across different device locations. We further design rotation-invariant augmentation to make the model agnostic to changes in device mounting orienta- tions. Our model shows exceptional generalizability across 18 motion time series classification benchmark datasets, outperforming the best baselines by 340% in the zero-shot setting, 16.3% in the few-shot setting, and 9.2% in the full-shot setting.", "sections": [{"title": "1 Introduction", "content": "Recognition of human motion using time series from mobile and wearable devices, such as accelera- tions and angular velocities, is widely adopted as a key context information for various applications from health condition monitoring [4], sports activity analysis [1] to user habit studies [50]. Compared with vision-based approaches, methods based on motion sensor time series offer more energy-efficient and cost-effective solutions with enhanced privacy protection [54], making them preferable."}, {"title": "2 Related Works", "content": "Conventional motion time series classification approaches train a dedicated classifier for each dataset, and can be categorized into statistical feature extraction methods [15] and deep learning"}, {"title": "3 Method", "content": "UniMTS follows the contrastive learning framework which aligns paired motion time series with text descriptions to enable activity generalization, as shown in Figure 2. We simulate motion time series from motion skeleton data (Section 3.1) and augment them for orientation generalization (Section 3.2). We use graph encoder to model the simulated motion time series, capturing correlations among joints to generalize across different device locations (Section 3.3.1). To enhance semantics learning, text descriptions are also augmented by large language models (Section 3.3.2)."}, {"title": "3.1 Physics Engine for Motion Time Series Simulation", "content": "Motion skeleton data [19] describe the movements of human skeleton joints over time, containing positions and orientations for each joint. On the other hand, motion time series captured by physical sensors typically measure higher-order data such as accelerations and angular velocities. Conse- quently, we apply motion equations [65] to synthesize these time series of accelerations and angular velocities from motion skeleton data. More specifically, for each skeleton joint $J_i$, we input both positions $p_{J_i}(t)$ (mapped from time domain T to $R^3$, defined in global frame G), and orientation quaternions $q_{J_i,GL}(t)$ (mapped from time domain T to the Special Orthogonal Group SO(3), defined in Hamilton convention with subscript GL representing a frame rotation from local frame L to global frame G). We drop the subscript G and GL from here on for simplicity of notation. Based on motion equations [65], we calculate velocities $v_{J_i}$ and accelerations $a_{J_i}$, by taking the first and second order derivatives of positions $p_{J_i}(t)$. These derivatives are then transformed from global frames to local frames using the corresponding orientation sequences $q_{J_i}(t)$. Similarly, angular velocities $\\omega_{J_i}$ are computed by taking the first order derivatives of orientation quaternions $q_{J_i}(t)$. Mathematically,\n\n$v_{J_i}(t) = q_{J_i}^*(t) \\otimes p'_{J_i}(t) \\otimes q_{J_i}(t)$,\n\n$a_{J_i}(t) = q_{J_i}^*(t) \\otimes p''_{J_i}(t) \\otimes q_{J_i}(t)$,\n\n$\\omega_{J_i}(t) = 2q_{J_i}^*(t) \\otimes q'_{J_i}(t)$,\n\nwhere $^*$, and $\\otimes$ represent the quaternion multiplication operator and the quaternion conjugate.\n\nRecognizing the inherent presence of noise carried by sensors in practice, the physics engine incorpo- rates Gaussian noise with a zero mean into the simulated data. Representing the above motion time series as $x_{J_i}(t)$, which can denote either $a_{J_i}(t)$ (accelerations) or $\\omega_{J_i}(t)$ (angular velocities), the noisy time series $\\tilde{x}_{J_i}(t)$ are formulated as\n\n$\\tilde{x}_{J_i}(t) = x_{J_i}(t) + n_{J_i}(t), n_{J_i}(t) \\sim \\mathcal{N}(0, \\sigma)$."}, {"title": "3.2 Rotation-Invariant Augmentation", "content": "A common limitation we have identified from prior studies that leads to their poor generalization is that they fail to consider the impact of latent device orientation factors on the motion time series. For example, end users can potentially wear devices in various orientations, such as with a phone facing towards or against the body in a pocket. Additionally, the software driver API for axis definition can be arbitrarily configured by the developers. For example, the iOS system defines acceleration in an opposite direction compared to the Android system\u00b2. With the listed risk factors considered, we apply a data augmentation technique to simulate random orientations during pre-training, so that our learned model achieves rotation-invariance during deployment [7, 57, 61]. Specifically, during pre-training, for each iteration we sample a random rotation matrix for each joint $J_i$,\n\n$R_{J_i} \\sim \\text{Uniform}(SO(3))$,\n\nand compute the augmented time series $\\tilde{x}'_{J_i}$ at timesteps $t = 1,2,\\dots,T$ as\n\n$\\tilde{x}'_{J_i} = R_{J_i} \\tilde{x}_{J_i}$.\n\nDuring one iteration, the same $R_{J_i}$ is consistently applied to $J_i$ for every time series and every timestep $t = 1,2,\\dots,T$. The rotation-invariant augmentation ensures that the simulated time series are adaptable to any downstream orientation, thereby enhancing the generalization capabilities."}, {"title": "3.3 Contrastive Learning", "content": "The physics engine generates sufficient motion time series data, which are subsequently encoded by graph networks and aligned with their corresponding text embeddings through contrastive learning."}, {"title": "3.3.1 Graph Encoder", "content": "To capture the spatio-temporal correlations among different joints over time, we adopt spatio-temporal graph convolutional network [63] as our motion time series encoder. We denote the initial input graph representation as follows,\n\n$\\mathcal{G} = {\\mathcal{V}, \\mathcal{E}_s, \\mathcal{E}_t} \\mid \\mathcal{V} = \\{x_{J_i}\\}_{i=1}^V, \\mathcal{E}_s = \\{(x_{J_i}, x_{J_i'}) \\mid (J_i, J_{i'}) \\in \\mathcal{H}\\}, \\mathcal{E}_t = \\{(x_{J_i,t}, x_{J_i,t+1})\\}_{i=1}^V,_{t=2}^T$.\n\nNodes $\\mathcal{V}$ contain skeleton joints with features $X \\in \\mathbb{R}^{C \\times T \\times V}$, where $C, T, V$ represent the number of signal channels, temporal steps and joint nodes. Spatial edges $\\mathcal{E}_s$ connect adjacent nodes defined by the skeleton structure $\\mathcal{H}$ and temporal edges $\\mathcal{E}_t$ connect temporally adjacent frames.\n\nIn practice, devices may not cover the complete joints but are rather positioned at arbitrary subsets of the complete joints. To simulate this, during each pre-training iteration, we randomly select a subset of joints and mask data from the remaining joints with zeros. We denote the mask at one iteration as $M \\in \\mathbb{R}^{C \\times T \\times V}$, where $M_i \\in \\mathbb{R}^{C \\times T}$ is 1 if joint $J_i$ is selected, and $M_i = 0$ if joint $J_i$ is masked:\n\n$\\hat{X} = X \\odot M$,\n\nThe graph convolution network $g_\\phi$ first computes the spatial output features as\n\n$X_{out} = \\sum_{k=1}^K \\Phi_k (X(\\Lambda \\tilde{A}^k X \\tilde{A}^k))$,\n\nwhere $K$ denotes the spatial kernel size, $A_k$ represents whether node $x_{j'}$ belongs to the spatial convolution sampling subset $S_k$ of node $x_i$, and $\\Lambda = \\sum_i (A_{ij}) + \\alpha$ represents the normalized diagonal matrix, with $\\alpha$ set to 0.001 to prevent empty rows [63, 48]. $\\Phi_k \\in \\mathbb{R}^{C' \\times C \\times 1 \\times 1}$ represents weights of the 1 $\\times$ 1 convolution operation with $C'$ denoting output channel dimension. Following spatial convolution, we further perform $K_t \\times$ 1 temporal convolution on the spatial output features $X_{out}$, similar to classical convolution operations, where $K_t$ represents the temporal kernel size. The final graph representation $g_\\phi(X)$ is derived by averaging features across both spatial and temporal dimensions with a graph average pooling layer at the end."}, {"title": "3.3.2 Text Encoder", "content": "To increase the diversity of paired text descriptions in the pre-training motion corpus [19], we apply large language models (GPT-3.5) to augment original motion text descriptions with the following prompt template: The following one or multiple descriptions are describing the same human activities: <motion descriptions>. Generate k paraphrases to describe the same activities.\n\nWe denote the original text descriptions combined with the LLM-augmented ones as Y. We encode them using the same text encoder $f_\\theta$ as CLIP [44], utilizing its pre-trained weights for initialization."}, {"title": "3.3.3 Training and Inference", "content": "During pre-training, we maximize the similarities of paired simulated motion time series and text descriptions through contrastive learning:\n\n$\\mathcal{L}_{ctr} = - \\frac{1}{B} \\sum_{i=1}^B \\log \\frac{\\exp(\\text{sim}(g_\\phi(X_i), f_\\theta(Y_i))/\\tau)}{\\sum_{j=1}^B \\exp(\\text{sim}(g_\\phi(X_i), f_\\theta(Y_j))/\\tau)}$,\n\nwhere $B, \\tau$ represent batch size and temperature parameter that controls distribution concentrations, and sim represents similarity score computed as inner product:\n\n$\\text{sim}(g_\\phi(X_i), f_\\theta(Y_i)) = \\langle g_\\phi(X_i), f_\\theta(Y_i) \\rangle$.\n\nWe pre-train the graph and text encoders using simulated motion time series and augmented text descriptions. During inference, we evaluate the model on real-world motion time series, as illustrated in the left part of Figure 3. For the text encoder, we input all label candidates. For the graph encoder, we assign real motion time series to the nearest joint in the skeleton graph and assign zeros to the remaining joints. The random mask M during pre-training emulates the zero-masking process. We compute the similarity score of the graph embedding with text embedding from each label candidate, and choose the label with the highest similarity score as the predicted activity.\n\nWe can further fine-tune the pre-trained model on downstream real-world data, as depicted in the right part of Figure 3. Specifically, we freeze the text encoder $f_\\theta$ and update weights of the graph encoder $g_\\phi$ followed by a linear classifier $h_\\gamma$. Following the same process as inference, we assign the real motion time series to the nearest joint in the skeleton graph and assign zeros to the remaining joints to construct the graph input representation X. We fine-tune the model using X and one-hot encoded labels z with D classes based on cross-entropy loss, where $\\sigma(\\cdot)$ represents the softmax operation:\n\n$\\mathcal{L}_{ce} = - \\frac{1}{B} \\sum_{i=1}^B \\sum_{j=1}^D z_{ij} \\log(\\sigma(h_\\gamma(g_\\phi(X_i)))_j)$.\n\nWe report both zero-shot and fine-tuning performance in the subsequent experiment section."}, {"title": "4 Experiments", "content": "4.1 Datasets and Experimental Settings\n\nWe simulate motion time series from existing motion skeleton dataset HumanML3D [19], which contain both motion skeleton data and corresponding text descriptions as detailed in Section A.1 in Appendix. We further augment the text descriptions as described in Section 3.3.2.\n\nWe evaluate on the most extensive motion time series classification benchmark to date, comprising 18 real-world datasets that cover diverse activities. These datasets are collected from various body locations such as head, chest, back, arm, wrist, waist, hip, leg, knee and ankle. We categorize these datasets into three difficulty levels: (1) easy level (with fewer than 10 activities): Opportunity [47], UCI-HAR [2], MotionSense [37], w-HAR [5], Shoaib [49], HAR70+ [58], RealWorld [53], TNDA-HAR [64]; (2) medium level (with 10 to 20 activities): PAMAP2 [46], USC-HAD [69], Mhealth [4], Harth [33], UT-Complex [50], Wharf [6], WISDM [59], DSADS [1]; (3) hard level (with more than 20 activities): UTD-MHAD [8], MMAct [26]. We provide the specific number of activities for each dataset in Table 1 and Table 2, and detail their collection settings in Section A.2 in Appendix.\n\nWe re-sample the real-world test data to the same sampling frequency as the simulation data (20 Hz), and apply normalization to ensure consistency in unit measurements, e.g., standardizing accelerations to m/s\u00b2. We pre-train UniMTS using Adam optimizer [25] with a learning rate of 0.0001 on a single NVIDIA A100 GPU. The pre-training process consumes approximately 13 GB of memory given a batch size of 64. For text augmentation, we prompt GPT-3.5 (\"gpt-3.5-turbo) to generate k = 3 paraphrases. During each iteration, we randomly generate the mask M by selecting 1 to 5 joints and mask the remaining joints as zeros. We adopt learnable temperature parameter $\\tau$ initialized from CLIP. We evaluate the models using accuracy, macro-F1 and the top-2 retrieval performance R@2."}, {"title": "4.2 Zero-Shot Results", "content": "We pre-train UniMTS exclusively on simulated data and evaluate on 18 real-world motion time series classification benchmark datasets. We compare UniMTS against classification models with zero-shot capabilities: ImageBind [16], IMU2CLIP [38], IMUGPT [28] and HARGPT [24]. We also input the 2D visualizations of motion time series to pre-trained vision-language model LLaVA [30] for comparison. We detail the configurations of baselines in Section A.3 in Appendix. As shown in Table 1, UniMTS significantly outperforms all baselines in the zero-shot setting. We also apply the Wilcoxon-signed rank test with Holm's \u03b1 (5%) following previous works [20, 71]. The Wilcoxon-signed rank test indicates that the improvement of UniMTS compared with all the baselines is"}, {"title": "4.3 Few-Shot Fine-tuning Results", "content": "Apart from the zero-shot setting, we provide a few real samples for each activity and fine-tune UniMTS and the baselines. More specifically, we provide 1, 2, 3, 5, 10 samples for each activity and compare UniMTS against ImageBind [16], IMU2CLIP [38], IMUGPT [28], GPT4TS [72], BioBankSSL [66] and a randomly initialized model with the same model architecture as UniMTS (referred to as Random). We report both the mean and the standard deviation in Figure 4. UniMTS also demonstrates state-of-the-art performance in the few-shot fine-tuning setting, showing the effectiveness of pre-training. Following the same Wilcoxon-signed rank test as in the zero-shot setting, we observe p-values far below 0.05 (e.g., p-value = 2 \u00d7 10-25 for the best-performing baseline ImageBind), indicating the statistical significance of our improvement."}, {"title": "4.4 Full-Shot Results", "content": "We also compare the full-shot performance where UniMTS and the baselines are fine-tuned or trained using all the available training samples of the downstream datasets. We compare UniMTS with pre-trained models (ImageBind [16], IMU2CLIP [38]), self-supervised models (TST [68], TARNet [11],"}, {"title": "4.5 Ablation Study", "content": "In the zero-shot setting, we compare UniMTS with a few ablations by removing rotation-invariant augmentation (w/o rot aug), removing text augmentation (w/o text aug) and by replacing the graph encoder with a CNN-based encoder that directly concatenates joints without modeling their spatial relationships (w/o graph). We can observe in Table 1 that the performance declines after removing each of the above components, verifying their respective importance in improving generalization across locations (graph encoder), orientations (rotation-invariant augmentation) and activities (text augmentation). We also compare the pre-trained UniMTS with randomly initialized UniMTS in both few-shot and full-shot settings. As shown in Figure 4 and Table 2, pre-trained UniMTS consistently outperforms randomly initialized UniMTS, highlighting the benefits of pre-training."}, {"title": "4.6 Case Study", "content": "UniMTS's time series embeddings align with corresponding semantic meanings. As shown in Figure 5, the t-SNE visualizations of UniMTS's time series embeddings form distinguishable clusters that align with their semantic meanings. Notably, UniMTS is only pre-trained on the simulated data but its embeddings for real-world data closely align with the semantic space, which again demonstrates our model's zero-shot generalization due to contrastive learning. For example, in Figure 5a, stationary activities such as lying and sitting group together; light-movement activities such as standing, ironing, and vacuum cleaning are close to each other; while high-intensity activities such as running and cycling cluster closer in the embedding space."}, {"title": "5 Conclusion and Discussion", "content": "Conclusion. In this paper, we present the first unified pre-training procedure, UniMTS, for motion time series classification. Our model is pre-trained only on physics-simulated data, yet demonstrates remarkable generalization across diverse real-world motion time series datasets featuring different device locations, orientations and activities. The simulated data with all-joint coverage are augmented for rotation invariance and modeled by a graph encoder, improving generalization across various device factors. During pre-training, contrastive learning further aligns time series with their semantic meanings to improve generalization across activities. Extensive evaluation in zero-shot, few-shot and full-shot settings consistently demonstrate the state-of-the-art performance of our proposed UniMTS.\n\nLimitation and Future Work. We acknowledge a few limitations which we leave as future works. (1) Simulated motion time series can only be approximations of the real signals, which are usually collected near rather than directly on the body joints. For example, sensors on smartwatches collect data near the wrist, not on the wrist joint itself. We plan to incorporate random offset vectors to better simulate real-world signal variations near joints. (2) While our framework effectively addresses the classification task, we intend to extend its applicability to other motion time series tasks such as inertial navigation. (3) Our current pre-training utilizes existing motion datasets, and we plan to enrich our pre-training corpus with additional motion data extracted from large-scale video-based pose estimation. (4) We also plan to integrate our model with efficient inference techniques such as quantization, pruning and distillation for deployment optimization on edge devices.\n\nBroad Impact. UniMTS is the first pre-trained motion time series classification model that gener- alizes to diverse downstream datasets, irrespective of device locations, orientations and activities. The primary societal concern centers around privacy as motion time series might reveal personal information, so we ensure strict privacy controls at the earliest stages of model development by pre-training exclusively on synthetic data. With UniMTS's state-of-the-art performance in zero-shot, few-shot and full-shot settings, we believe it brings broadly positive impact to the community."}, {"title": "A Appendix / supplemental material", "content": "A.1 Pre-training Datasets\n\nHumanML3D [19] is a large-scale motion skeleton data consisting of 14,616 3D human motion skeletons spanning 28.59 hours. The average motion skele- ton sequence length is 7.1 seconds. Paired with each motion skeleton sequence there is an average of 3 textual descriptions, resulting in a total of 44,970 textual descriptions with a vocabulary size of 5,371. The average and median lengths of these descriptions are 12 and 10 words. We further augment the textual descriptions using large language models as described in Section 3.3.2. All motion skeletons follow the skeleton structure of SMPL [34] with 22 joint nodes.\n\nWe also tried to incorporate additional motion skeleton datasets into pre- training, such as KIT-ML [41] and NTU RGB+D 120 [31]. However, these data are relatively less diverse in terms of both motion skeletons and textual descriptions. We did not observe performance improvement from adding them, and therefore use HumanML3D as our primary pre-training corpus.\n\nA.2 Downstream Evaluation Datasets\n\nWe detail the information for each downstream real-world evaluation dataset as follows.\n\nOpportunity [47] contains data collected from back, upper arms and lower arms, and features multiple sets of activities. We aim to predict the modes of locomotion such as standing and walking.\n\nUCI-HAR [2] collects motion data from a smartphone located on the subject's waist. The subject performs daily activities such as walking upstairs and walking downstairs.\n\nMotionSense [37] collects data from a smartphone in the participant's front pocket, featuring daily activities such as sitting and jogging.\n\nw-HAR [5] contains motion time series data collected from the ankle. It captures daily physical activities such as jumping and lying down.\n\nShoaib [49] contains daily activities such as biking. Each participant is equipped with five smart- phones on five positions: right jean's and left jean's pockets, belt, right upper arm and right wrist.\n\nHAR70+ [58] tracks activities such as shuffling for older adult subjects. The motion time series are collected from the right front thigh and the lower back.\n\nRealWorld [53] records daily activities such as climbing stairs from multiple body positions including chest, forearm, head, shin, thigh, upper arm, and waist.\n\nTNDA-HAR [64] collects static as well as periodic daily activities such as cycling, from devices located at multiple body positions such as wrist, ankle and back.\n\nPAMAP2 [46] monitors physical activities such as ironing, vacuum cleaning and rope jumping using devices located on the wrist, chest and ankle.\n\nUSC-HAD [69] records daily activities such as sleeping and taking the elevator with devices attached to the subject's front right hip.\n\nMhealth [4] comprises body motion for common activities such as waist bending forward, frontal elevation of arms and knees bending. Devices are placed on the user's chest, right wrist and left ankle.\n\nHarth [33] records data in a free-living setting with devices located at the right thigh and lower back.\n\nUT-Complex [50] contains different smartphone sensor data such as typing, drinking coffee and giving a talk, with devices positioned at wrist and pocket positions.\n\nWharf [6] records activities from wrist-worn devices, such as combing hair and getting up bed.\n\nWISDM [59] collects diverse daily activities such as brushing teeth, eating soup, playing balls, and folding clothes, using data from the smartphone in the pocket and smartwatch on hand.\n\nDSADS [1] comprises daily and sports activities such as exercising and rowing. Multiple devices are positioned at the torso, right arm, left arm, right leg, and left leg."}, {"title": "A.3 Baselines", "content": "We detail the baseline settings as follows.\n\nImageBind [16]: We employ the pre-trained weights from \u201cimagebind_huge\" for zero-shot evaluation. During fine-tuning, we add a linear layer to map ImageBind embeddings to the number of activity classes. We fine-tune both ImageBind and the linear layer during fine-tuning, which performs better than simply tuning the linear layer.\n\nIMU2CLIP [38]: The pre-trained weights of IMUCLIP are not released. Therefore, we first follow their pre-training implementation\u00b3 to pre-train on Ego4D datasets [17]. During fine-tuning, we add a linear layer after IMU2CLIP embeddings and fine-tune both IMU2CLIP and the linear layer.\n\nIMUGPT [28]: We choose DeepConvLSTM as the backbone model, which shows the best perfor- mance as reported in their original paper. We remove the supervised distribution calibration phase, which relies on labeled downstream data and conflicts with the zero-shot setting objectives.\n\nHARGPT [24]: The method directly prompts large language models to classify motion time series. We down-sample motion time series to 10 Hz as used in their paper and follow their prompt template.\n\nLLAVA [30]: We visualize motion time series as 2D plots and use these visualizations as input for the pre-trained model of \u201cllava-v1.5-7b\".\n\nTST [68]: This is a Transformer-based representation learning framework with several downstream tasks including multivariate time-series classification. We follow the framework to first pre-train the Transformer model in an unsupervised fashion and then fine-tune the pre-trained model on the downstream classification task.\n\nTARNet [11]: The model proposes task-aware representation learning that reconstructs important timestamps guided by self-attention score distribution from end-task training. We jointly train the reconstruction task and the classification task.\n\nTS2Vec [67]: The method performs contrastive learning to learn contextual representations of time series. We follow their implementation to first apply contrastive learning and then train a linear regression model for each dataset."}, {"title": "A.4 Simulated Data", "content": "In addition to the simulated data for wrist as shown in Figure 6, we present more examples for other device locations such as ankle in Figure 9. We observe consistently similar patterns between simulated motion time series and real PAMAP2 data across activities of various intensity levels, ranging from sitting to walking and rope jumping."}, {"title": "A.5 Efficiency Analysis", "content": "For space complexity, the graph encoder of UniMTS contains only 4.94M parameters, which is significantly smaller compared with the 18.69M used in the IMU encoder of the best existing baseline ImageBind. For time complexity, fine-tuning of UniMTS is also efficient. On one example dataset of UCI-HAR, full-shot fine-tuning of UniMTS takes approximately 1.3 minutes to converge while it takes approximately 9.8 minutes for ImageBind to converge. Moreover, we have run a power estimate assuming 0.1Hz cadence (i.e., 10-second window size), and it takes approximately 22.64 mW to run the whole graph model on an eNPU (embedded Neural Processing Unit), which is much smaller than ImageBind IMU encoder's power consumption of approximately 702 mW. Therefore, UniMTS is efficient for real-world applications and suitable to be deployed on edge devices."}]}