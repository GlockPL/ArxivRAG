{"title": "AutoFPDesigner: Automated Flight Procedure Design Based\non Multi-Agent Large Language Model", "authors": ["Longtao Zhu", "Hongyu Yangaa*", "Ge Song", "Xin Ma\u02bb", "Yanxin Zhangb", "Yulong Ji b,*"], "abstract": "Current flight procedure design methods heavily rely on human-led design process, which is not only low automa-\ntion but also suffer from complex algorithm modelling and poor generalization. To address these challenges, this paper\nproposes an agent-driven flight procedure design method based on large language model, named AutoFPDesigner,\nwhich utilizes multi-agent collaboration to complete procedure design. The method enables end-to-end automated\ndesign of performance-based navigation (PBN) procedures. In this process, the user input the design requirements in\nnatural language, AutoFPDesigner models the flight procedure design by loading the design specifications and utiliz-\ning tool libraries complete the design. AutoFPDesigner allows users to oversee and seamlessly participate in the design\nprocess. Experimental results show that AutoFPDesigner ensures nearly 100% safety in the designed flight procedures\nand achieves 75% task completion rate, with good adaptability across different design tasks. AutoFPDesigner intro-\nduces a new paradigm for flight procedure design and represents a key step towards the automation of this process.", "sections": [{"title": "1. Introduction", "content": "The design of Instrument Flight Procedures (IFP) is\ncurrently a manual process led by humans, which\nstrictly adheres to design specification docu-\nments\u00b9. With the introduction and widespread adoption\nof Performance-Based Navigation (PBN) flight proce-\ndures, the process of designing PBN flight procedures\naccording to these specifications has become increas-\ningly complex. Consequently, the human-led design\nprocess has become more time-consuming\u00b9.\nSince last year, the rapid advancement of large lan-\nguage models has been impressive, particularly with\nthe emergence of generative models like ChatGPT3.\nThese models have achieved significant success in text\nclassification, question answering, and data pro-\ncessing, and have also shown considerable potential\nin code debugging, game design, and architecture5-7.\nThe latter three tasks fundamentally involve operating\nbased on standard specifications, which is similar to\nflight procedure design. Therefore, the human-like text\ncomprehension and planning capabilities of large lan-\nguage models present unprecedented opportunities for\nthe automation of flight procedure design. Rather than\nmerely assisting human designers, our work takes a\nfurther step by enabling large language models to lead\nthe flight procedure design based on design specifica-\ntions, with human designers supervising and seam-\nlessly participating in the design process.\nCompared to using a single large model as an agent\nfor reasoning and planning, multi-agent systems based\non Large Language Models (LLMs) hold greater po-\ntential for solving complex problems. Multi-agent\nsystems, akin to human collaboration in tackling"}, {"title": "2. Relate work", "content": ""}, {"title": "2.1. Automatic flight procedure design", "content": "Flight procedure design can be modeled as a path\nplanning problem subject to various constraints. Many\nresearchers have adopted heuristic or machine learning\nmethods to design flight procedures. The methods\nmentioned in reference12-15 are capable of generating\nflight paths that meet the design specifications. How-\never, they require redesigning the model for each air-\nport's flight procedures, a process that depends heavily\non specialized algorithm researchers. In contrast, Au-\ntoFPDesigner models flight procedure design through\nnatural language, making it more accessible and under-\nstandable to professionals who are not experts in heu-\nristic or machine learning algorithms. Additionally,\nwhen switching airports, only the navigation data\nwithin AutoFPDesigner needs to be updated.\nAdditionally, flight procedure designers often use\ncommercial software such as AutoCAD16and IDS for\ndesigning flight procedures. These commercial tools\nprovide professional support for route planning and\nmeasurement, with the design process being primarily\nled by the designers themselves. This paradigm relies\non designers who are professionally trained and con-\ntinuously updated with the design specifications, mak-\ning the performance of the designed flight procedures\ndependent on the expertise of the designers. In contrast,\nAutoFPDesigner introduces an LLM-based agent to\nlead the flight procedure design process, fundamen-\ntally changing the traditional design paradigm. This\nagent-driven approach leverages large language mod-\nels to automate the design process, reducing the de-\npendence on specialized human expertise."}, {"title": "2.2. Multi-agent in LLMs", "content": "Generative large language models were initially pro-\nposed by OpenAI17 Models like GPT-3.5 and GPT-4\nhave demonstrated impressive capabilities in conver-\nsation and reasoning. To better harness the power of\nLLMs, researchers have introduced methods such as\nReinforcement Learning from Human Feedback\n(RLHF), Chain-of-Thought (CoT), and ReAct18-20 to\nenhance the reasoning and decision-making abilities of\nLLMs, thereby improving their general capabilities.\nThrough fine-tuning, LLMs can be adapted to excel in\nspecific professional domains. These advancements\nhave led to significant success in language understand-\ning and generation, showing immense potential in ad-\ndressing complex professional problems.\nFor complex professional problems, previous works\nhave utilized LLMs to call tools and execute sequential\nactions, as seen in models like Auto-GPT and\nAgentGPT21. AutoGen and MetaAgents22-24 have pro-\nposed incorporating multiple agents to tackle complex\nissues, with the core idea being that multi-agent sys-\ntems can emulate human societal collaboration, the\nfoundation of collective human intelligence. Collabo-\nration allows for breaking down complex problems\ninto simpler sub-tasks, and LLMs have already shown\nexceptional capability in solving individual tasks.\nMoreover, interactions between different agents can\nfoster divergent thinking, enhance factual accuracy 25,\nreasoning26 and provide validation27.\nIn the context of flight procedure design, our insight\nis that it is a complex process comprising multiple sub-\ntasks such as specification understanding, data extrac-\ntion, tool invocation, and route design. Leveraging the\npower of LLMs in flight procedure design remains an\nopen challenge. In this paper, we address this challenge\nby applying multi-agent LLMs28-32 to language model-\ning of the flight procedure design process. To the best\nof our knowledge, this is the first work to apply LLMs\nto flight procedure design."}, {"title": "3. AutoFPDesigner", "content": "In this section, we will provide a comprehensive\noverview of AutoFPDesigner, an intelligent flight pro-\ncedure design agent based on a large language model.\nSection 3.1 will present an introduction to the overall\nframework. Subsequently, we will delve into the three\nkey components of our approach: Rules & Memory\n(Section 3.2), Tool Library (Section 3.3), and the LLM\nAgents (Section 3.4)."}, {"title": "3.1. Overall Architecture", "content": "Traditionally, flight procedure design is performed\nby experts using various specialized tools to meet spe-\ncific requirements. The overall framework of Au-\ntoFPDesigner is shown in Fig. 1 with the key distinc-\ntion being that an agent, rather than a human designer,\ndrives the design process. The Rules & Experience\nMemory endows AutoFPDesigner with the specialized\nknowledge and design experience necessary for flight"}, {"title": "3.2. Rules&Experience Memory", "content": "Flight procedure design experts rely on their contin-\nually updated professional knowledge and experience\nto design flight procedures. This expertise fundamen-\ntally stems from the flight procedure design standards\noutlined in ICAO Doc 8168, which are represented in\ntextual form. Large language models (LLMs) naturally\nexcel in understanding textual language, making them\ninherently suited to grasp these design standards. In\ncontrast, modeling such standards within other design\nmethodologies can be challenging. Specifically, text-\nbased design standards are optimally modeled by\nLLMs without additional processing, whereas other\ndesign approaches require modeling these standards\nthrough design objective functions. For each flight pro-\ncedure design requirement, we leverage existing de-\nsign experience to aid in decision-making. Expert\nKnowledge comprises two key components: Rules and\nExperience Memory."}, {"title": "3.3. Tools Library", "content": "The motivation for using the tool library is to expand\nagent's capabilities beyond verbal communication.The\nway AutoFPDesiger calls the tools is to come is to im-\nplement the navigation data search, obstacle evaluation\nand design decisions required for the flight procedure\ndesign, and all of the tools have returned results in the\nform of text. The tool library consists of six tools:\nNavadata Search, Similar Procedure Search, Notable\nObsacle Search, calculator, Procedure Render and Pro-\ncedure Transfer. it is worth noting that the tool library\nis supported by the extensions to meet different flight\nprocedure design needs.\nNavadata Search: This tool assist AutoFPDesigner\nin obtaining accurate initial environmental information\nbased on user design requirements, such as runway co-\nordinates, headings, and procedure termination point\ncoordinates.\nSimilar Procedure Search: In the Experience\nMemory, the most similar flight procedures to the cur-\nrent design are returned. These similar flight proce-\ndures include two types: the most similar procedure de-\nparting from the same runway and the most similar\nprocedure terminating at the same endpoint. For pro-\ncedures departing from the same runway, similarity is\ncalculated by:\n$S\u2081 = \\frac{1}{Ad(Ewpt_{p1},Ewpt_{pdesign})},p\u2081 \u2208 MatchP\u2081$ (1)\nwhere $S\u2081$ represents the similarity score, $MatchP\u2081$\ndenotes the set of procedures within the Experience\nMemory that share the same departure runway as the\nprocedure being designed, $Ewpt_p$ represents the ter-\nmination waypoint of procedure, Ad denotes the dis-\ntance between two waypoints, the highest similarity\nscore being selected as the return.\nFor procedures terminating at the same endpoint,\nsimilarity is calculated by:\n$S2 = \\frac{1}{A\u03b8(Heading_{p2}, Heaidng_{pdesign})},P2 E MatchP2$ (2)\nwhere $S2$ represents the similarity score, $MatchP2$\ndenotes the set of procedures within the Experience\nMemory that share the same termination waypoint as\nthe procedure being designed, Heading, represents\nthe departure runway heading of the procedure, \u0394\u03b8 the\nangular difference between two runway headings, the\nhighest similarity score being selected as the return.\nNotable Obstacle Search: Retrieve threatening ob-\nstacles within a 50 km radius. These obstacles pose a\nthreat when designing flight procedures in their direc-\ntion, as they extend beyond the obstacle evaluation sur-\nfaces.\nCalculator: Based on AutoFPDesigner's decision\noutput, the precise coordinates of the next waypoint are\ncalculated. The decision output format is [azimuth, dis-\ntance]. The Calculator uses the current waypoint coor-\ndinates along with the [azimuth, distance] to compute\nthe latitude and longitude coordinates of the next way-\npoint.\nProcedure Render: During the design process, vis-\nualize the flight procedures designed by Au-\ntoFPDesigner, including the flight route, protection\nzones, and obstacles. Based on the visualization results,\nusers can choose whether to provide design feedback\nto AutoFPDesigner, this tool is invoked when human\nusers are involved in the design process\nProcedure transfer: Convert the completed flight\nprocedures into a specific format, in this paper con-\nverted to txt, for safety assessment."}, {"title": "3.4. Multi-Agent LLMs", "content": "For the complex task of flight procedure design, to\nreduce the occurrence of hallucinations in large models,\nthis paper adopts a multi-agent collaborative approach\nto tackle this challenge. The advantage of this method\nis that it lowers the minimum performance threshold\nrequired for the agents and reduces the frequency of\nhallucinations. In this paper, seven agents are config-\nured with the following functions:\nGroup Manager: Selects the next speaking agent\nbased on user requirements and historical dialogue.\nTask Agent: Responsible for refining user input,\nsuch as extracting the runway number and the type of\nprocedure to be designed as specified by the user.\nPlan Agent: Utilizes Navadata Search, Similar Pro-\ncedure Search, Notable Obstacle Search, and user re-\nquirements to perform a preliminary planning of the\nflight procedure, outputting the approximate azimuth\nand distance to the next waypoint.\nWaypoint Agent: Based on the preliminary"}, {"title": "4. Experiments", "content": "In this section, we demonstrate the effectiveness, co\nmpatibility and other features of AutoFPDesigner thro\nugh extensive experiments on the design of departure\nflight procedures at Shuangliu(ZUUU) and Jiangbei(Z\nUCK) airports. We first describe the experimental setu\np and evaluation metrics in Section 4.1. Next we inves\ntigate AutoFPDesigner's few-shot learning capabilities\n(Section 4.2), compatibility (Section 4.3), stability (S\nection 4.4) and interpretability (Section 4.5) as well as\nablation experiments (Section 4.6) to evaluate the eff\nectiveness of the different components in AutoFPDesi\ngner, and finally demonstrate the effectiveness of Auto\nFPDesigner in the human-involved(Section 4.7)."}, {"title": "4.1. Experimental Setup", "content": "Dataset. To fine-tune the Plan Agent and Waypoint\nAgent, we have developed a PBN flight procedure dat\naset in JSON format, derived from AIP23 data. The da\ntaset currently includes approximately 40 departure pr\nocedures from Shuangliu and Jiangbei airports, encom\npassing over 300 flight segments. It also contains info\nrmation on airport obstacles and runway details. The d\nataset is available at the following GitHub repository:\nhttps://github.com/Zhulongtao6/FPDataSet.git. To the\nbest of our knowledge, this is the first open-source flig\nht procedure dataset available.\nImplementation details. In our experiments we us\ned AutoFPDesigner to design straight-line departures f\nlight procedure, and the prompts for each agent in Aut\noFPDesigner are centred around this type flight proce\ndure.\nEvaluation metrics. We propose evaluation metrics\nfor AutoFPDesigner based on three aspects: safety,\ntype, and efficiency. Safety, the foremost consideration\nin flight procedure design, is assessed by evaluating\nthe presence of obstacles within protected zones. Flight\nprocedures encompass various types, and in addition to\nmeeting general standards, each type must adhere to\nspecific constraints. Efficiency measures whether Au-\ntoFPDesigner can complete the design within a limited\nnumber of interactions. The proposed metrics corre-\nsponding to these criteria are Flight Procedure Safety\n(FPS), Special Constraints Compliance (SCC), and\nMission Completion Rate (MCR).\nFlight Procedure Safety(FPS): The safety of the fli\nght procedure is achieved by the absence of obstacles\nin the protected area, as shown in the Fig. 3 the protec\nted area is divided into two parts, horizontal and vertic\nal. In the horizontal part, the protection zone is divide\nd into two parts, the main area and the sub-area, and t\nhe width of the protection area is determined by the na\nvigation specification of the flight procedure10, for the\nstraight-line departure flight procedure generally ado\npts the navigation specification of RNP1, and its horiz\nontal width of the protection zone is 4360m. In the ver\ntical part, the minimum height of the protection area is\ndetermined by the height of the highest obstacle in th\ne segment where it is located, and the height of the hig\nhost obstacle in the minimum height needs to be incre\nased on the basis of the height of the highest obstacle,\nwhich is called minimum obstacle clearance (MOC)."}, {"title": "4.2. Few-shot Learning", "content": "To evaluate the performance of our method, we con-\nducted several few-shot learning experiments. We used\n13.5%, 25% and 41.7% of flight procedures from\nShuangliu airport in the dataset to fine-tune the Plan\nAgent and Waypoint Agent in AutoFPDesigner, and\nthen tested it with the flight procedures from Shuangliu\nairport in the dataset that were not trained and served\nas Experience Memory.\nThe results are shown in Table 1, as the amount of\nfine-tuned data increases AutoFPDesigner's perfor-\nmance on FPS, SCC and MCR, when the percentage\nof fine-tuned data reaches 41.7%, AutoFPDesigner can\nensure that its designed procedure fully meets the\nsafety and specific restrictions.\nIn order to test the generalization performance of\nAutoFPDesigner, we use the fine-tuned model with the\nbest performance in ZUUU airport directly for the test\nof departure procedures in the dataset of Jiangbei Air-\nport, and the percentage of the tested procedures is\n75%, and the remaining 25% of the data is used as Ex-\nperience Memory in Plan Agent, and the performance\nperformance is shown in Table 2, which can be seen\nfrom the table that when the basic airport data com-\npletely changed, AutoFPDesigner still shows good per-\nformance, which should provide a strong support for\nAutoFPDesigner in the actual project."}, {"title": "4.3. Compatibility", "content": "We use gpt-3.5-turbo-0125 and gpt-4o as the base\nmodels of each Agent in AutoFPDesigner, and test\nthem procedure design of ZUUU in the dataset, and\ntheir performance is shown in Table 3, from which we\ncan see that when the base model is changed, Au-\ntoFPDesigner still shows a good performance, which\nproves the compatibility of AutoFPDesigner for differ-\nent base LLM models."}, {"title": "4.4. Stability", "content": "LLM is usually disturbed by hallucination, which\nare detrimental to AutoFPDesigner, in order to study\nthis effect we have performed stability tests on Au-\ntoFPDesigner and we have performed the following\nexpeiments:"}, {"title": "5.Discussion and future work", "content": "In our work", "exploring": "n(1) Comparison with Heuristic and Machine Learn-\ning-Based Flight Procedure Design Methods and Com-"}]}