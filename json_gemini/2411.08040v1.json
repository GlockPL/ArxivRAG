{"title": "The Universal PDDL Domain", "authors": ["Patrik Haslum", "Augusto B. Corr\u00eaa"], "abstract": "In AI planning, it is common to distinguish between planning domains and problem instances, where a \"domain\" is generally understood as a set of related problem instances. This distinction is important, for example, in generalised planning, which aims to find a single, general plan or policy that solves all instances of a given domain. In PDDL, domains and problem instances are clearly separated: the domain defines the types, predicate symbols, and action schemata, while the problem instance specifies the concrete set of (typed) objects, the initial state, and the goal condition. In this paper, we show that it is quite easy to define a PDDL domain such that any propositional planning problem instance, from any domain, becomes an instance of this (lifted) \"universal\u201d domain. We construct different formulations of the universal domain, and discuss their implications for the complexity of lifted domain-dependent or generalised planning.", "sections": [{"title": "1. Introduction", "content": "In AI planning, a distinction is often made between planning domains and problem instances, where a \"domain\" is intuitively understood to be a set, typically infinite, of related or similar problem instances. This concept is important in, for instance, planning with domain-specific control knowl- edge (Bacchus & Kabanza, 1995; Doherty & Kvanstr\u00f6m, 1999; Wilkins & desJardins, 2000), and in generalised planning, which seeks a single, general plan or policy that solves all instances of a given domain (Srivastava, Immerman, & Zilberstein, 2011). It is materialised in many modelling languages for specifying planning problems, such as PDDL (Haslum, Lipovetzky, Magazzeni, & Muise, 2019), in which the domain and problem instance are syntactically separate. In PDDL, the domain definition contains types, and parameterised predicates and action schemata. The prob- lem instance definition provides the concrete set of (typed) objects, the initial state and the goal condition.\nGrundke, R\u00f6ger, and Helmert (2024) and Haslum and Scholz (2003) argue that PDDL's notion of domain is too weak, in that it does not always allow the modeller to explicitly state the constraints necessary to define precisely the intended set of problem instances, such as constraints on intended \"valid\" initial states and goals.\nHere, we will show that PDDL's notion of domain is also in another sense too general: specifi- cally, that it is possible (indeed, quite trivial) to define a domain such that any planning problem in- stance, of any domain, is an instance of this \u201cuniversal\u201d domain. There is, however, is caveat: While the universal domain is a parameterised PDDL domain, consisting of types, predicates and action schemata, instances of this domain are arbitrary propositional planning problems. This means that although any PDDL domain-problem pair can be turned into an instance of the universal domain,"}, {"title": "2. The Universal Propositional Planning Domain", "content": "The universal PDDL domain for propositional planning, in its simplest form, is shown in Figure 1. It has two types: action and proposition, representing the (ground) actions and propositions of the problem instance, respectively. It has a single action schema, apply, with one parameter ?a of type action. An instance of this action schema with ?a = a is applicable iff every proposition of the problem instance is either true in the current state or not a precondition of the action a, i.e., iff a is applicable. Its effect is to make true every proposition that is an add effect of a, and false every proposition that is a delete effect, and not an add effect, of a (implementing PDDL's delete-before- add semantics). Thus, the effect of (apply a) is exactly the effect of a.\nGiven a propositional planning problem instance II, an instance P\u2081 of the universal domain is constructed with all ground actions and propositions in II as objects, initial state facts (pre a p), (add a p) and (del a p) for all ground actions a and propositions p such that p \u2208 pre(a), p \u2208 add(a) and p \u2208 del(a), respectively, and (true p) for each proposition true in the initial state of II, and goal (and (true p\u2081) . . . (true pm), where p1,...,pm are the goal facts of II. It is easy to see that this instance has a plan iff II has a plan, and the plan for II is in fact simply the sequence of arguments of the actions in the plan for P\u043f."}, {"title": "3. The Impossibility of a Lifted Universal PDDL Domain", "content": "One of the few restrictions that a PDDL domain does impose on all instances of the domain is a fixed maximum arity of predicates. This implies a limit on the length of the shortest plans required to solve any instance of the domain. Let D be a PDDL domain description, and suppose the maximum arity of any predicate in D is k. Let P be a PDDL problem description, that is an instance of D, and m the number of objects in P. Note that k < |D| and m \u2264 |P|. We know that the grounding of (D, P) can have at most $m^k$ propositions, and therefore the length of a shortest plan for (D, P) is bounded by $2^{(m^k)}$.\nHowever, we also know that it is possible to construct a PDDL domain D' and problem P' requiring a shortest plan of length $2^{2^{(n-1)}}$, where |D|+|P| \u2264 c(n log n), for some constant c. (This construction was first demonstrated by Erol, Nau, and Subrahmanian (1991), and can also be found in Section 2.5.4 of the book by Haslum et al. (2019).)\nSuppose there exists a universal domain for lifted PDDL planning: the maximum arity of any predicate in this domain is a fixed constant k. Therefore, an instance $P_{(D',P')}$ of this domain repre- senting the domain and problem (D', P') must have a number of objects m such that $m^k$ > $2^{n\u22121}$, implying $m \u2265 2^{(n-1)/k}$, and hence that the size of $P_{(D',P')}$ must grow exponentially in the size of D' and P'.\nNote, however, that a more expressive formalism than classical PDDL, such as, for example, a language with recursive terms (function symbols), may not have a corresponding bound on plan"}, {"title": "4. Discussion", "content": "What are the implications of the existence of the universal planning domain?\nFirst, it demonstrates that domain-dependent planning, or generalised planning, is, in the general case, and with PDDL's definition of domain, futile: there exists domains for which there is no domain-specific strategy or solution algorithm more efficient than one that works for every domain, and for which the only generalised plan that exists is a domain-independent planner.\nWe can of course classify domains by the computational complexity (hardness) of generalised or domain-specific planning for them, i.e., of the set of instances that they admit. Such studies have been made on a range of commonly used planning benchmark domains (Helmert, 2001, 2006). A very small number of works have identified fragments of lifted PDDL planning that are tractable. For example, Lauer, Torralba, Fi\u0161er, H\u00f6ller, Wichlacz, and Hoffmann (2021) show that delete-free planning in a domain with at-most-unary predicates is tractable. Our universal domain constructions complement these results, by showing that domains remain PSPACE-hard also under a variety of syntactic restrictions. Tractability of a restricted class of domains, however, is typically obtained from the existence of a general, i.e., domain-independent, polynomial-time algorithm that solves instances of domains satisfying the restriction.\nThe impact on the complexity of domain-specific lifted or generalised planning of restrictions in between these two, somewhat extreme, cases analysing specific domains vs. coarse syntactic restrictions on PDDL domain formulations \u2013 is, as far as we know, mostly unexplored. Jonsson and B\u00e4ckstr\u00f6m (1996) make an important observation: They study the existence of a \u201cuniversal plan\" (essentially, policy) for propositional planning problems, and show that a universal plan that is both compact (polynomial-size) and efficient (evaluable in polynomial time) does not exist for arbitrary propositional planning problems, but can be constructed \u201cfor planning problems such that [optimal-length plan generation] can be solved in polynomial time\". If we understand \"planning problems\" here as the family of instances of a given (PDDL) domain, this suggests that generalised planning is possible for, and only for, domains that encode tractable underlying problems. Characterising the class of such domains by syntactic restrictions is likely to be challenging (though perhaps possible via descriptive complexity theory)."}]}