{"title": "Embedding an ANN-Based Crystal Plasticity Model into the Finite Element Framework using an ABAQUS User-Material Subroutine", "authors": ["Yuqing He", "Yousef Heider", "Bernd Markert"], "abstract": "This manuscript presents a practical method for incorporating trained Neural Networks (NNs) into the Finite Element (FE) framework using a user material (UMAT) subroutine. The work exemplifies crystal plasticity, a complex inelastic non-linear path-dependent material response, with a wide range of applications in ABAQUS UMAT. However, this approach can be extended to other material behaviors and FE tools. The use of a UMAT subroutine serves two main purposes: (1) it predicts and updates the stress or other mechanical properties of interest directly from the strain history; (2) it computes the Jacobian matrix either through backpropagation or numerical differentiation, which plays an essential role in the solution convergence. By implementing NNs in a UMAT subroutine, a trained machine learning model can be employed as a data-driven constitutive law within the FEM framework, preserving multiscale information that conventional constitutive laws often neglect or average. The versatility of this method makes it a powerful tool for integrating machine learning into mechanical simulation. While this approach is expected to provide higher accuracy in reproducing realistic material behavior, the reliability of the solution process and the convergence conditions must be paid special attention. While the theory of the model is explained in [20], exemplary source code is also made available for interested readers [https://doi.org/10.25835/6n5uu50y].", "sections": [{"title": "1 Introduction", "content": "In solid mechanics, the conventional constitutive laws explicitly formulate the stress-strain relations with symbolic expressions. Such relations are mostly constructed from simplified assumptions and based on empirical observations."}, {"title": "2 Theoretical fundamentals", "content": null}, {"title": "2.1 Data-based ML plasticity model and data preparation", "content": null}, {"title": "2.1.1 Overview and procedures", "content": null}, {"title": "2.2 Mathematical expression for forward and backward pass in a single LSTM memory cell", "content": "Hochreiter and Schmidhuber [23] first introduced long-short-term memory (LSTM) in 1997 as a variation of the recurrent neural networks (RNNs). The primary objective of LSTM is to mitigate the vanishing gradient problem commonly encountered in RNNs. This is achieved through the utilization of gates that dynamically control the memory. To elucidate the functioning of the LSTM layer, a visual representation of a single LSTM cell is provided in Fig. 3. An LSTM layer comprises multiple such cells. Each cell receives three primary inputs: an external current input $x_t$ from the sequence, the internal hidden state $h_{t-1}$, and the cell state $C_{t-1}$ from the preceding time step. Subsequently, the cell updates the hidden state $h_t$ and cell state $C_t$. The final output of the memory cell is encapsulated by the hidden state computed at the last step, which is denoted as $h_N$ for N steps in total. Additionally, within the LSTM cell, there exist three fundamental gates. The input gate ($i_t$) regulates the inflow of information into the memory, the forget gate ($f_t$) controls which information is retained in the memory, and the output gate ($o_t$) determines the extent to which the output is influenced by each state respectively.\nThis work specifically employed the LSTM layer from the Tensorflow Keras package to construct neural networks. The mathematical expressions presented in this context align with Keras' implementation and should remain consistent if any other deep learning framework is chosen for the same purpose. For each LSTM cell within the framework of Keras, we use two distinct sets of weight matrices: (1) the kernel weight matrix $W_{kernel}$, which is responsible for weighting the input sequence, and (2) the recurrent weight matrix $W_{recurrent}$, which is responsible for weighting the preceding time step. These matrices consist of four vertical submatrices corresponding to the input gate, forget gate, output gate, cell and cell input activation vectors, i.e.\n$W_{kernel/recurrent} = { W_{kernel/recurrent}^{f} | W_{kernel/recurrent}^{i} | W_{kernel/recurrent}^{C} | W_{kernel/recurrent}^{o} }$\nwith one set of biases, i.e. b = {$b_i$|$b_f$|$b_c$|$b_o$}.\nAs a starting point of calculation, the forget gate $f_i^{(t)}$ for time step t and cell i is computed as introduced in [23]:\n$f_i^{(t)} = \\sigma \\left( \\sum_j W_{f kernel,i,j} x_j^{(t)} + \\sum_j W_{f recurrent,i,j} h_j^{(t-1)} + b_f \\right)$. (1)\nWe also have the following expression to update the cell state:\n$C_i^{(t)} =tanh \\left( \\sum_j W_{C kernel,i,j} x_j^{(t)} + \\sum_j W_{C recurrent,i,j} h_j^{(t-1)} + b_C \\right)$ (2)\n$C_i^{(t)} = f_i^{(t)} * C_i^{(t-1)} + i_i^{(t)} * C_i^{(t)}$. (3)"}, {"title": "2.3 Numerical differentiation", "content": "Numerical differentiation is a computational method used for calculating derivatives. Unlike the backpropagation approach, numerical differentiation does not depend on the network's architecture, making it more applicable to complex network structures. The underlying concept of numerical differentiation is straightforward, wherein the original derivative is substituted with the derivative of an interpolation polynomial, which is generated with the help of a Taylor expansion [8]. In this work, the central difference method is used to determine the optimal discretization distance.\nConsidering the vectorial representation of the stress tensor $\\sigma$ and the strain tensor $\\epsilon$, the central difference method delivers the partial derivative of the stress component $\\sigma_i(\\epsilon)$ with respect to the strain component $\\epsilon_j$ as\n$\\frac{\\partial \\sigma_i(\\epsilon)}{\\partial \\epsilon_j} = \\frac{\\sigma_i(\\epsilon + \\Delta \\epsilon_j) - \\sigma_i(\\epsilon - \\epsilon_j)}{2\\Delta \\epsilon_j} - \\frac{\\Delta \\epsilon_j^2}{6} \\frac{\\partial^3 \\sigma_i}{\\partial \\epsilon_j^3}$. (6)\nExplicit formula\nRemainder term\nThe error introduced by numerical differentiation comes from the truncation and rounding errors. Let the absolute error, which indicates the resolution of approximation, be $10^{-6}$, the optimal discretization size would be then $\\Delta \\epsilon_j \\approx 10^{-2}$. Notice that the numerical differentiation method employed in this study involves using the scaled input and scaled output data to calculate the derivative (see Section 2.1.2). Consequently, it is necessary to reverse-scale the Jacobian matrix back to its original value range:\n$\\frac{\\partial \\sigma_{i, scaled} (\\epsilon)}{\\partial \\epsilon_{j, scaled}} = \\frac{\\frac{\\sigma_i - \\sigma_{i, min}}{\\sigma_{i, max} - \\sigma_{i,min}}}{\\frac{\\epsilon_j - \\epsilon_{j, min}}{\\epsilon_{j, max} - \\epsilon_{j,min}}} = \\frac{\\epsilon_{j, max} - \\epsilon_{j,min}}{\\sigma_{i, max} - \\sigma_{i,min}} \\frac{\\partial (\\sigma_i (\\epsilon) - \\sigma_{i,min})}{\\partial (\\epsilon_j - \\epsilon_{j, min})} = \\frac{\\epsilon_{j, max} - \\epsilon_{j,min}}{\\sigma_{i, max} - \\sigma_{i,min}} \\frac{\\partial \\sigma_i (\\epsilon)}{\\partial \\epsilon_j}$\n$\\frac{\\partial \\sigma_i (\\epsilon)}{\\partial \\epsilon_j} = \\frac{\\sigma_{i, max} - \\sigma_{i,min}}{\\epsilon_{j, max} - \\epsilon_{j,min}} \\frac{\\partial \\sigma_{i, scaled} (\\epsilon)}{\\partial \\epsilon_{j,scaled}}$ (7)\nwhere $\\sigma_{i,max/min}$ and $\\epsilon_{j,max/min}$ are the maximal and minimal constant values each of the stress and strain components. Using the range of data values from the generated database, the error resulting from numerical differentiation is estimated to be about $3.16 \\times 10^{-5}$. Since the Jacobian matrix cannot be defined exactly in a numerical context, to obtain an acceptable converged solution, the largest residual in the balance equation $r_{max}$ from the tolerance definition should not be greater than the error of the numerical differentiation."}, {"title": "3 Numerical examples", "content": "Two numerical examples are presented to examine the feasibility of the introduced approach: A two-dimensional plate with a hole and a two-dimensional plate with a double notch. These benchmark problems are expected to demonstrate the stress concentration effect for plasticity at the center of the plate, i.e. at the narrow areas, under monotonic tension loading conditions. The geometry of the samples is illustrated in Fig. 4.\nBoth plates are completely fixed on the left edge and subjected to a monotonic displacement of 0.01 on the right edge along the x-axis. Other degrees of freedom along the y- and z-axis are free. Both plates use a fine mesh with a global element size of 1.0, composed of triangular plane-stress CPS3 elements and quadrilateral elements CPS4. Automatic mesh refinement is implemented in the critical regions. The default element thickness is set to 1.0. For the current modeling, it is important to notice that the subjected displacement limit should not exceed the maximum value considered in the training data. This will help avoiding NN's inherent low accuracy in the extrapolation (larger errors for displacement limits out of the training range).\nIn the case of the plate with a hole, the suggested initial increment size is chosen as 0.0014. The total simulation time is 92.88 seconds. In the case of the plate with a notch, the suggested initial increment size is chosen as 0.0012. The simulation time is 96.23 seconds. To evaluate the validity of the proposed implementation, a comparison between the ML-based approach and a conventional plasticity model is presented. In this, the simulation results based on the ML model are compared with that of a simple isotropic hardening plasticity model provided in ABAQUS/Standard and characterized by a monotonic stress-strain curve. The Young's modulus and Poisson's ratio of the material are fitted from the generated database. The fitted Young's modulus was rounded to 1500, and the fitted Poisson's ratio was 0.33."}, {"title": "3.1 Simulation resutls", "content": "Figure 5 illustrates the nodal results of the von Mises stress after deformation for both cases of the data-based material model and the fitted isotropic hardening plasticity model of ABAQUS/Standard. Results indicate that the LSTM model effectively captures the stress concentration phenomenon around the hole and the notch. In the case of the plate with a hole, the maximum von Mises stress was 0.6222 MPa, and the minimum was 0.0266 MPa. In the case of the plate with a notch, the maximum von Mises stress was 0.4840 MPa, and the minimum was 0.0534 MPa."}, {"title": "3.2 Discussion of results and convergence", "content": null}, {"title": "3.2.1 Impact of initial increment size", "content": "To attain accurate results, it is important to ensure convergence during simulation. It is observed during the simulation process that the suggested initial value of increment size significantly influences the convergence performance for different displacement loads. Figure 6 shows the correlation between the critical minimal increment size in displacement and the overall displacement experienced within a single load step. These critical values indicate that, to achieve converged solutions, the suggested initial increment size for simulation should exceed the critical initial increment size. An initial increment size below the corresponding critical value leads to divergence and subsequent errors in the simulation result."}, {"title": "3.2.2 Impact of mesh fineness", "content": "To investigate the impact of mesh fineness on the convergence behavior, simulations are conducted on the same part geometry employing a coarser mesh. The simulation settings, including the initial displacement increment size, remained unaltered. Figure 7 shows the von Mises stress distribution. The acquired results show that the mesh fineness notably influences result precision, while its impact on the convergence process itself is comparatively minor."}, {"title": "4 Summary and conclusions", "content": "This manuscript presents an approach to integrate machine learning-based material models for complex path-dependent constitutive relationships, such as crystal plasticity, into the finite element simulation framework of ABAQUS UMAT. The procedure particularly addresses solving nonlinear problems through the iterative Newton-Raphson method by substituting the material model with a neural network-based structure. The proposed methodology reconstructs offline-trained LSTM neural network calculation paths within ABAQUS, encapsulating path-dependent stress-strain relations at individual material points. Thus, it assists in improving the accuracy of describing nonlinear material responses. Two numerical 2D plane-stress IBVPs are conducted under uniaxial displacement loading conditions to prove the quality and applicability of the proposed approach. It is found in this study that using an evenly distributed training dataset across the whole value range can improve the accuracy of NN's stress prediction. Moreover, using the direct graph approach instead of the informed graph can lower the training errors. It is also worth mentioning that NN prediction inherently contains bias and variance, which can lead to convergence challenges during analysis. In this connection, it is found that a displacement load below the critical value results in divergence.\nIn conclusion, the integration of ML techniques offers an efficient and accurate method for modeling path-dependent material behaviors, such as crystal plasticity. This efficiency is primarily achieved because the trained ML model embedded within the UMAT behaves like an elasticity model during simulations. This eliminates the need for explicit determination of the material parameters, which is often required in traditional material models. In conventional models, material parameters such as elastic moduli, yield stress, and hardening rules must be determined either experimentally or through fitting processes, which can be time-consuming and difficult to generalize across different loading scenarios. However, with the ML approach, these parameters are implicitly learned from the data, simplifying the simulation setup.\nThe accuracy of this approach is rooted in the fact that the ML model is trained on a database generated from lower-scale simulations of crystal plasticity. By relying on lower-scale simulations that capture the detailed microscopic interactions and deformation mechanisms, such as slip behaviors in crystals, the model can make predictions that reflect the true material response with high precision. This ability to incorporate microstructural information allows the ML model to overcome the limitations of traditional constitutive models, which are often based on simplified assumptions and overlook the complexities of material behavior at lower scales.\nFuture research works will explore incorporating more complex material behavior in connection with ML-based techniques into the FE framework. This could involve, for example, modeling hydraulic fracturing with a phase-field approach [18] or simulating additive manufacturing processes [4]."}, {"title": "Conflict of interest", "content": "The authors declare that there is no conflict of interest."}, {"title": "Data Availability", "content": "Exemplary source codes are made available as open-access for interested readers at [https://doi.org/10.25835/6n5uu50y]"}]}