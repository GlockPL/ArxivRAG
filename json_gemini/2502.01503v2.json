{"title": "Sea-cret Agents: Maritime Abduction for Region Generation to Expose Dark Vessel Trajectories", "authors": ["Divyagna Bavikadi", "Paulo Shakarian", "Nathaniel Lee", "Chad Parvis"], "abstract": "Bad actors in the maritime industry engage in illegal behaviors after disabling their vessel's automatic identification system (AIS) - which makes finding such vessels difficult for analysts. Machine learning approaches only succeed in identifying the locations of these \"dark vessels\" in the immediate future. This work leverages ideas from the literature on abductive inference applied to locating adversarial agents to solve the problem. Specifically, we combine concepts from abduction, logic programming, and rule learning to create an efficient method that approaches full recall of dark vessels while requiring less search area than machine learning methods. We provide a logic-based paradigm for reasoning about maritime vessels, an abductive inference query method, an automatically extracted rule-based behavior model methodology, and a thorough suite of experiments.", "sections": [{"title": "1 INTRODUCTION", "content": "Maritime vessels are equipped with an automatic identification system (AIS) to track their position on the globe [28]. However, malicious actors often disable this system - becoming \"dark\" when conducting illegal activities. Understanding these \"dark vessels\u201d has implications for security [29], maritime analysis [20, 35], planning [3], and forecasting [47]. Recently, with the support of the U.S. Treasury and European Union in enforcing maritime services prohibitions for seaborne Russian oil [44], industry efforts have targeted real-world issues such as illegal fishing, human trafficking, border protection, and sanction violations [42, 45], highlighting the increasing need for efficient dark vessel detection. Recent machine learning (ML) approaches are limited to trajectory prediction with a time horizon of less than an hour [13, 18, 23, 24] or rely on satellite data susceptible to weather conditions [1, 7, 12]. Other approaches require expert intervention using the radio frequency Doppler shift [42]. These approaches are not data-efficient and cannot explain why they determined a given result. We note that from a practical perspective, the limited forward-prediction value of ML approaches is significant - but the ability to find the dark vessel locations degrades with increased search area and resources. Meanwhile, recent work on generating faux trajectories for human movement suggests that abductive inference can address some of these difficulties [5] - although that work does not predict real trajectories and was not applied to the maritime domain. In this paper, we combine ideas from abductive inference, logic programming, and rule learning to identify the locations of dark vessels based on partial trajectories. We show that we are able to approach full recall of dark vessel trajectories requiring less than half of the area coverage required by our machine learning baselines. Further, we found that the recall performance of the abduction-based approach increases with search area and resources - unlike the degradation experienced with ML. We also demonstrate data efficiency, efficient inference calculations, and describe our ongoing efforts to deploy this technology in an operational platform. After a review of background material (Section 2) we make the following contributions:\n(1) We provide a formalism for reasoning about maritime vessels including a logical language to express maritime vessel trajectories (Section 3.1) and the framing of an abduction problem (Section 3.2) that include a top-k approximation that we explore empirically in this paper.\n(2) We provide a simple but effective rule-learning approach to agent behavior modeling (Section 3.3) that not only allows for data-driven (and data-efficient) abduction but also affords explainability of the results.\n(3) We provide a suite of experimental results (Section 4) that demonstrate how the abduction approach is area-efficient by saturating with 157% higher recall than baselines for an area of 30km\u00b2, provides long-term predictions where ML methods fail, and provides improved performance of 476% in recall with additional resources.\n(4) We also show that the approach is efficient in both terms of runtime and data as it can be instantiated with very little"}, {"title": "2 BACKGROUND", "content": "Dark Vessel Analytics. Maritime vessels employ deceptive shipping practices to benefit from violating international law, conducting illicit operations, violating environmental protections, and avoiding sanctions. In the 18th century, vessels disguised their Jolly Roger flags to deceive prospective victims before attacking them. Currently, vessels manipulate their AIS to avoid being monitored while performing illicit activities. On a monthly average, 800, 000 dark activity events were detected in 2020 - 2022 [45]. Lately, in the aftermath of the Russia-Ukraine war, sanctions on maritime trade have evolved [44], and monthly dark activity rose by 216% [46]. More recently, in 2024, there has been a 340% rise in dark activity [25] much of which focused on the Black Sea (the area used in our experiments in Section 4). Such activities when gone undetected, can have realistic detrimental impacts on ecosystems, safety, trade, and security. To monitor and control such behavior, efforts from government agencies [1, 44], and industry [7, 22, 42, 45], have invested in various efforts that began in earnest with the DARPA PANDA program over a decade ago [15]. These programs have led to a line of research that we describe in the next subsection.\nRelated Work. Earlier work on maritime vessel trajectory prediction relied on Markov models [26, 49], and extensions have also been applied to make efficient predictions. However, we find Hidden Markov Model to run out of memory (exceeding 200GB) during hidden-state extraction due to the trajectory size, a common step in traditional Markov approaches [27, 30]. In contrast, our method efficiently handles a similar step - extracting region types without running out of memory. Markov models are known to result in reduced performance as the trajectory size increases [48]. Also, Markov models work well for simple finite parameters but are unable to capture complex patterns and this led to the later use of deep learning techniques for the problem - further enabled by the availability of large datasets of maritime trajectories. To address the complexities of spatio-temporal interactions, [10] provides a sequence-to-sequence RNN to predict future maritime trajectories. Related work looks to predict a point ship location using an LSTM-transformer combination [16, 50]. These methods differ from our approach as they only provide accurate predictions up to an hour in the future, require large amounts of training data, and do not afford explainability (so the analyst user cannot easily justify the dark vessel predictions to operational personnel). Maritime trajectory patterns are also studied widely for traffic management [19] with an unsupervised hierarchical method and safety [32] where they mine patterns to focus on shipping route characterization and anomaly detection. These methods are valuable for understanding typical and atypical trajectory behavior, but they primarily focus on identifying patterns after the fact. In contrast, our method leverages trajectory behavior through abductive reasoning to infer an agent's future locations. This work varies from other maritime applications of Artificial Intelligence (AI) like vessel detection [31] where a model generates bounding boxes for the object vessel in an image or tracking it in a video [21]. This work also differs from a complementary line of work of patrolling strategies [4, 6, 9] that generates optimal patrol locations to cover a set of targets as we focus on generating locations to capture a target at a time horizon (as opposed to developing patrol plans for a non-adversarial agent). Trajectory forecasting is a separate line of work, it is focused on short-time horizon prediction of human or robotic movement as opposed to the long-time horizon, global-scale prediction of maritime vessels. Some notable approaches use deep learning architectures based on convolutional networks [23], adversarial methods [13], autoencoders [24], and Markov chains [11, 14].\nAbductive inference has provided a natural paradigm for locating unobserved adversarial agents - requiring much less data and providing more transparency than ML methods. Early work in this area offered simple models relating the adversary's point location to geospatial phenomenon [41]. Later work took a data-driven approach to learn a model of the adversarial behavior that enables abductive inference [34]. None of the aforementioned prior work on abduction involves trajectories nor does it involve making predictions of agent behavior over a long time horizon. Complementary to abduction work is the generation of spatial regions [8], which aims to maintain meaningful spatial boundaries for transportation services by partitioning an area of interest via region clustering (we employ similar techniques during pre-processing). More recent work on abductive inference has been applied to human movement [5]. That work is designed to produce faux movement trajectories and not identify actual future regions. We note that it relies on a different approach (the use of A*) suitable to create a movement trajectory that meets constraints but doesn't provide regions that allow for multiple future trajectories. In contrast, this work examines generating regions with a top-k entailment query necessitated by the nature of the problem and data at hand."}, {"title": "3 APPROACH", "content": "3.1 Logic for Maritime Agents\nLogical Language. To define various aspects of the maritime domain environment, we use an annotated language [17, 38] with temporal semantics [2, 5, 40]. The language is defined with a set of constants that is partitioned into multiple domains (Di C C), one such subset, Dloc, is a set of all potential locations of the vessel in a continuous space (\"area of interest\" or AOI) of dimensions MXN. As usual in first-order logic, we define a corresponding set of variables (V) and a set of predicate symbols (P). Additional sets of constants include a set Dagt - a set of agents (in our application, maritime vessels) and Dr - a set of all regions within the AOI (in practice, we compute this based on historical trends ahead of time). When it is relevant, we shall subscript such constants with the upper-right and lower-left locations - e.g. r11,12 \u2208 Dr is a region with upper-right corner 11 and lower-left corner 12 (11, 12 \u2208 Dloc). We treat r as a set of all locations enclosed by the region. In addition to the first-order logic syntax and semantics, we allow for annotation [l, u] (that are elements of a lower semi-lattice structure L) which is simply a subset of the unit interval [0, 1] - which generalizes both fuzzy"}, {"title": "3.2 Abducing Agent Trajectories", "content": "For a single agent, we can think of finding Ipred as an abduction problem. In other words, given an agent agt, initial conditions init, behavioral rules Ibehav, and ground-truth trajectory tagt we want to find Ipred such that:\n(1) \\(H_{init} \\cup I_{behav} \\cup I_{pred}\\) is consistent (i.e., \\(\\Gamma^* (H_{init} \\cup I_{behav}\\cup\\)\n(2) For each \\(I_{pred}\\) entails \\(Tagt\\)\nIf these criteria are met, we say \\(I_{pred}\\) is an explanation for \\((agt, H_{init}, I_{behav}, Tagt)\\). In this paper, our goal is to find a function that, based on historical data, can return an explanation. We define an explanation function as follows.\nDEFINITION 1 (TRAJECTORY Explanation FUNCTION). Given agents \\(agt^1,..., agt^n\\), initial condition programs \\(\\Pi_{init}^1,..., \\Pi_{init}^n\\), behavior rules \\(I_{behav}\\), and trajectories \\(TAIS^1,..., TAIS^n\\), we say an explanation function \\(f_e\\) that takes as arguments an agent and two programs and returns a region set program such that \\(f_e (agt^i, \\Pi_{init}, I_{behav})\\) is an explanation for \\(\\langle agt^i, \\Pi_{init}, I_{behav}, TAIS\\rangle\\).\nWe note that Definition 1 is quite strict as it requires the result of \\(f_e\\) to produce a region set that models the entire trajectory for all agents. At the same time, it does not distinguish among different explanations. We introduce an approximation, \\(f_e\\) that is designed to meet the entailment requirement for as many agents as possible. Our solution is to leverage a notion of parsimony, defining \\(f_e\\) in terms of a parsimony function (\\(\\sigma\\)) - which maps agents and logic programs to scalars. The idea is to use \\(\\sigma\\) to measure the quality of an explanation so that we can find quality explanations that cover most of the ground truth trajectories. We provide the following examples of such a function.\n\\(f_1 (agt, H_{init}, I_{behav}) = arg \\max_\\Phi \\sigma(agt, H_{init} \\cup I_{behav} \\cup \\Phi)\\)\n\\(f_2 (agt, H_{init}, I_{behav}) = \\{arg \\max_\\phi \\sigma(agt, H_{init} \\cup I_{behav} \\cup {\\phi})\\}\\)\nIn these two examples, we note the first has a combinatorial flavor - finding the best set of regions, while the second identifies the best singleton set - a notion that we can extend to find the top k singletons (which correspond to the top k regions formed with the at). This can be easily solved by multiple entailment problems for each relevant singleton formed from atoms created with set Dr (which we assume is known a-priori). We also note that the computation of \\(f_2\\) can be computed in linear time (in the number of TAFs) which results directly from the prior results on annotated logic [17, 38] and allows us to leverage existing efficient implementations [2]. We verify this empirically (Figure 10). In this work, we examine the top-k variant of \\(f_2\\) and provide empirical evidence that supports it. In practice, we compute top-k regions - corresponding to the TAF at (agt, r) (picking r from Dr) in parallel."}, {"title": "3.3 Rule-Based Agent Behavioral Modeling", "content": "As described in Section 3.1 we assume that there exists a set of rules \\(I_{behav}\\) specifying the behavior of the agents. While we could design \\(I_{behav}\\) to allow for hard constraints on consistency (and while there are good reasons for doing so), we instead leverage the fuzzy nature of our underlying logic (as described in Section 3.1) which can then allow us to easily build an explainable parsimony function \\(\\sigma\\). Again, this function takes an agent and a logic program as arguments (and the logic program, \\(\\Pi\\), is the union of the initial conditions \\(H_{init}\\) and behavior rules \\(I_{behav}\\)) and returns a scalar. As we use the logical paradigm of [17, 38], each logical atom is associated with a subset of the unit interval - [l, u]. In this work, define the parsimony function as the aggregate over the lower bound of the interval, formally:\n\\(\\sigma_T (agt, \\Pi) = lb(\\Gamma^* (\\Pi)(normal(agt))(t))\\)\nIntuitively, we have a predicate normal, such that atoms formed with that predicate are annotated with an interval measuring the agent's level of normalcy. The minimal model of the program, \\(\\Gamma^* (\\Pi)\\) provides this annotation for a particular atom - here normal (agt) (the normalcy of agent agt) and time t (we can define \\(\\sigma\\) for a particular time - in practice we use the maximum time as it allows us to cover long-term predictions). Finally, lb returns the lower bound of the interval (as we will learn rules in a manner where we set the upper bound to 1 to easily ensure consistency).\nRule Learning Algorithm. From the training set, a set of rules is learned to model the normal behavior of the vessels based on the historical co-occurrences of periodic sequences among similar types of ships in similar waters. They are learned in a method akin to rule learning in [5, 37] where we restrict the body to have a single sequence of movement, refer Algorithm 1. These rules are population-specific among the vessels. Here, consider \\(\\tau'\\) to be a set of the associated region of the trajectory. We note that Algorithm 1 is quite efficient. It scans all trajectories in a given data. The quantity of trajectory size in terms of regions can be treated as a constant as it's from a data source. Hence, it turns out that Algorithm 1 is linear in terms of the size of the dataset (number of trajectories)."}, {"title": "4 EXPERIMENTAL RESULTS", "content": "Setup. We parsed Automatic Identification System (AIS) data of 614 vessels across the Black Sea AOI from January 2022 to March 2023. This involves the trajectory data t of each vessel in addition to its dynamic and statistical information. This data has trajectories of the length 2 to 165,000 data points (i.e., the vessel's latitude, longitude, timestamp, other features [28]) that span from 1 to 264 days. For all our experiments, we use a high memory compute node, Dell PowerEdge R6525 with the AMD EPYC 7713 64-Core Processors and 2TB RAM, along with three A30 GPUs. The region size is fixed arbitrarily at 0.025\u00b0 \u00d7 0.025\u00b0 which comes to 5.45km\u00b2 in our AOI for our experiments unless specified. Extending prior work [18, 33] where similar vessels were grouped, we perform trajectory clustering [43] with DBSCAN to group trajectories into 9 subset and we report average metrics across all clusters for both our method and our deep learning baseline. As the ground truth data for dark activity has limited availability, and we aim to generate regions at a future time, we mask each test trajectory to obtain a partial trajectory along with the ground truth - adapting from the setup in the prior work [10, 13, 16, 23, 50]. This strategy involves using historical data due to the scarcity of external ground truth dark activity, resulting in generating regions informed by historical behavior. Furthermore, our approach is data-efficient, enabling analysts to derive a set of rules even with a limited number of trajectories. Results with available limited ground truth dark activity can be found in the Appendix at https://arxiv.org/abs/2502.01503. \nThe masked part is considered the ground truth (Tagt) while the unmasked part is used to set the initial condition (init). We mask half the trajectory from its midpoint in all our experiments unless"}, {"title": "4.1 Experiments", "content": "We examine the ABD, RND, and DL approaches when applied to AIS data. We first inspect the area efficiency, which has practical significance. We then evaluate the methods for long-term reasoning capabilities. Further, we compare all approaches as a function of k in a standard setting. We also provide hyperparameter sensitivity concerning region size and ablation studies for \\(\\Pi\\) (based on different rule types), and the versatility to masking methods of the test trajectory. Finally, we assess ABD while limiting the training data before concluding with interpretability of results in ABD.\nArea Efficiency. In our application, we wish to identify the greatest number of locations for dark vessels while searching the smallest area possible - as identification of dark vessels would require resources such as aerial or satellite imaging. We examine recall as a function of area in Figure 2a. We found that recall for ABD saturates at 30km\u00b2 - achieving a recall of 0.99, which is 157% higher"}, {"title": "5 DEPLOYMENT", "content": "We designed a prototype system based on the abduction model with a live feed of trajectories, where it continuously updates its logic program as it generates regions in an online learning setting. This architecture is depicted in Figure 11. We use a microservices-based architecture for near real-time detection of maritime dark vessels that receives input training data delivered by data providers to an Amazon S3 bucket. The arrival of new data triggers a batch process that performs data indexing and generates symbolic regions. This processed data is then fed into a rule-learning microservice, which is subsequently transformed into a logic program by learning rules that are staged into the S3 bucket. In the production environment, live data is streamed via a Kafka feed. We use Apache Kafka to consume the AIS data stream in near real-time as a streaming architecture. An attribution processor subscribes to this feed and enriches the incoming data by tagging it with the necessary regions and indexing metadata. The enriched data is then integrated into the logic program (which includes both updated rules and TAFs), before being fed into the reasoner (\\(\\Gamma^*\\)), which infers k regions at a given time horizon. We then use Quantum Geographic Information System software to visualize the regions in the AOI for an end-user."}, {"title": "6 CONCLUSION", "content": "We identify the locations of dark maritime vessels using a combination of abductive inference and rule learning and provides explainable long-time horizon prediction - an area where machine learning approaches fail. These aspects were validated by our experimental results and we provide our deployment architecture with a live feed of data. This work can be extended by leveraging environmental knowledge in the logic program, which has a significant role in the maritime domain where we look to utilize techniques from neurosymbolic AI [39] that will enable the use of larger scale models for enhanced near-term precision while retaining the long-term reasoning ability of the abduction methods introduced in this paper. One direction for future work is to examine the case where an adversary is taking action to reduce it's ability of detection by algorithms such as those presented in this paper. For example, extending our work in the paradigm of adversarial geospatial abduction [36] can take us in this direction."}, {"title": "A APPENDIX", "content": "Technical Preliminaries\nLogical Language and Syntax. The language is defined with a set of constants that is partitioned into multiple domains (Di C C), examples of such subsets are: 11, 12, .. \u2208 Dloc - a set of all potential locations of the vessel, r11,12, .. \u2208 Dr - a set of all regions, and agt, .. \u2208 Dagt - a set of agents, as specified in Section 3.1. As usual in first-order logic, we define a corresponding set of variables (V), and a set of predicate symbols (P) with an arity (notated by arity(p) \u2208 W, where p\u2208 P and W is a set of all whole numbers). Terms (constants or variables) and predicates form atoms. Atoms and their negation are called literals. Literals are called ground literals if and only if there is no occurrence of any variables (they are replaced by elements from C). Consider G to be the set of all ground literals. A formula can be defined recursively- any literal is a formula and any combination of two formulae with logical connectives (conjunction A, disjunction V and negation \u00ac) is a formula.\nAnnotated Language. In addition to the first-order logic syntax and semantics, we allow for literals to be annotated with elements (intervals in [0, 1]) of a lower semi-lattice structure L (not necessarily complete) with ordering [17, 38]. We assume the existence of a set AVar of variable symbols ranging over L, and h is an n-ary function symbol over L and \\(\\mu_1,..., \\mu_\\eta\\) are annotations, then annotations can be defined [17, 38] as any member of L\\cup AVar or h(\\({\\mu_1,..., \\mu_\\eta\\})\\).\nL has a single bottom element (\\(\\bot\\)) and a set of top elements \\(\\top_0 = [0,0], ... \\top_i... \\top_{max} = [1, 1]\\). The notation height (\\(\\top\\)) is the maximum number of elements in the lattice in a path between \\(\\bot\\) and a top element. The annotations are represented with [l, u] which"}, {"title": "B APPENDIX", "content": "Additional Experiments with external ground truth data\nWhile we are not aware of any academic work that uses ground truth for actual dark vessels \u2013 the setup we proposed is adapted our use-case from the prior work in the area [10, 13, 16, 23, 24, 50], where they mask the historical trajectory to extract input and ground truth. This limitation is likely due to the requirement for non-AIS data to conform with the ship location. That said, our industry partner has provided us with several exemplars where they had confirmation based on an external source where they have verified AIS tampering. They have provided us four such trajectories. We did an experiment with this data and following the table 2 of the area needed to cover the tagged dark activity along with fraction of area of top-k regions needed to cover the doppler tagged dark activity out of the search space for four test cases. Here the model was trained in the normal way (with standard trajectories)."}]}