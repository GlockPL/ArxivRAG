{"title": "Automating Traffic Model Enhancement with Al Research Agent", "authors": ["Xusen GUO", "Xinxi YANG", "Mingxing PENG", "Hongliang LU", "Meixin ZHU", "Hai YANG"], "abstract": "Developing efficient traffic models is essential for optimizing transportation systems, yet current approaches remain time- intensive and susceptible to human errors due to their reliance on manual processes. Traditional workflows involve exhaustive literature reviews, formula optimization, and iterative testing, leading to inefficiencies in research. In response, we introduce the Traffic Research Agent (TR-Agent), an Al-driven system designed to autonomously develop and refine traffic models through an iterative, closed-loop process. Specifically, we divide the research pipeline into four key stages: idea generation, theory formulation, theory evaluation, and iterative optimization; and construct TR-Agent with four corresponding modules: Idea Generator, Code Generator, Evaluator, and Analyzer. Working in synergy, these modules retrieve knowledge from external resources, generate novel ideas, implement and debug models, and finally assess them on the evaluation datasets. Furthermore, the system continuously refines these models based on iterative feedback, enhancing research efficiency and model performance. Experimental results demonstrate that TR-Agent achieves significant performance improvements across multiple traffic models, including the Intelligent Driver Model (IDM) for car following, the MOBIL lane-changing model, and the Lighthill-Whitham-Richards (LWR) traffic flow model. Additionally, TR-Agent provides detailed explanations for its optimizations, allowing researchers to verify and build upon its improvements easily. This flexibility makes the framework a powerful tool for researchers in transportation and beyond. To further support research and collaboration, we have open-sourced both the code and data used in our experiments, facilitating broader access and enabling continued advancements in the field.", "sections": [{"title": "1 Introduction", "content": "Efficient traffic modeling is essential for optimizing modern transportation systems. As urbanization and traffic congestion continue to increase, improving traffic management and ensuring road safety are pressing challenges for researchers and policymakers. Accurate traffic models provide critical insights into various scenarios, including traffic flow optimization1\u20134, congestion prediction5\u20138, accident prevention9\u201311 and environmental conservation12\u201314. However, despite their importance, the typical workflow for developing traffic models remains labor-intensive, time-consuming, and prone to human errors. Researchers often conduct extensive literature reviews, manually optimize equations, and repeatedly test model iterations, leading to significant inefficiencies.\nRecent advancements in large language models (LLMs)15\u201319 have fundamentally transformed many fields by demonstrating powerful capabilities in reasoning and generation20. Building on these developments, AI agents\u2014autonomous systems designed to perform specialized tasks with minimal human involvement-have emerged as powerful tools. By leveraging the Chain-of- Thought (CoT) reasoning21,22 and in-context learning23 capabilities of LLMs, and further enhanced with dynamic memory24 and external tools25, AI agents can dynamically adapt to new challenges and continuously improve through iterative feedback and accumulated experience. These AI systems have already made significant progress in areas such as literature-based discovery 26, 27, code generation28,29, data analysis30\u201333 as well as chemical experiment design34 and materials discovery35\u201337. These advancements demonstrate their potential to accelerate research processes and improve performance and reproducibility across scientific disciplines. However, current autonomous research efforts mainly focus on refining experimental pipelines, hyperparameters, or optimizing neural network architectures, with less focus on innovating physical models. As one of the physical models closely tied to real-world dynamics, traffic models hold significant potential for driving innovation and advancing human productivity. Developing AI agents capable of autonomously generating, optimizing, and innovating traffic models presents a promising opportunity to address critical transportation challenges, improve efficiency, and promote sustainability.\nThis work introduces the Traffic Research Agent (TR-Agent), an AI-driven system designed to autonomously develop"}, {"title": "2 Results", "content": "In this section, we present the automatic improvement process of traffic models using our TR-Agent. We selected three representative traffic models for experiments to demonstrate the versatility and effectiveness of our automatic research"}, {"title": "2.1 Improvement for IDM Car-Following Model", "content": null}, {"title": "2.1.1 Experimental setup", "content": "We collected a dataset with 7960 car-following events on urban expressways in Shanghai43 to assess the performance of the car-following models. Each event in the dataset is represented by an N \u00d7 4 matrix, where N denotes the time steps, and the four columns correspond to spacing s, following vehicle speed v, leading vehicle speed vi, and the relative speed \u0394v between the following and leading vehicles, respectively. The sampling frequency for these events is 0.1 seconds, with each event lasting over 15 seconds, ensuring N > 150 and thus maintaining the completeness and uniqueness of the following events. As the IDM requires hyper-parameter optimization, we need to calibrate the model's hyper-parameters to ensure a fair comparison of its performance. Specifically, we randomly selected 20% of the following events to form the calibration dataset, while the remaining 80% constituted the validation dataset. We utilized genetic algorithms44 for hyper-parameter tuning, and use the Mean Absolute Error (MAE) as the objective function to minimize the discrepancy between simulated and observed spacing. A detailed description of the evaluation metrics can be found in Sec. 4.3.\nTo evaluate the model's performance across different stages of the car following process, we classified the data points in each event into four categories: \"Free driving,\" \"Following,\" \"closing In,\" and \"Emergency braking,\" based on the Wiedemann-99 model45. Statistical analysis revealed that these four categories represent 39.70%, 15.79%, 31.56%, and 12.95% of the data points, indicating a relatively balanced sampling distribution. During the evaluation phase, we report the overall MAE and the MAE for each stage. These scenario-based performance evaluations allow for an in-depth analysis of the model's strengths and weaknesses across different stages of car-following, enabling TR-Agent to provide more targeted improvement suggestions."}, {"title": "2.1.2 Improvement process", "content": "To demonstrate the improvement process of TR-Agent on the IDM, we selected a random experiment and visualized its experimental report, as shown in Fig. 2. The report records the Python code of the improved model for each iteration, along with performance evaluation results, deficiency analyses, and suggestions for further improvement. For the convenience of analysis, we converted the Python functions into mathematical formulas and simplified the deficiency analysis and suggestions, retaining only the key information for clarity and conciseness. In the experiment, each trial was performed for a maximum of 10 iterations, and two representative intermediate iterations were selected for display, along with the baseline model information and the final improvement outcomes. The complete iteration process is available in the supplementary files. In Fig. 2, The gray explanatory text above the formulas was extracted from the Python code comments generated by the Code Generator, which offers additional insight into the reasons behind the improvements. For the IDM, we set a minimum performance improvement threshold of 25%, meaning that iterative refinement will continue until this target is achieved or the maximum iteration is reached.\nWe analyze this improvement process step-by-step, from top to bottom. The initial IDM model consists of two mathematical equations: one for acceleration a and the other defining the desired minimum gap $s^*(v, \\Delta v)$, which influences the acceleration calculation. The original IDM model yielded an overall MAE of 4.385 on the evaluation dataset. In the scenario-specific evaluation, the MAE for \"Free driving\" was 4.0; for \"Following,\" it was 5.16; for \"Closing in,\" it was 5.53; and for \"Emergency braking,\" it was 2.85. Evidently, the model performed relatively poorly in the \"Following\" and \"Closing in\" stages. TR-Agent's deficiency analysis highlighted this issue, suggesting that the simplistic handling of the dynamics involved in rapid changes in the leading vehicle's speed could be the reason. Additionally, the analysis noted that the square term in the acceleration formula could make the model overly sensitive to spacing changes, causing sudden braking or acceleration events. After some iterative improvements, TR-Agent proposed the introduction of dynamic smoothing techniques, such as using a sigmoid function to optimize the acceleration formula, which resulted in the V1 version of the IDM improved model. This version introduces an innovative acceleration calculation based on the difference between the spacing and the desired minimum gap. The characteristics of the sigmoid function were utilized to ensure smoother responses to sudden changes in spacing. Evaluation results showed a 14.35% improvement in performance compared to the baseline, with the greatest improvements in"}, {"title": "2.2 Improvement for MOBIL Lane-Changing Model", "content": null}, {"title": "2.2.1 Experimental setup", "content": "In this experiment, we use the NGSIM trajectory dataset46 to verify the performance of the MOBIL lane change prediction algorithm. The NGSIM dataset provides high-resolution, real-world vehicle trajectory data, capturing detailed information such as vehicle positions, speeds, and accelerations. For this analysis, we extracted data from 4 seconds before and after vehicle lane change events, using data from the 3 seconds before the lane change as positive samples, and the remaining data as non-lane change samples. With a sampling frequency of 10 Hz, we obtained 4,980 positive sample data points. An equal number of negative sample data points were randomly selected to ensure a balanced dataset. For the evaluation metrics, we use the F1 score to measure lane-changing prediction performance, along with precision, recall, and specificity to provide additional information. A comprehensive description of these metrics can be found in Sec. 4.3."}, {"title": "2.2.2 Improvement process", "content": "Similar to the illustration of the IDM improvement process, we also present the MOBIL improvement process in Figure. 3. For clarity, we also selected two intermediate improvement results along with the baseline model and the final improved model for demonstration. During the iterations, we set the minimum performance improvement threshold at 50%. Similar to the approach used in the IDM model, we also employed genetic algorithms for hyperparameter tuning.\nFrom Figure. 3, we can observe that the original MOBIL model makes decisions based on lane-changing incentives (as depicted in Eq. 3) and safety constraints for acceleration. The initial MOBIL model performed poorly on our evaluation dataset, with a precision of 0.552, a recall of 0.215, and an F1 score of 0.310. The deficiency analysis highlighted several key issues, including the model's simplistic safety criteria, limited consideration of surrounding vehicles, and a bias towards immediate benefits over long-term traffic flow efficiency. TR-Agent's improvement proposals suggested enhancing the safety criteria, incorporating game theory for cooperative decision-making, and implementing dynamic decision-making thresholds. These suggestions resulted in the improved MOBIL model V1, which shows a modest performance gain (4.73%) in evaluation. From the mathematical formula, we can see that the change occurs in the safety constraint, shifting from a constraint on $\\tilde{a}_n$ to a constraint on the relative distances to the target lane's front vehicle ($s_{tf}$) and rear vehicle ($s_{tr}$). In this version, the parameter $b_{safe}$ has been redefined from an acceleration constraint to a distance constraint. This modification makes the safety constraint more direct and reduces the potential risk of collision after a lane change by focusing on relative distance. The last two suggestions, involving game theory and dynamic decision-making thresholds, were not implemented in V1, as they are broader in scope and require additional effort to implement."}, {"title": "2.3 Improvement for LWR Traffic Flow Model", "content": null}, {"title": "2.3.1 Experimental setup", "content": "We use the Performance Measurement System (PeMS)47 dataset to evaluate the performance of the improved LWR model. The PeMS dataset is a comprehensive collection of traffic data from California's freeway system, providing detailed measurements such as vehicle flow, speed, and occupancy across various locations and times. Specifically, we use the PeMS08 data, which is collected by 170 detectors every 5 minutes for a total of 62 days. During evaluation, we use MAE as the primary performance metric. To assess the model's performance across different traffic conditions, we categorize the dataset into three density scenarios: low-density (0\u20130.3), medium-density (0.3\u20130.6), and high-density (0.6\u20131.0), with 3339, 1780, and 3942 data points respectively. Evaluating MAE across these density categories allows TR-Agent to identify specific scenarios where the model's predictions may be less accurate, facilitating targeted improvements and enhancing overall model robustness. A detailed description of the evaluation metrics calculation can also be found in Sec. 4.3."}, {"title": "2.3.2 Improvement process", "content": "In this experiment, for clarity and convenience, we focus on improving the velocity equation in Eq. 5, specifically the relationship between velocity v(p) and density p: $v(\\rho) = v_f(1 - \\frac{\\rho}{P_m})$. The improvement process is illustrated in Fig. 4. Unlike the more complex improvement cases of IDM and MOBIL, this experiment involved fewer iterations. The model reached the predefined improvement target (50%) after just two iterations, allowing us to present the entire iterative process. The simplicity of the equation being optimized likely contributed to the rapid convergence, as TR-Agent required fewer trials to identify an effective improvement strategy.\nAs depicted in Fig. 4, the baseline velocity equation employs a simple first-order relationship between density and velocity. The evaluation results show a total MAE of 0.435, with the following breakdown: an MAE of 0.112 in low-density conditions, an MAE of 0.337 in medium density, and a significantly higher MAE of 0.752 in high-density scenarios. This indicates that the model performs poorly in high-density conditions, primarily due to the overly simplistic assumption of a linear relationship between velocity and density, as highlighted in the deficiency analysis. To address this, the improvement proposal focuses on introducing higher-order terms to better capture the complex interactions and dynamics that occur in dense traffic. In the V1 version of the modification, TR-Agent implemented a square density term to enhance the nonlinearity of the velocity equation. However, the evaluation results suggested that this adjustment negatively impacted the model's overall performance, resulting in a 5.04% drop in effectiveness. TR-Agent further analyzed this situation and determined that directly using a squared function to model the impact of density on speed was too aggressive. This approach led to unrealistic speed predictions in high-density scenarios, where the velocity dropped too sharply, failing to align with real-world traffic dynamics. TR-Agent suggested adopting a polynomial or logistic function to address this issue and provide a smoother and more gradual transition as density increases. A polynomial approach, with terms of varying degrees, would allow for more flexibility in modeling different phases of traffic flow, while a logistic function would offer a more controlled and bounded response to rising density,"}, {"title": "3 Discussion", "content": null}, {"title": "3.1 Cost Efficiency of TR-Agent", "content": "One of the key advantages of TR-Agent is its cost efficiency. The system operates by calling the GPT-4 API, with each iteration costing approximately $0.10. On average, each model improvement costs $1-$2, which is considerably lower than traditional traffic model development processes. Conventional approaches involve extensive manual labor, iterative testing, and frequent adjustments, all of which are resource-intensive and time-consuming. TR-Agent's ability to streamline the refinement process with minimal costs provides a significant benefit for researchers and engineers, particularly in terms of scalability. This low operational cost enhances TR-Agent's accessibility, making it a viable option for both academic and industrial applications requiring efficient model optimization."}, {"title": "3.2 Ethical Considerations", "content": "The potential of TR-Agent to replace human researchers is an important ethical concern. While TR-Agent serves as a powerful research assistant, it is not yet capable of fully replacing human expertise. The system excels in identifying and testing promising ideas, but it lacks the capacity for in-depth theoretical derivation and critical analysis. For example, in the improvement of the LWR velocity equation, despite achieving a performance enhancement of over 90% (Fig. 4), the improved formula was not derived from the original formula (Eq. 4), leading to potential inconsistencies. This situation necessitates further examination"}, {"title": "3.3 Limitations of TR-Agent", "content": "Despite TR-Agent's promising performance in automating traffic model improvement, several limitations need to be acknowl- edged:"}, {"title": "3.4 Future Improvements", "content": "Through the analysis of the framework's limitations, we identified several enhancements that can further improve TR-Agent's capabilities:"}, {"title": "4 Methods", "content": null}, {"title": "4.1 Framework of TR-Agent", "content": "Our proposed TR-Agent is designed as an AI-driven system capable of autonomously generating, refining, and evaluating traffic models. The framework, as illustrated in Fig. 1, consists of four key components: the Idea Generator, the Code Generator, the Evaluator, and the Analyzer. The Idea Generator extracts relevant domain knowledge from academic papers or online resources and, following the prompt's instructions, generates innovative ideas to improve traffic models. These ideas are then passed to the Code Generator, which implements them as programming functions. The Evaluator then tests these algorithms against specific performance metrics using prepared datasets. The results are compiled into experiment reports and reviewed by the Analyzer. If the performance meets the criteria, the Analyzer identifies the key success factors, concluding the process. On the other hand, if the results fall short, the Analyzer investigates the issues and sends feedback to the next iteration for further refinement. This iterative process allows for continuous optimization of the model development. The following sections detail each component of the TR-Agent framework."}, {"title": "4.1.1 Idea Generator", "content": "The Idea Generator is a core component of TR-Agent, designed to produce innovative, mathematically rigorous improvements to traffic models by synthesizing domain-specific knowledge, as illustrated in Fig. 6. Leveraging both the inherent knowledge of large language models and external information retrieved via RAG technology24, it generates ideas based on comprehensive reviews of offline academic literature and online resources.\nGuided by the carefully designed Idea Generation Prompt, the idea generation process starts by analyzing the foundational principles and mathematical structures of the traffic model targeted for improvement. With this knowledge, the Idea Generator identifies deficiencies in the original model, focusing on areas where improvements are both necessary and feasible. Finally, with a comprehensive understanding of the traffic model, the Idea Generator then formulates new ideas for model improvement. After generating improvement ideas in the initial iteration, the Idea Refinement Prompt (detailed on the left of Fig. 8) enables"}, {"title": "4.1.2 Code Generator", "content": "The Code Generator module is designed to transform novel ideas generated by the Idea Generator into practical, executable solutions. Leveraging the coding capabilities of large language models, the Code Generator, depicted in Fig. 7, employs advanced programming synthesis techniques to create efficient and functional code, ensuring the implementation of improved traffic models is both effective and robust.\nUpon receiving the task of implementing an improved traffic model, the Code Generator initiates an iterative process of code refinement and debugging until a satisfactory solution is achieved. This process begins by completing a function template named Improved_<model_name> in Python, as outlined in the Code Generation Prompt in Fig. 7. The initial function template includes the provided input/output parameters and necessary comments. With the powerful code completion capabilities of large language models, novel ideas from the Idea Generator are systematically transformed into Python functions. The module then undergoes an iterative debugging process to identify and rectify errors or inconsistencies within the model code. This involves testing the function with unit inputs, analyzing the outputs along with runtime information, and refining the code based on the feedback. This process is driven by the Code Refinement Prompt that includes the source code and the tracing of runtime error messages, followed by specific coding guidelines, as described on the right of Fig. 8. Through this iterative refinement and debugging cycle, the Code Generator incrementally improves the code, ensuring it is error-free and executable. The final output is a self-contained, executable model function ready for further evaluation and analysis."}, {"title": "4.1.3 Evaluator", "content": "The Evaluator module is responsible for the evaluation of the model produced by the Code Generator. Unlike other components in the TR-Agent framework, the Evaluator does not rely on LLM capabilities. Instead, it utilizes a range of evaluation methodologies tailored to the specific tasks, ensuring a thorough and objective assessment of the traffic models.\nUsing the executable model function from the Code Generator, the Evaluator assesses the model's performance on evaluation datasets collected from real-world scenarios. The specific performance metrics vary depending on the type of model"}, {"title": "4.1.4 Analyzer", "content": "The Analyzer is responsible for assessing the performance of the generated new traffic models and providing actionable feedback for further refinement. After the evaluation phase, the Analyzer reviews the experiment reports and determines whether the trial has successfully met the performance criteria. Depending on the results, the Analyzer triggers different feedback processes guided by the System Prompt, as shown in Fig. 9."}, {"title": "4.2 Backgrounds of Three Traffic Models", "content": null}, {"title": "4.2.1 IDM Car-Following Model", "content": "The Intelligent Driver Model (IDM) is a car-following model developed to simulate realistic driving behavior and traffic flow dynamics. The IDM aims to describe how individual vehicles adapt their acceleration in response to the surrounding traffic environment. It is widely used in traffic engineering and transportation research due to its simplicity, robustness, and ease of reproduction. The IDM is based on the principle that a driver strives to maintain a safe and comfortable distance from the leading vehicle while trying to reach a desired speed. The following equation determines the acceleration a of the following vehicle:\n$a = a_{max} \\left[1-\\left(\\frac{v}{v_0}\\right)^{\\delta} - \\left(\\frac{s^*(v, \\Delta v)}{s}\\right)^2 \\right]$\nwhere $a_{max}$ is the maximum acceleration, v is the current speed of the following vehicle, $v_0$ is the desired speed, $\\delta$ is the acceleration exponent, s is the current gap to the leading vehicle, and $\\Delta v$ is the speed difference between the following vehicle and leading vehicle. $s^*(v, \\Delta v)$ is the desired minimum gap, defined as:\n$s^*(v, \\Delta v) = s_0 + max \\left(0, vT + \\frac{v\\Delta v}{2\\sqrt{a_{max}b}}\\right)$\nHere, $s_0$ is the minimum gap, T is the desired time headway, and b is the comfortable deceleration. The IDM captures both acceleration and deceleration behaviors, making it a robust model for analyzing traffic dynamics and vehicle interactions."}, {"title": "4.2.2 MOBIL Lane-Changing Model", "content": "The Minimizing Overall Braking Induced by Lane Changes (MOBIL) model is a widely used decision-making framework in traffic simulation, particularly for lane-changing behavior on multi-lane roads. Developed to complement longitudinal driving models, such as the Intelligent Driver Model (IDM), MOBIL provides a rule-based approach to lane changing by considering both the safety and utility of the maneuver. The model evaluates whether a lane change benefits the driver and the surrounding traffic, balancing the need to minimize the braking of neighboring vehicles while maximizing individual progress. According to MOBIL, the decision to change lanes is governed by the following incentive criterion40:\n$\\tilde{a}_c - a_c + p (\\tilde{a}_n \u2013 a_n + \\tilde{a}_o \u2013 a_o) > A_{ath}$\nHere, $\\tilde{a}_c$ is the new acceleration for the subject vehicle after the lane change and $a_c$ is the current acceleration. The terms $\\tilde{a}_n \u2013 a_n$ and $\\tilde{a}_o - a_o$ represent the acceleration changes for the new and old followers, respectively. The politeness factor p adjusts the influence of these neighbors, while $A_{ath}$ is a threshold that prevents marginal lane changes. A lane change is executed if the gain in the subject vehicle's acceleration outweighs the combined disadvantages to the new and old followers, considering both personal benefit and overall traffic impact."}, {"title": "4.2.3 LWR Traffic Flow Model", "content": "The Lighthill-Whitham-Richards (LWR) model was developed independently by Lighthill and Whitham in 195541 and Richards in 195642. It describes traffic flow using the continuity equation, capturing the conservation of vehicles, and an equilibrium speed-density relationship. In this framework, the model assumes that traffic flow is always in a state of equilibrium, meaning that the speed and density of vehicles at any given point are instantly adjusted to maintain this balance.\n$\\frac{\\partial q(x,t)}{\\partial x} + \\frac{\\partial \\rho(x,t)}{\\partial t} = 0$\nThe continuity equation is presented at Eq. 4, where q(x,t) represents the traffic flow (vehicles per unit time), and p(x,t) denotes the traffic density (vehicles per unit length) at position x and time t. Another key component of the LWR model is the relationship between traffic density p and velocity v, often modeled using the Greenshields fundamental diagram. This relationship is given by:\n$ \\left\\{\\begin{array}{l}q(\\rho) = \\rho v_f (1 - \\frac{\\rho}{P_m})\\\\v(\\rho) = v_f (1 - \\frac{\\rho}{P_m})\\end{array}\\right.$"}, {"title": "4.3 Evaluation Metrics", "content": null}, {"title": "Metrics for IDM improvement:", "content": "In the IDM iterative improvement process, the evaluation metric, Mean Absolute Error (MAE), is defined as:\n$MAE = \\frac{1}{MN} \\sum_{i=1}^{M} \\sum_{j=1}^{N} | s_{ij}^{simulated} - s_{ij}^{observed} |$\nwhere M represents the number of following events, N denotes the number of time steps within each event, $s_{ij}^{simulated}$ is the simulated vehicle spacing for the i-th event at the j-th time step, and $s_{ij}^{observed}$ is the corresponding observed ground truth. Additionally, The MAE for each driving state $MAE_{state}$ is calculated by Eq. 7:\n$MAE_{state} = \\frac{1}{MN} \\sum_{i=1}^{M} \\sum_{j=1}^{N} I_{state} | s_{ij}^{simulated} - s_{ij}^{observed} |$\nwhere $I_{state}$ is the indicator function, ensuring that only the relevant time steps corresponding to the given driving state are considered when calculating $MAE_{state}$. The states include \"Free driving\", \"Following\", \"Closing in\" and \"Emergency braking\". For each state, the $MAE_{state}$ is computed to assess the performance of the model in specific driving scenarios. This approach allows for a more granular evaluation of the model's accuracy, targeting different aspects of driving dynamics. For instance, the \"Free driving\" state primarily assesses the model's ability to maintain appropriate spacing during low-speed or non-interactive periods, while the \"Closing in\" and \"Emergency braking\" states evaluate the model's response to sudden deceleration and high-risk scenarios."}, {"title": "Metrics for MOBIL improvement:", "content": "Lane change prediction is framed as a binary classification problem, with the F1 score serving as the primary metric for evaluating model performance in our experiment. We also report Precision, Recall, and Specificity in our evaluation results to provide a more comprehensive assessment. The mathematical formulas for these metrics are as follows:\n$Precision = \\frac{TP}{TP+FP} \t Recall = \\frac{TP}{TP+FN} \\t Specificity = \\frac{TN}{TN+FP}$\n$F1 Score =2\\times \\frac{Precision \\times Recall}{Precision + Recall}$\nHere, TP, TN, FP, and FN denote true positives, true negatives, false positives, and false negatives, respectively. The F1 score balances the Precision and Recall, providing a nuanced measure of model performance. Precision indicates how many of the predicted positive cases were actually correct, Recall measures the model's ability to correctly identify positive cases, and Specificity measures the ability to correctly identify negative cases. These metrics collectively provide a detailed evaluation of the model's effectiveness in predicting lane changes."}, {"title": "Metrics for LWR improvement:", "content": "We also applied MAE as an evaluation metric in the LWR velocity equation improvement process, which is defined in Eq. 10.\n$MAE = \\frac{1}{N} \\sum_{i}^{N} |v_{i}^{pred} - v_{i}^{gt}|$\nHere, $v_{i}^{pred}$ is the model-predicted velocity for sample i, and $v_{i}^{gt}$ is the corresponding ground truth value. For the MAE calculation in different density scenarios, a similar approach to the IDM case is used, where an indicator function distinguishes the density levels of each sample. Specifically, the indicator function"}]}