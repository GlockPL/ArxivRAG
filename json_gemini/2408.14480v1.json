{"title": "Handling abort commands for household kitchen robots", "authors": ["Darius Has", "Adrian Groza", "Mihai Pomarlan"], "abstract": "We propose a solution for handling abort commands given to robots. The solution is exemplified with a running scenario with household kitchen robots. The robot uses planning to find sequences of actions that must be performed in order to gracefully cancel a previously received command. The Planning Domain Definition Language (PDDL) is used to write a domain to model kitchen activities and behaviours, and this domain is enriched with knowledge from online ontologies and knowledge graphs, like DBPedia. We discuss the results obtained in different scenarios.", "sections": [{"title": "I. INTRODUCTION", "content": "The task of aborting commands is essentially a problem of planning, or rather replanning whose core value comes when a robotic system is able to autonomously infer a fallback plan without a human in the loop. A robot enhanced with capabilities of handling abort commands will able to reconfigure and replan its actions so that it can leave its environment in a clean state represents a step towards a more robust solution, given the fact that in the world of robotics malfunctions and unresponsiveness are risks that can be mitigated by having a fallback mechanism.\nWe developed here an Abort Task module, as an enhancement to an existing robot simulator solution (i.e. AbeSim []) and is designed to handle cancel or abort commands. Handling such commands is essential in improving the overall safety, robustness and reliability of the robots. The proposed system is exemplified with a running scenario with household kitchen robots.\nKitchen robots are able to execute simple tasks such as fetching kitchen vessels and utensils, cutting vegetables or even preparing a recipe. Ideally, they would also be able to clean after themselves or be able to recover and replan their actions once they receive a cancel or abort command so that the kitchen environment is left in a clean or safe state.\nThe paper is structured into six sections, starting with related work towards the task of cancelling, moving forward to the technical instrumentation section where the main tech-nical apparatus will be showcased. Afterwards, the system's architecture and additional modules will be discussed, clarifying that the solution is an addition to an existing and functional robot simulator software able to perform tasks such as fetching cutlery and vessels, cutting or peeling vegetables or preparing a recipe. Special sections will be dedicated to running experiments and discussing results, as well as to providing an overview of the solution proposed along with an objective conclusion incorporating shortcomings and future improvements that may be taken into account."}, {"title": "II. RELATED WORK", "content": "We briefly introduce related research on semantic knowledge as a means to increase the knowledge base of robotic systems assigned to perform and solve planning based prob-lems. Afterwards, a brief explanation along with references will be provided towards using PDDL for solving planning problems, together with motivation for the employment of derived predicates by showcasing their benefits."}, {"title": "A. Handling abort commands", "content": "The key challenges of handling cancel commands have been acknowledged by Haarland et al. [1]. These challenges include: the complex relationship between a goal and its subgoals, highlighting a need for a recursive approach for them, while also taking into account the plans in progress, i.e. the actual state of the world. Handling such scenarios is increasingly important as cancel or abort commands can come at anytime, so the planning system needs to be reactive. A clear differentiation does exist between: (i) dropping a goal or a task and (ii) aborting it, with the latter being characterized as having a plan on how to handle the command, while dropping meaning that no \"clean-up\" procedure is required. However, Haarland et al. have approached these to tasks as one, following the observation that dropping a task means aborting it without having a sequence of steps to take.\nMora et al. have proposed a solution based on the Belief-Desire-Intention (BDI) [2] agent architecture. The BDI sys-tem includes abstract methods for handling abort commands, similar to a fallback mechanism. One difference with our appriach is that goals are not explicitly programmed with having abstract methods on how to recover from a current state, but rather the world is expressed by means of actions that can be taken, goals to be achieved and objects to interact with. This means that the responsibility of replanning is considered as a search function to be solved by a planner based on, at most times, a heuristic or greedy search algorithm. The function takes as inputs the current state, desired state and the capabilities of the robot and outputs a sequence of steps to be taken, meaning that handling of such abort commands is not explicitly programmed."}, {"title": "B. Semantic representation in planning systems", "content": "Semantic representation is as an aid for the planning system. In this line, Bernardo et al. [4] describes how incorporating semantic knowledge into robotic systems can greatly enhance their capabilities. For example, by adding semantic knowledge to a robot's representation of its environment, it is able to make more informed decisions and perform tasks more efficiently. This goes along with the idea that incorporating ontologies with a planning system can provide more context, an idea that is further explored in the approach taken for the cancel task presented in the next sections.\nFollowing the same line of augmenting procedural-like instructions such as those resulted from an AI planning system, but providing a vastly different approach, Pareti [5] presents an approach in which semantic knowledge can be used to extract information in a structured manner from a sequence of steps, i.e. a plan, in that way having a richer semantic representation with the scope of finding out what humans think and know by observing how they perform actions, showing how semantic ontologies can help increase the knowledge of a robotic system.\nIn the field of artificial intelligence, PDDL represents one of the most mature, abstract and widely considered solutions for solving problems that require the search of a sequence of actions to be taken. Yu-qian Jiang in [6] performs an experiment based comparison of two of the most widely used solutions for planning problems: planning domain definition language and answer set programming, concluding that, while each has its strengths, PDDL-based systems tend to behave better on problem with longer solutions, while ASP works better in an object crowded environment in which complex reasoning is required. Taking into consideration the task at hand, which is cancelling a kitchen related task and making sure that all the objects in the scene are left in a stable state, along with the fact that the objects in the scene are limited, PDDL represents a viable solution.\nSeveral specifications of PDDL have been released, each with its set of additions and modifications to the already ex-isting structure. One such addition is represented by axioms or derived predicates, which represent a special type of predicate that can be inferred by the planner from the current state, without being necessary to explicitly state it as an effect of an action or definition of the state. However, the planning community questioned the necessity of such axioms when talking about the ability of the planner to handle real-life domains and problems efficiently. Thiebaux et al. [7] have argued for the benefits of derived predicates and they also have probided an empirical presentation of the benefits in terms of decreasing the search space. and, as a result, promote efficiency, while also adding significant expressive power to PDDL specification. That is, the ability to more concisely express complex relationships."}, {"title": "III. TECHNICAL INSTRUMENTATION", "content": "This section starts by presenting the Abe Sim, the kitchen simulator used with the solution proposed. Then, the PDDL is presenting for expressing the world in which a planning problem resides, while showcasing the constraints and actions serving as guidelines for the robot. Then, an extension of PDDL will be explored - i.e. derived predicates and their benefits in the context of handling abort commands. Lastly, how ontologies can be used to augment data is proposed, as well as DBPedia can be used for the given task."}, {"title": "A. Abe simulator", "content": "In a first solution using a robot simulator, Nevens et al. [8] have focused on natural language systems benchmark. The benchmark consists of a simulator in which a robot tries to follow the steps of cooking a meal following a recipe, in the way in which the NLU system understands them. If the steps are correctly inferred by the natural language system, they should be feasible for the robot and the outcome should be the one desired. Another possible application of a robot simulator is presented in [9], in which AbeSim is used as a VR environment in which a human can interact with a robot, showing yet again the importance of the usage of a robot simulator, which on one hand provides a means of validating the correctness and completeness of a solution, while also mitigating the risks of having an actual robot constructed whose components may malfunction and with which the interaction would be harder to observe and troubleshoot."}, {"title": "B. PDDL with derived predicates", "content": "PDDL allows the abstraction of the domain of the world by formalising actions and predicates in order to express the state and its transitions."}, {"title": "C. Online ontologies. DBpedia", "content": "Online ontologies contain structured knowledge extracted from various sources and are usually stored in RDF format, which is considered to be the standard format for Semantic Web. Online ontologies are especially useful when we are talking about understanding, augmenting missing or incom-plete data and enriching the capabilities of a robotic system. DBpedia represents one of such existing ontologies. In order to query information, a special query language is used, called SPARQL. The main advantages of querying online ontologies such as DBpedia are: (i) structured information. Information that can be easily queried, interpreted and processed depending on the intent of its usage; (ii) semantic relationships exist between entities. This can improve the knowledge and the understanding of the robotic system; (iii) DBpedia is linked to other online ontologies, making it possible to have access to relationships that do not exist in DBpedia or are too abstractly expressed. DBpedia can aid when not enough information in the robot's knowledge base exists, especially in the case in which an action on a rather abstract object needs to be taken. By augmenting the existing data, context can be provided to the robot, further enhancing its knowledge along with its capabilities."}, {"title": "IV. SYSTEM ARCHITECTURE", "content": "This section will present the overview of the system ar-chitecture together with the new modules added and explain their functionalities. One thing to mention from the beginning is the fact that the existing robot simulator was extended and integrated so that a PDDL based solution will be used when cancelling a command. The system architecture (Fig. 1) presents the main module together with two new modules added for mapping the world extracted from the simulator to a PDDL problem and for actually containing the PDDL domain, receiving the PDDL problem computed dynamically and solving the actual problem. Each of these two added modules interact with external systems: the mapper interacts with DBpedia in order to augment data and help map an object from the scene to an object from the DBpedia domain and the PDDL module interacts with a server that contains different planners, each with different algorithm solutions whose puprose is to output a sequence of actions that leave the world in the desired state expressed in the goal definition."}, {"title": "A. PDDL module", "content": "The PDDL module is the one responsible for containing the domain of the kitchen and for handling the communication with the planner server so that the domain and problem data is sent to it and the sequence of actions is received and processed so that it is forwarded to the existing simulator module for handling commands.\nThe first thing worth mentioning is the domain that contains the types of objects present in the kitchen: storage (\"clopen-able\" or \"notclopenable\", the difference between them being the fact that a \"clopenable\" storage can be opened or closed), device, fridge (a special kind of device), vessels, utensils and perishable and non-perishable food. All of these objects have to be of an abstract type named locatable in order for them to be marked as being able to be located in the scene at a certain location. The entire hierarchy of objects can be observed in Listing 1."}, {"title": "B. Abe PPDL mapper module", "content": "This module is responsible for taking the current world state of the abe and creating the initial state for the PDDL problem. This means that for each object, the mapper needs to infer its type and needs to infer the location of it so that it is specified in the PDDL problem. What's more, certain special characteristics need to be inferred also, such as: what objects the robot is holding in its hand, or whether a container can be moved or not. Furthermore, for devices or containers that can be opened, or turned off and on, the mapper needs to make sure that information about them being open, closed or on and off is inferred and mapped to the PDDL problem.\nThe mapper reads the world state from the simulator at the moment in which the cancelling request is sent and goes through each object and its particularities in order to make sure that it can extract all the information necessary. The type of the object is added to the PDDL problem and then characteristics of interest, such as location, movability, the fact that the object is closed or not or turned on and off are mapped to the problem using the available predicates.\nThere exists a direct correlation between the characteristics of an object in a simulator and their corresponding types in PDDL, which is used for this exact mapping. If, however, no information from the abe world is useful, the mapper uses DBpedia as a fallback mechanism for accessing necessary information in order to map the object to its corresponding type. An example of this mapping is the following: in the abe simulator any object that has characteristics such as 'canBake' or 'canCut' is considered to be a utensil. Similarly, for other PDDL types there exists a direct mapping that can be used.\nThere exists certain objects, usually meals, that do not contain any characteristics in PDDL apart from the fact that they can be grasped by the robot. Hence, custom SPARQL queries were written in order to interact with DBpedia and extract information about meals, in this case. Listing 4 presents how we can extract this kind of information, stating that meals, which are a special type of perishable food are considered to be every food from DBpedia that contains ingredients. There is an union with vegetables and fruits so that a whole set of perishable foods is inferred from DBPedia. This is the procedure in which the data extracted from the Abe world is augmented when needed so, in order for the mapper to be able to infer the type of a certain object from the scene."}, {"title": "V. RUNNING EXPERIMENTS", "content": "We considered two scenarios involving command cancel-lations: (1) Moving a bowl to the kitchen counter, and (2) Cutting an onion. For both experiments, there will be two parts that need to be taken into account and analyzed. These are the degree to which the world has been correctly mapped to a PDDL problem and the actual plan that the planning service has inferred using the domain provided with all the knowledge necessary and the problem that has been mapped from the actual state of the world of the simulator. What is more, the scene will be consistent between the two running scenarios, meaning that objects and their placement will differ only slightly. The particularities of the scene are: vessels and utensils, such as a knife will be present at the kitchen cabinet, a fridge, a kitchen counter and a kitchen cabinet exist as storage, an oven and a couple immovable parts exists to conclude the structure of the scene, such as the floor and the walls.\nIn the experiments, only the characteristics of each scenario will be analysed and a discussion will be made after presenting the resulted plans.\nBefore specifically analysing each scenario, one thing is to be noted, and that is the planning configuration used to output a plan. The planning system used is based on the Fast-Downward [10] framework, more notably the LAMA-first planning system. This planning system aims to heuristically solve a search problem using a greedy approach, based on best first search. LAMA-first disregards the refinements performed in a regular LAMA [11] model and hence, it does not take into account the cost of finding the solution. While the optimal plan is not guaranteed to be achieved because of the greedy best-first search approach, this planner configuration (Fast-Downward with LAMA-first) represents the only one in the planner service used that supports PDDL 2.1 specification and"}, {"title": "A. Running scenario 1. Moving a bowl to the kitchen counter", "content": "The robot is instructed to fetch a bowl. It goes and grab it and when it is on its way to the desired location of the bowl, an abort instruction is received. At the moment of receiving the cancel command, the world has been translated into a PDDL problem (Listing 6), with relevant information about the bowl being shown as: the medium bowl was inferred to be a vessel and it was inferred to be held in the right hand by the robot, indicated by the holding-right predicate.\nThe same listing shows the resulted plan, which consists of only one step: to put the medium bowl to the kitchen counter."}, {"title": "B. Running scenario 2. Cutting an onion", "content": "This scenario is more complex. There is only one command that precedes the cancellation command, which is exactly that of cutting the onion. The robot knows the location of a knife, the location of the onion and moves towards the location of the knife. After the knife is picked-up and the robot intends to go to the kitchen counter, where the onion resides, it is prompted yet again with the cancel command.\nListing 7 presents, as with the previous scenario, relevant information about the important objects in the scene, i.e. objects relevant for this scenario, as long as the plan provided. As seen, the mapper correctly infers the types of both the onion and the knife, considering them to be a perishable food and an utensil, which is in line to the classification made by humans using common sense. The interesting parts comes when looking at the resulting plan, which consists of two steps.\nThe first step is similar to the one taken in the first scenario, which is to put the knife, held in the right hand, on the kitchen counter. The second step shows the intent to move the onion to the fridge, which goes in line with the knowledge base constructed using derived predicates, that clearly specifies that all perishable foods need to reside in the fridge in order for them to be stored safely."}, {"title": "C. Results discussion", "content": "While the scenarios indicate that the fallback mechanism is indeed present and the PDDL module is able to translate the world correctly into a PDDL problem and provide a sequence of actions steps to be taken to leave the kitchen and its object in a clear state, it is also worth stating the fact that there is no single and hence, no optimal plan provided. In the first step of both scenarios, an object is fetched from the kitchen cabinet and after it is grabbed by the robot, the cancel command is received and in both, the first action step is to put the object at the kitchen counter. This represents an arbitrary decision taken by the robot, because in PDDL there is no difference between the two storage spaces. This represents a first shortcoming of the solution mentioned above, because there could be cases in which certain storage spaces to be more suitable to store certain objects. What is more, there is no info about the storage's occupation and hence, there could be cases in which the planner indicates that an object should be stored at a specific location, without having the context about the storage's fullness.\nAnother observation is the fact that right now, the system is limited to having certain unique objects, such as the fridge. It goes without saying that adding more objects to the scene will increase the search space and will make the search algorithm more costly. What's more, because the system has been tested with only one planner due to the need of support for derived predicates, there is no metric used to measure the quality of the result. One future improvement would be to search for several planners capable of handling derived predicates and using them in order to compare and measure the cost for each of the solutions provided in order to select the best, most cost effective solution."}, {"title": "VI. CONCLUSION", "content": "We proposed here a solution for the handling abort com-mands by robots. The robot is able to translate the world state into a PDDL problem, to infer a plan and to execute it in order to leave the objects in the kitchen in a clean, stable state. The derived predicates extension of PDDL comes with the main benefit of being able to abstractly, but concisely express commonsense rules for different types of objects to be taken into account and be used in the goal specification of the closed world, ensuring that the system is provided with a knowledge base of the relevant objects and their desired state. Ontologies are used to augment missing data between the state of the robot or the simulator and the necessary information.\nThe interesting researcher can improve the current imple-mentation by: (i) adding information about the state of the storage so that no steps that cannot be taken are inferred (e.g. moving an object into a full storage(l (ii) using derived predi-cates that take into account cost (iii) extending the hierarchy of objects in the PDDL domain, aor having more commonsense knowledge being expressed in the form of derived predicates. These represent steps towards enriching the knowledge base of the PDDL system."}]}