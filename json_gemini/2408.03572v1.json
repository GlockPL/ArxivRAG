{"title": "2D-OOB: Attributing Data Contribution through Joint Valuation Framework", "authors": ["Yifan Sun", "Jingyan Shen", "Yongchan Kwon"], "abstract": "Data valuation has emerged as a powerful framework to quantify the contribution of each datum to the training of a particular machine learning model. However, it is crucial to recognize that the quality of various cells within a single data point can vary greatly in practice. For example, even in the case of an abnormal data point, not all cells are necessarily noisy. The single scalar valuation assigned by existing methods blurs the distinction between noisy and clean cells of a data point, thereby compromising the interpretability of the valuation. In this paper, we propose 2D-00B, an out-of-bag estimation framework for jointly determining helpful (or detrimental) samples, as well as the particular cells that drive them. Our comprehensive experiments demonstrate that 2D-00B achieves state-of-the-art performance across multiple use cases, while being exponentially faster. 2D-00B excels in detecting and rectifying fine-grained outliers at the cell level, as well as localizing backdoor triggers in data poisoning attacks.", "sections": [{"title": "Introduction", "content": "From customer behavior prediction and medical image analysis to autonomous driving and policy making, machine learning (ML) systems process ever increasing amounts of data. In such data-rich regimes, a fraction of the samples is often noisy, incorrect annotations are likely to occur, and uniform data quality standards become difficult to enforce. To address these challenges, data valuation emerges as a research field receiving increasing attention, focusing on properly assessing the contribution of each datum to ML training [12]. These methods have proven useful in identifying low-quality samples that can be detrimental to model performance, as well as selecting subsets of data that are representative of enhanced model performance [23, 48, 27]. Furthermore, they are widely applicable in data marketplace for fair revenue allocation and incentive design [51, 45, 40].\nNevertheless, existing data valuation methods assign a scalar score to each datum, thereby failing to account for the varied roles of individual cells. This leaves the valuation rationale unclear and can be unsatisfactory and sub-optimal in various practical scenarios. Firstly, whenever a score is assigned to a data point by a particular data valuation method, it is crucial to understand the underlying justifications to ensure transparency and reliability, especially in high-stakes decision making [39]. Secondly, it is important to recognize the fact that even if a data point is of low quality, it is rarely the case that all the cells within this data point are noisy [37, 26, 43]. The absence of detailed insights into how individual cells contribute to ML training inevitably leads to discarding entire data points. This can result in substantial data waste, particularly when only a few cells are noisy and data acquisition is expensive. Finally, in data markets, different cells within a data point may originate from different data sellers [3, 10]. Consequently, a singular valuation for the entire point fails to offer equitable compensation to all contributing parties.\nOur contributions In this paper, we propose 2D-00B, a powerful and efficient joint valuation framework that can attribute a data point's value to its individual features. 2D-00B quantifies the importance of each cell in a dataset, as illustrated in Figure 1, providing interpretable insights into which cells are associated with influential data points. Our method is computationally efficient as well as theoretically supported by its connections with Data-00B [23]. Moreover, our extensive empirical experiments demonstrate the practical effectiveness of 2D-00B in various use cases. 2D-00B accurately identifies cell outliers and pinpoints which cells to fix to improve model performance. 2D-00B enables inspection of data poisoning attacks by precisely localizing the backdoor trigger, an artifact inserted into a training sample to induce malicious model behavior [13, 5]. 2D-00B is on average 200 times faster than state-of-the-art methods across all datasets examined."}, {"title": "Preliminaries", "content": "Notations Throughout this paper, we focus on supervised learning settings. For $d \\in \\mathbb{N}$, we denote an input space and an output space by $\\mathcal{X} \\subseteq \\mathbb{R}^{d}$ and $\\mathcal{Y} \\in \\mathbb{R}$, respectively. We denote a training dataset with $n$ data points by $\\mathcal{D} = \\{(x_{i}, y_{i})\\}_{i=1}^{n}$ where $(x_{i}, y_{i})$ is the $i$-th pair of the input covariates $x_{i} \\in \\mathcal{X}$ and its output label $y_{i} \\in \\mathcal{Y}$. For an event $A$, an indicator function $1(A)$ is 1 if $A$ is true, otherwise 0. For $j \\in \\mathbb{N}$, we set $[j] := \\{1, ..., j\\}$. For a set $S$, we denote its power set by $2^{S}$ and its cardinality by $|S|$.\nDataShapley The primary goal of data valuation is to quantify the contribution of individual data points to a model's performance. Leveraging the Shapley value in cooperative game theory [38], DataShapley [12] measures the average change in a utility function $U : 2^{\\mathcal{D}} \\rightarrow \\mathbb{R}$ when a data point is removed. For $i \\in [n]$, DataShapley of $i$-th datum is defined as follows.\n$\\Phi_{i}^{Shap} := \\frac{1}{n} \\sum_{k=1}^{n} \\frac{1}{\\binom{n-1}{k-1}} \\sum_{S \\subset \\mathcal{D}^{(i)} \\atop |S| = k - 1} [U(S \\cup \\{(x_{i}, y_{i})\\}) - U(S)]$\nwhere $\\mathcal{D}^{(i)} := \\{S \\subset \\mathcal{D}\\{(x_{i}, y_{i})\\} : S, |S| = k - 1\\}$. DataShapley $\\Phi_{i}^{Shap}$ in (1) considers every set $S \\subset \\mathcal{D}^{(i)}$ and computes the average difference in utility $U(S \\cup \\{(x_{i}, y_{i})\\}) - U(S)$. It characterizes the impact of a data point, but its computation requires evaluating $U$ for all possible subsets of $\\mathcal{D}$, rendering precise calculations infeasible. Many efficient computation algorithms have been studied"}, {"title": "Attributing Data Contribution through Joint Valuation Framework", "content": "Data valuation quantifies desiderata of data points, however, it does not describe what features contribute and how much to those specific data values. For instance, in anomaly detection tasks, data valuation methods can be deployed to detect anomalous data points, but they do not explain why they are abnormal, which is not generally desirable in practice. To address this challenge, we consider a joint valuation framework and assess a cell score for each feature of a data point. Here, a cell score is designed to quantify how a feature affects the value of an individual data point, attributing a data value to features.\nTo the best of the author's knowledge, Liu et al. [29] first consider a concept of the joint valuation in literature and introduce 2D-Shapley to quantitatively interpret DataShapley. To this end, we denote a 2D utility function by $u : [n] \\times [d] \\rightarrow \\mathbb{R}$, which takes as input a subset of data points $S \\subseteq [n]$ and a subset of features $F \\subseteq [d]$, and measure the utility of a fragment of the given dataset consisting of cells $\\{(i, j)\\}i\\in S, j\\in F$, where a tuple $(i, j)$ denotes a cell at the $i$-th datum and the $j$-th column. Then, 2D-Shapley is defined as\n$\\Phi_{ij}^{2D-Shap} := \\frac{1}{nd} \\sum_{k=1}^{n} \\sum_{l=1}^{d} \\frac{1}{\\binom{n-1}{k-1} \\binom{d-1}{l-1}} \\sum_{(S,F) \\subset \\mathcal{D}_{k,l}^{(i,j)}} M_{k,l}^{u}(S, F)$\nwhere $\\mathcal{D}_{k,l}^{(i,j)} := \\{(S, F) | S \\subseteq [n]\\{i\\}, F \\subseteq [d]\\{j\\}, |S| = k - 1, |F| = l - 1\\}$ and\n$M_{k,l}^{u}(S, F) = u(S \\cup \\{i\\}, F \\cup \\{j\\}) + u(S, F) - u(S \\cup \\{i\\}, F) - u(S, F \\cup \\{j\\})$.\nThe function $M_{k,l}^{u}$ allows us to quantify how much removing a specific cell at $(i, j)$ from a given set $(S \\cup \\{i\\}, F \\cup \\{j\\})$ affects the overall utility, and 2D-Shapley $\\Phi_{ij}^{2D-Shap}$ evaluates the average $M_{k,l}^{u}$ across all possible data fragments $(S, F) \\subset \\mathcal{D}_{k,l}^{(i,j)}$."}, {"title": "2D-OOB: an efficient joint valuation framework", "content": "Our idea builds upon the subset bagging model [14], which is well recognized as an earlier version of Breiman's random forest model [4]. A key distinction from a standard bagging model is that a weak learner in a subset bagging model is trained on a randomly selected subset of features. For $b \\in [B]$, we denote the $b$-th random feature subset by $S_{b} \\subseteq [d]$. Then, the $b$-th weak learner of a subset bagging model is given as follows.\n$\\hat{f_{b}} := \\underset{f}{argmin} \\sum_{i=1}^{n} w_{bi} l(y_{i}, f(x_{i, S_{b}}))$,\nwhere $x_{i, S_{b}}$ is a subvector of $x_{i}$ that only takes elements in a subset $S_{b}$. This difference enables us to assess the impact of which features are more influential: if $S_{b}$ includes a helpful (or detrimental) feature, we can expect the out-of-bag prediction $f(x_{i, S_{b}})$ to be good (or poor). We formalize this intuition and propose 2D-00B. For $i \\in [n]$, $j \\in [d]$ and $\\{(w_{b}, S_{b}, f_{b})\\}_{b=1}^{B}$, the 2D-00B for the $j$-th cell of the $i$-th data point is defined as follows,\n$\\Phi_{ij}^{2D-OOB} := \\frac{\\sum_{b=1}^{B} 1(w_{bi} = 0, j \\in S_{b}) T(y_{i}, f_{b}(x_{i, S_{b}}))}{\\sum_{b=1}^{B} 1(w_{bi} = 0, j \\in S_{b})}$,\nwhere $T : \\mathcal{Y} \\times \\mathcal{Y} \\rightarrow \\mathbb{R}$ is a utility function that scores the performance of the weak learner $f_{b}(x_{i, S_{b}})$ on the $i$-th datum $(x_{i}, y_{i})$. Specifically, for binary or multi-class classification problems, we can adopt $T(y_{i}, f_{b}(x_{i, S_{b}})) = 1(y_{i} = f_{b}(x_{i, S_{b}}))$. In this case, 2D-00B measures the average accuracy score of out-of-bag predictions (specifically, when the $i$-th data point is out-of-bag) if a cell $j$ is used in training $f_{b}$. For regression problems, we can use the negative squared error loss function, defined as $T(y_{i}, f_{b}(x_{i, S_{b}})) = -(y_{i} - f_{b}(x_{i, S_{b}}))^{2}$. In practice, $\\mathcal{X}$ could also be incorporated into $T$ to suit the specific use case.\nWhile Data-00B in (2) aims to assess the impact of the $i$-th datum, 2D-00B in (4) provides interpretable insights by evaluating the data point with various combinations of features, revealing which cells are influential to model performance. Leveraging subset bagging scheme, 2D-00B requires a single training of the bagging model, and thus it is computational efficiency."}, {"title": "Connection to Data-OOB", "content": "We now present interpretable expressions of how 2D-00B connects to Data-00B in the following proposition. To begin with, we denote a set of subsets of $[d]$ by $\\mathcal{S} := \\{S \\subseteq [d]\\}$. With $\\{(w_{b}, f_{b})\\}_{b=1}^{B}$, we define the $i$-th Data-00B when a particular subset $S$ is used as follows and denote it by $\\Phi_{i}^{OOB}(S)$.\n$\\Phi_{i}^{OOB}(S) := \\frac{\\sum_{b=1}^{B} 1(w_{bi} = 0) T(y_{i}, f_{b}(x_{i, S}))}{\\sum_{b=1}^{B} 1(w_{bi} = 0)}$\nProposition 3.1. For all $i \\in [n]$ and $j \\in [d]$, $\\Phi_{ij}^{2D-OOB}$ can be expressed as follows.\n$\\Phi_{ij}^{2D-OOB} = \\mathbb{E}_{F_{S}} [\\Phi_{i}^{OOB}(S) | j \\in S]$,\nwhere $\\mathcal{F}_{S}$ is an empirical distribution with respect to $S$ induced by the sampling process."}, {"title": "Experiments", "content": "In this section, we empirically show the effectiveness of 2D-00B across multiple use cases of the joint valuation: cell-level outlier detection, cell fixation, and backdoor trigger detection. As a summary, 2D-00B can precisely identify anomalous cells that should be prioritized for examination and subsequent fixation to improve model performance. In the context of backdoor trigger detection, 2D-00B demonstrates its efficacy by accurately identifying different types of triggers within poisoned data, showcasing its proficiency in detecting non-random, targeted anomalies. Our method also exhibits high computational efficiency through run-time comparison.\nThroughout all of our experiments, 2D-00B uses a subset bagging model with $B = 1000$ decision trees. We randomly select a fixed ratio of features to build each decision tree. Unless otherwise specified, we utilize half of the features for each weak learner and set $T(y_{i}, f(x_{i, S_{b}})) = 1(y_{i} = f(x_{i, S_{b}}))$. The run time is measured on a single Intel Xeon Gold 6226 2.9 Ghz CPU processor."}, {"title": "Cell-level outlier detection", "content": "Experimental setting In practical situations, even when dealing with abnormal data points, it is not always the case that all cells are noisy [37, 29, 21]. To simulate more realistic settings, we introduce noise to certain cells in the following two-step process: First, we randomly select 20% rows for each dataset. We then select 20% columns uniformly at random, allowing each selected row to have a different set of perturbed cells. We inject noises sampled from the low-probability region into these cells, following Du et al. [8] and Liu et al. [29]. Details on the outlier injection process can be found in Appendix A.3.\nWe use 12 publicly accessible binary classification datasets from OpenML, encompassing a range of both low and high-dimensional datasets, which have been widely used in the literature [12, 22, 23]. Details on these datasets are presented in Appendix A.1. For each dataset, 1000 and 3000 data points are randomly sampled for training and test datasets, respectively. For the baseline method, we consider 2D-KNN, a fast and performant variant of 2D-Shapley [29]. We incorporate a distance regularization term in the utility function $T$ for enhanced performance."}, {"title": "Cell fixation experiment", "content": "Experimental setting A naive strategy to handle cell-level outliers is to eliminate data points that contain outliers. This method, however, risks substantial data loss, particularly when outliers are scattered and data points are costly to collect. We instead consider a cell fixation experiment, where we assume that the ground-truth annotations of outlier cells can be restored with external expert knowledge. At each step, we \"fix\" a certain number of cells by substituting them with their ground-truth annotations, prioritizing cells that have the lowest valuations. Then we fit a logistic model and evaluate the model's performance with a test set of 3000 samples. It is important to note that correcting normal cells has no effect, whereas fixing outlier cells is expected to enhance the model's performance. We adopt the same datasets and implementations as in Section 4.1.\nResults Figure 3 illustrates the anticipated trend in the performance of 2D-00B, validating our method's capability to accurately identify and prioritize the most impactful outliers for correction. As cells with the lowest valuations are progressively fixed, 2D-00B demonstrates a consistent improvement in model accuracy. In contrast, when applying the same procedure with 2D-KNN, such notable performance enhancements are not observed.\nAdditionally, we investigate a scenario where ground-truth annotations remain unavailable. We adopt the setup from Liu et al. [29], where we replace the outlier cells with the average of other cells in the same feature column. 2D-00B uniformly demonstrates significant superiority over its counterparts. Results are provided in Appendix B.2."}, {"title": "Backdoor trigger detection", "content": "A common strategy of data poisoning attacks involves inserting a predefined trigger (e.g., a specific pixel pattern in an image) into a few training data [13, 5, 28]. These malicious manipulations can be challenging to detect as they only infect targeted samples. Even when poisoned data are present, it could be difficult to discern the cause of attacks since manually reviewing the images is expensive and time-consuming. In this experiment, we introduce a novel joint valuation task: detecting backdoor triggers in data poisoning attacks. Distinct from random outliers investigated previously, such cell contamination is targeted and deliberate.\nWe consider two popular backdoor attack algorithms: BadNets [13] and Trojan Attack [28]. The poisoned samples, relabeled as the adversarial target class, are mixed up with the clean data in the training process. As a result, the model is trained to incorrectly treat the trigger as a main feature of the poisoned samples. At the test time, those inputs containing the trigger will be misclassified to the target class. In this context, our goal is to effectively pinpoint the triggers by recognizing them as influential features through our joint valuation framework.\nExperimental setting We select 5 pairs of CIFAR-10 classes. For each pair, we designate one as the target attack class and the other as the source class. The training dataset comprises 1000 images. For each attack, we contaminate 15% of the training samples from the source class and relabel them to the target class. Two types of attack triggers are implemented: Trojan square and BadNets square"}, {"title": "Ablation study", "content": "We conduct ablation studies on the cell-level outlier detection task, as outlined in Section 4.1, to examine the impact of the selection and number of weak learners on 2D-00B estimations.\nSelection of weak learners Although our study primarily employs decision trees as weak learners, it is important to note that 2D-00B is model-agnostic, enabling the use of any class of machine learning models as weak learners. We compare efficacy of decision trees, logistic regression, a single-layer MLP with 64 dimensions, and a two-layer MLP with 64 and 32 dimensions.\nTable 2 presents a comparison of detection AUC across 12 datasets, indicating that 2D-00B is not model-free. The selection of weak learners slightly affects the valuation results, with more complex models generally yielding better performance. Nonetheless, all variations of 2D-00B outperform 2D-KNN, highlighting the significant advantages of the 2D-00B approach.\nThe number of weak learners Increasing the number of weak learners allows for a greater number of data-feature subset pairs to be explored, potentially leading to more accurate estimates. However, we empirically observe that beyond a certain threshold, adding extra weak learners does not substantially enhance performance, indicating convergence of the estimation in Appendix B.4. As a summary, we vary the number of weak learners $B \\in \\{500, 1000, 3000\\}$ and compare the cell-level outlier detection performance. Typically, when the number of weak learners is 1000, i.e., $B = 1000$, it is sufficient to achieve converged estimates across different datasets.\nLastly, we present additional ablation study results for other key hyperparameters in Appendix B.4. Apart from the experiments discussed above, we showcase that marginalization of 2D-00B can either match or surpass state-of-the-art data valuation methods on standard benchmarks in Appendix D."}, {"title": "Related work", "content": "Data contribution estimation In addition to the marginal contribution-based methods discussed in Section 2, many other approaches are emerging in the area of data valuation. Just et al. [18] develop a non-conventional class-wise Wasserstein distance between the training and validation sets and use the gradient information to evaluate each data point. Wu et al. [47] extend data valuation to deep neural networks, introducing a training-free data valuation framework based on neural tangent kernel theory. Yoon et al. [48] leverage reinforcement learning techniques to automatically learn data valuation scores by training a regression model. However, all these data valuation methods do not assign importance scores to cells, whereas our method provides additional insights into how individual cells contribute to the data valuations.\nFeature attribution Feature attribution is a pivotal research domain in explainable machine learning that primarily aims to provide insights into how individual features influence model predictions. Various effective methods have been proposed, including SHAP-based explanation [30, 31, 24, 7, 6], counterfactual explanation [44, 17, 36, 32, 33], and backpropagation-based explanation [1, 2, 42, 41, 49]. Among these methods, the SHAP-based explanation stands out as the most widely adopted approach, utilizing cooperative game theory principles to compute the Shapley value [38]. While feature attribution offers a potential method to attribute data valuation scores across individual cells, our empirical experiments in Appendix B.1 reveal that this two-stage scheme falls short in efficacy compared to our proposed joint valuation paradigm, which integrates data valuation and feature attribution in a simultaneous process."}, {"title": "Conclusion", "content": "We propose 2D-00B, an efficient joint valuation framework that assigns a score to each cell in a dataset, thereby facilitating a finer attribution of data contribution and enabling a deeper understanding of datasets. Through comprehensive experiments, we show that 2D-00B is computationally efficient and competitive over state-of-the-art methods in both joint valuation tasks.\nLimitation and future work While our study primarily explores random forest models applied to tabular datasets and simple image datasets, the potential application of neural network models within the 2D-00B framework for more complex vision and language tasks presents a promising avenue for future investigation. For instance, in text datasets, tokens or words can be treated as cells. 2D-00B can be easily integrated into any bagging training scheme that uses language models.\nOverall, we believe that our work will inspire further exploration in the field of joint valuation, with the broader goal of improving the transparency and interpretability of machine learning, as well as developing an equitable incentive mechanism for data sharing."}, {"title": "Supplementary Materials", "content": "In the supplementary materials, we provide implementation details, additional experimental results, rigorous formalized proofs and data valuation experiment results. Code repository can be found at https://github.com/YifanSun99/2d-oob.\nImplementation details\nDatasets\nTabular datasets We use 12 binary classification datasets obtained from OpenML [11]. A summary of all the datasets is provided in Table 3. These datasets are used in Section 4.1, 4.2, and Appendix D.\nFor each dataset, we first employ a standard normalization procedure, where each feature is normalized to have zero mean and unit standard deviation. After preprocessing, we randomly partition a subset of the data into two non-overlapping sets: a training dataset and a test dataset, which consists of 1000 and 3000 samples respectively. The training dataset is used to obtain the joint (or marginal) valuation for each cell (or data point). The test dataset is exclusively used for cell fixation (or point removal) experiments when evaluating the test accuracy. Note that for methods that need a validation dataset such as KNNShapley and DataShapley, we additionally sample a separate validation dataset (disjoint from training dataset and test dataset) to evaluate the utility function. The size of the validation dataset is set to 10% of the training sample size.\nImage datasets We create datasets by pairing CIFAR-10 classes, each pair consisting of a target attack class and a source class. The training and test dataset comprises 1000 and 2000 samples respectively. The size of the validation dataset is set to 10% of the training sample size. To manage the computational challenges posed by the baseline method, we employ the super-pixel technique to transform the (32,32,3) image into a 256-dimensional vector. Specifically, we first average the pixel values across three channels for each pixel. Then, we partition these transformed images into equally sized 2 \u00d7 2 grids. In each grid, we use average pooling to reduce the pixel values to a single cell value. These cell values are then arranged into a flattened input vector. We annotate a cell as poisoned if at least 25% of its corresponding grid area contains the trigger.\nImplementation details for different methods\n2D-00B 2D-00B involves fitting a subset random forest model with $B = 1000$ decision trees based on the package \u201cscikit-learn\". When constructing each decision tree, we fix the feature subset size ratio as 0.5. Ablations on the hyperparameters can be found in Appendix B.4. For Section 4.3 and Appendix D, we simply adopt $T(y_{i}, f(x_{i, S_{b}})) = 1(y_{i} = f(x_{i, S_{b}}))$. For Section 4.1 and 4.2, we further calculate the normalized negative $L_{2}$ distance between covariates and the class-specific mean in the bootstrap dataset, denoted as $dnorm$. Then we use $T(y_{i}, f(x_{i, S_{b}})) = 1(y_{i} = f(x_{i, S_{b}})) + dnorm$.\n2D-KNN 2D-KNN employs KNN as a surrogate model to approximate 2D-Shapley. We set the number of nearest neighbors as 10 and the number of permutations as 1000. The hyperparameters are selected based on convergence behavior and we determine the run time until the values converge.\nImplementation details for cell-level outlier generation\nFollowing Du et al. [8] and Liu et al. [29], we replace a given cell with the outlier value. Here, the outlier value is randomly generated from the two-sided \"tails\" of the Gaussian distribution with the column mean and standard deviation, where the probability of the two-sided tail area is set to be 1%. 4% (20% \u00d7 20%) of the cells in total are replaced with the corresponding outlier value.\nImplementation details for backdoor trigger generation\nFollowing the prior work [13, 28], we generate the BadNets square and the Trojan square trigger. For BadNets, we adopt the implementation in Nicolae et al. [34]. For Trojan Attack, we use a pretrained ResNet18 model on CIFAR-10 dataset and employ the implementation in Pang et al. [35]. For\"\n    }"}]}