{"title": "MULTI-ROBOT MOTION PLANNING WITH DIFFUSION MODELS", "authors": ["Yorai Shaoul", "Itamar Mishani", "Shivam Vats", "Jiaoyang Li", "Maxim Likhachev"], "abstract": "Diffusion models have recently been successfully applied to a wide range of robotics applications for learning complex multi-modal behaviors from data. However, prior works have mostly been confined to single-robot and small-scale environments due to the high sample complexity of learning multi-robot diffusion models. In this paper, we propose a method for generating collision-free multi-robot trajectories that conform to underlying data distributions while using only single-robot data. Our algorithm, Multi-robot Multi-model planning Diffusion (MMD), does so by combining learned diffusion models with classical search-based techniques-generating data-driven motions under collision constraints. Scaling further, we show how to compose multiple diffusion models to plan in large environments where a single diffusion model fails to generalize well. We demonstrate the effectiveness of our approach in planning for dozens of robots in a variety of simulated scenarios motivated by logistics environments.", "sections": [{"title": "1 INTRODUCTION", "content": "Multi-robot motion planning (MRMP) is a fundamental challenge in many real-world applications where teams of robots have to work in close proximity to each other to complete their tasks. In automated warehouses, for example, hundreds of mobile robots and robotic manipulators need to coordinate with each other to transport and exchange items while avoiding collisions. Learning motions from demonstrations can oftentimes allow robots to complete tasks they couldn't otherwise, like navigating a region in a pattern frequently followed by human workers; however, it is unclear how to best incorporate demonstrations in MRMP. In fact, MRMP at its simplest form, where robots are only concerned with finding short trajectories between start and goal configurations, is already known to be computationally intractable (Hopcroft & Wilfong, 1986)\u2014significantly harder than single-agent motion planning due to the complexity of mutual interactions between robots. Attempting to simplify the problem, various approximate formulations have been proposed in the literature. For example, a popular approach is to formulate the problem as a multi-agent path finding problem (MAPF) (Stern et al., 2019) by discretizing space and time. While the latest MAPF planners (Li et al., 2021; Okumura, 2024) can compute near-optimal plans and scale to hundreds of agents, they make strong assumptions, such as constant velocities and rectilinear movements that limit their real-world application and reduce their ability to generate complex behaviors learned from demonstrations."}, {"title": "2 PRELIMINARY", "content": "In this section we define the MRMP problem and provide relevant background on constraint-based MAPF algorithms and on planning with diffusion models. Sec. 3 elaborates on how we combine these concepts to coordinate numerous robots that plan with diffusion models."}, {"title": "2.1 MULTI-ROBOT MOTION PLANNING (MRMP)", "content": "Given n robots Ri, MRMP seeks a set of collision-free trajectories, one for each robot, that optimize a given objective function. Let S\u00b2 be the state space of a single robot and a state be s\u00b2 := [q\u00b2, q\u00b2] \u2208 S\u00b2 where q\u00b2 and q are the configuration and velocity of the robot. Each robot has an assigned start state start \u2208 S and binary termination (goal) condition T\u1ec9 : S\u00b2 \u2192 {0,1}. An MRMP solution is a multi-robot trajectory T = {1,\u2026\u2026\u03c4\u03b7}, where \u03c4\u00b2 : [0,T\u00b2] \u2192 Si represents the trajectory of robot R\u2081 over the time interval [0, T\u00b2], with T\u017c being the terminal time. In practice, we uniformly discretize the time horizon into H time steps and optimize over a sequence of states Ti = {S1, S2, ..., S}. Subscripts, e.g., \u315c, indicate indexing into a trajectory. Each trajectory \u03c4 must avoid collisions between robots and with obstacles in the environment. In MRMP, robots share a workspace W (i.e., W C R\u00b3 for general robots and WC R2 for robots on the plane) and occupy some volume or area within W, which we denote as R\u2081(q\u00b2) \u2286 W for robot R\u00bf in configuration q\u00b2. The usual MRMP objective is to minimize the sum of the single-robot costs (e.g., the cumulative motion) across all robots. General cost functions can be defined on the trajectories, and the objective then becomes \\(I(T) = \\sum_{i=1}^{n} \\text{cost}(\\tau^i)\\). When learning from data, we are interested in data adherence, i.e., the trajectories should match the underlying trajectory distribution. We define \\(\\text{cost}_{\\text{data}}(T) = \\sum_{i=1}^{n} \\text{cost}_{\\text{data}}(\\tau^i)\\) to quantify how well, on average, trajectories in T follow their underlying data distribution. This metric is task-specific; we provide some examples in Sec. 4."}, {"title": "2.2 MULTI-AGENT PATH FINDING (MAPF)", "content": "The MAPF problem, a simpler form of MRMP, seeks the shortest collision-free paths II = {\u03c01, \u03c02, ... \u03c0\u03b7} for n agents on a graph. This graph approximates their configuration space, with vertices corresponding to configurations and edges to transitions. Each path \u03c0\u00b2 = {q\u2081,\u2026\u2026q} is a trajectory without velocity that need not be dynamically feasible. In MAPF studies, constraint-based algorithms have become popular due to their simplicity and scalability. These algorithms are effective, in part, because they avoid the complexity of the multi-agent configuration space by delegating planning to single-agent planners and avoid collision via constraints. For instance, if a configuration q\u00b2 for Ri leads to a collision at time (or interval) t, this can be prevented by applying the constraint set C = {{Ri, q\u00b2, t)} to the path \u03c0\u00b2, thereby preventing the configuration from being used at that time. Several MAPF algorithms, including Prioritized Planning (PP) (Erdmann & Lozano-Perez, 1987) and Conflict-Based Search (CBS) (Sharon et al., 2015), use this mechanism to force single-agent planning queries to avoid states that would lead to collisions. We detail these methods in Sec. 3 and explain how, despite traditionally being used for MAPF, their principles can be applied to coordinating robots in continuous space that generate data-driven trajectories via diffusion models."}, {"title": "2.3 PLANNING WITH DIFFUSION MODELS", "content": "Motion planning diffusion models are generative models that learn a denoising process to recover a dynamically-feasible trajectory from noise (Carvalho et al., 2023; Janner et al., 2022). Given a dataset of multi-modal trajectories, diffusion models aim to generate new trajectories that follow the underlying distribution of the data. Additionally, these trajectories may be conditioned on a task objective O, for example, goal condition and collision avoidance. Specifically, given a task objective O, motion planning diffusion models aim to sample from the posterior distribution of trajectories:\n\\(\\arg \\max_\\text{Ti} \\log p(T^i|O) = \\arg \\max_\\text{Ti} (\\log p(O|T^i) + \\log p(T^i)) = \\arg \\min_\\text{Ti} (\u2013 \\log p(O|T^i) \u2013 \\log p(\u03c4^i)) = \\arg \\min_\\text{Ti} (J(T^i) \u2013 \\log p(T^i))\\)\n(1)\nThe first term of the objective, J(T\u00b2), can be interpreted as a standard motion planning objective (Carvalho et al., 2023), in which we try to minimize a cost function (or, equivalently, maximize a reward function). The second term, log p(T\u00b2), is the prior corresponding to the data adherence discussed in Sec. 2.1.\nDiffusion models are a type of score-based model (Song et al., 2021), where the focus is on learning the score function (the gradient of the data distribution's log-probability) rather than learning the probability distribution directly. The score function is learned using denoising score matching, a technique for learning to estimate the score by gradually denoising noisy samples. The diffusion inference process consists of a K-step denoising process that takes a noisy trajectory K\u2533\u1ec9 and recovers a feasible trajectory \u315c\u00b2, which also follows the data distribution. We use the notation 0\u25332,1 \u03c4\u00b2, ... K \u2533i to denote the evolution of the trajectory in the diffusion process. To generate a trajectory from a noise trajectory K\u2533i ~ N(0, I), we use Langevin dynamics sampling (Ho et al., 2020), an iterative process that is a type of Markov Chain Monte Carlo method. At each denoising step k \u2208 {K, . . ., 1}, a trajectory-space mean \u03bc\u22121 is sampled from the network \u03bc\u0473:\n\\(\\mu_k^{-1} = \\mu_\\theta(^k\\tau^i)\\)\n(2)\nNow, with the variance prescribed by a deterministic schedule {\u1e9ek | k \u2208 {K,\u2026\u2026,1}}, the next trajectory in the denoising sequence is sampled from the following distribution:\n\\(\\^k^{-1}\\tau^i \\sim N (\\mu_k^{-1} + \\eta \\beta_k^{-1} \\nabla_{\\tau} - J(\\mu_k^{-1}), \\beta_k^{-1})\\)\n(3)\nThe term \\(\\nabla_{\\tau}J(\\mu_k^{-1})\\) is the gradient of additional trajectory-space objectives (described in Eq. 1) imposed on the generation process. This term, also called guidance, can include multiple weighted cost components, each optimizing for a different objective. For instance, we can have J = dobjIobj+Asmooth Ismooth to penalize trajectories in collision with objects via Jobj and to encourage the trajectory to be dynamically feasible via Ismooth. We denote the trajectory generation process queried with a start state start, goal condition T\u00b2, and costraint set C (Sec. 3.1) as fo (sstart, T\u00b2, C)."}, {"title": "3 METHOD", "content": "We present Multi-robot Multi-model planning Diffusion (MMD), an algorithm for flexibly scaling diffusion planning to multiple robots and long horizons using only single-robot data. MMD imposes constraints on diffusion models to generate collision-free trajectories, addressing three main questions: how, when, and where to impose them. First, we discuss integrating spatio-temporal constraints into the diffusion denoising process through guiding functions. Next, we introduce five MMD algorithms, each inspired by a MAPF algorithm regarding constraint placement and timing. Finally, we demonstrate how to sequence multiple models for long-horizon planning."}, {"title": "3.1 CONSTRAINTS IN DIFFUSION MODELS", "content": "An intuitive and effective constraint for multi-robot motion planning in robotics is the sphere constraint \u00b9 (Li et al., 2019; Shaoul et al., 2024b). It is defined by a point p \u2208 W and restricts robots from being closer to p than a radius r \u2208 R at a certain time range t := [t \u2013 \u2206t, t + At]. The sphere constraint can be imposed as a soft-constraint on a diffusion model by incorporating it in its guiding function J(.). This can be done by adding a cost term I that repels the robots from the sphere's center point p. Let k\u2533\u00b2 be the generated trajectory for R\u2081 at step k of the diffusion denoising process, and (Ri, Sr(p), t) be a sphere constraint centered at p with radius r over time interval t. The guidance cost term for R\u2081 can be defined as:\n\\(I_c(\\tau^i) := \\sum_{t \\in \\text{t}} \\max (\\epsilon r \u2013 d (R_i(\\text{k}\\tau^i), p), 0)\\)\n(4)\nwith d (R\u2081(k\u012b\u2081), p) as the distance from point p to Ri at k\u012b, and \u2208 > 1 a padding factor."}, {"title": "3.2 CONSTRAINING STRATEGIES", "content": "To determine when and where to apply constraints on diffusion models, MMD draws on MAPF strategies like CBS and PP. We propose five MMD variants, each inspired by a state-of-the-art search algorithm. Alg. 1 provides a summary of these methods and we elaborate upon them here.\nMMD-PP. Prioritized Planning sequentially plans paths for robots R\u00bf \u2200 i \u2208 {1, ...n}. This ordering of robots is treated as a priority ordering in that, on each call, robot Ri must generate a path \u03c0\u00b2 that avoids all Rj that previously planned. Robot R\u00bf does so by respecting the constraints C := {{Ri, q\u00b2,t) | R\u2081(q\u00b2) \u2229 R\u2081(\u03c0\u2081) \u2260 0 \u2200t}. To translate this approach to trajectory generation with diffusion models, MMD-PP represents robot volumes using spheres, as is common in robotics, and uses the sphere representation of higher-priority robots as sphere soft-constraints for lower-priority robots. Specifically, let a high-priority robot Rj be modeled with Mj spheres and Pim and rim be the position and radius of the mth sphere at time t. Then, lower-priority robot Ri generates a trajectory under the constraint set {(Ri, Sj (Pm), t) | m \u2208 {1,\u2026 Mj}, j < i}, where < indicates priority precedence. In Alg. 1, (Ri, \u315c) means that all trajectories of Rj\u2260i in \u315c must be similarly avoided.\nMMD-CBS. CBS is a popular MAPF solver that combines \"low-level\" planners for individual agents with a \u201chigh-level\u201d constraint tree (CT) to resolve conflicts (i.e., collisions). The algorithm initiates by creating the root node Nroot in the CT, planning paths for each agent independently, and storing these paths in Nroot.\u041f. CBS repeatedly extracts nodes N from the CT and inspects \u039d.\u03a0 for conflicts. If no conflicts exist, the algorithm terminates, returning \u039d.\u03a0. Otherwise, CBS selects a conflict time t where agents Ri and Rj collide at positions q\u00b2 = \u03c0\u2021 and q\u00b3 = \u03c0\u1ec9 in \u039d.\u03a0. CBS then splits node N into two new CT nodes, Ni and N\u2081, each inheriting the (initially empty) constraint set N.C and paths N.II from N, and incorporating a new constraint for preventing the respective agent from occupying the conflict position at time t. For example, N\u00bf.C \u2190 N.C\u222a{(Ri, q\u00b2, t)} for Ri. Paths for Ri and Rj are then replanned using low-level planners under the updated constraints in Ni.C and N\u2081.C. The new CT nodes, with updated paths in Ni.I and Nj.II, are added to the CT. MMD-CBS follows the general CBS structure. It keeps a CT of nodes N, each with trajectories N.T, and uses motion planning diffusion models as low-level planners. The algorithm identifies a collision point p for each conflict and resolves it by imposing sphere soft-constraints centered at p on affected robots (see Fig. 1 for an illustration and Sec. A.4 for parameter values).\nMMD-ECBS. Enhanced-CBS (ECBS) (Barer et al., 2014) informs CBS low-level planners of the paths of other robots in the same CT node and steers the search towards solutions that are more likely to be collision-free. To emulate this in diffusion-based trajectory generation, MMD-ECBS imposes two types of soft constraints: \u201cweak\u201d and \u201cstrong.\u201d For each robot Rj with a trajectory in the CT node N, a weak soft-constraint that forbids R\u2081 from colliding with any other Rj with \u03c4\u00b9 \u2208 N.T is imposed. This is done in a similar way to MMD-PP but with a lower penalty value (Sec. A.4). The strong constraints are the same as those in MMD-CBS, resolving previously observed conflicts.\nReusing Experience in CBS. Recent studies indicate that leveraging previous single-robot solutions to guide replanning enhances the efficiency of CBS (Shaoul et al., 2024a). This is primarily because the motion planning problem between a CT node and its successors is nearly identical, with the only difference being a single constraint, making planning from scratch wasteful. This can be utilized in MMD replanning by initially adding noise to the stored trajectory for a limited number of steps (3 in our experiments; regular inference uses 25 steps) and then denoising with the new soft-constraints.\nThis approach, in the context of single-robot planning, was first proposed in Janner et al. (2022) and further refined in Zhou et al. (2024). Adding this functionality to MMD-CBS and MMD-ECBS yields our two final MMD algorithms, MMD-xCBS and MMD-xECBS, respectively. Both reuse previous solutions to inform replanning and are otherwise unchanged."}, {"title": "3.3 SEQUENCING DIFFUSION MODELS FOR LONG HORIZON PLANNING", "content": "Diffusion models have shown notable success in learning trajectory distributions within specific contexts. However, they face challenges in modeling complex trajectory distributions and generalizing to diverse contexts (e.g., significantly different obstacle layouts). To tackle this issue, we propose utilizing an ensemble of local diffusion models rather than a single model for a single robot. Each local model is trained to capture the trajectory distribution of a particular motion pattern within a local map segment, and we combine multiple models sequentially for long-horizon single-robot planning. This approach offers three advantages: (1) Easier learning with simple, demonstrable motion patterns. (2) Better generalization across different contexts. (3) Effective scaling for large maps, aiding long-term planning.\nDuring online planning, given a specific single-robot task O\u00b2 (which includes the start state and the termination condition), we can query the task-relevant local diffusion models to generate a full-horizon motion plan. Motivated by Mishra et al. (2023), this is done by sampling from the local models in parallel, while incorporating a cross-conditioning term that constrains the local trajectories to connect seamlessly. Let it be a local trajectory sampled from a local probability distribution pl. The goal of the single-robot planner is to sample from the posterior distribution of trajectories:\n\\(\\arg \\max_\\text{Ti} \\log p(T^i|O) = \\arg \\max_{\\tau^{i,1},..., \\tau^{i, L}} \\log p(\\tau^{i,1}, ..., \\tau^{i,L}|O)\\)\n(5a)\nsubject to \\(\\tau^{i,l}_{H} \\approx \\tau^{i,l+1}_{1}, \\forall l = 1, ..., L-1\\).\nFollowing Eq. 1, the new objective becomes:\n\\(\\arg \\min_{\\tau^{i,1},..., \\tau^{i, L}} J(\\tau^{i,1},..., \\tau^{i,L}) \u2013 \\sum_{l=1}^{L} \\log p(\\tau^{i,l})\\)\n(5b)\n(6)\nIn practice, MMD ensures proper sequencing of the L local diffusion models by introducing constraints requiring the last state of the trajectory from model l to be equal to the first state from model l+1 (see Eq. 5b) and treating generation of local trajectories as inpainting (Lugmayr et al., 2022)."}, {"title": "4 EXPERIMENTAL ANALYSIS", "content": "We tested MMD's efficacy in learning multi-robot trajectories on increasingly complex maps with varying numbers of holonomic ground robots in a simulated warehouse, modeling robots as 2D disks. Our goals were to (i) compare our approach with common methods for integrating data into multi-robot trajectory generation, (ii) identify the most effective constraining strategies with MMD, and (iii) evaluate MMD's scalability. Each experiment with n robots begins by randomly picking start and goal states on a map for various algorithms to compute valid trajectories \u315c (or MAPF paths II) between. We evaluated the methods by success rate, the percentage of problems solved with no collision within a time limit, and data adherence, the average alignment of \u03c4\u00b2 \u2208 \u03c4 with the dataset motion patterns. Data adherence uses a map-specific function costdata (T\u00b2), scoring 1 for perfect conformity and lower otherwise. Our evaluation maps, datasets, and adherence functions are summarized here with simple illustrations and more details are in the appendix."}, {"title": "4.1 DECOUPLING SCALES MULTI-ROBOT DIFFUSION PLANNING", "content": "An appealing approach for learning multi-robot trajectory generation is by obtaining multi-robot trajectory datasets and training a single model to jointly generate trajectories for all robots. To test this approach, we evaluated MPD-Composite, a state-of-the-art motion planning diffusion model (MPD) (Carvalho et al., 2023) that we trained on multi-robot data we collected in two maps: Empty and Highways. We created three models: for 3, 6, and 9 robots. Each model was also given an additional guidance term that penalized collisions between robots. Across 300 tests, 50 for each map and group size, we compared MPD-Composite to MMD-xECBS (referred to as MMD). See Fig. 2 for results. The composite model achieved perfect success rates and high data adherence scores with 3 robots but struggled as the number of robots increased to 6. No valid trajectories were generated in any test with 9 agents using MPD-Composite in either map. In contrast, MMD solved all 300 problems successfully and further scaled to 40 agents in additional random tests, also producing trajectories with high data adherence scores and no collisions."}, {"title": "4.2 MMD OUTPERFORMS MAPF WITH LEARNED COST MAPS", "content": "From a search-based planning viewpoint, a compelling way to integrate motion data into multi-agent planning is by reducing MRMP to MAPF and forming cost maps to direct algorithms like ECBS (Cohen et al., 2016). This sacrifices dynamic feasibility, limiting solutions to a fixed graph, but can still offer a desirable homotopy class and be assessed for data compliance. Our second experiment set evaluates this method's potential to produce data-compliant motions (see Fig. 3). We created 180 motion planning problems, 10 per group size across three maps, and assessed two search-based methods: A*Data-ECBS and A*-ECBS. The former plans single-robot paths with A* using map-specific statistical cost maps, where edges have lower costs if those are visited more frequently by the map's dataset trajectories (discretized to map cells). The latter uses uniform costs (i.e., has no knowledge of the data) and is reported only to provide context for A*Data-ECBS's performance.\nWe find that integrating motion data into statistical cost maps yields mixed outcomes: it enhances adherence in the Highways map by around 35% compared to A*-ECBS but decreases success rates. In other maps, this approach finds collision-free paths, but falls short in managing complex motion distributions. In contrast, our results for running MMD methods for the same planning problems show that those can solve complex trajectory generation tasks with high data adherence scores across all methods, and for some, with high success rates too."}, {"title": "4.3 SEQUENCED DIFFUSION MODELS FOR LONG-HORIZON PLANNING", "content": "We present a feasibility study on expanding MMD algorithms to larger maps using the sequencing method described in Sec. 3.3. This technique assembles smaller local maps, each associated with a diffusion model, to collectively generate long-horizon, data-driven trajectories. In our experiments, we tested three MMD methods-MMD-PP, MMD-ECBS, and MMD-xECBS\u2014in 120 trajectory generation tests, allowing a relaxed 240-second time frame. A standout feature of the sequencing method is its ability to create trajectories that follow a task-skeleton: passing through a series of local maps within the larger global map. For this purpose, our experiments assign a random sequence of three tasks per robot (a sequence of local maps), and randomly selects start and goal states within the first and last local maps in the sequence. The results (Fig. 5) show MMD-xECBS scaling to long planning horizons without compromising data adherence. This demonstrates MMD's capability to efficiently produce multi-robot trajectories in large environments by utilizing diffusion models trained with easily gathered data from small, local maps."}, {"title": "5 RELATED WORK", "content": "Multi-Robot Motion Planning. Due to the PSPACE-hardness of MRMP (Hopcroft & Wilfong, 1986), most practical algorithms make various approximations to relax the planning problem. Some of the most successful MRMP methods reduce the problem to a multi-agent path finding problem (MAPF) (Stern et al., 2019) by discretizing state and time and assuming zero-volume shapes, constant velocities and rectilinear movements (Chen et al., 2021). However, this introduces a gap between the MAPF formulation and MRMP which is problematic in many domains. To relax the restriction of planning on a grid, recent works (Solis et al., 2021; H\u00f6nig et al., 2018) have generalized MAPF algorithms to continuous state spaces by using sampling-based motion planners to construct probabilistic roadmaps (PRM) (Kavraki et al., 1996) for robots.\nMore generally, coupled MRMP algorithms, like Sanchez & Latombe (2002); Solovey et al. (2016) apply sampling-based planners like PRM and RRT (Karaman & Frazzoli, 2011) to the composite configuration space of all the robots. This approach guarantees completeness but struggles to scale with the number of robots as the configuration space grows exponentially. Conversely, decoupled algorithms like prioritized planning (Erdmann & Lozano-Perez, 1987) and Leroy et al. (1999) generate robot motions one after another, fixing each plan and regarding them as dynamic obstacles in subsequent planning iterations. This allows them to quickly find solutions for large numbers of robots, but sometimes fail to find any solution even if one exists, i.e., they are often incomplete. Seeking to balance theoretical guarantees with practical efficiency, hybrid algorithms like CBS (Sharon et al., 2015) plan independently for every robot and loosely couple them to resolve conflicts.\nPlanning with Diffusion Models. Lately, there has been a surge of interest in applying diffusion models (Sohl-Dickstein et al., 2015) to solve sequential decision making tasks, including planning and reinforcement learning (Ubukata et al., 2024). Diffuser (Janner et al., 2022) first proposed the idea of using diffusion models for trajectory planning and showed how classifier-guided sampling and image inpainting can be used for adaptation at test time. Recent works have used diffusion models as priors for single-robot motion planning (Carvalho et al., 2023), for learning visuomotor policies (Chi et al., 2024), and for offline decision-making (Ajay et al., 2023). Most of these works have been limited to single-agent planning with two notable exceptions. Jiang et al. (2023) learn a joint motion distribution for multi-agent motion prediction using a diffusion model. By contrast, we focus on generating kinodynamically feasible and collision-free trajectories without having to learn a joint distribution. Concurrent work by Mishra et al. (2024) uses spatial-temporal factor graphs to compose modular generative models for solving long-horizon bimanual coordination tasks. By contrast, our approach can scale diffusion models to dozens of robots and complex environments by leveraging multi-agent search algorithms."}, {"title": "6 CONCLUSION", "content": "In this paper, we present Multi-robot Multi-model planning Diffusion (MMD), a multi-robot motion planner that learns to generate smooth collision-free trajectories for dozens of robots in complex environments. Our key contribution is showing how single robot diffusion models can be effectively combined with state-of-the-art multi-agent search algorithms to generate data-driven multi-robot trajectories. By learning only single-robot diffusion models, MMD simplifies data requirements and breaks the curse of dimensionality plaguing approaches that learn from multi-robot data. Additionally, by learning generative models of robot trajectories, MMD overcomes many of the limitations of popular model-based MAPF algorithms, such as state discretization, known cost function, and constant velocities. We believe MMD opens up exciting avenues for future work on combining the strengths of search algorithms and diffusion planning.\nLimitations. We are excited about the potential of MMD to push forward multi-robot coordination and collaboration and offer a few avenues for future work. First is allowing for more flexibility in MMD's planning horizon. As it stands, MMD generates trajectories of fixed duration\u2014a limitation it inherits from diffusion planning. Sequencing models helps extend the time horizon but still, it must be determined a priori. Second, we believe that the CBS-based MMD methods can be greatly accelerated, mostly through parallelization of the high-level search. Finally, we believe the frontier of MRMP lies in collaboration. Currently, MMD focuses on coordinating robots, seeking to produce collision-free data-driven trajectories. Carrying out collaborative tasks is an interesting next step."}, {"title": "7 REPRODUCIBILITY", "content": "We aspire for MMD to be easily used and extended by researchers and practitioners. To this end, we make our source code for all MMD algorithms, scripts for data generation, training, and evaluation, and evaluation maps publicly available at https://github.com/yoraish/mmd. This code, along with the parameter values detailed in Sec. A.4, is sufficient for reproducing the experiments and results presented in this paper. To run our code \"out of the box,\" without dataset generation or training, we provide pre-trained models and datasets detailed in Sec. 4 with detailed instructions. For hardware and software dependencies, we specify the exact versions of libraries and tools required in our repository and also detail our hardware setup in Sec. A.4."}, {"title": "A APPENDIX", "content": "These additional materials come to add auxiliary details on our algorithms and their implementation, alongside providing further experimental evidence that we omitted from the main text. We begin with an additional discussion on our algorithmic framework, move on to provide additional results, and conclude with implementation and baseline details."}, {"title": "A.1 ADDITIONAL ALGORITHMIC DISCUSSION", "content": "In this section, we expand on a few key ways in which MMD-PP and MMD-CBS improve on their classical counterparts. These were lightly touched on in the main text. We outline them in more detail here.\nCT Node Ordering in CBS. Traditionally, MAPF algorithms aim to find the shortest paths from starts to goals. Therefore, in CBS, the high-level nodes N popped from the CT are the ones of least cost. In our case, where the data-driven objective function scoring trajectories is generally not available in practice, we instead aim to quickly find solutions that are collision-free, delegating the task of finding high-quality solutions to the diffusion models. To this end, the MMD CBS strategies choose CT nodes with the least number of conflicts to explore first, as they are more likely to lead to collision-free solutions quickly. This is similar to the algorithm GCBS-H outlined in Barer et al. (2014). Resembling their outcomes, we also observed a significant runtime improvement between prioritizing CT nodes based on their geometric quality and their collision count.\nBatch Trajectory Generation. Planning with diffusion models has the added benefit of being able to generate a diverse set of solutions with a single inference pass (Carvalho et al., 2023). MMD makes use of this property. In contrast to the original CBS, where CT nodes N store a single path for each robot within \u039d.\u03a0, MMD stores trajectory batches for each robot R\u2081 within \u039d.\u03c4. That is, N.T\u00b2 may be a set of B \u2208 Z>0 trajectories, with B being a batch size. MMD-PP follows similarly, storing a batch of trajectories for each robot. When planning for Ri, MMD generates a batch of trajectories under the currently active constraint set N.C\u00b2 (see Fig. 1). Once the batch is generated, MMD iterates over the new resulting trajectories N.T\u00b2 and marks the one with the least collisions as the representative trajectory for Ri. In MMD-PP this trajectory is used to define the placement of soft-constraints in following iterations and will be part of the solution. In MMD-ECBS, weak soft-constraints will similarly be added. All MMD CBS-based algorithms use representative trajectories to compute the number of conflicts within CT nodes. When a conflict-free CT node is found (e.g., there are no collisions between representative trajectories), MMD returns the representative trajectories of N.T as the solution."}, {"title": "A.2 EXPERIMENTAL EVALUATION: ADDITIONAL RESULTS", "content": "We provide additional quantitative and qualitative results for our first two experiment sets, outlined in Table 1, Table 2, and Fig. 6. Discussions of these experimental results are included."}, {"title": "A.2.1 ADDITIONAL QUANTITATIVE RESUTLS", "content": "Our manuscript mainly evaluated algorithms based on their performance in terms of success rate and data adherence (Fig. 2, Fig. 3, and Fig. 5). While these metrics are sufficient to capture MMD's ability to consistently produce trajectories that follow an underlying motion data distribution, one may also be interested in solutions' smoothness and the wall-clock time it takes to generate those. To this end, we include results for the average acceleration per robot (column A in Table 1 and Table 2), as a proxy for smoothness, and the runtime for trajectory generation (column T).\nAverage Acceleration Per Robot. Despite showing little information, since the composite baseline quickly failed to produce valid trajectories, Table 1 offers valuable insights nonetheless. The A column provides a glance into the reason for composite-model's failure. Consistent with our observations, we notice that the average acceleration per robot in the 6-robot case is drastically higher for the composite model than for MMD. This behavior, visually, translates to trajectories including small loops and sharp turns. See Fig. 6 for an example. We have trained MPD-Composite to convergence using our datasets (Sec. A.6) and performed additional tuning, however, its generated motions struggled to capture the smooth, dynamically feasible transitions as the number of robots grew to 9."}, {"title": "A.5.2 LARGE SCALE EXPERIMENTS", "content": "To mimic real-world scenarios, we have staggered the start times of robots in our large scale experiments in Sec. 4.3. There, robots began moving 10 time steps apart. Robots in motion were required to avoid static robots, which may be stopped in high-density regions."}, {"title": "A.6 BASELINE DETAILS", "content": "Our experiments include two families of baselines: composite models and MAPF methods. Both baselines attempt to produce trajectories (or paths) that distribute according to an underlying motion pattern that is reflected in a dataset. This section comes to provide additional details regarding these baseline methods.\nComposite Models. Training composite models requires two components. The first is a dataset of multi-robot motions, and the second is a model that can be trained to generate trajectories that resemble those in the data. Given that obtaining multi-robot motion datasets is generally intractable as it requires solving an MRMP problem for each datapoint, in this paper we focus on single-robot data and construct our multi-robot datasets from collision-free subsets of our single-robot datasets. It is worth noting that given that our multi-robot datasets were composed of single-robot data, the conclusions from our results is that it is difficult to learn multi-robot trajectory generation from composed single-robot data, and not that it is a uniquely challenging task in the general case. See Sec. 4.1 for a description of our composite models.\nMAPF Baselines. Our MAPF baselines, termed A*Data-ECBS and A*-ECBS, are both similar algorithmically and only differ in the edge costs they use for single-robot graphs. We will start with describing the algorithms and then give additional details for cost map creation. The low-level planners used in these baselines are A* with a focal list mechanism, also known as A (Pearl & Kim, 1982). We set the focal list bound to 1.5 and did not allow for re-expansions in our implementation. On the high-level search, we prioritized"}]}