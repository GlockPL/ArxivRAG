{"title": "Meta-Controller: Few-Shot Imitation of Unseen Embodiments and Tasks in Continuous Control", "authors": ["Seongwoong Cho", "Donggyun Kim", "Jinwoo Lee", "Seunghoon Hong"], "abstract": "Generalizing across robot embodiments and tasks is crucial for adaptive robotic systems. Modular policy learning approaches adapt to new embodiments but are limited to specific tasks, while few-shot imitation learning (IL) approaches often focus on a single embodiment. In this paper, we introduce a few-shot behavior cloning framework to simultaneously generalize to unseen embodiments and tasks using a few (e.g., five) reward-free demonstrations. Our framework leverages a joint-level input-output representation to unify the state and action spaces of heterogeneous embodiments and employs a novel structure-motion state encoder that is parameterized to capture both shared knowledge across all embodiments and embodiment-specific knowledge. A matching-based policy network then predicts actions from a few demonstrations, producing an adaptive policy that is robust to over-fitting. Evaluated in the DeepMind Control suite, our framework termed Meta-Controller demonstrates superior few-shot generalization to unseen embodiments and tasks over modular policy learning and few-shot IL approaches. Codes are available at https://github.com/SeongwoongCho/meta-controller.", "sections": [{"title": "1 Introduction", "content": "Generalizing across different robot embodiments and tasks with only a few demonstrations is a fundamental challenge in continuous control [6, 11, 40, 29, 33, 14]. This capability is crucial for developing versatile and adaptive robotic systems that can operate effectively in diverse and dynamic environments. The high diversity of embodiments and tasks, however, makes this particularly challenging. Robot embodiments vary widely in their morphological (e.g., number and connectivity of joints) and dynamic (e.g., motor gear ratios, damping coefficients) configurations, complicating the design of a unified architecture capable of handling heterogeneous input states and output actions. Furthermore, the variety of tasks\u2014such as locomotion, object manipulation, and navigation-requires the learning of transferable skills that can efficiently generalize across different tasks.\nDespite significant advancements in reinforcement learning (RL) and imitation learning (IL), achieving simultaneous generalization across diverse embodiments and tasks with a few demonstrations remains largely underexplored. Modular policy learning approaches [34, 18, 16, 12, 10] have shown promise by learning modular policies that can be shared across embodiments with different morphologies. However, these methods primarily focus on specific task types such as locomotion, and lack the flexibility to adapt to a wide range of control tasks, limiting their broader applicability. Conversely, few-shot IL approaches [8, 7, 39, 13, 37, 36] aim to learn novel tasks from a few demonstrations. These techniques excel in scenarios with sparse training data but typically concentrate on a single embodiment with fixed morphological and dynamic structures, restricting their ability to generalize across various embodiments and tasks. As a result, these two fields have developed independently, and their integration remains an open area of research.\nTo address these challenges, we propose a novel framework that flexibly learns arbitrary control tasks on unseen embodiments using a few (e.g., five) reward-free demonstrations. To handle hetero-"}, {"title": "2 Problem Setup", "content": "A reinforcement learning (RL) problem involves an agent interacting with an environment, typically modeled as a Markov Decision Process (MDP). An MDP is represented by the tuple (S, A, P, R), where S is the state space, A is the action space, P: S \u00d7 A \u00d7 S \u2192 R is the transition probability, and R: S\u00d7A \u2192 R is the reward function. In conventional RL, an agent learns a policy \u03c0 : S \u2192 A that maximizes expected cumulative rewards E_{\u03c0}[\u2211_{t} \u03b3^{t} R(s_{t}, a_{t})], where \u03b3 \u2208 [0, 1] is a discount factor. Training such an RL agent typically requires numerous interactions with the environment and a carefully designed reward function, making it burdensome to learn new tasks. Behavior cloning (BC) addresses these challenges by using supervised learning techniques to imitate an expert policy from offline demonstrations. We focus on the few-shot BC setting, where the training data consists of a few reward-free demonstrations D = {T_{i}}_{i<N}, with each demonstration T_{i} = {(s_{t}, a_{t})}_{t<T} being a temporal sequence of states and actions performed by an expert model.\nIn this paper, we consider continuous control problems of multi-joint robots that involve various embodiments and tasks. An embodiment \u03b5 refers to the physical configuration of robots, which includes (1) the morphology, i.e., the shape, size, and arrangement of the components such as limbs, joints, and sensors, and (2) the dynamics parameters that affect the robot's behavior, e.g., motion inertia, mass, gear ratios, and damping. In terms of MDP, different embodiments can have different dimensionality of state and action spaces, e.g., dim(S_{\u03b5_{i}}) \u2260 dim(S_{\u03b5_{j}}) and dim(A_{\u03b5_{i}}) \u2260 dim(A_{\u03b5_{j}}) for \u03b5_{i} \u2260 \u03b5_{j}, as well as distinct transition probabilities P_{\u03b5} that determine the kinematics of the robot. A task \u03c4 is defined by a specific goal or objective that the robot must achieve within its environment, characterized by a reward function R_{\u03c4}. Tasks can vary widely, ranging from locomotion and manipulation to complex interactions with dynamic environments. The combination of different embodiments \u03b5 and tasks \u03c4 creates a broad class of continuous control problems.\nOur objective is to achieve simultaneous generalization to unseen embodiments and tasks of continuous control with a few-shot behavior cloning framework. In other words, the model has to learn a policy for a novel continuous control problem from only a few demonstrations D, where both embodiment \u03b5 and task \u03c4 can be arbitrary and previously unseen."}, {"title": "2.1 Challenges and Desiderata", "content": "Despite achieving the simultaneous few-shot generalization to unseen embodiments and tasks is crucial for developing versatile and adaptive robotic systems, this problem remains less explored. We characterize two distinct challenges and desiderata to address each challenge.\nHandling Heterogeneous Embodiments. To generalize to arbitrary embodiments in continuous control, the model must possess an architecture capable of universally handling heterogeneous states and actions of various embodiments. This necessitates a unified input/output (I/O) representation for states and actions, allowing for the sharing of structural characteristics (e.g., dimensionality) and semantics (e.g., input attributes or output control types) across different embodiments. Additionally,"}, {"title": "3 Method", "content": "In this section, we introduce Meta-Controller, a few-shot behavior cloning framework for simultaneous generalization of embodiments and tasks of continuous control. Figure 1 illustrates the overall framework. Meta-Controller addresses heterogeneous embodiments by tokenizing the states and actions into joint-level I/O (Section 3.1) and employing a state encoder that captures knowledge about the structure and dynamics of the embodiment (Section 3.2.1). Then, a matching-based policy network (Section 3.2.2) predicts the action by leveraging a few given demonstrations. The training protocol of Meta-Controller consists of episodic meta-learning and few-shot fine-tuning (Section 3.3)."}, {"title": "3.1 Joint-Level I/O Representation", "content": "To unify the state and action spaces of different embodiments, we adopt joint-level tokenization. Joints are fundamental components of robots, and their primary source of action is the torque or force generated by actuators attached to each joint. This allows us to standardize the states and actions of a robotic agent into per-joint observations and control commands. Consequently, joint-level states and actions provide a natural modular representation, facilitating the compositional generalization of various robot embodiments\u00b2."}, {"title": "3.2 Meta-Controller", "content": "Given the tokenized representation of joint states and actions, we aim to build an adaptive controller for arbitrary robot embodiments to perform arbitrary continuous control tasks based on a set of few demonstrations D = {(s_{<T}^{i}, a_{<T}^{i})}_{i<N}. To address the challenge discussed in Section 2.1, we employ an encoder f to extract the embodiment-aware state features and an adaptive policy network \u03c0 that efficiently leverages the demonstrations D to predict the actions."}, {"title": "3.2.1 State Encoder for Embodiment Generalization", "content": "The state encoder f encodes the tokens of the current state with history s_{<t} into state features m_{t}:\nm_{t} = f(s_{<t}; \u03b8).\nTo effectively encode the states of each embodiment, we decompose our state encoder into two components: a structure encoder f_{s} that captures morphological knowledge, and a motion encoder f_{m} that captures dynamics knowledge.\nStructure Encoder. The structure encoder models the relationships among the joints within each embodiment. As shown in Figure 2, we use a bi-directional transformer on the joint-level state tokens s_{t} at each timestep t to extract the structure features z_{t}:\nz_{t} = f_{s}(s_{t} + p^{\u03b5}; \u03b8_{s}^{\u03b5}, \u03b8_{s}).\nwhere the embodiment-specific positional embedding p^{\u03b5} is added to the input tokens. Note that we decompose the parameters of f_{s} into adaptive parameters (p^{\u03b5}, \u03b8_{s}^{\u03b5}) that capture embodiment-specific knowledge and shared parameters \u03b8_{s} that captures common knowledge across embodiments. The"}, {"title": "3.2.2 Few-shot Policy Adaptation for Task Generalization", "content": "To learn unseen tasks \u03c4, we design an adaptive policy network \u03c0 with a matching framework [20, 19] that incorporates the demonstrations D = {(s_{<T}^{i}, a_{<T}^{i})}_{i<N} to produce an action \\hat{a}_{t}:\n\\hat{a}_{t} = \u03c0(m_{<t}, D; \u03c6).\nFigure 3 illustrates the architecture of the policy network, which consists of an action encoder g, a matching module \u03c3, and an action decoder h."}, {"title": "3.3 Training & Inference", "content": "The training protocol of Meta-Controller consists of two stages: episodic meta-learning and few-shot fine-tuning, where we train whole parameters (\u03b8, \u03c6) of the model during the first stage while we train only the adaptive parameters (p^{\u03b5}, \u03b8_{m}^{\u03b5,\u03c4}, \u03b8_{s}^{\u03b5}) during the second stage.\nEpisodic Meta-Learning. During episodic meta-learning, the model acquires general knowledge of continuous control through a number of episodes that mimic few-shot behavior cloning scenarios to ensure effective adaptation to unseen embodiments and tasks. To this end, we leverage a meta-training dataset that consists of demonstrations B(\u03b5,\u03c4) by expert agents with various embodiments \u03b5 and tasks \u03c4. At each episode, we first sample a continuous control problem (\u03b5, \u03c4), then sample two subsets of B(\u03b5,\u03c4): a set of support data D_{S} and query data D_{Q}. Then the model is trained to imitate query data using the demonstrations.\nmin_{\u03b8,\u03c6} E_{p(\u03b5,\u03c4)} E_{D_{S}, D_{Q} \u223c B(\u03b5,\u03c4)} [\\frac{1}{|D_{Q}|} \u2211_{(s_{t}, a_{t}) \u2208 D_{Q}} ||a_{t} - \\hat{a}_{t}||^{2}]\nwhere \\hat{a}_{t} is produced by Eq. (5) using D_{S}, and p(\u03b5, \u03c4) is a uniform distribution over all control problems within the dataset.\nFew-shot Fine-Tuning. After acquiring the meta-knowledge about continuous control problems, we apply our Meta-Controller in a few-shot behavior cloning setup, where it should adapt to both unseen embodiments and tasks with a few demonstrations D. To this end, we randomly split D into two disjoint subsets, and fine-tune the model with Eq. (10) but with only respect to the embodiment-specific and task-specific parameters (p^{\u03b5}, \u03b8_{m}^{\u03b5,\u03c4}, \u03b8_{s}^{\u03b5}) while freezing the rest. After fine-tuning, the model uses the whole demonstrations D in the policy network to produce the actions at evaluation."}, {"title": "4 Related Work", "content": "Modular Policy Learning. Modular policy learning aims to develop modular policies for multi-joint robots that are adaptable to various morphologies. NerveNet [34] uses a Graph Neural Network (GNN) to model structural relationships between joint-level features. SWAT [16] leverages graph features like the normalized graph Laplacian for improved structural learning in reinforcement learning (RL). Amorpheous [23] and MetaMorph [12] use transformer architectures, treating the morphological graph as fully connected to exploit transformers' capabilities. These works focus on RL and zero-shot generalization to specific locomotion tasks. Furuta et al. [10] proposes an imitation learning framework with a benchmark environment for extensive morphologies, showing promising zero-shot generalization but limited to specific tasks like reaching a goal position, and not handling general continuous control tasks.\nFew-shot Imitation Learning. Few-shot Imitation Learning (IL) approaches focus on generalizing novel RL tasks with only a few demonstrations. Gradient-based meta-learning algorithms like MAML [8] and Bayesian MAML [39] have been explored for rapid task adaptation. Duan et al. [7] addressed one-shot imitation learning by incorporating an attention model over the query state and demonstrations. FIST [13] is a hierarchical skill transition model that learns to extract transferable high-level skill sets from demonstrations and leverages this skill knowledge during adaptation. Recently, PDT [37] introduced a transformer-based few-shot learner, using the few-shot demonstration as a prompt token. Similarly, HDT [36] trains a hyper-network to generate adapter parameters for a pre-trained decision transformer, adapting to few-shot demonstrations. Despite notable generalization abilities, these few-shot IL approaches have only been studied within a single embodiment, limiting their applicability to real-world scenarios with heterogeneous embodiments."}, {"title": "5 Experiments", "content": "5.1 Experimental Setup\nEnvironment and Dataset. We evaluate the few-shot behavior cloning of unseen embodiments and tasks within the DeepMind Control (DMC) suite [31], which includes continuous control tasks featuring diverse kinematic structures. We select 30 tasks from 10 embodiments as training tasks and 8 tasks from 4 embodiments as held-out evaluation tasks. The evaluation tasks include three unseen embodiments (hopper, reacher-four, wolf) and one seen embodiment (walker), with the wolf being an additional embodiment introduced in [34]. Our meta-training dataset is constructed using a replay buffer of an expert agent [38], consisting of up to 2000 demonstration trajectories for each task and embodiment. Each demonstration consists of state-action pairs over T = 500 timesteps, with rewards discarded for both episodic meta-learning and few-shot behavior cloning. For N-shot few-shot behavior cloning, we use the last N demonstrations from the buffer. A full detail of the dataset is included in Appendix B.1.\nEvaluation Protocol. We evaluate all models with 20 different initial states and report the mean and standard error. For evaluation metric, we use a normalized score [9] calculated by \\frac{score - score_{random}}{score_{expert} - score_{random}}, where each score represents the average cumulative rewards during the evaluation. The random score is obtained by evaluating a random agent using a uniform distribution policy over the action spaces. We evaluate the models every 1000 iterations of few-shot behavior cloning and report the best score. For models that use task-specific low-rank projection matrices, we search the rank parameter over {4, 8, 16} and report the best one. Throughout the experiments, we present 5-shot learning results (N = 5) unless otherwise specified.\nBaselines. We compare our model with various Decision Transformer [4] (DT)-based few-shot imitation learning approaches and two transformer-based modular policy learning approaches. In the DT-based models, we exclude return-to-go tokens from the input tokens to simulate behavior cloning. Since the DT architecture is not inherently designed to handle heterogeneous state and action spaces, we modify its input and output linear heads in an embodiment-specific manner and fine-tune them for unseen embodiments.\n\u2022 DT-based Models. From-Scratch Decision Transformer (FS-DT) is a decision transformer that trains a downstream task directly from randomly initialized weights. Multi-Task Decision Trans-"}, {"title": "5.2 Main Results", "content": "Table 1 shows the 5-shot behavior cloning results of the models on both unseen and seen embodiments. We observe that Meta-Controller consistently outperforms all baselines across various continuous control problems, demonstrating its effectiveness. Existing few-shot imitation learning approaches that lack an embodiment generalization mechanism, such as PDT and HDT, struggle to adapt to unseen embodiments, often performing comparably to the naive from-scratch baseline (DT-FS). In contrast, modular policy learning approaches like MetaMorph and MTGv2 show better adaptation to unseen embodiments (e.g., hopper). However, their performance is still inferior to Meta-Controller, which can be attributed to the absence of a few-shot adaptation mechanism for unseen tasks.\nNotably, our model significantly outperforms all baselines in the challenging reacher-four embodiment, where models must understand the notion of a goal position given only five demonstrations. Figure 4 shows that while baseline models converge to the pose in the demonstrations regardless of the goal position, our model successfully reaches the goal position and converges with a unique pose. We attribute this success to the modular nature of our model. Our state encoder effectively shares knowledge about joint-level motions thanks to its parametrization, and the matching-based policy network flexibly exploits the local motor skills from a few demonstrations. We provide more results and analysis in Appendix C."}, {"title": "5.3 Ablation Studies", "content": "Ablation on the Architecture. To verify the effectiveness of each architectural component introduced in Section 3, we conduct an ablation study by progressively replacing each module\u2014the structure encoder f_{s}, the motion encoder f_{m}, and the matching module \u03c3\u2014with a linear layer. To isolate the effect of adaptation parameters, we replace f_{s} with task-specific linear layers and f_{m} with embodiment- and task-specific linear layers. Table 2 summarizes the results. We observe that the structure encoder f_{s} is crucial for generalization to unseen embodiments, as performance drops drastically when it is removed (row 1 vs. row 3). This indicates that the structure encoder captures modular knowledge about various morphologies, transferrable to unseen embodiments. Combined with the structure encoder, the motion encoder further improves performance (row 2 vs. row 3), especially on the seen embodiment (walker). This shows that modeling the temporal relationships of joints is beneficial when the model understands the embodiment. Finally, the matching module consistently improves performance (row 3 vs. row 4), particularly on challenging tasks such as the hop task of hopper and the tasks of reacher-four This demonstrates the effectiveness of the matching architecture in preventing overfitting with few demonstrations. We provide more ablation studies on architectural components in Appendix D.1.\nAblation on the Parametrization. To analyze the impact of the embodiment-specific and task-specific parametrization introduced in the state encoder, we conduct an ablation study by removing 1) the adaptive parameters p^{\u03b5}, in the structure encoder and 2) \u03b8_{m}^{\u03b5,\u03c4} the motion encoder. In this study, the matching module \u03c3 is used in all models, where we provide additional results without using it in Appendix D.2. The results show that the model without adaptive parameters in the structure encoder (row 1) performs well in many tasks, likely due to the universality of joint-level input/output representation, which allows for compositional generalization. However, adding embodiment-specific parameters consistently improves performance across all tasks, indicating the benefit of capturing embodiment-specific knowledge. The model without adaptive parameters in the motion encoder (row 2) remains competitive with the model including them (row 3) in many tasks but fails in the hop task"}, {"title": "6 Conclusion", "content": "We addressed the challenging problem of few-shot behavior cloning with unseen embodiments and tasks in continuous control. Our framework, Meta-Controller, effectively handles diverse embodiments using two key components: the state encoder and the matching-based policy network. Leveraging the modular nature of joint-level input/output representations, our state encoder extracts transferable features about the morphology and dynamics of the embodiment, capturing both specific and shared knowledge. The matching-based policy network uses these features to infer task structures from few-shot demonstrations, enabling robust imitation without overfitting. Experiments showed that our model generalizes well to unseen embodiments and tasks with only five demonstrations."}, {"title": "A Limitations and Broader Impacts", "content": "Limitations. Despite the promising results, the Meta-Controller framework has several limitations that warrant further investigation. One significant limitation is its reliance on simulated environments for training and evaluation, which may not fully capture the complexities and variabilities of real-world scenarios. This gap between simulation and reality could hinder the direct application of the framework to practical robotic tasks. Additionally, while the framework shows robust performance in the few-shot learning setting, it may still face challenges in environments with highly stochastic dynamics or in tasks that require extensive long-term planning. Another limitation is the assumption of a unified joint-level representation, which, although effective for the embodiments tested, may not generalize well to robots with significantly different morphologies or actuation mechanisms. Furthermore, the computational complexity of the transformer-based architecture could pose scalability issues for real-time applications, especially on resource-constrained robotic platforms. Lastly, the ethical implications of deploying such adaptable robotic systems need to be carefully considered to prevent potential misuse in sensitive areas.\nBroader Impacts. The proposed Meta-Controller framework for few-shot imitation learning has several significant broader impacts. Firstly, its ability to generalize across various robot embodiments and tasks with minimal demonstrations can greatly enhance the adaptability and versatility of robotic systems in dynamic environments. This flexibility is crucial for deploying robots in real-world scenarios where they must quickly learn and adapt to new tasks without extensive retraining. Secondly, by leveraging a modular approach that decouples embodiment-specific and task-specific knowledge, the framework promotes efficient knowledge transfer, potentially reducing the computational resources and time required for training new robotic tasks. However, the deployment of such adaptive systems also raises concerns about their potential misuse. For instance, advanced robotic systems equipped with this technology could be employed in surveillance or military applications, leading to ethical and privacy issues. Therefore, it is essential to implement safeguards and ethical guidelines to ensure the responsible use of these advancements. Furthermore, the reliance on simulated environments for training and evaluation might limit the transferability of the results to real-world conditions, necessitating further research to bridge this gap."}, {"title": "B More Details on Experiments", "content": "In this section, we describe the details of the tasks and embodiments in the used dataset and its collection processes.\nB.1 More details on Datasets and Environment\nEmbodiments and Tasks in DeepMind Control (DMC) suite. The DeepMind Control (DMC) suite benchmark [31] is a collection of continuous control tasks implemented using the MuJoCo physics engine [30]. It provides a variety of simulated environments to test and develop reinforcement learning algorithms. The environments in DMC are designed to be diverse and challenging, promoting the development of agents capable of handling a wide range of tasks. To reduce the complexity of the problem and facilitate knowledge acquisition from diverse tasks and embodiments, we only consider embodiments that operate on a 2D coordinate space. We then augment the dataset with a number of tasks used in [34, 14], including two tasks from newly added embodiments, walk and run) task of wolf, where we use the same reward function as the walk and run) task of walker, respectively. From a total of 38 tasks from 13 embodiments, we select an unseen embodiment with seen tasks (reacher-four, wolf), a seen embodiment with an unseen task (walker), and an unseen embodiment with unseen tasks (hopper) as held-out evaluation tasks for comprehensive analysis. For the exact setup of the newly added embodiments and tasks, please refer to the github repository of NerveNet 3 and TD-MPC24. We list all embodiments and tasks used in our experiments in Table 4."}, {"title": "B.2 More Details on Implementation", "content": "Episode Sampling Strategy. In the episode sampling procedure in Eq. (10), it is crucial to ensure consistency between the query Q and the few-shot demonstration D for effective learning from demonstrations. Since we use a replay buffer as our meta-training dataset which encompasses demonstrations obtained by learning agents at diverse stages, naively applying a uniform sampling strategy on the entire replay buffer results in a high probability of selecting inconsistent queries and demonstrations. Instead, to ensure task consistency in each episode during episodic meta-learning (Section 3.3), we sample the conditioning demonstrations D and the query data Q for Eq. (10) from a temporal segment of each replay buffer B(\u03b5,\u03c4). In other words, the demonstrations in D and Q are obtained from expert agents at adjacent training epochs. In all experiments, we use a temporal segment size of 10 for episodic meta-learning.\nTraining Details. All models are trained for 200,000 iterations using the Adam optimizer [22] and a poly learning rate scheduler [24] with a base learning rate of 2 \u00d7 10^{\u22124}. After training, we fine-tune all models for 10,000 iterations with a fixed learning rate of 2 \u00d7 10^{\u22124}, except for HDT [36], which requires a higher learning rate of 10^{-2}. For meta-training, we train the model with 8 \u00d7 RTX A6000 GPUs for approximately 25 hours, and we fine-tune the model on each task with 1 \u00d7 RTX A6000 GPU for approximately 2 hours.\nAs the baselines used in our experiments have not been demonstrated in our few-shot behavior cloning setting with unseen embodiments and tasks, we modify their base architecture or learning framework for fair comparison. When fine-tuning HDT, we first adapt the embodiment-specific head parameters of HDT with the episodic meta-learning objective, as it does not generate appropriate adapter parameters with untrained head parameters of novel embodiment. We then obtain adapter parameters by forwarding every temporal chunk of the few-shot demonstration with the hyper-network and initialize adapter parameters by the mean of the outputs. Then, following the HDT procedure, we fine-tune only the adapter parameters using the BC objective. For fine-tuning the PDT+PEFT baseline, we apply PEFT techniques to the PDT model meta-trained without task-specific parameters. For the few-shot adaptation of L2M, the learnable modulation pool and the corresponding low-rank projection matrices are fine-tuned.\nArchitectural Details. For transformer models, we employ a Pre-LN transformer layer [35], which consists of a self-attention layer followed by a 2-layer MLP with 4\u00d7 hidden dimension size. We use GELU [15] activation for the self-attention layers. To enhance the expressiveness of our matching-based policy network, we implement the matching module \u03c3 in Eq (8) with multi-head cross-attention [32], following Kim et. al. [20] and Kim et. al. [19]. We list the hyper-parameters of Meta-Controller in Table 5.\nImplementation Framework. We implemented our model based on PyTorch Lightning [1] which supports both Intel Gaudi-v2 (HABANA) and NVIDIA AI accelerators (CUDA). We provide the code for both systems on separate branches in the GitHub repository."}, {"title": "C Additional Results", "content": "In this section, we provide additional results and analysis on computational efficiency and robustness."}, {"title": "C.1 Additional Results on 3-Shot Behavior Cloning", "content": "To investigate performance in lower-shot settings, we evaluate our model with 3-shot behavior cloning on tasks presented in table 1. As shown in Table 6, our model consistently outperforms baseline approaches, demonstrating robustness even with fewer demonstrations. This result highlights the model's adaptability to fewer examples while maintaining reliable generalization across different tasks and embodiments."}, {"title": "C.2 Additional Results on Embodiment Variations", "content": "We further assess model performance on six additional embodiments by adjusting physical parameters, such as joint lengths (e.g., foot length of hopper) and ratios among joints (e.g., calf-thigh ratio of hopper, front leg-back leg ratio of wolf). These modifications can make the tasks harder, as the original embodiments are optimized for specific tasks. In Table 7, we compare Meta-Controller with the high-performing baselines from Table 1. Our model consistently outperforms all baselines in these challenging variants, demonstrating the robustness and adaptability of our approach to variations in embodiment configurations."}, {"title": "C.6 Computational Complexity Analysis", "content": "Table 8 presents the inference time comparisons between our model and VC-1 [26], which is a ViT-based foundation model designed for behavior cloning of continuous control tasks. Despite VC-1's high performance in visual tasks, its transformer-based architecture incurs notable computational costs. Our model achieves faster inference times, highlighting its efficiency relative to VC-1. We also note that models like RT-2 [3], which are designed for real-time robotic manipulation, typically involve architectures such as a 40-layer ViT and a large language model (LLM) with 3 billion parameters, requiring significantly higher computational resources than our approach.\nAdditionally, Table 9 provides a breakdown of relative inference times for each module in our model, demonstrating that the majority of computation time is allocated to the transformer-based encoders and decoders. In this context, advancements in optimizing transformers, such as sparse attention mechanisms [5], model pruning [21], and knowledge distillation [27], can enhance inference speeds. Since these techniques are orthogonal to ours, they can be naturally incorporated into our method for resource-constrained robotic platforms that require high speed inference."}, {"title": "C.7 Failure Case Analysis", "content": "We present visualizations of scenarios where the Meta-Controller performs less effectively and cumulative rewards over time for each scenario in Figures 8 and 9, respectively. In these failure cases, we observed that agents struggle to obtain rewards until they reach a specific posture. Once they achieve this posture (highlighted by the red box in Figure 8), they begin to solve the task effectively. This pattern is also reflected in Figure 9, where rewards remain near zero until a certain timestep, after which they rise consistently. This result implies that encouraging the agent to reach states similar to those in the demonstrations (e.g., via exploration strategies) would improve performance in challenging few-shot scenarios."}, {"title": "C.8 Robustness Analysis under Noise", "content": "To assess robustness in noisy environments, we introduce varying levels of noise to the transition dynamics and measure the resulting performance. Random noise sampled from U[-n, n] was added to the agent's action at each timestep, with three noise levels n \u2208 [2%, 5%, 10%] of the action range. Figure 10 plots the rewards of our model at each noise level compared to experts.\nThe results indicate that our method maintains its performance across many tasks as noise levels increase, showing its robustness under stochastic environments. Interestingly, for tasks such as reacher-four, the performance increases with higher noise levels, likely due to the exploration effect induced by stochastic transitions. This robustness under stochastic dynamics indicates potential for the model's application in real-world scenarios where environmental variability is common."}, {"title": "D Additional Ablation Studies", "content": "In this section, we provide additional results on ablation studies."}, {"title": "D.1 Additional Ablation Studies on Architectural Components", "content": "Table 10 presents the additional ablation studies on key architectural components:structure encoder f_{s}, motion encoder f_{m}, action encoder g, action decoder h and matching module \u03c3. Consistent with the discussion in Section 5.3, we observe that removing the structure encoder f_{s} (row 2) significantly reduces performance on both seen and unseen embodiments. This indicates that the structure encoder captures essential morphology-related knowledge that enables cross-embodiment generalization.\nWe also ablate the action encoder g and action decoder h (row 3), observing that removing them result in decreased adaptability and performance. The action encoder plays a key role in transforming raw action into a latent representation, which effectively enhancing expressibility of the policy network and enables adaptation to various unseen tasks with non-convex relationships between states and actions. Additionally, by encoding actions along the temporal axis, the model can construct a pool of transferrable action features related to local motor skills, which facilitates efficient transfer to unseen tasks that share modular skills but involve different skill combinations."}, {"title": "D.2 Additional Ablation studies on Adaptation Mechanism", "content": "To further analyze the adaptation mechanism of our model, we conduct an additional ablation study by ablating the adaptive parameters in the state encoder without using the matching module in the policy network. On average, using both adaptive parameters (row 3) achieves the best performance. However, we note that the model variant without adaptive parameters in the motion encoder (row 2) achieves higher performance than using the parameters (row 3) in many tasks. We conjecture that this is due to over-fitting on the few-shot demonstrations, as the adaptive parameters in the motion encoder are both specific to the embodiment and task and more prone to over-fitting. However, as we discussed with Table 3 in Section 5.3, such trends are not found in general (except for the easy task of reacher-four). This indicates that in few-shot learning settings, the PEFT techniques must be employed together with a robust architecture such as matching to exploit its effectiveness maximally."}, {"title": "D.3 Additional Ablation Studies on Meta-Training Task Composition", "content": "To further understand how the composition of meta-training tasks affects performance, we conduct experiments with varying subsets of embodiments and tasks in Table 12. We select 3 combinations of training tasks, where we remove 4 embodiments from the original 10 embodiments. Then, we performed 5-shot behavior cloning experiments on the 8 tasks presented in table 1.\nAccording to Table 12, we observe that using all embodiments outperforms the baselines in most tasks, indicating that a diverse set of embodiments makes the model robust to unseen embodiments. Our"}]}