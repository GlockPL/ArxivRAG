{"title": "VIRTUAL SENSING FOR REAL-TIME DEGRADATION MONITORING OF NUCLEAR SYSTEMS: LEVERAGING DEEPONET FOR ENHANCED SENSING COVERAGE FOR DIGITAL TWIN-ENABLING TECHNOLOGY", "authors": ["Raisa Bentay Hossain", "Farid Ahmed", "Kazuma Kobayashi", "Seid Koric", "Diab Abueidda", "Syed Bahauddin Alam"], "abstract": "Effective real-time monitoring technique is crucial for detecting material degradation and maintaining the structural integrity of nuclear systems to ensure both safety and operational efficiency. Traditional physical sensor systems face limitations such as installation challenges, high costs, and difficulties in measuring critical parameters in hard-to-reach or harsh environments, often resulting in incomplete data coverage. Machine learning-driven virtual sensors offer a promising solution by enhancing physical sensor capabilities to monitor critical degradation indicators like pressure, velocity, and turbulence. However, conventional machine learning models struggle with real-time monitoring due to the high-dimensional nature of reactor data and the need for frequent retraining. This paper explores the use of Deep Operator Networks (DeepONet) within a digital twin (DT) framework to predict key thermal-hydraulic parameters in the hot leg of an AP-1000 Pressurized Water Reactor (PWR). In this study, DeepONet is trained with different operational conditions, which relaxes the requirement of continuous retraining, making it suitable for online and real-time prediction components for DT. Our results show that DeepONet achieves accurate predictions with low mean squared error and relative L2 error and can make predictions on unknown data 160,000 times faster than traditional finite element (FE) simulations. This speed and accuracy make DeepONet a powerful tool for tracking conditions that contribute to material degradation in real-time, enhancing reactor safety and longevity.", "sections": [{"title": "1 Introduction", "content": "Proper monitoring and inspection of in-service components in nuclear reactors is essential for long-term safety and efficiency, as these components are continuously subjected to extreme temperatures, pressures, and radiation. Among these components, the primary circuit is particularly important, as it removes the immense heat generated in the reactor core, acting as the central component of reactor cooling system. This loop carries highly pressurized water at high velocities, creating significant mechanical stresses on the piping system Zou and Derreberry [2020], Keller and Bilanin [2002]. Turbulent coolant flow, especially in areas with bends and joints, leads to localized disturbances Tunstall and Harvey [1968], Dutta et al. [2016], Shimizu et al. [1992] that can induce material degradation mechanisms such as erosion, fatigue, and stress corrosion cracking. Given the critical role of the primary coolant loop, real-time monitoring is essential for detecting early signs of degradation and preventing failures. Tracking key parameters\u2014pressure, velocity, and turbulence-allows operators to identify anomalies such as flow reductions, vibrations, and pressure drops. These insights provide early warnings, often before structural damage occurs, ensuring safe and efficient reactor operation while reducing risks associated with material degradation.\nTraditionally, nuclear reactors employ non-destructive testing (NDT) methods, including eddy-current, ultrasonic, radiographic, and visual inspections, to detect degradation in the piping system Khan et al. [2023]. These methods are effective at identifying various forms of material degradation, including cracks, corrosion, and fatigue, without causing damage to the system itself. However, these processes are usually carried out through scheduled outages, leading to significant revenue losses. In addition, nuclear piping systems often extend over several miles, making it challenging to inspect the entire system within the limited outage period Sandhu et al. [2024]. As a result, while traditional NDT methods remain valuable, they present challenges in terms of achieving comprehensive system coverage and addressing material degradation during routine operations. Real-time monitoring of coolant flow offers an alternative to these scheduled inspections. If during real time monitoring, anomalies or significant deviations from normal parameters are observed, inspections can be scheduled promptly to address specific concerns. This approach not only enhances the safety and reliability of the reactor but also minimizes the need for extensive and costly scheduled outages, as regular scheduled inspections can be replaced by conditional inspections only when there is a clear indication of potential problems Han et al. [2022].\nCurrent methods for real-time coolant flow monitoring in nuclear reactors include ultrasonic, electromagnetic, thermal dispersion, vortex, and differential pressure flow meters Davydov et al. [2021], Tokarz [1983]. Additionally, sensors for temperature, pressure, radiation, and chemical composition are placed throughout the coolant piping system to ensure continuous monitoring Kuroze et al. [1996], Lister and Uchida [2015], Jensen et al. [1996]. These sensors are typically located at the inlet and outlet of the reactor core, steam generators, and other components U.S. Nuclear Regulatory Commission [2011]. When placing sensors, factors such as radiation, temperature, and pressure must be carefully considered to ensure optimal performance and minimize sensor degradation Hossain et al. [2024], Karnik et al. [2024]. While the current sensor network for monitoring coolant flow in nuclear reactors provides extensive coverage, ensuring the reactors function properly, there are still a lot of opportunities for further improvement. The main issue with relying solely on physical sensors is the high installation, calibration, and maintenance costs, along with unmonitored areas that create potential blind spots for undetected anomalies. Ideally, sensors would be placed at regular intervals along the piping system for comprehensive monitoring, but this is impractical due to flow disturbances and logistical challenges. While placing sensors at the inlet and outlet of piping segments is feasible, installing them within pipe sections is difficult. Even when sensors are installed and calibrated, failures can complicate detection and replacement, adding operational challenges of relying on extensive physical sensor networks.\nTo address these limitations, Distributed Fiber Optic (DFO) sensing has emerged as a promising alternative, having been explored for decades in nuclear plants to monitor temperature, flow, and pressure Wu et al. [2021], Ferdinand et al. [2000]. Another innovative solution is the use of virtual sensors-software-based models that estimate physical quantities using data and simulations rather than direct physical measurements Zhao et al. [2024a,b], Niresi et al. [2024]. These virtual sensors mimic the behavior of physical sensors, providing readings without requiring the installation of actual hardware Sun et al. [2017], Masti et al. [2021], Ofner et al. [2023]. They are especially useful in situations where physical placement is not feasible because of limited space or unfavorable weather Ahmed et al. [2013]. When used in conjunction with other sensors that are keeping an eye on the same conditions, virtual sensors improve data reliability by reducing signal interference Liu et al.. Virtual sensors are easily adjustable to meet changing needs, unlike real sensors that require actual modifications Barmaz [2023]. The concept of virtual sensors in the nuclear sector is relatively new but not entirely unfamiliar. Sevilla et al. Sevilla and Pulido [1998] demonstrate how neural networks can estimate variables in pressurized water reactors by optimizing input selection and network architecture. Ahmed et al. Ahmed et al. [2013] develop virtual sensor networks for accident monitoring in nuclear power plants using statistical relationships among process parameters. Tipireddy et al. Tipireddy et al. [2017] present virtual sensors with Gaussian process models to temporarily replace faulty sensors in nuclear power plants, ensuring accurate measurements and reducing unscheduled shutdowns."}, {"title": "", "content": "When it comes to monitoring and maintenance of complex in-service systems, Digital Twin technology has gained significant popularity over the past few decades. Digital Twins are virtual models of physical assets that enable real-time monitoring, control, and prediction of system behavior. A typical Digital Twin framework consists of five key components Kobayashi and Alam [2024a,b], Kobayashi et al. [2024a], Kabir and Alam [2010]: (1) a prediction module for real-time monitoring, (2) a real-time update module for synchronization, (3) data and signal processing, (4) visualization, and (5) decision-making modules. Within this framework, virtual sensors play a critical role in ensuring the performance and flexibility of the Digital Twin. These sensors continuously collect, analyze, and feed data into the digital twin in real time, supporting both the prediction and data processing components. When establishing digital twins Kobayashi et al. [2024b], virtual sensors can monitor and control physical sensors, offering cost-effective and scalable solutions. This is particularly useful in multi-criteria decision-making applications Martin et al. [2021], Kumar et al. [2022]. This capability allows the Digital Twin to maintain an accurate and reliable system representation, even when physical sensors degrade or experience faults. Ultimately, virtual sensors are essential to the scalability of Digital Twin technology, offering a cost-effective and adaptable solution for continuous real-time monitoring, informed decision-making, and system optimization in complex environments.\nEmerging neural network technologies, such as the Deep Operator Network (DeepONet) Lu et al. [2021], Fourier Neural Operators (FNO) Li et al. [2020], and Physics-Informed Neural Networks (PINN) Raissi et al. [2019], provide powerful tools for developing virtual sensors that can predict the behavior of complex systems. These models are particularly adept at solving partial differential equations (PDEs) by approximating nonlinear operators and learning mappings between functional spaces. This makes them highly suitable for accurately modeling and predicting the behavior of complex systems with intricate interdependencies, such as those found in nuclear reactors. Among these, the Deep Operator Network (DeepONet) has demonstrated greater efficiency compared to the others. L. Lu, X. Meng and S. Cai et al. in their paper Lu et al. [2022] demonstrate that DeepONet is more flexible than FNO in terms of problem settings and datasets. With PINN as well, we face inconvenience as each new input parameter value requires a separate simulation or retraining. Moreover, PINN struggles to approximate PDEs with strong non-linearity commonly found in practical fluid flow problems. In contrast, DeepONet alleviates the need for retraining by learning operators that map entire functions, rather than specific input-output pairs, across different conditions. Once trained, DeepONet can generalize to a wide range of new inputs without requiring retraining for each new scenario, as it understands the underlying functional relationships between inputs and outputs. This is particularly advantageous for real-time applications, as it can handle varying conditions without the computational burden of frequent retraining. DeepONet approximates linear and nonlinear PDE solution operators using parametric functions as inputs and maps them to various PDE solution functions in output spaces, thereby eliminating the need for these repetitive training processes Koric and Abueidda [2023].\nA well-trained neural operator offers the computational efficiency needed for real-time or near real-time predictions, which is crucial for control system optimization Kobayashi et al. [2024a], He et al. [2024]. These advantages make DeepONet our preferred choice for its flexibility, scalability, and efficiency. Unlike traditional finite element (FE) simulations, which can be computationally intensive and time-consuming, DeepONet can generate predictions orders of magnitude faster, making it ideal for real-time applications. By training on data from high-fidelity simulations and experimental measurements, DeepONet can accurately predict coolant flow behavior under various operating conditions, which is central to our goal of developing an effective virtual sensor framework for nuclear reactors. The key advantage of using DeepONet for our problem is its trunk network, which processes spatial coordinates to evaluate the output function Lu et al. [2021], He et al. [2024]. This network enables us to predict parameters at various points along the pipe based on input data from a single location, allowing for comprehensive condition inference throughout the entire pipe from just one input plane. Combined with near real-time computational ability, DeepONet acts effectively as virtual sensors, providing real-time estimates of flow velocity, turbulence, pressure, and temperature at various points in the primary circuit without physical sensors. Thus, the application of DeepONet offers a solution to many of the challenges posed by current methods for monitoring coolant flow in nuclear reactors.\nIn this work we have studied hot leg as the representation of primary coolant system to demonstrate the effectiveness of DeepONet in predicting the parameters. The hot leg, comprising horizontal and vertical conduits along with elbows, transports highly pressurized, high-temperature water from the reactor pressure vessel (RPV) to the steam generator (SG). Any leakage in the hot leg can lead to serious consequences, including a loss of coolant accident (LOCA), which may impair the reactor's cooling capacity and pose radiological risks. Thus, it is beneficial to monitor the coolant condition inside the hot leg to ensure proper heat transfer and safe, efficient operation of reactor. However, real time monitoring of key parameters like pressure, velocity, and turbulence kinetic energy inside the hot leg poses challenges due to its critical operating conditions. We aim to develop a real-time monitoring model of thermal-hydraulic conditions within the hot leg of PWR. We have specifically considered the coolant system of AP1000 shown in Figure 1. For this study, we propose to utilize the coolant inlet velocity, which is already monitored through existing sensor networks. We assume that the coolant flow through the hot leg follows the normal operational conditions of a PWR coolant system."}, {"title": "2 Methods", "content": ""}, {"title": "2.1 Data Generation", "content": "The hot leg in an AP1000 reactor plays a critical role in its operation, acting as the primary channel for transferring heat generated in the reactor core to the steam generators. Hence, the core could overheat without proper flow through the hot leg, leading to a potential meltdown. AP1000 reactor cooling system includes hot and cold leg pipes connecting the reactor vessel, steam generators, and reactor coolant pumps. Each loop has three pipes, including a 787.4 mm inner diameter pipe between the reactor vessel outlet and steam generator inlet with a length of 2.3 m Namgung and Giang [2016b]. While system-level codes provide a useful tool for macroscopic thermal-hydraulic analysis of nuclear reactors, their limitations in resolving detailed flow features such as flow re-circulation and turbulence within the hot leg necessitate the use of more advanced methods like Computational Fluid Dynamics (CFD). CFD, with its ability to resolve complex geometries and flow physics, can provide a more accurate and detailed understanding of the fluid dynamics within the hot leg. However, due to the complexity of the full-scale geometry, a scaled-down model was used for CFD analysis. Geometric scaling was employed, ensuring a constant flow rate per unit volume between the actual case and the model. In this study, geometric scaling was implemented according to the following conditions:\n$\\frac{Q_m}{V_m} = \\frac{Q_a}{V_a}$ \nWhere, $Q_m$ and $Q_a$ are the volumetric flow rates of model and actual case and $V_m$ $V_a$ are the volume which results in volume of the model and actual case. Hence we can write,\n$\\frac{U_m}{V_m} = \\frac{U_a}{V_a}$\nwhere $u_m$ and the $v_a$ are the velocities of the model and the actual case. $I_m$ and $l_a$ represents the model and actual flow length the hot leg. The diameter of the hotleg pipe $(d_a)$ was scaled down by the a factor of $\\lambda$ equivalent to 31.5 which gives the value of $d_m$ to be 25 mm. The flow length of the model was kept 150 mm where $l_a = d_m \\times I_m$. Hence. the relationship between the Reynolds number $(Re)$ for the model and actual scenario becomes:\n$Rem = Rea X \\frac{\\lambda}{d_m}$\nAs shown in Figure 2, the elbow joint angle (c) was kept 120\u00b0, same as the actual scenario of hot leg.\nThe walls of the flow domain were treated as adiabatic and subject to no-slip conditions. This implies that these surfaces neither gained nor lost heat, and fluid velocity at the wall interface was zero. In terms of thermal conditions, the inlet fluid temperature was maintained at 594.3 K. The outlet was set to a gauge pressure of zero, ensuring it remained at ambient atmospheric pressure. The inlet velocity ($v_{in}$) was changed according to the magnitude of Re, ensuring turbulent flow. Figure 2 shows the essential boundary conditions and the plane of interest where the hydrodynamics parameters evaluated through CFD simulations to train ML model.\nIn the numerical investigations, the coolant was modeled as a Newtonian fluid with constant viscosity and density, implying a linear relationship between stress rate and strain rate. Simulations were performed under steady-state conditions, encompassing both forced turbulent flow regimes.3D Navier-Stokes equations solved using the Finite Volume Method (FVM). The governing equations are as follows Ahmed et al. [2024]:\nContinuity equation:\n$\\frac{\\partial \\rho}{\\partial t} + \\nabla \\cdot (\\rho \\tilde{u}) = 0$\nMomentum equation:\n$\\frac{\\partial (\\rho \\tilde{u})}{\\partial t} + \\nabla \\cdot \\rho \\tilde{u}\\tilde{u} = -\\nabla P + \\nabla \\tau + \\rho g$\nEnergy equation:\n$\\frac{\\partial(\\rho H)}{\\partial t} + \\nabla \\cdot (\\rho H u) = -\\nabla \\cdot \\tilde{q}'' + q''' - PV \\cdot \\tilde{u}$\nIn the present study, forced turbulent flows were assessed employing the RNG k & $\\epsilon$ model, the equations for which are presented below Ahmed et al. [2022, 2021]:\n$\\frac{\\partial}{\\partial t} (\\rho k) + \\frac{\\partial}{\\partial x_i} (\\rho \\epsilon k_i) = \\frac{\\partial}{\\partial z_j} (\\alpha_k \\mu_{eff} \\frac{\\partial k}{\\partial z_j}) + G_k + G_b - \\rho \\epsilon - Y_M + S_k$\n$\\frac{\\partial}{\\partial t} (\\rho \\epsilon) + \\frac{\\partial}{\\partial x_i} (\\rho \\epsilon k_i) = \\frac{\\partial}{\\partial z_j} (\\alpha_k \\mu_{eff} \\frac{\\partial k}{\\partial z_j}) + C_{1 \\epsilon} \\frac{\\epsilon}{k} (G_k+C_{3k}G_b) - C_{2\\rho} \\frac{\\epsilon^2}{k} - R_{\\epsilon} + S_{\\epsilon}$\nIn the FVM, the establishment of a computational grid over the geometry is essential for attaining solution convergence. To facilitate this, the present study employed hexahedral and tetrahedral mesh spanning the entire computational domain, with particular attention dedicated to enhanced wall treatment for improved accuracy. Mesh with refined wall treatment, including ten boundary layers, was employed to ensure solution convergence. Mesh elements were finely sized at"}, {"title": "2.2 DeepONet", "content": "In this study we have used an unstacked DeepONet described by Lu Lu et al. Lu et al. [2021], comprising a single branch network and a trunk network. Figure 4 shows the model architecture used in this work. DeepONet architecture provides a foundation for capturing the interplay between input parameters and spatial coordinates. The branch network processes the input function, representing the average initial velocity in our case. This input, belonging to an infinite-dimensional functional space, is characterized by n control points. Here n=1 as we are considering the average value. The trunk\n$I = \\frac{2}{3} \\sqrt{Vk}/U_{avg} \\simeq \\frac{0.16}{Re^{1/8}}$"}, {"title": "3 Results and Discussion", "content": ""}, {"title": "3.1 Data Processing", "content": "The data for this study was generated using ANSYS Fluent, focusing on fluid dynamics within the hot leg elbow joint of an AP-1000 LWR nuclear reactor. The average inlet velocity range for the simulations was set between 0.63 and 0.83. The computational mesh consisted of a total of 11,340 nodes, distributed along the central plane of the hot leg to capture the coolant flow characteristics throughout the pipe section. For this study, we performed a total of 5,000 simulations. This dataset was subsequently divided into a training and testing set in a 90%-10% ratio, resulting in 4,500 scenarios for training and 500 scenarios for testing. Importantly, the 500 test data points were never touched during the training or validation process. They remained completely unseen by the model and were used exclusively at the final stage to evaluate the model's performance on unseen data. This setup was designed to monitor coolant behavior in near-real-time, capturing detailed velocity, turbulence, and pressure variations to detect any anomalies effectively.\nTo ensure the DeepONet model properly learns the values of different parameters, we addressed the issue of varying ranges among these parameters. For instance, the pressure values range between approximately -231.25 and 132.7, while the turbulence kinetic energy values range between approximately 0.000875 and 0.019015. Such discrepancies in value ranges can hinder the model's learning process. To mitigate this difference, we applied min-max scaling to normalize all the values between 0 and 1.\n$X_{scaled} = \\frac{X - X_{min}}{X_{max} - X_{min}}$\nwhere X is the original value, $X_{min}$ is the minimum value in the dataset, $X_{max}$ is the maximum value in the dataset, and $X_{scaled}$ is the normalized value in the range [0, 1]."}, {"title": "3.2 Training Process", "content": "The training process for this study is designed to ensure that the model fits the training data well while also generalizing effectively to unseen data. Initially, the training dataset is split into two parts: 80% for training and 20% for validation."}, {"title": "3.3 Vanilla DeepONet vs DeepONet with Linear Layers", "content": "To support our modification of the original model with added linear layers for each parameter separately, we present a comparison between the DeepONet model with and without these linear layers. To match the total number of learnable parameters for both of the model, the number of hidden layers for Vaanilla DeepONet model was taken to be 11 for Branch network and 10 for Trunk network. Each hidden layer has 4096 neurons. Which makes the total number of learnable parameters to be 365431887. On the other hand, our considered model with linear layer has 3 hidden layers with 512 neurons each. With the extra three linear layers at the end, the total number of learnable parameters for this model is 361499727. With that these two models become comparable with each other."}, {"title": "3.4 Impact of Data Splits and Node Counts on Model Accuracy", "content": "To evaluate the impact of different train-test splits on the model's performance, the dataset was divided into the following ratios: 70-30%, 80-20%, and 90-10%. The model was trained on these varying fractions of the training set, and the"}, {"title": "3.5 Performance Evaluation", "content": "Building on our previous studies-comparing Vanilla DeepONet to DeepONet with Linear Layers, and analyzing the impact of data splits and node counts on model accuracy-we now focus on a comprehensive analysis of the modified DeepONet with linear layers using an 80-20 train-test split. This section provides a comprehensive evaluation of the model's performance across the key parameters of turbulence kinetic energy, velocity, and pressure."}, {"title": "3.6 Inference Time", "content": "DeepONet is well-known for its short inference time, especially when compared to traditional numerical methods such as the Finite Element Method (FEM). After the model has been fully trained, a well trained DeepONet model can generate predictions almost instantaneously for new inputs. This is because it bypasses the need for iterative solving of differential equations, which is computationally expensive in traditional methods like FEM."}, {"title": "3.7 Local Variable Analysis and Discussion", "content": "Figure 7 presents the velocity contours for both the true and predicted values, along with the associated error distribution, on a selected diagnostic plane. The figure showcases the results for five representative cases, ranging from the best-performing case to the worst-performing case, with the intermediate cases illustrating a 25% interval distribution of best performing case. The figure demonstrates that DeepONet, while generally proficient at predicting velocity patterns, encounters difficulties in regions with abrupt velocity transitions, particularly near the elbow joint where steep gradients and discontinuities are prevalent due to flow separation from the inner radius. In these areas, the model exhibits higher prediction errors compared to regions with smoother flow fields. This discrepancy can be attributed to the inherent challenge of capturing sharp gradients and discontinuities using a data-driven model like DeepONet. While the flow behavior in these zones is governed by intricate physical laws, DeepONet primarily relies on learning patterns from training data. Consequently, the model struggles to achieve high accuracy in regions where the flow physics plays a dominant role. This limitation is consistently observed across all five cases presented.\nAnalysis of Turbulence Kinetic Energy (TKE) in Figure 8 reveals that DeepONet accurately predicts turbulence patterns. However, error patterns for TKE are inversely related to those observed in velocity predictions. TKE magnitude increases downstream of the elbow due to flow separation and recirculation, resulting in pressure gradients and upsurged the turbulence. DeepONet excels at predicting local zones with high TKE values, but accuracy diminishes in regions of low TKE, even with smooth flow fields. This could be attributed to the nature of TKE magnitudes, which are near zero in smooth flows and significantly higher in turbulent regions. DeepONet struggles to capture these subtle variations near zero, leading to the observed error pattern reversal compared to velocity fields. Furthermore, the contour plots reveal instances of exceptionally high errors at specific nodes within the diagnostic plane, suggesting the presence of outliers in the predicted data. These outliers, characterized by significant deviations from the true values, could arise from various factors such as noise in the training data, model limitations in handling extreme or rare flow conditions, or numerical instabilities during the prediction process."}, {"title": "4 Conclusion", "content": "In this study, we explored the application of DeepONet as a virtual sensing framework in the context of the prediction component of a digital twin for real-time degradation monitoring of thermal-hydraulic parameters within the primary coolant loop of an AP-1000 nuclear reactor. The results demonstrate that DeepONet, especially when enhanced with additional linear layers, provides highly reliable predictions for degradation-inducing parameters (pressure, velocity, and turbulence kinetic energy) across various operating conditions. Our study also revealed that DeepONet maintains consistent performance for real-time degradation monitoring across varying percentages of training data and different numbers of data points used for training. This robustness underscores the model's potential for deployment in scenarios with limited data or computational resources. Notably, DeepONet can make predictions 160,000 times faster than traditional finite element (FE) simulations, making it highly suited for real-time monitoring applications. However, the model faces challenges, particularly in accurately predicting turbulence kinetic energy, where it exhibited higher relative errors. This suggests that while DeepONet is a powerful tool, further refinement-possibly incorporating additional physical constraints or more sophisticated loss functions-could enhance its accuracy for more complex flow variables. Overall, this study demonstrates the feasibility and advantages of using DeepONet as a virtual sensor for monitoring coolant flow in nuclear reactors. By providing a scalable and cost-effective complement to physical sensors, DeepONet enhances the safety, reliability, and efficiency of nuclear reactors, paving the way for more advanced digital twin technologies in the nuclear industry. In future work, we will focus on improving the model's accuracy in predicting complex flow behaviors and exploring its applicability to other critical components of nuclear reactors."}, {"title": "Data and code availability", "content": "The data and code used and/or analysed during this study are available from the corresponding author on reasonable request."}, {"title": "Competing Interests", "content": "The authors declare no conflict of interest."}, {"title": "Author Contributions", "content": "Conceptualization: S.A., R.H. and K.K.; methodology: R.H.; Writing - original draft: R.H.; Review & Editing: All authors; Formal analysis: R.H.; Visualization: R.H. and K.K.; Data curation: R.H.; Supervision: S.A.; Project administration: S.A. and D.A.; All authors have read and agreed to the published version of the manuscript."}, {"title": "Declaration of Generative AI and AI-assisted Technologies in the Writing Process", "content": "During the preparation of this work, the author(s) used a Large Language Model (ChatGPT) for language editing and refinement. The AI was employed solely for improving the clarity and readability of the manuscript, and no content was generated or altered by the AI."}]}