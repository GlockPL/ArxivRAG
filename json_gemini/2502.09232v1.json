{"title": "Logical Foundations of Smart Contracts", "authors": ["Kalonji Kalala"], "abstract": "Nowadays, sophisticated domains are emerging which require appropriate formalisms to be specified accurately in order to reason about them. One such domain is constituted of smart contracts that have emerged in cyber physical systems as a way of enforcing formal agreements between components of these systems. Smart contracts self-execute to run and share business processes through Blockchain, in decentralized systems, with many different participants. Legal contracts are in many cases complex documents, with a number of exceptions, and many subcontracts. The implementation of smart contracts based on legal contracts is a long and laborious task, that needs to include all actions, procedures, and the effects of actions related to the execution of the contract. An ongoing open problem in this area is to formally account for smart contracts using a uniform and somewhat universal formalism. This thesis proposes logical foundations to smart contracts using the Situation Calculus, a logic for reasoning about actions. Situation Calculus is one of the prominent logic-based artificial intelligence approaches that provides enough logical mechanism to specify and implement dynamic and complex systems such as contracts. Situation Calculus is suitable to show how worlds dynamically change. Smart contracts are going to be implement with Golog (written en Prolog), a Situation Calculus-based programming language for modeling complex and dynamic behaviors.", "sections": [{"title": "Introduction", "content": "This work is motivated by the increasing amount of investigations around Blockchains [16] and cyber physical systems [18] that are coupled with the necessity of smart contracts. Cyber physical systems are smart devices that are connected together with the purpose of collecting data, processing them, and providing intelligent decisions. A Blockchain is represented as a public ledger that requires a software to be shared by peers and run a business. That shared software representing a legal contract among parties is called smart contract. The implementation of a legal smart contract needs to take in account all the complexity of a contract and its numerous subcontracts. There are many existing approaches used to implement smart contracts. Those approaches present a number of limitations in handling all the complexity of smart contracts and their large number of subcontracts. To solve those limitations, the need of an approach to represent legal smart contracts in a way that allows to verify their correctness becomes evident. Logic-based approaches are emerging to provide mechanisms for reasoning about actions and their effects.\nThis thesis is using the Situation Calculus, a logic for specifying dynamical systems in artificial intelligence, to specify smart contracts and reason about them. Many logic-based formalisms have been investigated previously to represent smart contracts, such as the Deontic Logic [1], Event Calculus [12], Defeasible Logic [7] and other logic-based approaches in [31]. The idea of specifying smart contracts in the Situation Calculus is mentioned for the first time in [4]. Daskalopoulou's main idea is that monitoring and enforcing smart contracts can be supported in a particular application domain by giving a suitable (and in formal view) representation for agreements between parties that accounts for deviations of the"}, {"title": "Smart Contracts", "content": "A smart contract (e-contract) is a piece of software that monitors the correct execution of the legal con-tracts [2][30][22][3]. A smart contract is a automation of the execution of an agreement. An application's rules and regulations can be digitally facilitated, verified, validated, and enforced using a smart contract, which is an executable code on a blockchain network. Without the involvement of other parties, smart contracts enable legitimate transactions. These transactions can be monitored and maintained irreversible [23]. For blockchain applications[22][6], a smart contract fulfils the need for application-specific verification and validation. A blockchain is a new form of infrastructure that has the potential to profoundly alter the way that individuals transact, communicate, organize, and identify themselves [34][9][32][17]. A blockchain system is composed of a network of computational nodes that share a single data structure (the blockchain) and reach agreement on its current state [5][33]."}, {"title": "Smart Contract Formalization", "content": "Formal languages are mostly involved in the specification of e-contracts. Both syntax and semantics of formal languages are beneficial in the process of either verificating or validating of e-contrats [11][8]. Furthermore, le formal languages are equipped to handle business vocabularies and rule semantics. To enable users to comprehend high-level logic and accurately express e-contract semantics, effective approaches to solve logic-specification consistency must be developed. Many investigations have been carried out to study the use of different formal languages in the modeling of electronic contracts, formal languages such as Event, Default, Situation and Deontic calculus."}, {"title": "Problem Statement", "content": "An ongoing open problem in this area of smart contracts is to formally account for them using a uniform and somewhat universal formalism. In other words, the challenge is to give a formal semantics for smart contracts. This thesis proposes logical foundations to smart contracts using the Situation Calculus. Since smart contracts deal with obligations of contracting agents, the problem statement amounts to formalizing the notion of obligation in the Situation Calculus, and subsequently using this formalization to specify smart contracts, execute those specifications and use these specifications to prove properties of the smart contracts."}, {"title": "Situation Calculus", "content": "The situation calculus [14, 25] is a many-sorted and mostly first order language with equality specifically designed for representing dynamically changing world. We consider a version of the situation calculus with four sorts for actions, situations, time points, and objects other that the first three sorts. Actions are first order terms consisting of an action function symbol and its arguments, one of which being the action occurrence time. Situations are first order terms denoting finite sequences of actions. They are represented using a binary function symbol do: do(a,s) denotes the sequence resulting from adding the action a to an existing sequence s. The constant So (initial situation) denotes the empty sequence [].Time points are the sequence of real numbers. Finally, objects represent domain specific individuals other than actions, situations, and time points. The language has an alphabet with variables and a finite number of constants for each sort, a finite number of function symbols called action functions, a finite number of function symbols called situation independent functions, a finite number of function symbols called functional fluents, a finite number of predicate symbols called situation independent predicates, and a finite number of predicate symbols called predicate fluents. Predicate fluents represent properties whose truth values vary from situation to situation as a consequence of executions of actions. A predicate fluent is denoted by a predicate symbol whose last argument is a situation term. Functional fluents denote values that vary from situation to situation as a consequence of executions of actions. The language also includes special predicates Poss, and \u531a; Poss(a, s) means that the action a is possible in the situation s, and s s' states that the situation s' is reachable from s by performing some sequence of actions. In contract modelling terms, s \u531a s' means that s is a proper subtrace of the contract execution s'. The predicate \\u2913 will be useful in formulating properties of contracts.\nThe Situation Calculus allows a high level of flexibility in representing dynamic environments, thus making possible flexible and nuanced modeling of real-world scenarios. The formalism of Situation Calculus offers an effective way to describe changes and reason about the consequences of actions inside a system. This makes it possible to express change and action in an efficient manner. In our case, a smart contract represents the complex dynamic domain representing the Situation Calculus.\nA dynamic domain (e.g., legal contracts) is axiomatized in the Situation Calculus with axioms which describe how and under what conditions the domain is changing or not changing as a result of performing actions. Such axioms are called basic action theory in [24]. They include the following classes of sentences: domain independent foundational axioms for situations; action precondition axioms, one for each action term, stating the conditions of change; successor state axioms, one for each fluent, stating how change occurs; specific axioms for time, stating the occurrence times of actions and start times of situations; unique names axioms for action terms; and axioms describing the initial situation of the domain. In addition to the primitive actions mentioned above, complex actions mimicking Algol-like programming language constructs have been introduced to capture the full expressiveness of application domains. These complex actions are going to be implement with GOLOG [15][10], a Situation Calculus-based programming language for complex and dynamic behaviors. Golog interpreter is written in Prolog."}, {"title": "Solution", "content": "Since smart contracts deal with obligations of contracting agents, our approach consists in formalizing the notion of obligation in the Situation Calculus. In doing so, we extend a well-known solution by Scherl and Levesque [27] to the classical frame problem for knowledge to obligations. We then use the Situation Calculus with obligations to specify smart contracts as follows. First, we construct logical theories called basic contractual theories to formalize legal contracts. Basic contractual theories provide the formal semantics of the corresponding legal contracts. Second, we represent legal contracts as processes in the Situation Calculus; such processes lead to situations where desirable properties hold that logically follow from the basic contractual theory representing those legal contracts. We provide an implementable"}, {"title": "Methodology", "content": "In this thesis, we based our research on a methodology proposed in Reiter's version of the Situation Calculus [24, 25] by representing smart contract transaction as Situation Calculus actions whose effects are captured as truth values of Situation Calculus fluents. This approach relies on modelling a smart contract as a mostly first-order theory called basic action theory [24], augmented with sentences that account for the embedding of the logic of obligations, the so-called deontic logic, into the Situation Calculus. The resulting theory is the basic contractual theory mentioned in Section 4. In addition to four foundational axioms for situations [26, 21] that structure the space of situations, basic contractual theories contain a set of successor state axioms which extend Reiter's solution to the frame problem to the embedding of deontic logic into the situation calculus. With the basic contractual theories in hand, we represent smart contracts in Situation Calculus as logic-based programs built using complex actions that macro-expand to a sequence of simple actions. These programs are executed using an interpreter that uses the basic contractual theories as background theories for the purpose of proving properties of the formalized smart contracts."}, {"title": "Expected Contributions and Goals", "content": "The overall goal of the research that underpins the thesis has been stated in Section 2, namely providing logical foundations that constitute a formal semantics for smart contracts; and, to this end, we choose the Situation Calculus as our logic. The expected specific contributions and goals include the following:\n\u2022 Exploring existing logic-based approaches for formalizing smart contracts and comparing them.\n\u2022 Extending the solution by Scherl and Levesque to the classical frame problem for knowledge to obligations in the Situation Calculus.\n\u2022 Representing complex actions for specifying smart contracts as such actions.\n\u2022 Specifying and proving properties of smart contracts in the language of the Situation Calculus augmented with obligations.\n\u2022 Extending the GOLOG interpreter [13], a situation calculus-based programming language for defining complex actions in terms of a set of primitive actions axiomatized in the situation calculus.\n\u2022 Using GOLOG to develop a framework for obligation-based programming.\n\u2022 Providing a Prolog implementation of the framework."}, {"title": "Current Status of the Research", "content": "With reference to sections below steps (2)\u2013(4) and parts of Step (5) have been completed:"}, {"title": "Background and Related Work", "content": "Here, we introduce the various definitions of smart contract concepts, the ontology and related formalizations of legal contracts. We introduce the different logical formalisms used in modeling smart contracts, such as Event Calculus, Default Logic, Modal Logic, Deontic Logic and Temporal Logic. Also, we present some important related works on logic-based smart contracts. Finally, we compare the presented logical formalisms based on a number of features."}, {"title": "Formal Preliminaries", "content": "In this chapter, we present the situation calculation as enriched by Reiter in [24]. We present the language of the Situation Calculus, its syntax, and its foundational axioms. We then present the main components of the situation calculus machinery, including the basic actions theories and the regression mechanism used for reasoning about actions. Furthermore, we present Scherl and Levesque's extension of the Situation Calculus to account for knowledge and knowledge-producing actions that explicitly create agent knowledge. Scherl and Levesque's solution to the frame problem for knowledge-producing actions is presented, as this solution forms the departure point of our own solution for accounting for obligations. Finally we summarize the main theoretical and practical results of the Situation Calculus."}, {"title": "Formalization of Obligations", "content": "This chapter extends the solution by Scherl and Levesque to the frame problem for knowledge-producing actions to obligation-producing actions. An obligation-producing action is one which enacts obligations on the part of whoever agent performs it. Both works have their roots in the seminal work of Raymond Reiter who proposed the so-called successor state axioms as a solution to the frame problem for actions that are neither knowledge, nor obligation producing. The specification in this chapter yields intuitive properties that one would expect from obligations. Obligation-producing actions do only affect a newly introduced fluent for capturing the notion of obligation in the Situation Calculus, and no other fluents, except those fluents that are made obligatory by obligation-producing actions. In addition, persistence appears as a consequence of this new setting: if something is obligatory to an agent in a given situation, it remains obligatory everywhere as it should be, unless something contrary to the obligation occurs. We show that Reiter's regression operator for reasoning about actions back to the initial situation is a reasoning mechanism for this setting as well."}, {"title": "Formalization of Smart Contracts", "content": "We use the Symboleo [28] ontology to specify smart contracts. Symboleo is defined as a formal specification language for legal contracts[20]. Based on Event Calculus, it contains axioms to specify its semantics and its syntax is formalized by a grammar [29]. Symboleo generates smart contracts from natural language contract. In order to make an actual legal contract larger, Symboleo includes a contract ontology containing components such as: obligations, powers and state models to apply to the concepts of contracts [19]. We will use the Symboleo ontology and language to formulate smart contract Symboleo programs which will be systematically translated to Situation Calculus specifications in an effort to have implementable specifications."}, {"title": "Obligation-Based Programming Framework", "content": "This could be addressed by extending of GOLOG to an Obligation-Based Programming Framework and writing the Prolog Implementation of the Programming Framework."}]}