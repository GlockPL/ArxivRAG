{"title": "Multi-agent Path Finding in Continuous Environment", "authors": ["Krist\u00fdna Janovsk\u00e1", "Pavel Surynek"], "abstract": "We address a variant of multi-agent path finding in continuous environment (CE-MAPF), where agents move along sets of smooth curves. Collisions between agents are resolved via avoidance in the space domain. A new Continuous Environment Conflict-Based Search (CE-CBS) algorithm is proposed in this work. CE-CBS combines conflict-based search (CBS) for the high-level search framework with RRT* for low-level path planning. The CE-CBS algorithm is tested under various settings on diverse CE-MAPF instances. Experimental results show that CE-CBS is competitive w.r.t. to other algorithms that consider continuous aspect in MAPF such as MAPF with continuous time.", "sections": [{"title": "I. INTRODUCTION", "content": "Recent research in path planning not only deals with discrete environments but becomes focused continuous space to reflect needs of practice. The multi-agent path finding (MAPF) is a problem in which several agents move in a shared environment without colliding and each agent must reach its goal positons. For a discrete problem, this means that two agents are not present in the same vertex at the same time step in a graph that models the environment. However, in a continuous problem that aims to realistically solve real-life scenarios such as warehouse logistics or even autonomous vehicle movement, both time and space are continuous. The agents themselves should also be represented by a rigid body. Collisions between agents should therefore mean that two agents overlap at a given time. It is also possible to take various kinematic and dynamic constraints into account which constrain the agent's movement.\nThe goal of this work is to create a software prototype that allows continuous movement in both time and space for multiple agents at once. Agents will move on a set of smooth curves that will create their paths. These paths will be constrained so that no agents collide at the same time. As agents are rigid circular bodies in this work, a collision will occur if two agents overlap at any time. An algorithm based on existing Continuous Conflict-Based Search [Andreychuk et al., 2022] will be proposed. This algorithm works in continuous time, but the proposed modification will also work in a continuous environment. Unlike CCBS, agents will plan their paths using the RRT* algorithm [Karaman and Frazzoli, 2011], whose output will then be smoothed with B-spline curves. Single-agent methods for smooth path planning have already been studied. This work will build on them to provide a non-conflicting smooth multi-agent solution.\nThe work is sectioned as follows. Firstly, the theoretical background of this problem will be studied. This will contain the problem of continuous multi-agent path finding, the most important algorithms such as CCBS [Andreychuk et al., 2022] or RRT* [Karaman and Frazzoli, 2011], and smoothing with B-spline curves, as well as selected related works to all of these topics will be discussed. Next, the proposed model consisting of several base parts will be explained. These parts will include a constrained single-agent path finding algorithm, a smoothing mechanism, and a multi-agent algorithm for path finding in a continuous environment called CE-CBS. In the last part, performed experiments are discussed, with several important parameters being introduced and their impact on the model's performance being studied."}, {"title": "II. RELATED WORK", "content": "In [Surynek, 2020], a novel solution for the MAPFR prob-lem was proposed. The SMT-CBSR provides a makespan-optimal solution to this problem considering continuous space and time with geometric agents. It combines CBS algorithm with satisfiability modulo theory using lazy construction of incomplete encodings. That way, not all constraints are in-troduced in the model, which makes it consider a subset of solutions. The produced solution can then be further refined if needed. This makes it possible for the solution to be found before complete specification of the model. Unlike the original CBS, SMT-CBSR does not branch after encountering a conflict, and instead refines the propositional model with a conflict elimination disjunctive constraint (a mutex). The results of this approach are comparable to those of CCBS.\nIn [\u010c\u00e1p et al., 2013], the authors proposed a multi-agent variant of the RRT * algorithm, MA-RRT *. The agents in this model moved on a discrete motion graph in Euclidean space. As the environment was discrete, the graph version of RRT*, G-RRT* was used. The main difference between the two variants is the steering technique, which in G-RRT* is done using heuristic-guided greedy search. In MA-RRT*, greedy search generates a sequence of joint actions of all"}, {"title": "III. CONTINUOUS-ENVIRONMENT MAPF", "content": "The problem of continuity in MAPF can be addressed from several viewpoints with continuous representation of time, or a continuous representation of environment. In discrete problems, time would be represented as discretised time steps, and the environment where agents are present is represented as a graph in whose vertices the agents are situated.\nMAPFR is a version of the MAPF problem with con-tinuous time. Algorithms that address this problem are, for example, CCBS, E \u2013 ICTS or ECBS \u2013 CT [Andreychuk et al., 2022], [Walker et al., 2018], [Cohen et al., 2021]. Of these, only CCBS provides a solution without the need for any discretization of time.\nIn this work, both continuous environment and time are as-sumed. The agents are to find non-conflicting paths satisfying several properties. The paths are defined as smooth curves and have to satisfy certain kinematic constraints. Here, that constraint is the minimal angle constraint, setting a minimal value to angles between path segments before smoothing takes place. Agent's paths can cross, but the agents themselves cannot collide - they cannot overlap at any time. The movement of agents on their paths in time is represented by their trajectories, which are checked for conflicts. As in standard MAPF, agents start in pre-set starting position and they try to reach their goal positions.\nThe following definition is based on existing definitions by [Surynek, 2010], [\u010c\u00e1p et al., 2015], [Neto et al., 2010], [\u010c\u00e1p et al., 2013] and [Andreychuk et al., 2022].\nDefinition III.1 (Smooth Continuous MAPF SC-MAPF). Let M be a metric space, and R = {r1,r2,...,rv} a set of agents.\nSC-MAPF is the tuple $\\varepsilon$ = [G = (V, E), M, S, G, coord, A], where G represents a graph, Ma metric space, S the start function and G the goal function with coord mapping every vertex in G to a coordinate in M and A being a finite set of possible move actions. Every edge E in G represents a set of smooth curves that connect two vertices in G. A set of curves belonging to an edge e \u2208 E is denoted as Ce.\nEvery action a \u2208 A in MAPFR is defined by a duration $a_p$ and a motion function $a_{\\varphi}: [0, a_p] :\\rightarrow M$ that maps time to metric space. This motion function corresponds to a smooth curve. a(t) is the coordinate of an agent in the metric space Mat a timet while executing an action a.\nThe agent body is defined as a shape in metric space.\nThe initial configuration of agents is defined by a simple function SR: R \u2192 V, SR(r) \u2260 SR(s) for each r, s \u2208 R,r \u2260 S.\nThe goal configuration of agents is a simple function GR: R\u2192V, GR(r) \u2260 GR(s) for each r, s \u2208 R,r \u2260 s.\nA problem of smooth continuous multi-agent path finding is a task of finding a set of smooth curves - a sequence of actions, each choosing a curve c from a set of curves ce belonging to a respective edge e, for each agent so that no agents collide.\nA conflict is defined as a 5-tuple C = [ai, a(ai), aj, a(aj), t], where a is an agent, a(a) is the action agent a performs at the time the conflict occurs and t is the beginning of the time interval when the conflict occurs. This means that two agents overlap. Solving a conflict means forbidding the agents to move on certain curves which would traverse through the conflicting position at a conflicting time.\nThe solution of this problem is a set of actions of a set of agents satisfying the following constraints:\n(i) SR = GR; meaning all agents reach their goal positions.\n(ii) An agent moves at a set speed."}, {"title": "IV. BACKGROUND", "content": "a) Conflict-Based Search (CBS) and Continuous Time Conflict-Based Search (CCBS): The CBS algorithm is a cost-optimal MAPF algorithm. The goal of this algorithm is to find a set of paths for a set of agents, so that no agents collide at any step of their paths, if a solution exists, since it is a solution-complete algorithm [Andreychuk et al., 2022]. The objective is to find a conflict-free plan that minimises the makespan, which is the maximum of agents' path costs. CBS is a discrete algorithm; the environment is represented by a graph, and time is discretised into time steps. In every time step, an agent may perform one action, either a movement into a neighbouring vertex or a waiting action, that is, staying in its current vertex.\nThis algorithm consists of two levels; the lower level computes a path for each agent with the help of a single-agent path finding algorithm such as A*. This path must satisfy the constraints provided by the higher level of CBS. A constraint arises from collision solving, which takes place at the higher level. A constraint includes an agent a, a vertex v, and a time step t, which means that the specific agent a cannot be present in v at step t. The higher level of CBS first computes paths for all agents and then checks each step of these paths for collisions. Collision is a situation where two or more agents are present in a vertex at a time.\nThe CCBS algorithm is analogous to CBS with the exce\u0440-tion being the definition of a conflict and its resolution. In CCBS, the objective is also to minimise the makespan, defined as a maximum of costs of individual agents' paths. It is also a solution-complete algorithm, finding a solution if it exists, while unable to detect if a solution does not exist [Andreychuk et al., 2022].\nIn CBS, a conflict is typically represented as a tuple of an agent, a vertex, and a time step. As CCBS operates with continuous time, this is no longer viable. Instead of a vertex and a time step, CCBS takes into account an action of an agent l in a calculated unsafe interval [t\u0131, tu). A CCBS conflict is defined using pairs of timed actions (a,t). Timed action means that an action a is executed from time t. A conflict of two agents i and j occurs if they execute their respective timed actions and collide. Therefore, a CCBS conflict is defined as a tuple (i, j, (ai, ti), (aj, tj)).\nAn unsafe interval of a timed action (ai,ti) is defined with respect to another timed action (aj, tj) as the maximal continuous time interval starting from ti, in which if agent i would perform the action ai, it would have a conflict with timed action (aj, tj). [Andreychuk et al., 2022]\nb) Rapidly Exploring Random Trees *: A classic algo-rithm for path planning in a continuous metric space is the RRT algorithm (Rapidly-Exploring Random Trees) [LaValle, 1998]. A rapidly expanding random tree is constructed with iterative expansion by randomly sampling points that do not collide with an obstacle and connecting them to the nearest point in the tree. Expansions are biased towards unexplored parts of the search space. An RRT is probabilistically complete [LaValle, 1998], but the constructed paths are not guaranteed to be optimal. An improved version, RRT*, aimed to solve this problem by introducing the A* cost function into the original algorithm. Thus, the algorithm makes paths converge to optimal solutions [Karaman and Frazzoli, 2011].\nc) Path smoothing with B-spline Curves: In a real-life scenario, where an agent would be a vehicle, the vehicle would be sensitive for example to changes in acceleration, which would have to occur if it were to perform a sudden change of direction, such as a sharp turn. This could have an impact on the time that it spends on that path. Because of this, the differences in the different closely laid segments of the path should be limited [Lan and Di Cairano, 2015], [Savla et al., 2005], [Vana and Faigl, 2015]. A possible solution is to introduce a smoothing mechanism, therefore making the path a smooth curve. The curvature of the path can then be constrained to prevent sudden turning changes. Because of these real-life implications, it is advantageous to work not only with continuous time, but with continuous environment, too, as it can introduce movement on smooth curves and therefore take various kinematic or dynamic constraints into account.\nA path generated by RRT* can contain sharp turns when going from one path segment to another. To improve the quality of a path, many smoothing mechanisms were proposed, starting with [Dubins, 1957]. This work uses smoothing via B-spline curves, so as to be able to represent the complex nature a path in an environment with many obstacles can have. A B-spline curve is fitted onto a path with concrete path points being curve control points, and additional points are then interpolated laying on the smooth curve.\nA B-spline curve is a piecewise polynomial curve. A spline is a piecewise polynomial of degree n with segments C'm-1. It can be thought of as a method to define a sequence of degree n B\u00e9zier curves that automatically join with C'm\u22121, regardless of the placement of the control point. It can be used in problems too complex to be modelled with a B\u00e9zier curve. [Sederberg, 2012]\nDefinition IV.1 (B-spline basis function). Let U = {40,..., Um} be a non-decreasing sequence of real numbers. The u are called knots, and U is the knot vector. The i-th B-spline basis function of p degree, denoted as Ni,p(u) is defined as follows [Piegl and Tiller, 1996]:\n$N_{i,0}(u) = \\begin{cases}\n1 \\quad U_i \\leq u < U_{i+1} \\\\\n0 \\quad \\text{otherwise}\n\\end{cases}$\n$N_{i,p}(u) = \\frac{u-U_i}{U_{i+p} - U_i}N_{i,p-1}(u) + \\frac{U_{i+p+1} - u}{U_{i+p+1} - U_{i+1}}N_{i+1,p-1}(u)$"}, {"title": "V. PROPOSED MODEL", "content": "This works builds on the Continuous Conflict-Based Search algorithm proposed by [Andreychuk et al., 2022]. Here, a modification called Continuous Environment Conflict-Based Search (CE-CBS) is proposed. Its aim is to minimise the necessary discretization of the environments. It operates in a continuous environment with continuous time.\nEach agent in this multi-agent simulation performs path finding via the RRT* algorithm proposed by [Karaman and Frazzoli, 2011], which is modified to both solve constraints provided by CE-CBS and provide a path which is then smoothed using B-spline curves. The goal is to find a conflict-free solution while minimising the criterion sum of costs, which is the total sum of the paths of all agents. Agents in this model are defined as circular bodies with fixed radius and speed, both of which are input parameters. They are modelled as goal-based agents [Russell and Norvig, 2020] moving in a known environment. These agents aim to plan a set of paths from start positions to goal positions while avoiding both static obstacles, which are represented here as rectangles of varying sizes, and dynamic obstacles, which are constraints set by CE-CBS to avoid collisions between agents.\nIn the base design of this work, agents are set to find smooth paths in a way that they can move continuously without ever stopping and waiting before reaching their goal position.\nAs with CCBS, the cost of a solution is the sum of the costs of each agent's individual path. [Andreychuk et al., 2021] The length p of a path is measured as the sum of distances between neighbouring points on a path. The metric used is the Euclidean distance:\nThe goal of the algorithm is to minimise this sum of costs while keeping the plan conflict-free.\na) Redefining Conflicts: A conflict in this work is defined as a 5-tuple C = (ai,tai, ai+1, tai+1, Pi, Pi+1), where ai, ai+1 are two conflicting agents, tai, tai+1 are the respective times of the agent to reach the conflict position and Pi, Pi+1 are the conflict coordinates for each agent.\nWhether two agents are in a conflict is determined in two steps. For each pair of agents, it is checked if their planned trajectories intersect. If so, a time is computed that represents the moment when the two agents reach the intersection. This is done with the basic formula of $t = \\frac{s}{v}$, where t is the resulting time, s is the length of the agent's path from the start to the intersection point, measured as a sum of Euclidean distances for each path segment, and v is a constant speed of an agent. It is also necessary to account for agent bodies, for which checking if paths intersect does not suffice. It is therefore also checked if the distance between every pair of path segments from different paths is closer to each other than the agent radius. If so, the points at which those segments are closest are tested to see at which time agents arrive at these positions. If these times fall into an unsafe interval of another agent, a conflict is present.\nAn unsafe interval is created from these time variables, which is necessary to take the agent mass into account. If the time when agent a\u2081 reaches the intersection point falls into the unsafe interval of agent a2 or vice versa, a conflict is present."}, {"title": "Algorithm 1: Get first conflict", "content": "Input: paths P, agents A\nOutput: conflict c\n1 C\u2190 0;\n2 for ai \u2208 A do\n3  for ai+1 \u2208 A do\n4   crossing, positions \u2190\n5    CrossingCloseTraj(Pai, Pai+1);\n6   if crossing then\n7    for posi, Posi+1 \u2208 positions do\n8     ta, TimeToReach(Pai, posi);\n9     tai+1 TimeToReach(Pai+1, posi+1);\n10    if TimesTooClose(tai, tai+1) then\n11   C\u2190CU Conflict(ai, tai,\n12       ai+1, tai+1, Posi, posi+1);\n13 return SelectFirst(C);\nThe conflict which is returned by the GetFirstConflict function as seen in algorithm 1 is that in which one of the agents' time is the lowest from all the times of all conflicts.\nb) Lower level of CE-CBS: The lower level of CE-CBS is performed by RRT* enhanced by several steps from the original algorithm proposed by [Karaman and Frazzoli, 2011]. The lower level operates in two basic steps: path planning and interpolation. Each part has to be checked for validity to ensure the resulting path being as conflict-free and obstacle-free as possible, and iterates until a valid solution is found.\nThe first step is the RRT* path planning, which in itself validates the path as described below. If the path found is not valid, meaning not only that it is conflict-free and obstacle-free, but that all angles between neighbouring path segments are larger than set minimal degree constraint \u03b1, RRT* is re-planned with a lower value of maximum nodes to sample. If a valid solution is found, interpolation with a B-spline curve can take place. The path resulting from interpolation is then validated in the same manner as the path resulting from RRT*, and interpolation can also be done multiple times to try and find a sufficient path without the need to re-planning the entire path by RRT*. Experiments showed it is necessary to be able to dynamically set the lower bound of maximal number of nodes expanded by RRT* Nmax, so that the entire environment can be searched even if this value is lowered. To ensure that RRT* does not return a solution which is either incomplete or breaking an angle constraint, iterating continues after reaching the lower bound, but it does not lower max further.\nc) CE-CBS and kinematic constraint satisfaction: The RRT* algorithm takes a set of constraints on input. A constraint is defined as a 4-tuple c = (a, p, unsafe from, unsafeto), where a specifies an agent to which that constraint applies, p is a particular coordinate of a conflict and (unsafe from, unsafeto) denotes the unsafe time interval. If an agent crossed p in a time within the unsafe interval, it would mean breaking that constraint.\nWhile path planning, RRT* has to take two types of obstacles into account both static predefined rectangular obstacles which remain obstacles throughout the whole course of the planning, and constraints provided by CE-CBS, which serve as dynamic obstacles and only present a threat in a certain time frame specified by the unsafe interval.\nIf a path segment is to be added to the RRT* tree, it first needs to be checked for validity, so that the line segment formed by adding a new point does not intersect an obstacle or break a constraint."}, {"title": "Algorithm 2: Validate", "content": "Input: path p, obstacles O, constraints C\nOutput: True or False\n1 segment \u2190 (po);\n2 for i in length(p) \u2013 1 do\n3  segment \u2190 segment + Pi+1;\n4  line \u2190 Pi, Pi+1;\n5  if not ObstacleFree(line, O) then\n6   return False;\n7  cost \u2190 PathCost(segment);\n8  if not ConstraintFree(line, cost, C) then\n9   return False;\n10 return True;\nThe algorithm 2 shows the function validate. This function checks if any line segment defined by two neighbouring points intersects an obstacle or a constraint. Intersecting a constraint means that the agent would arrive at a given position in a time specified by the unsafe interval of the constraint.\nA sufficient path must satisfy the given kinematic con-straints. In this work, angles between path segments (pre-smoothing) are constrained to be bigger than 90 degrees to ensure that a simulated robot would be able to preform the turn. This constraint number was preliminarily chosen so as to eliminate acute angles from paths and can be changed in further experiments.\nUsing the cosine formula for the dot product, the angle 0 between two line segments represented by two vectors \u03c5,\u03c9 can be written as:\n$\\theta = cos^{-1}(\\frac{v \\cdot w}{||v|| \\cdot ||w||})$"}, {"title": "VI. EXPERIMENTS", "content": "Experiments were made to determine the model's perfor-mance under different setting of its parameters and different types of scenarios. Some of these experiments are discussed here.\nThe performance was tested with respect to various param-eters including: Nmax the maximal number of nodes RRT* can sample, \u03b1 the minimal angle value between two path segments, or r agent radius.\na) Maximal number of RRT* nodes Nmax: Parameter Nmax is essential not only for the computational time of the algorithm, but most importantly for increasing the path quality. The more RRT* is allowed to search the environment, the more it optimises its paths and approaches convergence towards the optimal solution. As running RRT* without a constrained value of Nmax could lead to potentially infinite computational time, it is necessary trade-off the computational time and path quality. Three agents were used in this experiment and their starts and goals were arranged in a star-shaped pattern. 8 values of Nmax are tested, with 10 iterations per value.\nFigure 2 shows results for the sum of costs (y axis) that decreases with increasing max. The scatter between values also decreases with increasing max. These changes become less apparent after Nmax \u2265 5000. The opposite appears to be true for the number of CE-CBS iterations, which means that the number of CE-CBS nodes expanded during the course of the algorithm. The number of CE-CBS iterations as a function of Nmax is shown in Figure 3. As Nmax increases, so does the number of iterations, also with higher scatter. This becomes more apparent with max \u2265 5000, with a large jump in both the values reached and the scatter in Nmax = 7000. Examples of two outputs for two values of Nmax are shown in Figure 6."}, {"title": "VII. DISCUSSION", "content": "The experiments have shown that the model can adapt to several different types of environment and that the parameters of the model can be adjusted to solve a specific scenario. It was shown that of the parameters studied, the parameter of the maximum number of RRT * nodes Nmax had the highest impact on the quality of the solution. The computational time corresponds to the number of CE-CBS iterations, so when more conflicts arise while planning, the computational time is higher, as RRT* is re-planned several times. The computational time is also influenced by max. It was shown that in cases with a higher number of collisions, Nmax can be balanced to some extent, as collisions prune the search space and allow RRT* to search more of the unconstrained part of the environment.\nBased on the results of the experiments, it seems that agents are able to navigate both narrow hallways and spaces where multiple conflicts can occur at once without colliding, while still searching for the shortest path. The agents can move on smooth curves while satisfying various angle constraints and avoiding both other agents and static obstacles."}, {"title": "VIII. CONCLUSION", "content": "The goal of this work was to propose a method for collision-free multi-agent path finding in continuous environment. A Continuous-Environment Conflict-Based Search (CE-CBS) algorithm was proposed, which is based on existing CCBS [Andreychuk et al., 2022] and RRT* [Karaman and Frazzoli, 2011] algorithms while also using a smoothing mechanism. Agents in this model communicate via CE-CBS and plan conflict-free paths. Individual paths are planned using RRT*, which is modified to take CE-CBS constraints and kinematic constraints into the account. The output of this algorithm is then smoothed with B-spline curves.\nFuture work should entail extending the model to contain a wider range of kinematic constraints."}]}