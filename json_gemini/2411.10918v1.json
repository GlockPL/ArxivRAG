{"title": "LLM-assisted Physical Invariant Extraction for Cyber-Physical Systems Anomaly Detection", "authors": ["Danial Abshari", "Chenglong Fu", "Meera Sridhar"], "abstract": "Modern industrial infrastructures rely heavily on Cyber-Physical Systems (CPS), but these are vulnerable to cyber-attacks with potentially catastrophic effects. To reduce these risks, anomaly detection methods based on physical invariants have been developed. However, these methods often require domain-specific expertise to manually define invariants, making them costly and difficult to scale. To address this limitation, we propose a novel approach to extract physical invariants from CPS testbeds for anomaly detection. Our insight is that CPS design documentation often contains semantically rich descriptions of physical procedures, which can profile inter-correlated dynamics among system components. Leveraging the built-in physics and engineering knowledge of recent generative Al models, we aim to automate this traditionally manual process, improving scalability and reducing costs. This work focuses on designing and optimizing a Retrieval-Augmented-Generation (RAG) workflow with a customized prompting system tailored for CPS documentation, enabling accurate extraction of semantic information and inference of physical invariants from complex, multimodal content. Then, rather than directly applying the inferred invariants for anomaly detection, we introduce an innovative statistics-based learning approach that integrates these invariants into the training dataset. This method addresses limitations such as hallucination and concept drift, enhancing the reliability of the model. We evaluate our approach on real-world public CPS security dataset which contains 86 data points and 58 attacking cases. The results show that our approach achieves a high precision of 0.923, accurately detecting anomalies while minimizing false alarms.", "sections": [{"title": "1 Introduction", "content": "Cyber-physical systems are the complex integration of computational resources, physical processes, and network operations. This technology significantly improves the efficiency of the operation of critical infrastructure but also makes them vulnerable to various cyber attacks [9, 37]. To cope with these threats, the Physics-based Anomaly Detection has been proposed to profile a CPS's normal behaviors using statistical or machine learning methods and then detect anomalies when the system behavior deviates from the learned profile. In this detection process, researchers aim to profile the systems' normal behavior in the form of Physical Invariants[25], which refer to the constant system properties and correlations among different sensors and actuators. These physical invariants are constant system properties and correlations between sensors and actuators that are governed by physical laws and environmental factors.\nDue to this constant and consistent nature, physical invariants are ideal as a CPS normal behavior, which can be used as a baseline for anomaly detection. Cyber-attacks such as sensor reading forgery and fake commands will inevitably violate the related physical invariants and then be detected. For instance, SAVIOR [25] study the physical invariants among wheel rotation speeds, steering angles, and acceleration, which reflect stable relationships in the AV's dynamics and control. By establishing a baseline model of these invariants, the system can detect anomalies indicative of cyber-physical attacks, like sensor spoofing or control interference.\nAlthough the physical invariants are proved to be very effective in detecting CPS anomalies [10], the process of extracting them is a non-trivial task that requires case-by-case analysis by experts with domain-specific knowledge (e.g., the operation of a water treatment system). Since the architectures and applications of the CPS are highly diverse, it is very difficult to find a systematic way to discover and extract physical invariants from heterogeneous CPS deployments. This significantly limits the scalability and usability of physical invariant-based anomaly detection. While some studies, such as Feng et al. [7], use statistical methods to find correlations among device data, they overlook the semantic meaning of devices and physical processes. Without the guidence of domain-specific knowledge, these methods need to binarize numeric data to reduce the search space, resulting in coarse-grained invariants that attackers may circumvent.\nIn this work, we aims to automate the extraction of physical invariants for CPS anomaly detection. Our insight is that the documentation accompanying CPS deployments typically includes text, tables, and diagrams that illustrate the constituent and components and physical interactions among them. This semantic information is highly valuable for assisting in the extraction of physical invariants, yet it has largely been overlooked by existing anomaly detection solutions. Based on the insight, we propose to automate the extraction of physical invariants by leveraging the power of pretrained large language models (LLMs) such as ChatGPT[23] and Claude[3].\nOur approach involves two key steps. First, we design a Retrieval-Augmented Generation workflow tailored to CPS documentation and utilize Chain-of-Thought (CoT) prompts to extract hypothetical physical invariants. Next, we develop a simple yet effective algorithm to validate these invariants on training datasets, using the accepted ones for anomaly detection. Rather than applying the learned invariants directly, our algorithm employs a sliding window-based regression approach. When the sliding window spans both benign and attack data, the differing invariant patterns make it"}, {"title": "2 Background", "content": "2.1 Cyber Physical Systems\nIndustrial Control Systems (ICS) are critical components in the operation of vital infrastructure such as water treatment plants, power grids, and gas pipelines. These systems integrate both hardware and software to monitor and control industrial processes. Traditionally, ICS were designed as isolated systems, often referred to as \"air-gapped,\" meaning they were not connected to external networks, particularly the internet [14]. However, the drive for operational efficiency has led to the integration of modern Information and Communication Technologies (ICT), transforming ICS into interconnected cyber-physical systems[21]. While this integration has brought significant operational benefits, it has also introduced substantial security vulnerabilities. The risks associated with ICS are particularly severe because a successful cyber-attack could result in considerable physical damage, environmental harm, and even loss of life. The potential impact of such vulnerabilities has been demonstrated by incidents like the Stuxnet attack on Iran's nuclear facility and the 2014 attack on a German steel mill, both of which caused extensive physical damage[11, 12, 19, 29].\n2.2 Invariant-based Anomaly Detection\nOne of the most promising approaches within process-based detection is invariant-based anomaly detection. Invariants are physical conditions or relationships among process variables that must always hold true for a system to operate normally. These invariants are derived from the physical laws governing the system's processes [31]. For example, in a water distribution or treatment system, the relationship between the water level in a tank and the flow rates through the inlet and outlet valves must adhere to specific physical laws, as measured by sensors. Any violation of these invariant rules is a strong indicator of an anomaly, potentially caused by a fault or an attack.\nTraditionally, these invariant rules have been manually defined by system engineers during the design phase of the ICS. However, this manual process is time-consuming, error-prone, and may fail to capture all relevant invariants, especially in complex systems. To address these limitations, recent advancements have focused on automating the generation of invariant rules from system data logs. These data-driven approaches can systematically identify a more comprehensive set of invariants, which significantly enhances the accuracy and coverage of anomaly detection in ICS[7].\n2.3 Large Language Models\nLarge Language Models (LLMs) are advanced machine learning models that have been trained on vast amounts of text data to understand and generate human language. These models, such as GPT and its variants, have shown remarkable capabilities in tasks involving natural language processing (NLP), including text summarization, translation, and question answering. In the context of ICS and anomaly detection, LLMs can be employed to automate the extraction of physical invariants from system documentation and data logs. The reasoning capabilities of LLMs allow them to understand complex technical documentation, infer the underlying physical laws, and generate potential invariants. This approach not only automates the traditionally manual process of invariant extraction but also has the potential to discover hidden or complex invariants that may be missed by human engineers. By leveraging LLMs, we aim to enhance the scalability and effectiveness of anomaly detection systems in cyber-physical systems."}, {"title": "3 System and Threat Model", "content": "3.1 System Model\nIn this work, we consider a typical cyber-physical system (CPS) deployment involving physical processes such as water transfer, chemical dispensing, and heat exchange. Control logic resides in controller devices, which issue commands to actuators based on sensor data. All devices periodically report their status to the supervisory control and data acquisition (SCADA) system, where logs are maintained for analysis.\nConsidering the complexity and scale of typical cyber physical systems, the Model-based Design (MBD) paradigm is commonly applied for designing and building CPS systems. In MBD, the design documentation is crucial for the development and maintenance of cyber-physical systems (CPS) due to the intricate integration of computational algorithms and physical components these systems entail. Such documentation ensures that the diverse team of engineers, from software developers to mechanical and electrical engineers, share a common understanding of the system's design goals, functionality, and constraints.\nThe content of design documentation for a CPS typically includes several key components. Firstly, a system architecture diagram that visually represents the system's components and their interconnections. Secondly, detailed specifications of each component, including both the physical devices (sensors, actuators, etc.) and the software modules (algorithms, data processing units, etc.). Thirdly, interface descriptions that detail how the components communicate and interact with each other are vital for the integration of heterogeneous elements into a cohesive system. Lastly, operational protocols and user manuals help in understanding how the system is intended to operate under various conditions and how users can interact with it efficiently.\n3.2 Threat Model\nWe consider a cyber-physical system (CPS) comprising interconnected sensors, actuators, controllers, and communication networks that rely on real-time data for operational decisions. We assume attackers to be active attackers that has the goal to induce dangerous physical actions leading to safety hazards, equipment damage, or service disruptions. We assume they have partial or full knowledge of the system's physical and control models, and capable of compromising one or more components such as sensors, actuators, or communication links. The attackers can achieve their goals by manipulating sensor data through false data injection or replay attacks, tampering with actuator commands, hijacking controllers to alter control logic, and exploiting communication channels. We assume attackers cannot compromise all devices in a CPS deployment, as vulnerabilities are typically device-specific-a common assumption in CPS anomaly detection research. Passive attackers who only eavesdrop on network communications for stealing information are out of scope for this work."}, {"title": "4 Design of AnomalyLLM", "content": "In this section, we present the detailed design of AnomalyLLM. Our system aims to detect anomalous data points in cyber-physical systems (CPS) deployments by leveraging the power of pre-trained large language models (LLMs). Instead of directly feeding CPS data points to LLMs, we propose using LLMs to extract physical invariants. This approach maximizes the advantages of LLMs in semantic reasoning and inferencing while avoiding limitations related to context window size and hallucination. We will first provide an overview of AnomalyLLM's workflow using an example and then illustrate the detailed design for each phase.\n4.1 Overview of AnomalyLLM Workflow and Challenges\nThe workflow of AnomalyLLM includes three main phases: 1) Invariants Extraction Phase, which identifies potential physical invariants from CPS specification documentation using LLM-powered intelligent agents; 2) Invariants Verification Phase, which validates the hypothetical invariants generated in the first phase using training datasets to exclude those deviating from the ground truth; 3) Anomaly Detection Phase, which applies the verified invariants to real-time data streams from the CPS deployment and reports data points that violate these invariants as anomalies. We use the example of the level control process of the HAI dataset[28], as described in the Introduction, to illustrate the workflow.\nIn the first phase, LLMs infer possible physical invariants based on testbed specification documents provided by CPS developers. For example, the HAI testbed includes four major physical processes: Boiler Process, Turbine Process, Water-treatment Process, and Hardware-in-the-loop Simulator. The developers clearly define the functions, specifications, and connections of hardware components in the first three processes. We augment the large language model into an intelligent agent comprising modules for document parsing, retrieval-augmented generation (RAG), and chain-of-thought prompts (CoT). The agent takes the PDF files of testbed specifications as input and automatically produces a list of possible physical invariants with detailed explanations for each. As illustrated in Figure 1, the LLM successfully identifies a physical invariant concerning \"water mass balance,\" which elucidates that the water level (LIT01) is determined by the equilibrium between the inflow rate, controlled by LCV01D, and the outflow rate, modulated by FCV03D. Thus, the rate of change in water level at any given moment is inferable from the positions of the two water valves. The agent further formulates the invariant into the equation $#LIT01(t) = a \\cdot LCV01D(t) + \\beta \\cdot FCV03D(t)$. The undetermined coefficients can be derived using regression with training data points.\nIn the second phase, we validate the correctness of each hypothetical physical invariant generated in the first phase. Our insight is that a physical invariant, if it exists, will remain stable during the data collection period. Specifically, the coefficients in the invariant equations should remain constant when derived using different segments of the training dataset. If the learned pattern changes over short periods, it could result in a high number of false alarms when used for detecting anomalies. To validate hypothetical invariants, we conduct multi-fold cross-validation on the training dataset. We split the dataset into K bins, derive the coefficients from each bin, and apply them to the other bins. A hypothetical invariant is accepted only if the patterns match across all bins. As shown in Figure 1, the values of a and \u03b2 remain constant in the training dataset, which validates the physical invariant.\nFinally, in the third phase, we apply the validated physical invariants to detect anomalous data points in the testing dataset. In the example, the validated physical invariant LIT01(t) = a \u00d7 LCV01D(t) \u2013 \u03b2 \u00d7 FCV03D(t) is applied to the testing dataset difficult to fit a unified regression model, causing a sharp increase in regression error. This method effectively reduces false positives caused by concept drift.\nChallenges: While seemingly promising, there are several prominent challenges in the design and implementation of each phase. 1) There are no regulated formats for CPS documentation, allowing CPS developers to illustrate their designs using various formats such as text descriptions, tables, and diagrams. Without accurately parsing information in these diverse formats, the LLM may not be able to answer questions using the most relevant information. 2) LLMs are well-known to suffer from the issue of hallucination, where LLMs may include fabricated content in the response that is not reasonable and explainable. 3), multiple parameters are involved in the invariants validation and anomaly detection phases, which can significantly affect the performance of the detection results. Identifying a set of parameters that achieve optimal detection performance is a non-trivial task. 4) Although physical invariants are governed by inherent physical laws and procedures, they may also suffer from drifting over time. Constant invariants for anomaly detection will gradually become outdated, deviating from the physical ground truth, and producing more false alarms. In the remainder of this section, we will illustrate the details of AnomalyLLM's design, particularly focusing on how it addresses the aforementioned challenges."}, {"title": "4.2 Physical Invariants Formalization", "content": "In this work, we consider the Residual Error-based physical invariants[7] that can be represented as the quantitive associations among different data points in a CPS deployment. The first step in this phase involves identifying physical invariants using LLMs. Physical invariants are consistent relationships that hold under normal operating conditions of the CPS. These invariants can be expressed as equations involving multiple variables, coefficients, and functions, and are essential for understanding the system's normal behavior.\nPhysical invariants are mathematical expressions that represent the constant relationships between various state variables of a system under normal operating conditions. These invariants help understand the system's standard operational behavior. The general form of the invariants can be represented as:\nA.X = B\nwhere A is a matrix of coefficients, X is a vector of state variables, and B is a vector of constants."}, {"title": "4.3 Physical Invariant Extraction Phase", "content": "In this phase, we aim to develop an LLM-powered intelligent agent that can reliably and accurately infer possible physical invariants from the documentation of CPS deployments.\nAlthough a Large Language Model (LLM) is extensively trained with high-quality materials and is versatile in answering questions across various fields, deploying it for anomaly detection in Cyber-Physical Systems (CPS) faces significant challenges. The primary issue is that there is no generally applicable schema for CPS specification documents, which are often unstructured with technical details scattered across various formats. For instance, the relationships among valves and sensors are described through multiple diagrams, tables, and textual descriptions, complicating the extraction of accurate information. Furthermore, the output of LLMs can be sensitive to the composition of prompts and context data, which makes it difficult to generate stable and accurate results for physical invariants. Lastly, although LLMs can generate descriptions of physical invariants in natural language, the validation and application of these invariants require formalized inputs. To overcome the challenges of the unstructured documents format and LLM hallucination, we propose the enhancement of multi-modal RAG and dedicated chain-of-thought prompt template.\n4.3.1 Multi-modal RAG. Retrieval Augmented Generation (RAG) is a popular machine learning framework designed to enhance the capabilities of LLMs by incorporating external information retrieval into the question and answering processes. It usually includes the steps of input parsing, knowledge embedding, and content retrieval.\nIn the first step, we utilize the Unstructured [1] library to parse the input documentation files into collections of text chunks, images, and tables. Then, we are working on embedding the parsed elements into vectors for establishing the RAG vector store. Although there are existing multi-modal embedding models such as CLIP [26], they cannot fit our requirement as the diagrams in CPS specifications are much more complex than common images that could contain subtle or implicit information (e.g., text labels, the relative locations and arrow connections among blocks). Existing multi-modal embedding models may omit many details in diagrams and result in inaccurate generation results. To overcome this issue, we first call the vision-enabled LLMs (e.g., GPT-4v [24]) to transcribe the content in diagrams into textual descriptions and embed the description along with other textual chunks into the knowledge base.\nIn the retrieval phase, we customize the Facebook AI Similarity Search (FAISS) [4] by adding our own retriever. To reduce the probability of omitting important information, our retriever will retrieve both the summary and the original information (i.e., tables and diagrams). For example, once the summary of a control flow diagram is found to be relevant to the query, both the summary and the corresponding will be returned.\n4.3.2 Tree-of-thought prompting. Unlike programs that give consistent and auditable results, responses of LLMs are sensitive to the phrasing of prompts and could give general and unuseful answers. To make sure the LLM can produce physical invariants accurately and comprehensively, we design the dedicated chain-of-thought prompt template that consists of the following steps:\nBy following the aforementioned approach, we identified 23 hypothetical physical invariants from the HAI testbed. Due to the page limit, we will primarily discuss the result of the physical invariant involving the water tank 3 (TK03). From the testbed specification, we learn that the water tank has one inlet pipe and one outlet pipe that is controlled by the water valve LCV01 and FCV03, respectively, and there is a water level sensor LIT01 that continuous measures the water level in the tank. The valves are controlled by Programmable Logic Controllers (PLCs) and by their percentage position according to PLCs' commands. The final response to question 4 gives us the hypothetical invariant among the three devices: the water level's"}, {"title": "4.4 Hypo-invariant Validation", "content": "In this phase, we validate the hypothetical invariants generated during the invariant extraction process to ensure that the proposed relationships among sensor data are accurate and reliable. The hypothetical invariants were initially derived using a large language model, which may not always yield entirely accurate relationships. To validate these invariants, we began with an empirical study. We plotted the data from key sensors, such as the water level sensor LIT01 and two valve sensors LCV01 and FCV03, and visually analyzed how the sensor readings changed over time. We focused particularly on moments when significant changes occurred in the water level, as captured by LIT01. To better understand the dynamics, we calculated the time derivative of the water level sensor's readings. The derivative allowed us to capture how quickly changes were happening, focusing on moments of significant activity while ignoring stable periods that were likely influenced by noise.\nTo validate the hypothetical invariants, we used the sum of squared residuals (SSR) to analyze the relationships among the three key sensors. Specifically, we aimed to determine if the relationships we hypothesized were consistent throughout the dataset. We identified the independent variables, represented as X, and the dependent variable, represented as Y. We then applied a regression model to estimate how the independent variables influenced the dependent variable and calculated the SSR for each segment to measure how well the observed data fit the hypothetical relationship."}, {"title": "4.5 Anomaly Detection Phase", "content": "The anomaly detection phase systematically identifies unexpected behaviors in sensor readings based on validated hypothetical invariants. This phase is designed to detect deviations that could indicate faults, errors, or possible malicious activities within the system.\nAs shown in Figure 2, the blue areas represent real attacks as detected in the HAI dataset, while the pink areas indicate the anomalies detected by our method using a single invariant. In this example, using only one invariant, we successfully identified several anomalies overlapping with real attacks, illustrating the method's effectiveness even with a limited number of invariants. We anticipate that increasing the number of invariants will enhance detection capabilities, thereby improving the robustness of the system.\nThe anomaly detection process begins by applying validated invariants to sensor data, both historical and real-time. Initially, the data is divided into overlapping windows of fixed duration, allowing distinct periods of system behavior to be analyzed. Within each window, the relationships among sensors, as defined by the invariants, are tested through linear regression. For each window, a specific sensor is designated as the dependent variable Y, with other relevant sensors serving as independent variables X. Using this configuration, the regression model generates predicted values for Y, enabling a comparison with the actual sensor readings.\nThe next step involves calculating the Sum of Squared Residuals (SSR), which quantifies the error between predicted and actual values of the dependent variable. The SSR is calculated as follows:\n$SSR = \\sum_{i=1}^{n} (Y_i - \\hat{Y_i})^2$\nwhere $Y_i$ is the observed value of the dependent variable at observation i, $\\hat{Y_i}$ is the predicted value from the regression model at observation i, and n is the number of observations in the window. A low SSR value indicates alignment between predicted and observed values, suggesting normal system behavior, while a high SSR value signifies a deviation, pointing to a potential anomaly.\nTo contextualize the SSR values, we normalize them using Z-score normalization. This allows us to assess the extremeness of each SSR value relative to the entire set of windows. The Z-score is calculated as follows:\n$Z = \\frac{(SSR - \\mu)}{\\sigma}$\nwhere SSR is the sum of squared residuals for a given window, \u03bc is the mean SSR across all windows, and \u03c3 is the standard deviation of SSR values. Windows with a Z-score above a threshold of 3 are considered anomalous, ensuring that only significant deviations are flagged and reducing the likelihood of false positives.\nFollowing anomaly identification, adjacent anomalous windows are merged to form larger segments, as anomalies often span multiple consecutive windows. Merging provides a more accurate representation of the system's behavior, preventing prolonged anomalies from being split into multiple smaller, misleading events.\nIn addition to these steps, the window size is adjusted based on a threshold for false positives. We establish a criterion whereby each invariant must yield no more than 2 false positives on average per training file. Given that false positives typically decrease as window size increases, we select the smallest window size that satisfies this criterion. If no suitable window size exists, the invariant is excluded from analysis, ensuring that only reliable invariants contribute to the anomaly detection phase.\nThis phase combines regression analysis for establishing sensor relationships, SSR for measuring deviations, Z-score normalization for identifying significant outliers, and a systematic window size selection process. Together, these elements enable robust anomaly detection, providing a clear and comprehensive understanding of deviations that enhances the reliability and safety of the monitored system."}, {"title": "5 Evaluation", "content": "In this section, we describe the specific evaluation conducted using our method outlined above, including the details of the datasets and the specific invariants used.\n5.1 Evaluation Setup\nThe HAI dataset is a publicly available resource designed for studying anomaly detection in industrial control systems (ICS). It provides data collected from a simulated environment that mimics a real-world ICS, specifically a water treatment facility. This environment includes various sensors, actuators, and controllers that work together to monitor and manage processes like water levels, flow rates, and pressures. The HAI dataset is available in four different versions, covering data from 2019 to 2022. Each version of the dataset includes two main types of files: training files and test files.\nThe training files contain data that represents the normal behavior of the system, while the test files include data from periods when the system was under attack. This setup allows researchers to train their models on normal data and then test how well these models can detect anomalies, which may indicate cyber-attacks. One of the strengths of the HAI dataset is that it includes labeled data for these attacks, making it easier to evaluate how well anomaly detection systems can distinguish between normal operations and malicious activities. By using this dataset, researchers can develop and test algorithms that recognize normal patterns in the ICS and identify when something unusual or potentially harmful is happening."}, {"title": "5.2 Invariant Extraction", "content": "In our study, we used several important variables to help monitor and control the water system. These variables are mostly about measuring and controlling the flow, level, and pressure of water in the tanks and pipes. For example, the Level Indicator Transmitter (LIT01) shows the water level in the return water tank (TK03). This helps us keep the water level where it needs to be. Another important variable is the Level Control Valve (LCV01D), which controls how much water flows into the tank to keep the water level steady. These variables, along with others like the flow control valves (such as FCV03D, which controls the rate at which water leaves the tank) and pressure control valves (like PCV01D, which maintains the pressure in the system), are essential for making sure everything runs smoothly and safely. By understanding these variables, we can better detect any problems and ensure the system works reliably.\nThe following invariants are identified in our study as the outputs of the LLM:"}, {"title": "5.3 Detection Result", "content": "This section provides the results of detecting anomalies using a statistical method based on regression errors. Our goal was to identify deviations from normal system behavior, which may indicate anomalies, faults, or possible attacks. The results show the effectiveness of our method.\nWe used 9 invariants, which represent expected relationships among sensor readings under normal conditions. Each invariant can detect at least one type of anomaly or attack. This initial set of 9 invariants provides a strong foundation for identifying various abnormal behaviors in the system. We believe that adding more invariants would increase the detection capability, allowing the system to identify a wider range of attacks.\nFor detection, we divided the time-series data into overlapping windows of fixed lengths, such as 20, 30, or 45 minutes. Within each window, we applied linear regression to test the relationships defined by the invariants. For example, if we consider a water level sensor (LIT01) and two valve sensors (LCV01 and FCV03), we use the water level as the dependent variable Y and the valve sensors as independent variables X. Using linear regression, we predict values for Y based on X, and calculate the sum of squared residuals (SSR) to measure deviations. A low SSR suggests normal behavior, while a high SSR indicates a possible anomaly.\nTo detect anomalies, we normalized the SSR values using Z-score normalization, as described in Section 4. Any Z-score above 3 was flagged as anomalous. During experiments, several windows had Z-scores greater than 3, showing significant deviations from normal behavior.\nAfter identifying anomalous windows, we merged adjacent windows with high Z-scores to create larger segments representing continuous anomalies. This merging step avoids splitting long-lasting anomalies into smaller detections. For instance, a valve malfunction across multiple windows would be detected as a single anomaly rather than multiple separate ones.\nWe applied our methodology over four test timelines with the following results:\n\u2022 Test 1: True Positives (TP) = 3, False Positives (FP) = 1, False Negatives (FN) = 4\n\u2022 Test 2: TP = 4, FP = 0, FN = 13\n\u2022 Test 3: TP = 4, FP = 0, FN = 6\n\u2022 Test 4: TP = 13, FP = 1, FN = 11\nOverall, we achieved a total of 24 true positives, 2 false positives, and 34 false negatives across all test timelines. Using these results, we calculate the Precision as follows:\nPrecision = $\\frac{True Positives}{True Positives + False Positives} = \\frac{24}{24+2} = 0.923$\nThe precision score of 0.923 demonstrates that our method is highly effective in correctly identifying anomalies while minimizing false positives."}, {"title": "6 Related Works", "content": "6.1 Anomaly Detection using Physical Invariants\nAnomaly detection in Cyber-Physical Systems (CPS) often utilizes physical invariants-relationships or conditions derived from the system's governing physical laws that indicate proper functioning. These invariants serve as a baseline for identifying anomalies signaling faults or cyber-attacks. One approach applied unsupervised machine learning to detect anomalies in electrical substations by inferring physical invariants from data rather than explicitly encoding laws like Kirchhoff's, demonstrating flexibility in recognizing system states [31]. Similarly, a log-based anomaly detection method using the Local Outlier Factor (LOF) algorithm identified control system failures in an aquarium management system, leveraging physical invariants in log data [13]. In smart grids, the IREST sensor combined cyber and physical features to detect anomalies, validated using the ISAAC testbed to differentiate between cyber and physical disturbances [21]. A Spatiotemporal Graphical Model captured dependencies in CPS data, incorporating physical invariants to detect subtle anomalies across distributed systems [34]. Another study used unsupervised learning to model normal operational patterns and detect anomalies in smart grids, emphasizing the role of physical invariants in security [16]. A survey on smart grid security underscored the importance of physical invariants for stability, discussing machine learning and blockchain as tools to enhance anomaly detection [41]. In smart water infrastructure, a machine learning framework combined physical rules with anomaly detection techniques, demonstrating effective identification of cyber and physical threats [15]. A spatiotemporal model for distributed CPS improved anomaly detection by understanding the physical laws governing the systems [18]. In advanced driver assistance systems, integrating deep learning with physical invariants enhanced detection accuracy and reduced false positives [33]. A hybrid approach combined statistical methods and machine learning, explicitly incorporating physical invariants to detect anomalies in complex industrial processes [12]. Few-shot learning with a Siamese Neural Network leveraged physical invariants for better generalization in industrial CPS with limited data [39]. RNNs for anomaly detection in CPS improved accuracy across various conditions by integrating invariants [11]. Privacy-preserving frameworks further used physical invariants to enhance detection while safeguarding sensitive information [8, 17, 22, 38].\n6.2 LLM-based Anomaly Detection\nRecent advancements in anomaly detection for Cyber-Physical Systems (CPS) and video surveillance leverage Large Language Models (LLMs). For Video Anomaly Detection (VAD), VLLMs like VAD-LLAMA detect anomalies in surveillance footage and provide textual explanations, improving upon traditional methods [20]. In CPS, LLMs automate the extraction of physical invariants, streamlining anomaly detection and reducing manual effort [5]. This technique has been extended to Industrial Control Systems (ICS) for scalable monitoring with minimal domain expertise [2, 32]. In smart grids, combining LLMs with statistical analysis improves real-time anomaly detection by integrating historical data with sensor inputs [27, 40]. Additionally, LLMs simplify invariant extraction, enhancing usability for large-scale deployments [30]. LLMs such as GPT-4 enhance CPS resilience and adaptability. A proposed framework addresses challenges like context grounding and formal verification for reliable LLM deployment in deterministic environments [36]. The concept of \"Penetrative AI\" shows LLMs interpreting IoT"}, {"title": "7 Conclusion", "content": "In this work, we explored the potential application of large language models for CPS anomaly detection. We presented a novel method to automate the extraction of physical invariants for anomaly detection in cyber-physical systems (CPS) by leveraging large language models (LLMs). By utilizing semantic information from CPS documentation, which is often overlooked in existing solutions, we developed a Retrieval-Augmented Generation workflow and a validation algorithm that enhance scalability and accuracy in anomaly detection and design a novel algorithm that effectively combines the semantic information with data-driven approaches. Our proof-of-concept experiments on the HAI Security dataset demonstrate the feasibility of this approach, paving the way for more robust and automated anomaly detection in diverse CPS environments."}]}