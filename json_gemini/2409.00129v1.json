{"title": "Estimating the number of reachable positions in Minishogi", "authors": ["SOTARO ISHII", "TETSURO TANAKA"], "abstract": "To investigate the feasibility of solving Minishogi (Gogo Shogi) strongly, we need to know the number of its reachable positions from the initial position. However, there currently remains a significant gap between the lower and upper bounds of the value, since checking the legality of a Minishogi position is difficult. In this paper, we estimated the number of reachable positions by generating candidate positions using uniform random sampling and measuring the proportion of those reachable by a series of legal moves from the initial position. The experimental results revealed that the number of reachable Minishogi positions is approximately 2.38 \u00d7 1018.", "sections": [{"title": "1. Introduction", "content": "Among board games, Shogi, Chess, or Go are theoretically classified as two-player, zero-sum, finite, deterministic, perfect information games. In these games, the game value (win, loss, or draw) can be determined for every possible position. The levels of solving games are classified into the following three categories [2].\n\u2022 Ultra-weakly solved: The game value of the initial position is known, but the best moves are not.\n\u2022 Weakly solved: The game value of the initial position is known, and the best moves are also known for the positions necessary to calculate the value of the initial position.\n\u2022 Strongly solved: The game value and the best moves are known for all positions reachable from the initial position.\nStrongly solving a game can be achieved either by enumerating all positions reachable from the initial position or by performing retrograde analysis that searches from the terminal positions back to the initial position. However, these methods are not applicable to large-scale games in practice. Therefore, it is essential to understand the scale of a game when considering the feasibility of a strong solution. One important metric for assessing the \"scale\" is the number of positions reachable from the initial position, known as the \"state-space complexity\" of the game [2] (referred to as \"the number of reachable positions\" in this study).\nPrevious studies on the number of reachable positions in various games typically used approaches that either precisely calculate the number of board configurations or strictly evaluate the upper and lower bounds. In contrast, we applied a statistical estimation method to approximate the number of reachable positions in Minishogi. Specifically, following prior research in chess, we generated a large number of candidate positions (hereafter referred to as \"pseudo-legal positions\") using random numbers and applied an algorithm that determines the reachability from the initial position through legal moves in reverse order to estimate the number of reachable positions.\nBy leveraging the feature of Minishogi, where pieces can be dropped onto the board, we efficiently determined the reachability by performing a best-first search with a heuristic function, targeting positions where the Manhattan distance between both kings is more than two."}, {"title": "2. Minishogi", "content": "Minishogi (Gogo Shogi) is a variant of Shogi played on a 5x5 grid, which is smaller than standard Shogi. It was invented by Shigenobu Kusumoto in 1970, and the game starts from the initial position shown in Fig. 1, with players alternating moves [11]. The goal of the game, as in standard Shogi, is to checkmate the opponent's king. The rules of Minishogi generally adhere to those of standard Shogi, with differences in board size and the number of pieces used, as follows:\n\u2022 The game uses six types of pieces: King (\u7389), Gold (\u91d1), Silver (\u9280), Bishop (\u89d2), Rook (\u98db), and Pawn (\u6b69).\n\u2022 Captured enemy pieces become part of the player's own pieces (in-hand pieces) and can be dropped onto any vacant square on the board, provided no foul move is committed.\n\u2022 Silver, Bishop, Rook, and Pawn can promote to Promoted Silver (\u5168), Horse (\u99ac), Dragon (\u7adc), and Promoted Pawn (\u3068), respectively, when they enter, leave or move within the enemy camp. However, they can't be promoted when they are dropped.\n\u2022 When the condition for promotion is met, the player can choose whether to promote the piece or not. However, if the piece would become immobile by not promoting, promotion is mandatory.\n\u2022 The following moves are fouls:\nTwo Pawns: Having two or more of the player's Pawns on the same file.\nImmobile Piece: Creating a situation where a piece cannot be moved at all until the end of the game.\nDrop Pawn Mate: Dropping a Pawn to checkmate the opponent's King.\nIgnoring a check on the player's own King.\nAdditionally, in actual games, it is common to add a rule that \"repetitions (Sennichite) result in a win for the second player\" to encourage the first player to avoid such situations actively [5].\nIn recent years, research on Minishogi has progressed with the development of strong Als such as Shioda et al. [8], leading to the proof of a win for the second player in some initial moves [5]. Due to these developments, Minishogi is expected to be weakly solved in the near future, but the feasibility of the strong solution has not yet been concretely discussed. One reason for this is that the exact number of reachable positions in Minishogi remains unknown. Previous research [4] has shown that the number lies between 4.59 \u00d7 1012 and 1.95 \u00d7 1019, but this range is too large to determine the feasibility of a strong solution. This study aims to estimate the number of reachable positions in Minishogi directly and evaluate the feasibility of a strong solution.\nIn this study, a position is defined as a combination of the board configuration, in-hand pieces, and the player's turn. But the history of moves from the initial position or the number of consecutive checks is not considered. If the goal of the strong solution is to determine the outcome after any legal sequence of moves from the initial position, then the outcome might differ depending on whether a position has appeared once or three times. However, if the goal is to determine the outcome without any position appearing more than once from the initial position, then this definition is sufficient.\nFurthermore, to consider positions in the second player's turn, it is sufficient to flip the board of a position in the first player's turn by 180 degrees. Therefore, we restricted the player's turn to the first player. Although it might seem appropriate to treat positions with and without repetition differently when the goal is to determine the outcome without considering draws under the current Sennichite rule, it is not problematic since a strong solution with a three-valued game result (win, loss, draw) under the Sennichite draw rule can be extended to handle cases without considering draws.\nAdditionally, all piece movements in Minishogi are horizontally symmetrical, so we treated horizontally flipped positions as identical. Note that previous studies [4,7] have defined a position as a combination of the board configuration, in-hand pieces, and the player's turn, treating positions that are vertically flipped as identical but distinguishing horizontally flipped positions. Following this definition, the estimated number of reachable positions in this study is approximately half of those in previous studies. Additionally, depending on the game's rules, the reachability from the initial position may differ in horizontally flipped positions. However, in Minishogi, the position obtained by horizontally flipping the initial position is reachable from the initial position. This fact indicates that if a position is reachable from the initial position, the horizontally flipped position is also reachable."}, {"title": "3. Related Research", "content": "In this section, we introduce previous research on estimating the number of reachable positions in various games. Allis [1,2] has estimated the number of reachable positions in games like Connect Four and Tic-Tac-Toe. Since these are games where the pieces placed do not move or get removed, the number of reachable positions can be easily determined by exploring from the initial position or calculating the number of board configurations.\nIn Chess, Shannon [6] provided a famous estimate of 1042, and Chinchalkar [3] calculated an upper bound of 1.78 \u00d7 1046.\nIn Shogi, Shinoda [7] estimated the number of reachable positions in Shogi to be between 4.65 \u00d7 1062 and 9.14 \u00d7 1069 by counting positions that do not violate the rules. Miyako et al. [4] improved this evaluation and derived a range of 2.45 \u00d7 1064 to 6.78 x 1069, and also calculated the upper and lower bounds of the number of positions in Minishogi using the same method.\nSome previous studies determined the number of reachable positions using different approaches. Takeda et al. [9] constructed a minimal perfect hash function for \"Nine Men's Morris\"-type stone-capturing games and calculated their number of reachable positions. Tromp [10] proposed a method of statistically estimating the number of reachable positions by generating a large number of pseudo-legal positions randomly and counting the ones that are reachable from the initial position. Besides, Tromp applied this method to chess, estimating the number of reachable positions to be (4.82\u00b10.03) \u00d7 1044 based on the sampling of 2 million positions [10]. Our study can be considered an application of Tromp's method to Minishogi."}, {"title": "4. Sampling based Estimation", "content": "This section describes the method for estimating the number of reachable positions in Minishogi. In games like Connect Four, Tic-Tac-Toe, or Go, it is relatively easy to determine the number of reachable positions as the number of legal board configurations, as there are fewer constraints on the legality of moves. However, in chess-like games, including Shogi, accurately counting board configurations that are \"reachable only through legal moves from the initial position\" is not obvious.\nIn Dobutsu Shogi, another simplified variant of Shogi, the game is decided by capturing the king. However in Minishogi, the game is decided when there are no legal moves to escape a check, similar to standard Shogi, which makes determining reachability from the initial position more difficult.\nFirst, we counted the candidate set Sall containing all reachable positions and assigned a unique rank between 0 and |Sall|-1 to each element of Sall. Then we randomly extracted a sufficient number of positions from Sall with equal probability and estimated the probability p by checking whether these positions are reachable or not. Finally we estimated the expected number of reachable positions as p. Sall.\nTromp [10] and we both estimate the number of states from random sampling of pseudo-legal positions, but our study differs in that it determines the legality of a position based on its reachability to a specific position."}, {"title": "4.1 Generation of Candidate Positions Set", "content": "The elements of Sall are positions that meet the following conditions:\n\u2022 Fix the player's turn to the first player, and do not generate positions in the second player's turn.\n\u2022 Restrict the location of the first player's king to files a-c. When the first player's king is in file c, restrict the second player's king to files a-c.*1\n\u2022 Place the pieces on the board without any constraints on the empty squares.\nThe generation procedure is as follows:\n(1) Enumerate all possible patterns for each piece except the king (Gold, Silver, Bishop, Rook, Pawn) for how many of each piece can exist on the board and in the hand (without distinguishing between the players) (Promoted pieces are treated as identical to the unpromoted pieces).\nThe pattern generated here is represented as a tuple (hc, bc), where he denotes a list specifying the quantity and type of pieces in players' hands, and bc represents a list detailing the quantity and type of pieces on the board. An example of such a tuple could be [(Gold, 1), (Pawn, 1)] for hc, [(Gold, 1), (Pawn, 1), (Silver, 2), (Rook, 2), (Bishop, 2)] for bc. This pattern represents the following situation:\n\u2022 Pieces off the board (without distinguishing between players) are one Gold and one Pawn.\n\u2022 Pieces on the board are one Gold, one Pawn, two Silvers, two Rooks, and two Bishops.\n(2) For the patterns generated in 1, calculate the total number of possible positions Ne corresponding to each pattern c using the functions C and count2N described below.\n(3) Generate positions based on the information (c, Nc) and rank them using the value of Nc.\nThe total number of ways to place v pieces of type p on nempty empty squares on the board is given by the following function C(p, nempty, v):\n*1 This restriction aims to reduce the generation of positions that are identical when flipped horizontally."}, {"title": null, "content": "Here,\n\nC(p, Nempty, v) = \\sum_{p_0=0}^{v.1(p)} \\sum_{p_1=0}^{(v-p_0).1(p)} \\binom{N_{empty}}{p_0} \\binom{N_{empty} - p_0}{p_1} \\binom{N_{empty} - p_0 - p_1}{v - p_0 - p_1} \\binom{v}{p_0} \\binom{p_0}{p_1}\n\n\n\u2022 po, po: The number of promoted and unpromoted pieces of the first player\n\u2022 p1: The number of promoted pieces of the second player\n\u2022 1(p) = \n    1 (If p\u2208 {Silver, Rook, Bishop, Pawn})\n    0 (If p\u2208 {King, Gold})\n\nUsing this function C(p, nempty, v), the function count2N (Algorithm 1) calculates the total number Nc of positions corresponding to the combination c = (hc, bc). The sum of the calculated Nc values for each e gives the total number of candidate positions Sall."}, {"title": null, "content": "Algorithm 1 count2N\nInput: Tuple c = (hc, bc)\nOutput: Ne: Total number of positions\n1: Nhc \u2190 1\n2: for all (p, v) \u2208 hc do \u25b7 Calculation of the number of combinations for in-hand pieces\n3:  Nhc \u2190 Nhc \u22c5 (v + 1)\n4: Nbc \u2190 KPOS_COUNT \u25b7 Number of combinations of king positions\n5: Nempty \u2190 5\u00d75-2 \u25b7 Number of empty squares excluding the kings (23 squares)\n6: for all (p, v) \u2208 bc do \u25b7 Calculation of the number of combinations for board pieces\n7:  x \u2190 C(p, Nempty, v)\n8:  Nbc \u2190 Nbc \u22c5 x\n9:  Nempty \u2190 Nempty \u2212 v\n10: return Nhc \u22c5 Nbc"}, {"title": null, "content": "Here, KPOS_COUNT is the number of combinations of king positions, calculated from the number of ranks (rows) H = 5 and files (columns) W = 5 on the board as follows:\n\nKPOS_COUNT = H \\times \\binom{W}{2} + \\binom{H}{2} \\times (W-1)\n+ \\binom{H \\times W + 1}{2} - 1\n= 310\n\nThe first term represents the case where the first player's king is placed in files a-b, and the second term represents the case where the first player's king is placed in file c.\nThe total number of candidate positions in Sall generated by the above procedure is 16, 014, 219, 505, 238, 849, 250 (\u2248 1.6 \u00d7 1019). The integer rank between 0 and |Sall| - 1 and the position (combination of board configuration, in-hand pieces, and player's turn) can be converted to each other. We omit the details of the conversion in this paper."}, {"title": "4.2 Determining the Legality of Generated Positions", "content": "We eliminated illegal positions from Sall, the generated pseudo-legal positions, according to the following steps.\n(1) Eliminate one of the positions that are identical when flipped horizontally, keeping the one with the smaller lexicographic order. In Fig. 2, the upper left position has no order relationship regarding the kings when flipped horizontally, but the first player's Gold is in e3 and it's bigger than its flipped position a3, so the flipped position is smaller.\n(2) Eliminate positions that contain the Two Pawns or an immobile pawn. In the upper right position of Fig. 2, the first player's pawn in b5 is immobile.\n(3) Eliminate positions where the second player's king is in check despite it being the first player's turn. In the lower left position of Fig. 2, the first player's promoted Silver in b2 is checking the second player's king in a2.\n(4) Eliminate positions that cannot be traced back to the initial position. Most positions that fall into this category are those where the first player's king is in double check and cannot be traced back even one move. However, there are also cases like the one in the lower right of Fig. 2, where it is possible to trace back one move but not two (assuming the previous move was the second player dropping a Gold on c4).\nTo detect positions that fall under 4, we define the following heuristic function H(pos) for a position pos.\n\nH(pos) = a \u22c5 \u039d(pos) + b \u22c5 P(pos) + c \u22c5 D(pos) + d \u22c5 K(pos)\n\nHere,\n\u2022 a, b, c, d: Real-valued parameters\n\u2022 N(pos): The number of pieces on the board other than the kings\n\u2022 P(pos): The number of promoted pieces on the board\n\u2022 D(pos): The total number of squares that all promoted pieces are away from the first row of the enemy's camp in terms of vertical distance*2 (If there are no promoted pieces, then 0)\n*2 The more pieces that have returned to the player's camp after promoting in the enemy's camp, the less likely it is that the position is reachable."}, {"title": null, "content": "\u2022 K(pos) =\n    1 (dKINGS \u22642) *3\n    0 (otherwise)\n\nwhere dKINGS is the Manhattan distance between the kings.\nA pos that satisfies H(pos) = 0 is a position where only the two kings are present on the board, and the Manhattan distance between them is more than two (hereafter referred to as \"KK positions\"). KK positions can be reached from the initial position by both players capturing all of the opponent's pieces except for the kings. Also, since a player can transfer his in-hand pieces to the opponent's hand without changing the positions of the kings and the player's turn in KK positions, any position that can trace back to a KK position can also trace back to the initial position through the KK position. In this study, we used the parameters a = 10, b = 10, c = 1, d = 1.\nTo determine the reachability of a position pos, we performed a greedy best-first search using the function prev(pos), which generates the set of legal positions one move before pos (Algorithm 2)."}, {"title": null, "content": "Algorithm 2 can_reach_KK\nInput: Position pos\nOutput: Success or Fail\n1: q \u2190 {pos}\n2: while q is not Empty do\n3:  pos1 \u2190 pos \u2208 q s.t. argmin H(pos)\n4:  q \u2190 q \u2216 {pos1}\n5:  if H (pos1) = 0 then\n6:  return Success\n7:  for all pos2 \u2208 prev(pos1) do\n8:  q \u2190 q \u222a {pos2}\n9: return Fail"}, {"title": null, "content": "When the search diverges, this program could run out of memory and terminate abnormally, but so far, it has produced results in a practical time for all the positions tested."}, {"title": "5. Experiment", "content": "We generated 100,000,000 random numbers without duplication in the range 0 to |Sall| - 1 and its corresponding positions, and counted how many of these positions passed the checks described in the previous section. The program was implemented in Python for an emphasis on readability and rapid prototyping. The calculations were performed in parallel on a 128GB AMD Ryzen Threadripper 2990WX machine over about three days. As a result, 14,849,198 positions were identified as reachable. The number of positions that passed each check is shown in Table 1. Based on these results, the probability p is estimated to be between 0.14842... and 0.14856... with a 95% confidence interval. Using this estimate, the expected number of reachable positions Sok is calculated to be between 2.376... \u00d7 1018 and 2.379... \u00d7 1018. Therefore, the number of reachable Minishogi positions is estimated to be 2.38 \u00d7 1018 with three significant digits.\nFor positions that did not pass the reachability check, the distribution of the maximum number of moves that could be traced back is shown in Table 2. The position that could be traced back the longest, up to 8 moves, is shown in Fig. 3. It is believed that there may be unreachable positions that can be traced back more moves, but determining the maximum number of moves remains unresolved. Whether the search does not diverge is a crucial factor for the applicability of this method to Minishogi. It is thought that Minishogi has the property that \"the search from unreachable positions stops in a small number of moves, and the search from reachable positions proceeds in the direction of the steepest descent of the heuristic function without much backtracking.\""}, {"title": "6. Conclusion and Future Work", "content": "In this study, we estimated the number of reachable positions in Minishogi with high accuracy by creating candidate positions using uniform random numbers and measuring the proportion of those that can be reached through legal moves to the initial position. As a result, we found that the number of reachable positions is between 2.376... \u00d7 1018 and 2.379... \u00d7 1018 with a 95% confidence interval. This result suggests that the number of reachable Minishogi positions is close to the upper bound found in previous research, making it challenging to strongly solve Minishogi using standard computational resources.\nOur method is applicable to other games where it is feasible to efficiently search for reachability between positions and the initial position using an appropriate heuristic function, not limited to Minishogi. The authors are currently applying this method to standard Shogi, and the results obtained are under submission. Our program will be available at https://github.com/u-tokyo-gps-tanaka-lab/minishogi-position-ranking."}]}