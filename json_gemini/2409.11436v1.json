{"title": "ANALYSIS OF FLEXIBLE TRAFFIC CONTROL METHOD IN SDN", "authors": ["Marta Magdalena Szymczyk"], "abstract": "The aim of this paper is to analyze methods of flexible control in SDN networks and to propose\na self-developed solution that will enable intelligent adaptation of SDN controller performance. This work aims\nnot only to review existing solutions, but also to develop an approach that will increase the efficiency and\nadaptability of network management. The project uses a modern type of machine learning, Reinforcement\nLearning, which allows autonomous decisions of a network that learns based on its choices in a dynamically\nchanging environment, which is most similar to the way humans learn. The solution aims not only to improve the\nnetwork's performance, but also its flexibility and real-time adaptability - flexible traffic control.", "sections": [{"title": "1. Introduction", "content": "One of the most advanced solutions that have emerged in response to the challenges of modern\ncomputer networks are Software-Defined Networks (SDN) [1]. They enable efficient management of\nresources and network traffic, a definite advantage in the age of increasingly complex networks\nrequiring dynamic management. By centralizing control and enabling flexible management, SDN offers\nnew opportunities for network optimization. Nevertheless, fully realizing the potential of SDN requires\nthe development of advanced and adaptive control methods.\nThis article focuses on analyzing current methods of flexible control for SDN networks and\npresenting a solution to improve the efficiency and adaptability of network management. The approach\npresented is based on the application of machine learning, specifically the Reinforcement Learning (RL)\n[2]. This technique allows networks to make autonomous decisions based on previous experiences and\ndynamically changing conditions, which is similar to the way humans learn.\nThe goal of the proposed solution is to not only increase network performance, but to improve\nits flexibility and real-time adaptability. The use of reinforcement learning enables dynamic and flexible\ncontrol of network traffic, resulting in more efficient and responsive resource management [3]. The\narticle reviews existing solutions and describes in detail the original approach developed in-its own,\npointing out its potential benefits and implementation possibilities."}, {"title": "2. Project implementing neural network in SDN", "content": null}, {"title": "2.1. General scheme and topology", "content": "The design part of the article presents the possibility of learning a neural network based on\nreinforcement learning, where the neural network searches for an optimal configuration that meets the\nrequirements set for the SDN. The problem of finding the shortest path in the network is presented as\nan example of such an operation. Using the REST API from Floodlight [4], the structure and parameters\nof the network are loaded. Based on this data, a model for learning the neural network was created, then\nthe network was subjected to learning, as a result of which it finds the optimal path in the network set"}, {"title": "2.2. Implementation", "content": null}, {"title": "2.2.1. Network emulation - network configuration in Mininet", "content": "The network topology under test was run using the Mininet tool and a special command in which\nwe specify as parameters that the SDN controller is not running locally, its IP address, the port on which\nthe controller will communicate, the path under which the custom topology can be found, the use of the\ncustom topology \"mytopo\", the use of the \u201cTraffic Control\u201d tool, the bandwidth of the links and the\ndelay on the link."}, {"title": "2.2.2. Data loading and preparation", "content": "Using a custom load-and-prepare script and a REST API, data from the SDN network is\ndownloaded into the neural network environment. The script performs a series of operations to retrieve\nand process the network data managed by the SDN controller. The code efficiently processes the SDN\nnetwork topology data, creates a matrix representation of the connections and identifies key end nodes\nin the network thus preparing the data for neural network operation."}, {"title": "2.2.3. Project and implementation of DQN", "content": "In the project, the environment for machine learning using the GYM [6] library is defined. At\nthe beginning, the correctness of the input data received from SDN and needed for learning the neural\nnetwork is checked and the whole environment is prepared. During the learning process, a record of this\nprocess will be created in the form of memorizing the probabilities of the model's actions. For this\npurpose, a one-dimensional vector is created for the starting node, and then the predicted probabilities\nfor each action are saved to a CSV file after each learning epoch.\nAn important part of the implementation is the \u201ccreate_model\" function defined in the project,\nshown in Fig. 2, which creates a neural network model. Three layers are defined in the model, including\ntwo hidden layers with ReLU activation, and a third output layer with softmax activation, which converts\nthe output to probabilities summing to 1. It uses the Adam optimizer and the loss function\n\"categorical_crossentropy,\" a standard loss function for multiclass classification problems. The\nfunction's arguments are the number of input features, or input dimensions, the number of output classes,\nor output dimensions, and the learning factor for the Adam optimizer, set by default to 0.01. A sequential\nmodel is created to add layers in a linear fashion. The function returns the configured model."}, {"title": "2.2.4. Transfer of results to SDN", "content": "To send back the results of the neural network, an output script is used, which adds static flows\nto the SDN network based on the shortest path between nodes. The data obtained from the neural\nnetwork is translated into the form needed to program (modify the configuration) of the computer\nnetwork and sent to the SDN controller."}, {"title": "2.3. Test topology", "content": "The test case uses the topology shown in Figure 8, which is individually created using a script written\nin Python. The topology was chosen to represent how the proposed algorithm would handle a wide-area\nnetwork problem. An important element in the topology is two main branches with cross-connection.\nTwo hosts were used in the topology, as well as fourteen switches. Two of them were used for host\nconnections, and the other twelve are connected to their nearest neighbors.\nTopology of used SDN:\n\u2022 Number of hosts: 2\n\u2022 Number of switches: 14\n\u2022 Number of network connections: 17\nNeural network parameters:\n\u2022 Number of network layers: 3\n\u2022 Network layers:\n\u039f\nDense with dimension 64 and activation function \"relu\"\n\u039f\nDense with dimension 64 and activation function \"relu\"\n\u039f\nDense with dimension 16 and activation function \u201esoftmax\"\n\u039f\nParameter \u201elearnin rate\" = 0,01"}, {"title": "2.4. Test results", "content": "The graphs shown in Fig. 5 and Tab. 1 show that the number of epochs after which the network\nhas learned is 60."}, {"title": "2.5. Interpretation of test results", "content": "In the case analyzed, the neural network exhibited stable behavior and had a fast learning\nprocess, which can be observed from the fact that it reached a saturation state after several tens of epochs.\nBased on this, it can be concluded that the selected parameters of the neural network were optimal and\ndo not require adjustments. However, for larger sizes of SDN networks, some modifications to the\nparameters may be needed. Analysis of the values of the \u201caction probes\u201d shows that the initial values\nvaried, and as the epochs progressed, the neural network pursued uniform results close to the value of\n1, indicating effective learning and minimization of prediction errors. The results suggest that neural\nnetworks can be an effective tool for predicting and managing traffic in SDN networks. The model can\nbe used for network monitoring, routing optimization and congestion prevention. Because of the model's\nrapid learning, neural networks can be applied in dynamic environments where network conditions can\nchange rapidly. The model can adapt to new traffic patterns, which is crucial for efficient network\nmanagement. Although the research was conducted on a relatively small network, the methods and\nresults suggest that the technique can be scaled to larger and more complex SDNs, paving the way for\nfurther research and implementation in real production environments."}, {"title": "3. Conclusion", "content": "The aim of the study was to develop an in-house solution to intelligently adjust the operation of\nthe SDN controller, which was achieved. The project used reinforcement learning, which allows\nautonomous decision-making by a network that learns from its choices in a dynamically changing\nenvironment, enabling flexible traffic control. The work aimed to improve the network's performance,\nflexibility and adaptability in real time.\nIn the case analyzed, the neural network exhibited stable behavior and had a fast learning\nprocess, which can be observed from the fact that it reached a saturation state after several tens of epochs.\nBased on this, it can be concluded that the selected parameters of the neural network were optimal and\ndo not require adjustments. However, for larger SDNs, some modifications to the parameters may be\nneeded.\nThe application of machine learning in SDN enabled new possibilities for flexible traffic control.\nThe neural network efficiently and effectively found the optimal solution to the problems of given\ntopologies. Machine learning is also applied in SDN to solve new problems not previously considered\nin SDN networks [7], as long as the user is able to define the problem and write it down in the form of\nguidelines for learning the network. The neural network is able to efficiently make SDN modifications\nby analyzing and finding the best solutions with changing requirements and dynamically changing state\nof SDN networks [8].\nFuture work can focus on further adjusting the parameters of neural networks for larger and\nmore complex SDNs to further improve their performance and adaptability [9]. Thus, there is the\npossibility of making the networks even more flexible. The integration of other machine learning\ntechniques into the proposed solution can also be explored to improve its efficiency. In addition, it is\nworth conducting tests in real network environments to verify the practical usability and scalability of\nthe developed system."}]}