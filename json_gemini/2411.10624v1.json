{"title": "Weak Permission is not Well-Founded, Grounded and Stable", "authors": ["Guido Governatori"], "abstract": "We consider the notion of weak permission as the failure to conclude that the opposite obligation. We investigate the issue from the point of non-monotonic reasoning, specifically logic programming and structured argumentation, and we show that it is not possible to capture weak permission in the presence of deontic conflicts under the well-founded, grounded and (sceptical) stable semantics.", "sections": [{"title": "1. Introduction", "content": "Deontic Logic is the branch of logic that investigates the logical behaviour of obligations, permissions, prohibitions and related notions. Most Deontic Logics take obligation as primitive and leave the others as derived from obligations. On the other hand, normative reasoning/legal theory identifies two different notions of permission: Strong Permission and Weak Permission. While the definitions of the types of permission vary, and other notions of permission have been proposed (for a discussion on the topic, see Hansson (2013)), often strong permission is taken as a derogation to a prohibition or the obligation to the contrary, and we have a weak permission when we fail to obtain the obligation of the contrary.\nAnother way to look at the issue is whether there are norms that explicitly permit something. If there are and the norms are effective, then we obtain an explicit (strong) permission.\nThus, we have a weak permission if no norms make the opposite obligatory. But what about if there are norms for the opposite that are not effective? Here we have two cases. The first case is when there is a norm for the opposite, but the norm is not applicable (namely, the conditions to apply the norm do not hold). Effectively, we can treat this situation as one without norms. The second case is when there are norms for the obligation of the opposite, but these norms conflict with some other norms for the conclusion. So, the basic situation here is that we have a norm for $obl(a)$ (a is obligatory) and a second norm for $obl(\\neg a)$ (a is forbidden, or $\\neg a$ is obligatory), and there is no prima facie mechanism to solve the conflict. There are a few options. The"}, {"title": "Example 1.", "content": "In 2019, the Sea Watch 3, an NGO vessel, was on a mission to rescue migrants in the Mediterranean Sea. However, the Italian Government issued a decree that banned the Sea Watch 3 from rescue operations (for migrants) in the Italian Contiguous Zone waters.\n$r_1$: distress, proximity $\\Rightarrow$ obl(assistance)\n$r_2$: SeaWatch, migrants, ItalianContiguousZone $\\Rightarrow$ obl($\\neg assistance$)\nMaritime Law stipulates that a vessel in proximity to a distress vessel must assist the vessel in distress (rule $r_1$). On the other hand, $r_2$ encodes the prohibition on rescuing migrants in Italian Contiguous Zone waters. Moreover, Maritime Law requires vessels permitted to refrain from assisting vessels in distress to alert the closest relevant authorities and keep clear of the rescue area.\n$r_3$: perm($\\neg assistance$) $\\Rightarrow$ obl(alertAuthorities) & obl(keepClear)\nSuppose a migrant vessel is in distress in the Italian Contiguous Zone, and Sea Watch 3 is nearby. Does Sea Watch 3 have the obligation to alert the authorities and keep clear of the rescue area? Here, we have a conflict over two opposite norms, and it is unclear which one takes precedence over the other. Also, suppose that Sea Watch 3 alerted the competent authorities but remained in the operation area (and eventually assisted with the rescue operation). Do the Sea Watch 3 actions contravene the norms? As we said, there are two options. The permission does not follow from the conflict. In this case, the Sea Watch is not required to leave the area, and it does not contravene the norms. In the second approach, the permission from the conflict follows (as a weak permission). Leaving the area is a legal requirement, and Sea Watch 3 does not comply with the norms.\nWhat about if weak permission does not follow from a conflict? We can consider an alternative formulation of the last provision. Assume that it stipulates that vessels for which the obligation to assist does not hold must keep clear of the rescue area.\n$r'_3$: not obl(assistance) $\\Rightarrow$ obl(alerAuthorities)& obl(keepClear)\nGiven the conflict, we can argue that the obligation to offer assistance does not hold, and the Sea Watch 3 has to follow the obligations given by $r_3$."}, {"title": "2. Logic Programming and Weak Permission", "content": "The language of a deontic program is built from a set of literals, where a literal is either an atom (l) or its negation (\u00acl). In addition, we extend the language with deontic literals. The set of deontic literals is defined as\n{dop(l), not dop(l)|l \u2208 Lit}\nwhere dop is a deontic operator, more precisely dop \u2208 {obl, perm, permw}. The language also admits negation as failure (not). Literals and deontic literal can appear in the scope of not, but negation as failure cannot appear in the scope of a deontic literal. Given a literal l, we use ~l to denote the complement of l; more precisely, if l is an atomic proposition, then ~l = \u00acl. If l is a negated atomic proposition l = \u00acm, then ~l = m.\nDefinition 1 (Program). A program is a set of clauses or rules, where a rule r is an expression\n$c\\leftarrow a_1,..., a_m, not b_1,..., not b_m$.\nwhere $a_1,..., a_n, b_1,..., b_m, c$ are either literals or deontic literals, with the restriction that c is not a weak permission."}, {"title": "Definition 2 (Deontic Program).", "content": "A deontic program is a program including the following clauses and integrity constraints:\nperm(X) \u2190 obl(X).\npermw(X) \u2190 not obl(\u00acX).\n\u2190 obl(X), obl(\u00acX).\n\u2190 obl(X), perm(\u00acX).\nThe rule in (1) corresponds to the D axioms of Standard Deontic Logic, where an obligation implies the corresponding permission. Clause (2) establishes that we have a weak permission if we fail to derive the obligation to the contrary. The two integrity constraints ensure the (deontic) consistency of a deontic program. So, according to the first integrity constraint, no proposition can be at the same obligatory and forbidden. Similarly, according to (4) no literal can be obligatory (forbidden) when its opposite is permitted.\nFrom the first integrity constraint, we have that no program with the following two rules\nobl(p) \u2190.\nobl(\u00acp) \u2190.\nis satisfiable. Accordingly, to have a satisfiable deontic conflict we have to encode the rules for obligation as follows:\nobl(p) \u2190 not obl(\u00acp).\nobl(\u00acp) \u2190 not obl(p).\nWe are now ready to introduce the semantic framework for deontic programs. We follow the presentation by Caminada et al. (2015). While the approach is not standard, its advantage is that it provides a unified view of well-founded and stable semantics, where the well-founded semantics can be seen as a 3-valued variant of the 2-valued stable semantics as proposed by Przymusinski (1990)."}, {"title": "Definition 3.", "content": "A 3-valued Herbrand Interpretation I of a logic program P is a pair (T, F) with T, FC HBp and TO F = 0. The atoms in T are said to be true, the atoms in F are said to be false and the atoms in HBp\\(TU F) are said to be undefined.\nDefinition 4. Let I be a 3-valued Herbrand Interpretation of the logic program P. The reduct of P with respect to I (written as P/I) is the logic program constructed using the following steps."}, {"title": "Definition 5 (Logic Programming Semantics).", "content": "Let I = (T, F) be a 3-valued Herbrand Interpretation of logic program P.\n\u2022 I is a partial stable (or P-stable) model of P iff \u03a8p(I) = I.\n\u2022 T is a well-founded model of P iff I is a P-stable model of P where T is minimal (w.r.t. set inclusion) among all P-stable models of P.\n\u2022 T is a (2-valued) stable model of P iff I is a P-stable model of P where TU F = HBp.\n\u2022 Let I = {$I_i$ = (Ti, F\u2081): such that T; is a stable model of P}. T = NI\u2081\u2208I T\u00a1 is the sceptical stable model of P.\nDefinition 6 (Conflicted Deontic Program). A deontic program P is conflicted if, for a literal l, it contains the rules\nobl(l) \u2190 not obl(\u00acl).\nobl(\u00acl) \u2190 not obl(l).\nWe say that l is a conflicted literal.\nTheorem 1. Let P be a conflicted deontic program, and let l be a conflicted literal. Then permw (1) and permw (\u00acl) are not conclusions of the program under well-founded and stable semantics.\nPROOF. To prove the property we can assume, without any loss of generality, that the language is restricted to the conflicted literal 1, the Herbrand Base consists of the deontic literals that can be built from 1, i.e., HBp = {obl(l), obl(\u00acl), perm(l), perm(\u00acl), permw (1), perm(-1)}, and the program consists of the two rules such that I is conflicted plus the instantiation of clauses (1)-(4).\nFirst, we show that I = (0, 0), is a partial stable model. By Definition 4 P/I contains the following rules (for the sake of clarity and conciseness we removed the instances of the integrity constraints):\nperm (1) \u2190 obl(l).\nperm(-1) \u2190 obl(\u00acl).\nperm (1) \u2190 u.\nperm (l) \u2190 u.\nobl(l) \u2190 u.\nobl(-1) \u2190 u.\nIt is easy to verify that Ty = 0 and Fy = 0. Clearly, Ty = 0 is minimal. Let us show that Fy = 0 is maximal. Given the integrity constraints (3) and (4) it is not possible that"}, {"title": "3. Argumentation and Weak Permission", "content": "For the language for our deontic argumentation framework we use the same language Las the previous part, but we do not admit negation as failure. Arguments are built from rules where a rule has the following format:\n$a_1,... a_n\\rightarrow c$\nwhere {$a_1,..., a_n$} is a (possibly empty) set of literals and deontic literal, and c is either a literal or deontic literal but not a weak permission (i.e., c \u2260 permw (l), otherwise it would be an explicit permission).\nDefinition 7. A Deontic Argumentation Theory is a structure\n(F, R)\nwhere F is a (finite and possibly empty) set of literals (the fact or assumption of the theory), and R is a (finite) set of rules."}, {"title": "Definition 8.", "content": "Given a Deontic Argumentation Theory (F, R), A is an argument if A has one of the following forms:\n1. A = permw (1) for any literal l \u2208 L, the conclusion of the argument C(A) = permw (1), and Sub(A) = {A}.\n2. A = a for a \u2208 F; C(A) = a and Sub(A) = {A}.\n3. A = $A_1,..., A_n \\Rightarrow c$, if there is a rule $a_1,..., a_n \\Rightarrow c$ in R such that for all a\u00a1 \u2208 {$a_1,...,a_n$} there is an argument A\u00a1 such that C(Ai) = a\u2081; C(A) = c and Sub(A) = {A} \u222a Sub(A\u2081) U\u06f0\u06f0\u06f0U Sub(An).\n4. A = B \u21d2 perm (l), if B is an argument such that C(B) = obl(l); C(A) = perm(l), and Sub(A) = {A} U Sub(B).\nCondition 1) encodes the idea that weak permission is the failure to derive an obligation to the contrary (more on this when we discuss the notion of attack between arguments). Thus, by default, every literal is potentially weakly permitted, and we form an argument for this type of conclusion. Condition 2) gives the simplest form of an argument. We have an argument for a if a is one of the assumptions/facts of a case/theory. Condition 3) allows us to form arguments by forward chaining rules. Thus, we can form an argument from a rule, if we have arguments for all the elements of the body of the rule. The way the condition is written allows us to create arguments from rules with an empty body. Finally, condition 4) corresponds to the D axiom of Standard Deontic Logic.\nDefinition 9 (Attack). Let A and B be arguments. A attacks B (A > B) iff\n1. B = perm (l) and C(A) = obl(\u00acl);\n2. B' \u2208 Sub(B), C(B) = l and C(A) = ~l;\n3. B' \u2208 Sub(B), C(B') \u2208 {obl(l), perm(l)} and C(A) = obl(\u00acl);\n4. B' \u2208 Sub(B), C(B') = obl(l), and C(A) = perm(\u00acl).\nWe use A to denote the set of all arguments of the theory.\nAs we alluded to above and as we have seen in Section 2, the idea of weak permission is the negation as failure of the obligation to the contrary. Thus, in Definition 8, we create an argument for the weak permission for any literal l; however, this argument is attacked by any argument for obl(\u00ac1) (condition 1. above and notice this is the only case where the attack is not symmetrical). The rest of the conditions define an attack when the two arguments have opposite conclusions: condition 2 covers the case of plain literals, while conditions 3 and 4 are reserved for deontic literals. Specifically, we have opposite deontic conclusions when one of the two is an obligation for a literal, and the other is either an obligation or a permission for the opposite literal. Furthermore, an argument attacks another argument when the conflict is on the conclusion of the second argument (this corresponds to the notion of rebuttal) or when there is a conflict with one of the sub-arguments of the attacked argument (known as undercutting attack)."}, {"title": "Definition 10 (Dung Semantics).", "content": "Let (F, R) be a Deontic Argumentation Theory, and S be a set of arguments. Then:\n\u2022 S is conflict free iff VX, Y \u2208 S : X \u00a5 Y.\n\u2022 X \u2208 A is acceptable with respect to S iff VY \u2208 A such that Y > X : \u2203Z \u2208 S such that Z > Y.\n\u2022 S is an admissible set iff S is conflict free and X \u2208 S implies X is acceptable w.r.t. S.\n\u2022 S is a complete extension iff S is admissible and if X \u2208 A is acceptable w.r.t. S then X \u2208 S.\n\u2022 S is the grounded extension iff S is the set inclusion minimal complete extension.\n\u2022 S is a stable extension iff S is conflict free and VY & S, \u2203X \u2208 S such that X > Y.\nDefinition 11 (Justified Argument). Let D = (F, R) be a Deontic Argumentation Theory, an argument A is sceptically justified under a semantic T iff A \u2208 S for all sets of arguments S that are an extension under T.\nDefinition 12 (Justified Conclusion). A literal or a deontic literal l \u2208 L is a Justified conclusion under a semantics T iff for every extension S under T, there is an argument A such that A \u2208 S and C(A) = l\nLet us consider a Deontic Argumentation Theory where F = 0 and R contains the two rules\nr1: \u21d2 obl(a)\nr2: \u21d2 obl(\u00aca)\nThis theory has the following arguments:\nA1: permw (a)\nA3: \u2192 obl(a)\nA5: A3 \u21d2 perm(a)\nA2: permw(-a)\nA4: \u21d2 obl(\u00aca)\nA6: A4 \u21d2 perm(\u00aca)\nFor the attack relation, we have the following instances\nA3 > A2\nA3 > A4\nA5 > A4\nA4 > A1\nA3 > A6\nA4 > A3\nA4 > A5\nA6 > A3\nIt is easy to verify that {} is a complete extension (and trivially, it is the minimal complete extension w.r.t. set inclusion). Thus, it is the grounded extension of the theory. Accordingly, there is no argument in the grounded extension such that its conclusion is either permw (a) or perm\u20a9(\u00aca). Hence, permw (a) and perm\u20a9(\u00aca) are not justified conclusions under the grounded semantics.\nWhen we consider the stable semantics, we have the following two extensions:\n{A1, A3, A5}\n{A2, A3, A6}\nClearly, permw (a) is a conclusion of the first extension but not of the second one; conversely, permw (\u00aca) is a conclusion of the second extension but not of the first one. Consequently, perm (a) and perm (\u00aca) are not justified conclusions under the stable semantics."}, {"title": "Definition 13.", "content": "A Deontic Argumentation Theory is conflictual when it contains a pair of rules b\u2081,..., bn \u21d2 obl(c) and d\u2081, . . . dm \u21d2 obl(\u00acc), such that there are arguments B\u2081 with conclusion b\u2081, 1 \u2264 i \u2264 n, and Dj with conclusion dj, 1 \u2264 j \u2264 m. We will call c the conflicted literal.\nTheorem 2. Let D = (F,R) be a conflictual theory. For any conflicted literal 1, permw (1), perm(\u00acl) are not justified conclusions under grounded and stable semantics.\nPROOF. Let I be a conflicted literal. By the definition of argument, the theory D and the fact that the theory is conflicted, we have the following arguments:\nA1: permw (1)\nA3: B1,..., Bn \u21d2 obl(l)\nA2: permw (l)\nA4: D1,..., Dm \u21d2 obl(\u00acl)\nsuch that A3 > A2 and A4 > A1. Given that there are arguments attacking A\u2081 and A2, these two arguments are not in the minimal complete extension. Accordingly, permw (1) and perm(-1) are not justified conclusions under the grounded semantics.\nGiven the attack relationship among A1, A2, A3 and A4, we can conclude that there are at least two extensions E\u2081 and E2 such that A1, A3 \u20ac E\u2081 and A2, A4 & E1, and A2, A4 \u20ac E2 and A1, A3 & E2. Hence, there is an extension where no argument has perm (1) as its conclusion, and there is an extension where no argument has permw (\u00acl) as its conclusion. Therefore, perm (1) and perm (\u00acl) are not justified conclusions under the stable semantics."}, {"title": "4. Summary and Conclusions", "content": "We investigated the issue of weak permission, defined as the lack of the obligation to the contrary, in the context of some forms of non-monotonic reasoning (specifically, logic programming and structured argumentation) and some of the most adopted semantics (well-founded, grounded and stable). We proved that when the failure to obtain an obligation depends on an unsolved deontic conflict, the corresponding weak permission is not a conclusion under the well-founded, grounded and (sceptical) semantics. Accordingly, approaches to deontic reasoning adopting such semantics cannot offer a proper model of full deontic reasoning."}]}