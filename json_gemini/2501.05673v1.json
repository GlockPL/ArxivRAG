{"title": "Network Diffuser for Placing-Scheduling Service Function Chains with Inverse Demonstration", "authors": ["Zuyuan Zhang", "Vaneet Aggarwal", "Tian Lan"], "abstract": "Network services are increasingly managed by considering chained-up virtual network functions and relevant traffic flows, known as the Service Function Chains (SFCs). To deal with sequential arrivals of SFCs in an online fashion, we must consider two closely-coupled problems - an SFC placement problem that maps SFCs to servers/links in the network and an SFC scheduling problem that determines when each SFC is executed. Solving the whole SFC problem targeting these two optimizations jointly is extremely challenging. In this paper, we propose a novel network diffuser using conditional generative modeling for this SFC placing-scheduling optimization. Recent advances in generative AI and diffusion models have made it possible to generate high-quality images/videos and decision trajectories from language description. We formulate the SFC optimization as a problem of generating a state sequence for planning and perform graph diffusion on the state trajectories to enable extraction of SFC decisions, with SFC optimization constraints and objectives as conditions. To address the lack of demonstration data due to NP-hardness and exponential problem space of the SFC optimization, we also propose a novel and somewhat maverick approach Rather than solving instances of this difficult optimization, we start with randomly-generated solutions as input, and then determine appropriate SFC optimization problems that render these solutions feasible. This inverse demonstration enables us to obtain sufficient expert demonstrations, i.e., problem-solution pairs, through further optimization. In our numerical evaluations, the proposed network diffuser outperforms learning and heuristic baselines, by ~20% improvement in SFC reward and ~50% reduction in SFC waiting time and blocking rate.", "sections": [{"title": "I. INTRODUCTION", "content": "To enable a vision toward future networks with full autonomy, the focus of network service management has been quickly shifting toward Network Function Virtualization (NFV) [1]\u2013[3], which enables migration of network functions and middle-boxes to generic-purpose servers located in cloud nodes [4]. By chaining up virtual network functions (e.g., firewall, caching, content filtering, and inference) as ordered sequences and supporting the traffic flows between adjacent functions, the notion of Service Function Chains (SFCs) makes network services more cost-efficient, elastic, and flexible. But it also gives rise to a challenging optimization problem how to map SFCs to servers and links in the network, to efficient utilize available computing and network resources while achieving specific design objectives.\nMany SFC optimization problems are known to be NP-hard. Existing work [4]\u2013[9] often rely on approximation algorithms to find solutions that can be within a certain range of performance for various special cases. Examples include heuristic methods [5], [6] for minimizing SFC resource utilization/congestion and dynamic packing algorithms [9] achieving 2-approximation solutions in SFC placement and flow routing. It is shown in [4] that the general SFC placement problem can be modeled as a Set Cover Problem [10] and thus cannot achieve a better-than-logarithmic approximation factor. However, to deal with sequential arrivals of SFCS in an online manner, we must consider two closely-coupled problems an SFC placement problem that maps SFCs to servers/links in the network and an SFC scheduling problem that determines when each SFC is executed. Solving the whole SFC problem targeting these two optimizations jointly is extremely challenging. Most existing work are limited to one individual optimization.\nMachine Learning (ML) is a natural approach to this difficult SFC placing-scheduling optimization. For many network optimization problems such as routing and load-balancing, learning algorithms, e.g., [11]\u2013[24], have demonstrated tremendous promise for making it possible to turn large training datasets into powerful decision making policies. However, the exponentially-large problem space and NP-hardness of SFC optimization makes it challenging to obtain expert demonstration data (i.e., problem-solution pairs) for training - using either heuristic methods or exploration policies like reinforcement learning [7]. This creates a chicken-and-egg problem, i.e., training a learning model for SFC optimization requires having sufficient expert demonstration, which however cannot be obtained without having a good solution first.\nIn this paper, we consider the SFC placing-scheduling optimization and propose a novel network diffuser using conditional generative modeling for SFC optimization. Recent advances in generative AI and diffusion models have made it possible to generate high-quality images/videos and decision trajectories from language descriptions [25]. We formulate an SFC optimization as the problem of generating a state sequence x(t) = (St, St+1,..., St+H\u22121) from current time t into the H-step future. Each state st encapsulates both network state (e.g., topology, server resource and link utilization) and SFC status (e.g., requirements, placement, and schedules). Thus, by incorporating SFC optimization constraints and objectives as conditions for guided diffusion [26], we can perform diffusion on the state trajectories and learn a generative model of the distribution q(x) from the dataset D ="}, {"title": "II. BACKGROUND AND RELATED WORK", "content": "SFC Placement and Scheduling. The objective of the SFC placement and scheduling problem is to (i) optimally map the network functions and associated data flows of a set of SFCs to the server nodes and links of the underlying physical network and (ii) schedule the SFC executions over time, with the goal of minimizing congestion, resource cost, and blocking rate. This problem is becoming increasingly important to fully capitalize on the flexible and elasticity of SFC-based network management. However, many SFC placement-scheduling problems are NP-hard and lack efficient solutions. Existing work often rely on approximation algorithms to find solutions that can be proven to be within a certain range of quality and performance, e.g., [4], [8], [9], [29]\u2013[31]. In particular, the problem of online joint SFC placement and flow routing is considered in [9], [32]\u2013[34] with a two-stage algorithm achieving an approximation ratio of two. The authors in [4] show that SFC placement under order constraints can be seen as an instance of the Set Cover Problem [10]. Thus, an algorithm cannot achieve a better approximation factor than (1-e) ln |V| (where |V| is the network size) unless P = NP, even if all the SFCs consist of only one function. Learning-based solutions, such as deep reinforcement learning [7], [28], have also been considered. While these learning solutions have demonstrated great promise, they face several key challenges, including limited data and insufficient exploration. In this paper, we propose a novel approach using decision diffusion a form of generative AI technique \u2013 for SFC placement and scheduling.\nLearning-based network management. Deep learning (Dl) models can effectively analyze large amounts of network data, identifying patterns and anomalies [35]\u2013[37]. Additionally, DL has been used for network configuration optimization, enabling automated and adaptive network management [11]. Reinforcement learning plays a key role in achieving adaptive and real-time control of network parameters. Techniques such as Q-learning [12], multi-armed bandit (MAB) [13] models, and actor-critic [38] methods have been used to optimize routing [14], [15], load balancing [16], [23], and fault tolerance in wired networks [17], [39]. These methods enable the network to adapt to different conditions and improve overall performance. Network topology in these approaches is often represented as a graph. However, online learning techniques often struggle with exploration of large state/decision space of SFC placing-scheduling, while offline learning faces the lack of expert demonstration data, due to the NP-hardness of the problem.\nDecision Diffuser. Recent advances in generative AI e.g., diffusion models have made it possible to generate high-quality images/videos from language descriptions. It is shown that these methods can directly address the problem of se-quential decision-making in many challenging domains [25], [40], outperforming existing approaches like offline reinforce-ment learning. The diffusion model [26] is a specific type of generative model that learns the data distribution q(x) from the dataset D ={Xi}0<i<M."}, {"title": "III. MODEL AND PROBLEM DEFINITION", "content": "The problem of placing and scheduling a set of SFCs on a network is reprented by a tuple (G, F, T), including a network G, a set of SFCs F, and a deadline T. The network is represented by an undirected graph G = (V; E), where V is a set of nodes, each representing a server that can host a range of network functions (e.g., caching, firewall, encryption, computation, inference) with different resource requirements, and E is a set of network links connecting nodes in V with different bandwidth available. We consider heterogeneous networks \u2013 in which each server j\u2208 V has server resource Cv (which could become a vector if multiple resources [45] are considered, e.g., storage and computation), while for any (p,q) \u2208 E, there exist a communication link between servers p and q, with a bandwidth constraint of Bpq on link (p,q). For any (p,q) \u2209 E, we simply denote the available bandwidth as zero.\nWe consider a set of M SFCs, denoted by F = {1,2,..., M}. Each SFC i \u2208 F has a duration of Di seconds and a weight wi, and can start execution after arriving at time ti, which is known as the the release time in scheduling problems [46], [47]. It contains a sequence of virtual network functions (VNFs) e.g., firewall, caching, computation, and inference \u2013 chained in some order, with corresponding network traffic flow between the functions. Let Li be the length of SFC i, i.e., containing Li nodes representing the VNFs and Li -1 edges representing the corresponding traffic flows. We use Ci,j to denote the resource requirement of the jth node of SFC i and bij to denote the bandwidth requirement of the jth flow of SFC j. We note that resource requirement Ci,j can be a vector if multiple resources are considered. In our problem formulation, the required bandwidth bij can change along the SFC (for different flow j), e.g., due to network functions such as up-sampling or rendering (which increases the output data rate) and feature-extraction or compression (which decreases the output data rate).\nOur goal is to maximize the number of SFCs that can be successfully processed on a given network within deadline T. An SFC can be successfully placed and scheduled if we find a feasible solution that satisfies both server resource and bandwidth constraints, Cv and Bpq. For SFC placement, we need to determine the mapping of SFCs (i.e., their nodes and flows) to the network G. For SFC scheduling, we need to find the resource allocation over time to satisfy duration Di and release time ti. To make it more rigorous, we model this as an integer optimization with respect to placement variables zi,p,j \u2208 {0,1} and scheduling variables xi,t \u2208 {0,1}, which are dependent and jointly define our decision making. More precisely, we have xi,t = 1 if SFC-i is scheduled to be active at time t and xi,t = 0 otherwise. Further, we have zi,p,j = 1 if node j of SFC-i is placed on server p \u2208 V of the network and zi,p,j = 0 otherwise. It is easy to see that the product xi,tzi,p,j\u2208 {0,1} provides an indicator of whether server p is occupied by SFC-i at time t. Similarly, xi,tzi,p,jzj+1 \u2208 {0,1} indicates whether a link (p, q) on the network is occupied by the jth flow of SFC-i (i.e., when servers p and q are occupied by two adjacent nodes, node j and node j + 1, of the SFC).\nThese result in the SFC optimization problem as follows:\nmax $\\sum I_i$ (1)\n$\\sum C_{i,j}x_{i,t}z_{i,p,j} \\leq C_p, \\forall p, t$ (2)\n$\\sum b_{i,j}x_{i,t}z_{i,p,j}z_{i,q,j+1} \\leq B_{p,q}, \\forall (p,q), t$ (3)\n$\\sum x_{i,t} = D_i, \\forall i, j, p$ (4)\n$\\sum z_{i,p,j} \\leq 1, \\forall i, j$ (5)\n$I_i = \\Pi_j (\\sum z_{i,p,j})$ (6)\n$I_i, x_{i,t}, z_{i,p,j} \\in \\{0,1\\}, \\forall i,j,p, t$ (7)\nwere inequalities (2) and (3) represent the server resource and bandwidth constraints, respectively; Constraint (4) ensures that enough execution time of Di is assigned to SFC-i; and Constraint (5) requires each node of the SFC is mapped to at most 1 server. $I_i = \\Pi_j (\\sum z_{i,p,j})$ \u2208 {0,1} is an integer variable, and Ii = 1 only if SFC-i is successfully placed when each node j of the SFC is mapped to some server"}, {"title": "IV. OUR SOLUTION", "content": "We propose a novel framework that leverages diffusion models a generative AI technique to solve the proposed SFC optimization. To this end, we formulate the sequence of states (denoted by st = [Gt, Ft] capturing the network and SFC states at t) of the SFC optimization over time t as a trajectory. In images, the diffusion process is applied across all pixel values in an image. It is therefore natural to apply a similar diffusion process on the SFC optimization trajec-tory. As shown in Figure 2, we develop a network diffuser using graph generation algorithms to capture both network and SFC representation and incorporate SFC optimization constraints/parameters as conditions for guided diffusion. By performing diffusion on the state sequence, we can generate future states of the SFC optimization and then extract SFC decisions/actions from the generated states. This approach enables highly efficient solutions for the SFC optimization problems, under given constraints, network topolgies, and SFC requirements, which is shown to be NP-hard.\nTheorem 1: The proposed SFC Optimization for placement and scheduling in (1)-(7) is NP-hard.\nProof: We show that a multi-dimensional knapsack prob-lem can be cast into the proposed SFC optimization. Let Ci,j represent the size of item i over dimension j, Cv be the capacity of knapsack p, and wi be the value of item i. For sufficiently large $B_{p,q}$ and Di = T for all SFCs, it is easy to see that Ii represents whether item i is selected and \u2211 i denotes the total number of items in the knapsack (i.e, subset-sum problem). Thus, we can convert the multi-dimensional knapsack problem into the SFC optimization in polynomial time. Thus the SFC optimization is NP-hard.\nWhile diffusion models have achieved state-of-the-art per-formance on image/video generation tasks, they require having access to huge volumes of training data [25]. This poses a serious challenge to using diffusion models for the proposed SFC placement and scheduling problem. Specifically, there exists a chicken-and-egg problem, i.e., training a diffusion model for SFC optimization requires having sufficient expert demonstration, which however cannot be obtained without having an efficient solution first. Since the proposed SFC optimization is NP-hard and has an exponential problem space of size $|V|^{L M} \\cdot T^{M}$, where |V| is the size of the network, L length of SFC, M the number of SFCs, and T the length of time horizon, obtaining expert demonstrations for training (either using heuristics or reinforcement learning based exploration) is indeed difficult.\nTo address this challenge, we propose a novel approach for generating expert demonstrations in SFC optimization. Our approach, denoted as inverse demonstration, is inspired by the idea of inverse optimization [48]. As shown in Figure 4, rather than seeking to computing a given SFC optimization for obtaining demonstrations which is NP-hard and has exponential problem space of size $|V|^{L M} \\cdot T^{M}$, we take (randomly generated) SFC placement/scheduling decisions as input and determines SFC optimization problems (i.e., with parameters (G, F,T)) that render these decisions nearly opti-mal (using a lexicographic min-max optimization of the SFC completion times). It leads to problem-solution pairs (in the reverse direction) with expert level performance, which are leveraged to train our diffusion models."}, {"title": "A. Network Diffuser for SFC Optimization", "content": "To solve the SFC deployment problem, we propose the SFC Decision Generation Algorithm. This is a Decision Diffusion algorithm based on graph generation. Next, we discuss how to use diffusion for decision-making. First, we discuss the modeling choices for diffusion. Next, we will discuss how to capture the best aspects of the trajectory using classifier-free guidance. Then, we discuss the different behaviors that can be achieved using conditional diffusion models. Finally, we discuss the practical training details of our approach.\nWe use q to represent the forward denoising process, and $p_{\\theta}$ to represent the reverse denoising process.\n1) Diffusing over states: The diffusion process requires a natural simulation of trajectory and actions. In the SFC envi-ronment, the state often does not change drastically. However, the actions that determine state changes are often diverse and not very smooth, making them more difficult to predict and model. Therefore, we only perform diffusion on the state. Here we consider the placing-scheduling variables zi,p,j and $x_{i,t}$ in our SFC optimization, i.e., (1)-(7), and embed them into state (and trajectory) representations. More precisely, we divide the state representation of the SFC into two parts. The first part is the information of the graph, which includes the connectivity information and the current network state including remaining resources on the servers and links. The second part is the SFC parameter/configuration, which includes the SFC itself, the starting node, and the resource requirements of each node/VNF and bandwidth requirments of each edge/flow. We perform diffusion on the state sequence based on the state processing described in [49], i.e.,\n$X_k(\\tau_t) = (S_t, S_{t+1},...,S_{t+H-1})_k$ (8)\nwhere k represents the time step in the forward process, and t denotes the time of visiting a state in the trajectory \u03c4. Moreover, we regard $x_k(\\tau)$ as the noise state sequence from a trajectory of length H. We represent $x_k(\\tau)$ as a two-dimensional array, with each column corresponding to a time step in the sequence\nHowever, in deploying SFC, it is necessary to extract the properties of the graph for st and maintain the graph's connectivity. Therefore, we consider both the graph's inherent properties and the SFC's properties.\n$S_t = [G_t; F_t]$ (9)\nwhere Gt is an n + n\u00b2 vector representing the information of the entire graph at time t, including graph connectivity and resources on nodes and edges. Ft is a vector containing the information of the SFC at time t, including the start node of each SFC and the arrival time. At the same time, according to [27], we further decompose the state as follows:\n$S_t = [V_t; E_t; F_t]$ (10)\nFor F, since there is not much interrelation among the elements of F and F is more like image-type information, we use traditional Gaussian noise. However, our model handles graphs with node attributes and edge attributes for Vt and Et. Therefore, we use a discrete diffusion model instead of an image diffusion model. Similar to image diffusion models where noise is applied independently on each pixel, we diffuse on each node and edge feature separately. For any node (and similarly for edges), the transition probabilities are defined by the matrices $[Q]_{ij} = q(V_k = j | V_{k-1} = i)$ and $[Q]_{ij} = q(e_k = j | e_{k-1} = i)$. Adding noise to form $G_k = (V_k, E_k)$ simply means sampling each node and edge type from the categorical distributions defined by:\n$q(G_k|G_{k-1}) = (V_{k-1}Q_k, E_{k-1}Q_k^{-1})$ (11)"}, {"title": "Algorithm 1 SFC Decision Generation using Diffusion", "content": "Input: Noise model $e_{\\theta}$, inverse dynamics $f_{\\phi}$, guidance scale w, history length C, condition y\nOutput: The array A sorted in non-decreasing order\n1: Initialize h \u2190 Queue(length = C), t \u2190 0\n2: while not done do\n3: Observe environment get $G_t = (V_t, E_t)$ and Other information F\n4: Combine G and F into state st;\n5: h.insert(st);\n6: Sample $G_K \\sim q_v(\\eta) \\times q_E(\\eta)$\n7: Initialize $X_{F,K}(\\tau) \\sim N(0, \\alpha I)$\n8: for k = K... 1 do\n9: $X_k(\\tau)[:length(h)] \\leftarrow h$;\n10: $\\epsilon_V, \\epsilon_E, \\epsilon_{\\xi} = \\epsilon_{\\theta}(x_k(\\tau), k) + w(\\epsilon_{\\theta}(x_k(\\tau), y, k) - \\epsilon_{\\theta}(X_k(\\tau), k))$\n11: $V_k^{p_{\\theta}} \\leftarrow Denoise(x_k(\\tau), \\epsilon_V)$\n12: $E_k^{p_{\\theta}} \\leftarrow Denoise(x_k(\\tau), \\epsilon_E)$\n13: $(\\mu_{F,k-1}, \\Sigma_{F,k-1}) \\leftarrow Denoise(x_k(\\tau), \\epsilon_F)$\n14: $G_{k-1} \\sim \\Pi_i p_{\\theta}(V_i|G_k) i,j p_{\\theta}(e_{ij}|G_k)$\n15: $X_{F,k-1} \\sim N(\\mu_{F,k-1}, \\Sigma_{F,k-1})$\n16: $X_{k-1} = [G_{k-1}; X_{F,k-1}]$\n17: Extract $(S_t, S_{t+1})$ from $x_0(\\tau)$\n18: Execute $a_t = f_{\\phi}(S_t, S_{t+1}); t \\leftarrow t +1$\n3) Generate different behaviors: We aim to guide the diffusion process such that y(t) leads to a state sequence that satisfies relevant constraints or exhibits specific behaviors. First and foremost, we want our decisions to achieve the maximum returns. Secondly, we want the diffused states to meet the constraints. Therefore, based on these two requirements, we design the desired y(\u03c4). Maximizing Returns To generate trajectories that maximize return, we condition the noise model on the return of a trajectory so $\\epsilon_{\\theta}(X_k(\\tau),y(t),k) = \\epsilon_{\\theta} (x_k(\\tau), R(\\tau), k)$, Where R(\u03c4) is the return obtained by the trajectory T. Satisfying Constraints Trajectories may satisfy a variety of constraints, each represented by the set Ci, such as reaching a specific goal, visiting states in a particular order, or avoiding parts of the state space. To generate trajecto-ries satisfying a given constraint Ci, we condition the noise model on a one-hot encoding so that $\\epsilon_{\\theta}(X_k(\\tau),y(t),k) = \\epsilon_{\\theta}(x_k(\\tau), 1(T\\in C_i), k)$\nBased on the two aforementioned schemes, we combined them to obtain y(t) that can guide the generation of the maximum return while satisfying the constraints. The formula is as follows:\n$\\epsilon_{\\theta}(X_k(\\tau),y(\\tau), k) = \\epsilon_{\\theta}(x_k(\\tau), R(+\\) \\cdot 1(t \\in C_i),k)$ (14)\n4) Training the network diffuser:: The network diffuser is a conditional generative model we use for decision-making, trained in a supervised manner. Given a trajectory dataset D, each trajectory is labeled with its achieved return, satisfied constraints, or demonstrated skills. We simultaneously train the reverse diffusion process $p_{\\theta}$ through the noise model $e_{\\theta}$, both"}, {"title": "Inverse Demonstration for Generating Expert Data", "content": "To obtain demonstration with valid problem-solution pairs of the SFC optimization for training, the key idea of our inverse demonstration is that we do not necessarily need to compute a solution given the NP-hard problem in (1)-(7). Instead, we can reverse the process to start with a set of placement/scheduling decision as input and then determine an SFC optimization problem (G, F, T) with network G, SFCs F, and deadline T, which renders the decision feasible and nearly optimal (i.e., by solving a lexcographic min-max optimization of the completion times). This way, we can obtain sufficient expert demonstrations of the SFC optimization much more easily, for training the proposed network diffuser.\nMore precisely, we will generate random SFCs and their placement/scheduling decisions, and then update our network and constraints accordingly to obtain an SFC optimization that renders the decisions feasible. Next, given this problem-solution pair as a feasible demonstration, we will formulate and solve a lexicographic min-max problem \u2013 by optimizing the SFC completion times Ti, Vi (and thus deadline T) in a lexicographic manner respect to fixed SFC placement. We show that this lexicographic optimization can be transformed into a separable convex objective [51] and then computed by integer programming over the SFC schedule.\nIn the above algorithm, we first randomly generate an SFC in each step i. Then, we enumerate the nodes in the SFC and use a depth-first search to find a feasible path to deploy them in the network. Next, we update the network (i.e., server resource and bandwidth constraints according to (2) and (3)) based on these decisions and collect the sequence of relevant actions and network states as a feasible demonstration trajectory. To further optimize our demonstration, we fixed the SFC placement decisions $z_{i,p,j}$ and consider the following lexicographic min-max optimization of SFC completion times, over the SFC scheduling variables $x_{i,t}$:\nlex min max(Ti)\ns.t. Ti = max {t|$x_{i,t}$ > 0, \u2200t}, \u2200i"}, {"title": "V. NUMERICAL EVALUATION", "content": "We evaluate our proposed network diffuser on SFC placing-scheduling problems in a simulated environment, for varying network size and dynamic SFC arrivals based on a Poisson process. We illustrate the diffusion and decsion extraction process and compare our network diffuser with a number of baselines using heuristics and deep learning like [28]. We note that we do not consider methods like [4], [9], which either consider an offline SFC problem or only focus on SFC placement alone. Our proposed network diffuser significantly outperforms baselines in terms of reward, request waiting time, and non-blocking rate.\nBaselines: Our evaluation will consider a number of baselines: (i) DeepSFC: This approach uses reinforcement learning to solve the SFC deployment problem. For more details, refer to [28]. (ii) Greedy: In a resource-constrained edge environment, a greedy strategy is used to find the deployment of the SFC. It starts the DFS from the node with the most remaining resources and selects the node with the most re-maining resources at each step. (iii) Central-Deploy: Unlike the greedy strategy, our SFC deployment starts from the central node as much as possible and continues the deployment along the central nodes. (iv) Random: Based on the deployable set of VNFs and considering resource constraints, VNFs are randomly deployed on edge servers.\nEnvironment: All experiments are conducted on a Linux machine with AMD EPYC 7513 32-Core Processor CPU and an NVIDIA RTX A6000 GPU, implemented in python3 and compiled by a Python compiler."}, {"title": "VI. CONCLUSIONS", "content": "This paper proposes a novel network diffuser. It formulates the SFC placing-scheduling optimization as a problem of generating a state sequence for planning. By incorporating SFC optimization constraints and objectives as conditions, we perform graph diffusion on the state trajectories, from which the SFC decisions are then extracted. Further, to address the lack of demonstration data due to NP-hardness and exponential problem space, we develop a novel inverse demonstration approach, by starting with randomly-generated solutions as input and then determining appropriate SFC optimization problems that render these solutions feasible and can be further optimized using integer program with seperable convex objective functions. Significant performance improvements are observed in our numerical experiments. Both the proposed network diffuser and inverse demonstration methods have the potential to be applicable to a wide range of network optimization problems."}]}