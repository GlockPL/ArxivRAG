{"title": "Adaptive Sparsified Graph Learning Framework for Vessel Behavior Anomalies", "authors": ["Jeehong Kim", "Minchan Kim", "Jaeseong Ju", "Youngseok Hwang", "Wonhee Lee", "Hyunwoo Park"], "abstract": "Graph neural networks have emerged as a powerful tool for learning spatiotemporal interactions. However, conventional approaches often rely on predefined graphs, which may obscure the precise relationships being modeled. Additionally, existing methods typically define nodes based on fixed spatial locations, a strategy that is ill-suited for dynamic environments like maritime environments. Our method introduces an innovative graph representation where timestamps are modeled as distinct nodes, allowing temporal dependencies to be explicitly captured through graph edges. This setup is extended to construct a multi-ship graph that effectively captures spatial interactions while preserving graph sparsity. The graph is processed using Graph Convolutional Network layers to capture spatiotemporal patterns, with a forecasting layer for feature prediction and a Variational Graph Autoencoder for reconstruction, enabling robust anomaly detection.", "sections": [{"title": "Introduction", "content": "Graph neural network (GNN) based methods provided a powerful approach for modeling spatiotemporal data (Yu, Yin, and Zhu 2017), yet existing approaches often relied on predefined or fully connected graphs (Liu et al. 2023; Zhang et al. 2023), introducing noise and reducing interpretability. Additionally, most graph based anomaly detection methods primarily utilized graphs for node embedding updates, rather than fully utilizing their structural and relational properties (Liu et al. 2023; Zhang et al. 2023).\nWe introduce a novel framework for anomaly detection in multi-ship trajectory data by utilizing a sparsified graph, removing noisy and task-irrelevant edges while retaining essential spatiotemporal relationships. The optimized graph is then embedded using Graph Convolutional Network (GCN) (Kipf and Welling 2016a) layers to effectively capture these relationships. Furthermore, leveraging a Variational Graph Autoencoder (VGAE) (Kipf and Welling 2016b), our framework reconstructs adjacency matrices, allowing anomaly detection by identifying discrepancies in graph structures.\nOur contributions are summarized as follows:\n\u2022 Novel Graph Representation: We establish a graph-based input structure for moving objects, representing each timestamp as a node to explicitly model temporal dependencies through graph edges.\n\u2022 Efficient Graph Construction Strategy: We generate a multi-ship graph that effectively captures spatial relationships while preserving graph sparsity.\n\u2022 Graph Based Anomaly Detection: Our framework combines prediction and reconstruction within a graph based approach, fully leveraging graph structures to enhance anomaly detection performance."}, {"title": "Related Works", "content": "Existing spatiotemporal methods often relied on fixed spatial locations, such as intersections (Wang et al. 2020; Yu, Yin, and Zhu 2017), which were unsuitable for the dynamic and fluid nature of maritime environments. Consequently, although efforts were made to establish dynamic reference points that were appropriate for the maritime domain (Eljabu, Etemad, and Matwin 2021; Liang et al. 2022), these points still did not adequately capture the fluid and constantly evolving nature of moving vessels.\n\nThe concept of anomalies in AIS tracks refers to behaviors that deviate from what is considered 'normal' or expected under typical operational conditions (Laxhammar 2008). There are many studies (Lane et al. 2010; Davenport 2008; Liu, Li, and Liu 2024) that define anomalous behaviors based on kinematic behaviors, AIS transmission behaviors, and other supplementary behaviors that occur on the ship. One of the key challenges in defining anomalies is the absence of a universal criterion for what constitutes an anomalous event. Despite the wide range of possible anomalies, this study specifically focuses on deviation from standard route. This type of anomaly is one of the most fundamental and frequently observed irregularities in vessel movement, serving as a crucial indicator of potential maritime risks. A vessel straying from its expected trajectory could signal various underlying causes, including adverse weather conditions, mechanical failures, unauthorized maneuvers, or illicit activities. By analyzing deviations from standard routes, we aim to establish a robust framework for"}, {"title": "Methodology", "content": "Given AIS data $X = \\{x_i | i \\in V_t, t \\in T\\}$, where $x_i$ represents the feature vector of ship i at time t, and a series of temporal graphs $\\{G_t\\}_{t=1}^{T}$, the objective is to:\n1. Predict the next time step embedding $h_i^{t+1}$ for each node $i \\in V_t$ using past observations and graph structure.\n2. Identify anomalous nodes and edges in $G_{w_t}$ by comparing observed patterns to learned normal behavior.\nThe proposed approach combines node embedding, graph sparsification, time-series forecasting, and anomaly detection into a unified framework to effectively handle these challenges.\nAs depicted in Figure 1, our paper establishes a novel framework for anomaly detection leveraging graph neural networks to model multi-ship trajectory data."}, {"title": "Graph Construction", "content": "To define the boundaries of multi-ship graphs, the OPTICS clustering algorithm (Ankerst et al. 1999) is employed. This algorithm groups ships based on the latitude and longitude at a given time stamp t, thereby identifying clusters that reflect shared spatiotemporal regions."}, {"title": "Algorithm 1: Graph Initialization", "content": "Input: Timestamps of ship $i$: $t_1, t_2, ..., t_n$, window size $w$\nOutput: Graphs $G_1, G_2,..., G_{wm}$\n1: for each sliding window $w_k$ do\n2: Initialize graph $G_k = (V_{wk}, E_{wk})$\n3: $V_{wk} \\gets$ timestamps in $w_k$\n4: for each pair of timestamps $(t_1, t_2)$ where $t_1, t_2 \\in w_k$ and $t_1 \\ne t_2$ do\n5: Add directed edge $e_{t_1\\rightarrow t_2}$ to $E_k$\n6: end for\n7: end for\n8: return $G_1, G_2,..., G_{wm}$"}, {"title": "Graph Initialization", "content": "Unlike conventional GNN tasks where the initial graph structure is predefined, our approach starts by constructing the graph from raw data. In our case, the graph is constructed within each identified cluster from the previous step. The core idea is illustrated on lines 4\u20135 of Algorithm 1, where each edge represents a temporal connection between consecutive timestamps.\nThe underlying intuition behind this approach is to demonstrate that, rather than relying on traditional time-series prediction models such as RNN (Rumelhart, Hinton, and Williams 1986) or LSTM (Hochreiter 1997), temporal dependencies can be effectively captured within a graph structure. By embedding sequential relationships as edges in the graph, we establish a framework where time-series forecasting can be performed using a simple MLP model. This highlights the feasibility of leveraging graph-based representations for temporal modeling, enabling efficient and scalable predictions without the need for complex recurrent architectures."}, {"title": "Multi-ship Trajectory Graph", "content": "Then the multi-ship trajectory graph is constructed in the same context for a single ship while only considering the ships within the same cluster. This guarantees that the graph encompasses both intra-ship and inter-ship temporal interactions."}, {"title": "Algorithm 2: Graph Sparsification", "content": "Input: Graph $G^i = (V^i, E^i)$\nOutput: Sparsified Graph $G^i_{sparse}$\n1: Initialize sparsification function $F$\n2: Apply $F$ to $G^i$:\n$G^i_{sparse} = F(G^i)$\n3: Perform downstream tasks using $G^i_{sparse}$\n4: Compute $L_{forecast}$ and $L_{reconstruct}$\n5: Apply sparsity regularization with $L_0$ norm:\n$L_{total} = L_{forecast} + L_{reconstruct} + \\lambda ||Z||_0$\n6: Optimize $G^i_{sparse}$ by minimizing $L_{total}$\n7: return $G^i_{sparse}$"}, {"title": "Graph Sparsification", "content": "Graph sparsification is essential for efficient computation, particularly when the graph is initially constructed using Algorithm 1. Algorithm 2 focuses on learning an edge-sparsified graph by systematically removing noisy and task-irrelevant edges. It is based on SGAT (Ye and Ji 2021), which employs a binary mask $Z\\in \\{0,1\\}^M$, where M denotes the total number of edges. The function of the mask $z_{ij}$ is to determine whether the edge $e_{ij}$ is used during neighbor aggregation. The adjacency matrix $A$ is modified as $A = A \\odot Z$ and sparsification is achieved by optimizing a regularized loss of the $L_0$ norm.\nWhile there is a separate regularization for this process, recent approaches (Li et al. 2024) suggest integrating the term directly with the downstream task loss, which could offer a more unified optimization framework. Further advancements in this direction can be explored through the emerging field of Graph Structural Learning, which has gained significant attention in recent research."}, {"title": "Anomaly Detection", "content": "The anomaly detection process begins with the sparsified graph derived from the multi-ship trajectory graph, which is then subjected to a series of GCN layers. These layers capture structural and spatiotemporal patterns, embedding them into node representations.\nThe output of the GCN layers is proceeded to two additional layers, namely the forecasting layer and the reconstruction layer. These stages are performed at the individual ship level for a tailored process, where each ship's trajectory is treated as an independent subgraph.\nThe two-layer design integrates both forecasting and reconstructive perspectives, enabling comprehensive anomaly detection for temporal deviations and feature distortions. By leveraging the graph's inductive bias, specifically the directed edges that are constructed upon temporal dependencies, the architecture eliminates the need for sequential models like LSTM or GRU, ensuring a streamlined and robust design for diverse graph structures.\n$L_{total} = L_{forecast} + L_{reconstruct} + \\lambda ||Z||_0$\n(1)"}, {"title": "Forecasting", "content": "The forecasting layer employs a simple multi-layer perceptron (MLP) to predict the feature values at the subsequent time step for each node, utilizing the temporal dependencies encoded by the GCN layers. A discrepancy between the predicted and actual values may be indicative of a potential anomaly."}, {"title": "Reconstruction", "content": "The reconstruction layer utilizes VGAE to process individual ship trajectories as distinct subgraphs, encoding their structural and feature information into a compact latent space. The VGAE reconstructs the adjacency matrix, with anomalies identified based on reconstruction errors derived from the differences between the original and reconstructed subgraph properties. By capturing subgraph level patterns, this approach facilitates robust anomaly detection for individual ship trajectories.\n$L_{reconstruct} = E_{q(Z|x,\\bar{A})} [log p(\\bar{A}, X|Z)]$\n$-\\beta \\cdot D_{KL}(q(Z|X, \\bar{A})||p(Z))$\n(2)"}, {"title": "Anomaly Scoring", "content": "To detect anomalous data points, we adopt a reasoning score that integrates both the prediction error and the node reconstruction probability (Liu et al. 2023). For each data point i, the reasoning score is defined as\n$RS_i = \\frac{E_i + \\gamma \\cdot (1 - P_i)}{1 + \\gamma}$,\n(3)\nwhere $E_i$ denotes the mean squared error between predicted and actual values, $P_i$ is the node reconstruction probability representing the likelihood of observing the feature values under the learned model, and $\\gamma$ is a hyperparameter that controls the balance between these two components. The optimal value of $\\gamma$ can be determined through validation on the training set.\nTo determine the anomaly threshold, we employ the Peak-Over-Threshold (POT) method, which dynamically adjusts the threshold based on environmental changes. This approach classifies a data point as anomalous when its prediction and reconstruction errors exceed the dynamically set threshold, allowing for more adaptive and robust anomaly detection in varying maritime conditions."}, {"title": "Experiment", "content": "In this paper, we use the OMTAD dataset (Masek et al. 2021), which was constructed from the Australian Maritime Safety Authority (AMSA), using anonymized AIS data. We specifically focused on the Western Australian waters due to its high vessel traffic density, as it represents one of the busiest maritime routes in the region. Figure 2 shows the visualization of vessel trajectories in this area. The dataset contains fundamental AIS features: longitude, latitude, Speed over Ground (SOG), and Course over Ground (COG), with data points sampled at one-hour intervals. Vessel journeys were segmented based on stoppage (zero speed) or data gaps (>3.5 hours), and only tracks at least 10 hours long were retained. Missing data was interpolated using linear interpolation, with manual verification ensuring data quality. The fi-"}, {"title": "Synthetic Anomaly Generation", "content": "A major challenge in maritime anomaly detection is the lack of ground truth labels. In cases where labeled anomalies exist, they are typically annotated by domain experts, which is impractical for large-scale datasets. To address this issue, many existing approaches synthesize anomalies by injecting artificial perturbations into normal data. Inspired by this, we generate synthetic anomalies based on the Speed and Course Anomaly (SCA) defined by (Liu, Li, and Liu 2024). SCA is characterized by abnormal changes in both speed and course, making it one of the most commonly observed anomalies in vessel trajectories.\nTo synthesize such anomalies, we model the statistical properties of normal vessel movements and introduce perturbations in the SOG and COG values. Specifically, we assume that the rate of change in SOG and COG follows a normal distribution:\n$\\alpha_i \\sim N(\\mu_\\alpha, \\sigma_\\alpha), \\omega_i \\sim N(\\mu_\\omega, \\sigma_\\omega)$,\n(4)\nwhere $\\alpha_i = \\frac{SOG_i - SOG_{i-1}}{\\Delta t}$ and $\\omega_i = \\frac{COG_i - COG_{i-1}}{\\Delta t}$ denote the change rate of speed and course, respectively. Here, i represents the index of a data point in the trajectory, and $\\Delta t$ is the time interval between consecutive AIS messages.\nTo introduce synthetic anomalies, we perturb the speed and course change rates by sampling values that significantly deviate from their normal distribution:\n$\\alpha' = \\mu_\\alpha + k \\cdot \\sigma_\\alpha, \\omega' = \\mu_\\omega + k \\cdot \\sigma_\\omega$\n(5)\nwhere k is a scaling factor that determines the severity of the anomaly. A typical choice is k > 3, ensuring that the new values fall outside the normal range (beyond the 99.7% confidence interval).\nOnce the synthetic anomaly values $\\alpha'$ and $\\omega'$ are generated, the corresponding speed and course values are updated iteratively:\n$SOG'_i = SOG'_{i-1} + \\alpha' \\cdot \\Delta t$\n(6)\n$COG'_i = COG'_{i-1} + \\omega' \\cdot \\Delta t$\n(7)\nwhere $SOG'$ and $COG'$ represent the modified speed and course values containing synthetic anomalies.\nThis process is applied to randomly selected trajectory points, ensuring that a subset of the dataset contains anomalous behavior. The generated anomalies effectively simulate real-world vessel irregularities, such as sudden acceleration, deceleration, or unexpected course deviations, making them valuable for training and evaluating anomaly detection models."}, {"title": "Experimental Setup", "content": "All experiments were implemented using PyTorch 2.0 and PyTorch Geometric frameworks. Our architecture consists of a GCN encoder with 64 hidden channels and 32 latent dimensions, utilizing LayerNorm for stable training. For graph construction, we employed a sliding window approach with h = 10 hours and 1-hour steps. Each node encodes a vessel state through five features: geographical coordinates, speed, and course decomposed into sine and cosine components. This decomposition of course angle was necessary to preserve the circular nature of angular data, as direct use of raw angles would create discontinuity at the 0/360-degree boundary.\nThe model was trained using the Adam optimizer with a learning rate of 0.001 and weight decay of 1e-5. We trained for a maximum of 100 epochs with early stopping (patience=10) to prevent overfitting. The loss function combines three components: forecasting loss (MSE), graph reconstruction loss, and KL divergence term. For synthetic anomaly generation, we set track_anomaly_ratio=0.1 (10% of tracks contain anomalies) and point_anomaly_ratio=0.3 (30% of points within anomalous tracks), with severity factor k = 3.5.\nThe dataset was partitioned to ensure all synthetic anomalies appeared exclusively in the test set to maintain uncontaminated training data. Specifically, any trajectory containing y = 0 values was allocated to the test set, while the remaining data was split into training (90%) and validation (10%) sets. Input features were normalized using per-graph standardization to ensure stable training."}, {"title": "Conclusion and Future Work", "content": "The proposed framework will be validated using AIS data, with comparative analyses conducted alongside existing"}, {"title": "Appendix", "content": "A key assumption in the anomaly generation process is that modifying SOG and COG does not significantly alter the vessel's position. The following theorem provides a theoretical justification for this assumption.\nFor a sufficiently small perturbation $\\epsilon$, if the SOG and COG satisfy the following conditions:\n$|\\alpha'| \\le \\epsilon SOG_{i-1}, |\\omega'| \\le \\epsilon COG_{i-1}$\nthen the resulting position change remains bounded by:\n$|\\Delta \\phi^*| < \\epsilon \\Delta t, |\\Delta \\lambda^*| < \\epsilon \\Delta t$\nimplying that the vessel remains effectively on the same trajectory.\n$\\Delta \\phi^*$ and $\\Delta \\lambda^*$ denote the changes in latitude and longitude, respectively.\nensures that, under controlled perturbations, the trajectory remains unchanged, making it valid to generate anomalies by modifying only SOG and COG. Further proof is provided in the Appendix section.\nWe start by defining the changes in latitude and longitude. Let R denote the Earth's radius. The latitude change $\\Delta \\phi^*$ is computed using R, while the longitude change $\\Delta \\lambda^*$ is adjusted by $R \\cos \\phi$ to account for the varying circumference of the Earth at different latitudes:\n$\\Delta \\phi^* = \\frac{SOG \\cdot \\cos(COG)}{R} \\Delta t$\n$\\Delta \\lambda^* = \\frac{SOG \\cdot \\sin(COG)}{R \\cos\\phi} \\Delta t$\nSubstituting the perturbed values of SOG and COG, we obtain:\n$\\Delta \\phi^* = \\frac{(SOG_{i-1} + \\alpha' \\Delta t) \\cdot \\cos(COG_{i-1} + \\omega' \\Delta t)}{R} \\Delta t$\n$\\Delta \\lambda^* = \\frac{(SOG_{i-1} + \\alpha' \\Delta t) \\cdot \\sin(COG_{i-1} + \\omega' \\Delta t)}{R \\cos\\phi} \\Delta t$\nUsing the Taylor series expansion for small x, we approximate:\n$cos(COG_i) \\approx cos(COG_{i-1}) - sin(COG_{i-1}) \\cdot \\omega' \\cdot \\Delta t$\n$sin(COG_i) \\approx sin(COG_{i-1}) + cos(COG_{i-1}) \\cdot \\omega' \\cdot \\Delta t$\nBy substituting these approximations back into the expressions for $\\Delta \\phi^*$ and $\\Delta \\lambda^*$, we get:\n$\\Delta \\phi^* \\approx \\frac{SOG_{i-1} \\cdot (1 + \\frac{\\alpha'}{SOG_{i-1}}) \\cdot cos COG_{i-1}}{R} \\Delta t$\n$\\Delta \\lambda^* \\approx \\frac{SOG_{i-1} \\cdot (1 + \\frac{\\alpha'}{SOG_{i-1}}) \\cdot sin COG_{i-1}}{R \\cdot cos \\phi} \\Delta t$\nSince we assume:\n$|\\frac{\\alpha'}{SOG_{i-1}}| \\le \\epsilon, |\\frac{\\omega'}{COG_{i-1}}| \\le \\epsilon$\nit follows that:\n$|\\Delta \\phi^*| \\le \\epsilon \\Delta t, |\\Delta \\lambda^*| \\le \\epsilon \\Delta t$\nwhich ensures that for a sufficiently small $\\epsilon$, the vessel remains effectively on the same trajectory."}]}