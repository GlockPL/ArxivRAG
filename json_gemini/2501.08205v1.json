{"title": "Modeling Feature Maps for Quantum Machine Learning", "authors": ["Navneet Singh", "Shiva Raj Pokhrel"], "abstract": "Abstract-Quantum Machine Learning (QML) offers significant potential for complex tasks like genome sequence classification, but quantum noise on Noisy Intermediate-Scale Quantum (NISQ) devices poses practical challenges. This study systematically evaluates how various quantum noise models-including dephasing, amplitude damping, depolarizing, thermal noise, bit-flip, and phase-flip-affect key QML algorithms (QSVC, Peg-QSVC, QNN, VQC) and feature mapping techniques (ZFeatureMap, ZZFeatureMap, and PauliFeatureMap). Results indicate that QSVC is notably robust under noise, whereas Peg-QSVC and QNN are more sensitive, particularly to depolarizing and amplitude-damping noise. The PauliFeatureMap is especially vulnerable, highlighting difficulties in maintaining accurate classification under noisy conditions. These findings underscore the critical importance of feature map selection and noise mitigation strategies in optimizing QML for genomic classification, with promising implications for personalized medicine.", "sections": [{"title": "I. INTRODUCTION", "content": "THE global quantum technology market is forecasted to reach approximately USD 173 billion by 2040, with quantum computing projected to contribute between USD 28 billion and USD 72 billion by 2035, expanding further to USD 45 billion to USD 131 billion by 2040. This projected growth underscores the importance of applications like Quantum Machine Learning (QML), which are expected to be significant drivers of early quantum computing value creation [1].\nIn this evolving landscape, QML stands out as a transformative intersection of quantum algorithms and classical machine learning, offering solutions to highly complex problems. Enabled by advances in quantum hardware and algorithms, QML has the potential to revolutionize fields such as data analysis, optimization, and predictive modeling [2], [3]. QML represents a near-term opportunity for quantum computers to showcase computational advantages over classical approaches, particularly through parameterized quantum circuits [4], enabling efficient processing of high-dimensional data that remains challenging for traditional methods [5].\nA promising application for QML is genomics, where the ability to analyze extensive genetic datasets is vital for understanding gene-disease relationships and advancing personalized treatments. Genomic data, characterized by its high dimensionality and complex structure, poses significant computational demands, often exceeding the capacity of classical algorithms. QML, leveraging the unique quantum properties of superposition and entanglement, can substantially improve data processing and pattern recognition, providing new insights into genetic diseases and enabling tailored therapies [6]. However, the precision required for genomic analysis makes it particularly sensitive to quantum noise, which presents a major barrier to QML applications in this field [5]. Even minimal quantum noise in genomic classification tasks can lead to data misclassification, reducing the reliability of QML models for critical medical applications such as disease diagnosis and treatment development. Noisy Intermediate-Scale Quantum (NISQ) devices [7], [8], which offer near-term quantum capabilities [9], hold promise for revolutionizing genome sequencing and analysis through QML [10]. Despite their potential, these devices are highly susceptible to environmental interactions, leading to quantum noise that can disrupt and degrade QML performance. Addressing these limitations is crucial to unlocking the full potential of QML for genomic data processing.\nTo fully understand and unlock the potential of QML algorithms, it is essential to comprehensively understand how they behave under various quantum noise types arising from current hardware limitations and environmental interactions. To address these hardware constraints, methodologies should be designed to ensure compatibility with existing NISQ devices, balancing the requirements of real-world applications with the limitations imposed by NISQ systems.\nCurrent studies often address hardware limitations by employing small or ad hoc datasets, which do not accurately reflect real-world scenarios and thus may obscure the true potential of QML [11]\u2013[14]. Furthermore, existing research on quantum noise in QML models typically examines only a limited set of noise types [11]\u2013[13], leaving room for a more in-depth exploration that could enhance the reliability and applicability of QML in practical settings.\nIn this work, we investigate the impact of quantum noise on various QML algorithms applied to a genomic sequence dataset [15]. By incorporating realistic noise models into our simulations, we assess how different types and levels of noise affect learning processes, convergence, and generalization within QML algorithms. Our research aims to provide insights into optimizing QML for genomics, with a focus on applications such as disease detection and protein folding [16].\nWe define the binary classification task over a genomic dataset as D = {(x\u2081, y\u1d62)}=1, where x \u2208 \u211d\u1d48 represents genome sequences and y\u1d62 \u2208 {0,1} indicates transcript types [15] and the basic flow of the work is shown in Fig. 1. Our QML model M\u03b8 with parameters \u03b8 aims to predict \u0177\u1d62 ="}, {"title": "A. Our Contributions", "content": "1) Systematic Evaluation of Quantum Noise Effects on redesigning QML Algorithms: Unlike previous works that focused on specific noise models, we provide a comprehensive analysis of the impact of various quantum noise models such as dephasing, amplitude damping, depolarizing, thermal relaxation noise, bit-flip and phase-flip errors on the performance of QML algorithms applied to genomic data, offering a more holistic understanding of noise effects. By incorporating realistic noise models, our paper highlights how different types and levels of quantum noise influence learning outcomes, convergence, and model generalization.\n2) Optimizing QML for Genomic Data Classification: We identify critical factors, including feature map selection, that significantly affect the robustness of QML models in genomic sequence classification. These insights advance the development of more noise-resistant QML models, particularly in areas such as disease detection and personalized medicine, where the complexity and precision of genomic data are crucial.\n3) Practical Insights into the Use of NISQ Devices for Genomic Analysis: We bridge the gap between theoretical quantum computing and its practical application in genomics by demonstrating how NISQ devices can be used for large-scale genomic data processing. Our study underscores the potential of NISQ-era quantum computers in accelerating tasks such as genome sequencing while also addressing the key challenges posed by quantum noise."}, {"title": "II. UNDERSTANDING QUANTUM NOISE", "content": "Developing QML methods capable of operating within realistic, noisy quantum environments relies on both understanding and accurately modeling quantum noise. This section provides an overview of quantum noise and key noise models, illustrating the importance of a comprehensive approach to studying quantum noise.\nQuantum noise is an intrinsic aspect of quantum systems, resulting from fundamental interactions with the environment and the probabilistic nature of quantum mechanics. Unlike classical systems, where noise may affect only part of the system, quantum systems are highly sensitive to environmental interactions. These interactions disturb qubit states, causing errors and a loss of coherence. This degradation of quantum coherence leads to non-deterministic errors that are particularly challenging to mitigate [17]. Maintaining qubit coherence over time is essential for efficient quantum computing. Quantum noise introduces errors that can significantly reduce the performance of quantum algorithms. This is especially problematic in QML, where subtle quantum phenomena are essential for data processing and learning. Quantum noise may distort learning outcomes, reducing the effectiveness of QML models. A thorough examination of quantum noise is therefore essential for the design of robust quantum technologies, as noise-induced disturbances can severely impair the performance of QML.\nThe effects of quantum noise are typically analyzed using a mathematical framework that models the evolution of quantum states under noise. One widely used approach is the Kraus operator formalism [18], [19], which characterizes quantum noise as a quantum channel [20]. This quantum channel is a completely positive, trace-preserving map that transforms an"}, {"title": "A. Dephasing/ Phase Damping Noise", "content": "Dephasing noise, also referred to as phase damping\u00b9 , weakens a quantum system's phase coherence while leaving populations and energy levels unchanged. This type of noise arises when environmental interactions cause the qubit's phase to fluctuate randomly, creating uncertainty about its coherence relative to other quantum states [21]. Over time, this interaction leads to a gradual loss of quantum coherence [22]. In practical quantum systems, dephasing typically results from fluctuating electromagnetic fields, thermal noise, or similar external perturbations affecting qubit energy levels.\nUsing the Kraus operator formalism, dephasing noise affecting a single qubit is modeled with the following operators, K\u2080 = \u221a{1 \u2212 p}I, K\u2081 = \u221a{p}\u03c3z, where p is the probability of a phase flip occurring, I is the identity matrix, and \u03c3z is the Pauli-Z operator. The evolution of the qubit's density matrix \u03c1 under dephasing noise is given by, \u03c1' = K\u2080\u03c1K\u2080\u2020 + K\u2081\u03c1K\u2081\u2020 and by substituting the Kraus operators into it, we obtain \u03c1' = (1 \u2212 p)\u03c1 + p\u03c3z\u03c1\u03c3z. For an initial density matrix \u03c1 expressed and the evolution under dephasing noise simplifies\nto, \u03c1' = (\\begin{smallmatrix} p_{00} & (1-2p)p_{01} \\\\ (1-2p)p_{10} & p_{11} \\end{smallmatrix}).\nThe off-diagonal elements (coherence terms) of \u03c1 are reduced by a factor of (1-2p), while the diagonal elements (populations) remain unchanged [23]. In QML, qubit coherency is essential for quantum parallelism and interference effects, which give quantum computers their full computational capabilities. Dephasing noise typically lowers the quantum coherence required for these quantum events, which has a significant effect on how well those quantum models operate. For instance, dephasing causes an information loss in quantum classifier models due to the loss of relative phases encoded in the qubits, which are essential for accurate prediction and learning. We first investigate the effects of dephasing noise on qubit phase coherence, and then we focus on amplitude damping noise, which results in a qubit losing its energy state to the environment."}, {"title": "B. Amplitude damping noise", "content": "Amplitude damping noise models the loss of energy from a quantum system to its environment, particularly relevant in systems experiencing spontaneous emission or energy relaxation. It describes how a qubit decays from an excited state |1\u27e9 to a ground state |0\u27e9 by emitting a photon or other excitations [24]. It is crucial as it represents a fundamental mechanism by which quantum information is lost due to energy dissipation. Amplitude damping occurs naturally due to interactions with the electromagnetic field or thermal environments, where energy exchange leads to the relaxation of excited states. The evolution of a quantum system under amplitude damping noise is described using the Kraus operators,\nK\u2080 = (\\begin{smallmatrix} 1 & 0 \\\\ 0 & \u221a{1-\u03b3} \\end{smallmatrix}), K\u2081 = (\\begin{smallmatrix} 0 & \u221a{\u03b3} \\\\ 0 & 0 \\end{smallmatrix}).\nHere, \u03b3 is the probability of the qubit decaying from the excited state\n(i.e., |1\u27e9) to the ground state |0\u27e9 [25]. The evolved density matrix\nis, \u03c1' = (\\begin{smallmatrix} p_{00} + \u03b3p_{11} & \u221a{1-\u03b3} p_{01} \\\\ \u221a{1-\u03b3} p_{10} & (1 - \u03b3)p_{11} \\end{smallmatrix}).\nThis indicates that the population in the excited state p\u2081\u2081 decreases by a factor of (1 \u2212 \u03b3), reflecting the system's relaxation to the ground state. The coherence terms p\u2080\u2081 and p\u2081\u2080 are reduced by (\u221a{1 \u2212 \u03b3}). Amplitude damping noise affects QML algorithms by altering the populations of qubit states and reducing coherence. In quantum circuits used for machine learning tasks, such as variational algorithms or quantum feature maps, amplitude damping can lead to a loss of information encoded in the amplitude of the quantum states. This may result in decreased accuracy of the learning model or convergence issues during training. While amplitude damping models energy loss, another important type of noise is depolarizing noise, which represents random errors affecting both the amplitude and phase of qubits. We explore this next."}, {"title": "C. Depolarizing Noise", "content": "Depolarizing noise is a type of quantum noise that describes the process where a quantum system loses its coherence by becoming a maximally mixed state [26]. It models the effect of random errors that can flip the qubit's state or change its phase, effectively depolarizing the quantum state. Depolarizing noise can result from various imperfections in quantum hardware, such as gate errors, cross-talk between qubits, or uncontrolled interactions with the environment. The Kraus operators for depolarizing noise [27] are, K\u2080 = \u221a{1 \u2212 p}I, K\u2081 = \u221a{p}X, K\u2082 = \u221a{p}Y, K\u2083 = \u221a{p}Z. Here, p is the depolarizing probability, and X, Y, and Z are the Pauli matrices and the identity matrix I. The density matrix \u03c1 of a qubit evolves under depolarizing noise according to the Kraus operators as, \u03c1' = \u2211{i=0}\u00b3 K\u1d62\u03c1K\u1d62\u2020. Under depolarizing noise, the density matrix, \u03c1 evolves\nas, \u03c1' = (\\begin{smallmatrix} (1-p)p_{00} + \\frac{p}{2} & (1-p)p_{01} \\\\ (1-p)p_{10} & (1-p)p_{11} + \\frac{p}{2} \\end{smallmatrix}).\nThis expression shows that the effect of depolarizing noise is to shrink the off-diagonal coherence terms p\u2080\u2081 and p\u2081\u2080 by a factor of (1 \u2013 p), leading to a reduction in quantum coherence. Additionally, the populations p\u2080\u2080 and p\u2081\u2081 are driven towards \\frac{1}{2}, corresponding to the maximally mixed state. This result implies that the quantum state loses its distinguishability, effectively becoming more random as the noise increases.\nDepolarizing noise is particularly detrimental to QML algorithms because it represents a complete loss of quantum information. As QML models often rely on subtle quantum correlations and superpositions to encode and process information, depolarizing noise can severely impair their functionality."}, {"title": "D. Thermal Relaxation Noise", "content": "Thermal relaxation noise models the effects of a qubit interacting with a thermal environment, causing transitions between energy states due to absorption and emission of thermal energy. This includes both relaxation from excited states to ground states and excitation from ground states to excited states due to thermal energy. In a finite-temperature environment, qubits can absorb thermal energy, leading to excitation, or release energy, leading to relaxation. This bidirectional energy exchange is characterized by thermal relaxation time and depends on the temperature of the environment [28].\nThe Kraus operators for thermal relaxation noise are, K\u2080 = \u221a{1 \u2212 \u03c1\u2080 \u2212 \u03c1\u2081}I, K\u2081 = \u221a{\u03c1\u2081}\u03c3\u207b, K\u2082 = \u221a{\u03c1\u2080}\u03c3\u207a. Here, \u03c1\u2080 and \u03c1\u2081 are the probabilities associated with thermal excitation and relaxation processes, respectively, and are related to the relaxation time T\u2081 and the temperature of the environment [29]. The operators \u03c3\u207b and \u03c3\u207a are the lowering and raising operators. The density matrix \u03c1 of a qubit under the influence of thermal noise evolves according to the Kraus operators as, \u03c1' = \u2211{i=0}\u00b2 K\u1d62\u03c1K\u1d62\u2020, and the resulting evolved density matrix is, \u03c1' = (1 \u2212 \u03c1\u2080 \u2212 \u03c1\u2081)\u03c1 + \u03c1\u2081\u03c3\u207b\u03c1\u03c3\u207a + \u03c1\u2080\u03c3\u207a\u03c1\u03c3\u207b. After expanding the terms, we have get, \u03c1' = (\\begin{smallmatrix} (1 - \u03c1_{0} - \u03c1_{1})p_{00} + \u03c1_{1}p_{11} & (1 - \u03c1_{0} - \u03c1_{1})p_{01} \\\\ (1 - \u03c1_{0} - \u03c1_{1})p_{10} & (1 - \u03c1_{0} - \u03c1_{1})p_{11} + \u03c1_{1}p_{00} \\end{smallmatrix}).\nThermal relaxation noise redistributes the qubit populations and reduces coherence. The probability of the ground state p\u2080\u2080 increases by \u03c1\u2080\u03c1\u2081\u2081, while the excited state p\u2081\u2081 decreases by (1-\u03c1\u2080 - \u03c1\u2081) but gains \u03c1\u2081\u03c1\u2080\u2080. The off-diagonal coherence terms p\u2080\u2081 and p\u2081\u2080 are diminished by (1-\u03c1\u2080 - \u03c1\u2081), reflecting a loss of coherence and energy exchanges with the environment.\nThermal relaxation noise affects QML algorithms by altering the energy populations of qubits in a way that depends on the environment's temperature. This can introduce errors in computations and reduce the fidelity of quantum operations. For instance, in algorithms that require precise control of qubit states, thermal excitations can introduce unwanted transitions that lead to incorrect results. In addition to continuous noise processes, discrete errors such as bit-flip and phase-flip errors also play a significant role in quantum computations. We now discuss these errors and their impact on quantum algorithms."}, {"title": "E. Bit-Flip Errors", "content": "Bit-flip errors occur when a qubit's state is flipped from |0\u27e9 to |1\u27e9 or vice versa. This type of error is analogous to classical bit-flip errors in digital systems but has quantum mechanical origins, such as interactions with the environment that cause energy transitions or imperfections in quantum gates [30]. For a single qubit, the Kraus operators that model bit-flip noise are [31], E\u2080 = \u221a{1 \u2212 p}I, E\u2081 = \u221a{p}X, where I is the identity operator, X is the Pauli-X operator, and p is the probability of a bit-flip occurring. The action of the bit-flip channel on the density matrix \u03c1 is, \u03c1' = E\u2080\u03c1E\u2080\u2020 + E\u2081\u03c1E\u2081\u2020, and expanding it gives us, \u03c1' = (1 \u2212 p)\u03c1 + pX\u03c1X. This equation indicates that with probability (1 \u2013 p), the state remains unchanged,"}, {"title": "F. Phase-Flip Errors", "content": "Phase-flip errors affect the relative phase between quantum states without altering their populations. Specifically, they change the sign of the phase of the |1\u27e9 state, effectively flipping the phase of the qubit [31]. This type of error disrupts the interference patterns essential for many quantum algorithms. This noise affects the relative phase between the basis states but leaves their amplitudes unchanged. Phase-flip errors are often considered alongside bit-flip errors, as they can occur due to similar environmental interactions, but their impact is on the phase rather than the amplitude of the quantum state.\nThe Kraus operators for phase-flip noise [31] are, E\u2080 = \u221a{1 \u2212 p}I, E\u2081 = \u221a{p}Z where I is the identity operator and Z is the Pauli-Z operator. Here, p is the probability of a phase-flip occurring. The action on the density matrix \u03c1 is described by, \u03c1' = E\u2080\u03c1E\u2080\u2020 + E\u2081\u03c1E\u2081\u2020 = (1-p)\u03c1 + pZ\u03c1Z This equation indicates that with probability 1 \u2013 p, the state remains unchanged, and with probability p, the phase of the state undergoes a flip. After applying the phase-flip channel and simplifying the expression, the resulting evolved density matrix for a pure state\nis given by, \u03c1' = (\\begin{smallmatrix} p_{00} & (1-2p)p_{01} \\\\ (1-2p)p_{10} & p_{11} \\end{smallmatrix}). Phase-flip errors can degrade the performance of QML algorithms by disrupting quantum superpositions and entanglement, which rely on precise phase relationships. In QML, phase-flip errors can lead to incorrect interference outcomes, affecting the learning process.\nIn summary, a thorough understanding of the various types of quantum noise and their respective effects on quantum systems is critical for the development of reliable and efficient QML algorithms. By employing the Kraus operator formalism to model these noise processes, we can accurately simulate the performance of quantum algorithms in realistic, noisy environments. This knowledge is indispensable for advancing robust quantum technologies and ensuring that QML algorithms remain effective in practical applications."}, {"title": "G. Feature Mapping in QML", "content": "In QML, feature mapping plays a pivotal role by encoding classical data into quantum states, allowing quantum algorithms to learn from and process the data efficiently [32]. The choice of feature map can have a profound influence on the performance of a QML model, as it determines how information is represented and manipulated within the quantum system. Different feature maps provide varying levels of expressivity and are more or less resilient to quantum noise, which can affect the quantum states during encoding and processing. This subsection explores three feature mapping methods commonly implemented in Qiskit: the ZFeatureMap, ZZFeatureMap, and PauliFeatureMap.\n1) ZFeatureMap: The ZFeatureMap [33] encodes classical data into quantum states by applying rotations around the Z-axis of the Bloch sphere for each qubit in the quantum register. This feature map is relatively straightforward, making it suitable for datasets where features are independent and do not require interactions between qubits. In the ZFeatureMap, each classical feature is mapped to a rotation around the Z-axis for the corresponding qubit. This transformation encodes the data in the phase of the quantum state without introducing entanglement between qubits. It is ideal for problems where feature independence is sufficient, but it lacks the ability to capture interactions or correlations between features. The ZFeatureMap's lack of entanglement between qubits makes it relatively less sensitive to noise that disrupts qubit interactions. However, phase noise (dephasing) can still affect the rotation angles and alter the quantum state's phases, potentially leading to inaccuracies in the encoded information.\nWhile the ZFeatureMap is effective for encoding independent features, many real-world datasets exhibit correlations between features that must be captured to achieve accurate predictions. This brings us to the ZZFeatureMap [32], which enhances the expressivity of the feature map by incorporating entanglement between qubits.\n2) ZZFeatureMap: The ZZFeatureMap [32] extends the ZFeatureMap by introducing entanglement between qubits. This feature map is more expressive than the ZFeatureMap because it captures pairwise interactions between features, making it well-suited for problems where feature correlations are important. While the ZFeatureMap focuses on individual feature rotations, the ZZFeatureMap incorporates entanglement, which allows it to capture relationships between features. By adding entangling gates between qubits, the ZZFeatureMap encodes interactions between pairs of features, providing a richer and more expressive representation of the data. This expressivity comes at the cost of increased sensitivity to quantum noise, particularly errors that affect entangled qubits. The introduction of entanglement makes the ZZFeatureMap more expressive but also more vulnerable to quantum noise, particularly noise that affects the coherence between qubits. Errors in the entanglement process, such as phase-flip noise, can disrupt the pairwise feature interactions, leading to degraded performance in learning tasks that rely on feature correlations.\nThe ZZFeatureMap captures pairwise feature interactions, but some datasets require higher-order interactions. The PauliFeatureMap [32], [34] extends this by using multi-axis rotations and complex qubit entanglement to encode more intricate feature dependencies.\n3) PauliFeatureMap: The PauliFeatureMap [32], [34] generalizes the feature mapping process by incorporating rotations around multiple axes (X, Y, and Z) and complex entangling operations. This feature map is highly expressive, capable of capturing higher-order interactions and intricate patterns within the data, making it particularly powerful for complex datasets. The PauliFeatureMap goes beyond simple rotations around the Z-axis by allowing rotations around multiple Pauli axes (X, Y, and Z) and introducing more intricate entangling operations between qubits. This added complexity enables the"}, {"title": "III. MODELING QML ALGORITHMS", "content": "In this section, we focus on modeling the impact of quantum noise on four representative QML algorithms: i) Quantum Support Vector Classifier (QSVC); ii) Pegasos-QSVC (Peg-QSVC); iii) QNN; iv) Variational Quantum Classifier (VQC). These algorithms are selected due to their foundational roles in QML and their reliance on quantum phenomena like superposition and entanglement, making them particularly susceptible to quantum noise. Understanding how quantum noise affects these algorithms is crucial for advancing QML applications in NISQ devices, particularly in fields like genomics where data complexity demands robust computational methods."}, {"title": "A. QSVC", "content": "The QSVC extends the classical Support Vector Machine (SVM) into the quantum realm, leveraging quantum computing to handle high-dimensional data efficiently. The core idea is to use a quantum feature map to encode classical data into quantum states, enabling the computation of inner products (quantum kernels) in a Hilbert space that may be computationally infeasible classically [35], [36]. In QSVC, data is encoded into quantum states and utilizing quantum parallelism to evaluate the kernel function efficiently. The quantum kernel measures the similarity between data points in the quantum feature space.\nQuantum noise can disrupt the delicate quantum states used in QSVC, leading to inaccuracies in kernel computations. This affects the classifier's ability to correctly measure the similarity between data points, potentially degrading its classification performance. Modeling the impact of quantum noise allows us to anticipate these issues. Our goal is to train a QSVC model M\u03b8 with parameters \u03b8 on the noisy quantum states N(\u03c1\u1d62). QSVC first encodes the classical data x \u2208 \u211d\u1d48 into quantum states \u03c1\u1d62. The core of the QSVC relies on the quantum kernel, defined as K(x\u1d62, x\u2c7c) = Tr[\u03c6(x\u1d62)\u03c6(x\u2c7c)], here K(x\u1d62, x\u2c7c) is the quantum kernel function, and Tr[] denotes the trace operation. This kernel measures the similarity between two quantum states corresponding to the input vectors x\u1d62 and x\u2c7c.\nThe QSVC model seeks to find a decision function f(x) = sign (\u2211{i=1}{N} \u03b1\u1d62y\u1d62K(x\u1d62, x) +b). Here, \u03b1\u1d62 is the Lagrange multipliers, optimized during training, K(x\u1d62, x) is the quantum kernel between the training data x\u1d62 and the input x, b is the bias term [36], [37]. When quantum noise is introduced into the system, it affects the quantum states as \u03c1 = N(\u03c1\u1d62). The noisy quantum kernel can be defined as, K'(x\u1d62, x\u2c7c) = Tr[N(\u03c1\u1d62)N(\u03c1\u2c7c)]. This K'(x\u1d62, x\u2c7c) is then used in the QSVC decision function, f'(x) = sign (\u2211{i=1}{N} \u03b1\u1d62y\u1d62K'(x\u1d62, x) +b). The goal is to find parameters \u03b8 that minimize the loss function L(\u03b8) despite noise, \u03b8* = arg min{\u03b8} E{(x\u1d62,y\u1d62)} [L(y\u1d62, f'(x\u1d62))].\nWhile the QSVC is a classical SVM extension that benefits from quantum-enhanced kernels, the Peg-QSVC, discussed next, applies a stochastic gradient descent approach for optimization, improving scalability and efficiency."}, {"title": "B. Peg-QSVC", "content": "The Peg-QSVC combines the stochastic gradient descent (SGD) efficiency of the Pegasos algorithm with quantum computing's capabilities. It aims to solve the SVM optimization problem using quantum kernels, providing a scalable approach to large datasets. Peg-QSVC iteratively updates the model parameters using SGD, utilizing quantum computations to evaluate the necessary inner products efficiently. The use of quantum kernels allows the algorithm to capture complex patterns in data [38]. Quantum noise impacts the Peg-QSVC by introducing errors in the quantum kernel evaluations during the iterative updates. This can slow down convergence or lead to convergence to suboptimal solutions. Understanding the noise effects is vital for ensuring the reliability and efficiency of the Peg-QSVC.\nThe goal of Peg-QSVC is to find the optimal parameters \u03b8 that minimize the regularized hinge loss function [32]. The SVM optimization problem for the binary classification task can be expressed as, min{w,b} \\frac{1}{2} ||w||\u00b2 + \u03bb \u2211{i=1}{N} max(0,1 \u2212 y\u1d62(w\u00b7 \u03c6(x\u1d62) + b)). Here, w is the weight vector, b is the bias term, \u03bb > 0 is the regularization parameter, \u03c6(x\u1d62) is the quantum feature map of the input x\u1d62, which maps the input data to a higher-dimensional quantum Hilbert space, y\u1d62\u2208 {0,1} are the binary labels. The optimization is performed iteratively by updating w and b using stochastic sub-gradient descent. For each iteration t, a random sample (x\u1d62, y\u1d62) is selected, and the weight vector is updated as, w{t+1} = (1 \u2212 \\frac{1}{t}) w{t} + \\frac{1}{t}\u03bby\u1d62\u03c6(x\u1d62) I(y\u1d62(w{t} \u00b7 \u03c6(x\u1d62) + b) < 1).\nThe objective is to minimize the noisy hinge loss function, which now depends on \u03c1. This is achieved by finding the optimal parameters \u03b8* that satisfy, \u03b8* = arg min{\u03b8} \\frac{1}{2} ||w||\u00b2 + \u03bb \u2211{i=1}{N} max(0,1 \u2212 y\u1d62(w\u00b7 \u03c6(N(\u03c1\u1d62)) + b)). Here, the optimization process iteratively updates w by incorporating the noisy quantum feature mapping \u03c6(N(\u03c1\u1d62)). The aim is to minimize the loss function while accounting for the effects of quantum noise. After examining the noise impact on QSVC-based models, we now turn to the QNN, which employ a fundamentally different approach, leveraging quantum circuits analogous to classical neural networks for learning complex patterns."}, {"title": "C. QNN", "content": "QNNs aim to replicate the success of classical neural networks by using quantum circuits to model complex functions. QNNs leverage quantum superposition and entanglement to achieve higher expressiveness and computational advantages. A QNN consists of layers of quantum gates with tunable parameters, similar to weights in classical neural networks. The network processes input quantum states and produces outputs through measurements, which are used for predictions [39]. Quantum noise can disrupt delicate quantum states within the QNN, leading to errors in the output probabilities and gradients used for training. Noise can affect the forward propagation of quantum states and the backward propagation of gradients, making training difficult.\nA QNN consists of a series of quantum gates arranged in layers, where each layer can be considered analogous to a layer in a classical neural network. The network parameters \u0398 correspond to the angles of rotation gates or other tunable quantum gates within the circuit [39]. Let U(\u0398) denote the unitary operation representing the entire QNN circuit. The QNN takes a quantum state \u03c1\u1d62 as input. The output state of the QNN, after applying the unitary operation is given by \u03c1{out, i} = U(\u03b8)\u03c1\u1d62U\u2020(\u03b8), where U\u2020(\u03b8) is the Hermitian conjugate of U(\u03b8). The noisy output state is \u03c1'{out,i} = N(\u03c1{out,i}) = N (U(\u03b8)\u03c1\u1d62U\u2020(\u03b8)). The noise can be modeled by various types of quantum channels as disccused above, which introduce different forms of perturbations\nto the quantum states. To obtain the predicted label \u0177\u1d62, a measurement is performed on the noisy output state \u03c1'{out,i}. The probability of measuring the state |1\u27e9 is given by, P(\u0177\u1d62 = 1) = Tr (\u03c1'{out, i}|1\u27e9\u27e81|). Using binary cross-entropy loss, L(\u03b8) =\n\u2212 \\frac{1}{N} \u2211{i=1}{N} [y\u1d62 log P(\u0177\u1d62 = 1) + (1 \u2212 y\u1d62) log(1 \u2013 P(\u0177\u1d62 = 1))]. The optimization objective is to find the optimal parameters \u03b8* that minimize the loss function across the noisy condition, \u03b8* = arg min{\u03b8} E{(x\u1d62,y\u1d62)} [L(y\u1d62, M\u03b8(N(\u03c1\u1d62)))], where M\u03b8(N(\u03c1\u1d62)) represents the QNN's output under the influence of quantum noise.\nWhile QNNs rely on quantum circuits to process data, the next model, the VQC, combines quantum circuits with classical optimization to solve classification problems."}, {"title": "D. VQC", "content": "The VQC is a hybrid algorithm that utilizes parameterized quantum circuits (PQC) to transform input data and employs classical algorithms to optimize the parameters [32], [37]. VQC encodes data into quantum states and processes them using a variational circuit U(\u03b8). Measurements on the output states provide information used for classification. The parameters \u03b8 are adjusted to minimize a loss function, improving the classifier's performance. Quantum noise impacts the VQC by altering the quantum states during processing and affecting measurement results. This leads to errors in the computed expectation values used for updating the parameters, potentially hindering the convergence and accuracy of the classifier.\nThe first step in the VQC is to encode the classical input data x into a quantum state \u03c1\u1d62. The PQC is defined by a set of parameters \u03b8, which are adjusted during the training process. The action of the PQC on the quantum state \u03c1\u1d62 is described by, U(\u03b8) : \u03c1\u1d62 \u2194 \u03c1\u1d62' = U(\u03b8)\u03c1\u1d62U\u2020(\u03b8). Where U(\u03b8) is a unitary operator generated by the PQC with parameters \u03b8, and \u03c1\u1d62' is the quantum state after applying the PQC. A measurement is then performed, using a set of Pauli operators {\u03c3\u2c7c}, and the expectation value of these operators provides\nthe output. y\u1d62 = sign (\u2211{j} w\u2c7c \u27e8\u03c1' |\u03c3\u2c7c| \u03c1\u1d62'\u27e9), where w\u2c7c are weights associated with the measurement outcomes and sign(\u00b7) function determines the predicted class label \u0177\u1d62. The PQC then processes this noisy state \u03c1', and the measurement is performed on the transformed noisy state, \u03c1 = U(\u03b8)\u03c1'U\u2020(\u03b8). The training process of the VQC involves minimizing a loss function L(\u03b8) that quantifies the difference between the predicted labels \u0177\u1d62 and the true labels y\u1d62. In the presence of quantum noise, this optimization problem can be expressed as:\n\u03b8* = arg min{\u03b8} E{(x\u1d62,y\u1d62)} [L (y\u1d62, sign (\u2211{j} w\u2c7c \u27e8\u03c1' |\u03c3\u2c7c| \u03c1\u1d62'\u27e9))].\nIn this section, we have modeled the impact of quantum noise on four fundamental QML algorithms. We have highlighted how quantum noise affects each algorithm's performance by providing intuitive explanations and mathematical formulations."}, {"title": "IV. RESULT AND ANALYSIS", "content": "In this study, we utilized the democoding vs intergenomic dataset from the Genomic Benchmarks project [15], designed to classify genomic sequences as either protein-coding or non-coding. The dataset contains 100,000 sequences, equally split between the two classes, each with a uniform length of 200 base pairs. To gain practical insights into the application of NISQ devices for genome sequence classification, we employ IBM's AerSimulator to replicate the realistic noisy conditions inherent in IBM's quantum computers. Additionally, we implemented four distinct QML algorithms, as described in the previous section, using IBM's Qiskit toolkit [40]. These implementations followed standard configurations, with all parameters set to their default values. This approach provides a consistent baseline for evaluating the performance of these models under varying conditions, which will be analyzed in subsequent sections for genome sequence classification.\nWe used a subset of the dataset for training and testing the QML models, converting genome sequences into numerical format through text vectorization. To reduce computational complexity, we applied Principal Component Analysis (PCA) [10], reducing the data to four dimensions, corresponding to the four qubits used in this study. We then encoded the reduced data into quantum states using the feature maps previously discussed."}, {"title": "A. Quantum State Preparation", "content": "Quantum noise significantly impacts QML, particularly during quantum state preparation, where it can disrupt state fidelity and model performance. The impact varies across different feature maps, showing distinct levels of sensitivity to noise and state degradation.\nIn the absence of noise as shown in Fig. 2, ZFeatureMap, ZZFeatureMap, and PauliFeatureMap present distinct patterns in the output state distributions, primarily concentrating counts around a few high-probability states. For instance, in the ZFeatureMap, states such as |0000\u27e9 and |0001\u27e9, indicate that these quantum states capture most of the information encoded by the feature map. The ZZFeatureMap shows a more evenly spread distribution across high-probability states, with states"}, {"title": "B. Training and Test Performance", "content": "We now present the training and testing accuracies of various discussed QML models under different quantum noise levels using encoding techniques. We analyze the results for error rates of 0.01", "Noise": "Fig. 9 illustrates the impact of amplitude damping noise on the performance of various QML models using different feature maps. Across all models and feature maps, training accuracy remains relatively stable regardless of noise levels and the number of shots, indicating robustness in fitting training data despite amplitude damping noise. However, testing accuracy varies more significantly, particularly at higher noise levels"}]}