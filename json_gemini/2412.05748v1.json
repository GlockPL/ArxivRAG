{"title": "Constrained Control for Autonomous Spacecraft Rendezvous: Learning-Based Time Shift Governor", "authors": ["Taehyeun Kim", "Robin Inho Kee", "Ilya Kolmanovsky", "Anouck Girard"], "abstract": "This paper develops a Time Shift Governor (TSG)-based control scheme to enforce constraints during rendezvous and docking (RD) missions in the setting of the Two-Body problem. As an add-on scheme to the nominal closed-loop system, the TSG generates a time-shifted Chief spacecraft trajectory as a target reference for the Deputy spacecraft. This modification of the commanded reference trajectory ensures that constraints are enforced while the time shift is reduced to zero to effect the rendezvous. Our approach to TSG implementation integrates an LSTM neural network which approximates the time shift parameter as a function of a sequence of past Deputy and Chief spacecraft states. This LSTM neural network is trained offline from simulation data. We report simulation results for RD missions in the Low Earth Orbit (LEO) and on the Molniya orbit to demonstrate the effectiveness of the proposed control scheme. The proposed scheme reduces the time to compute the time shift parameter in most of the scenarios and successfully completes rendezvous missions.", "sections": [{"title": "I. Introduction", "content": "Spacecraft proximity operations (SPO) involve two spacecraft maneuvering near each other in space, e.g., to perform rendezvous and docking (RD). The primary spacecraft (referred to as the Chief) maintains a nominal orbit passively or actively, while the other spacecraft (referred to as the Deputy) is actively controlled to perform the RD mission [1] while satisfying constraints on thrust magnitude, on the line of sight (LoS) constraint of the docking port and on relative velocity.\nMany spacecraft RD missions were conducted near and beyond the Earth. The first spacecraft docking mission was a part of the Gemini 8 mission, in which astronauts manually performed the docking with the target vehicle. The following RD missions were also conducted, as was done for the Apollo mission in 1969 and the Skylab mission in 1973. As docking techniques were cultivated through former missions, docking missions became complicated and required an autonomous system to ensure safety and reduce costs. The first autonomous spacecraft docking mission was performed as a part of the Orbital Express mission in 2007. As examples in private sectors, Northrop Grumman then began to provide commercial resupply services to the ISS in 2014, and SpaceX launched spacecraft docking missions for supply service to NASA and for Axiom Space in 2020. Thus, the RD techniques played a crucial role in space missions while satisfying the growing interest of the space community in complicated missions.\nVarious control approaches for RD have been studied. In particular, the artificial potential function (APF) methods have been applied to ensure safety to address in RD operations [2, 3]. However, the use of APFs to handle multiple constraints and simultaneous state and control constraints can be not straightforward. Model Predictive Control (MPC) based on the Clohessy-Wiltshire-Hill (CWH) linearized relative motion model has"}, {"title": "II. Problem Formulation", "content": "In our study, we consider a docking mission involving the Deputy and the Chief spacecraft on orbit, with mission-specific constraints. This section will detail the coordinate systems, dynamic models, control strategies, and constraints that define our approach to the RD mission. We assign the subscripts c and d to denote the Chief and Deputy spacecraft respectively, while the subscript i is used to denote a spacecraft that could be either the Chief or the Deputy.\nA. Coordinate systems\nIn this work, two right-handed coordinate systems are employed to describe the spacecraft equations of motion and relative motion, as shown in Fig. 1. The origin of the Earth-centered inertial (ECI) frame,\n8 : {\u03bb\u03b5, \u0177\u03b5, \u03b6\u03b5}, is at the center of the Earth O\u025b, with the x-axis pointing towards the vernal equinox-the direction from the Earth to the Sun at noon on the day of the spring equinox, the 2-axis pointing towards the Earth's rotational axis, and the \u0177-axis completing the right-handed system.\nThe local Velocity-Normal-Binormal (VNB) frame, L: {Oc, \u00c2 \u00a3, \u0177 \u00a3, \u00ce\u00a3}, is also defined to describe the relative motion of objects with respect to the Chief spacecraft. Unlike the ECI frame, the VNB frame is a rotating and accelerating coordinate system and has its origin at the center of mass of the Chief spacecraft Oc"}, {"title": "B. Dynamics", "content": "The equations of motion of spacecraft are given by\n$X\u2081 = f (t, Xi(t), ui(t)),$ (2)\nwhere $Xi = [xi, yi, Zi, \u0161i, \u00ffi, \u017ci]T$, for $i \u2208 {c,d}$, and $u\u2081 = [U1,i,U2,i, U3,i] denote the spacecraft state and the control input to the spacecraft, expressed in the ECI frame. Note that the Chief spacecraft maintains its nominal orbit without using control input, i.e., uc = 0, while the Deputy spacecraft uses control input to track the target. In this work, we omit the subscript d in the control input, i.e., u = ud. The translational equations of motion for spacecraft are given as,\n$\\frac{\u00b7\u00b7}{ri}= -\\frac{\u03bc}{ri^{3}}\\vec{r_{i}} + \\vec{u_{i}},$ (3)\nwhere u stands for the gravitational parameter, ri is the spacecraft position vector and $r = ||7||$ is its 2-norm."}, {"title": "C. Discrete Time Linear Quadratic Controller", "content": "Since the TSG is an add-on scheme, we need a nominal controller that is (locally) stabilizing to a target along the reference orbit. In this work, the discrete-time linear quadratic (DTLQ) controller is implemented to provide an optimal control solution stabilizing the Deputy spacecraft to the target.\nWhile the Chief spacecraft is assumed to follow a reference orbit, which is an unforced natural motion, the Deputy spacecraft motion is controlled by the feedback controller\nud(t) = K(tk)(Xd(tk) \u2013 Xv(tk)), tk \u2264 t < tk+1, (4)\nwhere X, (t) is the virtual target, which is determined by the TSG, and K is the periodic LQR gain which is calculated for the linearization of (2) along the state trajectory on the reference orbit. To save computational effort, the standard infinite-horizon LQ control gain K is pre-computed for an orbit as\n$K(tk) = (B_{d}^{T}SB_{d} + R)^{-1}B_{d}^{T}SA_{d},$ (5)"}, {"title": "D. Constraints", "content": "In this paper, we consider the state and control input constraints for the Deputy spacecraft. During the RD mission, the Deputy spacecraft is maintained within the safe approach corridor from the docking port, assuming that the docking port is towards the opposite direction of the Chief spacecraft's velocity direction. This ensures that the docking port of the Deputy spacecraft and the Chief spacecraft is aligned. The Line of Sight (LoS) constraint is written as\nh\u2081 = $\\frac{v(Xc)p(Xd - Xc)}{||v(Xc)||||p(Xa \u2013 Xc)||}$ + cos(a) \u2264 0, (7)\nwhere a is a LoS half-cone angle.\nThe physical limit of the thrust magnitude is expressed as\nh2 = ||ud|| - Umax \u2264 0, (8)\nwhere umax is the maximum total magnitude of the physical thrusters. Considering that the spacecraft typically uses a single main thruster for maneuvers, we assume that the attitude control system accurately aligns the spacecraft consistently with the desired thrust direction. To achieve faster response, we enforce the constraint in Eq. (8) using a saturation function rather than addressing Eq. (8) as a constraint by the TSG. The control input, limited by the saturation, is determined as\nud(t) := min(||ud(t)||, Umax)\u00b7\u00fbd(t), (9)\nwhere \u00fbd(t) = ud(t)|||ud(t)||. Note that the prediction of the closed-loop response in the TSG accounts for the saturated control in Eq. (9) to enforce Eq. (8).\nWe limit the relative velocity magnitude of the Deputy spacecraft with respect to the Chief spacecraft to avoid the risk of high relative velocity collisions. Hence, the soft docking constraint is defined as\nh3 = ||v(Xa - Xc)|| \u2013 Y2||p(Xa \u2013 Xc)|| \u2013 \u0443\u0437 \u2264 0, if ||p(Xa \u2013 Xc)|| \u2264 Y1, (10)\nwhere Y1, Y2 and y3 are predetermined mission specific parameters."}, {"title": "III. Time Shift Governor", "content": "As a variant of the parameter governor [20], the Time Shift Governor (TSG) is an add-on scheme that enforces state and control constraints, see in Fig. 2. In this paper, we apply TSG to the spacecraft rendezvous and docking (RD) problem. TSG generates a virtual target trajectory, which is determined as time-shifted trajectory of the Chief spacecraft, by solving a one dimensional constrained optimization problem.\nMore specifically, assuming that the Deputy spacecraft is behind the Chief spacecraft in orbital track, to satisfy the constraints, the TSG computes the smallest in magnitude non-positive time shift, which represents"}, {"title": "IV. Learning-based Time Shift Governor (L-TSG)", "content": "In this section, we introduce a novel framework that accelerates the Time Shift Governor (TSG) onboard computations through the use of a deep-learning model to approximate the solution of the TSG optimization problem thereby providing an explicit or an imitation learning based solution. This deep learning model utilizes a Long short-term memory (LSTM) layer and a fully connected layer to map sequential data input into"}, {"title": "A. Data Preparation", "content": "The dataset consists of 500 trajectories corresponding to different initial states of the Deputy spacecraft, Xd(to), and with the conventional TSG based on bisections implemented to enforce the constraints. We allocate the dataset as follows: 60% for training, 20% for validation, and 20% for testing. To enhance the training performance, we use Min-Max normalization to scale the time shift values to a range between zero and one, i.e., $t^{(min/max)}_{back}$ \u2208 [0, 1], maintaining the original distribution of the data without distortion of information. This facilitates faster convergence of the neural network training."}, {"title": "B. Network Architecture", "content": "In this study, we use the LSTM network with the input, output, and forget gates in Fig. 3 for the time shift parameter prediction model. LSTMs are often used to capture temporal dependencies in sequential data by maintaining a memory of previous states through their gating mechanism [18, 19]. The cell state updates utilize the Hadamard product, O, allowing for element-wise multiplication of the input, forget, and cell gates. The proposed LSTM network maps a sequence of the Chief and Deputy spacecraft's states to the time shift parameter.\nThe use of sequential data allows LSTM network to account for temporal dependencies, that could be important for accurate predictions. The LSTM cell encodes the sequential information of the spacecraft states, encapsulating the resulting trajectory and imposed constraints. The fully connected neural network then decodes the encoded data from the state sequence to the output of the predicted time shift. Compared to the Multilayer Perceptron (MLP), the LSTM cell can achieve better performance by capturing temporal dependencies in the sequential data [21].\nThe LSTM-based model is thus a mapping from the past sequence of Chief and Deputy spacecraft states to the time shift parameter:\ntback = \u0393pred(W(tk)), (12)\nwhere W(tk) is a window of sequential data at time step tk."}, {"title": "C. Phase-Adaptive Sliding Window (PA-SW) Approach", "content": "We implement a PA-SW approach to enhance the efficiency and accuracy of our prediction model during the RD mission. This approach involves dynamically adjusting the window size based on the current phase of the mission, defined by the relative distance between the Deputy and Chief spacecraft. Sliding window approaches have been previously used to handle sequential data [22, 23], and we modify this approach to implement an effective prediction model corresponding to the specific phases of the RD mission. By adapting the window size according to the mission phase, our approach ensures efficient data utilization and computational cost reduction throughout the mission.\nFor the Crew-3 mission, which includes two phases (distances over 1km, and 1km to 0km), three models are used distinguished by window sizes: window size of wk = 1 for the initial time, wk = 2 for the first phase (over 1km), and wk = 3 for the second phase (1km to 0km). This ensures that as the spacecraft gets closer, the window size increases, enhancing prediction accuracy during the critical close-range phase. For the Molniya orbit mission, which also consists of two phases (distances over 1km, and 1km to 0km), two models are used,"}, {"title": "D. Custom Loss Function", "content": "We design a loss function that incorporates the mean squared error (MSE) and a heuristic term penalizing predicting small in magnitude time shifts than in the data which could be unsafe. MSE minimizes the average squared discrepancy of predictions with respect to the target values. Specifically, the loss function based on the MSE alone enables a prediction model to generate smaller time shift estimates than in the data which could be unsafe and lead to constraint violation. Thus, beside the MSE in the loss function, we augment a penalty term, which is the mean squared ReLU (MSReLU), with a penalty weight n, i.e.,\nLTotal = LMSE + N. LMSRELU, (14)\nwhere\nLMSE = $\\frac{1}{N}\\sum_{i=1}^{N}(\\hat{y}_{i} - y_{i})^{2}$, LMSReLU = $\\frac{1}{N}\\sum_{i=1}^{N}(ReLU(y_{i} - \\hat{y}_{i}))^{2}$, (15)\nand where \u0177i and yi denote the predicted time shift and the target time shift, respectively, and N is the total number of samples. MSReLU applies penalties when prediction errors are positive, considering that the target time shift is the maximum time shift to satisfy the constraints. In the other setting with the Deputy spacecraft approaching from the positive V-bar direction, the MSReLU function becomes\nLMSRELU = 2$\\frac{1}{N}$ (ReLU(yi-\u0177i))2. Note that the use of the square in MSReLU term enhances differentiability and improves unit matching with the MSE term."}, {"title": "E. Hyperparameter Tuning", "content": "In optimizing hyperparameters for the LSTM-based prediction model, we use the grid search algorithm to find the optimal hyperparameter combination within the accessible hyperparameter space. The hyperparameters are defined as follows: A hidden state space {h \u2208 N | 2\u00ba, s = 6, 7, 8}, dropout rate \u03b4 \u2208 {0.1, 0.15,\u2026\u2026, 0.3}, batch size space {N \u2208 N | 25, s = 7, 8, 9, 10, 11}, learning rate space {\u03bb \u2208 R | S\u2081 \u00d7 102, S\u2081 = 5, 2, 1, S2 = -3, -4, -5}, and the penalty weight \u03b7 \u2208 {0.1, 0.5, 1.0, 10, 100} in Eq. (14). We utilize a maximum of 300 epochs and apply an early stopping mechanism with a patience parameter of 15 epochs to save training time and prevent overfitting.\nMoreover, to enhance the robustness and generalizability of our model, we incorporate a 10-fold cross- validation process. This method splits the dataset into 10 subsets, using each part once as the validation set while the remaining 9 parts are used as a training set. The optimal hyperparameters for each window size were those that minimized the mean validation loss of the cross-validation process, which was set to be the same custom loss function used during training. This consistency in loss functions across training and validation stages ensures that the performance metrics are directly comparable, enhancing the reliability of our model evaluation."}, {"title": "F. Hybrid TSG Algorithm", "content": "We combine a learning-based model with a TSG that uses the bisection algorithm. The learning-based model computes the time shift as a function of the states which is then verified through forward simulations; if the verification fails, the algorithm reverts to the bisection-based TSG. This approach reduces the computing time of the time shift parameter in most of the cases. More specifically, our proposed hybrid algorithm computes a time shift tback based on W(tk) as follows:\n1) Time Shift Estimation: Every update period PTSG, our learning-based model estimates the time shift tback corresponding to W(tk), e.g., tback = \u0393pred(W(tk)).\n2) Virtual Target State Computation: The state of the virtual target, X, (Xc (t), tback), is updated to the state of the Chief spacecraft corresponding to the estimated time shift in Eq. (11).\n3) Estimated Time Shift Verification: We check constraint satisfaction over the predicted trajectories of the Deputy and Chief spacecraft, for a sufficiently long prediction horizon TTSG, with the virtual target corresponding to the time shift estimated by the learning-based model, based on Eqs. (2) and (4). If the estimated time shift parameter is verified, the virtual target is updated corresponding to the time shift; otherwise, the previous virtual target holds.\n4) Verification Failure Handling: Conventional TSG based on bisections is applied to determine the time shift.\nThese steps are summarized in Algorithm 1. We use \u0454 = 1 \u00d7 10\u201310 in the implementation."}, {"title": "V. Simulation Results", "content": "In this paper, we demonstrate the learning-based TSG (L-TSG) for spacecraft rendezvous and docking missions in circular and elliptic orbits which correspond to: Low Earth Orbit (LEO) used in the Crew-3 mission and the Molniya orbit.\nA. Simulation Specifications\nIn this simulation, we consider the application of our learning-based TSG (L-TSG) to Crew-3 RD mission and highly elliptic orbit, the Molniya orbit. We consider the Chief spacecraft following the reference orbit, where the orbital elements are specified in Tables 1 and 2. The LEO and Molniya orbit have a period of 92.97 minutes and 721.48 minutes, respectively. The one orbital period Pref is chosen as the prediction horizon for the TSG at a time instant \u03c4, i.e., the prediction is performed over the time interval, [\u03c4,\u03c4 + Pref]. The gravitational parameter is \u03bc = 398600.4418km\u00b3/sec2.\nThe nominal controller of the Deputy spacecraft is the DTLQ controller in Eq. (4) with an LQR gain K(tk) computed for the following state and control weighting matrices, Q = diag(10, 10, 10, 1, 1, 1), R = diag(1, 1, 1). Since LTSG locates the virtual target state along the reference trajectories, the LQR gain is precomputed over one orbital period before simulations begin. Using linear interpolation, the nominal controller applies the precomputed LQR gain, which is a piecewise constant as a function of time.\nIn our simulations, the learning-based TSG manages the constraints specified in Eqs. (7), (8), and (10) with parameters as follows: The half-cone angle a is set to 20\u00b0, the thrust magnitude limit umax to 0.5 m. s\u22122, and the approach velocity constraints are set with y\u2081 = 5 km for distance, y2 = 20 rad \u00b7 s\u00af\u00b9 for angular rate, and y3 = 0.001 km. s\u00af\u00b9 for relative velocity limit. The Crew Dragon spacecraft, which we utilize in both missions, has a launch mass of 12,519 kg [24] and is equipped with 16 Draco engines, each capable of a maximum thrust of 400N [25], resulting in an actual thrust magnitude of 0.5112 m. s\u00af\u00b2. To ensure safety, we have conservatively set the thrust magnitude limit to 0.5m. s-2.\nTo demonstrate the robustness of the L-TSG, perturbations 8X are added to the nominal initial state of the Deputy spacecraft Xa(to), e.g., Xa(to) = Xa(to) + dX. The perturbations on position and velocity are chosen as, respectively, p(\u03b4X) ~ N(0, \u03c3\u03c1\u03bf\u03c2\u00b7 [I]3), \u03bd(\u03b4X) ~ N(0, \u03c3\u03b51\u00b7 [I]3), where standard deviations of position opos and of velocity ovel are set to be a tenth of the initial relative distance of the Deputy spacecraft with respect to the Chief spacecraft and a hundredth of the initial relative velocity, respectively, e.g., opos = (0.1) \u00b7 ||p(\u00d1a(to) \u2013 Xc(to))|| and ove1 = (0.01) \u00b7 ||v(\u012ad(to) \u2013 Xc(to))||. From these randomly generated initial states we then only retain initial perturbed Deputy spacecraft states Xd(to) that are feasible, i.e., satisfy two criteria:\n\u2022 The states satisfy all the imposed constraints.\n\u2022 The states have an initial time shift parameter that avoids constraint violation over the predicted trajectory for the prediction horizon Pref."}, {"title": "B. Simulation in Low Earth Orbit", "content": "In this scenario, the Chief spacecraft orbits along the LEO of the International Space Station (ISS) and the Deputy spacecraft nominally starts about 50 km behind the Chief spacecraft in the same orbital track.\ndistance and velocity of the Deputy spacecraft with respect to the virtual target is smaller than that with respect to the Chief.\nIn Fig. 7, the time histories of three inequality constraints are presented from Monte Carlo simulations with perturbed initial conditions. Figure 7a provides the LoS constraint evolution during the RD mission, and the L-TSG is capable of enforcing the LoS cone angle constraint h\u2081 for the perturbed initial conditions. Figure 7c shows the time histories of the relative velocity constraint h3 given varying initial relative velocities, and L-TSG is able to handle this constraint during the RD missions. Note that the thrust limit is applied by the saturation function in Eq. (9), instead of L-TSG, but it narrows the feasible set of the time shift by applying the limited thrust in the validation process. Monte Carlo simulation results show that the L-TSG effectively enforces these constraints, as the LSTM cell in the L-TSG captures complex patterns to estimate the optimal time shift parameter.\nFigure 8b illustrates the trajectories of the time shift parameter tback as a function of time in a Monte Carlo campaign. Starting with a valid initial time shift tback(0), the parameter gradually increases to zero using L-TSG. This indicates that the Deputy spacecraft follows the virtual target's trajectory, without constraint violations, and eventually stabilizes near the Chief spacecraft. The deep learning model's training process uses the MSE term to drive the time shift estimate toward the optimal solution, while the MSReLU term prevents estimates that would lead to constraint violations. As a result, L-TSG produces maximum admissible time shifts that guarantee safety, given the standard LQ controller as a nominal closed-loop system."}, {"title": "C. Simulation in Molniya Orbit", "content": "We next apply L-TSG to a more challenging scenario: the Molniya orbit. The Molniya orbit is characterized by its high eccentricity, providing a different set of challenges for the control system compared to the nearly circular orbit of the Crew-3 mission.\nIn this scenario, the Chief spacecraft orbits along the highly elliptical Molniya orbit, while the Deputy spacecraft starts approximately 10 km behind the Chief.\ndistance and velocity between the Deputy spacecraft and both the Chief spacecraft and the virtual target over two orbital periods in the ECI frame. In Fig. 10a, the Deputy\nthe high eccentricity of the Molniya orbit introduces significant variations in both velocity and distance during each orbital pass, which makes trajectory prediction and constraint enforcement more challenging. The LSTM-based deep learning model within L-TSG was able to capture the temporal dependencies and nonlinearities in these rapidly changing conditions, allowing for accurate time shift predictions. Additionally, the virtual target, calculated using the time shift, acted as a dynamic reference point that effectively guided the Deputy spacecraft to adjust its trajectory, even under these difficult conditions. This ensured that the spacecraft could maintain safe relative distances and velocities despite the large variations introduced by the orbit's eccentricity.\nFinally, Fig. 12b displays the evolution of the time shift parameter tback during the mission. The parameter starts at an initial value tback (0) until the window size of 100 for the LSTM-based model is filled. Once the window is filled, the time shift gradually approaches zero as the Deputy spacecraft stabilizes near the Chief. This gradual adjustment is particularly significant in a highly elliptical orbit like Molniya's, where abrupt changes in velocity and distance are expected at different points along the orbit. The L-TSG efficiently handles these changes by incrementally updating the time shift, allowing the Deputy spacecraft to track the virtual target without constraint violations. The learning-based model, guided by the MSE and MSReLU terms, was able to predict time shifts that accounted for the eccentric orbit's challenging dynamics, avoiding solutions that would have led to constraint violations. This capability allowed the L-TSG to achieve a successful rendezvous with the Chief spacecraft despite the complexities of the orbit.\nCompared to the conventional TSG, Table 5 shows that the L-TSG significantly reduces the onboard computation time for time shift parameter prediction. By using a prediction of the LSTM network, the L-TSG can generate the corresponding virtual target by checking the validity of the time shift, reducing computation times from 0.1476 s to 0.0233 s in LEO and from 0.0852 s to 0.0256 s in the Molniya orbit. When the Deputy spacecraft is far from the Chief spacecraft, the LSTM model updates a more accurate time shift than the prediction when it is near the Chief spacecraft. Depending on the relative distance, we replace an LSTM model, according to the PA-SW approach, to address this issue. Before the model transitions or mission completion, L-TSG potentially uses the backup plan of using the conventional TSG, but it can still contribute to computation time reduction for average and worst-case because of the narrowed bounds of the time shift set."}, {"title": "VI. Conclusion", "content": "This study provides and demonstrates a novel framework that integrates a Time Shift Governor (TSG) with a learning-based model, called L-TSG, to accelerate the performance of TSG during rendezvous and docking (RD) missions in the Two-Body problem setting. By incorporating the learning-based model in our Monte Carlo campaign, L-TSG successfully avoided 95.4% of iterative processes in the bisection-based TSG during the Crew-3 mission and 95.1% during the Molniya orbit scenario. It showcases its capability to enforce state and control constraints during close rendezvous, including approach direction, relative velocity, and thrust limits. A target reference computed from L-TSG guides the closed-loop system to avoid constraint violations via a time-shifted state trajectory of the Chief spacecraft. The Deputy spacecraft conducts the RD mission until achieving the target reference, which aligns with the Chief spacecraft."}]}