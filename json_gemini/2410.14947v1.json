{"title": "Optimally Solving Colored Generalized Sliding-Tile Puzzles: Complexity and Bounds", "authors": ["Marcus Gozon", "Jingjin Yu"], "abstract": "The generalized sliding-tile puzzle (GSTP), allowing many square tiles on a board to move in parallel while enforcing natural geometric collision constraints on the movement of neighboring tiles, provide a high-fidelity mathematical model for many high-utility existing and future multi-robot applications, e.g., at mobile robot-based warehouses or autonomous garages. Motivated by practical relevance, this work examines a further generalization of GSTP called the colored generalized sliding-tile puzzle (CGSP), where tiles can now assume varying degrees of distinguishability, a common occurrence in the aforementioned applications. Our study establishes the computational complexity of CGSP and its key sub-problems under a broad spectrum of possible conditions and characterizes solution makespan lower and upper bounds that differ by at most a logarithmic factor. These results are further extended to higher-dimensional versions of the puzzle game.", "sections": [{"title": "1 Introduction", "content": "Sliding-tile puzzles, such as the 15-puzzle [27,16] and Klotski [26] (see., e.g., Fig. 1), ask a player to sequentially move interlocked tiles on a board via one or more escorts, or swap spaces, to reach some desired goal configurations. Such problems, modeling a wide array of important real-world challenges/applications including at autonomous mobile robot-based warehouses [29,18] and in garage automation [33,11], have inspired and/or served as the base model in many complexity and algorithmic studies, e.g., [28,20,1,7,14,8], especially drawing attention from the combinatorial search community [2,3,21,15,19].\nInspired by these previous studies, the vast application potential, and observing the possibility to simultaneously move multiple tiles even when there is a single escort in many real-world settings, we recently examined the generalized sliding-tile puzzle (GSTP) [9]. In a GSTP instance, on an m1 \u00d7 m2 board lie n < m1m2 labeled square tiles. Using the leftover m1m2 \u2212 n escorts as swap spaces, tiles must be rearranged into a goal configuration. It is established that minimizing the required makespan for GSTP is NP-hard and that the fundamental optimality lower bounds match the polynomial-time algorithmic upper"}, {"title": "2 Preliminaries", "content": ""}, {"title": "2.1 Colored Generalized Sliding-Tile Puzzles", "content": "In the generalized sliding-tile puzzle (GSTP) [9], n < m1m2 tiles, uniquely labeled 1,...,n, lie on a rectangular m\u2081 \u00d7 m2 grid G = (V, E). A configuration of the tiles is an injective mapping from {1,...,n} \u2192 V = {(Ux, Vy)} where 1 < Ux \u2264 m2 and 1 \u2264 vy \u2264 m\u2081. Tiles must be reconfigured from a random configuration S = {$1,..., Sn} to some ordered goal configuration G = {91,..., gn}, e.g., a row-major ordering of the tiles, subject to certain constraints. Specifically,"}, {"title": "3 Hardness of MOCGSP/MOBGSP/MOPGSP", "content": "The hardness of makespan-optimal GSTP [9] implies the hardness of MOCGSP in the special case k = n, though with a varying number of escorts. Adapting the proof can also lead to a hardness proof of MOPGSP for the more general problem. However, these results require a large number of escorts and do not extend to MOBGSP. Here, we establish the fine-grained hardness of MOBGSP, MOPGSP, and MOCGSP, even in the most constrained setting with a single escort. Extensions further allow nearly arbitrary composition ratios for the colored tiles, any number of escorts, and high-dimensional settings."}, {"title": "3.1 Constructing Single-Escort MOBGSP from 3SAT", "content": "Given a 3SAT [13] instance with variables x1,...,x, and clauses C1, ..., CM, we will construct a corresponding single-escort MOBGSP instance. The instance will embed an SCG with \"passageways\" on the top and right for the escort to simulate a turn (collapsing an open tile) of SCG every four moves abiding by the CFC. We define the following variables:\nl=1\nl = M + 2N + 2, h = 2Nl+4N+2, q = l[4N(h + 1) +15]."}, {"title": "3.2 Properties of the Constructed MOBGSP Instance", "content": "With the SCG and MOBGSP instance constructed, consider any solution satisfying the MOBGSP instance (the solution is a witness of the MOBGSP being satisfiable; with a slight abuse of notation, we simply refer to this as a solution to the MOBGSP instance). We note that the thick upper boundary layer full of black tiles forces white tiles to go around it during the reconfiguration. Because there is a single escort with a restrictive makespan, white tiles must be cycled around in the counterclockwise direction one at a time to be pushed out of the Sand Castle. Equivalently, the escort will be \"rotated\" in a clockwise direction, with each rotation along the corners of a rectangle on the m\u00d7m board. This forces the solutions to MOBGSP to simulate turns of the SCG. We have (see the Appendix for a complete proof):"}, {"title": "3.3 Concluding Hardness", "content": "The polynomial-time construction of the MOBGSP instance from a 3SAT instance, combined with Lemma 1-Lemma 3, immediately implies that MOBGSP is NP-hard. Note that a feasible solution to the BGSP instance in the MOBGSP has a makespan of O(m\u00b3). To see this, if we do not need to simulate the SCG, we can use the escort to \"bubble up\" each white tile in G through all the layers. In a bubbling-up operation, the escort is teleported above the target white tile and swapped with the white tile (pulling it up), then moved around the same white tile to be above the white tile again and repeat. Bubbling up each white tile takes O(m) steps and there are at most m\u00b2 white tiles. Alternatively, we could just use the algorithm for GSTP. Therefore, MOBGSP is in the complexity class NP and we have:"}, {"title": "4 Makespan Bounds", "content": "We proceed to provide makespan lower and upper bounds, as stated in Tab. 1, that differ by at most a logarithmic factor for each of BGSP, PGSP, and CGSP, starting with the single escort case in two dimensions where m = m1 = m2.\nWe also extend and solve the higher dimensional versions. Since the primary difficulty is the underlying BGSP problem in each formulation, we center on this case. All upper bounds provided here come with a low polynomial time algorithm that computes plans corresponding to these upper bounds. In other words, if desired, fast algorithms can be readily implemented to compute tile"}, {"title": "4.1 Polynomial Time Upper Bounds", "content": "For the upper bounds, we first outline the overall structure of the algorithm in the single escort case in two dimensions, but note that our approach is designed with the multi-escort setting in mind. As in the study of GSTP, it is more useful to view the routing problem through the teleportation or jumps made by the escort, in which the goal is to batch as much of the necessary movement as possible. To do this across the grid and to make our algorithm parallelizable, we utilize a divide-and-conquer approach.\nFor the main case d = 2, assume that m = m1 = m2, which is the case most important to dense robotics applications. For simplicity, assume that mis a power of two. The algorithm then works in log2 m iterations, where we initially consider the grid through each of the 1 \u00d7 1 cells. Then in the ith iteration of the algorithm, we increase the granularity of the grid of 2i-1 \u00d7 2i-1 squares to be a grid of 22 \u00d7 22 squares, combining the four respective 2i-1 \u00d7 2-1 subsquares for each 2 x 2 square, where we layer the black tiles from the bottom of the respective square rightwards and then upwards. Note that the goal configuration can be arbitrary since we can run the algorithm again backwards to the sorted configuration.\nThe escort must travel along a continuous trajectory. Due to this, we need to add additional unit margins of white tiles to each of the squares to facilitate movement to ensure that our configuration is not ruined when the escort is moved across the grid. However, this introduces problems for the early iterations of the algorithm, where certain 22 \u00d7 2 squares may have more black tiles than their inner (22) \u00d7 (2-2) square. Thus, we additionally need to pre-process the"}, {"title": "4.2 Fundamental Makespan Lower Bounds", "content": "For lower bounds, we directly work with a d-dimensional grid m \u00d7... \u00d7 m. The lower bound for BGSP (Tab. 1) is  \u03a9(m+m^{1+r\\lceil \\frac{1}{d} \\rceil}/p+m^{r}/p) for p \u2265 1 escorts. It has three parts, each of which may dominate depending on r and p. The first and last terms are easy to tally. For a random instance with \u0398(m^{r}), r \u2208 (0, d) black tiles, with high probability, a black tile must take at least \u03a9(m) time steps to \"swap out\" a white tile, regardless of the number of available escorts. This gives the first \u03a9(m) term.\nSimilarly, with high probability, the total Manhattan distance that must be traveled by mr black tiles in a random BGSP instance is \u03a9(mr\u00b7mr). To get this, suppose black tiles must relocate to the bottom of the grid (i.e., m' /md < 1/4, otherwise, flip the colors), we lower bound the sum of Manhattan distances by the distance of a black tile to the bottom fourth of the grid. If there are B black tiles, let Xi be the distance to the bottom of the grid, which is 0 if it is in the bottom fourth and expected to be 3m/8 if it is in the upper three-fourths of the grid. Then the sum of Manhattan distances is lower bounded by X = X1 + \u2026 + Xn, which has E[X] = 3mB/8 and Var(X) = B Var(Xi) +\nB(B \u2013 1) Cov (Xi, Xj) \u2264 B Var(X\u2081), as the X\u2081 and Xj are negatively correlated. We can compute Var(X\u2081) < E[X?] = (1\u00b2+2\u00b2+\u2026\u2026+(3m/4)\u00b2)/m = O(m\u00b2). Then\nChebyshev's inequality gives that Pr[|X \u2013 E[X]| > E[X]/2] < 4 Var[X]/E[X]\u00b2 <\nO(1/B\u00b2) = O(1/m\u00b2r), i.e. the sum of Manhattan distances is \u03a9(mB) = \u03a9(m\u00b7\nm\") as required. In each time step, this distance can be decreased by at most\npm, yielding the last lower bound term of \u03a9(m^{r}/p).\nWe are left to show the third part of the lower bound, \u03a9(m^{1+r\\lceil \\frac{1}{d} \\rceil}/p), which\nis less straightforward and also more interesting. Consider the relaxation where\nthe p escorts are replaced with white tiles, except now, to simulate the escort\nmovement, we are allowed to pick any generalized column and move the black\ntiles in whichever direction we want, even permitting them to move to the same\nsquare, performing this operation once for each escort in sequence. Instead of\ntrying to sort the grid, we seek to collapse (here, \"collapse\" bears a meaning\ndifferent from the collapsing operations in SCG) all the black tiles into a single\nsquare. Note that this is a valid relaxation of BGSP up to an additive factor of\nO(B/p), since we can indeed simulate the escort movement through the allowed\noperations, then subsequently collapsing all the B black tiles trivially in O(B)\nsteps, divided by the number of escorts p. Thus, the grid collapse game can be\nsolved in at most the minimum amount of time to solve the BGSP instance plus\nO(B/p) steps (even though it's most likely the case that the grid collapse game\ncan be solved faster), from which demonstrating the  \u03a9(m^{1+r\\lceil \\frac{1}{d} \\rceil}/p) gives the\nlower bound for BGSP as m^{1+r\\lceil \\frac{1}{d} \\rceil} > m^{r} when 0 < r < d \u2212 1, which is the\ncase we care about (when r\u2265 d-1, the sum of Manhattan distances in the last\nterm of the lower bound provides a higher bound).\nThe hardness of the BGSP instance arises from the underlying lattice-like\nstructure of black tiles that must be collapsed into a single black tile. We use\""}, {"title": "5 Conclusion and Discussions", "content": "In this work, we have investigated the colored generalized sliding-tile puzzle (CGSP) and its prominent variants, BGSP and PGSP. BGSP, PGSP, and CGSP formulations model after and capture key features of many high-impact, large-scale robotics and automation-related applications. We prove that finding makespan optimal solutions for BGSP, PGSP, and CGSP is NP-complete, even when there is a single escort. The hardness results are shown to hold when there is an arbitrary number of escorts, for arbitrary color compositions, and in higher-dimensional settings. We then analyze the makespan bounds for BGSP, PGSP, and CGSP, establishing lower (fundamental limits) and upper (polynomial time algorithmic) bounds that differ by at most a logarithmic factor.\nMany open questions remain. Within the context of the current study, on the hardness side, we leave open the question of how to show that GSTP itself is NP-hard when there is a single escort (note that if we do not allow parallel moves, then this is shown in [20]). The single escort setting should also extend to the setting with a constant number of escorts.\nOn the bounds side, the makespan lower and upper bounds can differ by up to a logarithmic factor. We hypothesize that the lower bound can be further tightened as it is known that randomness assumptions can often introduce an additional logarithmic factor [5]. A more careful analysis leveraging additional tools may eliminate the logarithmic bound gap.\nGoing beyond the current study, we didn't labor to pin down a concrete number for the constant factor, which we believe is unlikely to be practical. With that said, however, it remains interesting to push the envelope on fast algorithms that compute (near-)makespan-optimal solutions for GSTP and CGSP variants, for which there are some existing efforts [6,12]. We believe it would be of particular interest and practical relevance, to explore the impact of the number of escorts on practically achievable makespan upper bounds. The bounds from the current work help guide such efforts.\nIn our algorithmic study, the initial configuration is assumed to be random and the goal configuration have the colors ordered. The formulation is motivated by the sorting requirement of many practical applications. It is also interesting to consider arbitrary goal configurations and demonstrate tighter lower bounds as well as develop more specific algorithms beyond our sorting one. As the setting mimics those studied in [22], it is likely to have drastically different complexity and makespan bounds.\nAlso of interest is examining tiles of different sizes such as those in Klotski, which appears more complex and likely requires new tools to be developed."}, {"title": "Appendix", "content": "Proof (Proof of Lemma 1). We show that the escort's movement corresponds to simulating moves in the SCG: after every four moves of the underlying BGSP, the board configuration will be transformed to another one corresponding to performing an allowed move in SCG, and the target configuration will be reached exactly when the SCG ends in a win.\nConsider any BGSP solution satisfying the MOBGSP instance. Any initial white tile in H can never pass through the upper boundary layer at any point of the tile routing. This is because the escort alternates between rows and columns when it jumps (otherwise it would be wasting a move), so at most 2w column jumps can be performed. Each jump can either move the white tile upwards a tile or the upper boundary of G downward a tile (mutually exclusive due to opposing directions of movement). Because 2w < 2rc (the upper boundary layer is 2rc thick), it is impossible to pop a white tile initially in H above the upper boundary layer. Thus, white tiles initially in G must leave G through the right side.\nNow define lh to be the line separating the upper boundary layer of G from the clause layer, and let l be the right boundary of G; the escort must move in cycles of four jumps going clockwise around the induced quadrants formed by lh and lv. This is because to shift out one of the original white tiles in G, the escort must jump from the right side of l\u2082 to the left, and this can occur at most every 2 escort row jumps since jumps alternate between rows and columns and a row jump must transport the escort back to the right of lu. Thus, every row jump in a solution must cross l as w white tiles must be shifted out with the available 2w row jumps, and since the escort must end in the upper right corner, right of lv. In addition, the jump directly after shifting out a white tile must have the escort jumping from below lh to above it, since if it didn't, the next row jump would leave H below the line and increase the number of white tiles back to what it was before, making the solution invalid.\nAfter every four moves in the MOBGSP, a turn in the SCG in H will be simulated. The escort is only ever allowed to jump to H through a row containing a white tile at the rightmost column of H, since if it didn't, then in 4w moves, it would be impossible to shift out w white tiles. Then after entering H through a white tile, the escort must jump to above H, simulating the ensuing fall of the tiles above. Furthermore, it must go the top row: in order for the rightmost black tile in the tail to move left of lv, the escort necessarily cycles between four stages (right, right different row, left different row, left) for all w time steps. All in all, a SCG turn will be simulated, and this is all the moves allowed. In addition, the endgame conditions are nearly the same: a solution induces a winning set of turns on the SCG via the corner between the (4i - 2)th and (4i \u2013 1)th escort jump. On the other hand, a winning set of turns t1,..., tw to the SCG can be transformed into an MOBGSP solution by having the escort be in the top right corner of B after every four jumps and at the tile specified by ti after the (4i 2)th jump; this is indeed a solution since the final configuration of Gis"}]}