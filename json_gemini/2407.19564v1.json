{"title": "Forecast-PEFT: Parameter-Efficient Fine-Tuning for Pre-trained Motion Forecasting Models", "authors": ["Jifeng Wang", "Kaouther Messaoud", "Yuejiang Liu", "Juergen Gall", "Alexandre Alahi"], "abstract": "Recent progress in motion forecasting has been substantially driven by self-supervised pre-training. However, adapting pre-trained models for specific downstream tasks, especially motion prediction, through extensive fine-tuning is often inefficient. This inefficiency arises because motion pre-diction closely aligns with the masked pre-training tasks, and traditional full fine-tuning methods fail to fully leverage this alignment. To address this, we introduce Forecast-PEFT, a fine-tuning strategy that freezes the majority of the model's parameters, focusing adjustments on newly introduced prompts and adapters. This approach not only preserves the pre-learned representations but also significantly reduces the number of parameters that need retraining, thereby enhancing efficiency. This tailored strategy, supplemented by our method's capability to efficiently adapt to different datasets, enhances model effi-ciency and ensures robust performance across datasets without the need for extensive retraining. Our experiments show that Forecast-PEFT outperforms traditional full fine-tuning methods in motion prediction tasks, achieving higher accuracy with only 17% of the trainable parameters typically required. Moreover, our comprehensive adaptation, Forecast-FT, further improves prediction performance, evidencing up to a 9.6% enhancement over conventional baseline methods.", "sections": [{"title": "I. INTRODUCTION", "content": "TRAJECTORY prediction is a challenging task in au-tonomous driving, crucial for ensuring safety and op-erational efficiency [14], [22], [24], [18]. The complexitystems from accounting for dynamic interactions among roadusers and varying conditions. To address these challenges,significant advancements have been made in self-supervisedlearning (SSL) methods. Pre-trained models such as Traj-MAE [6], SEPT [26], and Forecast-MAE [7] have shownconsiderable potential in enhancing trajectory prediction.\nDespite these advancements, current SSL approaches typ-ically utilize only pre-trained encoders and rely on full fine-tuning for downstream tasks. This practice fails to leverage thefull capabilities of pre-trained models. In other domains, suchas language [10], vision [19], and 3D point cloud analysis[45], masked autoencoders are pre-trained with \u201cmaskingand reconstruction\" tasks but fine-tuned on classification ordiscrimination tasks. For motion prediction, this approachoften overlooks the connection between pre-training tasks andmotion prediction. Specifically, trajectory prediction is a formof reconstruction, indicating that pre-trained decoders couldbe effectively used for this task.\nMoreover, integrating a new, randomly initialized decoderduring fine-tuning can significantly alter the encoder's parame-ters, leading to catastrophic forgetting and the loss of valuablepre-trained knowledge. This highlights the need for fine-tuningstrategies that preserve the encoder's learned capabilities whileadapting to motion prediction tasks.\nParameter Efficient Fine-Tuning (PEFT) has gained tractionin fields such as vision and NLP [23], [37]. These techniquesmodify only a small subset of a pre-trained model's param-eters while freezing the majority, thereby reducing computa-tional and storage demands. Building on the PEFT paradigm,we propose Forecast-PEFT, a parameter-efficient fine-tuningframework tailored specifically for trajectory prediction.\nForecast-PEFT retains the encoder and decoder from thepre-trained model, with their parameters remaining frozen during the fine-tuning stage. To bridge the input gap, task dif-ference, and domain gap between pretraining and finetuning,we propose the following components:\nContextual Embedding Prompt (CEP): The input ofencoder shifts from masked historical trajectories, fu-ture trajectories, and contextual data during pre-trainingto complete historical trajectories and contextual dataduring finetuning and inference. CEPs bridge this gap,preserving pre-trained knowledge by directing attentionto critical features, ensuring the model maintains itscapabilities and focuses on relevant information.\nModality-Control Prompt (MCP): The task of decodertransitions from reconstructing masked elements duringpretraining to forecasting multi-modal future trajectories.MCPs generate multiple trajectory modes, guiding thedecoder to produce diverse predictions, and seamlesslyadapting pre-trained knowledge to forecasting tasks.\nParallel Adapter (PA): PAs are integrated into eachtransformer layer to capture local information, com-plementing the pre-trained layers that focus on globaldependencies. This design allows the model to efficientlyadapt to new data without extensive retraining, enhancingits ability to generalize across different datasets andimproving overall model robustness and efficiency.\nWhile effective fine-tuning within a single dataset is im-portant, autonomous driving systems must operate in a widerange of environments, requiring models to generalize acrossdifferent datasets. Traditional fine-tuning approaches, whichnecessitate maintaining separate weight sets for each dataset,are impractical for large pre-trained models. Training, manag-ing, and switching between these weights for different datasetsis not only inefficient but also costly in terms of computationalresources and storage.\nTo address this, we extend our Forecast-PEFT framework toa cross-dataset setting. This involves a two-step process-Pre-Training for Universality followed by PEFT for SpecializedAdaptation. The model is first pre-trained on a comprehensivedataset to develop a foundational understanding of trajectorydynamics and environmental variables. It is then efficientlyfine-tuned on additional datasets with minimal parameter up-dates, leveraging the pre-trained knowledge while maintainingresource efficiency. Our cross-dataset experiments highlightthe flexibility and scalability of our method, showcasing itspractical applicability in diverse autonomous driving scenarios.\nOur contributions can be summarized as follows:\nWe introduce a fine-tuning strategy that retains bothencoder and decoder from the pre-training phase whilefreezing the original parameters. This ensures effectiveknowledge transfer and mitigates catastrophic forgetting.\nWe develop and integrate three novel components (CEP,MCP, PA) into the fine-tuning process, enhancing themodel's ability to handle trajectory prediction tasks witha minimal number of trainable parameters.\nWe demonstrate through extensive experiments and ab-lations within a single dataset setting the efficacy of ourmethod, and extend this to cross-dataset fine-tuning tohighlight its scalability and practical application.\nThrough these experiments, we show that Forecast-PEFTachieves competitive performance with significantly fewertrainable parameters compared to traditional fine-tuning meth-ods. This makes Forecast-PEFT an efficient and scalablesolution for trajectory prediction in autonomous driving, of-fering a practical alternative to conventional transfer learningapproaches [42]."}, {"title": "II. RELATED WORK", "content": "1) Self-Supervised Pretraining in Motion Prediction: Re-cently, studies on self-supervised pretraining methods formotion prediction have achieved remarkable success. Theseapproaches adopt pretext tasks to pretrain foundation modelsto learn latent semantic information of both map and mo-tion of road users, and then fine-tune the model on motionprediction task. Existing pre-training methods can be dividedinto contrastive representation learning [30], [43], [2], [35],[8], [1] and generative masked representation learning [12],[6], [27], [7], [26]. The contrastive learning approaches alignand distinguish representations of views with the same high-level semantics or not. Social-NCE[30] employs contrastiveloss and negative sample augmentation to extract informationabout social interactions from motion trajectories. PreTraM[43] and MENTOR[35] explore the use of contrast learningof intra-domain (map-map) and cross-domain (trajectory-map)features. Generative masked pretraining methods mainly relyon the masked autoencoders [19] to learn latent representa-tion by reconstructing the masked input. Traj-MAE[6] andSEPT[26] explore to pretrain the map and motion encoderseparately with specially designed mask-reconstruction strat-egy. Forecast-MAE[7] takes agents' trajectory and poly-linesof lane segments as single tokens, and then randomly masksout the entire agents' history or future trajectory, as wellas lane segments, at the token level, before feeding theminto the Transformer [39] backbone. Despite the success ofpretraining in motion prediction, two issues have not beenfully explored. Firstly, all methods in the pretraining stageutilize a decoder that is subsequently discarded. During thefine-tuning stage for motion prediction, a new decoder mustbe designed specifically for prediction purposes. Secondly, theadaptation for motion prediction still demands the resource-intensive full fine-tuning method, and effective Parameter-Efficient Fine-Tuning (PEFT) methods have yet to be explored.Thus, we explore both the re-use of pre-trained decoder andPEFT techniques in motion prediction domain for parameter-efficient fine-tuning."}, {"title": "III. METHOD", "content": "In this section, we first introduce the standard fine-tuningpipeline for a pre-trained motion prediction model in SectionIII-A. Then, in Section III-B and III-C, we illustrate ourForecast-PEFT and Forecast-FT frameworks, respectively."}, {"title": "A. Standard Fine-Tuning Pipeline in Forecast-MAE", "content": "1) Overview of Forecast-MAE: Forecast-MAE [7] uses aself-supervised MAE-based [19] method for motion forecast-ing, uniquely combining agent trajectory and random lane seg-ment masking during pre-training to understand the intricaterelationship between road geometry and agent dynamics.\nFirst, agent trajectories and lane segments are transformedinto vectorized tokens. These tokens undergo processing us-ing Feature Pyramid Network (FPN) [29] for $N$ agents$(T_H = \\text{FPN}(A_H), T_F = \\text{FPN}(A_F), \\text{where } T_{H,F} \\in \\mathbb{R}^{N\\times C})$ and Mini-PointNet [36] for $M$ lane segments $(T_L = \\text{MiniPointNet}(L), \\text{where } T_L \\in \\mathbb{R}^{M\\times C})$. $T_H, T_F, T_L$ arehistory, future, lane tokens respectively, and $C$ is the em-bedding dimension. Additionally, semantic and positional em-beddings (PE) are incorporated into these tokens. Notably,Forecast-MAE masks either the future or history trajectoriesof agents in a complementary manner. This means that if thehistory trajectory of an agent is masked, its future trajectoryremains unmasked, and vice versa.\nThen, the architecture employs a standard Transformer-based [39] autoencoder. The encoder and decoder processesare formulated as:\n$\\begin{aligned}T_E &= \\text{Encoder}(\\text{concat}(T_H, T_F, T_L) + PE),\\\\\\M' &= \\text{Decoder}(\\text{concat}(T_E, M) + PE),\\end{aligned}$ (1)\n(2)\nwhere $M = (M_H, M_F, M_L)$ is the mask tokens concate-nated to the encoded latent tokens of Encoder, and $M' =(M_H', M_F', M_L')$ is the decoded mask tokens.\nThe decoder's role is to reconstruct masked elements,predicting normalized coordinates for masked trajectories andlane segments, with reconstruction targets processed through:\n$P_i = \\text{Prediction Head}_i(M'), i \\in \\{H, F, L\\}.$ (3)\n2) Pre-training Loss: The model utilizes L1 loss $L_H, L_F$for trajectory reconstruction and mean squared error (MSE)loss $L_L$ for lane segments reconstruction, and $X_H, X_F, \\chi_L$corresponds to the loss weight respectively. The final loss,denoted as $L_{RE}$ and defined in the following equation, is also"}, {"title": "B. Forecast-PEFT", "content": "The pre-trained Forecast-MAE model, depicted in Figure2, is enhanced by Forecast-PEFT through the integration ofspecialized prompts and adapters as additive modules, fine-tuned to enhance trajectory prediction tasks:\n1) Contextual Embedding Prompt (CEP): The Forecast-PEFT framework incorporates CEP vectors denoted as $PCE$ toaugment the pre-trained Encoder's contextual comprehensionof input data. Similar to VPT-Deep [23], CEPs are introducedat each Transformer layer's input level. Applying deep tuningin the encoder allows for more nuanced and complex featureextraction from the input data. It enhances the encoder's abilityto understand and encode subtle patterns and relationships within the data, setting a strong foundation for the decoding process. The encoder process is formulated as:\n$T_E = \\text{Encoder} (\\text{concat}(T_H, PCE, T_L) + PE)$, (7)\nwhere $PCE \\in \\mathbb{R}^{N_P \\times C \\times L_E}$, and $N_P, C, L_E$ denote the numberof CEPs, embedding dimension, and number of the trans-former Encoder layers.\n2) Modality-Control Prompt (MCP): The pre-trained de-coder's capability is expanded by MCPs to handle multi-modaloutput generation. Similar to VPT Shallow [23], MCP vectors,denoted as $PMC$, are inserted only at the level of the firstTransformer layer of the decoder. We adopt VPT Shallowhere since each MCP set is designed to guide the decoder ingenerating a distinct mode of future trajectories. The decoderfinetuning process is formulated as:\n$\\begin{aligned}M' &= \\text{Decoder}(\\text{concat}(T_E, P_{MC}, M_F) + PE),\\\\\\P_F &= \\text{PredictionHead}_F(M_F'), \\\\\\P_F \\in \\mathbb{R}^{N \\times K \\times T \\times 2},\\end{aligned}$ (8)\n(9)\nwhere $P_{MC} \\in \\mathbb{R}^{N_P \\times C \\times K}$, and $N_P, C, K$ denote the numberof MCPs, embedding dimension, and number of modes. In thisway, the pre-trained decoder is reused for generating multi-modal future trajectories.\n3) Parallel Adapter (PA): Complementing these CEPs andMCPS, PAs are added to the Multiheaded Self-Attention(MSA) and Feed-Forward Networks (FFN) modules across theTransformer layers as shown in Figure 2. To be specific, ouradapters consist of a downscale fully connected layer (Down),"}, {"title": "C. Forecast-FT", "content": "The Forecast-FT framework is closely aligned with theForecast-PEFT approach, differing primarily in the ex-tent of fine-tuning. While Forecast-PEFT focuses on aparameter-efficient fine-tuning strategy by integrating special-ized prompts and adapters and selectively fine-tuning partsof the model, Forecast-FT extends this concept by engagingin a more comprehensive fine-tuning process. Specifically,Forecast-FT removes the Parallel Adapters integrated into theForecast-PEFT framework and proceeds to fully fine-tune allparameters of the pre-trained model. This approach aims toharness the full potential of the pre-trained model, adjustingall its parameters to enhance its predictive accuracy."}, {"title": "IV. EXPERIMENTS", "content": "To evaluate the effectiveness of our proposed Forecast-PEFT framework, we conducted a series of comprehensiveexperiments across multiple motion forecasting datasets. Sec-tion IV-A provides a detailed overview of our experimentalsetup. A thorough analysis of the performance of Forecast-PEFT on individual datasets is presented in Sections IV-B andIV-C. We examine its ability to preserve pre-trained knowledgein Section IV-D and its generalization capabilities acrossdifferent datasets in Section IV-E. Additionally, the efficiencyof Forecast-PEFT in terms of training time, data usage, andstorage requirements is investigated in Section IV-F. Finally,we present an ablation study to assess the contributions ofvarious components within the Forecast-PEFT framework inSection IV-G. Our experiments demonstrate the advantages ofForecast-PEFT in achieving high prediction accuracy with sig-nificantly fewer trainable parameters compared to traditionalfine-tuning methods."}, {"title": "A. Experiment Setup", "content": "1) Datasets: For our experiments, we utilize Argoverse 2[42] (AV2) and Argoverse 1 (AV1) [5] motion forecastingdatasets, while nuScenes datasets [3] is used only for cross-dataset evaluations.\nAV2 dataset [42] provides 250,000 real-world scenarios,divided into 199,908 training samples, 24,988 validation sam-ples, and 24,984 test samples. Each scenario features high-definition maps and 11-second trajectories sampled at 10 Hz,with 5 seconds dedicated to observed history and 6 secondsfor future forecasting.\nAV1 dataset [5] contains 324,000 scenarios, which are splitinto 205,942 training samples, 39,472 validation samples, and78,143 test samples. This dataset includes high-definition mapsand 5-second trajectories also sampled at 10 Hz, providing 2seconds of history and 3 seconds of future data.\nnuScenes dataset [3] offers high-definition semantic mapsand 8-second trajectories, with 2 seconds for observed historyand 6 seconds for future forecasting. Unlike the Argoverse datasets, nuScenes has a lower sampling rate of 2 Hz. Itconsists of 1000 driving scenes, split into 700 training scenes,150 validation scenes, and 150 test scenes.\nFigure 3 illustrates the differences in sampling rates and tra-jectory lengths across these datasets, emphasizing the distinctcharacteristics and challenges each dataset presents for cross-dataset evaluation.\n2) Metrics: All the metrics we adopt are from AV2 [42]and AV1 [5] official benchmark. We use minimum AverageDisplacement Error (minADE), minimum Final DisplacementError (minFDE), missing rate (MR), and brier minimumFinal Displacement Error (b-minFDE), which default to sixprediction modes, unless specified otherwise.\n3) Implementation details: Our base model is Forecast-MAE [7], featuring a pre-trained encoder and decoder with4 transformer layers each. We adopt a balanced setting forreconstruction losses in pre-training with $H = X_F = 1.0$ and$\\chi_L = 0.35$. The model has a feature dimension $C = 128$and supports six modes (K = 6), with CEPs and MCPS"}, {"title": "B. Quantitative Analysis", "content": "1) Performance of Forecast-PEFT: Tables I and II showthat our Forecast-PEFT framework surpasses the full fine-tuning baseline Forecast-MAE (FT) over all metrics on bothAV2 and AV1 datasets, with only 20% trainable parameter. OurForecast-PEFT(A), as shown in Table V, achieves comparableresults as the baseline with only 17% trainable parameters.These results consistently indicate the parameter efficiencyof our framework and the effectiveness of our additive andselective modules.\n2) Performance of Forecast-FT: Table I and II on bothleaderboards of AV2 and AV1 show that our Forecast-FTsurpasses the original full fine-tuning baseline method [7]for at least 4% over all metrics. Specifically, Forecast-FTachieves an improvement of MR by 9.6% and 8.6% on AV2and AV1, respectively. These results indicate the advantageand effectiveness of our design by using both the pre-trainedencoder and decoder.\n3) Comparison with other PEFT methods: As no specificPEFT method exists for motion forecasting, we benchmarkagainst VPT [23] from vision, LoRA [21] from language,IDPT [47] from 3D point clouds, and Head tuning that adjuststhe original multi-modal decoder (MD), as our comparisoncounterparts. VPT, LoRA, and IDPT all necessitate retain-ing the original multi-modal decoder to accommodate theirprompts. As shown in Table III, we compared our Forecast-PEFT framework with the above PEFT techniques, where ourstrategy excels in performance using a comparable amount oftrainable parameters.\n4) Choosing Forecast-PEFT for Efficiency and Flexibility:Although Forecast-FT, our fully fine-tuned variant, demon-strates the effectiveness of our approach without any designchanges, we choose Forecast-PEFT for its efficiency andflexibility. Forecast-PEFT tunes only 15% (0.38M) of thetrainable parameters required by Forecast-FT (2.5M) whilemaintaining good performance."}, {"title": "C. Qualitative Analysis", "content": "In Figure 7, we display qualitative results from AV2 us-ing pre-trained Forecast-MAE, and our fine-tuned versions,Forecast-PEFT and Forecast-FT. The pre-trained Forecast-MAE's encoder and decoder demonstrate reasonable single-mode predictions, supporting our assertion that the pre-traineddecoder is suitable for direct future trajectory prediction.Forecast-PEFT, leveraging the pre-trained components whileminimally adjusting parameters, achieves diverse, multi-modalpredictions. Forecast-FT, with all pre-trained weights un-frozen, shows enhanced trajectory prediction accuracy, asconfirmed by the visualization results."}, {"title": "D. Preservation of Pre-trained Knowledge", "content": "Figure 1(a) illustrates a performance comparison ofForecast-MAE (FT), Forecast-PEFT (A), and Forecast-PEFTon lane and trajectory reconstruction (pre-training task) andtrajectory prediction (downstream task). Forecast-PEFT (A)maintains Forecast-MAE's reconstruction performance (noforgetting) with only 17% of parameters adjusted, achievinga trajectory prediction minFDE of 1.373, demonstrating itscapability to preserve pre-training knowledge while ensur-ing prediction accuracy. Forecast-PEFT improves predictionwith a minFDE of 1.351 using 20% adapted parameters andonly shows a 1.32 increase in reconstruction forgetting. Theretained pre-trained decoder in PEFT modules helps avoidcatastrophic forgetting, preserving encoder performance andeffectively adapting to prediction tasks.\nContrastingly, Forecast-MAE (FT) fully tunes all parametersbut does not surpass Forecast-PEFT (A) in performance, whilethe reconstruction error increases by factor 3, i.e., forgetsto reconstruct the trajectories and lanes of pre-training. Thisindicates that full fine-tuning compromises pre-trained knowl-edge without enhancing downstream effectiveness, suggestinga potential loss of valuable pre-trained representations duringdecoder re-learning."}, {"title": "E. Cross-Dataset Finetuning", "content": "Trajectory prediction models often face significant chal-lenges due to distribution shifts when applied across differentdatasets. Factors such as differing prediction horizons, urbanenvironments, data collection protocols, and object types con-tribute to these shifts, as observed between the Argoverse 1and Argoverse 2 datasets [42]. These domain gaps can leadto performance degradation, known as catastrophic forgetting,when a model fine-tuned on one dataset is applied to another."}, {"title": "1) Data Standardization:", "content": "To enable effective cross-datasetfine-tuning, it is crucial to standardize the data from differentdatasets. This ensures that the model can handle variationsin data characteristics, such as sampling rates and predictionhorizons, without requiring extensive architectural modifica-tions. In this work, we focus on standardizing data from theArgoverse 1 (AV1), Argoverse 2 (AV2), and nuScenes datasets.\nFor the Argoverse datasets, AV1 and AV2, we align theobservation and prediction horizons to AV2's longer durationsof 5 seconds for observation and 6 seconds for prediction.This contrasts with AV1's shorter horizons of 2 seconds forobservation and 3 seconds for prediction. During fine-tuningon AV1, we pad the absent history and future data withmasking to match the AV2 format, as illustrated in Figure3.\nThe nuScenes dataset presents additional challenges dueto its different sampling rate of 2Hz compared to AV2's10Hz. To ensure consistency, we standardize both datasets toa 10Hz sampling rate by padding the missing time frames andalign their historical data durations. Specifically, we extendnuScenes' original 2-second history to match AV2's 5-secondhistory. Both datasets have the same 6-second predictionhorizon. Figure 3 demonstrates how we address discrepanciesin historical data and sampling frequency through strategicpadding during the fine-tuning process. This approach ensuresthat the Forecast-PEFT framework can be efficiently fine-tunedacross different datasets without necessitating any changes toits architecture or modules, illustrating its robust flexibility."}, {"title": "2) Modular Fine-Tuning Strategy:", "content": "Our Forecast-PEFTframework offers a modular and efficient fine-tuning strategyto address the challenges posed by cross-dataset variations. Asillustrated in Figure 1(c), the tunable parameters in Forecast-PEFT can be viewed as a plug-in module. This design allowsus to fine-tune only the plug-in module, containing 383Kparameters, for each dataset while keeping the rest of themodel frozen. This design significantly reduces the numberof parameters that need adjustment compared to the compre-hensive fine-tuning required by Forecast-MAE, which involves1.9M parameters per dataset.\nThe flexibility and robustness of the Forecast-PEFT frame-work are validated through experiments involving the AV2,AV1, and nuScenes datasets. After pre-training on the AV2dataset, the model is fine-tuned on AV1 and nuScenes byadjusting only the 383K parameters in the plug-in module.Despite the significant differences among these datasets, ourapproach achieves results comparable to Forecast-MAE, whichrequires full fine-tuning of 1.9M parameters for each dataset,as demonstrated in Table IV. This efficiency underscoresForecast-PEFT's capability for effective trajectory predictionacross diverse datasets, making it a powerful and flexible toolfor this task.\nIn summary, our cross-dataset experiments validate the ef-fectiveness of Forecast-PEFT in maintaining high performancewith significantly fewer trainable parameters. This showcasesits practical applicability in real-world autonomous drivingScenarios where models must generalize across varied envi-ronments. The ability to efficiently fine-tune across datasetswithout requiring extensive architectural changes highlightsForecast-PEFT's potential for broad deployment in diverseautonomous driving contexts."}, {"title": "F. Efficiency Analysis", "content": "Our framework, Forecast-PEFT, is designed with the in-tention of saving on three critical resources: training time,training data, and storage space. This section outlines thespecific advantages of Forecast-PEFT in these areas."}, {"title": "G. Ablation Study", "content": "1) Effectiveness of Main Components: Table V presentsan ablation study on the components of Forecast-PEFT us-ing the AV2 validation set. The bottom row of the tableshows the baseline results of Forecast-MAE, while the grayrows represent the performance of Forecast-PEFT(A) and thefull Forecast-PEFT. Forecast-PEFT(A) exhibits some perfor-mance drops in minADE and minFDE compared to completefine-tuning. However, by selectively unfreezing modules inForecast-PEFT, the framework outperforms full fine-tuningacross all metrics, including MR. This validates the effec-tiveness of our designed components in the Forecast-PEFTframework.\n2) Effects of Prompt Length and Depth: Our ablationstudies examine the impact of prompt length and depth forContextual Embedding Prompts (CEP) and Modality-ControlPrompts (MCP), crucial components of the Forecast-PEFTframework. The results offer valuable insights into optimizingthese parameters for improved performance.\nContextual Embedding Prompt (CEP): During pretrain-ing, the encoder processes masked historical trajectories, fu-ture trajectories, and contextual data. In contrast, during fine-tuning and inference, it only handles historical trajectories andcontextual data. CEPs are introduced to bridge this input gap,preserving pre-trained knowledge. Our experiments indicatethat increasing the depth of CEPs by inserting them intomore encoder layers-consistently enhances model perfor-mance. Specifically, Table VI reveals that integrating CEPsinto up to four encoder layers optimizes results, ensuring thatno pre-trained knowledge is lost and the encoder remainsfocused on relevant historical and contextual features.\nModality-Control Prompt (MCP): The role of the decodershifts from reconstructing masked data during pretrainingto forecasting future trajectories during fine-tuning. MCPS"}, {"title": "H. Other Pre-trained Motion Forecasting Models", "content": "Our method is adaptable to other transformer-based pre-trained motion forecasting models, such as Traj-MAE [6] andSEPT [26], which include unused pre-trained trajectory recon-struction decoders. This compatibility makes them suitable forour PEFT strategy. However, we look forward to using themas baselines to validate our method once their codes becomeavailable."}, {"title": "I. Limitations", "content": "The efficacy of Forecast-PEFT largely depends on thequality and relevance of the pre-trained models. The successof fine-tuning can greatly fluctuate depending on the alignmentbetween pre-training and the specific needs of motion forecast-ing tasks. Additionally, the scalability of Forecast-PEFT forlarger datasets or more complex forecasting scenarios requiresfurther investigation."}, {"title": "J. Potential Future Research Avenues", "content": "Our work can serve as a baseline for exploring PEFTmethods in motion forecasting. With more datasets and largermodels becoming available, the advantages of our methodwill become more evident. Through our approach, pre-trainingon one large dataset and then applying PEFT across variousdatasets can significantly benefit real-world applications."}, {"title": "V. CONCLUSION", "content": "Our research presents Forecast-PEFT, a parameter-efficientfine-tuning framework specifically designed for motion fore-casting in autonomous driving. We discovered that traditionalfull fine-tuning methods are suboptimal, as they do not fullyexploit the synergy between self-supervised learning tasksand trajectory prediction. Forecast-PEFT addresses this issueby effectively utilizing the pre-trained model's encoder anddecoder, considerably reducing the number of trainable pa-rameters without sacrificing performance. This efficiency iscrucial for deploying advanced autonomous systems wherecomputational resources are limited. The framework's robust-ness is further demonstrated through successful cross-datasetfine-tuning, highlighting its versatility and broad applicability."}]}