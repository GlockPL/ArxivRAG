{"title": "An Offline Meta Black-box Optimization Framework for Adaptive Design of Urban Traffic Light Management Systems", "authors": ["Taeyoung Yun", "Kanghoon Lee", "Sujin Yun", "Ilmyung Kim", "Won-Woo Jung", "Min-Cheol Kwon", "Kyujin Choi", "Yoohyeon Lee", "Jinkyoo Park"], "abstract": "Complex urban road networks with high vehicle occupancy frequently face severe traffic congestion. Designing an effective strategy for managing multiple traffic lights plays a crucial role in managing congestion. However, most current traffic light management systems rely on human-crafted decisions, which may not adapt well to diverse traffic patterns. In this paper, we delve into two pivotal design components of the traffic light management system that can be dynamically adjusted to various traffic conditions: phase combination and phase time allocation. While numerous studies have sought an efficient strategy for managing traffic lights, most of these approaches consider a fixed traffic pattern and are limited to relatively small road networks. To overcome these limitations, we introduce a novel and practical framework to formulate the optimization of such design components using an offline meta black-box optimization. We then present a simple yet effective method to efficiently find a solution for the aforementioned problem. In our framework, we first collect an offline meta dataset consisting of pairs of design choices and corresponding congestion measures from various traffic patterns. After collecting the dataset, we employ the Attentive Neural Process (ANP) to predict the impact of the proposed design on congestion across various traffic patterns with well-calibrated uncertainty. Finally, Bayesian optimization, with ANP as a surrogate model, is utilized to find an optimal design for unseen traffic patterns through limited online simulations. Our experiment results show that our method outperforms state-of-the-art baselines on complex road networks in terms of the number of waiting vehicles. Surprisingly, the deployment of our method into a real-world traffic system was able to improve traffic throughput by 4.80% compared to the original strategy.", "sections": [{"title": "1 Introduction", "content": "Traffic congestion is a growing problem caused by the rise in the number of vehicles and the complexity of urban road networks, leading to wasted time and harmful emissions [2]. In highly developed cities with intricate road networks, solving congestion by modifying or extending the existing traffic infrastructure is expensive and time-consuming. In this context, an intelligent traffic light management system emerges as a promising method to alleviate congestion in urban areas [23].\nSeveral components of the traffic light management system can be adjusted to significantly mitigate overall road network congestion. Figure 1 illustrates the two primary components of a traffic light management system that can be optimally designed considering diverse traffic patterns. First, we can determine which combination of phases should be assigned to each traffic light. After selecting the combination, we decide the proportion allocated to each phase (also known as the green split). Both components are crucial for coordinating multiple traffic lights to reduce congestion.\nMany traffic engineering methods have been proposed to derive an efficient strategy for managing traffic lights on urban road networks. Classical methods attempt to formulate the green split optimization as mathematical programming, like mixed integer programming. They often rely on strong assumptions such as uniform vehicle arrival rates and fixed right-turn ratios [31, 42, 49, 52]. While these methods have shown promising results [32], they focus only on single or axis-aligned intersections, and their assumptions may not match well with complex traffic networks. Recent approaches formulate the problem as a black-box optimization and apply various algorithms, including genetic algorithms [30, 58], particle swarm optimization [6, 7], and Bayesian optimization [22, 46]. However, these methods typically solve the problem under a fixed traffic pattern, necessitating an optimization from scratch when a new traffic pattern emerges.\nTo overcome the aforementioned limitations, we present a novel and practical framework that can adaptively find an optimal design of phase combination and time allocation for diverse traffic patterns. We treat the optimization of such design components as an offline meta black-box optimization. Within this framework, our aim is to find an optimal design for an unseen traffic pattern with a limited number of online simulations while leveraging prior knowledge from a previously collected offline meta dataset.\nWe propose a simple yet effective method to solve the formulated problem. Our key idea is a novel combination of Attentive Neural Process (ANP) and Bayesian optimization (BO). Initially, we gather an offline meta dataset comprising pairs of design choices and their corresponding traffic measures from various traffic patterns. After collecting the dataset, we train ANP to predict the performance of the proposed design on different traffic patterns with well-calibrated uncertainty, which is crucial in the offline meta-training process. Subsequently, we integrate the trained ANP model with BO as a means of surrogate model. This integration allows us to effectively utilize the capability of performance prediction on various traffic patterns with well-calibrated uncertainty of the ANP model, enabling us to find an optimal design for unseen traffic patterns with limited online evaluations.\nOur method exhibits superior performance across diverse road networks with realistic traffic patterns. Moreover, we also deploy our method into real-world traffic light management systems on urban road networks and demonstrate that our method improves traffic flow compared to the original strategy."}, {"title": "2 Preliminaries", "content": "In this section, we define some terminologies regarding traffic lights and road network systems."}, {"title": "2.1 Traffic Terminology", "content": "Definition 2.1.1 (Traffic Network and Traffic Lights). Traffic network can be defined as a graph G = (V, E), where V is a set of intersections and E is a set of lanes that connect adjacent intersections. Each intersection is equipped with a traffic light device that determines the order and direction of vehicle movements in all lanes at the intersection.\nDefinition 2.1.2 (Traffic Pattern): Traffic pattern p can be defined as a set of vehicle movements, {(o\u2081, d\u2081, t\u2081), (o\u2082, d\u2082, t\u2082),..., (o\u1d65, d\u1d65, t\u1d65)}, where (o\u1d65, d\u1d65) represents an origin-destination (OD) pair and t\u1d65 denotes the departure time of the vth vehicle.\nDefinition 2.1.3 (Traffic Light Phase). Traffic light phase refers to a specific set of traffic movements that are allowed. During a specific phase, only certain vehicular or pedestrian actions are permitted. Common movements include going straight, turning left, and valid combinations of various movements.\nDefinition 2.1.4 (Traffic Light Phase Combination). Traffic signal phase combination comprises a set of traffic signal phases. Most real-world traffic lights determine phase combination as 4~5 number of signal phases and execute them in an iterative manner.\nDefinition 2.1.5 (Traffic Light Phase Time Allocation). Once the traffic light determines the phase combination to circle, we can decide the proportion of time allocated to each phase given a fixed cycle time. Phase time allocation refers to such ratio, and it is also often called a green split in transportation literature [9]."}, {"title": "2.2 Black-box Optimization", "content": "Black-box optimization (BBO) has become a de-facto framework to formulate the optimization problem where the oracle function is non-convex and non-differentiable. Given a black-box function f : \\mathbb{R}^d \u2192 \\mathbb{R}, we can formulate the problem as follows:\nfind x* = arg max f(x)\nx\u2208\\mathbb{R}^d \t(1)\nwhere x is our d-dimensional decision variable. Numerous methods have been discussed to solve the black-box optimization problem, such as evolutionary algorithms [19], genetic algorithms [45], and Bayesian optimization [12].\nIn many real-world applications, we constantly encounter new optimization problems that are different but similar to previously seen problems. Unfortunately, naive BBO algorithms start the optimization process from scratch when encountering new problems. To mitigate this issue, researchers turn their eyes to leveraging prior knowledge to accelerate the optimization process for the new black-box function [10, 39, 57]. This approach is termed a meta black-box optimization (Meta BBO), formulated as follows:\nfind x* = arg max f(x), Given f\u2081, f\u2082...., f\\textsubscript{N}\nx\u2208\\mathbb{R}^d \t(2)\nwhere f\u2081, f\u2082,..., f\\textsubscript{N} and f are i.i.d samples from the distribution over functions p(\u00b7).\nIn this paper, we present a more practical framework, an offline meta black-box optimization, where we have access only to an offline dataset collected from different black-box functions and online interactions with functions unavailable. In the next section, we will explore our formulation in greater detail."}, {"title": "2.3 Neural Processes", "content": "Neural processes (NP, [16]) are the family of stochastic processes, which learn a distribution over functions and have a broad range of applications, including regression [25], classification [18], and generation tasks [14]. Unlike Gaussian Processes (GP, [41]), which have a pre-defined prior for modeling a target function, NP can learn a data-driven prior, enabling them to represent a wide range of complex distributions of functions.\nFormally, NP introduces a latent variable z and uses neural networks to model encoder and decoder networks. Let \u03c6 and \u03b8 be parameters of the encoder and decoder of NP, respectively. Given context set D\\textsubscript{ctx} = {(x\\textsubscript{c}, y\\textsubscript{c})}\\}_{c=1}^{\\|C\\|} and target set D\\textsubscript{tar} = {(x\\textsubscript{t}, y\\textsubscript{t})}\\}_{t=\\|C\\|+1}^{\\|C\\|+\\|T\\|}, the NP encoder first learns a representation r\\textsubscript{c} = E\\textsubscript{\u03c6} (x\\textsubscript{c}, y\\textsubscript{c}) for each context. These representations are aggregated to obtain a global representation r\\textsubscript{ctx}, which is used for parameterizing the distribution of a latent variable z ~ q\\textsubscript{\u03b8} (z|r\\textsubscript{ctx}). Finally, given the sampled latent variable z, the NP decoder returns the predictive distribution of the target set as follows:\n\\prod\\limits_{t=\\|C\\|+1}^{\\|C\\|+\\|T\\|}P\\textsubscript{\u03b8} (y\\textsubscript{t}|x\\textsubscript{t}, z) = \\prod\\limits_{t=\\|C\\|+1}^{\\|C\\|+\\|T\\|}N(y\\textsubscript{t}| \u03bc\\textsubscript{\u03b8} (x\\textsubscript{t}, z), \u03c3\\textsubscript{\u03b8} (x\\textsubscript{t}, z)) \t(3)\nWe train the parameters of NP to maximize the target log-likelihood. As it is intractable, we try to maximize the ELBO term below:\nlogp(y\\textsubscript{t}|x\\textsubscript{t}, D\\textsubscript{ctx}) = log \\int \\prod\\limits_{t=\\|C\\|+1}^{\\|C\\|+\\|T\\|}p(y\\textsubscript{t}|x\\textsubscript{t},z)p(z|D\\textsubscript{ctx})dz \u2265 E\\textsubscript{q\u03b8(z|Dtar)} log \\prod\\limits_{t=\\|C\\|+1}^{\\|C\\|+\\|T\\|}p\\textsubscript{\u03b8} (y\\textsubscript{t}|x\\textsubscript{t},z) - D\\textsubscript{KL} (q\\textsubscript{\u03b8} (z|D\\textsubscript{tar})\\|q(z|D\\textsubscript{ctx})) \t(4)(5)\nA common extension of NP is an Attentive Neural Process (ANP, [25]), which enhances the expressive power of NP. ANP introduces a self-attention module to model higher-order interactions between context pairs while preserving permutation invariance. To predict the target output, ANP employs a cross-attention module instead of mean aggregation so that the target input attends more closely to context representations relevant to the prediction."}, {"title": "2.4 Bayesian Optimization", "content": "Bayesian optimization (BO) is one of the popular techniques to solve black-box optimization. BO is mainly composed of two parts: surrogate model and acquisition function. The surrogate model approximates the objective function, providing a predictive output value distribution. GP is the most commonly employed surrogate model. Then, the acquisition function is utilized to choose the next candidate to evaluate by balancing the predicted mean and variance from the surrogate model. Several acquisition functions have been proposed, including upper confidence bound (UCB, [44]), expected improvement (EI, [35]), and probability of improvement (PI, [28]). After evaluating the candidate, BO utilizes this new evaluation to update the surrogate function and repeat the process until an optimum is achieved."}, {"title": "3 Proposed Framework", "content": "This section introduces a novel framework to address the adaptive design optimization problem for deriving an efficient urban traffic light management system. While we focus on the phase time allocation optimization problem to explain our framework, it can be easily extended to the phase combination optimization problem. Please refer to Appendix A.3 for a more detailed task description."}, {"title": "3.1 Notation", "content": "We begin by defining the decision variable and objective function utilized in our framework.\nDefinition 3.1.1 (Decision Variable) Given a traffic network G with I intersections, we can define our decision variable x = [x\u2081, x\u2082,..., x\\textsubscript{I}] representing our phase time allocation design, where x\\textsubscript{i} denotes phase time allocation design for the ith intersection. Specifically, x\\textsubscript{i} can be defined as a vector, [x\\textsubscript{i1},\u2026\u2026, x\\textsubscript{iJ}], where J is the number of phases and x\\textsubscript{ij} \u2208 [0, 1] is the unnormalized ratio assigned to jth phase of the ith intersection.\nDefinition 3.1.2 (Objective Function). Given a traffic network G with I intersections and a proposed phase time allocation design x, our objective function f is a mapping from the chosen design x to the congestion measure. This measure is specified by deploying such design into the traffic system under traffic pattern p.\nCongestion measure could be a negative of the average number of waiting vehicles or traffic throughput. As such metrics have no analytically closed form, we can only observe the output y = f(x)+\u03f5 corresponding to the given input, with other intrinsic information remaining hidden. It is a common black-box optimization setting where we should iteratively explore the domain space through trial and error until achieving a satisfactory solution."}, {"title": "3.2 Offline Meta Dataset", "content": "Now we define offline meta dataset D, which consists of input-output pairs from various objective functions. We can readily encounter situations where offline meta dataset exists in various industrial systems. In the context of traffic light systems, we constantly encounter different traffic patterns every day, and we can collect log data of vehicle movements corresponding to various designs using loop detectors or surveillance cameras.\nDefinition 3.2.1 (Offline Meta Dataset). Given a traffic network G with I intersections and set of N objective functions {f\u2081, f\u2082,..., f\\textsubscript{N}} specified by different traffic patterns {p\u2081, p\u2082,..., p\\textsubscript{N}}, we can collect an offline meta dataset D consisting of M pairs of designs and the congestion measures for N different functions.\nD = {D\u00b9, D\u00b2,\u2026\u2026\u2026,D\\textsuperscript{N}} \t(6)\nD\\textsuperscript{n} = (X\\textsuperscript{n}, Y\\textsuperscript{n}) = {(x\\textsubscript{m}\\textsuperscript{n}, y\\textsubscript{m}\\textsuperscript{n})}\\}_{m=1}^{\\text{M}} n = 1, 2,\u2026\u2026\u2026, N \t(7)\nwhere x\\textsubscript{m}\\textsuperscript{n} is the mth proposed design evaluated on f\\textsubscript{n} and y\\textsubscript{m}\\textsuperscript{n} is a corresponding congestion measure, y\\textsubscript{m}\\textsuperscript{n} = f\\textsubscript{n}(x) + \u03f5.\nIt is natural to assume that underlying similarities exist between different traffic patterns. We believe that exploiting the knowledge from the existing offline meta dataset can help to optimize high-dimensional design problems associated with devising efficient traffic light schemes for large traffic networks."}, {"title": "3.3 Offline Meta Black-box Optimization", "content": "Finally, we formulate the adaptive design of phase time allocation for an unseen traffic pattern as an offline meta black-box optimization problem.\nDefinition 3.3.1 (Offline Meta Black-box Optimization for Adaptive Design of Phase Time Allocation for Unseen Traffic Patterns). Given a traffic network G with I intersections and offline meta dataset D collected from G under N different traffic patterns, our problem can be defined as follows:\nx* = arg max funseen (x), Given D from Equation (6). \t(8)\nx\nwhere funseen is the objective function specified by unseen traffic pattern, which is not included in the offline meta dataset."}, {"title": "3.4 Differences with RL-based Approaches", "content": "We emphasize that our method focuses on solving design optimization problems for discovering efficient traffic light management systems instead of deriving a real-time feedback controller. While reinforcement learning (RL) has been considered a promising framework to control traffic lights in real-time [3, 17, 36, 53-55, 59], to best of our knowledge, those methods have not been deployed for real traffic network systems due to several challenges [4, 40]. Firstly, most RL-based methods define an action as selecting the next phase from a pre-defined set of phases with short decision intervals. This approach can lead to frequent and inconsistent phase transitions, potentially confusing drivers [8, 37]. Moreover, they require the frequent acquisition of accurate traffic flow data in real-time, necessitating sophisticated and expensive sensing and computing technologies [15]. Our method distinguishes itself from those methods by framing the problem as a static optimization."}, {"title": "4 Proposed Method", "content": "In this section, we propose a simple yet effective method to solve the problem formulated in the previous section. Our method encompasses three primary stages: Offline Data Collection, Meta Training, and Online Adaptation. We innovate each process to enhance our method. First, we accelerate the data collection process via parallelization with random sampling. Subsequently, we meta-train ANP using the collected offline meta dataset. Lastly, we employ Bayesian optimization for few-shot online adaptation with the trained ANP as a surrogate model. Figure 2 provides an overview of our method."}, {"title": "4.1 Offline Data Collection", "content": "We construct the offline meta dataset by evaluating various designs on different traffic functions. For sampling design x, we use random sampling strategy. While it may be far from the optimal strategy, it is efficient since we can parallelize the data collection process. Conversely, collecting samples via optimization strategies must be done sequentially as they make decisions based on previous evaluations, which is computationally expensive."}, {"title": "4.2 Meta-Training Neural Process with Offline Data", "content": "We employ ANP to predict the distribution of the objective function f given a context set D\\textsubscript{ctx} = {(x\\textsubscript{c}, y\\textsubscript{c})}\\}_{c=1}^{\\|C\\|}. As a type of meta-learning, ANP can effectively infer the objective function with few evaluations. In addition, its uncertainty quantification helps overcome the distributional shift issue when using the offline dataset.\nFigure 2 depicts the process of how we train ANP with the offline meta dataset. For each training step, we arbitrarily choose a dataset D\\textsuperscript{n} from the offline meta dataset D. Then, we draw samples from the D\\textsuperscript{n} and split them into context and target sets.\nD\\textsubscript{ctx} = {(x\\textsubscript{c}\\textsuperscript{n}, y\\textsubscript{c}\\textsuperscript{n})}\\}_{c=1}^{\\|C\\|} , D\\textsubscript{tar} = {(x\\textsubscript{t}\\textsuperscript{n}, y\\textsubscript{t}\\textsuperscript{n})}\\}_{t=\\|C\\|+1}^{\\|C\\|+\\|T\\|} \t(9) (10)\nD\\textsubscript{ctx}, D\\textsubscript{tar} \u2282 D\\textsuperscript{n}\nwhere |C|, |T| represent the number of samples in the context and target sets, respectively. We train ANP to maximize the ELBO term defined in Equation (5) for sampled context set D\\textsubscript{ctx} and target set D\\textsubscript{tar}."}, {"title": "4.3 Online Adaptation with Bayesian Optimization", "content": "After meta-training ANP, we employ BO to find an optimum design for unseen traffic patterns as shown in Figure 2. Firstly, we set D\\textsubscript{on} as an empty set and initialize a surrogate model with a meta-trained ANP. For each evaluation step k, we approximate the target function funseen with the surrogate model. In other words, our model infers a posterior distribution of the target function conditioned on D\\textsubscript{on}. ANP projects D\\textsubscript{on} into z and implicitly captures the similarity between the target traffic pattern and patterns that are used for collecting offline meta dataset in the latent space.\nGiven posterior distribution, the acquisition function identifies an optimal-looking candidate by balancing the predicted mean and variance. Among various acquisition functions, we use upper confidence bound (UCB) as a default setting. After selecting x\\textsubscript{t+1}, we evaluate the proposed design and get results, y\\textsubscript{k+1} = funseen (x\\textsubscript{k+1}) + \u03f5. Then we update the online dataset D\\textsubscript{on} \u2190 D\\textsubscript{on} \u222a {(x\\textsubscript{k+1}, y\\textsubscript{k+1})} and repeat the process until the end of the budget K."}, {"title": "5 Experiments", "content": "This section presents our experiment results on adaptive design optimization tasks, phase combination, and phase time allocation. We validate our method on various sizes of traffic networks."}, {"title": "5.1 Experiment Setting", "content": "We conduct our experiments on SUMO [1], an open-source traffic simulator supporting a large-scale traffic lights management system. For all experiments, we evaluate the proposed design by aggregating the average number of waiting vehicles from all intersections."}, {"title": "5.1.1 Traffic Environments.", "content": "We evaluate our method on seven different traffic road networks, including four synthetic road networks and three real-world road networks, Hangzhou_4\u00d74, Manhattan_16\u00d73, and Manhattan_28\u00d77. Figure 4 illustrates the real road networks used in our experiments.\n\u2022 Synthetic road networks: We create four synthetic road networks with different sizes: 2\u00d72, 3\u00d73, 4x4, and 5\u00d75 grids.\n\u2022 Hangzhou_4\u00d74: It consists of 16 intersections in Gudang Subdistrict with traffic data generated from the surveillance cameras.\n\u2022 Manhattan_16\u00d73, 28\u00d77: Each network comprises 48 and 196 intersections in the upper east side of Manhattan with traffic data from the open-source taxi trip data.\nIn case of the synthetic networks, we pre-define a set of origin-destination pairs and sample the interval \u0394t between vehicles for each pair from randomly initialized Poisson distribution to create diverse patterns. For real-world networks, as we already have a predetermined traffic pattern, we randomly reassign departure time t for each vehicle to create diverse traffic patterns. For further details, please refer to Appendix A.1."}, {"title": "5.1.2 Design Components.", "content": "We evaluate our method on two different adaptive design optimization tasks for coordinating multiple traffic lights on urban road networks.\n\u2022 Phase combination: We choose a phase combination among pre-defined four valid phase combinations for all intersections. Figure 3 shows possible combinations of phases. We evenly distribute cycle time into all phases.\n\u2022 Phase time allocation: We choose the ratio to be assigned for each phase at every intersection. We use the Combination 1 in Figure 3 as a default setting. We also guarantee at least 30 seconds for all phases. The cycle time is set to 180.\nNote that we guarantee minimum green time for each phase. While it is a practical assumption since pedestrians require adequate time to pass crosswalks in real-world, it is frequently overlooked in real-time phase controlling strategies."}, {"title": "5.1.3 Offline Data Collection.", "content": "For all experiments, we prepare an offline meta dataset from 120 different traffic patterns and split it into a ratio of 5:1 for train and valid datasets. We evaluate 200 randomly sampled designs for each traffic pattern in both datasets. In Manhattan_28\u00d77 network with phase combination design problem, the search space is 4\\textsuperscript{28\u00d77}, where our offline meta dataset can cover only a tiny fraction of the whole search space."}, {"title": "5.2 Baselines", "content": "We consider several state-of-the-art baselines suitable for design optimization problems.\n\u2022 BBO: Black-box optimization methods search an optimal design by trial and error through iterative online evaluations. Genetic algorithm (GA [45]), particle swarm optimization (PSO [24]), GP with UCB as an acquisition function (GP-UCB [44]), evolutionary algorithm (CMA-ES [19]), and reinforcement learning based method (REINFORCE [56]) are included.\n\u2022 Meta BBO: We also consider methods that leverage prior knowledge from various tasks to solve the unseen problem more efficiently rather than starting from scratch. We consider LGA [29] and LES [47], which parameterize components in genetic and evolutionary algorithms, respectively. We also include meta Bayesian optimization methods, RGPE [10], ABLR [39], and FSBO [57] as state-of-the-art baselines."}, {"title": "5.3 Implementation", "content": "For implementing baselines, we try to strictly follow implementations from authors. To implement our method, we use publicly available code\u00b9. We employ multi-layer perceptron (MLP) to parametrize encoder and decoder networks for all experiments. We train the model with 10,000 epochs except for Manhattan scenarios. Since the Manhattan scenarios have very high dimensional input space, we increase the number of epochs to 25,000. For each training step, we utilize a batch size of 16. The size of the context set |C| is sampled from Unif(10, 190), and the size of the target set |T| is sampled from Unif(10, 200 \u2013 |C|). Please refer to Appendix A.2 for more details on implementations."}, {"title": "5.4 Main Results", "content": "We compare the performance of the proposed method and baselines on different traffic networks. For testing, we sample 10 new traffic patterns, which have never been included in the offline meta dataset. We then perform optimization with K online trials for each traffic pattern and report the average of best performance among trials. For Grid_2\u00d72, 3\u00d73 and 4\u00d74 networks, we set K = 40, 60 and 80 respectively. For other networks, we set K as 100.\nTable 1 and Table 2 summarize the overall experiment results. As indicated in tables, our method consistently outperforms baselines. We find that Meta BBO baselines generally exhibit higher performance compared to other baselines, which have no capability to capture underlying similarities between different traffic patterns. However, those methods do not consistently perform well across different design components and traffic networks, especially when the scale of network grows. The performance gap between GPUCB and our method also further underscores the superiority of meta-trained ANP as a surrogate model.\nFigure 5 (Left) displays the performance of our proposed method and baselines over the course of evaluation for phase combination task on the Hangzhou network. As depicted in the figure, our method not only achieves superior performance but also converges more rapidly to the high-performing solution. These results support our claim that ANP can discern underlying prior distribution over different traffic patterns even when trained on offline meta dataset. Then BO utilizes that information from ANP to search the domain space efficiently, which synergistically leads to superior performance. Figure 5 (Right) shows the performance of our method and baselines for the phase time allocation task on Hangzhou network. We also observe a similar trend on phase time allocation task, showcasing the efficacy of our method across different design components."}, {"title": "5.5 Qualitative Analysis", "content": "We analyze the efficiency of our proposed method in determining the appropriate design for unseen traffic patterns adaptively by comparing congestion levels in the Manhattan_16\u00d73 network before and after optimization. Figure 6 represents the congestion level of each lane in the sub-region. The lines in green, yellow, and red, respectively, denote light, moderate, and heavy traffic conditions. As evident from the figure, our approach significantly reduces congestion. We also illustrate the evolution of the phase time allocation using heatmap, where a deeper block indicates longer time is allocated to the phase. As observed, after a few online adaptation steps, our model recommends an extended green light duration for the North South direction to all intersections. This strategy aligns well with the given traffic flow pattern, where a major traffic volume concentrates on North South direction."}, {"title": "5.6 Comparison with RL-based Methods", "content": "In this section, we discuss the difference between our framework with RL-based methods. To facilitate this, we compare the performance of RL-based methods on phase combination optimization tasks. For a fair comparison, we formulate the problem as a 1-step MDP and provide only a single global reward at the terminal step. This is a practical setting since on-the-fly traffic information gathering and processing in real-world traffic systems is costly.\nWe consider several baselines, including Q-Learning based and Actor-Critic methods. We adopt code from LibSignal [33], an open library for RL-based traffic signal control. DQN [34, 48] and PPO [43] train single central RL policy to govern all intersections, while independent DQN (IDQN, [60]) and independent PPO (IPPO) consider each intersection as an independent RL agent. Finally, we also compare the performance of recent RL-based methods tailored for traffic light control, CoLight [54] and MAPG [5]. Both methods utilize neighborhood information to promote the coordination of multiple traffic lights.\nTable 3 shows the performance of RL-based methods. While recent RL-based methods such as CoLight and MAPG show relatively good performance than other baselines, our method still surpasses those methods. It seems that coordinating multiple traffic lights using a global reward signal is notoriously difficult for RL-based methods, especially under limited online evaluations [51]."}, {"title": "5.7 Additional Experiments", "content": "In this section, we present further experiments to deepen our understanding of the proposed method."}, {"title": "5.7.1 Size of the Offline Meta Dataset.", "content": "It is important to check the robustness of performance in terms of the size of the dataset since we cannot collect infinitely large amounts of data in real-world traffic scenarios. To address this, we conduct additional experiments by varying the size of the offline meta dataset in two ways: (1) changing the number of different traffic patterns, N, and (2) changing the number of input-output pairs per pattern, M. We perform experiments on Grid 3\u00d73 network with phase time allocation optimization task.\nWe compare the performance of our method with baselines, RGPE, ABLR, and FSBO, which utilize the offline meta dataset. The results from these experiments are listed in Table 4. As the table illustrates, our model outperforms other baselines regardless of the number of traffic patterns and samples collected per pattern. It suggests our model effectively identifies hidden similarities between different traffic patterns even with the small size of the dataset. We also find that the performance of our model constantly improves as the scale of the dataset increases, showcasing its capability."}, {"title": "5.7.2 Evaluation on Different Metrics.", "content": "There are several different evaluation metrics to validate the efficiency of the proposed design on traffic system. We prepare two additional evaluation metrics: average traveling time and CO2 emissions. To compute both metrics, we use getTravelingtime() and getCO2Emission() method implemented by SUMO [1].\nWe conduct experiments on synthetic grid environments with phase time allocation optimization task. As shown in the Tables 5 and 6, our method consistently outperforms other state-of-the-art baselines even when we change the evaluation metrics."}, {"title": "5.7.3 Acquisition Function Choices.", "content": "We investigate the dependency of our method in different acquisition functions during online adaption with Bayesian optimization. To validate this, we prepare two additional acquisition functions, expected improvement (EI) and probability of improvement (PI). As shown in the Table 7, our method demonstrates robust performance across various acquisition functions."}, {"title": "5.7.4 Model Architecture Choices.", "content": "We choose ANP as a metasurrogate model for our method due to its simplicity and expressivity. We notice that Transformer Neural Processes (TNP, [38]) have recently been proposed, which exhibit state-of-the-art performance in various benchmark problems. To this end, we compare our method with TNP-D as a meta-surrogate model.\nWe perform our experiments on Grid 2\u00d72, 3\u00d73, 4x4, and 5\u00d75 networks with phase time allocation task. We present the experiment results in the Table 8. Unlike experiment results in synthetic benchmark problems reported in recent papers, ANP shows better performance compared to TNP-D in our experiment setting. We speculate that this discrepancy occurs due to the size of the dataset. Unlike benchmark problems, we have a limited offline dataset that covers only a small manifold of the whole space. In these circumstances, expressive methods such as TNP-D might suffer from severe overfitting issues and lead to poor performance. Note that our contribution is not developing a novel NP architecture but introducing a practical framework and method to solve real-world traffic problems. We hope that our research can raise the question of whether highly developing NP variants tested in specific benchmark problems are truly beneficial in real-world problems."}, {"title": "6 Real-World Deployment", "content": "We implement the optimized phase time allocation design for the 26 actual traffic lights. Due to privacy issues, we anonymize the deployment site as District A. Please refer to Appendix D for more information about the deployment."}, {"title": "7 Related Works", "content": "In this study, we aim to derive an efficient urban traffic light management system by solving offline meta black-box optimization problems on two pivotal design components: phase combination and phase time allocation. We propose a novel combination of ANP and BO which can identify underlying similarities between traffic patterns and transfer the knowledge effectively from the offline meta dataset to the online adaptation process. We demonstrate the superiority of our novel combination not only on simulation-based various urban road networks with diverse traffic patterns but also on real-world deployment."}, {"title": "7.1 Traffic Light Optimization", "content": "Optimizing multiple traffic lights in urban road networks to alleviate traffic congestion has been widely studied. Li and Sun [30", "58": "apply genetic algorithm to determine the optimal phase time allocation while Dabiri and Abbas [6", "7": "introduce particle swarm optimization to optimize the phase time allocation for the overall traffic network. Recently, Tay and Osorio [46"}]}