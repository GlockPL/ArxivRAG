{"title": "AgentSociety: Large-Scale Simulation of LLM-Driven Generative Agents Advances Understanding of Human Behaviors and Society", "authors": ["Jinghua Piao", "Yuwei Yan", "Jun Zhang", "Nian Li", "Junbo Yan", "Xiaochong Lan", "Zhihong Lu", "Zhiheng Zheng", "Jing Yi Wang", "Di Zhou", "Chen Gao", "Fengli Xu", "Fang Zhang", "Ke Rong", "Jun Su", "Yong Li"], "abstract": "Understanding human behavior and society is a central focus in social sciences, with the rise of generative social science marking a significant paradigmatic shift. By leveraging bottom-up simulations, it replaces costly and logistically challenging traditional experiments with scalable, replicable, and systematic computational approaches for studying complex social dynamics. Recent advances in large language models (LLMs) have further transformed this research paradigm, enabling the creation of human-like generative social agents and realistic simulacra of society. In this paper, we propose AgentSociety, a large-scale social simulator that integrates LLM-driven agents, a realistic societal environment, and a powerful large-scale simulation engine. Based on the proposed simulator, we generate social lives for over 10k agents, simulating their 5 million interactions both among agents and between agents and their environment. Furthermore, we explore the potential of AgentSociety as a testbed for computational social experiments, focusing on four key social issues: polarization, the spread of inflammatory messages, the effects of universal basic income policies, and the impact of external shocks such as hurricanes. These four issues serve as valuable cases for assessing AgentSociety's support for typical research methods \u2013 such as surveys, interviews, and interventions \u2013 as well as for investigating the patterns, causes, and underlying mechanisms of social issues. The alignment between AgentSociety's outcomes and real-world experimental results not only demonstrates its ability to capture human behaviors and their underlying mechanisms, but also underscores its potential as an important platform for social scientists and policymakers.", "sections": [{"title": "1 Introduction", "content": "Over the past decades, researchers across various fields \u2013 spanning social science, physical science, and computational science \u2013 have made significant efforts to understand the functioning and development of society along two dimensions: explanation and prediction [46, 61, 62]. Explanation seeks to identify the causal mechanisms and underlying factors that drive observed social patterns, aiming to offer a deeper understanding of why certain outcomes occur in society [46, 44]. Gaining such an understanding often requires conducting social experiments, which can be costly to implement and pose substantial practical and ethical challenges. On the other hand, prediction focuses on using data to forecast future events or emergent behaviors, often without delving into the causal factors, but instead concentrating on the accuracy of anticipating future trends [22, 46]. The framework that combines explanation and prediction methods, forms the foundation of computational social science [46]. However, as the physicist Richard Feynman famously stated, \u201cWhat I cannot create, I do not understand\u201d, suggesting that true understanding goes beyond merely observing, explaining, or predicting human behavior [31, 30]; instead, it requires the ability to generate the systems we study [31, 30]. In this vein, a new paradigm of \"generative social science\" is rapidly emerging, which emphasizes the bottom-up simulation of social systems to gain in-depth insights into their underlying mechanisms and predict future outcomes [31, 30]. A well-established method in this paradigm is agent-based modeling, which aims to model complex social dynamics by simulating the actions and interactions of agents [30, 67, 103]. This method, compensating for the limitations of social experiments, is widely applied in studies across social science [41, 18, 39], political science [27, 60, 64], economics [10, 34], and other interdisciplinary fields [8, 38, 79, 80], advancing their understanding of human behaviors and society through various simulations. However, the broader impact of these studies has been hindered by the same long-standing issue: to what extent can these simulations authentically replicate the complexities of real human society?\nIndeed, the authenticity of these simulations depends on to what extent the most basic components - i.e., the agents \u2013 behave like humans. However, most existing agents, driven by rules [29], equations [45], or even machine learning models [115], are limited in their ability to generate human-like behaviors. For example, when simulating opinion dynamics, people's opinions are often represented as scalars or vectors, and their interactions as equations [15]. While this modeling approach offers valuable insights, it is still far from reality, as people typically communicate using natural language, rather than numeric values. Fortunately, recent advances in large language models (LLMs) have shown promise in creating human-like agents [38, 99, 106]. Numerous studies have pointed out that after being empowered by LLMs, these agents agents have generated human-like \u201cminds\u201d [92, 63, 55]. They not only possess basic cognition abilities, such as learning [106, 99], reasoning [102], and decision-making [64, 38], but also demonstrate the capability to understand and predict the thoughts and intentions of others [55, 92]. Furthermore, beyond exploring these agents' minds, some researchers have investigated their potential to mimic human behaviors [64, 80, 89, 108, 33, 48, 39, 77]. Their investigations have revealed that, through elaborate designs incorporating domain knowledge, these LLM-driven agents can generate social behaviors, such as mobility [89, 108, 33], employment [64, 48], consumption [64, 48], and social interactions [39, 77]. While great efforts have been made to examine specific facets of these agents, simulating a comprehensive social being remains largely underexplored.\nAs the famous sociologist George Herbert Mead stated, \u201cThe self is something which has a development; it is not initially there, at birth, but arises in the process of social experience and activity.\" [70] Therefore, the mere incorporation of minds and behaviors into these generative agents is insufficient to create a social being; instead, social experience and activity, emerging from interactions with other agents and the environment, are crucial. Several recent studies have provided substantial empirical evidence supporting this point. Some have discovered that the collaboration of multiple agents can generate believable social organizing behaviors [77] and solve complex tasks [63, 24]. Moreover, as the number of agents further scales up, large-scale interactions among them can lead to the emergence of social norms and collectives [58, 80]. Meanwhile, the environment not only serves as the ground for interactions among agents, but also provides critical feedback that guides their behaviors [6, 64, 98, 117]. For example, the widely-adopted gaming environment \u201cMinecraft\u201d provides feedback, such as crafting materials, tools, or resources, enabling agents to adapt their behaviors, solve tasks, and gain civilizational progression [98, 117, 6]. Overall, as highlighted by these studies, a scalable framework supporting large-scale interactions and a realistic environment is foundational"}, {"title": "2 AgentSociety: Design and Overview", "content": "Society is a complex system, characterized by large-scale interactions among individuals with diverse social behaviors, whose nonlinear dynamics often give rise to emergent phenomena and unpredictable collective behaviors in a certain environment [87, 57, 30]. For example, in social networks, interactions between individuals can result in the emergence of polarization [15]. Moreover, financial market crashes, a classic phenomenon in economic systems, stem from the collective behavior of market participants and the herding tendencies of individuals [91]. These emergent phenomena, despite originating from individuals' behaviors, cannot be fully explained or predicted solely based on individual components [87, 57, 30]. Therefore, this requires us to adopt a bottom-up perspective [30, 31, 29]: we should begin by simulating an individual social agent, and then generate an artificial society by incorporating a realistic environment and facilitating large-scale interactions among agents as well as between agents and their environment.\nTherefore, we develop an evaluation framework to examine the capabilities of various LLM-driven social simulators along these three key dimensions (Figure 1). We first focus on the most basic element of the simulator, i.e., LLM-driven social generative agents. As discussed above, the design of these agents can be divided into three levels: minds, social behaviors, and their coupling methods (M-B coupling). At the mind level, researchers initially input a profile description into LLMs, enabling them to role-play and respond like a real person with a similar profile [24]. However, such simple role-play cannot guarantee the quality of behavior generation. Consequently, an increasing number of studies, inspired by the pioneering work of Park et al. [77], incorporate agentic module design such as profile, memory, reflection, and action, into their LLM-driven agents [39, 64]. In this way, these agents can exhibit more human-like behaviors and generate responses that are coherent, context-aware, and aligned with their designated profiles. Recently, some researchers have realized that agents designed purely based on the commonsense knowledge of LLMs lack the social intelligence needed to mimic a real social being. To improve this, they have drawn on some theories from psychology to create agents with socially intelligent designs [101, 6]. However, they do not organically integrate theories"}, {"title": "3 LLM-driven Social Generative Agents", "content": "As discussed above, the rapid development of LLMs allows us to design human-like agents with not only basic psychological states [1, 92], but also complex social behaviors such as mobility [89, 108, 33], employment [64, 48], consumption [64, 48], and social interactions [39, 77]. While these efforts in specific areas have shown the human-level intelligence of LLMs, creating LLM-driven social generative agents capable of simulating a comprehensive social being remains difficult. This difficulty primarily lies in two aspects. First, human behaviors are inherently motivated by psychological states [32, 69, 68, 5]. However, this crucial connection is largely absent in a vanilla LLM or existing"}, {"title": "3.2 Emotion, Needs, and Cognition", "content": "Humans are driven by an intricate interplay of feelings, motivations, and thought processes that shape their decisions and interactions [90, 7]. Grounded in psychological theories, our study integrates three fundamental constructs, including emotion, needs, and cognition, to design agents that realistically simulate adaptive and human-like behavior. Emotion, as the most dynamic layer of human psychology, drives rapid responses to external situations and influences behavior [20, 16]. Needs, based on Maslow's hierarchy of needs theory, serve as motivational drivers, spanning from basic survival requirements to higher aspirations like personal growth [3]. Modeling these needs enables agents to adopt realistic motivations and prioritize actions in ways relatable to human behavior. Cognition, informed by theories like Theory of Mind and Cognitive Appraisal Theory, involves advanced mental processes that allow agents to evaluate complex situations, make thoughtful decisions, and adapt to diverse situations [13, 88]. Drawing on these psychological theories, agents recognize their own knowledge and the mental states of others while evaluating context sensitively, enabling effective and goal-oriented social interactions [81]. By integrating these crucial elements, our study designs agents that can respond dynamically to real-time changes while tailoring their actions to reflect human-like characteristics and behaviors within complex social simulations. The overall modeling framework for the psychological and cognitive aspects of the agent is illustrated in Figure 4."}, {"title": "3.3 Mobility Behaviors", "content": "Mobility serves as the fundamental basis for social agents to engage in interactions and fulfill their demands. Mobility is not a random behavior but is needs-driven across multiple levels. For instance, when an agent experiences hunger (a basic survival need), it must move to a restaurant to obtain food; to attend a work meeting (an advanced professional need), commuting to an office becomes necessary. These mobility behaviors directly serve specific goals, acting as physical carriers for social interactions, economic activities, and other societal behaviors. In essence, the core challenge of mobility modeling is to bridge the spatiotemporal gap between needs and behaviors. Without effective mobility, agents cannot achieve role immersion or behavioral closure in complex social environments.\nAs depicted in the previous section, the Needs of social agents exhibit a hierarchical structure: from foundational needs (e.g., eating, resting) to safe and social needs (e.g., work, social gatherings). To satisfy the needs, it requires implementation through a \"Need - Plan - Behavioral Sequence\" chain. Taking social needs as an example, an agent first formulates a plan to \"attend a friend's gathering,\" which decomposes into behavioral sequences such as \"scheduling time (Friday evening), selecting a location (caf\u00e9), moving.\" Here, location selection becomes the direct driver of mobility to reach the target location. This spatiotemporal coupling establishes mobility as the critical execution step for demand realization.\nFollowing the needs-driven principle, the mobility module adopts a hierarchical decision framework (shown in Fig. 5):\n1. Intention Extraction: Derive core mobility intentions from demand hierarchies. For example, when \"social demand\" is activated, the agent may extract a \"move to social venue\" command.\n2. Place Type Selection: Match demands with POI (Point of Interest) types in geographic databases. If the intention is social interaction, venues like caf\u00e9s or parks are filtered.\n3. Radius Decision: Dynamically determine feasible ranges by integrating internal states (e.g., age, stamina) and environmental parameters (e.g., weather, traffic). Heavy rain may constrain the radius of indoor venues within 1 km or even stay at home.\n4. Place Selection: Apply the Gravity model for spatial optimization:\n$P_{ij} = \\frac{S_j / D_{ij}^{\\beta}}{\\Sigma S_k / D_{ik}^{\\beta}}$         (1)\nwhere $S_j$ denotes the attractiveness of location j, $D_{ij}$ is the distance, and $\\beta$ is the distance decay coefficient. This model reduces LLM computational overhead while ensuring selections align with human spatial patterns (e.g., proximity principle, agglomeration effects).\nMobility serves as a foundational behavioral module, operating as an integrative force within the social agent's action network. This enables multidimensional coordination across social, economic, and environmental domains. The act of moving to a park, for instance, inherently carries the potential for social synergy. Spontaneous encounters with acquaintances may emerge, catalyzing dialogues, collaborative activities, or even serendipitous social events. These interactions exemplify how mobility serves as a conduit for organic relationship-building. Concurrently, economic synergy manifests through goal-oriented displacements. Commuting to workplaces directly sustains labor productivity, while visiting commercial hubs like shopping malls create opportunities for consumption, thereby linking physical movement to economic cycles. Beyond the human-centric interactions discussed above, mobility also embodies environmental adaptation. Agents dynamically adjust routes based on real-time traffic data or weather fluctuations, demonstrating responsiveness to spatial-temporal constraints. Collectively, these synergies position mobility as the dynamic chassis of social adaptability. It fulfills immediate demands and also provides the contextual infrastructure for complex, layered interactions in urban ecosystems."}, {"title": "3.4 Social Behaviors", "content": "Social behaviors play a critical role in our agent simulation framework. They enable the flow of information and influence between agents, and further lead to the emergence of collective phenomena through agent interactions. In real societies, people's beliefs, opinions, and behaviors spread and evolve primarily through social connections and communications. Therefore, modeling social behaviors allows us to simulate how information and influence flow between agents affects both individual and group dynamics. Our social module consists of two components: social relationships defining the connections between agents, and social interaction behaviors enabling communication between connected agents.\nWe include three types of social relationships in our framework: family bonds, friendships, and colleagues. Each relationship has a strength value ranging from 0 to 100 representing social closeness between agents. Agents communicate more frequently with high strength connections and adjust their communication tone based on relationship type. For example, agents use more formal language with colleagues and casual language with close friends. We maintain detailed interaction history between connected agents, including message content and time, which influences how they communicate in future interactions.\nOur framework primarily focuses on modeling online social behaviors on online social networks. Motivated by their social needs, agents select interaction partners based on relationship types and strength. For instance, when sending casual messages, agents typically choose their best friends, which are friends with the highest relationship strength. Target selection also considers the recipient's profile characteristics. When an agent wants to discuss specific topics, they select friends with relevant expertise or experience. For example, an agent seeking advice about security issues would contact friends who work as police officers. After selecting a target, agents start conversations. The content of these messages is shaped by multiple factors: the agent's current needs and intentions determine the conversation topic, their thoughts and beliefs influence the specific content, and their emotional state affects the message tone and style. When receiving messages, agents generate responses based on their relationship strength with the sender, their chat history, and their current emotional state. Our current framework primarily models online social interactions through messaging on online social network, with plans to incorporate offline interactions. For example, when agents discover shared interests in particular topics or need to have more detailed discussions, they can coordinate offline meetings through online communication.\nSocial behaviors are deeply interconnected with agents's emotional states, cognition, economic behaviors, and mobility behaviors. An agent's current emotions and beliefs directly influence how they compose messages, while received messages can significantly alter their emotional state and viewpoints. Positive interactions can improve mood and strengthen relationship bonds, while negative interactions may lead to emotional distress and weakened connections. The exchange of economic information through social interactions can trigger economic behaviors. For instance, when agents receive news about job opportunities or market conditions from their social connections, they may adjust their employment or consumption decisions accordingly. Similarly, social interactions often lead to mobility behaviors, such as when agents receive event invitations or arrange offline meetings with their connections.\nThrough this comprehensive social behavior modelling, we enable agents to engage in meaningful interactions that both shape and are shaped by their internal states and external behaviors. Our social module captures both relationship structures between agents and their interaction behaviors, allowing agents to interact and influence each other as they do in real societies, and providing a foundation for studying how information and influence spread in the simulated society."}, {"title": "3.5 Economic Behaviors", "content": "Economic behavior in daily life is a necessary component for sustaining life, with employment and consumption being the core economic activities. These two behaviors occupy the majority of time for social agents and further influence their psychological states, including cognition, emotional well-being, and overall life satisfaction. Moreover, economic behavior is deeply intertwined with other aspects of an agent's daily life, such as mobility and social interactions. The satisfaction of one need, whether it is economic or social, often triggers a cascade of related behaviors that span across different domains of the agent's life. For example, an agent's decision to work longer hours to increase their income may result in less time available for social interactions. Similarly, the decision to spend more on consumption could lead to adjustments in an agent's mobility patterns, such as"}, {"title": "3.6 Workflow of LLM-driven Social Generative Agents", "content": "In this section, we introduce the workflow of our LLM-driven social agent, highlighting how the agent's internal psychological states (Emotion and Cognition) and its behaviors influence each other and form a complete loop. This loop continuously adapts the agent's actions based on its evolving cognitive states, ensuring that behavior is dynamically aligned with both internal motivations and external context. The core mechanism linking these psychological states to behavior is Memory, which connects the agent's cognitive states with its actions. This enables the agent to make adaptive decisions that reflect its past experiences, current needs, and cognitive responses.\nAt the core of our solution is the use of Memory to link the agent's internal psychological states to its behavior. Memory acts as a bridge between the agent's current emotions, cognition, and its past experiences, ensuring that its actions are informed by both historical context and present needs. Memory is not a passive system but actively shapes the agent's decisions and behavior, enabling continuous adaptation and coherence in its responses to changing situations. Specifically, Memory is divided into three main components, each with a specific role in the agent's overall operation:\n\u2022 Profile: Stores the agent's static attributes, such as demographic information (e.g., gender, age), which remain constant and provide context for interpreting the agent's behavior.\n\u2022 Status: Records the agent's dynamic state information in key-value pairs, including data like current needs, satisfaction levels, and financial status, which directly influence decision-making.\n\u2022 Stream Memory: This is the core part of the memory system and tracks events and perceptions over time. It is composed of two types of memory streams: Event Flow and"}, {"title": "4 Real-world Societal Environment", "content": "According to the introduction above, in the design and simulation of social agents, mobility behaviors, social behaviors, and economic behaviors like employment and consumption are essential external capabilities. In the real world, the manifestation of these behaviors is grounded in corresponding objective entities, not merely in human subjective cognition. For example, mobility behaviors imply a continuous change in spatial and temporal location. Therefore, if we rely solely on the knowledge and capabilities of LLMs to conduct such simulations without incorporating modeling of the operational laws and constraints of the real world, the simulation results are likely to be influenced by the \"hallucinations\" of LLMs [49], resulting in outcomes that diverge from actual realities. To address this issue, we need to provide a realistic and reliable environment for simulating social agents. The environment should include the following features:\n\u2022 Appropriate modeling of real-world operational principles to reflect physical constraints and costs, and provide feedback on behaviors;\n\u2022 Environmental data sourced from the real world or aligned with real-world principles;\n\u2022 Interfaces to enable interaction with agents.\nSuch an environment will serve as a virtual mapping of the objective aspects of the world in social simulations, enabling the design of social agents to focus solely on subjective human behavioral logic. By offloading tasks such as numerical computations, where LLMs cannot guarantee absolute accuracy, this approach simplifies agent design and allows researchers to concentrate on core objectives.\nIn alignment with this objective, we encode expert knowledge to construct a real-world societal environment as depicted in Figure 9, designed to support the simulation of mobility behaviors, social behaviors, and economic behaviors. The entire environment is divided into three spaces. The"}, {"title": "4.2 Urban Space", "content": "To address the needs of social agents for moving and interacting with different places, accurate modeling of urban space is essential. The urban space must capture both the physical movement pattern of individuals and their interactions with diverse urban locations.\nInspired by traffic simulation platforms such as SUMO [17] and CityFlow [112], also leveraging the spatial abstraction schemas of OpenStreetMap, the urban space is structured into two interdependent layers, the static infrastructure attributes and dynamic mobility behaviors.\nThe static attribute layer includes road networks, defined by lanes, roads and junctions to encode traffic accessibility, as well as functional zones, which are Areas of Interest (AOIs) and Points of Interest (POIs). AOIs delineate regions with specific purposes, such as residential neighborhoods or commercial districts, while POIs represent granular interaction targets like retail stores.\nThe dynamic behavior layer extends this static foundation by simulating multi-modal mobility through a discrete time-stepping mechanism. Individual movements, including positions, speeds, and accelerations are updated dynamically according to kinematic principles and predefined rules. Operational logic begins with agents formulating movement intentions based on their internal needs and goals, then these intentions are translated into specific instructions guiding individuals' movements within the space, which include driving, walking, taking the bus, or taking a taxi. For all means of transportation, path-planning algorithms generate optimal routes. Driving follows the IDM model [95] for acceleration and the MOBIL model [54, 35] for lane-changing decisions. Pedestrians navigate sidewalks at a constant speed and follow the traffic signals at junctions to avoid collisions with vehicles. Buses operate on fixed schedules, while passengers conduct the processes of boarding, alighting, and transferring. For taxis, a global dispatch system simulates sending the nearest available taxi to respond to ride requests, ensuring efficient service and minimal wait times for passengers.\nFor the simulation environment to function accurately, we apply rich data sources. Road networks and AOIs are extracted from OpenStreetMap, undergoing topological simplification to produce structured representations. POI data, acquired via API from SafeGraph.\nWe implement Python-based APIs to bridge the simulation space and agents,providing bidirectional interaction capabilities. Configuration interfaces allow for initializing agent positions, assign travel plans (e.g., destinations and transportation modes), and reset simulation states. Query interfaces enable real-time monitoring of agent kinematics status and simulation metadata such as simulation timestamps.\nBy harmonizing static urban infrastructure, dynamic mobility behaviors, and multi-source geospatial data, our urban space establishes a high-fidelity decision-making sandbox for agents."}, {"title": "4.3 Social Space", "content": "Social behavior is a prerequisite for constructing an agent society. The occurrence of social behaviors requires the support of an authentic social environment. The social environment provides management"}, {"title": "4.4 Economic Space", "content": "The economic space includes the modeling of several key elements in the macroeconomics [104, 64]. Specifically, firms convert the labor input of social agents into goods production and pay the corresponding wages to the agents. Furthermore, firms adjust the wages of agents and goods price flexibly based on the supply and demand relationships in the consumption market. The government levies income tax on agents' earnings according to specified tax rates. The banks pay interest to agents based on their savings each year, with the interest rate adaptively adjusted according to the Taylor Rule [104]. The National Bureau of Statistics regularly compiles macroeconomic indicators, such as real GDP, average working hours per person, and per capita consumption levels.\nBuilding upon the modeling of the four key economic entities-firms, agents, the government, and banks-the economic simulator further captures the dynamic processes and interactions that drive the functioning of a realistic economic system. By integrating income generation, expenditure, savings, taxation, and policy-driven adjustments, the simulator provides a comprehensive representation of economic cycles.\nAgents are the fundamental economic participants, generating income through labor in firms. This income is subject to taxation, with a portion deducted based on a progressive tax structure, while the remaining disposable income is allocated between consumption and savings. Agents use their disposable income to purchase goods and services, thereby fueling market demand. The funds allocated to savings are deposited into banks, where they accrue interest, influencing future consumption and investment decisions.\nFirms act as producers in the economy, utilizing labor from agents to generate production output. They pay wages to agents, creating a cyclical flow of income within the system. Firms dynamically adjust goods prices and wages in response to market supply and demand, ensuring equilibrium in the consumption market. Their revenue comes from the sales of goods, which is reinvested into further production or held as retained earnings for future expansion. The government collects tax revenue from agents based on their earnings and redistributes financial resources to regulate economic activity. It influences the economy through fiscal policy, adjusting tax rates to manage income distribution and public sector financing. These funds may be directed toward public expenditures, which are not explicitly modeled in this simulator but could represent infrastructure, social programs, or government"}, {"title": "5 Large-scale Social Simulation Engine", "content": "Although the large-scale social simulator introduced in this paper may appear as a simple combination of LLM multi-agent systems (social agents) and tool call (environment), the reality of human society characterized by independent thinking in decision-making and collaboration driven by language communication promotes us to fundamentally rethink the system architecture design and implementation of the large-scale social simulation engine. Existing multi-agent execution frameworks such as CAMEL [63] and AgentScope [40] typically take inter-agent collaboration as the foundational principle of system architecture design, constructing Standard Operating Procedures (SOPs) through message-passing processes among agents to determine the sequence of agent execution. Such frameworks are particularly well-suited for multi-agent execution scenarios with well-defined agent execution sequences, as exemplified by programming tasks [47, 82] and conversational games [107], as they can significantly simplify complex agent interaction processes. However, in real-world contexts, individual behavioral decision-making emerges from the autonomous integration of current memory, cognitive states, and environmental constraints, rather than being strictly contingent upon specific inputs from other agents or environments. Therefore, a pivotal challenge in system architecture design lies in faithfully simulating this \"asynchronous\" phenomenon within the large-scale social simulator, while strategically leveraging such intrinsic behavioral patterns to optimize simulation execution efficiency.\nAs a solution to the aforementioned challenge, we draw inspiration from the operational logic of the real world by treating each agent as an independent simulation unit. There are no explicit dependencies or execution orders between agents. Instead, they exchange information and mutually influence each other through a messaging system. For the parallel execution of independent simulation units, to fully leverage the multi-core computing capabilities of modern computer systems and distributed computing paradigms for horizontal scaling of simulation scale, we adopt the highly mature Ray framework [71] to implement distributed computing and conceal I/O latency through"}, {"title": "5.2 System Architecture", "content": "To avoid unnecessary redundant development and leverage the advancements from the open-source community, the system architecture of the large-scale social simulation engine is primarily constructed using advanced and mature open-source software or libraries. As shown in Figure 10, the overall system architecture consists of shared services common to all social simulation experiments, simulation tasks corresponding to each experiment, and an optional GUI component.\nThe shared services include the following components:"}, {"title": "5.3 Group-based Distributed Execution", "content": "Based on the above description of the system architecture, we aggregate multiple agents into a group called an agent group, and use a single process to execute each group of agents to achieve the effect of distributed computing acceleration. This design addresses the contradiction between limited TCP port resources and the massive number of agents. Specifically, if each individual agent were treated as a separate process and independently connected to shared services to simulate autonomous human decision-making in the real world, the large number of TCP connections would exhaust the TCP port resources of the MQTT server, the database, and the metric recorder (with an upper limit of 65,535 ports), leading to failures due to insufficient TCP port resources. Therefore, how to implement connection reuse to reduce TCP port resource consumption while ensuring independent execution of multiple agents constitutes a critical issue that needs to be addressed in agent execution."}, {"title": "5.4 MQTT-powered Agent Messaging System", "content": "Communication between agents is an essential component in constructing social simulations based on LLM-powered multi-agent systems. The transmission of textual messages among agents simulates real-world human communication and collaboration through language, which will facilitate the emergence of group behaviors and thereby further approximate the operational laws of the real world. Expanding on this, developing a messaging system that connects agents will enable users or external programs to directly access and intervene in the agents' behaviors. This will support more sophisticated social experiments and interactive applications.\nTo achieve the aforementioned agent messaging system, we need a messaging system capable of delivering messages to hundreds of thousands of specific agents by IDs. In the IoT domain, MQTT is a protocol designed to enable communication between millions of IoT devices and control centers, employing a publish/subscribe architecture. Publishers send messages to specified IDs, while subscribers monitor specific IDs or designated prefixes to receive messages. MQTT utilizes a lightweight packet structure tailored for low-bandwidth IoT environments, delivering reliable messaging with minimal resource consumption. Although originally designed for IoT device connectivity, this protocol aligns perfectly with the communication requirements of agents in the large-scale social simulator. We therefore adopt this protocol to implement our agent messaging system as shown in Figure 12. During implementation, we designate the following topics and their corresponding message meanings:\n\u2022 exps/<exp_uuid>/agents/<agent_uuid>/agent-chat: Used for sending messages from one agent to the target agent within the experiment.\n\u2022 exps/<exp_uuid>/agents/<agent_uuid>/user-chat: Used for users to send chat messages to the target agent within the experiment via the GUI.\n\u2022 exps/<exp_uuid>/agents/<agent_uuid>/user-survey: Used for users to send structured JSON-formatted surveys to the target agent within the experiment via the GUI.\nUnder this topic configuration, each agent only needs to subscribe to messages prefixed with exps/<exp_uuid>/agents/<agent_uuid>/. This approach reduces development costs while maintaining compatibility for future extensions to the messaging system's functionality.\nIn summary, by integrating the advanced IoT communication protocol MQTT, we achieve low-cost development to simultaneously connect hundreds of thousands of agents while ensuring reliable agent message transmission. This solution also enables user input through GUIs and supports future functional extensions, thereby filling a crucial gap in the architecture of the large-scale social simulation engine."}, {"title": "5.5 Utilities", "content": "In addition to the aforementioned key technical designs for social agents, we also provide a rich set of utilities to facilitate the development of social agents. The design philosophy of most of these utilities is primarily inspired by AgentScope [40].\nLLM API Adapter. We implement calls to OpenAI API-compatible LLMs through the openai python library, including OpenAI, DeepSeek, Qwen, etc. Additionally, we also support calls to ChatGLM. Through the LLM API adapter, we allow users to freely select their preferred or partnered LLMs for inference by modifying configurations, which enhances the system's flexibility and compatibility.\nRetry Mechanism. To prevent abnormal results returned by the LLM API from affecting experiments, the system incorporates a retry mechanism. When invoking the LLM API, if erroneous responses are detected, the system will automatically reinitiate the call. The default number of retries is set to 3.\nJSON Parser. Since prompts often require LLMs to return responses in JSON format to facilitate parsing into program-processable results, we develop a JSON parser. This parser automatically identifies JSON code blocks in responses, removes Markdown code block delimiters (prefix and suffix), and converts the content into Python objects.\nMetric Recorder. To assist researchers in recording various statistical metrics during experiments, such as total GDP and agent state averages, we adapt the mlflow API and implement a parallel-safe metric logging utility class and functions.\nLogging and Saving. Logging and saving simulation processes and results serve as the foundation driving subsequent data analysis and visualization. Saving as much data as possible will facilitate richer and more profound research insights. Accordingly, we design both local file storage using the AVRO format and PostgreSQL database as online storage. Both storage approaches employ"}, {"title": "5.6 Toolbox for Social Experiments", "content": "In the realm of social sciences, various research methods are employed to study human behavior, motivations, and responses in different contexts. In real-world settings, it is often difficult to find controlled environments for conducting social experiments that mirror the complexity of human interactions. This is where interventions come into play-creating specific social experimental conditions that allow researchers to simulate and manipulate real-life scenarios. Besides, two widely used methods are interviews and surveys, both of which allow researchers to collect data from individuals, explore their opinions, and understand the underlying psychological factors influencing their actions. These methods are vital for generating insights into how people think, feel, and act in specific situations. Large-scale agent-based simulations provide a powerful tool for addressing these challenges, enabling the design of controlled experiments with a high degree of realism. This section details the tools available for conducting interventions, interviews, and surveys with agents in a social experiment. These tools offer flexibility in data collection and manipulation, supporting the design and execution of robust social experiments.\nIntervention. Intervention refers to the manipulation of an agent's behavior or state to observe how changes influence its actions, thoughts, and emotional responses. Interventions are crucial for setting up experimental conditions in social experiments. There are three primary types of intervention in our system:\n\u2022 Agent Configuration: This type of intervention involves directly modifying the internal settings of the agent before the simulation starts. These settings may include altering an agent's personality traits, goals, or preferences. Since this intervention occurs before the simulation, it ensures that the agent's behavior aligns with the experimental conditions right from the start.\n\u2022 State Manipulation: This intervention occurs during the simulation and allows researchers to modify the agent's current state. By altering an agent's profile, mood, or ideas, researchers can influence its behavior. For instance, modifying the agent's emotions can impact its decision-making and social interactions.\n\u2022 Message Notification: This method involves sending a text message to the agent, triggering a response. For example, a message such as \"Severe weather changes expected, a hurricane is coming\" could be used to observe how the agent adjusts its plans or behavior in response to external threats. This type of intervention can be introduced at any point during the simulation, offering flexibility in creating different experimental conditions.\nThe intervention process can be summarized as:"}, {"title": "6 Performance Evaluation", "content": "In this section"}]}