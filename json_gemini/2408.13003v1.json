{"title": "BOOSTTRACK++: USING TRACKLET INFORMATION TO DETECT\nMORE OBJECTS IN MULTIPLE OBJECT TRACKING", "authors": ["Vuka\u0161in Stanojevi\u0107", "Branimir Todorovi\u0107"], "abstract": "Multiple object tracking (MOT) depends heavily on selection of true positive detected bounding\nboxes. However, this aspect of the problem is mostly overlooked or mitigated by employing two-\nstage association and utilizing low confidence detections in the second stage. Recently proposed\nBoostTrack attempts to avoid the drawbacks of multiple stage association approach and use low-\nconfidence detections by applying detection confidence boosting. In this paper, we identify the\nlimitations of the confidence boost used in BoostTrack and propose a method to improve its per-\nformance. To construct a richer similarity measure and enable a better selection of true positive\ndetections, we propose to use a combination of shape, Mahalanobis distance and novel soft BIOU\nsimilarity. We propose a soft detection confidence boost technique which calculates new confidence\nscores based on the similarity measure and the previous confidence scores, and we introduce varying\nsimilarity threshold to account for lower similarity measure between detections and tracklets which\nare not regularly updated. The proposed additions are mutually independent and can be used in any\nMOT algorithm.\nCombined with the BoostTrack+ baseline, our method achieves near state of the art results on the\nMOT17 dataset and new state of the art HOTA and IDF1 scores on the MOT20 dataset.", "sections": [{"title": "1 Introduction", "content": "Multiple object tracking (MOT) is an important and active topic in computer vision. The main applications include\nhuman-robot interaction [1], autonomous driving [2] and surveillance [3], but it can also be applied to analyse\nsports videos [4], track animals [5] and even in medicine [6]. Given a video with multiple objects of interest\n(e.g. pedestrians), the aim is to construct a trajectory for each object. More specifically, for each frame, every object\nof interest should be detected and assigned an ID, which should not change during the video even if the object is\nnot present in every frame (e.g. it can be occluded). MOT can be solved offline by processing the entire video, or\nonline by processing one frame at a time without considering the future frames. Online MOT solutions have wider\napplications and can be used for real-time tracking in autonomous driving or surveillance systems. Among the online\nmethods, tracking by detection (TBD) methods show the best performance. In TBD paradigm, MOT is solved in\ntwo steps: detection, which outputs a set of detected bounding boxes; and association in which detected bounding\nboxes should be associated (matched) with currently tracked objects. Hungarian algorithm [7] is a typical choice for\nmatching between newly detected bounding boxes and existing tracklets, i.e. current states of tracked trajectories. The\ncost matrix used by the algorithm can be constructed by combining different similarity measures such as intersection\nover union (IoU), Mahalanobious distance [8] or appearance similarity (cosine similarity between visual embedding\nvectors).\nBefore constructing a cost matrix, some method of filtering out false positive detections should be applied. This is\nusually achieved by discarding detections with confidence scores below a specified threshold. This simple logic results\nin discarding some true positive detections also. To mitigate this, ByteTrack [9] employed a two-stage association\nin which low-confidence detections and unmatched tracklets are used in the second association stage. Two-stage"}, {"title": "2 Preliminaries", "content": ""}, {"title": "2.1 Tracking by detection", "content": "One of the dominant approaches in MOT is to follow the TBD paradigm. In TBD, the MOT problem is solved\nframe-by-frame by performing two steps of processing for every frame: detection and association. Given a frame,\nthe detector model (e.g. YOLOX [18]) outputs the set of detected bounding boxes $D = \\{D_1, D_2, ..., D_n\\}$ with the\ncorresponding confidence scores $C_d = \\{C_{d1},C_{d2},..., C_{dn}\\}$. Tracking module (e.g. Kalman filter [19]) is needed to\npredict the state of currently tracked objects, i.e. tracklets $T = \\{T_1, T_2, . . . T_m\\}$, based on the past states (one state in\nthe case of Kalman filter).\nIf Kalman filter is used, the state of the object usually consists of object location and size, and the corresponding\nvelocities. In this paper, we use the same settings for the Kalman filter as in [14].\nLinear state space model of tracking is given as:\n$X_k = FX_{k-1}+q_k$ (dynamic equation),\n$Y_k = H.X_k+r_k$ (observation equation),\n(1)\nwhere $q_k$ and $r_k$ are process and observation noises, respectively (we use the same noise setting as in [14]). The state\n$X_k$, state transition matrix F, and observation matrix H are given by:\n$x_k = [u, v, h, r, \\dot{u}, \\dot{v}, \\dot{h}, \\dot{r}]^T, F = \\begin{bmatrix}\nI_4 & I_4 \\\\\n0_{4\\times4} & I_4\n\\end{bmatrix}, H = [I_4\\ \\0_{4\\times4}]$,\n(2)\nwhere $u, v, h$ and $r$ represent the coordinates of the object center, the height of the object and the ratio of the object's\nwidth and height, respectively. By $\\dot{u}, \\dot{v}, \\dot{h}, \\dot{r}$ we denote their corresponding velocities. When a tracklet is associated\nwith detected bounding box $D_i$, that bounding box is used is used as the observation in Kalman update step.\nTracklets and detections can be matched using the Hungarian algorithm [7]. The cost matrix C for the matching can\nbe constructed simply as $C = \u22121\\cdot S(D,T)$, where $S(D,T)$ is the similarity matrix between the detections D and\ntracklets T. In the simplest case, S = IoU.\nLooking at TBD logic with more details, before constructing the cost matrix, a selection of \"reliable\" detected bound-\ning boxes is required, i.e. false positive detections should be filtered out. The simplest method is thresholding\ndeciding which detections will be used based on whether the confidence score is greater than a specified threshold\nvalue $\\tau$. The matching between a detected bounding box $D_i$ and a tracklet $T_j$ is admissible if $S(D_i, T_j) > t_S$, where\n$t_S$ represents a minimal required similarity (e.g. $t_S = 0.3$). Unmatched detections are used to initialize new tracklets\u00b9."}, {"title": "2.2 Multiple-stage association methods", "content": "Not all low-confidence detections are false positives. The dominant approach to using low-confidence detections (and\nutilising the true positive detections that would have been discarded otherwise) is using a two-stage association which\nwas first introduced in ByteTrack [9]. ByteTrack uses thresholding but does not discard low-confidence detections.\nInstead, the unmatched tracklets are matched with low-confidence detections in the second association stage. Followed\nby ByteTrack, the two-stage association approach became the standard in TBD MOT (e.g. it is used in [20, 21, 22,\n23, 10, 24, 25]). Some tracking methods expanded this logic further. Tracking algorithms in [26, 27] performed\nthree-stage association, LG-Track used four-stage association [28], while some other methods used multiple-stage\nassociation based on tracklet last update [29], or similarity between detections and tracklets [30].\nHowever, it is demonstrated in [13] that two-stage association can introduce identity switches. The same applies to\nany multiple-stage association strategy which does not consider all tracklet-detection pairs in the same stage."}, {"title": "2.3 Boost Track", "content": "BoostTrack is a TBD system built upon SORT [31], and it tackles three problems in MOT: finding a simple and better\nsimilarity measure to improve association performance, the selection of true positive detections, and using a simple\none-stage association to avoid identity switches to which all multiple-stage association techniques are prone to [13].\nTo improve the association performance, BoostTrack uses three additions to IoU (to \"boost\" the original IoU similarity)\nand defines the overall similarity measure between a detected bounding box $D_i$ and a tracklet $T_j$, $S(D_i, T_j)$, as\n$S(D_i, T_j) = IoU(D_i, T_j) + \\lambda_{IoU} \\cdot C_{i,j} \\cdot IoU(D_i, T_j) + \\lambda_{MhD} \\cdot S_{MhD} (D_i, T_j) + \\lambda_{shape} \\cdot S_{shape} (D_i, T_j)$,\n(3)\nwhere $C_{i,j}, S_{MhD}$ and $S_{shape}$ represent detection-tracklet confidence of detection $D_i$ and tracklet $T_j$, Mahalanobis\ndistance similarity and shape similarity, respectively.\nTo select more true positive detections for the first (and only) association stage, BoostTrack uses two detection confi-\ndence boosting techniques. Before discarding low-confidence detections, it increases the confidence score of bounding\nboxes which should be true positives. One technique relies on Mahalanobis distance to find outliers. Assumption is\nthat the detections which do not correspond to any of the currently tracked objects are not false positives, but rather\ndetections corresponding to previously undetected objects. The other technique, detecting the likely objects, uses IoU\nbetween a detection and all the tracklets. If low-confidence detection has a high IoU with some tracklet, the detected\nbounding box is considered to correspond to that tracklet, and its detection confidence score should be increased.\nEquation 4 shows the expression for increasing detection confidence score $c_{d_i}$ for some detected bounding box $D_i$.\n$\\hat{c}_{d_i} = max(c_{d_i}, \\beta_c \\cdot max(IoU(D_i, T_j)))$.\n(4)\nHyperparameters $\\beta_c$ and $\\tau$ implicitly define the IoU threshold required for a low-confidence detection $D_i$ to surpass $\\tau$.\nValues used in [14] correspond to 0.923 and 0.8 for datasets MOT17 [16] and MOT20 [17], respectively.\nAdding appearance similarity for the association to BoostTrack results in the BoostTrack+ method."}, {"title": "2.4 Buffered IoU", "content": "To account for irregular motions, Buffered IoU (BIoU) is introduced in [15]. If the predicted state is inaccurate (due\nto irregular motion), the IoU between the predicted bounding box and the detected bounding box will be low (possibly\n0) which makes association difficult or even impossible. The authors proposed to scale (add \"buffers\" to) the detected\nand the predicted bounding boxes. Let $o = (x, y, w, h)$ be the original detection (or tracklet), where $(x, y)$ represents\nthe top-left coordinate of the bounding box, and w and h its width and height, respectively. Authors propose to use\nscaled detection $o_1 = (x \u2212 bw, y \u2013 bh, w + 2bw, w + 2bh)$, where $b \\ge 0$ is the scale parameter. More specifically, they\nperformed two-stage association: in the first stage they used small scale parameter $b_1$, and in the second stage they\nassociated remaining tracklets and detections using larger scale parameter $b_2$. The logic behind two-stage association\nis that the unmatched tracklets are more difficult to match and require larger bounding boxes for successful matching."}, {"title": "3 Limitations of confidence boost based on detection of likely objects", "content": "One of the contributions of BoostTrack [14] is the DLO confidence boost technique. The effectiveness of this tech-\nnique is most notable in the case of the MOT20 dataset, where the DLO boost increased $MOTA^2$ score by 4.8% (see\ntable 1)."}, {"title": "4 Proposed methods", "content": ""}, {"title": "4.1 Soft BIoU", "content": "BIOU, introduced in [15], enables to match detection-tracklet pairs which are (due to the inaccurate prediction) too\nseparated and have low or 0 IoU, by expanding bounding boxes. As such, BIoU could also be used for DLO confidence\nboost. However, BIoU is designed to be used in a two-stage association and cannot be used directly. In [15], the\ntracklets are, through two-stage association, split into two groups and the corresponding bounding boxes are scaled\nusing hyperparameters $b_1$ and $b_2$ depending on the group.\nA trivial way of using BIoU in one-stage association setup would be to use single scale value b. However, not only that\n\"easy\" and \"difficult\" tracklets require different b values, but not all \"easy\" tracklets are equally easy to match, and not\nall \"difficult\" tracklets are equally difficult.\nEvery predicted bounding box should be enlarged to the extent which is proportional to the uncertainty in the quality of\nthe prediction. In [14], tracklet confidence is defined and used as a measure of reliability of the predicted tracklet state.\nWe propose to use tracklet confidence to calculate tracklet specific scale without the need for a two-stage association.\nHowever, if we use different scales for different tracklets and comparing with detections in one stage, we cannot simply\nscale the traclets and detections by the same parameter b and calculate IoU between all pairs, as done in [15]. Every\ndetection-tracklet pair $(D_i, T_j)$ should use a specific scale based on tracklet confidence, $c_{t_i}$ value.\nLet $o \\rightarrow s$ be detection o scaled by s, defined (as in [15]) as\no \\rightarrow s = (x \u2212 sw, y sh, w + 2sw, h + 2sh),\n(6)\nwhere (x, y), w, and h represent top-left corner of the bouding box, its width and height, respectively. We define soft\nBioU (SBioU) between $D_i$ and $T_j$ as\nSBIOU(D_i, T_j) = IoU(D_i \\rightarrow \\frac{1-c_{t_j}}{4}, T_j \\rightarrow \\frac{1 - c_{t_j}}{2}).\n(7)\nfor $i \\in \\{1,2,..., n\\}, j \\in \\{1, 2, ...,m\\}$. As the tracklet confidence decreases, the scale increases. To calculate the\nscaling parameter, we divide $1 \u2013 c_{t_j}$ by 2 to match the range of scale values from [15] (for $C_{t_j} = 0.0$ it increases scale\nto $b_2 = 0.5$). When scaling the detection box, we use smaller scale since we are more uncertain about the tracklet state\ncompared to the detected bounding box position. Note that SBIoU reduces to IoU when tracklet confidence is equal\nto 1."}, {"title": "4.2 Using improved similarity measure to find likely objects", "content": "DLO confidence boost relies on IoU similarity. We propose to replace IoU in equation 4 with more sophisticated\nsimilarity measure S, which gives:\n$\\hat{c}_{d_i} = max(c_{d_i}, \\beta_c max(S(D_i, T_j)))$.\n(8)\nTrivially, we could set S = SBIoU. However, we propose to use a richer similarity measure, of which soft BIoU is\nonly a part of.\nIn [14], a combination of IoU, shape and Mahalanobis distance similarity was used to construct a \"boosted\" similarity\nmeasure which improved association performance. If such similarity measure helps to better distinguish objects, it\nshould also improve performance of detecting the likely objects.\nWe define similarity between a detected bounding box $D_i$ and a tracklet $T_j$, $S(D_i, T_j)$, as the average of used similarity\nmeasures:\n$S(D_i, T_j) = (S_1(D_i, T_j) + S_2(D_i, T_j) + \u00b7\u00b7\u00b7 S_p(D_i, T_j))/p$.\n(9)\nIntuitively, using average of multiple similarity measures for the DLO confidence boost means that all similarity\nmeasures need to \"agree\" to increase the confidence score of a given detection. In our implementation, for the DLO\nconfidence boost we use:\n$S(D_i, T_j) = (SBIOU(D_i, T_j) + S_{MhD} (D_i, T_j) + S_{shape} (D_i, T_j))/3$.\n(10)\nNote that detection-tracklet confidence scores $c_{i,j}$ used to calculate $S_{shape}$ decrease when detection confidence is low\nwhich decreases the $S_{shape}$ and makes it less reliable for the purposes of this work [14]. To resolve this issue, we set\n$c_{i,j} = 1$ when using shape similarity for the detection confidence boost."}, {"title": "4.3 Soft detection confidence boost", "content": "As noted in section 3, DLO confidence boost treats equally detections with very low and relatively high confidence\nscores. If the IoU between a given tracklet and a low-confidence detection is high enough (e.g. 0.8 for the MOT20\ndataset), the detection's confidence will be increased enough to be used for the association. The detection with very\nlow (e.g. 0.05) and a relatively high confidence score (e.g. 0.35) require the same high IoU in order for their confidence\nscores to be increased to a value greater than the threshold $\\tau$. However, the lower confidence detection is more likely\nto be false-positive and should require higher IoU compared to the bounding box with higher confidence score.\nThere is a positive correlation between the IoU (calculated between the ground-truth and detected bounding boxes)\nand the detection confidence score [35]. If the tracking module gives accurate predictions, the IoU between a tracklet\nand the ground-truth should be high and the same correlation applies between the tracklet-detection IoU and the\ndetection confidence. The IoU between the tracklet and the detection can thus be a measure or an indicator of detection\nconfidence. Following the described logic, for every detected bounding box $D_i$, $D_i \\in \\{D_1, D_2, ..., D_n\\}$, we perform\nsoft detection confidence boost to obtain new detection confidence score $\\hat{c}_{d_i}$ as:\n$\\hat{c}_{d_i} = max(c_{d_i}, \\alpha \\cdot c_{d_i} + (1 - \\alpha) \\cdot (max(S(D_i, T_j)))^q)$,\n(11)\nwhere $\\alpha \\in [0,1]$ and $q \\ge 1$ are hyperparameters and S is any similarity measure. We raise S to the power q to\nhave a better control over the entire process (all hyperparameter values are discussed in subsection 5.2). Equation 11\ncombines original confidence scores with the similarity and solves the problem of equal treatment of low and relatively\nhigh confidence score detections.\nFollowing the discussion in subsection 4.2, S can be defined as in equation 9."}, {"title": "4.4 Varying similarity threshold", "content": "All the similarity measures discussed previously depend upon tracking performance, i.e. the quality of predictions.\nAs noted in section 3, the quality of predictions reduces with the increase of a number of steps since the last tracklet\nupdate. Reduced quality of predictions leads to lower IoU value when objects get matched (see figure 2) and indicates\nthat single threshold value for DLO confidence boost cannot provide the best results.\nTo address the described issue, we propose to use different threshold values when searching for the likely objects. The\nthreshold should be higher for the IoU (or any other similarity measure) between a detection and recently updated\ntracklet."}, {"title": "4.5 Combining the proposed methods", "content": "All proposed additions are mutually independent and can be used separately or jointly. Algorithm 4.1 shows the\ncombined usage of all proposed elements and can be used as a replacement for the DLO confidence boost used in\nBoostTrack [14]. Parameters useS, useSB and useVT control whether we should use improved similarity measure,\nsoft detection confidence boost and varying threshold, respectively."}, {"title": "5 Experiments and results", "content": ""}, {"title": "5.1 Datasets and metrics", "content": "Datasets. We perform experiments and evaluation of our method on standard MOT benchmark datasets: MOT17\n[16] and MOT20 [17]. MOT17 contains pedestrian videos filmed with static and moving camera. The training set\nconsists of 7 sequences and 5316 frames in total (frame rate ranges from 14 to 30 depending on the video), while test\nset contains continuation of the same sequences and has 5919 frames in total.\nMOT20 consists of 8 sequences of crowded scenes with changing lighting conditions filmed at 25 FPS. The training\nset contains 4 sequences (8931 frames) and the test set consists of remaining sequences (4479 frames).\nAs in previous works (e.g. [10, 9, 11]), we use a custom detector instead of the provided dataset detections and perform\nexperiments under private detection protocol. We use the second half of each training sequence as a validation set.\nMetrics. We use standard metrics to assess the performance of our method. Namely, we use:"}, {"title": "5.2 Implementation details", "content": "MOT and BoostTrack specific settings. We extend the work done in [14] and use the same additional components\nand settings. We provide a brief overview of the most important components used4. Namely, we use YOLOX-X\n[18] as the detector with weights from [9]; we apply Enhanced correlation coefficient maximization from [39] for\ncamera motion compensation (and use the implementation from [12]); we use FastReID [40] for computing visual\nembedding (used for calculating visual appearance similarity); for postprocessing of the results, we use gradient\nboosting interpolation (GBI) from [41]. We calculate shape mismatch (used in $S_{shape}$) between a tracklet $T_j$ and a\ndetection $D_i$, $d_{s_{i,j}}$ as:\n$d_{s_{i,j}} = \\frac{|D_i^w \u2013 T_j^w|+|D_i^h \u2013 T_j^h|}{max(D_i^w,T_j^w)}$\n(14)\nBoostTrack++ specific settings. We run a grid search to find optimal parameters q and $\\alpha$ (used for soft detection\nconfidence boost introduced in subsection 4.3). Specifically, we tested settings (q,$\\alpha$) $\\in$ \\{1,1.25, 1.5, 1.75, 2\\} \u00d7"}, {"title": "5.3 Ablation study", "content": "The goal of the proposed method is to replace or improve the performance of the DLO confidence boost technique\nused in [14]. Ideally, our method should not increase the number of used IDs compared to any baseline which does\nnot apply DLO (because it should only boost the confidence score of the detections which correspond to existing\nobjects). Furthermore, a successful DLO confidence boost should improve the overall tracking performance: not only\nthe MOTA score which penalizes usage of false positive detections, but the values of HOTA, IDF1 and IDWS metrics\nshould also improve because the quality of selected bounding boxes is crucial for the successful matching."}, {"title": "5.3.1 Influence of different similarity measures.", "content": "Since the DLO confidence boost resulted in substantial performance improvement on the MOT20, but also in an\nincreased number of IDs and IDWSs, we study the effect of various similarity measures from equation 10 on MOT20\nvalidation set. We performed experiments on three baselines: SORT+DLO, BoostTrack and BoostTrack+. Table 2\nshows the results of using SORT+DLO and BoostTrack+ as baselines (as the most basic and the more advanced\nmethods, respectively). We display results of using the BoostTrack baseline in A.\nThe first two rows of table 2 are the baselines. The first row shows results of the baseline method without DLO\nconfidence boost, while the second uses simple IoU based DLO confidence boost which we try to improve (see\nequation 4). A successful DLO method should keep IDs and IDSW values as close to the values from the first row,\nand at the same time improve the HOTA, MOTA and IDF1 values from the second row."}, {"title": "5.3.2 Influence of other components", "content": "We study the influence of proposed components on BoostTrack+ baseline on MOT17 and MOT20 validation sets. In\nB we show results of the ablation study where we used SORT [31] and BoostTrack as baselines."}, {"title": "5.4 Comparison with other methods", "content": "To evaluate our method on MOT17 [16] and MOT20 [17] test sets (under private detection protocol), we used\nS+SB+VT setting. The results on the test sets are provided in table 4. We mark offline methods with '*'6.\nOur BoostTrack++ method achieves improvement compared to the BoostTrack+ on MOT17 test set: +0.2 HOTA, +0.1\nMOTA, +0.4 IDF1, -24 IDSWs. On more challenging MOT20, BoostTrack++ shows slightly better improvement\ncompared to the BoostTrack+: +0.2 HOTA, +0.5 MOTA, +0.5 IDF1, -65 IDSWs. Improvement in MOTA indicates\nthe increase in the use of true positive detections, which improves HOTA and IDF1 scores.\nCompared to the online trackers, our method ranks first in HOTA score (66.6) on the MOT17 test set, while on the\nMOT20, our method ranks first in HOTA (66.4) and IDF1 (82.0) among both online and offline methods."}, {"title": "6 Conclusions", "content": "In this paper, we identified the drawbacks of the DLO confidence boost introduced in BoostTrack and proposed a\nmethod to mitigate the identified issues. Our goal was to utilize the benefits of DLO confidence boost but avoid its\ndrawbacks - namely, causing IDSWs and introducing new IDs. To this end, we proposed a novel soft BIoU similarity\nmeasure and three plug-and-play additions, each of which attempts to provide better control and utilize richer tracklet\nand detection information to improve the selection of true positive detected bounding boxes.\nUsing our methods with BoostTrack+ baseline, our BoostTrack++ method ranks first in HOTA and IDF1 metrics on\nthe MOT20 dataset and achieves comparable to the state of the art results on the MOT17 dataset.\nHowever, the achieved MOTA score is still relatively low, indicating the need for even better algorithms for selecting\ntrue positive detections in a one-stage TBD MOT paradigm."}]}