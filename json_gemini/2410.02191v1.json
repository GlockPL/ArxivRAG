{"title": "A Survey on Point-of-Interest Recommendation: Models, Architectures, and Security", "authors": ["Qianru Zhang", "Peng Yang", "Junliang Yu", "Haixin Wang", "Xingwei He", "Siu-Ming Yiu", "Hongzhi Yin"], "abstract": "The widespread adoption of smartphones and Location-Based Social Networks has led to a massive influx of spatio-temporal data, creating unparalleled opportunities for enhancing Point-of-Interest (POI) recommendation systems. These advanced POI systems are crucial for enriching user experiences, enabling personalized interactions, and optimizing decision-making processes in the digital landscape. However, existing surveys tend to focus on traditional approaches and few of them delve into cutting-edge developments, emerging architectures, as well as security considerations in POI recommendations. To address this gap, our survey stands out by offering a comprehensive, up-to-date review of POI recommendation systems, covering advancements in models, architectures, and security aspects. We systematically examine the transition from traditional models to advanced techniques such as large language models. Additionally, we explore the architectural evolution from centralized to decentralized and federated learning systems, highlighting the improvements in scalability and privacy. Furthermore, we address the increasing importance of security, examining potential vulnerabilities and privacy-preserving approaches. Our taxonomy provides a structured overview of the current state of POI recommendation, while also identify promising directions for future research in this rapidly advancing field.", "sections": [{"title": "I. INTRODUCTION", "content": "The proliferation of smart devices has fueled the rapid growth of Location-based Social Networks (LBSNs) [1]\u2013[3], which allow users to share check-ins, reviews, and personal experiences tied to specific locations. These networks, now with billions of users, generate vast amounts of spatio-temporal data [4]-[9], presenting valuable opportunities for personalized Point-of-Interest (POI) recommendations. As a dynamic area in recommendation systems, POI recommendation has gained considerable interest from both users and businesses in recent years. These methods leverage users' historical check-ins along with multimodal data to suggest personalized destinations [6], [10]. However, the diversity in data size, modality, and user expectations introduces new challenges. These complexities motivate researchers to develop innovative techniques that effectively capture mobility patterns and other relevant features, such as spatial, social, and textual information, to enhance the performance of POI recommendations [11]-[13].\nPOI recommendation research has witnessed significant advancements over the past decade, with researchers continually pushing the boundaries along three dimensions: models, architectures, and security.\nModel Evolution: From Traditional to Advanced. In the early stages, POI recommendation systems primarily relied on latent factor models like Latent Dirichlet Allocation (LDA) [14] and Matrix Factorization (MF) [15] to model dynamic user behavior [16], [17]. While these methods provided initial solutions, they were limited in capturing the complex patterns of user-POI interactions. The advent of deep learning marked a transformative shift, with models like Long Short-Term Memory (LSTM) networks [18] and the Transformer architecture [19] proving far more capable of capturing global-scale features and dynamic sequences of user behavior. Alongside this deep learning revolution, the exploration of Graph Neural Networks (GNNs) emerged as particularly suitable for learning representations in POI recommendations [20]\u2013[22]. GNNs excel at capturing complex dependencies between users and POIs, allowing for more nuanced recommendations. More recently, the field has witnessed rapid advancements with the integration of cutting-edge techniques like Large Language Models (LLMs) [23], Diffusion Models (DMs) [24], [25], and Self-Supervised Learning (SSL) [26]. These innovations have significantly enhanced recommendation accuracy, allowing systems to better model user preferences.\nArchitecture Transformations: From Centralized to Decentralized and Beyond. Initially, POI recommendation systems were predominantly server-side [27], [28], relying on centralized processing to manage data and train models. However, this centralized approach soon faced challenges, particularly with scalability and latency, as the growing demand for real-time recommendations strained system performance. To address these issues, the adoption of edge computing emerged, shifting computation closer to the user's device. This transition improved responsiveness and real-time capabilities by reducing the dependency on cloud infrastructure. Building on this momentum, recent advancements in federated learning [29] have introduced a decentralized model training approach. By distributing training across multiple devices, federated learning not only enhances system scalability but also offers stronger privacy protections by keeping user data local and reducing the risks\nSecurity Enhancements: From Vulnerable to Robust and Privacy-Preserving. Parallel to these architectural improvements, POI recommendation systems initially exhibited significant privacy and security vulnerabilities, as early designs were prone to data breaches and exploitation [30]-[32]. As these vulnerabilities were exposed, researchers began to focus on developing more secure solutions. Over time, a variety of privacy-preserving techniques were introduced to protect sensitive user data. Approaches such as differential privacy [33] and federated learning [29] have become central to modern POI recommendation systems, ensuring that while user data is safeguarded, the accuracy and relevance of recommendations are maintained. These techniques have shifted the landscape towards more robust systems capable of balancing both security and performance.\nWhile existing surveys [34]-[37] have contributed valuable insights into POI recommendation systems, there remains a critical need for a comprehensive review that reflects the rapid developments across POI models, architectures, and security. For instance, while Zhao et al. [37] provide a thorough review of POI recommendation with traditional techniques like matrix factorization, the growing challenges within deep POI recommender systems are not covered. By contrast, Wang et al. [34] provide an overview of various POI recommendation methods in the deep learning era, yet they do not delve deeply into the architectural and security challenges that have emerged with the rise of decentralized systems and practical privacy concerns. Similarly, Islam's survey [35] emphasizes the impact of deep learning on POI recommendation, but it overlooks key advancements in federated learning and edge computing, which are increasingly shaping the deployment of these systems. Furthermore, Werneck's survey [36] provides a detailed account of POI recommendation techniques from 2017 to 2019, offering valuable insights into the evolution of methodologies during that time frame, but it lacks coverage of more recent advancements such as the integration of GNNS and LLMs, which bring about not only powerful user modeling capabilities but also intensive computation and scalability issues. To summarize, a noticeable gap in the literature regarding cutting-edge models, architectural evolution, and security considerations is shown in Table I.\nWith the increasing diversity of data sources, the rise of new models and architectures, and the mounting need for privacy-preserving techniques, it is essential to provide an up-to-date, comprehensive survey that covers these critical aspects. By offering an in-depth taxonomy in this article, we aim not only to provide a holistic understanding of POI recommendation but also to pave the way for future research endeavors to build upon this comprehensive groundwork. Our contributions are summarized as follows:\nWe undertake an exhaustive and contemporary assessment of models, architectures, and security facets within POI recommendation systems, providing intricate insights into the varied methodologies and technologies.\nWe not only classify existing research on models, architectures, and security but also introduce a new framework to comprehend and structure these essential elements.\nOur study highlights several promising areas for future research in POI recommendation, pointing out key topics that are ready for further exploration, encouraging innovation and inspiring researchers to explore new, untapped areas that could shape the future of POI recommendation technology.\nThe remainder of this paper unfolds as follows: Section II delineates the key concepts within POI recommender systems. Section III presents illustrations of taxonomy. Section IV shows preliminaries of models and studies of them. Section V shows preliminaries of different architectures and existing studies of them. Section VI shows preliminaries of security knowledge and existing studies of them. Section VII outlines potential future directions. Lastly, Section VIII encapsulates the conclusion, highlighting key takeaways."}, {"title": "II. PRELIMINARIES", "content": "The process of POI recommendation presents a series of challenges centered around identifying suitable upcoming POIs for users based on their historical check-in data and other pertinent information within an LBSN. Consider a group denoted as U = {U1, U2, ..., un}, comprising N users within the LBSN, and a set P = {P1,P2,...,PM} representing M POIs. Users form connections through a network denoted as \u016a = {(Ui, Uj)|Ui, uj \u2208 U}. Each POI p is defined by its geographical coordinates, specifically latitude xp and longitude Yp, along with a set of attributes Ap describing the POI's semantics. The primary objective is to provide personalized recommendations of relevant POIs based on users' past interactions and preferences within the LBSN. The key concepts of POI recommendation are articulated as follows:\nPoint-of-Interest: A point of interest, represented as pi, signifies a particular location or site recognized for its significance or interest to various individuals, tourists, or researchers. These points on a map hold specific value or importance and can encompass landmarks, attractions, businesses, historical sites, parks, restaurants, hotels, or any locale of potential interest.\nCheck-in Event: A check-in event, denoted as ca, involves a user publicly declaring their presence at a specific venue or location at a specific time step o. Typically facilitated through mobile applications or social media platforms, this action entails sharing the user's current whereabouts with their social circle. During a check-in, the user typically selects or searches for a particular place, such as a restaurant, park, or event space, and indicates their current presence at that spot.\nNext POI Recommendation: Given a user u's check-in list Cu, the next POI recommendation task revolves around predicting the subsequent POI at time 0i+1."}, {"title": "\u0399\u0399\u0399. \u03a4\u0391\u03a7\u039f\u039d\u039f\u039c\u03a5", "content": "This paper distinguishes itself from existing surveys on POI recommendation by adopting a holistic approach that emphasizes three critical and interrelated aspects: models, architectures, and security. This tripartite framework, as illustrated in Fig. 2, serves as a comprehensive taxonomy for systematically analyzing and comparing various POI recommendation systems. To further contextualize the research landscape, we present the distribution of existing studies across these three categories in Fig. 1 (a). The figure underscores a clear trend: methods for improving POI recommendation models dominate the field, comprising over 75% of the total research efforts. This focus reflects the ongoing challenge of enhancing accuracy, personalization, and context-awareness in POI recommendations. On the other hand, studies addressing security issues in POI recommendations remain underrepresented, making up approximately 8% of the existing research. This highlights a significant gap in the literature, given the increasing importance of safeguarding user privacy, defending against adversarial attacks, and ensuring data integrity within location-based services. In contrast, research on architectures, which bridges the gap between models and real-world deployment, occupies the remaining portion, indicating its crucial yet often overlooked role in ensuring the scalability, efficiency, and responsiveness of POI recommendation. In the rest of this section, the introduction of the taxonomy will unfold along these three dimensions."}, {"title": "A. Models", "content": "Building on previous POI recommendation surveys [38], [39], which primarily reviewed studies based on traditional non-deep learning and early deep learning methods, there remains a need to address the advances brought by more recent techniques. With the emergence of novel approaches such as diffusion models, self-supervised learning, and large language models, a growing body of research has evolved that is not yet covered in existing surveys. To fill this gap, we provide an extensive review of models spanning from traditional methods to cutting-edge techniques, as illustrated in Fig. 2. To further clarify the progression of these methodologies, we present a visual depiction of their structural evolution in Fig. 1 (b), where the labels are arranged chronologically from bottom to top. This illustration highlights how the research landscape has shifted over time, with an increasing focus on more sophisticated and advanced models. Detailed explanations of each method, along with the corresponding preliminaries, are provided in Section IV."}, {"title": "1) Latent Factor Model-Based:", "content": "Traditional POI recommendation methods, such as those based on Latent Dirichlet Allocation (LDA) and Matrix Factorization (MF), have played a foundational role in shaping the field, as noted in prior surveys [38], [39]. These approaches generally focus on uncovering latent patterns in user-item interactions to make personalized recommendations. Mathematically, these methods can be formulated as an optimization problem:\nV = arg min Lfo (U, V) $(1)$\nwhere fe represents the function that minimizes the loss function Lfo. U denotes the list of users for whom POI recommendations are being generated. V represents the list of POIs that minimize the loss function, effectively representing the optimal recommendations."}, {"title": "2) Classic Neural Network-Based:", "content": "While latent factor models such as LDA and MF have laid the groundwork for POI recommendation, the advent of deep neural networks, particularly LSTM and Transformer models, has introduced a new paradigm. These models significantly improve both recommendation accuracy and the ability to capture contextual and sequential information. By leveraging the strengths of sequential data modeling and complex feature extraction, neural network-based approaches have made substantial contributions to advancing POI recommendation [40], [41]. These models can be formally represented as follows:\n0* = arg min \u03a3\u03a3 Yij \u00d7 log(pij (0)) $(2)$\nwhere @ denotes the parameters of the neural networks and U is the number of users, V is the number of POIS, Yij represents a binary indicator (1 if user i interacted with POI j, 0 otherwise), and pij (0) is the predicted probability of user i interacting with POI j, given the model's parameters 0. This equation represents the cross-entropy loss, which is commonly used in POI recommendation. The goal is to minimize the difference between the predicted probabilities and the actual interaction labels. To differentiate this approach from other deep learning-based methods, we categorize it as classic neural network-based, emphasizing its reliance on traditional neural networks, such as LSTM, GNNs, and Transformers."}, {"title": "3) Self-supervised Learning-Based:", "content": "Self-supervised learning (SSL) [42] has gained significant attention in the recommendation domain as a powerful approach to address key challenges like data sparsity and lack of labeled data. Traditional POI recommendation systems often rely on large amounts of user-item interaction data, which may be scarce or incomplete in many cases. SSL provides an alternative by leveraging vast amounts of unlabeled data to create pseudo-supervision signals, enabling the model to learn more effective and generalized representations without needing extensive labeled data [43]\u2013[45]. This makes SSL particularly well-suited for POI recommendation, where interactions are often sparse, and data about user preferences is limited. In the context of POI recommendation, SSL methods often rely on contrastive learning [43], which creates tasks where the model learns to differentiate between positive and negative examples. This can be formulated as follows:\nL(0) = \u03a3\u03a3 [d(h(ui), h(pj)) \u2013 d(hui), h(pj))] $(3)$\nwhere @ are the parameters of the self-supervised model. ui is the user embedding for user i. pj denotes the POI embedding for POI j (positive example). pj, denotes the POI embedding for POI j' (negative example). h(\u00b7) denotes the embedding function that maps users and POIs to a shared latent space. d(.) denotes the distance function (e.g., Euclidean distance) that measures the similarity between embeddings. In this kind of method, the model minimizes the distance between user embeddings and positive POI embeddings while maximizing the distance between user embeddings and negative POI embeddings. It can also be used to pretrain the recommendation model by encouraging the consistency between augmentations of the same user/item while minimizing similarities between augmentations of different users/items."}, {"title": "4) Generative Model-Based:", "content": "Generative models use machine learning to discover patterns in data and generate new content. Three commonly used generative models in POI recommendation are large language models (LLMs), diffusion models (DMs), and variational autoencoders (VAEs). LLMs generate coherent text based on input prompts, producing contextually relevant outputs. DMs gradually transform random noise into structured data, creating high-quality images or signals. VAEs encode data into a latent space and decode it to generate new instances.\nLLMs, renowned for their ability to comprehend and generate human-like text, have emerged as a transformative force in recommendation systems, including POI recommendations [46], [47]. Traditionally, recommendation models relied on structured data like user-item interactions, but LLMs introduce a paradigm shift by incorporating rich, unstructured textual data, including user reviews, POI descriptions, and contextual insights such as time, location, and trends. This allows LLMs to exceed traditional recommendation approaches constrained by interaction data. By processing this diverse information, LLMs can generate more personalized, context-aware, and nuanced recommendations. Furthermore, LLMs enhance user experience by engaging users in natural dialogue, making interactions more intuitive. The POI recommendation generation process with LLMs can be formalized as follows:\nL(0) = - \u03a3\u03a3 log p(ri|r1, ..., ri\u22121, Uj, C, 0) $(4)$\nwhere @ are parameters of the LLMs and adaptation blocks. uj is user profile information. c denotes contextual information (e.g., time and location). ri denotes generated recommendation text. p(ri uj, ci, 0) denotes the probability of generating recommendation ri given user profile uj, context c, and parameters 0.\nDMs, which learn to gradually add noise to data and reverse the process to generate new samples, can be applied to POI recommendation by generating plausible user-POI interaction patterns. They can create new user-POI interaction data, effectively filling in missing entries in the interaction matrix. This addresses data sparsity and improves recommendation accuracy. This research line can be formulated as follows:\nL(0) = Ex~Pdata(x) [DKL(P(x|0)||Pdata(x))] $(5)$\nwhere @ denotes parameters of the diffusion model. x is user-POI interaction data (e.g., ratings, visits). Pdata(x) is the original data distribution. p(x|0) is the distribution of data generated by the diffusion model with parameters 0. DKL(.) is Kullback-Leibler divergence, measuring the difference between two probability distributions.\nVAEs [48], [49] are generative models that learn to represent data in a compressed latent space. They consist of an encoder mapping input data to a distribution in this latent space and a decoder reconstructing data from samples drawn from that distribution. This allows VAEs to generate new instances by sampling from the learned latent space. They enhance POI recommendation systems by capturing user preferences and location characteristics in a compressed space. By encoding user interaction data with various POIS, VAEs capture underlying patterns and preferences, generating personalized recommendations and improving user experience in location-based services."}, {"title": "B. Architectures", "content": "The architecture of a POI recommendation system significantly impacts its ability to handle large volumes of data, ensure privacy and security, and deliver real-time, personalized recommendations. To meet the diverse needs of modern applications and address challenges such as data scalability, user privacy, and computational efficiency, POI recommendation architectures have developed into three primary categories: centralized, decentralized-based, and federated learning-based. Detailed explanations of each architecture, along with the corresponding methods, are provided in Section V."}, {"title": "1) Centralized-Based:", "content": "In traditional centralized-based architectures, user data and POI information are collected, stored, and processed on a central server. These architectures have long been the standard for POI recommender systems [50]\u2013[53] due to their ability to aggregate large datasets from multiple users, enabling powerful recommendation algorithms to be applied at scale. However, they face growing concerns related to user privacy, data security, and the cost of managing and scaling centralized infrastructure, particularly as data volumes and user expectations for real-time performance increase. The objective function for optimizing a recommendation model with a centralized architecture can be defined as \u04e8* = arg mine L(\u04e8; D) where denotes the model parameters, and L(\u0398; D) is the loss function calculated over the entire dataset D. This formulation assumes access to all available data in one place, which, while advantageous for performance optimization, amplifies privacy risks and imposes significant computational overhead."}, {"title": "2) Decentralized-Based:", "content": "Decentralized-Based structures shift the processing burden from centralized servers to users' individual devices (e.g., smartphones) [54]. In this approach, recommendation models are deployed locally on the user's device, where data processing and model inference occur without the need to continuously communicate with a central server. This architecture offers several advantages for POI recommendation, such as enhanced privacy, since sensitive user data remains on the device, and reduced latency, as recommendations can be generated in real-time without relying on server-side processing. Decentralized approaches are particularly suitable for mobile or offline scenarios, where data privacy is critical, or network connectivity is limited. However, the performance of decentralized models may be constrained by the device's computational resources, and updating models across devices can be challenging. Formally, the optimization of a decentralized model can be formulated as 0* = arg mine L(0; Du), where @ represents the model parameters specific to the device, and L(0;Du) is the loss function computed over the local dataset Du belonging to the user. By leveraging local computation, decentralized architectures provide a privacy-preserving solution that enables real-time, personalized recommendations tailored to individual user data."}, {"title": "3) Federated Learning-Based:", "content": "Federated learning (FL)-based architectures [55] represent a newer paradigm that combines the strengths of both centralized and decentralized approaches. In FL, models are trained collaboratively across multiple user devices, where each device computes updates locally using its own data. These updates are then aggregated by a central server to improve a global model without exposing individual user data. This architecture offers a compelling solution for privacy-preserving POI recommendation, as it keeps user data localized while still benefiting from collective learning. FL also reduces the need for direct data transmission between users and servers, addressing privacy concerns and regulatory requirements (e.g., GDPR). Additionally, it offers scalability and adaptability, allowing models to continuously improve as new data is generated on user devices. However, FL introduces challenges in terms of communication overhead, synchronization, and managing heterogeneous data across devices. In the FL-based architecture, the optimization objective of the global model is defined as * = arg mine \u03a3wkLk(\u0398) where represents the global model parameters, K is the total number of participating clients, wk is the weight for the k-th client, and Lk() is the loss function at the k-th client."}, {"title": "C. Security", "content": "Security is crucial in designing POI recommendation systems, especially due to the sensitive nature of location data. Recent work has focused on enhancing user privacy and ensuring system security. Techniques like homomorphic encryption and differential privacy are being developed to protect user data while maintaining recommendation accuracy. Additionally, privacy-preserving protocols are implemented to guard against attacks, including tampering with recommendations or misusing user data. These security efforts are closely tied to the models and architectures used in POI systems, ensuring that they provide accurate recommendations while safeguarding user privacy. A secure POI recommendation system must integrate privacy-preserving techniques at both the model and architecture levels, mitigating security threats without compromising performance. Section VI examines the latest research on security in POI recommendations, offering insights into how these considerations are being addressed in practice."}, {"title": "1) Data Integrity Threats:", "content": "Data integrity threats refer to malicious activities aimed at compromising the accuracy, consistency, and trustworthiness of data within a system. These threats often target the integrity of data at various stages, such as during storage, transmission, or processing. In the context of POI recommendations, data integrity threats can lead to significant issues, such as degraded model performance, biased outputs, and overall system unreliability.\nOne prominent example of a data integrity threat is poisoning attacks [56], [57], which manipulate the training data in POI recommendation systems. These attacks can significantly affect the reliability and trustworthiness of the system by injecting malicious data that leads to biased outcomes. Formally, the goal of a poisoning attack can be formulated as:\nD= arg max Lattack (O; DU D') $(6)$\nwhere D represents the manipulated dataset, Lattack(O; DUD') is the attack loss function, O are the model parameters, and D' is the set of malicious data instances added to the original dataset D.\nAdditionally, POI recommendation systems may face various other threats, including evasion attacks, where adversaries manipulate input data to deceive the system, and Sybil attacks [58], where multiple fake profiles are created to influence recommendations. The physical trajectory inference attack [59] involves deducing users' historical trajectories from shared data, potentially compromising their privacy by revealing sensitive location information. To defend against such attacks, robust training methods and anomaly detection techniques are employed to identify and mitigate the impact of poisoned data, ensuring the integrity and performance of the recommendation system."}, {"title": "2) User Privacy Protection:", "content": "In POI recommendation systems, safeguarding user privacy is paramount, as these systems often handle sensitive personal data. Privacy-enhancing technologies play a crucial role in ensuring that user information remains secure while still enabling meaningful data analysis. Techniques such as decentralized secure computation [60], [61], noise injection [62], and homomorphic encryption [29], [63] are essential in this regard.\nFor example, homomorphic encryption enables computations on encrypted data, ensuring that raw data remains inaccessible to unauthorized parties. The process can be mathematically expressed as:\nEnc(x) Enc(y) = Enc(x + y) $(7)$\nEnc(x) Enc(y) = Enc(x - y)\nwhere Enc() denotes the encryption algorithm under a specific key,, represent addition and multiplication over"}, {"title": "IV. MODELS", "content": "This section provides a preliminary overview of the models relevant to our survey. We also review specific studies in terms of published venues, techniques, sub-tasks, and datasets in Table III."}, {"title": "A. Latent Factor Model-Based", "content": "1) Latent Dirichlet Allocation: Early studies in POI recommendation leveraged the power of topic modeling, specifically latent Dirichlet allocation (LDA) [14], to uncover hidden thematic structures within user activity data. LDA, a generative probabilistic model, assumes that POIs are composed of a mixture of latent topics, each characterized by a distribution over words. This approach, while effective in identifying general themes, often lacked the granularity to capture individual preferences and the dynamic nature of user behaviors.\nTo address these limitations, researchers began exploring more personalized and context-aware approaches [16], [65]-[74], [154]. A pioneering work by Yin et al. [16] introduced LCARS, a location-content-aware POI recommender system that combined individual user preferences with the distinct characteristics of a location. This marked a significant shift from purely topic-based models by explicitly incorporating the influence of local trends and preferences on user choices. Building upon this foundation, Wang et al. [74] proposed the Temporal Personalized Model (TPM), which further enhanced POI recommendation by incorporating temporal dynamics and user-specific behavior patterns. TPM introduces the novel concept of topic-regions, clustering locations into semantically meaningful groups based on user activity."}, {"title": "2) Matrix Factorization:", "content": "Matrix factorization (MF) [15] is a powerful technique for POI recommendation, addressing sparse user-item interaction data by decomposing it into low-dimensional matrices representing latent user and POI features. This reveals hidden patterns and preferences, enabling personalized recommendations by predicting user affinity for unvisited POIs. Popular methods [12], [75], [76], [154] include SVD [155], PMF [156], and NMF [157]. Specifically, users tend to exhibit spatially clustered mobility patterns, with visits concentrated within specific geographical regions. This \u201cclustering phenomenon\" has proven valuable in enhancing POI recommendations, prompting its integration into factorization models. To leverage this insight, Lian et al. [75] propose that user representations are enriched with \"activity area vectors\" capturing their typical movement zones, while POI representations incorporate \u201cinfluence area vectors\" reflecting the regions from which they draw visitors. This fusion of spatial clustering with factorization models allows for a more context-rich and accurate representation of user preferences and POI characteristics, ultimately leading to more effective personalized POI recommendations."}, {"title": "B. Classic Neural Network-Based", "content": "1) Long Short-Term Memory: The long short-term memory (LSTM) network [18] is a specialized type of sequential neural network that allows information to persist over time. It is an enhancement of the recurrent neural network (RNN) [158], specifically designed to address the vanishing gradient problem, a common issue in RNNs. In the original LSTM architecture [18], at each time step t, the input xt is combined with the previous hidden state ht\u22121. This combined vector is then processed through three key components: the input gate input, the output gate output, and the input node gate, defined by the following equations:\ninput\u2081 = $(W(i)xt + U(i) ht\u22121+b(i)) $(8)$\noutput\u2081 = $(W(0) xt + U(0) ht\u22121+b(0))\ngate\u2081 = tanh (W(9)xt + U(9)ht\u22121 + b(9)) = \u010ct\nwhere W(*) and U(*) are weight matrices, b(*) are bias terms, Ct is the candidate cell state, and $ is the activation function.\nLSTM networks have become indispensable for POI recommendation [52], [80], [81], [83], [84], effectively modeling the sequential dependencies inherent in user check-in data to predict future preferences. Earlier studies [52], [80], [81] adopt LSTM to model POI sequences. Zhang et al. [80] propose a novel approach to learning user preferences by introducing the Discrete Ranking-based Matrix Factorization (DRMF) algorithm. DRMF leverages pairwise user preferences, framing the learning process as a binary quadratic programming problem to derive binary codes. To address the challenges of non-convexity and binary constraints inherent in this formulation, they introduce a self-paced learning strategy. This strategy gradually incorporates pairwise preferences, starting with simpler relationships and progressing to more complex ones, thereby enhancing the optimization process. Nevertheless, Zhao et al. [52] address the limitations of traditional RNNS in capturing the crucial influence of time and distance between consecutive check-ins. Their proposed STLSTM model integrates spatio-temporal context, short-term spatio-temporal gating, and long-term spatio-temporal gating. Another earlier study [81] introduces an approach that incorporates temporal information to understand the semantic connections between user actions. This approach leverages a semantic correlational graph to calculate semantic sequential correlation, factoring in time intervals. It then integrates this semantic information into a modified LSTM framework, incorporating two additional semantic gates. This enhanced model captures users' sequential behaviors and long- and short-term interests within a semantic context. Finally, this approach proposes user clustering to improve recommendation accuracy by grouping users based on their semantic preferences.\nRecent studies [84], [87] based on LSTM mainly aim to capture dynamic dependencies in long-term POI sequences. Yang et al. [84] tackle the challenge of effectively capturing the dynamic interplay between a user's long-term preferences and their more immediate, context-dependent interests, namely AMACF. It achieves this by dynamically weighting input sequences and seamlessly fusing long- and short-term signals. DLAN [87] incorporates a multi-head attention module that effectively combines first-order and higher-order neighborhood information within user check-in trajectories. This parallel approach addresses the limitations of RNN-based methods, which struggle to establish long-term dependencies between sequences. Furthermore, DLAN integrates a user similarity weighting layer to quantify the influence of social relationships between users on the target user's preferences. This layer leverages social connections to improve the accuracy of recommendations by incorporating insights from similar users. Beyond these examples, other studies such as Zhong et al. [82] and Zhang et al. [83] also explore innovative ways to leverage LSTMs for POI recommendation, further demonstrating the versatility and effectiveness of this approach. These studies highlight the ongoing evolution of LSTM-based methods for POI recommendation. Researchers continue to develop sophisticated techniques to capture the complexities of user behavior, ultimately leading to more accurate, personalized, and context-aware recommendations."}, {"title": "2) Transformer:", "content": "The Transformer architecture [19], originally designed for natural language processing, is a deep neural network model that heavily relies on the self-attention mechanism. The architecture comprises two main components: an encoder and a decoder, each consisting of multiple identical layers known as transformer blocks. The encoder's primary function is to process input data and generate corresponding encodings, while the decoder utilizes these encodings, along with contextual information, to generate the final output sequence. As shown in Fig. 3, each transformer block includes several key components: a multi-head attention mechanism, a feed-forward neural network and residual connections [39].\nTransformers have revolutionized POI recommendation systems [41], [88]\u2013[91], [100], surpassing traditional methods by effectively capturing complex sequential patterns and contextual information crucial for understanding user preferences. A former study [41] addresses the challenge of providing queue-time-aware POI recommendations. This task is non-trivial, as it requires both recommending the next POI and accurately predicting the queue time at that location. To tackle this challenge, Halder et al. [41] propose TLR-M, a multi-task, multi-head attention transformer model. TLR-M simultaneously recommends POIs to target users and predicts the queue time for accessing those POIs. The model's multi-head attention mechanism efficiently integrates long-range dependencies between any two POI visits, enabling it to assess their influence on POI selection.\nA recent study [88] addresses the limitations of treating POI recommendation solely as a sequence prediction task by incorporating collaborative signals through the proposed method GETNext. GETNext introduces a user-agnostic map to capture global movement patterns and collaborative information. It also integrates the flow map into the transformer architecture, enabling the model to learn from both individual user sequences and collective user behavior. Meanwhile, leveraging collaborative signals proves particularly beneficial for recommending POIs to new users with limited historical data. Explicit user preference integration [91] focuses on directly incorporating explicit user preference data into the transformer model, contrasting with other methods that rely solely on implicit preference learning from POI sequences. It explicitly incorporates data reflecting user preferences, such as ratings or reviews, into the model's input. Directly modeling user preferences aims to provide a more nuanced and accurate representation compared to solely inferring preferences from interaction patterns. The Temporal-Geographical Attention-based Transformer [100] tackles the challenge of effectively integrating multiple contextual factors throughout the POI recommendation process. Unlike previous studies, TGAT dynamically selects POI sequences from multiple contextual factor POI graphs derived from user check-in histories to obtain better user representations. Then, TGAT incorporates diverse contextual factors, such as time of day, user interests, and geographical influences, throughout the representation learning process. TGAT also integrates contextual factors, leading to more holistic and accurate representations of POIs and users, thereby enhancing recommendation accuracy."}, {"title": "3) Graph Neural Networks:", "content": "Graph neural networks (GNNs) [159", "160": ".", "as": "na(k) = Aggregate(k) ({h(k-1) : u \u2208 N(v)}) $(9)$\nh(k) = Combine(k) (h(k-1), a(k))\nwhere hk) is the feature vector of node v at the k-th iteration, with h initialized to X. The set N(v) denotes the nodes adjacent to v. The functions Aggregate (k) (.) and Combine(k"}]}