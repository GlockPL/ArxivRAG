{"title": "LaMAGIC: Language-Model-based Topology Generation for Analog Integrated Circuits", "authors": ["Chen-Chia Chang", "Yikang Shen", "Shaoze Fan", "Jing Li", "Shun Zhang", "Ningyuan Cao", "Yiran Chen", "Xin Zhang"], "abstract": "In the realm of electronic and electrical engineering, automation of analog circuit is increasingly vital given the complexity and customized requirements of modern applications. However, existing methods only develop search-based algorithms that require many simulation iterations to design a custom circuit topology, which is usually a time-consuming process. To this end, we introduce LaMAGIC, a pioneering language model-based topology generation model that leverages supervised finetuning for automated analog circuit design. LaMAGIC can efficiently generate an optimized circuit design from the custom specification in a single pass. Our approach involves a meticulous development and analysis of various input and output formulations for circuit. These formulations can ensure canonical representations of circuits and align with the autoregressive nature of LMs to effectively addressing the challenges of representing analog circuits as graphs. The experimental results show that LaMAGIC achieves a success rate of up to 96% under a strict tolerance of 0.01. We also examine the scalability and adaptability of LaMAGIC, specifically testing its performance on more complex circuits. Our findings reveal the enhanced effectiveness of our adjacency matrix-based circuit formulation with floating-point input, suggesting its suitability for handling intricate circuit designs. This research not only demonstrates the potential of language models in graph generation, but also builds a foundational framework for future explorations in automated analog circuit design.", "sections": [{"title": "1. Introduction", "content": "Analog circuit design, encompassing a broad range of applications, poses significant challenges due to its inherent complexity of the schematic and the precision of performance required in its execution. This complexity is particularly pronounced in the realm of power converters, which have become ubiquitous in an array of electronic and electrical devices. With the advent of diverse and customized electrical systems, such as electric vehicles, self-powered Internet of Things devices, and wearable or implantable biosensors, the demand for custom-designed power converters to meet specific supply power standards has surged. These converters, each with unique design specifications including voltage conversion ratio and power efficiency, exemplify the intricate and varied nature of analog circuit design. Traditional design methodologies, largely depending on pre-existing circuit topologies and extensive manual optimization, are increasingly inadequate in addressing the increasing needs of these applications. This reliance on conventional approaches not only prolongs the design process but also limits the potential for novel solutions in rapidly evolving domains. This gap highlights a critical need for an automated circuit design framework, capable of efficiently generating and optimizing high-quality power converter topologies based on specific design specifications."}, {"title": "2. Preliminaries", "content": ""}, {"title": "2.1. Analog Circuit Design", "content": "In the rapidly evolving domain of electrical and electronic engineering, automated analog circuit design, particularly for custom power converter applications, is very importance. This automation process aims to produce customized power converters without human interference, adhering to specific design specifications. Key among these specifications are the voltage conversion ratio and the power conversion efficiency. The voltage conversion ratio is defined as the ratio between input and output voltages, while the power conversion efficiency is the ratio of input power to output power. Another crucial aspect of power converter design is the duty cycle, which controls the duration of switches within the circuit, thereby influencing the output voltage and the overall performance of the circuit.\nThe circuit topology G is conceptualized as a hypergraph consisting of vertices V and hyperedges E. The vertices V include various analog devices and three external terminal ports. The device (or called component in later context), including capacitors C, inductors L, phase-I switches Sa, and phase-II switches Sb, is connected to other devices or ports via two outgoing edges. The terminal ports are the voltage input port VIN, the voltage output port VOUT, and the ground GND, each with a single outgoing edge. The hyperedges E symbolize the connections between these devices and ports."}, {"title": "2.2. Language Model", "content": "LMS (Radford et al., 2019; Raffel et al., 2020; Chung et al., 2022; Nijkamp et al., 2023), especially those using autoregressive training, are pivotal in natural language processing. Autoregressive LMs learn to predict the next token in a sequence based on previous tokens, utilizing an autoregressive loss function. This function calculates the loss as the negative sum of log probabilities for each predicted token, given the preceding ones. Formally, for a sequence $x_1, x_2, ..., x_n$, the loss l is: $l = \\frac{1}{n} \\sum_{i=1}^n -log P(x_i | x_1, x_2, ..., x_{i-1})$. This method trains LMs to capture complex sequential patterns, essential for generating contextually and syntactically coherent sequences. In automated analog circuit design, this approach is particularly beneficial. During the training process, LM can learn how to base on the previous subgraph information to decide the next component and connection."}, {"title": "2.3. Problem Formulation", "content": "The objective of our model is to design circuit topologies and select appropriate duty cycles to achieve specified voltage conversion ratio and power conversion efficiency. Within our design framework, we consider a range of duty cycle options: {0.1, 0.3, 0.5, 0.7, 0.9}. These options provide a framework for varying the ON times of switches to meet specific performance criteria. Based on these considerations, we define two distinct problem scenarios:\nProblem 1 (Edge Generation). Given vertices V, a target voltage conversion ratio r, and an efficiency \u03b7, the task is to generate the connections E and determine the duty cycle s \u2208 {0.1, 0.3, 0.5, 0.7, 0.9} to construct a circuit that satisfies both r and \u03b7.\nProblem 2 (Topology Generation). In the scenario where device requirements are not predefined, the challenge expands to generating both vertices V and their corresponding connections E, along with deciding the duty cycle s. The goal remains to construct a circuit meeting r and \u03b7."}, {"title": "3. Power Converter Dataset Construction", "content": "The foundation of an effective automated analog circuit design system lies in the diversity of the dataset upon which the model is trained. In our main experiment (Section 5.2), we construct a dataset by randomly sampling topologies of 3, 4, and 5-component circuits. This range was chosen to encapsulate the varying degrees of complexity typical in power converter circuits, thereby ensuring that our model will be learned to handle a variety of design scenarios. Additionally, we ensure that each topology is not isomorphic, which not only prevents redundancy in our dataset but also reinforces the diversity of circuit designs. For each random-sampled topology, we generate five circuits using different duty cycles {0.1, 0.3, 0.5, 0.7, 0.9} according to our design space. Then, we simulate each circuit with NGSPICE (Nenzi P, 2011) to compute the corresponding voltage conversion ratio and efficiency. Next, we pruned out the invalid topologies reported by the simulator. The final dataset comprises input features including the simulated voltage conversion ratio and efficiency, and the output consisting of the circuit topology and the duty cycle. For 3, 4, and 5-component circuits, we have 1k, 14k, and 117k different data points respectively, since the design space will exponentially grow up along with the component numbers. In total, we randomly split around 120k data points for training and 12k for evaluation.\nIn the subsequent experiment (Section 5.3), we extend our dataset to include 6-component circuits, aiming to assess"}, {"title": "4. Language Model-based Topology Generation", "content": ""}, {"title": "4.1. Na\u00efve Methods for Circuit Generation", "content": "Using LLMs to revolutionize the labor-intense tasks is a promising trend given the generation ability and the natural language formats for input and output of LLMs. Prompt engineering (Liu et al., 2023) and SFT (Nijkamp et al., 2022) are the most famous approach to adapt LLMs to specialized domains. However, the unique challenges of analog circuit design, which demand specialized expertise and interaction with simulators, present limitations for fundamental LLMs like GPT-4 (Lee et al., 2023) when used prompt engineering. Our experiment with GPT-4, involving few-shot prompt engineering with 100 samples in the analog circuit design domain, revealed that the model failed to produce circuits meeting our specific performance requirements. This outcome illustrates the limitations of using general-purpose LLMs and prompt engineering for highly specialized tasks.\nAs a result, in this work, we aim to explore SFT to build an LM for analog circuit generation. A na\u00efve method is to formulate the problem into instruction-based context inspired by the recent success of instruction-based finetuning methods (Chung et al., 2022; Taori et al., 2023), as shown in the first formulation in Figure 3 for edge generation.\nThis format offers an user-friendly approach, designing the input as a natural language instruction with detailed specifications. However, this seemingly straightforward formulation might present some challenges for LMs:\n1. Non-unique representations: The order of hyperedges can be permuted while still representing the same circuit structure, leading to multiple potential outputs representing for a single input. This non-uniqueness can complicate the learning process by causing ambiguity in the loss function calculation, potentially misguiding the model training.\n2. Structured connection representation: A more structured format might be necessary for effectively representing connections, aligning better with the sequential nature of LM training and loss functions, to facilitate learning of connections and component selections.\n3. Precision of technical specifications: Presenting technical specifications such as voltage conversion ratio"}, {"title": "4.2. Our Novel Circuit Formulations", "content": "In addressing the potential shortcomings of the initial circuit format, our study introduces several alternative representations to more effectively convey complex circuit design specifications to an LM. In the meantime, we can explore the potential of LM for graph generation.\nThe first of these formulations, which we refer to as the Canonical Formulation, is illustrated in Figure 3. By sorting the edges in connections based on a predefined vertex order, it organizes the circuit information to ensure a canonical, unambiguous representation for each design. Furthermore, it simplifies the language used in the instructions, removing redundant or non-essential elements. Thus, this method addresses the non-unique representation challenge.\nBuilding on the Canonical Form, we introduced a second formulation, named Canonical Formulation + New Duty Cycle Representation, as shown in Figure 3. This variant employs one-hot encoding for duty cycle selection, using 5 tokens of <select> or <unselect>. Only one token is marked as <select>, indicating the chosen duty cycle. This approach transforms a categorical choice into sequential selections.\nBuilding upon our second formulation, we present a third formulation, the Adjacency-Matrix-based Formulation, which offers a structured and systematic approach to represent circuit topologies. This method, depicted in Figure 3, is designed to capture the graph structure effectively during training with an LM's loss function.\nThe formulation consists of two main parts: the prefix and the circuit description. The prefix includes duty cycle options, voltage conversion ratio, and efficiency. The circuit description entails the duty cycle selection, vertex order, and connections. Also, this formulation separates each requirement with a <sep> token to aid the model in differentiating between them.\nFor the circuit description, duty cycle selection is succinctly represented using one-hot encoding from the second formulation. Vertex order specifies the ports and devices in the circuit, while the connections are defined in an adjacency matrix format according to the vertex order. Distinct tokens <no_edge>, <edge_1>, <edge_2>, and <both_edges> represent the presence or absence of connections between vertices. Note that <edge-1> always precedes <edge_2> in each vertex's connection representation. Thus, this formulation ensures a canonical form for each circuit.\nBy translating the graph structure into a sequential format,"}, {"title": "5. Experimental Results", "content": ""}, {"title": "5.1. Experiment Setup", "content": "Baselines. Since all related works (Fan et al., 2021; Zhao & Zhang, 2022; Lu et al., 2023) focus on search-based algorithms, we are the first to construct a generative model to bridge specifications and circuits in a one-time generation approach. Given the novelty of this application and the absence of prior work in building circuit generation models, our study aims to establish a baseline in the domain of automated analog circuit design, specifically focusing on the effectiveness of different input formulations. In addition, we comprehensively evaluate the model with 13K different input requirements from our testing set, while the other RL work (Fan et al., 2021) only perform five different specifications to evaluate its search engine.\nWe perform SFT on one baseline and four variants of circuit formulations for edge generation and topology generation in Figure 3: (1) na\u00efve formulation (NF), (2) our first formulation with canonical form (CF), (3) our second formulation with canonical form and one-hot-encoding-based duty cycle selection (CFDC), (4) our adjacency-matrix-based formulation with pure text input to LM (PM), and (5) our adjacency-matrix-based formulation with float input (FM). For NF, CF, CFDC, and PM, we set voltage conversion ratio and efficiency with a six-decimal precision in the input. All models in the experiment were trained under identical hyperparameters, ensuring consistency across all other training variables.\nExperimental platform and hyperparameters. Our experiment runs on a machine with one NVIDIA V100 GPU."}, {"title": "5.2. Generation Results on 3, 4, 5-Component Circuit", "content": "The results of applying different circuit formulations for edge and topology generation are shown in Figure 4 and Table 1. The proposed formulations, including CF, CFDC, PM, and FM, demonstrate a clear advantage over the baseline NF in both edge and topology generation tasks. This indicates the effectiveness of our formulations in guiding the model towards successful circuit generation.\nFor the edge generation task, while FM offered detailed numerical representation, it showed lower success rates at"}, {"title": "5.3. Transferability Evaluation on 6-Component Circuit", "content": "The scalability and adaptability of models in analog circuit design are crucial, particularly as the complexity of circuits increases. Our study initially focuses on models trained on circuits with 3, 4, and 5 components. We extend this to evaluate model performance on more complex 6-component circuits, providing essential insights into the circuit understanding capabilities of models in intricate scenarios."}, {"title": "6. Discussion", "content": ""}, {"title": "6.1. Training with Vertex Order Permutation", "content": "In this section, we evaluate the impact of data augmentation using random vertex order permutation in training that aims at enhancing the models' generation ability. We train models using FM and PM with and without data augmentation for edge generation task, as shown in Figure 6 and Table 3. The results indicate that models training with data augmentation outperform those training without data augmentation. These findings indicate the crucial role of data augmentation in increasing the diversity and complexity of training data. Additionally, this technique is particularly beneficial for FM, which initially struggle with lower success rates, to enhance the model to handle numerical inputs."}, {"title": "6.2. Exploration of Unseen Circuit Topology", "content": "In the field of automated analog circuit design, the ability to discover and validate previously unseen circuit topologies is important for newly developed tools. The majority of existing designs is created by human experts, and conventional automation tools typically lack the capability to generate unseen or novel designs. According to experienced analog designers, a power converter with (1) a voltage conversion ratio ranging from 0.4 to 0.6 or greater than 1.2 and (2) an efficiency larger than 0.9 requires the most efforts to design manually. Thus, we further validate that our LM can"}, {"title": "6.3. Analysis of Potential Overfitting", "content": "This section analyzes the potential for overfitting, a common challenge when employing sequential model architectures in graph generation tasks. The training and testing loss for our four different circuit formulations, CF, CFDC, PM, and FM, are presented in Table 4.\nWe observe more severe overfitting in CF and CFDC than FM and PM. The robustness of FM and PM is further validated by their performance in transferability experiments detailed in Section 5.3, where these formulations achieve higher success rates in complex 6-component circuits. This evidence supports that FM and PM are more effective in avoiding overfitting and can be more suitable for scalable and generalizable circuit design tasks."}, {"title": "7. Conclusion", "content": "In this paper, we propose LaMAGIC, an LM-based topology generation model for analog circuit design that can directly generate an optimized circuit design given the custom specification in a single pass. Our approach focuses on SFT and demonstrates the effectiveness of LMs in generating complex circuit topologies and deciding circuit parameters. We systematically develop and analyze various input and output formulations to ensure canonical representations and the compatibility with the autoregressive nature of LMs, addressing the specific challenges of representing analog circuits as graphs. Experimental results show that our novel circuit formulations can clearly outperform a naive formulation and achieve a success rate of up to 0.96 under a tolerance of 0.01. In addition, we examine the scalability and adaptability of our LMs on more complex six-component circuits. The results show that our proposed adjacency-matrix-based circuit formulation with float input to LM can have better effectiveness on complex circuit understanding, which can help the future research to focus on such formulations when dealing with complicated circuits. In the future, we will extend the capabilities of LaMAGIC to a wider range of analog components. Through this article, we hope to open new research pathways on automated analog circuit design or any other fields of automated design that could benefit from the potential of LMs in graph generation."}, {"title": "Impact Statement", "content": "This paper presents work whose goal is to advance the field of Machine Learning. There are many potential societal consequences of our work, none which we feel must be specifically highlighted here."}]}