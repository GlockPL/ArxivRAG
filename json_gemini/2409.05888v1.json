{"title": "MA-CDMR: An Intelligent Cross-domain Multicast Routing Method based on Multiagent Deep Reinforcement Learning in Multi-domain SDWN", "authors": ["Miao Ye", "Hongwen Hu", "Xiaoli Wang", "Yuping Wang", "Yong Wang", "Wen Peng", "Jihao Zheng"], "abstract": "The cross-domain multicast routing problem in a software-defined wireless network (SDWN) with multiple controllers is a classic NP-hard combinatorial optimization problem. As the network size increases, designing and implementing cross-domain multicast routing paths in the network requires not only designing efficient solution algorithms to obtain the optimal cross-domain multicast tree but also ensuring the timely and flexible acquisition and maintenance of global network state information. However, existing solutions have a limited ability to sense the network traffic state, affecting the quality of service (QoS) of multicast services. In addition, these methods have difficulty adapting to the highly dynamically changing network states and have slow convergence speeds. To this end, this paper aims to design and implement a multiagent deep reinforcement learning (DRL)-based cross-domain multicast routing (MA-CDMR) method for SDWN with multicontroller domains. First, a multicontroller communication mechanism and a multicast group management module are designed to transfer and synchronize network information between different control domains of the SDWN, thus effectively managing the joining and classification of members in the cross-domain multicast group. Second, a theoretical analysis and proof show that the optimal cross-domain multicast tree includes an interdomain multicast tree and an intradomain multicast tree. An agent is established for each controller, and a cooperation mechanism between multiple agents is designed to effectively optimize cross-domain multicast routing and ensure consistency and validity in the representation of network state information for cross-domain multicast routing decisions. Third, a multiagent reinforcement learning-based method that combines online and offline training is designed to reduce the dependence on the real-time environment and increase the convergence speed of multiple agents. Finally, a series of experiments and their results show that the proposed method achieves good network performance under different network link information states, and the average bottleneck bandwidth is improved by 7.09%, 46.01%, 9.61%, and 10.11% compared with that of the KMB, SCTF, DRL-M4MR, and MADRL-MR method; the average delay is similar to that of MADRL-MR but significantly better than that of KMB, SCTF and DRL-M4MR, and the packet loss rate and average length of the multicast tree are also enhanced compared to those of the existing methods. The codes for DHRL-FNMRare open and available at https://github.com/GuetYe/DHRLFNMR", "sections": [{"title": "I. INTRODUCTION", "content": "With the continuous development of wireless communication technology and the expansion of wireless network applications in various fields, wireless multicast communication, as an essential data transmission method, is widely used in multimedia conferencing, real-time video transmission, team collaboration, and distributed computing. Compared with point-to-point communication, multicast communication [1] can be employed to transmit the same data to multiple receivers to achieve efficient information distribution and sharing in wireless networks, efficiently reducing the network bandwidth and load. In essence, in a multicast routing method for multicast communication, an optimal multicast tree is built from the source node to all destination nodes [2]. The aim is to maximize the bottleneck bandwidth, minimize the transmission delay and packet loss rate, and improve network resource utilization. Constructing an optimal multicast tree in a high-speed and dynamically changing wireless network is an NP-hard combinatorial optimization problem. Therefore, there is a need to obtain as much information on global network link state states as possible in real time. However, traditional wireless network management methods could be more efficient, making it easier to obtain this information.\nSoftware-defined wireless network (SDWN) technology [3] separates the network control plane from the data plane and uses centralized management and flexible programming mechanisms for network state information acquisition and global optimal network resource allocation. Therefore, this technology provides an excellentsolution to overcome the shortcomings of traditional wireless network management methods. However, as the network size and complexity increase, the scalability of the management mode of a single SDWN control domain becomes poor, and performance bottlenecks, such as challenges related to adapting to heterogeneity, are observed. To overcome these limitations and improve network performance and reliability, extending the SDWN from a single-controller domain to multicontroller domains is necessary. In an SDWN within a multicontroller domain, multicast issues include those related to message delivery and synchronization between controller domains, multicast group management, multicast routing table updating, and effectively constructing multicast routes across multiple controller domains.\nIn a multidomain wireless network, the traditional multiprotocol border gateway protocol (MBGP) [4] can transmit multicast routing information in a cross-domain environment by establishing and configuring peer-to-peer connections at the border router, and correct forwarding of the multicast data is realized on the basis of this information. However, using the MBGP for the configuration of interdomain routing in an SDWN with multiple controller domains is complex, and the lack of direct integration with controllers requires additional development and customization, which may lead to delays and inconsistencies in message delivery and synchronization [5]. In addition, since the intra- and interdomain network link information changes dynamically and multicast source nodes and multicast destination nodes may be distributed in different domains, the discovery of multicast groups, updating of multicast routing tables, construction of cross-domain multicast trees, and transmission of cross-domain data are challenging. Therefore, as part of the architecture of an SDWN with multiple controller domains, it is essential to design a cross-domain multicast tree that adapts to the dynamic changes in intra- and interdomain network link information to meet the needs of high-performance cross-domain multicast services.\nTo solve the NP-hard combinatorial optimization problem of finding the optimal multicast tree, common solutions include employing suitable optimal search methods, such as greedy search (e.g., the KMB [6] and SCTF [7] algorithms) and heuristic swarm intelligent optimization (such as the genetic algorithm (GA) [8]) algorithms. However, these algorithms lack flexibility and adaptability to high-speed and dynamically changing traffic demands.\nDeep reinforcement learning (DRL) algorithms [9], which have been recently developed, are more flexible than common optimization algorithms and can adapt to complex network topologies and dynamically changing traffic demands. The data-driven learning ability of these algorithms enables them to extract features and patterns from large amounts of network data to generate an optimal multicast routing strategy, thereby improving the multicast routing performance. At present, deep reinforcement learning methods, such as Q-RL [10], DRL-M4MR [11], and MADRL-MR [12], which are reinforcement learning mechanism-based routing methods, are applied to solve multicast problems; however, these deep reinforcement learning-based methods are mostly limited to multicast problems in single-domain scenarios.\nIn addition, the current deep reinforcement learning methods for solving routing optimization problems are mostly online reinforcement learning methods [13], and the training strategies are divided into on-policy strategies [14] and off- policy strategies [15]. Both of these strategies require interaction with the environment. However, in a large-scale network environment, the cost of real-time interaction between an agent and the environment is high. The training process requires extensive trial and error and exploration. Most online reinforcement learning methods use only current real-time data, i.e., the utilization rate of historical data is low, which may result in high training costs and resource consumption. Because there is no environmental interaction in an offline reinforcement learning [16] method, such methods can be tailored to large-scale network environments, reducing the cost of real-time interactions with large-scale environments and improving the learning effect and training speed through the effective use of historical data. However, for a dynamically changing network environment in real time, the problems of sample bias and lack of exploration of offline data need to be solved.\nTo fully exploit the advantage of deep reinforcement learning in solving the multicast routing problem of the SDWN with multiple domains, a multiagent deep learning method based on an SDWN with multicontroller domains is applied, and a multiagent deep reinforcement learning-based intelligent cross-domain multicast routing (MA-CDMR) method is designed. To solve problems related to the synchronization and transfer of network information between domains and the discovery of multicast groups with group members distributed in different controller domains, a controller communication module and a multicast group management module are designed. These modules aim to maintain the consistency of information transfer and synchronization between different domains, identify cross- domain multicast groups and effectively manage the joining and leaving of multicast group members. A theoretical analysis and proof show that the optimal cross-domain multicast tree includes an interdomain multicast tree and an intradomain multicast tree. To solve the problem of constructing intradomain and interdomain multicast trees, some problem-solving agents are designed, and consistency and effectiveness in the representation of network state information are achieved when making cross-domain multicast routing decisions by designing collaborative mechanisms for the intelligent tasks that are relevant to the problem. To improve the training effect of multiple agents, accelerate the convergence speed, and reduce the cost of real- time interactions with large-scale environments, in this paper, offline reinforcement learning is employed to design a combined online and offline training method. In addition, a fully decentralized (FL) solution paradigm for multiple agents is designed to improve the cooperation efficiency of multiple agents.\nThe main research contributions of this paper are as follows:\n1) In response to the characteristics of an SDWN with multiple domains, a framework for solving multicast problems on the basis of network state information awareness and multiagent deep reinforcement learning is proposed. In addition, a theoretical analysis of the multicast routing problem in the SDWN with multicontroller domains is presented, and the cross-domain multicast tree problem is broken down into two subproblems: interdomain multicast tree construction and intradomain multicast tree construction. Cooperative multiagent reinforcement learning algorithms are designed for these two subproblems.\n2) Compared with the traditional MBGP, a controller communication mechanism and a multicast group management module are designed on the basis of the characteristics of the SDWN (such as control logic centralization and programmability). The aims are to achieve intercontroller domain message passing and synchronization and to identify and effectively manage cross-domain multicast group members. The designed controller communication and management mechanism can flexibly and conveniently acquire global network status information, realize the optimized distribution and utilization of multicast traffic resources, enhance coordination and cooperation between controller domains, and improve the overall performance and efficiency of the network.\n3) A state space is designed to consider the cross-domain multicast issue in the SDWN with multicontroller domains. This state space includes matrices representing the bandwidth, delay, packet loss rate, packet error rate, distance between access points (APs), and multicast tree state of the network links. This design enables the agent to better perceive changes in the network link state information and the multicast tree construction process. Considering the interdomain and intradomain multicast issues, appropriate actions and strategies are designed, greatly improving the exploration efficiency of the agent. The designed action space of the agent for constructing the interdomain multicast tree is the set of all edges between the domains, and each action is selected as one of the edges. The designed action space of the agent for constructing the intradomain multicast tree is the set of nodes in the domain, and each action is selected as a hop node. Different reward and penalty functions are designed for different action strategies adopted by the agent, and they include a single-step decision reward, a path completion reward, an invalid action penalty, and a loop penalty. The agent is guided to construct efficient interdomain and intradomain multicast trees.\n4) Multiple agents are designed to construct and optimize the cross-domain multicast tree through cooperative learning and policy coordination, and the FL solution paradigm is proposed to improve the stability of multiagent cooperation. A combined online and offline training method is designed to reduce the interaction frequency with the environment and the dependence on the real-time environment and to effectively increase the convergence speed of multiple agents.\nThe remainder of this paper is organized as follows: Section II describes related work. In Section III, the multicast, Steiner tree and cross-domain multicast tree problems are analyzed. Section IV describes the proposed MA-CDMR architecture. Section V describes the MA-CDMR algorithm in detail. Section VI describes the experimental environment and the performance evaluation results. Section VII presents conclusions and suggestions for future work."}, {"title": "II. RELATED WORK", "content": "This section introduces technologies related to cross- domain multicast routing in an SDWN with multiple controller domains, and the advantages and disadvantages of related algorithms are analyzed.\nMethods for traditional multicast tree problems: L. Kou et al. [6] proposed the KMB algorithm to construct a Steiner tree on the basis of the short path tree (SPT) and the minimum spanning tree (MST). Angelopoulos et al. [17] used the selective closest terminal first (SCTF) algorithm to construct a multicast tree, which calculates the paths from a source to all the destination nodes by employing Dijkstra's algorithm, and finally all the topological paths from the source to all the destination nodes are used as the approximate solution for the Steiner tree. Takahashi et al. [18] proposed the minimum path cost heuristic (MPH) algorithm. V. J. Rayward-Smith et al.[19] designed the average distance heuristic (ADH) algorithm. Naser et al. [20] proposed a mathematical model of a minimum-power multicast tree considering the residual power of each node in an SDN cluster environment and designed three clustering-based multicast routing strategies via the proposed model. Weixiao et al. [21] considered the network performance of multicast transmission in terms of bandwidth, utilization, and delay and proposed a multiconstraint multicast routing mutation mechanism. In addition, to address the high time complexity of the multicast tree generation algorithm, a multidomain multicontroller multicast routing algorithm was proposed, and it improved upon the SPT algorithm. The improved algorithm searches for the first k short paths, randomly selects all the paths from the multicast source to the destination for superposition, and uses a greedy algorithm to perform the unloop operation to obtain a multicast tree. Chiang et al. [22] discussed online distributed multicast traffic engineering for multidomain SDNs and designed a competitive distributed algorithm using the ideas of domain trees, dual candidate forest construction, and forest rerouting. The designed algorithm is used to collaboratively construct cross-domain multicast routes via controllers in each domain that share their network state information with controllers in neighboring domains and constructs a multicast tree via the SPT algorithm. Liu et al. [23] proposed a multiconstrained multiobjective path optimization algorithm (MCOPF) for the SD-WAN. The algorithm categorizes the request streams into delay-sensitive streams and other streams. In addition to guaranteeing quality of service (QoS) for each stream, the algorithm is designed with the goal of maximizing delay- sensitive stream requests and optimizing the utilization of network resources. To improve the effectiveness of the algorithm, a hierarchical multicontroller collaborative framework is used, which divides the control plane into multiple levels. The root controller manages the global view, and the domain controllers manage the regional networks. These traditional algorithms usually focus on a single optimization objective, such as minimizing the path length and bandwidth. However, a single objective does not accurately reflect the actual conditions of the network, and considering only one objective may lead to problems such as failure to achieve the global optimum and network congestion. Moreover, traditional algorithms are limited in scalability, and the exchange of routing information and the computational loads between the routers in a large-scale network could increase dramatically, resulting in the degradation of network stability and performance.\nIntelligent Optimization Algorithms: Wu et al. [24] proposed a multicast restoration algorithm for multilayer multidomain optical networks on the basis of hybrid swarm intelligence. This algorithm combines the artificial fish model in the PCE-based optical network architecture with noncooperative game theory for intradomain path searches and employs an improved fruit fly optimization algorithm to find recovery paths. This approach enhances the convergence speed while achieving improved local and global search path selection. Ke et al. [8] introduced a multicast routing method based on genetic algorithms (GAs) designed to optimize multicast routing strategies for flow scheduling in large-data-center networks, considering both flow types and network states. Liu et al. [25] proposed a routing scheme based on a time-shift multilayer graph (TS-MLG) framework to consider both spatial and temporal factors and facilitate interdomain bulk data transfer. This scheme can be used to determine cross-domain routing paths, storage points, and transmission times through conventional routing calculations but only improves interdomain bandwidth utilization, with high network state maintenance costs and computational complexity. Zhao et al. [26] proposed an intelligent interdomain routing scheme supported by a hierarchical control plane structure based on subtopology graphs, considering differentiated QoS and energy savings. This scheme enables multidomain quality of transmission (QoT), energy-aware routing, and spectrum allocation (RSA), but it is only suitable for interdomain routing and does not address intradomain routing issues. Li et al. [27] designed a scalable and protocol-independent path algorithm for multidomain packet networks, and it is based on deep learning, which supports protocol-independent forwarding in the data plane. However, this algorithm only considers bandwidth as a QoS requirement, neglecting information such as the link delay and packet loss rate, and its high training complexity makes it challenging to adapt to dynamically changing network environments.\nReinforcement learning-based methods: Xu et al. [28] proposed a hierarchical reinforcement learning framework for multidomain elastic optical networks to realize RMSA)= for interdomain service requests. The framework consists of a high-level DRL module and multiple low-level DRL modules (one for each domain), with the DRL modules collaborating with each other. For interdomain service requests, the high-level module obtains some abstract information from the low- level DRL modules and generates an interdomain RMSA decision for low-level modules. However, the method is only concerned with interdomain service request routing. Dang et al. [29] proposed an efficient link-state multicast routing method by optimizing link weights with multiagent reinforcement learning (MARL). The method first provides an integer linear programming (ILP) formula to find the optimal link weights for SPT-based multicast routing protocols to minimize the total network cost and then designs a MARL solution to optimize the link weight problem for efficient multicast routing in a distributed manner. However, the proposed MARL method is only used to optimize the link weights and does not consider the interactions among multiple intelligent agents. Zhao et al. [30] proposed a MARL-based cross-domain SFC routing method. The method combines the embedding costs associated with the paths, delays and loads for all domains and uses the resulting value as the construction cost of routing. However, the method only considers the network chain delay and does not fully consider other types of network chain information, such as the bandwidth and packet loss rate. Bhavanasi et al. [31] proposed a resilient routing method based on graph neural networks and MARL. The method uses a graph neural network algorithm to design reinforcement learning intelligent agents, and a network traffic dataset encoded in a graph format is generated as the training input. In this method, the reinforcement learning strategy (i.e., a given reward function) can be applied to any topology and learn from changes in routing and congestion events without the need to retrain the neural network. However, the method's ability to relearn the optimal strategy in cases with large networks is limited. Ye et al. [32] proposed a cross-domain intelligent routing algorithm for SDNs that is based on MARL and network traffic prediction. In this method, a Dueling DQN intelligent agent is established for each domain, and recurrent neural networks are used for network traffic prediction. The actions of the intelligent agents are designed as k-paths, and all k paths are generated via Dijkstra's algorithm, allowing the agent to learn to select the optimal path. However, the generated k paths are fixed and cannot adapt to dynamic changes in network link traffic, resulting in local optimum problems. Casas-Velasco et al. [10] proposed a Q-learning based multicast method that considers link state information for routing decisions, focusing mainly on unicast routing. C. Zhao et al. [11] developed a deep reinforcement learning- based intelligent multicast routing method in SDN, which considers link bandwidth, delay, and packet loss rate. However, this method suffers from slow agent convergence.\nTo solve the above problems, in this paper, the MA-CDMR method in an SDWN with multicontroller domains is designed and implemented. A multicontroller communication mechanism and a multicast group management module are designed to transfer and synchronize network information between different control domains of the SDWN, and the optimal cross-domain multicast tree is decomposed into two parts- the interdomain multicast tree and the intradomain multicast tree. In addition, a multiagent reinforcement learning-based solution algorithm is designed for each controller. Finally, a multiagent reinforcement learning-based method that combines online and offline training is designed to reduce the dependence on the real-time environment and accelerate the convergence speed of multiple agents."}, {"title": "III. DESCRIPTION AND MODELING OF THE CROSS-DOMAIN MULTICASTING PROBLEM", "content": "Multicasting is a communication method in which data are simultaneously transmitted to multiple target nodes in a computer network. A multicasting method aims to construct a multicast tree so that the transmission cost is minimized. A multicast tree is a tree structure with a multicast source as the root node and covers all destination nodes. By constructing a multicast tree with minimum cost, data can be effectively transmitted to all destination nodes while reducing the network bandwidth and transmission delay. The minimum cost multicast tree problem actually corresponds to a problem in graph theory, namely, the minimum Steiner tree problem [33].\nFor a given wireless weighted graph G(V, E, w), V is the set of nodes in graph G, E is the set of edges in graph G, w is the edge weight, $e_{ij}$ represents an edge from node i to node j, $e_{ij} \\in E$, and the edge weight set is w($e_{ij}$). For a set of multicast nodes M\u2286 V and M = {src} U D, src is the source node and D is the set of multicast destination nodes, where D = {$d_1$, $d_2$, \u2026,d}. Graph G' is the subgraph of graph G containing the set of multicast nodes M. Graph G' also contains some nodes that are not in M, which are referred to as Steiner nodes.\nIn the minimum Steiner tree problem, the aim is to find a spanning tree T = ($V_T$, $E_T$) containing M in the graph G' that can minimize the sum of the weights of the edges, as shown in (1).\n$\\min\\limits_{T\\subset G',M\\subset V_T} \\sum\\limits_{e_{ij} \\in E_T} w(e_{ij})$\n(1)\nwhere $V_T$ represents all nodes in the tree T and $E_T$ represents all edges in the tree T.\nThis paper investigates the cross-domain multicast problem and introduces a solution method for the proposed SDWN with multicontroller domains. It is assumed that the subsequent analysis is performed based on a multidomain scenario; that is, the entire wireless network can be reasonably divided into m control domains, denoted as $N_i$, i = 1, ..., \u0442. Notably, dividing the control domains of the SDWN is a crucial process. In the subsequent discussion of cross-domain multicasting, a definitive division of the entire network and the dynamic migration of software-defined networking (SDN) switches within each domain are assumed. In addition, it is further assumed that the interdomain path cost between any two domains is greater than the path cost between any two nodes in the domain. On the basis of the above description of the problem background, the subsequent research in this paper is performed under the premise that the following two hypotheses are valid.\nHypothesis 1: After the rational division of the SDWN, the SDN switch nodes and their interconnections within each domain are fixed, eliminating the need to consider node movements.\nHypothesis 2: The interdomain path cost associated with the link between any two domains is greater than the cost for the path between any two nodes in the domain."}, {"title": "IV. SDWN WITH A MULTICONTROLLER INTELLIGENT CROSS- DOMAIN MULTICAST ROUTING ARCHITECTURE", "content": "The SDWN multiagent interdomain multicast routing strategy decomposes the construction of interdomain multicast trees into interdomain multicast trees and multiple intradomain multicast trees. Cross-domain multicast routing is achieved through multiagent collaboration. The architecture is illustrated in Fig. 7, and the detailed explanation is as follows.\nEach domain is equipped with a local controller in the control plane that periodically retrieves network state information for the corresponding domain. This information is synchronized to the root controller through a controller communication mechanism, and the root controller manages global network resources. \u2461 The global network link information (NLI) collected in the controller plane is processed and stored in the knowledge plane. \u2462 Multiple agents in the knowledge plane learn and are trained on the basis of the NLI data from different time intervals through perception. 4 Interdomain agents select interdomain multicast trees, which involves selecting paths and boundary nodes among multiple domains. These decisions are then communicated to the agents in each controller domain to construct intradomain multicast trees. The construction of an optimal interdomain multicast tree is achieved through the collaboration of multiple agents. \u2464 The established interdomain multicast tree is synchronized with both the root and local controllers. Before network traffic arrives, flow tables are sent and installed by the control plane at the wireless access nodes in the data plane. The forwarding of traffic then occurs in the data plane.\nThe data plane is responsible for processing and forwarding network packets within the network, which consists of multiple network subdomains. Each domain comprises wireless access points (APs) and stations (STAs). APs form a multihop wireless network within each domain via wireless mesh technology [35]. APs are divided into intradomain nodes (INs) and boundary nodes (BNs), with each AP connecting to an STA within the domain. APs receive wireless data packets from terminal devices and, on the basis of instructions and policies provided by the control plane, select the optimal routing path to forward the packets from the source device to the destination device. Each domain periodically interacts with a corresponding local controller to transmit the wireless network link information from the current domain to the control plane.\nThe control plane is responsible for collecting and analyzing network state information, formulating decisions, and distributing commands and policies to the APs in the data plane. It consists of a root controller and multiple local controllers. The local controllers communicate with the APs in the data plane through a southbound interface, synchronizing the network state information from their corresponding domains to the root controller via the controller communication mechanism (CCM). The root controller provides a global view of the network and manages and schedules global network resources. The control plane interacts with the knowledge plane through a northbound interface, facilitating the deployment and dissemination of policies in the knowledge plane. This approach includes network topology discovery, link information detection, a controller communication mechanism, multicast group management, and flow table installation.\nNetwork topology discovery and link information detection are achieved by the controller sending data packets to the data plane to obtain relevant information. Network topology discovery involves periodically sending link layer discovery protocol (LLDP) [36] request packets, to which APs respond by encapsulating device port connections, IDs, and other information in reply packets. The controller then interprets the previous process and constructs the network topology on the basis of these packets. Link information detection is performed by sending PortStatsRequest packets to obtain port information. The controller decodes the reply message to obtain the following network link information: transmitted packets $tx_p$, received packets $rx_p$, transmitted bytes $tx_b$, received bytes $rx_b$, transmitted erroneous packets $tx_{err}$, received erroneous packets $rx_{err}$, and the duration of port transmission in terms of time $t_{dur}$. Using these parameters, the remaining bandwidth $bw_{ij}$, bandwidth $ubw_{ij}$, packet loss rate $loss_{ij}$, and error rate $err_{ij}$ of the network link can be calculated. The formulas for these calculations are as follows:\n$ubw_{ij} = \\frac{tx_{bj}}{t_{durj}} + \\frac{tx_{bi}}{t_{duri}}$\n(12)\n$bw_{ij} = bw_{max} - ubw_{ij}$\n$err_{ij} = \\frac{tx_{err} + rx_{err}}{tx_p + rx_p} .100\\%$\n$loss_{ij} = \\frac{tx_p - rx_p}{tx_p}.100\\%$\n(13)\n(14)\nwhere $txb*$, $rxb*$ and $t_{dur}*$ represent the transmitted byte count, received byte count, and duration of transmission for nodes, respectively. Similarly, $txp*$, $txerr*$, $rxp*$, and $rx_{err}*$ represent the transmitted packet count, erroneous packet count, received packet count, and erroneous packet count, respectively, for node *.\nIn an SDN [37], since communication between two switches needs to be forwarded through a controller, the network link delay between two switches needs to be approximately calculated. The controller calculates the round-trip time (RTT) from the controller to the two switches, denoted as $RTT_1$ and $RTT_2$, by analyzing the timestamp information for the packets passing through the link. Additionally, on the basis of the LLDP messages, the controller calculates the forward propagation time $T_{fwd}$ and reply propagation time $T_{re}$ between the switches. The link delay $delay_{ij}$ is approximately calculated using these values, as shown in (15).\n$delay_{ij} = \\frac{(T_{fwd} + T_{re} - RTT_1 - RTT_2)}{2}$\n(15)\nFurthermore, the distance $dist_{ij}$ between two APs is calculated on the basis of the deployment coordinates of the wireless APs. The network link information (NLI) obtained from the abovementioned calculations is stored in the NLI storage of the knowledge plane after max-min normalization [34].\nThe controller communication mechanism (CCM) ensures stable and fast communication between the local and root controllers. The MBGP is used in traditional SDN multidomain communication. However, configuring this protocol in an SDN environment can be complex and may lead to inconsistent messages among multiple controllers during message updates. Therefore, a RESTful API design is proposed to address these issues, and a communication mechanism between the local controllers and the root controller is established. The CCM offers flexibility, allowing the root and local controllers to interact in a unified manner and adapt to network environments and requirements. The RESTful API is a standardized approach with well-defined specifications and constraints, reducing compatibility issues. Moreover, it provides scalability, enabling easy expansion and enhancing communication capabilities. The CCM also achieves loose coupling, allowing each controller to be developed and deployed independently, which improves maintainability and scalability. Furthermore, this mechanism is portable and can run on different environments and platforms, enhancing its versatility and adaptability.\nThe main functionality of multicast group management (MGM) is assessing domains in which the multicast source and multicast destination nodes are located and managing the joining and leaving of multicast group members. The MGM analyzes network traffic and packet information to determine the domains with multicast sources and destinations; it coordinates communication among different domains to ensure the proper transmission of multicast flows across domains and communicates with controllers in each domain, providing them with relevant information about multicast flows and coordinating the transmission paths of multicast flows across domains. Additionally, the MGM can handle join and leave requests from multicast users and update the multicast tree accordingly.\n(1) Node joining: When a node $v_i$ in domain $N_k$ sends a dynamic join request $req_k$ = ($v_i$, add), the MGM retrieves the current multicast tree $T_k$ and network topology information for domain $N_k$. If $v_i$ is not already in $T_k$, a request is sent to the agent in the current domain to construct the minimum-cost path $p_i$ from $v_i$ to $T_k$. $T_k$ is then updated as $T_k$\u2190 $T_k \\cup p_i$. Simultaneously, $v_i$ is marked as an online multicast group member capable of receiving data.\n(2) Node leaving: When a multicast group member $v_i$ in $N_k$ sends a node leave request $req_k$ = ($v_i$, leave), the MGM retrieves the current multicast tree $T_k$. It identifies the path $p_i$ from $v_i$ to $T_k$ and performs pruning operations. $T_k$ is updated as $T_k$ \u2190 $T_k - p_i$, the corresponding flow tables are removed, and $v_i$ is marked as an offline node for which data transmission ceases.\nThe flow table receives instructions from the knowledge plane through the northbound interface of the SDN and installs multicast flow entries. When receiving node join and leave requests, it modifies or deletes existing flow table entries to facilitate the addition or removal of group members, ensuring accurate data forwarding."}, {"title": "V. MA-CDMR ALGORITHM", "content": "On the basis of the design of the multicast tree-based solution approach in Section 4.3 for the previous knowledge plane", "agents": "interdomain agents for constructing interdomain multicast trees and intradomain agents for constructing intradomain multicast trees. There is only one interdomain agent", "dist": "to reflect the agent's states", "A_{int}$": "When constructing interdomain multicast trees", "A_{intra}$": "The connectivity among intradomain nodes is complex, with numerous connecting edges. To reduce the complexity of the action space, we consider the set of intradomain nodes as the action space for intradomain agents, $A_{intra}$ = {$v_1$, $v_2$, ..., $v_n$} = {$a_1$, $a_2$, ..., $a_n$} where each node v corresponds to an action a. The valid actions are determined by the next-hop nodes from the current node, whereas the remaining actions are considered invalid actions. This design reduces ineffective exploration by intelligent agents and enables faster decision-making for determining the optimal path.\nIntelligent agents use the reward"}]}