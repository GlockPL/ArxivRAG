{"title": "Runtime Analysis of Evolutionary Algorithms for Multiparty Multiobjective Optimization", "authors": ["Yuetong Sun", "Peilan Xu", "Wenjian Luo"], "abstract": "In scenarios where multiple decision-makers operate within a common decision space, each focusing on their own multi-objective optimization problem (e.g., bargaining games), the problem can be modeled as a multi-party multi-objective optimization problem (MPMOP). While numerous evolutionary algorithms have been proposed to solve MPMOPs, most results remain empirical. This paper presents the first theoretical analysis of the expected runtime of evolutionary algorithms on bi-party multi-objective optimization problems (BP-MOPs). Our findings demonstrate that employing traditional multi-objective optimization algorithms to solve MPMOPs is both time-consuming and inefficient, as the resulting population contains many solutions that fail to achieve consensus among decision-makers. An alternative approach involves decision-makers individually solving their respective optimization problems and seeking consensus only in the final stage. While feasible for pseudo-Boolean optimization problems, this method may fail to guarantee approximate performance for one party in NP-hard problems. Finally, We propose coevolutionary multi-party multi-objective optimizers (CoEMPMO) for pseudo-Boolean optimization and shortest path problems within a multi-party multi-objective context, which maintains a common solution set among all parties through coevolution. Theoretical and experimental results demonstrate that the proposed CoEMPMOrandom outperforms previous algorithms in terms of the expected lower bound on runtime for pseudo-Boolean optimization problems. Additionally, CoEMPMOSS achieves better efficiency and precision in solving shortest path problems compared to existing algorithms.", "sections": [{"title": "1. Introduction", "content": "A significant proportion of multi-objective optimization problems (MOPs) involve two or more parties, and multi-objective games is one of typical scenarios [30], where multiple parties negotiate within the same decision space to reach a consensus or compromise. For example, UAV path planning requires consensus between government's concerns about urban safety and the enterprise's focus on economic benefits [9], the public facility construction involves the coordination among multiple functional departments [39], and the investment selection for commercial projects requires the evaluation of risks and benefits by various departments [33]. Liu et al. [22] defined such problems as multi-party multi-objective optimization problems (MPMOPs), which aim to find a solution set that satisfies or approximates the true Pareto front (PF) of all parties, corresponding to agreement or compromise through negotiation, respectively."}, {"title": "2. Preliminaries", "content": "In this section, we give brief introductions to multi-party multi-objective optimization problems (MP-MOPs) and simple evolutionary multiobjective optimizer."}, {"title": "2.1. Multi-party Multi-objective Optimization Problems", "content": "In real-world scenarios, many optimization problems involve multi-party games, which each party has its own set of objectives that may conflict with those of others. These problems are known as MPMOPs, and represent an extension of classical MOPs, where a single party simultaneously optimizes multiple objectives."}, {"title": "Definition 1 (MPMOP [22]).", "content": "Let M denote the number of parties. For each party m = 1, 2, . . ., M, let km denote the number of objectives they are concerned with. The MPMOP is defined as:\n\nmin F(x) = (F_{1}(x), F_{2}(x), ..., F_{M}(x)),\nwhere the objective functions Fm(x) for each party m are given by:\n\nF_{m}(x) = (f_{m1}(x), f_{m2}(x),..., f_{m k_m}(x)), m = 1, 2, ..., M,\nwhere x \u2208 X is the decision vector, bounded by lower and upper limits xmin and xmax, and F(x) = (F\u2081(x), F2(x), ..., FM(x)) is the vector of objective functions from all parties.\nIn multi-objective optimization problems (MOPs) of each party, dominance relations (Definition 2) are introduced to assess solution quality, forming the foundation for defining Pareto optimality (Definition 3)."}, {"title": "Definition 2 (Domination).", "content": "Let Fm = (f1, f2,..., fk) : X \u2192 Rk be the objective vector of any party m, where X is the feasible solution space. For two solutions x, x' \u2208 X:\n1. x weakly dominates x' if f_{j}(x) \u2264 f_{j}(x') for all j \u2208 {1,...,k}, denoted as x \u227b x'.\n2. x dominates x' if x weakly dominates x' and f_{j}(x) < f_{j}(x') for at least one j, denoted as x \u227b x'."}, {"title": "Definition 3 (Pareto Optimality).", "content": "Let Fm = (f1, f2, ..., fk) : X \u2192 Rk be the objective vector of any party m, where X is the feasible solution space. A solution x is Pareto optimal if no other solution x' \u2208 X satisfies x' \u227b x.\nA set Im CX is called a Pareto set if it consists only of Pareto optimal solutions. The collection of objective values corresponding to Im is called its front, and if Im is a Pareto set, the front is referred to as the Pareto front.\nBuilding on these concepts, the notion of common Pareto optimality is introduced for multi-party multi-objective optimization problems (MPMOPs) (Definition 4)."}, {"title": "Definition 4 (Common Pareto Optimality [22]).", "content": "A solution x* \u2208 \u03a6 C X is called common Pareto optimal if:\n\n\u03a6 = \\bigcap_{m=1}^{M} \u0424_{m},\nwhere Im is the Pareto set of party m. The set is referred to as the common Pareto set.\nA common Pareto optimal solution represents an equilibrium where the objectives of all parties are simultaneously optimized, rendering it inherently acceptable to all without the need for further compromise. Such a solution is universally optimal across all parties, distinguishing it from non-common solutions, which may satisfy only a subset of the parties' objectives and often require additional negotiations or adjustments to achieve broader consensus. It is worth noting that this paper focuses exclusively on MPMOPs in which common Pareto optimal solutions exist."}, {"title": "2.2. Simple Evolutionary Multiobjective Optimizer", "content": "Simple evolutionary multi-objective optimizer (SEMO) [20] represents the simplest instance of a population-based evolutionary algorithm for multi-objective optimization and is commonly employed in theoretical analyses on multi-objective optimization [13, 14, 27, 1]. SEMO maintains a population of unfixed size to store all solutions that are not dominated by any other solution encountered thus far. The algorithm begins by randomly selecting an initial solution from the decision space to initialize the population. In each iteration, a solution is randomly chosen from the current population to undergo a one-bit mutation. The resulting mutated solution is then compared against all existing solutions in the population. Dominated solutions are subsequently removed to refine and maintain the population's quality."}, {"title": "3. Runtime Analysis of Evolutionary Algorithm on Artificial Multiparty Multiobjective Problem", "content": "We initiate a theoretical investigation into evolutionary multi-party multi-objective optimizer by employing a pseudo-Boolean function. To the best of our knowledge, this is the first study addressing multi-party multi-objective optimization problems. As the foundation for our analysis, we construct a bi-party bi-objective pseudo-Boolean problem, termed BPAOAZ (biparty all ones all zeros), tailored to this context. Our work begins by deriving the simple coevolutionary multi-party multi-objective optimizer from the well-known SEMO and analyze its runtime performance. Building on this baseline, we introduce two variants, i.e., random and payoff-based coevolutionary multi-party multi-objective optimizer, inspired by the concepts of \"bounded rationality\" and \"full rationality\" from game theory, are provide their respective runtime complexity analysis in solving the BPAOAZ problem. Finally, we demonstrate a runtime performance comparison between these coevolutionary bi-party multi-objective optimizer and SEMO, where BPAOAZ is treated as a standard multi-objective optimization problem by the latter. In these algorithms, the population is explicitly or implicitly divided into several subpopulations, each tasked with exploring the Pareto set of a specific decision-making party. Ultimately, the algorithms identify the common Pareto set through a coevolutionary process. Therefore, we refer to these algorithms as coevolutionary algorithms [25, 12]."}, {"title": "3.1. Artificial Bi-party Bi-objective Optimization Problem", "content": "Bi-objective pseudo-Boolean optimization problems, such as LOTZ, COCZ, and OneMinMax, are widely used to analyze the performance of evolutionary multi-objective optimizers [20, 15, 42]. Building upon these foundational bi-objective test cases, we propose an artificial problem referred to as BPAOAZ (bi-party all ones all zeros), designed for two parties, each with two objectives, and ensure the existence of at least one solution in the Pareto optimal set for both parties."}, {"title": "Definition 5 (BPAOAZ).", "content": "The pseudo-Boolean function BPAOAZ : {0,1}\u2033 \u2192 {N2, N2} is defined as\nBPAOAZ(x) = (AORZ(x), AOFZ(x)),\nwhere x = (x1, x2,...,xn) \u2208 {0,1}\u2033, and n = 2a for some a \u2208 N. The components AORZ(x) and AOFZ(x) are given as follows:\nAORZ(x) = (f_{11}(x), f_{12}(x)),\nwhere\nf_{11}(x) = \\sum_{i= \\frac{n}{2}+1}^{n}x_{i}, f_{12}(x) = \\sum_{i=1}^{n/2}x_{i}+ \\sum_{i= \\frac{n}{2}+1}^{n}(1-x_{i});\nAOFZ(x) = (f_{21} (x), f_{22}(x)),"}, {"title": "3.2. Runtime Analysis of Coevolutionary Multi-party Multi-objective Optimizer", "content": "Based on the Definition 4 regarding the common Pareto set in MPMOPs, a straightforward approach can be derived from SEMO for solving such problems, referred to as the simple coevolutionary multi-party multi-objective optimizer (CoEBPMOsimple), which is outlined in Algorithm 2. The CoEMPMOsimple operates by independently identifying the Pareto sets for each party and subsequently determining their intersection. Its feasibility depends on two critical assumptions: 1) the presence of at least one solution common to the Pareto optimal sets of both parties and 2) the ability to obtain the complete Pareto set for each evolutionary multi-objective optimizer."}, {"title": "Lemma 1.", "content": "Consider an algorithm that iteratively constructs the set and the populations Pm, m \u2208 {1,..., M} for each party through a sequence of mutation and selection steps, satisfying the following properties:\n1. A new decision vector is added to Pm if, and only if it is not dominated by any member of Pm, and it is added to \u00de if, and only if it is not dominated by any member of \u0424 across all parties.\n2. A decision vector is removed from Pm if, and only if, a dominating vector is added to Pm, and it is removed from I if, and only if, a dominating vector is added to for at least one party.\nThen, the set is the common non-dominated solution set of all parties, and is the common Pareto optimal solution set if each population Pm is the Pareto optimal solution set PSm for party m."}, {"title": "Theorem 1.", "content": "The expected running time of CoEMPMOsimple applied to BPAORZ is bounded by O(n\u00b2 log n)."}, {"title": "Theorem 2.", "content": "The expected running time of CoEMPMOrandom applied to BPAORZ is bounded by O(n\u00b2 log n)."}, {"title": "Definition 6 (Multiparty Payoff).", "content": "Let candidate solutions with the same objective values be grouped into a set Xi. The payoff \u03c0m(Xi, X\u2081) represents the degree of evolution or degeneration for party m when transitioning from set Xi to set Xj. The multiparty payoff \u03c0(Xi, Xj) on MPMOPs for the transition from Xi to Xj is given by:\n\n\u03c0(X_{i}, X_{j}) = \\sum_{m=1}^{M} \u03c0_{m}(X_{i}, X_{j}).\nIn the specific implementation of this paper, we define \u03c0m(Xi, X\u2081) as the weighted sum of the differences in objective values.\nConsider modeling the evolutionary process using a Markov chain. The corresponding state transition diagram describes the transition probabilities between all states, from the initial state to the target state. Suppose that each edge in the state transition diagram is assigned an additional weight, representing the payoff from transitioning from one state to another. In this case, the payoff \u03c0(Xi, Xj) from the initial state to the target state should be non-negative. Therefore, we can draw the following conclusion."}, {"title": "Lemma 4.", "content": "If the multiparty payoff of each transition between two states, Xi and Xj, is greater than zero, and it is assumed that transitions only occur in the direction of positive payoffs, then no cycle exists between Xi and Xj in the Markov chain."}, {"title": "Theorem 3.", "content": "The expected running time of CoEMPMOpayoff applied to BPAOAZ is bounded by O(nlog n)."}, {"title": "Definition 7 (AOAZ).", "content": "The pseudo-Boolean function AOAZ, denoted as AOAZ : {0,1}\u2033 \u2192 N4, is defined by\nAOAZ(x) = (f_{11}(x), f_{12}(x), f_{21} (x), f_{22}(x)),\nwhere f11(x), f12(x), f21(x), and f22(x) are consistent with their definitions in Definition 5. Here, n = 2a, and a \u2208 N."}, {"title": "Theorem 4.", "content": "The expected running time of SEMO applied to AOAZ is bounded by O(n\u00b3) ."}, {"title": "4. Runtime Analysis of Evolutionary Algorithms on Biparty Multiobjective Shortest Path Problem", "content": "We analyze the multi-objective shortest path (MOSP) problem as a case study to compare the running times of MPMOEAs and traditional MOEAs in solving NP-hard problems [31, 17]. MOSP is representative of real-world applications [38, 8], such as UAV path planning, where trade-offs between safety and efficiency must be resolved in multi-party scenarios [9]. This section introduces the bi-party multi-objective shortest path problem (BPMOSP) and derives a baseline algorithm, the simple coevolutionary biparty multi-objective optimizer (CoEMPMOSimple), based on the diversity-maintaining evolutionary multi-objective optimizer (DEMO) [16, 17]. We analyze the runtime of this algorithm for solving BPMOSP. Building on this, we propose the consensus-based coevolutionary multi-party multi-objective optimizer (CoEMPMOSS), which incorporates only candidate solutions achieving consensus between the two parties into the population for updates. A detailed runtime analysis is provided for the proposed algorithm, and its performance is compared with that of traditional evolutionary multi-objective optimizers."}, {"title": "4.1. Biparty Multiobjective Shortest Path Problem", "content": "We consider the biparty multi-objective single-source shortest path problem, where the objective is to find the common Pareto shortest path from a fixed source vertex to all other target vertices. The formal definition is provided as follows."}, {"title": "Definition 8.", "content": "Given a directed weighted graph G = (V,E,W), where V is the set of vertices and E C {(u,v) \u2208 V2 | v \u2260 u} is the set of directed edges, and W : E \u2192 {Rk1, Rk2} is the weight function that assigns each edge e = (u,v) \u2208 E a vector of weights corresponding to the objectives of two parties, the biparty multiobjective single-source shortest path problem (BPMOSP) is defined as:\n\nmin F(x) = (F_{1}(x), F_{2}(x)),\nx\u2208Paths(s,v)\nwhere x = {vo, U1,..., vi} represents a path from a fixed source vertex s = vo to any other vertex v = v\u0173 \u2208 V, Paths(s,v) denotes the set of all paths from the source s to target v. The multi-objective functions Fm(x) for each party m\u2208 {1,2}, each containing km objective, are given by:\nF_{m}(x) = (f_{m1}(x),..., f_{m k_m}(x)),\nwhere fmk is the sum of the weights along the path corresponding to the k-th objective of party m:\nf_{mk}(x) = \\sum_{j=1}^{l} W_{mk} (U_{j-1}, U_{j}),\nwith Wmk(Uj\u22121,vj) representing the weight of the edge (vj\u22121,vj) corresponding to k-th weight of party m. The path length l satisfies l < n \u2212 1, where n = |V| is the number of vertices in the graph G.\nTo facilitate theoretical analysis, we define the following notation:\nw_{max} = \\max_{m} \\max_{k\u2208{1,...,k_m}} \\max_{e\u2208E} W_{mk} (e),\nw_{min} = \\min_{m} \\min_{k\u2208{1,...,k_m}} \\min_{e\u2208E} W_{mk} (e),\nwhich represent the maximum and minimum weights assigned by party m, respectively. Additionally, we define\nw^{max} = \\max_{m\u2208{1,2}} w^{max},\nw^{min} = \\min_{m\u2208{1,2}} w^{min},\nto denote the maximum and minimum weights across all parties.\nIn this problem, all edge weights are assumed to be positive. We set wmin > 1, which can be achieved by normalizing all weights by dividing them by wmin. Without loss of generality, among the n vertices, we designate vertex 1 as the source vertex. Thus, the goal is to find the common shortest paths from s = 1 to the remaining n 1 vertices. According to the problem setting, the objective function satisfies 1 \u2264 fmk(x) \u2264 (n-1)wmax. Then, the dominance relationship between candidate solutions with the same target vertex in the BPMOSP aligns with the definition provided in Definition 2.\nThe time required to identify the Pareto front for most MOPs is well known to grow exponentially with problem size [5]. For NP-hard MOPs, approximating the Pareto front is an effective strategy [19], and this approach can also be extended to NP-hard MPMOPs. Let (1 + \u025b) represent the approximation ratio."}, {"title": "Definition 9 (\u03b5-domination).", "content": "Let x and x' denote paths with target vertices viand vv, respectively. Path x' weakly \u025b-dominates path x for party m, denoted as F_{m}(x') \\succeq_{1+\u03b5} F_{m}(x), if and only if:\n\u2200k\u2208 {1,...,km}, f_{mk}(x') \u2264 (1 + \u03b5)\u00b7 f_{mk}(x) and v\u2081 = vv.\nIf F_{m}(x') \\succeq_{1+\u03b5} F_{m}(x) and F_{m}(x') \u2260 F_{m}(x), then x' \u025b-dominates x, denoted as F_{m}(x') \u227b_{1+\u03b5} F_{m}(x). Paths with different target vertices are considered incomparable.\nIn the BPMOSP, the concept of common Pareto optimality is consistent with Definition 4 and can be extended to the case of \u025b-dominance as defined in Definition 9. Assuming the existence of at least one path x that satisfies the definition of common optimality, this paper focuses on MPMOPs with common solutions."}, {"title": "4.2. Runtime Analysis of Simple Coevolutionary Multiparty Multiobjective Optimizer", "content": "Intuitively, Algorithm 2 can also be applied to solve the BPMOSP. Assuming the existence of a common Pareto solution, the algorithm seeks to identify the complete Pareto set for each party individually, with their intersection yielding the desired common Pareto set. However, for NP-hard problems, obtaining the exact Pareto front is computationally expensive. Therefore, it is often more practical to pursue solutions that satisfy a (1+2)-approximation ratio, which reduces the time complexity to a polynomial level. As proposed by Horoba [17], a runtime analysis framework for evolutionary algorithms can be used to evaluate their (1 + \u03b5)-approximation performance on the multi-objective shortest path problem (MOSP). This framework employs the concept of a box index [19] to partition the objective space."}, {"title": "Definition 10 (Box Index [19]).", "content": "For the box size r > 1, the box index of the objective vector Fm(x), corresponding to the path x, is defined as:\n\nb_{r}(F_{m}(x)) = (\\lfloor log_{r}(f_{m1}(x))\\rfloor,\u2026\u2026, \\lfloor log_{r}(f_{m k_m}(x))\\rfloor).\nEach box can accommodate at most one individual in the population, effectively controlling the population size through box division and the dominance relationship between boxes. According to the properties of the MOSP, box indices are comparable only when the target vertices of the paths are identical. If the target vertices differ, the box indices are considered incomparable. Formally, given two paths x and x' with the identical target vertices, br(Fm(x'))\u2265 br(Fm(x)) if and only if\n\u2200k \u2208 {1,...,km}, \\lfloor log_{r}(f_{mk}(x'))\\rfloor \u2264 \\lfloor log_{r}(f_{mi}(x))\\rfloor,\nand br(Fm(x')) > br(Fm(x)) if and only if\n\u2200k\u2208 {1,...,km},\\lfloor log_{r}(f_{mk}(x'))\\rfloor \u2264 \\lfloor log_{r}(f_{mk}(x))\\rfloor,\n\u2203k \u2208 {1,...,km}, \\lfloor log_{r}(f_{mk}(x'))\\rfloor < \\lfloor log_{r}(f_{mk}(x))\\rfloor.\nUsing the runtime analysis framework proposed by Horoba [17], we independently search for (1 + \u03b5)-approximation solutions for both parties. However, unlike the conclusion in Section 3.2, after introducing approximation analysis, there is no guarantee that the algorithm can find a common Pareto set satisfying the (1 + 8)-approximation ratio."}, {"title": "Lemma 5.", "content": "Let 1 and 2 represent the Pareto-optimal solution sets of the BPMOSP for two parties, respectively, and assume there exists a common Pareto solution x* \u2208 \u03a61 \u2229 \u03a62. Suppose 1 and 2 are the Pareto solution sets with approximation ratio (1 + \u20ac1) and (1 + \u00a32), respectively, obtained via EAs. Then, there exists a non-zero probability that the intersection of these approximate sets is empty, i.e., Pr (\u03a6\u00b9 \u2229 \u03a6\u00b2 = \u00d8) > 0."}, {"title": "Theorem 5.", "content": "Let \u025b\u2081 > 0, \u20ac2 > 0, \u03b5 = min{\u03b5\u03b9,\u20ac2}, and 1+ \u20ac1 and 1 + \u025b2 represent the approximation ratios for party 1 and 2, respectively. Let k = max{k1,k2} represent the maximum number of objectives among"}, {"title": "Theorem 6.", "content": "Let \u025b > 0, m \u2208 {1,2}, and k represent the maximum number of objectives among all parties. When CoEMPMO is applied to BPMOSP, it achieves a (1 + \u025b)-approximation with an expected running time bounded by:\nO\\left(n^{4} \\cdot\\left(\\frac{n \\log (n w^{\\max })}{\\epsilon}\\right)^{k-1} \\cdot \\log \\left(\\frac{n \\log (n w^{\\max })}{\\epsilon}\\right)\\right)."}, {"title": "4.4. Comparison Between Bi-party Multi-objective Shortest Path and Multi-objective Shortest Path", "content": "Consider the case where k\u2081 = k2 = 2, representing a bi-party bi-objective shortest path (SP) problem. Compared to the generalized four-objective SP problem, the time complexities are as follows.\nBi-objective SP Problems: As stated in [17], the upper bound on the expected running time is:\nO\\left(n^{3} \\cdot\\frac{n \\log (n w^{\\max })}{\\epsilon}\\cdot \\log \\left(\\frac{n \\log (n w^{\\max })}{\\epsilon}\\right)\\right)\nThis bound also applies to CoOEMPMOsimple for the bi-party bi-objective SP problem, but with a larger approximation ratio.\nFour-objective Problems: The upper bound on the expected running time is:\nO\\left(n^{3} \\cdot\\left(\\frac{n \\log (n w^{\\max })}{\\epsilon}\\right)^{3} \\cdot \\log \\left(\\frac{n \\log (n w^{\\max })}{\\epsilon}\\right)\\right)\nBi-party Bi-objective SP Problem: Using CoEMPMO the upper bound on the expected running time is:\ncons,  O\\left(n^{4} \\cdot\\frac{n \\log (n w^{\\max })}{\\epsilon}\\cdot \\log \\left(\\frac{n \\log (n w^{\\max })}{\\epsilon}\\right)\\right)\nIn all cases, the approximation accuracy & is consistent across the bi-objective, four-objective, and bi-party bi-objective problems. While CoEMPMOSIS modifies the mutation operator, its running time remains lower than that for the four-objective problem and slightly higher than that for the bi-objective problem. Importantly, unlike COEMPMOSP Simple, COEMPMO Sons does not relax the approximation accuracy, thereby yielding higher-quality solutions."}, {"title": "5. Experiments", "content": "In this section, we conduct short experiments on the artificial problem BPAOAZ and the bi-party multi-objective UAV path planning (BPUAVPP) to complement the theoretical results."}, {"title": "5.1. On Artificial Problem BPAOAZ", "content": "In this subsection, we analyze the average running times of the MOEA, i.e., SEMO, and three MP-MOEAS: COEMPMOsimple, CoEMPMOrandom, and CoEMPMOpayoff, on the artificial problem BPAOAZ. Each algorithm was independently executed 10 times. The results, illustrated in Fig. 3a, provide a comparative evaluation of their performance.\nSEMO is designed to identify the complete Pareto set of the associated multi-objective optimization problem, whereas the other three algorithms focus on finding the common Pareto set. Among these,"}, {"title": "5.2. On Bi-party Multi-objective UAV Path Planning", "content": "In this experiment, we evaluate the performance of DEMO, CoEMPMOSimple, and CoEMPMOcons on the BPMOSP problem, which is based on the bi-party multi-objective UAV path planning (BPUAVPP) problem proposed by Chen et al. [9]. The problem involves two stakeholders: the efficiency party and the safety party. To account for the computational complexity of the underlying optimizer, we simplify the BPMOSP problem into a combinatorial optimization problem that seeks the shortest path on a finite set of nodes, disregarding continuous coordinates. Additionally, all constraints in the problem are omitted. The problem construction ensures the existence of a common solution.\n\u2022 The efficiency party focuses on minimizing the path length and the mission hover point distance, formulated as follows:\nf_{length} = \\sum_{i=0}^{n-1} ||g_{i}||, f_{distance} =  \\underset{k=0}{K-1} min ||p_{i} - p^{ob}_{k}||,"}, {"title": "6. Conclusion", "content": "In this paper, we present the first mathematical analysis of the runtime of evolutionary algorithms applied to two-party multi-objective optimization problems. We demonstrate that multi-objective optimization algorithms are not suitable for bi-party multi-objective optimization problems, both in terms of runtime and the solution set. We then consider a transition from multi-objective optimization to multi-party multi-objective optimization by decoupling MPMOPs into two MOPs and separately optimizing them to compute their intersection for the common Pareto set. This approach is limited by the NP-Hard nature of the problem, making it difficult to obtain exact solutions in polynomial time, and the final solution set composed of approximations often lacks an intersection. Finally, we propose two general bi-party multi-objective optimization frameworks, along with a customized algorithm for the bi-party multi-objective shortest path optimization. We provide theoretical guarantees for an approach that maintains a single population searching for a common solution, and demonstrate that considering the interaction between the two parties in each iteration optimizes both time efficiency and solution set quality. This paper lays the foundation for evolutionary multi-party multi-objective optimization analysis, which will be further extended in the future to analyze bi-party multi-objective optimization problems without a common solution."}]}