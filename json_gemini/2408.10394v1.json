{"title": "Joint Modeling of Search and Recommendations Via an Unified Contextual Recommender (UniCoRn)", "authors": ["Moumita Bhattacharya", "Vito Ostuni", "Sudarshan Lamkhede"], "abstract": "Search and recommendation systems are essential in many services, and they are often developed separately, leading to complex maintenance and technical debt. In this paper, we present a unified deep learning model that efficiently handles key aspects of both tasks.", "sections": [{"title": "INTRODUCTION", "content": "In real-world applications, teams often develop separate models to solve search and recommendation tasks. Throughout various services, it is common to have query-driven item searches, item-to-item similarity-based recommendations as well as other kinds of more traditional recommendations. It is often the case that teams develop bespoke models for each use case, which can rapidly result in systems management overhead and hidden technical debt in maintaining a large number of specialized models. As observed by [4, 6], this complexity can lead to increased long-term costs, and reduced reliability and effectiveness of ML systems. Moreover, we argue that these different applications can benefit from each other [7]. In this talk, we will describe a series of practical solutions and modeling approaches that we built to leverage one single deep learning model to serve both search and certain recommendations tasks. Additionally, we share approaches that we took to personalize search results at scale, while also improving the recommendation use cases served by this unified model."}, {"title": "PROPOSED APPROACH", "content": "Model Unification: Prior to developing the approach presented here, we had several models powering different applications on the Netflix product. With our approach we were able to unify some of these models. For example, we trained a model that exclusively powered Netflix Search canvas (Query-Video-Recommendations), where when a member types in a query, we show videos that are relevant to the query [3]. Similarly, we trained a separate model that generated recommendations for a given video when a user clicks on it to show other videos that are similar to it (Video-Video-Recommendations). We trained yet another model to power recommendations on Pre-Query or anticipatory search canvas (Profile-Video-Recommendations [1]). As we consider search and recommendation as \"two sides of the same coin\", we embarked into a journey of unification of all these different models, such that not only we consolidate the tech stack, but also be able to use just one trained model to serve all these different types of applications across different parts of the Netflix product, as shown in Fig. 1.\nOne of the key differences between a traditional search ranking model and a traditional recommender system is the input context. Search is centered around an explicit textual query context, while recommendations are driven by the user context and/or other context such as source item. More specifically, when a user visits the Search PreQuery page they are shown a list of recommendations that are personalized for them. As soon as the user types something, they are shown search results relevant to their query. We approached these two separate context driven tasks as one task with a shared broader context definition.\nWe develop a model that has in its context the following information: user id, query, country, source entity id and task. Note, entity id here refers to the id of a video or a game. The output of this model is a probability score for positive engagement with an entity, which we will refer to as target entity id from here on. This model is trained on a dataset that is gathered from engagements pertaining to all the different tasks, which was possible because of the broadened context.\nFor some tasks, only certain contexts are available. For example, for the search task, we have query, user id, country and task contexts available but we don't have any source entity id information. Similarly, for Video-Video Recommendations tasks we don't have query in the context. We developed different heuristics to impute missing contexts for each tasks. Specifically, for search tasks we impute null value to the missing context, whereas for certain recommendations tasks such video-video or entity-video recommendations, we impute the missing query context by leveraging tokens of the display names of the entity. This imputation approach reduces"}, {"title": "CONCLUSION", "content": "This work demonstrates that a single unified model, aware of diverse contexts, can perform and improve both search and recommendation tasks. Additionally, incorporating personalization within this model benefits both applications, while optimally trading-off relevance and personalization."}, {"title": "AUTHORS BIO", "content": "Moumita Bhattacharya and Vito Ostuni are research scientist at Netflix where they work on Search and Recommendation algorithms. Sudarshan Lamkhede is a Engineering Manager at Netflix leading the Foundation Model and Search Algorithms team."}]}