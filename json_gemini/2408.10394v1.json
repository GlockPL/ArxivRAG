{"title": "Joint Modeling of Search and Recommendations Via an Unified\nContextual Recommender (UniCoRn)", "authors": ["Moumita Bhattacharya", "Vito Ostuni", "Sudarshan Lamkhede"], "abstract": "Search and recommendation systems are essential in many ser-\nvices, and they are often developed separately, leading to complex\nmaintenance and technical debt. In this paper, we present a unified\ndeep learning model that efficiently handles key aspects of both\ntasks.", "sections": [{"title": "1 INTRODUCTION", "content": "In real-world applications, teams often develop separate models to\nsolve search and recommendation tasks. Throughout various ser-\nvices, it is common to have query-driven item searches, item-to-\nitem similarity-based recommendations as well as other kinds of\nmore traditional recommendations. It is often the case that teams\ndevelop bespoke models for each use case, which can rapidly re-\nsult in systems management overhead and hidden technical debt\nin maintaining a large number of specialized models. As observed\nby [4, 6], this complexity can lead to increased long-term costs,\nand reduced reliability and effectiveness of ML systems. Moreover,\nwe argue that these different applications can benefit from each\nother [7]. In this talk, we will describe a series of practical solu-\ntions and modeling approaches that we built to leverage one single\ndeep learning model to serve both search and certain recommen-\ndations tasks. Additionally, we share approaches that we took to\npersonalize search results at scale, while also improving the rec-\nommendation use cases served by this unified model."}, {"title": "2 PROPOSED APPROACH", "content": "Model Unification: Prior to developing the approach presented\nhere, we had several models powering different applications on\nthe Netflix product. With our approach we were able to unify some\nof these models. For example, we trained a model that exclusively\npowered Netflix Search canvas (Query-Video-Recommendations), where\nwhen a member types in a query, we show videos that are relevant\nto the query [3]. Similarly, we trained a separate model that gener-\nated recommendations for a given video when a user clicks on it to\nshow other videos that are similar to it (Video-Video-Recommendations).\nWe trained yet another model to power recommendations on Pre-\nQuery or anticipatory search canvas (Profile-Video-Recommendations\n[1]). As we consider search and recommendation as \"two sides of\nthe same coin\", we embarked into a journey of unification of all\nthese different models, such that not only we consolidate the tech\nstack, but also be able to use just one trained model to serve all\nthese different types of applications across different parts of the\nNetflix product, as shown in Fig. 1.\nOne of the key differences between a traditional search ranking\nmodel and a traditional recommender system is the input context.\nSearch is centered around an explicit textual query context, while\nrecommendations are driven by the user context and/or other con-\ntext such as source item. More specifically, when a user visits the\nSearch PreQuery page they are shown a list of recommendations\nthat are personalized for them. As soon as the user types some-\nthing, they are shown search results relevant to their query. We\napproached these two separate context driven tasks as one task\nwith a shared broader context definition.\nWe develop a model that has in its context the following in-\nformation: user id, query, country, source entity id and task. Note,\nentity id here refers to the id of a video or a game. The output of\nthis model is a probability score for positive engagement with an\nentity, which we will refer to as target entity id from here on. This\nmodel is trained on a dataset that is gathered from engagements\npertaining to all the different tasks, which was possible because of\nthe broadened context.\nFor some tasks, only certain contexts are available. For example,\nfor the search task, we have query, user id, country and task con-\ntexts available but we don't have any source entity id information.\nSimilarly, for Video-Video Recommendations tasks we don't have\nquery in the context. We developed different heuristics to impute\nmissing contexts for each tasks. Specifically, for search tasks we im-\npute null value to the missing context, whereas for certain recom-\nmendations tasks such video-video or entity-video recommenda-\ntions, we impute the missing query context by leveraging tokens of\nthe display names of the entity. This imputation approach reduces"}, {"title": "3 CONCLUSION", "content": "This work demonstrates that a single unified model, aware of di-\nverse contexts, can perform and improve both search and recom-\nmendation tasks. Additionally, incorporating personalization within\nthis model benefits both applications, while optimally trading-off\nrelevance and personalization."}]}