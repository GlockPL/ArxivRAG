{"title": "Enhancing Internet of Things Security through\nSelf-Supervised Graph Neural Networks", "authors": ["Safa Ben Atitallah", "Maha Driss", "Wadii Boulila", "Anis Koubaa"], "abstract": "With the rapid rise of the Internet of Things (IoT), ensur-\ning the security of IoT devices has become essential. One of the pri-\nmary challenges in this field is that new types of attacks often have\nsignificantly fewer samples than more common attacks, leading to unbal-\nanced datasets. Existing research on detecting intrusions in these unbal-\nanced labeled datasets primarily employs Convolutional Neural Networks\n(CNNs) or conventional Machine Learning (ML) models, which result in\nincomplete detection, especially for new attacks. To handle these chal-\nlenges, we suggest a new approach to IoT intrusion detection using Self-\nSupervised Learning (SSL) with a Markov Graph Convolutional Network\n(MarkovGCN). Graph learning excels at modeling complex relationships\nwithin data, while SSL mitigates the issue of limited labeled data for\nemerging attacks. Our approach leverages the inherent structure of IoT\nnetworks to pre-train a GCN, which is then fine-tuned for the intru-\nsion detection task. The integration of Markov chains in GCN uncovers\nnetwork structures and enriches node and edge features with contextual\ninformation. Experimental results demonstrate that our approach sig-\nnificantly improves detection accuracy and robustness compared to con-\nventional supervised learning methods. Using the EdgeIIoT-set dataset,\nwe attained an accuracy of 98.68%, a precision of 98.18%, a recall of\n98.35%, and an F1-Score of 98.40%.\n\nKeywords: Internet of Things Self-supervised learning Intrusion de-\ntection Graph learning Markov chain.", "sections": [{"title": "Introduction", "content": "The fast rise of Internet of Things (IoT) devices has revolutionized different\nfields, from smart homes and healthcare to industrial automation and smart\ncities [1,2]. However, this increasing number of interconnected devices has also\nincreased security vulnerabilities, making IoT networks a potential target for\ncyber-attacks. Effective intrusion detection systems are required for identifying\nand mitigating these threats to ensure the integrity, confidentiality, and avail-\nability of IoT systems [3].\nCurrent methods for intrusion detection in IoT networks face significant lim-\nitations, mainly when working with a large number of classes in a dataset, which\noften leads to decreased classification performance. Conventional approaches pri-\nmarily rely on Machine Learning (ML) algorithms [4] or Convolutional Neural\nNetworks (CNNs) [5]. These traditional supervised learning methods require\nlarge labeled datasets, often challenging to obtain [6]. While some recent works\nutilize Graph Neural Networks (GNNs), these approaches typically process only\na subset of the data due to computational constraints, which can result in over-\nfitting and suboptimal performance [6].\nTo address these challenges, we propose to use the MarkovGCN, an inte-\ngration of Markov chains with GNNs [7], enhanced by self-supervised learning\n(SSL). GNNs excel at modeling complex relationships within data by repre-\nsenting it as graphs where nodes define entities and edges illustrate connections\nbetween them. On the other hand, SSL leverages the data to generate labels\nand learn from them, which permits the model to capture robust illustrations\nfrom unlabeled data. By employing the MarkovGCN for IoT intrusion detection,\nwe enhance the model's efficiency and demonstrate significant improvements in\nmanaging the complexity and variety of attack classes present in IoT environ-\nments. Combining Markov chains with GNNs generates a series of Markov ma-\ntrices that capture the graph's dynamic relationships and community structures.\nThis allows the model to understand better and represent the data's inherent\nstructure, leading to improved detection capabilities. Furthermore, this integra-\ntion enhances resistance to outliers by focusing on the overall transition patterns\nrather than working on single instances. The generated Markov chain transitions\nare computationally efficient, which makes the model scalable to large IoT net-\nworks. By leveraging the full dataset and the inherent properties of Markov\nchains, the MarkovGCN is less prone to overfitting, especially in scenarios with\nlimited labeled data.\nAn essential component of our approach is the use of SSL with edge weight\nprediction. For the SSL task, we predict the edge weights as the pretext task.\nGiven the node feature matrix X and the aggregated edge weights W, we train\nthe model to predict the edge weights, which helps in learning robust node\nrepresentations. This is achieved through a series of steps, including node feature\ntransformation, edge weight prediction using a multi-layer perceptron (MLP),\nand a mean squared error (MSE) loss function to calculate the variance between\nthe real and forecasted edge weights. The proposed MarkovGCN was evaluated\nusing the EdgeIIoT-Set dataset. It achieved a good performance with an accuracy\nof 98.68% and better handled the intricacies of IoT network traffic compared to\nthe conventional models.\nThe following points represent illustrations of the study's main contributions:\nThis paper proposes an intrusion detection approach for IoT networks founded\non a combination of MarkovGCN and SSL. The integration of Markov chains\nwithin GCN enhances the robustness and scalability of the model and en-\nables it to effectively capture dynamic relationships and community struc-\ntures within IoT network data. The use of SSL addresses the challenge of\nlimited labeled data through the use of edge weight prediction as a pretext\ntask."}, {"title": "Related Work", "content": "IoT intrusion detection has been studied using various ML techniques. Works\nin [8,9,10] proposed supervised ML-based intrusion detection systems for IoT.\nDifferent ML models were employed for analysis, including support vector ma-\nchine, decision tree, random forest, logistic regression, etc. While these methods\nprovide good results, they struggle with imbalanced datasets, particularly when\nsome classes have only a few samples.\nDifferent works have been proposed for intrusion detection using CNNs [11,12].\nCNNs offer several advantages in this context, such as their power to automati-\ncally identify relevant features from raw data and their high accuracy in detecting\nknown attack patterns. However, they also come with disadvantages, including\ntheir reliance on large amounts of labeled training data, their susceptibility to\nadversarial attacks, and their potential problem in capturing complex temporal\ndependencies inherent in network traffic data. In [13] two CNN models, DenseNet\nand Inception Time, were trained using multi-class classification methods to de-\ntect cyber-attacks. Evaluation of three datasets the ToN-IoT, Edge-IIoTSet,\nand UNSW2015-demonstrated robust performance across various attack types.\nOn the other hand, GNNs have been presented as a breakthrough technique\nfor many domains, including network security [14]. Unlike CNNs, GNNs excel in\nmodeling relational data, making them suitable for capturing complex relation-\nships and dependencies within network graphs. This capability allows GNNs to\nefficiently detect evolving attack patterns that are not explicitly represented in\ntraining data. Different approaches in the literature have been proposed based\non the GNN for IoT intrusion detection [15,16,17]. However, challenges, includ-\ning scalability with large graphs and the need for effective graph representation\nlearning, remain areas of active research in applying GNNs to intrusion detec-\ntion.\nCurrent intrusion detection systems in IoT networks rely mainly on super-\nvised learning models trained on huge labeled data. However, these approaches\nstruggle with detecting novel attacks and may require frequent updates to accom-\nmodate new threats. Recent advances in SSL have enabled the use of unlabeled"}, {"title": "Proposed Approach", "content": "This section presents the architectural structure of our approach, which is sug-\ngested to address challenges encountered in IoT intrusion detection systems. Our\nobjective is to create an SSL-based GCN that can effectively learn and identify\nIoT intrusions. Figure 1 depicts the structure of the suggested IoT intrusion\ndetection approach. The framework consists of three main stages: graph con-\nstruction, SSL using edge weight prediction, and a downstream task focused on\nintrusion detection. The input data is first transformed to a graph from records,\nwhere nodes and edges define entities and their relationships. A MarkovGCN\nmodel is then applied to perform self-supervised learning to predict edge weights,\nenhancing the graph's structure. Finally, the learned representations are used in\nthe downstream task for detecting intrusions."}, {"title": "Graph Constraction", "content": "In the context of IoT networks, the flow of data and communication is repre-\nsented as a graph $G = (V, E)$, where V represents the nodes (endpoints), and\nE is a set of edges. The edges represent the flows between nodes, indicating\nrelationships or connections between them. Each edge connects two nodes and\ncan have associated weights."}, {"title": "Self-Supervised Learning with Edge Weight Prediction", "content": ""}, {"title": "MarkovGCN Architecture:", "content": "The core of our approach is the MarkovGCN\nmodel, designed specifically to capture higher-order dependencies in graph data\n[7]. MarkovGCN extends traditional GCNs by incorporating Markov chain-based\ntransitions between nodes, thereby enriching node representations. In this net-\nwork, the transition probabilities derived from the structure of the graph enhance\nthe node feature aggregation process. The forward propagation in MarkovGCN\nis defined in the following equation 1:\n$H^{(l+1)} = \\sigma(\\~{D}^{-\\frac{1}{2}}\\~{A}\\~{D}^{-\\frac{1}{2}}H^{(l)} W^{(l)})$ (1)\nwhere $H^{(l)}$ represents node features at layer l, $\\~{A} = A + I$ is the self-looping\nadjacency matrix, $\\~{D}$ is the degree of the matrix of $\\~{A}$, $W^{(l)}$ is the weight matrix\nof layer 1, and $\\sigma$ is the activation function."}, {"title": "Markov Process Aggregation:", "content": "We begin by applying a Markov pro-\ncess to aggregate information from the graph. Given a graph $G = (V, E)$ with\nnodes V and edges E, the Markov process iteratively updates the edge weights\nbased on the transition probabilities. Let A be the graph's adjacency matrix and\nD be the diagonal degree matrix. The transition matrix P is defined in equation\n2:\n$P = D^{-1}A$ (2)\nIn each iteration t, we update the edge weights $w_{ij}^{(t)}$ using the transition\nprobabilities as presented in equation 3:\n$w_{ij}^{(t+1)} = \\sum_{ij} \\frac{p_{ij}^{k}}{\\sum_{l} p_{il}^{k}}$ (3)\nwhere k is the inflation parameter controlling the influence of each edge."}, {"title": "Pretext Task:", "content": "For the SSL task, the prediction of the edge weights is\nemployed as a pretext task. Given the node feature matrix X and the aggre-\ngated edge weights W, we train the model to predict the edge weights using the\nfollowing steps:"}, {"title": "Node Feature Transformation:", "content": "$H^{(l+1)} = \\sigma (\\sum_{j \\in N(i)} \\frac{w_{ij}}{\\sqrt{d_{i}d_{j}}}H_{j}^{(l)} W^{(l)})$ (4)\nwhere $H^{(l)}$ is layer's feature matrix l, $W^{(l)}$ is the matrix of trainable weights,\nN(i) is the group of node's neighbors i, $d_{i}$ and $d_{j}$ represent the degrees of\nnodes i and j, and $\\sigma$ is a non-linear activation function."}, {"title": "Edge Weight Prediction:", "content": "For each edge (i, j), we predict the edge weight $w_{ij}$ using a linear transfor-\nmation of the concatenated node features:\n$\\hat{w}_{ij} = MLP([H_{i}||H_{j}])$ (5)\nwhere $[H_{i}||H_{j}]$ denotes the combination of the feature vectors of nodes i and\nj, and MLP is a multi-layer perceptron."}, {"title": "Loss Function:", "content": "We use MSE to measure the variation between the forecasted edge weights\n$\\hat{w}_{ij}$ and the true edge weights $w_{ij}$:\n$L_{pretext} = \\frac{1}{|E|} \\sum_{(i,j)\\in E} (w_{ij} - \\hat{w}_{ij})^2$ (6)"}, {"title": "Downstream Task", "content": "After training the model on the edge weight prediction task, we fine-tune it for\nthe downstream task, intrusion detection. The learned representations from the\npretext task serve as a strong initialization for the downstream task."}, {"title": "Intrusion Detection:", "content": "We apply the GCN for intrusion detection by pre-\ndicting the class labels $\\hat{y_{i}}$ for each node i:\n$\\hat{y_{i}} = softmax(H_{i}W^{(L)})$ (7)\nwhere $W^{(L)}$ is the trainable weight matrix of the final layer and softmax is\nthe softmax activation function."}, {"title": "Loss Function:", "content": "We employ the Negative Log-Likelihood (NLL) loss for the\nintrusion detection task:\n$L_{downstream} = - \\sum_{i \\in V_{train}} y_{i} log(\\hat{y_{i}})$ (8)\nwhere $y_{i}$ presents the true label of node i and $V_{train}$ is the set of training\nnodes."}, {"title": "Experiments", "content": "The following details the experimental methodology employed in this study. We\nbegin by describing the dataset used, outlines the experimental setup, presents\nthe results obtained, compares our findings with related work, and finally, pro-\nvides a comprehensive discussion."}, {"title": "Dataset", "content": "Recently, in 2022, the Edge-IIoTSet dataset was presented by Ferrag et al. [22] as\na cyber security dataset. It encompasses various devices, sensors, protocols, and\nconfigurations from cloud and edge environments. This dataset consists of 14 at-\ntack types linked to IoT connection protocols. These attack types are organized\nin five main attack groups including: Distributed Denial of Service (DDoS), In-\njection attacks, Man-in-the-Middle (MITM) attacks, Malware, and Information\nGathering, along with Normal traffic patterns, all characterized by 62 features.\nThe bar chart in Fig. 2 illustrates the distribution of attack types in the Edge-\nIIoTSet dataset across 15 different classes. This distribution highlights a notable\nimbalance in the dataset, with some classes being significantly underrepresented,\nparticularly for the MITM and Fingerprinting."}, {"title": "Experimental Settings", "content": "The experiments were performed using a machine featured with an Intel(R)\nCore(TM) i7-8565U CPU @ 1.80GHz (up to 1.99 GHz), 16 GB of RAM, run-\nning Windows 11, and supported by an NVIDIA GeForce MX graphics card."}, {"title": "Experimental Results", "content": "Using the EdgeIIoTSet dataset, the suggested approach attains an accuracy of\n98.68%. The bar chart in Fig. 3 shows the precision, recall, and F1-score metrics\nfor the 15 classes included in the dataset. Each bar represents a different attack\nclass in addition to the normal class.\nMost attack classes, including the different types of DDoS, the Normal class,\nand Ransomware, exhibit high precision, recall, and F1-scores, generally close to\n100%. This denotes the model's robust performance in identifying these attack\nclasses. The results remain commendable despite the MITM and Fingerprinting\nclasses having relatively fewer instances. This effectiveness can be attributed\nto the MarkovGCN and SSL deployment. Using the MarkovGCN improves the\nmodel's capacity to extract intricate dependences from the structure of the,\nwhile SSL enables the model to get robust representations from the data without\nrelying heavily on labeled instances. These methodologies collectively contribute\nto the model's strong performance through all classes, including those with fewer\ninstances, ensuring good precision, recall, and F1-scores.\nThe ROC curve depicted in Fig. 4 describes the performance of a multi-class\nclassification model across various dataset classes. Each curve corresponds to\na different class, with colors chosen for clarity and differentiation. The micro-\naverage curve (dashed line) summarizes overall performance across all classes and\nreaches a value of 99.95% of area under the curve (AUC) metric. A higher AUC\nindicates better discriminatory capability of the model across different attacks."}, {"title": "Comparison with Related Works", "content": "To assess the presented approach, we compare our proposed methodology with\nthe work of Ferrag et al. [22], who suggest the dataset and employed a straightfor-\nward Deep Neural Network (DNN) following the supervised learning. As shown\nin Table 1, our method significantly surpasses this study in terms of performance,\nconfirming the effectiveness of our MarkovGNN model combined with SSL."}, {"title": "Discussion", "content": "Our results indicate that MarkovGCN effectively captures the structure of IoT\nnetworks, leading to improved intrusion detection. The use of a Markov GNN in\na SSL approach offers several contributions and advantages:\nMarkovGCN can effectively model the transitions between nodes. In a SSL\ncontext, where the goal is to learn representations without labeled data,\ncapturing these structural transitions helps the model learn more accurate\nand meaningful graph representations.\nMarkovGCN can be integrated with self-supervised tasks that predict the\nnext step or transition in a sequence. For instance, we enhanced the model's\npower to extract intricate dependencies within the graph structure by pre-\ndicting the weight of edges based on the learned Markov transitions.\nIn SSL, leveraging the inherent structure and transitions in the data lead to\nmore data-efficient learning. MarkovGCN reduces the labeled data needed\nfor downstream tasks by efficiently using the sequential data.\nMarkov processes are more robust to noise in the data. Data can be noisy or\nincomplete in many real-world scenarios, especially in IoT. A MarkovGCN\nhelps in smoothing out this noise by focusing on the underlying transition\ndynamics rather than just the static node features."}, {"title": "Conclusion", "content": "IoT networks' growing complexity and scale demand advanced and effective in-\ntrusion detection systems. Traditional methods often fall short due to IoT envi-\nronments' dynamic and heterogeneous nature. In this paper, we present a new\napproach for IoT intrusion detection using SSL with MarkovGCN. Our method\nleverages the structural properties of IoT networks to enhance feature learning\nand improve detection accuracy. Using the EdgeIIoT-Set, the results reveal the\npotential of graph SSL for IoT security, opening the door for reliable and scal-\nable intrusion detection systems. In future work, we aim to further enhance our\nmodel by exploring advanced graph augmentation techniques and incorporating\nfederated learning to improve privacy and efficiency [23]. Additionally, we seek\nto extend our evaluation to more diverse IoT datasets and real-world scenarios,\ninvestigate the integration of our approach with other deep learning models to\nenhance the detection of new cyber-attacks, and build a microservices-based ar-\nchitecture to ensure interoperability, scalability, and resilience of the proposed\napproach [24,25] ."}]}