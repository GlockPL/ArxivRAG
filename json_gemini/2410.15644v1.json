{"title": "Procedural Content Generation in Games: A Survey with Insights on Emerging LLM Integration", "authors": ["Mahdi Farrokhi Maleki", "Richard Zhao"], "abstract": "Procedural Content Generation (PCG) is defined as the automatic creation of game content using algorithms. PCG has a long history in both the game industry and the academic world. It can increase player engagement and ease the work of game designers. While recent advances in deep learning approaches in PCG have enabled researchers and practitioners to create more sophisticated content, it is the arrival of Large Language Models (LLMs) that truly disrupted the trajectory of PCG advancement.\nThis survey explores the differences between various algorithms used for PCG, including search-based methods, machine learning-based methods, other frequently used methods (e.g., noise functions), and the newcomer, LLMs. We also provide a detailed discussion on combined methods. Furthermore, we compare these methods based on the type of content they generate and the publication dates of their respective papers. Finally, we identify gaps in the existing academic work and suggest possible directions for future research.", "sections": [{"title": "Introduction", "content": "The video game industry has been expanding rapidly and even surpassed the combined revenue of the music and movie industries in 2022 (Forbes Magazine 2023). This huge market means there is always a need for new content. However, the process of creating a game is very time-consuming and can take several years (Juego Studio 2023). Procedural Content Generation (PCG) is considered one of the solutions to this problem and can increase replay value, reduce production costs, and minimize effort (Amato 2017). PCG for games has existed since the 1980s, and it was mainly used in roguelike games such as Beneath Apple Manor (1978) and the genre's namesake, Rogue (A.I.Design 1980).\nPCG can be used to create a variety of content, but it is commonly used to create art assets (Kang et al. 2020; Mittermueller, Ye, and Hlavacs 2022), maps and levels (Kreitzer, Ashlock, and Pereira 2019; Kumaran, Mott, and Lester 2019), game mechanics (Machado et al. 2019), and music for games (Makhmutov 2019). The algorithms used can greatly vary depending on the content they are supposed to generate, but we can generally categorize them under"}, {"title": "Related Works", "content": "There are a handful of surveys on PCG for games with different focuses and aims that have been published before our work. Some of them discuss the technical details of PCG algorithms (Zhang, Zhang, and Huang 2022), while others focus on content created by PCG (Hendrikx et al. 2013; De Carli et al. 2011). Some papers focus on specific types of PCG; for example, machine learning in PCG, while other works (Summerville et al. 2018) mainly focus on DL algorithms in PCG. Liu et al. (2021) specifically examines puzzle generation using PCG. Two textbooks, one for PCG (Shaker, Togelius, and Nelson 2016) and one for Game AI (Yannakakis and Togelius 2018), cover search-based methods, solver-based methods, constructive generation methods (such as cellular automata and grammar-based methods), fractals, noise, and ad-hoc methods for generating diverse game content.\nAs of the writing of this paper, the most recent survey on PCG was published in 2022 (Zhang, Zhang, and Huang 2022). This paper includes different categories of PCG; however, it does not discuss generated content in detail nor mention gaps in the field or possible future directions. Based on this information, it is clear that there is a lack of a comprehensive review of PCG for games in recent years. Since the publication of Liu et al. (2021), PCG has grown quickly, and a significant number of papers and articles, especially those discussing DL and LLMs, have been published. New research directions and possibilities have emerged in ways that significantly changed the research field. A review of the"}, {"title": "Review Structure", "content": "The structure of the paper is as follows:\nFirst, we give an overview of the different types of content that can be generated using PCG. Then, we go through each category and explain the most commonly used methods published in academic articles. While some cutting-edge deep learning methods are applied on their own, others are applied in combination with more traditional methods, or in an interactive setting (Liu et al. 2021). Because of this, we added another category called combined methods. The reason behind this choice is that we saw a new trend in combining different algorithms (especially GANs, RL, and LLMs), and we believe that this new category could shape the future of PCG for games. Following this, using the data we gathered by analyzing recently published papers, we discuss the research trends, areas of focus in PCG, gaps in academic research, and possible solutions. We end the paper with an outlook on possible future directions and a conclusion.\nFor reviewing the mentioned articles, we had several criteria for inclusion and exclusion, which we explain below:\n1.  To ensure a deeper focus on recently published papers, we selected related papers on PCG for games published in one of five different well-known conference series: the Artificial Intelligence and Interactive Digital Entertainment (AIIDE) conference series, the International Conference on the Foundations of Digital Games (FDG) series, the Advances in Computer Games (ACG) conference series, the Computer-Human Interaction in Play (CHI-PLAY) conference series, and the IEEE Conference on Games (CoG) series, during the most recent five years (2019-2023). Based on these criteria, we obtained 207 articles aggregated in Figure 1. The distribution of selected papers is as follows: FDG: 40%, CoG: 33%, AIIDE: 24%, CHI PLAY: 2%, ACG: 1%.\nFor works before this period, we only discuss influential or interesting papers with a high citation count in the mentioned survey. For the latter, we used Google Scholar for academic papers and Google for grey literature. The phrase used in Google Scholar to find these articles was ('Procedural Content Generation' OR PCG) AND (game OR games), and the phrase used in Google was 'Procedural Content Generation for games'.\n2.  We only included papers focusing on generating content, so articles similar to Osborn et al. (2019), which is about evaluating the generated content and not generating it, are not part of this survey.\n3.  We excluded research that focused solely on the behaviors of non-player characters (NPCs). While some behavior generation techniques may overlap with PCG, we feel that NPC behaviors are a separate topic that deserves its own analysis.\n4.  While we focused on papers that talked about content generation in video games, we also mentioned articles that used PCG in tabletop games and board games.\n5.  It is important to note that content generation has uses outside of designing and developing games for humans to experience. In addition to creating content in games meant for humans to play, PCG is also being utilized in scientific research to create game-like benchmarks and playgrounds for reinforcement learning and other forms of AI (Liu et al. 2021). PCG is also being used in other formats, such as movies (Massive software 2024) and art (Aminian, Parsa 2023). In this paper, we only focus on game content generation."}, {"title": "Novelty of the Work", "content": "The differences between our work and previous surveys are that (i) we conduct a comprehensive review of both PCG methods and targeted content, (ii) at the time of writing, we are the first review paper to include LLMs as part of the methods used in PCG, and describe why LLMs are unique from all previous approaches, (iii) we add a section for combined methods and discuss why this category is important, and (iv) by analyzing papers published in the most recent 5 years in different conferences, we create a timeline for the methods used and find the current trend in academic research."}, {"title": "Content Types", "content": "Almost everything, from sounds to the game narrative, can be generated nowadays, but the generated content for games can vary a lot depending on the algorithms used. For example, LLMs are mostly used to create game narratives (Huang and Sun 2023), and GANs are considered a better solution to generate images (Kang et al. 2020) and 2D levels (Abraham and Stephenson 2023).\nThere are several ways that we can categorize generated content. For example, it can be divided into online and offline generation. Online generation means that the content generation is performed during the runtime of the game, while offline generation means it is created during game development. Additionally, content can be categorized as necessary or optional (Togelius et al. 2011). For this survey, we use categories similar to the ones presented by Hendrikx et al. (2013) with some modifications. We divide content created for games into five different categories, each consisting of multiple items.\n1.  Game bits: This category consists of the smallest pieces (units) used in games. Any type of generated texture, sound, vegetation, structures and buildings, and object properties (e.g. can it interact with basic physics?) goes into this list. We also included art and images (Coutinho and Chaimowicz 2022) created by PCG algorithms in this category.\n2.  Game Space: Game space is the physical environment that the game takes place and is created from game bits. PCG algorithms are commonly used to generate maps and roads for games. Researchers have even tried to create entire game worlds with them (Prins et al. 2023).\n3.  Game Scenarios: Game scenarios are parts of the game that are tied to the narrative. This includes generated conversations, stories, and quests. We include puzzles and"}, {"title": "PCG Algorithms", "content": "Due to the different types and roles of content in games, diverse PCG methods have been adapted for procedural content generation. In this section, we present different algorithms that exist and can be used to generate items. We categorized them into five main categories: Search-based, Machine Learning-based, Other, LLMs, and Combined Methods. The category called Combined Methods includes papers that use several methods in their study, either in parallel or in one integrated system.\nIt is worth mentioning that there were a few methods that we could not place under specific subgroups, so we decided to mention them at the start of each category."}, {"title": "Search-Based Methods", "content": "The term 'search-based PCG' was coined by Togelius in his paper on the taxonomy of PCG (Togelius et al. 2010). A search-based PCG refers to a special case of generate-and-test PCG. A generate-and-test PCG does not directly dish out content it generates but instead tests the content first using a test function. Depending on the test result, the PCG can either accept the content or reject it and create new content. A search-based PCG is a test-and-generate PCG that satisfies two criteria (Prasetya and Maulidevi 2016). First, instead of simply accepting or rejecting content, the test function of a search-based PCG assigns a real value that measures the acceptability of the content. This value is often called fitness, and the function that produces it is called a fitness function. Second, in the creation of new, better content, a search-based PCG uses the previously rejected content as the creation base, and the new content is a slightly modified version of the old content. Search-based methods have been used to generate a variety of content, such as puzzles, race tracks, levels, terrains, and maps (Togelius et al. 2010; Prasetya and Maulidevi 2016).\nIn many cases, search-based algorithms use some form of evolutionary algorithm as the main search mechanism, as evolutionary computation has so far been the method of choice among search-based PCG practitioners. However, search-based PCG does not need to be married to evolutionary computation; other heuristic and stochastic search mechanisms are viable as well (Togelius et al. 2010). In this section, we discuss evolutionary algorithms, Wavefunction Collapse (WFC), Monte Carlo Tree Search (MCTS), simulated annealing, and particle swarm optimization.\n1. Evolutionary Algorithm: In an evolutionary algorithm, a population of candidate content instances is held in memory. Each generation, these candidates are evaluated by the evaluation function and ranked. The worst candidates are discarded and replaced with copies of the good candidates, except that the copies have been randomly modified (i.e., mutated) and/or recombined (Togelius et al. 2010). One of the most famous examples of evolutionary algorithms is genetic algorithms. Genetic algorithms are used in many instances (Baek et al. 2022; Mitsis et al. 2020; Drageset et al. 2019) to create playable levels and game bits. This algorithm can also be used to create more traditional types of games. For example, Botea and Bulitko (2023) use this algorithm to create Romanian crossword puzzles. Other evolutionary algorithms are also used to create soundtracks for games (Makhmutov 2019), maps and game bits (Makhmutov 2019), roads (Song and Whitehead 2019), and levels for board games (Gerhold and Tijben 2023).\n2. Planning Algorithms: Planning, in general, is a problem-solving technique consisting of a planning problem (i.e., initial state and goal specification) and a planning domain (i.e., objects, predicates, and action operators). Given the input of a planning problem, a sound planner produces a solution or a plan, which is a sequence of actions that achieve all the specified goal conditions without any causal threats (Song et al. 2020). In recent years, planning-based algorithms have often been used to generate stories in games because planning-based narrative generation is effective at producing stories with a logically sound flow of events (Siler 2022).\n3. Wave Function Collapse (WFC): WFC is a texture"}, {"title": "Machine Learning-Based Methods", "content": "Machine learning methods have gained a lot of popularity during the last decade (Summerville et al. 2018). Research on neural networks under the name deep learning has precipitated a massive increase in the capabilities and application of methods for learning models from big data (Schmidhuber 2015; Goodfellow, Bengio, and Courville 2016). They have provided us with new ways for generating audio, images, 3D objects, network layouts, and other content types (Goodfellow et al. 2014) across a range of domains, including games. For example, long short-term memory (LSTMs) are mostly used for time-dependent sequential data (e.g., action sequences, agent paths, charts for rhythm) and language models (Risi and Togelius 2020), while generative adversarial networks (GANs) have been applied to generate artifacts, such as images, music, and speech (Goodfellow et al. 2014). Outside of content generation, machine learning algorithms have been widely used in testing generated maps using other algorithms (Liu et al. 2021). Many other machine learning methods can also be utilized in a generative role, including n-grams, Markov models, autoencoders, and others (Boulanger-Lewandowski, Bengio, and Vincent 2012; Fine, Singer, and Tishby 1998; Gregor et al. 2015; Summerville et al. 2018).\nIn this section, we talk about different machine learning methods such as Autoencoders (including deep varia-"}, {"title": "Large Language Models", "content": "In the most recent year, there has been an explosion of research on the applications of LLMs, and PCG is no exception. We found 17 papers during these years using LLMs as part of their pipeline (with 3 other papers using combined methods that integrated LLMs). Referring back to Figure 1, we see that in 2023, the use of LLMs drastically increased compared to previous years (13 papers and 2 other papers with combined methods integrating LLMs). This coincides with the release of ChatGPT and its underlying model, GPT-3. These models are used to create narratives, NPC chatter, and even mechanics. A famous example is Dungeon 2, a text adventure game (Schrum, Volz, and Risi 2020). In this game, players can type in any command and the system can respond to it reasonably well, creating the first never-ending text adventure. The system is built on OpenAI's GPT-2 language model (Volz et al. 2018), which was further fine-tuned on a number of text adventure stories. 1001 Nights is also another project that uses GPT as one of the main mechanics of its gameplay (Sun et al. 2023). Language models are also used in role-playing board games as an assistant for the game masters (Zhu et al. 2023). LLMs can also be used to create game levels. SCENECRAFT (Kumaran et al. 2023b) is a framework that transforms high-level natural language instructions from authors into dynamic game scenes that include NPC interactions, dialogue, emotions, and gestures. The research by Todd et al. (2023), Nasir and Togelius (2023), and Sudhakaran et al. (2024) also focus on using LLMs to create levels for games. For example, the latter uses MarioGPT, a fine-tuned GPT-2 model designed to generate Super Mario Bros levels based on textual prompts.\nWhile current LLMs use transformers as their underlying model, with the publication of GPT-3, a new form of service has emerged. \"Model as a service\u201d (MaaS) involves deploying a model on a cloud-based infrastructure and offering its functionalities through APIs or web interfaces. These commercialized models, such as GPT-3, are often no longer open for researchers to explore and study their underlying architecture, creating a black box that is only known to select few. Our review shows that research published on using GPT-3 and its successors is no longer about training a new model, but about best ways to use an existing pre-trained model that is restricted by a private entity in many ways. While open source LLMs do exist, in our review, the vast majority of LLM usage was still with GPT-based LLMs."}, {"title": "Combined Methods", "content": "So far, we have discussed four different methods used for generating content in games. However, these methods can be combined. Many researchers have worked on using evolutionary algorithms with machine learning methods. One of the most popular examples of combining methods is the Latent Variable approach (Bontrager et al. 2018), which combines unsupervised learning in the form of a GAN or VAE with evolutionary computation to search for content in the learned space of a GAN/VAE. In the context of games, this approach has been employed to generate 2D game levels like Super Mario Bros and Zelda levels (Schrum, Volz, and Risi 2020; Volz et al. 2018). RL is also used in combination with many different algorithms. For instance, Kumaran et al. (2023a) creates game levels through a natural language interface and evaluates the levels using RL. Instead of relying solely on one method, combining different methods can be very effective in generating new content. RL models and search-based algorithms are effective tools to repair generated content (especially levels and structures) created by other algorithms (like GANs and LSTMs). More recently, combined methods integrating LLMs have also begun to emerge (Kumaran et al. 2023a; Volden, Grbic, and Burelli 2023). While PCG research tends to focus on using existing methods in innovative ways, these combined methods form a rather emerging approach in solving complex problems."}, {"title": "Analysis", "content": "In this section, we discuss the information obtained from reviewing selected papers. First, we talk about the trends in the papers. Then, we discuss the gaps in current works, and finally, we outline future research directions based on current trends."}, {"title": "Trends", "content": "Figure 2 shows an overview of 207 published papers using different methods for the period of 2019-2023, broken down by content type. Each row represents one type of content, such as the aforementioned Game Space. The dots represent papers in that particular year - the larger the dot, the more papers we found. The dots are color-coded by its algorithm type. We also gathered information about the 629 authors who worked on these papers which is shown in Figure 3 based on the number of co-authored papers.\nBy looking at Figure 2 which is extracted using collected articles, we notice that level generation is by far the most researched topic in PCG. There are 102 papers, almost half of the selected papers, focusing on level generation. Except for a few works such as Baek et al. (2022), most of these papers focus on 2D level generation. This seems reasonable as creating a 3D level is a far more complex task than creating a 2D level. We also found that 2D platformers are a popular genre in PCG, with Super Mario Bros. being the most used environment, featured in 18 papers.\nFrom Figure 2, it is evident that machine learning-based algorithms have gained significant interest, and the trend of using them in PCG continues to grow. Liapis et al. (2020) mentions the consistent inclusion of vision papers and the increased use of machine learning in games, either on its own or in conjunction with PCG. Our data shows that the trend has not slowed down in recent years. The emergence of ChatGPT (OpenAI 2024) and the explosion of LLMs like BERT and GPT in recent years have also affected content generation in games. Many of the papers using LLMs were published in the last year. It is interesting to note that we found only five articles published before 2023 that used any type of LLMs, and all five used GPT-2 (which is an open-source model), with one also using BERT (another open-source model) (Riddle 2022; van Stegeren and My\u015bliwiec 2021; Ammanabrolu et al. 2020; Pichlmair and Putney 2020; Freiknecht and Effelsberg 2020). 2023 was the year when many LLM-based research emerged, but also when people moved on from open-source models to closed-source, mostly GPT-based services. Among the works, two caught our attention. These are combined methods with LLMs. Kumaran et al. (2023a) combined GPT-3.5 with the use of deep reinforcement learning for level generation and selection, while Volden et al. (2023) put together LLMs with a genetic algorithm to generate rules for difficulty adaptation in a serious game. We believe that these combined methods will show versatility in many situations, and this is an open research field with a lot of potential."}, {"title": "Gaps in Research", "content": "As mentioned, most of the research in level generation focuses on 2D level generation. 3D games are very popular in the games industry, and level generation for 3D games is a topic that needs further research and exploration.\nBased on our findings, despite having innovative ideas in the selected papers, many do not follow up on those ideas, with some rare exceptions such as 1001 Nights (Sun et al. 2023). This gap between academic work and the games industry requires more discussion. One possible solution could"}, {"title": "Possible Research Directions", "content": "Using the data we gathered, we believe that combined algorithms, especially deep learning algorithms and LLMs, will be a popular topic in the future. Instead of trying to generate whole items or levels, researchers could focus on repairing incorrect or improper content, reducing the effort needed to create a finished product.\nLLMs are still fresh, and there is much unknown potential in them that can be used in PCG. They can serve as AI assistants for game designers, story and quest generators, and even level generators that produce levels as a sequence of words or sentences. Therefore, more research on the applications of LLMs could prove beneficial, especially open-source alternatives to closed-source commercial MaaS."}, {"title": "Conclusion", "content": "In this survey, we discussed different categories of PCG algorithms and the content that can be generated for games. We categorized PCG algorithms into five sections: search-based methods, machine learning-based methods, other methods, LLMs (MaaS), and combined methods. We also selected PCG related papers published between 2019-2023 and analyzed them to identify trends, gaps in current work, and possible future research directions.\nThe increasing use of LLMs for generative tasks is a recent development that was unheard of until about five years ago. Combining deep learning methods, such as GANs and RL, with other algorithms in content generation is another interesting trend that has been gaining more attraction recently. Both of these trends are built on advancements in deep learning, which have made machine learning methods effective for completely new classes of problems.\nAlthough a variety of generated content types (e.g., levels, sound, maps, textures) have been investigated, each sub-category can be further explored to gain more insights. In-depth research on the best-suited algorithms for generating each type of content would also be beneficial. Additionally, a study dedicated to evaluation algorithms used to test generated content could be a valuable addition to this field."}]}