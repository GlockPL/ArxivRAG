{"title": "Landing Trajectory Prediction for UAS Based on Generative Adversarial Network", "authors": ["Jun Xiang", "Drake Essick", "Luiz Gonzalez Bautista", "Junfei Xie", "Jun Chen"], "abstract": "Models for trajectory prediction are an essential component of many advanced air mobility studies. These models help aircraft detect conflict and plan avoidance maneuvers, which is especially important in Unmanned Aircraft systems (UAS) landing management due to the congested airspace near vertiports. In this paper, we propose a landing trajectory prediction model for UAS based on Generative Adversarial Network (GAN). The GAN is a prestigious neural network that has been developed for many years. In previous research, GAN has achieved many state-of-the-art results in many generation tasks. The GAN consists of one neural network generator and a neural network discriminator. Because of the learning capacity of the neural networks, the generator is capable to understand the features of the sample trajectory. The generator takes the previous trajectory as input and outputs some random status of a flight. According to the results of the experiences, the proposed model can output more accurate predictions than the baseline method(GMR) in various datasets. To evaluate the proposed model, we also create a real UAV landing dataset that includes more than 2600 trajectories of drone control manually by real pilots.", "sections": [{"title": "Introduction", "content": "Unmanned aerial vehicles (UAVs) are the future of aviation. FAA forecasts that there will be 1.81 million units of drone fleet by 2026 [1]. With so many UAVs flying in the airspace, tracking and predicting the motion of UAVs become important. The security service needs to predict misused drones in public areas including airports, mass events, or public demonstrations [2]. Meanwhile, in-network UAVs need to predict the trajectory of out-network UAVs to avoid them, which is especially important in UAV landing management due to the congested airspace near vertiports [3]. Conflict detection and resolution(CD&R) technology, plays an important role in the air traffic system [4,5] and highly relies on accurate and timely predictions of out-network UAV trajectories [6]. There are many methods have been proposed to predict the trajectory of UAVs. However, existing methods for UAV trajectory prediction are ordinarily very slow and unable to be applied online [7]. In addition to fast prediction, higher accuracy of prediction results is required. Many planning methods are bothered by the uncertainty of the future prediction.\nAircraft trajectory prediction is always a popular research topic and there are many methods proposed. The Recurrent Neural network is proposed to predict aircraft trajectory with weather features [8]. The Hidden Markov Model (HMM) is recently applied to predict trajectories considering environmental uncertainties [9]. The deep generative convolutional recurrent neural network (RNN) approach is applied for 4D trajectory prediction [10]. A hybrid 3-dimensional UAV modeling framework, which integrates the physics-based and data-based models, can predict the motion of UAVs using only a small amount of real fight data [11]. Some aircraft prediction methods focus on modeling aircraft trajectories around the terminal. One traditional way is to predict the aircraft near the terminal by the Physical equation of motion [12]. The bayesian network can learn statistical representations of dynamic variables of aircraft and predict the motion [13]. Probabilistic generative model [14] predicts the aircraft trajectory by learning from position measurements.\nThe neural network generator has been proven to predict many objects such as language, image, and trajectories of pedestrians. Transformer [15] is the state-of-the-art method to draw global dependencies between input and output. BERT [16], uses Transformer as one of the encoders and is able to understand and process natural language. GATs [17] achieved the state-of-the-art result across four established transductive and inductive graph benchmarks leveraging masked self-attentional layers. At the same time, the transformer has successfully been used with GANs. SAGAN [18] achieved pioneering image generation results by using a transformer layer in GANs. ViTGAN [19]achieves a comparable performance of image generation to state-of-the-art CNN-based GANs without using convolution or pooling."}, {"title": "Background", "content": "Long Short-Term Memory (LSTM) [28] is a novel recurrent network architecture in conjunction with an appropriate gradient-based learning algorithm. The LSTM can enforce constant error flow so it can accelerate learning store information over extended time intervals. LSTM consists of multiplicative gate units that can learn to open or close the access to the error flow. LSTM can be used as the encoder and the decoder in GANS.\nA Generative Adversarial Network consists of two neural networks, generator and discriminator, trained in opposition to each other [29]. The training procedure is similar to a two-player min-max game with the following objective function:\n$\\min _ { G } \\max _ { D } V ( D , G ) = E _ { x \\sim P _ { \\text { data } } ( x ) } [ \\log D ( x ) ] + E _ { z \\sim p _ { z } ( z ) } [ \\log 1 - D ( G ( z ) ) ]$\nIn this paper, G denotes the generator that inputs factors and generates trajectory. z denoted the input factors that decide how a flight should fly. Generator G takes the input factors and output trajectory G(z). D denotes discriminator and D(x) output the probability that x is a trajectory is desired.\nGupta proposed social-GAN [24] that can understand human motion behavior. The social-GAN is able to observe the motion trajectories of pedestrians and predict the trajectories of pedestrians. Social-GAN combines tools from sequence prediction and generative adversarial networks. The generator of the social-GAN is consists of an LSTM-based encoder, a pooling module, and an LSTM-based decoder. The LSTM encoder encodes the motion trajectories to hidden items h. Then the pooling module pool the hidden items h while combining desired information i and the hidden items h together. Finally, the decoder decodes the hidden items and outputs the predicted trajectory."}, {"title": "Gaussian Mixture Regression predictor", "content": "In this paper, Gaussian Mixture Regression(GMR) predictor is the baseline method. GMR predictor was proposed in [30] and the GMR predictor we use in this paper is proposed in [31]. The GMR predictor is one of the most popular predictors. The training process of GMR is shown as equation (2).\n$p ( x , y ) = \\sum _ { k = 1 } ^ { K } \\pi _ { k } N _ { k } ( x , y | \\mu _ { x y } , \\Sigma _ { x y } )$\nwhere $N _ { k } ( x , y | \\mu _ { x y } , \\Sigma _ { x y } )$ are Gaussian distributions with mean $\\mu _ { x y }$, and covariance $\\Sigma _ { x y }$, Kis the number of Gaussians, and $\\pi _ { k } \\in [ 0 , 1 ]$ are priors that sum up to one.\nAfter the GMR is trained, GMR predicts distributions of variables y by computing the conditional distribution p(y | x). The conditional distribution of each individual Gaussian\n$N ( x , y | \\mu _ { x y } , \\Sigma _ { x y } ) \\mu _ { x y } = \\left( \\begin{array} { l } { \\mu _ { x } } \\\\ { \\mu _ { y } } \\end{array} \\right) \\Sigma _ { x y } = \\left( \\begin{array} { l l } { \\Sigma _ { x x } } & { \\Sigma _ { x y } } \\\\ { \\Sigma _ { y x } } & { \\Sigma _ { y y } } \\end{array} \\right)$"}, {"title": "Method", "content": "Mathematically, Let T denotes the trajectory sequence of consists of multiple flight statuses. Let $x _ { t + 1 } \\in R ^ { n }$ the flight status at t + 1, will be determined by the previous status, dynamic model, and control input according to ordinary differential equation (ODE):\n$T _ { t _ { 0 } , t _ { 2 } } = [ x _ { t _ { 0 } } , x _ { t _ { 0 } + 1 } , ... x _ { t _ { 2 } - 1 } , x _ { t _ { 2 } } ]$\n$x _ { t + 1 } = f ( x _ { t } , a _ { t } ( E ) ) , a _ { t } \\in A$\nwhere f denotes flight the dynamic model. $a _ { t }$, denotes the control inputs which how the pilot reacts the environment E at time t. Let a(E) called action function in these paper. A denotes the set of all the possible control inputs. However, in real world, flight dynamic model has noises and high computational cost. On the other hands, environment factors and previous status are only variables required to derive a trajectory. In this paper, the only flight status we focus on is position.\nIn order to predict the future trajectory without flight dynamic model and action function, the generator model(G) was proposed:\n$T _ { t _ { 1 } , t _ { 2 } } = G ( T _ { t _ { 0 } , t _ { 1 } } )$\nwhere the Generator takes the previous trajectory sequence as input and outputs a predicted trajectory sequence. In this paper, all the previous trajectory sequence contains 10 points, and all the predicted trajectory sequence contains 10 points as well."}, {"title": "Data Collection", "content": "In this paper, we prepare three different types of datasets to train the proposed model and test the learning capacity."}, {"title": "Vertical Landing Data", "content": "We will start with a sample dataset as shown in Figure 1 to test how the generator works. The dataset includes the trajectories starting from four different directions to the destination (0,0,0). The average initial position is (-200, 200, 75) for direction1, (200, -200, 75) for direction2, (-200, -200, 75) for direction3, and (200, 200, 75) for direction4. The variance for the x, and y positions is 50, and for the z position is 3.5. The drone first flies horizontally to the points right above the destination, then land vertically."}, {"title": "Linear Landing Data", "content": "The second dataset (as shown in Figure 2) we used to evaluate this method is simulated linear landing data. Same as vertical data, the drone flies from four different initial positions and land at position (0,0,0). The average initial position is (-400, 400, 140) for direction1, (400, -400, 140) for direction2, (-400, -400, 140) for direction3, and (400, 400, 140) for direction4. The variance for the x, and y positions is 100, and for the z position is 7.5. In contrast to vertical landing, the drone flight flies straight forward to the destination."}, {"title": "LSTM-Pooling based Generator", "content": "The trajectory can be treated as a kind of data sequence, therefore, LSTM, which is one of the best neural network structures to understand data sequences, can be used to understand and generate the trajectory. Social-GANs [24] was proposed to predict pedestrians' future trajectory based on their past trajectory and social interaction. Similar to social-GANs, We show one of the trajectories that are desired by the LSTM and tell LSTM some factors, then the LSTM generates trajectories based on the trajectory we showed to it.\nThe sequence data are needed to be embedded into a fixed-length vector before sending it into the LSTM cell. The LSTM cell will encode the embedded vector and previous hidden item into a current hidden item.\n$e _ { t } = \\sigma ( x _ { t } )$\n$h _ { t } ^ { e } = L S T M _ { \\text { encoder } } ( h _ { t - 1 } ^ { e } , e _ { t } ; W _ { \\text { encoder } } )$\nwhere $e _ { t }$ denotes the embedding vector. $x _ { t }$ is one of the flight statuses in the trajectory sequence. $\\sigma$ is the preprocessing function. $h _ { t }$ is the hidden time for time t. The $W _ { L S T M }$ is the LSTM weight. The pooling will input the environment factors and combine them into hidden items come from the LSTM encoder layer:\n$p = P ( E , z )$\n$e _ { t } = \\gamma ( x _ { t - 1 } ; W _ { e m } )$\nThe the LSTM decoder layer will take the combined hidden item, generate the trajectory.\n$h _ { t } ^ { d l } = L S T M _ { \\text { decoder } } ( \\gamma ( h _ { t } ^ { d } , P ) , e _ { t } ; W _ { \\text { decoder } } )$\n$x _ { t } = \\gamma ( h _ { t } ^ { d } )$"}, {"title": "Discriminator", "content": "Instead of a traditional mathematical model, we use a neural network as a discriminator to evaluate the generated trajectory. Based on the author's knowledge, there is no traditional mathematical model that is completely able to identify if a trajectory is a good trajectory. The discriminator inputs the trajectory T and gives a score s. If the given data is real, the discriminator is expected to give a high score. The score s is the main component of the loss function of the generator. In this paper, the discriminator is an LSTM network.\n$s = L S T M ( T )$"}, {"title": "Result", "content": "The proposed GANs will be tested in three prepared datasets introduced in section B. For each dataset, there will be 3000(2430 for real) trajectories for training and 100 trajectories for evaluation. Figure 6,7 shows examples of the GMR and GAN predicting the landing trajectory. The accuracy of the prediction will be evaluated by the Average Displacement Error(ade) between the predicted trajectory and the real trajectory. Then, we will test if the discriminator can distinguish good and bad predictions."}, {"title": "Average Displacement Error performance", "content": "The equation to calculate ade for one point is shown as equation 18\n$ade = \\text { mean } ( \\sqrt { ( d x ) ^ { 2 } + ( d y ) ^ { 2 } + ( d z ) ^ { 2 } } )$\nwhere dx is the displacement between the predicted point and the ground truth point in the x-axis, dy is the displacement in the y-axis and dz is the displacement in the z-axis. The trained GAN and GMR observe 100 evaluation trajectories and predict possible trajectories. The ade is the mean of 100 displacement errors between prediction and ground truth. The ade result for each point and the dataset is shown as tabel 1. The results show that GAN has a very good performance to predict the first four points, while the predicts get worse as the trajectory gets longer. For the vertical and linear datasets, GAN only outperforms GMR for the first four points. However, for the real dataset, GAN outperforms GMR for all the points. Because the vertical and linear dataset is simulated and has a smaller variance, it is easier for GMR, which is a Gaussian-based method, to predict. In contrast, in the real dataset, real pilots control the drone more randomly and the control logic is more subtle, GAN is able to mine the hidden rules and gets better results. Figure 8 shows a comparison of the prediction displacement in each axis for the real dataset between GAN and GMR. The displacement of GMR predictions obviously larger than GAN in all axes. In conclusion, GAN has much better accuracy in predicting the trajectories from the real dataset, while performing decently in predicting the trajectories from the simulated dataset. However, the longer the predicting is, the worse the GAN will perform."}, {"title": "Discriminator", "content": "The discriminator of the GANs can evaluate a trajectory and give a score. We show the discriminator 100 true trajectories and 100 fake trajectories from each dataset and let the discriminator generates the scores for those trajectories. The results are shown as table 2. According to the result, the discriminator gives higher scores to the true trajectories. It proves that the discriminator can distinguish true and fake trajectories."}, {"title": "Conclusion", "content": "In this paper, the LSTM-GAN-based method can accurately predict the motion of UAVs during the landing. The prediction error is lower than the baseline method. Meanwhile, the discriminator can give a high score to ground truth trajectories while giving a low score to fake trajectories. It proves that the trained discriminator can be used to evaluate the prediction. A dataset that includes a large number of trajectories of UAVs controlled by real pilots is also created. However, according to the results, the accuracy of prediction results becomes lower as the prediction length is longer."}]}