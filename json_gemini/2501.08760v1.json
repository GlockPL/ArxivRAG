{"title": "Leveraging LLM Agents for Translating Network Configurations", "authors": ["Yunze Wei", "Xiaohui Xie", "Yiwei Zuo", "Tianshuo Hu", "Xinyi Chen", "Kaiwen Chi", "Yong Cui"], "abstract": "Configuration translation is a critical and frequent task in network operations. When a network device is damaged or outdated, administrators need to replace it to maintain service continuity. The replacement devices may originate from different vendors, necessitating configuration translation to ensure seamless network operation. However, translating configurations manually is a labor-intensive and error-prone process. In this paper, we propose an intent-based framework for translating network configuration with Large Language Model (LLM) Agents. The core of our approach is an Intent-based Retrieval Augmented Generation (IRAG) module that systematically splits a configuration file into fragments, extracts intents, and generates accurate translations. We also design a two-stage verification method to validate the syntax and semantics correctness of the translated configurations. We implement and evaluate the proposed method on real-world network configurations. Experimental results show that our method achieves 97.74% syntax correctness, outperforming state-of-the-art methods in translation accuracy.", "sections": [{"title": "Introduction", "content": "Configuration translation has become increasingly critical in modern network operations and maintenance. With the rapid evolution of network technologies, organizations often face the challenge of replacing obsolete or damaged devices [10]. Cross-vendor device replacement, primarily motivated by pricing concerns, requires configuration translation due to discrepancies in Command Line Interface (CLI) configurations.\nCLI configuration translation is challenging. Network experts must understand the functionality and intent of the complex source device configuration [3] and translate it into the corresponding configuration for the target device. However, the vendor-dependent nature of CLI syntax means that configurations vary dramatically across different device systems, requiring deep expertise in multiple vendor architectures. In addition, core router configuration can consist of tens of thousands of lines [6]. Together, these factors make manual configuration translation not only extremely time-consuming but also highly susceptible to errors that could potentially disrupt network operations.\nWhile both industry and academia are actively exploring automated methods for configuration translation, existing research remains inadequate for achieving practical automated translation. NAssim [6] constructs device configuration models and uses NetBERT to recommend target configurations, but it is not an end-to-end approach and requires manual intervention. ConfigTrans [20] uses a heuristic method and LLM to translate different types of commands but lacks understanding of the configuration logic and has a limited ability to generalize.\nThe rapid development of LLM has brought novel opportunities for automated configuration translation. Recent advances in LLM's reasoning capabilities [13] and successful applications of LLM-based multi-agent systems [11,26] have demonstrated their potential for complex task automation. Building on these developments, we propose an intent-based network configuration translation framework leveraging LLM agents. While LLMs offer promising capabilities, applying them to configuration translation presents three key challenges: the instability of intent extraction, the difficulty of manual retrieval, and the inaccuracy of translation. To address these challenges, we develop an Intent-based Retrieval Augmented Generation (IRAG) module with three components: (a) a well-designed prompt system for configuration splitting and intent extraction, (b) an enhanced manual retrieval mechanism combining filtering and voting strategies, and (c) an incremental translation process that preserves contextual dependencies. We also design a two-stage verification module to improve translation accuracy. Experimental results demonstrate the effectiveness of our approach, which achieves 97.74% syntax correctness and superior translation accuracy compared to state-of-the-art methods.\nThe main contributions of this paper are as follows:\n1. We analyze the root causes of difficulties in translating network configuration across vendors.\n2. We propose an intent-based configuration translation framework with LLM agents, implement the system and evaluate on real datasets.\n3. We design the IRAG module to recall target manuals and generate translations based on intent.\n4. We design a two-stage verification to improve the syntax and semantic accuracy of configuration translation."}, {"title": "Background and Motivation", "content": ""}, {"title": "Network Device Configuration", "content": "Network device configuration is an essential part of network operation, covering the entire lifecycle of network devices, including setup, maintenance, and troubleshooting.\nThere are several ways to configure network devices. The most traditional and widely used method is the Command Line Interface (CLI), which requires administrators to manually input commands or import configuration files. The NET-CONF [9] protocol and the YANG [5, 25] language are designed for future network device configuration and widely used in SDN for data center or campus network operation. Although new protocols provide more convenient possibilities for network configuration, the CLI is still indispensable in scenarios that require device initialization.\nA CLI command of network device usually consists of keywords, parameters, and the view in which it takes effect. A single CLI command line usually consists of keywords, parameters, and many mandatory/optional items. The following is a command template for the Huawei NE40E Router [16]. In this template, ip address is the keyword, <ip-address>\nis the mandatory parameter. { <mask> | <mask-length> }\nmeans that one of the parameter is required, and [ <sub> ]\nmeans that the parameter is optional.\nip address <ip-address>\n{ <mask> | <mask-length> } ( <sub> ]\nCLI often has multiple views, each of which contains a cluster of specific commands. For example, the above command can be found in the interface view, Mtunnel view, and ACL address pool view, but the resulting behaviors are different."}, {"title": "Configuration Translation", "content": "Network device configuration translation is the process of converting source device configuration to target device configuration, ensuring consistent behaviour. Network administrators often replace network devices across vendors due to factors such as functionality updates, disaster recovery, and pricing concerns, necessitating configuration translation.\nHowever, the configuration syntax of different vendors is protected by patents [18], making direct mapping based on device configuration models impractical. The general process of translating configurations manually includes the following four steps: (1) Extract the configuration from the source device and understand the intent/function of the configuration; (2) Manually translate the configuration of the source device into the configuration of the target device by consulting configuration manuals; (3) Analyze the correctness of the translated configuration; (4) Apply the translated configuration to the target device and verify the correctness of the configuration. Configuration translation is not straightforward and requires a lot of expert experience. We summarize the difficulties in configuration translation as follows."}, {"title": "Opportunities and Challenges", "content": "This section introduces the opportunities of LLM agents in configuration translation and three new challenges.\nOpportunities of LLM. The development of LLM brings new opportunities for addressing network related problem [19]. Considering the significant advancements in the reasoning ability of LLMs [13], we aim to leverage LLM agents in place of human engineers for interpreting configuration intent and referencing target device manuals for automated configuration generation. In this process, we identified the following new challenges:\nChallenge #1: Instability of intent description. While LLMS demonstrate proficiency in extracting configuration commands' intent when provided with corresponding manual pages, the generated intent descriptions exhibit significant variation in their granularity and focus. LLMs oscillate between high-level architectural descriptions and detailed implementation specifics. Additionally, the linguistic style tends to align closely with the source device's manual terminology, which introduces complexity in subsequent target manual retrieval and configuration translation tasks.\nChallenge #2: Difficulty in retrieving relevant manuals. Retrieving appropriate target device configuration manuals following source intent extraction presents substantial difficulties. This complexity is two-fold: (1) the extensive volume of manual pages of the target device requires efficient filtering mechanisms to eliminate irrelevant documentation while maintaining semantic accuracy, and (2) the same command frequently appears across multiple views or contexts, introducing ambiguity in manual selection and requiring sophisticated disambiguation strategies.\nChallenge #3: Inaccuracy of generated configurations. The hallucinations manifested by LLMs in configuration translation tasks present critical challenges to system reliability. For example, LLMs may generate syntactically valid but semantically incorrect command parameters or combine incompatible configuration elements. A comprehensive feedback mechanism incorporating both syntactic validation and semantic verification is necessary to guide LLM in generating accurate and implementable configurations."}, {"title": "Design and Implementation", "content": ""}, {"title": "System Overview", "content": "The workflow of our system is shown in Figure 2. The system consists of three main components: the config parser, the Intent-based RAG (IRAG), and the verification module.\nWorkflow. The configuration to be translated is parsed by the parser, which first constructs a device command tree based on the source device's command manual and VDM. Then it matches the lines to the command tree, obtaining the view structure and corresponding manuals of each command. The parsed commands then enter the IRAG module (\u00a7 3.2). IRAG uses the LLM Agent to extract the intent, retrieve the corresponding target device manuals, and incrementally translate the command fragments into the target device's commands. The translated configuration is then verified (\u00a7 3.3). Syntax verification is performed during the incremental translation process, and semantic verification is performed after the entire configuration is translated.\nManuals. We use two types of manuals. Command Manuals contain syntax definitions and functional descriptions of all commands of the device, mainly used for constructing the configuration syntax tree. Configuration Manuals contain the configuration procedure required to implement a certain function, mainly used for configuration generation. Examples of the two types of manuals are shown in Appendix A.1."}, {"title": "IRAG", "content": "IRAG is the core module of our system. Inspired by existing works [2, 17], we use configurations intent to bridge the significant differences between the configuration models of devices from different vendors. We first split the configuration into fragments based on functionality and extract the intent of each fragment (\u00a7 3.2.1). Then we retrieve the corresponding configuration manuals of the target device based on the intent (\u00a7 3.2.2). Finally, we incrementally translate the fragments into the target device's configuration (\u00a7 3.2.3)."}, {"title": "Configuration Intent Extraction", "content": "We use LLM to analyze the parsed configuration with corresponding command manuals, split the configuration into fragments based on functionality, and extract the intent of each fragment. However, as described in Challenge #1 (\u00a72.3), LLM exhibits substantial stochastic variability during the extraction of intent. The level of detail and linguistic style of the extracted intent varies widely, making subsequent manual retrieval and translation difficult. To address this issue, we use the In-Context Learning (ICL) method [4, 8], providing templates and examples of intent extraction to guide LLM to extract formatted and unified intent. We also ask LLM to extract intents at different levels: a general description of the entire configuration fragment and a detailed description of each sub-module in the fragment. This helps to improve the recall rate of the subsequent manual retrieval step. The prompt template is shown in Appendix A.2."}, {"title": "Target Manual Retrieval", "content": "Accurately retrieving the target manual is crucial for the success of configuration translation. General LLMs lack precise knowledge of the network configuration domain, so external manual knowledge injection is needed to assist the translation process. To address Challenge #2 (\u00a72.3), we designed a LLM-based manual filtering method and a voting mechanism to enhance the embedding-based manual retrieval. The detailed workflow is shown in Figure 3.\nLLM-based Manual Filtering. The configuration manuals of network devices are massive. For example, Huawei's NE40E router configuration manual contains 7300+ pages [15], making it difficult to retrieve the target manual pages accurately. However, the configuration manual is organized as a directory tree. Inspired by the human pattern of reading manuals, we leverage LLM to traverse k layers of the manual directory tree, selecting and entering the relevant subdirectories. This progressively narrows the retrieval scope. The filtered manual is ~ 10% of the original manual. This improves the accuracy of manual retrieval in the subsequent process."}, {"title": "Incremental Translation", "content": "Incremental translation is the final stage of IRAG, which translates source configuration fragments into target device configurations. We construct a comprehensive prompt by combining source device configuration commands, corresponding manuals, and previously extracted target device documentation. Then we use LLM's understanding, analysis, and generation capabilities for translation. Since LLMs have context length limits [12], we opted for a fragment-by-fragment rather than full-text translation approach. While translating each fragment independently is possible, we observe significant inter-fragment dependencies in practice. Therefore, we choose the incremental translation approach, i.e., after translating a fragment, we use the translation result as the context input for the translation of the next fragment. Our prompt template is shown in Appendix A.3."}, {"title": "Verification", "content": "To improve translation quality, we implement a two-stage verification process: syntax verification during incremental translation and semantic verification after the complete translation. The prompt templates of this module are shown in Appendix A.4.\nSyntax Verification. This stage validates whether the translated configuration adheres to the target device's syntax and view specifications. For a given target device, we first construct a command syntax tree based on the target device's command manual and build a configuration parser for it (the right side of Figure 2). During the incremental translation process, we input the partial translation into the configuration parser to check for correctness. For command lines that do not conform to the syntax or view, we provide corresponding annotations and try to correct them by LLM. We use LLM's multi-round dialogue capability, i.e. the historical memory of the previous translation process is retained and only the incorrect part is entered in the correction process. After correction, we verify again using the syntax tree to ensure that the syntax correctness is better than the previous version.\nSemantic Verification. While direct configuration translation with LLM shows limitations, we discover that LLM excels at analyzing configuration differences between vendors. Therefore, we design a semantic verification module based on LLM, which includes two steps: (1) Configuration difference analysis: we provide the original and the translated configuration with corresponding manual pages to LLM, allowing it to analyze the differences between the two configurations and provide explanations. (2) Semantic correction: based on the analysis results, we annotate the commands with semantic inconsistencies and provide the corresponding configuration manual pages as contexts to LLM. Different from the translation process, we only use manual pages of the incorrect commands in this step and increase the proportion of relevant manual pages (i.e., increase top-k) to enhance error correction."}, {"title": "Implementation Details", "content": "We implement our system in Python with ~ 3500 Lines of Code (LoC). In the parser, we build the configuration tree based on the open-source configuration models from NAssim [6] and write the corresponding parser for each vendor. In IRAG module, we use BGE-m3 [7] as the sentence embedding model. We used OpenAI's SDK to call several LLMs, including GPT-40 [22], Qwen-Max [1], etc. Our system has a relatively low migration cost. To fit a new vendor, we only need to scrape the corresponding vendor's configuration manual and command manual and write the corresponding parser (about 200 LoC in Python) without the finetuning process. The parsers for different vendors are specific in the view structure, and the command syntax parsing module can be reused."}, {"title": "Evaluation", "content": ""}, {"title": "Experimental Setup", "content": "Manuals and Dataset. We use Nokia 7750 SR [21] and Huawei NE40E [14] routers as our source and target devices. The command manuals and configuration models (hierarchy of command manuals) come from the open-source dataset from NAssim [6]. We scrape the configuration manual of NE40E from the Huawei website as the configuration tutorial for IRAG module. Our dataset includes 1063 lines of configuration commands from 53 files, where 33 files are real configuration files from the industry and 20 files from Config-Trans [20]. The size of our dataset is comparable to existing work [6, 20]. The configurations cover various settings of the routers, including basic system information, interface, route policy, filter policy, BGP/IGP protocols, VPRN, etc.\nMetrics. The metrics we use consider both the similarity with the reference configuration and the correctness of the syntax and view: (1) Tree Match (TM): the matching rate on the configuration tree, which checks the correctness of syntax and view. (2) Syntax Correctness (SC): the syntax matching rate. This metric is designed to measure pure syntax correctness because view errors caused by some commands may affect the matching of subsequent syntax-correct commands on the configuration tree. (3) BLEU [23]: a metric that focuses on precision, often used to evaluate the output quality of machine translation tasks. (4) Exact Match (EM): the strict matching rate, focuses on the recall rate of a full command line. We also use Recall@Top-k to evaluate the manual retrieval module.\nMethods and Baselines. We use GPT-40 [22] as the baseline for end-to-end comparison with our proposed full method (GPT-40+IRAG+Syntax and Semantic Verification). In the ablation study, we test the partial methods of our system: GPT-40+IRAG and GPT-40+IRAG+Syn. (Syntax Verification). For a comprehensive evaluation, we also use Qwen-Max [1] as an alternative base model and include ConfigTrans [20] as an additional baseline method. Since ConfigTrans only supports configuration translation within its own scope, we conducted experiments on its dataset for separate comparisons."}, {"title": "End-to-End Evaluation", "content": "Results. The result of the end-to-end evaluation is shown in Table 2. Our full method has a significant improvement in syntax and view metrics compared to the baseline with GPT-40. The syntax correctness rate reaches 97.74% which is 19.07% higher than the baseline (GPT-40). The exact match rate also increases from 46.11% to 67.30% compared to the baseline. However, the exact match results are for reference only, as sometimes the correct answer for the configuration translation is not unique. In addition, our method also achieves relatively good results on Qwen-Max, indicating that it can adapt to different base models."}, {"title": "Ablation Study", "content": "IRAG Module. We can see from Table 2 that the method with only IRAG has a great improvement in translation performance compared to the baseline. In the GPT-40 + IRAG method, TM increases 13.69% compared to the baseline (GPT-40), and the EM also increases 13.67%. This result indicates that the IRAG module successfully enhances the ability of LLMs in configuration translation by introducing relevant target device manual information.\nTo verify the effectiveness of the LLM filter and voting mechanism in the process of target manual retrieval ($3.2.2), we labeled 156 lines of real configuration commands of Nokia with the corresponding Huawei manuals as our mini-benchmark for evaluating the target manual recall rate. Figure 4(a) shows that both the voting and filter mechanisms have a significant improvement on the recall rate. The top-20 recall rate of our full method reaches 70.33%, which is 19.45% higher than the baseline (BGE model [7]). Figure 4(b) shows that our method is also effective in suppressing view errors. Considering the trade-offs between the recall rate and context length limit of LLM, we use k = 20 as the default top-k parameter in incremental translation and increase it to 30 in the semantic verification module to enhance the probability of error correction and improve performance.\nVerification Module. Table 2 also shows that our verification module has a significant effect on improving the correctness of syntax and view. With syntax verification, the syntax correctness rate (SC) increases 7.44% and the syntax tree matching rate (TM) increases 13.19% (GPT-40). This indicates that the syntax verification module can not only correct syntax errors but also improve the correctness of the view. With semantic verification, BLEU-2 and EM increase 2.12% and 1.54% (GPT-40), respectively. This indicates that the semantic verification module also has effect on improving the accuracy of configuration translation."}, {"title": "Deep Dive", "content": "To further verify the performance of our method on different difficulty types of configuration translation problems, we divide the whole dataset according to the following three types: (1) one source command maps one target command (1v1); (2) one source command maps M target commands (1vM); (3) N source commands map M target commands (NvM). 1vM also includes the cases where M source commands map one target command. The results on the divided dataset are shown in Figure 5. It can be seen that our method has a great improvement compared to GPT-40 on all three different types of datasets. On the most difficult NvM type, our method has the largest improvement in syntax correctness, with ~ 17% increase compared to GPT-40 (from 80.67% to 97.63%). The significant improvement in the challenging dataset highlights the effectiveness of our method."}, {"title": "Conclusion", "content": "In this paper, we analyze the requirements and difficulties of cross-vendor network configuration translation. The core challenge lies in the significant differences between the configuration models of vendors' device systems. We propose an LLM-driven intent-based network configuration translation framework, including the parser, IRAG, and verification modules. The designed system is verified on a real dataset and has a significant improvement compared to existing methods."}, {"title": "Appendix", "content": ""}, {"title": "Manual Examples", "content": "We use two types of manuals in our work: Command Manuals and Configuration Manuals. We use Huawei NE40E Router manuals as examples to illustrate them.\nCommand Manuals. Contains syntax definitions and functional descriptions of all commands of the device, mainly used for constructing the configuration syntax tree in the parser. As we can parser the source device's configuration before translation and get the corresponding command manuals of each command line, the command manuals are mainly used to let LLM understand the source device's command syntax and semantics. A command manual example is shown in Figure 6.\nConfiguration Manuals. Contains configuration steps required to implement a certain function. We use extracted intents to retrieve the corresponding configuration manuals, which are used to generate the configuration. LLM reads the related configuration manuals to understand the target device's configuration syntax and semantics, together with important view information. A configuration manual example is shown in Figure 7."}, {"title": "Intent Extraction Details", "content": "We use the In-Context Learning (ICL) method to extract a formatted and unified intent for manual retrieval. To achieve this, we design a prompt template shown in Figure 8 (simplified). In the prompt, we provide LLM with a JSON format instruction and an output timplate. We also provide LLM with intent examples to align with the linguistic style of the target device's manuals. To increase the robustness of the method, we have added a retry mechanism to ensure the correctness of output, making sure it can be parsed by a JSON decoder."}, {"title": "Incremental Translation Details", "content": "The prompt template of incremental translation is shown in Figure 9. We provide LLM with the source configuration fragment to translate with corresponding manuals, preceding translations, and the retrieved target manual pages. We also include command conventions to help LLM understand the syntax of command templates in the target device's configuration manuals. We ask LLM to incorporate the translated Huawei configuration fragment seamlessly into the preceding translations, ensuring the completeness and correctness of the generated configuration."}, {"title": "Verification Details", "content": "In syntax verification, we use LLM together with config syntax tree (in the parser module) to analyze and refine the syntax errors. The prompt template is shown in Figure 10. In semantic verification, we use LLMs to analyze and refine the semantic errors. The prompt template for semantic verification is shown in Figure 12 and the prompt template for semantic correction is shown in Figure 11."}, {"title": "Case Study", "content": "We provide a case study of the configuration translation process of our method in Figure 13. To translate the fragment in NOKIA Source Configuration, the intent extraction module extracts the intent from the fragment. Then the target manual retrieval module uses the general intent \u201cConfigure OSPF protocol and its parameters within a specific area for an interface\" to retrieve the corresponding configuration manual page \"Enabling OSPF\" at top 4. The incremental translation module uses the retrieved manual page and the source configuration fragment to generate the translated configuration fragment. The target command ospf enable is translated successfully with correct views. This is because both the command and view information are included in the manual page. In contrast, the translation result of GPT-40 not only misses this command but also provides incorrect view information."}]}