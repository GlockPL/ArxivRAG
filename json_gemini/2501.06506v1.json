{"title": "Resource Allocation under the Latin Square Constraint", "authors": ["Yasushi Kawase", "Bodhayan Roy", "Mohammad Azharuddin Sanpui"], "abstract": "A Latin square is an n\u00d7n matrix filled with n distinct symbols, each of which appears exactly once in each row and exactly once in each column. We introduce a problem of allocating n indivisible items among n agents over n rounds while satisfying the Latin square constraint. This constraint ensures that each agent receives no more than one item per round and receives each item at most once. Each agent has an additive valuation on the item-round pairs. Real-world applications like scheduling, resource management, and experimental design require the Latin square constraint to satisfy fairness or balancedness in allocation. Our goal is to find a partial or complete allocation that maximizes the sum of the agents' valuations (utilitarian social welfare) or the minimum of the agents' valuations (egalitarian social welfare). For the problem of maximizing utilitarian social welfare, we prove NP-hardness even when the valuations are binary additive. We then provide (1 \u2013 1/e) and (1 \u2013 1/e)/4-approximation algorithms for partial and complete settings, respectively. Additionally, we present fixed-parameter tractable (FPT) algorithms with respect to the order of Latin square and the optimum value for both partial and complete settings. For the problem of maximizing egalitarian social welfare, we establish that deciding whether the optimum value is at most 1 or at least 2 is NP-hard for both the partial and complete settings, even when the valuations are binary. Furthermore, we demonstrate that checking the existence of a complete allocation that satisfies each of envy-free, proportional, equitable, envy-free up to any good, proportional up to any good, or equitable up to any good is NP-hard, even when the valuations are identical.", "sections": [{"title": "1 Introduction", "content": "The fair division of indivisible resources constitutes a significant and complex challenge at the intersection of economics, mathematics, and computer science, bearing substantial implications for both theoretical and practical applications [14, 48, 1, 15, 43, 59, 50]. In contrast to divisible resources- -such as land, capital, or commodities- that can be divided according to the preferences of agents [4, 5, 30, 63], indivisible resources cannot be divided without substantially reducing their utility or worth [20, 62, 6, 7]. Examples encompass residences, automobiles, or artworks, wherever fractional ownership is either impractical or undesirable.\nAllocating indivisible resources fairly and efficiently is crucial in many practical scenarios, such as scheduling sightseeing for multiple groups visiting various locations or assigning shifts to medical professionals.\nIn this paper, we introduce the problem of allocating n indivisible items among n agents over n rounds, ensuring that each agent receives each item once. This problem can be regarded as an allocation problem under a Latin square constraint.\nThe notion of indivisible item allocation constrained by a Latin square provides a systematic and effective method for distributing tasks or resources in many real-world contexts. A Latin square is a mathematical configuration in which each element occurs exactly once in each row and exactly once in each column of a grid, thus preventing any repetition within the same context (see Figure 1). Various domains, such as job scheduling, school timetabling, resource allocation optimization in computing systems, and event seating arrangement structuring, utilize this constraint. See Section 2.2 for more details on examples of applications.\nA complete Latin square of order n is an n\u00d7n array filled with n different symbols, each occurring exactly once in each row and exactly once in each column. A partial Latin square is the case where some cells may be empty. Figure 1 illustrates two examples of complete Latin squares and two examples of partial Latin squares.\nIn our setting, rows correspond to items, columns correspond to rounds, and symbols correspond to agents. The structure of the Latin square ensures that no item is allocated to multiple agents in each round, each agent receives at most one item per round, and no agent receives the same item more than once.\nSuppose that each agent i has a valuation $v_{ijk}$ for each pair of item j and round k. The utility of agent i is defined as the sum of the valuations that they receive. We investigate the computational complexities of finding a partial or complete allocation under the Latin square constraint that maximizes social welfare. We call this problem the Latin square allocation (LSA) problem. As the measure of social welfare, we"}, {"title": "1.1 Related Work", "content": "Latin squares have been the subject of various studies in algebra and combinatorics and have applications in fields such as mathematical puzzles, coding theory, and experimental design [41, 68, 9, 46]. The study of Latin squares has a rich history and has also been studied from computational aspects. One of the fundamental problems in this area is the completion of partial Latin squares. Colbourn [24] proved NP-hardness of this problem. Kumar et al. [45] introduced a maximization version of completing a partial Latin square.\nFinding an allocation that maximizes utilitarian social welfare or egalitarian social welfare under a constraint has been extensively studied in the context of fair and efficient allocation [31, 19, 23, 3, 40, 10, 38, 39]. Additionally, the problem of maximizing utilitarian social welfare is well-explored in the context of combinatorial auctions [11, 18, 66, 42, 52]. Furthermore, maximizing egalitarian social welfare is also called max-min fair, and a special case is extensively studied under the name of the Santa Claus problem [8, 13, 2, 34].\nResource allocation under the Latin square constraint can be seen as a multi-layered cake cutting problem. The multi-layered cake cutting problem, introduced by Hosseini et al. citeHosseini2020FairDO, involves allocating layers of a cake without overlap. Similarly, in our resource allocation problem under the Latin square constraint, each round acts as a layer, ensuring no agent receives more than one item per layer. This parallels the non-overlapping constraint in multi-layered cake cutting. Our study of resource allocation under the Latin square constraint was inspired by this multi-layered cake cutting problem with non-overlapping constraint. While these problems are distinct, they share similarities in layers and non-overlapping constraints. However, no previous results from cake cutting directly impact our findings on resource allocation under the Latin square constraint. Igarashi and Fr\u00e9d\u00e9ric [36] further explored the problem and proved the existence of such an allocation in a more general setting. Several other papers have contributed to the understanding of the multi-layered cake cutting problem [22, 53, 47].\nMoreover, resource allocation under the Latin square constraint can also be seen as a repeated allocation over time, in which a set of items is allocated to the same set of agents repeatedly over multiple rounds. Several studies discuss the existence of fair and efficient repeated allocations, as well as the computational complexity involved in finding a desired repeated allocation [49, 16, 64, 27, 37]. However, unlike our setting, each agent can receive the same item more than once."}, {"title": "1.2 Our Results", "content": "We study the computational complexity of finding partial and complete allocations that satisfy a given efficiency or fairness criterion while adhering to the Latin square constraint."}, {"title": "2 Preliminaries", "content": ""}, {"title": "2.1 Model", "content": "For a positive integer n, we denote the set {1,2,...,n} by [n]. In this paper, we address the problem of assigning n items to n agents over n rounds, which we refer to LSA problem. Let N = [n] be the set of agents, M = [n] be the set of items, and R = [n] be the set of rounds. An allocation A is a subset of triplets N\u00d7M\u00d7R where (i, j, k) \u2208 A means that agent i \u2208 N receives item j\u2208 M in round k \u2208 R. An allocation A is feasible if\n\u2022 (i) each agent receives at most one item per round (i.e., |{(i, j, k') \u2208 A : k' \u2208 R}| \u2264 1 for each i \u2208 N and j\u2208 M),\n\u2022 (ii) no item is allocated to multiple agents in each round (i.e., |{(i, j', k) \u2208 A : j' \u2208 M}| \u2264 1 for each i \u2208 N and k \u2208 R), and\n\u2022 (iii) no agent receives the same item more than once (i.e., |{(i',j,k) \u2208 A : i'\u2208 N}| \u2264 1 for each j \u2208 M and k \u2208 R).\nFor a feasible allocation A, we write A(j, k) to denote the agent who receives item j\u2208 M in round k \u2208 R if such an agent exists and A(j, k) = | if no such agent exists."}, {"title": "", "content": "We will call a pair of an item and a round a cell. Additionally, we will denote by $A_i$ the set {(j, k) \u2208 M \u00d7 R : A(j, k) = i}. A feasible allocation where each agent receives each item exactly once (i.e., |A| = $n^2$) is called a complete allocation. Note that a (complete) allocation corresponds to a (complete) Latin square. We will refer to a feasible allocation that is not necessarily complete as partial.\nEach agent i \u2208 N gets a non-negative integer value of $v_{ijk} \u2208 Z^+$ when receiving item j\u2208 M in round k \u2208 R. We say that the valuations are binary if $v_{ijk} \u2208 {0,1}$ for all i \u2208 N, j\u2208 M, and k \u2208 R. Additionally, we say that the valuations are identical if $v_{ijk} = v_{i'jk}$ for all i, i' \u2208 N, j \u2208 M, and k \u2208 R. For S \u2264 M \u00d7 R, let $v_i(S)$ denote the value $\\sum_{(j,k)\u2208S} v_{ijk}$. The utilitarian social welfare and the egalitarian social welfare of a feasible allocation A is defined as $\\sum_{i\u2208N} v_i(A_i)$ and $\\min_{i\u2208N} v_i(A_i)$, respectively. We call an allocation A Umax and Emax if it maximizes utilitarian social welfare and egalitarian social welfare, respectively.\nThe complete Umax LSA problem is a problem of finding a complete allocation that maximizes utilitarian social welfare. This problem can be represented as the following integer linear programming (ILP):\n$\\max \\sum_{i\u2208N} \\sum_{j\u2208M} \\sum_{k\u2208R} v_{ijk}x_{ijk}$"}, {"title": "", "content": "$\\sum_{i\u2208N} x_{ijk} = 1  \\qquad (\u2200j\u2208 M, k\u2208 R),$\n$\\sum_{j\u2208M} x_{ijk} = 1 \\qquad  (\u2200k \u2208 R, i \u2208 N),$\n$\\sum_{k\u2208R} x_{ijk} = 1  \\qquad (\u2200i \u2208 N, j\u2208 \u041c),$"}, {"title": "", "content": "$x_{ijk} \u2208 {0,1} \\qquad (\u2200i \u2208 N, j\u2208 M, k \u2208 R),$\nwhere A = {(i, j, k) \u2208 N\u00d7M\u00d7R : $x_{ijk}$ = 1} corresponds to a complete allocation. The partial Umax LSA problem is a problem of finding a partial allocation that maximizes utilitarian social welfare, which can be represented as the following ILP:\n$\\max \\sum_{i\u2208N} \\sum_{j\u2208M} \\sum_{k\u2208R} v_{ijk}x_{ijk}$"}, {"title": "", "content": "$\\sum_{i\u2208N} x_{ijk} \u2264 1 \\qquad  (\u2200j\u2208 M, k\u2208 R),$\n$\\sum_{j\u2208M} x_{ijk} \u2264 1 \\qquad (\u2200k \u2208 R, i \u2208 N),$\n$\\sum_{k\u2208R} x_{ijk} \u2264 1 \\qquad  (\u2200i \u2208 N, j\u2208 M),$"}, {"title": "", "content": "$x_{ijk} \u2208 {0,1}  \\qquad (\u2200i \u2208 N, j\u2208 M, k \u2208 R).$\nWe define the partial and complete Emax LSA problems in a similar manner.\nIt is important to note that the Umax and Emax values of a partial LSA problem are at least as large as those of the corresponding complete LSA problem, respectively. This is because any complete allocation is also a partial allocation. Furthermore, as demonstrated below, the Umax and Emax values of a partial LSA problem can be strictly greater than those of the corresponding complete LSA problem, even for the binary case.\nSuppose that n = 2, $v_{1,1,1} = v_{1,2,2} = 1$, and $v_{i,1,2} = v_{i,2,1} = 0$ for each i \u2208 {1,2}. Then, the Umax value is 2, and the Emax value is 1 for the partial LSA problem, achieved by the partial allocation {(1,1,1), (2,2,2)}. On the other hand, there are only two complete allocations: {(1, 1, 1), (1, 2, 2), (2, 1, 2), (2, 2, 1)} and"}, {"title": "", "content": "{(1, 1, 2), (1, 2, 1), (2, 1, 1), (2,2,2)}. Both of these complete allocations have a utilitarian social welfare of 1 and an egalitarian social welfare of 0. Thus, a partial allocation can yield a higher optimum value compared to every complete allocation.\nAn allocation A is called envy-free (EF) if every agent evaluates that their allocated bundle as at least as good as any other agent's bundle, i.e., $v_i(A_i) \u2265 v_i(A_{i'})$ for any i,i' \u2208 N. Similarly, envy-free up to one good (EF1) and envy-free up to any good (EFX) are defined as follows:\n\u2022 EF1: $v_i(A_i) \u2265 v_i(A_{i'} \\setminus \\{(j, k)\\} )$ for some (j, k) \u2208 $A_{i'}$, or $A_{i'}$ = \u00d8 (\u2200i, i' \u2208 N),\n\u2022 EFX: $v_i(A_i) \u2265 v_i(A_{i'} \\setminus \\{(j, k)\\} )$ for any (j, k) \u2208 $A_{i'}$ (\u2200i,i' \u2208 N).\nAn allocation A is said to be proportional (PROP), proportional up to one good (PROP1), and proportional up to any good (PROPX) as follows:\n\u2022 PROP: $v_i(A_i) \u2265 v_i(M \u00d7 R)/n$ (\u2200i \u2208 N),\n\u2022 PROP1: $v_i(A_i) \u2265 v_i(M \u00d7 R)/n \u2013 \\max_{(j,k)\u2208(M\u00d7R)\\setminus A_i} v_{ijk}$ (\u2200i \u2208 N),\n\u2022 PROPX: $v_i(A_i) \u2265 v_i(M \u00d7 R)/n \u2013 \\min_{(j,k)\u2208(M\u00d7R)\\setminus A_i} v_{ijk}$ (\u2200i \u2208 N).\nAn allocation A is said to be equitable (EQ), equitable up to one good (EQ1), and equitable up to any good (EQX) as follows:\n\u2022 EQ: $v_i(A_i) = v_{i'}(A_{i'})$ (\u2200i, i' \u2208 N),\n\u2022 EQ1: $v_i(A_i) \u2265 v_{i'}(A_{i'}) \u2013 \\max_{(j,k)\u2208A_{i'}} v_{i'jk}$ (\u2200i,i' \u2208 N),\n\u2022 EQX: $v_i(A_i) \u2265 v_{i'}(A_{i'}) \u2013 \\min_{(j,k)\u2208A_{i'}} v_{i'jk}$ (\u2200i, i' \u2208 N).\nSuppose that n = 2, $v_{i,1,1} = v_{i,2,2} = 1$, and $v_{i,1,2} = v_{i,2,1} = 0$ for each i \u2208 {1,2}. Then, no complete allocation is EF, EF1, EFX, PROP, PROP1, PROPX, EQ, EQ1, or EQX."}, {"title": "2.2 Applications", "content": "The Latin square constraint appears frequently in scheduling and resource allocation problems. We will now discuss some examples.\nSightseeing Scheduling\nIn scheduling sightseeing for multiple groups, it is necessary to prevent multiple groups from visiting the same location at the same time to reduce congestion. Suppose that there are n groups N who want to visit n locations M over n time slots R. Then, the Latin square constraint guarantees that:\n\u2022 Each group visits at most one location per round.\n\u2022 No location is visited by multiple groups in each round.\n\u2022 No agent visits the same location more than once."}, {"title": "", "content": "Each group i \u2208 N has a valuation $v_{ijk}$ for each pair of location j\u2208 M and time slot k\u2208 R. In this situation, solving the complete/partial Umax LSA problem leads to an allocation that maximizes utilitarian social welfare.\nSchool Timetabling\nEducational institutions frequently require the allocation of classes or teachers to groups of students in a manner that ensures no clash of student groups, teachers, or time slots [54, 55, 35]. Suppose that there are n student groups N, n classes (or teachers) M, and n time slots R. The Latin square constraint guarantees that:\n\u2022 Each student group attends at most one class at a time.\n\u2022 No class is assigned to multiple student groups in each time slot.\n\u2022 No student group attends the same class more than once.\nEach student group i \u2208 N has a valuation $v_{ijk}$ for each pair of class j\u2208 Mand time slot k \u2208 R based on their preference for time and subject combinations. Then, solving the complete/partial Umax LSA problem leads to an allocation that maximizes utilitarian social welfare.\nBalanced Job Rotation in Organizations\nIn some companies, employees rotate through different departments or tasks. Suppose that n employees N rotate between n departments M (e.g., sales, marketing, and operations), over n time periods R. The Latin square constraint guarantees that:\n\u2022 Each employee works in at most one department at a time.\n\u2022 No department is assigned to multiple employees in each time slot.\n\u2022 No employee works in the same class more than once.\nSuch a constraint is crucial for balancing workload and cross-training opportunities. Each employee i \u2208 N has a preference $v_{ijk}$ regarding the ordinal position k \u2208 R for each department j\u2208 M. Then, this situation can be modeled by the complete Umax LSA problem.\nExperimental Rotations in Healthcare\nIn clinical trials or studies with multiple treatment groups, it is required to design the order of treatment assignments of participants [21, 58, 57]. For example, in a drug trial with n different treatment methods, each group of patients receives each treatment method exactly once over n treatment periods, ensuring fair treatment exposure. Suppose that there are n participants groups N, n treatments M, and n time slots R. Each group of patients i \u2208 N has a preference $v_{ijk}$ regarding the ordinal position k for each treatment j\u2208 M. Then, the complete Latin square constraint ensures that each patient receives treatments in a structured sequence, ensuring equal administration without repetition in the same order. Thus, this situation can be modeled by the complete Umax LSA problem."}, {"title": "3 Approximation Algorithms for Maximizing Utilitarian Social Welfare", "content": "In this section, we first present a (1 \u2013 1/e)-approximation algorithm for the partial Umax LSA problem. This algorithm is based on a technique used for the Latin square extension problem [32] and the separable assignment problem [28]. The algorithm constructs a configuration LP and then solves it by the ellipsoid method [33]. It then rounds the solution with a contention resolution scheme.\nWe then provide a (1 \u2013 1/e)/4-approximation algorithm for the complete Umax LSA problem by showing that a-approximate solution of the partial LSA problem can be converted into a/4-approximate solution of the complete LSA problem."}, {"title": "3.1 Partial LSA", "content": "Let S \u2286 $2^{M\u00d7R}$ be the set of all possible (partial) allocations for an agent, i.e., for every S\u2208 S, (j, k), (j, k') \u2208 S implies k = k' and (j, k), (j', k) \u2208 S implies j = j'. For each agent i \u2208 N and S\u2208 S, we introduce a binary variable $y_{is}$, which indicates that i receives S. Then, we reformulate ILP (2) as the following (exponential-size) ILP:\n$\\max \\sum_{i\u2208N} \\sum_{S\u2208S} (\\sum_{(j,k)\u2208S} v_{ijk})y_{is}$"}, {"title": "", "content": "$\\sum_{S\u2208S} y_{is} = 1  \\qquad (\u2200i \u2208 N),$\n$\\sum_{i\u2208N} \\sum_{S\u2208S: (j,k)\u2208S} y_{is} \u2264 1  \\qquad (\u2200j \u2208 M, \u2200k \u2208 R),$\n$y_{is} \u2208 {0,1} \\qquad (\u2200i \u2208 N, \u2200S \u2208 S).$\nA linear programming relaxation of (3) is given as\n$\\max \\sum_{i\u2208N} \\sum_{S\u2208S} (\\sum_{(j,k)\u2208S} v_{ijk})y_{is}$"}, {"title": "", "content": "$\\sum_{S\u2208S} y_{is} = 1 \\qquad  (\u2200i \u2208 N),$\n$\\sum_{i\u2208N} \\sum_{S\u2208S: (j,k)\u2208S} y_{is} \u2264 1  \\qquad (\u2200j\u2208 M, \u2200k \u2208 R),$\n$y_{is} \u2265 0 \\qquad (\u2200i \u2208 N, \u2200S \u2208 S).$\nNote that the optimum value of (4) is an upper bound of the partial Latin square allocation problem.\nIn what follows, we first show that LP (4) can be solved in a polynomial time by using the ellipsoid method [33]. This method works when we have a separation algorithm to solve the separation problem for the feasible region. For a polyhedron P\u2286$R^N$, the separation problem for P receives a vector y and either asserts y \u2208 Por finds a vector d such that $d^T x > d^T y$ for all x \u2208 P."}, {"title": "3.2 Complete LSA", "content": "In this subsection, we construct a complete allocation from a partial allocation without reducing utilitarian social welfare by more than a quarter. Our algorithm first divides the given partial allocation into four blocks, such that any of them can be extended to a complete allocation. It then extends the block with the maximum utilitarian social welfare.\nThe division is based on Ryser's theorem for a Latin rectangle extension [60]. It implies that any partial allocation A that satisfies the following conditions can be extended to a complete allocation: there exist positive integers m and r such that m+r\u2264 n and A(j, k) \u2260 | if and only if j \u2208 [m] and k \u2208 [r]. The proof of Ryser's theorem is constructive, based on K\u00f6nig's edge coloring theorem. It is well known that the edge coloring can be found efficiently.\nFor a partial allocation A, let M' = {j \u2208 M : A(j,k) \u2260 | (\u2203k \u2208 R)} be the set of items that are not assigned in at least one round, and let R' = {k \u2208 R : A(j, k) \u2260 | (\u2203j \u2208 M)} be the set of rounds in which at least one item is unassigned. Suppose that |M'| + |R'| \u2264 n. Then, we construct an extension A such that A \u2286 A \u2286 N \u00d7 M' \u00d7 R' by allocating every (j, k) \u2208 M' \u00d7 R' with A(j, k) = | in a greedy manner without violating feasibility. Now, we can apply the construction method of Ryser's theorem [60]. We first make an extension with respect to rounds. To do so, we construct a bipartite graph G\u2081 = (N, M'; {(p,q) \u2208 N \u00d7 M': A(q, k) \u2260 p (\u2200k \u2208 R')}), where an edge (p,q) means that agent p does not get item q yet. Then, we compute an edge coloring of G\u2081 with n \u2212 |R\u2032| colors. Here, colors correspond to rounds not allocated yet (i.e., R \\ R'). We allocate an item q to agent p according to the color of edge (p, q). Note that such a coloring of n - |R'| colors exists since degrees of left-side vertices are at most |M'| \u2264 n \u2212 |R'| and degrees of right-side vertices are exactly"}, {"title": "4 FPT algorithms for Maximizing Utilitarian Social Welfare", "content": "In this section, we provide FPT algorithms for the Umax LSA problems with respect to the number of agents n and the optimum value, respectively.\nRegarding the value of n, the task is not difficult because we can enumerate all the possible allocations in FPT time. More precisely, the number of complete and partial allocations are at most $n^{n^2}$ < $2^{O(n^2 log n)}$ and $(n+1)^{n^2}$ < $2^{O(n^2 log n)}$ by considering all the possible assignments of each cell. For each allocation, we can check the feasibility and compute the utilitarian social welfare in O($n^2$) time. It should be noted that we can also solve the Emax problem in the same manner. Thus, we obtain the following theorem.\nWhen the optimum value is the parameter, we use the color coding technique [25] to construct FPT algorithms. Let $A^*$ be an optimum solution and $a = \\sum_{(i,j,k)\u2208A^*} v_{ijk}$. If a \u2265 n/2, the FPT algorithms with respect to n are applicable. Hence, without loss of generality, we may assume that a < n/2. Let $S^* = \\{(j,k) \u2208 M \u00d7 R : (i,j,k) \u2208 A^* and v_{ijk} > 0\\}$ be the set of item-round pairs that are assigned to some agent in the optimum solution with positive utility, and let $T^* = \\{i \u2208 N : (i, j, k) \u2208 A^* and v_{ijk} > 0\\}$ be the set of agents who receive positive in the optimum solution. Additionally, let $s^* = |S^*|$ and $t^* = |T^*|$. Since $v_{ijk} \u2265 1$ for any $(i,j,k) \u2208 S^*$, it follows that $t^* < s^* < a$. We guess the values of $s^*$ and $t^*$, and denote these guessed values as s and t, respectively. The parameter s is inferred sequentially as 1,2,.... If the estimated s is at most a, then we can find an allocation whose utilitarian social welfare is at least s for some t \u2208 [s]. Therefore, if the optimal utilitarian social welfare currently obtained is less than s, it can be concluded that a is less than s, and the process can be terminated.\nLet $x$: M \u00d7 R \u2192 [s] be a coloring of cells M \u00d7 R and let $\\psi$ : [s] \u2192 [t] be a map from [s] to [t]. We will select a coloring such that the elements in $S^*$ are colored with pairwise distinct colors. Additionally, we will select $\\psi$ such that $\\psi \\circ x(j, k) = \\psi \u00b0x(j', k')$ if and only if i = i' for all $(i, j, k), (i', j', k') \u2208 A^*$ with $v_{ijk}, v_{i'j'k'} > 0$.\nWe enumerate all possible maps to select a desired function of $\\psi$. Let P be the set of all possible functions from [s] to [t], which is at most $t^s < a^s$. For coloring $x$, we use a tool called splitter. An (a, b, c)-splitter is a family F of functions from [a]"}, {"title": "5 NP-hardness", "content": "In this section, we present various results on the NP-hardness of finding desirable allocations. Due to space limitations, some proofs are deferred to the appendix.\nWe begin by addressing the hardness of the binary case.\nWhen the valuations are binary, deciding whether there exists a complete allocation A such that $v_{ijk}$ = 1 for all (i, j, k) \u2208 A is strongly NP-complete.\nProof It is clear that the problem is in the class NP. We present a polynomial-time reduction from a partial Latin square problem, which is known to be strongly NP-complete [24]. In the partial Latin square completion problem, we are given a partial Latin square PC N\u00d7M\u00d7R, and the goal is to check whether it can be extended to a complete Latin square.\nWe construct valuations from the given partial Latin square P as follows:\n$v_{ijk} = \\{\n0 if P(j, k) \u2208 N \\setminus \\{i\\},\\\\\n1 if P(j, k) \u2208 \\{i, \\bot\\}\\qquad (i\u2208 N, j\u2208 M, k \u2208 R).\nClearly, the valuations are binary.\nSuppose that P can be extended to a complete Latin square $P \\supset P$. Then, by interpreting $P$ as a complete allocation, we have $v_{ijk}$ = 1 for all (i, j, k) \u2208P because $P(j, k) = i$ implies $P(j, k) \u2208 \\{i, \\bot\\}$.\nConversely, suppose that there exists a complete allocation A such that $v_{ijk}$ = 1 for all (i, j, k) \u2208 A. Then, by the definition of the valuation, we have A(j, k) = i if P(j, k) = i. This means that A is a complete Latin square that extends P.\nTherefore, determining whether a complete allocation A with $v_{ijk}$ = 1 for all (i, j, k) \u2208 A exists is strongly NP-complete.\nFrom this theorem, we can conclude that computing a Umax or Emax allocation is NP-hard, even when the valuations are binary. Indeed, for the binary case, deciding whether there exists an allocation whose utilitarian social welfare is $n^2$ is NP-complete, and deciding whether there exists an allocation whose egalitarian social welfare is n is NP-complete.\nMoreover, we can also conclude that computing a non-wastefulness allocation and a Pareto optimal allocation are both NP-hard. Here, an allocation A is said to be non-wasteful if, for each (j, k) \u2208 M \u00d7 R where $v_{i'jk} > 0$ for some i' \u2208 N, there exists an agent i \u2208 N such that $v_{ijk} > 0$ and A(j, k) = i. Additionally, an allocation A is said to be Pareto optimal if there exists no allocation B such that $v_i (B_i) \u2265 v_i (A_i)$ for every agent i \u2208 N, with at least one of the inequalities being strict."}, {"title": "", "content": "Corollary 1 Even when the valuations are binary, computing a partial or complete allocation that satisfies each of Umax, Emax, non-wastefulness, or Pareto optimal is strongly NP-hard.\nNext, we show that deciding whether the Emax value is 1 or 2 is NP-hard. This suggests that there is no FPT algorithm for the Emax LSA problem with respect to the optimum value."}, {"title": "", "content": "Theorem 6 Even when the valuations are binary, deciding whether the Emax value is 1 or 2 is strongly NP-hard for both the partial and complete LSA problems. Furthermore, deciding whether the Umax value is at least 2n or less is strongly NP-hard."}, {"title": "6 Concluding Remarks and Future Work", "content": "In this paper, we introduced problems of allocating indivisible items under the Latin square constraint. This approach is effective for numerous practical problems. As demonstrated in Section 2.2, it is particularly useful for scheduling sightseeing activities, school timetabling, and job rotation in organizations. The method ensures fairness, efficiency, and balance, thereby preventing the overuse or redundancy of any single element within a system.\nThis study investigated the computational complexity of finding a fair or efficient allocation under the Latin square constraint. We provided (1 - 1/e)- and (1-1/e)/4-approximation algorithms for the partial and complete Umax LSA problems, respectively. Additionally, we presented FPT algorithms with respect to the order of Latin square and the optimum value for both the partial and complete Umax LSA problems. Regarding impossibility results, we demonstrated the NP-hardness of the Umax and Emax problems. Furthermore, we proved NP-hardness for various settings, including checking the existence of an EF, PROP, EQ, EFX, EQX, or PROPX complete allocation.\nA straightforward direction for future work is to construct algorithms for Umax with improved approximation ratios. Developing faster FPT algorithms for Umax and Emax also presents an interesting avenue for exploration. Another open question is determining the complexity of checking the existence of an EF1, EQ1, or PROP1 complete allocation. When valuations are binary, we can easily check whether the Emax value of a partial LSA problem is at least 1 or at most 0 by solving an agent-side perfect matching problem on a bipartite graph (N, M \u00d7 R; {(i, (j, k)) : $v_{ijk} = 1\\}$). However, this problem remains unresolved for complete allocations since a partial allocation corresponding to a perfect matching may not be completed (see the rightmost partial Latin square example in Introduction)."}]}