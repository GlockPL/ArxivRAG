{"title": "Temporal Ensemble Logic", "authors": ["Guo-Qiang Zhang"], "abstract": "We introduce Temporal Ensemble Logic (TEL), a monadic, first- order modal logic for linear-time temporal reasoning. TEL includes primitive temporal constructs such as \u201calways up to t time later\u201d (\u25a1t), \u201csometimes before t time in the future\" (\u25cat), and \u201ct-time later\" \u03c6t. TEL has been motivated from the requirement for rigor and repro- ducibility for cohort specification and discovery in clinical and popu- lation health research, to fill a gap in formalizing temporal reasoning in biomedicine. In this paper, we first introduce TEL in a general set up, with discrete and dense time as special cases. We then focus on the theoretical development of discrete TEL on the temporal domain of positive integers N+, denoted as TELN+. TELN+ is strictly more expressive than the standard monadic second order logic, character- ized by B\u00fcchi automata. We present its formal semantics, a proof system, and provide a proof for the undecidability of the satisfiability of TELN+. We also discuss expressiveness and decidability fragments for TELN+, followed by illustrative applications.", "sections": [{"title": "Introduction", "content": "We introduce Temporal Ensemble Logic (TEL), motivated from the require- ment for rigor and reproducibility for cohort specification and discovery in"}, {"title": "Temporal Ensemble Logic (TEL)", "content": "The basic construct of TEL includes two types of terms: time-length terms (or simply, time terms), and logical formulas. Time terms s, t, u, v, . . . consist of time constants a, b, c, . . ., time variables x, y, z, ... (from a set Var), and the addition of these terms s + t. In Backus-Naur form (BNF), we define the following syntax for time terms:\ns, t ::= a | x | s + t,\nwhere a comes from a set of time constants, x comes from a countable set of time variables, and s + t represent the addition of two time valued terms. For conciseness, we write nt to represent the addition (+) of n copies of t: nt := t + t +\u00b7\u00b7\u00b7t. We write Term for the set of all terms.\nLogical formulas \u03c6 consist of atomic propositions p, time-length indexed formulas \u03c6t, Boolean connectors (\u2227, V, \u00ac), time-length indexed modalities \u25a1ty and \u25caty, and existential quantification over time-lengths: \u2203x\u03c6,\u2200x\u03c6. We define, with t for time term and x for time-length variable:\n\u03c6, \u03c8 ::= p | Yt | \u00ac\u03c6 | \u03c6 > \u03c8 \\ \u03c6 \u2228 \u03c8 | \u25a1ty | \u25caty | \u2203x\u03c6 | \u2200x\u03c6,\nwhere atomic propositions p come from a pre-defined set Prop. We allow the \"nesting\" of time-termed subscripts \u03c6t for an arbitrary TEL formula \u03c6, turning any such formula into a unary predicate (over time-lengths, or simply, time).\nWe call TEL a timed, monadic, first-order linear-time, temporal logic. From now on, we use the term \u201ctime\u201d with \u201ctime-length\" interchangeably. It will be clear from our semantic definitions that we refer to time as time- lengths, and it is not the intention of TEL to refer categorically to absolute time values. TEL is a (class of) time-indexed modal logic because the in- tuition forty and \u25caty is to capture the properties that \u03c6 is always true until t time later, and \u03c6 is sometimes true within t time in the future. For convenience, we abbreviate \u221e as \u25a1, and \u25c7\u221e as \u25c7, where \u25a1\u221e stands for \u25a1 \u039b\u2200x\u03c6x and similarly,\u221ey for \u25ca V\u2203x\u03c6x, assuming that x does not occur free in \u03c6. Alternatively, one could explicitly introduce \u221e as an explicit time term, with its usually intended meaning.\nNote that TEL is not a conventional monadic, first-order modal logic in that the monadic predicates are not supplied as a predetermined list of unary"}, {"title": "Semantics", "content": "To capture the formal semantics of TEL in the general setting, we describe the mathematical structure in which TEL formulas can be interpreted or evaluated. Our time structure is M+, where M is a non-negative commutative monoid M that contains 0, +. Such structures include positive integers N+, positive rational numbers Q+, positive real numbers R+, and positive p-adic numbers. We also require that such commutative monoid M comes with a total order < compatible with +, with the property that a < b if and only if a + c = b for some c > 0. The order < is further assumed to be non-degenerative, in the sense that for any x \u2260 0, a < a + x for all a \u2208 M+.\nThe reason for considering positive numbers is for technical elegance for the most part. In particular, for formulas of the form \u2203x(\u25a1xy) and \u2200x(\u25cax\u03c6)"}, {"title": "TELN+ and an Equational Proof System", "content": "The direction of theoretical developments (e.g., proof system, decidability, expressiveness) of TEL is expected to be dependent on the specific choice of time monoid M, particularly because dense vs. discrete settings are likely to require different treatments with different results. In this section, we focus on the most natural case of natural numbers N\u207a, positive integers with the usual addition. In this setting, it is unnecessary to make a distinction between syntactic vs. semantic of integer time-length terms: they can be used interchangeably, so time-length terms u, v \u2208 Term\u0145+ are defined as:\nu, v ::= i \u2208 N+ | x | u + v,\nwhere x represent (a countable set of) time-length variables.\nThe alphabet for TELN+ is \u03a3 (= 2Prop), to account for all possible truth- status of each proposition in Prop at each given time. Following standard notational convention, \u03a3* represents the set of all finite words over \u03a3, \u03a3+ represents the set of all no-empty finite words over \u03a3, and \u03a3\u03c9 represents all \u03c9-words over \u03a3, of the form\n\u03b1 = \u03c3[1]\u03c3[2] \u00b7 \u00b7 \u00b7\nwith \u03c3[i] \u2208 \u03a3 being the ith letter of \u03b1 for all i \u2265 1. Regular expression notations can be conveniently extended to describe \u03c9-languages, which are subsets L \u2286 \u03a3\u03c9. This often involve concatenation (or postfixing) with infinite repetitions of regular languages [18].\nFor TELN+ formulas, we have, with t \u2208 Termn+ and a for time-length variable:\n\u03c6, \u03c8 ::= \u03b1 \u0395 \u03a3 | Yt |\u00ac\u03c6 | \u03c6\u2227 \u03c8 \\ \u03c6 \u2228 \u03c8 | \u25a1ty | \u25caty | \u2200xy | \u2203x\u03c6.\nNote that even though 0 is not a permissible time-constant, we can let yo to stand for \u03c6 without causing any inconsistencies. As usual, we let \u03c6 \u2192 \u03c8 to stand for (\u00ac\u03c6) \u2228 \u03c8."}, {"title": "A Deductive System for TELN+", "content": "In this subsection, we introduce a deductive system for TELN+. This is an equational system involving equalities = and inequalities <. The standard logical axioms (and rules) include substitution of equals for equals, distinc- tion of bound and free variables and the permission to rename bound vari- ables, and standard first order logical equivalences involving the associative and commutative property of repeated (nested) \u2200 and repeated (nested) \u2203 quantifications, etc.\nThe deductive system consists of the following types of equational axioms and rules:\n\u03a3: \u039b\u03b1\u2208A(\u03b1) = \u2228(\u03a3 \\ A) for A \u2286 \u03a3, with \u2228 \u03a3 = \u03a4 a special case;\nBoolean: Axioms of Boolean algebra, where we write \u03c6 < \u03c8 for \u03c6 \u2228 \u03c8 = \u03c8;\n\u2200\u2203: Standard axioms and inference rules for first-order logic;\nNegation: \u00acu = (\u00ac\u03c6) u, \u00ac\u25a1uy = \u25a1u(\u00ac\u03c6), \u00ac\u25a1uy = \u25cau(\u00ac\u03c6),\n\u00ac(\u2200xy) = \u2203x(\u00ac\u03c6), \u00ac(\u2203xy) = \u2200x(\u00ac\u03c6);\nFuture: (\u03c6s)t = \u03c6u if u = s + t, \u03c6s = Qt if s = t,\n(\u03c6\u2227 \u03c8)u = Yu \u2227 \u03c8u, (\u25ca\u03b1\u03c6)\u03c5 = \u25ca(\u25ca\u03c5\u03c6),\n(\u03c6\u2228 \u03c8)u = Yu \u2228 \u03c8u, (\u03c6\u03c5), \u25a1u(\u25a1vy) = \u25a1(\u25a1uy);\n\u25a1: \u25a114 = 4, \u25a1u\u03c6 = \u22270<i<u \u03c6i, including the special case \u25a1o \u2264 \u03c6,\nwhere we define \u03c60 := \u03c6 for notational convenience;\n\u25ca: \u25ca14 = 4, \u25cau\u03c6 = Vo<i<u \u03c6i, including the special case \u03c6 \u2264 \u25cau\u03c6;\nMono: Yu \u2264 \u25cau+16, u+16 \u2264 \u03c6u, and if 6 < \u03c8 then\n\u25a1st, \u25c7sY \u2264 \u25catY, Ys \u2264 Yt, \u2200xy \u2264 \u2200x\u03c8, \u2203x6 \u2264 \u2203x\u03c8;\n\u2203: \u2203x\u03c6 = p[x := 1] \u2228 \u2203yq(x := y1), (\u2203x4)u = \u2203x(\u25a1pu), where y is a fresh variable and u is a constant or a fresh term (note that y1 represents y at 1 time unit later);\n\u2200: \u2200x\u03c6 = p[x := 1] ^ \u2200yq(x := y1), (\u2200xy)u = \u2200x(\u25a1pu), where y is a fresh variable and u is a constant or a fresh term;\nInduction: \u03c61\u2227 \u2200x(\u25a1x\u03c6\u2192 \u25a1x+1\u03c6) \u2264 \u2200xx\u2022\nNote that rules in \u2211 is only valid for primitive propositions in \u2211, due to the exclusive nature of the fact that each position of the \u03c9-word (as a semantic structure) has one and only one letter from \u03a3.\nIndefinite conjunctions and disjunctions, such as \u22270<i<u \u03c6i and Vo<i<u \u03c6i, with \u25a1 representing time-shifted evaluation of 4, are not part of our formal syntax in the logic. They are introduced to concisely interpret the seman- tics of \u25a1u and\u25cau as intermediate steps of the equational proofs using propositional reasoning when needed.\nEquational rules \u2203 and \u2200 represent least fixed point and greatest fixed point properties of \u2203 and \u2200, now that we have the starting point 1 in N+.\nNote that even thought \u25a1t and \u25cat can be expressed using finite conjunctions and disjunctions, we allow variable lengths of the conjunction and disjunction formulas which can be further quantified. This is a source of the expressive power for TELN+."}, {"title": "Undecidability of TELN+", "content": "The proof is by a reduction from Post's Correspondence Problem (PCP). Consider a finite alphabet \u2211 = {a1, a2,...,ar}. An instance of infinite PCP consists of m pairs (ui, vi) of words from \u2211* and the question is whether there exists a finite sequence of indices i0, i1, ..., ik such that Ui0 Ui1 \u00b7\u00b7\u00b7 Uik = Vio Vi1... Vik. Although technically fundamentally distinct, our proof strategy draws inspiration from [19, 20, 21]. The key distinction is that for HyperLTL, the first-order variables are instantiated and quantified over traces \u03c0, which are \u03c9-sequences over a suitably given alphabet. For TELN+, our first-order variables are instantiated and quantified over time-lengths, which are integers in N+.\nTo prepare for the proof, we introduce a couple of lemmas that capture more general patterns than in Example 3 for word sequence correspondences. These lemmas also help illustrate the expressive power of TELN+."}, {"title": "Expressiveness", "content": "We demonstrate the expressive power of TELN+ through three exercises. One is to fully embed LTL [16] in TELN+; the second is its relationship with B\u00fcchi automata; and the third is to represent Allen's temporal relations as logical constructs in TELM+ through the set up of TCL [17]."}, {"title": "TELN+ and Linear Temporal Logic", "content": "Our main reference for LTL is [22]. For a gentler introduction, please refer to this textbook [23]. We adjust the set up for atomic propositions so it is at the same level of abstraction as our TELN+ set up. LTL formulas over an alphabet \u2211 is defined as:\n\u03c6 ::= a | \u00aca | \u00ac\u03c6 | \u03c6\u2227 \u03c6 | \u03c6\u2228 \u03c6|X\u03c6 | F\u03c6 | G\u03c6 | \u03c6\u016a\u03c6 | \u03c6\u0174\u03c6 | \u03c6\u039c\u03c6 | YRY\nwhere a \u2208 \u03a3.\nThe satisfaction relation |= between \u03c9-words a = \u03c3[1]\u03c3[2] \u00b7 \u00b7 \u00b7 at a time point i over \u2211 and formulas is defined as:"}, {"title": "TELN+ and B\u00fcchi Automata", "content": "LTL formulas can be translated systematically to several forms of \u03c9-automata [22], which represent the class of \u03c9-regular languages [24, 25]. On the other hand, LTL does not capture the entire class of \u03c9-regular languages: they capture the sub-class of star-free \u03c9-regular languages only [26].\nA B\u00fcchi automaton is a non-deterministic finite automaton (NFA) A = (Q, \u03a3, qo, \u0394, F) that takes \u03c9-words over \u2211 as input. As usual, Q is a finite set of states, \u2211 is the input alphabet, qo \u2208 Q is the initial state, \u0394 \u2286 Q \u00d7 \u2211\u00d7Q is the set of transitions, and F(\u2286 Q) is the set of accepting states. A run of A on \u03c9-word \u03c3[1]\u03c3[2]\u03c3[3]\u00b7\u00b7\u00b7 is an infinite sequence \u03b4 of pairs from Q \u00d7 \u2211, with \u03b4 = (p[1], \u03c3[1])(p[2], \u03c3[2])(p[3], \u03c3[3]) \u00b7 \u00b7 \u00b7 such that (p[i], \u03c3[i], p[i + 1]) \u2208 \u0394 for all i \u2265 1, where p[1] = qo. We write R(A) for the set of all runs of A, which is a subset of (Q \u00d7 \u03a3)\u03c9. We say d is accepting (an accepting run) if there are infinitely many i with p[i] \u2208 F. We define the \u03c9-language recognized by A as L\u03c9(A) = {\u03b1 \u0395 \u03a3\u03c9 | there is an accepting run of A on a}. If an \u03c9-language L is recognized by some B\u00fcchi automaton A, we call L \u03c9-regular."}, {"title": "TEL and Allen's Temporal Interval Relations", "content": "Allen's Interval Algebra [4] is motivated from the need for AI systems to model space and time in a qualitative, \u201chuman-like,\u201d manner. The basic unit of the algebra is intervals on the real line, which can represent the duration of events, tasks, or actions over time. This algebra formalizes relations such as precedes (i.e., before) and overlaps to encode the possible configurations be- tween those intervals. Allen's Interval Algebra has been used primarily as a qualitative constraint language, with applications that involve planning and scheduling, natural language processing, temporal databases, and multime- dia databases. Halpern-Shoham logic (HS-logic [27]) is a well-known logical framework that incorporates Allen's Interval Algebra as a formal component of the logic. HS-logic contains modal operators representing Allen's binary relations between intervals that include: begins or started-by (B), during or contains (D), ends or finished-by (E), overlaps (O), meets or adjacent to (A), later than (L), and their converses. For example, <B> \u03c6 reads that \u201cthere is an interval beginning the current interval, in which \u03c6 holds.\u201d Therefore, the basic building block of reasoning in HS-logic is an interval, with its intrinsic expressive power grounded in the semantic structures [28, 29].\nTemporal Cohort Logic (TCL [17]), a precursor of this paper, was devel- oped to explicitly capture Allen relations as (binary) modal operators in the logic, rather than in the model (as in HS-logic). Formally, TCL formulas are defined as:\n\u03c6, \u03c8 ::= p | \u00ac\u03c6 | \u03c6 \u039b \u03c8 \\ \u03c6 \u2228 \u03c8 | \u03c6\u03a7\u03c8,\nwhere atomic propositions p are drawn from the same predefined set Prop. Binary modal operators X are drawn from the collection {A, L, B, E, D, O}, with respective intended denotations similar to HS-notations. To both relate"}, {"title": "Applications in Biomedicine: an Outlook", "content": "Formal methods in general, and logic in particular, have been applied in biomedicine in two broad categories of scenarios. One is for modeling and simulation in systems biology [30, 31, 32, 33, 34], and the other is for modeling phenotypes of biological organisms [2, 3, 17]. The work reported in this paper is motivated from the need to advance the scope of the latter.\nIn biology, phenotype represents the collection of observable traits of an organism, comprising morphology and physiology at the levels of the cell,"}, {"title": "Discussion", "content": "Given the extensive body of work and sustained interest in temporal logics, several remarks are in order to clarify the shared theoretical grounding and distinct features that differentiate TEL from existing logical frameworks, as well as open-ended research topics."}, {"title": "Trade-off of expressive power between syntax and semantic structures", "content": "There is in general a set-up decision between the syntax and semantics of a logical framework. The more rich and expressive the semantic structures allowed, the less need there is to enrich the syntactic constructs. On the other hand, the simpler the semantic structure, the richer the syntactic logical constructs are required to attain similar overall expressive power. Therefore, we consider the syntax and semantic structures together as a whole package for the expressive power of a logic. Minimizing both while still achieving similar expressive powers would be a worth-while goal for simplicity and elegance, as well as for applications.\nWe use several examples to illustrate this point. In HS-logic [27], Allen's binary relations between intervals are expressed using unary modal operators. Its semantic structure models the possible corresponding binary relations, with the computational complexity and expressive power mostly afforded from the semantic structure side [28, 29]. In HyperLTL [19, 20, 21], the expressive power comes from the extension of LTL by adding traces (paths)"}, {"title": "Minimalist nature of first-order quantifications on time-length in TEL", "content": "In contrast, TEL uses the same semantic structures as those in LTL, formal- ized generally through a monoid M structure that covers discrete linear time and dense linear time. The only addition in syntax is the introduction of time-length variables and its first-order quantifications. Time-terms are ex- plicitly and independently defined syntactic entities with addition as the only required operation, in the form of s + t. We can then use first-order quanti- fiers and modal operators by turning any TEL formula \u03c6 into a meaningful monadic predicate ft. Because of the simple and straightforward manner of the syntax and semantics, TEL can be readily enriched or modified to other settings, such weighted, metric, and interval logics."}, {"title": "Expressiveness, decidability, complexity, and spa- tial reasoning", "content": "Although we have established the undecidability of TELN+, many theoreti- cal questions remain. For example, what is the overall expressive power of TELN+ in terms of the language class defined by TELN+-formulas? It seems anticipatable that TELN+ would be able to capture, in addition to \u03c9-regular languages [24], other types of \u03c9-languages constructed using the approach of various types of \u03c9-automata [18].\nWhat is the value and consequence of explicitly incorporating subtraction (-) or past into time-length terms (s \u2013 t; with positive results required)? There are several studies that highlight the incorporation of \u201cpast\u201d being a line between decidability and undecidability (e.g., [43, 44]), but that should not completely deter us from incorporating it as a construct in forming de- cidable fragments.\nWhat are the decidable fragments of TELN+? In general, decidability results can be achieved by automata-theoretical constructs [22, 44]. Based on the development in Section 5, it seems that the negation-free, \u2203, \u25a1t, ]"}, {"title": "Conclusion", "content": "We introduced Temporal Ensemble Logic, a timed monadic, first-order modal logic for linear-time temporal reasoning with an intuitive and minimalistic set of temporal constructs. We provided syntax and semantics for TEL and established basic semantic equivalences, with distinctions between dense and discrete settings. We proved the undecidability of the satisfiability of TEL for the positive integer domain, and discussed its expressive power through \u03c9-languages, as well as offered application outlook in biomedicine. The hope is work to inspire a line of concentrated work to develop a foundation for logic-based phenotyping in biomedicine. Clearly, much remains to be done."}]}