{"title": "Atmosphere: Context and situational-aware collaborative IoT architecture\nfor edge-fog-cloud computing", "authors": ["Guadalupe Ortiz", "Meftah Zouaib", "Okba Kazar", "Alfonso Garcia-de-Prado", "Juan Boubeta-Puig"], "abstract": "The Internet of Things (IoT) has grown significantly in popularity, accompanied by increased capacity and lower\ncost of communications, and overwhelming development of technologies. At the same time, big data and real-\ntime data analysis have taken on great importance and have been accompanied by unprecedented interest in\nsharing data among citizens, public administrations and other organisms, giving rise to what is known as the\nCollaborative Internet of Things. This growth in data and infrastructure must be accompanied by a software\narchitecture that allows its exploitation. Although there are various proposals focused on the exploitation of the\nIoT at edge, fog and/or cloud levels, it is not easy to find a software solution that exploits the three tiers together,\ntaking maximum advantage not only of the analysis of contextual and situational data at each tier, but also of\ntwo-way communications between adjacent ones. In this paper, we propose an architecture that solves these\ndeficiencies by proposing novel technologies which are appropriate for managing the resources of each tier: edge,\nfog and cloud. In addition, the fact that two-way communications along the three tiers of the architecture is\nallowed considerably enriches the contextual and situational information in each layer, and substantially assists\ndecision making in real time. The paper illustrates the proposed software architecture through a case study of\nrespiratory disease surveillance in hospitals. As a result, the proposed architecture permits efficient communi-\ncations between the different tiers responding to the needs of these types of IoT scenarios.", "sections": [{"title": "1. Introduction", "content": "The Internet of Things (IoT) has become very popular in recent years;\nhowever, the term, introduced by Kevin Ashton in 1999 [1], is now more\nthan two decades old. When it was first introduced the scope of the IoT\nwas reduced to the supply chain, but today it refers to a wide spectrum of\ndomains and is used in a broader sense, referring to the digital inter-\nconnection of objects and devices that can obtain and share information\nthroughout platforms, providing added value to businesses, adminis-\ntrations and citizens.\nThe rise of the IoT has been accompanied by the improvement and\nreduction in costs of technology and communications, as well as an\nimprovement in data analysis software; in particular, big data and\nstreaming data processing, allowing for real-time decision making.\nFurthermore, it is not only a question of greater profits for companies;\nwe live in a so-called fast-paced society and citizens want everything\ninstantly and they want it to be adapted to their situation and specific\ncontext. Furthermore, they have already imposed a need to be part of\nsmart cities, which requires the processing of large amounts of data and\nwhich are even more intelligent thanks to data democratization and\ncitizen data sharing.\nTherefore, the IoT requires not only the management of device data,\nbut also the exchange of information between multidisciplinary plat-\nforms. The vast amount of data from multiple smart devices can and\nshould be shared to provide added value and enable a broader global\nunderstanding of the domain in question. Collaborative IoT (C-IoT)\ntakes account of IoT in the scope of heterogeneous domains and envi-\nronments where sensors, gateways and services can interact at different\nlevels; sensors provide their sensed data; gateways add intelligence and\ntake action or communicate information at a higher level; lastly, services\nuse the information provided by the gateway to improve the quality of\nlife of people and business processes."}, {"title": "2. Background", "content": "This section firstly introduces the relationship between edge, fog and\ncloud computing and, secondly, it places it within the context of the C-\nIoT. Then, Ed-SOA is introduced, followed by an explanation of CEP and\nmessage brokers. Afterwards, context and situational awareness are\nexplained. Finally, agent-oriented software is defined."}, {"title": "2.1. Edge, fog and cloud computing", "content": "It is remarkable that we can find various definitions for edge and fog\ncomputing in the literature and that, among these definitions and de-\nscriptions, there are sometimes overlaps and unclear boundaries.\nFog computing and edge computing seem similar, as both involve\nbringing intelligence and data processing closer to the data source.\nHowever, in fog computing, intelligent processing is expected to take\nplace in a gateway in the local area network where the endpoint nodes\nsubmit data to and from which they receive processed data back,\nwhereas, in edge computing, intelligent processing is expected to take\nplace in final devices near the edge of the network [10].\nWhen we address edge computing we are referring to a hardware\ninfrastructure with computing capacities, which is generally located\nnear the devices making use of said infrastructure. In the IoT scope,\nnormally so-called IoT devices provide such computing capacities and\nare named edge nodes, edge devices or smart devices, even though,\ndepending on the granularity of the particular scenario, the devices may\nhave higher or lower computation capacity. Having such computing\ncapacities in the device itself provides several advantages: the first one is\nthat we can preprocess the data obtained in the edge device and\ncommunicate such information to external devices only when relevant\nor necessary, saving edge device resources and improving latency; the\nsecond one is that the device can make its own decisions, if so pro-\ngrammed, particularly useful when there is no network connection.\nWith millions of interconnected devices, the generated data can be\nsignificantly extensive. Therefore, it is not possible to use the traditional\nhardware environments and software tools to manage and process the\ndata with an acceptable response time, but fog computing has the po-\ntential to provide better performance for real-time services [11]. In this\nsense, fog computing responds to the need of an intermediate layer\nbetween the cloud and the smart end devices, where the fog provides\nsupport for low latency real-time analytics of data that cannot be pro-\ncessed in the end-device as well as to interrelate and process together\ndata from different devices and to provide support to communications\nwith external services. Edge devices are usually limited in computing\nand storage but may process certain data the instant they sense them and\nmay make quick decisions that do not depend on other devices' data [12,\nchapter 3]. Therefore, the use of fog computing does not involve either\ndoing all the analysis on the edge or not doing analysis on the edge, but\npromotes doing as much processing on the edge as is possible and\nnecessary within realistic constraints and processing the rest of the in-\nformation in the fog. This way, some data are processed by applications\nrunning on edge devices within the network and the rest of the data is\nprocessed by a node in the fog, which is also responsible for intelligently"}, {"title": "2.2. Collaborative Internet of Things", "content": "C-IoT [17] considers the IoT in the scope of heterogeneous elements\nand domains, where sensors, gateways and services potentially intero-\nperate at different levels; sensors provide their sensed data; gateways\nadd intelligence to them and undertake actions or report information to\na higher level, and services utilize the information provided by the\ngateway to enhance people's life quality or business processes.\nCollaboration on the IoT takes place on three concentric levels: the\ninnermost level would be the individual, the intermediate level would be\nthe industrial level and finally the outer level would be the infrastruc-\nture. At all these levels, we can find a pyramid of applications that allow\nthe materialization of the C-IoT: at the base of the pyramid we would\nhave everything related to the sensor, at the intermediate level, the\ngateway and, finally, at the top of the pyramid, the services offered to\nthe end user [17].\nFor example, in the application domain of a pandemic, sensors of\nmedical devices, patient data, medicines, etc., would be placed at the\nbase of the pyramid; in the gateway we could have patient histories,\nresearch results and known effects of the treatments; thirdly, in the\ncloud there would be a large bank of services to access treatments by age\ngroup, results, patient evolution depending on the treatment, affected by\ngeographical area or admitted to each hospital, etc. We therefore have\nindividual data (patients), industry data (treatments) and infrastructure\ndata (hospital center information).\nHaving said that, we can easily identify the previously explained\nterms, edge, fog and cloud with the three levels in the pyramid: sensing,\ngateway and services, respectively.\nBesides, what will give us great added value will be the combination\nof data obtained from sensors or information systems with data provided\nby citizens, and will allow us greater control and monitoring of various\nC-IoT scenarios, such as e-health [4], smart cities [18], Industry 4.0\n[19], etc. To do this, we will need to be able to process heterogeneous"}, {"title": "2.3. Event-driven service-oriented architecture and complex event\nprocessing", "content": "SOA represents a paradigm for the design and implementation of\nloosely coupled distributed systems where services are the main\nimplementation mechanism. These architectures deliver easy interop-\nerability among third-party systems in a flexible and loosely coupled\nway. This way, costs are reduced when system modifications or im-\nprovements are required, since the system will be easier to maintain and\nevolve [20].\nSuccess and growth in the use of service-based systems require a new\nservice infrastructure that allows us to interconnect and maintain ap-\nplications flexibly. This infrastructure must support well-known web\nservice standards and provide support for a message middleware [20].\nThese requirements are fulfilled by an Enterprise Service Bus (ESB). An\nESB facilitates interoperability between various applications and com-\nponents through standard service-oriented interfaces, facilitating the\ndevelopment of complex systems based on a SOA and allowing appli-\ncations to be offered as services in the ESB. The bus provides other\nadditional advantages, among which we should highlight the assurance\nof system scalability.\nED-SOA, or SOA 2.0., evolves from traditional SOA. Unlike tradi-\ntional SOAs where communications are mainly carried out through\nremote procedure calls, in SOA 2.0. communication between users,\napplications and services is mainly conducted by means of events [21].\nThis new paradigm also benefits from the use of an ESB. In this case, the\nESB will allow us to integrate various heterogeneous data sources and\ninvocations to various distributed systems and applications [22]."}, {"title": "2.4. Context and situational awareness", "content": "Dey et al.'s context definition in [27] is specially well-known, where\n\"Context is any information that can be used to characterize the situation of\nan entity\"; such an entity can be almost anything an object, a device, a\ncitizen, et cetera, which can be useful to improve the interaction be-\ntween the end user and the computer system or application, as well as to\nenhance the functionality of the application itself. Context will be spe-\ncific to each application and system domain and even to each system\nuse.\nContext awareness supports the fact that context information, ob-\ntained from the system environment, is properly used by the system to\nimprove its quality in terms of user satisfaction, and accuracy in terms of\nthe functionality of the system itself. That is, a context-aware system is\nexpected to use information such as location, company, known social\nattributes, personal status, domain-specific known facts and other\navailable information to anticipate system needs so that more custom-\nized systems can be delivered. Therefore, a system is context-aware if it\nuses the context to provide relevant customized information and/or\nservices to the user or to the system itself, adapting its system behavior\nto the particular needs of the specific user or system [28]. Context and\ncontext awareness have become a key issue for decision making in\ngeneral and for real-time decision making in particular [29].\nThis leads us to the concept of situational or situation awareness,\noriginally defined by Endsley [30] as \"the perception of elements in the\nenvironment within a volume of time and space, the comprehension of their\nmeaning, and the projection of their status in the near future\". If we extend\nsuch a concept to computing situational awareness, we can think of it as\nthe understanding of the events related to the entity and its context in a\ngiven situation. As a result, the situation would be the result of context\ninformation pieces being interpreted and aggregated, in order to obtain\nmore meaningful situations of interest."}, {"title": "2.5. Agent-oriented software", "content": "In 1993, Shoham defined agents as \"an entity whose state is viewed as\nconsisting of mental components such as beliefs, capabilities, choices, and\ncommitments\" [31], where the choices or actions will be based on the\nagent's decisions, the latter being determined by the agent's beliefs\naccording to its and other agents' capabilities.\nMore recently, in 2003, Silva et al. defined the concept of agent and\nmulti-agent systems (MAS) in the field of software engineering and\ndistributed systems [32], where agents are expected to represent\nautonomous components in software systems. An agents behavior is\ndefined based on its plans and actions, its characteristics and the inter-\naction with other agents. In addition, they are considered proactive\nthanks to their autonomy to perform tasks. Besides, they are adaptive,\nsince they adapt their status and behavior by responding to messages\nfrom other agents.\nIn MAS, the agents are autonomous and their characteristics allow\nthem to interact with the environment and other agents. A MAS is\nconsidered to be an object-oriented system that is associated with an\nintelligent meta-system. In this manner, an agent is seen as an object that\nhas an intelligence layer, which comprises a series of capabilities such as\nuniform communication protocol, perception, reaction and deliberation,\nall of which are not inherent to objects. In MAS environment, an Agent\nCommunication Language (ACL) is required to send a message to any\nagent, FIPA ACL being a well-known one [33]. We will also require an\nagent platform and a well-known platform is JADE [34], the Java Agent\nDevelopment Framework which permits developing agent-oriented ap-\nplications according to the FIPA patterns. JADE is based on the coexis-\ntence of several Java Virtual Machines (JVMs) distributed over multiple\ncomputers: each computer will have a JVM, with a container of agents;\nthe JADE platform runs at the main container."}, {"title": "2.6. State of the Art for Edge-Fog-Cloud Software Architectures", "content": "Although we can find multiple works that deal with edge computing,\nfog computing, edge-fog, fog-edge and so on, the vast majority of them\napproach it from a network communications and communication pro-\ntocols perspective. We have found few works that study the software\narchitecture that allows developers to take better advantage of the data\nflowing between the three layers -edge, fog and cloud. In this sec-\ntion, we will summarize some of their shortcomings that motivate our\nproposal; a more exhaustive analysis of such and other proposals can be\nfound in the related work section.\nAmong the proposals found that feature a software architecture with\nthe three layers mentioned above [2-4,35-37], we have noticed that\nmost of them provide computing mechanisms for both the fog and the\ncloud layer, but rarely provide computational mechanisms for the edge,\nand are limited to sending the data obtained by the device at that layer.\nThus, these proposals [2,35-37] do not take advantage of edge\ncomputing being able to facilitate faster decision making directly be-\ntween edge devices when the scenario demands it.\nAnother shortcoming of many of these proposals is the fact that\ncommunication between layers is not always in real time [2-4,35,36],\nwhich limits the ability to make timely decisions in the specific appli-\ncation domain. Likewise, communication between edge nodes and end\nusers is rarely facilitated only in [2,36]- which would allow faster\ncommunication for highly relevant situations detected at the edge that\nmay require an immediate response from the end user.\nFinally, we have already pointed out in the introduction the benefits\nthat can be obtained from real-time bidirectional communications be-\ntween the three layers; however, we see that only one of the mentioned\nproposals implements bidirectional communications [37], which,\nhowever, is one that does not provide edge computing.\nFor all these reasons, we believe it is necessary to propose a new\nsoftware architecture that provides all these added benefits to facilitate\nfaster and more effective decision-making. In order to choose the tech-\nnologies that will form part of each level of the architecture, we have\ndrawn on our previous experience, through which we have observed the\nusefulness and efficiency of using agents at the edge and CEP in the fog\nand CEP-enhanced SOAs in the cloud. This is not only based on our own\nexperience, we see that several proposals are emerging that propose the\nuse of agents as an efficient solution for decision making at the edge in"}, {"title": "3. Illustrating scenarios for C-IoT", "content": "In this section we provide two illustrative examples of C-IoT sce-\nnarios; the first one is focused on hotel amenities and energy con-\nsumption monitoring and the other on hospital patient monitoring."}, {"title": "3.1. C-IoT scenario for hotel amenities and energy consumption\nmonitoring", "content": "Let us imagine a large hotel totally automated with new technolo-\ngies. We could have several IoT devices in each room; let's suppose we\nhave the following devices:\n\u2022 Air conditioning/heating: this IoT device would detect the temper-\nature in the room and activate air conditioning/heating to adapt to\nthe user's comfort temperature. The user can program its operation,\nfor instance, according to the time, the number of people in the room\nand the activity (for example, if he/she is taking a bath).\n\u2022 Bath/Jacuzzi: this device can also be programmed to the user's fa-\nvorite temperature; it could also be programmed at a certain time\nand its information could be valuable not only for the air condi-\ntioning/heating device, but also, for example, for the background\nmusic device.\n\u2022 Background music: when the bath is running, the background music\ndevice is switched on and relaxing music is played. Or perhaps,\ndepending on the time of day, if the bath is used in the morning it\ncould play upbeat music, and relaxing music in the evening.\nWe have some observations to make regarding communications. On\nthe one hand, we see that several edge devices will require information\nobtained from other edge devices in the room: for instance, the air\nconditioning and background music devices should know when the bath\nis activated/deactivated. On the other hand, communication with higher\nlevel actors is also required. First of all, the user must have a way to\nprogram all his/her tastes through an interface, which would be trans-\nlated into conditions for the edge devices. But the hotel manager might\ndirectly program a whole hotel floor according to the tastes of a regular\ncustomer or a group of regular customers. The hotel manager can also\nreceive information from all the rooms, for example, on each room's\nenergy consumption levels or temperature, which could result in rules\nfor energy saving or fire detection."}, {"title": "3.2. C-IoT scenario for hospital patient monitoring", "content": "Let us imagine another scenario, the hospitals in a certain region.\nSuppose we find ourselves in the context of a time of year with a high\nincidence of contagious respiratory diseases. In this scenario, the hos-\npital could be equipped with a set of devices, such as:\n\u2022 Access devices: to enter the rooms of patients with such respiratory\ndiseases, you can only access with ID cards that, in addition to\ndenying passage to unauthorized visitors, keep information about\nwhich people and when they have accessed the room.\n\u2022 Ventilators: ventilators are equipped with a series of sensors that\ndetect the O2 and CO2 blood levels as well as the patient's flow and\nproximal pressure.\n\u2022 Windows: windows are equipped with actuators to open and close for\nroom ventilation, when necessary.\n\u2022 Exterior emergency light: rooms are equipped with an exterior\nemergency light to indicate that a doctor needs to come to the room\nurgently.\n\u2022 Interior emergency light: rooms are equipped with an internal\nemergency light to indicate that attention is needed due to an event\nthat is happening outside the room.\n\u2022 Control panel with patient local history: doctors would insert infor-\nmation about administered medication and any reactions to the\nmedication into it. Other doctors can also see the aforementioned\ninformation in it, as well as relevant messages related to the patient\nhistory.\nConcerning communication between edge nodes, if the O2 blood\nlevel detected by the ventilator is below a certain threshold, the external\nlight of the room would be immediately activated, the door would be\nunlocked and the room would be ventilated. If the number of rooms with\nthe external light on is over a set threshold, the internal lights of the\nremaining rooms are illuminated for a short period of time so the doctors\ninside them are aware of this fact.\nIn the hospital, we could have a control center that receives the\nrelevant information from all the edge nodes in each room on every\nfloor. If the number of rooms on the same floor with an event that has\nactivated the outside light happened to go above a certain threshold, the\ncontrol center would receive an alert and immediately send more doc-\ntors to that floor.\nWe could also have access to the patient history from the control\ncenter. The control panel in the room would send all recorded infor-\nmation about medicines and reactions to the aforementioned center to\nbe processed, thanks to which we could detect if the patient is being\ngiven some medicine that previously gave him/her a reaction and send a\nmessage back to the control panel at the edge. We could also detect if the\nsame medicine is causing other patients any side effects, information\nthat could be raised to the cloud, which research laboratories might be\nsubscribed to. In a scenario such as the current one, with a pandemic and\na massive shipment of vaccines to different parts of the world, labora-\ntories would benefit from knowing about possible side effects of a\ncertain severity in real time, not only because the knowledge of side\neffects in general could lead to measures. This would be particularly\nuseful because receiving these alerts in real time could lead to the same\nadverse effect arriving from different hospitals on the same date, raising\nsuspicions about a defective batch and leading to measures being\npromptly taken, such as stopping the production of the medicine and\nurgently alerting other recipients who have received vaccines from the\nsame batch, etc.\nAs we have seen, there are several scenarios where an architecture\ncombining edge, fog and cloud computing might be necessary. In each\nscenario, we might require some adjustments in the architecture with\nregards to the number of edge nodes, fog gateways and cloud nodes. In\nthe following section, we will explain the flexible architecture suggested\nfor such scenarios."}, {"title": "4. Atmosphere architecture", "content": "Atmosphere is a collaborative architecture for the IoT, composed of\nseveral edge, fog and cloud nodes which collaborate in a service and\nagent-oriented ecosystem through the cooperation of software agents\nand CEP.\nWe will have three layers in the architecture, such layers will\nconceptually focus on sensing data, acting as a gateway and offering\nservices and will be materialized in the corresponding edge, fog and\ncloud nodes. Fig. 1 shows an illustrating architecture where one cloud\nnode, two fog nodes and five edge nodes have been included. However,\nthe architecture could have additional nodes of all types (to illustrate\nthis, some extra fog and edge nodes are also represented in smaller\nsizes). In any case, the architecture is expected to have more edge nodes\nthan fog ones and in turn more fog nodes than cloud ones."}, {"title": "4.1. High level layer and component description", "content": "As previously mentioned, our architecture will have edge nodes, fog\nnodes and cloud nodes, as explained in the following paragraphs.\nEdge nodes: we must remember that IoT devices, represented as\nedge nodes, tend to have limited computing resources, that is why (1)\nthe software they incorporate must consume few resources in execution\nand (2) communications through the Internet must be limited as much as\npossible to save resources. With this objective, we have deployed a\nsoftware agent in every edge node, to filter the information that does\nneed to be transmitted from the one that will only be used internally,\nsince agents' consumption is low and they have autonomy and enough\nintelligence and decision capacity. The agent's intelligence is pro-\ngrammed based on a series of behavioral rules [46]; this way, the device\nbehavior will be able to adapt to the environment, making decisions\naccording to the information obtained from its sensors and to the in-\nformation obtained from other edge nodes connected to the network and\nfrom the fog node. The agents will be able to communicate with each\nother, processing and analyzing the information sensed and received\nfrom other actors and making the corresponding decisions without the\nneed to contact the user.\nFog nodes: these are devices that will act as gateways between the\nIoT devices on the edge and (a) the user and (b) the nodes in the cloud\n[47]. On the one hand, all communications of the software agents with\nthe end user will take place through a message broker in the gateway:\nedge devices can send messages to a topic in the broker which the user is\nsubscribed to. On the other, interactions between the fog and the cloud\nwill also be done through other message broker in a bidirectional way.\nSaid broker will be connected to a CEP engine in the fog node to process\nthe received data and detect relevant information for the other party.\nThat is, (1) the cloud sends information to the fog, the CEP engine\nprocesses such information and if a pattern is detected, then it submits\nthe relevant information to the edge; (2) the edge sends information to\nthe fog, the CEP engine processes the said information and if a pattern is\ndetected then it submits the relevant information to the cloud. Of course,\na pattern can be detected according to the information received both\nfrom the edge and the cloud.\nCloud Node: The cloud node has a two-way communication system\nwith nodes in the fog. On the one hand, the cloud node subscribes to the\nmessage topics of the nodes in the fog, so it can obtain information from\nall these nodes and make higher level decisions. This information is\nacquired along with other heterogeneous data sources and processed\nthrough a CEP-enabled SOA 2.0. The CEP engine might detect situations"}, {"title": "4.2. Communications and insight on the components in atmosphere", "content": "In this section, we will give further details on the internal architec-\nture of each layer in Atmosphere and explain all the possible commu-\nnications that can take place between its components. Remember that\nthe edge will not communicate directly to the cloud, but will do so\nthrough the fog node. All these communications are made using a\nlightweight messaging broker through the MQTT protocol.\nEdge nodes insight and communication\nIn the edge nodes, we are going to have the following modules for\nevery agent:\n\u2022 Environment components. They consist of sensors and actuators of\nthe domain in question. These objects are able to communicate to\nprovide data (measurements) or perform commands.\n\u2022 Rules Database (DB) component. It collects the agent's knowledge\nand contains rules that help the agent to make decisions.\n\u2022 Analysis module. It checks if the rules are satisfied based on data\nobtained from sensors and data sent by other agents. These rules are\ndefined in the rule database. If the agent detects that a rule is satis-\nfied it sends information to the parties involved (other agents, and/or\nthe fog node).\nTherefore, each edge node will be driven by an agent. The agent will\naccess the information sensed from a specific sensor and/or will acti-\nvate/deactivate the actuator in question. It will have a set of rules to\ndetect information of interest to be submitted to other agents and/or to\nthe fog node. Besides, it will communicate with the latter thanks to the\ncommunication module. All communications are supported by the JADE\nplatform, which we have used to implement our agent-oriented\nsoftware.\nTherefore, there are several communications that an edge device\nmight be involved in, as shown in Fig. 4\n1. First of all, (1a) the sensors in the device will sense the information\nfrom the environment and (1b) the analysis module will submit the\nsensed information to the communication module in the edge device.\n2. Secondly, when necessary, according to the rules programmed in the\nagents, the sensed information will be transmitted to the remaining\ninterested edge devices within the same network.\n3. Analogously, the device will receive information from other devices\nin the network.\n4. Besides, depending on the rules programmed in the agent and the\ndecisions made, the edge device (4a) might submit information to the\nmessage broker in the gateway and/or (4b) activate an actuator.\nFog Nodes Insight and Communications\nIn the fog nodes we are going to have the following components:\n\u2022 Component for the management and coordination of edge agents:\nJADE platform. It offers flexible and efficient messaging, managing\nprivate incoming message queues for each agent. Agents can access\ntheir queue in a variety of ways. In addition, communications and\ncoordination between them is done through message passing\nfollowing the ACL standard.\n\u2022 Real-time data analysis component: Esper CEP engine. It is a specific\nsoftware capable of real-time analysis of the data received in the\nform of events. The patterns to detect relevant situations of interest\nin the domain in question should be deployed in advance in this\nengine -some examples of CEP patterns can be found in Section\n5.2-. In the case of the fog node, the CEP engine (1) will receive the\ndata submitted from the edge, the cloud and/or other fog nodes, (2)\nwill check if any of the predefined and deployed patterns is triggered\nby such data and (3) will submit the detected relevant situations\neither to the edge, the cloud or other fog nodes depending on the\nparticular pattern being triggered -further details are given\nbelow. Please note that messages received in the CEP from\ndifferent sources may include the same or different fields to be pro-\ncessed. In case they include the same fields, an additional field may\nbe included to identify the source in order to better coordinate their\nprocessing.\n\u2022 Component for messaging incoming and outgoing data to the node:\nMosquitto message broker. A message broker is software that allows\napplications and systems to communicate with each other and ex-\nchange information. The message broker can enable the translation\nof messages between different messaging protocols, allowing third\nparties to communicate with each other, regardless of their lan-\nguages and implementation platforms. In our fog node, as we will\nexplain below, it will permit bidirectional communication between\nthe agents in the edge and the CEP engine in the fog, between the\nlatter and the SOA 2.0 in the cloud and between CEP engines of two\nfog nodes.\nTherefore, on the one hand, the JADE platform that supports the\nagents distributed among the edge nodes, and on the other hand, a CEP\nengine. Since all messages received in the fog are formatted inside our\nown architecture, they will already be in a homogeneous format, thus\nwe will avoid the need for a SOA 2.0 and an ESB and will only require the\nCEP engine. In the event that our own sources could not be programmed\nto send data in a homogeneous format, we could include a format\nadapter, specific to our devices, prior to sending it to the CEP engine. We\nwill also have a message broker to offer input and output message topics\nto the fog node. The relevant events detected by the edge nodes will be\nsent to the entry topic through the JADE coordination mechanism in the\ngateway; in that same topic, events of interest sent from the cloud or\nfrom other fog nodes will be received. All data received in that topic will\nbe processed by the CEP engine which will upload new situations of\ninterest detected to the cloud, other fog and edge nodes, as programmed\nin the pattern through a new output topic. In addition, the user can send\nnew conditions to the edge nodes through a topic and receive infor-\nmation of interest by the same means. Therefore, communications of the\nfog node, the gateway, with the other participants would be as repre-\nsented in Fig. 5:\nThus, the behavior is as follows:\n1. The fog node will receive the following information:"}, {"title": "5. Case study", "content": "IoT applications for healthcare are taking considerable relevance\nnowadays [48]; for this reason, we have selected this scenario as a case\nstudy for our proposal."}, {"title": "5.1. Description", "content": "Suppose we find ourselves in the scenario of a pandemic of a severe\nrespiratory disease. Let $E$ be the system's set of edge nodes ${e_1,..., e_n}$, $F$\nbe the system's set of fog nodes ${f_1,..., f_n}$ and $C$ the system's set of cloud\nnodes ${C_1,..., c_n}$. Also, $U$ will be the end user ${u}$. Given the set of nodes\n$N = E \\cup F \\cup C \\cup U$, the message sent from the origin node $n_o$ to the target\nnode $n_t$ will be represented as $n_o\\rightarrow n_t$.\nIn this scenario, we could have a hospital equipped with the\nfollowing nodes, as previously represented in Fig. 3:\n\u2022 A series of edge nodes as described in Section 3.2: access devices $(e_1)$,\nventilators $(e_2)$, windows $(e_3)$, exterior emergency light $(e_4)$, interior\nemergency light $(e_5)$ and control panel with patient local history $(e_6)$.\n\u2022 The hospital would also have a fog node to control all the edge ones\n$(f_1)$ and another one for patient admission and staff distribution $(f_2)$.\n\u2022 We will also have a cloud node $(c_1)$ in which we will have pharma-\nceutical laboratories, pharmacies, Ministry of Health and other\nexternal data providers.\n\u2022 Finally, the end user in communication with the edge through the fog\nwill be the surveillance unit $(u)$."}, {"title": "5.2. Agent Rules and CEP Patterns", "content": "In this section, we give some small code snippets to illustrate the kind\nof conditions we can use at each level of the architecture in order to\nobtain added knowledge through the use of CEP and agent-oriented\nsoftware.\nRules and situational-aware data at the edge\nSince several edge nodes are interested in O2 saturation, such a value\ncould be broadcast by the ventilator to all the edge nodes in"}]}