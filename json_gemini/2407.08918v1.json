{"title": "Exploring Knowledge Transfer in Evolutionary Many-task Optimization: A Complex Network Perspective", "authors": ["Yudong Yang", "Kai Wu", "Xiangyi Teng", "Handing Wang", "He Yu", "Jing Liu"], "abstract": "The field of evolutionary many-task optimization (EMaTO) is increasingly recognized for its ability to streamline the resolution of optimization challenges with repetitive characteristics, thereby conserving computational resources. This paper tackles the challenge of crafting efficient knowledge transfer mechanisms within EMaTO, a task complicated by the computational demands of individual task evaluations. We introduce a novel framework that employs a complex network to comprehensively analyze the dynamics of knowledge transfer between tasks within EMaTO. By extracting and scrutinizing the knowledge transfer network from existing EMaTO algorithms, we evaluate the influence of network modifications on overall algorithmic efficacy. Our findings indicate that these networks are diverse, displaying community-structured directed graph characteristics, with their network density adapting to different task sets. This research underscores the viability of integrating complex network concepts into EMaTO to refine knowledge transfer processes, paving the way for future advancements in the domain.", "sections": [{"title": "1 Introduction", "content": "In product design and functional implementation, there is a frequent necessity to solve analogous problems using black-box optimization models. This scenario often leads to increased computational demands and process delays. Addressing this, Evolutionary Many-task Optimization (EMaTO) has emerged as a prominent field, drawing inspiration from human cognitive abilities to leverage past experiences for new challenges [1]. EMaTO research has produced a variety of algorithms, each tailored to solve problems involving analogous computational tasks. Applications of these algorithms span diverse areas, including path computation in multi-domain networks [2], network collaborative pruning [3], architecture search in networks [4], enhancement of recommendation systems [5], optimization of large-scale pre-trained model sets [6], humanoid fault-recovery [7], and model feature selection [8, 9]. These developments indicate the field's growing significance in optimizing complex computational processes across various domains.\nEMaTO algorithms differ from traditional Evolutionary Algorithms (EA) mainly in their integration of a Knowledge Transfer (KT) component, which is based on the concepts that (1) optimization processes generate valuable knowledge and (2) knowledge acquired from one task can benefit other tasks. Crucially, a robust KT mechanism in EMaTO needs to define 'WHAT' is transferred (the content of knowledge) and 'WHO' is involved in the transfer (the entities). Recent research, despite varied definitions and formal expressions, points to task similarity as a key factor in selecting subjects for transfer, utilizing methods like KLD [10], MMD [11], SISM [12], and adaptive posterior knowledge [1]. Sharing knowledge between highly similar tasks often leads to better initial optimization points, faster convergence, and aids in escaping local optima. In contrast, sharing knowledge between less similar or unrelated tasks can increase the challenge of finding optimal solutions and lead to inefficient evaluations, a phenomenon known as negative transfer.\nIn EMaTO, mitigating negative transfer is essential, focusing on the 'WHAT' and 'WHO' of knowledge transfer mechanisms. Knowledge transfer varies in form and method, with elite individual transfer being a prevalent explicit technique where high-performing individuals from auxiliary tasks are directly injected into the target task population. Jiang et al. [13] introduced an approach that segments individuals into distinct blocks prior to knowledge transfer, enabling more granular transfer and effectively reducing the risk of negative transfer due to varying problem dimensions. Implicit transfer, in contrast, involves crossbreeding individuals from different tasks for evolutionary information. Addressing adaptability challenges in these methods for tasks with diverse characteristics, Feng et al. [14] proposed denoising autoencoders to map relationships between different tasks' search spaces, enhancing explicit transfer. This technique aims to reduce computational resource waste and overcome population convergence issues in elite individual transfer due to varying task fitness landscapes. With advances in neural networks, more complex neural network-based methods [15, 16, 17] have been explored for knowledge transfer, yet these have not seen wide adoption due to minimal improvement in transfer effectiveness and increased computational demands.\nAnother significant development has been in methods focusing on determining the subjects of knowledge transfer. The literature identifies two categories of knowledge transfer subjects: individuals and populations [18]. Algorithms that employ skill factors of individuals within a population for knowledge transfer and inheritance are termed multi-factorial algorithms. In contrast, multi-population algorithms assign a subpopulation to each task and facilitate knowledge transfer through inter-subpopulation interactions. While multi-population algorithms typically incur additional computational resource consumption due to the inclusion of evaluation indicators, they often reduce negative task interaction transfer and introduce more diverse methods of knowledge transfer.\nThis paper presents the use of network structures to describe and construct EMaTO frameworks. The motivation behind this approach is to mitigate the expensive optimization costs of assessing task similarity in large-scale many-task optimization scenarios. Previous studies have mostly balanced between minimal additional evaluations and a higher likelihood of negative transfer. To avoid repetitive task comparisons while controlling the frequency and specificity of transfer actions, thereby reducing negative transfer and enhancing EMaTO performance, we propose reconstructing the network structure with individual tasks as nodes and transfer relationships as directed edges. This approach not only controls the interaction frequency of the entire task set but also considers the elimination of negative transfer impacts on tasks through future research on sparsification."}, {"title": "2 Preliminaries", "content": "2.1 Formulation of Multi-Task Optimization Problems\nMulti-task optimization(MTO) refers to a class of evolutionary optimization algorithms that simultaneously optimize multiple tasks by employing strategies such as knowledge transfer and knowledge sharing, thereby improving the optimization performance of each task individually. Mathematically, a set of tasks T to be optimized can be described as follows:\n$T = {T_1, T_2, ...,T_n}$\ns.t. $T_i = min f(X_i^{D_i})$\n$X_i = [x_1,x_2,...,x_i^{D_i}] \\in R^D_i$, $i = 1, 2, ..., n$\nwhere $T_i$ is the $i^{th}$ task in the set T, $f(X_i^{D_i})$ is the objective function of the corresponding task, $D_i$ represents the dimension of the decision space, $X_i$ denotes the solution for the $i^{th}$ task, and $R^D_i$ is the feasible domain for the $i^{th}$ task. In this formalized description, when the number of tasks n is 3 or more, we typically refer to it as a many-task optimization problem. In other words, MTO can be described as a simplified version of MaTO, and both essentially share the same optimization philosophy and specific algorithms. In this paper, we do not intend to make too much distinction between the two.\n2.2 A General Framework of EMaTO\nEMaTO is an advanced form of EAs, distinguished by its capability for inter-task knowledge transfer, akin to the principles of transfer learning [19] in deep learning. This approach leverages task similarities in terms of data or models to enhance learning efficiency on new tasks. Initially, transfer learning primarily involved using data from various tasks to bolster performance in a single task, thereby diminishing the need for extensive manual data labeling and reducing time requirements. As the field progressed, the relevance of task-related data emerged as a crucial factor in determining task similarity and guiding transfer processes."}, {"title": "2.3 Networks", "content": "Networks, serving as data structures to delineate relationships between entities, are integral in representing complex networks. An directed network, denoted as G = (V, E), where V is the set of nodes and E is the set of ordered pairs of edges, such as (u, v), indicating a unidirectional relationship from node u to node v. In EMaTO, networks facilitate the understanding of intricate relationships and trends, aiding decision-making and system optimization. Central tasks in network analysis, such as link prediction [21], node clustering [22], and node classification [23], provide insights into potential connections, groupings of similar nodes, and labeling of node attributes, respectively.\nFor EMaTO, networks effectively model knowledge transfer behaviors. Nodes represent tasks or their respective populations, while edges signify the transfer of knowledge between these tasks. Addressing the dynamic nature of task interactions, contemporary approacheslike SBO-type algorithms [24] suggest using directed networks. These capture the evolving, heterogeneous nature of task relationships more accurately than traditional undirected or unidirectional structures. This approach acknowledges the complexity and diversity of connections in evolutionary optimization, where edges in the network evolve and vary in significance. Initially, our research explores these interactions within the simplified framework of basic directed networks, given the challenges in constructing and analyzing more intricate network models.\nFigure 1 illustrates networks as pivotal in facilitating knowledge transfer in EMaTO. Task correlations, derived from population evaluations using targeted metrics, guide the development of a Knowledge Transfer Relationship Network (KTRN). In KTRN, tasks are represented by vertices, and actual knowledge transfer interactions are represented by edges."}, {"title": "3 Advancements in EMaTO Algorithms", "content": "This study categorizes and evaluates evolutionary many-task algorithms, differentiating them based on their approaches to knowledge transfer: multi-factorial or multi-population types. We assess these algorithms using a unified testing suite, focusing on the effectiveness of network metrics in various evolutionary contexts.\n3.1 Algorithmic Classification and Comparison\nWe classify evolutionary many-task optimization algorithms into two primary categories: multi-factorial and multi-population, each representing a distinct approach to knowledge transfer. Multi-factorial algorithms integrate multiple tasks within a single population, distinguishing individuals by skill factors. In contrast, multi-population algorithms allocate distinct populations or optimizers to each task, promoting knowledge reuse and collaborative evolution through inter-population transfers.\n3.1.1 Multi-factorial Approach\nInitially, multi-factorial algorithms addressed multi-task challenges within a single population framework. These algorithms segment sub-populations by assigning skill factors to individuals, facilitating task-specific optimization through traditional crossover mechanisms. The process typically involves evaluating individual performance across tasks, generating offspring through crossover or mutation, and transferring skill factors across generations. A notable aspect of multi-factorial algorithms like MFEA is the use of a random mutation probability (rmp) parameter to regulate network link formation, although some variants propose adaptive rmp adjustments.\n3.1.2 Multi-Population Approach\nIn contrast, multi-population algorithms create separate sub-populations for each task, enabling both independent and assisted evolutionary states. Independent evolution mirrors single-task evolutionary algorithms, while assisted evolution incorporates external knowledge, such as elite individuals or evolutionary parameters, into the evolutionary process. These algorithms are characterized by their collaborative evolution mechanisms and involve strategic knowledge transfer guided by specific metrics and performance evaluations. This approach includes independently evolving each population, assessing inter-task transfer probabilities, and systematically executing knowledge transfer based on metric-driven task relationships.\n3.2 Algorithm Overview\nIn this study, we comprehensively compare various evolutionary algorithms, including MFEA [20], BoKTDE [25], EMaTO-MKT [26], MTEA-AD [27], MaTDE [1], and SBCMAES [28]. These algorithms each have their unique features, showcasing the diversity and innovation in the field of evolutionary computation. For instance, MFEA facilitates knowledge transfer through cross-task genotypic representation, emphasizing the similarity and interdependence between tasks; BOKTDE employs a dual-objective metric to select different knowledge transfer strategies; EMaTO-MKT employs unsupervised clustering techniques to categorize tasks into groups, ensuring that all knowledge transfer occurs within these groups to mitigate the risk of negative transfer; MTEA-AD identifies and utilizes beneficial knowledge transfers through anomaly detection; MaTDE uses an archive mechanism combined with reward and punishment systems to control whether transfer occurs between individual tasks; and SBCMAES adopts an evolutionary strategy based on adaptive covariance matrix as its base optimizer, utilizing characteristics of symbiosis in biocoenosis to manage the probability of knowledge transfer. These algorithms provide a wide range of solutions for different optimization problems and challenges, reflecting the adaptability and diversity of evolutionary optimization strategies in handling complex many-task problems.\nIn the widely influential multi-factorial evolutionary algorithm MFEA [20], the interaction frequency between different tasks is determined by an external parameter, random mutation probability (rmp). Under this mechanism, although individuals in the population use skill factors to label their \"tasks of expertise,\" the overall interaction frequency in the task set shows a similar pattern regardless of the actual relationships between tasks, which is unreasonable for tasks with insufficient similarity to warrant borrowing, and can even exacerbate negative transfer phenomena, much like how the coordination methods and tactics of a top-tier soccer team may not be suitable for another baseball team. Clearly, Gupta et al. [29] quickly recognized the insensitivity of the MFEA algorithm to negative transfer and its research potential in this direction, proposing the MFEA-II algorithm, which uses an adaptively changing RMP matrix to adjust the probability of interaction between tasks. In extreme cases, when the learned RMP matrix is all zeros, it is considered as a set of parallel single-task EAs, meaning no inter-task transfer occurs.\nMulti-population algorithms have a more diverse range of transfer methods and judgment criteria. Rung-Tzuo Liaw et al. [28] argued that the relationship between tasks is not just similar or dissimilar, but can also be learning from each other, competing, or parasitic, among others. Based on Symbiosis in Biocoenosis, the SBO algorithms adaptively adjust the probability of transfer behavior based on the improvement caused by inter-population knowledge transfer, effectively categorizing the relationships between tasks into six types, and conducting varying degrees of knowledge transfer or no transfer actions within different categories. EMaTO-MKT [26] uses unsupervised k-means clustering to divide the entire task set into different clusters guided by prior knowledge, then selects a certain number of assisted tasks within the same cluster for each task during the evolutionary process to complete knowledge transfer.\nThe aforementioned methods primarily simplify task selection for knowledge transfer by categorizing tasks into various subsets. Many algorithms are dedicated to developing different methods of assessing task similarity, such as MaTEA [1], which uses KLD as an important indicator to summarize the overall state of populations based on the differences in probability distributions between them. It also uses a scaling factor $\\lambda$ to prevent negative transfer phenomena in cases of similar distributions. These mechanisms, compared to MFEA-type algorithms, take into account the population differences caused by task characteristics when choosing transfer targets. MTEA-AD [27] uses population probability distribution to capture task similarities and dynamically selects candidate transfer individuals from normal data using a density-based anomaly detection model, thereby reducing the risk of negative transfer. The BoKT framework [25] proposes using dual-objective similarity metrics to assess both Shape similarity and Domain similarity to describe the global and optimum relationships between tasks, binding the two indicators with different knowledge transfer strategies.\nThis allows for adaptive changes in cooperative strategies between tasks based on specific needs, resulting in significant improvements in algorithm performance."}, {"title": "3.3 Experiments", "content": "3.3.1 Benchmark\nTo describe the task transfer networks generated during the computation process of different algorithms, we have chosen the single-objective MATOPs from WCCI-20 as the testing benchmark to evaluate the performance of each algorithm and to extract the task transfer networks constructed during their operation. The WCCI-20 single-objective MaTOPs benchmark consists of 5 MaTOPs, each comprising 50 single-objective optimization tasks. These tasks are derived by translating and rotating basic optimization functions such as Rosenbrock, Ackley, Rastrigin, Griewank, Weierstrass, and Schwefel, resulting in task sets with complex and diverse structures. The P1-P3 task sets consist only of the same basic optimization function, while the other task sets contain three or more base optimization functions, increasing the diversity between tasks and the difficulty in judging the need for knowledge transfer. The different base optimization functions possess distinct optimization landscape objectives, providing an opportunity to test the transfer methods of algorithms in various scenarios. Furthermore, each MaTOP internally uses only the same base optimization function, which aligns more closely with real-world scenarios of parallel computation of similar tasks.\n3.3.2 Optimization Performance Comparison\nUnder the same evaluation iteration limit and using parameters given in the corresponding literature, we conducted numerical optimization of different algorithms on task sets and collected the experimental results. The results are compiled in Table 2, where each row represents a task set from WCCI20 and each column represents a specific algorithm tested. The algorithm's effectiveness is represented by the average optimization value achieved in the corresponding task set. The data in the table indicates that BoKTDE, EMaTO-MKT, and SBCMAES demonstrate superior optimization performance in most task sets, suggesting that these types of algorithms excel in the process of knowledge transfer compared to others. For algorithms belonging to different categories, multi-population algorithms show significantly better results than multi-factorial algorithms under the same task set and evaluation iteration constraints, especially in P1, P2, P4, and P6, where multi-population algorithms lead by no less than three orders of magnitude on average. Additionally, we included the traditional single-task algorithm Differential Evolution in the algorithm convergence performance comparison chart. As shown in Fig2, it's evident that EMaTO algorithms exhibit better convergence speed in the early stages of evolution. This is because the transfer conducted in the early stages rapidly enhances the exploratory capabilities of tasks within the task set, far exceeding those during single-task evolution. Indeed, the capability of EMaTO lies in the use of generalized knowledge to provide approaches for solving similar problems, whether it involves providing better initial solutions or enhanced exploratory capabilities to escape local optima."}, {"title": "4 Evaluating KTRN in EMaTO", "content": "This section discusses the formation, significance, and effective metrics for knowledge transfer networks in evolutionary many-task optimization, particularly focusing on the networks generated by exemplary algorithms. We analyze task interactions within these networks from a complex network perspective.\n4.1 Capturing KTRN in Algorithm Execution\nThe knowledge transfer network in the execution of Evolutionary Many-Task Optimization algorithms, often not explicitly stored, presents unexplored characteristics from a network view. This study introduces a novel approach to systematically analyze transfer relationships between task sets during algorithm execution, providing insights into knowledge transfer behaviors in EMaTO algorithms.\nWe modified algorithms to track all knowledge transfers, recording source and target task pairs in an N \u00d7 N adjacency matrix after each evolutionary cycle. For multi-factorial algorithms, we determine the occurrence of knowledge transfer relationships through vertical cultural inheritance in the algorithm framework. That is, if the offspring is mutated from a single individual or obtained by crossing two individuals with the same skill factor, then the transfer relationship does not occur. Only when parent individuals possess different skill factors do we consider that the task corresponding to the skill factor inherited by the offspring has accepted assistance from another task in the parent individuals. For multi-population algorithms, this process is relatively simple, as algorithms typically have a separate knowledge transfer module to handle knowledge transfers, allowing us to record the participating source and target tasks in the corresponding positions in the adjacency matrix during each actual transfer. Despite the differences in whether transfers occur between tasks and the specific transfer methods in different multi-population algorithms, our recording method requires little change.\n4.2 Metrics for Evaluating KTRN\nWe collected the adjacency matrices of actual knowledge transfer relationships occurring in each generation when solving the WCCI20 MaTOP with different algorithms under the default parameters given in the literature. After converting these adjacency matrices into directed networks, we calculated several evaluation metrics for the networks, recorded in Table 3. Each row in the table represents the metrics of all networks generated by an algorithm across all task sets, while each column represents a specific metric value, showcasing different characteristics of the networks from various perspectives.\n4.2.1 Overall Network Properties\nDensity Network density, a crucial metric in network analysis, measures the closeness of a network to a complete network. It's defined by the ratio of existing edges to the maximum possible edges among vertices:\n$D = \\frac{2E}{|V|(|V| \u2013 1)}$\nwhere E is the edge count, and |V| is the vertex count. In knowledge transfer networks, this relates directly to the frequency of knowledge transfer actions, with edges representing transfers and vertices representing optimization tasks. A higher network density suggests more frequent knowledge transfer, indicating an intensive interaction among tasks. Our analysis shows varied densities across different algorithms, with notable examples being BOKTDE, EMATO-MKT, and SBCMAES exhibiting densities of 0.0204, 0.1020, and 0.0104, respectively. This variation reflects the differing extent of knowledge transfer activities among these algorithms, with MFEA showing a distinct pattern compared to others. Such insights are critical for understanding and optimizing knowledge transfer strategies in evolutionary optimization.\nDiameter The network diameter is the longest shortest path between any two nodes in the network. It provides a measure of the network's linear size and is defined as:\n$DIA = max_{i,j} d(i, j)$,\nwhere (d(i,j)) is the shortest path distance between nodes (i) and (j). In complex networks, the diameter is used to evaluate the connectivity and compactness of the overall network structure. A smaller value typically means that there is always a relatively short path connecting different nodes in the entire network. In other words, a smaller diameter usually indicates that the network possesses certain small-world properties. Among the algorithms tested, only the network corresponding to MFEA had an average diameter of 2.0072, while the others were not applicable, indicating that the KTRN have fragmented characteristics, proving that different evaluation methods can lead to the same conclusion: knowledge transfer between tasks is not always effective across all tasks but is usually limited to a small number of local neighbor tasks.\nClustering Coefficient The clustering coefficient is a measure of the extent to which nodes in a network tend to cluster together. It is defined for each node as the ratio of the actual number of links between its neighbors to the maximum possible number of links, reflecting the local density of connected triangles. The clustering coefficient for the entire network is the average of these coefficients across all nodes, represented as follows:\n$C = \\frac{1}{n} \\sum_{i=1}^n C_i$\n$C_i = \\frac{2T_i}{degi (degi - 1)}$\nwhere C is the average clustering coefficient of the network, $C_i$ is the clustering coefficient of the $i^{th}$ node, $T_i$ represents the number of triangles connected to node i, and degi is the degree of node i, or the number of edges connected to it. The factor n denotes the total number of nodes in the network.\nIn our analysis, \u0395\u039c\u0391\u03a4\u039f-MKT and MFEA demonstrated significant clustering, with average coefficients of 0.5062 and 0.4486, respectively. This observation is attributed to EMATO-MKT's incorporation of unsupervised k-means clustering to evaluate task similarity. Networks with lower edge densities exhibited less pronounced clustering, indicating a correlation between network density and clustering tendencies.\n4.2.2 Local Connectivity Properties\nAssortativity Assortativity in networks quantifies the propensity of nodes to connect with others that are similar in certain aspects, particularly in terms of node degree. The assortativity coefficient A is calculated using the formula:\n$A = \\frac{\\sum_{ij} (A_{ij} - \\frac{k_i k_j}{2m}) k_i k_j}{\\sum_{ij} (k_i \\delta_{ij} - \\frac{k_i k_j}{2m}) k_i k_j}$", "where Aij is the adjacency matrix, ki and kj are the degrees of nodes i and j respectively, m is the total number of edges, and $\\delta_{ij}$ is the Kronecker delta function.\nOur analysis revealed that the MFEA algorithm displayed a unique negative assortativity pattern, indicating a preference for knowledge transfer between tasks with dissimilar degrees of existing relationships. In contrast, other algorithms showed no significant assortativity tendencies. This suggests that unlike MFEA, which adjusts transfer based on node connections through random mutation probability (rmp) control, other algorithms do not explicitly link transfer behavior to the current degree of nodes. This distinction highlights the diverse approaches to establishing knowledge transfer relationships in evolutionary optimization algorithms.\nSubgraph Average Connectivity Subgraph Average Connectivity (SAC) is a crucial metric for understanding the internal structure of knowledge transfer networks, which often consist of several disconnected subgraphs. SAC measures the internal connection density within these subgraphs and is defined as:\n$SAC = \\frac{1}{m} \\sum_{i=1}^m \\frac{E_i}{\\delta_i (\\delta_i \u2013 1)}$\nwhere m represents the number of subgraphs,\n$E_i$\nthe number of edges in the ith subgraph, and $\\delta_i$ the number of nodes in it. This metric indicates the average likelihood of knowledge transfer between tasks within a subgraph.\nIn our analysis, we observed that the MFEA algorithm's entire network is connected, making its SAC equal to its network density. Conversely, for algorithms like SBCMAES, the SAC value significantly exceeds the network's average density, implying a higher concentration of connections within subgraphs. This pattern suggests the presence of community structures within the knowledge transfer network. Notably, algorithms employing clustering in task evaluation, like EMATO-MKT, exhibit more uniform internal connection densities across their network structures, reflecting a balanced distribution of connections within subgraphs.\nHeterogeneity Network heterogeneity measures the variation in node degree distribution, a key aspect in understanding network structures. It's calculated using the formula:\n$H = \\frac{\\sigma}{(k)}$": "where $\\sigma$ represents the standard deviation of the node degrees, and (k) is the average degree of the network. High heterogeneity indicates a significant variance in node connectivity, suggesting small-world characteristics in knowledge transfer networks. This could mean that some nodes (hubs) possess higher entropy knowledge suitable for broader transfer, in contrast to the majority with less transferable knowledge. Our findings show heterogeneity in most networks generated by the tested algorithms, except for MFEA, with its random edge generation, and EMATO-MKT, which standardizes node degrees through clustering. Such heterogeneity underlines the presence of influential hub nodes, emphasizing the need for nuanced task evaluation and knowledge transfer methodologies."}, {"title": "5 Adjusting KTRN for Improved Transfer Effects", "content": "In previous sections, we explored the performance of existing algorithms under default parameter settings and extracted the knowledge transfer relationship networks from the algorithm's execution process, analyzing their characteristics in conjunction with the principles of the algorithms. In this chapter, we attempt to validate the actual impact of the knowledge transfer relationship network on algorithm performance by adjusting the network's characteristics.\nFor most EMaTO algorithms, the capability to adjust the frequency of knowledge transfer between different tasks through the setting of hyperparameters is often a default feature. Hence, we can indirectly explore the impact of network density on knowledge transfer effectiveness by adjusting these parameters. Among existing algorithms, EMaTO-MKT has the most hyperparameters that can be used to adjust the network structure generated during algorithm execution. Moreover, due to the use of clustering algorithms in its framework, EMATO-MKT can stably generate networks with structural similarities, providing good support for our tests. In this section, we choose to adjust two parameters in the algorithm, K and N, to control the knowledge transfer relationship network, where K represents the number of task clusters obtained through the k-means algorithm during the clustering process, and tasks within these subsets are considered potential auxiliary tasks for each other. N represents the number of tasks that can assist in their own evolution within the current task's subset in one iteration. By adjusting these two parameters, we can preliminarily divide communities and adjust network density across the entire task set. For this part of the experiment, we selected 9 pairs of parameter settings for exploration, namely combinations of K = 3,5,10 and N = 3, 5, 10. After conducting 30 parallel experiments using the WCCI20 MaTOP benchmark across all parameter combinations, we obtained the performance of each parameter combination. We present some results in Figure 3 and also collected the relationship networks of knowledge transfer interactions between tasks during algorithm execution, displaying the metric values of networks corresponding to different parameters in Table 5.\nIn selected algorithms, the parameter N controls the number of auxiliary tasks for each task during the knowledge transfer process, so we can essentially use the parameter N to directly correspond to a fixed network density value, as shown in Table 5. In Table 6, we recorded the number of times each parameter combination achieved the best and worst optimization performance among the 50 independent tasks in the current task set, where the left side represents the number of times it was the best, and the right side represents the number of times it was the worst. Among the nine parameter combinations, the combinations (K = 5, N = 3), (K = 10, N = 3), and (K = 10, N = 5) all achieved good results, while all combinations with K = 3 exhibited the worst optimization performance compared to others. This is due to the lack of sufficient community division of tasks, leading to so-called negative transfer between irrelevant tasks. Moreover, all parameter combinations corresponding to N = 10 also achieved poorer optimization results because a large number of auxiliary tasks made it easy to select nearly irrelevant tasks even within the same community. Conversely, when the task clusters are divided finely enough, all tasks within a community will have a relatively high level of relatedness.\nApart from this, Figure 3 reveals that, although algorithm performance on task sets under varied parameters initially lacks significant variance, the differences escalate with more evaluations. Initially, random exploration in evolutionary algorithm optimization can incidentally improve performance, allowing even irrelevant knowledge transfer to benefit the current task. As optimization advances, the necessity for precise, effective knowledge grows to overcome local optima. During this phase, improper community segmentation of task sets or overuse of auxiliary tasks may significantly contribute to negative transfer. Combining Tables 3 and 2, we find that, on the one hand, for different task sets, the same algorithm has different optimal density preferences within the range of optional densities. In other words, the frequency of knowledge transfer is inextricably linked to the characteristics of the task set itself and cannot be directly determined by a certain density to calculate the optimal knowledge transfer parameters. A good EMaTO algorithm should have the ability to adaptively adjust the frequency of knowledge transfer occurrences. On the other hand, even for the same problem, heterogeneous transfer mechanisms require adaptation to different frequencies of transfer behavior because the effectiveness of transfer mechanisms is influenced by specific situations."}, {"title": "6 Conclusion", "content": "This paper investigates knowledge transfer in many-task evolutionary optimization algorithms through the lens of complex network analysis. Our findings validate the use of directed networks to effectively model task interrelations in these algorithms. We outlined methods to extract knowledge transfer networks from existing algorithms and analyzed them using key network metrics. Our analysis of these networks, particularly from algorithms that performed well on test sets, revealed three salient features: optimal network density, a heterogeneous degree distribution, and pronounced community structures. Notably, knowledge transfer across different communities can result in negative transfer. For future research, integrating core complex network techniques like community detection may enhance the adaptability of knowledge transfer mechanisms in these algorithms."}]}