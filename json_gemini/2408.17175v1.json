{"title": "Codec Does Matter: Exploring the Semantic Shortcoming of Codec for Audio Language Model", "authors": ["Zhen Ye", "Peiwen Sun", "Jiahe Lei", "Hongzhan Lin", "Xu Tan", "Zheqi Dai", "Qiuqiang Kong", "Jianyi Chen", "Jiahao Pan", "Qifeng Liu", "Yike Guo", "Wei Xue"], "abstract": "Recent advancements in audio generation have been significantly propelled by the capabilities of Large Language Models (LLMs). The existing research on audio LLM has primarily focused on enhancing the architecture and scale of audio language models, as well as leveraging larger datasets, and generally, acoustic codecs, such as EnCodec, are used for audio tokenization. However, these codecs were originally designed for audio compression, which may lead to suboptimal performance in the context of audio LLM. Our research aims to address the shortcomings of current audio LLM codecs, particularly their challenges in maintaining semantic integrity in generated audio. For instance, existing methods like VALL-E, which condition acoustic token generation on text transcriptions, often suffer from content inaccuracies and elevated word error rates (WER) due to semantic misinterpretations of acoustic tokens, resulting in word skipping and errors. To overcome these issues, we propose a straightforward yet effective approach called X-Codec. X-Codec incorporates semantic features from a pre-trained semantic encoder before the Residual Vector Quantization (RVQ) stage and introduces a semantic reconstruction loss after RVQ. By enhancing the semantic ability of the codec, X-Codec significantly reduces WER in speech synthesis tasks and extends these benefits to non-speech applications, including music and sound generation. Our experiments in text-to-speech, music continuation, and text-to-sound tasks demonstrate that integrating semantic information substantially improves the overall performance of language models in audio generation. Our code and demo are available \u00b9", "sections": [{"title": "Introduction", "content": "In recent years, Large Language Models (LLMs) such as GPT (Brown et al. 2020) have demonstrated remarkable capabilities in modeling complex, high-dimensional data across various domains, including text and image generation (Zhao et al. 2023; Liu et al. 2024a). Inspired by these successes, there has been significant interest (Agostinelli et al. 2023; Borsos et al. 2023; Wang et al. 2023; Yang et al. 2023b) in exploring the application of LLMs to audio generation.\nAudio codecs (Zeghidour et al. 2021) have emerged as a critical technique for audio LLMs, bridging the gap between continuous audio waveforms and token-based language models. By discretizing high-rate audio signals into a finite set of tokens, these codecs enable the application of LLM architectures to audio data, leveraging the successes of textual LLMs.\nHowever, prior research on audio codecs has primarily focused on achieving lower compression rates and higher reconstruction quality (Kumar et al. 2024; D\u00e9fossez et al. 2022; Yang et al. 2023a). Meanwhile, many efforts in audio generation have concentrated on enhancing model architecture, scaling, or leveraging larger datasets. For instance, AudioLM (Borsos et al. 2023) adopts a two-stage pipeline that models the acoustic token in an autoregressive way conditioned on the semantic token. VALL-E (Wang et al. 2023), the first TTS framework to leverage large, diverse, and multi-speaker speech data, demonstrates strong in-context learning capabilities similar to GPT-3, treating TTS as a language modeling task on audio codecs. Music-Gen (Copet et al. 2024) generates music using a single-stage transformer LM alongside efficient token interleaving patterns. Similarly, UniAudio (Yang et al. 2023b) scaled up to 165K hours of audio and 1B parameters, utilizing LLM techniques to generate tokens for various types of audio, including speech, sounds, music, and singing, given different input conditions.\nWhile these works have shown success in developing audio language models, they all rely on the acoustic codecs such as Encodec (D\u00e9fossez et al. 2022) or Soundstream (Zeghidour et al. 2021) for audio tokenization and detokenization. However, these acoustic codecs were originally designed for audio compression rather than for audio language models. This misalignment means the design may not be optimal for audio language modeling.\nTo design a better audio codec for Audio LLMs, we drew inspiration from the initial purpose of LLMs such as GPT, which were designed to process text. These models focus on understanding and generating natural language, which is inherently rich in semantics. Motivated by this, we assume that a better audio tokenizer should encapsulate rich semantic information to facilitate an easy understanding of audio"}, {"title": "Related Works", "content": "content, thus reducing the language model's burden in interpreting tokens. However, most audio codecs focus on acoustic reconstruction which ignores the semantic information. As a result, LLM essentially tries to predict the local fluctuations of the audio signal, which is difficult, and methods like VALL-E, which condition acoustic token generation on text transcriptions, frequently result in content inaccuracies causing elevated word error rates (WER), stemming from the semantic misinterpretations of acoustic tokens, leading to word skipping and errors.\nTo address this issue, approaches like SpeechTokenizer (Zhang et al. 2023) have attempted to disentangle speech into separate tokens for content and timbre and perform distillation-based semantic and acoustic integration. However, this method may not integrate smoothly with all audio LLMs, especially those requiring uniform token treatment across different layers, such as utilizing flattened codec tokens (Yang et al. 2023b; Copet et al. 2024).\nIn this paper, We propose a straightforward yet effective method termed \u201cX-codec\u201d, which integrates both semantic and acoustic features into a unified tokenization framework. The X-Codec architecture employs a distinctive \"X-shaped\" structure, characterized by two inputs and two outputs, unifying semantic and acoustic information within a single Residual Vector Quantizer (RVQ) structure. This design enables simultaneous embedding learning of semantic richness and acoustic fidelity for every token, resulting in better performance for audio LLM.\nWe have conducted comprehensive evaluations of X-Codec across various applications, including text-to-speech, music continuation, and text-to-sound synthesis. The results consistently demonstrate the effectiveness of the proposed method. Furthermore, our comparative evaluation on VALL-E based TTS demonstrates that X-Codec outperforms existing disentanglement techniques, thereby highlighting its efficacy and versatility in advancing audio LLM technologies.\nAudio Language Model\nThe success of Large Language Models (LLMs) has sparked a significant trend in leveraging language foundation models for audio generation tasks (Rubenstein et al. 2023; Zhang et al. 2024; Wu et al. 2023b,a; Yang et al. 2023b; Chen et al. 2023). Audio, much like language, consists of variable-length sequences, making it well-suited for modeling with language foundation models. One pioneering method, AudioLM (Borsos et al. 2023), employs a multi-stage strategy to harness the predictive capabilities of foundation models for generating tokens unconditionally. This approach involves predicting semantic tokens from various conditions (e.g., phonemes, text descriptions, MIDI) in the initial stage, followed by transforming them into acoustic tokens through coarse-to-fine modeling, ultimately generating the waveform. Representative systems such as SPEAR-TTS (Kharitonov et al. 2023) for speech synthesis and MusicLM (Agostinelli et al. 2023) for music generation have also been proposed. However, the two-stage process can lead to complexity in training and suboptimal performance due to the"}, {"title": "Analysing Semantic Shortcoming", "content": "separate development of semantic and acoustic tokens, leading to error accumulation.\nConversely, recent advancements have shown that methods employing a single-stage language model outperform two-stage approaches. For example, VALL-E (Wang et al. 2023) utilizes an autoregressive (AR) model to predict the first token and a non-autoregressive (NAR) model to estimate the residual tokens, demonstrating superior performance compared to AudioLM. Similarly, MusicGen (Copet et al. 2024) employs a single-stage transformer language model and incorporates a delay pattern strategy for efficient token interleaving, achieving better results than MusicLM. Other notable works include CLAM-TTS (Kim et al. 2024), VoiceCraft (Peng et al. 2024), and UniAudio (Yang et al. 2023b).\nDespite recent advancements, directly modeling the intricate low-level acoustic fluctuations with an LLM poses challenges. LLMs are primarily designed for processing natural language, which is inherently rich in semantics. In order to overcome this limitation, we propose X-Codec, a novel enhancement that aims to enrich semantic processing within acoustic codecs. By doing so, we aim to improve the overall performance of audio LLMs.\nAudio Codec\nRecent advancements have seen a surge in deep learning methodologies employing vector quantization (Van Den Oord, Vinyals et al. 2017) to reconstruct continuous signals into discrete representations for AR generation. Notably, audio codecs based on the VQ-GAN framework (Esser, Rombach, and Ommer 2021) have gained prominence. For example, SoundStream (Zeghidour et al. 2021) introduces a versatile codec adaptable to various audio types, integrating Residual Vector Quantization (RVQ) and Generative Adversarial Network (GAN) to refine quantization and reconstruction. Similarly, Encodec (D\u00e9fossez et al. 2022) enhances compression through a multi-scale discriminator and a loss-balancing strategy alongside a language model. HiFi-Codec (Yang et al. 2023a) employs Group-Residual Vector Quantization (GRVQ) to minimize the need for extensive codebooks while maintaining high reconstruction fidelity. DAC (Kumar et al. 2024) addresses codebook collapse, where some codes remain unused, by applying improved codebook learning to achieve higher compression rates.\nThese codecs primarily focus on acoustic reconstruction and higher compression rates, often overlooking their potential as tokenizers for audio LLMs. Some attempts have been made to develop more suitable tokenizers for audio LLMs. For example, SpeechTokenizer (Zhang et al. 2023) utilizes HuBERT to separate speech into distinct VQ components for content and timbre/acoustic details. This separation improves the modeling of content in the AR stage of VALL-E, while the NAR stage enriches the acoustic details. However, a distillation framework is exploited, this makes Speech-Tokenizer may not be compatible with all LLM architectures, especially those that require uniform treatment of tokens, such as methods using flattened codec tokens (Yang et al. 2023b; Copet et al. 2024). Another attempt is pre-"}, {"title": "Designing Auxiliary Semantic Module", "content": "In this section, we investigate the impact of acoustic codecs on the performance of audio LLMs, focusing specifically on VALL-E, a pioneering model that leverages language model principles for text-to-speech. Our analysis reveals that training VALL-E using Encodec results in high word error rates (WER) and frequent inaccuracies in content generation. For example, when the input text \u201che passed through Henley Saint Albans and came so near to London as Harrow on the Hill\u201d is synthesized, it is erroneously produced as \u201che passed through henley saint albeans and camsel knew to lunglan as herold the lor\". This misinterpretation, which is beyond simply improving the audio quality, suggests a fundamental limitation in Encodec's ability to differentiate phonemes, possibly due to its inadequate semantic processing capabilities.\nTo substantiate the above hypothesis, we conducted Phonetic Discriminability ABX Tests to evaluate the phonetic discriminability of Encodec's representations. The details are provided in the experiment section. Our findings reveal that Encodec's representations exhibit poor phonetic discriminability, which confirms the presence of semantic inadequacies in the codec. Based on these results, we assert that these semantic shortcomings are a significant contributing factor to the observed inaccuracies of language model based audio generation.\nTo effectively address these semantic limitations, we introduce a novel approach that integrates more comprehensive semantic features into the codec's architecture. This enhancement is designed to enrich the codec's understanding of audio content, thereby alleviating the interpreting load on the language model. Detailed elaboration of this method is provided in the subsequent section.\nOur approach employs a straightforward method that enhances audio codecs by directly concatenating semantic and acoustic features. Initially, we extract the semantic feature vector $S^* \\in \\mathbb{R}^{H_S \\times T}$ from the audio waveform x. This extraction utilizes a self-supervised, pre-trained model such as HuBERT (Hsu et al. 2021) or wav2vec 2.0 (Baevski et al. 2020). The extracted features are then processed through multiple convolutional layers within a semantic encoder to yield the refined semantic feature vector S. Concurrently, the acoustic branch produces the feature A. These outputs, S and A, are subsequently concatenated using a linear projection $\\Phi$, formulated as:\n$U = concat(\\Phi_s(A), \\Phi_a(S)),\\qquad(1)$\nwhere the concatenated feature $U \\in \\mathbb{R}^{H_U \\times T}$ is designed to maximize information preservation from both semantic and acoustic sources. This combined feature is then subject to RVQ using an M-layer quantizer, resulting in tokens that encapsulate a rich mixture of semantic and acoustic information.\nThe quantized feature $U_q$ is designed to meet the decoder's objectives through two projectors, $\\beta_s$ and $\\beta_a$, which enable the decoders to reconstruct the original semantic feature $S^*$ and the audio waveform x. We adhere to established acoustic reconstruction methods from previous works while introducing a Mean Squared Error (MSE) loss specifically for the reconstruction of semantic features. Furthermore, a constant weight $\\gamma$ is applied to the semantic loss to ensure that its scale is aligned with other losses, thus promoting a balanced training objective."}, {"title": "Experiments", "content": "Given that established audio codecs such as Encodec, Speechtokenizer, and DAC are trained on diverse datasets with varying configurations, we meticulously design experiments to rigorously evaluate the efficacy of our proposed solution, X-Codec. To ensure a fair and unbiased comparison, each experiment employs a baseline acoustic codec that is precisely aligned with our X-Codec in terms of training data, training steps, and other hyperparameters. The primary distinction between the baseline codec and X-Codec lies in the exclusion of the auxiliary semantic module in the baseline configuration. This controlled experimental design enables us to isolate and evaluate the specific contributions of our semantic enhancements to the overall performance of the audio LLMs.\nText-to-Speech\nIn this subsection, we critically evaluate the performance of various audio codecs in training the VALL-E model for zero-shot Text-to-Speech (TTS) tasks. Our investigation is guided by two primary objectives:\n\u2022 To determine whether the X-Codec can enhance the performance of audio LLMs in TTS applications.\n\u2022 To evaluate the comparative advantages of X-Codec over the disentanglement strategy employed by SpeechTokenizer, specifically within the context of the VALL-E model.\nBaselines For a comprehensive comparison, we employ several state-of-the-art neural audio codecs as baselines:\n\u2022 EnCodec 2: The open-source EnCodec model (D\u00e9fossez et al. 2022), trained on a diverse range of 24kHz audio data, can compress audio to bitrates between 1.5 and 24.0 kbps while maintaining high fidelity.\n\u2022 DAC 3: The open-source DAC model (Kumar et al. 2024) utilizes enhanced VQ techniques. For our experiments, we employ the official 16kHz version.\n\u2022 SpeechTokenizer 4: This model (Zhang et al. 2023) is a unified speech tokenizer that leverages distinct VQ layers to separate speech into content and timbre components. We utilize their official checkpoints in our evaluations.\nTraining Details of X-Codec Given our objective to assess the efficacy of X-Codec in leveraging semantic information, we meticulously align our experimental setup with that used for SpeechTokenizer. Both models are trained on the same dataset, LibriSpeech, and utilize the same pre-trained self-supervised representations from HuBERT-base-ls960 5. To ensure comparability, we also adopt the strategy of employing the average representation across various layers of HuBERT as our semantic training objective.\nTraining Details of VALL-E For reproduction of the VALL-E, we utilize the resources specified in the provided repository 6. The training data is the LibriTTS, retaining the default settings as specified in the repository, except for the learning rate during the AR stage, which is adjusted to 0.01 to enhance model stability. The training process span 100 epochs for the AR stage and 200 epochs for the non-autoregressive (NAR) stage, same for all audio codecs for a fair comparison.\nEvaluation Metrics To assess the performances of zero-shot TTS systems, we employ the following metrics:\n\u2022 WER (Word Error Rate): We utilize an Automatic Speech Recognition (ASR) model to transcribe the generated audio (Wang et al. 2023). The discrepancies between these transcriptions and the original texts are quantified using WER, providing a critical measure of audio intelligibility.\n\u2022 Sim-O (Similarity Objective): This metric assesses the objective similarity between synthesized speech and the"}, {"title": "Analysing the Effect of Codec", "content": "original reference speech. Sim-O uses feature embeddings extracted from a pre-trained speaker verification model to measure this similarity (Hsu et al. 2021; Kim et al. 2024)7, reflecting the codec's ability to preserve speaker characteristics.\n\u2022 UTMOS: We evaluate the audio quality using UTMOS, a Speech MOS (Mean Opinion Score) predictor (Saeki et al. 2022)8 that automatically measures the naturalness of speech. This metric provides insights into the overall auditory quality of the synthesized speech.\nZero-shot TTS Results We use librispeech-test-clean (Panayotov et al. 2015)for zero-shot TTS evaluation following VALL-E-continual-setting (Wang et al. 2023). The results in Table 1 demonstrate the following key findings:\n\u2022 When comparing both X-Codec and SpeechTokenizer against the baseline and other acoustic codecs like DAC and Encodec, we observe improvements in WER. This supports our hypothesis that integrating semantic information helps audio LLMs better understand content.\n\u2022 Comparing the baseline acoustic codec and SpeechTokenizer, SpeechTokenizer exhibited lower Sim-O scores. We attribute this reduction to its initial disentanglement phase, which exclusively focuses on content prediction. This specialization potentially hampers the NAR phase's ability to accurately reconstruct speaker timbre when conditioned solely on tokens derived from the primary content-focused stage, resulting in poor speaker similarity.\n\u2022 X-Codec not only shows better WER but also higher Sim-O and UTMOS scores compared to SpeechTokenizer. This confirms the effectiveness of our approach, indicating that our codec handles the integration of semantic and acoustic information more proficiently.\nTo further analyse the above results caused by different audio codecs, we evaluate phonetic discriminability using the ABX error rate (Schatz et al. 2013). This metric assesses how well different codecs can distinguish between similar phonetic sounds within and across various contexts. We specifically examine the continuous representations for VQ as indicated by the results in the following table 2. We compare the performance of various models in terms of within and across phonetic discriminability:\nKey insights include:\n\u2022 Both SpeechTokenizer and X-Codec significantly outperform pure acoustic codecs like Encodec and DAC in phonetic discriminability, which supports our claim that enhancing semantic understanding in codecs helps modelling content such as phonetic details.\n\u2022 The X-Codec demonstrates a notable trend of improved phonetic discriminability with an increase in the number of quantizations (nq). Specifically, as nq increases,"}, {"title": "Limitation", "content": "from 1 to 8, the ABX error rates consistently decrease, thereby highlighting effectiveness of the X-Codec's design in enhancing semantic integration across multiple quantization layers.\n\u2022 In contrast, the SpeechTokenizer, while exhibiting commendable performance at a lower quantization level (nq = 1), fails to show significant improvement as nq is increased. This suggests a design limitation; the codec's reliance on the initial quantization to carry semantic information restricts its ability to process a broader spectrum of semantic information. Notably, the performance of X-Codec at nq = 8 significantly exceeds that of SpeechTokenizer.\nThese results underline the effectiveness of our method in facilitating enhanced semantic integration, leading to better phonetic discriminability and audio LLMs. In addition, these results also show that our simple concatenate methods surpass disentangle methods such as speechtokenizer.\nMusic and Sound Generation\nTo the best of our knowledge, this is the first exploration into the potential benefits of incorporating semantic information into audio codecs for enhancing music and general sound generation through audio LLMs. Conventional methods for general audio representation learning, aiming at capturing the semantic discriminability of audios, are generally based on 2D mel-spectrogram, such as AudioMAE (Huang et al. 2022) and Beats (Chen et al. 2022). These methods are in stark contrast to traditional codecs that process audio sequentially, frame-by-frame. This difference poses challenges for direct integration into existing audio generation frameworks.\nTo bridge this gap, we have developed a variant of HuBERT, specifically adapted for general audio, which we refer to as HuBERT-General-Audio. This HuBERT-General-Audio is trained on an expansive internal dataset of approximately 200,000 hours, with a similar distribution as AudioSet. Additionally, our proposed X-Codec is also trained using these data for 400,000 steps until convergence, incorporating the HuBERT-General-Audio model within its semantic module. For a fair comparison, we train a baseline acoustic codec under identical settings but excluding semantic information.\nTraining Details of Self-Supervised General Audio Representation HuBERT-General-Audio is trained using 8 NVIDIA H800 GPUs on 2.6 million tokens across 325,000 iterations. For training stability, we adopt an inverse square root learning schedule, a modification from the polynomial decay schedule originally utilized in (Hsu et al. 2021). The learning rate is set at 0.0003 with warmup steps of 32,000. Unlike the original HuBERT, which utilizes MFCCs as the training target unit designed specifically for speech, our model leverages the first VQ layer of Encodec as the training target for acoustic unit discovery in the general audio. This choice eliminates the need for the K-means discretization step, saving significant time and computational resources."}, {"title": "Conclusion", "content": "While our method significantly enhances the performance of codecs for LLMs by integrating semantic information, it does come with certain trade-offs. According to the principle of \"no free lunch,\" improving one aspect of a system often involves compromises in others. In the case of our enhanced codecs, the primary limitation lies in their potential impact on the original functionality of codecs, which is compression for information transmission. The introduction of a semantic extraction layer adds additional computational overhead, potentially increasing the time required for processing. This can affect the efficiency of the codec when used in applications where rapid data compression and transmission are critical. Consequently, while our approach offers substantial benefits for semantic understanding and audio processing, it may not be as effective in contexts where high-speed data compression is paramount.\nFurthermore, the integration of semantic layers can slightly impair certain acoustic metrics such as Mel and STFT distance, which are crucial for maintaining the fidelity of compressed audio. However, it is essential to note that these trade-offs are counterbalanced by significant improvements in human auditory perception, as evidenced by the UTMOS scores.\nIn this paper, we introduced X-codec, an advanced audio codec that integrates semantic information through self-supervised learning models to enhance performance in large language models, specifically in text-to-speech synthesis, music continuation, and general audio classification tasks. Our evaluations demonstrate that X-codec significantly improves semantic understanding and audio generation quality across a variety of domains."}]}