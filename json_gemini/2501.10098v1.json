{"title": "LANDMARKER: A TOOLKIT FOR ANATOMICAL LANDMARK LOCALIZATION IN 2D/3D IMAGES", "authors": ["Jef Jonkers", "Luc Duchateau", "Glenn Van Wallendael", "Sofie Van Hoecke"], "abstract": "Anatomical landmark localization in 2D/3D images is a critical task in medical imaging. Although many general-purpose tools exist for landmark localization in classical computer vision tasks, such as pose estimation, they lack the specialized features and modularity necessary for anatomical landmark localization applications in the medical domain. Therefore, we introduce landmarker, a Python package built on PyTorch. The package provides a comprehensive, flexible toolkit for developing and evaluating landmark localization algorithms, supporting a range of methodologies, including static and adaptive heatmap regression. landmarker enhances the accuracy of landmark identification, streamlines research and development processes, and supports various image formats and preprocessing pipelines. Its modular design allows users to customize and extend the toolkit for specific datasets and applications, accelerating innovation in medical imaging. landmarker addresses a critical need for precision and customization in landmark localization tasks not adequately met by existing general-purpose pose estimation tools.", "sections": [{"title": "Motivation and significance", "content": "Landmark (or keypoint) localization in 2D/3D images is a fundamental challenge in computer vision, crucial for tasks such as pose estimation [Luvizon et al., 2018, Tompson et al., 2014, Newell et al., 2016], face alignment [Zhou et al., 2023, Kumar et al., 2019], robotic manipulation [Ziegler et al., 2020], surgical procedures [Sharan et al., 2021], and various image-based medical diagnoses [de Queiroz Tavares Borges Mesquita et al., 2023, Ryu et al., 2022, Pei et al., 2023, Payer et al., 2019, Thaler et al., 2021]. The effectiveness of different approaches is often domain and task-dependent, necessitating extensive experimentation for new applications. Popular methods, such as heatmap regression, involve numerous preprocessing and post-processing steps. The latter, such as sub-pixel accuracy methods, can significantly improve the precision needed in medical applications but nevertheless are frequently overlooked.\nAs existing packages such as OpenPose [Cao et al., 2021] and Ultralytics [Jocher et al., 2023] are primarily designed for pose estimation, they lack the modularity needed for medical applications. While MMPose [MMPose Contributors,"}, {"title": "Background: landmark localization", "content": "There are two primary methodologies in landmark localization (see Figure 1): heatmap regression and coordinate regression. Coordinate regression [Fard and Mahoor, 2022] involves learning a direct relationship between the image and the landmark locations. However, the introduction of heatmap regression [Tompson et al., 2014], which generally yields better performance, has shifted the research focus. Heatmap regression predicts a heatmap that assigns a likelihood or probability to each (down-sized) image pixel. Early heatmap regression methods, termed direct heatmap regression, assume a parametric distribution, typically a bivariate Gaussian or Laplacian distribution. Direct heatmap regression can be further classified into static and adaptive approaches. In static heatmap regression, the heatmap distribution parameters are fixed hyperparameters during training. In adaptive heatmap regression, these parameters are adjusted during training, either by treating them as learnable model parameters [Payer et al., 2019, 2020, Thaler et al., 2021] or by using scheduling methods that modify the parameters based on specific evaluation metrics [Teixeira et al., 2019]. Another variant of static heatmap regression involves training a model on one-hot heatmap images (masks), essentially parameterizing the heatmap as a categorical distribution and transforming the task into a multi-class classification problem where each pixel represents a class [McCouat and Voiculescu, 2022].\nRecent advancements on heatmap regression have seen the rise of fully convolutional neural networks (CNNs) with differentiable decoding operations, such as the soft-argmax operation [Luvizon et al., 2018]. These methods, prominent in facial landmark localization, use the heatmap generation layer as an intermediate layer and the decoding operation as the final layer, optimizing the network with a loss function that compares the decoded coordinates to the ground-truth coordinates. Some of these methods account for the ambiguity in landmark ground truth by incorporating uncertainty-aware loss functions, such as the Gaussian log-likelihood loss [Kumar et al., 2019], or other custom loss functions [Kumar et al., 2019, 2020, Zhou et al., 2023].\nIn the medical domain, landmark localization often employs two-stage approaches [Jiang et al., 2022, Song et al., 2020, Zhong et al., 2019]. The first stage localizes landmarks on a low-resolution image, and the second stage refines this localization on a high-resolution patch, which is a region of interest based on the initial predictions. In both stages, one of the previously described approaches can be used.\nThe diversity of approaches in landmark localization, from basic coordinate regression to sophisticated uncertainty-aware heatmap methods, highlights the complexity of this field, particularly in medical imaging applications. While general-purpose tools like OpenPose and MMPose exist, they primarily focus on human pose estimation and lack the specialized features needed for medical imaging applications. These tools often do not support the full range of heatmap"}, {"title": "Software description", "content": "landmarker is a Python package that leverages PyTorch [Paszke et al., 2019] deep learning framework and MONAI [Cardoso et al., 2022], a PyTorch-based deep learning framework for healthcare imaging for handling medical image files and transformations.\nUsers can install landmarker via pip. After installation, our documentation and variety of examples will guide users in applying the toolkit for their specific needs."}, {"title": "Software architecture and functionalities", "content": "The landmarker package is structured into several key modules, each addressing specific aspects of the landmark localization pipeline, see Figure 2."}, {"title": "Data handling and preprocessing", "content": "The data module provides flexible \"dataset\" classes that inherit from PyTorch's Dataset, ensuring compatibility with PyTorch DataLoaders. Four main dataset types are supported:"}, {"title": "Heatmap generation and decoding", "content": "The heatmap module provides functionality for generating target heatmaps and decoding predicted heatmaps, which is essential for heatmap regression approaches."}, {"title": "Heatmap generation", "content": "The HeatmapGenerator class and its subclasses support various parametric distributions (e.g., multivariate Gaussian and Laplace). The design allows easy implementation of custom distributions. The parameters of the parametric distribution can be set on initialization. Still, they can also be changed during training, for example, for adaptive heatmap regression approaches that rely on a scheduler, such as Adaloss scheduler [Teixeira et al., 2019]. Additionally, the parameters could also be learnable parameters during a training procedure."}, {"title": "Heatmap decoding", "content": "While heatmap generation is only needed for direct approaches, decoding heatmaps is needed for all heatmap regression approaches, with the caveat that the indirect approaches need differentiable decoding operations. Multiple decoding methods are implemented:\nThe argmax operation is the simplest decoder operation [Tompson et al., 2014]. The operation takes the maximum value of the heatmap $H_i$,\n$\\hat{y}_i = \\argmax H_i,$\n(1)\nto get the coordinate $\\hat{y}$ of landmark i. The major downside of this approach is that it introduces a discretization error by only choosing a pixel as the predicted landmark.\nThe weighted spatial mean [Luvizon et al., 2018, Dong et al., 2018, Kumar et al., 2019, 2020] is the approach for indirect heatmap generation. The operation calculates the landmark location $\\hat{y}_i$ by first post-processing the heatmap $H_i$ with an activation function $\\sigma$, typically a type of normalization operation, and afterward taking the weighted spatial mean, e.g., the two-dimensional case:\n$Y_i = \\frac{\\sum_{c=0}^{W} \\sum_{l=0}^{H} c \\cdot \\sigma(H_i)_{l,c}}{\\sum_{c=0}^{W} \\sum_{l=0}^{H} \\sigma(H_i)_{l,c}},$\n(2)\nwhere W and H are, respectively, the heatmap's width and height. Frequently used activation functions $\\sigma$ are a ReLU activation combined with a normalization procedure and the softmax operation on the heatmap, which is in the literature often referred to as soft-argmax operation [Luvizon et al., 2018, Dong et al., 2018, Bulat et al., 2021].\nA significant issue of taking the weighted spatial mean is that it can globally lead to semantically unstructured outputs and thus decrease performance [Bulat et al., 2021]. In Bulat et al. [2021], they propose to apply soft-argmax operation locally, i.e., a small window, around the heatmap location with a maximum heatmap value. We implement this method and extend it to be used with any post-processing function, i.e., local weight spatial mean operation."}, {"title": "Models and losses", "content": "While landmarker is compatible with any PyTorch model or loss function, it includes implementations of successful approaches from the literature, such as the spatial configuration network [Payer et al., 2019], which is effective for positionally consistent medical images like cephalograms. Also, multiple heatmap regression loss functions are implemented from successful approaches [Thaler et al., 2021, Nibali et al., 2018, Kumar et al., 2019, Feng et al., 2018, Wang et al., 2019, Zhou et al., 2023]."}, {"title": "Evaluation and visualization", "content": "The visualize module allows inspecting constructed datasets and trained models. Additionally, it enables the generation of detection reports that output several metrics from the metrics module, such as point error and success detection rate (SDR), which is the percentage of predicted landmarks with a point error smaller or equal to a specified radius."}, {"title": "Illustrative examples", "content": "In this section, we illustrate the use of landmarker. We will perform adaptive heatmap regression with the ISBI2015 cephalometric landmark dataset, showcasing most functionality.\nWe start by loading the data into a LandmarkDataset by providing a list of paths to images, a NumPy array of the shape (N, C, D) where N is the number of samples, C is the number of landmark classes, and D represents the spatial dimension which can be 2 or 3."}, {"title": "Impact and conclusions", "content": "The development and release of the landmarker Python package offer significant advancements in anatomical landmark localization, particularly within medical imaging. By providing a flexible and modular toolkit tailored explicitly for medical imaging applications, landmarker addresses a critical need for precision and customization in landmark localization tasks that are not adequately met by existing general-purpose pose estimation tools like OpenPose or MMPose.\nOne of the key impacts of landmarker is its ability to streamline the research and development process for researchers and developers working on image-based diagnostic and therapeutic deep learning applications. The package's integration with PyTorch and MONAI ensures compatibility with various medical image formats and processing pipelines, facilitating easy adoption in research environments. Moreover, the extensive support for different landmark localization methodologies, including static and adaptive heatmap regression, allows users to implement state-of-the-art algorithms with minimal overhead.\nIncluding customizable modules for data handling, preprocessing, heatmap generation, and model evaluation further enhances the utility of landmarker. These features enable users to quickly adapt the package to their specific use cases, whether they involve 2D or 3D images, single-class or multi-class landmark localization, or static versus adaptive methodologies. The ability to implement and test novel approaches within a unified framework accelerates innovation in computer-aided diagnosis through medical imaging, potentially leading to more accurate diagnoses and better patient outcomes.\nIn conclusion, landmarker represents a powerful tool for advancing the field of anatomical landmark localization in medical imaging. Its flexibility and ease of use make it a helpful resource for researchers and engineers."}, {"title": "Funding sources", "content": "Jef Jonkers is funded by the Research Foundation Flanders (FWO, Ref. 1S11525N)."}]}