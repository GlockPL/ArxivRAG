{"title": "GPT-Augmented Reinforcement Learning with Intelligent Control for Vehicle Dispatching", "authors": ["Xiao Han", "Zijian Zhang", "Xiangyu Zhao", "Guojiang Shen", "Xiangjie Kong", "Xuetao Wei", "Liqiang Nie", "Jieping Ye"], "abstract": "As urban residents demand higher travel quality, vehicle dispatch has become a critical component of online ride-hailing services. However, current vehicle dispatch systems struggle to navigate the complexities of urban traffic dynamics, including unpredictable traffic conditions, diverse driver behaviors, and fluctuating supply and demand patterns. These challenges have resulted in travel difficulties for passengers in certain areas, while many drivers in other areas are unable to secure orders, leading to a decline in the overall quality of urban transportation services. To address these issues, this paper introduces GARLIC: a framework of GPT-Augmented Reinforcement Learning with Intelligent Control for vehicle dispatching. GARLIC utilizes multiview graphs to capture hierarchical traffic states, and learns a dynamic reward function that accounts for individual driving behaviors. The framework further integrates a GPT model trained with a custom loss function to enable high-precision predictions and optimize dispatching policies in real-world scenarios. Experiments conducted on two real-world datasets demonstrate that GARLIC effectively aligns with driver behaviors while reducing the empty load rate of vehicles.", "sections": [{"title": "Introduction", "content": "The past decade has witnessed explosive growth in online car-hailing services, fundamentally transforming urban transportation. Central to this transformation is the role of vehicle dispatching (Shi et al. 2024), which serves as a pivotal component in reducing the waiting time of passengers, increasing the income of drivers, and facilitating daily transportation (Barrios, Hochberg, and Yi 2023; Rahman and Thill 2023; Sadrani, Tirachini, and Antoniou 2022). In recent years, reinforcement learning (RL) methods have emerged as outstanding performers in areas such as multi-agent control and sequential decision-making (Qiu et al. 2023; Ellis et al. 2024; Han et al. 2023). Therefore, many studies have leveraged RL techniques to enhance vehicle dispatching, treating it as a multi-agent sequential decision-making task (Guo et al. 2024; Huang et al. 2023).\nHowever, unlike traditional multi-agent reinforcement learning (MARL) approaches applied in other domains, vehicle dispatching presents a unique challenge due to the complex interplay between observable local traffic states and undetectable global spatiotemporal correlations. Each vehicle acts as an individual agent, with access limited to the environmental states in its immediate vicinity. This makes it difficult to obtain a comprehensive, global view of vehicle supply and demand. As illustrated in Figure 1(a), a vehicle must rely on multiple hops of vehicle-to-vehicle (V2V) communication to acquire more extensive traffic flow information. Furthermore, expanding a vehicle's receptive field exponentially increases communication latency among agents (Huang and Lin 2022; Wang 2023), as depicted in Figure\n1(b). According to the traffic flow theory (Gerlough and Huber 1976), traffic flows also behave differently at diverse granularities. For instance, macro-level traffic flow provides an overview of travel times, as shown by the arrows between purple and brown grids in Figure 1(c). In contrast, micro-level traffic states can pinpoint traffic jams directly, as illustrated by the different road segment colors (green, yellow, and red) in Figure 1(c). In summary, obtaining a comprehensive and accurate view of traffic states is a significant challenge in vehicle dispatching.\nAccurate vehicle dispatching also necessitates nuanced driving behavior modeling, which accounts for the individual preferences of different vehicle agents regarding dispatching instructions. Driving behavior reflects the driver's personal inclination toward specific dispatching tasks, and plays a crucial yet often overlooked role in transportation (Wang et al. 2024a; Robbennolt and Levin 2023). For example, consider the taxi driver of the red car in Figure 1(c), who is more familiar with region A. This driver might prefer to pick up passengers in region A rather than in the unfamiliar regions B or C, even if those regions are closer. Consequently, a dispatching algorithm that ignores drivers' behavior patterns may disrupt the overall traffic system.\nTo address the all above challenges, we propose a GPT-Augmented Reinforcement Learning with Intelligent Control framework, GARLIC, which utilizes an improved MARL approach. Specifically, we design a hierarchical traffic state representation module to integrate traffic features at different granularities, providing a comprehensive representation of real-time traffic conditions. Additionally, we quantify driving behavior through dynamic rewards using a contrastive learning method, aligning dispatching instructions with the intents of drivers. Given the complex analytical and understanding capabilities required for learning vehicle dispatching policies, we employ a Generative Pre-trained Transformer (GPT)-augmented model with a self-defined loss function to enhance the expression of the framework. To the best of our knowledge, our innovative framework offers a comprehensive solution to the core challenges in vehicle dispatching, setting a new benchmark in this field. Our main contributions can be summarized as follows:\n\u2022 Our proposed framework, GARLIC, combines hierarchical traffic state representation, dynamic reward generation, and GPT-augmented dispatching policy learning. To the best of our knowledge, this novel approach builds a complete GPT-enhanced MARL vehicle dispatching framework that has not been explored previously;\n\u2022 We utilize multiview graphs to depict the hierarchical traffic states in the road networks and establish a dynamic reward model for capturing driving behaviors, leading to better dispatching policy outcomes. These innovations contribute significantly to the improved performance of vehicle dispatching;\n\u2022 Extensive experiments on two real-world road networks against advancing baselines demonstrate the effectiveness and efficiency of GARLIC."}, {"title": "Preliminary", "content": "In this paper, we adopt a novel MARL method to optimize online car-hailing dispatching policies. This section outlines critical definitions for understanding our paper.\nVehicle Trajectory \\(\\mathcal{T}\\): This refers to a sequence of GPS points \\((x_t, y_t)\\) recorded over a time interval \\(t \\in [T]\\), represented as \\(\\tau = (x_1, y_1, t_1), \\ldots, (x_T, y_T, t_T)\\). A vehicle can generate multiple trajectories based on different statuses (such as empty or occupied). We focus solely on empty vehicle trajectories to better understand driving behavior when drivers don't have a specific destination.\nmultiview Graph \\(G^i\\): We define the multiview graph as \\(G^i = \\{V^i, E^i\\}\\), where \\(i \\in \\{\\text{micro}, \\text{meso}, \\text{macro}\\}\\) presents different views, the node set \\(V^i\\) represents various traffic zones, and the edge set \\(E^i\\) indicates the connections among these zones. The features of each traffic zone at time \\(t\\) are denoted by \\(X_t^i \\in \\mathbb{R}^{|V^i| \\times m^i}\\), capturing vehicle availability and order demand. For different views of graphs, we have different graph features: \\(m_{\\text{micro}} \\neq m_{\\text{meso}} \\neq m_{\\text{macro}}\\).\nMulti-Agent Reinforcement Learning for Vehicle Dispatching: In our model, each vehicle in the road network acts as an independent agent, with distinct driving behaviors and the ability to generate continuous trajectories and monitor local traffic conditions. For each agent (vehicle) \\(u\\), we consider the following five essential elements:\n\u2022 Decision Time \\([T]\\): It is a set of all finite decision timesteps \\([T] = \\{1, \\ldots, t, \\ldots, T\\}\\). At each timestep \\(t\\), the vehicle location and environment states are sampled.\n\u2022 Action \\(A^u\\): \\(A^u = \\{a_1^u, \\ldots, a_t^u, \\ldots, a_T^u\\}\\) represent the set of actions to balance the vehicle supply and demand. \\(a_t^u := \\{\\text{dis}, \\text{deg}\\}\\) is an action performed by the vehicle \\(u\\) at time \\(t\\), where \\(\\text{dis}\\) is the straight-line distance a vehicle needs to travel from time \\(t\\) to \\(t+1\\), and \\(\\text{deg}\\) means the azimuth angle between the target and current locations.\n\u2022 State \\(S^u\\): \\(S^u = \\{S_1^u, S_2^u, \\ldots, S_T^u\\}\\) represents the set of traffic states observed at each time \\(t\\). Here \\(S_t^u\\) is the concatenation of the state embedding matrix \\(\\text{Emb}_{G,t}^u\\) extracted from the traffic environment and the location embedding matrix \\(\\text{Emb}_{loc,t}^u\\) of the vehicle at time \\(t\\).\n\u2022 Reward \\(R^u\\): \\(R^u = \\{r_1^u, \\ldots, r_t^u, \\ldots, r_T^u\\}\\) represents the set of rewards calculated by the reward function, and it is predefined according to the driver's driving behavior and the taxi fare. The total return is defined as \\(\\sum_{t=1}^T \\gamma^t \\cdot r_t^u\\), where \\(\\gamma\\) is a discount factor, \\(\\gamma \\in [0, 1]\\).\n\u2022 Policy \\(\\pi^u\\): \\(\\pi^u = \\pi(a|s)\\) is a mapping from traffic states to dispatching actions of the \\(u\\)-th agent. The policy \\(\\pi\\) determines the appropriate vehicle dispatch instructions \\(a\\) by analyzing the state \\(s\\), which includes various features of the environment and the current status of the agent.\nWhile agents in the same area and close to each other may share the same multiview graphs \\(G^i\\) of the road network and observe similar traffic features \\(X_t^i\\), they exhibit unique driving behaviors that significantly influence their vehicle trajectories. To account for these behavioral differences, our study departs from conventional MARL frameworks with fixed rewards by employing a dynamic reward model. Additionally,"}, {"title": "The Proposed Framework", "content": "In this section, we first provide a framework overview of GARLIC. Then we introduce the hierarchical traffic state representation method to capture the real-time traffic states. Furthermore, we demonstrate a dynamic driving reward generation approach to score vehicle trajectories under different driving behaviors. Finally, a GPT-augmented dispatching policy learning model is applied to combine all of the components and learn the vehicle dispatching policy.\nFigure 2 provides an illustration of the overall vehicle dispatching framework, which is composed of three key modules: the hierarchical traffic state representation module, the dynamic reward generation module, and the GPT-augmented dispatching policy learning module.\nIn the first module, we employ a multiview Graph Convolutional Network (GCN) to represent the hierarchical traffic state by integrating traffic information gathered by various vehicles at different levels of granularity. By combining this with GeoHash-based vehicle location embeddings, we can accurately calculate the real-time traffic state of the specific region where each vehicle is located.\nThe second module utilizes a Gated Recurrent Unit (GRU)-based Recurrent Neural Network (RNN) to model driving behaviors, generating dynamic rewards that are\nweighted by the regional median carfare. This approach ensures that the reward system reflects both the temporal and spatial nuances of driver behavior.\nFinally, in the third module, we frame the training of the MARL-based vehicle dispatching task as a supervised learning process (Wang et al. 2024b; Yamagata, Khalil, and Santos-Rodriguez 2023). For each agent, the time-ordered states and rewards are utilized as inputs, and a GPT-augmented model is employed to produce high-precision actions for vehicle dispatching."}, {"title": "Hierarchical Traffic State Representation", "content": "Urban spatiotemporal data exhibits hierarchical characteristics (Ning et al. 2024), which cannot be directly represented using a single structured data format. For instance, features such as turning movements at a crossroad can only be captured from a micro-level view of the traffic environment, whereas the average travel time is a feature observable only from a macro-level perspective of the same environment. These features differ in sampling frequencies, dimensions, and units, necessitating specialized approaches to represent and integrate them accurately.\nTo address this issue, we present the road network as multiview honeycomb graphs, as shown in Figure 3(a). In this representation, the road network is divided into grids comprising square hexagons of varying radii, each representing a distinct view. Here, the hexagon-based grids ensure uniform distance from all adjacent neighbors to the central grid, facilitating more precise modeling of different spatial regions\nthan square grid-based methods. To construct the multiview graph, each grid is treated as a node, and the traffic information in a grid is considered to be the node feature, with edges connecting adjacent grids, as shown in Figure 3(b).\nUnlike other road network modeling methods, we calculate distinct traffic indicators for different views of graphs. The micro-level graph primarily utilizes vehicle trajectory, road congestion status, and vehicle speed-data that can be directly obtained from the local environment (radii < 1km) of a vehicle. The meso-level graph considers factors such as traffic volume, average traffic speed, intersection performance, and parking availability, which require analysis of all vehicles passing through a set of certain traffic sections\u00b9 (1km < radii < 5km). Meanwhile, the macro-level graph includes features such as average travel time, road network connectivity, and overall traffic conditions, which necessitate a more comprehensive analysis of vehicles across a broader range (radii \u2265 5km) of the road network.\nTo extract refined the traffic embeddings \\(\\text{Emb}_{G,t}^u\\), a GCN-based model is then deployed for multiview graph representation for a vehicle \\(u\\):\n\\(\\text{Emb}_t^u = \\text{Concat} \\left( \\text{Emb}_t^{u,i} \\right),\\)\n\\(\\text{Emb}_t^{u,i} = \\text{GCN}(A^{u,i}, X_t^{u,i}) = A^{u,i} X_t^{u,i} W^i,\\)\nwhere \\(i \\in \\{\\text{micro}, \\text{meso}, \\text{macro}\\}\\), \\(W^i\\) is the weight matrix that need to be trained, \\(A^{u,i}\\) is the adjacency matrix of the graph \\(G^u\\), under a specific view \\(i\\), and \\(X_t^{u,i}\\) is the traffic features related to the graph \\(G^u\\), at time \\(t\\).\nNote that a high-accuracy location embedding of real-time trajectories is essential for this task. We first use GeoHash (Morton 1966) to encode each real-time GPS point, based on latitude and longitude, in the trajectory:\n\\(\\text{Emb}_{loc,t}^u = \\text{GeoHash} \\left( \\text{lat}_t^{loc}, \\text{lon}_t^{loc} \\right),\\)\nwhere \\(t \\in \\{0, 1, \\ldots, T\\}\\) presents a specific timestep, and \\(\\text{loc}_t := (\\text{lat}_t^{loc}, \\text{lon}_t^{loc})\\) is the real-time GPS point of vehicle \\(u\\). By combining this location embedding with the traffic state surrounding vehicle \\(u\\) at time \\(t\\), we obtain the overall state embeddings of vehicle \\(u\\):\n\\(s_t^u = \\text{Concat} \\left( \\text{Emb}_{G,t}^u, \\text{Emb}_{loc,t}^u \\right).\\)"}, {"title": "Dynamic Reward Generation", "content": "The effective implementation of vehicle dispatching in real-world scenarios is largely influenced by driving behavior. However, early studies often ignored the quantification of driving behavior, focusing instead on minimizing vehicle imbalance or maximizing benefits in dispatching optimization (Wagenmaker and Pacchiano 2023). In this section, we propose a dynamic reward generation method that incorporates both driving behaviors and anticipated income. It quantifies the likelihood of drivers adhering to their driving habits by analyzing the vehicle trajectories in real-time.\nTo accurately capture the relationship between driving trajectories and corresponding driving behaviors in traffic embeddings, we deploy a GRU-based RNN model. This network calculates the probability \\(p_t^u\\) whether a trajectory belongs to a given vehicle \\(u\\).\n\\(\\begin{aligned}\nz_t^u &= \\sigma \\left(W_{zx} \\text{Emb}_{loc,t}^u + W_{zp} h_{t-1}^u + b_z\\right), \\\\\ny_t^u &= \\sigma \\left(W_{yx} \\text{Emb}_{loc,t}^u + W_{yp} h_{t-1}^u + b_y\\right), \\\\\n\\tilde{p}_t^u &= \\tanh \\left(W_x \\text{Emb}_{loc,t}^u + W_p \\left(y_t^u \\odot h_{t-1}^u\\right) + b'\\right), \\\\\nh_t^u &= z_t^u \\odot h_{t-1}^u + (1 - z_t^u) \\odot \\tilde{p}_t^u,\n\\end{aligned}\\)\nwhere \\(t \\in \\{1, 2, \\ldots, T\\}\\), \\(h_0^u := \\text{Emb}_{loc,0}^u\\) is the location embedding at initial timestep \\((t=0)\\), \\(W_{\\text{GRU}} = \\{W_{zx}, W_{zp}, W_{yx}, W_{yp}, W_x, W_p\\}\\) is the set of weight matrices of GRU, and \\(b_{\\text{GRU}} = \\{b_z, b_y, b'\\}\\) is the set of bias.\nWe employ a contrastive learning method to optimize the model parameters. Since different drivers exhibit distinct driving behaviors, trajectories generated by other vehicles are used as negative samples when modeling a specific driver's behavior, as illustrated in Equation (5).\n\\(\\text{Loss}_{\\text{pre-training}} = \\max \\sum_{u \\in [N]} \\sum_{t \\in [T]} q_t^u \\log p_t^u,\\)\nwhere \\(N\\) is the total number of online car-hailing vehicles, \\(q_t^u \\in \\{0, 1\\}\\) is the ground truth of the GPS point generated by the vehicle \\(u\\) at time \\(t\\).\nAdditionally, when a vehicle is carrying passengers, the regional median carfare earned by a driver is another factor influencing vehicle dispatching. Therefore, we introduce the dynamic reward function, which incorporates both factors by introducing a hyperparameter \\(\\alpha\\) to weigh them together.\n\\(r_t^u = \\alpha \\cdot p_t^u + (1 - \\alpha) \\cdot \\sigma \\left(W_{\\text{fare}} x_t^{\\text{fare}}\\right),\\)\nwhere \\(\\sigma(\\cdot)\\) is the sigmoid activation function, \\(\\tilde{x}_t^{\\text{fare}} = \\text{E}_{t' < t} X_{t'}^{\\text{fare}}\\) and \\(W_{\\text{fare}}\\) is the weight matrix."}, {"title": "GPT-Augmented Dispatching Policy Learning", "content": "As discussed in the framework overview, vehicle dispatching can be effectively modeled as a MARL problem, which can also be reformulated as a supervised learning task. In this context, states and rewards are treated as sequential input data, with the corresponding sequence of actions as the output data. However, the complexity of transportation systems, which requires the analysis of intricate traffic states\nand driving behaviors, demands advanced reasoning capabilities. Recently, the GPT model has demonstrated strong performance in handling long-sequence, context-dependent, and structured data. Therefore, we utilize a GPT-augmented model to address these challenges.\nNote that the core part of a GPT model is the transformer structure. The input of the transformer is a sequence of temporal data, and we assign different positional embeddings to the data at different timesteps. At each timestep, we mainly use two deep transformer decoder blocks to extract the probability of the next action. We use the expected reward at the current time step as the input of the first transformer decoder block, and get the output embedding to guide the subsequent transformer decoder block to calculate the result:\n\\(\\begin{aligned}\n\\text{Emb}_{r,t} &= \\text{Decoder}_1 \\left(P_{a,t-1}, r_{t,t}\\right), \\\\\nP_{a,t} &= \\text{Decoder}_2 \\left(\\text{Emb}_{r,t}, S_{t,t}\\right),\n\\end{aligned}\\)\nwhere \\(t\\) starts from 1, and \\(P_{a,0} = O\\) is initialized as the zero tensor at \\(t = 0\\). \\(\\text{Decoder}_k(x, y, z) = \\text{Decoder} \\left(\\text{Decoder} \\cdots \\text{Decoder}\\right) (x, y, z)\\) is a \\(k\\)-layer deep neural network of the transformer decoders. For each layer \\(\\text{Decoder}^k(x, y, z) = \\text{Attention}(x + \\text{Emb}_{pos}(t), x + \\text{Emb}_{pos}(t), y + \\text{Emb}_{pos}(t))\\), we add the same positional embedding \\(\\text{Emb}_{pos}(t)\\) to each input \\(x\\) and \\(y\\). Here \\(\\text{Attention}(x, y, z) = \\text{softmax} \\left(\\frac{(xW_q)(yW_k)^T}{\\sqrt{d_k}}\\right)zW_v\\), where \\(\\sigma(\\cdot)\\) is the GeLU activation function.\nFinally, we use a Multi-Layer Perceptron (MLP) mapping the action probability tensor \\(P_{a,t}\\) to a unique result \\(a_t'\\) in the closed action set \\(A\\) as the action that a vehicle needs to perform in the current step:\n\\(a_t' = [a_t^{(1)'}, a_t^{(2)'}] = \\text{MLP}_w(P_{a,t}),\\)\nwhere \\(a_t^{(1)'}\\) is the normalized distance from the current location, \\(a_t^{(2)}\\) \\(\\in [0^\\circ, 360^\\circ]\\) is the direction that a vehicle headed to, and both of \\(a_t^{(1)'}\\) and \\(a_t^{(2)}\\)' make up the unique action that controls this vehicle, \\(W_a\\) is the training parameters.\nNote that the difference between 359\u00b0 and 1\u00b0 is only 2 degrees when measuring angles. Most common loss functions (e.g., MAE Loss and MSE Loss) cannot describe this phenomenon well. To train our framework GARLIC effectively, we proposed a novel loss function, named Geospatial Loss (GeoLoss), to minimize the geospatial difference between the predicted action and the ground truth for this task, and our training target is to minimize the GeoLoss that we defined below:\n\\(\\min \\text{Loss}(\\alpha, a_t) = \\min \\left(\\left(\\alpha_t^{(2)'} - a_t^{(2)}\\right)^2, \\\\(\\left(\\alpha_t^{(2)} + 360^\\circ - a_t^{(2)'}\\right)^2 + (\\alpha_t^{(1)'} - a_t^{(1)})^2\\right).\\)"}, {"title": "Experiments", "content": "This section conducts extensive experiments using 2 real-world datasets to evaluate the effectiveness of GARLIC. We first introduce the experimental settings. Next, we compare\nGARLIC with representative baselines. Finally, the ablation study and a case study are introduced to illustrate our framework better. More experiments are detailed in the Appendix."}, {"title": "Experimental Settings", "content": "Dataset. We use two datasets with different scales for experiments: one is located in lower and midtown Manhattan, New York City, USA, and the other larger dataset is the taxi trajectory data from the core area of Hangzhou, Zhejiang Province, CHN.\nMetrics. We use the Euclidean distance metric, Error, to assess the discrepancy between predicted actions and the driver's actual driving intentions. Additionally, the empty-loaded rate metric is employed to measure the efficiency of the car-hailing service, which is another widely used metric in transportation systems (Cao, Wang, and Li 2021).\nBaselines. We compare GARLIC with baselines from two different categories: (1) Online RL methods: MT (Robbennolt and Levin 2023) and FTPEDEL (Wagenmaker and Pacchiano 2023); (2) Offline RL methods: CQL (Kumar et al. 2020), TD3+BC (Fujimoto and Gu 2021), Decistion Transformer (DT) (Chen et al. 2021), RLPD (Ball et al. 2023), latent offline RL (Hong, Levine, and Dragan 2024), and SS-DT (Zheng et al. 2023)."}, {"title": "Implementation Detail", "content": "Firstly, it's important to note that the correlation and influence between vehicles decrease exponentially with distance (Zhao et al. 2024). To avoid network congestion, we only allow V2V communications between vehicles in adjacent regions. In addition, we limit the waiting time for vehicles to broadcast and receive V2V multi-hop messages across different regions to 1 second, ignoring any timed-out transmissions. Typically, the delay for 1-hop 5G V2V data transmission ranges from 50ms to 200ms (Hakak et al. 2023; Boualouache and Engel 2023), enabling at least 5-hop communication within this limitation. As the macro-level graph shown in Figure 3, 5 communication hops allow vehicles to gather traffic information within about a 55km radius (city-level), which is sufficient for vehicle dispatching tasks.\nAdditionally, our experiments are simulated on the open-source software SUMO for secondary development and are deployed in a Linux server with two Intel(R) Xeon(R) Gold 6248R CPUs, 8 NVIDIA V100 32G graphics cards, and 800G memory."}, {"title": "Overall Performance", "content": "The performance of all the baselines in both two datasets is shown in Table 1, in terms of the two metrics we introduced before, i.e., Error and empty-loaded rate. We use M to present the Manhattan dataset and use H to stand for the\nHangzhou dataset. The performance of all methods is the average result of the last 100 epochs in a total of 1000 runs.\nWe can see that GARLIC significantly reduces the error compared to other baselines, primarily due to our adoption of a more effective loss function for guiding the model during back-propagation and training. Unlike online reinforcement learning methods, nearly all offline RL approaches, including ours, outperform the online method by better utilizing offline data for effective training. Additionally, conventional offline RL methods (e.g., TD3+BC, CQL, and RLPD) perform poorly on the larger Hangzhou dataset due to their inability to gather comprehensive traffic information within acceptable transmission delays. Although DT, latent offline RL, and SS-DT use similar stacked transformer decoder layers as our framework, they do not model driving behavior in scheduling tasks, limiting their accuracy."}, {"title": "Ablation Study", "content": "The effectiveness of multiview graph. To better understand the role of multiview graph learning in GARLIC, we divide the road network into regions with diameters of 1 km and 2 km (micro-level), 5 km (meso-level), and 10 km and 20 km (macro-level). We then extract 5 graphs with varying traffic features based on these granularities. Under the same 1-second V2V data transmission delay previously mentioned, we sequentially use various combinations of these graphs as inputs to conduct experiments. The results are presented in Figure 4(a).\nThe results indicate that the error in graph learning using a single view is significantly higher than that of multiview graph learning methods. Moreover, when comparing different scales, it is evident that model performance improves as the granularity of the scale decreases.\nTo further explore the relationship between computational latency (including V2V communication and model training time) and multiview graphs, we compared the training time of each model when achieving a scheduling error of 0.7 km, as shown in Figure 4(b). It also verifies that the multiview graph-based learning method could be more efficient than the single-view graph-based learning method.\nIn addition, by analyzing the average error in Figure 4(a) alongside the time cost in Figure 4(b), we selected three multiview graphs with diameters of 2 + 5 + 10 km to model the traffic of road networks efficiently.\nThe Influence of Driving Behavior. To verify the influence of driving behavior, we conduct experiments on this method alone via setting different hyperparameter \\(\\alpha\\) defined in Equation (6). The experimental result is shown in Figure 5. When the weight of driving behavior increases, the error of the predicted vehicle trajectory decreases. At this time, the vehicle follows the path given by the offline data and cannot explore the path that can generate higher income in accordance with the vehicle's driving behavior. Conversely, when \\(\\alpha\\) is close to 0, many passenger loading locations seriously deviate from the roads and regions familiar to the driver although the vehicle can receive more orders. These potential issues are more likely to cause traffic accidents. From Figure 5 we can see that the trajectory error significantly drops when \\(\\alpha\\) is between 0.4-0.7. Therefore, in this paper, we set \\(\\alpha = 0.67\\) to let the dispatch strategy increase the driver's income as much as possible while satisfying each driver's driving behavior.\nThe efficiency of dynamic rewards. In this paper, we propose a dynamic reward function to score different vehicles' driving behavior and expected carfare. This reward function is also the core difference of GARLIC from vehicle"}, {"title": "Case Study", "content": "In this part, we randomly choose an online car-hailing car in Hangzhou as our experimental object. We simulated the vehicle dispatching routes using different methods to compare with the ground truth (Origin), as shown in Figure 7.\nWe selected a local area of Hangzhou for visualization. Different shades of red in honeycomb grids indicate the length of time the current vehicle stayed in one week of history. When the area has no color, the vehicle has not been to this area within a week. It represents the driver's familiarity with different regions and personalized driving behavior. The vehicle is currently located in the bright blue grid, and we visualize 4 dark blue areas with ride-hailing demand in the next 15 minutes. We use arrows of different colors to indicate the calculation results of different models.\nAs can be seen from Figure 7, Order 1 is farther from the departure point of the vehicle compared to Orders 2, 3, and 4. Since Order 4 is in the city center, most methods select this area as the vehicle pick-up point. However, there is a direct arterial road between Order 2 and the vehicle's departure location, so some methods choose to dispatch the vehicle to where Order 2 is located. Our method analyzes the driver's driving behavior and finds that the most suitable place to pick up passengers is the area where order 1 is located. Meanwhile, only the results calculated by our method are consistent with the actual vehicle trajectory, which shows the effectiveness of our proposed method."}, {"title": "Related Work", "content": "This section provides a concise overview of related research in vehicle dispatching. Unlike car-hailing order dispatching, vehicle dispatching focuses on relocating vehicles to ensure a future balance between supply and demand. Many previous studies have modeled this as a Markov decision process, which relies on explicitly fitted state transition probabilities (Zhang et al. 2024, 2023; Sun et al. 2024). Various approaches have been proposed to address the dynamic spatiotemporal distribution of passenger demand and its inherent uncertainties. For instance, Robbennolt et al. (Robbennolt and Levin 2023) introduced a novel maximum throughput policy (MT), designed to serve the maximum number of passenger requests while maintaining the stability of the global vehicle network. However, these methods that rely on global traffic state often face efficiency challenges, making it difficult to meet the real-time demands of vehicle dispatching and limiting their deployment in practical scenarios.\nFurthermore, driver behavior plays a crucial role in transportation analysis (Luo, Ge, and Qu 2023; Mohammed et al. 2023; Cui et al. 2024). Recent studies have begun to incorporate driving behavior into driving applications. For example, Li et al. (Li et al. 2022) used IL method to replicate human driving behavior, effectively transferring these strategies to autonomous vehicle scenarios. Jackson et al. (Jackson, Jesus Saenz, and Ivanov 2024) uses the powerful analysis and processing capabilities of LLAMA-7B to characterize driving behavior and then uses it for autonomous driving simulation. However, there is a relative scarcity of research that quantifies vehicle driving behavior to directly evaluate the rationality of vehicle dispatching orders. Consequently, there is an urgent need to design a more efficient and accurate driving behavior-based vehicle dispatching system."}, {"title": "Conclusion", "content": "In this paper, a novel framework called GARLIC is proposed to address the problem of vehicle dispatching while considering the driving behavior of drivers at the same time. Specifically, our framework can be divided into three modules, i.e., the hierarchical traffic state representation module for traffic state extraction, the dynamic reward generation module for driving behavior as well as carfare analysis, and the GPT-augmented dispatching policy learning module for balancing vehicle supply and passenger demand. The model achieves a response in seconds under multiple real datasets and has excellent performance. In the future, we hope to combine the Kafuka engine and cloud-edge collaboration technologies to further optimize the information transmission of each node in vehicle dispatching, achieve a quick response of hundreds of milliseconds, and improve the driver's order acceptance and user's riding experience."}, {"title": "Appendix A: Dataset", "content": "We use two datasets located in Manhattan and Hangzhou, and the road networks of these two cities are shown in Figure 8. The statistics of datasets we used in this paper are listed in Table 2. In the first dataset, we collect trajectories from 350 taxis within 4 hours and all car-hailing orders in this period that indicate the start and end locations. As for the second dataset, we collect trajectories from 9041 taxis within 1 month and also all car-hailing orders in this period. For all datasets, we partition the training, validation, and test sets in a 6:3:1 ratio based on chronological order."}, {"title": "Appendix B: Data Preprocessing", "content": "In this part", "parts": "map matching, anomalous trajectory detection and filter, and trajectory segmentation.\nFirst, a statistically based anomaly trajectory identification method is applied to improve trajectory data quality. To be specific, We deploy map matching methods (Yu et al. 2022; Wu et al. 2020) to initially map the GPS points to the road segments to solve the problem of GPS drift. Next, we use the shortest path algorithm to calculate the actual trajectory between every two mapped points and add auxiliary GPS anchors at each intersection to ensure that the road segments of the trajectory are continuous.\nNext, we calculate the average speed of a vehicle traveling on a trajectory composed of time series GPS points and then"}]}