{"title": "ControlAgent: Automating Control System Design via Novel Integration of LLM Agents and Domain Expertise", "authors": ["Xingang Guo", "Darioush Keivan", "Geir Dullerud", "Usman Syed", "Lianhui Qin", "Huan Zhang", "Peter Seiler", "Bin Hu"], "abstract": "Control system design is a crucial aspect of modern engineering with far-reaching applications across diverse sectors including aerospace, automotive systems, power grids, and robotics. Despite advances made by Large Language Models (LLMs) in various domains, their application in control system design remains limited due to the complexity and specificity of control theory. To bridge this gap, we introduce ControlAgent, a new paradigm that automates control system design via novel integration of LLM agents and control-oriented domain expertise. ControlAgent encodes expert control knowledge and emulates human iterative design processes by gradually tuning controller parameters to meet user-specified requirements for stability, performance (e.g. settling time), and robustness (e.g., phase margin). Specifically, ControlAgent integrates multiple collaborative LLM agents, including a central agent responsible for task distribution and task-specific agents dedicated to detailed controller design for various types of systems and requirements. In addition to LLM agents, ControlAgent employs a Python computation agent that performs complex control gain calculations and controller evaluations based on standard design information (e.g. crossover frequency, etc) provided by task-specified LLM agents. Combined with a history and feedback module, the task-specific LLM agents iteratively refine controller parameters based on real-time feedback from prior designs. Overall, ControlAgent mimics the design processes used by (human) practicing engineers, but removes all the human efforts and can be run in a fully automated way to give end-to-end solutions for control system design with user-specified requirements. To validate ControlAgent's effectiveness, we develop ControlEval, an evaluation dataset that comprises 500 control tasks with various specific design goals. The effectiveness of ControlAgent is demonstrated via extensive comparative evaluations between LLM-based and traditional human-involved toolbox-based baselines. Our numerical experiments show that ControlAgent can effectively carry out control design tasks, marking a significant step towards fully automated control engineering solutions.", "sections": [{"title": "1 Introduction", "content": "Recent advancements in large language models (LLMs) have spurred the development of sophisticated LLM agents, demonstrating remarkable capabilities in areas such as code generation, reasoning, tool use, and software development, among many other applications. Despite these breakthroughs, the application of LLM agents in modern engineering design remains relatively underexplored. Building on the exciting progress in"}, {"title": "2 Related Work", "content": "Classic Control Design. Controller design is traditionally approached in a case-by-case manner, as it heavily depends on the specific applications at hand. Among various control strategies, PID control and loop-shaping remain the most widely used due to their simplicity and ease of implementation. Over the years, a plethora of PID/loop-shaping tuning methods have been developed. Despite these advancements, the tuning process still heavily relies on human expertise and manual intervention to identify suitable controller parameters that meet design criteria. ControlAgent aims to fill this gap via integrating LLM agents and human expert knowledge for automating control system design."}, {"title": "3 Preliminary", "content": "This section briefly reviews the basic background of classic control. The field of control engineering focuses on the design, analysis, and implementation of feedback mechanisms that are used to regulate and steer dynamic systems to achieve desired outputs or behaviors. Application examples includes everyday devices like the heating and air conditioning as well as more advanced systems such as autonomous cars and airplane autopilots. First, we will review the notion of dynamical systems studied in classic control.\nDynamical System Models. A dynamical system can be represented in various mathematical forms to describe the relationship between the inputs and outputs, including differential equations, state-space models, and transfer functions. The main objects studied in classic control design are linear time-invariant (LTI) systems, which can be represented in either time domain by a linear ordinary differential equation (ODE) or in frequency domain by an equivalent transfer function. For instance, the transfer function of an LTI system has the following form:\n$G(s) = \\frac{b_ms^m + b_{m-1}s^{m-1} + \\dots + b_1s + b_0}{a_ns^n + a_{n-1}s^{n-1} + \\dots + a_1s + a_0}$ (3.1)\nwhere $s$ is the complex frequency variable in the Laplace domain. It is common to assume that the system is proper ($m \\leq n$) as this aligns with models for physical systems. Notice that the system (3.1) has an equivalent time-domain ODE form that relates the input signal $u(t)$ to the output signal $y(t)$:\n$a_n \\frac{d^n}{dt^n}y(t) + ... + a_1 \\frac{d}{dt}y(t) + a_0 y(t) = b_m \\frac{d^m}{dt^m}u(t) + ... + b_1 \\frac{d}{dt}u(t) + b_0u(t)$ (3.2)\nThis form is general enough to model the dynamics of various practical systems such as automotive systems, robotics, and many others. Importantly, there always exist gaps between models and reality. Classic control design is highly successful in practice as control engineers use safety factors (\"stability margins\") that account for such model-reality gaps."}, {"title": "4 ControlAgent", "content": "In this section, we present ControlAgent, detailing its agent architecture, iterative design mechanisms, and communication protocols. An overview of ControlAgent has been illustrated in Figure 1,\nAgent Design. We break down the complex controller design into smaller and more specific tasks, requiring the collaboration of agents with different skills and expertise. ControlAgent compromises three types of agents:\n1. Central agent $A_c$ acts as the task distributor, processes user inputs and assigns specific requests to the sublevel agents based on the nature of the controller design task.\n2. Task-specific agent $A_{spec}$ receives the user request and high-level task analysis from the central agent, and encodes with domain-specific expertise to initiate the controller design process, following the iterative methodology discussed below.\n3. Python computation agent $A_p$ carries out the complex computation steps involved in controller design and performance evaluations, ensuring reliable controller synthesis and evaluations."}, {"title": "5 ControlEval", "content": "Since no suitable open-source dataset is currently available for validating ControlAgent, we developed a new evaluation dataset, called ControlEval, to serve this purpose. ControlEval consists of 10 distinct types of control tasks based on various systems and requirements. For each task type, we construct 50 individual systems, each paired with its corresponding design requirements, resulting in a comprehensive dataset of 500 control tasks. ControlEval includes a diverse set of dynamical systems such as first-order stable and unstable systems, second-order stable and unstable systems with varying response speed modes, first-order systems with time delay, and general higher-order systems. The design criteria for each task involve a combination of closed-loop stability, settling time (to quantify tracking performance), and phase margin (to assess robustness). These are three key metrics for classic control design. For first and second-order stable systems, we further differentiate between three different speeds of response defined by the variation in settling time: fast, moderate, and slow. The fast mode requires the system to converge to its steady-state value within a short period of time, which is typical for applications that demand quick response times, such as servo motor control systems and quadcopter flight control systems. In contrast, the slow mode requires a more gradual convergence, which is more suitable in scenarios where the dynamic system model is less precise and less aggressive control is desired, such as wind turbine control. Some samples from ControlEval are provided including the system types, system dynamical models, response mode, and the associated design requirements.\nDue to inherent limitations in the control of unstable systems, systems with time delays, and higher-order systems, it is not always possible to satisfy arbitrary combinations of performance/robustness requirements. Therefore, human experts have carefully curated the dataset to ensure that the task requirements are feasible and achievable. Further information on the dataset can be found in Appendix D."}, {"title": "6 Experimental Results", "content": "In this section, we present a comprehensive set of experiments to evaluate the performance of ControlAgent on the ControlEval. GPT-4o is used as the main underlying base LLM for both the central agent and task-specific agents, and study on comparing different base LLMs is also presented. The detailed prompts for ControlAgent can be found in Appendix E.1. Additionally, we compare ControlAgent against two different baseline categories: LLM-based and control toolbox-based baselines.\nLLM-based Baselines: We consider four LLM-based baseline approaches utilizing GPT-4o: zero-shot prompting, zero-shot Chain-of-Thought (CoT), few-shot, and few-shot CoT. In the zero-shot approach, we directly provide the user requirements and ask the LLM to perform the controller design without additional guidance. The CoT variant enhances this by prompting the LLM to explicitly conduct the design step-by-step. For the few-shot approach, we present the LLM with several examples of successful controller designs to guide its process. In the few-shot CoT setting, the prompt not only includes the successful designs but also details the step-by-step reasoning process required to create a successful controller. The detailed prompt for each setting can be found in Appendix E.2.\nControl Toolbox-based Baseline: We also considered the widely used control toolbox for PID design: PIDtune from MathWorks as a baseline. This toolbox is human-involved as the user needs to specify a proper value of crossover frequency as an input to optimize the controller gains, whereas ControlAgent tunes crossover frequency automatically without any human effort. Further details on how we set up PIDtune are reported in Appendix C.\nEvaluation Metrics: We use two main metrics to evaluate the performance of ControlAgent and baseline methods. Specifically, we use Average Successful Rate (ASR) to measure the effectiveness of control designs across multiple independent trials for each method, and we use Aggregate Successful Rate (AgSR) to evaluate the success designs on a system-by-system basis, where one system is considered successfully designed if at least one of the multiple independent trials results in a successful controller design. The formal definition of ASR and AgSR can be found in Appendix C.\n6.1 Main Results\nTable 2 shows the ASR of ControlAgent and various baseline methods on the ControlEval benchmark. The best results for each task are highlighted in bold. Our key observations are given below."}, {"title": "7 Limitations and Future Work", "content": "In this paper, we introduced ControlAgent, an advanced LLM-powered framework for automated control system design. Despite the strong performance of ControlAgent across a range of control tasks, several limitations indicate avenues for future research and enhancement. One primary constraint is that the current implementation of ControlAgent is tailored to LTI systems and conventional control strategies, such as loop-shaping and PID controllers. Future work can expand ControlAgent's capabilities by considering complex nonlinear systems and integrating advanced control strategies, such as adaptive and robust controllers. Another compelling direction involves utilizing different base LLMs for distinct roles, leveraging their unique strengths and expertise. For instance, incorporating fine-tuned, smaller LLMs for specialized tasks within control system design could improve efficiency and reduce dependence on proprietary models. Finally, the evaluation dataset, ControlEval, could be further extended to include more complex control tasks, such as real-world systems and hardware implementations, providing a more comprehensive assessment of ControlAgent's practical utility. We provide more detailed discussions on the future research directions in Appendix A.\nEthics Statement\nIn developing ControlAgent, we carefully considered the ethical implications of our work and took steps to ensure responsible research practices. All experiments were conducted using simulation environments and synthetic datasets, with no involvement of human subjects, thereby avoiding any privacy, security, or legal compliance concerns. ControlAgent's focus on automated control system design raises the possibility of its deployment in critical applications, such as industrial automation, autonomous vehicles, and robotics. Improper use or deployment of AI-driven control systems in such domains could result in unintended outcomes. To mitigate these risks, we emphasize the need for rigorous testing, validation, and adherence to established safety standards before applying ControlAgent to real-world systems."}, {"title": "Appendix", "content": "A ControlAgent: Future Outlook\nIn this section, we explore the future prospects of ControlAgent. We believe that ControlAgent represents a foundational initial step toward automated control system design using LLMs. Further research is necessary to expand its capabilities, enabling it to tackle more complex and realistic control challenges.\nA.1 Expansion to Nonlinear Systems and Advanced Control Strategies\nThe current scope of ControlAgent is limited to Linear Time-Invariant (LTI) systems and conventional control strategies, which, although widely used in many industrial applications, restrict its applicability to a subset of control problems. However, in real-world scenarios, many systems exhibit nonlinear behavior, time-varying dynamics, or other complexities that are not sufficiently captured by LTI models. Future research should aim to incorporate advanced control strategies, such as nonlinear control methods (e.g., Lyapunov control, sliding mode control, backstepping, etc.), as well as adaptive and robust control frameworks. Expanding ControlAgent to handle these complex dynamics would significantly broaden its applicability to industries requiring sophisticated control solutions, such as robotics, aerospace, and automotive engineering. Additionally, leveraging the creative potential of LLMs could lead to innovative control strategies beyond the scope of traditional human-designed approaches.\nA.2 Modular Integration of Different LLMs\nThe architecture of ControlAgent currently relies on a single base LLM for both central LLM agent and task-specific LLM agent. A promising research direction involves the modular integration of various LLMs based on their specific expertise. For example, specialized LLMs fine-tuned for mathematical reasoning, optimization, or control theory could be assigned to different roles within the overall framework of ControlAgent. This modular approach could leverage smaller, more focused models to handle niche aspects of control design. In addition, using open-source LLMs for non-critical tasks would reduce the reliance on proprietary models, making ControlAgent more accessible and adaptable.\nA.3 Extending the ControlEval Dataset for Comprehensive Validation\nControlEval includes various control tasks that predominantly feature LTI systems. Extending ControlEval to include more complex tasks, such as real-world control systems and hardware-in-the-loop simulations, would provide a more robust validation of ControlAgent's capabilities. Additionally, including scenarios that test the robustness and adaptability of ControlAgent to external disturbances, model uncertainties, and unmodeled dynamics would further establish its practical utility and readiness for real-world deployment.\nB More Discussions on Related Work and Control Background\nB.1 More Related Work\nClassic Control Design PID controllers have been a cornerstone of control system design. The widespread adoption of PID controllers is attributed to their simplicity, robustness, and effectiveness in managing a"}, {"title": "B.2 More Background on Classic Control", "content": "Here we review a few control-theoretic concepts that are crucial for classic control design. A fundamental requirement in most control engineering applications is closed-loop stability. For an LTI system with a transfer function G(s), it is considered to be stable if all poles of the transfer function (i.e., the roots of the denominator) have negative real parts. The closed-loop stability means that the closed-loop transfer function from the reference signal r(t) to the output signal y(t) has to be stable. In the control language, the sensitivity function and the complementary sensitivity function are both required to be stable. Mathematically, we require all the roots of $1 + G(s)C(s) = 0$ to have strictly negative real parts.\nFor a stable LTI system, the settling time $T_s$ is the time for the output to converge within $\\pm2\\%$ of the steady-state value given that the input is a step function. Slightly different definitions are sometimes used, e.g. 5% or 1% settling times. Since PIDtune uses the 2% settling time as default, we also adopt 2% settling time in our study. The settling time is one main measure for the system speed of response.\nFor a stable LTI system, the phase margin is the amount of allowable variation in the phase of the plant before the closed-loop becomes unstable, and the gain margin is the amount of allowable variation in the gain of the plant before the closed-loop becomes unstable. As shown in Figure 4, phase margin can be determined from Bode plots. Phase margin is typically viewed as the most important robustness metric for classic control design."}, {"title": "C More on Experimental Study", "content": "C.1 More on the Experimental Setup\nLLM-based Baselines. We evaluate four LLM-based baseline approaches: zero-shot prompting, zero-shot Chain-of-Thought (CoT), few-shot, and few-shot CoT. For the few-shot baselines, we provide two demonstration examples tailored to the specific task type. For instance, in the case of first-order unstable system design, the few-shot setting includes two examples demonstrating successful controller designs for unstable first-order systems, along with the associated control design criteria. In the few-shot CoT setting, we further include detailed reasoning steps to illustrate the process of designing a successful controller for the given demonstration examples. A complete example of the few-shot CoT prompt is provided in Appendix E.2. All LLM-based baselines are implemented using GPT-4o, with model hyperparameter settings detailed in Table 5.\nControl Toolbox-based Baseline. We use the widely employed control design toolbox PIDtune as a baseline, which provides various settings for tuning PID controllers for linear and higher-order systems. To ensure a fair comparison, we incorporate control domain knowledge to specify appropriate inputs, such as phase margin and crossover frequency, to PIDtune, enabling it to achieve the desired control design criteria in a single step. Specifically, we use two distinct configurations to establish PIDtune as a baseline: For first and second-order systems (both stable and unstable), PIDtune is configured with the desired phase margin and open-loop crossover frequency. The phase margin is directly derived from the task requirements, while the crossover frequency is determined as $C/T_s$, where $C\\in [3, 5]$ is a constant, and $T_s$ is the required settling time. For each trial, C and T, are randomly sampled within their specified ranges to align with the design specifications. For higher-order systems, the relationship between the crossover frequency and the settling time $T_s$ is not clear in general. As a result, only the phase margin requirement is supplied to PIDtune to optimize the PID gains."}, {"title": "C.2 Evaluation Metric", "content": "Average Successful Rate Suppose for each control task, our evaluation dataset consists of N sample systems and the associated predefined criteria, such as stability, phase margin, settling time. Let $S_{i,j}$ denote the outcome of the j-th trial for the i-th system, where $S_{i,j} = 1$ if the design is successful and $S_{i,j} = 0$ otherwise. The averaged successful rate for trial j is computed as\n$ASR_j = \\frac{1}{N} \\sum_{i=1}^{N} S_{i,j}$,\nand the overall ASR across all T trials is given by\n$ASR = \\frac{1}{T} \\sum_{j=1}^{T} ASR_j$.\nThis metric provides insight into the average performance of the controller design over multiple trials for each system, reflecting its consistency.\nAggregate Successful Rate This metric evaluates success on a system-by-system basis, where a system is considered successfully designed if at least one of the T independent trials results in a successful design. Specifically, the aggregated success for system i is:\n$AgSR_i = \\begin{cases} 1 & \\text{if } \\sum_{j=1}^{T} S_{i,j} > 0, \\\\ 0 & \\text{otherwise}. \\end{cases}$ (C.1)"}, {"title": "C.3 More Experimental Results", "content": "C.3.1 More Results on AgSR\nTable 6 shows the AgSR of ControlAgent and various baseline methods on the ControlEval benchmark. The best results for each task are highlighted in bold. Our key observations are given below.\nControlAgent consistently outperforms all baseline methods. ControlAgent achieves significantly higher AgSR across all control tasks compared to both LLM-based and traditional toolbox-based baselines. This superior performance is evident not only for simpler first-order and second-order stable systems but also for more complex cases, such as unstable and higher-order systems. While PIDtune performs well for first-order and second-order stable systems, as well as first-order systems with time delay, it struggles in more challenging scenarios like first-order unstable, second-order unstable, and higher-order systems. In these cases, ControlAgent's effectiveness becomes more apparent, especially as the complexity of the problem increases.\nIt is important to note that because of the inherent randomness in the answers generated by LLMs, individual runs of ControlAgent may yield different outcomes. However, when looking at aggregate results across multiple iterations, ControlAgent achieves 100% success across all design problems except for higher-order systems, where it still achieves an impressive 96%. While this falls short of 100%, it is a significantly better result than any other toolbox-based method and LLM-based baselines, and given the difficulty of higher-order system design, this accuracy is very promising.\nC.3.2 ASR vs AgSR\nIn Figure 7, we present the ASR and AgSR results for ControlAgent and other baseline methods across first-order and second-order stable systems. ControlAgent consistently outperforms all other methods in both"}, {"title": "C.4 Gain Margin Consideration", "content": "It is also important to highlight that control design can be evaluated using various metrics, with settling time and phase margin being two of the key ones we used. In this section, we further explore the effectiveness of ControlAgent by evaluating another important robustness metric: gain margin. For this analysis, we focus on comparing the designs produced by ControlAgent and PIDtune, our two best-performing methods, both of which already satisfy the settling time and phase margin requirements. We then examine how well their designs perform in terms of gain margin.\nTypically, a good control design should have a gain margin within \u00b16 dB to ensure robustness against model uncertainty. As shown in Table 8, ControlAgent consistently outperforms PIDtune across nearly all scenarios, with the only exception being the first-order system with time delay. Notably, when comparing Table 8 with Table 2, we observe an interesting trend: every ControlAgent design that meets the settling time and phase margin requirements also inherently satisfies the gain margin criterion. This is a crucial result, as gain margin is typically another requirement that control engineers strive to achieve for robust designs.\nIn contrast, PIDtune's performance drops significantly when evaluated by gain margin, especially in more complex systems such as unstable and higher-order systems. This widening performance gap underscores"}, {"title": "C.5 Evolution of ControlAgent Design", "content": "In this subsection, we analyze how ControlAgent's performance evolves over iterations to achieve the desired design. Figure 10 illustrates the simplest case, where ControlAgent is tasked with controlling first-order stable systems. Initially, all three response modes experience substantial settling time errors. However, these errors decrease rapidly, particularly in the slow scenario, which is the easiest to manage. This is because a slower system response reduces sensitivity to phase margin violations, making it easier to meet performance requirements. The moderate scenario, however, requires a few additional iterations to reach the design objectives. As shown in the right plot of Figure 10, the fast scenario presents the most challenge, with a significant phase margin error early on. However, as the iterations progress, ControlAgent successfully reduces both the phase margin and settling time errors, demonstrating its ability to optimize system performance even in scenarios where there is a clear trade-off between performance and robustness.\nFor each scenario, the design requires that the settling time $T_s$ falls within a specified range, $T_s \\in [T_{smin}, T_{smax}]$, and that the phase margin $\\phi$ meets or exceeds a minimum threshold, $\\Phi > \\Phi_{min}$. During each iteration, if the settling time is within this range, the steady-state error is set to zero. Similarly, if the designed"}, {"title": "D More Details on ControlEval", "content": "In this section, we present more details on the construction of ControlEval. We first discuss the dynamical models considered in ControlEval in Section D.1, then the associated performance criteria is discussed in Section D.2. Finally, we discuss the dataset construction in Section D.3.\nD.1 Dynamical System Models\nThis section provides a detailed overview of the various types of dynamical system models included in ControlEval, such as stable and unstable first-order systems, stable and unstable second-order systems, first-order systems with time delay, and higher-order systems. As mentioned in the main paper, a general transfer function for a dynamical system can be expressed as:\n$G(s) = \\frac{Y(s)}{U(s)} = \\frac{b_ms^m + b_{m-1}s^{m-1} + \\dots + b_1s + b_0}{a_ns^n + a_{n-1}s^{n-1} + \\dots + a_1s + a_0}$ (D.1)\nwhere Y(s) and U(s) are output and input, s is the complex frequency variable in Laplace domain. The system is considered stable if all roots of the characteristic equation U(s) = 0 have negative real parts. Depending on the form of U(s) and Y(s), we classify the dynamical system models as follows:\nFirst-order systems. A first-order system is characterized by a first-order polynomial in s for U(s). The corresponding transfer function is $G(s) = \\frac{K}{TS+1}$, where K is a constant gain, and T is the time constant of the first-order system.\nSecond-order systems. Stable second-order systems can be expressed as:\n$G(s) = \\frac{a}{s^2 + 2\\zeta\\omega_ns + \\omega_n^2}$ (D.2)\nwhere $\\omega_n$ is the natural frequency and $\\zeta$ is the damping ratio."}, {"title": "D.2 Performance Criteria", "content": "In linear control system design, key performance criteria include stability, phase margin, and settling time, which are essential for ensuring both the functionality and robustness of the system.\nStability is a fundamental requirement in control systems. Formally, as discussed above, a LTI system is stable if all the poles of its transfer function lie in the left half of the complex s-plane, meaning their real parts are negative. If any pole has a real part greater than or equal to zero, the system is either marginally stable or unstable. Stability ensures that the system's output will return to its equilibrium state after a disturbance, without unbounded oscillations or divergence.\nPhase margin $\\varPhi_m$ is a measure of how close a system is to instability. It is defined as the difference between the phase angle of the system's open-loop transfer function $L(jw) = G(jw)C(jw)$ and $-180\u00b0$ at the gain crossover frequency $\\omega_{gc}$, which is the frequency where the magnitude of the open-loop transfer function is equal to 1 (or 0 dB). Formally, the phase margin PM is given by:\n$PM = 180\u00b0 + arg(L(j\\omega_{gc})).$ (D.3)\nA positive phase margin indicates a stable system, with typical design criteria recommending phase margins between 45\u00b0 and 90\u00b0 for adequate robustness. Phase margin provides insight into how much additional phase lag the system can tolerate before becoming unstable.\nSettling time $T_s$ is a critical metric for evaluating the transient response of a control system. It is defined as the time required for the system's output to remain within a specified percentage (typically 2% or 5%) of its final steady-state value following a step input. Depending on the specific dynamical system, the required settling time can vary significantly-ranging from fast to slow responses\u2014based on factors such as system type, stability requirements, and the presence of unmodeled dynamics. To account for these variations, we consider three distinct response modes for stable first-order and second-order systems in ControlEval."}, {"title": "D.3 ControlEval Generation Details", "content": "In this section, we explain the details on the construction of ControlEval.\nD.3.1 Requirements for different type of dynamical models.\nFirst-order Stable Systems For first-order stable systems, we sample K ~ U(0.005, 200), i.e., we uniform sample K from range [0.005, 200], and $\\tau$ ~ U(0.05, 10). In addition, we require the settling time to be"}, {"title": "E Prompt Design", "content": "E.1 Full Prompts for ControlAgent\nIn this section, we provide the full prompt for ControlAgent, including the prompt for central agent to distribute the control tasks and a sample prompt for the task-specific agent for designing controllers of first-order stable system."}]}