{"title": "NGPT: NORMALIZED TRANSFORMER WITH REPRESENTATION LEARNING ON THE HYPERSPHERE", "authors": ["Ilya Loshchilov", "Cheng-Ping Hsieh", "Simeng Sun", "Boris Ginsburg"], "abstract": "We propose a novel neural network architecture, the normalized Transformer (nGPT) with representation learning on the hypersphere. In nGPT, all vectors forming the embeddings, MLP, attention matrices and hidden states are unit norm normalized. The input stream of tokens travels on the surface of a hypersphere, with each layer contributing a displacement towards the target output predictions. These displacements are defined by the MLP and attention blocks, whose vector components also reside on the same hypersphere. Experiments show that nGPT learns much faster, reducing the number of training steps required to achieve the same accuracy by a factor of 4 to 20, depending on the sequence length.", "sections": [{"title": "INTRODUCTION", "content": "The Transformer architecture (Vaswani et al., 2017) is the foundation for most of modern language models. An enormous number of modifications to this architecture have been proposed to improve training stability, inference costs, context length, robustness, etc. It has been noted that the application of various normalization techniques is beneficial (Salimans & Kingma, 2016), leading to experiments with adding normalization layers such as LayerNorm and RMSNorm in nearly every possible position within the network (Xiong et al., 2020). Another approach to the model normalization is through controlling the norm of weights using weight decay (Loshchilov & Hutter, 2019). Recent studies (Andriushchenko et al., 2023) suggest reevaluating the role of weight decay and taking a closer look at rotations rather than focusing solely on vector norms (Kodryan et al., 2022; Kosson et al., 2023). Franke et al. (2023) suggested to enforce an upper bound on L2 norm of parameter groups. There is growing evidence that representation learning on the hypersphere is associated with more stable training, greater embedding space separability, and better performance on downstream tasks (Wang & Isola, 2020). Recent studies also suggest that transformers implicitly perform gradient descent as meta-optimizers (Von Oswald et al., 2023; Dai et al., 2022).\nWe propose to unify various findings and observations made in the field under a new perspective of the normalized Transformer. Our key contributions are as follows:\nOptimization of network parameters on the hypersphere We propose to normalize all vectors forming the embedding dimensions of network matrices to lie on a unit norm hypersphere. This allows us to view matrix-vector multiplications as dot products representing cosine similarities bounded in [-1,1]. The normalization renders weight decay unnecessary.\nNormalized Transformer as a variable-metric optimizer on the hypersphere The normalized Transformer itself performs a multi-step optimization (two steps per layer) on a hypersphere, where each step of the attention and MLP updates is controlled by eigen learning rates the diagonal elements of a learnable variable-metric matrix. For each token $t_i$ in the input sequence, the optimization path of the normalized Transformer begins at a point on the hypersphere corresponding to its input embedding vector and moves to a point on the hypersphere that best predicts the embedding vector of the next token $t_{i+1}$.\nFaster convergence We demonstrate that the normalized Transformer reduces the number of training steps required to achieve the same accuracy by a factor of 4 to 20."}, {"title": "EVOLUTION OF THE TRANSFORMER: FROM GPT TO NGPT", "content": "This section outlines the baseline Transformer and the modifications necessary to derive its normalized version. We illustrate these changes for Transformer decoder with self-attention only. The extension to encoder-decoder and cross-attention is straightforward. A summary of these changes is given in Table 1, with details in Section 2.6."}, {"title": "TOKEN EMBEDDINGS AND OUTPUT LOGITS", "content": "The decoder-only Transformer is trained to predict token $t_i$ using previous tokens input sequence $x = (t_1, t_2,..., t_{i-1})$. For each input token $t_i$, we retrieve its corresponding embedding in $R^{d_{\\text{model}}}$ from a learnable embedding matrix $E_{\\text{input}} \\in R^{V \\times d_{\\text{model}}}$ with vocabulary of size $V$. Similarly, the target output sequence $y$ is represented using a learnable embedding matrix $E_{\\text{output}} \\in R^{V \\times d_{\\text{model}}}$. Notably, since both $E_{\\text{input}}$ and $E_{\\text{output}}$ are learnable (unless they are tied to be equivalent), any token $t_i$ can have different embeddings in the input and output sequences. To measure token similarity during model training, the dot product between the corresponding embedding vectors is used. However, the norms of embedding vectors in the original Transformer are unconstrained, which can lead to inaccurate similarity estimation. To improve the accuracy of similarity estimation, we propose to normalize the embedding vectors stored in $E_{\\text{input}}$ and $E_{\\text{output}}$ after each step of the training algorithm.\nThe next token prediction is enforced by causal masking (see Section 2.3) to ensure that no future tokens are considered. This allows the model to compute the prediction error for all $T$ tokens in parallel during training, while preserving the autoregressive nature of the task. After the Transformer processes the sequence $(x_1,...,x_{i-1})$, it produces an output vector $h_i \\in R^{d_{\\text{model}}}$ for each $i$-th position in the predicted sequence. The logits $z_i \\in R^{V}$, representing the unnormalized probabilities for each token in the vocabulary, are computed using the output embedding matrix $E_{\\text{output}}$:\n$z_i = E_{\\text{output}}h_i$ (1)\nThe logits $z_i$ are passed through a softmax function to convert them into probabilities:\n$P(Y_i | X_1,..., X_{i-1}) = \\frac{\\exp(z_{i,y_i})}{\\sum_{v=1}^{V} \\exp(z_{i,v})}$ (2)\nHere, $z_{i,y_i}$ is the logit corresponding to the correct token $y_i$, and the denominator normalizes the logits into a probability distribution over the vocabulary. During inference, the prediction $\\hat{y}$ is obtained by selecting the token with the highest probability. Since all nGPT embeddings are normalized, the logits $z \\in R^{V}$ in equation 1 represent dot products bounded in the range [-1,1]. This limits the confidence (temperature) of the probability distribution generated by the softmax in equation 2. To adjust this during training, we introduce a trainable scaling parameter $s_z \\in R^{V}$ that scales the logits element-wise:\n$z \\leftarrow z \\cdot s_z$ (3)"}, {"title": "LAYERS AND BLOCKS", "content": "L layers of transformations are applied to the hidden state h, consisting of alternating the self-attention (ATTN) and multi-layer perceptron (MLP) blocks:\n$h \\leftarrow h + \\text{ATTN}(\\text{RMSNorm}(h))$ (4)\n$h \\leftarrow h + \\text{MLP}(\\text{RMSNorm}(h))$, (5)\nwhere RMSNorm(h) is one of several possible normalizations. It is used first to normalize each embedding to a norm of $\\sqrt{d_{\\text{model}}}$, then scales each dimension by a learnable vector of $d_{\\text{model}}$ factors, typically initialized to 1. Since the transformation block outputs are added to h, the token embedding norms can vary significantly. To address this, normalization is also applied after the final layer."}, {"title": "NORMALIZED TRANSFORMER", "content": "For any points a and b on the surface of a hypersphere in $R^{d_{\\text{model}}}$, SLERP (Spherical Linear Interpolation) by Shoemake (1985) computes an interpolation along the geodesic (shortest path):\n$\\text{SLERP}(a, b; \\alpha) = \\frac{\\sin((1 - \\alpha)\\theta)}{\\sin(\\theta)}a + \\frac{\\sin(\\alpha\\theta)}{\\sin(\\theta)}b$ (6)\nwhere $\\theta = \\arccos(a \\cdot b)$ is the angle between the points a and b, and $\\alpha \\in [0, 1]$ is the interpolation parameter, with $\\alpha = 0$ returning a and $\\alpha = 1$ returning b. Our experiments suggest that SLERP can be approximated by simple linear interpolation (LERP):\n$\\text{LERP}(a, b; \\alpha) = (1 - \\alpha)a + \\alpha b$ (7)\nLet us rewrite this equation as an update equation in nGPT:\n$a \\leftarrow a + \\alpha(b - a)$ (8)\nwhere a is h, and, b is the point suggested by the attention or MLP block. Then, for the gradient $g = b - a$, a more general form involving a variable matrix $B \\in R^{d_{\\text{model}} \\times d_{\\text{model}}}$ becomes:\n$a \\leftarrow a - aBg$ (9)\nIn quasi-Newton methods, B approximates the inverse Hessian matrix $H^{-1}$. When B is diagonal with non-negative elements, $aB$ becomes a vector $a \\in R^{d_{\\text{model}}}$ whose elements correspond to the diagonal of B times the learning rate $\\alpha$. We denote $a$ as eigen learning rates (from the German word eigen, meaning \"own,\" referring to the internal structure of the Transformer). We provide some notes in Appendix A.2. Following equation 8, the update equations for the attention and MLP blocks are as follows:\n$h \\leftarrow \\text{Norm}(h + a_A(h_a - h))$ (10)\n$h \\leftarrow \\text{Norm}(h + a_M(h_M - h))$, (11)\nwhere $a_A \\in R^{d_{\\text{model}}}$ and $a_M \\in R^{d_{\\text{model}}}$ are learnable parameters applied to the normalized outputs of the attention and MLP blocks $h_a = \\text{Norm}(\\text{ATTN}(h))$ and $h_M = \\text{Norm}(\\text{MLP}(h))$, respectively. The function Norm(x) normalizes any vector x to have unit norm, and, unlike RMSNorm or LayerNorm, does not introduce any element-wise scaling factors. The normalization can be viewed as the retraction step in Riemannian optimization, mapping the updated solution back to the manifold. Appendix A.3 discusses the extension of our update equations in the context Riemannian optimization. In contrast to the baseline Transformer, no additional normalization is required after the final layer, as the embeddings are already normalized by the proposed scheme."}, {"title": "SELF-ATTENTION BLOCK", "content": "The attention mechanism is a key component of the Transformer. It allows each token to attend to every other token in the sequence, enabling the model to capture long-range dependencies. The"}, {"title": "BASELINE TRANSFORMER", "content": "qhWq, k\u2190 hWk, v \u2190 hW (12)\nwhere $W_q, W_k, W_v \\in R^{d_{\\text{model}} \\times d_k}$ are learned projection matrices, and $d_k$ is the dimensionality of the query/key vectors. To incorporate positional information, we apply Rotary Position Embeddings (ROPE) by Su et al. (2024) to both the query and key vectors. The attention scores are computed by taking the dot product of the query and key vectors, scaling them by $\\frac{1}{\\sqrt{d_k}}$, then applying a softmax function to obtain attention weights, and finally computing a weighted sum of the value vectors $v$:\n$\\text{Attention}(q, k, v) \\leftarrow \\text{softmax}(\\frac{q \\cdot k^T}{\\sqrt{d_k}} + M) \\cdot v$, (13)\nwhere M is a matrix that prevents attending to future tokens by setting the corresponding entries to $-\\infty$. Specifically, $M_{i,j} = 0$ if $j < i$ and $M_{i,j} = -\\infty$ if $j > i$.\nIn practice, $n_{\\text{heads}}$ attention heads are used where for each i-th head, separate linear projections $W_q^i, W_k^i, W_v^i$ are applied, and the attention mechanism is computed independently for each head:\n$h_A = \\text{Concat}(\\text{head}_1,..., \\text{head}_{n_{\\text{heads}}}) W_o$ (14)\nwhere $\\text{head}_i = \\text{Attention}(q^i, k^i, v^i)$ and $W_o \\in R^{n_{\\text{heads}} \\times d_k \\times d_{\\text{model}}}$ is a learned projection matrix, where $d_k$ is typically set to $d_{\\text{model}}/n_{\\text{heads}}$."}, {"title": "NORMALIZED TRANSFORMER", "content": "The matrix-vector multiplication of $W_q \\in R^{d_{\\text{model}} \\times d_k}$ of the $i$-th head and $h \\in R^{d_{\\text{model}}}$ can be viewed as a dot product between the columns of $W_q$ and h. In the baseline Transformer, all matrices, including $W_q$ are unconstrained, leading to unbounded values in q. We propose to normalize $W_q$ $W_k, W_v$ and $W_o$ along their embedding dimension so that the computed dot products with h can be interpreted as cosine similarity between unit norm vectors bounded in [-1,1]. Thus, all attention matrices can be viewed as collections of normalized embedding vectors to be compared with.\nWhile each element of q and k is now bounded, the norms of these two vectors can still vary. Moreover, injection of positional information by RoPE further distorts q and k. We propose to additionally normalize q and k, ensuring that the dot product of every query and key is under control:\nq\u2190 Norm(q)sqk (15)\nk\u2190 Norm(k)sqk, (16)\nwhere $s_{qk} \\in R^{d_k}$ is a vector of trainable scaling factors for the i-th head.\nIn the original Transformer, the softmax scaling factor $\\frac{1}{\\sqrt{d_k}}$ in equation 13 is introduced to account for the expected variance of $d_k$ in the dot product of non-normalized query and key vectors. In the normalized Transformer, the expected variance of the dot product between normalized query and key vectors is $\\frac{1}{d_k}$. To restore a variance of 1, the softmax scaling factor should instead be $\\sqrt{d_k}$. If the softmax scaling factor is set to 1, this is equivalent to initializing the scaling factors $s_{qk}$ at $d_k^{1/4}$."}, {"title": "MLP BLOCK", "content": "The input hidden state h of the MLP block is first normalized using RMSNorm and then passed through two separate linear projections, producing two intermediate vectors (we omit bias terms):\nuhWu (17)\nvhW"}, {"title": "BASELINE TRANSFORMER", "content": "where $W_u, W_v \\in R^{d_{\\text{model}} \\times d_{\\text{MLP}}}$ are the learned weight matrices. The intermediate vectors u and v are combined using a gated activation function called SwiGLU defined by Shazeer (2020) as:\n$\\text{SwiGLU}(u, v) \\leftarrow u \\cdot \\text{SiLU}(v)$ (18)\nwhere $\\text{SiLU}(v) = v \\cdot \\sigma(v)$, and $\\sigma(v)$ is the sigmoid function. The result of the gated activation is then passed through a final linear transformation $W_{\\text{MLP}} \\in R^{d_{\\text{MLP}} \\times d_{\\text{model}}}$:\nhM \u2190 SwiGLU(u, v)WoMLP (19)"}, {"title": "NORMALIZED TRANSFORMER", "content": "We propose to normalize matrices $W_u$ and $W_v$ along the embedding dimension so that the u and v vectors represent the cosine similarity between h and vectors stored in $W_u$ and $W_v$, respectively. To control their impact, we introduce scaling factors $s_u \\in R^{d_{\\text{MLP}}}$ and $s_v \\in R^{d_{\\text{MLP}}}$:\nu \u2190 Usu, (20)\nvvsdmodel, (21)\nwhere the rescaling of v by $\\sqrt{d_{\\text{model}}}$ is needed to benefit from the non-linearity of SiLU (see the Appendix A.1). The output of the MLP block is invariant to rescaling of u by a scalar."}, {"title": "EFFECTIVE LEARNING RATES IN ADAM", "content": "The core of the Adam algorithm by Kingma (2014) is as follows:\nm \u2190 \u03b2\u2081m + (1 \u2212 \u03b2\u2081)g\nv \u2190 \u03b2\u2082v + (1 \u2212 \u03b2\u2082)g\u00b2\n\u03b8 \u2190 \u03b8 \u2013 am/(\u221av + \u20ac), (22)\nwhere \u03b8 is the parameter vector, g is the batch gradient, m is the momentum, v is the estimate of the per-element gradient amplitudes, a is the scheduled learning rate, e is a small constant, and B1 < B2 are momentum factors close to 1. We cite the text of the original Adam paper using our notation: In more common scenarios, we will have that ~\u00b11 since E[g]/E[g\u00b2 E[g]/\u221aE[92] \u2264 1. The effective magnitude of the steps taken in parameter space at each timestep is approximately bounded by the stepsize setting a. Thus, a controls the effective step-size in the search space, while the ratio can temporarily increase (respectively, decrease) the step-size if the current amplitude of per-parameter momentum is greater (respectively, smaller) than its estimated value over longer time horizon. Consider an example where 0\u2081 = 0.01 and the global learning rate is 0.001. If the gradient amplitude remains stable (i.e., mi \u2248 1), it would take 0.02-0.01 = 10 steps to double \u03b8\u2081. However, if 0\u2081 = 1.0, it would take 2.0-1.0 = 1000 steps to double. Even if the gradient's amplitude is larger in the second case, the number of steps would only decrease if mi > \u221av.\nIn nGPT, for any trainable vector of scaling parameters such as sa, we use two scalars sa,init and Sa,scale. When initializing sa as a trainable parameter, its initial value is set to sa scale. However, during the forward pass we restore its actual value by multiplying Sa,init/Sa,scale. This allows us to control the effective learning rate for sa by adjusting sa,scale, while keeping the global learning rate unchanged. For example, setting sa,init = 1 and sa,scale = 1/\u221admodel ensures that this parameter is updated with the same effective learning rate as other normalized parameters in the network."}, {"title": "SUMMARY OF MODIFICATIONS", "content": "The recipe to convert the baseline Transformer into the normalized Transformer is as follows:\n1. Remove all normalization layers such as RMSNorm or LayerNorm.\n2. After each training step, normalize all matrices (Einput, Eoutput, Wq, Wk, Wv, W., Wu, W and WOMLP) along their embedding dimension.\n3. Replace the update equations 4 and 5 by equations 10 and 11, where A (and also am) is treated with A,init 0.05 (in order of 1/nlayers) and aA, scale = 1/\u221admodel."}, {"title": "EXPERIMENTS", "content": "We train both the baseline Transformer (GPT) and the normalized Transformer (nGPT) on the Open-WebText dataset (Gokaslan & Cohen, 2019) and evaluate them on a set of standard downstream tasks. We experiment with models containing 0.5B and 1B parameters, including the embeddings. For both GPT and nGPT, we report results using the best initial learning rate settings (see Appendix A.6). A detailed description of the setup and hyperparameters is in Appendix A.5."}, {"title": "ACCELERATION OF TRAINING", "content": "Figure 1 presents the validation loss during the training of GPT and nGPT models with 1 billion parameters and a sample length of 4k tokens. After 20k iterations, nGPT achieves the same validation loss that GPT reaches only after 200k iterations (approximately 400 billion tokens), demonstrating a 10x speedup in terms of iterations and tokens used."}, {"title": "INSPECTION OF NETWORK PARAMETERS", "content": "Figure 4 shows that, while nGPT maintains a fixed norm for embeddings (by design), GPT exhibits significant variation. The distribution of eigenvalues, computed from the covariance matrix of embeddings and normalized by their median, reveals that GPT's input embeddings have a higher condition number, especially in the 1B model. The distribution of pairwise dot products between embeddings indicates that even in nGPT, embeddings are not uniformly distributed across the hypersphere (where the dot product would approach 0), but instead form clusters\u2014possibly reflecting natural patterns in language data. Dot products in GPT tend to have higher values due to its embeddings forming a hyper-ellipsoid, as suggested by the spread of vector norms. The ill-conditioned nature of GPT's input embeddings could lead to computational issues involving these embeddings.\nFigure 5 shows the median condition numbers (across heads) for attention and MLP matrices at different layer depths-24 layers for the 0.5B model and 36 layers for the 1B model. GPT models exhibit significantly higher condition numbers in their attention matrices compared to nGPT. A closer inspection of these matrices (the 3rd and 4th layers are in Figure 11 and Figure 12 of Appendix) suggests that they degenerate into lower-rank matrices, potentially reducing the learning capacity of these blocks. One could argue that the elevated condition numbers are influenced by the norms of the vectors in these matrices. Our post-training normalization of these matrices is depicted by the dotted lines in Figure 10 of the Appendix. While the adjusted condition numbers are reduced, they remain higher than those for nGPT, indicating potential rank deficiency. The need for such normalization highlights one of the issues that nGPT is specifically designed to address."}, {"title": "ABLATION STUDIES", "content": "Appendix A.8 summarizes numerous ablation experiments. An important finding is that having fixed (non-learnable) values for sqk, Su, sv and a single global learnable value for sz leads to only a slight degradation in accuracy. Therefore, our presented general case can be simplified and become easier to interpret. Appendix A.7 demonstrates that nGPT can handle longer contexts without requiring any modifications to ROPE."}, {"title": "RELATED WORK", "content": "Wang & Isola (2020) provides a comprehensive overview of the arguments for representation learning in the hypersphere. Spherical representations are associated with more stable training in the latent space of variational autoencoders (Xu & Durrett, 2018) and in embeddings used for face ver-"}, {"title": "APPENDIX", "content": ""}, {"title": "RESCALING IN THE MLP BLOCK OF THE NORMALIZED TRANSFORMER", "content": "When computing SwiGLU using equation 18, each element x of the vector v is an input to SiLU:\n$\\text{SiLU}(x) = x \\cdot \\sigma(x) = x \\cdot \\frac{1}{1 + e^{-x}}$, (23)\nwhere \u03c3(x) is sigmoid. For x with large magnitude, SiLU(x) approximates ReLU(x): when $x \\rightarrow -\\infty$, $\\text{SiLU}(x) \\rightarrow 0$, and when $x \\rightarrow \\infty$, $\\text{SiLU}(x) \\approx x$. The minimum of $\\text{SiLU}(x_{\\text{min}}) \\approx -0.278$ is located at $x_{\\text{min}} \\sim -1.278$. While the elements of v represent dot products of $d_{\\text{model}}$-dimensional vectors and are bounded in [-1,1], their expected absolute value (when they are ran-dom) is $E[| \\cos(\\theta) |] = \\frac{2}{\\pi} \\approx 0.7979$. Thus, we should rescale x by $\\sqrt{d_{\\text{model}}}$, otherwise, for very small x, we end up with $\\text{SiLU}(x) \\approx x/2$. An alternative view is to note that since the variance of each of the normalized vectors (h and a vector from $W_v$) is $1/d_{\\text{model}}$, the variance of 1 (suitable for the sigmoid part of SiLU) can be restored by rescaling of x by $\\sqrt{d_{\\text{model}}}$. Based on these two views, we rescale v by $\\sqrt{d_{\\text{model}}}$ to benefit from the non-linearity of SiLU."}, {"title": "EIGEN LEARNING RATES", "content": "In the main text of the paper, we defined eigen learning rates as positive (a \u2190 |a| is used during the forward pass). However, when they are not constrained to be positive, we obtain experimental results which are the same (up to numerical difference). This surprising observation can be explained as follows. Both the attention and MLP blocks have transformation matrices at their outputs. When the search is unconstrained, it is sufficient for Adam to flip (select) the sign of the i-th row of the output transformation matrix Wo to change the sign of the corresponding i-th coordinate in ha. Thus, the transformation calculated as a\u0104Wo is the same as a W\u2032, where d'Ai = -QA,i and Wo, (i,:) = -Wo,(i,:). In other words, when unconstrained, we can arrive at exactly the same transformation by flipping the signs in both a and Wo, which cancel each other. For simplicity and clearer interpretation, we suggest constraining a to be positive in the main paper.\nThere is, however, another interesting scenario when eigen learning rate could become negative. In quasi-Newton methods, B approximates the inverse Hessian matrix H-1 whose diagonal elements are positive values if the function is locally convex which is the assumption of the Newton method (H needs to be positive definite). However, the diagonal of H-1 can have negative values if the objective function is non-convex and has saddle points. While quasi-Newton methods like BFGS aim to ensure (e.g., via regularization) that B is positive-definite even on non-convex problem, some Riemannian optimization methods can exploit negative curvature of H-1 (Agarwal et al., 2021). When the diagonal of B is unconstrained, we perform a variable-metric step, acknowledging that the function may be non-convex locally. We did not mention this in the main paper because, as noted earlier, the results with both constrained and unconstrained a are essentially the same."}, {"title": "RIEMANNIAN OPTIMIZATION", "content": "If h - ha is viewed as the gradient g in the Euclidean space, then, aligning with the requirements of Riemannian optimization, the projection of g onto the tangent space of the hypersphere is\ngprojh(hha) \u2013 ha (24)\nThe projection is equivalent to g when the dot product hThA is 1. Depending on the alignment between h and ha, the projected gradient varies between h \u2013 ha (when the vectors are aligned) and -ha (when the vectors are orthogonal). The Riemannian variable-metric update then reads as:\nh \u2190 Norm(h \u2013 Ba(h(hha) \u2013 ha)) (25)\nh \u2190 Norm(h \u2013 \u0412\u043c(h(h\u2122\u04bb\u043c) \u2013 \u04bb\u043c)) (26)"}, {"title": "TIME COST PER STEP", "content": "The time cost per step for nGPT is approximately 80% higher with 4k context length, and 60% higher with 8k context length. This overhead is not only due to nGPT having 6 normalization steps (2 of them are applied for q and k) per layer instead of 2, but also because nGPT's normalizations are not yet fully optimized, unlike GPT, where normalization layers are fused with other operations. Training on larger networks is expected to further reduce this performance gap, as the number of layers (and thus the number of normalizations) increases only modestly with the number of network parameters. Appendix A.8 shows that we can remove the normalization of q and ke with a minor negative impact on results."}, {"title": "EXPERIMENTAL SETUP", "content": "In all experiments, we use OpenWebText (Gokaslan & Cohen, 2019) dataset which, according to experiments of Karpathy (2023), represents a good approximation of the OpenAI's internal dataset used to train GPT-2 models. We are well aware that this dataset is not of the highest quality. However, we believe that it is suitable for academic research, and, should improve the comparability of our findings with other research papers.\nWe trained our models using 64 A100 GPUs distributed across 8 nodes (8 GPUs per node). Global batch size is 512. We use the LLaMA-2 tokenizer with 32k tokens. We use the same setup for the 0.5B and 1.0B parameter models.\nAll matrix parameters are initialized by sampling from a zero-mean normal distribution with a standard deviation of 0.02 for GPT and 1/\u221admodel for nGPT. The standard deviation for the output matrices was scaled by a factor of \u221a2 \u00d7 nlayer, as suggested by Radford et al. (2018). The initialization of matrix parameters is not important for nGPT because they are normalized afterwards. The base of RoPE is 10000. The initialization of the additional parameters introduced in nGPT is described in Section 2.6."}, {"title": "SELECTION OF THE INITIAL LEARNING", "content": "The initial learning rate is the only hyperparameter we tune for both GPT and nGPT. Figure 7 demonstrates our trials to select the most suitable initial learning rate for GPT and nGPT. Our first experiments started with the 0.5B model and 1k context length. After observing the general trend of these curves, we reduced the number of experiments and followed the trends to minimize the total compute used. Apart from estimating the optimal settings for the initial learning rate, our general observation is that the optimal learning rates for GPT and nGPT tend to be similar for the same values of the validation loss. Longer runs are usually associated with the possibility of achieving lower values of the validation loss, and this typically requires lower initial learning rates.\nOne artifact we observed is the increasing sensitivity of the 1B nGPT model on 8k context length. We found that the smoothness of the hyperparameter curves can be restored (see the dotted lines with squares) by increasing an init and am,init from their default value of 1/\u221admodel to 0.1. This change decreases the effective learning rate of Adam on these variables by a factor of (1/\u221admodel)/0.1 \u2248 3. As a result, the eigen learning rates are learned by Adam at a slower rate."}, {"title": "ANALYSIS OF SCALING PARAMETERS", "content": "In nGPT, we introduce a total six trainable parameters: the eigen learning rates &A and &M, along with the scaling factors sqk, Su, Sv and sz. Since these parameters are updated using gradients, we are interested in understanding their learned distributions after training. In Figure 14, we present the histograms of these saved weights combining across layers and analyze their distributions under different context lengths, model sizes, learning rates, and numbers of training tokens.\nFor A and am, we observe that their distributions remain stable across various learning rates. However, increasing the context length or the number of training tokens tends to shift the distributions to the right, indicating that the hidden state h requires more transformation from the Attention and MLP blocks to handle the larger inputs. Additionally, the mean values for these parameters tend to be smaller in larger models because we have more layers to update the hidden state.\nRegarding the scaling factors, sqk is quite stable under all the conditions, suggesting that a fixed value, similar to the softmax scaling factor in original transformer, may be sufficient. Interestingly, we find that sqk has a high density close to zero, indicating the sparsity of attention in nGPT. For su and sv, their distributions shift left as the context length increases, but shift right as the model size or the number of training tokens increases. Furthermore, these two factors become flatter when using larger learning rate. Lastly, for sz, we see higher mean values for longer context lengths, larger model sizes, and more training tokens, suggesting that the model may learn to use a lower temperature to make the final word distribution sharper."}]}