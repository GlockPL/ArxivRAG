{"title": "INTELLIGENT SYSTEM FOR AUTOMATED MOLECULAR PATENT\nINFRINGEMENT ASSESSMENT", "authors": ["Yaorui Shi", "Sihang Li", "Taiyan Zhang", "Xi Fang", "Jiankun Wang", "Zhiyuan Liu", "Guojiang Zhao", "Zhengdan Zhu", "Zhifeng Gao", "Renxin Zhong", "Linfeng Zhang", "Guolin Ke", "Weinan E", "Hengxing Cai", "Xiang Wang"], "abstract": "Automated drug discovery offers significant potential for accelerating the development of novel\ntherapeutics by substituting labor-intensive human workflows with machine-driven processes. How-\never, a critical bottleneck persists in the inability of current automated frameworks to assess whether\nnewly designed molecules infringe upon existing patents, posing significant legal and financial risks.\nWe introduce PatentFinder, a novel tool-enhanced and multi-agent framework that accurately and\ncomprehensively evaluates small molecules for patent infringement. It incorporates both heuristic\nand model-based tools tailored for decomposed subtasks, featuring: MarkushParser, which is capable\nof optical chemical structure recognition of molecular and Markush structures, and MarkushMatcher,\nwhich enhances large language models' ability to extract substituent groups from molecules accu-\nrately. On our benchmark dataset MolPatent-240, PatentFinder outperforms baseline approaches that\nrely solely on large language models, demonstrating a 13.8% increase in F1-score and a 12% rise in\naccuracy. Experimental results demonstrate that PatentFinder mitigates label bias to produce balanced\npredictions and autonomously generates detailed, interpretable patent infringement reports. This work\nnot only addresses a pivotal challenge in automated drug discovery but also demonstrates the potential\nof decomposing complex scientific tasks into manageable subtasks for specialized, tool-augmented\nagents.", "sections": [{"title": "Introduction", "content": "Drug discovery [1, 2] remains a cornerstone in humanity's ongoing fight against disease, representing a vital pathway\nto improving global health outcomes. Traditional drug discovery [3] methods rely on wet-lab experiments and\nhuman expertise, rendering the process labor-intensive and time-consuming. To enhance efficiency and expedite\nthe development of novel therapeutics, prior studies envision an automated drug discovery [4] pipeline, replacing\nmanual workflows with machine-driven processes. This transition has shown remarkable potential in small-molecule\ndrug discovery. Specifically, the advances in retrosynthesis planning [5\u20139], wet lab experiment automation [10-14],\nmolecular docking [15\u201319], and de novo drug design [20\u201324] have demonstrated the feasibility of reducing human\nintervention while enhancing throughput and precision.\nDespite these developments, AI models that learn existing drug data and structures to create new molecules may\nuse protected compound structures during generation, leading to substantial legal and financial risks [25]. Such risk"}, {"title": "2 Results and Discussion", "content": "PatentFinder introduces two critical designs to facilitate the assessment of small-molecule patent infringement: (1) a\nmulti-agent framework based on LLMs, where various agents equipped with tailored tools address relatively simple\nsubtasks, and (2) two neural network models fine-tuned for specific tasks within the patent analysis process, addressing\nthe performance deficiencies of LLMs in these tasks. To evaluate the effectiveness of these designs, we conduct separate\nexperiments for each. For the assessment of PatentFinder's multi-agent framework, we manually collect 70 real-world\npatents to construct the MolPatent-240 patent infringement benchmark and compare PatentFinder with state-of-the-art\nLLMs on small-molecule patent protection discrimination. For the fine-tuned tool models, we evaluate them on the\ntasks of Markush molecular structure matching and Markush image recognition. The experimental results demonstrate\nthat these tool models effectively compensate for the deficiencies of general-purpose LLMs in Markush understanding\ntasks."}, {"title": "2.1 Evaluation of PatentFinder on MolPatent-240", "content": null}, {"title": "2.1.1 Experiment Settings", "content": "To demonstrate the effectiveness of PatentFinder for patent infringement assessment, we construct a patent protection\nbenchmark \u2013 MolPatent-240. To illustrate the rationale behind our agent-based design, we compare PatentFinder with\nthe direct prompting of leading LLMs, which are tasked with reasoning and determining whether a given molecule\ninfringes on a patent without any additional guidance. The baselines include state-of-the-art large language models\nGemini-1.5-Pro [38], Claude-3.5-Sonnet *, GPT-40 [34], and OpenAI-01 \u2020. We leverage the Chain-of-Thought\nprompts [46] for all the baseline models to enhance their reasoning ability. As shown in Table 1, we explore three\ndistinct schemes to assess these models for patent infringement assessment: (1) Patent PDF: In this scheme, the patent\nPDF file is directly provided to the LLM. This approach requires the model to have a built-in PDF parsing capability. (2)"}, {"title": "2.1.2 Results & Observations", "content": "Experimental results in Table 1 demonstrate that PatentFinder significantly outperforms the direct patent infringement\nclassification with LLMs, regardless of the input scheme adopted. Specifically, our multi-agent collaboration framework\nachieves a 12.5% improvement in F1-score (relative to Gemini with patent text + Markush string) and an 11% increase\nin TNR (relative to Gemini with patent text + Markush image) compared to the best-performing baseline models.\nThese results highlight that instructing LLMs to perform patent assessment without stepwise guidance leads to severe\nhallucinations and suboptimal performance, which undermines both the reliability and interpretability of LLMs.\nIn contrast, PatentFinder defines each tool-equipped agent clearly and decomposes the overall complex task into\nmanageable subtasks. It then organizes multiple agents to address each subtask using the appropriate tools, resulting in\na significant performance gain over baselines that use direct prompting methods.\nWe also observe that using Markush strings generated by MarkushParser instead of the raw Markush images within\npatents increases the accuracy of the baseline LLMs. As shown in the table, the patent text + Markush string approaches\nwith Gemini, Claude, and GPT-40 show higher F1 scores (70.8%, 65.0%, and 64.2% respectively) compared to their\npatent text + Markush image versions (65.8%, 61.3%, and 57.0%). A similar result is observed when using the raw PDF\ninput with Gemini (70.8% vs. 61.3%). These results suggest that VLMs struggle to interpret Markush structures through\nthe vision modality. In contrast, our MarkushParser accurately converts Markush images into extended SMILES [47]\nrepresentations using Optical Chemical Structure Recognition (OCSR), which is more digestible for LLMs whose\ntraining data consists predominantly of textual content."}, {"title": "2.1.3 Case Studies", "content": "In real-world molecular patent infringement assessment, an effective and trustworthy collaboration between models\nand human experts requires the model to produce human-readable infringement analysis reports. These reports should\nnot only deliver a definitive judgment on whether infringement has occurred but also provide a comprehensive and\ndetailed explanation of intermediate reasoning steps. To this end, we evaluate not only the accuracy of the infringement\nassessment but also the validity of reasoning steps across different methods. Specifically, we compare the intermediate\noutputs of baseline models and PatentFinder on a real example from the MolPatent-240 dataset. The results are\nillustrated in Fig.2. For baseline models, we summarize the step-by-step reasoning and final decisions of Gemini, GPT-\n40, and Claude, while for PatentFinder, we present the intermediate outputs from each agent and the final infringement\nreport generated by the Planner based on these analyses.\nAs shown in Fig.2b, directly using LLMs for patent protection determination often leads to hallucinations in intermediate\nreasoning steps, resulting in incorrect conclusions based on non-existent evidence. For instance, Gemini provides\nno intermediate analysis and arrives at an incorrect judgment after merely comparing the molecular skeletons to the\nMarkush structure. GPT-4o attempts to match the skeleton against the Markush structure but misidentifies the substituent\nD1 and introduces a fictitious substituent B. Although Claude reaches the correct conclusion, its analysis erroneously\nidentifies R[21] as a chlorine atom and fails to determine the values of three other substituents.\nFrom the baseline results, two key observations emerge: (1) Only GPT-4o attempts a fine-grained comparison of all\nsubstituents, while the other two methods deliver conclusions without detailed analysis. (2) LLMs exhibit limited\ncapabilities in comparing chemical structures, with reasoning errors propagating through subsequent analysis steps.\nPatentFinder addresses these challenges by employing a multi-agent framework that decomposes the complex task of\npatent infringement detection into a series of simpler subtasks. Each subtask is more comprehensible to a tool agent,\nenabling fine-grained analysis at every step. Additionally, the integration of domain-specific tools compensates for the\nshortcomings of pure LLM approaches in chemical structure analysis. This design significantly reduces the occurrence\nof hallucinations and reasoning errors. At the final stage, the Planner aggregates the outputs from all agents to generate\na detailed infringement analysis report that includes a robust reasoning process."}, {"title": "2.2 Evaluation of MarkushMatcher", "content": "To showcase the ability of MarkushMatcher in delivering precise structural matching results, we curated a dataset\ncomprising 1,000 samples for substituent extraction. The comparison focused on four key metrics: (1) Accuracy: The\nproportion of predictions that perfectly match the true substituent results. Perfect matches are defined as having a\nTanimoto [48, 49] similarity of 100%. (2) Validity: The proportion of valid predictions. A prediction is considered\nvalid if it includes all substituents mentioned in the Markush structure and each predicted substituent corresponds to a\nlegitimate molecular structure. (3) Average Tanimoto Similarity: The average Tanimoto Similarity between each\npredicted substituent and its corresponding ground truth substituent, computed using Morgan Fingerprints [50] for all\nsubstituents in a sample, the higher the better. (4) Levenshtein Distance: The distance between the predicted results\nand the ground truth is calculated directly at the string level, the lower the better.\nWe compare MarkushMatcher with structure-matching baselines implemented using the rule-based \u2013 RDKit [51] and\nLLM-based \u2013 GPT-40 methods, respectively. As shown in Fig. 3a-c, MarkushMatcher outperforms both baseline\nmethods on the substituent groups prediction task. As a deterministic algorithm, the rule-based approach \u2013 RDKit\nstruggles with complex substituent matching tasks. While effective for simple tasks involving single-link substituents, it\nperforms poorly in more intricate scenarios. This limitation resulted in near-zero accuracy and validity scores on our\ntest set (cf. Fig. 3a,b), with unsatisfactory results for the other two metrics as well. Using LLMs alone does not yield\nsatisfactory results either. Although GPT-40 is able to provide chemically valid solutions in many scenarios, which\nresults in the high validity in Fig. 3c, it fails to predict the correct substituent group values in most cases, leading to\nlow similarity, high Leveshtein distance, and limited accuracy. Common errors include: a) Confusing the values of"}, {"title": "2.3 Evaluation of MarkushParser", "content": "To demonstrate the effectiveness of MarkushParser in parsing Markush images into strings, we conduct experiments\non MolPatent-240. We maintain the condition that the query molecules are always input in SMILES format and\ncompared three different Markush input methods: original patent PDFs, Markush images, and Markush strings parsed\nby MarkushParser. We utilize three LLMs that support vision inputs \u2013 GPT-40, Claude, and Gemini \u2013 to meticulously\ncompare their intermediate outputs and the process of chain-of-thought reasoning under the different input modalities.\nThe experimental results are shown in Table 1 and Fig.5a. The figure illustrates that the LLMs struggle to accurately\nunderstand the structure of Markush under the image and PDF understanding schemes, often erroneously fabricating\nMarkush structures and non-existent substituent groups for analysis.\nIn Fig.5b, we present several results of the MarkushParser's parsing of Markush images. The first row in the figure\ndisplays the original input Markush images, while the second row shows the extended SMILES strings generated by the\nMarkushParser and the reconstructed Markush structures based on these parsing results. The MarkushParser effectively\ncaptures the structural details of the Markush structures, and the reconstructed outputs exhibit high consistency with the\noriginal inputs."}, {"title": "3 Conclusion", "content": "PatentFinder drives automated drug discovery forward by tackling the critical challenge of patent infringement\nassessment for small molecular drugs. Through its novel tool-enhanced and multi-agent framework, PatentFinder\naddresses the inherent limitations of LLMs in interpreting complex molecular structures and Markush notations with\nprecision and reliability.\nRigorous evaluations on the MolPatent-240 dataset highlight PatentFinder's superior performance, achieving enhanced\naccuracy, balanced predictions, and improved interpretability. By autonomously generating detailed infringement\nreports, PatentFinder ensures transparency and usability in its assessments. It fills a crucial gap in the automated drug"}, {"title": "4 Methods", "content": "4.1 Data Construction\nThis section outlines the data processing procedures applied to all datasets used in this paper."}, {"title": "4.1.1 Construction of MolPatent-240", "content": "Due to the lack of publicly available molecular patent infringement datasets, we manually construct MolPatent-240\nto facilitate evaluation. This dataset comprises 240 patent-molecule pairs, each labeled as either \u201cprotected\" or \"not\nprotected\" by human experts. To construct this dataset, we collect 70 molecular protection patents from public online\nsources, primarily including patents from WIPO (the World Intellectual Property Organization, prefixed with \u201cWO\u201d) and\nUSPTO (the United States Patent and Trademark Office, prefixed with \"US\"). For positive examples, we select existing\nembodiments from the patents or manually designed novel molecules based on the patent claims. For negative examples,\nwe modify the structures of positive examples at the atomic level, introducing subtle differences in the molecular\nskeleton or substituents that deviate from the patent claims. To ensure data accuracy, the dataset underwent multiple\nrounds of manual evaluation. After construction, three experts specializing in drug discovery verify the chemical\ncorrectness of all samples. This includes validating the legality of the constructed molecules and the correctness of their\nprotection labels. Based on their feedback, individual dataset contributors revise the benchmark to correct errors and\nremove a subset of samples that are too challenging to rectify. The final dataset consists of 240 samples, including 104\npositive examples (protected samples) and 136 negative examples (non-protected samples)."}, {"title": "4.1.2 Construction of Substituent Groups Extraction Data", "content": "Training MarkushMatcher requires large-scale data, which is impractical to annotate manually with human experts.\nFurthermore, the task of matching Markush structures with molecules and extracting substituent groups is exceptionally\nchallenging, as rule-based algorithms and LLMs fail to produce satisfactory results. To address this, we propose a\nreverse data construction method that samples Markush structures and substituent groups from large-scale databases,\nassembles them into complete molecules using chemical tools, and records the substituent matching relationships during\nthe assembly process. The entire pipeline is depicted in Fig.4.\nMolParser-7M *, a dataset containing over 7 million molecular and structural images, serves as the foundation for this\nprocess. Some samples in MolParser-7M include Markush structures. We heuristically design filtering rules to exclude\nunsuitable samples, such as those without Markush structures, those containing multiple molecules, or molecules that\nare excessively small. This filtering process results in a dataset of 847 thousand Markush structure records. We manually\ncurate and organize a substituent group database containing 4.7k substituents derived from molecular structures. The\ndistribution of the substituent groups in the training set is shown in Fig.3e. For each Markush sample in the dataset, we\nrandomly sample substituent groups from this database according to the number of substituent attachment points on the\nscaffold. Using RDKit, we combine the Markush scaffold with the sampled substituents based on predefined rules to\ngenerate complete molecules. The substituent matching relationships are used as supervisory signals during the model's\ntraining procedure.\nThrough this reverse construction method, we generate a dataset containing 847 thousand structural matching data.\nWe randomly sample 1,000 examples from this dataset for model evaluation, with the results shown in Figure 3. The\nremaining samples are used to train MarkushMatcher."}, {"title": "4.1.3 Construction of Markush OCSR Data", "content": "To facilitate the parsing of Markush diagrams in the patent, we collect 515 real-world Markush images, and manually\nlabel their corresponding string expressions. During labeling, we employ the extended SMILES notation defined\nin [47] to represent Markush structures as text. This dataset includes hand-drawn molecular images, Markush structures\nextracted from molecular protection patents, and other noisy samples.\nThe annotation process is conducted collaboratively by several researchers with expertise in medicinal chemistry, who\nmeticulously label the Markush strings corresponding to each molecular image. This dataset serves as a valuable\nresource for finetuning MolParser to handle complex and noisy Markush recognition tasks."}, {"title": "4.2 LLM-based Agents", "content": "We have designed multiple LLM-based agents to tackle subtasks, each fulfilling distinct roles:\nPlanner. As illustrated in Figure 1, this agent interacts directly with users by receiving input queries (i.e., patent and\nmolecule) and providing output results (i.e., infringement report). The Planner collects the necessary information and\ndetermines which agent to engage next. Each time it decides to invoke an agent, it generates an instruction in the form\nof a triplet: (thought, target agent, input to agent). After sending the instruction to the target agent, the Planner awaits\nthe \"agent response\" and continues to formulate new triplets based on the ongoing chat history. Once it determines that\nsufficient information has been gathered, it presents its infringement judgment to the user.\nSkeleton Extractor. This agent is responsible for extracting the protected molecular skeletons from the patent. It\nsupports reading patent content from both online sources and local PDF files with Patent Web Search and deployed\nparsing tool, respectively. It identifies key protected Markush structures and the associated claim requirements,\nspecifically the substituent group values outlined in the patent.\nSubstitutes Matcher. This agent assesses the structural similarity between the query molecule and the extracted\nmolecular skeleton to determine skeleton matches. It is equipped with a substructure matching algorithm and a\nsubstituent group extraction model. Both results from the matching algorithm and the extraction model are provided as\nreferences to this agent. Using vision-LLM (GPT-40 with image input), this agent verifies substituent group mappings,\ncorrects chemical errors made during the substituent group extraction, and performs necessary rearrangements to the\nmappings based on the requirements.\nRequirements Examiner. This agent compares the query molecule with the requirements defined in the patent,\nconducting the analysis at both the skeleton level and the substituent group level. At the skeleton level, the agent\nassesses the query molecule against the Markush structural skeleton and relevant requirements outlined in the patent\n(e.g., the overall number of heavy atoms or whether the molecule is explicitly discussed in the patent). For the substituent\ngroup level comparison, the agent evaluates the values of the substituent groups on the molecule against the definitions\nprovided in the patent. After completing these comparisons, the agent reports the results to the Planner.\nFact Checker. This agent ensures that each requirement argument used in the previous reasoning steps is indeed present\nin the patent document. If the molecule is determined to be protected by the patent, the agent further identifies the core\nMarkush structure that safeguards the molecule and locates the associated textual claim requirements. Subsequently,\nthe agent utilizes the document segmentation model to divide the patent document and highlight the relevant claim\nrequirement elements in the original PDF file for the user's reference.\nIn our framework, we utilize two distinct LLMs: OpenAI-01, which functions as the Requirement Examiner with a\ntemperature setting of 1.0 to encourage reasoning, and GPT-40, employed for other agents with a more conservative\ntemperature setting of 0.2 to ensure consistent and accurate outputs."}, {"title": "4.2.1 Neural Network Tool Models", "content": "MarkushMatcher. The MarkushMatcher is a neural network model designed to predict the specific values of various\nsubstituents as defined by a given Markush structure in a queried molecule, based on the Markush structure and the\nmolecular query.\nMarkushMatcher is built upon the T5 [52], an encoder-decoder transformer [53] architecture, and is initialized with a\nMolt5-large [54] checkpoint. The training process of MarkushMatcher is illustrated in Figure 4b. To adapt the model\nfor substituent group prediction, we fine-tune it using a large corpus of generated data. The input comprises molecular\nand Markush structures expressed as string representations, while the output, which maps substituent group values,\nis represented in JSON format. As detailed in Figure 4a, we construct a dataset of 847 thousand substituent group\nprediction samples for training and evaluation. The fine-tuning process involves training the model for one epoch on\nthis dataset, using a batch size of 8 and a learning rate of 1 \u00d7 10\u22124.\nMarkushParser. MarkushParser converts molecular images into extended SMILES representations with OCSR (Optical\nChemical Structure Recognition) and is capable of translating common molecules, substituent groups (incomplete\nmolecules with connection points), and Markush structures.\nThis model uses Swin Transformer [55] as the image encoder and applies a two-layer multiple-layer perceptron as a\nvision-language connector similar to LLaVA [35]. After the vision encoder and connector, a BART model [56] decodes\nthe compressed image features to predict the extended SMILES as text sequences.\nWe initialize MarkushParser with MolParser [47], which is pre-trained on a large annotated dataset consisting of 7.3\nmillion samples, encompassing both real-world and synthetic image-SMILES pairs of molecules and Markush. We"}, {"title": "4.2.2 Heuristic Tools", "content": "Patent Web Search. This function retrieves segmented molecular images and plain text content from the Google\nPatents database \u00a7. It is particularly useful for handling input queries when only the patent ID is provided. Notably, our\nframework remains fully functional without internet-based support, as it can alternatively rely on local PDF parsing\nand image processing through the OCSR scheme. This flexibility ensures that users can still perform comprehensive\nanalyses even when web-based resources are unavailable.\nPDF Parser. This tool converts the PDF patent document into images and texts, facilitating segmentation and extraction\nof key sections.\nRDKit Substructure Matcher. We implement a substructure extraction algorithm with RDKit [51] to match the query\nmolecule with the extracted Markush structure. Given the SMILES representation of a query molecule, this tool extracts\nthe values of each substituent group defined in the Markush."}]}