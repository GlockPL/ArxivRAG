{"title": "Disjointness Violations in Wikidata", "authors": ["Ege Atacan Do\u011fan", "Peter F. Patel-Schneider"], "abstract": "Disjointness checks are among the most important constraint checks in a knowledge base and can be used to help detect and correct incorrect statements and internal contradictions. Wikidata is a very large, community-managed knowledge base. Because of both its size and construction, Wikidata contains many incorrect statements and internal contradictions. We analyze the current modeling of disjointness on Wikidata, identify patterns that cause these disjointness violations and categorize them. We use SPARQL queries to identify each \"culprit\" causing a disjointness violation and lay out formulas to identify and fix conflicting information. We finally discuss how disjointness information could be better modeled and expanded in Wikidata in the future.\nThis is an extended version of a paper presented at the Sixth International Knowledge Graph and Semantic Web conference, December 2024.", "sections": [{"title": "1 Introduction", "content": "Public knowledge graphs can be extended or improved in several ways. While adding new data to a knowledge graph is often seen as the primary method of contribution, as evidenced by the many web pages on how to add new data to Wikidata, managing internal consistency and developing tools for better user experience are also crucial. One method for increasing ease for users and ensuring internal consistency is through constraints applied either at edit time, with feedback to users, or run later via queries"}, {"title": "2 Disjointness", "content": "In representation theory, two or more classes are pairwise disjoint when any two of the classes cannot have any instances in common. Two or more classes are mutually disjoint when there is no common instance for all the classes. A (pairwise, mutual) disjointness statement is the assertion that two or more classes are (pairwise, mutually) disjoint. Disjointness statements are often used as constraints within knowledge graphs to help ensure that the knowledge graph faithfully represents the real world,"}, {"title": "3 Methodology", "content": "Gathering disjointness information in Wikidata starts by writing SPARQL queries against Wikidata encoded in RDF to find the pairwise disjoint classes in Wikidata disjoint union statements. The queries used in this paperwere run during July and August of 2024 using the Wikidata Query service based on the Blazegraph SPARQL query engine at query.wikidata.org when possible and the QLever Wikidata query service at qlever.cs.uni-freiburg.de/wikidata when not. (QLever is dramatically faster than Blazegraph on many queries but uses a weekly off-line dump.) The query that returns these pairs is\nSELECT DISTINCT ? class ?e1 ?e2 WHERE {\n?class p:P2738 ?1 .\nMINUS { ?1 wikibase: rank wikibase: DeprecatedRank }\n?1 pq:P11260 ?e1\n?1 pq: P11260 ?e2\nFILTER (( str(?e1) < str(?e2)))\n} ORDER BY ?class\nThe query returns triples of a class ID that has a non-deprecated \"disjoint union of\" (P2738) statement on it and pairs of class IDs that are stated to be pairwise disjoint in the disjoint union using \"list item\" (P11260) qualifiers. There were 758 disjoint union statements on 631 classes resulting in 7,027 pairwise disjoint statements.\nAlthough the above query is not too complex, it uses qualifiers, an advanced con-cept in Wikidata, and ignores some of the information needed to create a disjoint union.\nThe required use of qualifiers when specifying disjointness makes the query harder to write than it could be and definitely harder for users to create. Worse, the require-ment to have a class that is the disjoint union results in the creation of some classes in Wikidata just to be the disjoint union. Allowing direct disjointness statements in Wikidata makes it easier for users to specify disjointness.\nOnce the disjoint pairs have been retrieved, Wikidata can be queried to find vio-lations of the constraints they place on Wikidata. Further querying can be performed to determine where a change needs to be made to fix the violation, producing culprits for disjointness violations. Select violations and culprits can be examined by hand to come up with probable explanations of why the incorrect information leading to the violation is in Wikidata.\nThere are also other classes in Wikidata that are intended to be disjoint with each other, such as the occupation classes with each other and with \"human\". Some of these disjointnesses are true in the real world but not reflected in any information in Wikidata. The others can only be determined by consulting natural language text. They are beyond the scope of this paper."}, {"title": "4 Disjointness Violations in Wikidata", "content": "Once the disjoint pairs have been produced, a query can be evaluated for each pair finding issues related to the disjointness. As mentioned above, a single disjointness between two classes can affect many other classes and many instances as well. It is thus useful to not report every single issue (violation) resulting from a disjointness but instead only report the most important ones (the culprits). Once the culprits have been identified the next step is to determine what mistake has been made and what change has to be performed to fix the problem. For many culprits this is an inherently manual step that is outside the scope of this paper, but certainly part of the larger effort that this work is part of."}, {"title": "4.1 Scope", "content": "The most important disjointness violations, and the ones examined here, are classes that are subclasses of both elements of a disjointness pair. (Note that if the class is an empty class in the real world, not just in Wikidata-then this is only a technical violation and not a true problem.) There are also disjointness violations where an item is an instance of both elements of a disjointness pair. We concentrate our examination on violations related to subclasses but do count all violations to get an idea of the size of the problem.\nWe define the subclass violations for a pair of disjoint classes, class1 and class2, as\n{class | (class I class1) \u2227 (class I class2)}\nWe define the instance violations for a pair of disjoint classes, class1 and class2, as\n{item | (item \u2208 class1) \u2227 (item \u2208 class2)}\n(In this paper several mathematical symbols are used to make formulae more readable. Aside from the usual logical symbols, \u2208 is used for instance of, I is used for disjoint, \u2286 is used for subclass, and C is used for direct subclass.)\nWe used a Python program that first extracts all the disjointness pairs as above and then constructs queries that counts the number of subclass and instance violations for"}, {"title": "4.2 Culprits", "content": "The above numbers are large, with the number of instance violations much too large to be examined by hand, even with a large community involved. It is thus useful to look for the violations that in some sense are the root causes of other subclass violations.\nA culprit is a highest superclass that has more than one superclass that are disjoint with each other. All culprits are thus disjointness violations. Subclasses of culprits are also disjointness violations but fixing the disjointness on a culprit has a good likelihood of fixing violations on its subclasses, and also on its instances. Culprits are thus good places to start work on fixing disjointness violations.\nWe formally define the culprits of a disjoint pair of classes, class1 and class2, as\n{class |(class C class1) \u2227 (class C class2) \u2227\n#parent : (class C parent) \u2227 (parent \u2286 class1) \u2227 (parent \u2286 class2)}"}, {"title": "4.3 Mistakes and Fixes", "content": "Identifying culprits is only an intermediate step to the goal of fixing disjointness issues. The final step is to determine what mistake was made and how to fix it. Determining mistakes cannot be done with a simple formula and then retrieved using a simple query like determining culprits. Instead, identifying and fixing the mistake that lead to a culprit (or a disjointness violation in general) requires manually examining the information in Wikidata, often using one of the following methods:\n\u2022 Check if many similar items are culprits, as is the case for the culprits under \"gene\". The mistake is likely then higher up instead of the culprit. Fix it when found.\n\u2022 Check if the disjointness relationship that is being violated makes sense. If it doesn't, check its violations to get an idea about what might be wrong, change or remove it.\n\u2022 Try to decide whether the class might be an empty class, if so, make it a subclass of \"the empty class\", and thus give a reason why the violation is not a problem.\n\u2022 If not any of the cases above, try to understand what was intended. The violation could be caused by one of the sources of editing errors mentioned later in the paper, which then points to a way of fixing the violation.\n\u2022 Sometimes the mistake or fix cannot be determined easily. In these cases it is often best to ask people from the part of the Wikidata community active in the domain of the culprit class."}, {"title": "Recording the Effectiveness of Fixes", "content": "In any systematic investigation of culprits, it is useful to record how many mistakes were identified and how many culprit violations their fix eliminated by checking after"}, {"title": "4.4 Example", "content": "We have only started the work on identifying mistakes and have not yet performed any fixes so we have only a very little data on effectiveness. Further, we started with culprits that we strongly suspected would lead to mistakes and fixes that eliminate many culprit disjointness violations. We provide here an examination of the most prominent mistake, one that affects the majority of culprits.\nAs mentioned above, many culprits were related to \"gene\". The underlying issue was that \"gene\" was used to represent both the sequence of bases, which is an abstract piece of data, and the physical molecules that exist within organisms. These two concepts should be represented by separate items. There was no disjointness violation on \"gene\" itself because it itself was not a subclass of \"concrete object\" so it was not considered a culprit. Instead many of the subclasses of \"gene\" are also subclasses of \"concrete object\", including 10656 that were identified as culprits using the following SPARQL query:\nSELECT (COUNT(DISTINCT ?class) AS count) WHERE {\n{ SELECT ?class WHERE {\n?class wdt: P279+ wd:Q7187 .\n?class wdt: P279+ wd: Q4406616 .\n}}\nMINUS {\n?class wdt: P279 ?parent .\n?parent wdt:P279+ wd:Q7187 .\n?parent wdt: P279+ wd:Q4406616 .\n}}\nLooking at the culprits and the Wikidata ontology around them and \"gene\" (Q7187) indicates that the mistake is that \u201cgene\u201d is a subclass of \"abstract object\" (Q4406616), as genes are physical. The fix is thus removing \u201csubclass of\u201d (P279) links to make \"gene\" no longer being a subclass of \"abstract entity\". We haven't made this change so as to not interfere with other parts of our investigations but it will fix the disjointness violations for all of the culprits identified above.\nThis mistake was by far the most prevalent among the culprits, very easily notice-able in the culprits table provided with the extended version of the paper. There are 3727 other culprits, so we have shown that the number of total mistakes is smaller than or equal to 3728."}, {"title": "5 Kinds of Disjointness Violations", "content": "In our examination of the culprits we have identified several kinds of violations based on where the mistake occurs in relation to the culprit and whether there is really a mistake at all."}, {"title": "Local mistakes", "content": "In many cases, there is simply some sort of mistake on the culprit that needs to be fixed to eliminate the violation. For example, \"linguistic rights activist\" is a culprit because it is subclass of both \"abstract entity\" via \"social movement\" and \"concrete object\" via \"political activist\". The first subclass relationship is incorrect and removing the link eliminates the disjointness violation."}, {"title": "Mistakes in superclasses", "content": "In other cases the information on the culprit is locally correct but there is a superclass of the culprit that has a mistake that needs to be fixed. For example, as shown above \"gene\" is a superclass of many culprits but is not a culprit itself. Fixing the incorrect superclass of \"gene\" dramatically reduces the number of culprits."}, {"title": "Incorrect disjointnesses", "content": "Our work here starts with the assumption that the disjointness pairs are correctly disjoint but it may be that the disjointness itself is incorrect and either needs to be removed or modified. For example, \"vehicle\" is stated to be the disjoint union of \"land vehicle\", \"watercraft\", \"aircraft\", and \"spacecraft\". This is not a correct partition because there are vehicles that can belong to several of these categories, such as \"water-based aircraft\". Resolving this mistake can be done by either removing the disjoint union or adding an extra possibility for mixed-area vehicles. The latter solution would require adjusting many other classes, so the former is likely the preferred solution."}, {"title": "Empty classes", "content": "An empty class is a class that cannot have any instances. (This is not the same as a class which only has fictional instances, such as \"unicorn\".) As part of our effort here, we have done some work on representing empty classes on Wikidata. An example of an empty class is \"abnormal number\", as it is mathematically impossible for anything to be an instance of this class.\nIf classes can be empty a disjointness violation on a class does not necessarily mean that there is an error, just that the class, and all its subclasses, are necessarily empty classes. As in Wikidata it is rarely the case that a class is empty, and the more likely"}, {"title": "6 Sources of Issues with Disjointness", "content": "The above examinations point out and quantify some of the characteristics of dis-jointness violations in Wikidata. But they do not directly investigate why incorrect information is present in Wikidata, i.e., why there are errors in the Wikidata ontology.\nRecently the Wikidata community and Wikimedia Deutschland conducted a survey and several discussions on issues in the Wikidata ontology and some potential solutions were proposed. The issues here closely mirror some of the major issues in this previous work. Disjointness violations and the work here provide a way of uncovering many examples of ontology issues, the start of any largbe-scale attempt to improve the Wikidata ontology."}, {"title": "Exceptions", "content": "One observed cause of disjointness violations is exceptions, where a class x is a subclass of y which provides a characteristic for instances of x but a subclass of x has a different characteristic that is provided by a superclass stated to be disjoint from y. For example, \"lake\" is a subclass of \u201cnatural object\" but its subclass \"artificial lake\" is itself a subclass of \"artificial object\" which is disjoint from \"natural object\".\nA possible solution is to have a subclass of \"lake\" for natural lakes and move the \"natural object\" superclass away from \"lake\" to natural lakes. Another solution is to remove the subclass relationship between human-made lake and lake, as it can be argued that human-made lakes somehow are not \"real lakes\", but something else, and keeping the same superclasses for \"lake\"."}, {"title": "Ambiguous labels", "content": "Many users of Wikidata determine the meaning of a class almost solely from its label (and sometimes also from its description). But natural language, particularly short phrases, is often ambiguous resulting in superclasses for several of the meanings of the label (or description) and this can lead to the class having disjoint superclasses. For example, \"food waste\" can refer to either food that was wasted, and thus a subclass of \"concrete object\" via \"biodegradable waste\", or an act of wasting food, and thus a subclass of \"abstract entity\" via \"waste of resources\". As \"concrete object\" and \"abstract entity\" are disjoint \"food waste\" cannot be a subclass of both.\nA possible solution is to split \"food waste\" into two classes. Another solution is to determine which reading is correct based on other information about the class, such as its descriptions or instances, and remove the incorrect superclass."}, {"title": "Multiple senses of a word", "content": "A related issue arises from words that have multiple meanings. Similarly to the above case, the different meanings for a class whose label is a single word can give rise to disjoint superclasses for the class. For example, \"foil\" is a subclass of both \"concrete object\" (via \"ornament\") and \"abstract entity\u201d (via \"motif\"). Foil is used both as the material that is used in art, and also as an artistic part of the work. Another example is \"disease\", that leads to a class order related confusion (see just below) as it both means strain of disease, and the disease that someone specifically has."}, {"title": "Class order confusion", "content": "Wikidata allows classes to be instances of (higher order) classes. This induces a hierarchy of classes. Some of these classes are fixed order, where a first-order class has only non-classes as instances, a second-order class has only first-order classes as instances, etc. All fixed order classes are (pairwise) disjoint with each other. As with other parts of Wikidata, there are issues in this hierarchy, particularly where classes that should be instances of another class are instead a subclass of the other class, or vice versa .\nFor example, \"chemical element\" is stated to be a second-order class but is also a subclass of \"concrete object\", which is stated to be a first-order class. As second-order classes are (correctly) stated to be disjoint from first-order classes, this produces a disjointness violation. The solution here is to remove \"chemical element\" from the subclasses of \"concrete objects\" as chemical elements, e.g., \"Mercury\" is a class with concrete object instances, it is not a concrete object itself."}, {"title": "Mixture", "content": "Wikidata has classes whose instances are mixtures of several components. In some cases the class is a subclass of the component classes. If the component classes are disjoint then a disjointness violation results. For example \"BBP DANSAERT Saison x Lambic\" is a subclass of both \"saison\" and \"lambic\", two classes of beer that are subclasses of two disjoint beer characteristic classes (\u201chigh fermentation beer\" and \"spontaneous fermentation beer\").\nThere are two problems here that are typical of mixtures. First, a mixture class should have the component classes as parts, not superclasses. Second the disjointness comes from \"beer\" being the disjoint union of several characteristic classes with no allowance for beers that mix several different characteristics. An extra member of the disjoint union is needed to account for such mixtures, adding that extra member satisfies the exhaustive partition criteria of a disjointness statement.\nThe similar problem shows up in situations that are not physical mixtures, but where a combination of characteristics is somehow possible. The class \"game\" is the disjoint union of \"game of chance\", \"game of skill\", and \"game combining chance and skill\", explicitly allowing for combinations."}, {"title": "Confusing items", "content": "For some classes their meaning is not ambiguous but how to categorize the class is unclear. The class may have multiple aspects that fit under disjoint superclasses. For example, \"biological sequence\" was described as several small chemical fragments"}, {"title": "Basic mistakes", "content": "Some disjointness violations just appear to be the result of some misreading of either the label or description of a class. For example, \"linguistic rights activist\" is subclass of \"social movement\". While a class for linguistic rights activism would indeed be a subclass of \"social movement\", the person who is an activist cannot be considered an instance of a social movement. These sorts of basic mistakes are generally fixable by just removing the incorrect subclass statement."}, {"title": "Vandalism", "content": "Vandalism is a problem with every freely-editable shared resource. Wikidata has had problems with vandalism  and it is possible that a disjointness violation is the result of vandalism on an item. However, such occurrences are infrequent on Wikidata, as other shared resources, such as Wikipedia, are vandalized more often.\nMany of the above issues come from a lack of examination of the relevant parts of the Wikidata ontology. For example, looking at the ancestors of a class in the ontology would both reveal the characteristics of a class (such as being natural) and which of several readings of a label or description is correct."}, {"title": "7 Suggestions for Improving Disjointness", "content": "Even though Wikidata has a significant number of disjointnesses because of the far reach of some of its disjointness statements, disjointness could play a larger positive part in Wikidata. Just adding more disjointness statements to Wikidata, especially at the middle levels of the ontology, without making any other changes would provide"}, {"title": "Better disjointness constructs", "content": "Disjointness in Wikidata is only possible as part of a disjoint union construct. This can require the creation of artificial classes to be the union. The disjoint union construct also requires the use of qualifiers and an artifical item to be the value of the statement. Further, the disjoint classes have to be specified inside the construct, separate from any other information about them.\nAdding a construct that, for example, made all the instances or direct subclasses of a class pairwise disjoint would eliminate the need for a union class and make dis-jointness easier for users to state. As well, there are existing classes, such as some of the classes of classes in the biological domain whose instances are disjoint, eliminating the need to separately state the disjoint classes. This could be used, for example, to state that the different mammalian species are disjoint."}, {"title": "Crowdsourcing fixes", "content": "To effectively reduce the number of disjointness violations, particularly instance vio-lations that are not covered by our culprits, it will likely be useful to employ the Wikidata community as a whole. A tool that showed disjointness culprits in con-text and pointed out changes that would eliminate the issue would reduce the effort required to reduce disjointness violations and would consequently allow Wikidata to accomodate more disjointness statements that are regularly checked. If the tool had game-like rewards that might help with its uptake in the community."}]}