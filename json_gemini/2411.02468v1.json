{"title": "Modeling and Simulation of a Multi-Robot System Architecture", "authors": ["Ahmed R. Sadik", "Christian Goerick", "Manuel Muehlig"], "abstract": "Abstract\u2014A Multi-Robot System (MRS) is the infrastructure of an intelligent cyber-physical system, where the robots understand the need of the human, and hence cooperate together to fulfill this need. Modeling an MRS is a crucial aspect of designing the proper system architecture, because this model can be used to simulate and measure the performance of the proposed architecture. However, an MRS solution architecture modeling is a very difficult problem, as it contains many dependent behaviors that dynamically change due to the current status of the overall system. In this paper, we introduce a general purpose MRS case study, where the humans initiate requests that are achieved by the available robots. These requests require different plans that use the current capabilities of the available robots. After proposing an architecture that defines the solution components, three steps are followed. First is modeling these components via Business Process Model and Notation (BPMN) language. BPMN provides a graphical notation to precisely represent the behaviors of every component, which is an essential need to model the solution. Second is to simulate these components behaviors and interaction in form of software agents. Java Agent Development (JADE) middleware has been used to develop and simulate the proposed model. JADE is based on a reactive agent approach, therefore it can dynamically represent the interaction among the solution components. Finally is to analyze the performance of the solution by defining a number of quantitative measurements, which can be obtained while simulating the system model in JADE middleware, therefore the solution can be analyzed and compared to another architecture.", "sections": [{"title": "I. INTRODUCTION", "content": "A Multi-Robot System (MRS) is an intelligent solution for complex problems that need more than a single robot with all the required capabilities to solve this problem [1]. The MRS has gained a great focus in research since the nineties. Now, the MRS is mature enough to be one of the core technologies of Industry 4.0, and cyber-physical system. Many applications of MRS can be seen in unmanned aerial vehicles, multi-robot surveillance, search and rescue missions, services robots in smart homes and warehouses [2]. The advantages of an MRS is the time and effort efficiency, reliability and robustness."}, {"title": "II. PROBLEM AND CASE STUDY DESCRIPTION", "content": "An MRS is a practical application of an Information System (IS). An IS architecture is the practice of designing an IS, by defining the set of components that are required to build the system, the components structure, behaviors, and the relations and interaction among these components [4]. An IS architecture is an abstract overall depiction of the system that reflects the system functions, and constrains [5]. Therefore, it provides a graspable mean to reason and enhance the system properties and requirements, and blueprints that distingue the system concept from its implementation technology [6]. An IS performance is an important feature to evaluate the system architecture. However, there is no clear definition for quantitative performance criteria that can be measured while the MRS is running, and hence can be used to analysis the overall system behavior. Therefore, the problem of this article is to provide an approach to model, simulate and evaluate the performance of an MRS architecture,"}, {"title": "III. SOLUTION FUNDAMENTALS", "content": ""}, {"title": "A. Business Process Model and Notation", "content": "Business Process Model and Notation (BPMN) is an Architecture Description Language (ADL) that extends the Unified Modeling Language (UML). UML overcomes the informality of box-and-line languages [10], and the lack of mature tools of the other formal ADLs [12]. UML introduces a standard set of diagrams to visualize the different aspects and behaviors of the system. One of the most important UML diagrams is the activity diagram, which constructs a process model via standard visualization elements [13]."}, {"title": "B. Java Agent Development Framework", "content": "Java Agent DEvelopment (JADE) is a distributed middleware that is used to implement a Multi-Agent System (MAS) [16]. Every component in the proposed architecture is represented as JADE software agent. Each JADE runtime instance is an independent thread that composes of a set of containers. A container is a group of agents run under the same runtime instance. Every runtime instance must have a main container with an Agent Management System (AMS) and a Directory Facilitator (DF). An AMS provides a unique Identifier (AID) that is used as a communication address for every agent. While, the DF announces the services that agents can offer. JADE complies with the Foundation for Intelligent Physical Agent (FIPA) specifications. FIPA is an IEEE Computer Society standards organization that promotes agent-based technology and the interoperability of its standards with other technologies. JADE agent uses FIPA-Agent Communication Language (FIPA-ACL) to exchange messages either inside or outside their runtime instance [17]."}, {"title": "C. Performance measurements", "content": "Measuring the MRS performance is a necessity to evaluate the system. The related research in [19] [20] proposes criteria such as distributability, diagnosability, modifiability, and modularity. However, these qualitative criteria are often relative and vague [21]. Thus, this article specifies absolute quantitative indicators and measures them during the runtime to evaluate the MRS performance. By thinking in the MRS as a black box that receives a number of requests, which either success or fail to be executed. The system performance can be expressed as a function in the following measurements:\nThroughput: the number of processed (successful and fail) requests per time unit.\nLatency: the time taken from the arrival of a request to the start of executing this request (shorter latency means better performance).\nSuccess rate: the number of successful requests divided by the number of received requests per time unit.\nFailure rate: the number of failed requests divided by the number of received requests per time unit.\nEfficiency: the success rate divided by the failure rate."}, {"title": "IV. SYSTEM MODEL", "content": ""}, {"title": "A. Request Manager", "content": "The main responsibility of the requests manager is to receive the requests from different requestors, then find if there is an associated plan blueprint with this request in the KB, to send it to the planner for further processing. In this diagram, the requests manager receives a request at the very beginning or during the process, and places it at the bottom of the request list. Then, it checks if there is another plan that has been sent for execution. If yes, the requests manager waits the plan execution feedback. If no, the requests manager selects the request at the top of the requests list to be processed. In this scenario, it has been assumed that the requests manager is scheduling the requests based on First Come First Serve (FCFS) method."}, {"title": "B. Planner", "content": "The main responsibility of the planner is to receive a plan blueprint from the requests manager and checks if it can be transformed to a verified executable plan, by using the available robots. In this diagram, when the planner receives a plan blueprint, it retrieves the current availability of the robots, their current capabilities, and their tasks history. Then it checks the number of registered robots. If it finds only one robot is available, it directly sends a fail plan execution to the requests manager, as it is known in advance that the plan needs more than one robot to be executed. If more than one robot is registered, the planner selects the first task in the plan blueprint, and compares it to the capabilities of the registered robot. If no robot matches with the capabilities that are needed to execute this task, the planner sends a fail plan execution to the requests manager. If one robot only matches, this robot will be planned to execute this task. Otherwise, if there are more than one robot that can perform this task, the planner tries to balance the tasks distribution among these robots. This is done by checking the tasks history of these robots, and then it plans this task for the robot with the lowest tasks history. Finally, if there are two or more robots with lowest tasks history, the planner plans the task for any of them randomly. Then it marks this robot, as if this case happens again, another robot will be planned for the task. After the planner plans a task for a specific robot, it goes through all the remaining tasks in the received plan blueprint, and performs the previously described algorithm. If all the tasks in the plan blueprint are planned. The planner sends this verified plan to the robots manager for execution."}, {"title": "C. Robots Manager", "content": "The main responsibility of the robots manager is to receive a verified plan from the planner and assign the tasks in this plan to the registered robots. In this diagram, the robots manager receives the verified plan. Simultaneously, the robots manager is responsible for registering/unregistering the robots to/from the MRS. Consequently, the robots manager can handle any change in the robots availability during assigning the tasks in the plan. The robots manager assigns the first task in the plan to the associated robot for execution. Then, it initializes a time limit to receive a task execution feedback. If the feedback is not received within that time limit, the robots manager considers this plan as failed, and sends a plan execution fail feedback to the requests manager. If the feedback is received within the time limit, the robots manager checks if this feedback is positive or negative. If the feedback is negative, the robots manager considers this plan is failed, and sends a plan execution fail feedback to the requests manager. If the feedback is positive, the robots manager checks if there are remaining unassigned tasks in the verified plan. If so, it goes through them one by one, and performs the previously described algorithm. Finally, if all the tasks in the verified plan have been successfully executed, the robots manager sends a plan execution success feedback to the requests manager."}, {"title": "V. SYSTEM SIMULATION", "content": "JADE is used to deploy the proposed MRS architecture. Each of the activity diagrams that discussed earlier is implemented as a JADE agent with a separate Graphical User Interface (GUI). These GUIs are used to manipulate and monitor the agents (i.e., system components) parameters. shows the requests manager GUI that is used to add/remove/modify the plan blueprints, while the requests manager processes the requests. shows the planner GUI that is used to show the executed plan blueprint. Also, it shows the available robots and their status, capabilities, and tasks history. shows the robot manager GUI that is used to show the assigned tasks for the available robots. Task (T1) requires capabilities (C1, C3, C4), which are unique capabilities of R1, therefore T1 is planned to R1. T2 requires (C2), which is a common capability between R\u2081 and R3. Therefore, the planner checks that R\u2081 has 9 tasks in its history plus a planned task T1. This is less than the task history of R3 which is 11 tasks. Therefore, the planner decides to plan this task to R1, to balance the tasks among the robots. T3 requires (C2, C5) which are unique tasks of R3, therefore T3 is planned to R3. The planner sends the verified plan to the robots manager in an ACL-message. The robots manager parses the contents of the received ACL-messages, then it starts to assign the tasks one by one based on the verified plan. The task assignment is also done by sending an ACL-message. The robot agent simulates a task by triggering a random timer. When the timer is elapsed, the robot agent sends a task done feedback to the robots manager. When the robots manager is sure that all the tasks are done, it sends a plan execution success feedback to the requests manager."}, {"title": "VI. SYSTEM PERORMANCE ANALYSIS", "content": "number of registered robots has been selected to vary during the system runtime. Therefore, the system performance can be measured. The system simulation over JADE has been run for 30 minutes. During every minute of the runtime, the requestor agent generates a random request. Additionally, one of the three robots agents randomly unregistered, and one randomly registered. The plan blueprints and the robots capabilities are fixed through the runtime.\nThe first set of performance measurements are calculated by the requests manager, because they essentially depend on monitoring the requests status. The processed requests chart shows how many requests have been processed by the system at a certain time. Therefore, this chart expresses the system throughput (i.e., how fast is the system). The system throughput cannot be understood as an absolute value, because it is the summation of successful and fail requests. For example at the 4th minute, the number of processed requests are two. One of these requests was successful and the other was fail.\nThe system latency is shown. The system latency is a very important performance measurement, as it expresses how much the system is delayed or late. For example at the 26th minutes the latency is zero. This means that the system has no time delay in processing the incoming requests at this moment. The system latency is a function of the unprocessed requests history. The system efficiency is obtained by dividing the accumulated number of successful request by the accumulated number of the failed request. Therefore, when the system efficiency is below one, this means that the system is inefficient. However, shows that the efficiency value was higher than one most of the runtime.\nshows the robots tasks history that is calculated by the planner. Although that the robots availability is changing during the runtime, the planner tries to balance the distribution of the number of tasks among the robots. For example, at the 6th minute, the planner successes to balance all the robots tasks at the value of 5 tasks per each. Then the robots tasks history started to"}, {"title": "VII. SUMMARY, DISCUSSION, AND FUTURE WORK", "content": "This article has highlighted a new dimension of the MRS problem, which is modeling and simulation of the solution architecture during the design phase, and hence evaluating its performance. Therefore, this approach can be used to compare different system architectures to find the best solution based on the system requirements. Modeling an MRS architecture enables the common understanding and the critical thinking of the system among the development team. Furthermore, it enables the separation between the conceptual model and the implemented technology. An ADL such as UML fails to clearly represent the process model of the MRS components, because UML lacks of the notations that express the logical relation between the tasks in a process model. Therefore, the BPMN language is used to provide highly detailed analytical models of the components of the proposed architecture. Those analytical models are used during the coding to implement the different components of the system architecture. JADE agent development middleware is used to implement the MRS components, as the dynamic interaction among those components is needed to simulate the overall behavior. However, other technologies such as Robot Operation System (ROS) or Web Service (WS) can also be used to implement the very same models.\nThe simulation model has been used to measure a group of performance indicators under predefined constrains. Thus, these indicators are used to analysis and evaluate the proposed system architecture. Other qualitative criteria such as fault- tolerance or robustness can also be tested during the design phase by using the same simulation model. This can be done by replicating or switching off some of the model components, then studying their effect on the system performance. Although the MRS scheduling and planning is not the main goal of this research, our solution approach can be used to simulate different planning or scheduling methods, to find the best technique during the design phase.\nAs the BPMN is originally designed to describe the business processes, an extension of this notation language is required to represent the physical layer of the MRS. This extension should reflect a better image of the humans and robots activities as the main elements of the MRS. Additionally, the BPMN provides a mapping to the Business Process Execution Language (BPEL), which is an executable language that orchestrates the information among the WSs. Therefore in the future work, the same idea of constructing an executable model that can directly be used to generate the code will be considered. This can dramatically reduce the coding time and effort. Also in the future work, the same performance measurements that have been used in this article can be used in the implementation phase, as a part of the system visualization."}]}