{"title": "Towards Automated Algebraic Multigrid Preconditioner Design Using Genetic Programming for Large-Scale Laser Beam Welding", "authors": ["Dinesh Parthasarathy", "Tommaso Bevilacqua", "Martin Lanser", "Axel Klawonn", "Harald K\u00f6stler"], "abstract": "Multigrid methods are asymptotically optimal algorithms ideal for large-scale simulations. But, they require making numerous algorithmic choices that significantly influence their efficiency. Unlike recent approaches that learn optimal multigrid components using machine learning techniques, we adopt a complementary strategy here, employing evolutionary algorithms to construct efficient multigrid cycles from available individual components.\nThis technology is applied to finite element simulations of the laser beam welding process. The thermo-elastic behavior is described by a coupled system of time-dependent thermo-elasticity equations, leading to nonlinear and ill-conditioned systems. The nonlinearity is addressed using Newton's method, and iterative solvers are accelerated with an algebraic multigrid (AMG) preconditioner using hypre BoomerAMG interfaced via PETSc. This is applied as a monolithic solver for the coupled equations.\nTo further enhance solver efficiency, flexible AMG cycles are introduced, extending traditional cycle types with level-specific smoothing sequences and non-recursive cycling patterns. These are automatically generated using genetic programming, guided by a context-free grammar containing AMG rules. Numerical experiments demonstrate the potential of these approaches to improve solver performance in large-scale laser beam welding simulations.", "sections": [{"title": "1 INTRODUCTION", "content": "Laser beam welding is a non-contact method for joining materials that has gained significant importance as industrial production becomes more automated. Its appeal lies in the short cycle times and minimal heat-affected zones it offers. However, the rapid cooling rates characteristic for this process can result in a residual melt oversaturated with specific alloy elements, potentially causing solidification cracks. Gaining a quantitative understanding of how these fractures develop and their relationship to process parameters is crucial for refining and enhancing welding processes. This specific focus is central to the efforts of the DFG research group 5134 \"Solidification Cracks During Laser Beam Welding - High Performance Computing for High Performance Processing\" 3. Another central part of the research group is to use the potential of modern supercomputers and high performance simulations to get further insights into the process of laser beam welding. A crucial part thereof is the optimization of parallel efficient iterative solvers for large thermo-mechanical finite element simulations. Especially, the latter aspect is the focus of this article.\nHere, the thermo-mechanical behavior of laser beam welding is described by a coupled set of time-dependent thermo-elasticity equations, as outlined in [26]. Due to the complexity of the problem, the linear systems resulting from finite element discretization in space, backward Euler discretization in time, and linearization with Newton's method tend to be ill-conditioned. Besides some work on developing and implementing parallel monolithic domain decomposition preconditioners for thermo-mechanical finite element problems [7], we are also interested in finding efficient algebraic multigrid (AMG) preconditioners for such problems. As a result, in this work, we explore an automated approach for the design of AMG methods. More specifically, the scope of this work is to find"}, {"title": "2 LASER BEAM WELDING PROBLEM", "content": "We start presenting the general framework of our problem. To focus primarily on evaluating the performance of the preconditioners, we streamline the model problem by simplifying the laser beam's action. Consequently, we use experimental data to determine the geometry of the melting pool, that is, the region where the material is melted by the laser. Within this region, we impose the melting temperature of the material across all degrees of freedom (DOFs) by applying Dirichlet boundary conditions.\nIt is important to note that both the laser beam and the associated melting pool geometry, including the relevant Dirichlet boundaries, change position over time, moving with a problem-specific speed. The interested reader can find a more realistic laser heat source model which has been introduced to achieve more realistic simulations in [12-14]. For context, Fig. 3 offers a general outline of a typical model geometry undergoing laser beam welding, while Fig. 1 illustrates the specific geometry of the melting pool used in this work."}, {"title": "2.1 Thermo-elasticity equations", "content": "The thermo-mechanical behavior of a plate of metal welded by a laser is described by the set of simplified thermo-elasticity equations\n$\\begin{aligned}\n  \\text{div}(\\sigma(u, \\theta)) &= 0, \\\\\n  \\text{div}(q) + \\gamma \\text{div}(\\dot{u}) \\theta + c_p \\dot{\\theta} &= 0,\n\\end{aligned}$\nwhere u(x, t) and $\\theta$(x, t) represent the displacement vector and the absolute temperature respectively. A complete explanation of the process that leads to this simplified model can be found in [7]. Let us remark that for realistic simulations a consideration of the plastic behavior of the material is necessary, that is, the use of thermo-elastoplastic material models. Here, for the initial investigations on optimizing AMG, we restrict ourselves to this simplified elastic model.\nThe material-specific and temperature-dependent material parameters are: $c_0$ the heat capacity, q the heat flux vector, and $\\gamma = 3\\alpha_T\\kappa$ the stress temperature modulus. Moreover, $\\alpha_T$ denotes the coefficient of linear thermal expansion, $\\kappa = E/3(1 - 2\\nu)$ the bulk modulus and E the Young's modulus. Here, we choose the temperature-dependent parameters to model an austenitic chrome-nickel steel(1.4301) as shown in Table 1. The stress in tensor notation is defined as\n$\\sigma := C : \\varepsilon \u2013 3\\alpha_T\\kappa(\\theta \u2013 \\theta_0)1$\nwith $C = \\kappa1 \\otimes 1 + 2\\muP$ and the fourth-order deviatoric projection tensor $P = I \u2212 \\frac{1}{3} 1 \\otimes 1$ and $\\theta_0$ the initial temperature of the metal. The heat flux vector is defined by Fourier's law as $q = -\\lambda \\nabla \\theta$, where $\\lambda$ represents the identity matrix scaled by the thermal conductivity coefficient. As already stated above, the sole source of heat is a laser, modeled through a volumetric Dirichlet boundary condition to represent the molten metal pool that moves across the plate. To obtain a realistic scenario, the geometry of the melting pool is derived from experimental data, resulting in a triangulated surface, as described in [4] and as shown in Fig. 1."}, {"title": "3 FINITE ELEMENT DISCRETIZATION", "content": "Applying the Newton-Raphson method to the nonlinear boundary value problem results in a linear problem for each nonlinear iteration; further details on this process can be found in [12]. This problem is spatially discretized using a mixed finite element method. Let then $T_h$ be a uniform mesh of $N_e$ hexahedral elements $Q_e$ of $\\Omega$ with characteristic mesh size h. We introduce the conforming discrete piecewise linear displacement and temperature spaces\n$\\begin{aligned}\nV^h &= V^h(\\Omega) = \\{u \\in [C^0(\\Omega) \\cap H^1(\\Omega)]^3 : u|_T \\in Q_1 \\ \\forall T \\in T_h\\}, \\\\\nQ^h &= Q^h(\\Omega) = \\{\\theta \\in C^0(\\Omega) \\cap H^1(\\Omega) : \\theta|_T \\in Q_1 \\ \\forall T \\in T_h\\}\n\\end{aligned}$\nrespectively, of Q1-Q1 mixed finite elements. Here, $C^0(\\Omega)$ denotes the space of continuous functions on $\\Omega$ and $H^1(\\Omega)$ the usual Sobolev space. Due to the lack of a stable theoretical framework, we cannot guarantee that the selected finite elements satisfy the inf-sup condition. Time discretization is performed using the backward Euler method with a time step size of $\\Delta t$. Consequently, in each time step, we have to solve a linearized system until the global absolute residual from Newton's method is below a chosen tolerance. The resulting discrete saddle point problem for each Newton iteration in each time step finally takes the form\n$KAd = \\begin{bmatrix}K_{uu} & K_{u\\theta} \\\\ K_{\\theta u} & K_{\\theta\\theta}\\end{bmatrix} \\begin{bmatrix}Adu \\\\ Ad\\theta\\end{bmatrix} = \\begin{bmatrix}Ru \\\\ R\\theta\\end{bmatrix} = R, \\qquad (1)$\nwhere Adu and $Ad\\theta$ represent the Newton update for the displacement and temperature, and $Ru$ and $R\\theta$ the vectors of the residual, respectively. The block matrices are obtained by a standard finite element assembly and we obtain\n$\\begin{aligned}\nK_{uu} &= A_{e=1}^{N_e} \\Big[\\int_{\\Omega_e} B_u^T C B_u \\, d\\Omega \\Big], \\\\\nK_{u\\theta} &= A_{e=1}^{N_e} \\Big[\\int_{\\Omega_e} B_u^T (3\\alpha_T \\kappa1) N_\\theta \\, d\\Omega \\Big], \\\\\nK_{\\theta u} &= A_{e=1}^{N_e} \\Big[\\int_{\\Omega_e} N_\\theta^T (3\\alpha_T \\kappa1) B_u \\, d\\Omega \\Big], \\\\\nK_{\\theta\\theta} &= A_{e=1}^{N_e} \\Big[ \\frac{1}{\\Delta t} \\int_{\\Omega_e} \\lambda B_\\theta^T B_\\theta \\, d\\Omega - \\frac{1}{\\Delta t} \\int_{\\Omega_e} N_\\theta^T N_\\theta tr[I] N_\\theta \\, d\\Omega \\\\\n& \\qquad \\qquad + \\frac{1}{\\Delta t} \\int_{\\Omega_e} N_\\theta^T c_p N_\\theta \\, d\\Omega \\Big],\n\\end{aligned}$\nwhere $N_u$ and $N_\\theta$ are the finite element nodal basis functions for displacement and temperature, and $B_u$ and $B_\\theta$ denote their derivatives in tensor notation."}, {"title": "4 GENETIC PROGRAMMING: A PRIMER", "content": "Before delving into the automated design of AMG methods, we briefly introduce the key concepts of GP. GP is an artificial intelligence (AI) technique that uses a metaheuristic approach for the evolution of computer code. It is a branch of evolutionary algorithms (EAs), rooted in Darwin's principle of natural selection. The general approach of GP is to apply a population of programs to a given problem, and compare their performance (fitness) relative to each other. Operators inspired by genetics (crossover, mutation) are applied to selected programs from the population (parents) such that in time better programs (offspring) emerge by evolution. This principle is applied iteratively for multiple generations until a desirable population of programs is obtained [6, 22]. In problems where the programs are required to conform to a specific structure (for eg. AMG preconditioners), grammar rules can be used to constrain the evolutionary process such that only valid programs are produced. Grammar-guided genetic programming (G3P) is an extension of traditional GP systems that use context-free grammars (CFGs) to impose such constraints on the initial population and subsequent genetic operations. Exploiting domain knowledge using CFGs helps in eliminating invalid programs and speeds up the optimization process [21, 29].\nG3P for evolving AMG cycles is illustrated in Fig. 2. The CFG generates an initial random population of flexible cycles. The individuals in the population are evaluated for their fitness, for example, solve time and convergence rate, and the best ones are selected. Crossover and mutation operators are applied to these individuals, constrained by the CFG. During crossover, parts of the AMG cycle between pairs of selected individuals are exchanged (for example, red and green portions in Fig. 2), and during mutation, random perturbations are introduced (for example, the blue portion in Fig. 2) to encourage exploration. The CFG ensures that the crossover points and perturbations are such that the offspring produced are still valid AMG programs. The offspring are combined with the parent population, from which the best individuals form the population for the next generation. Repeating these steps iteratively produces a population of efficient AMG programs with optimal fitness measures."}, {"title": "5 AUTOMATED AMG DESIGN", "content": "To solve the linearized systems in our numerical simulations, we use AMG as a preconditioner to accelerate the convergence of GMRES, employing BoomerAMG from the hypre library. In particular, AMG is applied with a monolithic approach on the entire coupled displacement-temperature system. Formulating an efficient AMG method is non-trivial, involving complex design choices for the setup phase (coarsening strategy, interpolation scheme, threshold parameters, etc.) and the solve phase (cycle type, smoother, relaxation weights, etc.). In this paper, we focus on the latter, as the solve phase is shown to dominate the cost of our simulations (see Table 2). We fix the setup parameters (see Table 6) and automate the design of the solve phase, that is, generating efficient AMG cycles.\nThe AMG methods are constructed here with cycles that go beyond the standard V-, F-, or W-cycle types. These so-called flexible cycles exhibit the following attributes:\n\u2022 the different grid levels can be traversed arbitrarily and non-recursively;"}, {"title": "5.1 Problem setup", "content": "In our numerical simulation we try to reproduce a physically realistic process of laser beam welding. To do so, we solve a thermo-mechanical problem on a domain $\\Omega = 100 \\text{ mm} \\times 30 \\text{ mm} \\times 1 \\text{ mm}$, where (0, 0, 0) is one of the corners. The mechanical constraints are enforced by imposing Dirichlet boundary conditions for the displacements on the faces y = 0 mm and y = 30 mm.\nOur configuration models a laser moving along a plate of an austenitic chrome nickel steel, whose material parameters vary depending on the temperature; see Table 1. The action of the laser is implemented as a volume Dirichlet boundary condition which represents the boundary of the region of the metal that has been melted (melting pool) as described before; see Fig. 1. Therefore, we load a surface model obtained from experimental data that models the region of the melting pool and we move this geometry along the x-direction during the time iterations with a velocity of 1.0 m/s (Fig. 3). The initial temperature of the metal is set to $\\theta_0 = 20^\\circ\\text{C}$ everywhere and the temperature inside of the melting pool is set, as a gradient, to $\\theta_l = 1460^\\circ\\text{C}$. Since the thermo-elastic model does not require particular restrictions on the time discretization, we simulate here T = 1.0 s of the laser beam welding process using a backward Euler method with step size $\\Delta t = 0.1 \\text{ s}$. In each time step Newton's method is applied until the global residual is below an absolute tolerance of 1e - 4, while for the linear systems, a relative residual of 1e - 4 or an absolute residual of 1e - 8 of the unpreconditioned norm is chosen as stopping criterion for the GMRES method."}, {"title": "5.2 Optimization setup", "content": "To run our optimization, we consider the linear system at t = 0.4 s and the 2nd Newton iteration as a proxy for the laser beam welding simulation. The AMG-preconditioned GMRES solver is designed based on fitness measures (solve time per iteration, convergence) evaluated for this linear system, with 89 100 DOFs distributed across 8 MPI processes. Different parts of the domain are assigned to each MPI process, such that, all elements and their associated DOFs in a subdomain are allocated to the same process (Fig. 4). This reduces MPI communication, preserves sparsity patterns, and enables a more efficient coarsening. We generate AMG cycles with a flexible part and a recursive part. The top fine grid levels (Nflex) employ a flexible structure, while the rest of the coarser levels use the standard default BoomerAMG configuration in hypre. In this way, we limit our search space to the most expensive levels, and also retain the possibility to adapt the generated solvers to different problem sizes, by adjusting the height of the recursive part (Section 6.2).\nThe flexible part is generated from a set of AMG components listed in Table 3. We consider various relaxation schemes, relaxation ordering, discretely sampled relaxation weights for local relaxation within each processor ($w_i$) and Jacobi exchange across processor boundaries ($w_o$) [1, 30], and a set of scaling factors ($\\alpha$) for the coarse-grid correction (CGC) step to construct optimal flexible cycles. Details of the GP setup are provided in Appendix A."}, {"title": "6 RESULTS", "content": "The evolution of AMG preconditioners for the proxy linear system at t = 0.4s, 2nd Newton iteration begins with a random set of solvers generated by the CFG, resulting in many initially diverging solvers. The successive application of genetic operators - mutation and crossover - produces solvers with improved convergence and lower cost (Fig. 5, clockwise from top-left). As the population evolves over multiple generations, it clusters closer to the Pareto front (red line in Fig. 6).\nWe are interested in preconditioners that minimize the solve time; and this depends on two factors, the cost for a single iteration and the number of iterations for convergence. Our motivation to split the solve time into two objectives \u2013 solve time per iteration and convergence - is to promote diversity in the population, encourage exploration, and prevent the optimization from getting stuck in local minima. However, a fast preconditioner must achieve reasonably minimal values for both objectives. The Pareto optimal solvers from the final generation are ranked by increasing iteration count, indexed, and three solvers-GP-10, GP-22, GP-54-are selected from distinct regions of the Pareto front (represented as green squares in Fig. 6). Solvers on the tail ends of the Pareto front are excluded, as they only minimize one of the two objectives, leaving the remaining options as viable choices for the simulation. The flexible cycle structures for GP-10 and GP-54 are shown in Fig. 8. The three GP solvers are evaluated and compared to reference methods (see Appendix B for reference solver details) across the entire laser beam welding simulation (Section 6.1) and further tested on different problem sizes (Section 6.2).\nSpecifically, the performance of the GP solvers is compared to the default BoomerAMG configuration provided via the PETSc interface (further referred to as 'default') and a hand-tuned BoomerAMG configuration (denoted as 'tuned-1' in Table 7). The hand-tuning steps are detailed in Appendix B, and the position of these reference methods relative to the GP Pareto front is marked in Fig. 6. As seen in Fig. 6, the reference methods (represented as crosses in Fig. 6) are sub-optimal with respect to Pareto optimal GP solvers (for t = 0.4, 2nd Newton iteration). For further evaluation, we select the reference methods - default and tuned-1 - that lie closest to the Pareto front. We observe that the time to setup the different AMG preconditioners is the same, since GP and reference solvers use identical AMG setup parameters (Table 6). Also, as seen in Table 2, the setup times are significantly lower than the solving times. Therefore, in the following sections, we focus solely on the solve phase, that is, time spent on solving the linear systems and the corresponding iteration count."}, {"title": "6.1 Generalization across time steps", "content": "As a first step, we evaluate the GP and reference solvers for 1.0 s of laser beam welding simulation with 89 100 DOFs distributed across 8 MPI processes. In Fig. 7 we present the solve times and iteration counts at each time step summed over multiple Newton iterations. All GP solvers exhibit lower solve times compared to the reference ones across all time steps, demonstrating the robustness of the GP-generated solvers despite being exposed to just a single linear system of the entire simulation.\nThe convergence of the GP solvers (Fig. 7, bottom) is influenced by the region of the Pareto front from which they were selected. GP-10 and GP-22 show the fastest convergence, while GP-54 has a convergence factor similar to that of the reference solvers. As seen in Fig. 6, GP-54 has a lower cost per iteration compared to the reference methods, and therefore achieves a faster time to solution inspite of having a similar convergence rate. This is because GP generates a cost-efficient cycle structure - GP-54 \u2013 with no pre-smoothing steps on the finest levels and flexible post-smoothing sequences (shown in Fig. 8), leading to cheaper iterations, but without losing convergence."}, {"title": "6.2 Generalization across problem sizes", "content": "We now perform a weak scaling study to evaluate solver performance across larger problem sizes. The number of elements per MPI process (tile resolution in Fig. 4) is fixed. The problem is refined by doubling the number of subdomains (and hence the number of MPI processes) along both plate directions, while keeping the problem resolution orthogonal to the welding plate fixed. Consequently, the total DOFs approximately quadruple at each scaling step, starting from the original problem with 89 100 DOFs. The weak scaling measurements, listed in Table 4, were performed with 8 MPI processes per node on 1, 4, and 16 nodes of the Fritz compute cluster\u00b2 at the Erlangen National High Performance Computing Center (NHR@FAU)."}, {"title": "7 CONCLUSIONS", "content": "As previously stated, when we measure the convergence of GP-10 separately for different Newton iterations during the simulation (Fig. 9), the solver scales well for the initial Newton iterations but is sub-optimal for the later steps. This trend, also observed in the reference solvers, could be caused by an algorithmic saturation, that is, fast converging error modes are solved initially, leaving the remaining slower modes for the later steps; or due to poor conditioning of the linear systems across Newton's method. Our current approach generates solvers using a small proxy problem on a single node and then applies them at a larger scale for the entire laser beam welding simulation. A potential improvement could be to incorporate fitness measures directly from the larger problem, where scaling limitations are observed, as an additional fine-tuning step. For example, the final population of solvers from the small problem, could serve as the initial population for a larger problem, and this can be done progressively to evict solvers with bad scaling from the population.\nWe emphasize that in this paper, our goal was to find the best configuration for a monolithic black-box BoomerAMG. By leveraging the advantages of GP, we generate flexible cycles with level-dependent smoothing sequences, cycling patterns, and obtain a variety of optimal preconditioners with different strengths (GP-10/ GP-54, Fig. 8), based on their position on the Pareto front. These have the following implications:\n\u2022 Possibility to design smoothing sequences tailored to specific right-hand sides, for example, to help mitigate sub-optimal scaling of specific Newton steps.\n\u2022 Access to a set of Pareto optimal solvers provides flexibility in choosing preconditioners of different strengths depending on the conditioning of the linear system.\n\u2022 Since AMG cycles are generated for the same setup; once the AMG hierarchy is established, multiple flexible cycles (for example, for different Newton iterations) can be used during the simulation without additional overhead.\nTo conclude, in general, the GP approach helped to find a better black-box BoomerAMG for thermo-elastic laser beam welding simulations, but still several improvements can be made. Additionally, more efficient approaches can be studied in the future, like including specific types of smoothers which are more suitable for coupled systems and nodal coarsening approaches which also might interpolate the null-space of the differential operators exactly [2, 3], into the search space. Also considering block-triangular preconditioners with optimized BoomerAMG for the blocks might be beneficial."}]}