{"title": "ON THE EXISTENCE OF EFX ALLOCATIONS IN MULTIGRAPHS", "authors": ["Alkmini Sgouritsa", "Minas Marios Sotiriou"], "abstract": "We study the problem of \"fairly\" dividing indivisible goods to several agents that have valuation set functions over the sets of goods. As fair we consider the allocations that are envy-free up to any good (EFX), i.e., no agent envies any proper subset of the goods given to any other agent. The existence or not of EFX allocations is a major open problem in Fair Division, and there are only positive results for special cases.\nChristodoulou et al.[19] introduced a restriction on the agents' valuations according to a graph structure: the vertices correspond to agents and the edges to goods, and each vertex/agent has zero marginal value (or in other words, they are indifferent) for the edges/goods that are not adjacent to them. The existence of EFX allocations has been shown for simple graphs with general monotone valuations [19], and for multigraphs for restricted additive valuations [29].\nIn this work, we push the state-of-the-art further, and show that the EFX allocations always exists in multigraphs and general monotone valuations if any of the following three conditions hold: either (a) the multigraph is bipartite, or (b) each agent has at most $\\lfloor\\frac{n}{4}\\rfloor - 1$ neighbors, where n is the total number of agents, or (c) the shortest cycle with non-parallel edges has length at least 6.", "sections": [{"title": "Introduction", "content": "We study a problem of \"fairly\" dividing indivisible goods to many agents. The question of how to divide resources to several agents in a fair way dates back to the ancient times, e.g., dividing land, and it raised important research questions since the late 40's [35]. One prominent notion in fair division is envy-free allocations, where nobody envies what is allocated to any other agent, which was formally introduced a bit later [23, 22, 37]. Initially, the problem was studied under the scope of divisible resources, where envy-free allocations are known to always exist [36, 38, 7].\nThe focus of this work is on indivisible goods, with multiple applications, such as dividing inheritance, and assigning courses to students [13]. The non-profit website Spliddit (http://www.spliddit.org/) provides mechanisms for several such applications. It is easy to see that envy-free allocations are not guaranteed to exist; for instance consider two agents and one indivisible good, then whoever gets the good is envied by the other agent. This example demonstrates how strong the requirement of completely envy-freeness is for the scenario of indivisible goods.\nThis has led to the study of two basic relaxations of envy-freeness, namely envy-freeness up to one good (EF1) [12] and envy-freeness up to any good (EFX) [15]. EF1 is a weaker notion than EFX, and it is guaranteed to always exist and can be found in polynomial time [30]. On the other hand, it is not known if EFX allocations are guaranteed to exist in general, and it has been characterized as \"Fair Division's Most Enigmatic Question\" [34]. EFX allocations are known to exist for special cases: e.g., for 2 agents with general monotone valuations [33], for 3 agents with additive valuations or a slightly more general class [18, 2], and for many agents with identical monotone valuations [33], or with additive valuations where each agent is restricted to have one of the two fixed values for each good [4].\nSurprisingly, it was recently shown that EFX allocations need not exists in the case with chores, i.e., negatively valued items [20]. This is the first result of non-existence of EFX for monotone valuation functions, and the construction requires only 3 agents and 6 goods. This is an interesting separation between goods and chores, as for the case of goods it is known that EFX allocations are guaranteed to exist when the number of goods are at most 3 more than the number of agents [31].\nUnfortunately, little is known for the case with multiple agents and multiple goods; additionally to the works that have been already mentioned [4, 33], EFX allocations are known to exist when agents' preference follow a lexicographic order defined by their preference over singletons [26], and when the valuations have dichotomous marginals, i.e., the marginal value when a good is added to a set is either 0 or 1 [8]. All those works consider high restrictions and resemblance on the agents valuations. Towards broadening our understanding for the case of multiple agents and goods, Christodoulou et al. [19] introduced a setting that is related to our work, where the valuations are defined based on a graph: given a graph, the agents correspond to the vertices of the graph, and the goods to the edges. Then, each agent is indifferent for the goods/edges that are not adjacent to them. In [19], they showed that EFX allocations always exist on graphs.\nIn this work we consider a multigraph, which can be interpreted as follows: each good is of interest for at most two agents. The motivation in the multigraph setting is, similarly to [19], the division of territories between nations, areas of interest between neighboring countries and more generally division of geographic settings. Another application is to allocate available space for research teams and collaborators, which is always a challenging task, and becomes even more difficult when there are multiple conflicts for available areas. It was recently showed that EFX allocation always exists in multigraphs when all agents have restricted additive valuations [29], i.e., each good $g$ has a fixed value $v_g$, and each agent may value the good by $v_g$ or not value it at all, in which case he has value 0. We generalize this result with respect to the valuation functions, where we use general monotone valuations, on the expense of having restrictions on the multigraph, where either the multigraph is bipartite, or each agent has at most $\\lfloor\\frac{n}{4}\\rfloor - 1$ neighbors, where $n$ is the total number of agents, or the shortest cycle with no parallel edges has length at least 6.\nTwo other papers independently and in parallel showed EFX allocations involving multigraphs [1, 11]. We next discuss their results and the comparison to ours. Afshinmehr et al. [1] independently showed that EFX allocations exist for bipartite multigraphs, which coincides with our first result. They further showed the existence of EFX allocations for multicycles with additive valuations. Our first and third results (for bipartite multigraphs and graphs with cycles of non-parallel edges of length at least 6) include all multicycles apart from the ones of length 3 and 5; we note however that we consider the more general monotone valuations. Bhaskar and Pandit [11] independently showed the existence of EFX allocations in bipartite multigraphs when agents have cancelable valuations and in multi-trees for general monotone valuations. Our first result generalizes those two results. Moreover, they showed that multigraphs with chromatic number $t$ admit EFX allocations when the shortest cycle using non-parallel edges is of length at least $2t - 1$; this result holds when agents has cancelable valuations. Note that the multigraphs with chromatic number 2 is just the bipartite multigraphs. When the chromatic number is at least 4, we improve the requirement for shortest cycles using non-parallel edges, from length at least 7 (and greater depending on the chromatic number of the multigraph) to 6 (no matter the chromatic number), and furthermore our results is more general as it applies to general monotone valuations."}, {"title": "1.1 Our Results", "content": "We show that an EFX allocation exists for multigraphs when agents have general monotone valuations and:\n\u2022 The graph is bipartite\n\u2022 Each agent has at most $\\lfloor\\frac{n}{4}\\rfloor - 1$ neighbors, where $n$ is the total number of agents\n\u2022 The shortest cycle with non-parallel edges of the multigraph is at least 6\nOur results are summarized in the following three theorems:\nTheorem 1. In bipartite multigraphs, an EFX allocation always exists.\nTheorem 2. In multigraphs with at most $\\lfloor\\frac{n}{4}\\rfloor - 1$ neighbors per agent, where $n$ is the total number of agents, an EFX allocation always exists.\nTheorem 3. In multigraphs, where the shortest cycle with non-parallel edges has length at least 6, an EFX allocation always exists.\nThe construction of EFX allocations follows the same skeleton for all our results, and so they are presented together. In order to keep the presentation smooth, we begin in Section 3 with a special case of multigraphs for which each pair of vertices is connected with at most two edges. As we discuss in Section 1.2, in the general case, we consider different ways to partition the common edges between two vertices. For simplicity of the presentation, we postpone this crucial technicality for later and consider at most two parallel edges, for which there is a single way to be partitioned. This way we focus on highlighting first all the important ideas for constructing EFX allocations. In Section 4 we consider the general case where each pair of vertices is connected with multiple edges."}, {"title": "1.2 Our Techniques", "content": "Here we discuss our main techniques in order to construct EFX allocations in multigraphs.\nWe make use of the cut-and-choose-based protocol of [33] for two agents: one agent cuts the set of goods into two bundles where he is EFX-satisfied with each of them (i.e., no matter which of the two bundles he receives, he does not envy the other bundle up to any good), and the other agent chooses his favorite bundle among those two. This simple protocol results in an EFX allocation for two agents, even if they have general monotone valuations. Note that there may be two different EFX allocations derived by the cut-and-choose protocol, depending on who \u201ccuts\", and moreover, only the agent who \u201ccuts\u201d might be envious of the other agent (i.e., the agent who chooses).\nRemark 1. We remark that according to the original definition of EFX in [15], where each agent $i$ is not envious against any other agent $j$ after the hypothetical removal of a positive valued good $g$ for $i$ from the $j$'s bundle, the cut-and-choose protocol provides a simple EFX allocation for multigraphs: for every pair of vertices $i, j$ with common adjacent edges $E_{ij}$, use the cut-and-choose protocol to decide the allocation of $E_{ij}$. This allocation is in fact an orientation, i.e., each edge is given to one of its endpoints, and satisfies EFX. The reason is that $i$ is indifferent about any other good that $j$ receives apart from $E_{ij}$, and $E_{ij}$ is allocated between $i$ and $j$ in such a way that $i$ is envy free up to any positively valued good against $j$. However, following the traditional definition of EFX, the good that is hypothetically removed from $j$'s bundle may be indifferent for $i$, and the local allocation of the cut-and-choose protocol is insufficient. Instead, we need to consider the whole multigraph more globally.\nFollowing the above remark, we make use of the cut-and-choose protocol in order to partition the set $E_{ij}$ into two bundles, but we may consider two different partitions depending on which endpoint \u201ccuts\u201d. The reason for that is so that we control the direction of envy, and manage to generalize the ideas of [19]. However, we also put the cut-and-choose protocol in use in a different way: if two agents do not agree on having the same cut, we use the EFX-cut of one of them in order to create a partition of three bundles where the two agents have different most valued set. This tool was proven to be very useful for constructing the EFX allocation for Theorem 2, where we want to minimize the number of envied agents. In both approaches, one crucial condition that we always upkeep is that we never allocate more than one bundle of the partition of $E_{ij}$ to the same vertex.\nOur approach can be seen as a three-step procedure: i) We define an initial allocation where each agent receives exactly one bundle (derived from carefully constructed partitions) from the common edges with exactly one of his neighbors. In this step we guarantee some ground properties on the allocation. ii) We perform Algorithm 4 (a generalization of\""}, {"title": "1.3 Further Related Work", "content": "We focus on references related to EFX, and we defer the reader to a recent survey [5] that discusses other notions of fairness, as well.\nIn [19], they introduced the $(p, q)$-bounded setting, where an item is relevant to at most $p$ agents, and has multiplicity $q$. In [29], they use a bid altered notation where $q$ represents the maximum number of items that are relevant to a pair of agents. In both notations, the multigraph setting is equivalent to the $(2, \\infty)$-bounded setting. The existence of EFX allocations in the $(2, 1)$-bounded setting, which is equivalent to simple graphs, has been studied for goods [19], and for mixed manna settings [40]. In the graph and multigraph setting the existence of EFX orientations, i.e., allocations where edges may only be allocated to one of the endpoints, has also been considered. In [19] they showed that EFX orientations need not exist by giving a counterexample in a $K_4$ graph, and they further showed that even deciding if there exists an EFX orientation is NP-complete; it was later shown that this result holds even if the vertex cover of the graph has size of 8, or in multigraphs with only 10 vertices [21]. In [39], they showed that EFX orientations are not guaranteed to exist in graphs with chromatic number greater than 3, and they always exist when the chromatic number is at most 2. Regarding multigraphs, a very recent work [27] showed that finding an EFX orientation is NP complete even for bipartite multigraphs.\nSeveral relaxations of EFX have also been explored. One such relaxation is the approximate EFX, $\\alpha$-EFX, where no agent envies any strict subset of another agent's allocated set by more than an $\\alpha \\le 1$ parameter. For subadditive"}, {"title": "2 Preliminaries", "content": "We consider a setting where there is a set $N$ of $n$ agents and a set $M$ of $m$ indivisible goods, and each agent $i$ has a valuation set function $v_i: 2^M \\to \\mathbb{R}$, over the sets of goods, i.e., by $v_i(S)$ we denote the valuation of agent $i$ for the set $S$ of goods. The valuation functions are considered to be monotone, i.e., for any $S \\subseteq T \\subseteq M$, it holds that $v_i(S) \\leq v_i(T)$, and normalized, i.e., $v_i(\\emptyset) = 0$. We slightly abuse notation, so that if $S$ is a set of bundles, $v(S) = v(\\cup_{B \\in S} B)$. The only restriction that is considered about the valuations is described by the following multigraph setting.\nMultigraph setting. Let $G = (V, E)$ be a multigraph with $|V| = n$ vertices and $|E| = m$ edges. In the multigraph setting, the agents correspond to the vertices of $G$, and the goods correspond to the edges of $G$. From now on we will refer to the agents as vertices and to goods as edges. In this setting, the edges that are not adjacent to some vertex $i$ are irrelevant to it, i.e., for any $S \\subseteq E$ and any $g \\in E$ that is not adjacent to $i$, $v_i(S \\cup \\{g\\}) = v_i(S)$. We call a good relevant to $i$, if it is adjacent to it. We further call any two edges with the same endpoints parallel.\nAllocation. An allocation $X = (X_1, ..., X_n)$ is a partition of a subset of $E$ into $n$ (disjoint) bundles $X_1, ..., X_n$, where each vertex $i$ receives $X_i$. We call an allocation complete if it's a partition of the set $E$. We call an allocation partial if it's a partition of a strict subset of $E$.\nSocial Welfare. Given an allocation $X$ to $n$ agents, the social welfare is defined as $\\sum_{i=1}^{n} v_i(X_i)$.\nOrientation. An orientation is an allocation where each allocated edge is given to one of its endpoints.\nUnallocated edges. Given a partial allocation $X$, an edge $e$ is unallocated if for every $X_i, e \\notin X_i$. We denote by $U(X)$ the set of unallocated edges in $X$. For each vertex $i$, we define $U_i(X)$ to be the set of all the unallocated edges that are relevant to $i$.\nEnvy - EFX-satisfied. Given an allocation $X = (X_1,...,X_n)$, we say that a vertex $i$ envies another vertex $j$ (or alternatively $X_j$), if $v_i(X_i) < v_i(X_j)$. We say that $i$ is EFX-satisfied against $j$ (or $X_j$) given $X$, if $v_i(X_i) \\geq v_i(X_j \\setminus \\{g\\})$, for all $g \\in X_j$.\nEFX allocation. An allocation $X = (X_1, ..., X_n)$ is EFX if for any pair of vertices $i, j$ it holds that:\n$v_i(X_i) \\geq v_i(X_j \\setminus \\{g\\}),\\forall g \\in X_j$.\nEFX-cut. We heavily rely on the cut-and-choose protocol [33] when considering the parallel edges $E_{ij}$ between two vertices $i$ and $j$: $i$ \u201ccuts\u201d $E_{ij}$ by partitioning it into two bundles such that whichever bundle of the two $i$ receives, it is EFX-satisfied against the remaining bundle. We call such a partition an EFX-cut for $i$ with respect to vertex $j$ (we may omit referring to $j$ if it is clear from the context). In the the cut-and-choose protocol [33], then $j$ receives its most valued bundle and $i$ the remaining bundle.\nAt least degree 2 in G. W.l.o.g., we assume that each vertex has degree at least 2, otherwise, if some vertex $i$ has degree 1, meaning that vertex $i$ is interested only in one good $g$, we may allocate only $g$ to $i$, resulting in $i$ not envying anybody else, and the condition of EFX is satisfied for any other vertex against $i$ (no matter what they receive), since $i$ is allocated a single good.\nObservation 2.1. Given an EFX orientation $X$, if some vertex $i$ is envied, then there exists a single vertex $j$ that envies $i$, and $X_i$ contains only edges relevant to $j$ (all edges in $X_i$ are relevant to $j$).\nProof. Suppose on the contrary that vertex $j$ envies vertex $i$, and there exists edge $g \\in X_i$ such that $g$ is irrelevant to $j$. Then $v_j(X_i \\setminus g) = v_j(X_i) > v_j(X_j)$, where the equality is by definition of irrelevant edges, and the inequality is true"}, {"title": "3 At Most 2 Parallel Edges", "content": "In this section we prove Theorems 1, 2 and 3 for the case where each pair of vertices are connected with at most two edges. Regarding Theorem 2, in this special case of at most 2 parallel edges, we manage to relax slightly the restriction to at most $\\lfloor\\frac{n}{4}\\rfloor$ neighbors (instead of at most $\\lfloor\\frac{n}{4}\\rfloor - 1$). We next give some further definitions regarding this special case.\nEdges $e_{i,j}^1, e_{i,j}^2$. For any pair of adjacent vertices $i, j$, we call $e_{i,j}^1, e_{i,j}^2$, the $i$'s most and second most valued edge between vertices $i, j$, respectively. If there is only one edge between $i$ and $j$, w.l.o.g., we may add a dummy edge as their least preferred edge. Moreover, we give the following two useful definitions.\nDefinition 3.1. Given an EFX allocation $X$, for any envied vertex $i$, we denote the vertex that envies them as $p_i(X)$.\nDefinition 3.2. Given an EFX allocation $X = (X_1, ..., X_n)$, and an envied vertex $i$, let $\\hat{U}_i(X) = U_i(X) \\cup \\{e_{p_i(X)}^i\\}$. We define the most valued set of potentially unallocated non-parallel edges as\n$\\text{UNP}_i(X) \\in \\mathop{\\text{arg max}}_{S \\subseteq \\hat{U}_i(X)} \\{v_i(S) \\text{ any } e_1, e_2 \\in S \\text{ are not parallel}\\},$\nwhere $\\text{UNP}_i(X)$ is chosen to have the maximum possible cardinality. This is the best bundle of non-parallel edges that $i$ could get if $X_i$ would be given to $p_i(X)$ (who envies $i$), and $X_{p_i(X)}$ becomes available.\nDefinition 3.3. Given an EFX allocation $X = (X_1, ..., X_n)$, and a non-envied vertex $i$, let $\\hat{U}_i(X) = U_i(X) \\cup X_i$. We define the most valued set of potentially unallocated non-parallel edges as\n$\\text{UNP}_i(X) \\in \\mathop{\\text{arg max}}_{S \\subseteq \\hat{U}_i(X)} \\{v_i(S) \\text{ any } e_1, e_2 \\in S \\text{ are not parallel}\\},$\nwhere $\\text{UNP}_i(X)$ is chosen to have the maximum possible cardinality. This is the best bundles of non-parallel edges that $i$ could get without changing the allocation of the other vertices.\nRemark 2. Given an EFX allocation $X$, suppose that some vertex $i$ is assigned $\\text{UNP}_i(X)$, and the allocation of the other vertices remain unchanged, apart maybe from vertex $p_i(X)$ in the case that $i$ is envied; if $p_i(X)$ received $e_{p_i(X)}^i$ in $X$, and that edge belongs to $\\text{UNP}_i(X)$, then it is removed from $p_i(X)$'s bundle and is given to $i$ along with the $\\text{UNP}_i(X)$. In the new allocation, there are no parallel edges adjacent to $i$ that are both unallocated. The reason is that $\\text{UNP}_i(X)$ has maximum value and cardinality, so one of the two parallel edges should belong to $\\text{UNP}_i(X)$.\nWe prove Theorems 1, 2 and 3 by constructions of an EFX allocation in three steps. The first two steps are dedicated to satisfy specific properties for the allocation that is always an EFX orientation, and the final step is an assignment of the remaining unallocated edges to vertices different from their endpoints. We discuss each step separately, and we first give the required properties for the first two steps.\nProperties of the allocation $X$ after the 1st step.\n(1) A partial EFX orientation.\n(2) For any vertex $i$ and $e \\in U(X)$, $v_i(X_i) \\geq v_i(e)$.\n(3.1) No two envied vertices are adjacent. (For Theorem 1)\n(3.2) The number of the envied vertices is at most $\\lfloor\\frac{n}{2}\\rfloor$. (For Theorem 2)\n(3.3) For any envied vertex $i$, $p_i(X)$ or at least one neighbor of $p_i(X)$ is non-envied. (For Theorem 3)\nAdditional property of the allocation $X$ after the 2nd step.\n(4) For any envied vertex $i$, $v_i(X_i) \\geq v_i(\\text{UNP}_i(X))$, and any non-envied vertex $j$, $v_j(X_j) \\geq v_j(U_j(X))$."}, {"title": "3.1 Step 1 - Initial Allocations", "content": "This step is the initial allocation towards the EFX construction. For each of our results, in this warm up case, i.e., at most 2 parallel edges between any pair of vertices, we show an initial allocation that satisfies Properties (1),(2) and respectively one of the Properties (3.1),(3.2) and (3.3) for each of our main theorems."}, {"title": "3.1.1 Initial allocation for bipartite multigraphs", "content": "Here we describe the initial allocation for the case of some bipartite multigraph $G = (V = A \\cup B, E)$: starting from the empty allocation, each vertex in side $A$ is allocated their most valued edge. Then each vertex in side $B$ is allocated their most valued edge from the remaining unallocated edges. This procedure is formally described in Algorithm 1.\nLemma 3.4. Algorithm 1 outputs an allocation $X$ that satisfies Properties (1), (2), and (3.1).\nProof. Property (1) is trivially satisfied since in $X$ every vertex receives a single edge adjacent to them. Property (2) is also satisfied since when Algorithm 1 updates the bundle allocated to any vertex $i$, they receive their most valued edge, so they prefer $X_i$ to any unallocated edge. For Property (3.1) note that all vertices in side $A$ are assigned their most valued edge before assigning any edge to side $B$. Since the graph is bipartite, only vertices from side $B$ may envy vertices from side $A$. Therefore, all envied vertices are on side $A$, and in turn, no two envied vertices are adjacent."}, {"title": "3.1.2 Initial allocation for at most $\\lfloor\\frac{n}{4}\\rfloor$ neighbors per vertex", "content": "The purpose in this case is to find an initial allocation with bounded number of envied vertices. For this, we carefully define a bipartite (simple) weighted graph $H(G) = (A \\cup B, E_H)$ based on the given multigraph $G$, between the vertices and the edges of $G$. A maximum weighted matching of $H(G)$ gives an allocation where at least half of the vertices receive their most valued edge, and the rest receive their second most valued edge (so each of them envies at most one other vertex), limiting that way the number of envied vertices.\nDefinition 3.5. (Bipartite graph $H(G)$). Given a multigraph $G = (V, E)$, we define a simple weighted bipartite graph $H(G) = (A \\cup B, E_H)$, where $A = V$ and $B = E$. We create the edge set $E_H$ as follows: we connect each vertex $i$ of $A$ (i.e., each vertex of $G$) with the two vertices of $B$ that represents $i$'s most and second most valued edge in $G$ (adjacent to $i$); we set the weights of those two edges we add in $H(G)$ to 1 and 0, respectively.\nWe prove in Lemma 3.7 that the allocation, let it be $X_M$, that corresponds to the maximum A-perfect matching in $H(G)$ satisfies Properties (1),(2), and (3.2). We first show in Observation 3.6 that there is always an A-perfect matching.\nObservation 3.6. There is always an A-perfect matching in $H(G)$.\nProof. In order to prove the existence of an A-perfect matching, we show that Hall's theorem [25] holds for any $S \\subseteq A$. Let $N_S$ be the set of neighbors of $S$. For the sake of contradiction, assume that $|N_S| < |S|$ for some $S \\subseteq A$. Each node in $S$ has degree exactly 2, by construction, so there are exactly $2|S|$ edges in $H(G)$ with endpoints in $S$. Since we assumed $|N_S| < |S|$, by the pigeonhole principle there is a vertex $j \\in N_S$ with degree at least 3. However, each vertex in $B$, and therefore in $N_S$, has degree at most two, as it represents an edge in $G$ and it may only be connected with its endpoint vertices in $A$. This is a contradiction to our assumption, so for any $S \\subseteq A$, it holds that $|N_S| \\geq |S|$; by Hall's theorem, there is always an A-perfect matching in $H(G)$.\nLemma 3.7. $X_M$ satisfies Properties (1),(2), and (3.2).\nProof. Let $M$ be the maximum weighted A-perfect matching that corresponds to the allocation $X_M$. Every vertex is assigned exactly one edge that is adjacent to it, so Property (1) trivially holds. Regarding Property (2), note that every"}, {"title": "3.1.3 Initial allocation for length of the shortest cycle with non-parallel edges at least 6", "content": "This initial allocation requires an allocation that satisfies Properties (1) and (2) and then we change that allocation such that it additionally satisfies Property (3.3). We may use the initial allocation $X_M$, however there is a very simple greedy algorithm that satisfies Properties (1) and (2): iteratively let each vertex pick their most valued edge from its adjacent unallocated edges. We present this procedure in Algorithm 2\nLemma 3.8. Algorithm 2 satisfies Properties (1) and (2).\nProof. Every vertex is allocated exactly one adjacent edge, therefore we have an EFX orientation, and Property (1) is satisfied. Each vertex gets (in its turn) their most valued adjacent unallocated edge. Since they are indifferent for non-adjacent edges, overall, after running Algorithm 2, they do not prefer any unallocated edge to their allocated edge, resulting in satisfaction of Property (2).\nSatisfying also Property (3.3). Let $X$ be an allocation satisfying Properties (1) and (2), e.g., the allocation derived after running Algorithm 2. We use Algorithm 3 to transform $X$ so that it additionally satisfies Property (3.3).\nThe idea of this algorithm is that when for an envied vertex $i$, the vertex $j = p_i(X)$ is also envied, and so are all its neighbors, $j$ releases its allocated edge which is given to the vertex that envies $j$. Then, $j$ receives its most valued available edge, if any, and Properties (1) and (2) still hold. Note that $j$ becomes non-envied and all its neighbors were envied before, and they may or may not be envied after the reallocation; so, overall, the envy only reduces, and Property (3.3) is now satisfied for $i$.\nLemma 3.9. Algorithm 3 terminates and the allocation returned satisfies Properties (1),(2) and (3.3).\nProof. We will show that if before each round of Algorithm 3 Properties (1) and (2) were satisfied, those properties hold after the completion of that round (outer \u201cwhile\u201d), and moreover, that the number of envied vertices is reduced by at least one. This would mean that Algorithm 3 terminates and Properties (1),(2),(3.3) are satisfied; Property (3.3) should be trivially satisfied after the termination of Algorithm 3 due to the condition of the outer \u201cwhile\u201d.\nIt is easy to see that Properties (1) and (2) are satisfied after any round of the outer \u201cwhile\u201d: Property (1) is satisfied since each vertex receives at most one of its adjacent edges, and Property (2) is guaranteed by the inner \u201cwhile\u201d. Next we show that in each outer \u201cwhile\u201d, no non-envied vertex becomes envied, and at least one envied vertex, namely $j$, becomes unenvied; this means that Algorithm 3 terminates."}, {"title": "3.2 Step 2 - Satisfying Property (4)", "content": "This step starts with the initial allocation constructed in Step 1 satisfying Properties (1),(2), and one of (3.1),(3.2), and (3.3). In Step 2, the initial allocation changes according to Algorithm 4 in order to additionally satisfy Property (4). We remark that all our results use the same algorithm in Step 2, no matter which of the three cases is considered.\nThe necessity of the first part of Property (4) is so that for each envied vertex $i$ we can allocate its adjacent unallocated edges $U(X)$. We cannot allocate any of those edges to $i$ as long as it is envied. So, the high level idea for Step 2 is that either $U_i(X)$, or more accurately $\\text{UNP}_i(X)$ (see Definition 3.2), is valued for $i$ more than $X_i$, in which case $i$ receives this bundle and releases $X_i$ (which in turn is given to $p_i(X)$), or $i$ doesn't value $\\text{UNP}_i(X)$ that much, and we can find ways to allocate it to other non-envied vertices (in Step 3) without causing envy to $i$. The idea is similar to Algorithm 2 of [19", "chooses": "ts most valued available set of non-parallel edges, so that the remaining unallocated set may be assigned to other non-envied vertices (in Step 3) without causing envy to $i$. This issue did not appear in simple graphs [19", "while": "i.e., the ones at lines 1-3 and 4-15, if they were satisfied before. Meanwhile, we show that any non-envied vertex cannot be envied after Algorithm 4.\nFor the first \u201cwhile\u201d (lines 1-3), a non-envied vertex $k$ gets a new bundle that it values at least as much as its previous"}]}