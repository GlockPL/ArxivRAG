{"title": "How Diffusion Models Learn to Factorize and Compose", "authors": ["Qiyao Liang", "Ziming Liu", "Mitchell Ostrow", "Ila Fiete"], "abstract": "Diffusion models are capable of generating photo-realistic images that combine elements which likely do not appear together in the training set, demonstrating the ability to compositionally generalize. Nonetheless, the precise mechanism of compositionality and how it is acquired through training remains elusive. Inspired by cognitive neuroscientific approaches, we consider a highly reduced setting to examine whether and when diffusion models learn semantically meaningful and factorized representations of composable features. We performed extensive controlled experiments on conditional Denoising Diffusion Probabilistic Models (DDPMs) trained to generate various forms of 2D Gaussian data. We found that the models learn factorized but not fully continuous manifold representations for encoding continuous features of variation underlying the data. With such representations, models demonstrate superior feature compositionality but limited ability to interpolate over unseen values of a given feature. Our experimental results further demonstrate that diffusion models can attain compositionality with few compositional examples, suggesting a more efficient way to train DDPMs. Finally, we connect manifold formation in diffusion models to percolation theory in physics, offering insight into the sudden onset of factorized representation learning. Our thorough toy experiments thus contribute a deeper understanding of how diffusion models capture compositional structure in data.", "sections": [{"title": "1 Introduction", "content": "Large-scale text-to-image generative models can produce photo-realistic synthetic images that combine elements in a novel fashion (compositional generalization). Nonetheless, the ability of models to do so, as well as their failure modes, are not well-studied systematically in large diffusion models due to the size of the model and the complex and high-dimensional nature of their training datasets. Factorization and compositional generalization have been theoretically and empirically investigated in many deep generative models before Zhao et al. [2018], Higgins et al. [2017], Burgess et al. [2018], Montero et al. [2021], Xu et al. [2022], Okawa et al. [2023], Wiedemer et al. [2023], Bowers et al. [2016], Chaabouni et al. [2020]. However, these studies have not reached a unanimous conclusion on whether factorized representations learned in the intermediate layers of the model promote compositional generalization in the model performance. Specifically, several studies Xu et al. [2022], Montero et al. [2021], Chaabouni et al. [2020] have found little correlation between factorization and compositionality, contrary to others that suggest that factorization promotes compositionality Bengio et al. [2013], Higgins et al. [2017], Burgess et al. [2018], Duan et al. [2020], Bowers et al. [2016]. As a result, there is no consensus on the exact mechanism of compositionality and how models gain the ability to compositionally generalize. However, these previous studies involve data with a complex mix of discrete and continuously varying features, making it difficult to explicitly analyze the model's learned representations beyond the disentanglement score, and thereby hindering a deeper understanding of factorization and compositionality."}, {"title": "2 Methods", "content": "Dataset. We generate N \u00d7 N pixel grayscale images. By default, we set N = 32 unless otherwise specified. Each image contains one 2D Gaussian bump (\u201cblob", "sum of stripes (SOS's)": "at various x, y locations. The brightness v(x,y) of the pixel at position (x, y) for a 2D Gaussian blob centered at $({\\mu}_x, {\\mu}_y)$ with standard deviation $(\\sigma_x, {\\sigma}_y)$ is given as $v_{(x,y)} = 255 \\times (1 - e^{-(x-{\\mu}_x)^2/4\\sigma_x^2-(y-{\\mu}_y)^2/4\\sigma_y^2})$ and as $v_{(x,y)}^{SOS} = 255 \\times [1-(e^{-(x-{\\mu}_x)^2/4\\sigma_x^2} + e^{-(y-{\\mu}_y)^2/4\\sigma_y^2})]$ for a 2D Gaussian SOS with the normalized range of v(x,y) to be [0, 255]. Each image is generated with a ground truth label of $({\\mu}_x, {\\mu}_y)$, which continuously vary within [0, N]\u00b2 unless otherwise specified. In our convention of notation, we label the top left corner of the image as (1, 1) while the bottom right corner of the image as (N, N). Sample 32 \u00d7 32 images of 2D Gaussian bump and SOS centered at ${\\mu}_x = {\\mu}_y = 16$ with ${\\sigma}_x = {\\sigma}_y = 1$ are shown in Fig. 1.\nA single dataset of these images consist of the enumeration of all possible Gaussians tiling the whole N \u00d7 N canvas at increment $d_x$ in the x-direction and $d_y$ in the y-direction. A larger $d_x$ or $d_y$ means a sparser tiling of the image space and fewer data while a smaller $d_x$ or $d_y$ result in more data with denser tiling of the total image space. Moreover, each 2D Gaussian have independent spread in the x and y direction given by ${\\sigma}_x$ and ${\\sigma}_y$, with a larger spread leading to more spatial overlap of neighboring Gaussians and a smaller spread less overlap. By parameterically tuning the increments $d_x$ and $d_y$ and the spread ${\\sigma}_x$ and ${\\sigma}_y$, we can generate datasets of various sparsities and overlaps. We provide a more detailed analysis of the various attributes of the data based on these parameters in Appendix A.5. For the majority of the experimental results we show in Sec. 3, we have chosen to fix ${\\sigma} := {\\sigma}_x = {\\sigma}_y = 1.0$ and $d := d_x = d_y = 0.1$ unless otherwise specified. A default 32 \u00d7 32 dataset of d = 0.1 contains 102400 images.\nModels & Evaluations. We train a conditional DDPM [Ho et al., 2020, Chen et al., 2021, Saharia et al., 2023] with a standard UNet architecture as shown in Appendix Fig. 7. For each image in the training dataset, we provide an explicit ground truth label $({\\mu}_x, {\\mu}_y)$ as an input to the network. For reference, we investigate the internal representation learned by the model using the output of layer 4 as labeled in Fig. 7. Since each dataset has inherently two latent dimensions, x and y, we use dimension reduction tools such as PCA or UMAP McInnes and Healy [2018] to reduce the internal"}, {"title": "1. Do diffusion models learn factorized representations? If so, when do these emerge over training?", "content": null}, {"title": "2. Do the trained models learn to generalize beyond the training distribution, and what kind of training data is sufficient for this generalization?", "content": null}, {"title": "3. Does the inclusion of a few explicitly factorized examples in training (e.g. the 1D Gaussian data) improve sample efficiency and generalization?", "content": null}, {"title": "Contributions. In three experiments, we find that:", "content": "1. Given factorized, continuous conditional inputs, diffusion models learn \"hyper-factorized\" representations that are orthogonal not only for independent features but also different values of the same feature (Section 3.1).\n2. Models compose well but interpolate poorly. Models can compositionally generalize when they observe the full extent of each independent latent feature along with a few compositional examples (Section 3.2).\n3. Models trained on datasets containing isolated factors of variation require an exceptionally small number of compositional examples to compositionally generalize, showing remarkable data efficiency (Section 3.2).\n4. Formation of a factorized representation for each continuous dimension of variation requires a threshold amount of correlated data, related to percolation theory in physics (Section 3.3).\nOur results suggest that diffusion models can learn factorized, though not fully continuous, representations of continuous features with independent variations. These models demonstrate exceptional compositionality but have limited interpolation ability, even with sufficient training and data. Our analysis offers deeper diagnostic insights into the mechanism of factorization and compositionality of diffusion models from a microscopic representation perspective. Moreover, our insights on the data efficiency of training with isolated factors of variation with few compositional examples suggest the possibility of far more data efficient methods of training diffusion models."}, {"title": "3 Results", "content": "3.1 Models learn factorized but not fully continuous representations\nIn this section, we aim to understand the factorization of the model's learned representation via explicit inspection of its topology and geometry. Given a conditional DDPM trained on the 2D Gaussian bump dataset described above, we first investigate whether the model learns a coupled or factorized representation. Na\u00efvely, a 2D Gaussian dataset with two independent features of variation, x and y, has a 2D plane-like latent representation. Unfortunately, simply inspecting the learned representation would not allow us to easily differentiate between a coupled versus a factorized representation since the Cartesian product of two lines $L^1 \\times L^1 \\subset R \\times R \\rightarrow R^2$ is topologically and geometrically equivalent to a plane $P^2 \\subset R^2$. To overcome this issue, we perform a simple modification to the Gaussian dataset. We impose periodic boundary conditions in the image space to connect the left-right and top-bottom boundaries of the image such that the latent representation of the dataset forms a torus. Mathematically, a torus is defined by the Cartesian product of two circles $S^1 \\times S^1$. A Clifford Torus is an example of a factorized representation of the torus, with each circle independently embedded in R2, resulting in a 4-dimensional object. However, the most efficient representation in terms of extrinsic dimensionality is the regular torus T2, which is embedded in R3, albeit unfactorized. Various 2D projections of the 3D torus and the Clifford (4D) torus are shown in Fig. 2(a). Due to geometric differences between the Clifford and the 3D torus, we can now distinguish whether the model learns a factorized representation. If the model were to represent x and y independently with two ring manifolds, we expect to see a Clifford torus in the neural activations, rather than a different geometry such as the 3D torus.\nTo apply the geometry tests for differentiating between the 3D and the Clifford torus, we first need to confirm that the model indeed learns a torus representation of the dataset by computing the topological features of the learned representation via persistent homology. In Fig. 2(b), we compare the persistence diagrams of a standard torus (left) with the final learned representation of the model (right). Both diagrams exhibit the similar topological features, rank-1 $H_0$ group, rank-2 $H_1$ group (with overlapping orange points on top in both diagrams), and rank-1 $H_2$ group, signaling that the model indeed learns a torus representation.\nWe then investigate when this torus representation emerges during training. In Fig. 2(c), we show the model's performance as measured by the accuracy of its generated images (top) and the corresponding effective dimension (bottom) of the learned representations across training, as measured by the participation ratio $\\rho$ ( given by $(\\Sigma_i \\lambda_i)^2/\\Sigma_i \\lambda_i^2$, where $\\lambda_i$ is the eigenvalue of the i-th principal component Gao et al. [2017]). Intuitively, the participation ratio counts the dominant eigen-components, providing a measure of the effective dimension of the geometric object of interest. A detailed inspection of the effective dimension of the learned representations over the training duration informs us of whether and how the model arrives at a factorized, 4D representation. We see in Fig. 2(c) that as training progresses, the model's internal representation first undergoes a dimension increase then a decrease, eventually converging to around 7 dimensions after 200 epochs. While the dimensionality converged to a higher dimension than 4, the top 4 eigenvectors became notably more prominent as the training converges, as indicated in the eigenspectra in Fig. 2(d). This signals that a 4D, rather than 3D, torus representation is eventually learned. Various PCA projections of the learned representations along the training process are shown in Fig. 2(g)-(i), where the projections in the last epoch resembles those of the Clifford torus shown in (a).\nTo confirm whether the model learns a Clifford torus, we employ the orthogonality and parallelism tests of tori Cueva et al. [2021b] (details found in Appendix B). In an ideal Clifford torus, the rings along the poloidal direction should be parallel with each other, and similarly for those along the toroidal direction. Moreover, the rings along the poloidal direction should be orthogonal with respect to the rings in the toroidal direction. The orthogonality and parallelism tests measure the orthogonality and parallelism of subspaces spanned by various rings on the torus. If the model learns a Clifford"}, {"title": "3.2 Models can compose but not interpolate", "content": "In this section, we examine the model's ability to compositionally generalize. Specifically, we train the model on incomplete datasets of 2D Gaussian SOSs, in which we leave out all Gaussian SOSs centered in the red-shaded test regions (Fig. 4(f), sampling distributions shown in Fig. 4(a), (b)). We then assess the performance of the models in generating 2D Gaussian SOSs centered within and outside of the test regions. Here we choose the width of the cuts to be around 6 pixels wide, which roughly corresponds to the width of the Gaussian stripes of \u03c3 = 1.0. We design the lesions such that we can probe the model's ability at compositionally generalizing out of the training distribution as well as its ability to spatially interpolate in a single variable alone. There are 4 possible outcomes based on the model's ability to compose and interpolate, and we give predictions for the model's generalization performance in each case: 1) the model cannot compose or interpolate: here, we would see low performance across the test regions; 2) the model interpolates but cannot compose: here, we would see high performance across the test regions; 3) the model composes but cannot interpolate: here, we would see high performance in one dimension but not the other in the non-intersecting part of the test regions, low performance in the intersection; 4) the model can compose and interpolate: here, we would see higher performance across the test regions. We note that case (2) and (4) are indistinguishable via the behavior of the model.\nIn our first experiment, we simply train our model on a 2D Gaussian SOS dataset where all data centered in the test regions are left out, i.e. excluding all ${\\mu}_x, {\\mu}_y \\in [13, 19]$ as shown in Fig. 4(a). We call this model the 2D model since the model is trained on only 2D Gaussian SOS data. We then examine the terminal accuracy of the 2D model in generating Gaussian SOSs at the correct ${\\mu}_x$ and ${\\mu}_y$ in various parts of the test regions, which we section into a horizontal part, a vertical part, both excluding the area of their intersection, and the intersection itself (shown schematically in Fig. 4(f)). We note that the 2D model achieves high accuracy in generating ${\\mu}_y$ while suffers low accuracy in generating ${\\mu}_x$ in the vertical section. Similarly, the 2D model achieves high accuracy in generating ${\\mu}_x$ while suffers low accuracy in generating ${\\mu}_y$ in the horizontal section. The model suffers low accuracy in generating both ${\\mu}_x$ and ${\\mu}_y$ in the intersection region. These observations have two implications: i) the model is factorized and compositional since it is able to generate the correct ${\\mu}_x$ or ${\\mu}_y$ irrespective of the other; ii) the model has limited ability to spatially interpolate, which suggests that it does not learn a fully continuous manifold in its activation space (see Fig. 10(c)). These observations meet our expectation for outcome case (3), when the model can compose but not interpolate and resonates our conclusion from Sec. 3.1 that the model has learned to factorize x and y, but has not learned a consistent representation across all x's (and likewise y's). In Appendix C.3 Fig. 11, we quantitatively assess model's ability to interpolate as a function of the held-out range width in the data manifold and found that model's ability to interpolate gradually decrease as a function of the held-out region width."}, {"title": "3.3 Connection between manifold learning and percolation theory", "content": "We have established that the model learns factorized (but not fully continuous) and compositional representations. Next, we identify a potential connection between manifold learning in diffusion models and percolation theory in physics, which provides a normative explanation as to how factorization (or compositional generalization) emerges. To start, we note that our Gaussian bump datasets can be approximated as a simple Poisson Boolean (Gilbert's disk) model Gilbert [1961], Hanisch [1980], a well-studied system in continuum percolation theory. Fig. 6(a) shows a schematic illustration of our dataset of Gaussian bumps approximated as disks of various widths on a 2D 32 \u00d7 32 lattice of grid spacings $d_x$ and $d_y$. In percolation theory, the quantity of interest is the critical fraction of nodes that need to have non-zero overlaps in order for the entire system to be interconnected with high probability. For most systems (finite- and infinite-sized), there exist a phase transition that occurs at the critical fraction that can be either analytically derived or numerically estimated, with the transition becoming sharper as the system size scales. In our context, since the Gaussian bump images are pixelated, overlaps between neighboring Gaussian bumps are not smooth. In Fig. 6(b), we plot the normalized L2-norm of the neighboring distance-d-separated Gaussian bumps with various spread \u03c3's. We note that since the L2-norm measure of overlap is normalized to 1 between a given Gaussian bump and itself, the overlap between a given Gaussian bump and a slightly offset Gaussian bump temporarily goes beyond 1 due to the discrete nature of the data.\nWe hypothesize that below a threshold amount of training data, the diffusion model cannot construct a faithful representation of the training dataset. From the percolation perspective, if there does not exist a large enough interconnected component within the dataset, the model will fail to learn the relative spatial location of the data points, making it hard to learn a faithful 2D representation. To test this hypothesis, we first simulated the mass ratio of largest interconnected components as a function of the unit area data density \u03bb with our 2D Gaussian bump datasets. For simulation, we use a dataset of 1024 data points, corresponding to $d := d_x = d_y = 1.0$ on a 32 \u00d7 32 lattice. We then randomly sample $\u03bb \\times 1024$ points on the lattice to compute the size of the largest interconnected cluster of Gaussian bumps. Here, we define a hyperparameter of threshold overlap beyond which we consider two Gaussian bumps as overlapping. In Fig. 6(c), we show the simulation results. averaged over 5 runs, with the chosen threshold overlap of 0.005 for datasets with various \u03c3's. Additional simulation results with various chosen overlap thresholds can be found in Appendix D.\nNext, we quantify the connection between percolation theory and manifold formation in diffusion models. To account for the stochasticity in sampling the datasets and avoid significant overhead in"}, {"title": "4 Discussion", "content": "In the previous section, we have shown that diffusion models are capable of learning factorized and semi-continuous representations. This allows for compositional generalization across factors that have appeared in the training dataset, even given only a small number of compositional examples. While we studied a toy system, our results imply that the diffusion model architecture has some inductive biases favoring factorization and compositionality, as seen in astonishing compositional text-to-image generation examples such as an \u201castronaut riding a horse on the moon\". Our results demonstrate further that if the training data include isolated factors of independent variation and some compositional examples, diffusion models are capable of attaining high performance in OOD compositional generalization. While it is true that natural images are much more complex, and there can be numerous forms of compositionality within a single image, the datasets and modes of composition we studied were not trivial. Nonetheless, further investigation is necessary to understand the compositionality and factorization of models when multiple forms of compositionality are at play.\nFurthermore, we showed a connection between the models' performance, as related to its ability to learn a faithful representation of the dataset, and percolation theory in physics. Percolation theory provides a plausible mechanistic interpretation of the observed sudden emergence in the model's capability beyond a threshold number of data points. Further work is needed to characterize the precise connection between percolation theory and manifold formation, in both toy settings and realistic settings. In realistic datasets, mutual information or cosine similarity between data points can serve as abstract forms of overlap. Moreover, the idea of percolation can be further extended to study alternative observations of phase transitions in deep learning, such as percolation of the chain-of-knowledge in large language models."}, {"title": "5 Conclusion", "content": "We have shown that diffusion models are capable of learning factorized representations that can compositionally generalize OOD, given data containing the full range of each independent factor of variation and a small amount of compositional examples. Our study suggests that diffusion models have the inductive bias for factorization and compositionality, which are believed to be key ingredients for scalability. We identified that the diffusion models fail to generalize out-of-distribution when 1) there are unseen values of a given factor of variation for the composition, 2) there are no compositional examples in the training dataset, 3) there is an insufficient quantity of data, and 4)"}, {"title": "A Experimental Details", "content": "A.1 Architecture\nWe train a conditional denoising diffusion probabilistic model (DDPM) Ho et al. [2020] with a standard UNet architecture of 3 downsampling and upsampling blocks, interlaced self-attention layers, and skip connections as shown in Fig. 7. Each down/up-sampling blocks consist of max pooling/upsampling layers followed by two double convolutional layers made up by convolutional layers, group normalization, and GELU activation functions.\nThe conditional information is passed in at each down/up-sampling block as shown in the schematic drawing. In our experiments, we choose to preserve the continuity of the Gaussian position labels passed into the model via explicit positional encoding rather than using a separate trainable embedding MLP at each block. Each embedding vector is made by concatenating equal-length vectors of the positional encodings of the timestep, the x-position, and the y-position.\nIn our experiments, we visualize the outputs of layer 4 as the internal representation of the diffusion model. We have chosen not to use the output of the bottleneck layer for our study of the learned latent manifold, as we have observed that the bottleneck layers have diminishing signals in most of our experiments. This is likely due to the presence of the skip connections. This choice does not affect the validity of our main results, as we are focused on the factorization of the model's learned representation.\nA.2 Dimension Reduction\nWe primarily use the dimension reduction technique Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP) McInnes and Healy [2018] to study and visualize the learned representation of the model. Specifically, we collect image samples and their corresponding internal representations (outputs of layer 4 from the architecture described in Sec. A.1). We then transform the high-dimensional internal representations into a 3D embedding as a sample of the learned"}, {"title": "A.3 Evaluation", "content": "We assess the performance of the model using two primary criteria: 1) the quality of the denoised images and 2) the quality of the learned representation.\nAt a given time during or after training, we generate 1024 denoised images and their corresponding internal representations of sampled labels based on 32 \u00d7 32 grid points. We predict the label corresponding to each generated image based on the x- and y-positions of the generated Gaussian bump/SOS in the image. We then compute the accuracy of predicted labels from the ground-truth labels averaged over 1024 samples as\n$Accuracy = \\frac{1}{1024} \\sum_{i=1}^{1024} 1(|{\\hat{\\mu}}_x - {\\mu}_x| < 1) \\cdot 1(|{\\hat{\\mu}}_y - {\\mu}_y| < 1),$ (1)\nwhere 1(\u00b7) is an indicator function that returns 1 if the expression within holds true, 0 otherwise. Similarly, we can modify this expression to only assess the accuracy of generated x-positions or y-positions separately. Here we estimate the center of the Gaussian bump/SOS $ {\\hat{\\mu}}_x $ and $ {\\hat{\\mu}}_y $ by finding the location of the darkest pixel in the image. In the cases where there are no Gaussian bumps/SOS's or more than one bump/SOS, the algorithm defaults back to finding the centroid of the image. We then construct the learned representation of the model based on the neural activations of layer 4 corresponding to the 1024 sampled images collected at the terminal diffusion generation timestep. We note that we have investigated neural activations collected at alternative diffusion generation timesteps and found that they do not noticeably differ from timestep to timestep."}, {"title": "A.4 Training Loss", "content": "Diffusion models iteratively denoise a Gaussian noisy image $x_T$ into a noisefree image $x_0$ over diffusion timesteps $t \\in {0, 1, ..., T}$ given the forward distribution $q(x_t|x_{t-1})$ by learning the reverse distribution $p_\\theta(x_{t-1}|x_t)$. Given a conditional cue c, a conditional diffusion model [Chen et al., 2021, Saharia et al., 2023] reconstructs an image from a source distribution $q(x_0|c)$. Specifically, we train our neural network (UNet) to predict the denoising direction $\\epsilon_\\theta (x_t, t, c)$ at a given timestep"}, {"title": "A.5 Datasets", "content": "The datasets we used for training the models generating the results in Sec. 3 have various increments d and \u03c3. Here we briefly comment on the interplay between increments and sigmas, and how they affect dataset densities and overlaps. The ultimate goal of our task of interest is to learn a continuous 2D manifold of all possible locations of the Gaussian bumps/SOS's. Intuitively, the spatial information necessary for an organized, continuous, and semantically meaningful representation to emerge is encoded in the overlap of the neighboring Gaussian bumps/SOS's, which is tuned via the parameters d and o. As we increase d, the size of the dataset gets scaled quadratically, resulting in denser tilings of the Gaussian bumps/SOS's.\nAs we scale up o, the dataset size remains fixed while the overlaps with neighbors are significantly increased. In Fig. 6(b), we plot the normalized L2-norm of the product image of neighboring Gaussian bumps as a function of increments for various spreads. Specifically, given two inverted grayscale Gaussian bump images, a and b, the normalized L2-norm of their product is given by the formula $||\\sqrt{a*b}||_2/||a||_2$, where * is element-wise multiplication and $||\u00b7||_2$ is the L2-norm. This quantity should give a rough measure of the image overlap with the exception at increment around 0.5 due to the discrete nature of our data. Moreover, we note that the cusps in the curves occur for the same reason. As we can see, the number of neighbors that a given Gaussian bump has non-trivial overlaps with grows roughly linearly to sub-linearly with the spread. Since the model constructs non-parallel representation encodings of different values of x's and y's, more neighbor information results in more overlaps between different values of x's and y's and hence better representation learned, as shown in the percolation results in Fig. 6 in Sec. 3.3. Overlaps in Gaussian SOS data can be similarly analyzed, albeit the differences in overlaps of neighboring Gaussian SOS's of various spread o's is not as pronounced due to the large coverage area of each Gaussian stripe."}, {"title": "B Orthogonality and Parallel Test", "content": "B.1 Motivation for the Analysis\nTo better identify whether the diffusion models learn to factorize its representations, we choose to study periodic representations of Gaussian bumps, which we expect to form toroidal manifolds in the latent space as opposed to planar manifolds. This is because toroidal manifolds have multiple standard realizations which vary based on their degree of entanglement in the two rings. In particular, the standard torus embeds the rings in three dimensions that couple the two periodic variables, whereas the Clifford Torus embeds each ring in its own orthogonal subspace. This difference in geometry motivates the two analyses that we implemented to identify which geometry the diffusion model learned."}, {"title": "B.2 Computation of the Tests", "content": "We implement the orthogonality and parallelism tests as in Cueva et al. [2021a]. Briefly, the orthogonality test asks whether the rings that code for each variable lie in orthogonal subspaces-if so, this indicates that the torus has a Clifford-like geometry. The parallelism test asks whether rings in one variable are aligned in the other variable. If so, this also indicates that the torus has a Clifford-like geometry.\nThe analysis first requires identifying each ring-surprisingly, we found that when the rings formed, the top four Principal Components comprised them. In particular, the first ring were consistently spanned by PCs 1 and 3, and the second was spanned by PCs 2 and 4 (Fig. 2(f) and (g)). Thus, we confirmed that we could use PCA for our analysis.\nFor each analysis, we identify the ring subspaces by fixing one variable of the input, and sweeping the other variable. We do so for each index, arriving at 32 different subsets of the data for variable x and 32 different points for variable y. Next, we compute the top two Principal Components for each subset of the data, thereby identifying the ring.\nFor the orthogonality test, we randomly draw pairs of rings that are fixed in x and y and compute the pairwise angles between each rings' Principal Components via cosine similarity. For the parallelism test, we compute the randomly drawn pairs of rings that are fixed in the same variable. Next, we create a projection matrix P from the subspaces defined by one of the rings, and calculate the reconstruction error of the second ring's projection onto that subspace:\nr = |h \u2212 PPTh|3. (3)\nIn each test, we aggregate histograms of the respective metric. To identify the similarity between our data and either toroidal embedding, we compute the same histograms for both the Clifford and standard torus (based on a simulation with similar spacing in x and y samples), and compute the Wasserstein distance between the data and these simulations. The Wasserstein distances between the orthogonality and parallelism test statistics of the model's learned representation and those of an ideal Clifford torus and 3D torus are shown in Fig. 8 as a function of the training epochs. We note that the model's learned representations at smaller training epochs are not necessarily a torus, hence the metric comparison at those points has less significance."}, {"title": "C Composition and Interpolation", "content": "C.1 Gaussian Stripe/SOS Dataset Generation\nTo generate 1D Gaussian stripe dataset shown in Fig. 4(b) while maintaining the structure of the 2D conditional embeddings, we embed the 32 \u00d7 32 data latent space into an extended 44 \u00d7 44 latent space while maintaining the image pixel size to be 32 \u00d7 32. Functionally, this allows us to mix into the 2D Gaussian SOS datasets 1D (and 0D) Gaussian data, as defined by the portion of the Gaussian that is actually visible to the model in the 32 \u00d7 32 pixels. Examples of 0D, 1D, and 2D Gaussian SOS data are shown in Fig. 9(a)-(c), respectively. Fig. 9(e)-(g) then show the actual data latent representations of the 2D, 1D, and 2D+1D datasets that we use to train 2D, 1D, and 2D+1D models described in Sec. 3.2. Here, the green points represent each individual 2D Gaussian SOS data, the blue points represent the 1D Gaussian SOS data, and the yellow points the 0D Gaussian SOS data. In all three datasets, we leave out the all Gaussian SOS data centered in the red shaded regions. We note that due to the nature of our data generation scheme, the 2D data only exist within the image space (and some spillover) and the 1D (and 0D) data only exist in the extended data latent space. Because of the nonzero width of the Gaussian stripes, a portion of the data along the rim of the 32 \u00d7 32 image space is actually 2D with a portion of the overlaps between the horizontal and the vertical stripes visible within the image frame. In training the 1D model shown in Fig. 4, we have removed the rim where any overlap between the horizontal and vertical Gaussian stripes is partially visible within the image, as shown in Fig. 9(f). The model trained on such a 1D dataset without any compositional example is, as discussed in Sec. 3.2, not able to handle the conjunction of the 2 Gaussian stripes, as shown in Fig. 10(a)-(c)."}, {"title": "C.2 Generalization with Few Compositional Examples", "content": "In Sec. 3.2, we have seen that the models are sufficiently data efficient in learning the compositionality given a few 2D examples. Here we compare the performance of models trained on a pure 1D Gaussian stripe dataset versus a 1D Gaussian stripe dataset + a small amount 2D compositional examples along the image rim, where the conjunction of the stripes are only partially visible within the data images. Here we name the pure 1D Gaussian stripe dataset as 1D stripes without 2D rim and the alternative as 1D stripes with 2D rim. The data latent representations of both datasets are shown in Fig. 10(a), (d) and the overall, in-distribution, and out-of-distribution sampled image accuracy of models trained on these datasets are shown in (b) and (e). We note from the generation behavior that the model trained without the 2D rim has a hard time generating the portion of the images where the vertical and horizontal stripes overlap. However, given a small set of examples of partial overlaps, the model has completely gained the ability to properly compose the stripes. Specifically, the model trained with the 2D rim achieves the same level of accuracy, if not better accuracy, than the 2D + 1D model shown in Fig. 4 with ample of 2D compositional examples. This suggests that models can learn compositional structure efficiently from merely a few compositional examples. Moreover, we have shown in Sec. 3.2 Fig. 4 (g) that this type of sample efficiency is transferable to an alternative type of compositionality."}, {"title": "C.3 Model's Ability to Interpolate", "content": "As discussed in Sec. 3.2, the models have poor ability to interpolate as evident from the fact that models cannot generalize to unseen values of x and y in the OOD experiments where an entire range of x and y are removed from the training dataset (Fig. 4). This is because the model learned non-parallel representations of different values of x's and y's, hence treating x and y similar to categorical values where there are non-zero overlaps between neighboring categories. We have"}]}