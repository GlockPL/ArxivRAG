{"title": "SepsisCalc: Integrating Clinical Calculators into Early Sepsis Prediction via Dynamic Temporal Graph Construction", "authors": ["Changchang Yin", "Shihan Fu", "Bingsheng Yao", "Thai-Hoang Pham", "Weidan Cao", "Dakuo Wang", "Jeffrey Caterino", "Ping Zhang"], "abstract": "Sepsis is an organ dysfunction caused by a deregulated immune response to an infection. Early sepsis prediction and identification allow for timely intervention, leading to improved clinical outcomes. Clinical calculators (e.g., the six-organ dysfunction assessment of SOFA in Figure 1) play a vital role in sepsis identification within clinicians' workflow, providing evidence-based risk assessments essential for sepsis diagnosis. However, artificial intelligence (AI) sepsis prediction models typically generate a single sepsis risk score without incorporating clinical calculators for assessing organ dysfunctions, making the models less convincing and transparent to clinicians. To bridge the gap, we propose to mimic clinicians' workflow with a novel framework SepsisCalc to integrate clinical calculators into the predictive model, yielding a clinically transparent and precise model for utilization in clinical settings. Practically, clinical calculators usually combine information from multiple component variables in Electronic Health Records (EHR), and might not be applicable when the variables are (partially) missing. We mitigate this issue by representing EHRs as temporal graphs and integrating a learning module to dynamically add the accurately estimated calculator to the graphs. Experimental results on real-world datasets show that the proposed model outperforms state-of-the-art methods on sepsis prediction tasks. Moreover, we developed a system to identify organ dysfunctions and potential sepsis risks, providing a human-AI interaction tool for deployment, which can help clinicians understand the prediction outputs and prepare timely interventions for the corresponding dysfunctions, paving the way for actionable clinical decision-making support for early intervention.", "sections": [{"title": "1 INTRODUCTION", "content": "Sepsis, defined as life-threatening organ dysfunction in response to infection, contributes to up to half of all hospital deaths and is associated with more than $24 billion in annual costs in the United States [24]. Existing studies [25] have shown that sepsis patients may benefit from a 4% higher chance of survival if diagnosed 1 hour earlier, so developing early sepsis prediction systems can significantly improve clinical outcomes. Over the past few decades, the rapid growth in volume and diversity of electronic health records (EHR) has made it possible to adopt state-of-the-art artificial intelligence (AI) methods to early identify patients with sepsis risk. Deep learning (DL) methods have been widely used for early sepsis risk prediction tasks and have achieved superior performance. However, most existing DL or AI methods are data-driven and fail to incorporate the important and widely used clinical calculators. For example, Sequential Organ Failure Assessment (SOFA) [43] serves as an important screening tool for the identification of organ dysfunctions for sepsis in clinicians' workflow, as shown in Figure 1."}, {"title": "2 RELATED WORK", "content": "In this section, we briefly review the existing work related to sepsis prediction systems.\nSepsis Screening Tools. Sepsis is a heterogeneous clinical syn-drome that is the leading cause of mortality in hospital intensive care units (ICUs) [36, 47]. Early prediction and diagnosis may allow for timely treatment and lead to more targeted clinical interventions. Screening tools have been used clinically to recognize sepsis, including qSOFA [36], MEWS [38], NEWS [37], and SIRS [2]. However, those tools were designed to screen existing symptoms as opposed to explicitly early predicting sepsis before its onset.\nSequence-Based Models. With recent advances, deep learning methods have shown great potential for accurate sepsis prediction [15, 18, 35, 49]. Most of the studies represent patients' EHRs as the sequence of observations (see Figure 2(A)). Although the methods achieved superior performance, they face a critical challenge due to the data representation. The models need to completely observe a list of variables (including vital signs and lab tests), while many variables are missing in real-world data. Existing studies [15, 18, 49] usually impute the missing values before the"}, {"title": "3 METHOD", "content": "In this section, we introduce the proposed SepsisCalc that dynamically constructs temporal heterogeneous graphs with clinical calculators and adopts novel GNNs to predict sepsis risks."}, {"title": "3.1 Notation and Problem Statement", "content": "We aim to predict the risk of sepsis with the observed clinical variables. We consider the following setup. A patient has a sequence of clinical variables (e.g., lab test and vital sign data) with timestamps."}, {"title": "3.2 Static Temporal Graph Construction", "content": "We first construct a static temporal graph to represent the observed variables with timestamps in each patient's EHRs."}, {"title": "3.2.1 Nodes", "content": "The temporal graph contains four kinds of nodes. The first is collection nodes which represent a collection of data observed in the same timestamps. The second kind of node is the observed clinical variables with the attributes of the observed values. The third kind of node is the organ nodes that describe the organ function statuses. The fourth kind of node is the calculator node that will be added in subsection 3.4."}, {"title": "3.2.2 Edges", "content": "We define three kinds of edges between the nodes. The first is directed edges between successive nodes of the same kind of variable (e.g., black and yellow arrows in Figure 2(C)). The time gaps between two observations are treated as edge attributes. The second kind of edge is the undirected edge between the nodes with the same timestamps. The third kind of edge is the directed relation to describe the interactions between clinical events. Patients might have received treatments (e.g., vasopressor used to avoid low MAP) before the identification of sepsis. Such interaction is important for patients' EHR modeling and incorporated into the graph (e.g., purple arrows in Figure 2(C))."}, {"title": "3.3 Temporal Heterogeneous Message Passing", "content": "We use a graph encoder with temporal heterogeneous message passing to extract the features from the temporal graphs. Algorithm 1 describes the inference process of the module."}, {"title": "3.3.1 Clinical Embedding", "content": "We first map all the heterogeneous nodes and edges of the temporal graphs into a same embedding space.\nNode Embedding. An embedding layer is used to map each node v into a fixed-sized vector $e \\in R^d$. We also embed the observed"}, {"title": "3.3.2 Heterogeneous Message Passing", "content": "Given the temporal graph and embeddings, we leverage a temporal-aware message-passing mechanism for heterogeneous graphs to effectively gather temporal information, clinical event interaction, and historical observations. We represent the features of clinical nodes in the (l)-th layer of the network as $h_v^{(l)} \\in R^d$. They also serve as the input for the subsequent (l + 1)-th layer.\nThe entire message-passing process can be formalized into two stages: aggregation and updating. The first step is to aggregate the information of neighboring nodes. Specifically, we use an attention mechanism to weigh and integrate the features of neighboring nodes and concatenate the output from multi-head attention to obtain the final message. Taking as an example the process of propagating the features of neighbor nodes $v_e \\in \\mathcal{N}(v_t)$ to the collection node $v_t$, the i-th head attention is as follows:\n$q_i = L(h_v^{(l)}), W = L(h_r), k_u = L(h_t)$,\n$\\text{Att}^i(v_e, v_t) = \\frac{q_i W_r k_t}{\\sqrt{d}}$\nwhere $v_e$ represents the clinical node such as lab test, vital sign, and procedure contained in t-th collection as well as previous collection node $v_{t-1}$. r denotes the edge between nodes u and ve. The target node for message propagation is t-th collection node ut. After obtaining the attention scores for different neighboring nodes, we combine them with the mapped neighbor features to complete the entire aggregation process. We formalize it as follows:\n$h_t^\\prime = \\text{Softmax}_{v_u \\in \\mathcal{N}(v_t)}(\\text{Att}^i(v_e, v_t)) L(h_v^{(l)})$\nwhere $\\mathcal{N}(v_t)$ denotes neighbors of $v_t$, and $h_t^\\prime$ represents the message passed to the collection node by the i-th head attention. Following the acquisition of aggregated information, the next stage is to combine this aggregated information with the target node's ego information to update the representation of the target node:\n$h_v^{(l+1)} = \\gamma \\cdot L (\\text{ReLU} (h_t^\\prime)) + (1-\\gamma) \\cdot h_t^l$ \n$h_t^{(l+1)} = \\frac{h_v^{(l+1)}}{\\|| h_v^{(l+1)} \\|}$"}, {"title": "3.3.3 Organ-Specific Node and Collection Node Representation", "content": "After L layers of temporal heterogeneous message passing, we obtain the collection node features $h_t^L$ and six organ node features $h_{ut,o,i}^L$ $(1 \\leq i \\leq 6)$. We use linear functions to generate the node representation $h_{Ut,c}$, $h_i \\in R^d$ for further dynamic graph construction:\n$h_{Ut,c} = L(\\text{ReLU}(h_t^L)), h_i = L(\\text{ReLU}(h_{ut,o,i}^L))$"}, {"title": "3.4 Dynamic Temporal Graph Construction", "content": "As Figure 3(A) shows, we add the accurately estimated calculators to temporal graphs. We estimate organ-specific calculators (e.g., DIC [44]) and multi-organ calculators (e.g., SOFA [43]) with the same structure. In this subsection, we use multi-organ calculator generation with $h_{Ut,c}$ as an example."}, {"title": "3.4.1 Calculator Score Estimation", "content": "We estimate the values of calculators $e_t^c \\in R$ for all the c calculators:\n$e_t^c = L(h_{Ut,c})$\nWhen all the component variables are observed, we have the ground truth for the calculators and use Mean Square Error (MSE) loss to train the calculator estimation module:\n$\\mathcal{L}_c = \\frac{1}{T} \\sum_{t=1}^{T} \\frac{1}{\\sum_{i} M_{t,i}} \\sum_{i} (e_{t,i} - \\hat{e}_{t,i})^2 M_{t,i}$"}, {"title": "3.4.2 Dynamic Node Constrution", "content": "When missing rates are high, and the generated calculators' scores are inaccurate, consideration of such calculators could introduce additional bias and even mislead clinicians when providing clinical decision-making support. We use a confidence score $p_t \\in R$ to filter out the missing calculators with low confidence (i.e., p < 0.5).\n$p_t = \\text{Sigmoid}(L(h_{Ut,c}))$\nWe use the following objective to train the dynamic node construction module:\n$\\mathcal{L}_d = -\\frac{1}{T} \\frac{1}{C} \\sum_{t=1}^{T} \\sum_{i=1}^{C} \\left[ y_t^i \\log(\\hat{p}_t^i) + (1-y_t^i) \\log(1 - \\hat{p}_t^i) \\right]$\nwhere $y_t^i = I[ (e_{t,i} - \\hat{e}_{t,i})^2 < 0.01]$ and $I[\\cdot]$ is an indicator function that returns 1 if the statement is true; otherwise, 0."}, {"title": "3.4.3 New Edge Generation", "content": "To incorporate the clinical calculator mechanism, the model also automatically generates the edges between the generated nodes and their component variables."}, {"title": "3.5 Sepsis and Organ Dysfunction Prediction", "content": "After dynamically constructing the temporal graph, we re-extract the features of the new graphs with the same temporal heterogeneous message passing module as in subsection 3.3. We use $h_{Ut,c}$ and $h_i$ to denote the extracted features for the collection node and i-th organ node at time t from the dynamic temporal graph and continue to predict the clinical risk as shown in Figure 3(B)."}, {"title": "3.5.1 Risk Prediction", "content": "We use a linear layer followed with a Sigmoid layer to generate the sepsis risk $p_t \\in R$ and organ dysfunction risk $p_t^{o,i} \\in R$ (i = 1, 2, ..., 6):\n$p_t = \\text{Sigmoid}(L(h_{Ut,c}))$,\n$p_t^{o,i} = \\text{Sigmoid}(L(h_i))$"}, {"title": "3.5.2 Objective Prediction", "content": "We use binary-cross-entropy loss to train the framework:\n$\\mathcal{L}_o = -\\frac{1}{T} \\sum_{t=1}^{T}  y_t \\log(p_t) - (1 - y_t) \\log p_t$,\n$\\mathcal{L}_o = \\frac{1}{T} \\sum_{t=1}^{T} -\\frac{1}{6} \\sum_{i=1}^{6} y_i \\log(p_i) - (1 - y_i) \\log(1 - p_i)$\nThe whole framework is trained with a weighted loss:\n$\\mathcal{L} = \\mathcal{L}_c + \\alpha_o \\mathcal{L}_o + \\alpha_e \\mathcal{L}_e + \\alpha_d \\mathcal{L}_d$\nwhere $\\alpha_o, \\alpha_e, \\alpha_d > 0$ are hyper-parameters. Algorithm 2 describes the training process of the framework."}, {"title": "4 EXPERIMENT", "content": "To demonstrate the effectiveness of the proposed SepsisCalc, we conducted extensive experiments on multiple real-world datasets."}, {"title": "4.1 Datasets and Setup", "content": "Datasets. We validated our model on two publicly available datasets (MIMIC-III\u00b9 and AmsterdamUMCdb\u00b2) and one proprietary dataset extracted from OSUWMC\u00b3. We first extracted all the sepsis patients with suspected infection [36] in the datasets. Patients meeting sepsis-3 criteria [36] are defined as case patients, while the others with only suspected infection are treated as control patients. Following [21, 47], we extracted 30 vital signs and lab tests for sepsis patient status modeling. The statistics of the three datasets are displayed in Table 1. The used single-organ and multi-organ calculators are summarized in Table 5 and Table 7. The used variables and additional details can be found in subsubsection A.4.1.\nSetup. Figure 4 displays the setting of the experiments. After the patients arrive at the hospital, we start to predict whether the patients will suffer from sepsis with a sliding 4-hour prediction window. We run the prediction process hourly until the patients have been diagnosed with sepsis or discharged."}, {"title": "4.2 Comparison Methods", "content": "To validate the performance of the proposed SepsisCalc for sepsis prediction, we implemented various models, including clinical calculator-based methods (i.e., NEWS [37], MEWS [38], qSOFA [36], SIRS [2]), RNN-based methods (GRU [3], LSTM [14], DFSP [8]), attention-based methods (RETAIN [5], Dipole [28]), graph-based methods (GTN [6], RGNN [23]). The details of the comparison methods can be found in subsubsection A.4.3.\nWe also implemented various versions of the proposed model. SepsisCalc is the main version. SepsisCalci is the simplest version that uses the same graph construction method as [6, 23] (see Figure 2(B)), without any graph interaction and calculators. Sepsis-Calcimp uses an imputation method [27] to replace the dynamic graph construction module. SepsisCalc-d removes the dynamic graph construction module. SepsisCalc\u00af\u00ba removes the organ dysfunction prediction module."}, {"title": "4.3 Implement Details", "content": "We implement our proposed model with Python 3.8.10 and PyTorch 1.12.14. For training models, we use Adam optimizer with a mini-batch of 64 patients. The multi-modal data are projected into a 512-d space. We randomly divide the patients in each dataset into 10 sets. All the experiment results are averaged from 10-fold cross-validation, in which 7 sets are used for training, 1 set for validation, and 2 sets for testing. The validation sets are used to determine the best values of parameters in the training iterations."}, {"title": "5 RESULTS", "content": "We now report the performance of the proposed model in the three datasets. We focus on answering the following research questions using our experimental results:\n\u2022 Q1: Why must we incorporate the clinical calculator scores?\n\u2022 Q2: Are the estimated clinical calculator scores effective?\n\u2022 Q3: How do estimated calculator scores improve early sepsis prediction system?"}, {"title": "5.1 Q1: Why must we incorporate the clinical calculator scores?", "content": "5.1.1 Wide Adoption of Clinical Calculators. Clinical calculators have emerged as indispensable tools within healthcare settings, providing clinicians with evidence-based risk assessments essential for accurate diagnosis and prognostic evaluation [9, 11, 16]. In the context of sepsis, numerous calculators, such as SOFA [36, 43], qSOFA [7, 33], MEWS [38], NEWS [37], and SIRS [2], are extensively studied in existing sepsis-related literature [10, 13, 31, 34], and widely employed as early warning tools in real-world hospital EHR systems for both ICU and hospital wards [1, 36]. Integrating clinical calculators into early sepsis prediction models can align them more closely with clinicians' workflows and enhance comprehensibility."}, {"title": "5.1.2 Improvement from Calculators on Sepsis Prediction Performance", "content": "Compared to raw clinical variables, clinical calculators can summarize the patients' health states at a high level (e.g., in single or multiple organ dysfunction levels). We first design experiments to demonstrate the effectiveness of clinical calculators on early sepsis prediction with four settings:\n\u2022 Full Observation without Clinical Calculator (FO): All the component variables of calculators are available while the clinical calculators are not used."}, {"title": "5.1.3 Early Sepsis Alerts with Clinical Calculators", "content": "Due to the fast-development characteristics of sepsis, delayed identification and treatment will significantly reduce the patients' survival rates [25]. It is critical to early identify the patients with sepsis risks. We also reported the average sepsis alert time before sepsis and recall at the patient level (with each patient treated as a separate sample for evaluation), as shown in Figure 6. The sepsis prediction models that incorporate both raw observations and calculators can predict sepsis approximately 1 hour earlier and achieve higher recall compared to models using only raw observational data, further demonstrating the credibility and effectiveness of the calculators."}, {"title": "5.2 Q2: Are the estimated clinical calculator scores effective?", "content": "5.2.1 Misssing Rate of Clinical Calculators. Directly incorporating the clinical calculators might not be applicable for two reasons: (i) Lots of risk calculators (e.g., SOFA) aggregate the values of clinical variables in a specific time span and thus are not immediately"}, {"title": "5.2.2 Effectiveness of Clinical Calculator Estimation", "content": "To address the problem, we propose to estimate the calculators. In this subsection, we evaluated the performance of clinical calculator estimation.\nFull Observation Setting. When all the component variables are observed, the ground truths of the clinical calculators are available, we used nRMSE to evaluate the calculator estimation performance. \nMask Observation Setting. To further validate the calculator estimation performance when component variables are missing, we randomly masked 70% component variables to keep them consistent"}, {"title": "5.2.3 Effectiveness of Clinical Calculator Generation Confidence", "content": "When the missing rates are relatively high, the estimated clinical calculators might be inaccurate. We propose to use the calculator estimation confidence po in Equation 9 to filter the inaccurately estimated calculator nodes (i.e., p < 0.5).  Moreover, the error-prone imputation in high-missing-rate settings could further mislead clinicians when providing clinical decision-making support. Our dynamic graph construction module only generates the clinical calculators with high confidence, which achieves a good trade-off between introducing more domain-specific knowledge and reducing imputation bias."}, {"title": "5.3 Q3: How do estimated calculator scores improve early sepsis prediction system?", "content": "5.3.1 Early Sepsis Prediction.  By considering both observations and the estimated clinical calculators, the proposed SepsisCalc can model the organ dysfunctions better, which further improves the performance. The combination of human-designed clinical calculators and end-to-end deep learning methods can not only achieve better performance but also enhance credibility in real-world applications."}, {"title": "5.3.2 Ablation Study", "content": "To validate the performance improvement from dynamic calculator generation, we conducted an ablation study with various versions of the proposed model. The results demonstrate the effectiveness of the proposed static graph construction method (i.e., with medical event interaction and successive connection of the same variables). SepsisCalc outperforms SepsisCalc-d (without dynamic calculator estimation), demonstrating the effectiveness of clinical calculators in sepsis prediction tasks. SepsisCalc outperforms SepsisCalcimp that use imputation for further calculator"}, {"title": "6 DEPLOYMENT", "content": "Based on the sepsis prediction model, we implemented a system deployed in the Epic EHR Systems at OSUWMC. The system starts to collect patients' data after the patients arrive at hospitals and automatically predicts sepsis risks hourly.\nThe interactive process with our system is visualized in the provided UI  In this scenario, a clinician is examining high-risk patients. After reviewing the patient list , the clinician selects a patient, prompting the Patient Demographics  section update to display his profile, including age, gender, weight, admission department, and sepsis risk score.\nThe clinician then focuses on the SOFA Score  to assess the overall organ dysfunctions. Due to the missing variables,"}, {"title": "7 CONCLUSION", "content": "In this work, we aim to develop transparent and convincing models for the real-world sepsis prediction tasks. We propose a novel framework SepsisCalc, which represents patients' EHR data as dynamic temporal graphs and effectively extracts temporal information, clinical event interactions, and organ dysfunction information from the graphs with a temporal heterogeneous message passing module. We introduce a dynamic graph construction module to estimate and integrate clinically widely used calculators into sepsis prediction"}, {"title": "A APPENDIX", "content": "A.1 Important Notations\nWe summarize the important notations in Table 4."}, {"title": "A.1 Important Notations", "content": ""}, {"title": "A.2 Clinical Calculators", "content": "A.2.1 SOFA Score Calculation.  We display the detailed computation method in Table 6. Each organ's SOFA score ranges from 0 (normal) to 4 (most abnormal). The total SOFA score ranges from 0 (normal) to 24 (most abnormal).\nAlthough SOFA is a multi-organ dysfunction calculator, we can use the component scores to assess specific organ dysfunction when partial variables are missing.\nA.2.2 Multi-Organ Calculators.  Table 7 displays the component variables for various organ function assessments.\nA.2.3 Single-Organ Calculators. When the overall calculator is not applicable due to missing values, we can still use the observed variables to compute the organ-specific calculators (e.g., PaO2 and FiO2 for the respiration system in SOFA as shown in Table 6). In the six organs in Table 7, the variables for coagulation and liver systems (i.e., PLT, PT, and Bili) have relatively higher missing rates. We incorporate multiple organ-specific calculators (e.g., DIC [44] for coagulation, KCH [32], MELD[19], CPS [41] for liver) to assess the corresponding organ status. Note that the proposed SepsisCalc can handle various clinical calculators and can be further enhanced with the inclusion of more useful and related calculators."}, {"title": "A.3 Method Details", "content": "A.3.1 Model Backbone Selection.  Modeling EHRs presents several important challenges:\n\u2022 Temporal Sequencing of Clinical Events: The chronological order of clinical events is crucial for accurately describing a patient's condition.\n\u2022 Interaction of Clinical Events: Clinical events are often closely interconnected, such as the use of vasopressors to treat extremely low mean blood pressure (MBP).\n\u2022 High Missing Rate in Clinical Observations:  Sequence-based representation can handle the temporal information of EHRs well. Furthermore, the interaction between clinical events, which plays a significant role in modeling a patient's health state, is often overlooked by most sequence-based models. Failure to address these last two challenges may result in suboptimal performance of the prediction models."}, {"title": "A.3.2 Clinical Embedding", "content": "Value embedding. For variables, we adopt value embedding [47, 49] to map the values into vectors. Given a variable v and the observed values in the whole dataset, we sort the values and discretize the values into n(n = 1000) sub-ranges with equal number of observed values in each sub-range. The variable v is embedded into a vector $e^v \\in R^d$ with an embedding layer. For the the observed value for variable v within sub-range i(1 \u2264 i \u2264 n), we embed it into a vector $e^{v'} \\in R^{2d}$.\n$e_i^{v'} = \\text{sin}(\\frac{i*j}{n*d}), \\text{for}\\;0 \\leq j < d$\n$e_{d+j}^{v'} = \\text{cos}(\\frac{i*j}{n*d})$\nwhere 0 \u2264 j < d. By concatenating $e^v$ and $e^{v'}$, we obtain a vector containing both the variable's and its value's information. A linear layer is followed to map the concatenation vector into a new value embedding vector $h_v \\in R^d$.\n$h_v = L([e^v;e^{v'}])$,\nwhere L() denotes a linear mapping function."}, {"title": "Time Embedding", "content": "In order to incorporate the elapsed time between observed values, we leverage a time embedding [47, 49] for the time gap \u03b4:\n$e_j^\u03b4 = \\text{sin}(\\frac{\u03b4 * j}{T_m * d}), \\text{for}\\;0 \\leq j < d$\n$e_{d+j}^\u03b4 = \\text{cos}(\\frac{\u03b4 * j}{T_m * d})$\nwhere 0 \u2264 j < d, Tm denotes the maximum of time gap (0 < \u03b4 \u2264 Tm). We combine the edge embedding er with the time embedding $e^\u03b4$ to generate $h_r \\in R^d$.\n$h_r = L([e^r;e^\u03b4])$"}, {"title": "A.4 Experiment Details", "content": "A.4.1 Variables Used for Sepsis Prediction.   The first 8 variables are immediately available vital signs.\nA.4.2 Missing Rates of Variables. Table 8 displays the missing rates of the lab tests and calculators. Note that lab tests are usually observed once from several hours to days, so we display the 4-hour missing rates here. A missing value means the variable has not been observed for more than 4 hours.\nA.4.3 Methods for Comparison. \n\u2022 Clinical calculator-based methods: We use the widely used clinical calculators (i.e., NEWS [37], MEWS [38], qSOFA [36], SIRS [2]) to build the sepsis prediction models. A logistic regression is used to predict sepsis with the calculator scores, the component variables, and frequently observed vital signs.\n\u2022 GRU and LSTM: GRU [3] and LSTM [14] are classical RNN based models, which both introduce various gates to improve RNN's performance.\n\u2022 RETAIN: The REverse Time AttentIoN model (RETAIN) [5] is the first work that tries to interpretate model's disease risk prediction results with two attention modules.  The weights are helpful to analyze different events' contributions to the output risk.\n\u2022 Dipole [28]: Dipole employs bidirectional recurrent neural networks combined with three distinct attention mechanisms for patient visit information prediction.\n\u2022 DFSP [8]: Double Fusion Sepsis Predictor (DFSP) is an early sepsis prediction model that uses early and late fusion techniques to improve the accuracy and robustness of sepsis prediction.\n\u2022 RGNN [23]:  GTN [6]:"}, {"title": "A.4.4 Implement Details", "content": "We implement our proposed model with Python 3.8.10 and PyTorch 1.12.17. For training models, we use Adam optimizer with a mini-batch of 64 patients. The multi-modal data are projected into a 512-d space (d = 512). We train the proposed model on 1 GPU (TITAN RTX 6000), with a learning rate of 0.001. We randomly divide the patients in datasets into 10 sets. For non-graph-based models, we normalize the values of variable i as follows:\n$x_i^\\prime = \\frac{x_i - \\text{mean}(x^i)}{\\text{std}(x^i)}$"}]}