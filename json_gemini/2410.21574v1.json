{"title": "A Generative Model Based Honeypot for Industrial OPC UA Communication*", "authors": ["Olaf Sassnick", "Georg Sch\u00e4fer", "Thomas Rosenstatter", "Stefan Huber"], "abstract": "Industrial Operational Technology (OT) systems are increasingly targeted by cyber-attacks due to their integration with Information Technology (IT) systems in the Industry 4.0 era. Besides intrusion detection systems, honeypots can effectively detect these attacks. However, creating realistic honeypots for brownfield systems is particularly challenging. This paper introduces a generative model-based honeypot designed to mimic industrial OPC UA communication. Utilizing a Long Short-Term Memory (LSTM) network, the honeypot learns the characteristics of a highly dynamic mechatronic system from recorded state space trajectories. Our contributions are twofold: first, we present a proof-of-concept for a honeypot based on generative machine-learning models, and second, we publish a dataset for a cyclic industrial process. The results demonstrate that a generative model-based honeypot can feasibly replicate a cyclic industrial process via OPC UA communication. In the short-term, the generative model indicates a stable and plausible trajectory generation, while deviations occur over extended periods. The proposed honeypot implementation operates efficiently on constrained hardware, requiring low computational resources. Future work will focus on improving model accuracy, interaction capabilities, and extending the dataset for broader applications.", "sections": [{"title": "1 Introduction", "content": "Operational Technologies (OTs) in industrial production environments are increasingly targeted by cyber attacks [11]. In the past, OT systems remained"}, {"title": "2 Approach", "content": "In our approach, we assume a scenario as shown in Fig. 1. A threat actor is attacking a production environment remotely via the Internet. By exploiting a system vulnerability or through social engineering tactics, the threat actor gains control of the Supervisory Control and Data Acquisition (SCADA) system. Consequently, the intruder can interact with the CPS located on the shop floor, communicating via the firewall. The CPS itself implements an OPC UA server and a control loop, while it has sensors and actuators interacting with the environment on a physical level. The honeypot is able to replicate the OPC UA server of the CPS, including all relevant variables and their trajectories over time. For the deployment of the honeypot, we propose two variants:\nVariant 1: permanently. In the traditional way, matching its original definition, the honeypot can be deployed permanently. As such, it must lure the attacker into interaction and therefore is placed easily noticeable for the attacker. For example, it could communicate only with a reduced set of security measures. Any kind of interaction with the honeypot is suspicious and will trigger an alarm.\nVariant 2: on-demand. For the second variant, the honeypot is only created once an intruder has been detected. At first the intruder interacts with the actual CPS, however is being detected by the Intrusion Detection System"}, {"title": "3 Cyber-physical System", "content": "The CPS in this work is represented by a demonstrator with two fans mounted on a balancing beam, manufactured by Quanser. It has two Degree of Freedoms (DoFs), namely the pitch $\\Theta$ and the jaw $\\Psi$, as shown in Fig. 2. By controlling the airflow of two fans, configurable target angles for both yaw and pitch can be maintained.\nThis demonstrator was selected for multiple reasons: First, it provides system characteristics with a high dynamic range and small physical time constants, as typically found in industrial discrete automation for piecewise goods production [2]. Secondly, when compared to a typical industrial robotic arm with 6 to 7 DoFs, the two DoFs make it a good starting candidate to explore generative model-based approaches for honeypots."}, {"title": "System Description.", "content": "The demonstrator is equipped with two actuators, specifically two DC-motors, each with a fan directly coupled to its output shaft. The speed of each motor can be adjusted by varying the supply voltage between -24 to 24 volts. An optical incremental encoder mounted on the opposite side of each DC-motor provides speed feedback. Additional sensory input is provided by two incremental encoders, one on the pitch axis and the other on the jaw axis. A control loop maintains a configurable target yaw and pitch by adjusting the airflow generated by the fans, implemented using a state-space-based Linear-Quadratic Regulator (LQR)."}, {"title": "OPC UA Information Model.", "content": "The OPC UA information model provides an abstract definition framework for organizing and structuring data of a system. A root node serves as the entry point to the model, with the objects node containing instances of various types. In the context of the used CPS, the \"Fan\"-type and \"Target\"-type are defined within this model, as shown in Fig. 3. While the \"Fan\"-type is solely set readable, the \"Target\"-type supports read-write access."}, {"title": "4 Dataset", "content": "Using the CPS introduced in Section 3 a dataset is created. By commanding target yaw $\\Psi_T$ and pitch $\\Theta_T$ angles over time, different device poses are repeatedly realized. The resulting cyclic process resembles a pick-and-place operation. The cyclic process itself consists of four different sequences, as visualized in Fig. 4, which are repeatedly being carried out. The duration of each sequence is as well given in Fig. 4."}, {"title": "5 Generative Model", "content": "In the machine-learning domain, the relevant subdomain is time-series forecasting or prediction. For this particular application, multiple variables over a longer time period are to be predicted, a task known as multivariate multi-step forecasting.\nDifferent forecasting strategies can be used for multi-step forecasts, most commonly used is a recursive strategy with single-step forecasts or multi-step forecasts [1]. As in our experiments, single-step forecasts resulted in a poor performance with multiple recursions, it was opted to use multi-step forecasts. In the end a look-back of 4 seconds and look-ahead of 0.4 seconds is used, as such the generative model uses the last 4 seconds (2000 samples) to generate the next 0.4 seconds (200 samples). To reduce the complexity for this proof-of-concept, current and speed of the DC-motors are not replicated, resulting in 8 variables, of which trajectories are to be generated. For data normalization a min-max scaler was used for all 8 variables.\nFor this proof-of-concept, the focus is put on LSTM, as they are reported to be overall well suited for prediction tasks [4]. The specific subtype employed is known as Encoder-Decoder LSTMs. In initial experiments a single ED-LSTM with the final decoder-stage outputting all 8 variables was used. This however turned out to be challenging to train. Instead, the final approach involves using multiple smaller single-output models, which are trained individually. This method required less tuning and provides more stable results. Overall, the training is performed using the Adam optimizer with a default learning rate of 1e-3 and a default Mean Squared Error (MSE) loss function. As shown in Fig. 6, the individually trained models are joined, outputting the multi-step forecasts for the 8 variables. As such, one resulting large model can be deployed to the GPU."}, {"title": "5.1 Implementation", "content": "With the generative model defined in Section 5, the next step is to implement it as part of an OPC UA server. The implementation is Python-based and follows the Producer/Consumer Pattern, resulting in two CPU threads working in parallel.\nFig. 8 provides an overview of the implementation. In the initialization phase, the initial look-back and state for the variables is received, either directly from the real CPS or via an aggregation service as described in [10]. Afterwards, the producer thread oversees the execution of the generative model, which itself is deployed to a GPU. Once a single forecast is finished, a batch of new values is appended to a thread-safe queue at a 2.5 Hz rate. Meanwhile, the consumer thread operates the OPC UA server, publishing updates of the variables at a 500 Hz rate. By doing so, it removes the values from the thread-safe queue one by one."}, {"title": "6 Results", "content": "This section summarizes the findings from our experiments regarding the evaluation of the proposed generative model (see Section 5) with the newly created dataset (see Section 4). Besides the model performance metrics, the required hardware resources are noted as well."}, {"title": "6.1 Performance Evaluation", "content": "The performance of the generative model is evaluated by comparing the generated trajectories to existing trajectories from the dataset. Fig. 9 shows a forecast of 6.4 seconds, with the time axis starting at 22 seconds. Up to the time of 26 seconds, the trajectories are used as input (look-back) for the generative model. Based on this input, the next 0.4 seconds are produced (look-ahead). Each look-ahead segment is indicated by a vertical dashed line in the figure. Since the generative model is operating isolated from the real CPS, every look-ahead segment becomes part of the next look-back for the generative model. Therefore, in Fig. 9, at a time of 30 seconds, the input for the generative model solely consists of previously generated segments. Ideally, this process can continue indefinitely, with the model generating trajectories based on a single initial input.\nFollowing the target pitch trajectory $\\Theta_T$ in Fig. 9 more closely, discontinuities are evident in the estimated trajectory at the beginning of each look-ahead segment. Regarding ripple, while observed in the trajectories for the voltages $U_0$ and $U_1$, the replicated trajectories notably lack these features. In similar fashion, this holds true for the trajectories of the angular velocities $\\dot{\\Psi}$ and $\\dot{\\Theta}$. However it must be noted, that compared to $\\dot{\\Theta}$, only a lower ripple is present for $\\dot{\\Psi}$ on the yaw axis. There are multiple reasons for this. The lower joint, which allows for rotation around the yaw-axis, has a higher mechanical moment of inertia, therefore better mechanically dampening higher-frequency components. Additionally, the bearing of the lower joint is of a larger diameter, and it includes a slip-ring for electrical connections, together resulting in higher friction. Combined, these mechanical constraints explain well the observed lower ripple for $\\dot{\\Psi}$. Referring back to Fig. 7, the amount of ripple in the trajectories also correlates with the MSE in the training results."}, {"title": "6.2 Required Hardware Resources", "content": "The proposed implementation from Section 5.1 is deployed on a relatively constrained system. The system consists of an Intel Core i5 6400 series CPU, which was released in 2015, and a low profile NVIDIA A2000 GPU with a power consumption of up to 75 W. Performance measurements shown in Fig. 13 indicate that the minimum computation time for the producer thread is 0.244 seconds, while the average computation time is about 0.250 seconds. The maximum computation time recorded is 0.261 seconds. Therefore, the system's performance allows to maintain an update rate of 2.5 Hz for the producer thread, enabling the consumer thread to publish updates at a rate of 500 Hz."}, {"title": "7 Conclusion", "content": "This study demonstrates the successful deployment of an OPC UA and generative model-based honeypot, giving a first glimpse of its potential for cyber security applications. The proposed implementation has managed a high sampling rate output, as typically required for discrete automation. The internal generative model is based on a LSTM network, which exhibits interesting long-term forecasting characteristics. While deviating from the actual trajectories over time, it maintains the trained variable ranges and continues to produce plausible patterns, which were observed during training. Besides the successful deployment of the generative model-based honeypot, a dataset is presented, enabling further research in which the current results can serve as an initial baseline.\nAs for future work, several aspects need further attention. The performance and scalability of different generative models need to be compared to improve the generative model, explore different structures, and utilize physics-based optimizers and loss functions. Modeling artificial ripple and noise is required. While it is not desirable for forecasts as it indicates over-fitting, it is necessary for a plausible trajectory replication. Then again, a highly accurate replication might not be desirable, a controllable degree of realism is required, to find a balance to generate plausible trajectories without revealing sensitive information. Also, focus can be put on the system understanding that the generative model acquires. Ideally, the generative model will gain a deeper system understanding, generalizing the training data, providing adequate responses for untrained scenarios. Finally, the current implementation only allows the intruder to observe. As such, providing a higher level of interaction for the intruder is a necessary enhancement."}]}