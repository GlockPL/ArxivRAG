{"title": "The Cost Perspective of Liquid Democracy: Feasibility and Control", "authors": ["Shiri Alouf-Heffetz", "\u0141ukasz Janeczko", "Grzegorz Lisowski", "Georgios Papasotiropoulos"], "abstract": "We examine an approval-based model of Liquid Democracy with a budget constraint on voting and delegating costs, aiming to centrally select casting voters ensuring complete representation of the electorate. From a computational complexity perspective, we focus on minimizing overall costs, maintaining short delegation paths, and preventing excessive concentration of voting power. Furthermore, we explore computational aspects of strategic control, specifically, whether external agents can change election components to influence the voting power of certain voters.", "sections": [{"title": "1 Introduction", "content": "In a perfect democracy, every citizen would ideally have the time, knowledge, and means to actively participate in every political decision impacting the society. This ideal is hindered by various costs, such as the effort required to understand complex issues or the financial burden of frequent decision-making processes. Liquid Democracy addresses these challenges by allowing well-informed individuals to vote directly, while others (transitively) delegate their voting rights to trusted representatives. By requiring only a subset of the electorate to form opinions and vote, it reduces overall cognitive and operational costs. Originating in the 20th century [Tullock, 1967, Miller III, 1969, Green-Armytage, 2015, Blum and Zuber, 2016], Liquid Democracy has seen widespread implementation in recent years [Paulin, 2020] and has since become a prominent research area within Computational Social Choice [Grossi et al., 2024]. Despite its focus on reducing election-related costs, their explicit consideration remains unexplored. We address this by analyzing a natural Liquid Democracy framework operating within a budget constraint.\nIn a Liquid Democracy system costs can arise from various factors, such as the time or effort needed to understand the election topic or to identify participants aligned with their views for vote delegation. These costs broadly reflect preferences between delegation and direct voting. Alternatively, they could correspond to monetary incentives to encourage participation in decisions on complex issues, e.g., when voters prefer not to engage but recognize that some must for the collective good. Costs may also stem from the voters' expertise based on voting history or their profile and interests. Depending on the context, they can be specified by voters or inferred by the system.\nSelecting trusted representatives under budget constraints extends beyond Liquid Democracy. The following examples demonstrate how our model and questions apply to other domains where being or trusting a representative incurs costs, aiming to minimize these expenses while meeting explicit trust requirements. In a sensor network, a subset of sensors may be designated as cluster heads to aggregate and transmit data to a central hub [Mishra et al., 2019]. These could be chosen to optimize communication and data-driven decision-making, while minimizing costs related to head designation, such as energy consumption and security concerns. In autonomous vehicle fleets, leadership roles in decision-making, like route planning and"}, {"title": "Our Contribution", "content": "In our work we explore decision-making scenarios modeled by a graph where vertices represent entities (or voters, in the terminology of Liquid Democracy) and edges denote trust relationships (potential delegations). Each voter is associated with a voting cost and a delegating cost. Importantly, our results also apply when delegating costs are zero a scenario relevant to several of the examples presented earlier. We work towards selecting voters to cast ballots under a constraint on the costs. Crucially, voters may be asked to vote despite their reluctance not only if they have lower voting costs than others but also if they are widely trusted as representatives. In line with theoretical works and common practices in Liquid Democracy, we assume transitivity of trust: If a voter votes on behalf of another, the latter is considered as satisfied as long as there is a directed path of approved representatives connecting them. To incorporate this we require that all voters are represented, either directly or through paths of trust relationships. In the first part of our work, we design and analyze from the perspective of computational complexity mechanisms that:\nMinimize the total voting and delegating cost, while ensuring that every voter is either selected to vote or has a chain of trust leading to someone who is selected.\nOn top of this feasibility constraint, still under the objective of cost minimization, and towards suggesting intuitively better solutions, we additionally aim (1) to ensure each delegating voter has a reasonably short delegation path to a representative, mitigating diminishing trust with path length, and (2) to prevent excessive concentration of voting power, maintaining democratic legitimacy. Both desiderata have been identified as crucial and analyzed in prior works on Liquid Democracy, though in different contexts [Brill et al., 2022, G\u00f6lz et al., 2021, Kling et al., 2015].\nIn the second part of our work we define and algorithmically study a family of control problems related to the aforementioned constraint on voters' voting power. Control of elections is a prevalent area of Computational Social Choice [Faliszewski and Rothe, 2016], recently garnered attention in Liquid Democracy settings [Bentert et al., 2022, Alouf-Heffetz et al., 2024]. Unlike the literature focusing on controlling outcomes, since voters' preferences over them are not explicitly present in our framework, we consider scenarios where:\nAn external agent favoring a certain voter, aims to manipulate the instance to enhance their power.\nThis marks a conceptual contribution, which could pave the way for further strategic studies in Liquid Democracy and beyond, shifting attention from just election outcomes."}, {"title": "2 Model and Definitions", "content": "The core component of the setting that we study is a directed graph G(N, E), which we call a delegation graph, where the set N of vertices represent voters and the set E of edges show to whom a voter might delegate. Specifically, an edge from a voter $i \\in N$ to a voter $j \\in N$ signifies that i approves j as their (immediate) representative. We will refer to the tuple (G(N, E), v, d) as an instance of a Liquid Democracy scenario under costs, or a cLD election in short. An important parameter of a cLD election is the maximum out-degree of vertices of the corresponding delegation graph, which we denote by \u2206. We will call predecessors of a vertex $i \\in N$ all the vertices that have a directed path to i. Moreover, each voter $i \\in N$ is associated with two costs: d(i) for delegation and v(i) for voting. We note that both values may be zero and that there is no inherent ordering between them.\nA delegation function is a mechanism that takes a cLD election (G(N, E), v, d) as input, and returns a set $C \\subseteq N$ representing voters who will cast a ballot, together with a set $D \\subseteq E$ of exactly one outgoing edge for each vertex not in C denoting the selected delegations. We call the pair (C, D) a solution under a delegation function on (G(N, E), v, d). Under a delegation function, we refer to the selected subset of voters C as the set of casting voters and as delegating voters to the voters from N \\ C. The first computational problem that we consider follows.\nDELEGATE REACHABILITY\nInput\nA CLD election (G(N, E), v, d) and a budget parameter $\u03b2 \u2208 N*$.\nQuestion\nDoes there exist of a delegation function of solution (C, D) satisfying:\n(i) the cost constraint: $\\sum_{i \\in C}v(i) + \\sum_{i \\notin C}d(i) \\leq \\beta$,\n(ii) the reachability constraint: for every vertex $i \\notin C$ there is a directed path to a vertex in C using only edges in D.\nWhen $\u03b2$ is not part of the input of the considered problem, a solution, and in turn a delegation function, is said to be cost-minimizing if it satisfies the cost constraint for the minimal value of $\u03b2$ for which reachability is also met.\nIn principle, a delegation function can be viewed as a way to partition N into casting and delegating voters, though it does not yet ensure that delegation cycles are avoided. However, a solution satisfying the reachability constraint not only involves the specification of casting voters but also designates a specific casting voter, or a representative, for each delegating one, by following the paths to casting voters indicated by D. Under a delegation function of the solution (C, D), we denote by Rj the set of delegating voters who have a path to a casting voter j through edges in D, i.e., those who will ultimately be represented by j. Consequently, j will vote with a voting weight, or voting power, of $|R_j|$ + 1, representing the voters in Rj along with themselves."}, {"title": "3 Feasible Delegation Functions", "content": "We begin our analysis on the computational complexity of finding feasible delegation functions by showing that DELEGATE REACHABILITY is tractable.\nTheorem 3.1. DELEGATE REACHABILITY is solvable in polynomial time.\nProof Sketch. We present a greedy method for computing a cost-minimizing solution. We start by constructing the decomposition D(G) of the delegation graph G into strongly connected components. Recall that a subgraph of a directed graph is called a strongly connected component (SCC) if, for every pair of vertices u and v within it, u is reachable from v and vice versa. The decomposition of a graph G into SCCs is a directed acyclic graph having one vertex for every maximal strongly connected component of G and a directed edge from the vertex for component S to the vertex for component S' if G contains an edge from any vertex in S to any vertex in S' (refer to the textbook by Dasgupta et al. (2006) for a more extensive discussion on SCC decompositions). We notice that in each feasible solution of DELEGATE REACHABILITY, it is necessary to select at least one voter as a casting voter from each set of voters that belong to the component corresponding to a sink of D(G); note that D(G) has a sink as it is acyclic. First, identify all voters whose voting cost is strictly less than their delegation cost. These voters are designated as casting voters. Then, for each sink of D(G) that has not yet been assigned at least one casting voter, it is sufficient to nominate the voter who minimizes the sum of their voting cost plus the delegation costs of the other voters in the sink.\n\u03a0\nIn many cases, it may be impossible to find a feasible delegation function that satisfies both the cost and the reachability constraints. Instead of deeming such scenarios indomitable immediately, we suggest first exploring a natural way or circumventing this issue, already addressed in other Liquid Democracy frameworks as well [Colley et al., 2023, Campbell et al., 2022, Markakis and Papasotiropoulos, 2021]. One way to expand the solution space is to allow for a given number, a, of abstainers, requiring feasibility only after excluding them. To expand further, as discussed in Section 1, ideally, in the examined model voters uncomfortable with casting a ballot should be assigned to a casting voter through a path of trust"}, {"title": "Theorem 3.2. Allowing for a abstainers, DELEGATE REACHABILITY is NP-complete.", "content": "Incorporating the possibility of abstainers into the model also aligns well with the line of work on control problems discussed in Section 1 and which we analyze in Section 4. Imagine a controller (not necessarily a malicious one this time) aiming to alter the election components to turn a negative instance of DELEGATE REACHABILITY into a positive one, thereby ensuring that the election is not deemed useless. By selecting a set of abstainers to make certain that DELEGATE REACHABILITY admits a valid solution, the controller (or election organizer) can essentially determine which voters to exclude to make the instance feasible. For completeness, we note that with a slight modification to the proof of Theorem 4.3 we can also prove hardness for the problem of adding voters to ensure feasibility.\nWe conclude the section by highlighting that Theorem 3.2 holds for a value of a that depends on the parameters of the input instance. However, if a is fixed, then a generalization of the result of Theorem 3.1 is possible. Specifically, one can easily apply, in polynomial time, the algorithm presented after the deletion of any possible set of at most a voters.\nProposition 3.3. Allowing for $\u03b1 \u2208 O(1)$ abstainers, DELEGATE REACHABILITY is polynomially solvable."}, {"title": "Refined Feasible Delegation Functions", "content": "In essence, Theorem 3.1 asserts that the existence of a sufficiently good delegation function which meets basic cost and representation requirements can be efficiently decided. In what follows, we will focus on identifying necessary and sufficient conditions for achieving intuitively significantly better solutions, referring mainly to sets of casting voters that satisfy additional requirements.\nWe will focus on instances that admit a feasible solution under DELEGATE REACHABILITY. Specifically, when sets of casting voters that meet both cost and reachability constraints exist, one delegation function may be seen as superior to another based on various metrics, with two natural requirements being (1) aiming for solutions that create short paths from delegating voters to casting voters, and (2) aiming for solutions that propose casting voters which will not acquire excessively large voting power.\nObjective (1) follows the principle that the longer the proposed delegation path from a delegating voter v to a casting voter, the less v trusts their final representative. It is natural to expect (and always assumed in Liquid Democracy) that a voter trusts their immediate successor, and also the successor's successor. However, this plausibly comes with a reduction in trust [Boldi et al., 2009, Armstrong et al., 2024, Brill et al., 2022]. Hence, the shorter the delegation paths, the better.\nObjective (2) has been extensively discussed and analyzed in Liquid Democracy frameworks. We refer to G\u00f6lz et al. [2021] and Kahng et al. [2021] for comprehensive analyses on the inherent danger that voters with high power can bring upon elections, and the threat this poses to the democratic nature of the system.\nExample 3.4. Take the instance from Figure 1. Notice that if the budget allows, selecting {a, d} as casting voters could be better than choosing {a}, as it splits the voting power between two casting voters. However, if the goal is to ensure that delegating voters have short distances to their representatives, setting the set of casting voters to {b} is better than {a}, as then all voters would have a path of length at most 2 to their representative, budget permitting.\nWe now define the computational problems aimed at refining the solutions of DELEGATE REACHABILITY.\nBOUNDED MAX LENGTH / BOUNDED POWER\nInput\nA CLD election (G(N, E), v, d), a budget $\u03b2\u2208 N*$ and a parameter $l \u2208 N*$.\nQuestion\nDoes there exist a delegation function of solution (C, D) which satisfies the cost and reachability constraints while ensuring that:\nEach path from a delegating voter to its nearest voter in C via edges from D is of length at most l, for BOUNDED MAX LENGTH problem,\nThe maximal voting power does not exceed l, for BOUNDED POWER problem."}, {"title": "Theorem 3.5. For \u2206 \u2264 1, BOUNDED MAX LENGTH is solvable in polynomial time.", "content": "Henceforth, we will pay particular attention to delegation graphs with \u2206 = 1. Conceptually, this scenario represents the first step away from direct democracy, with \u2206 = 0 where all voters cast their own ballots without representation. In contrast, \u2206 = 1 resembles forms of classic representative democracy, which is of course lacking the transitivity in ballots, while a priori partitioning voters into those who will represent and be represented. Technically, as we will demonstrate, the examined problems are computationally hard for instances with A = 2. Therefore, exploring the restricted yet well-motivated case of A = 1 is a natural first step toward characterizing polynomially solvable instances.\nA directed tree, i.e., a directed graph the underlying undirected graph of which has a tree structure, is upwards-directed if there is a vertex that can be specified as its root or sink, and all other vertices have a directed path leading to it. It is easy to see that a delegation graph with \u2206 = 1 consists of a disjoint union of (weakly) connected components, each containing at most one directed cycle. If a cycle exists, its vertices have no outgoing edges towards vertices outside the cycle. Thus, each component can be viewed as a graph with at most one cycle, whose removal would decompose the graph into a forest of upwards-directed trees. With this observation, we obtain the following result through a dynamic programming procedure.\nIn contrast to DELEGATE REACHABILITY, moving to instances where A is larger than 1, even for cases where the maximal out-degree of voters is 2, BOUNDED MAX LENGTH becomes computationally hard.\nTheorem 3.6. For \u2206 > 1, BOUNDED MAX LENGTH is NP-complete for every fixed $l > 2$.\nProof Sketch. We show that the problem we consider is NP-hard by reducing from 3-SAT. We first show the claim for l = 2. Take a 3-CNF formula 6 with the set of variables $X = \\{x_0,...,x_m\\}$ and the set of clauses $C = \\{C_0,...,C_{|C|}\\}$. We will also represent each clause $C_j$ as $\\{L^1_j, L^2_j, L^3_j\\}$, where each $L^i_j$ corresponds to a different literal in $C_j$, for $i \\in \\{1,2,3\\}$. Let us construct what we call an encoding of 4. Now, for each clause $C_j \\in C$ we add three voters, i.e., a clause voter $v_{C_j}$, as well as two clause dummy voters $d_{C_j}, d'_{C_j}$, corresponding to $C_j$. Additionally, for each variable $x_i \\in X$, we add two literal voters corresponding to $x_i$ and $\u00acx_i$, namely voters $v_{x_i}$ and $v_{\u00acx_i}$. Moreover, for every clause $C_j$, we construct edges, i.e., possible delegations, from the clause voter $v_{C_j}$ to clause-dummy voters $d_{C_j}, d'_{C_j}$. Also there are edges, i.e., possible delegations, from $d_{C_j}$ to the literal voter corresponding to $L^1_j$ and from $d'_{e_j}$ to the literal voters that correspond to $L^2_j$ and to $L^3_j$. Finally, for every $x_i \\in X$, we add the following pair of edges: from $v_{x_i}$ to $v_{\u00acx_i}$ and from $v_{\u00acx_i}$ to $v_{x_i}$. To complete the construction of the encoding of 4, we set voting costs to 1 and delegating costs to 0 and let $\u03b2 = |X|$ and l = 2. Note that it holds \u2206 = 2 and that the encoding of 4 consists of 2|X| +3|C| voters and the shortest path from each clause voter to a literal voter is of length exactly 2.\nAssume is satisfiable. Then, for each pair of literal voters $v_{x_i}$ and $v_{\u00acx_i}$, we take $v_{x_i}$ as a casting voter if $x_i$ is true in the considering satisfying assignment of 4, and $v_{\u00acx_i}$ otherwise. This selection is budget feasible and ensures that each clause voter is at a distance of exactly two from a casting voter. Dummy and literal voters are also at a distance of at most two each. Conversely, consider the case that is unsatisfiable. It holds that any feasible solution for the encoding of requires choosing exactly one from each pair of literal voters, due to the budget constraint, and also that only literal voters can be casting voters. This leads to some clause voters being three steps away from a casting voter, violating the path length constraint.\nWe note that the construction can be modified to work for any larger value of l, by increasing the distance between clause and literal voters, from 2 to l."}, {"title": "Theorem 3.7. For \u2206 < 1, BOUNDED POWER is solvable in polynomial time.", "content": "We next examine the problem of selecting representatives with the constraint being an upper bound on the maximal voting power of casting voters. While the obtained results are analogous to those for BOUNDED MAX LENGTH (being polynomially solvable for \u25b2 < 1 and NP-complete otherwise), the specifics of the proofs significantly differ.\nProof Sketch. Note that in the case of \u2206 = 0 the problem is trivial. We show that the claim holds by providing a dynamic programming algorithm. For this we define dp[v, i, k] as the minimum cost of a (partial) solution that gives a voting power upper bounded by k to v and upper bounded by l to all other casting voters of the considered subgraph, among the following vertices in G: v, its first i incoming neighbors and all of their predecessors. This is justified by the fact that vertices that will be considered next can increase the voting power of v but not the voting power of voters that have been already clasified as casting. We will"}, {"title": "4 Strategic Control", "content": "We now begin our exploration of algorithmic questions concerning strategic control by an external (malicious) agent, referred to as the controller. In classic literature of election control (refer for instance to the work of Faliszewski and Rothe (2016)), the controller is typically considered able to manipulate components of the election such as the set of voters or candidates to achieve a desired outcome, under a prespecified voting rule. However, in our model presented in Section 2, which aligns with most studies in Liquid Democracy, we have abstracted away from the actual voting procedure and our focus has been on determining which voters will cast a ballot and consequently on the extent of their voting power; without considering the specifics of their votes. Therefore, unlike traditional election control studies and questions where the\ncontroller attempts to influence the final outcome, in our work the controller cannot take advantage of voters' preferences or final ballots, as these details are beyond our scope. Instead, the controller is allowed to influence only the delegation process and the specification of casting voters and their power.\nWe introduce a new class of control problems that integrates seamlessly with our model: The controller aims to manipulate the delegation process toward affecting the voting power of a designated voter. We capture this through the concept of a super-voter, defined as the casting voter with the highest voting power, after applying a specified delegation function.2 We assume that the controller does not ex-ante know the precise delegation function that will be used, but only that it will be cost-minimizing while satisfying the reachability constraint, remaining consistent with our work's focus. Consequently, we say that the controller's goal is to ensure that their preferred voter becomes the (sole) super-voter, under every possible delegation function that meets these conditions.\nCONTROL BY ADDING/DELETING VOTERS (CAV/CDV)\nInput\nA CLD election (G(N, E), v, d), a budget $\u03b2 \u2208 N*$, a parameter $k \u2208 N*$ and a partition of N into registered (Nr) and unregistered (Nu) voters, and a designated voter $x \u2208 Nr$, for CAV.\na designated voter $x \u2208 N$, for CDV.\nQuestion\nDoes there exist a way to add up to k voters from Nu, in CAV, or to delete up to k voters, in CDV, so that x is the (sole) super-voter in the resulting election, under every cost-minimizing delegation function which satisfies the reachability constraint?"}, {"title": "Theorem 4.2. CONTROL BY ADDING VOTERS is NP-hard.", "content": "We now move to the case where the controller is able to remove some voters from participating in the election. As in the case of adding voters, the relevant computational problem is NP-hard, although it requires different reduction.\nTheorem 4.3. CONTROL BY DELETING VOTERS is NP-hard.\nProof Sketch. We show the hardness of CONTROL BY DELETION by reducing from CLIQUE. Given an instance of CLIQUE (G, k) we create an instance I' of the considered election control problem that contains the set of voters E containing one voter of delegating cost equal to 0 and voting cost equal to 1, for each edge in G. Also, we have a set of voters V containing one voter of delegating cost equal to 0 and voting cost equal to 1, for each vertex in G. Then, we take the set D of $(n \u2212 k) + (m \u2013 {k \\choose 2}) + 1$ voters, each of delegating cost equal to 0 and voting cost equal to 1 and special voters x, being the designated by the controller voter and $Y_1, Y_2, ..., Y_k, Y_{k+1}$, with voting cost equal to 0 and delegating cost equal to 1. Then, for each edge e that is incident to vertices u and v in G, we add two possible delegations: one from the voter of E that corresponds to e towards the voter of V that corresponds to v and one from the voter of E that corresponds to e towards the voter of V that corresponds to u. Then, there is an edge from each voter in V to every voter in $Y = \\{Y_1, Y_2, ..., Y_{k+1}\\}$ and an edge from each voter in D to voter x. Finally say that the upper bound on the number of voters that can be deleted equals k.\nIf there exists a k-clique C in G, then deleting voters corresponding to vertices in C ensures that the voters corresponding to the edges in C do not delegate their votes to any voter from Y in any cost-minimizing delegation function. Hence, x becomes a super-voter. Conversely, if a k-clique does not exist in G, then after deleting any k voters, sufficiently many voters corresponding to edges of G will delegate to a voter from Y under some delegation function. Hence, x cannot be guaranteed to be the only super-voter."}, {"title": "Theorem 4.5. CONTROL BY ADDING VOTERS is solvable in polynomial time if \u2206 < 1.", "content": "Other strategic control problems can be defined in a similar vein. For instance, one might focus on adding or removing edges (i.e., possible delegations), instead of voters, to ensure that the preferred voter becomes the sole super-voter. The proofs from Theorems 4.2 and 4.3 extend to these problems with only minor adjustments. Furthermore, aligning with prior research on strategic control of classic elections [Hemaspandra et al., 2007, Faliszewski et al., 2011], one might also explore the destructive counterparts of CAV and CDV. Specifically, this involves performing alterations to the voters' set towards preventing a specific voter from being the unique super-voter under every cost-minimizing delegation function that satisfies the reachability constraint. For these problems the proofs of Theorems 4.2 and 4.3 apply directly.\nProposition 4.4. The variants of CONTROL BY ADDING/DELETING VOTERS where the controller can add or delete edges of the delegation graph are NP-hard. Moreover, the destructive variants of CONTROL BY ADDING/DELETING VOTERS are NP-hard as well.\nFollowing our approach in Section 3, we now turn to the examination of cLD elections where the maximal out-degree of vertices in the input delegation graph is upper bounded by 1. As one would expect, polynomial solvability now holds, but interestingly, the procedures we propose for solving the control problems differ completely from those used for proving Theorems 3.5 and 3.7.\nProof Sketch. For \u2206 = 0 it suffices to see that no voter may delegate, so x can be the unique super-voter only if |N| = 1. For \u2206 = 1, we must first verify that x is a casting voter in every cost-minimizing delegation function; if not, additional voters cannot alter this, meaning the instance has no feasible solution. This verification can be done in polynomial time. We first convert x into the root of a tree by removing its outgoing edges, if any and only if the voting cost of x is higher than its delegating cost. Otherwise, there could be a delegation function where x delegates. We then aim to increase the voting power of x by adding unregistered voters who will delegate to x in any cost-minimizing delegation function. These are identified based on their costs as well as the existence of paths to x or to registered voters who will definitely delegate to x. We use a greedy algorithm to add these voters in layers: starting with those directly connected to x or to voters that x will represent, and iteratively including more until k is reached."}, {"title": "Theorem 4.6. CONTROL BY DELETING VOTERS is solvable in polynomial time if \u25b3 < 1.", "content": "A greedy strategy can also identify which voters can be deleted to ensure a preferred voter becomes the only super-voter under any cost-minimizing delegation function.\nContinuing from Proposition 4.4 our discussion on strategic control problems involving the alteration of possible delegations, we note that the positive results for instances of \u25b3 \u2264 1 are also applicable here. For the addition of edges, the proof is analogous to the proof of Theorem 4.5. For the deletion of edges, one must consider each potential casting voter y that has a voting power at least as high as that of the designated voter x, under at least one cost-minimizing delegation function and then delete iteratively the incoming edges to y, in descending order of the number of voters who would lose their paths to y as a result. This continues until y's voting power is reduced to below that of x.\nProposition 4.7. The variants of CONTROL BY ADDING/DELETING VOTERS where the controller can add or delete edges of the delegation graph are solvable in polynomial time if \u2206 \u2264 1.\nIn this section we focused exclusively on controlling the power of casting voters, however, the power of delegating voters should not be underestimated. As highlighted by Zhang and Grossi [2021] and Behrens et al. [2021], delegating voters can also control a substantial number of votes, impacting the election outcome. For example, a casting voter with direct delegations from p 1 voters is intuitively more powerful than one whose voting power of p is achieved through an intermediary receiving exactly p - 2 delegations, as the latter's power depends entirely on the intermediary. Problems of ensuring a preferred voter gains multiple delegations, even without casting a ballot, naturally arise. Our results extend to such scenarios as well, with proofs being analogous."}, {"title": "5 Conclusion", "content": "Our work focused on computational problems related to determining feasible delegation functions and controlling the voting power of participants. Specifically, we first addressed questions around the existence of sufficiently good delegation functions (under cost and reachability constraints) considering well-established desiderata from the Liquid Democracy literature. We then concentrated on controlling the voting power of a preferred casting voter by adding or deleting voters to achieve the controller's goal. Our results provide a comprehensive understanding of the tractability landscape of these problems' families. For most of the considered problems, tractability is characterized (unless P=NP) by allowing each voter to approve at most one other voter as a potential representative.\nEven beyond the Computational Social Choice context, the related graph-theoretic problems are of significant interest, making them a promising algorithmic direction with respect to, e.g., approximation or parameterized algorithms. Our results could serve as a starting point for analyzing the parameterized complexity of the examined problems. Indicatively, the hardness results from Section 3 show para-NP-hardness for l and the positive results can be extended to parameterize by the number of voters with an out-degree greater than one and their maximum out-degree. Proposition 3.3 is also an XP[a] algorithm, and Theorem 4.3 is also a W[1]-hardness result for the number of voters that can be deleted. We also underline that our hardness results hold for restricted classes of delegation graphs, such as layered directed graphs with a few layers or even directed bipartite graphs. Moreover, the results on CAV and CDV hold even under additional restrictions on path lengths or voting power, along with the reachability constraint, in the formulation of these problems.\nOur results can be complemented by simulating how factors like path length, voting power bounds, and budget constraints impact the frequency of feasible solutions or how one parameter influences others. Exploring how edge existence probabilities, cost distributions, or the number of voters impact feasibility in synthetic datasets could also be insightful. Similarly, considering costs, direct voting is democratically optimal but expensive, while (unconstrained) DELEGATE REACHABILITY offers much cheaper solutions. Solutions with constraints, such as bounded voting power or lengths of delegation paths, fall in the middle. Comparing these costs could reveal the savings of Liquid Democracy over direct voting, along with the additional costs introduced by constraints aimed at yielding intuitively better solutions."}]}