{"title": "DynamicRouteGPT: A Real-Time Multi-Vehicle Dynamic Navigation Framework Based on Large Language Models", "authors": ["Ziai Zhou", "Bin Zhou", "Hao Liu"], "abstract": "This is a preliminary draft of the paper and is currently under review. The content may be updated or revised in future versions. Real-time dynamic path planning in complex traffic environments presents significant challenges, such as varying traffic volumes and traffic signal wait times. While traditional static routing algorithms like Dijkstra and A* have been successful in computing the shortest paths, they often fail to effectively address the dynamic nature of traffic conditions. Recent Reinforcement Learning (RL) approaches have made some progress in dynamic navigation; however, most existing models focus solely on local optima, neglecting global optimality and risking dead-ends or network boundary issues in practical applications. This paper proposes a novel approach based on causal inference, aimed at achieving real-time dynamic path planning for multiple vehicles in real-world road networks, balancing both global and local optimality. We first utilize the static Dijkstra algorithm to compute a globally optimal path as a baseline. Then, a distributed control strategy directs vehicles along the baseline path. Upon reaching intersections, DynamicRouteGPT performs real-time decision-making for local path selection, considering real-time traffic information, driving preferences, and unexpected events to optimize dynamic path choices at each intersection.The DynamicRouteGPT framework integrates multiple techniques, including Markov chains, Bayesian inference, and modern large-scale pretrained language models such as Llama3 8B, to provide an efficient and reliable path planning solution. This framework not only processes real-time traffic data but also dynamically adjusts path planning to accommodate various traffic scenarios and driver preferences. A key innovation of our method lies in constructing causal graphs for counterfactual reasoning, optimizing path decisions. Our model requires no pre-training, boasts broad applicability, and can handle various types of road networks. Experimental results demonstrate that this method achieves state-of-the-art (SOTA) performance in real-time dynamic path planning for multiple vehicles while offering explainability in path selection. This approach not only effectively selects the optimal path but also provides justifications for the choices made, offering a novel and efficient solution for dynamic navigation in complex traffic environments.", "sections": [{"title": "1 Introduction", "content": "Real-time multi-vehicle dynamic path planning in modern intelligent transportation systems presents a highly challenging problem. As urban road networks continue to expand and traffic flows become increasingly complex, traditional path planning methods often struggle to perform effectively in dynamic environments[28]. Specifically, fluctuations in traffic volume, periodic changes in traffic signals, and frequent traffic incidents necessitate a path planning system with high adaptability and responsiveness. Furthermore, the variability in road conditions, such as traffic congestion, road damage, and adverse weather, places additional demands on the real-time nature of path planning[27, 35]. Path selection for multiple vehicles not only needs to consider the optimal route for individual vehicles but also must coordinate their interactions to avoid traffic jams or potential accidents. This coordination between global and local optimization is one of the key challenges in achieving effective path planning.\nWith advancements in autonomous driving technology, issues related to vehicle trajectory control and navigation have gained increasing attention. However, existing approaches still face several limitations in practical applications. Classical path planning algorithms, such as Dijkstra and A* [15], are effective at calculating the shortest path under static conditions but are significantly constrained in dynamic environments due to their inability to adapt to real-time changes in road conditions. Recently, dynamic navigation models based on reinforcement learning (RL), such as XRouting"}, {"title": "2 Preliminaries", "content": "In this section, we first introduce the key concepts involved in the task of Dynamic Navigation control for multiple vehicles under real-time road conditions."}, {"title": "2.1 Road Network", "content": "A road network is a system of interconnected roads that forms a mesh-like distribution within a specific region [18]. For simulation purposes, we employ SUMO (Simulation of Urban Mobility)[19], where the road network in SUMO is represented as a directed graph. In SUMO, nodes typically represent intersections, while edges represent roads or streets, which are unidirectional. Specifically, a SUMO network includes the following information: each edge consists of a collection of lanes, with each lane having an ID, location, shape, and speed limit. Intersections are equipped with traffic signal logic, and junctions manage right-of-way regulations. Connections between lanes are represented by nodes at intersections."}, {"title": "2.2 Dynamic Vehicle Navigation", "content": "The goal of vehicle path planning is to find the route that minimizes the cost for a vehicle to reach its destination. Classical routing solutions, such as the Dijkstra algorithm and A* [15], greedily compute the shortest path between the starting node and the target node. While these static routing algorithms are widely adopted in practice, they do not account for the dynamic changes in road conditions in real time. Recently, several works have proposed learning-based models for real-time vehicle navigation, where the navigation task is framed as a series of rerouting decisions [13, 16, 32]. These models formulate the task as a reinforcement learning (RL) problem, where the vehicle learns to turn left, right, or go straight at upcoming intersections based on its observations, including current location, destination information, and real-time traffic conditions. However, this single-path decision-making approach is prone to getting trapped in local optima, leading to situations where vehicles become stuck in dead ends or deviate from the road network boundaries, failing to reach their destinations [28]."}, {"title": "2.3 Multi-Vehicle Control", "content": "Multi-vehicle control (MVC) represents a significant research area in robotics, autonomous systems, and transportation systems, focusing on the coordination and control of multiple vehicles to efficiently execute collective tasks. The core of this field lies in developing algorithms and strategies to ensure that a group of vehicles can maintain specific spatial positions relative to each other while collaboratively completing assigned tasks. This process involves complex strategy coordination, including task allocation, communication protocol design, and route planning and obstacle avoidance strategies. Through effective communication mechanisms, vehicles can exchange information to avoid potential conflicts on their paths, thereby reducing the risk of traffic accidents. Additionally, each vehicle must independently plan its trajectory to ensure it does not collide with other vehicles or environmental obstacles, ultimately optimizing the total time for the entire fleet. Models optimized with LORA can more effectively incorporate Bayesian reasoning to select the optimal path and provide explanations."}, {"title": "3 Related Work", "content": "In this section, we review the literature on the use of large language models (LLMs) in traffic signal control, end-to-end vehicle control, and decision-making applications. We begin by exploring LLMs in traffic signal control agents, followed by their role in autonomous driving systems. Lastly, we discuss LLMs in broader decision-making contexts, highlighting their relevance to intelligent transportation systems. This review provides context for our research and positions it within the existing landscape of LLM applications."}, {"title": "3.1 LLMs for Traffic Signal Control Agents", "content": "Traffic signal control is a critical component of urban infrastructure management. In recent years, several studies have explored the use of Large Language Models (LLMs) to enhance the decision-making capabilities of traffic signal control agents. [18] introduced LLMlight, a method that leverages LLMs to generate introspective suggestions for optimizing traffic signal control strategies. These suggestions are derived from the agent's past experiences, expert demonstrations, and generalization across different traffic scenarios. Unlike traditional reinforcement learning approaches, LLMlight does not require parameter fine-tuning but instead adapts the prompts provided to the agent, enabling it to effectively adjust to new situations. This method demonstrated significant improvements in traffic flow and effectively reduced congestion in simulation experiments."}, {"title": "3.2 LLMs for End-to-End Vehicle Control Tasks", "content": "Multimodal Large Language Models (MLLMs) have shown exceptional performance in processing and reasoning about non-textual data such as images and videos, emerging as a promising area of research. These models have been applied to autonomous driving, leading to the development of interpretable end-to-end systems like DriveGPT4 [9, 36]. DriveGPT4 can process multi-frame video inputs and textual queries to interpret vehicle actions and provide reasoning. The system is capable of predicting low-level vehicle control signals in an end-to-end manner and has outperformed"}, {"title": "3.3 LLMs in Decision-Making Applications", "content": "The emergence of LLMs has significantly impacted the field of natural language processing, achieving remarkable results across various tasks, including decision-making. In the context of decision-making, LLMs have been employed to enhance the performance of agents in diverse domains. For instance, [5] explored the use of LLMs in decision support systems, where these models are used to generate concise and valuable suggestions to optimize decision-making processes. This approach has been tested in various settings, including traffic signal control and autonomous driving, showing significant improvements in both few-shot and zero-shot learning scenarios.\nIn summary, the application of LLMs in decision-making for traffic signal control and autonomous driving has shown great potential. Techniques like LLMlight and DriveGPT [9, 36] demonstrate the capability of LLMs to enhance the adaptability and efficiency of these systems. However, further research is needed to fully exploit the capabilities of LLMs in these areas and to address the remaining challenges."}, {"title": "4 Methodology", "content": "To address the challenges of dynamic traffic management and provide optimal path planning solutions for multiple vehicles, we model the problem using a mathematical framework. The objective of our research is to develop a system capable of dynamically adjusting routes in real-time, ensuring both global and local optimality while responding to unforeseen events such as road closures and temporary detours. Additionally, the model aims to incorporate driver preferences, such as specific routes to be taken or paths to be avoided, to enhance the accuracy and efficiency of the path planning process.\nWe represent the road network as a graph G = (V, E), where V is the set of nodes representing intersections, and E is the set of edges representing road segments. Each edge $e \\in E$ is associated with multiple dynamic attributes, such as length l(e), speed limit $u_{max}(e)$, current average speed $v_{avg}(e)$, and traffic signal information. The objective of the problem is to find a path P = {$e_1, e_2,..., e_n$} that minimizes the total travel time, considering real-time and predictive traffic conditions."}, {"title": "4.1 DynamicRouteGPT Framework", "content": "We propose the DynamicRouteGPT framework, which comprises four core modules, as illustrated in the flowchart (Figure 1). These modules include the Real-Time Information Retrieval Module, the Alternative Path Generation Module, the GPT Decision Module, and the Dynamic Path Adjustment Module. Together, these modules form the overall architecture of the system, enabling dynamic, efficient path planning and real-time adjustments.\nIn this section, we provide a detailed explanation of the design concepts, innovations, and integration of each module within the overall system. To aid in understanding the implementation of these modules, the pseudocode provided in Algorithm outlines the core logic of the framework, specifically describing the interactions and processes between the different components of the framework."}, {"title": "4.1.1 Real-Time Information Acquisition Module", "content": "The purpose of the Real-Time Information Acquisition Module is to obtain real-time vehicle location data within the road network, as well as relevant traffic information, to optimize routing under dynamic conditions. To accurately model dynamic traffic states, we employ a Markov chain model [7, 17] to characterize the state transition process of road segments and predict travel times.\nLet the road network be represented by a graph G = (V, E), where V denotes the set of nodes (intersections) and E denotes the set of edges (road segments). Each edge $e \\in E$ represents a state, and the attributes associated with each edge include its length l(e), speed limit $u_{max}(e)$, and current average speed $v_{avg}(e)$.\nWe define the state space S as the set of all road states, i.e., S = {$s_1, s_2,..., s_n$}, where $s_i$ represents the state of edge $e_i$. The state transition probability $P(s_{i+1}|s_i)$ denotes the probability of a vehicle transitioning from state $s_i$ to state $s_{i+1}$.\nConsidering traffic signals and other factors that may influence traffic flow, we define the state transition probability as:\n$P(S_{i+1}|S_i) = f(\\frac{v_{avg}(e_i)}{u_{max}(e_i)}, \\frac{signal \\_wait \\_time(e_i)}{signal \\_cycle(e_i)}, traffic \\_density(e_i))$\nwhere the function f is trained on historical and real-time data, incorporating the effects of multiple factors.\nThe travel time t(e) for each edge e can be expressed as:\n$t(e) = \\frac{l(e)}{v_{avg}(e)} + signal \\_wait \\_time(e)$\nBy utilizing the Markov chain model, we can predict the transition times between different states of the vehicle, thereby providing essential prior information for the path decision-making in DynamicRouteGPT."}, {"title": "4.1.2 Alternative Path Generation Module", "content": "The purpose of the Alternative Path Generation Module is to generate multiple candidate paths to ensure local optimality while maintaining global optimality. Existing reinforcement learning-based navigation models typically focus on action selection at local intersections, which often leads to local optima and neglects the global optimal path.\nTo address this issue, we first utilize the Dijkstra algorithm to compute the global optimal path $P_{global}$ under a static road network. For each critical segment (a mandatory segment within the global"}, {"title": "4.1.3 GPT Decision-Making Module", "content": "The GPT Decision-Making Module leverages the state transition probabilities provided by the Real-Time Information Acquisition Module and the candidate paths generated by the Alternative Path Generation Module to perform path selection through Bayesian inference. Specifically, this module applies Bayes' theorem to update the probability distribution of each path, thereby facilitating the selection of the optimal route:\n$P(P_i|real \\_time \\_information) = \\frac{P(real \\_time \\_information | P_i) \\cdot P(P_i)}{P(real \\_time \\_information)}$\nwhere $P(P_i)$ denotes the prior probability of selecting path $P_i$, derived from historical data, and $P(real \\_time \\_information | P_i)$ represents the likelihood of observing the current real-time traffic data given that path $P_i$ is chosen. The posterior probability $P(P_i | real \\_time \\_information)$ indicates the likelihood that path $P_i$ is the optimal route under the current real-time conditions.\nThe workflow of the GPT Decision-Making Module is as follows:\n(1) Input Processing: The model receives input data, including vehicle status, traffic conditions, and candidate paths.\n(2) Path Probability Calculation: The posterior probability $P(P_i | real \\_time \\_information)$ of each candidate path is calculated using Bayes' theorem.\n(3) Path Selection: The path with the highest posterior probability is selected, and the rationale for this selection is generated.\n(4) Output and Adjustment: Based on the selected path, the system dynamically adjusts the vehicle's navigation instructions.\nThrough this process, DynamicRouteGPT is capable of providing efficient and precise path planning in complex and dynamic traffic environments, while dynamically adapting to new traffic conditions. The Bayesian inference framework enables the system to continuously update its path selection as new information becomes available, ensuring that the chosen route is contextually relevant and responsive to real-time traffic conditions."}, {"title": "4.1.4 Dynamic Path Adjustment Module", "content": "The Dynamic Path Adjustment Module is responsible for implementing the decisions made by the GPT Decision-Making Module in the actual driving process and dynamically adjusting the route based on real-time changes. This module continuously retrieves the latest traffic data from the Real-Time Information Acquisition Module and, based on the output from the GPT module, updates the vehicle's route in real time to ensure that it remains on the optimal path.\nThis process is analogous to feedback control in control theory, wherein system parameters are continuously adjusted to achieve optimal performance. By iteratively refining the vehicle's path in response to dynamic traffic conditions, the Dynamic Path Adjustment Module plays a critical role in maintaining the efficiency and effectiveness of the overall path planning system, ensuring that the vehicle consistently follows the most efficient route under varying traffic scenarios."}, {"title": "4.2 DynamicRouteGPT", "content": "To achieve efficient and precise path planning, we have employed the Llama3 8B model [10], a large-scale pre-trained language model capable of handling complex input data. The Llama3 8B model, trained on a diverse and extensive dataset, exhibits exceptional contextual understanding and reasoning capabilities, enabling accurate predictions and decision-making in complex traffic scenarios.\nTo fully harness the potential of the Llama3 8B model, we have integrated it with the LLAMA-Factory inference framework. LLAMA-Factory [38] is a powerful and user-friendly platform designed for efficient training and fine-tuning of large language models, supporting their deployment across various traffic scenarios. Through LLAMA-Factory, we can swiftly adapt the Llama3 8B model to different traffic contexts and dynamically adjust its inference process to respond to rapidly changing traffic conditions. The modular design of this framework allows the model to flexibly adjust to the demands of different scenarios, thereby maintaining efficient path selection in complex traffic environments.\nDuring the fine-tuning process, we employed the BAdam optimization algorithm [20] to specifically adjust the Llama3 8B model. BAdam, a variant of the Adam optimization algorithm, adaptively adjusts the learning rate to better accommodate the dynamic changes in traffic scenarios. The BAdam algorithm updates the model parameters using the following equations:\n$\\theta_{\\tau+1} = \\theta_{\\tau} \u2013 \\alpha \\cdot \\frac{m_t}{\\sqrt{\\hat{v}_t} + \\epsilon}$\nwhere $\\theta_t$ represents the model parameters at time step t, $\\alpha$ is the learning rate, and $m_t$ and $\\hat{v}_t$ are the bias-corrected estimates of the first and second moments, respectively, computed as:\n$m_t = \\frac{\\hat{m_t}}{1 - \\beta_1^t}$\n$\\hat{m_t} = \\beta_1m_{t-1} + (1 - \\beta_1)g_t$\n$\\hat{v_t} = \\beta_2v_{t-1} + (1 - \\beta_2)g_t^2$\n$v_t = \\frac{\\hat{v_t}}{1-\\beta_2^t}$\nHere, $g_t$ denotes the gradient, $\\beta_1$ and $\\beta_2$ are hyperparameters typically set to $\\beta_1 = 0.9$ and $\\beta_2 = 0.999$, and $\\epsilon$ is a small constant to prevent division by zero.\nBy optimizing with BAdam, the model maintains its efficiency and accuracy in path planning even in the presence of challenges such as traffic congestion, road closures, and unforeseen events. This optimization strategy enables the model to perform robust navigation decisions, ensuring reliable performance in complex environments.\nAdditionally, to further enhance the model's adaptability and specificity, we applied Low-Rank Adaptation (LoRA) to fine-tune the Llama3 8B model. LoRA introduces low-rank matrices $W = AB$ to fine-tune the pre-trained model's parameters, where A and B are low-rank matrices. The parameter update is performed as follows:\n$\\Theta_{t+1} = \\Theta + \\Delta W$\n$\\Delta W = \\alpha \\cdot (A \\cdot B)$\nwhere $\\Delta W$ represents the parameter adjustment after low-rank adaptation, and $\\alpha$ is the learning rate. LoRA enables the model to enhance its expressiveness and adaptability without significantly"}, {"title": "4.3 Overall Design Motivation and Integration", "content": "The DynamicRouteGPT framework is meticulously structured to ensure that the output of each module is seamlessly passed to the next, maintaining coherence across the entire system. The integration of the framework is designed to guarantee that local path adjustments do not compromise global optimization, while ensuring that the system retains sufficient robustness when responding to unexpected traffic conditions. By employing Markov chains to model state transitions and utilizing Bayesian inference for decision-making, the framework strikes a balance between theoretical rigor and practical applicability.\nIn summary, the DynamicRouteGPT framework represents a significant advancement in real-time vehicle navigation by proposing an innovative approach that combines traditional optimization techniques with modern AI-driven decision-making. This integrated approach enables the framework to deliver efficient and adaptive path planning solutions that cater to the demands of both autonomous and human-driven vehicles in complex urban environments.\nDynamicRouteGPT achieves a groundbreaking integration of Bayesian inference with a GPT-based decision-making model, marking an innovative step forward in dynamic, multi-vehicle path planning. The Real-Time Information Acquisition Module ensures data accuracy, the Alternative Path Generation Module balances global and local considerations, and the GPT Decision-Making Module, powered by Bayesian reasoning, provides a scientifically grounded basis for path selection. Finally, the Dynamic Path Adjustment Module translates these theoretical advancements into practical applications. This framework effectively addresses the uncertainties inherent in complex traffic environments, offering a novel technological pathway for future intelligent transportation systems."}, {"title": "5 Experiments", "content": "In this section, we demonstrate the performance of the DynamicRouteGPT framework on dynamic route planning tasks and conduct comparative analysis with several representative baseline methods. The experiments cover areas such as traffic signal control, dynamic navigation, and joint control tasks. We also validate the effectiveness of each module through ablation studies and analyze the model's generalization ability and performance across different"}, {"title": "5.1 Simulation", "content": "During the simulation process, we employed SUMO (Simulation of Urban Mobility) to model real-world traffic dynamics, including vehicle movements and traffic signal phase changes. For human-driven vehicles (HVs), route planning data were directly obtained from the road network and route files, and the vehicles were controlled through SUMO. We utilized SUMO's built-in output functions to export the relevant simulation data. For autonomous vehicles (AVs), their driving patterns were determined by randomly sampling from valid routes based on the total number of vehicles entering the network during the simulation. The microscopic behavior of all vehicles was automatically modeled using SUMO's default built-in car-following model-the Intelligent Driver Model (IDM). This model adaptively controls acceleration based on each vehicle's speed and the distance to the vehicle ahead."}, {"title": "5.2 Dataset Description", "content": "We conducted experiments on two synthetic datasets and two real-world datasets. The first synthetic dataset [32] is a custom-designed Manhattan-style traffic network, as shown in Figure 2, where each horizontal road is 300 meters long and each vertical road is 200 meters long. All roads are bidirectional with two lanes. Traffic flow was generated using SUMO's randomTrips.py, resulting in a total of 150 vehicles with a vehicle load rate of one vehicle per second. Traffic signals at each intersection were controlled by SUMO's default controller, similar to real-world open-source synthetic datasets.\nThe second synthetic dataset is also based on a near-realistic open-source synthetic dataset, namely Grid 4x4 [4], as shown in Figure 2. All roads are 300 meters in length, and there are a total of 16 intersections, each equipped with traffic signal control. We extracted one hour of route data for model training and evaluation, during which 1,473 vehicles entered the road network.\nAs shown in Figure 2, a public real-world dataset, Hangang-4x4, also contains 16 traffic signals [4], with each signal controlling one intersection. All W-E (West-East) roads are 800 meters long, and all N-S (North-South) roads are 600 meters long. We extracted 30 minutes of route data from the route files, during which 1,660 vehicles entered the network."}, {"title": "5.3 Evaluation Metrics", "content": "The evaluation metrics for our task primarily include Average Travel Time, Average Duration, Average Waiting Time, and Average Time Loss. These metrics are defined as follows:\n\u2022 Average_Travel_Time: The average time taken by a vehicle to travel from its origin to its destination.\n\u2022 Average_Duration: The average duration a vehicle spends within the network.\n\u2022 Average_Waiting_Time: The average time a vehicle spends waiting due to traffic signals or congestion.\n\u2022 Average_TimeLoss: The average additional time incurred by a vehicle beyond the ideal travel time, indicating inefficiencies in route planning or traffic management.\nThese metrics are computed based on the outputs recorded from the SUMO simulation software."}, {"title": "5.4 Comparison with Existing Methods", "content": "We compared the DynamicRouteGPT framework with several representative methods, including:\n\u2022 DQNNavigation [16]: A multi-agent independent DQN model designed for navigation across multiple intersections, operating in dynamic traffic environments.\n\u2022 XRouting [32]: An interpretable multi-agent PPO model for navigation tasks, which dynamically learns road and vehicle attributes by adjusting attention and transformer modules to optimize route selection.\n\u2022 Dynamic Dijkstra [29]: A dynamic path decision-making method that calculates the shortest path at each intersection using the Dijkstra algorithm."}, {"title": "5.5 Parameter Settings", "content": "To evaluate the effectiveness of the DynamicRouteGPT framework, we conducted ablation experiments on three datasets, setting the penetration rate (PR) at 30%. The penetration rate is defined as follows:\n$PR = \\frac{N_{AV}}{N_{AV} + N_{HV}}$\nwhere $N_{AV}$ represents the number of autonomous vehicles, and $N_{HV}$ represents the number of human-driven vehicles.\nIn real-time dynamic traffic route planning, the evaluation metrics can vary even when vehicles follow the same route, due to differences in initial positions, destinations, and departure times."}, {"title": "5.6 Performance Evaluation", "content": "Table 1 presents the performance of different routing methods across various road networks.\nDynamicRouteGPT demonstrates a significant advantage across different testing scenarios. For instance, in the Manhattan dataset, DynamicRouteGPT reduced the average travel time by 31.5% compared to the XRouting method and by 68.3% compared to DQN. Additionally, the average waiting time decreased to 37.0 seconds, which is 64.1% less than the waiting time with XRouting and 81.8% less than with DQN.\nIn the Grid 4\u00d74 dataset, DynamicRouteGPT further reduced the average waiting time to 1.67 seconds and the time loss to 7.36 seconds, achieving reductions of 51.5% and 12.3%, respectively, compared to XRouting. This result highlights its effectiveness in minimizing traffic delays.\nIn the more complex Hangzhou 4\u00d74 dataset, DynamicRouteGPT maintained superior performance, reducing the average travel time by 7.7% compared to DQN and 7.4% compared to XRouting, and showing a 25.1% reduction in waiting time compared to dynamic_DJ.\nOverall, DynamicRouteGPT effectively shortens both travel time and waiting time, showcasing its potential as an advanced dynamic navigation framework, particularly suitable for improving the efficiency of urban traffic networks."}, {"title": "5.7 Ablation Study", "content": "In addition, for the task of dynamic navigation under real-time road conditions, we observed that different vehicles departing at different times, and from various starting points to different endpoints, experience varying travel times. This variability is particularly influenced by traffic lights and other factors such as waiting times.\nBased on these observations, we incorporated two additional road network datasets, Ingolstadt21 [3] and Cologne3 [3], as illustrated in Figure 3. Furthermore, we calculated the time required to travel from the same starting point to the same endpoint using the DynamicRouteGPT framework across these different road networks, establishing new baseline benchmarks. These new datasets and benchmarks further validate the performance and adaptability of DynamicRouteGPT in diverse road network environments.\nWe also analyzed the travel times required using the DynamicRouteGPT framework as the Request Probability (RP) gradually increased to 15% across different road networks. The results further assess the effectiveness of DynamicRouteGPT, demonstrating its strong generalization capability and suitability for various road networks, thereby confirming the universal applicability of the framework. The framework's performance is depicted in Figure 3.\nTable 3 presents the evaluation results of DynamicRouteGPT across different road network environments. Specifically, we analyzed the performance of DynamicRouteGPT under varying penetration rates (from 1% to 15%). The evaluation metrics include Average Travel Time, Average Duration, Average Waiting Time, and Average Time Loss. These metrics are used to assess the efficiency and stability of the framework under different network conditions."}, {"title": "5.8 Parameter Analysis", "content": "We conducted a sensitivity analysis of the key parameters in the DynamicRouteGPT framework to evaluate its performance under different settings. The experimental results demonstrate that DynamicRouteGPT exhibits strong robustness and adaptability across various traffic conditions and vehicle penetration rates. By appropriately adjusting these parameters, the framework's performance can be further optimized to better suit specific traffic environments, thereby enhancing the efficiency and accuracy of route planning.\nTo further validate the practical application of the DynamicRouteGPT framework, we performed several case studies. These case studies illustrate the path selection process and outcomes of the framework under different scenarios. Detailed information can be found in Appendix A."}, {"title": "5.9 Limitations Analysis", "content": "Despite the superior performance of DynamicRouteGPT demonstrated in multiple experiments, there are certain limitations associated with the framework. First, the computational complexity of the model is relatively high, which may pose challenges in large-scale real-time applications due to potential computational resource constraints. Second, although DynamicRouteGPT is capable of adapting to various road network environments, further optimization may be required in extremely large-scale, high-density urban road networks to enhance its efficiency. Additionally, the effectiveness of the model heavily relies on the accuracy and completeness of real-time traffic information; any inaccuracies in the input data could adversely affect the accuracy of route planning.\nIn conclusion, while the DynamicRouteGPT framework exhibits strong performance and broad applicability in dynamic route planning tasks, future research should focus on further optimization and expansion to address more complex traffic scenarios and a wider range of application demands."}, {"title": "6 Conclusion", "content": "This study presented and validated the DynamicRouteGPT framework, a novel approach to dynamic route planning in complex traffic scenarios. Through extensive experiments, the framework demonstrated consistent superiority over traditional methods, particularly in reducing average travel time, waiting time, and time loss across diverse road networks.\nUnlike many existing models, DynamicRouteGPT does not require pre-training, which significantly reduces computational overhead while enhancing adaptability in real-world conditions. The framework's strong generalization ability allows it to efficiently manage various traffic conditions and vehicle penetration rates, further optimized through parameter fine-tuning to meet specific traffic environment needs.\nA key contribution of this work is the establishment of a new baseline for evaluating dynamic path planning under real-time traffic conditions. This baseline provides a useful reference for assessing the performance of path planning algorithms across different road networks, reinforcing the practical applicability of DynamicRouteGPT.\nCase studies confirmed the framework's effectiveness in managing complex scenarios, including standard path selection, forced routing, and emergency response. These findings offer valuable insights for improving urban traffic management systems, with potential benefits in enhancing traffic flow efficiency and safety.\nWhile the DynamicRouteGPT framework exhibits several advantages, its computational complexity remains a challenge, particularly for large-scale real-time applications. Additionally, the accuracy of the model's predictions is dependent on the quality of"}, {"title": "A Appendix Title 1", "content": null}, {"title": "A.1 Standard Route Selection", "content": "Vehicle veh_42 has arrived at intersection A2. The current properties of intersection A2 are traffic_light_right_on_red, and the node ID is A2, with the target edge being B2C2.\nThere are several alternative paths available:\n\u2022 Alternative path 1: [A3A2, A2B2, B2C2]\n\u2022 Alternative path 2: [A3A2, A2A1, A1B1, B1B2, B2C2]\n\u2022 Alternative path 3: [A3A2, A2A1, A1A0, ABBE, BOB1, B1B2, B2C2]\nThe chosen path is: [A3A2, A2B2, B2C2]\nThe choice reason is as follows:\nTotal time: path1 < path2 < path3\nTraffic light count: path1 < path2 < path3\nError edges: none\nTaking all factors into consideration, path1 is selected.\nThe best route for veh_42 is: [top1B3, A3A2, A2B2, B2C2, C2D2, D2right2]."}, {"title": "A.2 Adding A Mandatory Route", "content": "Minimizing overall travel time while ensuring the route passes through a specified path.\nVehicle veh_42 has arrived at intersection A2. The current properties of intersection A2 are traffic_light_right_on_red, and the node ID is A2, with the target edge being B2C2.\nThere are several alternative paths available:\n\u2022 Alternative path 1: [A3A2, A2B2, B2C2]\n\u2022 Alternative path 2: [A3A2, A2A1, A1B1, B1B2, B2C2]\n\u2022 Alternative path 3: [A3A2, A2A1, A1A0, ABBE, BOB1, B1B2, B2C2]\nThe chosen path is: [A3A2, A2A1, A1B1, B1B2, B2C2]\nThe choice reason is as follows:\nTotal time: path1 < path2 < path3\nTraffic light count: path1 < path2 < path3\nError edges: none\nMandatory path: A2A1\nTaking all factors into consideration, path2 is selected.\nThe best route for veh_42 is: [top1B3, A3A2, A2A1, A1B1, B1B2, B2C2, C2D2, D2right2]."}, {"title": "A.3 Handling Emergencies", "content": "Minimizing overall travel time under the constraint of avoiding a specific path.\nVehicle veh_42 has arrived at intersection A2. The current properties of intersection A2 are traffic_light_right_on_red, and the node ID is A2, with the target edge being B2C2.\nThere are several alternative paths available:\n\u2022 Alternative path 1: [A3A2, A2B2, B2C2]\n\u2022 Alternative path 2: [A3A2, A2A1, A1B1, B1B2, B2C2]\n\u2022 Alternative path 3: [A3A2, A2A1, A1A0, ABBE, BOB1, B1B2, B2C2]\nThe chosen path is: [A3A2, A2A1, A1A0, ABB, BOB1, B1B2, B2C2]\nThe choice reason is as follows:\nTotal time: path1 < path2 < path3\nTraffic light count: path1 < path2 < path3\nError edges: A1B1\nMandatory path: A2A1\nTaking all factors into consideration, path3 is selected.\nThe best route for veh_42 is: [top1B3, A3A2, A2A1, A1A0, ABBe, BOB1, B1B2, B2C2, C2D2, D2right2]."}]}