{"title": "Quantified Linear and Polynomial Arithmetic Satisfiability via Template-based Skolemization", "authors": ["Krishnendu Chatterjee", "Ehsan Kafshdar Goharshady", "Mehrdad Karrabi", "Harshit J Motwani", "Maximilian Seeliger", "\u0110or\u0111e \u017dikeli\u0107"], "abstract": "The problem of checking satisfiability of linear real arithmetic (LRA) and non-linear real arithmetic (NRA) formulas has broad applications, in particular, they are at the heart of logic-related applications such as logic for artificial intelligence, program analysis, etc. While there has been much work on checking satisfiability of unquantified LRA and NRA formulas, the problem of checking satisfiability of quantified LRA and NRA formulas remains a significant challenge. The main bottleneck in the existing methods is a computationally expensive quantifier elimination step. In this work, we propose a novel method for efficient quantifier elimination in quantified LRA and NRA formulas. We propose a template-based Skolemization approach, where we automatically synthesize linear/polynomial Skolem functions in order to eliminate quantifiers in the formula. The key technical ingredients in our approach are Positivstellens\u00e4tze theorems from algebraic geometry, which allow for an efficient manipulation of polynomial inequalities. Our method offers a range of appealing theoretical properties combined with a strong practical performance. On the theory side, our method is sound, semi-complete, and runs in subexponential time and polynomial space, as opposed to existing sound and complete quantifier elimination methods that run in doubly-exponential time and at least exponential space. On the practical side, our experiments show superior performance compared to state-of-the-art SMT solvers in terms of the number of solved instances and runtime, both on LRA and on NRA benchmarks.", "sections": [{"title": "Introduction", "content": "Satisfiability checking for logical formulas is one of the fundamental problems in automated reasoning that arises in many applications, including logic for artificial intelligence (Alur, Henzinger, and Kupferman 2002), planning and scheduling (Kautz and Selman 1992) or deductive verification (Kroening and Strichman 2016). Satisfiability modulo theories (SMT) solvers have achieved impressive results at tackling this problem. However, while SMT solvers excel at checking satisfiability of quantifier-free formulas, many applications require reasoning about quantified formulas. For instance, automated reasoning problems in decision making for multi-agent systems typically involve quantified formulas, with quantifier alternation corresponding to the choices made by each agent (Alur, Henzinger, and Kupferman 2002; Chatterjee, Henzinger, and Piterman 2010). Quantified formulas also commonly arise in program verification (Gulwani, Srivastava, and Venkatesan 2008) and synthesis (Solar-Lezama et al. 2006).\nThe key challenge that arises in checking satisfiability of quantified formulas is the highly expensive quantifier elimination step, that SMT solvers need to perform in order to reduce the problem of checking satisfiability of a quantified formula to that of a quantifier-free formula. It is a classical result that, both in linear real arithmetic and in non-linear real arithmetic theories, the runtime complexity of quantifier elimination is doubly-exponential (Weispfenning 1988), making it practically infeasible and often a daunting task for SMT solvers. To overcome this challenge, some SMT solvers avoid the expensive quantifier elimination step by implementing methods such as quantifier instantiation (Reynolds et al. 2013; de Moura and Bj\u00f8rner 2007; Ge, Barrett, and Tinelli 2009). However, while being sound, quantifier instantiation is incomplete and may lead to \"Unknown\" outputs by the SMT solver. Another approach to satisfiability checking that avoids the quantifier elimination step is to consider the game semantics of quantified first-order formulas and to treat them as two-player games (Bj\u00f8rner and Janota 2015; Farzan and Kincaid 2016; Murphy and Kincaid 2024). However, these methods are only applicable to formulas in linear real arithmetic.\nBesides checking satisfiability of quantified formulas, another fundamental question is to obtain witnesses of satisfiability for existentially quantified variables. This feature is important in many applications. In decision making for multi-agent systems, the witnesses for existentially quantified variables gives rise to a strategy of the existentially quantified agent (Alur, Henzinger, and Kupferman 2002; Chatterjee, Henzinger, and Piterman 2010). In planning and scheduling, the witnesses gives rise to a control policy (Kautz and Selman 1992). Finally, in program synthesis applications, the witnesses gives rise to a program that"}, {"title": "Our Approach", "content": "In this work, we propose a novel method for checking satisfiability of quantified formulas in linear real arithmetic (LRA) and non-linear real arithmetic (NRA). Rather than following the approaches discussed above that try to sidestep quantifier elimination, at the core of our approach lies a novel method for efficient quantifier elimination in LRA and NRA. As mentioned above, sound and complete procedures for quantifier elimination are computationally expensive and inherently lead to doubly-exponential time and exponential space complexity (Weispfenning 1988; Brown and Davenport 2007). Hence, to overcome this complexity barrier, we focus on methods that are sound and semi-complete. While we defer the formal definition of semi-completeness to later parts of the paper, this relaxed notion of completeness intuitively means that the method is guaranteed to prove or disprove satisfiability whenever it can be witnessed by a certificate of a certain parametrized form. Our novel quantifier elimination procedure gives rise to a method for checking satisfiability of quantified formulas in LRA and NRA that is sound, semi-complete, and runs in subexponential time and polynomial space. To the best of our knowledge, this is the first method that provides all three of these desirable features. Our method also computes witnesses of satisfiability for existentially quantified variables."}, {"title": "Method Outline", "content": "Our method assumes that a quantified formula is provided in the prenex normal form\n$\\phi ::= Q_1x_1.Q_2x_2...Q_nx_n.P,$\nwhere $Q_1, Q_2,..., Q_n \\in {\\exists,\\forall}$ are quantifiers and p is a quantifier-free formula. The method proceeds in three steps to check if $\\phi$ is satisfiable (alternatively, to check if $\\phi$ is not satisfiable, we may equivalently check if $\\neg \\phi$ is satisfiable):\n1. Existential Quantifier Elimination via Skolemization. Our method first removes all existential quantifiers from the formula $\\phi$, by replacing each existentially quantified variable $x_i$ with a function over those variables in $x_1,..., x_{i-1}$ that are universally quantified. This process is called Skolemization, and functions used to express the existentially quantified variables via the universally quantified ones are called Skolem functions (Scowcroft 1988). To search for Skolem functions, our method follows what we call a template-based Skolemization approach, where it fixes a template for Skolem function of each existentially quantified $x_i$ in the form of a symbolic polynomial expression over universally quantified variables in $x_1,..., x_{i-1}$. At this stage, the polynomial coefficients are symbolic, and the concrete values of coefficients will be computed in later steps. Computing Skolem functions corresponds to computing witnesses of satisfiability for existentially quantified variables.\n2. Universal Quantifier Elimination via Positivstellens\u00e4tze. Next, our method removes all universal quantifiers from the formula $\\phi$. This is achieved by using Farkas' lemma (Farkas 1902) and Positivstellens\u00e4tze theorems (Handelman 1988; Putinar 1993; Krivine 1964; Stengle 1974) from algebraic geometry. The procedure results in a quantifier-free formula $\\phi_{Free}$ whose satisfiability also implies the satisfiability of the formula $\\phi$."}, {"title": "Quantifier-free Formula Satisfiability Checking", "content": "Finally, our method tries to prove that $\\phi$ is satisfiable by proving that $\\phi_{FREE}$ is satisfiable. This can be realized by using an off-the-shelf SMT solver, since SMT solvers already excel at satisfiability checking for quantifier-free formulas. If $\\phi_{FREE}$ is proved to be satisfiable, then we conclude that $\\phi$ is satisfiable. Otherwise, our method repeats Steps 1-3 for $\\neg \\phi$ to try to prove that $\\phi$ is not satisfiable.\nWe implement our method for satisfiability checking and experimentally compare it against Z3 (de Moura and Bj\u00f8rner 2008) and CVC5 (Barbosa et al. 2022), which are both state-of-the-art SMT solvers. Our experiments show that, when required to find witnesses for existentially quantified variables, our method is able to solve a considerably larger number of quantified formula instances at lower average run-times, both in LRA and in NRA. Moreover, we observe a large number of unique proofs for examples that could not be handled by neither Z3 nor CVC5. Thus, our method provides a significant step forward in tackling satisfiability checking and witness construction for quantified formulas, in LRA and NRA."}, {"title": "Contributions", "content": "Our contributions are as follows:\n1. New Method for Quantifier Elimination. We present a new method for efficient quantifier elimination in quantified formulas in LRA and NRA. Our method is based on a novel template-based Skolemization approach.\n2. Efficient Satisfiability Checking. Based on the above, we design a new method for efficient satisfiability checking for quantified formulas in LRA and NRA. Our method is sound, semi-complete and runs in subexponential time and polynomial space, parametrized by the size of Skolem function templates. To the best of our knowledge, this is the first method that provides all three of these desirable features for LRA and NRA quantified formulas. In contrast, previous sound and complete procedures have doubly-exponential time complexity and at least exponential space complexity. Moreover, our method also produces witnesses of satisfiability for the existentially quantified variables in the quantified formula.\n3. Experimental Evaluation. Our experiments showcase a strong practical performance of our method and a considerable improvement in the number of successful satisfiability checks, runtime, as well as unique satisfiability checks over two state-of-the-art SMT solvers."}, {"title": "Related Work", "content": "The key step in existential quantifier elimination within most SMT solvers and computer-algebra systems is the so-called projection process. For LRA, this projection typically relies on Fourier-Motzkin elimination (Dantzig, Eaves et al. 1972). For NRA, cylindrical algebraic decomposition (CAD) (Collins 1975) is commonly employed. Although these methods are sound and complete, they suffer from a doubly exponential runtime complexity in the number of formula variables. To mitigate this issue, modern SMT solvers incorporate various heuristics and algorithms. Notably, a DPLL-style approach for quantified formulas in both LRA and NRA has been proposed (Jovanovi\u0107 and De Moura"}, {"title": "Problem Statement", "content": "We consider the problems of checking satisfiability of formulas written in LRA and NRA:\n1. Problem 1: LRA Satisfiability. Given a formula $\\phi$ in LRA, check whether it is satisfiable.\n2. Problem 2: NRA Satisfiability. Given a formula $\\phi$ in NRA, check whether it is satisfiable."}, {"title": "Template-based Approach to Skolemization", "content": "In this section, we first recall the definitions of Skolem functions and present classical results from real algebraic geometry that illuminate their properties. We then use these properties as the foundation and justification for our template-based approach to Skolemization in our quantifier elimination procedure for LRA and NRA formulas. In particular, these results justify our choice for using linear and polynomial templates for Skolem functions. These will also be important in establishing the semi-completeness of our satisfiability checking algorithm in the following section.\nSkolem Functions. Given a formula $\\phi(x_1,\\cdots, x_n, y)$ in the first-order theory of reals, a Skolem function of $\\phi$ is defined as a function $f : R^n \\rightarrow R$ such that\n$\\forall x_1... \\forall x_n. \\exists y.\\phi(x_1,\\cdots,x_n,y) \\leftrightarrow \\forall x_1.\\cdots \\forall x_n.\\phi(x_1,\\cdots, x_n, f(x_1,...,x_n))$\nSkolem functions allow us to remove existentially quantified variables from the formula and to replace them with functions over the preceding universally quantified variables.\nSemi-Algebraic Sets. A set $S \\subseteq R^n$ is said to be semi-algebraic, if there exist two finite sets of polynomials $P = \\{P_1,..., p_m\\}$ and $G = \\{g_1,..., g_k \\}$ over $R^n$ such that\n$S = \\{x \\in R^n: P_1(x) \\geq 0,..., P_m(x) \\geq 0, g_1(x) = 0,..., g_k(x) = 0\\}$\nSemi-Algebraic Functions. Let $A \\subseteq R^n$ and $B \\subseteq R^m$ be semi-algebraic sets. A function $f: A \\rightarrow B$ is called semi-algebraic if its graph $\\Gamma(f) := \\{(x, f(x)) | x \\in A\\}$ is a semi-algebraic set in $R^{n+m}$.\nTheorem 1 ((Scowcroft 1988)). Skolem functions for formulas in the first-order theory of reals are semi-algebraic.\nNow, based on classical results from real algebraic geometry on semi-algebraic functions (Bochnak, Coste, and Roy 2013), the following properties hold true for Skolem functions in the first-order theory of reals:\n\u2022 Skolem functions are piecewise continuous (Basu, Pollack, and Roy 2006, Proposition 5.20).\n\u2022 Skolem functions are bounded above by polynomials (Bochnak, Coste, and Roy 2013, Proposition 2.6.2).\nAnother noteworthy aspect of semi-algebraic functions to recall here: polynomial functions are also semi-algebraic.\nThe above properties of Skolem functions motivate us to consider polynomial functions as viable candidates for Skolem functions. In full generality, a Skolem function can be any function whose graph can be described by polynomial inequalities. However, the properties outlined above indicate that Skolem functions are piecewise continuous and bounded above by polynomials. Thus, searching for template-based polynomials as potential Skolem functions is a reasonable approach in our quantifier elimination procedure. This effectively prunes the search space for synthesiz-ing Skolem functions for a given formula."}, {"title": "Algorithm", "content": "We now present our algorithm for satisfiability checking for quantified formulas in LRA and NRA, which is the main contribution of our work. Our method is based on a novel procedure for quantifier elimination in LRA and NRA. Since our underlying algorithm for LRA and NRA is the same with only minor differences in certain steps, in what follows we provide a unified presentation for both theories and only highlight the differences that are specific to LRA or to NRA.\nGoal. We aim for an algorithm for satisfiability checking which satisfies the following desirable properties:\n\u2022 Soundness, which means that the output of our algorithm is guaranteed to be correct. That is, if the algorithm outputs that the formula is \"satisfiable\" (resp. \"unsatisfiable\"), then it is indeed satisfiable (resp. \"unsatisfiable\").\n\u2022 Semi-completeness, which means that our algorithm is guaranteed to return an output whenever satisfiability or unsatisfiability of the quantified formula can be proved by a witnesses of a certain form. In our case, the class of witnesses will be linear/polynomial Skolem functions used in our template-based Skolemization approach.\n\u2022 Sub-exponential time and polynomial space complexity, parametrized by the Skolem function templates size.\n\u2022 Witnesses of satisfiability for existentially quantified variables, since computing these is important in many applications, as discussed in the Introduction.\nAlgorithm Assumptions. In what follows, we assume that we are given a prenex normal form quantified formula\n$\\phi ::= Q_1x_1.Q_2x_2...Q_nx_n.P$\nas defined in the Preliminaries, either in LRA or in NRA. Furthermore, we assume that the predicate p is given in conjunctive normal form (CNF). The CNF assumption will be needed in Step 2 of our algorithm below. Finally, we assume that the user provides a maximal polynomial degree D for Skolem function templates (formally defined below).\nThe rest of this section provides a detailed description of each of the three steps of our algorithm. We also illustrate each step on a running example. Algorithm 1 shows the pseudocode of our satisfiability checking prpcedure."}, {"title": "Step 1: Existential Quantifier Elimination", "content": "In Step 1, the algorithm uses template-based Skolem functions to eliminate existential quantifiers from $\\phi$.\nFor each existentially quantified variable $x_i$ in $\\phi$, let $U_i$ denote the set of all universally quantified variables among $x_1,..., x_{i-1}$. Denote by $M_{i,D} = \\{m_{i,1},...,M_{i,k;}\\}$, the set of all monomials of degree at most D over variables in $U_i$.\nThe algorithm sets up a template for the Skolem function of $x_i$ as a symbolic polynomial of degree at most D over the variables in $U_i$, i.e. as a polynomial expression $f_i(i) = \\sum_{j=1}^{k_i} C_{i,j} \\cdot m_{i,j}$, where $c_{i,j}$'s are template variables that define polynomial coefficients. At this point, the values of template variables are unknown. The concrete real values that give rise to Skolem functions for each $x_i$ will be computed in Step 3 of the algorithm.\nFinally, the algorithm constructs a purely universally quantified formula $\\phi^{UNIV}$ from $\\phi$ as follows. First, for each"}, {"title": "Step 2: Universal Quantifier Elimination", "content": "In Step 2, the algorithm eliminates universal quantifiers from the formula. Since the predicate $p^{UNIV}$ is a boolean combination of polynomial (in)equalities, the purely universally"}, {"title": "Step 3: Quantifier-free Satisfiability Checking", "content": "In Step 3, we use an off-the-shelf SMT solver to check the satisfiability of the system of polynomial inequalities (i.e. a quantifier-free formula) $\\phi_{FREE}$ constructed in Step 2. If the SMT solver finds a solution, then we conclude that $\\phi_{FREE}$ is satisfiable. By Step 2, this implies that $\\phi^{UNIV}$ is satisfiable. Finally, by Step 1, this implies that the original quantified formula $\\phi$ is satisfiable. Otherwise, our algorithm cannot prove satisfiability of the input formula. One can run the same procedure on $\\neg \\phi$ where its satisfiability is equivalent to $\\phi$ being unsatisfiable."}, {"title": "Witnesses for Existentially Quantified Variables", "content": "To conclude this section, we highlight that when the algorithm solves the system of polynomial constraints $\\phi_{FREE}$ in Step 3, it computes concrete real values for template polynomial coefficients in Skolem functions constructed in Step 1. Hence, it computes witnesses of satisfiability for existentially quantified variables, which was one of the goals of our algorithm design that is important in many applications, as discussed in the Introduction."}, {"title": "Experimental Results", "content": "We implemented a prototype of our method for satisfiability checking in a tool called QuantiSAT\u00b9, and compared it against two state-of-the-art SMT solvers that support satisfiability checking for quantified LRA and NRA formulas. The goal of our experiments is to answer the following two research questions: (1) How well does our method perform in comparison to the existing tools, in terms of the number of solved instances and runtime? (2) Is our method able to compute witnesses for existentially quantified variables?"}, {"title": "Implementation Details", "content": "Our tool QuantiSAT is written in Python and it uses PolyHorn (Chatterjee et al. 2024) as a back-end tool for applying the Positivstellens\u00e4tze theorems in Step 2 of the algorithm. It uses Z3 (de Moura and Bj\u00f8rner 2008) and MathSAT5 (Cimatti et al. 2013) for solving the quantifier-free formulas derived in Step 3 of the algorithm. For the experiments, we used a Debian 12 machine with a 2.45GHz AMD EPYC 7763 CPU and 16 GB of RAM. In our experiments, we ran QuantiSAT with polynomial degrees for Skolem function templates equal to $D \\in \\{0,1,2\\}$."}, {"title": "Benchmarks", "content": "We consider three benchmark suites of quantified formulas in LRA and NRA:\n1. The Keymaera benchmark suite, taken from SMT-COMP (Bobot et al. 2023), contains 222 LRA formulas and 3813 non-linear formulas. However, many of the non-linear formulas are actually not expressible in NRA, as they contain the division operator which is not supported by NRA. Removing these results in 511 NRA formulas.\n2. The Mjollnir (Monniaux 2010) benchmark suite consists of 3600 LRA formulas. This benchmark suite was used for the evaluation of the tool Mjollnir, which was later outperformed by Z3 (Bj\u00f8rner and Janota 2015), hence we do not include the Mjollnir tool in our results.\n3. The PolySynth (Goharshady et al. 2023) benchmark suite consists of 32 NRA formulas. PolySynth is a program synthesis tool, which reduces the program synthesis problem to computing a satisfying assignment for a quantified formula in NRA. In our evaluation, we collected 32 quantified formulas that arise in their program synthesis procedure and used them to evaluate the effectiveness of our method and the baselines on these NRA benchmarks."}, {"title": "Experimental Setup and Baselines", "content": "We compare QuantiSAT against two state-of-the-art SMT solvers Z3 (de Moura and Bj\u00f8rner 2008) and CVC5 (Barbosa et al. 2022). The timeout for each tool on each benchmark is set to 10 minutes. Since we are not only interested in satisfiability checking but also in computing witnesses for existentially quantified variables that prove their satisfiability, in order to instruct Z3 and CVC5 to compute these witnesses, we provide them with two different variants of our benchmarks:\n\u2022 Uninterpreted Skolemization. In the first variant, we only require the baselines to compute some witnesses for existentially quantified variables, not necessarily being polynomial expressions. Hence, we replace each existentially quantified variable by an uninterpreted predicate over the preceding universally quantified variables. For Z3, we denote the resulting baseline by Z3-uSk. Since CVC5 does not support uninterpreted predicates, we could not evaluate it on this variant. Our goal here is to evaluate the effectiveness of our template-based Skolemization as opposed to general Skolem functions.\n\u2022 Template Skolemization. In the second variant, we ask our baselines to compute witnesses for existentially quantified variables in terms of polynomials over universally quantified variables. Hence, rather than only using uninterpreted predicates, in this variant we use the same polynomial Skolem function templates as in our QuantiSAT. We consider polynomial degrees $D \\in \\{0, 1, 2\\}$, and count each instance as solved by the baseline if it can be solved for at least one of these three polynomial degrees. For Z3, we denote the resulting baseline by 23-tSk. For CVC5, we denote the resulting baseline by CVC5-tSk. Our goal here is to evaluate the effectiveness of our quantifier elimination method based on Positivsellens\u00e4tze theorems, as opposed to other quantifier elimination procedures implemented in these SMT solvers."}, {"title": "Results on LRA Benchmarks", "content": "The first two rows of Table 1 summarize our experimental results on LRA benchmarks. It can be seen that average runtimes of all tools are comparable and quite small (differing by only a few seconds). The most important highlight of the table is the number of instances and the unique instances solved by each tool, whereas runtimes of our and competing tools are the secondary aspect. We summarize our results on the LRA benchmarks below:\n\u2022 Successful Instances. (i) Our tool successfully solves all LRA benchmarks from the Keymaera benchmark suite, while 23-uSk and CVC5-tSk fail on several cases. The fact that QuantiSAT and 23-tSk solve all instances shows that the template-based approach to Skolemization provides an efficient and highly promising approach to quantifier elimination in LRA. (ii) On the Mjollnir benchmarks, QuantiSAT outperforms all the baselines with a gap of at least 284 instances, while solving 157"}, {"title": "Results on NRA Benchmarks", "content": "The last two rows of Table 1 summarize our results on NRA benchmarks. Similar to the LRA results, the average runtimes of the tools are small and comparable. The most interesting distinction comes in the number of instances and unique instances solved by tools:\n\u2022 Successful Instances. (i) On the NRA benchmarks from the Keymaera benchmark suite, our tool outperforms the baselines by solving 98% of the instances, which includes 22 instances uniquely solved by our tool. We be-"}, {"title": "Conclusion", "content": "We presented a novel method for satisfiability checking for quantified formulas in LRA and NRA. Our method is based on a novel and efficient quantifier elimination procedure. The method is sound, semi-complete, and runs in parameterized subexponential time and polynomial space. In contrast, previous sound and complete procedures have doubly-exponential time and at least exponential space complexity. Our method is also able to compute witnesses for existentially quantified variables, which is important for many applications. We implemented our method in a prototype tool called QuantiSAT. Our QuantiSAT outperforms two state-of-the-art SMT solvers on the number of solved instances and is able to prove a significant number of new instances that other tools could not handle. Hence, we believe that our method provides a significant step forward in satisfiability checking for quantified formulas in LRA and NRA as well as in efficient algorithms for quantifier elimination.\nOur work opens several interesting future work directions. First, it would be interesting to consider further improvements to the template-based Skolemization method proposed in this work. These could include more general templates, such as piecewise linear and polynomial expressions. Second, it would be interesting to study the applicability of the template-based Skolemization technique to quantifier elimination in other theories, beyond LRA and NRA."}, {"title": "Background and Theorems on Satisfiability of Polynomial Entailment", "content": "In this section, we provide an overview of the mathematical concepts and results on satisfiability of polynomial entailment, that we use in Step 2 of our algorithm"}, {"title": "Postivstellens\u00e4tze", "content": "Positivstellens\u00e4tze are classical theorems from real algebraic geometry that provide an algorithmic approach to the problem of determining whether a polynomial is positive over a semi-algebraic set. Before presenting the specific results we used, it is important to note that there are various generalizations of Positivstellens\u00e4tze, each applicable in different contexts. In our work, we focus on the versions that are most relevant and efficient for the development of our algorithm.\nWe begin with Farkas' lemma, which characterizes the non-negativity of a linear expression over a set of linear inequalities."}, {"title": "Theorem 3 (Farkas' Lemma (Farkas 1902)).", "content": "theorem-Farkas Consider a set $V = \\{x_1,...,X_r\\}$ of real-valued variables and the following system $\\Phi$ of equations over V:\n$\\Phi :=\n\\begin{cases}\na_{1,0} + a_{1,1}x_1 + ... + a_{1,r} \\cdot x_r \\geq 0 \\\\\n... \\\\\na_{m,0} + a_{m,1}x_1 + ... + a_{m,r} \\cdot x_r \\geq 0\n\\end{cases}$\nWhen $\\Phi$ is satisfiable, it entails a linear inequality\n$\\psi := c_0 + c_1 \\cdot x_1 + \u00b7\u00b7\u00b7 + c_r. x_r\\geq 0$\nif and only if $\\psi$ can be written as non-negative linear combination of the inequalities in $\\Phi$ and the trivial inequality $1\\geq 0$, i.e. if there exist non-negative real numbers $\\gamma_0,..., \\gamma_m$ such that\n$\\begin{cases}\nc_0 = \\sum_{i=1}^{k} \\gamma_i a_{i,0}; \\\\\nc_1 = \\sum_{i=1}^{k} \\gamma_i \\cdot a_{i,1}; \\\\\n... \\\\\nc_r=\\sum_{i=1}^{k} \\gamma_i a_{i,r}.\n\\end{cases}$\nMoreover, $\\Phi$ is unsatisfiable if and only if -1 $\\geq$ 0 can be derived as above."}, {"title": "Definition 1 (Semi-group generated by $\\Phi$).", "content": "Consider a set $V = \\{x_1,... X_r\\}$ of real-valued variables and the following system of linear inequalities over V:\n$\\Phi :=\n\\begin{cases}\na_{1,0} + a_{1,1}x_1 + . . . + a_{1,r} \\cdot x_r \\geq 0 \\\\\n... \\\\\na_{m,0} + a_{m,1} \\cdot x_1 + ... + a_{m,r} \\cdot x_r \\geq 0\n\\end{cases}$\nwhere $ \\in \\{>,\\geq\\}$ for all 1 < i < m. Let $g_i$ be the left hand side of the i-th inequality, i.e. $g_i(x_1, ..., x_r) := a_{i,0}+ a_{i,1}x_1 + ... a_{i,r} \\cdot x_r$. The semi-group of $\\Phi$ is defined as:\n$SG(\\Phi)\n:=\\begin{cases}\\prod_{i=1}^{m} g_i^{k_i}  |  m \\in N  \\land \\forall i k_i \\in NU\\{0\\}\\}.\n\\end{cases}$\nWe define $SG_d(\\Phi)$ as the subset of polynomials in $SG(\\Phi)$ of degree at most d."}, {"title": "Theorem 4 (Handelman's Theorem (Handelman 1988)).", "content": "theoremHandelman Consider a set $V = \\{x_1,...,x_r\\}$ of real-valued variables and the following system of equations over V:\n$\\Phi :=\n\\begin{cases}\na_{1,0} + a_{1,1}x_1 + . . . + a_{1,r} \\cdot x_r \\geq 0 \\\\\n... \\\\\na_{m,0} + a_{m,1} x_1 + ... + a_{m,r} \\cdot x_r\\geq 0\n\\end{cases}$\nIf $\\Phi$ is satisfiable, $SAT(\\Phi)$ is compact, and $\\Phi$ entails a polynomial inequality $g(x_1,...,x_r) > 0$, then there exist non-negative real numbers $\\Upsilon_1,... \\Upsilon_u$ and polynomials $h_1,..., h_u \\in SG(\\Phi)$ such that:\n$g = \\sum_{i=1}^{u} \\Upsilon_i h_i.$"}, {"title": "Theorem 5 (Putinar's Positivstellensatz (Putinar 1993)).", "content": "Given a finite collection of polynomials $\\{g,g_1,...,g_k\\} \\in R[x_1,..., x_n]$, let $\\Phi$ be the set of inequalities defined as\n$\\Phi: \\{g_1 \\geq 0,..., g_k \\geq 0\\}.$\nIf $\\Phi$ entails the polynomial inequality g > 0 and there exist some i such that $SAT(g_i \\geq 0)$ is compact, then there exist polynomials $h_0, ..., h_k \\in R[x_1,..., x_n]$ such that\n$g = h_0 + \\sum_{i=1}^{k} h_i g_i$\nand every hi is a sum of squares. Moreover, $\\Phi$ is unsatisfi-able if and only if \u22121 > 0 can be obtained as above, i.e. with g = -1."}, {"title": "Theorem 6", "content": "Let $\\alpha$ be the vector of all $\\binom{n+d}{d}$ monomials of de-gree less than or equal to d over the variables $\\{x_1,...,x_n\\}$. A polynomial $p\\in R[x_1,...,x_n]$ of degree 2$\\, d$ is a sum of squares if and only if there exist a positive semidefinite ma-trix Q of order $\\binom{n+d}{d}$ such that $p = a^T \\cdot Q \\cdot a$."}, {"title": "Algorithm Step 2 Details", "content": "Using these theorems, we now present the mathematical foundations of Step 2 of our algorithm, which reduces the problem of checking satisfiability of a purely universally quantified formula to solving a system of polynomial inequalities. In particular, consider entailments of the form\n$C\\forall x f_1 \\geq 0 \\land ... \\land f_k \\geq 0  \\rightarrow g > 0, $"}, {"title": "Krivine-Stengle Positivstellensatz", "content": "This is the most general version of the Positivstellensatz. One can view the Kriv-ine-Stengle Positivstellensatz (Krivine 1964; Stengle 1974) as a generalization of Putinar's Positivstellensatz, Handel-man's theorem, and the real Nullstellensatz. Note that in the earlier versions of the Positivstellensatz we considered, had assumptions about compactness and the strictness of in-equalities in the conclusions. However, to ensure the com-pleteness of our algorithm, we require a version of the Posi-tivstellensatz that can work without these assumptions.\nBefore we present the theorem, we need to recall the fol-lowing definition of cone."}, {"title": "Definition 2 (Cone).", "content": "Let $F = \\{f_1,..., f_m \\}$ be a set of poly-nomials in R"}]}