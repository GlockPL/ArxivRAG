{"title": "A Novel Task-Driven Method with Evolvable Interactive Agents Using Event Trees for Enhanced Emergency Decision Support", "authors": ["First Xingyu Xiao", "Second Peng Chen", "Third Ben Qi", "Fourth Jingang Liang", "Fifth Jiejuan Tong", "Sixth Haitao Wang"], "abstract": "As climate change and other global challenges increase the likelihood of unforeseen emergencies, the limitations of human-driven strategies in critical situations become more pronounced. Inadequate pre-established emergency plans can lead operators to become overwhelmed during complex systems malfunctions. This study addresses the urgent need for agile decision-making in response to various unforeseen incidents through a novel approach, EvoTaskTree (a task-driven method with evolvable interactive agents using event trees for emergency decision support). This advanced approach integrates two types of agents powered by large language models (LLMs): task executors, responsible for executing critical procedures, and task validators, ensuring the efficacy of those actions. By leveraging insights from event tree analysis, our framework encompasses three crucial tasks: initiating event subevent analysis, event tree header event analysis, and decision recommendations. The agents learn from both successful and unsuccessful responses from these tasks. Finally, we use nuclear power plants as a demonstration of a safety-critical system. Our findings indicate that the designed agents are not only effective but also outperform existing approaches, achieving", "sections": [{"title": "1 Introduction", "content": "In the face of escalating global challenges, such as climate change, the frequency and severity of unforeseen emergencies are expected to rise[1]. This trend underscores the inherent limitations of traditional, human-driven strategies in managing critical situations, particularly in the context of safety-critical industries like nuclear power plants[2]. The inadequacy of pre-established emergency response plans often leads to overwhelming circumstances for operators, especially during system malfunctions where swift and accurate decision-making is crucial.\nThe traditional decision-support method is multi-criteria decision-making (MCDM). Although it is highly effective, the method is time-consuming and complex [3, 4], making it incapable of providing a rapid response to unforeseen situations. The popular real-time online decision support system for nuclear power plant emergencies (RODOS) has utilized this method for decision-making [5]. This method often includes four steps, construct a criteria system and case description, determine suitable alternatives for achieving the goals of the problems, and make final decision. Specific methods of MCDM include analytic hierarchy process (AHP) [6], technique for order preference by similarity to ideal solution (TOPSIS) [7], preference ranking organization method for enrichment evaluations (PROMETHEE) [8], simple additive weighting (SAW) [9], visekriterijumsko kompromisno rangiranje (VIKOR) [10], complex proportional assessment (COPRAS) [11], and multi-attribute utility theory (MAUT) [12] and so on. Applications of MCDM in NPPs are primarily concentrated on site selection, post-incident recovery, and off-site emergency response[13]. Moreover, to ensure the safety of NPPs, experts have developed a series of works, including qualitative risk assessment, and emergency plans. However, there is currently a scarcity of work that integrates both approaches [13].\nThe current approaches for decision support remain inherently subjective. This subjectivity arises from the fact that emergency plans are ultimately derived from human-generated content, making them susceptible to certain limitations. Large language models (LLMs) have consistently outperformed average human benchmarks across various metrics [14]. They leverage vast databases to function as comprehensive knowledge repositories. Additionally, They have increasingly been deployed as expert assistants in various fields, such as medicine [15], education [14], and law [16]. Thus, we aim to capitalize on the extensive knowledge embedded in LLMs to minimize the inherent subjectivity in the formulation of emergency plans.\nIn this study, we develop a zero-shot strategy named EvoTaskTree (a task-driven method with evolvable interactive agents using event trees for enhanced emergency"}, {"title": "2 Event Tree Theory in Emergency Decision Support", "content": "This section introduces the foundational theories of event trees, providing an overview of their basic principles. Additionally, it will explore how event trees are integrated"}, {"title": "Theorem 1 (Event tree analysis)", "content": "Event tree analysis (ETA) is frequently used in conjunction with fault tree analysis (FTA) for quantitative risk analysis (QRA). This method collaboratively develops a logical relationship among the events leading to an accident and estimates the associated risk. In the event tree, the unwanted event is named as an initiating event, and the follow-up consequences are termed as events or safety barriers [17].\nSpecifically, ETA is a technique used to describe the consequences of initiating an event and estimate the likelihood (frequency) of possible outcomes of the event. The ETA represents the dichotomous conditions (e.g., success/failure, true/false, or yes/no) of the initiating event until the subsequent events lead to the outcome events. Kabir [18] and Lees [19] provide a detailed procedure for constructing and analyzing the ETA for a process system.\nWith an assumption that the events are independent, deterministic and probabilistic approaches use the equation ?? to analyze event trees. Pi denotes the probability of ith (i = 1, 2, 3, ..., n) events, \\u03bb denotes the frequency for the initiating event, \\u03bbi denotes the frequency for outcome events, and j denotes the number of success events.\n\n\\lambda_{i}=\\lambda \\times \\prod_{i=1}^{j} P_{i} \\times \\prod_{i=j}^{n}\\left(1-P_{i}\\right)\n\n\nNext, a simple system from a nuclear power plant is introduced as a case study to demonstrate the characteristics of fault tree analysis.\nExample 1. A simplified nuclear power system is illustrated in figure 2, which pri- marily consists of two subsystems: the safe injection system and the containment spray system. The core meltdown can only be prevented when both subsystems are functioning properly simultaneously."}, {"title": "Proposition 2.", "content": "The emergency decision support problem in the face of unexpected situations can be translated into the problem of rapidly constructing an event tree in the face of unexpected situations.\nProof. In responding to emergencies at an NPP, the ultimate goal of emergency mea- sures is to prevent the core meltdown. The event tree provides us with the progression of events within the system under different conditions when facing unexpected situa- tions. Therefore, if our proposed emergency plan can guide each header event towards a successful consequence, we can completely prevent core meltdown and effectively manage unexpected event.\nFor example 1, if through our emergency response, we set P\u2081 and P2 to 1, then 1-P\u2081 and 1- P2 will become 0. This results in a zero probability of a core meltdown. It indicates that our emergency measures are effective. Therefore, when dealing with an unforeseen emergency, if we can obtain information from the event tree accurately and effectively, we can develop robust emergency response strategies. Consequently, we trace the task of emergency decision support back to the analysis of initiating events subevents within the event tree, as well as the analysis of header events."}, {"title": "3 Methodology", "content": "Evolution is a critical feature of our EvaTaskTree. This section will provide a detailed explanation of the evolution process, along with specific implementation details regarding inference and evaluation."}, {"title": "3.1 Evolution", "content": "The whole process of our EvoTaskTree is shown in Figure 5 (a). EvoTaskTree is a parameter-free strategy. For each task, the task executors and task validators interact and iterate continuously to complete it. The three tasks are interconnected through a task flow, collectively fulfilling the decision-support function. Figure 5 (b) provides a detailed description of the agent-agent interaction. There are two important modules in this strategy, namely the record library and the experience base. Successful cases, which are to be used as references for future interventions, are compiled and stored in the record library. For cases where treatment fails, the results will be added to the experience base. In the three task simulations, we employ dense retrievers to retrieve related historical records and guiding principles, assist- ing agents in delivering better results. As experience and records are accrued, they are actively applied, with both the record library and the experience base being perpetually updated. Additionally, the determination of correctness is autonomously completed by the agent. The complete code is available on the GitHub website (https://github.com/Crystalxy123/EvoTaskTree/tree/master)."}, {"title": "Record Library Building.", "content": "During the process of completing the tasks, it is highly beneficial for operators to reference previously validated records. These records contain abundant knowledge and demonstrate the rationale behind accurate and ade- quate responses to diverse emergencies. Therefore, we propose to build record libraries for agents to sharpen their abilities. The library is structured in the format of question- answer pairs, where the question details the fault condition requiring task completion, and the answer contains the validated response. As shown in the upper part of Figure 5, for each generated answer from agents, the question-answer pair will be added to the record library if the answer is correct. When a new query is coming, it will search for related records from the library based on dense retrieval techniques using [23]. Each task has its private record library and experience base to avoid irrelevant records uti- lization. For the simulated three tasks, we aim to enable agents to gain professional experience from historical records."}, {"title": "Experience Base Expanding.", "content": "Learning from errors is also crucial for the growth of operators. We believe that LLM-powered professional agents can engage in self- reflection from these errors, distilling relevant principles (experience) to ensure correct task completion when encountering similar issues in future cases. We draw inspiration from a previous study [24] to allow doctor agents to learn from failures. As shown in the below part of Figure 5, if the answer is wrong, the question-answer pair be added to the experience base. To eliminate the influence of noise and maximize the utilization of the experience base, we incorporate additional judgment when utilizing experience. This judgment involves evaluating whether the most similar experience retrieved based on semantic similarity."}, {"title": "3.2 Inference", "content": "Based on the record library and experience base introduced above, we enhance the prompt for the agents using successful and unsuccessful responses. We get the most similar ones by comparing existing queries in the record library and experience base with the current query. Then, the chosen successful and unsucessful question-answer pair are arranged for few-shot examples in the prompt. Both records and experience are retrieved using cosine similarity and text is embedded into vector space by the \"text-embedding-ada-002\" model provided by OpenAI."}, {"title": "3.3 Evalution", "content": "As for the evaluation, to ensure consistency in evaluation, the results of all test sets were manually annotated by experts. Due to the unique characterization of safety- critical industries, we aim to achieve 100% accuracy in our results. Consequently, we categorized all results into two types: correct cases and incorrect cases. The accuracy is then determined by the proportion of correct cases within the test set."}, {"title": "4 LLM-based EvoTaskTree Simulacrum in Nuclear Power Plant", "content": "To effectively demonstrate the applicability of our EvoTaskTree in industrial settings, we have chosen nuclear power plants (NPPs) as a representative example. NPPs play a crucial role in the global energy landscape due to their capacity to produce large amounts of electricity with relatively low greenhouse gas emissions. Many countries adopt a positive attitude toward nuclear energy. Given the severe consequences of potential accidents in NPPs, it is crucial to support operators in making swift decisions during emergency situations."}, {"title": "4.1 Environment Settings", "content": "We first develop a comprehensive NPP simulation environment inspired by previous studies[20, 21]. The NPP sandbox is implemented using Pygame[22], a cross-platform library of Python modules specifically designed for the development of video games. Finally, as shown in Figurel, it illustrates a simplified NPP system. The overall system functions by transferring heat from the reactor core, where nuclear fission takes place. Heat is transferred through the pressurizer to maintain system pressure. The heat then moves to the steam generator, where water is converted to steam. Finally, the steam is sent to the turbine, where it drives mechanical power generation. The pumps ensure a continuous flow of coolant, and the safety injection system acts as a critical safeguard mechanism."}, {"title": "4.2 Definition of Decision Support Tasks", "content": "To support emergency strategies for industries, as we illustrated in section2, we have designed three interdependent tasks: initiating event subevent analysis, event tree header event analysis, and decision recommendations. These tasks are closely related and collectively form an essential part of the industries response system. Task1 primar- ily focuses on the reclassification of events. Task2 requires listing the header events, including specific event information, and ensuring the sequence of events follows their developmental progression. Task3 is our final critical task, providing decision support. The contents of each task are as follows.\n\u2022 Task1. Initiating event subevent analysis identifies. This provides a foundational analysis for task2 and task3. For task1, the inputs are the initial event name and description, and the output is the subevent of the initial event.\n\u2022 Task2. Event tree header event analysis involves identifying and listing header events that could lead to accidents. This task analyzes the subsequent events systematically. The inputs are the initial event, initial event description, subevent (generated from task1), and event process and system response, while the output is the event tree header event.\n\u2022 Task3. Decision recommendations involves developing and providing specific oper- ational decisions to address and mitigate the adverse impact after identifying and analyzing the potential subevents and header events. The inputs are initial event, initial event description, subevent (generated from task1), event process and system"}, {"title": "4.3 Agent Roles", "content": "We designed two types of roles for each task in the NPP simulacrum, including ini- tial event subevent analysis agent, initial event subevent verification agent, event tree header event analysis agent, event tree header event verification agent, strategy development agent, and strategy validation agent.\nInitial Event Subevent Analysis Agent. The initial event subevent analysis agent identifies subevents of initiating events. The agent's primary task is to examine detailed descriptions and cases, both correct and incorrect. For incorrect cases, the agent must summarize feedback to prevent recurrence. For correct cases, the agent should use the logic applied. When correct and incorrect cases are unavailable, the agent must analyze the subevents of initiating events.\nInitial Event Subevent Verification Agent. The initial event subevent vali- dation agent is responsible for verifying the accuracy of subevents identified by the analysis agent. Based on the initial event and its detailed description, the agent deter- mines whether the identified subevents match the actual subevents. The criteria for judgment include several key aspects. This ensures a thorough and accurate validation process.\nEvent Tree Header Event Analysis Agent. The event tree header event anal- ysis agent specializes in identifying and listing the header events in event trees. The agent must also summarize feedback for incorrect cases to avoid repeated mistakes and reference the logic used in correct cases. Continuous improvement is encouraged by using feedback from incorrect cases to enhance future responses.\nEvent Tree Header Event Verification Agent. The event tree header events verification agent validated the accuracy of event tree header events provided by the header event analysis agent. This agent ensures that the identified header events match the actual event progression within NPPs. The verification process involves several key steps to maintain the reliability and integrity of the analysis. This contributes significantly to the accuracy and safety of operations.\nStrategy Development Agent. The strategy development agent in NPPs is responsible for determining specific actions that operators should execute based on initial events, their descriptions, subevents, the sequence of events, and examples of correct and incorrect responses. The agent must ensure that the actions are detailed and accurate. For incorrect cases, the agent needs to summarize feedback to prevent recurrence, using the logic from correct cases to inform the analysis.\nStrategy Validation Agent. The strategy validation agent is responsible for assessing the recommendations provided by NPP strategy advisors. This agent deter- mines if the recommendations align with the actual operator's suggestions. It ensures the safety and reliability of NPP operations through accurate validation of strategic advice."}, {"title": "5 Simulation and Results", "content": ""}, {"title": "5.1 Experimental Setting", "content": "Dataset. Our comprehensive dataset distribution is illustrated in Table 1. The dataset encompasses 11 distinct types of common initiating events observed in NPPs: loss of coolant accident (LOCA) with 5 instances, loss of heat sink accident (LOHSA) occurring 3 times, loss of feedwater event (LOFW) noted twice, and loss of offsite power (LOOP) occurring once. Additionally, anticipated transient without scram (ATWS) is the most frequent event, recorded 7 times. The dataset also includes 2 instances each of main feedwater line break (MFLB) and steam generator tube rupture (SGTR). The main steam line break (MSLB) has 6 occurrences, whereas the loss of DC power accident (LODC) is recorded 3 times. Moreover, the combination of main steam line break and steam generator tube rupture (MSLB+SGTR) is observed 5 times. Lastly, the secondary loop transient event (SLTE) is noted twice. For task1, there are 13 data points in total, with 10 used for training and 3 for testing. For task2 and task3, there are 38 data points in total, with 31 used for training and 7 for testing."}, {"title": "Implementation Details.", "content": "For each query, the number of utilized records and principles after retrieving is set to 1, i.e., only the top 1 relevant experience and records are adopted in the prompt. The record library and experience base are training from empty and will be updated dynamically during training to support further decisions. So the training of an NPP strategy development agent is similar to a new operator improving her/his skills by practicing. All of our simulation experiments leverage GPT-4o as the framework's backbone model."}, {"title": "5.2 Experience Accumulation", "content": "During the iterative process, we designed a validation agent that provides feedback both with and without reasons to discuss the impact of these reasons on accuracy. As illustrated in figure 6, it depicts the growth in the number of experience-based and"}, {"title": "5.3 Experimental Results", "content": "In this section, we discuss the performance of the experience base and the record library on the test dataset. We evaluate both systems in scenarios with and without reasoning of the record library and the experience base. These results correspond to three different tasks. We analyze the proportion of correct feedback within these results. Additionally, we examine the impact of providing reasons during testing. We investigate how the presence or absence of reasoning affects the agents' effectiveness.\nAs shown in Figure 7 (a), the line representing feedback with reasoning consistently maintains a higher accuracy across almost all points, indicating that the inclusion of reasoning enhances the validation agents' performance. The accuracy of feedback without reasoning exhibits significant fluctuations. Conversely, the reasoning-included feedback line shows less variance and maintains a relatively stable and higher accuracy throughout, except for a notable dip around sample 6. Additionally, both systems ultimately achieved an accuracy of 1.\nAs shown in Figure 7 (b), the feedback accuracy without reasoning starts high, dips significantly at the fifth sample, and then shows a pattern of recovery and stability. In contrast, the feedback accuracy with reasoning starts much lower but shows a"}, {"title": "5.4 Case Study", "content": "To better demonstrate the effectiveness of our EvoTaskTree, this section presents a case study. Figure10 represents a case study describing an initial event involving a main steam line break combined with a steam generator tube rupture accident. Our overall approach employs a decision support method that integrates event tree prior knowledge."}, {"title": "6 Discussion and Analysis", "content": "In this section, we compare and discuss the performance of GPT-3.5 and GPT-4o on three tasks. We designed and compared four approaches: Vanilla, CoT, NPPprompt, and our EvoTaskTree. The Vanilla approach involves no prompts, with only a simple task description. The CoT approach builds on Vanilla by adding model-guiding con- tent. The NPPprompt approach incorporates our designed agent prompt information, as detailed in Section 4.3. The EvoTaskTree approach is based on the framework out- lined in Section 3.1. The evaluation criteria and reference content are consistent with those in Section 3.2.\nFurthermore, for the subsequent tests, we adopted the best strategy derived from Section 5.3. Specifically, for task1 and task2, we use prompts with reasons but without reasons during the generation process. For task3, we use prompts and generation processes that both include reasons.\nAs shown in Table 2, in CoT, due to the limited data with only three items in the test set, the results exhibit considerable variability. For GPT-3.5 no reason, the model generated empty content with too many irrelevant tasks in the results. In contrast, GPT-3.5 reason produced entirely irrelevant content. For GPT-4o no reason, two out of the three tasks were answered correctly, though one task still contained irrelevant content. Conversely, GPT-4o reason performed worse than GPT-4o no reason, with results similar to GPT-3.5 reason, where the content was overly scattered. Additionally, in both task1-prompt and task1-vanilla tests, the primary cause of errors was the overly scattered content that deviated from the correct answers."}, {"title": "7 Conclusion", "content": "In this paper, we integrated the prior knowledge from the event tree analysis in QRA with emergency decision support, proposing a novel approach named EvoTaskTree. It is a LLM-driven simulacrum includes two types of roles (task executors and task validators), and the performance of these agents is evaluated and discussed across three related tasks: initial event subevent analysis, head event analysis, and decision support. This approach encompasses two types of knowledge: one is knowledge of successes, which is stored in the record library, and the other is knowledge of failures, which is preserved in the experience base. The primary conclusions are as follows.\n\u2022 The integrated analysis of event tree analysis and emergency decision support can effectively accomplish emergency decision support. Despite the inherent inaccuracies of LLMs, the accuracy of these tasks can even reach state-of-the-art performance at 100%. Specifically, if the initial subevent analysis and head event analysis tasks are completed correctly, the strategy support test set can quickly converge to 100% accuracy.\n\u2022 Among the proposed three tasks, the event tree header event analysis is the most challenging. During the training process of this task, EvoTaskTree requires multiple iterations.\n\u2022 Compared to other strategies such as Vanilla, CoT, NPPprompt, onlyRL, and onlyEB, EvoTaskTree demonstrates superior performance and significantly outper- forms these strategies.\n\u2022 Furthermore, we find that the model performs well when the reference experience base and record library include reasons, and the feedback during testing does not include reasons for the initial subevent analysis and head event analysis. Conversely, as for decision recommendations, the model performs better when the reference"}, {"title": "Declarations", "content": "Funding\nThe research was supported by the Innovation Funds of CNNC-Tsinghua Joint Center for Nuclear Energy R&D (Project No. 20202009032) and a grant from the National Natural Science Foundation of China (Grant No. T2192933).\nConflict of interest/Competing interests\nThe authors declare that they have no conflict of interest.\nEthics approval and consent to participate\nThis research did not involve any studies with human participants or animals performed by any of the authors.\nConsent for publication\nAll authors have reviewed and approved the manuscript for publication. Furthermore, since this study did not involve human participants or animals, specific consent for publication is not applicable.\nData availability\nThe datasets generated and/or analyzed during the current study are available from the corresponding author upon reasonable request.\nMaterials availability\nNot applicable.\nCode availability\nThe complete code is available on the GitHub website (https://github.com/Crystalxy123/EvoTaskTree/tree/master)\nAuthor contribution\nXiao Xingyu: Methodology, Software, Formal analysis, Data Curation, Visualization, Validation, Writing- Original draft preparation. Chen Peng: Software, Methodology, Investigation. Qi Ben: Investigation, Writing - Review and Editing. Liang Jingang:"}]}