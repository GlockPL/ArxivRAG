{"title": "Shared Autonomy for Proximal Teaching", "authors": ["Megha Srivastava", "Reihaneh Iranmanesh", "Yuchen Cui", "Deepak Gopinath", "Emily Sarah Sumner", "Andrew Silva", "Laporsha Dees", "Guy Rosman", "Dorsa Sadigh"], "abstract": "Motor skill learning often requires experienced professionals who can provide personalized instruction. Unfortunately, the availability of high-quality training can be limited for specialized tasks, such as high performance racing. Several recent works have leveraged AI-assistance to improve instruction of tasks ranging from rehabilitation to surgical robot tele-operation. However, these works often make simplifying assumptions on the student learning process, and fail to model how a teacher's assistance interacts with different individuals' abilities when determining optimal teaching strategies. Inspired by the idea of scaffolding from educational psychology, we leverage shared autonomy, a framework for combining user inputs with robot autonomy, to aid with curriculum design. Our key insight is that the way a student's behavior improves in the presence of assistance from an autonomous agent can highlight which sub-skills might be most \"learnable\" for the student, or within their Zone of Proximal Development. We use this to design Z-COACH, a method for using shared autonomy to provide personalized instruction targeting interpretable task sub-skills. In a user study (n=50), where we teach high performance racing in a simulated environment of the Thunderhill Raceway Park with the CARLA Autonomous Driving simulator, we show that Z-COACH helps identify which skills each student should first practice, leading to an overall improvement in driving time, behavior, and smoothness. Our work shows that increasingly available semi-autonomous capabilities (e.g. in vehicles, robots) can not only assist human users, but also help teach them.", "sections": [{"title": "I. INTRODUCTION", "content": "Imagine a young adult who wishes to learn how to drive, borrowing her family's semi-autonomous vehicle to practice in their neighborhood. In real time, the vehicle estimates the skill capabilities and quality of this student's driving, while also identifying what driving skills are required for the road ahead. As she encounters novel driving situations, the vehicle's semi-autonomous control features are adjusted to ensure the driver is appropriately challenged. This assistance is personalized; while she may be overly cautious and needs to learn to let go of the brake pedal, another novice driver might be overconfident and stay constantly at a high throttle. Over time, as the driver achieves proficiency in one skill (e.g. steering), the vehicle is able to identify and assist her in learning more complex control maneuvers. In this shared autonomy setting, the vehicle is providing tailored assistance not only for safety and comfort, but also to make sure the student improves their driving skills.\nShared autonomous control is a promising paradigm for humans to achieve near-optimal task performance by offloading some decision-making to an autonomous agent [2, 37]. However, similar to how generative AI tools can have negative long-term effects on student learning [5], a significant concern with shared autonomy is the gradual loss of human control skills due to over-reliance on intelligent and assistive systems [17]. While prior work has proposed \"learning-compatible\" forms of shared autonomy [7], they do not consider complex domains where learning entails a structured progression through a hierarchy of skills (e.g. learning steering before mastering sharp turns).\nInspired by the notion of scaffolding within the broader education literature, we propose optimizing the form of intelligent assistance to enhance skill development at a level that is appropriately challenging for a student, aligned with the concept of the Zone of Proximal Development (ZPD) [51]. The ZPD is loosely defined as the gap between a student's actual developmental level, determined from independent problem-solving, and the level of potential development, based on their performance when problem-solving with assistance [51]. However, the impact of the type of assistance within scaffolding teaching has traditionally been overlooked, often taking the form of simple interventions such as verbal feedback [30]. In light of the increasing interaction between autonomous systems and humans, we take a new perspective with shared autonomy: can the way a student's behavior changes with AI assistance help inform an appropriate learning curriculum?\nWe propose Z-COACH, a framework for leveraging shared autonomy to aid with both student modeling (i.e. identifying what skills are within a student's ZPD) and coaching (i.e. helping a student improve at a skill) for arbitrary motor control tasks. Unlike prior work on AI-assisted coaching that guides students to practice the skill they find most difficult [45], Z-COACH uses shared autonomy to identify skills which a student is most likely to improve at a given point in time. We then apply Z-COACH to the task of high performance racing (HPR) in simulation, and conduct a user study (n = 50) demonstrating that Z-COACH helps improve a student's driving time, behavior, and smoothness in comparison to a self-practice baseline. Our main contributions include:\n\u2022\n\u2022\nAn approach to characterize a student's ZPD based on a shared autonomy assistance for motor control tasks, and a formulation of ZPD that take both assisted and unassisted student performance into account.\nA method to decide when to apply shared autonomy to help a student improve a particular skill, based on improving the interpretability of existing unsupervised skill discovery algorithms used in [45].\n\u2022\nDemonstration of the proposed framework in a human-in-the-loop experiment with the CARLA Autonomous Driving simulator, demonstrating how optimizing the shared autonomy assistance based on the student's estimated ZPD results in greater student improvement in a high performance race training session based on the Thunderhill Raceway Park."}, {"title": "II. RELATED WORK", "content": "A. Shared Autonomy\nExisting research on shared autonomy includes developing adaptive control algorithms that adapt autonomy levels based on context or user performance [1, 22, 55, 57], designing intuitive human-machine interfaces [10, 15], and studying the impact of shared control on learning and skill acquisition [56]. Applications span rehabilitation robotics assisting patients in regaining motor functions [4, 36, 40], remote teleoperation systems [34], advanced driving systems where control is shared between the driver and autonomous features to improve safety [32, 38, 53], assistive devices for individuals with disabilities [14, 26, 29, 49], and flight training simulators [8]. Another line of research explores machine learning techniques to enhance the efficiency and safety of shared control systems [28]. We refer to [53] for a survey of the full literature, which is beyond the scope of this paper.\nWithin the human-robot interaction community, researchers have approached shared autonomy from a reinforcement learning perspective [37], sought to perform inference over human preference and intent [6, 35] as well as explicitly reason about human performance limits and the diverse state distributions that would be conducive for learning [7]. However, these works do not explicitly account for scaffolding in learning. Closest to our work is the work of Byeon et al. [8], which uses the Mahalanobis distance between novice and expert trajectories to update the parameters of a shared autonomy-based control for training novices in an urban air mobility task. In contrast, we propose leveraging shared autonomy not just during coaching, but also as a way to estimate which sub-skills of a task are most conducive to learning.\nB. Student Modeling and Pedagogy\nResearch on student modeling focuses on how to effectively model a student's learning capabilities in order to tailor personalized learning experiences. This includes methods like Bayesian Knowledge Tracing to predict student knowledge states and performance [12, 16], as well as models of pedagogy, such as how demonstrators choose to act when teaching a student new skills [13, 23, 24]. Two pedagogical concepts relevant to our work are interleaving, where students practice multiple skills at once, and scaffolding, where teachers provide temporary support to help students develop new skills [51].\na) Teaching Human Students: There exists a large amount of interest in developing educational robot technology to aid with human learning. For example, Chen et al. [9] studies how social robots can play a role in teaching scenarios as coaches or mock-students, and designers of Doodlebot, a"}, {"title": "III. FORMALISM", "content": "We now formalize our approach to leveraging shared autonomy for proximal teaching, where our goal is to select optimal coaching interventions that can help guide a student towards optimal behavior for a given task g (e.g. driving). Let us treat g as a standard Markov decision process (MDP) , reward function R : S \u00d7 A \u2192 R over state S and action A spaces, and a deterministic transition function fg : S \u00d7 A \u2192 S that maps a state and action pair st, at at time step t to a new state St+1. We can then define a trajectory as a sequence of state and action pairs {$1,01,...,ST,\u0430\u0442}, and can collect trajectories from the student's policy (\u03c0student : S \u2192 A).\nNext, let Zg represent the set of task-specific skills (e.g. soft braking), and Cg be the set of possible coaching interventions. These can include verbal feedback, haptic guidance, or, as in our work, different shared autonomy controls, and one can consider the function $ : Zg \u2192 Cg that outputs a specific coaching intervention c = $(z) that targets a specific skill z \u2208 Zg. We therefore seek to learn a useful teaching policy coach: S,I \u2192 Cg that takes a student's current state s and policy student ~ II, and selects an intervention c that guides student towards an optimal policy \u03c0*.\nOur primary challenge lies with modeling the transition function fstudent : S,I,C \u2192 \u041f (i.e., how the coaching intervention c will modify the student's behavior). Prior works have tackled this by making assumptions such as modeling student learning over time as a Wiener process, and selecting the coaching intervention c that leads to the biggest increase in proficiency [19, 56]. In contrast, we propose leveraging shared autonomy to directly observe how a student's current behavior is affected by assistance. The change in performance can inform which skills z \u2208 Zg are most within the student's \"zone of proximal development\u201d in real-time, allowing us to provide an effective intervention c = $(z).\nFigure 2 provides an overview of Z-COACH, highlighting how we leverage shared autonomy for both student modeling and coaching. Z-COACH requires three components, which we formalize in more detail below:\n\u2022\n\u2022\n\u2022\nSection III-A: A shared autonomy paradigm that produces a policy TSA given the student's policy student.\nSection III-B: A set of interpretable task skills Zg.\nSection III-C: A model zpd which estimates how well each skill z is within the student's \"zone of proximal development\", given Zg and \u03c0SA.\nA. Shared Autonomy Design\nWe consider the simplest form of shared control, where the actions from both the human student (student) and an intelligent agent (Tagent) are merged, which in driving has been shown to improve overall performance in safety-critical situations [53]. Concretely, given an observed states, the output action of the policy \u03c0\u03c1\u0104 is:\n\u03c0SA(S) = \u03b1 * \u03c0agent(s) + (1 \u2212 \u03b1) *student(s) \\tag{1}\nThe term a controls the strength of the autonomy, and is action-specific (e.g. separate a for steering input and brake input in driving) Finally, the autonomous agent Tagent can come from any source, including planning, reinforcement learning or imitation-learning on expert demonstrations. In our work, we use a PID controller and path planner based on expert trajectories, which we describe in more detail in Section IV.\nB. Interpretable Skill Discovery\nRecall our goal to model students and design coaching interventions with respect to a set of skills Zg. Most works in the literature consider hand-crafted skills, and are therefore limited to environments where it is easy to manually evaluate skill performance from a student trajectory Tstudent, which is tricky for motor control tasks. To address this, [45] recently proposed using CompILE, an unsupervised skill discovery algorithm, which learns the latent skill set Zg from expert trajectories Texpert ~ Texpert [27]. Concretely, CompILE jointly trains an encoder q and decoder pe to segment a"}, {"title": "IV. OVERVIEW OF PERFORMANCE RACING TASK", "content": "Although Z-COACH can be applied to learning any motor task where shared autonomy control is feasible, we focus on coaching high-performance racing (HPR), due to the high likelihood of finding novice students and the availability of resources to help evaluate Z-COACH. Using the open-source CARLA simulator [18], specifically designed for autonomous driving research, we simulate the 2-mile Thunderhill West track, part of Thunderhill Raceway Park in California, the venue for the longest automobile race in the United States (See Figure 1 for example race lines on the race track).\nA. Task Description and Environment\nOur goal is to use Z-COACH to improve novice students' performance when driving one lap around the Thunderhill West track. Strong performance in HPR does not only include a low elapsed time, but also measures such as staying on track and smoothness. Furthermore, the fastest race line around"}, {"title": "V. EXPERIMENTAL RESULTS", "content": "Recall that Z-COACH consists of three steps: (i) task skill discovery, (ii) student modeling with shared autonomy to estimate how much a skill is within a student's \"zone of proximal development\u201d, and (iii) using skill-focused shared autonomy to help the student improve. We now evaluate each step.\nA. Interpretable Skill Discovery\nAs described in Section III-B, we wish to identify the different skills required in our HPR task in order to provide effective coaching interventions. Unfortunately, simply running an unsupervised skill discovery algorithm may return segments corresponding to latent skills z \u2208 Zg, but we have no way of interpreting what those skills represent, making it tricky to provide focused skill-coaching via shared autonomy.\nWe therefore augment our dataset of expert trajectories with noisy language annotations, a form of auxiliary information as in Equation 2. Weak supervision in the form of language describing actions appears in a variety of places, including coaching videos on YouTube, or user-generated descriptions on traffic applications. For our task, we use a small subset of data collected and shared by the Toyota Research Institute. Their dataset consists of survey and driving data from 15 participants having one-on-one simulator performance driving training from 1 racing coach on the Thunderhill race track, and includes language feedback such as \u201cstraighten the wheel\" or \"off the gas here\" that corresponds to a particular (s, a) in a student's trajectory. We use data from only one participant, and provide further information about this dataset in the Appendix.\nOur first step is to cluster the noisy language annotations into semantically meaningful groups, so that we can use the cluster index as the auxiliary information in Equation 2. We use the llama-3 language model to generate cluster mappings and descriptions by providing the following input string:\nWe set N = 8, and show in Table V-A the output descriptions and example feedback for each cluster. Several of the clusters (e.g. Braking, Throttle, Steering) are well-aligned with the task action space A, making it feasible to consider shared autonomy for skill-focused coaching.\nHowever, in order to identify which skill is appropriate for a student to learn, we need to map these clusters to trajectory segments. Following the approach described in Section III-\u0412, we train CompILE on expert trajectories with the modified loss function in 2, again using N = 8 as a hyperparameter, and let the auxiliary information (s) equal the cluster ID (e.g. 6) of the language feedback provided at the state closest to s in position. The resulting skill segmentation, shown in Figure 4, successfully groups together parts of the track that requires high throttle without any steering, as well as the entry into sharp turns. Furthermore, when compared with training CompILE without weak supervision, our approach significantly improves the compression ratio (1.83 vs. 1.22) of the resulting segmentation, with little impact on Mean Square Error (0.037 vs. 0.037) of the reconstruction. Finally, we can identify which Cluster ID, and therefore language feedback, is most associated with a given latent z by examining the output logits of the decoder po in CompILE (see Section III-B).\nOverall, our results show success in identifying semantically meaningful skills in task trajectories, which we will use for student modeling.\nB. Estimating Students' Zone of Proximal Development\nWe next evaluate the benefit of using shared autonomy for student modeling. We screen captured videos of 20 participants, split evenly between receiving STRONGSA or WEAKSA in Stage 2 of our study, and hired a professional high performance racing coach (compensated 75$ per hour) to watch each video and provide ground truth rankings for the order in which he would coach the student to focus on the following three skills: Steering, Braking, Throttle. While there"}, {"title": "VI. LIMITATIONS & CONCLUSION", "content": "We have shown that Z-COACH effectively applies shared autonomy to both improve student modeling and provide skill-targeted coaching, leading to higher overall improvement in performance compared to self-practice. While we focused on high performance racing due to the availability of coaching data and simulation environment, as well as its novelty for participants, an important next step is to evaluate what properties of different motor control tasks may affect the ability of Z-COACH to improve student learning. Furthermore, there exist many confounders (e.g. frame rate of simulator, lack of haptic feedback) that could affect results. Finally, while we intentionally chose simpler forms of shared autonomy to increase focus on our core task of motor learning, future work could explore more complex forms of shared autonomy, such as incorporating agent confidence. Our work can easily be integrated with other forms of teaching (e.g. with haptics, verbal feedback), where Z-COACH would be used to identify which skills the instruction should target. Overall, Z-COACH is a first step towards re-imagining the role of shared autonomy to not only assist humans in performing tasks, but to enable effective and specialized skill learning."}]}