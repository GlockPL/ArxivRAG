{"title": "Reasoning about Actual Causes in Nondeterministic Domains \u2013 Extended Version", "authors": ["Shakil M. Khan", "Yves Lesp\u00e9rance", "Maryam Rostamigiv"], "abstract": "Reasoning about the causes behind observations is crucial to the formalization of rationality. While extensive research has been conducted on root cause analysis, most studies have predominantly focused on deterministic settings. In this paper, we investigate causation in more realistic nondeterministic domains, where the agent does not have any control on and may not know the choices that are made by the environment. We build on recent preliminary work on actual causation in the nondeterministic situation calculus to formalize more sophisticated forms of reasoning about actual causes in such domains. We investigate the notions of \"Certainly Causes\" and \"Possibly Causes\" that enable the representation of actual cause for agent actions in these domains. We then show how regression in the situation calculus can be extended to reason about such notions of actual causes.", "sections": [{"title": "Introduction", "content": "The term causation refers to a collection of closely-related important philosophical problems dealing with causes and their effects that has been studied since the time of Aristotle. Determining the \"actual\" causes of an observed effect, which are events chosen from a recorded history of actions that occurred prior to the observation of the effect (also known as the scenario) is one such problem (called \"efficient\" cause in Aristotelian lingo) that has been extensively researched. Motivated by David Hume's philosophical work and Herbert Simon's early contributions, Pearl (Pearl 1998, 2000), and later Halpern (Halpern 2000, 2015, 2016), Halpern and Pearl (Halpern and Pearl 2005), and others (Eiter and Lukasiewicz 2002; Hopkins 2005; Hopkins and Pearl 2007) developed computational formalizations of this problem within Structural Equations Models (SEM). While their inspirational work significantly advanced this field, their approach based on SEM has been nevertheless criticized for its limited expressiveness (Hopkins 2005; Hopkins and Pearl 2007; Glymour et al. 2010), and others have expanded SEM with additional features (Leitner-Fischer and Leue 2013) or proposed alternate formalizations of actual cause, e.g. (Bochman 2018; Beckers and Vennekens 2018; de Lima and Lorini 2024).\nIn response to these criticisms, in recent years researchers have become increasingly interested in studying causation within more expressive action-theoretic frameworks, in particular in that of the situation calculus (Batusov and Soutchanski 2017, 2018; Khan and Soutchanski 2020). Among other things, this allows one to formalize causation from the perspective of individual agents by defining a notion of epistemic causation (Khan and Lesp\u00e9rance 2021) and by supporting causal reasoning about conative effects, which in turn has proven useful for explaining agent behaviour using causal analysis (Khan and Rostamigiv 2023) and has the potential for defining important concepts such as responsibility and blame (Yazdanpanah et al. 2023).\nWhile there has been a lot of work on actual causation, the vast majority of the work in this area has focused on deterministic domains. However, a distinguishing feature of the real world is that change is often unpredictable. Very few studies address causation in nondeterministic systems, and those that do, are formalized in SEM-based causal models that are known to have limited expressiveness and suffer from a variety of problems. For instance, recently Beckers (2024) presented an extension of causal models to deal with nondeterminism. However, despite improving on expressivity of causal models, it is not clear how one can formalize various aspects of action-theoretic/dynamic frameworks there, e.g. non-persistent change supported by fluents, possible dependency between events, temporal order of event occurrence, etc.\nTo deal with this, building on previous work on actual causation in the situation calculus (Batusov and Soutchanski 2018; Khan and Lesp\u00e9rance 2021), more recently (Rostamigiv et al. 2024) formalized actual causes in more expressive nondeterministic action-theoretic domains. They used the nondeterministic situation calculus (De Giacomo and Lesp\u00e9rance 2021) as their base framework. They introduced notions of \"Certainly Causes\" and \"Possibly Causes\" that enable the representation of actual cause when the agent does not control her actions' outcomes and does not know the choices that are made by the environment. However, this early work formalizes reasoning about causes in these domains by considering all possible evolutions of the scenario, which makes reasoning computationally intractable."}, {"title": "Preliminaries", "content": "Situation Calculus (SC). The situation calculus is a well-known second-order language for representing and reasoning about dynamic worlds (McCarthy and Hayes 1969; Reiter 2001). In the SC, all changes are due to named actions, which are terms in the language. Situations represent a possible world history resulting from performing some actions. The constant $S_0$ is used to denote the initial situation where no action has been performed yet. The distinguished binary function symbol $do(a, s)$ denotes the successor situation to $s$ resulting from performing the action $a$. The expression $do([a_1,\u2026\u2026, a_n], s)$ represents the situation resulting from executing actions $a_1,\u00b7\u00b7\u00b7, a_n$, starting with situation $s$. As usual, a relational/functional fluent representing a property whose value may change from situation to situation takes a situation term as its last argument. There is a special predicate $Poss(a, s)$ used to state that action $a$ is executable in situation $s$. Also, the special binary predicate $s \\sqsubseteq s'$ represents that $s'$ can be reached from situation $s$ by executing some sequence of actions. $s \\sqsubseteq s'$ is an abbreviation of $s \\sqsubseteq s'\\lor s = s'$. $s < s'$ is an abbreviation of $s \\sqsubseteq s' \\land Executable(s')$, where $Executable(s)$ is defined as $\\forall a', s'. do(a',s') \\sqsubseteq s \\supset Poss(a', s')$, i.e. every action performed in reaching situation $s$ was possible in the situation in which it occurred. $s \\preceq s'$ is an abbreviation of $s < s'\\lor s = s'$.\nIn the SC, a dynamic domain is specified using a basic action theory (BAT) $D$ that includes the following sets of axioms: (i) (first-order or FO) initial state axioms $D_{S_0}$, which indicate what was true initially; (ii) (FO) action precondition axioms $D_{ap}$, characterizing $Poss(a, s)$; (iii) (FO) successor-state axioms $D_{ss}$, specifying how the fluents change when an action is performed and providing a solution to the frame problem; (iv) (FO) unique-names axioms $D_{una}$ for actions, stating that different action terms represent distinct actions; and (v) (second-order or SO) domain-independent foundational axioms $\\Sigma$, describing the structure of situations"}, {"title": "Definition 1 (The Regression Operator)", "content": "(1) When $\\phi$ is a non-fluent atom, including equality atoms without functional fluents as arguments, or when $\\phi$ is a fluent atom, whose situation argument is $S_0$, $R[\\phi] = \\phi$.\n(2a) For a non-functional fluent $F$, whose successor-state axiom in $D$ is $F(x, do(a, s)) = \\Phi_F(x,a,s)$, $R[F(t, do(a, \\sigma))] = \\Phi_F(\\tau,a, \\sigma)$.\n(2b) For an equality literal with a functional fluent $f$, whose successor-state axiom is $f(x, do(a, s)) = y = \\Phi_f(x, y, a, s)$, $R[f(t, do(a, \\sigma)) = t'] = \\Phi_f(t,t',a, \\sigma)$.\n(2c) For a Poss literal with the action precondition axiom of the form $Poss(A(x), s) = \\Pi_A(X,s)$, $R[Poss(A(\\tau), \\sigma)] = R[\\Pi_A(\\tau, \\sigma)]$.\n(3) For any non-atomic formulae, regression is defined inductively: $R[\\neg \\phi] = \\neg R[\\phi], R[\\phi_1 \\land \\Phi_2] = R[\\phi_1] \\land R[\\Phi_2], R[\\exists v. \\phi] = \\exists v. R[\\phi]$.\n$R^*$ can then be defined as the repeated application of $R$ until further applications leave the formula unchanged.\nAnother key result about BATs is the relative satisfiability theorem (Pirri and Reiter 1999; Reiter 2001): $D$ is satisfiable if and only if $D_{S_0} \\cup D_{una}$ is satisfiable (the latter being a purely first-order theory)."}, {"title": "Nondeterministic Situation Calculus (NDSC)", "content": "An important limitation of the standard SC and BATs is that atomic actions are deterministic. De Giacomo and Lesp\u00e9rance (DL21) (De Giacomo and Lesp\u00e9rance 2021) proposed a simple extension of the framework to handle nondeterministic actions while preserving the solution to the frame problem. For any primitive action by the agent in a nondeterministic domain, there can be a number of different outcomes. (DL21) takes the outcome as being determined by the agent's action and the environment's reaction to this action. This is modeled by having every action type/function $A(x, e)$ take an additional environment reaction parameter $e$, ranging over a new sort $Reaction$ of environment reactions. The agent cannot control the environment reaction, so it performs the reaction-suppressed version of the action $A(x)$ and the environment then selects a reaction $e$ to produce the complete action $A(x, e)$. We call the reaction-suppressed version of the action $A(x)$ an agent action and the full version of the action $A(x, e)$ a system action."}, {"title": null, "content": "We represent nondeterministic domains using action theories called Nondeterministic Basic Action Theories (ND-BATs), which can be seen as a special kind of BAT, where (1) every agent action takes an environment reaction parameter; (2) for each agent action we have an agent action precondition formula, $Poss_{ag}(a(x), s) \\overset{def}{=} p_{ag}Poss (x, s)$; (3) for each agent action we have a reaction independence requirement, stating that the precondition for the agent action is independent of any environment reaction $\\forall e. Poss(a(x, e), s) \\equiv Poss_{ag} (a(x), s)$; (4) for each agent action we also have a reaction existence requirement, stating that if the precondition of the agent action holds then there exists a reaction to it which makes the complete system action executable, i.e., the environment cannot prevent the agent from performing an action when its agent action precondition holds $Poss_{ag}(a(x),s(\\supset \\exists e. Poss_{ag}(a(x, e), s)$. The above requirements must be entailed by the action theory for it to be an NDBAT.\nA NDBAT $D$ is the union of the following disjoint sets: including (1) foundational axioms, (2) unique-names axioms for actions, (3) axioms describing the initial situation, (4) successor-state axioms indicating how fluents change after system actions, and (5) system action precondition axioms, indicating when system actions can occur; while these axioms generally follow the form: $Poss(a(x,e), s) = \\Phi_{Poss}(x, e, s)$, in practice, these axioms often take the form: $Poss(a(x,e), s) = Poss_{ag}(a(x), s)\\land \\Psi_{Poss} (x, e, s)$, where $Poss_{ag}(a(x), s)$ denotes conditions necessary for the agent action $a(x)$ to occur and $\\Psi_{Poss} (x, e, s)$ captures additional conditions influenced by the environment's response."}, {"title": "Projection and Executability", "content": "In the NDSC, executing an agent action in a situation may result in different situations and outcomes depending on the environment reaction. To capture this, (DL21) introduced the defined predicate $Do_{ag}(d, s, s')$, meaning that the system may reach situation $s'$ when the agent executes the sequence of agent actions a depending on environment reactions:\n$Do_{ag} (\\epsilon, s, s') \\overset{def}{=} s = s'$, where $\\epsilon$ is the empty sequence of actions,\n$Do_{ag}([A(x), \\epsilon], s, s') \\overset{def}{=} \\exists e. Poss(A(x, e), s) \\land Do_{ag} (\\epsilon, do(A(x, e), s), s')$.\nA condition $\\phi$ may hold after some executions of a sequence of agent actions a starting in situation $s$, denoted by $PAfter(d, \\phi, s)$, or it may hold after all executions of d in s, denoted by $CAfter(d, \\phi, s)$. Formally:\n$PAfter(d,\\phi,s) \\overset{def}{=} \\exists s'.Do_{ag}(d, s, s') \\land\\phi[s']$,\n$CAfter (d, \\phi, s) \\overset{def}{=} \\forall s'.Do_{ag}(d, s, s') \\supset\\phi[s']$.\nTwo different notions of executability of \u00e0 are also defined (see (De Giacomo and Lesp\u00e9rance 2021)).\nExample. Our running example involves a robot navigating between different locations and communicating. We take communication to be subject to interference and assume that the robot can communicate at a given location if the location"}, {"title": "Actual Achievement Cause in the SC", "content": "Given a history of actions/events (often called a scenario) and an observed effect, actual causation involves figuring out which of these actions are responsible for bringing about this effect. When the effect is assumed to be false before the execution of the actions in the scenario and true afterwards, the notion is referred to as achievement (actual) causation. Based on Batusov and Soutchanski's (2018) original proposal, Khan and Lesp\u00e9rance (2021) (KL21) recently offered"}, {"title": "Definition 2", "content": "Let $\\overline{x}, \\theta_a$, and $\\hat{y}$ respectively range over object terms, action terms, and object and action variables. The class of dynamic formulae o is defined inductively using the following grammar:\n$\\phi ::= P(\\overline{x}) | Poss(\\theta_a) | After(\\theta_a,\\phi) | \\neg\\phi | \\varphi_1 \\land \\varphi_2| \\exists y. \\varphi$\nThat is, a dynamic formula (DF) can be a situationsuppressed fluent, a formula that says that some action $\u03b8_a$ is possible, a formula that some DF holds after some action has occurred, or a formula that can built from other DF using the usual connectives. Note that can have quantification over object and action variables, but we cannot have"}, {"title": "Definition 3", "content": "$\\phi[s] \\overset{def}{=} \\begin{cases}\nP(\\overline{x}, s), & \\text{if } \\phi \\text{ is } P(\\overline{x}) \\\\\nPoss(\\theta_a, s), & \\text{if } \\phi \\text{ is } Poss (\\theta_a) \\\\\n\\phi'[do(\\theta_a, s)], & \\text{if } \\phi \\text{ is } After(\\theta_a, \\phi') \\\\\n\\neg(\\phi'[s]), & \\text{if } \\phi \\text{ is } (\\neg\\phi') \\\\\n\\varphi_1[s] \\land \\varphi_2[s], & \\text{if } \\phi \\text{ is } (\\varphi_1 \\varphi_2) \\\\\n\\exists y. (\\varphi'[s]), & \\text{if } \\phi \\text{ is } (\\exists y. \\varphi').\n\\end{cases}$"}, {"title": "Definition 4 (Primary Cause (KL21))", "content": "$CausesDirectly(a, ts, \\varphi, s) \\overset{def}{=}$\n$\\exists s_a. time(s_a) = ts \\land (S_0 < do(a, s_a) \\sqsubseteq s) \\land \\neg\\varphi[s_a] \\land \\forall s'.(do(a, s_a) \\sqsubseteq s' < s \\supset \\varphi[s'])."}, {"title": "Definition 5 (Actual Cause (KL21))", "content": "$Causes(a,ts, \\varphi, s) \\overset{def}{=}$\n$\\forall P.[(\\forall a, ts, \\varphi, s'.(CausesDirectly (a, ts,\\varphi,s') \\supset P(a, ts,\\varphi, s')) \\\n\\forall a, ts, \\varphi, s'.(\\exists a', ts', s'.(CausesDirectly(a', ts', \\varphi, s) \\land time(s')=ts' \\land s' <s\n\\land P(a, ts, [Poss(a') \\land After(a', \\varphi)], s') \\\n\\supset P(a,ts,\\varphi, s))) \\\n\\supset P(a,s,\\varphi,s)].$"}, {"title": "Proposition 1 (Causes of $\\varphi_1$ in $\\sigma_1$)", "content": "$D_1 \\models Causes(comm(I_0, Succ), 0, \\varphi_1, \\sigma_1)$\n$\\land Causes(move(I_0, I_1, NotVul), 1, \\varphi_1, \\sigma_1)$\n$\\land Causes (move(I_1, I_2, Vul), 2, \\varphi_1, \\sigma_1)$\n$\\land \\neg Causes(move(I_2, I_3, NotVul), 3, \\varphi_1, \\sigma_1).$"}, {"title": "Definition 6 (Nondeterministic Causal Setting)", "content": "A nondeterministic causal setting is a tuple $(D, d, \\varphi)$, where $D$ is a NDBAT, & is a sequence of agent actions representing the nondeterministic scenario, and o is a dynamic formula s.t.:\n$D \\models \\neg\\varphi[S_0] \\land PAfter(d, \\varphi, S_0).$"}, {"title": "Definition 7 (Possibly Causes)", "content": "Let $(D, \u0990, \\varphi)$ be a ND setting and $\\beta(\\overline{x})$ an agent action in d.\n$PCauses(\\beta(\\overline{x}), t, \\varphi, a) \\overset{def}{=}$\n$\\exists s. Do_{ag} (d, S_0, s) \\land\\varphi[s] \\land\\exists e. Causes(\\beta(\\overline{x}, e), t, \\varphi, s).$"}, {"title": "Definition 8 (Certainly Causes)", "content": "Let $(D,&,4)$ be a ND setting and $\\beta(\\overline{x})$ an agent action in d.\n$CCauses(\\beta(\\overline{x}), t, \\varphi, a) \\overset{def}{=}$\n$\\forall s. Do_{ag} (d, S_0, s) \\land\\varphi[s] \\supset\\exists e. Causes(\\beta(\\overline{x},e),t,\\varphi, s).$"}, {"title": "Proposition 2", "content": "$D_1 \\models \\neg PCauses(comm(I_0), 0, \\varphi_1, a\u0142)$\n$\\land CCauses (move (\u0399\u03bf, I\u2081), 1, \u03c6\u2081, \u03b1\u03af)$\n$\\land PCauses (move(I\u2081, I\u2082), 2, \u03c6\u2081, \u03b1\u03af)$\n$\\land\\neg CCauses(move(I\u2081, I\u2082), 2, \u03c6\u2081, \u03b1\u03af)$\n$\\land \\neg PCauses(move(I\u2082, I\u2083), 3, \u03c6\u2081, \u03b1\u03af).$"}, {"title": "Proposition 3", "content": "$D \\models Causes(b, t, \\varphi, do(a, s)) \\equiv$\n$(time(s) = t \\land b = a \\land \\neg\\varphi[s] \\land \\varphi[do(a, s)]) \\lor$\n$(time(s) > t \\land \\varphi[s] \\land \\varphi[do(a, s)] \\land Causes(b, t, \\varphi, s)) \\lor$\n$(time(s) > t \\land \\neg\\varphi[s] \\land \\varphi[do(a, s)]$\n$\\land Causes (b, t, Poss(a) \\land After(a, \\varphi), s)).$"}, {"title": "Proposition 4", "content": "$D \\models CAfter([a_1,..., a_{n-1}, a_n], \\varphi, 8) \\equiv$\n$CAfter ([a_1,..., a_{n-1}], CAfter(a_n, \\varphi), s) \\equiv$\n$CAfter ([\u03b1_1,..., a_{n-1}],\n\\forall e. Poss(a_n(e), now) \\supset\\varphi[do(a_n(e), now)], s).$\n$D \\models PAfter([0_1,..., a_{n-1}, a_n], \\varphi, s) \\equiv$\n$PAfter ([a_1,..., a_{n-1}], PAfter(a_n, \\varphi), s) \\equiv$\n$PAfter ([a_1,..., a_{n-1}],\n\\exists e. Poss(a_n (e), now) \\land\\varphi[do(a_n(e), now)], s).$"}, {"title": "Proposition 5", "content": "$D\\models CCauses(\\beta,t,\\varphi,d) \\equiv$\n$CAfter(a, \\forall\\exists e. Causes(\\beta(e), t, \\varphi), S_0).$\n$D \\models PCauses(\\beta,t,\\varphi, d) \\equiv$\n$PAfter(2,\\exists e. Causes(\\beta(e), t,\\varphi), S_0).$"}, {"title": "Definition 9 (The Extended Regression Operator $\\mathcal{R}_{ext}$)", "content": "(1)-(3) When the formula $\\phi$ to be regressed is of the forms discussed in Definition 1, $\\mathcal{R}_{ext}(\\phi) = R(\\phi)$.\n(4) If $\\phi$ is an extended regressable formula of the form $Causes (b, t, \\varphi, do(a, s))$, then:\n$\\mathcal{R}_{ext} [Causes (b, t,\\varphi, do(a, s))] \\equiv$\n$(time(s) = t \\land b = a \\supset \\neg\\varphi[s] \\land \\mathcal{R}_{ext}[\\varphi[do(a, s)]]) \\lor$\n$(time(s) > t\\land\\varphi[s] \\land \\mathcal{R}_{ext}[\\varphi[do(a, s)]] \\land Causes(b, t, \\varphi, s)) \\lor$\n$(time(s) > t \\land \\neg\\varphi[s] \\mathcal{R}_{ext}[\\varphi[do(a, s)]]$\n$\\supset Causes(b,t, Poss(a) \\land \\mathcal{R}_{ext}[\\varphi[do(a, s')]]^{-1}, s)).$\n(5) If & is an extended regressable formula that is of the form $CAfter(a, \\varphi, s)$ or $PAfter (a, \\varphi, s)$ with a possi-"}, {"title": null, "content": "bly empty sequence e of agent actions &, then:\n$\\mathcal{R}_{ext} [CAfter (\\epsilon, \\varphi, s)] = \\mathcal{R}_{ext}[\\varphi[s]]$.\n$\\mathcal{R}_{ext} [CAfter ([a_1, ..., a_{n-1}, a_n], \\varphi, s)] \\equiv$\n$CAfter ([\u03b1_1,..., a_{n-1}],$\n$\\forall e. Poss(a_n(e))\\supset \\mathcal{R}_{ext}[\\varphi[do(a_n(e), s')]]^{-1}, s).\n$\\mathcal{R}_{ext} [PAfter (\\epsilon, \\varphi, s)] = \\mathcal{R}_{ext}[\\varphi[s]]$.\n$\\mathcal{R}_{ext} [PAfter ([a_1, ..., a_{n-1}, a_n], \\varphi, s)] \\equiv$\n$PAfter ([\u03b1_1,..., a_{n-1}],$\n$\\exists e. Poss(a_n(e)) \\land \\mathcal{R}_{ext}[\\varphi[do(a_n(e), s')]]^{-1}, s).\n(6) If & is an extended regressable formula that is of the form $CCauses (\\beta,t,\\varphi, \u00e0)$ or $PCauses(\\beta, t, \\varphi, \u00e0)$, then:\n$\\mathcal{R}_{ext}[CCauses (\\beta,t,\\varphi, [\u03b1_1,..., a_{n-1}, a_n])] \\equiv$\n$CAfter ([1,..., a_{n-1}],$\n$\\forall e'. Poss(a_n(e'))\\supset \\mathcal{R}_{ext}[\\phi^* [do(a_n(e'), s')]]^{-1}, S_0),$\nwhere, $\\phi^* = \\varphi \\lor\\exists e. Causes(\\beta(e), t, \\varphi)$.\n$\\mathcal{R}_{ext}[PCauses (\\beta, t, \\varphi, [\u03b1_1,\u00b7\u00b7\u00b7, a_{n-1}, a_n])] \\equiv$\n$PAfter ([a_1,..., a_{n-1}],$\n$\\exists e'. Poss(a_n (e')) \\land \\mathcal{R}_{ext}[\\phi^* [do(a_n (e'), s')]]^{-1}, S_0),$\nwhere, $\\phi^* = \\varphi \\land\\exists e. Causes(\\beta(e), t,\\varphi).$"}, {"title": "Proposition 6", "content": "$\\mathcal{R}_{ext}[CCauses(move(I_0, I_1), 0, Vul, a\u203a)] \\equiv$\n$CAfter ([move(I_0, I_1)],$\n$\\forall e'. Poss(move(I_1, I_2, e'))$\n$\\supset [\\neg(e' = Vul \\lor Vul) V$\n$(\\exists e. (time > t / Vul$\n$Causes(move(I_0, I_1, e), t, Vul)) V$\n$(time > t /\\neg Vul \\supset e' = Vul$\n$\\land Causes(move(I_0, I_1, e), t, Poss(move(I_1, I_2, e')) \\\n$\\land (e' = Vul \\lor Vul))))], S_0).$"}]}