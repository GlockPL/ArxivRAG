{"title": "Enhancing Structured-Data Retrieval with GraphRAG: Soccer Data Case Study", "authors": ["Zahra Sepasdar", "Sushant Gautam", "Cise Midoglu", "Michael A. Riegler", "P\u00e5l Halvorsen"], "abstract": "Extracting meaningful insights from large and complex datasets poses significant challenges, particularly in ensuring the accuracy and relevance of retrieved information. Traditional data retrieval methods such as sequential search and index-based retrieval often fail when handling intricate and interconnected data structures, resulting in incomplete or misleading outputs. To overcome these limitations, we introduce Structured-GraphRAG, a versatile framework designed to enhance information retrieval across structured datasets in natural language queries. Structured-GraphRAG utilizes multiple knowledge graphs, which represent data in a structured format and capture complex relationships between entities, enabling a more nuanced and comprehensive retrieval of information. This graph-based approach reduces the risk of errors in language model outputs by grounding responses in a structured format, thereby enhancing the reliability of results. We demonstrate the effectiveness of Structured-GraphRAG by comparing its performance with that of a recently published method using traditional retrieval-augmented generation. Our findings show that Structured-GraphRAG significantly improves query processing efficiency and reduces response times. While our case study focuses on soccer data, the framework's design is broadly applicable, offering a powerful tool for data analysis and enhancing language model applications across various structured domains.", "sections": [{"title": "1 INTRODUCTION AND RELATED WORK", "content": "As digital content continues to expand rapidly, the need for advanced retrieval systems has become more critical. Users increasingly prefer to interact with these systems through natural language queries-posing questions as they would to another person-making it essential for retrieval technologies to understand and process language in a human-like manner [4, 5]. Large language models (LLMs) are integral to these systems for interpreting user queries accurately. However, LLMs face several challenges that impact their ability to retrieve relevant information effectively. Firstly, these models often struggle to fully comprehend the context embedded within questions, which can lead to responses that do not align precisely with the user's intentions. Furthermore, language models encounter challenges related to \"hallucinating\" information, i.e., generating entirely fictional facts. Another issue is that the training datasets may not be updated regularly, potentially leading to incorrect outputs. To address these challenges, one effective approach is using Retrieval-Augmented Generation (RAG), which integrates the advantages of retrieval-based methods to access up-to-date information with generation-based models for coherent and context-aware responses. This hybrid method helps mitigate issues related to outdated data and enhances the model's ability to provide accurate and relevant information.\nTo further advance beyond the traditional RAG framework, Graph-RAG introduces a novel enhancement by integrating knowledge graphs (KGs). By leveraging the structured relationships and rich semantics within knowledge graphs, GraphRAG not only improves the retrieval process but also enables more nuanced and contextually aware responses. This incorporation of KGs allows the model to understand complex queries better and provide more detailed and interconnected information, thereby pushing the boundaries of what RAG frameworks can achieve.\nKG is a structured representation of knowledge that captures relationships between data points within a specific domain. This structure is composed of nodes that represent entities and edges that depict the relationships between these entities, forming an interconnected information. KGs are effective tools for organizing and integrating vast amounts of data from various sources, enhancing the accessibility and usability of this information. They play a crucial role in improving search engines by providing structured, interconnected search results, thereby offering users more relevant and comprehensive answers [1, 10]. Moreover, KGs are essential in advancing artificial intelligence applications, including recommendation systems and natural language processing, by supplying a robust framework for understanding context and semantics. By serving as a structured source of information, KGs help reduce hallucinations in LLMs, leading to more accurate and reliable outputs [6, 15]."}, {"title": "2 INTRODUCTION \u03a4\u039f STRUCTURED-GRAPHRAG", "content": "This section describes the methodology of our framework and its operation in response to user queries. To begin using the framework, the initial step is to create KGs from the source dataset. A complete explanation of the KGs structures is provided in Section 4. For now, let's assume the KGs have been created, and we want to utilize them. These KGs are designed to provide accurate and detailed information from the source dataset and are stored in a graph database such as Neo4j. In this research, we employed the Neo4j Python driver to establish and manage connections with the Neo4j database, enabling efficient query execution and manipulation of graph data. This integration is part of our Python-based analytical framework.\nOnce the KGs are set up, the system is prepared for user interaction. When a user asks a question, Structured-GraphRAG processes this query using an LLM. The LLM translates the user's natural language query into a Cypher query, which is a specialized query language for interacting with graph databases. The Cypher query is then used by a smart search tool, which navigates through the graph database to identify relevant nodes and edges, effectively pinpointing the most pertinent pieces of information from the constructed KGs. This process allows the system to extract specific data points and relationships that directly address the user's query. After retrieving this data, the system combines it with the context of the user's original question and re-inputs it into the LLM. The LLM utilizes this combined information to generate a comprehensive and nuanced response, providing the user with a detailed answer that is both accurate and informative. Figure 1 illustrates the complete process, from query to the final response."}, {"title": "3 SHOWCASE STUDY: SOCCER DATA", "content": "To demonstrate the performance and effectiveness of our framework, we use soccer data from SoccerNet [2, 7], an extensive dataset designed for the analysis and understanding of soccer videos. Table 1 summarizes the source dataset, detailing sub-datasets, divisions, corresponding files, and data types. In this section, we provide a comprehensive description of the data structure to enhance understanding of the KGs construction process. This detailed explanation ensures the methodology behind the graph's architecture is transparent and reproducible, facilitating further research."}, {"title": "4 KG CONSTRUCTION", "content": "In this section, we explore a novel approach to transforming structured datasets into KGs. Leveraging the SoccerNet dataset as a primary example, we demonstrate how this methodology can be generalized to any dataset that is organized in a tabular format. By converting structured data into a KG, we aim to provide a flexible framework that reveals the complex relationships and deeper insights within the data, which are often not immediately apparent in traditional formats. This approach not only facilitates enhanced data visualization and analysis but also opens up new possibilities for uncovering meaningful connections across diverse domains.\nFor each game, we work with two separate datasets: Labels and Captions-Players. We generate a unique KG for each of these datasets to capture the distinct information they contain.\n4.1 Game & Team Nodes\nEach game in the dataset is represented as a node, labeled as Game, with its attributes obtained from Figure 3. An example of such a node and its attributes is illustrated in Figure 5, which shows the Chelsea vs. Crystal Palace game. Each team is represented by a node with two attributes league, and season. Figure 6 shows an example of a team node for Bayer Leverkusen.\nEach team is connected to the corresponding game with an edge named PARTICIPATED_IN. Additionally, each team is connected to the game by an edge named HOME_TEAM or AWAY_TEAM, depending on whether the team is hosting. If the result of the game is not a draw, then two additional edges named WINNER and LOSER are added. Refer to Figure 7 to see the connections between the game and the teams for the Chelsea vs. Crystal Palace game.\n4.2 Labels KG Construction\nEach entry in the Label file represents a node with the label Event, where the node's name is specified by data.label. For example, Figure 8 illustrates a node created for a foul event along with its attributes.\n4.3 Captions KG Construction\nFor each player, a node with label Player is created. An example of a player node and its attributes is illustrated in Figure 10. Each player is connected to the corresponding game by an edge named PLAYED_IN. Each player is connected to the corresponding team by an edge named PLAYS_FOR. An example of such connections are shown in Figure 11. If the player has data in the fact part, we create additional nodes. As shown in Table 2, there are different facts types. To explain the construction of the graph, we describe the method for one of theseFfct s and do not detail the others, as they can be created similarly.\nThe structure of fact with Type 1 is presented in Figure 4. As illustrated, \"time\" consists of three elements: first, the exact time events occurred; second, the name of the player who received the yellow card, and third the reason why the player received the card. We create one node for Yellow Card with label Fact. An example of a Fact node with Type 1 and its attributes is illustrated in Figure 12. Each Fact node is connected to the corresponding game by an edge named IS_PAR_OF, to the corresponding team by an edge named ASSOCIATED_TO, and to the player node by an edge named RECEIVED. These connections are shown in Figure 13.\nEven though we detailed the process of constructing KGs using the SoccerNet dataset as a case study, the methodology is not limited to this specific dataset; it is a versatile approach that can be applied to any structured dataset, typically organized in a tabular format. The core idea is to transform the structured data into a KG by selecting one column (or row) to represent the nodes and using the remaining columns (or rows) to define the attributes of these nodes. The edges, or the connections between nodes, are then defined based on the specific relationships pertinent to the dataset's domain. For instance, in a healthcare dataset, edges might represent relationships such as \"diagnosed with,\" \"prescribed,\" or \"related to a symptom,\" reflecting the unique connections within that context. This method of converting structured data into a KG allows for a tailored representation of data, where the semantics of the edges are thoughtfully chosen to convey the most meaningful relationships.\nThis approach enables the transformation of structured data into a KG that captures the underlying complexities and interrelations inherent in the data. This not only enhances data visualization and analysis but also unveils hidden patterns and insights that may remain obscured in traditional tabular formats. Ultimately,"}, {"title": "5 DETAILED EXAMPLE", "content": "To demonstrate retrieval of information from KG structures, we provide a comprehensive example to illustrate how our framework functions in practice and how it leverages the interconnected nature of KGs to efficiently extract relevant data. By doing so, we aim to highlight the advantages of using graph-based approaches for knowledge representation and retrieval, including enhanced query capabilities, improved data integration, and more intuitive exploration of complex datasets.\nExample: Suppose a user submits the following query: \"Give me the total home goals for Bayern Munich in the 2014-15 season.\"\n\u2022 Step 1. The KGs as described in Section 4 are created from the SoccerNet dataset and stored in Neo4j. It is important to mention that the KGs creation from the dataset occurs only once, and when using the framework, we actually begin from Step 2.\n\u2022 Step 2. To extract relevant information from our KGs, the first task is to translate the user query into a format that the KGs can process. This involves using an LLM to convert the natural language query into a Cypher query, a specialized language for querying graph databases. In this Cypher query, elements of the user query are mapped to nodes and edges within the KGs. For instance, 'goal' is treated as an 'Event' node, 'Bayern Munich' as a 'Team' node, and the relationship between them as an 'ASSOCIATED_TO' edge. The Cypher query then searches for a 'Game' node with the attributes 'season' set to 2014-2015 and 'home_team' as Bayern Munich, which is linked to an Event' node via an 'IS_PART_OF' edge. This process is illustrated in Figure 14 (Generated Cypher).\n\u2022 Step 3. The Cypher query generated in Step 1 is executed against the KG, retrieving the relevant nodes and edges. The details of this execution and the retrieved data are provided in the 'Full Context' section of Figure 14.\n\u2022 Step 4. Finally, the initial user query, along with the retrieved data from the 'Full Context, are fed into the LLM. Using this combined information, the LLM generates the answer, which is shown in the 'Result' section of Figure 14."}, {"title": "6 EVALUATION", "content": "In this section, we evaluate the performance of Structured-GraphRAG and provide an in-depth analysis. Table 3 highlights a sample set of questions derived from the dataset. It is important to note that the examples listed are not exhaustive, there could be many more examples for each category. For the purposes of demonstrating the effectiveness of our approach, we have selected a subset of 10 questions.\n6.1 Optimal KGs\nOne of the main advantages of applying graph-based methods is that the data processing time is significantly shorter compared to other methods. However, this only occurs when the KGs structures created from the source dataset are optimal. In this context, an optimal graph is one that contains all relevant information from the dataset while being organized in a way that minimizes complexity. This efficient structure ensures that the system can quickly identify important nodes and edges without requiring extensive computation."}, {"title": "6.2 Execution Time", "content": "As previously discussed, our KGs are optimal, leading to a substantial reduction in execution time. To illustrate this reduction, we conduct a performance comparison with a recently published paper [17], which utilized the same dataset as our study. The key distinction between the two approaches lies in how the data is processed: while the authors of [17] analyze the dataset in its raw form, our method first transforms the data into KGs before performing analysis. This comparison clearly demonstrates the superior performance of our KG-based approach in reducing execution time compared to the direct data analysis method employed in [17].\nFor the evaluation, we applied both methods to a series of sample queries and measured their execution times. The results are presented in Table 4, where the column indicating percentage improvement clearly shows that our KG-based approach consistently delivers faster response times compared to the method used in [17]. These results highlight the efficiency gains achieved by our framework, demonstrating its ability to process and respond to queries with significantly greater speed, thereby confirming the superior performance of Structured-GraphRAG over the direct data analysis approach employed in [17]."}, {"title": "6.3 Accuracy", "content": "For the accuracy evaluation, we designed an experiment to measure the consistency of the language model's responses. We posed the set of ten questions to the model five times consecutively, focusing on whether it consistently generated the correct answers across all iterations. This repetitive questioning approach is crucial for evaluating how well the model handles hallucination, which is a common issue in LLMs. The result of our experiments are indicated in Table 5.\nThe accuracy percentage is obtained using the formula in Equation 1:\n$Accuracy = \\frac{\\text{number of correct answers}}{\\text{total number of questions}} \\times 100.$"}, {"title": "7 DISCUSSION", "content": "In designing Structured-GraphRAG, a key feature is its ability to identify and correct inaccuracies in team names, league names, or player names caused by user queries. This functionality is crucial as it significantly reduces the occurrence of errors associated with retrieving incorrect data due to input mistakes.\nWithin the Player-Facts KG structure, some players are represented both as attributes within event nodes and as separate nodes connected to these events. This design aims to minimize hallucinations that can occur when generating Cypher queries with LLMs.\nThe KGs developed here are dynamic, allowing for updates with new data and adaptation as new information becomes available regarding game events, players, teams, coaches, referees, and stadiums. Additionally, this method for constructing KG structures is flexible and adaptable to various structured datasets, making it suitable for creating KG structures from different sources.\nThe Structured-GraphRAG framework presented in this paper is adaptable to various datasets and can be utilized for querying data from other datasets. To demonstrate its effectiveness, we applied it to the SoccerNet dataset [7].\nAs illustrated in Table 5, Structured-GraphRAG outperforms the method presented in [17] on Questions 4 and 5. This highlights the advantage of employing a graph-based approach, where the smart search efficiently locates nodes with the desired attributes. Consequently, this reduces processing time and enhances answer accuracy. However, for tasks involving listing, the performance of our framework is comparable to that of the method in [17]. One of the challenges in Structured-GraphRAG using LLM lies in handling questions that ask for lists. In such cases, while the LLM can generate the correct Cypher query and retrieve all relevant answers, it often fails to present the complete list.\nOur results in Figure 14 differ from those obtained through a Google search. This discrepancy arises because our dataset is SoccerNet, and we have only analyzed games from this specific dataset."}, {"title": "8 CONCLUSION", "content": "In this paper, we introduced Structured-GraphRAG, a novel framework designed to enhance data retrieval across various structured datasets by utilizing the capabilities of KGs and graph-based architectures. Our results demonstrate that Structured-GraphRAG not only improves precision and reduces hallucinations in language models but also optimizes query performance and reduces response times. These advanced data retrieval techniques pave the way for applications in diverse fields, showcasing the versatility and adaptability of Structured-GraphRAG.\nAdditionally, by addressing the challenges of traditional graph-based methods, particularly the need for domain-specific expertise in KG design, we present a more accessible approach to graph construction for structured datasets, broadening its usability to a wider range of users."}]}