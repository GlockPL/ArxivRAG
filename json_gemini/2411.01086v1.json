{"title": "Practical hybrid PQC-QKD protocols with enhanced security and performance", "authors": ["Pei Zeng", "Debayan Bandyopadhyay", "Jos\u00e9 A. M\u00e9ndez M\u00e9ndez", "Nolan Bitner", "Alexander Kolar", "Michael T. Solomon", "Ziyu Ye", "Filip Rozp\u0119dek", "Tian Zhong", "F. Joseph Heremans", "David D. Awschalom", "Liang Jiang", "Junyu Liu"], "abstract": "Quantum resistance is vital for emerging cryptographic systems as quantum technologies continue to advance towards large-scale, fault-tolerant quantum computers. Resistance may be offered by quantum key distribution (QKD), which provides information-theoretic security using quantum states of photons, but may be limited by transmission loss at long distances. An alternative approach uses classical means and is conjectured to be resistant to quantum attacks-so-called post-quantum cryptography (PQC)\u2014but it is yet to be rigorously proven, and its current implementations are computationally expensive. To overcome the security and performance challenges present in each, here we develop hybrid protocols by which QKD and PQC inter-operate within a joint quantum-classical network. In particular, we consider different hybrid designs that may offer enhanced speed and/or security over the individual performance of either approach. Furthermore, we present a method for analyzing the security of hybrid protocols in key distribution networks. Our hybrid approach paves the way for joint quantum-classical communication networks, which leverage the advantages of both QKD and PQC and can be tailored to the requirements of various practical networks.", "sections": [{"title": "Introduction", "content": "In recent years, we have seen a rapid development of quan-tum information science and technologies. This necessitates the construction of secure communication networks and cryp-tographic systems that are able to withstand attacks from fu-ture quantum computers. Quantum key distribution (QKD)is a leading approach developed to address this need1\u20133. InQKD protocols, the communication parties transmit encodedquantum states and perform quantum measurements to dis-tribute symmetric keys, with information-theoretic securitybased on the fundamental principles of quantum mechanics4,5.Although there are many successful examples in academiaand industry of implementing metropolitan, intercity, or evenglobal QKD networks6\u20139, the long-distance performance offiber-based QKD technologies is significantly limited by theexponential decay of key rates over increasing distances 10.Additionally, the security of practical QKD systems might beaffected by the imperfections in the light sources and measure-ment devices11, which require extra counter-measure designsto close the loopholes and hence introduce extra device com-plexities3,11.\nPost-quantum cryptography (PQC) is another promisingtechnique to provide quantum resistance12, using only classi-cal methods. Unlike traditional cryptography based on classi-cally hard problems like factoring, elliptic curves, or discretelogarithms that are nonetheless vulnerable to efficient quan-tum algorithms13, PQC leverages problems conjectured to behard even for quantum computers12. Due to its classical na-ture, PQC can be readily deployed in current cryptographicsystems with existing hardware, and its communication rate isnot limited by transmission distance. In fact, the National In-stitute of Standards and Technology (NIST) has already calledfor the standardization of certain PQC protocols14, includ-ing CRYSTALS-Kyber15, a key sharing algorithm based ona variant of the lattice problem known as Learning with Er-rors16. On the other hand, deployment of PQC protocols stillfaces significant challenges. Firstly, the security of PQC hasnot been conclusively established. Evolving research on al-gorithms to break various PQC schemes17 continues to bemet with varying success18,19. Secondly, implementations of PQC algorithms demand considerable computational ef-fort. As the resulting PQC key rates depend heavily on thecomputational power of the users, performance is less thanideal when compared to the existing mature cryptographic in-frastructure deployed throughout modern communication net-works. This limits its commercial viability with personal com-puters and the scope of real-world use, although purpose-builtchips could alleviate this concern in the future.\nIn light of these limitations, PQC has been utilized to im-prove aspects of the classical exchange required for QKD,including authentication20 and information reconciliation21.Recent work has also begun investigating specific single-linkjoint PQC-QKD protocols and cryptographically evaluatingthe operational issues of link security22,23. In this work, weexplore the construction of a composite symmetric key dis-tribution system that integrates PQC with QKD, leveragingthe advantages of both. Our work analyzes multiple combi-"}, {"title": "Key Encapsulation Mechanism and Quantum Key Distribution", "content": "One major component we use to construct thesymmetric key distribution network is prepare-and measureQKD3,11, shown in Fig. 1(a). In this protocol Alice generatesa random raw key rk, which she encodes into quantum statesthat she transmits to Bob. She records classical information babout the encoding such as the basis used. Bob receives thequantum states and measures them to obtain rk' and classicalinformation b' related to the measurement procedure. Aliceand Bob then announce b and b' as well as a subset of rk andrk' and perform classical post-processing, including securityparameter estimation, error correction, and privacy amplifica-tion, to generate the final symmetric key bits k from the rawkey bits rk(rk').\nThe other main component we consider is a key encapsu-lation mechanism (KEM) based on a post-quantum public-key cryptography system. KEM24 is a widely-used classicalcryptographic method for distributing symmetric keys usingpublic-key encryption (PKE) (see Ref.25 for a general intro-duction). The basic idea of KEM is to use PKE to distributea random message from Alice to Bob that they can keep assymmetric key. As is shown in Fig. 1(b), a typical process ofKEM involves three steps: key generation, encapsulation, anddecapsulation. In the key generation step, Bob runs PKE togenerate a public key pk and a private key sk used for encryp-tion and decryption. He then announces pk to Alice. In theencapsulation step, Alice uses pk to simultaneously generateand encrypt a random message k to its ciphertext c. She thenannounces c to Bob. Finally, in the decapsulation step, Bobuses sk to decrypt c and obtains k. They then store k for lateruse as a symmetric key.\nThe motivation for using a Key Encapsulation Mechanism(KEM) instead of directly relying on Public-Key Encryption(PKE) is to enhance the practical security of the PKE sys-tem. In modern security models for public-key systems, theeavesdropper (hereafter \"Eve\") is often allowed to query theencryption and/or decryption schemes to study their behavior.In a chosen-plaintext attack (CPA), Eve can select arbitraryplaintexts and obtain the corresponding ciphertexts to analyzethe encryption scheme, aiming to deduce information aboutthe encryption key. A stronger attack, a chosen-ciphertext at-tack (CCA), allows Eve to choose ciphertexts and learn thedecrypted plaintexts, which can help compromise the encryp-tion system by exploiting this decryption information.\nWhile many typical PKE systems can prevent a CPA-capable Eve from learning the symmetric key bits, it is oftendifficult to prove that these systems are also secure againsta CCA-capable Eve25,26. By using KEM, in which the deter-ministic message is replaced with random bits, it becomes dif-ficult for Eve to learn the key bits, even under a CCA. WhileKEMs were traditionally developed with classical attackers"}, {"title": "Performance enhancement by series connection", "content": "One primary motivation to combine KEM and QKD into a sin-gle protocol is to enhance the key generation rate over longdistances. In Fig. 2a, we compare the key generation speedof KEM and point-to-point QKD with respect to communica-tion distance. For the KEM performance estimation, we con-sider users running Kyber-102416,29 on their personal comput-ers with 3.0 GHz clock frequency. For the QKD performanceestimation, we assume a commercial fiber link between userswith a loss of 0.19 dB/km. For the commercial and state-of-"}, {"title": "Security enhancement by parallel design", "content": "Another mo-tivation for combining KEM and QKD is to achieve a higherlevel of security. Both bare KEM and QKD protocols havesecurity vulnerabilities when deployed in practice: KEM mayeventually be broken algorithmically, posing a risk of becom-ing unreliable in the future, while current implementations ofQKD may be susceptible to physical attacks due to device im-perfections11. Additionally, in scenarios where a QKD linkinvolves classical relay nodes or the series-connection proto-col discussed earlier, it becomes necessary to assume the trust-worthiness of all intermediate nodes. In the series-connectionprotocol, if Eve manages to compromise either the QKD orKEM link, she could potentially access the final key bitsshared by the users. To address this, we explore how end userscan enhance the security of distributed key bits when utilizingmultiple key distribution channels. Specifically, we proposetwo parallel key-distribution designs: the XOR scheme andthe secret-sharing (SS) scheme.\nIn the simple XOR scheme shown in Fig. 3(a), Alice andBob first use KEM and QKD as two separate channels to dis-tribute key bits k\u2081 and k2. The XOR of the two is then takento generate the final shared key bits k = k1 \u2295 k2. As long asone of the input bits k\u2081 or k2 is uniformly random, the outputis uniformly random. Thus, Eve must learn both k\u2081 and k2 inorder to learn the shared key. We can also generalize the XORscheme to the case where Alice and Bob own multiple paral-lel key distribution channels some of them are QKD links,"}, {"title": "Secret sharing", "content": "while others are KEM by taking the XOR of all the keybits from each channel together to generate the final key. Asbefore, Eve needs to break all the links to learn the shared keybits. However, the cost of generating the shared key for thisprotocol may be prohibitively large. Comparing the number ofoutput bits to input bits for a protocol defines its informationratio \u03b7; for the XOR scheme, it is \u03b7 = 1/n. Additionally, inmany scenarios we want to pursue a more complicated trusthierarchy some key distribution channels might be moretrustworthy than others based on the particular implementa-tion conditions.\nTo improve the symmetric key generation rate of the XORscheme, we propose a key distribution method based on secretsharing. Here, we apply a variant of Shamir's secret sharingscheme33. Suppose Alice wants to distribute a random mes-sage (i.e., secret) m to Bob through n key distribution chan-nels. They aspire to achieve information-theoretic security forthe secret m, even if some of the channels may be compro-mised. To this end, Alice utilizes polynomials over the finitefield GF(q) for prime q,\n$f = a_0 + a_1x + a_2x^2 + ... + a_{t-1}x^{t-1} \\in GF(q)[x]$,\nwhere the coefficients a0, a1, ..., at\u22121 \u2208 GF(q) are chosen fromthe field. Here, the rank of the polynomial defines the thresh-old t, so-called because the polynomial is uniquely determinedby evaluating it for at least t inputs. For our purposes, we canequate the threshold with the number of channels, t = n. Thus,the idea is to encode the secret in a privately-held polynomial,which is shared through n evaluations. The procedure is asfollows. Alice first chooses f by selecting the coefficients uni-formly at random. She then chooses integer g > 1 which deter-mines the length of the secret m. Next, she determines a primeq> n + g and selects n + g different publicly-announced in-puts X0,X1,...,Xn+g\u22121 \u2208 GF(q); for instance, she can set xi = ifor i = 0,1,...,n + g- 1. She announces the first g inputs,and records the polynomial evaluations at these points as thesecret m := (f(x0),..., f (xg\u22121)). The evaluations of the n re-maining inputs (f(xg), f(xg+1), ..., f (xn+g\u22121)) comprise the nshares $1, $2,..., Sn of the polynomial. To securely distributethese shares to Bob, Alice then assigns the inputs to the n in-dependent KEM or QKD channels, and encrypts each share byconsuming secret key bits k1,k2, ..., kn from the assigned chan-nel. Finally, she announces the encrypted shares along withtheir corresponding inputs and channel assignments. Uponreceiving all the shares, Bob performs Lagrange interpolationto retrieve the coefficients ao, a1,..., at\u22121 of f, from which hecan then evaluate the secret m.\nThe above secret sharing scheme is information-theoretically secure: it can be proven that, when Evecan only learn at most \u0394 := t -g shares, she has insufficientinformation to restrict the possible values of the message andtherefore cannot learn any information about the secret33. In the whole scheme, we consume nlog2(q) symmetric key bitsand distribute g log2(q) bits of secret. The information ratio is\n$\u03b7 = \\frac{glog_2(q)}{nlog_2(q)} = \\frac{\u03b7-\u0394}{n}$\nConsider the case when Alice and Bob hold five differentKEM or QKD links. Suppose they want to ensure that Evecannot obtain any information about m when she breaks lessthan or equal to three of the channels, so they apply the se-cret sharing scheme with n = t = 5,g = 2. The informationratio is then \u03b7 = 2/5, which is higher than the use of the XORscheme with four links whose \u03b7 is 1/4. If we set A to be aconstant and increase n, the ratio \u03b7 will approach 1, whichimplies that we can distribute almost the same amount of keybits as the naive usage of multiple channels while enhancingtheir security level.\nIn practice, we want to design the key distribution schemewith specific trust structures. For example, when the usersshare multiple KEM and QKD links, they might want to en-sure that Eve can learn the final key bits only if she breaks atleast one KEM and one QKD links. This can be guaranteedby introducing a more advanced secret sharing scheme with aspecific access structure33\u201335 A which is a set of subsets ofall key distribution links. Only when Eve were to learn the"}, {"title": "Network analysis", "content": "In a realistic hybrid quantum network,information may need to travel through intermediary links andnodes before it reaches its destination. To assess the securityof a protocol implemented in such a network one must con-sider the vulnerability of all the involved links and nodes. Forexample, consider replacing a long QKD link between Aliceand Bob with many short QKD links in series with interme-diate trusted nodes. Since the links are shorter, the overallkey rate is higher, but the trusted nodes can increase the vul-nerability of the protocol. In such a scheme, if even one ofthe nodes is compromised, then the secret key can be fullyexposed. Vyas and Mendes42 suggest a protocol to relax thetrust requirement by connecting each node to a highly trustedcentral key management system (KMS). Instead of using thegenerated QKD keys to decrypt and re-encrypt information,each node now takes the XOR of the keys distributed over itstwo adjacent links to generate a mask, which is then submittedto the KMS. In this scheme, no single node except for Aliceand Bob ever has enough information to learn the secret key,assuming communication with the KMS is secured (for exam-ple, through KEM). To learn the secret key, an attacker wouldneed to learn not only a raw QKD key, but also all of the masks(by compromising the KMS node or its communication links).\nMore generally, the security of hybrid protocols that buildupon the series and parallel combination of QKD and KEMcan be examined by representing a hybrid network as a graphG = (N, &), where N is the set of nodes and & is the set ofQKD and KEM links between the nodes. We allow for G tohave multiple edges between the same pair of nodes. This cor-responds, for example, to the presence of both a QKD link anda KEM link between two nodes. A key sharing protocol PA, \u0412between nodes A and B can be constructed from sub-protocolscombined in series or in parallel, using the techniques de-scribed in previous sections. This protocol can be compro-mised by attacking some subset of the edges or nodes it uses.Formally, a vulnerability of a protocol is a set v \u2208 2NUE ofnetwork elements that, if attacked as a unit, would expose theshared key. We define the total vulnerability set of a protocolVtot (PA,B) as the set containing all possible vulnerabilities forprotocol PA,B. The minimal vulnerability set Vmin (PA,B) is thesubset of Vtot(PA,B) containing all of the vulnerabilities thathave no strict subset in Vtot(PA,B), thus describing the smallestset containing all the units that Eve could choose to attack inorder to get the final key.\nSimple rules can be used to construct the minimal vulner-ability set of a composite protocol from the vulnerabilities ofthe sub-protocols that comprise it. To assess the security ofdifferent protocols enabled by the network, one can define asecurity function which assigns a value to a protocol's mini-mal vulnerability set. Similarly, rules can be defined to cal-culate the key generation rate of a hybrid protocol, therebyquantifying its performance. Details of the rules for construct-ing vulnerability sets and assessing key generation rates, aswell as a formal mathematical description of a protocol canbe found in the supplementary material32. Users can thenchoose a protocol based on application-specific criteria. Forinstance, users requiring fast communication might use thefastest protocol that still achieves some minimum accepted se-curity value."}, {"title": "Conclusion", "content": "Future developments in real-world hybrid networks will re-quire considerations of the allocation of shared networks re-sources. Utility functions for this purpose have been exten-sively explored for classical networks, while their quantumequivalents are actively being studied43,44. For example, over-all performance optimization of a key distribution networkwhile still meeting desired security requirements could beachieved using techniques similar to those in Zhou et al.45,where Lyapunov optimization is applied to maximize utilityin QKD networks by designing an efficient key managementand data scheduling algorithm. Likewise, a key managementalgorithm for the hybrid quantum-classical network that dy-namically balances key generation and consumption can bedefined.\nA deployed hybrid network must also carefully considergranular security details in the distribution, combination, andapplication of the keys to ensure smooth operation even aftera potential security breach. The Muckle protocol proposed byDowling et al.22, which implements a parallel protocol simi-lar to the XOR scheme, provides a framework to understandits security against adversaries. Moreover, the protocol pos-sesses desirable qualities such as forward security and post-compromise security. Garms et al.23 experimentally demon-strate a modified version of this protocol which exactly im-plements an XOR scheme to ensure the shared key will retaininformation-theoretic security. An extension of their tech-niques to the secret-sharing scheme and series combinationwill be critical for future application of our work. Addition-ally, we can use our analysis tools to study the Muckle pro-tocols by defining a custom security function that encapsu-lates the security awarded by authentication, assigning greatersecurity to a \u201cMuckle link\u201d than a naive XOR link. Moregenerally, one can abstract away the security details of arbi-trary hybrid protocols with custom security functions, usingthe vulnerability sets for the applicable network structure tocalculate overall security. Thus, our work provides a new di-rection for designing hybrid quantum-classical networks forsecure communications and cryptographic systems."}]}