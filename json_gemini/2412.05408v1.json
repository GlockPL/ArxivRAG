{"title": "FogROS2-FT: Fault Tolerant Cloud Robotics", "authors": ["Kaiyuan Chen", "Kush Hari", "Trinity Chung", "Michael Wang", "Nan Tian", "Christian Juette", "Jeffrey Ichnowski", "Liu Ren", "John Kubiatowicz", "Ion Stoica", "Ken Goldberg"], "abstract": "Cloud robotics enables robots to offload complex computational tasks to cloud servers for performance and ease of management. However, cloud compute can be costly, cloud services can suffer occasional downtime, and connectivity between the robot and cloud can be prone to variations in network Quality-of-Service (QoS). We present FogROS2-FT (Fault Tolerant) to mitigate these issues by introducing a multi-cloud extension that automatically replicates independent stateless robotic services, routes requests to these replicas, and directs the first response back. With replication, robots can still benefit from cloud computations even when a cloud service provider is down or there is low QoS. Additionally, many cloud computing providers offer low-cost \"spot\" computing instances that may shutdown unpredictably. Normally, these low-cost instances would be inappropriate for cloud robotics, but the fault tolerance nature of FogROS2-FT allows them to be used reliably. We demonstrate FogROS2-FT fault tolerance capabilities in 3 cloud-robotics scenarios in simulation (visual object detection, semantic segmentation, motion planning) and 1 physical robot experiment (scan-pick-and-place). Running on the same hardware specification, FogROS2-FT achieves motion planning with up to 2.2x cost reduction and up to a 5.53x reduction on 99 Percentile (P99) long-tail latency. FogROS2-FT reduces the P99 long-tail latency of object detection and semantic segmentation by 2.0x and 2.1x, respectively, under network slowdown and resource contention. Videos and code are available at https://sites.google.com/view/fogros2-ft.", "sections": [{"title": "I. INTRODUCTION", "content": "The complexity of foundational models [1], [2], [3] and sophisticated robot algorithms [4], [5] exceed most onboard robot computing capabilities. Cloud robotics provides shared access to on-demand resources and services with boosted performance and simplified management, enabling the deployment of compute-intensive algorithms on low-cost, mobile robots without powerful on-board hardware, such as GPU, TPU, and high-performance CPU. In previous research, we developed FogROS2, which enables unmodified robotics code in Robot Operating System 2 (ROS2) to offload heavy computing modules to an independent set of cloud hardware resources and accelerators. FogROS2 used on-demand servers that guarantee dedicated computing resources with high uptime (e.g., 99.99% [6]). However, the network quality of service (QoS) between robots and the cloud can vary, and during rare cloud outages, robots lose all cloud-computing benefits. Additionally, as on-demand instances can be expensive, many cloud providers offer spot VMs\u00b9 at a significantly reduced price with the caveat that they can shut down unpredictably\u2014making them (without fault tolerance) unsuitable for many robotics applications. In this work, we introduce FogROS2-FT, a fault-tolerant extension to FogROS2 [7] that provides robust performance against variable network QoS, infrastructure unavailability, and stochasticity of the robotic algorithms, increasing the reliability and responsiveness of cloud robotics. By adding redundancy to cloud computation, we enable cloud-robotics tasks to continue operating effectively despite the following failures:\n(A) Resource Unavailability: Although cloud services have high uptime and are managed by dedicated experts, outages can still occur. For example, an AWS outage affected the availability of the iRobot applications [8]. In addition, spot VMs may shut down unpredictably.\n(B) Resource Oversubscription: The cloud enables flexible usage of computational resources. For example, one can oversubscribe to a system by allocating fewer resources than the sum of resources required by all robots, based on the"}, {"title": "II. RELATED WORK", "content": "Cloud and Fog Robotics: The use of cloud computing resources for robots, conceptualized as cloud robotics [13], has become increasingly relevant as large models (e.g., NeRF [14], SAM [2] and LERF [3] for visual perception) and other computationally demanding algorithms (e.g., MPPI for path planning) are integrated in robotic applications. Following the Fog Computing paradigm [15], Fog Robotics [16] utilizes edge resources to improve performance, of cloud computing for a multitude of robotics applications, including grasp planning [5], motion planning [4], visual servoing [17], and human-robot interaction [18]. In the FogROS2 series of work, we address several concerns of using cloud compute for robotics. FogROS2 [19] is a cloud robotics framework officially supported by ROS2 [20]. FogROS2 focused on optimizing for a single cloud and robot using a Virtual Private Network (VPN). Extensions of this work have addressed the questions of connectivity, latency, and cost. FogROS2-SGC (Secure and Global Connectivity) [21] enables secure communication between distributed ROS2 robot nodes.\nMulti-Cloud Robotics: FogROS2 is the first multi-cloud robotics that offloads robotics applications to multiple cloud service providers. FogROS2-Config [22] extends FogROS2 to navigate available cloud machine selection that meets user-specified time and cost per request. FogROS2-FT uses multi-cloud Spot VMs to reduce the cost of the deployment. Spot VMs are one such cost-saving purchasing option offered by major cloud service providers that are up to a 90% discount off the standard on-demand pricing, because they can be preempted\u00b2 unpredictably [23]. This creates trade-off between the reduced price of spot VMs and having to build an infrastructure handling shutdowns and restarts [24]. The rates of preemption are highly variable across regions and instance types, from 3% to over 20% chance of preemption per day. Spot VM prices are also variable, and can fluctuate over the course of a day. Extensive research has been done to predict spot pricing using statistical models [25], [26] and learning methods [27], [28]. Due to their unreliable nature, spot VMs were not considered as part of the machine selection in FogROS2 and FogROS2-Config.\nFault Tolerance for Latency Sensitive Applications: A fault tolerant system is typically based on failover, dynamically switching to one of the machines upon failure of one machine, and redundancy by duplicated machines ensuring operation in case of a failure on one system. FogROS2-LS (Latency Sensitive) [29] implements failover strategy by enabling robots to flexibly connect with one of many servers, but the system takes time to discover and recover from faults by switching to another server that meets latency requirements. Lee et al. [30] enables fault tolerance on spot VMs for deep learning by actively checkpointing and recovering from the failure. On redundancy, Schafhalter et al. [31] improves the responsiveness of autonomous vehicles by performing operations on both vehicle and cloud. On fault tolerance of spot VMs, Voorsluys et al. [32], Poola et al."}, {"title": "III. SYSTEM ASSUMPTIONS AND FEATURES", "content": "We assume the application can be partitioned as a robot that sends sensor data as requests and awaits control instructions as response from a service that encapsulates the algorithm. We assume that all servers, networks, and faults are independent. The services need to be stateless to achieve fault tolerance transparently, or applications needs to use well-defined interfaces from FogROS2-FT to make the states consistent.\nWe assume the application is implemented in ROS2, the de-facto platform for building robotics applications. In ROS2, the computational units (client and service) are abstracted into ROS2 nodes. FogROS2-FT assumes the nodes are connected by ROS2 service communication model [36].\nFogROS2-FT achieves fault tolerance with the following properties:\n1) Zero Downtime at Faults. FogROS2-FT enables fine-grained request-level fault tolerance that ensures a request can be fulfilled as long as at least one replica and network remains operational.\n2) Algorithm-Agnostic. FogROS2-FT operates independently of the specific algorithms used in applications as long as it is stateless.\n3) Failure Cause-Agnostic. FogROS2-FT does not need to be tailored to specific failure, and remains functional as long as at least one service is available and connected.\n4) Hardware-Agnostic. FogROS2-FT is agnostic to heterogeneous hardware resource options provided by the cloud, supporting simultaneous use of different resource types and fault tolerance level.\n5) Multi-cloud, Multi-region. Since the failure may occur to a specific region or cloud provider, FogROS2-FT, as part of the Sky Computing paradigm [37] [38], offers a unified interface for interacting with various cloud service providers and uses cloud computing resources across different clouds simultaneously.\nMultiple cloud servers can provide fault tolerance to region or server-specific compute or network failures. We assume the robot has a persistent and stable connection to at least one of the cloud servers.\nThe probability of a VM failing at any moment in time is\n$P_{VM_i}(failure) = \\frac{recovery\\_time_{VM_i}}{uptime_{VM_i} + recovery\\_time_{VM_i}}$\nand the probability of a system failure with N spot VMs is\n$P_{system}(failure) = \\prod_{i \\in N}P_{VM_i}(failure)$.\nGiven a desired maximum failure rate for the system and the failure rate for all VMs used, we can calculate the required number of VM replicas as\n$N = \\lceil \\frac{log P_{system}(failure)}{log P_{VM_i}(failure)} \\rceil$\nTo reduce the probability of failure, one can either increase the number of replicas, or use a combination of spot and on-demand instances. For example, a spot VM is preempted every 15 hours on average from experiments by Skypilot paper [38] and re-creating and initiating a new instance with FogROS2 can take up to 20-minute downtime [19], the probability of simultaneous preemptions with two spot VMs is less than 0.05%, fulfilling the Service Level Agreement of AWS on non-spot VMs [6]."}, {"title": "IV. FOGROS2-FT DESIGN", "content": "This section describes how FogROS2-FT (1) achieves transparent fault tolerance for ROS2 applications and (2) resiliently maintains a pool of cost-effective cloud servers.\nFigure 2 shows an overview of how FogROS2-FT achieves both fault tolerance and cost effectiveness. FogROS2-FT sends requests to multiple replicated spot VMs, and routes the first response back to the robot. It resiliently manages spot VMs to recover from unpredictable terminations.\nInterface. A user interfaces to FogROS2-FT is through extensions to the ROS2 launch system. The interface is identical to standard ROS2 launch scripts, other than specifying the hardware requirements and desired fault tolerance level. We embrace the Sky [37] multi-cloud paradigm that user can directly specify generic hardware requirements instead of specific cloud machine types, which are compatible across heterogeneous cloud service providers."}, {"title": "V. EXPERIMENTS", "content": "Without modifying the application code, we apply FogROS2-FT to three cloud robotics applications: visual object detection with YOLOv8 [12], Semantic Segmentation with Segment Anything [2] and motion planning with Motion Planning Templates (MPT) [9]. We use SkyPilot [38] to select servers given a hardware specification. For all the experiments, we use Amazon Web Services (AWS) spot VMs with two replicas in different regions, us-west-1 (California) and us-west-2 (Oregon). The workstation connects with spot servers with Ethernet connection.\nMetrics. We compare FogROS2-FT with baseline single-server deployment by average latency collected by 100 trials for motion planning and 300 trials for robot vision tasks. We quantify long-tail anomalous latency faults with 99 Percentile (P99) latency, the runs with the top 1% latency.\nCloud Cost Table I shows the US$ per hour cost of FogROS2-FT compared to typical cloud robotics single-server setup. With Spot VMs, FogROS2-FT is up to 2.13x cheaper than conventional single-server cloud robotics setup."}, {"title": "VI. CONCLUSION", "content": "In this work, we explore concurrent execution across identical and stateless service deployments on different cloud machines with FogROS2-FT, and use the first received response to achieve the tolerance against independent faults.\nEvaluation shows FogROS2-FT can reduce the long-tail latency by up to 5.53 times. It can be deployed on cost-efficient spot VMs that the fault tolerant system can be up to 2.1x cheaper than conventional cloud robotics setup.\nIn future work, we will use multi-path connection, for example, having mobile robot to use 5G cellular connection, Wi-Fi and Ethernet connection simultaneously to avoid failures on single network connection. This resolves the assumption of FogROS2-FT that servers and faults to be independent and prevents the same network link between robot and cloud to be the single point of failure."}]}