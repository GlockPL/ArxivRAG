{"title": "Obfuscated Memory Malware Detection", "authors": ["Sharmila S P", "Aruna Tiwari", "Narendra S Chaudhari"], "abstract": "Abstract-Providing security for information is highly critical\nin the current era with devices enabled with smart technology,\nwhere assuming a day without the internet is highly impossible.\nFast internet at a cheaper price, not only made communication\neasy for legitimate users but also for cybercriminals to induce\nattacks in various dimensions to breach privacy and security.\nCybercriminals gain illegal access and breach the privacy of users\nto harm them in multiple ways. Malware is one such tool used by\nhackers to execute their malicious intent. Development in AI\ntechnology is utilized by malware developers to cause social harm.\nIn this work, we intend to show how Artificial Intelligence and\nMachine learning can be used to detect and mitigate these cyber-\nattacks induced by malware in specific obfuscated malware. We\nconducted experiments with memory feature engineering on\nmemory analysis of malware samples. Binary classification can\nidentify whether a given sample is malware or not, but identifying\nthe type of malware will only guide what next step to be taken for\nthat malware, to stop it from proceeding with its further action.\nHence, we propose a multi-class classification model to detect the\nthree types of obfuscated malware with an accuracy of 89.07%\nusing the Classic Random Forest algorithm. To the best of our\nknowledge, there is very little amount of work done in classifying\nmultiple obfuscated malware by a single model. We also compared\nour model with a few state-of-the-art models and found it\ncomparatively better.", "sections": [{"title": "I. INTRODUCTION (HEADING 1)", "content": "Rapid development in digital technology and the replacement\nof paper documents with e-documents have caused a hike in\nthe number of cyber attacks [1] every day. Hackers are\nperturbing the daily activities of users with multiple types of\nattacks which begin from observing the user activities to\nintervening in the network and disrupting the entire working\nof the system.\nMalware is a significant cyber-attack[2]. The word malware\nis a hyponym derived from \u2018mal' for 'malicious' intent and\n'ware' is for 'software'. So, it is a software or program\nwritten with malicious intent. Although antiviruses[3] are\nbuilt with the ability to detect and remove malware with the\nexisting signatures of malware. However, they lack the\naccuracy in detecting new and unknown malware whose\nsignatures are not found in the antivirus database. These\nunknown malwares are intelligently coded to change their\nform and behavior thereby they are undetected by the\nantiviruses and sandboxes to deceive the detection.\nObfuscated malware is metamorphic malware that can hide\nitself from detection. Since 1980, enough research has been\ndone in the field of malware detection, however, still there\nare major challenges in this field detecting unknown\nmalware, optimizing the detection rate, detecting obfuscated\nand evasive malware, predicting malware before the attack,\nidentifying the path of malware propagation, mitigating the\nflow of malware and recovery from malware infection and\nmany.\nOur contribution to this paper:\n1. Implementing a multi-class classification model for\nidentifying multiple obfuscated malwares to choose the\nproper course of action for its mitigation.\n2. A Random Forest Classifier has been proven to\ndemonstrate impressive accuracy for selecting important\nfeatures and for both binary and multi-class classification.\n3. Compare the proposed model with the existing dilated\nCNN model intended for detecting obfuscated malware.\nFurther, the rest of the paper is organized as mentioned here.\nIn section II brief introduction to obfuscated malware is\nprovided, in section III background and related work is\ndiscussed, and in section IV and V proposed methodology\nand implementation details are presented. Discussing the\nresults in section VI we provide concluding remarks in\nsection VII followed by references."}, {"title": "II. OBFUSCATED MALWARE", "content": "Obfuscation is a software engineering strategy to conceal\nsoftware from its internal structure and functionality.\nMalware developers are using these techniques to alter the\nmalware features and behavior such that it can be hidden from\nmalware detection systems."}, {"title": "A. Obfuscation methods:", "content": "Ilsun You [4] classifies malware into encrypted,\npolymorphic, oligomorphic, and metamorphic malware.\nEncrypted malware is associated with an encryptor and\ndecryptor. It evades detection by encrypting with different\nkeys during infection, thereby generating different signatures\nand confusing the antivirus scanner or any ML-based\ndetector. Meanwhile, the decryptor recovers the main body of\nmalware when the infected file is run. As there is a feasibility\nof mutation of decryptor from one generation to another\ngeneration, oligomorphic malware with multiple decryptors\nwere devised. Further to complicate the detection\npolymorphic malware with an infinite number of decryptors\nwere coded. Dead code insertion and other techniques like the\nusage of mutation engines were employed to generate such\nmalware. Advanced malware is metamorphic with auto\nmutation techniques to evolve themselves as and when it is\npropagating in a network.\nAccording to S. Schrittwieser et al., there are three software\nobfuscation techniques data obfuscation, static code\nrewriting, dynamic code rewriting[5] in the context of\nprotecting the software. In data obfuscation the program data\nis split or merged into several blocks, thus preventing the\nattacker from evading the software. Dynamic code rewriting\nmakes use of packers and encryptors to alter the program\nbehavior during runtime. SubVirt [6] is one such tool used for\ncode virtualization. Unlike dynamic code rewriting, static\ncode rewriting transforms code during compilation with\nsemantic replacement and substitutions. Injecting dead codes\nand rearranging the basic blocks of control flow would\nmislead the reverse engineering of software.\nLichen Jia [7] identifies three types of obfuscation methods\nused by malware viz. binary, source code level, and packed\nobfuscation methods. Adversarial examples were developed\nusing these obfuscation methods to evaluate learning-based\nmalware detection systems (LB-MDS). With the frequency\nof each obfuscation method used in its corresponding\nobfuscation space, there is a decrease in the accuracy of LB-\nMDS."}, {"title": "B. Dataset Description", "content": "Detection of malicious processes and programs is revitalized\nwith the application of memory engineering and forensic\nanalysis to capture vital characteristics and behaviors hidden\nin obfuscated malware. Canadian Institute of Cybersecurity\nfrom the University of New Brunswick has assimilated the\nCIC MalMem 2022 dataset using Memory feature\nengineering[8]. This malware dataset is composed of features\nextracted through memory analysis of memory dump\nprocessing done in debug mode. Being an updated and\nbalanced dataset, it consists of 2916 samples of benign, 986\nRansomware samples, 982 Spyware and 948 Trojan Horse\nsamples. Each family of malware has 5 subfamilies of data\nsamples. Being a balanced dataset, it is very useful for our\nresearch."}, {"title": "C. Detection of Obfuscated Malware", "content": "Extreme Learning machines [9] are employed to detect\nobfuscated malware using the CIC MalMem 2022 dataset.\nAccuracy and geometric mean of sensitivity and specificity\nare the metrics used for evaluation. Authors have worked on\nstandard, regularized, and unbalanced ELM methods for\nbinary and multiclass classification of obfuscated malware.\nExtracting the training time and testing time based on the\nnumber of neurons and other metrics, it is shown that\naccuracy increases with the number of neurons with a\nmaximum accuracy superior to 90% for binary classification\nbut not for multiclass classification.\nDilated CNN model is employed in the classification of\nobfuscated malware [10]. Its architecture consists of 4 blocks\nwith two convolutional layers, a dropout layer, and a batch\nnormalization layer. For binary classification, sigmoid\nactivation function and binary cross entropy loss function are\nused. For classifying multiple malware, one hot encoder and\nSoftmax activation function are used. Focal loss function is\napplied to deal with imbalanced dataset issues. They achieved\n99.92% accuracy with Adam Optimizer and for 100 epochs.\nBut, 81.83% accuracy in classifying multiple malware even\nwith 500 epochs.\nAnother similar experiment was conducted for the detection\nof Obfuscated malware using an Artificial Neural\nNetwork[11]. With three hidden layers of the neural network,\nactivation function ReLU for the hidden layer and Softmax\nfor the outer layer, the number of nodes used was 64 for the\nfirst and second hidden layers which subsequently doubled in\nthe third layer to 128. With a batch size of 1024 and 100\nepochs, this model identified malware with 99.72% accuracy.\nAs the number of epochs and training time increased the loss\nwas decreased and almost tending to zero. There was no\nattempt made to classify multiple families of malware in this\nwork.\nWith a similar dataset Random forest algorithm is used to\ndetect obfuscated malware in the cloud environment[12]\nwhich is preceded by the application of nature-inspired\noptimization techniques for feature selection, Viz. Cuckoo\nSearch Algorithm(CSA), wrapper-based Binary Bat\nAlgorithm(BBA), Particle Swarm Optimization(PSO), and\nMayfly algorithm(MA). Although these algorithms decrease\nthe selection of feature set, however, improve the\nclassification accuracy. The model achieved an accuracy of\n99.99% with {MA, RF}, 99.91% with {PSO, KNN} and\n99.10% with {PSO, SVM} for binary classification, though\nPSO is excellent for feature selection, multiple malware\ndetection is not addressed."}, {"title": "III. BACKGROUND AND RELATED WORK", "content": null}, {"title": "A. Role of Al in generating Obfuscated Malware", "content": "Al techniques are employed in [13] for preparing obfuscated\nmalware by inserting NOP instructions via deep\nreinforcement learning. It is apparent that, machine learning\nmodels used in malware detection systems can be fooled by\nadversarial examples. Convolutional Neural Network is\nimplemented to insert dead codes at optimal positions,\nthereby the resulting executable gets a mislabel from the\nmachine learning classifier.\nObfuscated malware generated by [14] using adversarial deep\nreinforcement learning, employing an efficient action control\nstrategy for generating new malware to defend against LB-\nMDS. It has been experimentally proved that 67% of the\nmalware generated by this model is efficient in escaping from\ndetection. The new metamorphic malware generated by this\nmodel possesses uplifted misclassification and enhanced\nevasion probability.\nProminent API features of 11 families of malware are\nextracted from the Cuckoo sandbox by [15]. To represent the\nextracted features, A feature extraction algorithm, and\nprocedures for feature reduction and representation are\nproposed. KNN, RF, and DT multiclass classifiers are used\nto classify 11 families of malware with a high training\naccuracy of 95.7% but testing accuracy is not highlighted.\nAlthough it is found to be time-consuming to extract the\ndynamic features from the API call traces, overcoming\nwhich, API call sequence analysis serves as a major feature\nof analysis for Obfuscated malware detection."}, {"title": "B. Random Forest", "content": "Random Forest[16] is a versatile supervised machine learning\nalgorithm for both classification and regression tasks. It is\npowerful by growing multiple decision trees and aggregating\nthe results of multiple decision trees for better decision-\nmaking. It is successful in giving accurate and stable results\nfor various complex problems beginning from image\nclassification, and image segmentation, to cancer cell\ndetection. Also, it has the capability of adaptability to extend\nits application to multidimensional problems. Various\nversions of Random Forest like Multinomial random forest,\nOblique Random Forest, Random Credal Random Forests\netc., are successfully implemented and built in the python\nlibraries."}, {"title": "C. Target Multiple malware", "content": "We intend to detect three types of obfuscated malware from\nour trained model viz. ransomware, trojan, and spyware.\nRansomware is a type of malware that encrypts the files on\nthe disk to demand a ransom from the victim but without a\nguarantee that paying the ransom will fetch the access back.\nProblems pertaining to ransomware are growing rapidly\nbecause of the obfuscation techniques adopted by the\nmalware developers. Spyware is a type of malware that\nperforms passive attacks by recording user behavior and\nactivities to transfer third-party networks, more dangerous\nthan active attacks. Trojan is another malware executing\nmalicious activities in the background with the disguise as\nharmless programs. Trojan Horse by the name 'Animal'\nappeared in 1974, executed without authorization to copy or\nreplicate to every directory in a user system, it can execute\nendless activities in the background."}, {"title": "IV. PROPOSED METHODOLOGY", "content": "In this work, we propose a machine learning model which is\na result of experimental analysis to detect obfuscated\nmalware and to identify the class of the obfuscated malware.\nHere we use the CIC MalMem 2022 Dataset as mentioned in\nSection II B, to identify the class of a new sample of malware\nas spyware, trojan or ransomware. We have evaluated State\nof the Art (SoTA) binary classifiers and multi-class classifiers\nwith CIC Malmem 2022 dataset to derive the metrics for\ncomparison and further analysis.\nWe conducted two experiments with State of the Art (SoTA)\nmodels in Machine Learning for Binary classification and\nMulti-class Classification. In Binary Classification, a given\nsample can be identified as malware or non-malware. As per\nour observation from the literature survey, an enormous\namount of work has been implemented in such classification.\nBut, identifying the new sample as malware or benign, does\nnot provide a proper insight on the specific type of malware\nattack and the course of action to be taken to mitigate the\npropagation of such malware. Because of the variants of\nmalware like ransomware, spyware, trojan, backdoors,\nrootkits, viruses, etc., identifying the type of the malware will\nbe helpful for suitable action to be taken to stop and/or\nrecover the adverse effect caused by the malware, which will\nfurther aid in mitigating the progress of the malware as well\nas recovering from the loss caused by the malware in a system\nor a network. This would also aid in identifying the source of\nthe attack.\nIn the first experiment of Binary classification, the SoTA\nclassifiers considered are Logistic Regression, Na\u00efve Bayes\nClassification, Linear SVM classification, Decision Tree, and\nRandom Forest classifiers. Similarly, The SoTA models\nconsidered for Multi-class Classification are Na\u00efve Bayes\nClassification, Decision Tree, Random Forest, Gradient\nBoosting, and K-Nearest Neighbor. With this intersection,\nSoTA models can also be studied for their application in such\nproblems."}, {"title": "V. IMPLEMENTATION", "content": "Dividing the dataset into training and testing in 80:20 ratio,\nthe binary and multiclass classifier models are implemented\nusing Python and Scikit learn libraries. After the training,\npredicting a label of a new sample is executed which returns\nthe learned label from the object in the array. This is followed\nby deriving the metrics from the prediction. For multi-class\nclassification, we employ the Adam optimizer with a Sigmoid\nactivation function and sparse categorical cross-entropy loss\nfunction."}, {"title": "A. Binary Classification of Malware", "content": "With reference to, Fig. 2, M1, M2, ..... Mn represents the\nmachine learning classifiers implemented from scikit library.\nThe dataset has a sample X belongs to {X1, X2...Xn} with\nfeatures F{F1,F2....Fn } defining a mapping X \u2192 F.\nIdentifying the class Y of X is the major objective of this\nexperiment. Y can be 0 or 1 for benign and malware.\nA1, A2, ..... An are the accuracies derived from the models\nM1, M2, ..... \u039c\u03b7. Comparing these accuracies, we evaluate\nand analyze the outstanding performer among all the binary\nclassifiers. With a similar ground rule, the multi-class\nclassifiers are also analyzed as in Fig. 3 for which Y can be\n0,1,2 and 3 for benign, spyware, ransomware, and trojan.\nWith this major objective, we carried out the experiment to\ncreate a baseline of five machine-learning algorithms. As\nmentioned earlier, implementation is undertaken with the\nscikit learn library. Basic and non-parameterized functions\nwere used for Logistic Regression and Na\u00efve Bayes classifier.\nFor Decision Tree minimum samples of leaf used are 3 with\na maximum depth of 10, entropy as the criteria, and log2 max\nfeatures are used. Repeating the same parameters for Random\nForest with a number of estimators as 30. C = 1 was the right\nchoice for Linear SVM."}, {"title": "B. Multi-class Classification of Malware", "content": "The major objective of this experiment is to create a baseline\nof five machine learning algorithms. Like the binary\nclassification experiment described in section V A, the\nimplementation is made with the scikit learn library. Basic\nand non-parameterized functions were used for Na\u00efve Baye's\nclassifier. For the Decision Tree, the minimum samples of\nleaf used are 16 with a maximum depth of 12, entropy as the\ncriteria, and log2 max features are used. Repeating the same\nparameters for Random Forest with number of estimators as\n30, min_samples split =4 and max depth as 40. With the batch\nsize of 2000 and just 10 epochs we achieved better accuracy\nwith Random Forest. Learning rate of 0.2 was the right choice\nfor Gradient Boosting. The ML models are tested and\nevaluated using the following metrics.\ni) Accuracy: metric used to measure the correctness in the\nclassification. Ratio of samples identified correctly to the\ntotal samples.\nAccuracy = $\\frac{\\text{No. of samples correctly identified}}{\\text{Total samples}}$\nii) Precision: metric used to measure the preciseness of the\nmodel in predicting positive samples.\nPrecision = $\\frac{\\text{positive samples rightly predicted as positive}}{\\text{Total positive samples identified}}$\niii) Recall: metric used to measure how many of predicted\npositive samples are correct.\nRecall = $\\frac{\\text{positive samples rightly predicted as positive}}{\\text{Total rightly identified positive samples + Total rightly identified negative samples}}$\niv) F1-score: metric that gives balance factor between\nprecision and recall, its value is directly proportional to\nthe performance.\nF1 score = $2 \\times \\frac{\\text{Precision }\\times \\text{ Recall}}{\\text{Precision + Recall}}$"}, {"title": "VI. RESULTS AND DISCUSSION", "content": null}, {"title": "A. Results of Binary Classification", "content": "The following are the results deduced from the experiment\ndetails discussed in the previous section. The values of the\nmetrics accuracy, precision, recall, and F1 score of binary and"}, {"title": "B. Results of Multi-class Classification", "content": "It is evident from the results of multiclass classification that\nDecision Tree and Gradient Boosting are closer in\nperformance, but Random Forest is performing outstanding\namong other models, although 89% is not superior, but it is\ncomparatively better result obtained so far. A combo chart in\nFig.4 shows the distribution of metrics. Comparing these\nresults with Anzhelika's Dilated CNN model, our proposed\nmodel is better with +8%. A similar experiment was carried\nout by Lamia Pervan using ANN, although binary\nclassification results were best, the model performance\ndecreased for multiclass classification. The confusion\nmatrices derived from our experiment are as shown in Fig.5."}, {"title": "VII. CONCLUSION", "content": "Obfuscated malware detection is one of the hot topics of\nresearch in the field of AI-infused cyber security. Although a\ngood amount of work is found in classifying a sample as\nmalware or non-malware, to the best of our knowledge\nsignificant research is lacking in detecting multiple malware\nin a single model. In this paper, we have implemented a\nMachine Learning-based cybersecurity model for multi-class\nclassification of obfuscated malware to detect three types of\nmalware viz. spyware, ransomware, and trojan. We have\ncompared the results of our work with existing works and\npresented that our proposed model performance is 8% better\nthan the existing models with the better hyperparameters we\nchose. With the Random Forest algorithm and considerable\nhyperparameter tuning, we achieved an accuracy of 89.07%\nin classifying multiple obfuscated malware. Although there\nis further scope for improvement in achieving still higher\naccuracy, extensive experiments are being conducted for\nfurther improvement in accuracy."}]}