{"title": "Double-Ended Synthesis Planning with Goal-Constrained Bidirectional Search", "authors": ["Kevin Yu", "Jihye Roh", "Ziang Li", "Wenhao Gao", "Runzhong Wang", "Connor W. Coley"], "abstract": "Computer-aided synthesis planning (CASP) algorithms have demonstrated expert- level abilities in planning retrosynthetic routes to molecules of low to moderate complexity. However, current search methods assume the sufficiency of reaching arbitrary building blocks, failing to address the common real-world constraint where using specific molecules is desired. To this end, we present a formulation of synthesis planning with starting material constraints. Under this formulation, we propose Double-Ended Synthesis Planning (DESP), a novel CASP algorithm under a bidirectional graph search scheme that interleaves expansions from the target and from the goal starting materials to ensure constraint satisfiability. The search algorithm is guided by a goal-conditioned cost network learned offline from a partially observed hypergraph of valid chemical reactions. We demonstrate the utility of DESP in improving solve rates and reducing the number of search expansions by biasing synthesis planning towards expert goals on multiple new benchmarks. DESP can make use of existing one-step retrosynthesis models, and we anticipate its performance to scale as these one-step model capabilities improve.", "sections": [{"title": "1 Introduction", "content": "Synthesis planning\u2014proposing a series of chemical reactions starting from purchasable building blocks to synthesize one or more target molecules is a fundamental task in chemistry. For decades, chemists have approached the challenge of synthesis planning with retrosynthetic analysis [1, 2], the strategy by which a target molecule is recursively broken down into simple precursors with reversed reactions. In recent years, advances in machine learning have enabled a multitude of computer-aided synthesis planning (CASP) algorithms [3-6] that navigate a combinatorially large space of reactions to propose chemically sensible routes to a variety of drug-like molecules within seconds to minutes. However, fully data-driven algorithms still underperform when generalizing to realistic use cases such as planning for more complex targets or in constrained solution spaces. In practice, expert chemists may plan syntheses with specific starting materials in mind, called \"structure-goals\" [1], that constrain the solution space. For instance, efficient syntheses of highly complex drugs are often most practical when synthesized from naturally-occurring starting materials that share complex features with the target, a practice known as \u201csemi-synthesis\" [7, 8]. There is also immense interest in identifying pathways from waste or sustainable feedstocks to useful chemicals [9\u201311], but existing methods have thus far relied on heuristics and brute-force enumeration of reactions.\nThough algorithms for planning synthetic routes from expert-specified starting materials have been proposed [12, 13], the vast majority of CASP algorithms today cannot address starting material-"}, {"title": "2 Background", "content": ""}, {"title": "2.1 Related work", "content": "Computer-aided retrosynthetic analysis Retrosynthetic analysis has traditionally been formulated as a tree search problem, where each step involves searching for chemically feasible transformations and corresponding reagents to derive the product molecule. In defining the feasible transformation,"}, {"title": "2.2 Formulation of general and starting material-constrained synthesis planning problems", "content": "General synthesis planning In this work, we only consider template-based retrosynthesis methods, though any single-step model is compatible with our algorithm. Let M be the set of all valid molecules, R be the set of all valid reactions, and T be the set of all valid reaction templates. A reaction Ri \u2208 R is a tuple (ri, Pi, ti), comprising a set of reactants ri CM, a single product\npi \u2208 M, and a retro template ti \u2208 T. A retro template t is a function t : M \u2192 2M that maps a product to precursors such that \u2200i : ri \u2208 ti (pi). Likewise, a forward template t' \u2208 T' is a function t' : 2M \u2192 M where \u2200i : pi \u2208 t'(ri).\nGiven target molecule p* \u2208 M and set of building blocks (BBs) B C M, synthesis planning finds a valid synthetic route-a set of reactions S = {R1,... Rn} that satisfies the following constraints.\nConstraint 1 (Synthesize all non-BBs). \u2200 i : m \u2208 ri, m \u00a2 B \u21d2 \u2203 j s.t. m = pj;\nConstraint 2 (Target is final molecule synthesized). \u2203 i s.t. pi = p*, \u2200 i : p* \u2209 ri;"}, {"title": "3 Methods", "content": "DESP is built on the Retro* algorithm [6] and recent advances that enable conditional generation of synthetic routes from the bottom up [41, 42]."}, {"title": "3.1 Definition of synthetic distance, a goal-conditioned cost function", "content": "Like Retro* [6], DESP is an A*-like search and thus requires a method of evaluating the expected cost of various frontier nodes. We follow Retro* and use the notation of V\u2081(m|G), Vm, and rn functions (Section A.2 details Retro* and these functions). We also define a function c : R \u2192 R which maps\na reaction to a scalar cost. For a valid synthetic route S = {R1,..., Rn}, the total cost of S is\n\u03a3=1 C(Ri). Vm represents the minimum total cost across every valid synthetic route to molecule m,\nand is learned in Retro* and DESP to bias the search towards B.\nHowever, to maintain consistency in guiding A* search in the starting material-constrained setting,\nwe require not only an estimate of the cost of synthesizing molecule m from arbitrary building\nblocks, but also an estimate of the cost of synthesizing molecule m2 from m\u2081 specifically (in\naddition to other arbitrary building blocks). As such, we define a new function D : M \u00d7 M \u2192 R,\nwhich we term synthetic distance, as it effectively represents the minimum cost distance between two\nmolecules in G, the graph constructed from the set of all possible reaction tuples R. More precisely,\nthe synthetic distance from m\u2081 to m2 is the difference between the minimum cost of synthesizing m2\nacross all valid synthetic routes containing m\u2081 and the minimum cost of synthesizing m\u2081 across all\nvalid synthetic routes in general. Learning D then allows for the guidance of both top-down search\ntowards the starting material and bottom-up search towards the target with rapid node comparisons."}, {"title": "3.2 DESP algorithm overview", "content": "In practice, synthesis planning problems are generally approached by simulating a search through\nthe complete reaction graph G. We follow Xie et al. [30] in considering an AND-OR graph structure\nfor search graphs, in which molecules are represented by OR nodes (only one child must be solved)\nand reactions are represented by AND nodes (all children must be solved). In implementing most\nsynthesis planning algorithms [3, 6], one initializes the search graph G = {p*}. With DESP, we\ninstead initialize two search graphs GR = {p*}, GF = {r*} and introduce two expansion policies,\none for \"top-down\" retrosynthesis expansions on GR and another for \u201cbottom-up\" forward expansions\non GF. This allows us to perform a bidirectional graph search between the target and goal molecules\nby interleaving retro and forward expansions, with the goal of the two search graphs converging to\nmore efficiently find a valid synthetic route. In this work, we implement F2E and F2F variants of\nDESP. Notably, our implementation of F2F performs node comparisons to all nodes in the opposing\nsearch graph rather than just frontiers. For m\u2208 GR, we define a goal function y : M \u2192 M such\nthat y(m) = r* in F2E and y(m) = arg ming'\u2208GF D(g', m) in F2F. Likewise, for m \u2208 GF, let\n\u03b3(m) = p* in F2E and y(m) = arg ming'\u2208GR D(m, g') in F2F.\nThe following quantities or functions are relevant in the algorithm: rn, V\u2081(m|G), and Vm from\nRetro*, and somewhat analogously dn, Dt(m|GR), and Dm. We briefly define the new quantities:\n(1) Dm represents D(y(m), m). (2) dn(m|GR) represents the \u201cdistance numbers\" of a top node m."}, {"title": "3.3 Forward expansion policy with conditional generation of one-step reactions", "content": "To perform forward one-step synthesis expansions, we adapt the approach of Gao et al. [42]. Let\nzm: M\u2192 R and z\u0142 : T \u2192 Rn be functions mapping a molecule and template (respectively) to\nn-dimensional embeddings. We define two target functions:\n$f_{t}: M\\times M\\rightarrow T' \\approx \\sigma(MLP_{t}(z_{m}(m_{1})z_{m}(m_{2})))$\n$f_{b}: M \\times M \\times T' \\rightarrow B \\approx k\\text{-}NN_{B}(MLP_{b}(z_{m}(m_{1}) z_{m}(m_{2}) \\oplus z_{t}(t')))$\nTogether, the learned approximations of ft and fo define our forward expansion policy (Algorithm 1),\nwhich generates forward reactions for the expanded node m\u2081 conditioned on m2."}, {"title": "3.4 Extracting multi-step reaction data from a reaction corpus for offline learning", "content": "To learn ft, fb, and D, we approximate G by generating the incomplete network from a reaction\ndataset. In this work, we use the public USPTO-Full dataset [53, 54] of approximately 1 million\ndeduplicated reactions. The dataset is filtered and processed (details in Section A.3), and a template\nset TUSPTO is extracted with RDChiral [55]. The dataset is randomly divided into training and\nvalidation splits with ratio 90:10. From the training split RUSPTO we construct the graph GUSPTO. We\nfilter reactions that (1) involve more than 2 reactants or (2) whose product cannot be recovered by\napplying the forward template t', yielding RFWD, GFWD, and TFWD."}, {"title": "4 Experiments", "content": "Our experiments are designed to answer the following: (1) Does DESP significantly improve the\nperformance of starting material-constrained synthesis planning compared to baseline methods?\n(2) To what extent do D and bidirectional search account for the performance of DESP? (3) Can DESP\nfind routes to more complex targets than baseline methods? (4) What empirical differences do we see\nbetween F2E and F2F strategies?"}, {"title": "4.1 Experimental setup", "content": "Datasets Few public datasets of multi-step synthetic routes exist. Previous works in multi-step\nsynthesis planning have widely used the USPTO-190 dataset [6], a set of 190 targets with corre-\nsponding routes extracted from the USPTO-Full dataset. Others have tested on targets sampled from\ndatabases such as ChEMBL or GDB17 [57, 27, 31], but their lack of ground truth routes precludes\nthe systematic selection of starting materials for our task. PaRoutes [58] has been proposed as an\nevaluation set, but they do not provide a standardized training set to prevent data leakage.\nIn addition to USPTO-190, because of its large proportion of out-of-distribution and redundant\nreactions (Table 1), we create and release two additional benchmark sets, which we call Pistachio\nReachable and Pistachio Hard. Details of their construction are provided in Section A.6. To obtain\nthe ground-truth goal molecules for each of our test sets, we find the longest path from target to leaf\nnode in each route DAG and pick the leaf node with more heavy atoms. For the building block set\nB, we canonicalize all SMILES strings in the set of 23 million purchasable building blocks from\neMolecules used by Chen et al. [6].\nModel training As in [6], we train a single-step retrosynthesis MLP (NeuralSym) and Retro*\ncost network on our processed training split of USPTO-Full. The synthetic distance and forward\nexpansion models are trained as described in Sections 3.4 and A.4.\nMulti-step algorithms Because we utilize an AND-OR search graph with no duplicate molecule\nnodes, our implementation of Retro* is more comparable to RetroGraph [30], but we do not employ"}, {"title": "4.2 Results", "content": "Though it is notoriously difficult to quantita- tively evaluate synthetic routes proposed in sil- ico without expert evaluation, there are widely- used metrics thought to correlate with successful algorithms, such as higher solve rate (under vary- ing computational budgets), lower average num- ber of expansions, and lower average number of reactions in found routes [59, 57]. We focus on these metrics, as they are arguably most related to a search algorithm's efficiency. Because all methods employ the same one-step model and\nset of templates from USPTO-Full, we treat their proposals as equally chemically feasible.\nImprovement on starting material-constrained synthesis planning Quantitative benchmarking results are summarized in Table 2. Both variants of DESP outperform all baseline methods in terms of solve rate and average number of expansions across all test sets. The solve rates of baseline methods on USPTO-190 are noticeably lower than commonly reported ranges for general synthesis planning [6], as the starting material constraint increases the difficulty of the task. Notably, unlike the other benchmarked methods, the Random, BFS, MCTS, and Retro* are standard single-ended search methods that do not make any use of the starting material constraint information.\nAblation studies To investigate the contributions of D and bidirectional search, we conduct an\nablation study by running Retro* guided by D on all benchmarks. We find that incorporating D\ngenerally results in higher solve rates and fewer average expansions across all datasets, but still\ndoes not outperform DESP, demonstrating the role of both D and bidirectional search in improving\nplanning efficiency. As an indicator of route quality, we also investigate the average number of"}, {"title": "5 Conclusion", "content": "In this work, we introduce DESP, a novel framework for bidirectional search as applied to computer- aided synthesis planning. DESP biases searches towards user-specified starting materials with a combination of a learned synthetic distance network and bottom-up generation of part of the synthetic route. This represents a task that aligns with a common use case in complex molecule synthesis planning. We demonstrate the efficiency of DESP on the USPTO-190 dataset and two new test sets derived from the Pistachio database. When compared to existing methods, both variants of DESP\nreduce the number of expansions required to find solutions that satisfy the specified goal, while\nDESP-F2E also finds more routes with fewer reactions per route. We anticipate that with future\nimprovements to the synthetic distance network and bottom-up synthesis planning, bidirectional\nsynthesis planning can emerge as an effective and efficient solution to navigating constraints and\naligning computer-aided synthesis planning with the goals of domain experts. Additional outlook is\nprovided in Section A.8."}, {"title": "Code and Data Availablity", "content": "Relevant code with documentation can be found at https://github.com/coleygroup/desp."}, {"title": "A Appendix / supplemental material", "content": ""}, {"title": "A.1 Summary of notation", "content": ""}, {"title": "A.2 Retro* algorithm details", "content": "Retro* defines the following quantities:\n1. Vm. For a molecule m, Vm is an unconditional estimate of the minimum cost required to synthesize m. It is estimated by a neural network.\n2. rn(m|G). For a molecule m, given search graph G, the \u201creaction number\" rn(m|G) represents the estimated minimum cost of synthesizing m.\n3. V\u2081(m|G). For a molecule m, given search graph G with goal p*, V\u2081(m|G) represents the estimated minimum cost of synthesizing p* using m.\nRetro* also cycles between selection, expansion, and update phases. We implement Retro* as follows.\nSelection The molecule in the set of frontier nodes F that minimizes the expected cost of synthe- sizing p* given the current search graph G is selected:\n$m_{select} = \\underset{m\\in F}{argmin} V_{t}(m|G)$"}, {"title": "A.3 Reaction pre-processing", "content": "Reactions in the USPTO-Full dataset are represented with simplified molecular-input line-entry system (SMILES) [62] strings, where the SMILES string of reactants, reagents, and products are separated by '>' as REACTANTS>REAGENTS>PRODUCTS. Each field can have one or more chemical species delineated with a dot (.) or be left blank in the case of reagents.\nFor processing reaction SMILES, multi-product reaction SMILES are first separated into single- product reaction SMILES by creating separate entries for each product species with the same reactants and reagents. Each single-product reaction SMILES then undergoes the following process:\n1. Reagents in the SMILES string are moved to the reactant side.\n2. Chemical species with identical atom mapped SMILES in both reactants and products are moved to reagents.\n3. Any products that do not contain at least one mapped atom or have fewer than 5 heavy atoms are removed.\n4. Any atom mapping numbers that exist exclusively on either the reactant side or product side are removed.\n5. Any reactants without atom mapping are moved to the reagent side.\nResulting reaction SMILES without either reactants or products are then filtered out."}, {"title": "A.4 Model training details", "content": ""}, {"title": "A.5 DESP additional details", "content": "Algorithm 2: RETRO_EXPAND(M, GR, N)\nm: expanded molecule node, GR: top search graph, N: num. templates to propose\nt \u2190 TOP_N(\u2642(MLPR(zm(m)))); /* Get top N templates from retro model */\nfor i 1 to N do\nr \u2190 t[i](m); /* Apply retro template to m */\nGR.ADD_RXN(r, m, t[i]); /* Add reaction and precursors to GR */\nend\nDesign of new quantities and update rules We recall that the minimum total cost of synthesizing the target p* from a molecule m under the Retro* framework is estimated as:\n$V_{t}(m|G_{R}) = \\sum_{r \\in A_{r}(m|G_{R})}c(r) + \\sum_{m' \\in V_{m}(G_{R}),pr(m')\\in A_{r}(m|G_{R})}rn(m'|G_{R})$\nwhere A(m|GR) represents the set of reaction node ancestors of m and Vm(GR) represents the set of molecule nodes in the search graph. This is equivalent to\n$V_{t}(m|G_{R}) = g(m|G_{R}) + \\sum_{m' \\in N(m|G_{R})}V_{m'}$\nwhere g(m|GR) aggregates the current cost from all reaction nodes in GR contributing to V\u2081(m|GR), and N(m|GR) \u2286 FR accordingly represents the set of frontier top nodes for the subgraph of GR corresponding to nodes contributing to V\u2081(m|GR). If we add the constraint that one frontier node must implicitly be the ancestor of r*, the estimate of the minimal cost then becomes:\n$V_{t}(m|G_{R}) = g(m|G_{R}) + \\underset{m_{j} \\in N(m|G_{R})}{min}(\\sum_{m_{i} \\in N(m|G_{R}), m_{i}!=m_{j}}V_{m_{i}} + D(r^{*}, m_{j}))$\n$= g(m|G_{R}) + \\sum_{m_{i} \\in N(m|G_{R})}V_{m_{i}} + \\underset{m_{j} \\in N(m|G_{R})}{min} (D(r^{*}, m_{j}) - V_{m_{j}})$\n$= V_{t}(m|G_{R}) + \\underset{m_{j} \\in N(m|G_{R})}{min}D_{m_{j}}$\nOur update rules are implemented such that Dt(m|GR) = minmj\u2208N(m|GR) Dmj, thus justifying\nour design of the selection and update procedures. Note that this design relies on the assumption\nthat N(m|GR) remains static upon adding the goal node constraint, when in reality the introduction\nof D may change the optimal set of frontier nodes to consider in the search graph. To avoid the\ncombinatorial complexity of this situation and retain the efficiency from dynamic programming for\nour update policy, we maintain this assumption and find that introducing D in this way empirically\nworks well (Section 4.2)."}, {"title": "A.6 New benchmark set details", "content": "We follow the test set extraction procedure of Chen et al. [6], applied within patents of the Pistachio dataset [14] (version: 2023Q4) to obtain 1,004,092 valid synthetic routes. We randomly sample synthetic routes from this set until we obtained 150 routes that satisfied the following constraints: (1) No reactions in the route are found in the training data. (2) No reactions are shared between any routes within the test set. (3) All reactions are found in the top 50 proposals of our single-step retrosynthesis model. (4) No two targets in the test set have a Tanimoto similarity of more than 0.7. (5) We enforce a minimum number of routes for different route lengths (Fig. 7, Fig. 8). We term this set of 150 routes Pistachio Reachable. We perform the same procedure but modify condition (2) to require only 50% or more of the reactions to be reproducible (in-distribution) and obtain 100 routes which we term Pistachio Hard. Due to a bug in our implementation of criterion (2), a small number of routes share the same reaction in the final datasets, but the degree of inter-route reaction duplication is still significantly less than that of USPTO-190 for both benchmark sets (Table 1)."}, {"title": "A.7 Additional experimental details", "content": "Implementation details For random search, all node selections were performed at random among frontier molecule nodes. For BFS, the molecule with the lowest depth was selected at each step, with precedence for nodes whose parent reactions had the highest plausibility scores from the retro one-step model. MCTS was run by integrating our one-step model into the open-source ASKCOS code base [65]. For Retro*, we removed the synthetic distance network and bottom-up expansions from our DESP implementation. Notably, reaction costs for Retro* and DESP are both calculated"}, {"title": "A.8 Limitations and Outlook", "content": "Convergent syntheses Convergent synthetic routes, in which multiple non-BBs are combined, are often desirable in chemistry due to their relative efficiency. The top-down search has no problems proposing convergent routes. However, the bottom-up searcher in DESP only performs forward expansions and thus cannot handle convergent routes by adding and merging new synthetic trees. Resultantly, the bottom-up search can only plan one branch if the final route requires convergent steps. Implementing additional modules of SynNet [42] into the bottom-up search would enable planning of convergent synthetic routes and potentially further reduce the average number of reactions in solutions and improve solve rates.\nGPU reliance and computational overhead DESP requires GPU acceleration to tractably perform a k-NN search over ~ 23 million building blocks in the forward expansion policy. DESP-F2F also requires GPU inference to rapidly perform node comparisons at each iteration. In all, forward expansions take around 50% more time than retro expansions, though this is in part because our implementation of forward synthesis applies retro templates to each product proposed by the forward model to ensure template reversibility (i.e., to confirm that the increased success in finding routes during the bidirectional search is not an artifact of having access to \u201cdifferent\u201d transformations), which creates additional overhead. Overall, we view these limitations primarily as engineering problems that do not take away from the empirical benefits demonstrated in the paper. In principle, one could also implement DESP-F2E as a parallel bidirectional search in pursuit of additional efficiency gains.\nBuilding block specification Though DESP is designed to address starting material-constrained synthesis planning, we envision that future work could optimize bidirectional search to improve general retrosynthesis capabilities by conditioning on one or more starting materials instead of constraining the solution space. These starting materials could be expert-designed or predicted algorithmically as in Gao et al. [42].\nDESP-F2F implementation Our implementation of DESP-F2F does not take into account the total known cost of the opposing graph's nodes Vt(m'|GF) \u2013 rn(m'|GF) when calculating dn(m|GR), and likewise the value of rn(m|GF) does not take into account V\u2081(m'|GR) \u2013 rn(m' GR). As a result, the selection policy DESP-F2F selects nodes that minimize the lowest expected cost of reaching the opposing search graph, but does not select to minimize the lowest expected cost of the final route directly. This is likely a primary contributor to DESP-F2F finding longer routes on average than DESP-F2E. As the values of V\u2081(m|G) change after each expansion, it would be computationally expensive to re-compare nodes across the search graphs at each iteration. We have not devised an efficient means of handling the number of re-comparisons that would be required and leave such optimizations to future exploration."}]}