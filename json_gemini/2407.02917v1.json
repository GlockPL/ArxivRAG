{"title": "Towards Negotiative Dialogue for the Talkamatic Dialogue Manager", "authors": ["Staffan Larsson", "Alexander Berman", "David Hjelm"], "abstract": "The paper describes a number of dialogue phenomena associated with negotiative dialogue, as implemented in a development version of the Talkamatic Dialogue Manager (TDM). This implementation is an initial step towards full coverage of general features of negotiative dialogue in TDM.", "sections": [{"title": "Introduction", "content": "The work described in this paper is part of the 3-month phase 1 of the project Tala\u00b9. During phase 1, we have started development of the Tala SDK, a tool for 3rd party creation, validation and deployment of Dialogue Domain Descriptions (DDDs), allowing developers to adapt the Talkamatic Dialogue Manager (TDM) to new domains. We have also developed TDM further, by adding a number of dialogue features related to negotiative dialogue.\nAdding support for these features is an example of how TDM can be extended to offer support for dialogue features going beyond simple form-based dialogue, thus extending the space of applications of conversational AI while eliminating the need for developers to provide domain-specific solutions for general dialogue phenomena."}, {"title": "The Talkamatic Dialogue Manager", "content": "The Talkamatic Dialogue Manager (Larsson and Berman, 2016) is a commercial platform for conversational AI. TDM is the result of an effort to build a dialogue manager on sound engineering principles, exploiting knowledge from research about human dialogue. The principles that have guided TDM design include (1) Apply general solutions to general problems, and (2) Don't mix different kinds of knowledge. These principles have led to an architecture where knowledge about the domain (e.g., telephony or navigation) is separated from general knowledge about dialogue. This means that app developers can focus on defining domain-specific knowledge, such as semantic ontology and their corresponding natural language forms.\nThe overall logic governing the dialogue is contained within TDM, while domain-specific knowledge, such as dependencies between various kinds of information in the form of dialogue plans, are kept in the DDDs. Hence, when an app developer builds a new app, there is no need to extend or modify the dialogue manager as such.\nSome aspects of flexible dialogue flow are present in systems like Siri and DialogFlow (Larsson, 2015, 2017; Harms et al., 2019), and some are supported by the VoiceXML standard. However, compared to other systems TDM offers a wider and more complete range of flexible dialogue behaviours."}, {"title": "Data collection and analysis", "content": "After an initial micro-scale data collection and analysis, a number of frequent dialogue phenomena related to negotiative dialogue were noticed that could merit implementation in TDM. Some of these phenomena were selected for implementation in a development version of TDM.\nConcretely, the data collection was done as follows: two people communicated via a text chat, one playing the role of \"system\u201d, looking up phone numbers on a web page, and the other playing the role of \"user\", requesting phone numbers for various people. In the analysis phase, we looked in particular for frequent dialogue phenomena that were not straightforwardly covered by the current version of TDM. Below is one of the dialogues collected (translated from Swedish to English). The caller is C and the responder is R."}, {"title": "Dialogue features", "content": "In Tala phase 1, intital steps were taken towards the implementation of negotiative dialogue for TDM. The implemented dialogue features are briefly described below, with examples of dialogues handled by the development version of TDM."}, {"title": "Asking about alternatives", "content": "Many dialogue systems can handle form-based dialogue, where information is collected from the user, resulting in a database search whose results are communicated to the user. Some systems (including TDM) can also deal with dialogue where a database search is incrementally refined as the user provides more information, with an incrementally shrinking set of alternatives being communicated to the user at each step. However, very few (if any) dialogue system offer general support for the kind exploration and comparison of alternatives that frequently precedes a final user choice in human-human task-oriented dialogue2. We have previously argued that this as a central feature of negotiative dialogue (Larsson, 2002). As part of this, the user can ask questions about one or several alternatives. We have implemented limited support for user questions about alternatives. Below is an example of an interaction supported by the development version of TDM. (S = system, U =user.)"}, {"title": "Knowledge precondition questions", "content": "A less expected finding was the frequent occurrence of questions of the form \"Do you know...?\", i.e., acts of asking whether the user knows the answer to a question Q rather than asking Q directly. For example, instead of asking \"On what street does the person live?\u201d, the responder would ask \"Do you know on what street the person lives?\u201d. We refer to such questions as Knowledge Precondition Questions (KPQs) since they (interpreted literally) are asking whether the dialogue partner has the knowledge necessary to answer the embedded question. This type of question has previously been described informally by e.g. Schegloff (1999), who argues that it can be seen as a type of indirect speech act, and more recently in a dialogue systems setting by Moore (2018).\nThere appears to be a reasonable rationale for asking KPQs in cases where the asker cannot be sure if the answerer has the desired information,"}, {"title": "Modifying search criteria", "content": "As can be seen at the end of the transcribed dialogue in Section 3, callers may wish to revise their search after their initial question has been answered. We have improved the support for this dialogue feature in TDM, as exemplified in the dialogue below (which is a continuation of the dialogue in Section 4.1):"}, {"title": "Using general solutions in a domain", "content": "To illustrate what is needed by a dialogue developer needs to do to make use of the dialogue features described above, Figure 1 shows TDM dialogue plans for a proof of concept implementation of negotiative dialogue features in the telephone directory domain. The XML format for TDM dialogue plans is described further in Larsson and Berman (2016) and will not be explained in detail here.\nTo render a question as a knowledge precondition question, the attribute kpq=\"true\" is added as in line 24 (and 25). This results in TDM being able to handle the dialogues in Section 4.2 above\u00b3."}, {"title": "Future work", "content": "In phase 2 of Tala we plan to implement full support for negotiative dialogue in TDM, and to complete the Tala development tool."}]}