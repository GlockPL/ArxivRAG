{"title": "Operator-based semantics for choice programs: is choosing losing? (full version)", "authors": ["Jesse Heyninck"], "abstract": "Choice constructs are an important part of the language of logic programming, yet the study of their semantics has been a challenging task. So far, only two-valued semantics have been studied, and the different proposals for such semantics have not been compared in a principled way. In this paper, an operator-based framework allow for the definition and comparison of different semantics in a principled way is proposed.", "sections": [{"title": "Introduction", "content": "Logic programming is one of the most popular declarative formalisms, as it offers an expressive, rule-based modelling language and efficient solvers for knowledge representation. An important part of this expressiveness comes from choice constructs [Simons et al., 2002], that allow to state e.g. set constraints in the body or head of rules, and are, among others, part of the ASP-Core-2 standard [Calimeri et al., 2012]. For example, the rule $1\\{p,q,r\\}2 \\leftarrow s.$ expresses that if s is true, between 1 and 2 atoms among p, q and r are true. Choice constructs are non-deterministic, in the sense that there is more than one way to satisfy them. For example, $1\\{p,q,r\\}2$ can be satisfied by $\\{p\\}$, $\\{p,q\\}$, $\\{r\\}$, Formulating semantics for such non-deterministic rules has proven a challenging task [Liu et al., 2010; Marek and Remmel, 2004; Faber et al., 2004; Son and Pontelli, 2007]: several semantics have been proposed but no unifying framework for defining and comparing these semantics exists. Furthermore, attention has been restricted to two-valued semantics, in contradistinction to many other dialects for logic programming for which three- or four-valued semantics have been proposed. Moreover, many proposed semantics only allow for choice constructs in the body, but not in the head. Finally, relations with the non-deterministic construct disjunction remain unclear.\nIn this paper, a unifying framework for the definition and study of semantics for logic programs with choice constructs in the head and body is provided. This framework is based on immediate consequence operators, which are also useful for the design of explanatory tools and provide foundations for solvers [Kaminski and Schaub, 2023; Eiter and Geibinger, 2023]. The contributions of this paper are the following: (1) we show how the famework of non-deterministic approximation fixpoint theory (AFT) [Heyninck et al., 2024] can be used to define a wide variety of supported and stable semantics for choice logic programs, (2) we introduce the constructive stable fixpoints, allowing to (3) generalize many existing semantics for choice programs, (4) compare these semantics by introducing postulates, (5) provide a principled comparison with disjunctive logic programs.\nOutline of the Paper: In Section 2, the background on choice programs and non-deterministic approximation fixpoint theory is given. In Section 3, approximation operators for choice programs are defined. In Section 4, we study the resulting supported semantics. In Section 5, we define stable semantics and show representation"}, {"title": "Background and Preliminaries", "content": "We recall choice programs and non-deterministic AFT."}, {"title": "Choice Rules and Programs", "content": "A choice atom (relative to a set of atoms A) is an expression $C = (dom, sat)$ where $dom\\subseteq A$ and $sat \\subseteq \\wp(dom)$. Intuitively, $dom$ denotes the domain of $C$, i.e. the atoms relevant for the evaluation of $C$, whereas $sat$ is the set of satisfiers of $C$. We also denote, for $C = (dom, sat)$, $dom$ by $dom(C)$ and $sat$ by $sat(C)$. For a concrete example, consider $1\\{p,q,r\\}2$ which intuitively states that between 1 and 2 of the atoms $p$, $q$ and $r$ have to be true, corresponds to the choice atom $(\\{p,q,r\\}, \\{\\{p\\},\\{q\\},\\{r\\}, \\{p,q\\},\\{p,r\\}, \\{q,r\\}\\})$ (notice that $\\{p,q,r\\}$ is the domain and not a satisfier). For such choice atoms, we assume the domain and satisfiers are clear and can be left implicit (and similarly for constructs such as $\\{p,q\\} = 1$ or $\\{p,q\\} \\neq 1$).\nA choice rule has the form $C \\leftarrow C_1,...,C_n$ where $C, C_1,..., C_n$ are choice atoms. $C$ is called the head (denoted $hd(r)$) and $C_1,...,C_n$ the body. If $C_i$ is a literal (i.e. $C_i = (\\{a\\}, \\{\\{a\\}\\})$, abbreviated by $a$, or $C_i = (\\{a\\}, \\{\\emptyset\\})$, abbreviated by $\\neg a$) for every $i = 1, . . . , n$, we call it a normal choice rule. If $C$ is an atom, we call $r$ an aggregate rule. A choice program is a set of choice rules, and is called normal [aggregate] if all of the rules are so. A choice atom $C$ is monotone if $dom(C) \\cap x \\in sat(C)$ implies $dom(C) \\cap x' \\in sat(C)$ for any $x \\subseteq x' \\subseteq A$, and it is convex if for any s.t. $x \\subseteq y \\subseteq A$, $dom(C) \\cap x \\in sat(C)$ and $dom(C) \\cap y \\in sat(C)$, $dom(C) \\cap z \\in sat(C)$ for any $x \\subseteq z \\subseteq y$.\nFollowing Liu et al. [2010], a set $x \\in A$ satisfies a choice atom $C$ if $dom(C) \\cap x \\in sat(C)$. An interpretation $x$ satisfies a rule $r$ if $x$ satisfies the head of $r$ or does not satisfy some choice atom in the body of $r$. $x$ is a model of $P$ if it satisfies every rule in $P$. A rule $r \\in P$ is $x$-applicable if $x$ satisfies the body of $r$, and the set of $x$-applicable rules in $P$ is denoted by $P(x)$. $x \\in A$ is a supported model of $P$ if it is a model and $x \\subseteq \\bigcup_{r \\in P(x)} dom(hd(r))$. For some $x \\subseteq A$, let $HD_P(x) = \\{hd(r) | r \\in P(x)\\}$ and $IC_P(x) =$\n$\\left\\{z \\subseteq \\bigcup_{C\\in HD_P(x)}dom(C) | \\forall C \\in HD_P(x) : z\\cap dom(C) \\in sat(C)\\right\\}$"}, {"title": "Approximation Fixpoint Theory", "content": "We first recall some basic algebraic notions. A lattice is a partially ordered set (poset) $(L,\\leq)$ s.t. for every $x, y \\in L$, a least upper bound $x \\sqcup y$ and a greatest lower bound $x \\sqcap y$ exist. A lattice is complete if every $X \\subseteq L$ has a least upper bound $\\bigsqcup X$ and a greatest lower bound $\\sqcap X$. $\\bigsqcup L$ is denoted by $\\top$ and $\\sqcap L$ is denoted by $\\perp$. A function $f : X \\rightarrow Y$ from a poset $(X, \\leq_1)$ to a poset $(Y, \\leq_2)$ is monotonic if $x_1 \\leq_1 x_2$ implies $f(x_1) \\leq_2 f(x_2)$,"}, {"title": "Approximation Operators for Choice Programs", "content": "The central task is to define non-deterministic approximations of the immediate consequence operator $IC_P$. As is usual, we conceive of pairs of sets of atoms $(x,y)$ as four-valued interpretations, where atoms in $x$ are true whereas those in $y$ are not false. Thus, assuming $x \\subseteq y$, $(x,y)$ represents an approximation of some set $z \\in [x, y]$. The basic idea behind all the operators defined below is the same: given an input interpretation $(x, y)$, we determine a set of rules that are to be taken into account when constructing the new lower (respectively upper bound), and then take as new lower (respectively upper bounds) the interpretations that make true the heads of all these rules. As is well-known already in the case for aggregate programs, there are various ways to give formal substance to this idea. We will consider four operators inspired by previous work on aggregate or choice programs, namely $IC_P^{GZ}$ [Gelfond and Zhang, 2014], $IC_P^{MR}$ [Marek and Remmel, 2004], $IC_P^{LPST}$ [Liu et al., 2010], and $IC_P^{U}$ [Heyninck and Bogaerts, 2023]. The study of further operators is left for future"}, {"title": "Supported Model Semantics", "content": "In this section, we look at the fixpoints of $IC$, which give a three-valued generalisation of the supported model semantics by Liu et al. [2010] (and the three-valued model semantics of normal logic programs). Intuitively, fixpoints of $IC$ generalise the idea that only atoms supported by activated rules can be accepted.\nA first insight is that the total fixpoints of all operators coincide with supported models [Liu et al., 2010].\nProposition 3. Let a choice program P and x \u2208 {LPST,MR, GZ,U} be given. Then (x,x) is a fixpoint of IC iff x is a supported model of P.\nHowever, our extension to three-valued semantics allows to give semantics to a wider class of programs:"}, {"title": "Stable Semantics", "content": "We now move to the stable semantics, whose main aim is favvoding the acceptance of self-supporting cycles, e.g. accepting ($\\{p\\}, \\{p\\}$) as a reasonable model of the program $\\{p \\leftarrow p\\}$. For the deterministic case, this is done by looking at fixpoints of the stable operator, obtained by calculating a new lower bound as the least fixpoint of $O_l(\\cdot,y)$, where y is the input upper bound (and similarly for the upper bound). Intuitively, we take the least information the upper bound obliges use to derive. In contradistinction to the deterministic case, there are divergent options for how to define stable semantics for non-deterministic operators. We first consider the minimality-based stable semantics known from non-deterministic AFT [Heyninck et al., 2024], defined as the $\\subseteq_l$-minimal fixpoints of $O_l(\\cdot,y)$ (cf. Section 2.2), which where shown to generalize the (partial) stable model semantics for disjunctive (aggregate) programs [Heyninck et al., 2024; Heyninck and Bogaerts, 2023]. For choice constructs, this construction is overly strong:"}, {"title": "Groundedness", "content": "We introduce several postulates to facilitate a comparison between semantics for choice programs (thus solving an open question in the literature Alviano et al. [2023]) formalizing in different ways the idea of groundedness. Furthermore, we show that for every notion of groundedness, there exist examples which have been argued in the literature to be counter-intuitive.\nIntuitively, the idea behind groundedness is that models should be derivable from the ground up, i.e. they should be supported by non-cyclic arguments. For choice programs, what constitutes a cycle becomes less clear:"}, {"title": "Disjunctions are Choice Constructs", "content": "Our study allows us to give a principled account of the relation between stable semantics for disjunctive logic programs (DLPs) and choice programs. Indeed, in this section, we show that for DLPs [Heyninck et al., 2024; Heyninck and Bogaerts, 2023] are a special case of the operator for choice programs. This means that all"}, {"title": "Related Work", "content": "To the best of our knowledge, this is the first application of AFT to the semantics of choice programs. We have shown how major semantics for choice programs [Marek and Remmel, 2004; Liu et al., 2010] can be characterized in our framework. Other well-known semantics for (disjunctive) aggregate programs are those by Faber et al. [2004]; Alviano and Faber [2019]; Ferraris [2011], which are the ones used in the solvers DLV respectively clingo [Ferraris, 2011; Alviano et al., 2017].\nAnother semantics, the FLP-semantics [Faber et al., 2004], were originally not defined for programs with choice constructs in the head, but were generalized to allow choice constructs in the head by Eiter and Geibinger [2023]. Nevertheless, these semantics only allow for two-valued stable models, and were shown to differ from the semantics by [Gelfond and Zhang, 2014], [Liu et al., 2010] and [Marek and Remmel, 2004] already for aggregate programs [Alviano et al., 2023], which means, in view of Proposition 10, that the stable semantics induced by the LPST-, MR- and GZ-operators also differ from the FLP-semantics. This comparison also holds for the semantics by Ferraris [2011] as the latter coincide with the FLP-semantics for aggregates with positive atoms [Alviano et al., 2023].\nAnother line of work that is relevant for this paper is the application of AFT to logic programs with aggregates. Pelov et al. [2007] introduce several approximation operators for aggregate programs, whereas"}, {"title": "Conclusion", "content": "The main contributions of this paper are the definition of several ndaos for choice programs, the definition of the constructive stable operator, the characterisation of several existing semantics for various dialects of logic and choice programs and the introduction and study of postulates for choice programs. We provide a principled view of choice programs versus disjunctive programs.\nThis paper is subject to one restriction: we assume $IC_P(x,y) \\neq \\emptyset$ for every interpretation (x,y). In future work, we will generalize our results beyond this assumption. We also plan to study the complexity of the resulting semantics, device implementations and study other AFT-based semantics, such as the Kripke-Kleene and well-founded states and semi-equilibrium semantics [Heyninck and Bogaerts, 2023; Heyninck et al., 2024] and study other operators, e.g. inspired by Pelov et al. [2007]."}]}