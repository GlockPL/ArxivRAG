{"title": "TMA-Grid: An open-source, zero-footprint web\napplication for FAIR Tissue MicroArray De-arraying", "authors": ["Aaron Ge", "Monjoy Saha", "M\u00e1ire A. Duggan", "Petra Lenz", "Mustapha Abubakar", "Montserrat\nGarc\u00eda-Closas", "Jeya Balasubramanian", "Jonas S. Almeida", "Praphulla MS Bhawsar"], "abstract": "Background:\n\nTissue Microarrays (TMAs) significantly increase analytical efficiency in histopathology and\nlarge-scale epidemiologic studies by allowing multiple tissue cores to be scanned on a single slide. The\nindividual cores can be digitally extracted and then linked to metadata for analysis in a process known as\nde-arraying. However, TMAs often contain core misalignments and artifacts due to assembly errors,\nwhich can adversely affect the reliability of the extracted cores during the de-arraying process. Moreover,\nconventional approaches for TMA de-arraying rely on desktop solutions.Therefore, a robust yet flexible\nde-arraying method is crucial to account for these inaccuracies and ensure effective downstream analyses.\n\nResults:\n\nWe developed TMA-Grid, an in-browser, zero-footprint, interactive web application for TMA\nde-arraying. This web application integrates a convolutional neural network for precise tissue\nsegmentation and a grid estimation algorithm to match each identified core to its expected location. The\napplication emphasizes interactivity, allowing users to easily adjust segmentation and gridding results.\nOperating entirely in the web-browser, TMA-Grid eliminates the need for downloads or installations and\nensures data privacy. Adhering to FAIR principles (Findable, Accessible, Interoperable, and Reusable),\nthe application and its components are designed for seamless integration into TMA research workflows.\n\nConclusions:\n\nTMA-Grid provides a robust, user-friendly solution for TMA dearraying on the web. As an open,\nfreely accessible platform, it lays the foundation for collaborative analyses of TMAs and similar\nhistopathology imaging data.", "sections": [{"title": "Introduction", "content": "Tissue Microarrays (TMAs) have revolutionized histopathology by allowing for the simultaneous\nscanning and multiplex analysis of potentially hundreds of tissue samples on a single slide (Kononen et\nal., 1998). Once digitally scanned, these TMAs can be processed to extract individual cores for analysis.\nThis process, called de-arraying, is far more efficient than scanning each tissue sample individually, both\nin terms of time and resources required. However, distortions and errors during TMA manufacturing,\nassembly, sectioning, staining, and scanning often undermine their full potential. These issues include\ncore misplacement, heat-induced deformation, fragmentation, and other problems (Nguyen et al., 2018).\nAccurate de-arraying requires precise identification of tissue cores and their alignment with the expected\nTMA grid to correctly associate the cores with corresponding case- and study-level metadata.\nAlthough several de-arraying methods have been proposed previously, a notable limitation of many of\nthem lies in the segmentation step, where tissue is differentiated from the background. A common\nassumption made by these implementations is a bimodal distribution of the image's pixel intensity, where\nthe two dominant peaks represent background and foreground. Methods based on this assumption range\nfrom manually setting a global threshold value (Vrolijk et al., 2003) to more sophisticated ones like Otsu's\nmethod (Wang et al., 2011). Pre-processing methods such as contrast enhancement and template matching\n(Dell'Anna et al., 2005), and post-processing using morphological operators have also been reported to\nimprove segmentation results (Wang et al., 2011). However, this bimodal assumption often fails with\nimages from new fluorescence devices due to complex backgrounds (Nguyen et al., 2018). In\nfluorescence imaging, background elements like dust and stains often appear as high-intensity peaks in\nthe histogram, while tissue cores may have lower intensities. Consequently, using a high threshold may\nmiss many cores, and a low threshold may include numerous outliers. Nguyen et al. address these\nlimitations by applying a locally adaptive thresholding on an isotropic wavelet transform of the input\nTMA image (Nguyen et al., 2018); however, their implementation lacks interactivity to allow manual\ncorrection of cases where the algorithm fails.\nFurthermore, most of the methods in the literature either have no publicly available\nimplementations (Nguyen et al., 2018), involve non-trivial installation and setup (Schapiro et al., 2022),\nor presuppose the availability of powerful computing resources. Easy to use desktop solutions such as\nthose provided by scanner vendors, typically come with significant deployment and licensing costs. These\nsolutions often end up being data enclaves, making interoperability with other tools difficult to achieve.\nOpen-source solutions like QuPath, while addressing concerns with deployment siloing, typically require\nthe images to be locally available, posing governance and reproducibility issues. These issues are\nsignificant roadblocks to the widespread use of these tools by clinicians and pathologists. For this reason,\nthere has been a movement in the scientific community towards FAIR research, which emphasizes that\nboth data management and computational constructs should be aligned with principles of Findability,\nAccessibility, Interoperability, and Reusability (FAIR)(Wilkinson et al., 2016).\nIn line with recent efforts to move histopathological analysis into the web computing environment\n(Bhawsar et al., 2023) to promote such FAIRness, we developed TMA-Grid, an interactive, zero-footprint\nweb application to address the aforementioned gaps in TMA de-arraying (see Availability for the URL to\nthe fully functional fully working client-side application). This application was developed entirely in\nJavaScript and can be used on any device that supports a web browser, including commodity computers,\nsmartphones, and tablets. TMA-Grid works directly with whole slide imaging (WSI) data generated by\ndigitally scanning the TMA slide. Furthermore, using the ImageBox3 framework for web-based WSI"}, {"title": null, "content": "traversal (Bhawsar et al. 2023), this client-side application can operate on the slide at multiple resolutions\nas required, thus alleviating the need for powerful hardware.\nThe design of TMA-Grid was continuously refined through repeated evaluation and feedback\nfrom a group of pathologists. Acknowledging the fact that an algorithmic approach to de-arraying cannot\naccount for all potential edge cases, the web application allows users to interactively adjust the output at\nevery step of the de-arraying process, drawing inspiration from QuPath's user-friendly design (Bankhead\net al., 2017). The main advantage of our tool is its delivery of a powerful dearraying platform that requires\nno download or installation and is highly interactive, particularly in the way it allows users to correct\nsegmentation and gridding results on TMAs that potentially cannot be de-arrayed automatically."}, {"title": "Methods", "content": "Similar to previous literature, we split the de-arraying problem into two steps: 1) tissue\nsegmentation, which involves extracting tissue cores from the slide background and removing any\nartifacts, and 2) gridding, which aligns the identified tissue cores in the best possible grid, taking into\naccount missing or malpositioned cores. Below, we outline the preparation of the dataset used to train the\npixel-wise segmentation model and how the segmentation result was used to detect cores from the image.\nWe also describe how the identified cores were arranged in an optimal grid, with any missing or\nmisplaced cores highlighted as such."}, {"title": "Dataset Generation", "content": "For our dataset, we selected 119 TMA whole slide images from the Polish Breast Cancer Study\n(PBCS) (Garc\u00eda-Closas et al., 2007) and 2 prostate cancer TMA whole slide images from Harvard\nDataverse (Zhong et al., 2017). These images underwent various types of immunohistochemical staining,\nincluding BCL2, CD163, CK56, EGFR, HE, and HER2, and were downsampled to 512 x 512 pixels. This\nresolution was chosen to preserve essential details while enabling fast, in-browser segmentation. We\nmanually annotated the centroids of each core in image pixels, using a uniform radius for all cores. This\napproach, while not accounting for manufacturing-related core irregularities, was intentional to train the\nmodel to predict where tissue should be, allowing TMA-Grid to correctly classify damaged samples as\nsingle entities.\nTo enhance model generalization, we used the Albumentations library (Buslaev et al., 2020) to\ncreate 20 augmented versions of each original image. Augmentation techniques included random flipping,\nrotation (up to \u00b1 45 degrees), affine transformations, and the addition of Gaussian blur and fog. This\nprocess yielded 2420 augmented PNG images, which formed our training dataset. For each augmented\nimage, we created corresponding 512 x 512 binary masks, separating circular cores from the background.\nThe final training dataset consisted of these 2420 augmented images and their masks, with the\ndownsampled whole slide images serving as input and the binary masks as the expected segmentation\noutput. The 121 original images were reserved for testing and validation purposes, ensuring an unbiased\nevaluation of the model's performance."}, {"title": "Training the Segmentation Model", "content": "Similarly to (Schapiro et al., 2022), we used TensorFlow to build a U-Net convolutional neural\nnetwork for tissue segmentation as shown in Figure 1. This approach demonstrates superior performance\nover traditional tissue segmentation methods, particularly in cases of fragmented or dimmed cores.\nUnlike the standard U-Net architecture (Ronneberger et al., 2015), we replaced regular convolutions with\nseparable convolutions in the convolutional blocks to improve model efficiency and reduce model size.\nAdditionally, we introduced batch normalization and dropout layers to enhance model regularization and\nimprove generalization performance. The model applies ReLU activation in both its contracting and\nexpansive paths, along with max pooling for feature extraction and increased computational efficiency.\nDropout layers are employed to achieve regularization. In the expansive path, the model combines\nfeatures through upsampling and concatenation, producing a 512x512 binary segmentation mask as the\noutput. Figure 2 shows an image segmented by the model. To address data imbalances, the model uses\nweighted binary cross-entropy loss.\nThe trained model was assessed on a held-out test set of 12 TMA whole slide images. Various\nmetrics characterizing model performance were computed, including loss, Area Under the Curve (AUC),\naccuracy, precision, and recall, as presented in Table 1. The model itself is open-source and available for\nuse from the same GitHub repository as TMA-Grid (see Availability)."}, {"title": "Core Detection", "content": "To detect core boundaries in the whole slide image, we started by processing the segmentation\nmask. First, we applied Otsu's thresholding (Otsu et al., 1979) to separate foreground from background by\nfiltering out low-confidence areas, making it easier to distinguish objects in the image.\nNext, we fixed small gaps or \"holes\" that could be a result of manufacturing errors or tissue\nbreakage. We did this by comparing two versions of the image: one where the segmented areas were\nslightly expanded (a dilation operation) and one where the expanded regions were sharpened (an opening\noperation). This comparison helped us spot the small holes by generating an outline of all the objects of\nthe image. We labeled these holes, measured their sizes, and decided what counted as a \"small\" hole based\non a distribution of their sizes. Small holes were marked and filled in the original image, which prevented\nthem from being mistaken for separate tissue areas. We then applied a distance transform, a method that\nhelped highlight the main regions with tissue (the \"sure foreground\"). We labeled these main areas to\ncreate markers for the next step.\nUsing these markers, we applied the watershed algorithm to identify exact boundaries of the\ntissue cores. Once the areas were separated, we measured the size of the circular tissue areas and filtered\nout those that were too small or too large based on user-defined criteria."}, {"title": "Gridding Algorithm", "content": "1) Delaunay Triangulation-Based Segment Generation\n\nTo impose a 2-dimensional grid on the identified centroids, we began by estimating row-wise\nconnections between them in the form of segments connecting two or more cores. For this, we modified\nthe Delaunay triangulation-based approach described by Wang et al. \u2013 triangulating points in a plane for\nedge generation, followed by filtering those edges based on length and angle. This process resulted in line\nsegments defining a row, interspersed with isolated points (Fig. 2a).\nThe modification we made is in the criteria for filtering lengths and angles. While the earlier work\nfiltered out all segments longer or shorter than 1.5 times the interquartile range (IQR), we argued that only\nsegments longer than 1.5 times the IQR need to be excluded. We found that removing shorter segments\noften inadvertently filtered out connected points in a row, especially when cores were closely spaced. The\nresult of the length-based filtering is shown in Fig. 2b.\nFor angle-based filtering, Wang et al. employed an unsupervised k-means clustering, categorizing\nangles into five groups based on their rotation [-90, -45, 0, 45, 90 degrees] and then selecting the cluster\nclosest to 0 degrees. While effective for grids with minor deformities, this method struggles with\nsignificantly misaligned TMAs. We found that adopting a simpler thresholding approach for filtering\nsegments worked better even for poorly aligned TMAs. Our algorithm filtered out all edges outside a\ncertain threshold of an image's rotation (Fig. 2c). We empirically determined that a threshold of 10"}, {"title": null, "content": "degrees worked best for most TMAs in our training set. It is worth noting that there could be cases where\nthis simpler approach might fail, but those can be easily resolved via the interactive features built into\nTMA-Grid.\nAn additional refinement in our algorithm is an edge cleaning step, which ensures that each point\nconnects to at most two edges. In instances where a point was linked to more than two edges, our\nalgorithm selected only the closest connected points in each direction in terms of Euclidean distance. This\nstep was crucial for maintaining the integrity of the rows formed by the segments.\nTo summarize, the segment generation step organizes the TMA core centroids into a set of\nsegmented points, i.e., those connected by a segment to one or more cores, and isolated points."}, {"title": "2) Traveling Algorithm", "content": "The traveling algorithm described here iteratively identifies complete rows using the points and\nsegments derived in the previous step. This method was also built upon Wang et al.'s traveling algorithm,\nwith some key modifications. To begin with, each point was assigned a start point and an endpoint. For\neach point, we set either the point to its immediate right on the same segment as its endpoint, or itself if\nnone satisfies those conditions. For an isolated point, the start and endpoints were both set to be itself.\nNote that image rotation might mean that the coordinates in the image are not representative of the\narrangement of the actual TMA and can potentially cause issues in precise row assignment. TMA-Grid\naccounted for this by adjusting all coordinates for image rotation. We describe how the rotation is\nestimated and adjusted for in a later section.\nDuring each iteration, the algorithm identified the start of a row by picking the point with the\nsmallest value for the horizontal coordinate. For each point that is added to the row, the algorithm\nsearches for another whose start point was the same as the endpoint of the added point. If such a point was\nfound, it is added to the row and removed from the overall pool. If no point was found, the algorithm\ninstead looked for points within a circular area with a radius of r x d around the endpoint of the current\npoint, where r is a user-specified parameter and d is the median distance between all the points. By\ndefault, r is set to 0.6. This approach contrasts with the original algorithm (Wang et al., 2011), which\nidentified suitable vectors by projecting a sector from the current point in a specific user-set direction. We\nfound that detecting points within a circular region rather than a specific sector worked better in\nidentifying misaligned cores. If multiple points were found within that radius, the closest core in terms of\nEuclidean distance was chosen, and the row generation continued.\nIf an appropriate point cannot be found within the search radius, the algorithm introduces an\n\"imaginary\" point to ensure continuity of the row. These imaginary or missing points are commonplace in\nTMA design: quite often, the microarray grid is not completely filled, with many spots showing no cores\neven in the middle of a row or column. Our traveling algorithm incorporated this in the computation of\nthe row itself.\nThe end point for this imaginary core was set to be $[x + d \\times cos(\\theta), y + d \\times sin(\\theta)]$,\nwhere (x, y) denoted the coordinates of the endpoint of the last point in the row, and $\\theta$ denoted the\nrotation of the image. The algorithm would continue to create imaginary points until a real one was found\nor until the last point in the row reached the edge of the image, as defined by the width of the image\nsubtracted by a user-defined stopping distance.\nOnce the edge was reached, the points were sorted by their horizontal coordinates. This sorting\nstep is crucial for TMAs with rows that have several cores clustered compactly in a region. After sorting,\nthe row was then completed, and the next iteration began. This continued until all points had been\nassigned to a row. The generated rows were then sorted again based on the vertical coordinates of their\nfirst point, after rotating each of the first points around the center of the image by -$\\theta$ to account for image\nrotation."}, {"title": "3) Post-processing", "content": "Detecting sectors, which are sub-grids within a tissue microarray (TMA) that facilitate sample\norganization, is another necessary step for accurate row and column assignment. During row generation,\ncolumns may be filled with imaginary cores if the traveling algorithm repeatedly fails to find points\nwithin the defined radius. However, it is difficult to determine whether the absence of cores indicates a\npotential sector boundary or if the cores were significantly misaligned during construction. Some sector\nboundaries may even contain real cores, making sector identification more complex than simply finding\nempty columns. After running the traveling algorithm, the results were refined to handle specific\nelements, such as core sectors and marker cores (guides for pathologists in TMAs). First, misaligned\ncores and marker cores were identified by comparing each core's position to the median position of their\nrespective columns. Cores deviating by more than one radius from the median were flagged as\nmisaligned, while those deviating by more than 1.5 radii were considered marker cores. These marker\ncores were excluded from row and column indexing because their irregular placement affected the grid\narrangement.Next, indices were reassigned, placing each core into the column closest to it in terms of\nvertical alignment. This process used a weighted distance formula that penalized columns with fewer\ncores, preventing misaligned cores from forming new columns.\n$D = \\frac{d}{log (C + 0.000001)}$\nIn the equation, d is the difference between the horizontal coordinate of the core and the median\nhorizontal coordinate of the column, and C is the number of cores in that column. After this step, it was\nsignificantly less likely that the resulting rows or columns predominantly composed of imaginary cores\ncould be a result of misalignment. These can then be removed by simple thresholding. TMA-Grid used\nthresholds of 75% imaginary cores for rows and 80% imaginary cores for columns \u2013 only if the number of\nimaginary cores were below the threshold was the row or column added to the indexing. In the end, index\nreassignment was conducted to ensure that the row and column values assigned to each core were\nconsecutive and unique. The process concluded with a final check for misaligned and marker cores,\nprominently highlighting any that might require manual adjustment in the web visualizer."}, {"title": "4) Determining Image Rotation", "content": "To determine the image's rotation, we iteratively apply the processing pipeline described above at multiple\nimage rotation angles, starting from -10\u00b0 to +10\u00b0 in one-degree increments. This range balanced\nefficiency with the expectation that major image distortions were corrected pre-analysis. For each angle,\nwe adjusted centroid coordinates accordingly and reran the segment generation and traveling algorithm.\nFor each angle, we assessed three proxy metrics for alignment quality: the counts of unique rows,\nimaginary cores, and marker cores. The optimal rotation minimized all three. When several angles yielded"}, {"title": null, "content": "comparable results, we selected the median angle as optimal, except in the case where one of the optimal\nangles is 0\u00b0, in which case it was chosen by default."}, {"title": "Results", "content": null}, {"title": null, "content": "segmentation result, with adjustable parameters such as the \"sensitivity\" threshold, which determines the\ncutoff probability for marking a region as tissue. Additionally, users can manually add or remove cores\ndetected by the algorithm by clicking on the screen. C) Grid Estimation: Interactive whole slide viewer\nwith an overlaid grid on top of the segmented cores and the ability to customize parameters. Core\nposition, size, and row/column indexes can also be changed here, with each input triggering a\nreconstruction of the grid and providing real-time feedback on the operation's result. D) The Virtual\nGrid: An idealized virtual grid previewing the dearrayed cores. Core-level attributes can also be\nmodified here, and new fields/annotations can be added to help in downstream validation or analysis. A\ntable describing all the attributes per core can be generated as a JSON or a CSV file, along with the\nfull-resolution versions of the dearrayed cores.\nTMA-Grid is a versatile web application designed to streamline the analysis of whole slide images (WSIs)\nfor tissue microarrays (TMAs). This tool offers an efficient workflow from data input to final grid\ngeneration, allowing users to manage and analyze TMA cores seamlessly. Figure 3 provides a detailed\noverview of the TMA-Grid interface and its key functionalities."}, {"title": "Data Input", "content": "TMA-Grid allows users to select images for analysis from various sources, including local\ndevices, network systems, remote URLs, or Box accounts. Instead of uploading the entire image,\nTMA-Grid uses the ImageBox3 library to retrieve regions of the image on demand, optimizing\ncomputational efficiency. Once an image is selected, the application displays a preview for user\nverification (Figure 3A)."}, {"title": "Core Segmentation", "content": "After selecting the image, users proceed to the tissue segmentation and core detection step.\nTMA-Grid generates a downsampled 512 x 512 version of the image for segmentation by a neural\nnetwork. Users can adjust the \"sensitivity\" threshold, which determines the cutoff probability for marking\na region as tissue (Figure 3B). For instance, a \"sensitivity\" threshold of 0.4 marks pixels with a\nmodel-predicted probability of 0.6 or greater as tissue. Users can fine-tune other parameters to optimize\ncore detection and manually add or remove cores detected by the algorithm through an interactive\ninterface."}, {"title": "Grid Estimation", "content": "Once segmentation is verified, users move on to the grid generation step, which involves\ndetecting rows and columns of cores. This step provides extensive customization options for the gridding\nalgorithm, including:\n\n\u2022 Image Rotation: The tool computes an optimal rotation through trial-and-error, but users can\nchange the values set by the algorithm.\n\u2022 Radius Multiplier: Determines the search radius for disconnected cores."}, {"title": null, "content": "\u2022\nStopping Distance Parameter: Guides the algorithm on when to conclude the current row and start\na new one.\nUsers can edit core attributes such as size, row/column assignment, and add manual annotations\nfor later review. Additionally, cores can be added, removed, or repositioned using click-and-drag\noperations. Each input triggers an automatic grid reconstruction, providing real-time feedback (Figure\n3C)."}, {"title": "Virtual Grid", "content": "In the final review step, TMA-Grid creates an idealized virtual grid of dearrayed cores, removing\nunnecessary background and arranging the cores in a perfectly spaced grid for preview. Users can edit\ncore information and generate new fields for downstream validation or analysis. Once the dearraying\nresult is satisfactory, a table describing all core attributes can be generated as a JSON or CSV file.\nFull-resolution versions of each core can be downloaded individually or collectively, maintaining fidelity\nthrough local PNG downloads (Figure 3D).\nA comprehensive demonstration of TMA-Grid's functionalities is available on YouTube at this\nlink."}, {"title": "Discussion", "content": "The tool described here is one of the first instances of a web-based, freely accessible, interactive\nanalytics pipeline for WSI data. To the best of our knowledge, it is the only platform that allows\nzero-footprint dearraying of tissue microarray (TMA) cores without needing to upload the data to a\nspecialized environment or have it be locally available. This is a marked improvement from traditional\ndigital pathology workflows that require server-side patch extraction and prediction on whole slide\nimages, resulting in multiple copies of the same data and invariably leading to governance and\nprovenance concerns. In addition, there is a cost associated with the server even when these systems are\nnot in use. This cost escalates when the tool or the analytics need to be distributed outside the clinic or\ninstitution, essentially prohibiting collaboration.\nTMA-Grid addresses these issues by employing a client-side-only model. There is no specialized\nenvironment that exists independently of the user's machine. Instead, the environment is assembled at\nruntime when the user visits the application via their browser. In this model, the data does not need to be\nmoved anywhere. The dearraying code operates on the data where it is located, regardless of whether it is\nlocal or on a remote data store. With a login-based mechanism, as employed with Box in TMA-Grid, the\ntool acts on behalf of the user, meaning that only users previously authorized to access particular data can\nuse the tool on that data. There are no copies that need to be maintained and governed, and there is no\ncost, either for self-use or for distributed deployment.\nIt should be noted that Box is only meant to be a proxy here for a cloud service. The tool\nleverages Box's OAuth offering to allow users to operate upon their images directly from the app,\ncompletely under their own governance. Any storage service that offers similar functionalities for remote\naccess can be similarly integrated with TMA-Grid. Just about any storage service that offers a pathway\nfor delegated governance can be similarly integrated with TMA-Grid with minimal effort. This includes\nmost, if not all, cloud-based storage providers, as well as most PACS software.\nDespite running the tissue segmentation model on the user's device, the model takes on average\n500 milliseconds to distinguish tissue from background on a multi-gigabyte image. However, one\nlimitation of client-side operation is at the final step, when the high-resolution dearrayed cores need to be\nexported. This process involves significant computation and takes on average 10 minutes to complete on a\ncommodity computer, depending on whether the image is local or on a remote service.\nAs part of the dearraying, it is necessary to establish a bijective mapping between the dearrayed\ncores and the TMAMap, the metadata file generated during TMA construction that contains associated\nclinical information for each core. The virtual grid functionality as described above could be especially\nuseful here. TMA-Grid facilitates the association by generating a JSON/CSV table that maps each core to\na row and column index, which can then be manually merged with the TMAMap by comparing these\nindexes. Although the tool could be modified to perform this mapping itself, we found that TMAMaps\nvary widely in how they are organized. It ends up being easier to manually create and validate the\nmapping via the TMA-Grid interface."}, {"title": "Conclusion", "content": "Our work introduces a FAIR, interactive web application for de-arraying TMA whole slides,\nemploying an Al model for tissue segmentation and a Delaunay triangulation algorithm for grid\nestimation. This approach is shown to be robust even against significantly misaligned TMAs.\nFurthermore, the availability of interactive parameter tuning options leads to better results over\nalgorithmic pipelines. TMA-Grid proves the viability of using the web as a computational environment\nfor digital pathology analytics. It sets the stage for creating virtual TMAs for instance, facilitating the\nassembly of individual cores from varied sources into comprehensive virtual arrays. Such flexible sample\norganization could streamline research processes, enabling easy data sharing and reduced resource use,\nand leading to more effective, portable and reproducible histopathological analytics."}, {"title": "Funding", "content": "This work was funded by the National Cancer Institute (NCI) Intramural Research Program\n(DCEG/Episphere #10901)."}]}