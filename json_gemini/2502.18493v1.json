{"title": "RULE-BASED AUTOCORRECTION OF PIPING AND\nINSTRUMENTATION DIAGRAMS (P&IDS) ON GRAPHS", "authors": ["Lukas Schulze Balhorn", "Niels Seijsener", "Kevin Dao", "Minji Kim", "Dominik P. Goldstein", "Ge H. M. Driessen", "Artur M. Schweidtmann"], "abstract": "A piping and instrumentation diagram (P&ID) is a central reference document in chemical process\nengineering. Currently, chemical engineers manually review P&IDs through visual inspection to find\nand rectify errors. However, engineering projects can involve hundreds to thousands of P&ID pages,\ncreating a significant revision workload. This study proposes a rule-based method to support engineers\nwith error detection and correction in P&IDs. The method is based on a graph representation of\nP&IDs, enabling automated error detection and correction, i.e., autocorrection, through rule graphs.\nWe use our pyDEXPI Python package to generate P&ID graphs from DEXPI-standard P&IDs. In\nthis study, we developed 33 rules based on chemical engineering knowledge and heuristics, with five\nselected rules demonstrated as examples. A case study on an illustrative P&ID validates the reliability\nand effectiveness of the rule-based autocorrection method in revising P&IDs.", "sections": [{"title": "1 Introduction", "content": "Undetected errors or suboptimal designs in Piping and Instrumentation Diagrams (P&IDs) can cause financial costs,\nhazardous situations, unnecessary emissions, and inefficient operation. These errors are currently captured in extensive\nmanual revision processes leading to safe, operable, and maintainable facilities. However, engineering projects often\ninvolve hundreds to thousands of P&ID pages, leading to a significant revision workload. With the advent of computer\nvision-based document digitization (Theisen et al., 2023) and data exchange standards such as the Data Exchange\nin the Process Industry (DEXPI) (Thei\u00dfen and Wiedau, 2021), opportunities arise for algorithmic support of P&ID\ndevelopment and revision (Schweidtmann, 2024). Several studies have been conducted on error detection and correction\nin engineering diagrams. These studies can be grouped into rule-based approaches (Bayer and Sinha, 2019) and\nmachine learning (ML)-based approaches (Dzhusupova et al., 2023; Oeing et al., 2023; Mizanur Rahman et al., 2021;\nSchulze Balhorn et al., 2024). Specifically, ML-based approaches function as follows: Dzhusupova et al. (2023)\ndetect erroneous designs using computer vision in P&IDs. In contrast, Oeing et al. (2023) and Mizanur Rahman et al.\n(2021) use node classification on P&ID graphs to detect deviations from common P&ID design. In addition, our\nprevious work proposed a generative artificial intelligence approach that generates corrected P&IDs using a string\npresentation (Schulze Balhorn et al., 2024). The ML-based approaches offer the advantage of automatically learning to\ndetect errors from existing P&ID data. However, ML-based approaches require large-scale data for model training,\ncurrently lack explainability due to their black-box nature, and pose a risk of hallucination. Furthermore, ML-based\nmethods do not provide a deterministic guarantee that known errors encountered during training will be detected\nduring inference, posing a risk for safety-critical designs. Conversely, rule-based approaches, grounded in chemical\nengineering knowledge and heuristics, are beneficial for developing highly accurate error detection and correction\nmethods without the need for large-scale P&ID data. Rule-based approaches detect errors using hard-coded rules. These\nrules can be formulated based on general engineering logic or safety considerations. Moreover, the derived rules can be\naccompanied by an explanation. Whereas ML-based approaches still lack large-scale P&ID data in practice, we expect\nthat a rule-based approach is a good first step for a supporting tool for P&ID revision because it builds trust with the\nengineer due to the high accuracy and explainability. Previous rule-based approaches represent P&IDs as graphs and\naim to detect errors by identifying abnormal graph patterns (Bayer and Sinha, 2019). These approaches use graph-based\nrules to modify P&ID graphs: Once an abnormal graph pattern is identified, specific modifications are applied to correct\nthe P&ID graph. While the previous work is an important contribution toward supporting engineers in P&ID designs,\nwe identify three limitations: (i) Previous methods are not linked to data exchange standards, making their integration\ninto industrial P&ID development difficult, (ii) the literature focuses on digitization errors but neglects engineering\nerrors, and (iii) literature does not account for missing components in P&IDs. Building on the promising work by Bayer\nand Sinha (2019), we propose a rule-based autocorrection method for DEXPI P&IDs to address the aforementioned\nlimitations. The methodology can be summarized as follows: First, we use our pyDEXPI package (Goldstein et al.,\n2025) to convert a smart P&ID into a graph. Second, rules are formulated based on chemical engineering knowledge\nand heuristics. These rules are implemented as graphs that describe manipulations to the P&ID graph. Lastly, applying\nthese rule graphs to the P&ID graph completes the autocorrection process."}, {"title": "2 Rule-based autocorrection methodology", "content": "Figure 1 summarizes our proposed methodology for P&ID autocorrection. First, a smart P&ID is converted into a\nDEXPI P&ID according to the DEXPI standard. Alternatively, paper-based P&IDs can be digitized. Then, a P&ID\ngraph is generated from the DEXPI P&ID using our pyDEXPI package (Goldstein et al., 2025). We utilize the P&ID\ngraph to facilitate the application of rule graphs which implement various engineering rules for error detection and\ncorrection. Next, the rule-based autocorrection yields a corrected P&ID graph. Ultimately, the corrected P&ID graph is\npresented in a P&ID assistant and transformed back into a DEXPI P&ID. This manuscript focuses on the part from a\nDEXPI P&ID to a corrected P&ID graph."}, {"title": "2.1 DEXPI P&ID to P&ID graph", "content": "The transformation from the DEXPI P&ID to the P&ID graph is achieved through our pyDEXPI package (Goldstein\net al., 2025). The pyDEXPI package is a Python implementation of the DEXPI data model, containing data classes\nthat have attribute relationships to encode composition or reference. Furthermore, the pyDEXPI package includes\nfunctions for importing and exporting DEXPI data, such as converting a DEXPI P&ID to a P&ID graph. In the P&ID\ngraph, nodes represent P&ID components and directed edges represent pipes and signals. The direction of the edge\nis determined by the material flow or signal direction. To keep the P&ID graph concise, we only include key P&ID\ncomponents. Specifically, we include the following components: (i) plant items with a tag, (ii) piping components, such\nas valves, (iii) actuators, and (iv) process instrumentation. P&ID components not considered mainly store connectivity\ninformation which we represent as directed edges."}, {"title": "2.2 Applying rule graphs to a P&ID graph", "content": "The rule-based autocorrection method searches for erroneous patterns in P&IDs. If an erroneous pattern is detected, a\nset of corrections is performed on the pattern. Erroneous patterns and the corresponding set of corrections are collected\ntogether in so-called rule graphs. At execution, all rules graphs from a rule graph database are applied sequentially:\nFirst, we search for the erroneous graph pattern defined by a rule in the P&ID graph via subgraph isomorphism. The\nNetworkX package provides a subgraph isomorphism algorithm based on the VF2 algorithm (Cordella et al., 2004).\nVF2 is a recursive algorithm that starts by randomly mapping a node from a pattern to a node in the P&ID graph with"}, {"title": "3 Results and discussion", "content": "To evaluate the performance of the autocorrection method, we applied the five rules listed in Table 1 in an illustrative\ncase study by the DEXPI initiative (Figure 3). The P&ID includes two pumps, two heat exchangers, and a central vessel,\nwith associated instrumentation for pressure and temperature regulation. The process begins with fluid entering through\na pump, passing through a heat exchanger for preconditioning, and then entering a vessel for storage or processing.\nPost-vessel, the fluid is discharged by another pump and is partly recycled to the vessel. The recycle undergoes\nadditional thermal conditioning for temperature control of the vessel. The resulting P&ID graph consists of 33 nodes\nand 36 edges."}, {"title": "3.1 Detection and correction accuracy", "content": "The autocorrection method demonstrates high accuracy in identifying and correcting errors. The method successfully\nidentified all erroneous substructures from the rule graph database, achieving an accuracy of 100%. These substructures\nwere corrected using the corresponding rule graphs. For instance, the vessel is lacking pressure and level control. Rule\n9 added a level instrument to the vessel for level control. Additionally, the two pumps are not protected and cannot\nbe isolated for maintenance. Rule 21 facilitates maintenance by isolating the pumps with block valves and drains. To\nprotect the pumps, Rule 10 recommended installing a strainer in the suction line, and Rule 19 suggested placing a\ncheck valve in the discharge line. For every applied rule, the method provided an explanation for why the revision\nwas necessary. However, the rule graph database did not address all potential errors; for example, the vessel and heat\nexchangers were not isolated with block valves and drains, indicating the need for additional rules."}, {"title": "3.2 Computational performance", "content": "The autocorrection method demonstrated computational efficiency. It executed in 0.016 seconds on a laptop equipped\nwith an i7-1185G7 processor (1.8-3.0 GHz) and 16 GB RAM. On average, evaluating a single rule took only 3.2\nmilliseconds. This performance is significantly faster than manual detection and correction of errors, which can take\nseveral minutes to hours, particularly in cluttered P&IDs."}, {"title": "3.3 Discussion", "content": "Our findings indicate that the rule-based autocorrection method provides reliable and efficient support for engineers. Its\nability to identify and correct errors with deterministic accuracy makes it suitable for safety-critical applications. The\nrapid execution time also highlights its potential for real-time applications, saving engineers significant time compared\nto manual reviews. Moreover, the method's integration with smart P&IDs enables it to utilize detailed component\nattributes, reducing the need for external documentation. This study emphasizes the importance of applying rules in the\ncorrect sequence. For example, applying Rule 21 before Rules 10 and 19 ensures proper placement of strainers and\ncheck valves near pumps. Selecting the correct sequence minimizes the risk of overlapping or conflicting corrections.\nHowever, the method's scalability is constrained by the need for manual rule derivation and maintenance. Each rule\nrequires expertise from trained engineers, and as the rule database expands, tracking and managing interactions between\nrules becomes increasingly complex. In contrast, ML-based approaches excel at scaling, offering a promising avenue for\nfuture research (Schweidtmann, 2024). Exploring hybrid methods that combine rule-based and ML-based approaches\ncould leverage the strengths of both methodologies (Schweidtmann et al., 2021). In conclusion, while the rule-based\nautocorrection method is not a standalone tool, it serves as a valuable support system for engineers, enhancing the\naccuracy and efficiency of P&ID reviews."}, {"title": "4 Conclusions", "content": "This study presents rule-based autocorrection in DEXPI P&IDs. First, a DEXPI-formatted P&ID is converted into a\nP&ID graph using pyDEXPI. Subsequently, rule graphs based on chemical engineering knowledge and heuristics are\napplied to the P&ID graph to detect and rectify errors. The final outcome is a corrected P&ID graph. We implement\nfive selected rules and test them in a case study. The results show that the autocorrection method has an accuracy of\n100% due to the rule-based approach. Therefore, the method is reliable and applicable in safety-critical applications.\nBesides this, the method detects and corrects errors at a significantly faster rate than humans. This research tackles\nprevious limitations by (i) being compatible with the data exchange standard DEXPI through our pyDEXPI module,\n(ii) proposing rule graphs embedding engineering experience, and (iii) capturing missing components. However, the\nrule-based method also comes with limitations. Engineers need to extend and maintain the list of rules. In addition,\nrules may conflict. Therefore, the order in which we apply the rules and their context is important. Future research\nshould investigate hybrid methods combining rule-based and ML-based for autocorrection. In addition, completing the\nautocorrection pipeline from Figure 1 by implementing the conversion of P&ID graphs to the DEXPI data model would\nenable the full integration into existing engineering workflows."}]}