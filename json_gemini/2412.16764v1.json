{"title": "Towards Selection and Transition Between Behavior-Based Neural Networks for Automated Driving", "authors": ["Iqra Aslam", "Igor Anpilogov", "Andreas Rausch"], "abstract": "Autonomous driving technology is progressing rapidly, largely due\nto complex End-To-End systems based on deep neural networks.\nWhile these systems are effective, their complexity can make it diffi-\ncult to understand their behavior, which raises safety concerns. This\npaper presents a new solution: a Behavior Selector that uses multi-\nple smaller artificial neural networks (ANNs) to manage different\ndriving tasks, such as lane following and turning. Rather than rely-\ning on a single large network, which can be burdensome, require\nextensive training data and is hard to understand. The developed\napproach allows the system to dynamically select the appropri-\nate neural network for each specific behaviour (i.e. turns) in real\ntime. We focus on ensuring smooth transitions between behaviors\nand taking into account the vehicle's current speed and orienta-\ntion to improve stability and safety. The proposed system has been\ntested using the AirSim simulation environment, demonstrating its\neffectiveness.", "sections": [{"title": "1 INTRODUCTION", "content": "The field of autonomous driving is undergoing a stage of rapid\nadvancements. There are a vast number of approaches explored to\ndevelop the most effective system for controlling vehicles without\nhuman intervention. The primary goal is to navigate the vehicle\nfrom its current position to a specified target location autonomously.\nThere are two main approaches to achieving this: the classical mod-\nular pipeline approach and the End-to-End (E2E) learning approach\n[16]. The modular pipeline breaks down the autonomous driving\ntask into sub-tasks such as perception, planning, and control [5]. In\ncontrast, the E2E approach replaces the entire pipeline with a single,\nlarge artificial neural network (ANN) that learns to map raw sensor\ndata directly to vehicle control signals. While the E2E approach\nhas shown promise, especially with the development of efficient\nANNs, one of the biggest breakthroughs is the creation of efficient\nANN. It required vast amounts of training data and time to train a\ngood network that could handle all driving maneuvers (e.g., lane\nfollowing, turning, stopping) [7]. Moreover, these networks can be\ndifficult to interpret and may behave unpredictably in unforeseen\nsituations.\nTo mitigate these issues, one solution is to use multiple smaller\nANNs, each responsible for a specific driving behavior (e.g., lane\nfollowing) rather than relying on a single network for the entire\ndriving task. This approach requires less training data, simplifies\nthe network, and makes training faster and easier to validate. For\ninstance, a network dedicated solely to lane following does not\nneed to be trained and validated on data that includes all driving\nbehaviors, instead just use lane-following data.\nHowever, managing multiple ANNs introduce new challenges:\n(1) only one network can control the vehicle at any given time,\nnecessitating an arbiter or Behavior Selector (BS) to activate the\nappropriate driving behavior. (2) Ensuring smooth switching be-\ntween different driving behaviors requires additional mechanisms.\n(a) the current selected behavior then should correct the state (e.g.,\nspeed and orientation to be needed for the next driving sequence)\nof the vehicle in such a way that the next behavior can operate. For\nexample, consider the switch between the Follow Lane behavior\nand the Turn Left behavior. Turn Left behavior is operating at low\nspeed, while Follow Lane is operating at high speed. If the vehicle\naccelerates too high quickly while following a lane, it may not be\nable to safely execute a sharp turn as trained (b)additionally, if\nthe vehicle's orientation is misaligned with the lane at the time of\nswitching. Since the switch occurs at a semi-random position on\nthe road, the previous driving function may not have completed\nits maneuver, leaving the vehicle misaligned with the lane, it may\ndeviate from the intended path. This could be problematic, as the\ntraining data typically assumes the vehicle is parallel to the lane.\nThis aligns with the \"Garbage In, Garbage Out\" principle [17]: if the\nvehicle's state doesn't match the training conditions, the behavior\nwill be incorrect. This issue underscores the importance of aligning\nthe vehicle's state with the training data to prevent suboptimal\nperformance.\nThis paper investigates solutions for integrating a behavior-\nbased approach with neural network-driven systems. It aims to\nidentify methods by which the Behavior Selector can effectively\nselect and transition between E2E behaviors based on the route\nplanner's driving commands while addressing the challenges out-\nlined.\nThe rest of this paper is organized as follows: Section II provides\nan overview of related work in E2E driving and behavior selectors,\nfocusing on both robotics and automotive applications. Section\nIII presents the system architecture and different conceptual ap-\nproaches for the behavior selector. In Section IV, Evaluation and\ndiscussion of the results are presented. Section V concludes the\npaper by summarizing its contributions and suggesting potential\ndirections for future research."}, {"title": "2 RELATED WORK", "content": "The concept of creating autonomous driving vehicles using ANNS\nwas first introduced by D. A. Pomerleau in 1990 [13]. The ANNs\ntake a large amount of training data as well as computational power.\nDespite having these disadvantages, the neural network approach\nproved to be the most effective at mimicking the driving behavior\nof a human driver. However, given the complexity of driving, it's\nimpractical to train a single network to handle all possible scenarios.\nThis led to the development of behavior-specific E2E models, where\nindividual distinct networks tackle specific tasks. It can be described\nas a multi-state system or as \"state of a system\" or \"system behavior\",\na concept explored in 1971 [1] which viewed complex systems as\ncollections of distinct operational states.\nBuilding on this, [11] J.D. Murchland, contributed to understand-\ning how systems switch between behaviours, particularly focusing\non reliability. Murchland's work is particularly relevant when con-\nsidering the design and evaluation of autonomous driving systems\nthat rely on multiple behavioral states to manage complex driv-\ning tasks. While his focus was on the reliability aspects of these\ntransitions, lacking the real-time operation of autonomous vehicles.\nAs the field evolved, the need for a control mechanism to switch\nbetween different behaviors in a multi-state system became appar-\nent. In 1986, R. A. Brooks [6] laid the foundation for these control\nsystems in robotics, particularly with the use of state machine-based\nmechanisms for task-achieving behaviors. As such, the decompo-\nsition of a mobile robot control system based on task-achieving\nbehaviors greatly influenced the design of behavior selectors, which\nmanage the transition between different driving behaviors in au-\ntonomous systems.\nLater in 1997 [15] J.K. Rosenblatt applied the ideas of DAMN\n(Distributed Architecture for Mobile Navigation) to autonomous ve-\nhicles and robotics, that focused on task-oriented behaviors, i.e. us-\ning an arbiter to switch between different navigational patterns like\nobstacle avoidance, goal-seeking, and path-following. The DAMN\narchitecture utilized an arbiter to manage and prioritize these be-\nhaviors, allowing the system to make real-time decisions by blend-\ning the outputs of various behaviors through a voting mechanism.\nHowever, the behaviors were more generalized and focused on fun-\ndamental navigational tasks rather than specific driving maneuvers\nlike turning left, turning right, or lane following, which are crucial\nfor autonomous driving. Additionally, unlike modern behavior se-\nlectors, DAMN did not consider the vehicle's dynamic state (e.g.,\nspeed and orientation) during behavior transitions, making it less\nsuitable for the sophisticated demands of E2E autonomous driving.\nA related behavior-based approach was employed [10] to address\nspecific autonomous tasks relevant to off-road environments. The\nsystem utilized an arbiter to manage different behaviors. Like [15]\nthis study has also focused on basic navigational tasks in unstruc-\ntured, rugged environments. Each behavior had a specific function,\nand the arbiter would combine the outputs from these behaviors\nusing a weighted sum to decide the vehicle's next action. The fo-\ncus was on ensuring the vehicle could navigate complex off-road\nterrains by dynamically responding to immediate environmental\nchallenges, rather than following predefined paths or performing\nprecise maneuvers like lane following or making sharp turns, which\nare more typical in structured, on-road settings.\nMore recently, Orzechowski et al. [12] described a hierarchical\ndecision-making system for autonomous vehicles, which integrated\nmultiple layers of behavioral patterns into a scalable framework.\nTheir work focused on handling various driving scenarios on com-\nbining basic systems to form complex decisions to handle various\ndriving scenarios. It did not incorporate machine learning, a core\ncomponent of the behavior selector in this paper. Machine learning\nadds complexity to the system, particularly in managing transitions\nbetween behavioral patterns, which must consider the vehicle's\nstate at the transition point. This oversight can lead to challenges in\nensuring smooth and safe transitions between behaviors, a critical\naspect of autonomous driving systems. Additionally, their system\ndid not incorporate a Route Planner for short-term goal-based nav-\nigation, which is essential for effectively managing driving tasks\nand transitions in current behavior-based systems.\nDespite the advances made in these areas, most existing studies\nstill rely heavily on rule-based methods and lack mechanisms for\nseamless behavioral transitions in dynamic environments. This is\nwhere the fuzzy logic-based approach by Fouladinejad [9] adds\nvalue, enabling smoother decision-making by accounting for un-\ncertainties in real-world driving. Building on these foundations,\nour approach advances these ideas by integrating AI based driving\nbehavior and manage transitions between basic driving behaviors\nwhile considering the dynamic state of the vehicle."}, {"title": "3 DRIVING BEHAVIOR SELECTOR: SYSTEM\nARCHITECTURE AND CONCEPT:", "content": "This section initially describes the system architecture for a behavior-\nbased E2E autonomous driving system, followed by different solu-\ntions for implementing and enhancing the Behavior Selector, which\naddresses the challenges stated in the introduction.\nFigure 1 describes the system architecture for a behavior-based\nE2E autonomous driving system. The architecture consists of three\nmain components: (1) a Vehicle sensors platform, (2) driving behavior-\nspecific neural networks, a route planner, and a behavior selector,\nand (3) a Vehicle actuator platform to control the vehicle. On the\nleft side, the sensor perceives the environment and provides the sen-\nsory input to the E2E behaviors, while the Route Planner gets the\ncurrent position of the vehicle, orientation, and target position from\nsome external system named \"Remote command control center\" [2]\n[4]. The route planner is an important sub-component based on the\nOpen-DRIVE format [3]. It calculates the path to reach the destina-\ntion and sends it in the form of a sequence of driving instructions\nor behaviors to the Behavior Selector. The Behavior Selector uses\nthis information as input to choose the appropriate behavior (e.g.,\nFollow Lane or Turn Left). Although the route planner's detailed\nimplementation is beyond the scope of this paper. In the middle,\nmultiple neural network modules act as driving behaviors. Each\nnetwork is trained to handle specific driving tasks, such as lane\nfollowing, making turns, stopping after reaching the destination,\nand lastly, crossing the crossing. Cross the crossing is considered\nas a separate behavior as it is different than follow lane behavior\nand we don't have any lane to follow as in the case of follow lane\nbehavior (e.g. junctions).\nThe outputs from all the ANNs consist of the desired speed and\nsteering values and are sent to the Behavior Selector. The Behavior\nSelector is the core component and contribution of this paper. It\nreceives the sequence of driving instructions and the distance to\nthem from the route planner. Using these, the Behavior Selector\nselects the required neural network behavior and forwards the con-\ntrol signals of respective behavior (speed and steering) to actuator\nsensors to control the vehicle.\nTo implement the behavior selector that ensures a safe and\nsmooth transition among driving E2E networks four different ap-\nproaches have been proposed. First, the Basic Behavior Selector is\nbased on route planner inputs without any additional transition and\ninterpolation. The second Behavior Selector is based on the transi-\ntion behavior approach that includes creating an additional driving\nbehavior to adjust the vehicle's state e.g., if the vehicle is acceler-\nating during Follow Lane behavior, the Transition behavior will\nreduce the speed before a turn, ensuring the vehicle's state matches\nthe requirements of the next driving behavior network, ensuring\nsmoother changes between different driving behaviors. Third is an\ninterpolation-based approach that interpolates between the driving\nbehavior, to blend the outputs of the current and next networks\nto create a more gradual change and improve stability. Fourth, the\nBehavior Selector is based on Transition and Interpolation, a hybrid\napproach that combines both transition and interpolation for the\nmost seamless behavior switching. Before delving into a detailed\ndiscussion of each approach, it's important to note a mismatch\nbetween the driving sequence provided by the route planner and\nthe actual driving behavior.\nSince Route planner is based on the Open-Drive interface and\nit does not explicitly provide follow lane behavior, instead, Follow\nLane behavior is calculated based on the distance to the next driving\ninstruction. This makes it difficult to integrate Follow Lane behavior\ninto the network, which is essential for autonomous driving. The\nFollow Lane behavior relies on the Route Planner's distance to\nthe next driving instruction and can be calculated from there. For\nexample, if a left turn is planned in 100 meters, but the neural\nnetwork was trained to handle turns starting only 5 meters ahead,\nit will have difficulty managing the 95 meters it wasn't trained for.\nThe key variable here is the Turn Distance, which should match\nthe distance used during training. For instance, if training began\n5 meters before a turn, the Turn Distance should also be set to 5\nmeters. When the vehicle is farther than the Turn Distance, the\ndefault Follow Lane behavior is used to maintain stability. Once\nthe vehicle is within the Turn Distance, the specific behavior for\nturning is applied. The following section will discuss the proposed\napproaches in detail."}, {"title": "3.1 Basic Behavior Selector (no transition and\nno interpolation):", "content": "A basic Behavior Selector based on route planner inputs is a straight-\nforward approach where the Behavior Selector chooses behaviors\ndirectly based on route planner inputs without considering tran-\nsitions or interpolation. It's proven to be unsuccess as it doesn't\ntake into account the vehicle state mentioned in the above section\n(failed follow-to turns make the vehicle unstable)"}, {"title": "3.2 Transition-Based Behavior Selector:", "content": "Transition behavior bridges the gap between the vehicle's actual\nstate and the expected state before a turn. It uses a rule-based\nspeed output calculation to ensure safe deceleration. While Follow\nLane aims to drive at the maximum safe speed, Transition behavior\nreduces the vehicle's speed to 1 meter per second (about 3.6 km/h)"}, {"title": "3.3 Interpolation-Based Behavior Selector", "content": "The other way to tackle the problem with speed is to use a tech-\nnique called Interpolation. Interpolation uses both the current and\nnext driving behavior network in parallel, blending their outputs\nbased on the distance to the turn. As the vehicle gets closer to\nthe turn, the influence of the next network increases, helping the\nvehicle gradually adjust its speed to the expected level for the next\nmaneuver. This approach provides more flexibility than the Transi-\ntion method, as it avoids unnecessary deceleration by aligning the\nvehicle's speed with the next network's output. While Interpola-\ntion offers smoother speed transitions, it has drawbacks. It requires\nmore computational power since both networks run simultane-\nously, and the next network must handle inputs outside its training\ndata. This can lead to unpredictable behavior if the network is not\ngeneral enough. The computational cost can double, but this might\nbe acceptable depending on the hardware and circumstances. Inter-\npolation coefficient must be effective for any input, that increases\nas the vehicle approaches the turn, and remain low when the turn is\nfar away. This ensures smooth speed control without unnecessary\ndeceleration when the turn is distant. There are two ways to define\ninterpolation, one is based on interpolation distance and the second\nis based on turn distance."}, {"title": "3.3.1 Interpolation Distance based coefficient.", "content": "The first way to de-\nfine the interpolation coefficient is based on the introduction of\nthe Interpolation Distance. If the vehicle is outside of Interpolation\nDistance, the coefficient is defined as 0, effectively disabling the\ninterpolation. Inside of the Interpolation Distance the coefficient is\ndefined as the\n$1-\\frac{\\text{distance to next behavior}}{\\text{interpolation distance}}$\nThis means that as the vehicle gets closer to the next behavior,\nthe distance to that behavior decreases, resulting in a coefficient\nthat approaches 1, thus increasing the influence of interpolation.\nFigure 3 on the left side shows a graphical interpretation of the\ncalculations behind Interpolation Distance based coefficient. Red\ndot represents the coordinate of the next behavior, whereas green\ndot represents a vehicle. Orange line below the road is the total\nInterpolation Distance, and the green line is the distance between\nthem. It is easy to see that the ratio between the distances lowers\nwith the vehicle getting closer to the next behavior, which makes\nthe coefficient grow. This is the ease of implementation and under-\nstanding however still need to define the Interpolation Distance,\nwhich is another variable with a need to optimization. Due to this\nreason, I decided to use the following approach for defining the\ncoefficient that is based on the turn distance."}, {"title": "3.3.2 Interpolation Distance based coefficient.", "content": "Another way to de-\nfine the interpolation coefficient is to use the Turn Distance, a key\nvariable that is already defined in the Behavior Selector. This makes\nTurn Distance a good baseline for the coefficient function. The Turn\nDistance based coefficient is calculated as the ratio of the distance\nto the next driving behavior divided by the Turn Distance. This\napproach works well when the distance to the driving behavior is\ngreater than the Turn Distance. In regions where the distance is\ngreater than the Turn Distance, interpolation is not applied, making\nthe Turn Distance-Based Coefficient a suitable choice for our needs.\nFigure 3 (right side) illustrates this concept: green dots represent\nthe vehicle's position, and red dots represent the location of the\nnext driving behavior. The red line indicates the Turn Distance,\nwhile the green line shows the distance to the driving behavior as\nreported by the Route Planner. As the vehicle gets closer to the driv-\ning behavior, the distance-to-behavior ratio decreases, increasing\nthe coefficient value. It also simplifies the process by not requiring\nadditional definitions or entities, thus avoiding the complications of\nalternative approaches. For these reasons, the Turn Distance-Based\nCoefficient was chosen for the implementation of the Behavior\nSelector."}, {"title": "3.4 Behavior Selector based on Transition and\ninterpolation", "content": "As an experiment, the approach combining Transition behavior\nand Interpolation was also evaluated. The interpolation treats the\nTransition behavior as an additional behavior to interpolate upon,\nmaking the vehicle lower the speed before entering the Transi-\ntion Distance. After entering Transition Distance, the interpolation\nproceeds as normal by using output values of Transition Behavior\nand a behavior corresponding to the next driving behavior. As In-\nterpolation uses the distance to the next behavior, the distance to\nthe Transition behavior should also be provided. The reasonable\nestimate of the distance to the Transition behavior is distance to\nthe next driving behavior minus the Transition Distance."}, {"title": "4 EVALUATION AND RESULTS:", "content": "This section presents the evaluation of all proposed approaches\ndescribed in the above section and the comparison among them.\nThe first part of this section provides a detailed overview of the\nenvironment and track layout used during evaluation. In the second\npart of the section, E2E driving network used during the evaluation\nis explained. After that, a brief overview of route planner and finally\nresults from the evaluation are discussed."}, {"title": "4.1\nEvaluation Environment:", "content": "The proposed concept was evaluated using a simulation environ-\nment created with Unreal Engine [8] and the AirSim plugin [14].\nThe simulation allows for an efficient and cost-effective assessment,\navoiding the delays and expenses of physical hardware. Simula-\ntion accelerates the data collection process that would otherwise\ndemand skilled drivers, large training grounds, and extensive su-\npervision. Figure 4 illustrates the simulation environment along\nwith test vehicle and also the bird eye view of test track.\nThe test track is designed using a grid of 1m-by-1m mats, each\nrepresenting different road segments such as straight paths, cross-\nings, or turns as illustrate in figure 4 (left side in the bottom with\nred block). These mats can be combined to form larger road features,\nlike complex turns or intersections. The training map in the simu-\nlation is a composite of these mats, creating a comprehensive road\nnetwork with various driving scenarios, including turns, straight\nroads, and crossings with multiple exits. In Figure 4 (left side), the\ngreen circle marks the starting position of the vehicle for the test,\nwhile the \"X\" indicates the endpoint. This path was chosen because\nit is the longest and covers most of the driving behaviors, such as\nlane following, crossing intersections, and making turns."}, {"title": "4.2 Driving Behavior networks", "content": "The driving behaviors in this study are primarily implemented us-\ning E2E artificial neural networks. These E2E networks process\ncamera data as input and produce speed and steering outputs, with\neach network tailored to a specific driving behavior. The key driv-\ning behaviors implemented include Follow Lane, Turn Left, Turn\nRight, and Cross Crossing.\nIn addition to these, two auxiliary behaviors, Transition and\nStop behaviours, were implemented by overriding the network's\nspeed output with static values. Transition uses a fixed speed of 1.0\nm/s\u00b2, while Stop uses 0.0 m/s\u00b2. These auxiliary behaviors rely on\nthe steering computations from the Follow Lane network, with the\nstatic speed adjustment proving challenging to train due to specific\ndata requirements.\nTraining data for each driving behavior was collected by manu-\nally driving the vehicle in the simulation environment, with record-\ning activated only during the relevant maneuvers to minimize over-\nlap between behaviors. For instance, training data for the Follow\nLane behavior excluded turns. Each driving behavior's data was\nindependently recorded and organized into separate datasets. The\ncollection process involved driving to the starting point, recording\nthe specific maneuver, and then saving the data."}, {"title": "4.3\nDiscussion of results", "content": "4.3.1 Basic Behavior Selector. In the Basic Behavior approach, no\nadditional mechanisms were implemented as described in Section\n3.1. As a result, failures in the evaluation were anticipated. Figure\n5 illustrates the graph of the squared error between the neural\nnetwork's predicted speed and the vehicle's actual speed over time,\nwith the y-axis representing speed error and the x-axis representing\ntime. The red dots indicate moments when behavior switches occur.\nIt is evident that each behavior switch is followed by a spike in the\ndiscrepancy between the predicted and actual vehicle speeds. This\noutcome is expected because the vehicle's current state (in terms\nof speed and orientation) does not align with the conditions under\nwhich the network was trained.\nLooking closely at the behavior switch from the Follow Lane be-\nhavior to the Turn Right behavior (Figure 5, right side), a significant\nspike in error between the vehicle's current speed and the Turn\nRight behavior's predicted speed command is clearly observed. This\nindicates that the Turn Right behavior's driving function interface\nwas not respected. Specifically, the Turn Right behavior failed the\nmaneuver due to two primary reasons: (1) the vehicle's speed was\ntoo high to successfully execute the Turn Right maneuver, resulting\nin failure, and (2) the vehicle was not properly aligned with the\nlane as required by the Turn Right behavior. Consequently, this\nevaluation was deemed unsuccessful."}, {"title": "4.3.2 Transition based behavior selector.", "content": "The integration of Transi-\ntion behavior enables the Behavior Selector to better adhere to the\ndriving function interface. This implementation is straightforward,\nrequiring no additional training and introducing minimal compu-\ntational overhead, primarily through simple distance calculations.\nHowever, while it offers advantages, the Transition behavior also\nimpacts the overall error between the vehicle's actual speed and\nthe predicted outputs of the driving behavior. Figure 6 shows sig-\nnificant error spikes are observed during certain transitions, such\nas the spike between 15 and 16 seconds. These spikes are due to\nthe synthetic nature of the Transition behavior, which focuses on\nrapid deceleration rather than accounting for vehicle momentum.\nA closer look at the largest spike between 15 and 16 seconds, shown\nin the middle of Figure 6, reveals that the error stems from the\nTransition behavior. The red dotted lines mark the behavior change\npoints, with the subsequent turn right behavior. Despite the spike,\nthis does not indicate a failure, as the evaluation was completed\nsuccessfully. Importantly, the transition from Transition to Turn\nRight behavior results in only a modest error, indicating that the\nvehicle's speed was sufficiently reduced for the turn.\nFigure 6 (right side) also shows a smaller error spike between 7.5\nand 9.5 seconds. Again, this spike is due to the Transition behav-\nior, underscoring that while it can increase the error between the\nvehicle's speed and the neural network's output, it still maintains\ncompliance with the requirement of driving behavior."}, {"title": "4.3.3 Behavior Selector based on Interpolation behavior.", "content": "The Be-\nhavior Selector using Interpolation has demonstrated superior per-\nformance in minimizing the squared error between the vehicle's\nspeed and the neural network's predicted output, while also being\nrelatively fast at completing the objective. Figure 7 illustrates the\nsquared error in speed for the Behavior Selector with Interpolation.\nNotably, behavior switches do not result in error spikes, indicating\nthat the driving function interface is consistently respected. The\nmean squared error for this configuration is the smallest among all\nsuccessful runs, achieving an average error of 5.8 m/s\u00b2, which is a\nthreefold improvement compared to the Transition-based architec-\nture's mean error of 14.9 m/s\u00b2.\nFigure 7 (right side) provides a close-up of the speed error graph\naround the transition to Turn Right behavior. The absence of a spike\nduring the transition from Follow Lane to Turn Right confirms the\neffectiveness of the Interpolation technique in maintaining smooth\nbehavior switching.\nThis configuration offers significant improvements over other\napproaches, but it has some drawbacks, primarily its computational\nexpense, as it requires running an additional neural network in\nparallel. Secondly, it has its limitations, particularly concerning\nsteering interpolation. Manual observations revealed that while\nspeed interpolation marginally improved performance, steering\ninterpolation introduced instability into the system. Despite the\noverall success of the evaluation run, the interpolation of steering\nvalues did not enhance stability and, in some cases, detracted from\nit."}, {"title": "4.3.4 Behavior Selector based on Transition and Interpolation be-\nhavior.", "content": "This approach incorporating both Transition behavior and\nInterpolation resulted in a successful run, though it introduced sev-\neral notable differences compared to previous approaches. Integrat-\ning Transition behavior with Interpolation contributed to increased\nstability in steering, as the steering commands during Transition\nwere derived from the Follow Lane behavior. This ensured con-\nsistency in steering even during interpolation. Additionally, the\nvehicle's speed was slightly reduced, which is expected given that\nTransition behavior is designed to slow down the vehicle. Incorpo-\nrating a portion of this behavior into the Follow Lane command\nnaturally decreased the overall speed.\nFigure 8 presents the speed error, it is evident that the error\nremained low following behavior transitions, validating the effec-\ntiveness of the Interpolation approach. However, a trade-off was\nobserved: the time taken by the system to reach the destination\nwas slightly longer. Specifically, the vehicle took approximately\n25 seconds to complete the task, representing a 25% increase in\ntime compared to both the Interpolation-only and Transition-only\narchitectures.\nFigure 8 (right side) provides a close-up of the error graph at the\ntransition to Turn Right. While the transition to Turn Right did not\nresult in a significant error spike, the subsequent switch to Cross\nCrossing introduced instability, leading to a notable discrepancy\nbetween the actual vehicle speed and the predicted speed command.\nThese results suggest that combining Transition and Interpolation\nbehaviors does not offer significant improvements over using either\ntechnique independently or, in some cases, may even exacerbate\ninstability."}, {"title": "5 CONCLUSION AND OUTLOOK", "content": "This paper presents a behavior-based approach to E2E autonomous\ndriving, emphasizing the critical role of the Behavior Selector in\nmanaging multiple neural networks tailored to specific driving be-\nhaviors. Four distinct strategies were proposed and evaluated to en-\nsure smooth and safe switching between these driving networks: the\nBasic Behavior Selector, Transition-based Selector, Interpolation-\nbased Selector, and a hybrid model that combines both transition\nand interpolation.\nThe evaluation results underscored the significance of transi-\ntion and interpolation mechanisms in achieving stable and safe\nvehicle behavior. Runs using a Behavior Selector without these\nmechanisms resulted in failure, while those that adhered to the\ntransition and interpolation interfaces successfully completed the\ndriving tasks, highlighting the importance of seamless behavior\ntransitions. Among the two approaches-transition and interpo-\nlation-both demonstrated effectiveness; however, interpolation\nprovided greater stability while delivering comparable results to\nthe Transition-based architecture, albeit with a significant increase\nin computational costs.\nWhile the simulation environment offered valuable insights into\nthese approaches, future research will focus on refining and vali-\ndating these strategies in real-world conditions. This will involve\noptimizing the Behavior Selector for diverse driving environments\nand exploring the integration of advanced machine learning tech-\nniques to enhance the system's adaptability and robustness, ulti-\nmately contributing to safer and more reliable autonomous driving\nsolutions."}]}