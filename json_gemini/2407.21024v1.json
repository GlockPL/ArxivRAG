{"title": "LLM-Find: An Autonomous GIS Agent Framework for Geospatial Data Retrieval", "authors": ["Huan Ning", "Zhenlong Li", "Temitope Akinboyewa", "M. Naser Lessani"], "abstract": "Powered by the emerging large language models (LLMs), autonomous geographic information systems (GIS) agents have the potential to accomplish spatial analyses and cartographic tasks. However, a research gap exists to support fully autonomous GIS agents: how to enable agents to discover and download the necessary data for geospatial analyses. This study proposes LLM-Find, an autonomous GIS agent framework capable of selecting and fetching required geospatial data by generating, executing, and debugging programs. LLM-Find utilizes the LLM as the decision-maker, selects the appropriate data source (s) from a pre-defined source list, and fetches the data from the chosen source. Each data source has a handbook that records the metadata and technical details for data retrieval. The proposed framework is designed in a plug-and-play style to ensure flexibility and extensibility. Human users or autonomous data scrawlers can add a new data source by adding a new handbook. We developed a prototype agent based on LLM-Find, and experiment results demonstrate its capability of retrieving data from various sources including OpenStreetMap, administrative boundaries and demographic data from the US Census Bureau, satellite basemaps from ESRI World Imagery, weather data from a commercial provider, and the COVID-19 data from the NYTimes GitHub. Our study is among the first attempts to develop an autonomous geospatial data retrieval agent.", "sections": [{"title": "Introduction", "content": "In recent years, large language models (LLMs) have drawn tremendous attention from researchers. These models are trained on massive text corpora and are able to respond to questions (prompts) in natural language. Thus, such models can reason based on provided information and common sense through human language. Serving as reasoning cores, LLMs are able to make decisions and assist analysis for various applications, such as robotics (Sun et al., 2024) and clinical diagnosis (Hong et al., 2024). LLM can also power geographic information systems (GIS), enabling GIS tools to perform spatial analysis tasks autonomously. Researchers in the GIScience community have attempted to implement such autonomous GIS agents, aiming to automate spatial analysis (Li & Ning, 2023; Zhang et al., 2023), cartography (Zhang et al., 2024), and disaster management (Akinboyewa et al., 2024; Hao et al., 2024). The main purpose of those autonomous agents is to promote productivity and democratize GIS technologies by reducing human intervention.\nBefore conducting any spatial analyses, GIS agents need to access essential geospatial datasets, such as study area boundaries, points of interest (POIs), and attributes of geographic entities. Li & Ning (2023) highlighted that online geospatial data discovery and filtering are necessary capabilities of autonomous GIS. Their experiments showed that LLM is able to obtain data from REST (Representational State Transfer) APIs with brief documentation about endpoints, parameters, and format of the returned data. In their study, however, most experimental datasets were provided by file paths or URLs. Their work on autonomous GIS did not propose solutions or mechanisms for geospatial data retrieval.\nGeospatial data can be sourced from a variety of online and local repositories. For example, in various research contexts, OpenStreetMap, governmental agencies, and satellite imagery repositories are widely used as open-access data sources. Automatically retrieving data from these extensive data sources can enhance GIS agents' autonomy, potentially enabling fully autonomous research. Zhang et al. (2023) proposed an autonomous GIS framework, GeoGPT, to collect, process, and analyze geospatial data. GeoGPT is able to download POIs and road networks from OpenStreetMap and remote sensing images from Geospatial Data Cloud. However, the authors did not provide details on the implementation of the data fetching module and its expanding mechanism.\nThe work by Feng et al. (2023) on GeoQAMap exhibited the idea of querying data from an online Wikidata and Query Service data source. GeoQAMap first adopted an LLM (GPT-3.5, OpenAI, 2024) to convert the spatial questions on geo-entities to SPARQL queries, and then retrieved related geo-entities from Wikidata. The authors suggested that GeoQAMap could potentially be applied to other data sources, such as OpenStreetMap and CityGML, but did not provide further investigation or a general framework for data retrieval. Similar to GeoQAMap, Staniek et al. (2023) also investigated the feasibility of data fetching from OpenStreetMap by applying fine-tuned T5 models (Raffel et al., 2020) and GPT-4 (OpenAI, 2024) to convert questions in natural language to queries in OverpassQL, a query language for OpenStreetMap data. GeoForge (Ageospatial, 2024) is a web application powered by GPT that can request, process, analyze, and display satellite imagery, building footprints, and administrative boundaries. Its goal is to democratize geospatial information and analysis. However, this closed-sourced application is still in development, with limited data sources and no support for customized and local data sources.\nWhile researchers have demonstrated the feasibility of LLM-powered agents to process data queries using natural language, universal mechanisms and implementations are rarely detailed in the literature. Autonomous geospatial data retrieval faces several critical challenges, including 1) Discovering relevant data from various online sources. While search engines like Google can retrieve data based on keywords, selecting and assessing appropriate geospatial data requires comprehensive strategies. This process is both time-consuming and intelligence-intensive. 2) Selecting the appropriate data sources by interpreting data requests made in natural language or specific requirements, which may not always clearly designate the data source. The autonomous agent needs to understand such requests and determine which data source should be used. 3) Fetching data from specific sources involves varying technical methods. Some data sources provide API (Application Programming Interface) access, downloading URLs (Uniform Resource Locators), and sometimes require API keys or passwords. Autonomous agents need to be flexible, knowledgeable, and \"smart\" to handle the parameters in APIs or URLs correctly.\nTo address this gap, we designed LLM-Find, an autonomous GIS agent framework for geospatial data retrieval, aiming to address the second and third challenges. The challenge of online data source discovery will be explored in future research as it necessitates intensive research into web search and analysis. LLM-Find retrieves requested data by generating, debugging, and executing programs based on natural language queries. It is expandable and flexible, utilizing handbooks for each data source that provide necessary metadata and technical information for data fetching. To demonstrate the concept and feasibility of the framework, we developed a prototype agent including six data sources: OpenStreetMap, US Census data, US administrative boundaries, weather data, ESRI (Environmental Systems Research Institute, Inc.) satellite images, and COVID-19 data. New data sources can be added to the agent by adding new handbooks in a plug-and-play manner. For over 60 data request tests, LLM-Find obtained the correct data with a high chance of about 80% - 90%, demonstrating its potential for automating geospatial data retrieval for autonomous GIS."}, {"title": "Autonomous GIS Agent Framework for Geospatial Data Retrieval", "content": "Typically, GIS analysts find and download geospatial data in three steps: 1) Collecting potential data sources and their metadata, such as extent, resolution, date, and attributes. This procedure may involve using search engines or consulting colleagues. 2) Determining which data source is most suitable for the analysis. 3) Fetching the data based on the technical requirements set by the data providers, such as accessing URLs, using registered accounts, understanding data structures, and handling data chunking. In other words, human analysts are required to follow technical handbooks to retrieve the data.\nCorrespondingly, a geospatial data retrieval agent is expected to conduct these three steps autonomously. The first step, creating a geospatial data source repository, requires extensive collaboration with external resources such as search engines or data catalogs. In this study, we focused on the latter two steps: determining the applicable data source from an existing list and fetching data from the selected source. Since a GIS analyst is often specified in one or several domains and uses limited data sources, our exploration began with a manually provided GIS data source list and handbooks. We designed a framework for agents to select suitable data sources and fetch the requested data based on a data source's technical handbook. This section introduces the proposed framework, LLM-Find, and explains its implementation details through a proof-of-concept prototype."}, {"title": "The overall framework", "content": "LLM-Find comprises two major components: a data source index and a handbook inventory (Figure 1). The data source index provides brief introductions to various data sources, enabling LLMs to select the most appropriate source based on the data request. The handbook inventory contains technical handbooks detailing how to fetch data from each source, such as accessing entries and data formats. The aim is to provide sufficient information to reduce uncertainty for the agents. Additionally, two supplementary components, authentication and codebase, are used to manage source authorization and provide example code. The framework is designed to be straightforward and extendable to accommodate various data sources across different application scenarios. This plug-and-play architecture allows humans or autonomous agents to update the data source index and handbook inventory easily."}, {"title": "Data source index", "content": "The data source index includes the source names and concise descriptions, informing the agent about the data sources it can use. A sample of the data source index is shown in Box 1Error! Reference source not found., including 6 data sources. Each source includes a descriptive name and a brief introduction to the data. Note that the data source index should be brief and informative since it needs to be embedded in the prompt. Because the descriptive names may be lengthy and unsuitable for use as data source identifiers (IDs), we defined short aliases for them to serve as IDs."}, {"title": "Handbook inventory", "content": "Each handbook in the inventory provides the necessary technical information for LLMs to fetch data from its associated source. Although LLMs have been trained on massive texts, they still lack the detailed knowledge required to retrieve GIS data from various sources. Handbooks essentially fill the knowledge gaps in LLMs for fetching particular geospatial data sources. They might cover data location, entry endpoints, format, and attributes. For sources requiring authentication (e.g., API keys) or specialized code to download and process data, the handbook provides this information. Since LLM-Find generates programs to fetch data, we found that providing it with a verified program template can significantly increase its code generation accuracy and reliability. These template programs are integrated into prompts and managed within a supplementary component, codebase, to ensure better maintenance and organization of these templates. In addition, LLM-Find includes a dedicated component to manage authentication for security concerns. Each handbook serves a single data source and is maintained individually, promoting extendibility. The framework can add, update, and remove data sources by modifying the data source index and handbook inventory, making it plug-and-play. While humans can manually create and maintain these data sources, autonomous agents can also perform this task by crawling and assessing data sources and automatically generating handbooks, enriching the LLM-Find data sources without or with minimal human intervention.\nHandbooks vary among data sources. For instance, OpenStreetMap provides the Overpass Query Language for API data retrieval, while the US Census Bureau offers download links for administrative boundaries. There may also be multiple methods or sources to retrieve the data. For example, GIS analysts can obtain OpenStreetMap data using the official website's export function, the Overpass API, or Python packages like OSMnx, each with its advantages and disadvantages. Moreover, both OpenStreetMap and the US Census Bureau provide US administrative boundaries, so determining the better fit for a specific spatial analysis is crucial. Therefore, the agent needs to be provided with necessary information via handbooks to ensure reliable data fetching. In this study, we manually created handbooks based on intensive experiments to ensure agents can correctly understand the data request and perform data fetching. Box 2 lists a few guidelines in the handbook for fetching OpenStreetMap data, including API endpoints and conditions for using specific Python packages. These guidelines were developed through manual intensive experiments."}, {"title": "The proof-of-concept prototype", "content": "Based on the framework, we developed a prototype of the LLM-Find agent for GIS data retrieval using Python programming. It utilizes GPT-4o as the decision core to select the data source and generate Python programs to fetch geospatial data. Figure 2 demonstrates the workflow of the agent. First, the agent receives the data request described in natural language and sends it along with the data source index to LLM to select the most appropriate source. The data request can be straightforward, such as \u201cDownload the 2021 population by race for each county in the US and save the downloaded data as points in GeoPackage format to D:\\data.csv\". Upon receiving the LLM's reply, the agent extracts the selected data source and retrieves the handbook associated with the selected source, which includes necessary authentications and template programs. Appendix 1 shows an example prompt used in LLM-Find agent for selecting the data source.\nWith the data source identified and the handbook retrieved, the agent will then ask the LLM to generate Python code to fetch data. The handbook that contains the technical requirements will be sent with the code generation request. The LLM-Find agent employs a restricted program structure to ensure the code runs in a Python environment. For example, the LLM is instructed to generate the program using a pre-defined structure, such as placing all code within a \"download_data()\" function rather than arbitrary names or the \" main \" function. Additionally, it is instructed to raise exceptions instead of handling them, as LLM-Find needs to determine whether the program runs correctly. LLM-Find agent incorporated such information and requirements into the prompt to GPT-4o to get the program; a prompt example can be found in Appendix 2. Finally, the agent executes the generated code to fetch the data.\nRecognizing that the LLM's spatial programming ability is limited due to insufficient training data and the complexity of the data-fetching programs, it is rare for LLMs (and humans) to write a bug-free program on the first attempt. Code debugging is a common and necessary step in real-world programming. Therefore, we implemented a self-debug module for the LLM-Find agent to correct the buggy code according to the error information. The main operations involve sending the necessary information to LLM and asking it to correct the code. The sent information includes the data request, handbook, generated program, occurred error, and debugging requirements. The corrected program will be executed again to fetch the data. This execution-debugging process often runs multiple times until the generated program is error-free or the iteration times exceed the pre-defined limitation (which is set to 10 times in the LLM-Find agent)."}, {"title": "Case Studies", "content": "The LLM-Find agent currently supports six data sources, covering data types of vector, raster, and attribute. This section presents the results obtained by the LLM-Find agent when requesting data from each of these sources. We extensively tested the agent across various scenarios, resulting in a code repository with over 60 test cases. We encourage readers to explore these cases or to test their own data requests to experience the capabilities of LLM-Find."}, {"title": "OpenStreetMap", "content": "OpenStreetMap is a collaborative project that creates a free, editable map of the world, built by volunteers who collect and contribute geographic data (Haklay & Weber, 2008). It offers a vast repository of spatial data, including roads, trails, points of interest, and administrative boundaries, making it a valuable resource for various GIS applications. The data is structured using nodes, ways, and relations, which can be queried through the Overpass API. We listed the results of downloading city points, river polylines, and state administrative polygons of Nigeria (Figure 3). Our experiments showed that downloading data from OpenStreetMap was challenging, including generating correct Overpass queries and parsing results. The complexity of the OpenStreetMap data structure and tags increases the difficulties of fetching and saving the data for autonomous agents. For example, GPT-40 struggled to convert OpenStreetMap's 'relation' data structure into multi-polygons with multi-holes. However, we significantly improved the success rate by providing a template program in the handbook."}, {"title": "US Census data", "content": "US Census data includes comprehensive demographic information about the population of the US, including variables such as population size, age distribution, income levels, education, and housing characteristics at varying geographic levels (e.g., census tract, county, and state). The LLM-Find handbook for the Census data includes the data access API information along with a template program to support the agent in selecting the correct variables from more than 27,000 available variables. Figure 4 presents the downloaded elderly population (people aged 65 and over) of all Census block groups in Washington D.C. Figure 5 shows several social determinants of health downloaded at the county level for 2022, including population by race, median household income, health insurance coverage, and the population older than five years old speaking only English at home. Multiple variables across multiple years can be retrieved in one request. For example, Figure 7 shows the population with a college degree or higher at the state level in the USA for 2012 and 2022. However, we observed that the agent may query the wrong variable combinations at times when the data involves multiple variables. For instance, when asking for the total senior population, it may only query the male or female population."}, {"title": "US administrative boundary", "content": "The US Census Bureau's TIGER data (Topologically Integrated Geographic Encoding and Referencing) provides detailed geographic information about various administrative boundaries in the US, such as states, counties, and census tracts. These datasets are essential for geographic analysis and mapping. The handbook includes the necessary boundary file URLs, formatted as: https://www2.census.gov/geo/tiger/GENZ2021/shp/cb_{year}_{extend}_{level}_500k.zip. The agent can correctly determine the region and level, such as tract, county, or state. In this study case, we asked the agent to download the county-level administrative boundaries of South Carolina (Figure 7). Figure 8 shows that the agent downloaded all census tract boundaries within the New York County (Manhattan). In both case studies, the agent needs to first determine the geographic region (i.e., South Carolina or New York County) and then extract the requested geographic units (i.e. county and tract) within that region."}, {"title": "Weather data", "content": "We integrated the weather data API from OpenWeather (openweathermap.org) into the LLM-Find agent. This API accepts location and period parameters to return historical, current, and forecast weather data. Note that the backbone LLM, GPT-4o, cannot get the current time on its own, so we added explicit prompts in the handbook to specify the period (historical, current, or forecast) or the current date and time to select appropriate API endpoints and parameters. Figure 9 shows an example of downloading historical weather data for Yulin City in Guangxi, China, during May 2024. Examples of fetching current and forecast weather data for other cities can be found in Figures 10 and 11, respectively. Since weather data is inherently spatiotemporal, combining both spatial and temporal dimensions, this case study demonstrates that LLM-Find can effectively manage both aspects simultaneously, which is crucial in spatial analysis."}, {"title": "Satellite imagery", "content": "Satellite imagery is an essential type of Earth observation data used in both natural and social science research. However, retrieving satellite images is not trivial; researchers typically need a background in satellite sensors, accounts with data providers, and expertise in processing large volumes of image data. We equipped the LLM-Find agent with access to an image tile web service from ESRI World Imagery, enabling it to download images based on place names. Figures 12 and 13 display the downloaded satellite images of the FAST Telescope and Qingdao City in China, respectively. Another example is shown in Figure 3, featuring the downloaded image of Nigeria. These examples, covering various geographic extents and resolution levels, demonstrate the feasibility of downloading satellite images with autonomous agents. New data sources along with corresponding handbooks can be added to LLM-Find to enhance its capability in fetching other remote sensing images."}, {"title": "COVID-19 data", "content": "The New York Times provides a comprehensive dataset on COVID-19 accumulative cases, tracking the spread and impact of the virus across various regions (New York Times, 2023). This dataset includes daily updates on case numbers, deaths, and other relevant metrics, making it a valuable resource for public health analysis and research. Similar to the US Census Bureau administrative boundaries, this dataset can be accessed via URLs. We provided the LLM-Find agent with a handbook containing data URLs, data structures, and date ranges. In this case study, we demonstrate that the LLM-Find agent can download COVID-19 accumulative case data from the New York Times (Figure 14). This study case along with the administrative boundary one demonstrates the agent's ability to handle data sources without formal APIs."}, {"title": "Discussion", "content": "The proposed autonomous agent framework, LLM-Find, demonstrated the feasibility of retrieving geospatial data by simple natural language command input without human intervention, indicating that such data retrieval agents can provide necessary data to other agents for further analysis. This research reflects the advocation of autonomous GIS (Li & Ning, 2023), which envisions that the next generation of GIS could conduct spatial analysis with less or without human intervention.\nThe proposed framework supports a plug-and-play system and handbook hubs as demonstrated by the prototype agent and case studies. First, this design is highly extendable: adding new data sources only requires updating the index and creating the corresponding handbook, with no impact on existing sources, which simplifies maintenance. The geospatial community can establish handbook hubs to share well-written and validated handbooks, enabling agents to use them seamlessly. Data providers should consider releasing data not only for human users but also for autonomous agents. Thus, the traditional geospatial metadata format or standard may need to be updated to meet the technical requirements of such agents. Second, the proposed framework provides the flexibility to allow another agent to crawl online geospatial data sources, update the index and create handbooks autonomously. For example, LLM-Find can be connected to an autonomous data discovery agent powered by LLMs for Internet search, webpage analysis, geospatial data assessment, and handbook generation.\nDespite the promising results, the current implementation of LLM-Find has several limitations. One major limitation is that it only supports text handbooks, which are unsuitable for some applications. For example, many geospatial data sources, particularly remote sensing images, have particular boundaries represented by vector files or raster maps. LLM-Find needs further development to support multi-modal handbooks. Another limitation is the inability to support long handbooks due to the prompt length restrictions of LLMs. Some data sources require extensive materials to fetch data correctly. For example, the US Census data provides more than 27,000 fine-grained variables for the American Community Survey 5-year survey (US Census Bureau, 2023). Retrieving the correct variable combinations from this large list is challenging (see case studies in Section 3.2). A possible solution is to feed all variables and their descriptions into the handbook, leveraging LLMs that support large input tokens, such as Gemini 1.5 (Google, 2024). However, computational time and cost may pose obstacles. Therefore, approaches such as Retrieval Augmented Generation (RAG) (Lewis et al., 2020) should be explored and integrated into LLM-Find to support long and comprehensive handbooks.\nAdditionally, a data understanding and assessment module is necessary for the geospatial data retrieval agent. Human GIS analysts often choose between similar datasets or make compromises when encountering unsuitable datasets. For instance, they need to decide to use 1:5,000,000 or 1:50,000 scale boundaries for country-level analysis or select low-resolution terrain data when high-resolution data is unavailable. Such decisions require experience, detailed knowledge of existing data, a profound understanding of application contexts, and creative problem-solving skills. Future research could explore whether autonomous agents can perform these tasks as well as or better than humans."}, {"title": "Conclusion", "content": "The proposed autonomous GIS agent framework, LLM-Find, has demonstrated the feasibility of retrieving geospatial data through simple natural language commands without human intervention. This capability indicates that such data retrieval agents can effectively provide necessary data to other agents for further analysis, supporting the vision of autonomous GIS. The framework's plug-and-play design and handbook hubs make it extendable and easy to maintain. Adding new data sources requires only updating the index and creating corresponding handbooks without affecting existing sources. This feature allows the geospatial community to share well-written and validated handbooks seamlessly. Moreover, the framework allows another agent to autonomously crawl online geospatial data sources, update the index, and create handbooks. This integration can enhance the autonomous data discovery process. Based on the framework, we developed a proof-of-concept data retrieval agent incorporating six data sources: OpenStreetMap, US Census data, US administrative boundary data, weather data, ESRI World Imagery, and COVID-19 data. The case studies demonstrated that the prototype agent could select the appropriate data source, load the associated handbook, generate and execute a Python program to retrieve the requested geospatial data. Our study is among the first to develop an autonomous geospatial data retrieval agent. Future research should focus on enhancing autonomous online data discovery, assessment, and handbook generation to further advance autonomous GIScience research."}]}