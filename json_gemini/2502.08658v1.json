{"title": "Analyzable Parameters Dominated Vehicle Platoon Dynamics Modeling and Analysis: A Physics-Encoded Deep Learning Approach", "authors": ["Hao Lyu", "Yanyong Guo", "Pan Liu", "Shuo Feng", "Weilin Ren", "Quansheng Yue"], "abstract": "Recently, artificial intelligence (AI)-enabled nonlinear vehicle platoon dynamics modeling plays a crucial role in predicting and optimizing the interactions between vehicles. Existing efforts lack the extraction and capture of vehicle behavior interaction features at the platoon scale. More importantly, maintaining high modeling accuracy without losing physical analyzability remains to be solved. To this end, this paper proposes a novel physics-encoded deep learning network, named PeMTFLN, to model the nonlinear vehicle platoon dynamics. Specifically, an analyzable parameters encoded computational graph (APeCG) is designed to guide the platoon to respond to the driving behavior of the lead vehicle while ensuring local stability. Besides, a multi-scale trajectory feature learning network (MTFLN) is constructed to capture platoon following patterns and infer the physical parameters required for APeCG from trajectory data. The human-driven vehicle trajectory datasets (HIGHSIM) were used to train the proposed PeMTFLN. The trajectories prediction experiments show that PeMTFLN exhibits superior compared to the baseline models in terms of predictive accuracy in speed and gap. The stability analysis result shows that the physical parameters in APeCG is able to reproduce the platoon stability in real-world condition. In simulation experiments, PeMTFLN performs low inference error in platoon trajectories generation. Moreover, PeMTFLN also accurately reproduces ground-truth safety statistics. The code of proposed PeMTFLN is open source\u00b9.", "sections": [{"title": "I. INTRODUCTION", "content": "ACCURATE vehicle dynamic modeling provides theoretical support for understanding the microscopic behavior between vehicles. More importantly, it is the foundation of critical applications in intelligent transportation systems such as traffic flow simulation, platoon formation control, and signal optimization [1], [2]. Car following (CF) behavior that reflects the coupling mechanism between the current and preceding vehicles on the same lane is the most important component of dynamic modeling. Starting from pioneering works such as the Pipes model [3] and the optimal velocity (OV) model [4], car following models have been attracted in the field of traffic engineering and statistical physics. The purpose is to reveal nonlinear characteristics such as traffic instability, shock waves, and phase transitions, to elucidate the mechanism of traffic congestion formation and dissipation. However, the trajectories generated by physics-driven models based on ideal assumptions are naturally more conservative, leading to deviations in replicating human driving behavior. In recent years, disruptive deep learning has shined in the application of intelligent transportation systems [5], [6]. Focusing on car-following modeling, coupled with the emergence of high-precision, large-sample vehicle trajectory data, deep learning has also spurred the emergence of data-driven car following models [7]. Generally, the goals of mathematical elegance and data accuracy are pursued in data-driven models. Currently, a novel physics-informed deep learning (PIDL) framework has emerged and received increasing attention [8], [9]. However, existing PIDL-based CF models respect the physical laws by incorporating a weakly imposed loss function consisting of the physics equations residual and boundary constraints. These models are limited to theoretical considerations and implementation application considerations.\nMoreover, the propagation of traffic disturbances is more significant in vehicle platoon [10], [11], and it is necessary to focus on platoon dynamics modeling. Looking further ahead, platoon dynamics modeling also caters to the needs of autonomous driving platoon simulation and testing [12], [13]. Research efforts around platoon-level car following dynamics modeling are primarily realized through the distributed extension of vehicle-level car following modeling [14]. Such direct extension methods will amplify modeling inaccuracies and ignore complex vehicle interactions within the platoon. What's more, the interaction between vehicles is dynamically evolving and exhibits temporal correlation. Even for the mixed vehicle platoon, previous studies often relax the assumption of homogeneous vehicles and do not fully focus on the overall characteristics of the platoon [15]. It is a critical need to learn and explore the intrinsic overall characteristics of car following behavior from the perspective of the overall platoon.\nTo address the above limitations, this paper proposes a physics-encoded deep learning framework for vehicle platoon dynamics modeling and analysis, named PeDL. The core modeling perspective is to focus on the power of parameters of the generalized car following model and forcibly encode known physics into the core architecture. Specially, we designed an analyzable parameters encoder computational graph (APeCG) and a multi-scale trajectory feature learning network (MTFLN) within the PeDL framework. APeCG is oriented by the generalized car following model, with the aim of directly learns analyzable parameters. MTFLN enables the extraction of interaction features of vehicle-level and platoon-level, covering both intrinsic and dynamic features at different scales. Notably, the training of PeDL is end-to-end. The main contributions are as follows:\n(1) A novel vehicle platoons dynamics modeling framework (PeDL) with interpretability and accuracy is proposed. It focuses on learning and encoding the parameters of the generalized platoon model, aiming to avoid excessive dependence on prior knowledge, and to maximize the utility of the framework. Moreover, PeDL can be scaled to model platoons with different numbers of vehicles and highly interactive scenarios.\n(2) A multi-scale feature learning network (MTFLN) is designed to facilitate the end-to-end learning of the parameters necessary for PeDL. The network initially extracts vehicle-level features from naturalistic driving platoon trajectories. With these features as the center, the causal attention mechanism is employed to learn comprehensive platoon-level features and implements multi-step prediction.\n(3) A platoon trajectory dataset is extracted from HIGHSIM dataset [16] and applied to PeDL. The proposed PeDL can reproduce the ground-truth of platoon following behavior with high accuracy. In particular, PeDL succeeded in replicating both the stability and safety evolution of the platoon, highlighting its exceptional capacity in physical analyzability. The remainder of the paper is structured as follows. Section II reviews related work on vehicle dynamic modeling at the vehicle-level and platoon-level. In Section III, we describe the problem and introduce the proposed PeMTFLN. Section IV adopts real-world trajectories data to train and evaluate the prediction performance of the PeMTFLN. Section V presents simulation experiments and results analysis on platoon trajectories generation. The last Section VI concludes the paper and discusses follow-up work."}, {"title": "II. RELATED WORKS", "content": "A. Vehicle-level dynamics modeling\nThe physics-driven car following model is defined as a rigorous derivation process, with most parameters having clear physical meanings. Classic car following models such as full velocity difference model (FVD) [17] and intelligent driver model (IDM) [18], greatly promoted the fundamental research of car following behavior. Subsequently, there are various perspectives to model car following behavior, such as stochasticity [19] and heterogeneity [20]. In terms of data-driven models, Ma et al. considered reaction delay and established a sequence to sequence learning based car-following model [21]. Liao et al. develops a personalized car-following model using a memory-based deep reinforcement learning approach, specifically integrating LSTM with twin delayed deep deterministic policy gradients, to optimize driving behavior [22]. Jiang et al. presented a stochastic learning approach using approximate Bayesian computation to integrate multiple car-following models, achieving more accurate vehicle trajectory reproduction for both human-driven and automated vehicles [23]. Innovatively, Mo et al. introduced a physics-informed deep learning encoded with physics-based models, providing a new perspective and tool for car following research [24]. Afterwards, Transformer neural network architecture with self-attention was applied to the PIDL-based car following architecture, achieving superior performance [25]. However, within the PIDL-based car following models, physical prior knowledge only played a secondary role in training deep neural networks, where the neural network remains the main focus of inference. An additional drawback is that these models idealize assumptions for modeling actual traffic flow and lack of the analysis of traffic characteristics of real traffic flow.\nB. Platoon-level dynamics modeling\nWhile most research has focused on predicting short-term trajectories of individual vehicles, there is a growing need to model platoon-level car-following dynamics to better understand the interactions and collective behavior of multiple vehicles. For example, Lin et al. analyzed the spatiotemporal error propagation from the perspective of platoon generation, and proposed an long short-term memory network structure with improved sampling mechanism [26]. Lin et al. worked on providing enhanced state representation for multi-agents reinforcement learning, incorporating intricate relative vehicle relationships to improve performance in platoon-following scenarios [27]. Liu et al. combined physics knowledge with deep learning and stochasticity to design a quantile-regression physics-informed deep learning car-following model, which comprehensively characterizes the real laws of car following behavior in a platoon [28]. Furthermore, Rowan et al. attempted to capture mesoscopic and macroscopic traffic phenomena as broader traffic features for model training [29], and constructed a multiscale car-following framework for vehicle platoons. Tian et al. proposed an AI-based Koopman framework to model the unknown nonlinear platoon dynamics. This framework linearizes the platoon system, aiming to analyze how disturbances propagates over vehicle platoon while achieving accurate prediction [30]. However, due to the existence of operators, this framework lacks scalability. Overall, there is a lack of platoon-level dynamic modeling, particularly in capturing the behavioral interaction features across the physical space of vehicles at the platoon-level. More importantly, the existing platoon-level dynamics modeling lacks of addressing the scalability and analyzability, issues simultaneously, which motivates the focus of this paper."}, {"title": "III. METHODOLOGY", "content": "A. Problem Statement\nA vehicle platoon traveling in the same lane is under investigation. This platoon comprises a leading vehicle, designated as vehicle 0, and a set of following vehicles, numbered from 1 to N. The problem of modeling the dynamics of the platoon is defined as follows: given the historical state sequences of the N following vehicles, the objective is to model the platoon dynamics and predict the state sequences of the following vehicles over a specified prediction horizon. This prediction is based on the future velocity sequences of the leading vehicle. To imbue the model with physical interpretability and the ability to provide closed-loop responses, the problem can be formalized as follows:\n$\\Otg (X_{1:N} (t - P : t))$\n$\\X_{1:N} (t + 1 : t + F) = fo_{t} (X_{1:N} (t), v_0 (t + 1 : t + F))$\nwhere P and F denote the input historical horizon and the output prediction horizon, respectively; $x_n(t) = [v_n(t), s_n(t), \\Delta v_n(t)]^T$ denotes the state of vehicle n at time t. This state vector includes the velocity of vehicle n, $v_n(t)$, the gap to the preceding vehicle, $s_n(t)$, and the relative velocity to the preceding vehicle, $\\Delta v_n(t) = v_{n-1}(t)-v_n(t)$. Additionally, $X_n(t) \\in R^{d_{in}}$ represents the extended state vector, which encompasses additional information such as vehicle type, etc, $d_{in}$ represents the dimension of $X_n(t)$. The notation $X_{1:N}(t - P : t) \\in R^{P \\times N \\times d_{in}}$ refers to the state sequences of vehicles 1 to N over the interval from time t - P to t; $\\theta_t$ symbolizes the parameters of the platoon dynamics model, $g(.)$ denotes the mapping from the state sequences to these parameters, and $fo_{t} (.)$ represents the platoon dynamics model parameterized by $\\theta_t$. The problem of modeling the platoon is redefined as 1) reasonably parameterizing f(.) and identifying the necessary modeling parameters $\\theta_t$; and 2) developing the mapping g(.) to optimize parameters, enabling the $fo_{t} (.)$ model to generate human-like trajectories of vehicle platoons based on real-time variations in the velocity of the leading vehicle.\nB. Physics-Encoded Deep Learning Framework\nThe platoon dynamics model should be capable of modeling platoons with varying numbers of vehicles to accommodate different traffic scenarios. Additionally, the extensive body of knowledge on vehicle-level car-following behavior provides a critical foundation for modeling platoon-level dynamics. Consequently, the formulation of f(.) should adhere to the established principles of car-following behavior. The generalized formulation of the car-following model given is as follows:\n$a_n (t) = f_n (x_n (t))$\nIn theory-based models, $f_n(.)$ is typically characterized by parameters that are physically interpretable. These parameters often provide a quantitative description of driver characteristics, enabling $f_n(.)$ to describe and explain a driver's decision-making based on the current state. However, many of these models are accompanied by idealized assumptions, thereby limiting their ability to capture diverse driving behaviors effectively. The proposed framework employs a linear time-varying form of $f_n(.)$, thereby avoiding the need for specific model choices and excessive reliance on prior knowledge. The linear time-varying formulation of Eq. (2) is presented as :\n$a_n (t) \\approx f_{n,t}(x(t)) + f_{x}(t)(x_n(t)-x(t))$\n$\\= f_{x}(t)(x_n(t) - x(t))$\n$[f_{u_n}(t)', f_{s_n}(t)', f_{\\triangle v_n}(t)']\\theta_{n,t} \\in R^3$\n$x(t)= [mean(v_n(t - P, t), mean(s_n(t - P,t), 0]^T$\nwhere $\\theta_{n,t}$ denotes the time-varying parameters to be determined.\nThe expected states of velocity and gap are defined as the average states of the vehicle over the past P timestamps. This definition rests on a reasonable assumption: drivers consistently desire vehicles to maintain a velocity that aligns with the preceding vehicle's velocity, while minimizing rapid fluctuations in speed and gap over the short term. Eqs. (2)-(5) were extended spatially and temporally to encompass the N following vehicles within the platoon and across the prediction horizon and obtained the form of parameters $\\theta_t \\in R^{N \\times F \\times 3}$ that need to be determined for platoon dynamic modeling. However, solving for $\\theta_t$ remains inherently difficult. The proposed framework employs advanced neural networks to explore the mapping g(.), which relates naturalistic driving platoon trajectories to the parameter $\\theta_t$.\nRemark 1: Linear time-varying model ensures a balanced trade-off between computational complexity and modeling accuracy. The influence of platoon-level characteristics on individual vehicle driving behavior is reflected through implicit adjustments in parameters $\\theta_t$.\nC. Model Architecture\nThe architecture of parameters encoder multi-scale trajectory feature learning network (PeMTFLN) is illustrated in Fig. 1. MTFLN is depicted by components (a) to (c), whereas APeCG is represented by component (d) in Fig. 1. Specifically, the historical trajectories of the following vehicles within the platoon are input into the Vehicle-level Feature Learning (VFL) module. The VFL module comprises two sub-modules: Trajectory Feature Learning (TFL) and Feature Uncertainty Learning (FUL). The first sub-module extracts relevant features from the vehicle's historical trajectories, while the second generates probabilistic representations of these features. The VFL module is applied in parallel to each vehicle, with shared weights across all instances, ensuring the model's scalability. Following this, vehicle driving characteristics samples, randomly drawn from the distribution output by the FUL sub-module, are used as tokens and fed into the Platoon-level Feature Learning (PFL) module to learn interactions among vehicles within the platoon. The output of the PFL module serves as the query, while the outputs of the TFL sub-module as the keys and values, which are then input into the Non-Autoregressive Parameters Decoder (NARP Decoder) to predict the value of the necessary parameters. APeCG module initially assigns physical meaning to the outputs of decoder according to Eq.(4). It then calculates the platoon state over the prediction horizon based on these parameters."}, {"title": "D. Model Details", "content": "This section provides a detailed introduction to the design of each module in the proposed PeMTFLN.\n1) Vehicle-level Feature Learning Module: The VFL module is dedicated to extracting key features from a single vehicle's historical trajectories that are pertinent to driver behavior and decision-making. This module is divided into the following two components.\n1) Trajectory Feature Learning. The continuous-time vehicle state sequence encapsulates information at various levels, including state transition relationships at different scales, the inherent and dynamic features of vehicles underlying these relationships. Within the TFL sub-module, the Mamba Block [31] is employed to learn and extract these multidimensional features. The structure of the Mamba Block is depicted in Fig. 2. After essential normalization and convolution operations for feature enhancement, the input is fed into the state-space model (SSM) as shown in the right of Fig. 2. This SSM is designed to simulate vehicle state changes through state transition processes across multiple dynamic time scales. In the right of Fig. 2, each colored line represents a subsystem. The system matrices of these subsystems are learned across the entire dataset to capture the common features of vehicles, forming the basis of system evolution. Other parts of the subsystems dynamically adapt based on the input. For example, at time t, the SSM input $e_{ssm}^{t}$ is used to derive the control vector $B_t$ and the observation weight vector $C_t$ for each subsystem. This enhances the model's capability to perceive dynamic inputs and generalize effectively. All subsystems share the same time step $T_t$, and the $T_t$ corresponding to each dimension is different. This enhances the model's stability. Furthermore, Mamba achieves an optimal balance of performance and efficiency through selective scan and hardware-aware algorithm optimization. Overall, the TFL sub-module, with Mamba as its core, is specifically designed for vehicle trajectory feature extraction, and its unidirectional extraction of temporal information obviates the need for input position encoding. The computation formula for the TFL module is as follows:\n$\\H_{1:N}^{P:t} = TFL(X_n(t - P : t), W_{TFL}) n = 1,2,\\ldots, N$\nwhere $H_{TFL} = H_{TFL}^{P:t} \\in R^{P \\times d_m}$ denotes the output of the TFL sub-module, $W_{TFL}$ and $I_{TFL}$ represent the learnable parameters and operations within the TFL sub-module, respectively. $d_m$ signifies the dimensionality of the model.\n2) Feature Uncertainty Learning. Human drivers often exhibit inherent randomness in their driving behavior. In other words, even if two vehicles possess identical attributes and historical trajectories, their future driving behaviors cannot be guaranteed to be consistent. To model this randomness, the FUL sub-module incorporates a variational encoder (VE) [32]. Specifically, the output of the TFL sub-module $h_{1:N,t}^{TFL}$, which encapsulates the driver's characteristics and the vehicle state at time t, is fed into the VE. Leveraging knowledge acquired from extensive driving trajectories, the VE models the latent distribution of driving features for this input and outputs a parameterized driving feature distribution. The VE is implemented using a multilayer perceptron (MLP). The formal expression of the FUL sub-module is as follows:\n$\\mu_{n,t}, \\sigma_{n,t} = \\Phi_{FUL}(H_{1:N,t}^{TFL}, W_{FUL})$\n$\\P_{W_{FUL}}(h_{1:N,t}^{FUL}) \\sim N (\\mu_{n,t}, \\Sigma_{n,t})$\nwhere $\\mu_{n,t} \\in R^{d_m}$ and $\\sigma_{n,t} \\in R^{d_m}$ are the outputs of the VE. The driving feature representation distribution $P_{W_{FUL}}$ for vehicle n at time t is defined as an independent multivariate Gaussian distribution with mean $\\mu_{n,t}$ and variance $\\sigma_{n,t}$. $W_{FUL}$ represents all the parameters required for variational inference. $\\Sigma_{n,t}$ denotes a diagonal matrix with $\\sigma_{n,t}$ as its diagonal elements. $h_{1:N,t}^{FUL} \\in R^{d_m}$ denotes a sample drawn from distribution $P_{W_{FUL}}$.\nThe VFL module is scalable to platoons of any length. Its output includes the historical trajectory features $H_{1:N}^{P:t} \\in R^{N \\times P \\times d_m}$ and sample $H_{1:N,t}^{FUL} \\in R^{N \\times d_m}$ of the driving features for each vehicle in the platoon.\n2) Platoon-level Feature Learning Module: Although HDVs cannot observe the states of multiple preceding vehicles, small changes of state of the leading vehicle can be progressively amplified in closely driving platoons, significantly impacting the following vehicles in the platoon. This often compels drivers to alter their driving decisions. As illustrated in Fig. 3, the PFL module leverages causality-based self-attention [33] grounded in platoon topology to learn platoon-level interaction features. The attention mechanism's robust feature representation and selection capabilities enable the model to effectively capture relevant features spanning the physical space of the vehicles. The introduction of a unidirectional topology-based causal mask is based on a reasonable assumption: during platoon movement, the vast majority of drivers base their decisions on the traffic state ahead. This assumption further strengthens the applicability of model to platoons of varying lengths. The formal computation process of the PFL module is as follows:\n$H_{1:N,t}^{PFL} = I_{PFL} (H_{1:N,t}^{FUL}, W_{PFL})$\nwhere $H_{1:N,t}^{PFL} \\in R^{N \\times d_m}$, and denotes the output of the PFL module, with each $h_{1:N,t}^{PFL}, n = 1,2,\\ldots, N$, encapsulating the features of vehicle n and its interactions with other vehicles within the platoon.\n3) Non-Autoregressive Parameters Decoder: The NARP decoder is tasked with decoding parameters for prediction horizon. For any following vehicle n in the platoon, $h_n t$ is duplicated along the time dimension and augmented with temporal encoding (TE). Subsequently, these vectors, containing platoon interaction features, are used as queries. Through time-based causal cross-attention, useful information from the vehicle's historical trajectory encoding $H_{1:N}^{P:t}$ is extracted for future driving decisions and projected to the dimensions corresponding to the predicted parameters via a linear layer. A time-based causal mask is necessary to prevent the model from unrealistically utilizing distant future information for prediction. The decoder employs a non-autoregressive approach for prediction to accelerate model inference, enhancing its capability for online trajectory prediction and generation. The computation process of NARP decoder resembles that shown in Fig. 3 and can be formally expressed as follows:\n$H_{n,t:t+F-1}^{Dec} = Dec(h_n^{Dec}, H_{1:N}^{P:t}, W_{Dec}) n = 1,2,\\ldots, N$\nwhere $H_{n,t:t+F-1}^{Dec} \\in R^{F \\times 3}$ denotes the output of the decoder.\nRemark 2: In practice, it is not always necessary to assign separate parameters for each time step in the prediction horizon. Doing so might lead the model to prioritize numerical features over dynamic platoon modeling and incur substantial computational overhead. A more reasonable approach is to share the same set of parameters across $m$ steps, thereby reducing the decoder's output step size to $\\frac{F}{m}$.\n4) Analyzable Parameters Encoded Computational Graph:\nThe APeCG module begins by applying physical encoding to $H_{n,t:t+F-1}^{Dec} \\in R^{N \\times \\frac{F}{m} \\times 3}$. The Softplus activation function is employed to ensure these parameters satisfy the basic physical meanings and local stability conditions outlined in Eq, (4). Following this, these parameters are assigned their physical meanings and used for predicting the future states of the platoon. The iterative computation process, as illustrated in Fig. 1(d), is applied to the entire platoon. The formalized computation process is as follows:\n$\\theta_t = [-1, 1, 1] \\cdot Softplus(H_{n,t:t+F-1}^{Dec})$\n$\\a(k|t) = \\theta_t(k) (x_{1:N}(k|t) - \\hat{x}_{1:N}(k|t))$\n$\\begin{bmatrix} v(k+1|t) \\\\ s(k + 1|t) \\\\ \\Delta v(k + 1|t) \\end{bmatrix} = \\begin{bmatrix} v(kt) \\\\ s(kt) \\\\ \\Delta v(kt) \\end{bmatrix} + \\begin{bmatrix} 1 \\\\ 1 \\\\ 1 \\end{bmatrix}a(k|t)$\n$\\Delta v(k + 1|t) = [v_0 (t + k + 1), v_{1:N-1}(k + 1|t)^T]^T-v(k + 1|t)$\nwhere $\\theta_t(k) \\in R^{N \\times 3}$ denotes the value of the k-th time step in the parameter $\\theta_t$; kt indicates the prediction for the time t + k made at time t.\n5) Loss Function: The PeDL framework undergoes end-to-end training by minimizing the difference between the predicted and actual states of the platoon over the prediction horizon:\n$L_{Pred} = \\alpha_v \\sum_{k=1}^{F} \\lVert v(t + k) - v(k |t) \\rVert_2$\n$\\+\\alpha_s \\sum_{k=1}^{F} \\lVert s(t + k) - s(k |t) \\rVert_2$\n$L = L_{Pred} + \\alpha_{KL} \\cdot L_{KL}$\nwhere $\\lVert \\cdot \\rVert_2$ represents the $l_2$-norm of a vector, while $\\alpha_v$ and $\\alpha_s$ denote the weights for the prediction losses of velocity and gap, respectively. To circumvent the challenge of selecting hyperparameters, dynamic weight averaging (DWA) [34] is employed to automatically determine these values.\nThe variational encoder was trained using Monte Carlo sampling combined with reparameterization techniques, KL divergence is also incorporated into the loss function:\n$L_{KL} = \\frac{1}{2} (\\mu^2 + \\sigma^2 - log (\\sigma) - 1)$"}, {"title": "IV. EXPERIMENTS", "content": "A. Experimental design\n1) Dataset preparation: We extract the platoon trajectory data of seven vehicles (one leading vehicle and six following vehicles) from HIGH-SIM dataset [16] for PeDL. Our extraction method follows Mo et al. [24] and adds the recognition of continuous following vehicles. As a result, the car-following scenario of each platoon in processed dataset for training and testing spans 15 seconds, with a temporal interval of 0.1 seconds. The dataset consists of 739 platoons and total trajectories encompassed more than 212751 examples.\nRemark 3: To maximize the utilization of platoon trajectories, we conducted experiments using platoons with a uniform number of vehicles. However, the PeDL is flexible and scalable, which faces the greatest scalability constraints, the combination of attention mechanisms and tokenization techniques allows the model to effectively manage large-scale platoon dynamic modeling.\n2) Experimental setups: The PeDL framework is evaluated with the proposed MTFLN and two classic temporal models, i.e. LSTM and Transformer. In addition, the ablation experiment of the multi-scale trajectory feature learning network (MTFLN) module has also been carried out. Note that all of models have the same dimensionality.\nPeLSTM: A neural network comprising an LSTM encoder-decoder and a variational encoder. The model encodes the trajectory of each vehicle in the platoon using the LSTM encoder, performs uncertainty learning, and subsequently autoregressively predicts the required parameters with the LSTM decoder."}, {"title": "V. SIMULATION", "content": "A. Simulation setting\nAnother expectation for PeMTFLN is that it can generate high fidelity trajectories in simulation environments. Thus, there is a pressing need to further evaluate the capability of PeMTFLN in \"platoon trajectories generation\" [26], which has great differences with trajectory prediction (Section IV). Specifically, platoon simulation refers to providing only the initial states of the leading vehicle, while following vehicles within the platoon are simulated by their initial states (2 seconds here) and the simulated results of the vehicle ahead. Notably, the baseline selected is the online-calibrated IDM. In particular, an online genetic algorithm (GA)-based personalized calibration procedure is designed to determine the IDM parameters for each vehicle (the trajectory length used is consistent with PeMTFLN), aiming to maximize the restoration of personalized driving behavior. Without loss of generality, three platoon simulation cases are randomly selected, each involving a different lead vehicle speed evolution pattern:"}, {"title": "VI. CONCLUSION", "content": "This paper proposes a novel framework that encodes physics analyzable parameters into deep learning networks for modeling the nonlinear platoon-level dynamics. Specifically, we parameterize a physically interpretable generalized platoon dynamic model and incorporate it into the computational graph (APeCG). The MTFLN is designed to learn the parameters required for APeCG from naturalistic platoon driving trajectories, capturing dynamic features from both vehicle and platoon-level perspectives. Additionally, MTFLN uses an efficient non-autoregressive decoder for multi-step prediction. The HIGHSIM dataset is employed for the end-to-end training of PeMTFLN. Experimental results demonstrate that PeMTFLN consistently outperforms baseline models, achieving a maximum average gap error of only 1.117 m and a maximum average velocity error of 0.526 m/s over a 2s horizon. The analysis of distance-based and time-based surrogate safety measures showed that the reproduced distributions were very closely aligned, with KL divergences of only 0.013 and 0.001, respectively. Furthermore, for platoon samples with different driving modes, PeMTFLN not only accurately replicates the raw trajectories of the platoon but also provides consistent head-to-tail stability analysis results of platoon with observed results. Moreover, simulation results also demonstrate that the proposed PeMTFLN exhibits extremely small inference error in platoon trajectory generation, outperforming the capabilities of IDM.\nDespite its capabilities, the current PeMTFLN model does have some limitations. For instance, APeCG is grounded in linear vehicle dynamics and requires iterative trajectory generation. Prospectively, we plan to redefine APeCG utilizing more precise vehicle dynamics and selective scanning algorithms. Another promising idea is integrating PeMTFLN with scenario generation techniques to produce platoons characterized by specific driving styles or safety-critical scenarios. This is expected to become an effective tool for the development and testing of control algorithms for autonomous vehicle platoon."}]}