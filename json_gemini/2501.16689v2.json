{"title": "MACI: Multi-Agent Collaborative Intelligence for Adaptive Reasoning and Temporal Planning", "authors": ["Edward Y. Chang"], "abstract": "Artificial intelligence requires deliberate reasoning, temporal awareness, and effective constraint management-capabilities traditional LLMs often lack due to their reliance on pattern matching, limited self-verification, and inconsistent constraint handling. We introduce Multi-Agent Collaborative Intelligence (MACI), a framework comprising three key components: 1) a meta-planner (MP) that identifies, formulates, and refines all roles and constraints of a task (e.g., wedding planning) while generating a dependency graph, with common-sense augmentation to ensure realistic and practical constraints; 2) a collection of agents to facilitate planning and address task-specific requirements; and 3) a runtime monitor that manages plan adjustments as needed. By decoupling planning from validation, maintaining minimal agent context, and integrating common-sense reasoning, MACI overcomes the aforementioned limitations and demonstrates robust performance in two scheduling problems.", "sections": [{"title": "1. Introduction", "content": "Advancing artificial intelligence requires capabilities beyond pattern matching. To tackle complex real-world tasks, AI must exhibit deliberate reasoning, temporal awareness, and effective constraint management. While Large Language Models (LLMs) excel at pattern recognition, they face significant challenges in planning tasks that demand sustained attention, comprehensive constraint awareness, and reasoning across both past and future temporal states (Kahneman, 2011)."}, {"title": "1.1. Limitations of LLMs in Planning", "content": "LLMs reveal three limitations that fundamentally undermine their effectiveness in complex planning scenarios:\n1. Lack of Self-Verification. LLMs struggle with validating their own output, a problem that extends beyond G\u00f6del's incompleteness theorems for formal systems (G\u00f6del, 1967). Their probabilistic nature and lack of logical foundations create significant barriers to self-assessment. This intrinsic limitation means LLMs cannot reliably detect errors or inconsistencies in their generated content, necessitating external mechanisms to validate and refine their output.\n2. Attention Bias and Constraint Drift. In complex scenarios, LLMs demonstrate a critical cognitive limitation known as cognitive tunneling. This phenomenon occurs when recently provided context dominates and progressively erodes earlier-established constraints. When planning a multi-leg journey, for instance, an LLM might optimize the final travel segment while completely neglecting crucial earlier constraints such as vehicle availability or required rest periods. This bias toward local optimization fundamentally undermines the global feasibility of generated plans.\n3. Lack of Common Sense Integration. LLMs often overlook practical constraints that humans intuitively consider. This deficiency becomes particularly evident in domains that require real-world experience and understanding. In travel planning, an LLM might generate a route without accounting for airport security processing times. In logistics, it may create schedules that ignore resource availability and preparation windows. Without explicit, granular specifications, these models produce plans that appear superficially coherent but remain impractical."}, {"title": "1.2. The MACI Framework", "content": "To address these limitations, we propose Multi-Agent Collaborative Intelligence (MACI), a framework designed to enhance reasoning and planning through a multi-component architecture. MACI introduces three core components:\n1. Meta-Planner (MP). The meta-planner serves as the central orchestration mechanism in MACI. It analyzes task requirements, identifies roles and constraints, and dynamically generates a dependency graph (or workflow template) tailored to the task. This template includes actionable workflows with nodes representing roles (e.g., cook, driver, supervisor) and edges representing dependencies (e.g., temporal, spatial, or resource constraints). The incorporation of common sense augmentation into the metaplanner en-"}, {"title": "1.3. Summary: How MACI Addresses LLM Limitations", "content": "With its multi-component architecture, MACI directly addresses the three critical limitations of LLMs in planning:\n1. Lack of Self-Verification. MACI separates planning from validation, employing independent agents for validation. These agents operate without shared memory or interference, ensuring external verification of outputs and mitigating the risks of self-referential errors.\n2. Attention Bias and Constraint Drift. MACI avoids relying on a single LLM to execute complex, multi-step reasoning sequentially. Instead, it utilizes small collaborative agents that enjoy two key benefits: independence and well-defined input/output protocols (ensuring specificity and quality) for specific tasks. These agents operate within restricted context windows of e.g., 1k tokens, which physically limits attention bias and ensures that earlier constraints are not overridden by recent context. By logically scoping problems and physically constraining context, MACI preserves global feasibility and mitigates cognitive tunneling."}, {"title": "3 Lack of Common Sense Integration.", "content": "MACI incorporates a Common Sense Integration Agent and other specialized agents to identify implicit constraints and augment plans with practical, domain-specific knowledge. This ensures that generated plans are realistic, comprehensive, and aligned with real-world conditions."}, {"title": "2. Related Work", "content": "The development of MACI builds on theoretical insights from formal systems and addresses limitations of current multi-agent architectures. G\u00f6del's second incompleteness theorem (Kennedy, 2008; G\u00f6del, 1967) established that no consistent formal system can prove its own consistency. This principle extends to LLMs, which rely on probabilistic rather than axiomatic foundations, making them inherently incapable of reliable self-validation. To address this, MACI employs a distributed validation architecture, where independent agents validate externally the output, bypassing the self-referential loops that may lead to inconsistencies.\nIn formal systems, consistency proofs require a \"higher-order\" system. Analogously, MACI provides a validation framework that operates as a higher-order metasystem for LLM output. By decoupling planning from validation, MACI mirrors the separation needed in formal systems, where validation is performed independently to avoid conflicts and errors.\nMoreover, MACI advances the state of the art in multi-agent systems by addressing challenges that existing frameworks have not fully resolved.\nCurrent multi-agent systems (MAS) primarily function as integration platforms for coordinating multiple LLMs. Notable frameworks include Microsoft's AutoGen (Wu et al., 2024), the Multi-LLM Agent Debate Framework (Du et al., 2023; Chang, 2023; 2024a;b), LangGraph and CrewAI (LangChain AI, 2024; Moura, 2024), XAgent (Xia et al., 2023), and CAMEL (Li et al., 2023). While these frameworks excel in agent coordination, they prioritize task distribution over the comprehensive constraint management necessary for complex planning.\nMACI bridges this gap by integrating a meta-planning module with independent agents that validate constraints, enabling robust and adaptable solutions in dynamic real-world scenarios. The meta-planner constructs task-specific"}, {"title": "3. Case Study: Illuminating LLM Limitations", "content": "Planning methodologies can be broadly categorized into sequential and reactive approaches. Sequential planning involves creating time-ordered schedules (Allen & Hayes, 1989), anticipating future scenarios (Cox & Veloso, 1998), and leveraging past experiences for improvement (Kolodner, 1993). Reactive planning, on the other hand, focuses on adapting to changing conditions (Hammond, 1990), prioritizing immediate actions in dynamic environments (Georgeff & Lansky, 1987), and using data-driven models to forecast scenarios (Kushmerick et al., 1995).\nThis section highlights the limitations of current LLMs in planning tasks through experiments in two contexts: a scheduling problem illustrating shortcomings in sequential planning, and a dynamic resource allocation problem revealing challenges in reactive planning. Based on these observations, we propose remedies in Section 4."}, {"title": "Problem Statement", "content": "We conduct experiments using a Thanksgiving dinner planning problem designed as follows:\nInitial Setup:\n\u2022 Mom (Sarah) is hosting Thanksgiving dinner at 6:00 PM in Boston. The following family members are traveling:\n\u2022 Dad (James) flying from San Francisco, landing at 1:00 PM Eastern time.\n\u2022 Sister (Emily) flying from Chicago, landing at 2:30 PM\n\u2022 Brother (Michael) driving from New York, estimated arrival 3:00 PM at home\n\u2022 Grandma is healthy and needs to be picked up from her home in suburban Boston\nCritical Dependencies:\n\u2022 James needs to rent a car after landing\n\u2022 Emily doesn't drive, needs pickup from airport, no other transportation options are allowed\n\u2022 Turkey needs 4 hours to cook, someone must be in the house once turkey is in oven\n\u2022 Side dishes require 2 hours of preparation\n\u2022 Travel time between home and BOS airport is one hour\n\u2022 Travel between BOS and grandma home is one hour\n\u2022 Travel between home and grandma home 30 minutes\nPlanning Question Set:\n1. At what time should cooking start?\n2. Who should pick up Emily and when?\n3. When should Grandma be picked up by who?\nUsing this problem, we examine sequential and reactive planning performed by GPT-40 and DeepSeek."}, {"title": "3.1. Study #1 Sequential Planning", "content": "GPT-40 and DeepSeek struggled with real-world travel logistics, omitting key human considerations such as luggage claim time, rental car processes, and spatial relationships between airport terminals and the rental center (Table 1). These gaps forced manual constraint additions, highlighting LLM's inability to integrate experiential knowledge, a gap addressed by the MACI common sense agent.\nDeepSeek's schedule further revealed spatial-temporal errors: 1) Spatial: Assumed James drove home immediately after renting a car at Boston Logan, ignoring his airport location while awaiting Emily; and 2) Temporal: Directed Michael to return home before heading to Grandma's, missing the optimal direct route from NYC."}, {"title": "3.2. Study #2 Reactive Planning", "content": "Real-world scenarios do not always follow plans precisely. Robust systems require contingency planning for factors such as weather, traffic, or airline changes. These cascade through schedules, demanding adaptive replanning."}, {"title": "Diagnosis: Attention Narrowing", "content": "Claude detects constraint violations in other LLMs' plans but both GPTo4 and DeepSeek struggle with self-validation, revealing an asymmetry in error detection. LLMs often embed flawed interpretations of constraints during planning (e.g., rigidly interpreting \u201csomeone must be in the house\" when the turkey is in the oven), propagating errors through their frameworks.\nTwo key limitations emerge: 1) Attention narrowing: Over-focus on objectives (e.g., arrival times) causes neglect of critical constraints (e.g., fire safety); and 2) Solution rigidity: Once a constraint is satisfied (e.g., assigning Sarah to oven duty), LLMs treat it as a fixed context, failing to explore alternatives.\nMore specifically, GPT-40 assigned Sarah to monitor the oven, but missed reallocating this task to Grandma earlier, preventing Sarah from serving as an additional driver, a missed efficiency gain."}, {"title": "3.3. Summary of LLM Limitations in Planning", "content": "Our analysis reveals three core limitations in current LLMs and reasoning methods (CoT (Wei et al., 2022), ToT (Yao et al., 2023)):\nMetacognitive Limitations LLMs struggle with self-validation and constraint awareness. While external LLMS detect errors in others' plans, planners consistently miss their own violations (e.g., GPT-40 rigidly assigned Sarah to oven duty without considering Grandma's availability). Key causes are:\n1. Pattern-matching optimization vs analytical validation\n2. No belief-state tracking during reasoning\n3. Single-solution focus vs comparative analysis\nCurrent reasoning methods exacerbate these issues by operating within the same flawed cognitive framework.\nAttention Bias Transformer architectures prioritize recent context, creating: 1) Narrowing: Recent constraints (arrival times) overshadow earlier ones (oven safety); and 2) Isolated Processing: Sub-tasks addressed without holistic awareness\nCommon Sense Gaps LLMs miss implicit real-world knowledge (luggage claim times, rental car logistics) requiring explicit specification of human-obvious constraints (airport-terminal proximity)."}, {"title": "4. MACI Framework Specification", "content": "MACI implements a three-component architecture to address current LLM limitations: metacognitive constraints, attention bias, and gaps in common-sense reasoning. Each component plays a distinct role in enabling robust and adaptable planning capabilities."}, {"title": "4.1. Three-Component Architecture", "content": "Meta-Planner Component The meta-planner MP functions as a higher-order planner that generates task-specific planning systems:\n$MP: (O,C\u025b) \u2192 W$,\nwhere W represents a planning system composed of specialized, coordinated agents. Similar to a compiler generator producing compilers from specifications, MP constructs agent networks from task requirements. It analyzes objectives, identifies required roles and dependencies, selects appropriate agents, and establishes interaction protocols. This produces a workflow template that defines the planning state space and the coordination mechanisms needed to solve the task.\nAgent Repository Component This component maintains a distributed collection of planning agents, each designed with a restricted context window and specialized interface. By dividing cognitive tasks among agents, the repository ensures a complete representation of constraints without overwhelming individual components. The meta-planner queries this repository to select agents for specific roles and dependencies based on task requirements.\nSystem Infrastructure Component Built on open-source multi-agent system (MAS) frameworks, the infrastructure component supports essential operations such as agent registration, message routing, resource allocation, and deployment scaling. This foundation provides the necessary runtime environment for executing and monitoring the generated workflows."}, {"title": "4.2. Agent Repository Design", "content": "The agent repository in MACI serves as a structured database, enabling efficient registration, retrieval, and matching of agents to task requirements. By categorizing agents into common agents and specialized agents, the repository supports both generalized functionality and domain-specific expertise, as outlined in Section 4.1."}, {"title": "4.2.1. LIGHTWEIGHT, INDEPENDENT AGENT DESIGN", "content": "MACI avoids relying on a single LLM to execute complex, multi-step reasoning sequentially. Instead, it utilizes small, independent agents that adhere to strict efficiency and modularity principles. These agents operate with well-defined input/output protocols and are constrained to restricted context windows to mitigate attention bias and prevent earlier constraints from being overridden by recent context.\nBy scoping problems logically and constraining context physically, MACI ensures that each agent processes only the task-relevant information needed for its specific role. This design prevents cognitive tunneling, maintains global feasibility, and enhances robustness in dynamic environments."}, {"title": "4.2.2. AGENT REGISTRATION AND SPECIFICATIONS", "content": "Each agent is registered in the repository using a standardized protocol buffer that encodes the following attributes:\n\u2022 Input/output protocol ($P$): Defines the data format and expected interactions for seamless communication.\n\u2022 Agent type ($t$): Specifies whether the agent is common or specialized.\n\u2022 Capability vector ($c$): Encodes the agent's functional capabilities, constraints, and operating conditions.\n\u2022 Context window size ($w$): Ensures that each agent operates within a restricted buffer ($w < 1k$ tokens) to prevent attention bias and excessive information retention.\n\u2022 Computational efficiency constraint ($e$): Agents are lightweight, avoiding unnecessary memory usage or processing delays.\n\u2022 User rating ($r$): Tracks historical performance evaluations to prioritize reliable agents during selection.\nThe meta-planner retrieves agents from the repository using a three-step matching process:\n1. Task-to-capability matching: Filters agents based on their capability vector ($c$) and task-specific requirements.\n2. Protocol verification: Ensures compatibility of input/output protocols ($P$) between selected agents to prevent communication errors.\n3. Agent ranking: Ranks agents by their relevance, efficiency, and historical user rating ($r$) to select the optimal candidates.\nThis structured retrieval mechanism ensures that MACI efficiently scales to complex planning problems without requiring predefined agent hierarchies. By leveraging protocol buffers and a structured repository, MACI achieves both modularity and adaptability, allowing new agents to be introduced seamlessly while maintaining coherence across multi-agent interactions."}, {"title": "4.2.3. STATE SPACE AND AGENT DESIGN", "content": "Tasks in MACI are modeled in a general five-dimensional state space to ensure comprehensive representation of constraints and dependencies. These dimensions include:\n1. Who (Actors): Identifies roles, constraints, and transitions between agents or individuals.\n2. Where (Location): Tracks physical or logical positions, transitions, and access rules.\n3. When (Time): Captures temporal constraints such as deadlines, durations, and time points.\n4. What (Resources): Manages resource availability, constraints, and associated costs.\n5. Why (Logic): Encodes rationale, dependencies, and risk assessments for decision-making.\nThis structured state space allows the meta-planner to generate workflows that account for all relevant constraints and dependencies across diverse domains."}, {"title": "4.2.4. AGENT ROLES IN STATE SPACE MANAGEMENT", "content": "Common Agents Common agents are designed to handle foundational planning tasks that align with MACI's state space dimensions (Who, Where, When, What, Why). These agents provide general-purpose functionality that ensures consistency, feasibility, and robustness across planning tasks. Their primary responsibilities include:\n\u2022 Constraint Validation Agents: Ensure adherence to temporal, spatial, and resource constraints by verifying the feasibility of generated plans.\n\u2022 Common Sense Integration Agents: Identify implicit constraints that may be overlooked, such as transition times, dependencies, or practical limitations.\n\u2022 Adaptation Agents: Dynamically adjust plans in response to changes in task environments, such as resource delays or evolving requirements.\n\u2022 Performance Evaluation Agents: Assess the quality and efficiency of proposed plans relative to predefined metrics, ensuring continuous improvement.\nBy addressing these tasks, common agents form the backbone of MACI's planning architecture. Their modular design enables reuse across multiple domains, and their collaborative functionality ensures they work seamlessly with specialized agents to maintain global consistency and coherence within the planning workflow.\nTask-Specific Agents These agents cater to domain-specific requirements, including task-dependent data and knowledge augmentation, selecting and optimizing planning algorithms, safety and ethics assessment, and emergency response optimization. By leveraging domain expertise, specialized agents extend the capabilities of com-"}, {"title": "4.2.5. SEAMLESS INTEGRATION AND SCALABILITY", "content": "The repository's standardized agent specifications and matching mechanism enable MACI to scale efficiently across domains. By leveraging modular designs and protocol buffers, new agents can be integrated seamlessly into existing workflows, ensuring adaptability and extensibility without compromising performance or consistency."}, {"title": "4.3. Meta-Planner: Planning a Planner to Plan", "content": "The mission of the meta-planner MP is to construct a planner that generates an actionable workflow for a given task. It does so by analyzing task objectives, identifying roles and constraints, and organizing agents into a structured execution plan. This three-phase approach ensures that every agent and dependency is optimally placed, refined, and validated, leading to robust, task-specific workflows."}, {"title": "4.3.1. THE META-PLANNER ALGORITHM", "content": "The meta-planner operates as a higher-order planning system that formulates workflows as directed graphs:\n$W = (N,E), where N = A, E = A^*$. (1)\nHere, $N$ denotes roles assigned to agents, and $E$ represents dependencies between roles, including constraints such as timing, data flow, and supervision requirements."}, {"title": "4.3.2. \u039c\u0395\u03a4A-PLANNING DESIGN ELEMENTS", "content": "Role and Qualification Analysis The meta-planner extracts roles from task objectives and maps them to required qualifications:\n$map_{role}: O \u2192 {(n_i, q_i)}$ (2)\nwhere $n_i$ represents a role and $q_i$ its required qualifications (e.g., a driver requires a license, a cook requires experience).\nConstraint Management Constraints govern role interactions and dependencies. The framework maintains a global constraint set:\n$C = C_EU C_IU C_D$ (3)\nwhere $C_E$ represents explicit constraints from task specifications, $C_I$ denotes implicit constraints identified by common sense agents, and $C_D$ represents derived constraints from agent interactions.\nAgent Assignment Two categories of agents are assigned based on task requirements:"}, {"title": "4.4. Workflow Execution Framework", "content": "The final workflow W* must be executed in a runtime environment. In this work, we evaluate W* by entering it into an LLM (e.g., GPT40) alongside the problem statement. A key limitation is that the feedback loop for refining W* is currently manual, requiring iterative adjustments to optimize execution. Future research will focus on automating this process to enhance adaptability and efficiency."}, {"title": "5. Evaluating MP vs. Independent LLMs", "content": "To assess MP's performance and adaptability, we adopted a dual-approach experimental structure. The first exper-iment uses the Traveling Salesperson Problem (TSP) to validate MP's optimization capabilities. The second involves the Thanksgiving Dinner Planning problem, showcasing MP's ability to handle complex, real-world challenges with cross-thread dependencies and dynamic adaptability. Due to space constraints, detailed results for these experiments are provided in Appendices D and E, respectively."}, {"title": "5.1. Traveling Salesperson Problem (TSP)", "content": "The TSP experiment benchmarks MP against standalone planners (Claude, DeepSeek, GPT-40) and their MP-integrated counterparts. The metrics include solution quality and optimality.\nResult Summary Without MP, DeepSeek performs best, while Claude and GPT-40 struggle, each exceeding the optimal travel time by more than 10%. With MP, Claude requires two iterations to reach the optimal distance, while both GPT-40 and DeepSeek solve the problem in a single attempt.\nAlthough TSP involves a straightforward, single-thread planning process, MP still provides notable enhancements. Again, see Appendix D for details."}, {"title": "5.2. Thanksgiving Dinner Planning", "content": "This task, detailed in Section 3, evaluates MP's ability to generate workflows W* with enhanced constraint and dependency management in the MACI setting. Unlike TSP, this problem involves multiple interdependent agents, introducing complex coordination challenges.\nPlanning performance is assessed across three configurations: DeepSeek + MP, GPT-40 + MP, and Claude + MP. The prior results in Section 3 show that all LLMs fail the task when executed independently.\nEvaluation metrics include:\nPerformance = {%Constraint satisfaction, Flexibility},\nwhere flexibility measures slack time incorporated to handle unexpected events."}, {"title": "5.2.1. \u039c\u0395\u03a4A-PLANNING FOR THANKSGIVING EVENT", "content": "Following Algorithm 1, MP generates workflows with:\n\u2022 Role nodes (e.g., cook, drivers, supervisor),\n\u2022 Explicit constraint edges (e.g., temporal, spatial, etc.),\n\u2022 Implicit constraint edges from common-sense analysis.\nThe planner monitors nodes and edges, enabling dynamic adjustments. The full specifications are in Appendix E."}, {"title": "Sequential Planning:", "content": "Task executed as planned."}, {"title": "Reactive Planning:", "content": "A 3-hour flight delay requiring task reallocations."}, {"title": "Meta-Planner Output", "content": "MP enhances planning by:\n\u2022 Identifying implicit constraints (e.g., luggage claim time, car rental delays),\n\u2022 Clarifying role dependencies,\n\u2022 Incorporating common-sense constraints (e.g., fatigue, social preferences),\nIn reactive planning, MP integrates an alert agent to detect flight delays at departure, enabling timely workflow updates and demonstrating adaptability."}, {"title": "5.2.2. EXPERIMENTAL RESULTS", "content": "Sequential Planning Performance With MP's enhanced workflow W*, all three LLMs successfully generated feasible solutions, a significant improvement over their previous failures with the original problem specification."}, {"title": "Reactive Planning Performance", "content": "The flight delay scenario revealed significant differences between LLMs' capabilities. DeepSeek demonstrated superior spatial reasoning by routing Michael directly to the airport, an insight that should have come from MP's common-sense spatial reasoning. This unexpected ability to improve workflow highlights the synergy between MP and LLM - MP provided early alert through its information agent (Table 15 in Appendix E.9)."}, {"title": "6. Conclusion with Impact Statements", "content": "This research introduces Multi-Agent Collaborative Intelligence (MACI), a framework designed to overcome fundamental limitations in current LLMs for reasoning and planning. By reimagining computational intelligence through a hierarchical, distributed architecture, MACI represents a structured approach to complex problem-solving.\nTo validate MACI's capabilities, two experiments tested its effectiveness in adaptive planning and constraint management. The first experiment, based on the Traveling Salesperson Problem (TSP), demonstrated MACI's ability to generate globally optimized workflows that guide LLMs in solving this classical problem. The second, a Thanksgiving Dinner Planning task, highlighted MACI's ability to resolve intricate cross-thread dependencies and dynamically adjust to evolving constraints.\nMACI introduces three fundamental innovations that redefine computational reasoning:\nStructured Meta-Planning for Constraint-Aware Execution: The framework implements a structured meta-planner that explicitly separates planning from execution. This architectural approach dismantles the attention-driven limitations that have historically constrained LLM performance, enabling a more deliberate and controlled planning mechanism.\nDistributed Validation for Reliable Decision-Making: MACI establishes a distributed validation mechanism that enhances system reliability. By incorporating independent verification agents, the framework transcends the probabilistic limitations of traditional language models, introducing a new paradigm of self-checking computational intelligence.\nProactive Multi-Agent Coordination for Adaptive Planning: The system enables a proactive approach to multi-"}, {"title": "4.2.4. AGENT ROLES IN STATE SPACE MANAGEMENT", "content": "mon agents, enabling MACI to address specialized planning challenges with precision and adaptability."}, {"title": "4.2.5. SEAMLESS INTEGRATION AND SCALABILITY", "content": "The repository's standardized agent specifications and matching mechanism enable MACI to scale efficiently across domains. By leveraging modular designs and protocol buffers, new agents can be integrated seamlessly into existing workflows, ensuring adaptability and extensibility without compromising performance or consistency."}, {"title": "4.3. Meta-Planner: Planning a Planner to Plan", "content": "The mission of the meta-planner MP is to construct a planner that generates an actionable workflow for a given task. It does so by analyzing task objectives, identifying roles and constraints, and organizing agents into a structured execution plan. This three-phase approach ensures that every agent and dependency is optimally placed, refined, and validated, leading to robust, task-specific workflows."}, {"title": "4.3.1. THE META-PLANNER ALGORITHM", "content": "The meta-planner operates as a higher-order planning system that formulates workflows as directed graphs:\n$W = (N,E), where N = A, E = A^*$. (1)\nHere, $N$ denotes roles assigned to agents, and $E$ represents dependencies between roles, including constraints such as timing, data flow, and supervision requirements."}, {"title": "4.3.2. \u039c\u0395\u03a4A-PLANNING DESIGN ELEMENTS", "content": "Role and Qualification Analysis The meta-planner extracts roles from task objectives and maps them to required qualifications:\n$map_{role}: O \u2192 {(n_i, q_i)}$ (2)\nwhere $n_i$ represents a role and $q_i$ its required qualifications (e.g., a driver requires a license, a cook requires experience).\nConstraint Management Constraints govern role interactions and dependencies. The framework maintains a global constraint set:\n$C = C_EU C_IU C_D$ (3)\nwhere $C_E$ represents explicit constraints from task specifications, $C_I$ denotes implicit constraints identified by common sense agents, and $C_D$ represents derived constraints from agent interactions.\nAgent Assignment Two categories of agents are assigned based on task requirements:"}, {"title": "4.4. Workflow Execution Framework", "content": "The final workflow $W^*$ must be executed in a runtime environment. In this work, we evaluate $W^*$ by entering it into an LLM (e.g., GPT40) alongside the problem statement. A key limitation is that the feedback loop for refining $W^*$ is currently manual, requiring iterative adjustments to optimize execution. Future research will focus on automating this process to enhance adaptability and efficiency."}, {"title": "5. Evaluating MP vs. Independent LLMs", "content": "To assess MP's performance and adaptability, we adopted a dual-approach experimental structure. The first experiment uses the Traveling Salesperson Problem (TSP) to validate MP's optimization capabilities. The second involves the Thanksgiving Dinner Planning problem, showcasing MP's ability to handle complex, real-world challenges with cross-thread dependencies and dynamic adaptability. Due to space constraints, detailed results for these experiments are provided in Appendices D and E, respectively."}, {"title": "5.1. Traveling Salesperson Problem (TSP)", "content": "The TSP experiment benchmarks MP against standalone planners (Claude, DeepSeek, GPT-40) and their MP-integrated counterparts. The metrics include solution quality and optimality.\nResult Summary Without MP, DeepSeek performs best, while Claude and GPT-40 struggle, each exceeding the optimal travel time by more than 10%. With MP, Claude requires two iterations to reach the optimal distance, while both GPT-40 and DeepSeek solve the problem in a single attempt.\nAlthough TSP involves a straightforward, single-thread planning process, MP still provides notable enhancements. Again, see Appendix D for details."}, {"title": "5.2. Thanksgiving Dinner Planning", "content": "This task, detailed in Section 3, evaluates MP's ability to generate workflows $W^*$ with enhanced constraint and dependency management in the MACI setting. Unlike TSP, this problem involves multiple interdependent agents, introducing complex coordination challenges.\nPlanning performance is assessed across three configurations: DeepSeek + MP, GPT-40 + MP, and Claude + MP. The prior results in Section 3 show that all LLMs fail the task when executed independently.\nEvaluation metrics include:\nPerformance = {%Constraint satisfaction, Flexibility},\nwhere flexibility measures slack time incorporated to handle unexpected events."}, {"title": "5.2.1. \u039c\u0395\u03a4A-PLANNING FOR THANKSGIVING EVENT", "content": "Following Algorithm 1, MP generates workflows with:\n\u2022 Role nodes (e.g., cook, drivers, supervisor),\n\u2022 Explicit constraint edges (e.g., temporal, spatial, etc.),\n\u2022 Implicit constraint edges from common-sense analysis.\nThe planner monitors nodes and edges, enabling dynamic adjustments. The full specifications are in Appendix E."}, {"title": "4.2.1. LIGHTWEIGHT, INDEPENDENT AGENT DESIGN", "content": "MACI avoids relying on a single LLM to execute complex, multi-step reasoning sequentially. Instead, it utilizes small, independent agents that adhere to strict efficiency and modularity principles. These agents operate with well-defined input/output protocols and are constrained to restricted context windows to mitigate attention bias and prevent earlier constraints from being overridden by recent context.\nBy scoping problems logically and constraining context physically, MACI ensures that each agent processes only the task-relevant information needed for its specific role. This design prevents cognitive tunneling, maintains global feasibility, and enhances robustness in dynamic environments."}, {"title": "Sequential Planning", "content": "Task executed as planned."}, {"title": "Reactive Planning", "content": "A 3-hour flight delay requiring task reallocations."}, {"title": "Meta-Planner Output", "content": "MP enhances planning by:\n\u2022 Identifying implicit constraints (e.g., luggage claim time, car rental delays),\n\u2022 Clarifying role dependencies,\n\u2022 Incorporating common-sense constraints (e.g., fatigue, social preferences),\nIn reactive planning, MP integrates an alert agent to detect flight delays at departure, enabling timely workflow updates and demonstrating adaptability."}, {"title": "5.2.2. EXPERIMENTAL RESULTS", "content": "Sequential Planning Performance With MP's enhanced workflow $W^*$, all three LLMs successfully generated feasible solutions, a significant improvement over their previous failures with the original problem specification."}, {"title": "Reactive Planning Performance", "content": "The flight delay scenario revealed significant differences between LLMs' capabilities. DeepSeek demonstrated superior spatial reasoning by routing Michael directly to the airport, an insight that should have come from MP's common-sense spatial reasoning. This unexpected ability to improve workflow highlights the synergy between MP and LLM - MP provided early alert through its information agent (Table 15 in Appendix E.9)."}, {"title": "6. Conclusion with Impact Statements", "content": "This research introduces Multi-Agent Collaborative Intelligence (MACI), a framework designed to overcome fundamental limitations in current LLMs for reasoning and planning. By reimagining computational intelligence through a hierarchical, distributed architecture, MACI represents a structured approach to complex problem-solving.\nTo validate MACI's capabilities, two experiments tested its effectiveness in adaptive planning and constraint management. The first experiment, based on the Traveling Salesperson Problem (TSP), demonstrated MACI's ability to generate globally optimized workflows that guide LLMs in solving this classical problem. The second, a Thanksgiving Dinner Planning task, highlighted MACI's ability to resolve intricate cross-thread dependencies and dynamically adjust to evolving constraints.\nMACI introduces three fundamental innovations that redefine computational reasoning:\nStructured Meta-Planning for Constraint-Aware Execution: The framework implements a structured meta-planner that explicitly separates planning from execution. This architectural approach dismantles the attention-driven limitations that have historically constrained LLM performance, enabling a more deliberate and controlled planning mechanism.\nDistributed Validation for Reliable Decision-Making: MACI establishes a distributed validation mechanism that enhances system reliability. By incorporating independent verification agents, the framework transcends the probabilistic limitations of traditional language models, introducing a new paradigm of self-checking computational intelligence.\nProactive Multi-Agent Coordination for Adaptive Planning: The system enables a proactive approach to multi-"}, {"title": "4.2.4. AGENT ROLES IN STATE SPACE MANAGEMENT", "content": "mon agents, enabling MACI to address specialized planning challenges with precision and adaptability."}, {"title": "4.2.5. SEAMLESS INTEGRATION AND SCALABILITY", "content": "The repository's standardized agent specifications and matching mechanism enable MACI to scale efficiently across domains. By leveraging modular designs and protocol buffers, new agents can be integrated seamlessly into existing workflows, ensuring adaptability and extensibility without compromising performance or consistency."}, {"title": "4.3. Meta-Planner: Planning a Planner to Plan", "content": "The mission of the meta-planner MP is to construct a planner that generates an actionable workflow for a given task. It does so by analyzing task objectives, identifying roles and constraints, and organizing agents into a structured execution plan. This three-phase approach ensures that every agent and dependency is optimally placed, refined, and validated, leading to robust, task-specific workflows."}, {"title": "4.3.1. THE META-PLANNER ALGORITHM", "content": "The meta-planner operates as a higher-order planning system that formulates workflows as directed graphs:\n$W = (N,E), where N = A, E = A^*$. (1)\nHere, $N$ denotes roles assigned to agents, and $E$ represents dependencies between roles, including constraints such as timing, data flow, and supervision requirements."}, {"title": "4.3.2. \u039c\u0395\u03a4A-PLANNING DESIGN ELEMENTS", "content": "Role and Qualification Analysis The meta-planner extracts roles from task objectives and maps them to required qualifications:\n$map_{role"}, "O \u2192 {(n_i,"]}