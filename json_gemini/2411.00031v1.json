{"title": "A Theoretical Review on Solving Algebra Problems", "authors": ["Xinguo Yu", "Weina Cheng", "Chuanzhi Yang", "Ting Zhang"], "abstract": "Solving algebra problems (APs) continues to attract significant research interest as evidenced by the large number of algorithms and theories proposed over the past decade. Despite these important research contributions, however, the body of work remains incomplete in terms of theoretical justification and scope. The current contribution intends to fill the gap by developing a review framework that aims to lay a theoretical base, create an evaluation scheme, and extend the scope of the investigation. This paper first develops the State Transform Theory (STT), which emphasizes that the problem-solving algorithms are structured according to states and transforms unlike the understanding that underlies traditional surveys which merely emphasize the progress of transforms. The STT, thus, lays the theoretical basis for a new framework for reviewing algorithms. This new construct accommodates the relation-centric algorithms for solving both word and diagrammatic algebra problems. The latter not only highlights the necessity of introducing new states but also allows revelation of contributions of individual algorithms \u2013 obscured in prior reviews without this approach.\nA review of AP solving algorithms (2014 to date) is subsequently enhanced by applying the STT specifically designed to an- alyze individual and collective algorithms for states and transforms. Furthermore, the State Transform Analysis (STA) is a core function in the identification of progress in terms of states and transforms. Thirdly, the Perspective Confusion Comparison (PCC) is developed to extend the application of STA to add capabilities for systematic and individual evaluation of transforms, algorithms, and approaches. This is a new evaluation method of being different from other methods that can do more in-depth evaluation for decomposed algorithms for solving problems with multiple types of inputs. Finally, this work identifies several research directions by extracting benefit from theoretical reviews. This work significantly contributes to the advancement of AP-solving by providing the mechanism for identifying and understanding the key contributors to building high-performance problem-solving algorithms at the three levels of transform, algorithm, and approach.", "sections": [{"title": "1. Introduction", "content": "As interest in solving algebra problems (APs) is continuing to gain momentum, the absence of theoretical justifications for new works is more keenly felt than ever. It is thus imperative and timely that a theoretical perspective is applied to the AP- solving algorithms because the relevant conditions are present. These include the fact that significant numbers of algorithms for solving APs have appeared in the literature over the past six decades as well as the existence of several important review papers that provided substantial background knowledge for this review (Carifio and Nasser, 1994; Mukherjee and Garain, 2008; Kotwal and Patnaik, 2019; Mandal, 2019; Zhang et al., 2020a; Faldu et al., 2021; Lu et al., 2023). For example, several pa- pers developed the methods and algorithms for solving text-diagram problems(Jian et al., 2019; He et al., 2020; Yu et al., 2022), which extended the scope of problems from Algebra Word Problems into Algebra Problems (mainly from mathemat- ics, physics, and chemistry in basic education).\nThe papers referred to these overviews, however, demon- strate that current research is still unsatisfactory in terms of inclusions, time span, and theoretical underpinnings despite attempts justifying AP-solving algorithms at model-level of which the state action frameworks developed by (Xia and Yu, 2021; Yu et al., 2023) are significant examples. As many others have done, the authors stress the importance of contributions made by action techniques but pay scant attention to \"states\", which, in fact, play an essential role in determining the prop- erties of solving algorithms, providing further justification for our work.\nThe development of a theory-based review of algorithms for solving APs is, thus, justified by the research communities' need, significant number of models and paradigms that have appeared, creating the relevant conditions for the development of a theory:(a) a large body of algorithms exists, (b) a range of review papers have laid the groundwork (Carifio and Nasser, 1994; Mukherjee and Garain, 2008; Kotwal and Patnaik, 2019; Mandal, 2019; Zhang et al., 2020a; Faldu et al., 2021; Lu et al.,"}, {"title": "1.1. Contributions", "content": "This paper integrates and develops several existing paradigms into a State Transform Theory by generalizing the paradigms to all representative algorithms and making statements about properties of individual algorithms and collective algorithms. Using this theory as a basis, a review of research into solving algebra problems is conducted whereby algorithms are reviewed at three level: transform, algorithm, and approach. Through conducting this novel review, this paper makes four contributions as follows:\n\u2022 It develops the State Transform Theory (STT), serving as the theoretical basis for reviewing AP-solving algorithms.\n\u2022 It proposes the State Transform Analysis method to de- pict and analyze both individual and collective algorithms based on the STT.\n\u2022 It proposes the review paradigm to define and review ap- proaches that analyze the progression of approaches by re- viewing the evolution to their states and transforms.\n\u2022 It proposes the Perspective Confusion Comparison to crit- ically compare transforms, algorithms, and approaches, a method superior to the ablation experiment."}, {"title": "1.2. Organization", "content": "The organization of the remainder of the paper is as follows. The related work is reviewed in Section 2. The STT is built in Section 3 while section 4 presents the State Transform Analy- sis method of reviewing algorithms in which State Transform Graphs are used to depict individual and collective algorithms based on the STT. Section 5 reviews the approaches of AP- solving algorithms through narrating the evolution of states and transforms. Section 6 presents the Perspective Confusion Com- parison on transforms, algorithms, and approaches. Section 7 concludes the paper and discusses future research directions."}, {"title": "2. Related Work", "content": "Solving APs is longstanding research problem which contin- ues to be a challenge. Despite dating back to the 1960s, the interest in solving APs has intensified only recently with the advance of Artificial Intelligence (AI) and the demand for more intelligent education. During this long research history, seven survey papers have reviewed problem-solving algorithms with the aim of identifying the difficulties, as well as mining and generally useful techniques to build a body of knowledge (Car- ifio and Nasser, 1994; Mukherjee and Garain, 2008; Kotwal and Patnaik, 2019; Mandal, 2019; Zhang et al., 2020a; Faldu et al.,"}, {"title": "2.1. Accumulation of Review Knowledge for AP Solving", "content": "A significant body of knowledge has been accumulated over the past six decades on AP-solving found in seven review pa- pers (Carifio and Nasser, 1994; Mukherjee and Garain, 2008; Kotwal and Patnaik, 2019; Mandal, 2019; Zhang et al., 2020a; Faldu et al., 2021; Lu et al., 2023) each of which has contributed today's understanding of these issues within the research com- munity.\nCarifio and Nasser (1994) published the first review paper on solving APs wherein they proposed a two-stage review scheme, which divides the process of solving APs into representation and solution stages. They placed emphasis on identifying direct and inferred problem representation to obtain answers at the theoretical level.\nAlmost fifteen years after Carifio and Nasser (1994), Mukherjee and Garain (2008) took the issue up again with their review. Again, the authors followed a two-stage review scheme although this time analyzing the workflow. This pa- per offered the observation that understanding natural language is the core step to solving mathematical problems (including algebra, geometry, physics, mechanics, etc.), consequently re- viewing methods employed for understanding descriptions of problems. The authors also included an interesting discussion of the progress of rule-based methods published before 2008.\nThis attempt at categorization was advanced by Mandal and Naskar (2019) who proposed two schemes for reviewing lit- erature on AP-solving of which the first one was a stage scheme that divided the history of the research on these spe- cific problem-solving algorithms into two periods: Early Stage (1964-2006) and New Era (2007-2017). They concluded that in the Early Stage, researchers viewed solving APs either from a point of cognitive science, psychology, or education. Re- searchers developed multiple systems and algorithms for solv- ing limited numbers of specific types of simple problems aimed at simulation of the processes by which the human students solve problems. In consequence, the proposed methods are mainly rule-based targeting APs with specific processes. The algorithms developed in New Era were mainly published be- tween 2007 and 2017 (Mandal and Naskar, 2019)."}, {"title": "2.2. Theory Development in AP Solving", "content": "Creating general model to analyze algorithms is a fascinat- ing research problems due to the algorithm pseudo codes and structures are not built on the sound theory or uniform terms. Based on this cognition, Luan and Li (2001) proposed a formal specification based on first-order language to describe the in- ternal state transition of algorithms. Although promising, this work remains in its early stage without further development or application. This state transition is a certain similarity with fi- nite state machine. A finite state machine is a computational model that can be implemented with hardware or software and used to simulate logic structure and certain computer programs (Gill, 1960). Finite state machines can model problems in many fields including mathematics, artificial intelligence, games, and linguistics. There is an understanding that representations and techniques appearing in algorithms have a certain similarity with states and transitions in finite state machines (Gill, 1960).\nBased on this cognition, some researchers used state transi- tion model to build some algorithms since they realized that it may be too ambitions to create a state transition model for an- alyzing general algorithms. The following is one of examples. Zhou et al. (2020) proposed a state transition algorithm, which was proposed on the concepts of state, state transition and state space representation in modern control theory. Because of its excellent global search ability and fast convergence, the state transition algorithm has since been applied in various optimiza- tion problems, which inspires us a new way to improve solving algorithms in the future.\nThe rich facts in the literature in problem solving shed the light of that there is a model that can uniformly analyze most and main solving algorithms. Especially, All seven survey papers discussed above provided the substantial facts. They all focused on techniques that transform representations, in- dicating that reviewers uniformly agreed that representations and techniques which transform representations are the main elements for constructing these algorithms, although implied rather than explicitly stated (Carifio and Nasser, 1994; Mukher- jee and Garain, 2008; Kotwal and Patnaik, 2019; Mandal, 2019; Zhang et al., 2020a; Faldu et al., 2021; Lu et al., 2023). Several primary research papers provided more facts as follows.\nYu et al. (2019) first proposed an equivalent representation theory, which pointed out that math problem solving is to trans- form states from problem input to output. During this transition process, several intermediate states will be generated. In the sense of math problem solving, these states are equivalent, that is, theoretically, the solution can be obtained from the input state through operations such as reasoning and calculation. The equivalent representation theory signifies that solving a prob- lem is to transform one representation into its next, representing the seminal idea of algorithm structure of states and transforms.\nXia and Yu (2021) developed an equivalent representation theory developed in Yu et al. (2019) into a state action frame- work to describe the process of solving APs by algorithms which was built around the development of solvers that solve APs similar to students. For a solving algorithm, its input is the problem described by text and diagram while its output ideally is the solution to the given problem. The solving process aims to change one state to its next state through actions. The frame- work reveals the highly abstract nature of the cognitive model to explain the process of solving APs represented as text and diagram offering deep insights into the level of abstraction of algorithms. This makes it clear that approaches are defined by determining instances of states, thus providing a formal way to define these.\nYu et al. (2023) further developed the state action framework into a three-phase scheme to design algorithms from abstraction to concreteness. The first phase is to design a solving paradigm that proposes a state action paradigm for solving APs as the solving paradigm. The second phase is to determine the content of each state of the state action paradigm to produce a relation-centric approach to solving AWPs. The third phase is to deter-minate the actions of the relation-centric approach to instantiate an algorithm for solving AWPs. Thus, this three-phase scheme works on the understanding that a solving algorithm can be ab-"}, {"title": "2.3. Algorithm Evaluation Paradigms", "content": "Algorithm evaluation is an important topic because it is the basis for choosing the appropriate algorithms to solve the prob- lems facing scientists; further, the algorithm is one of the key pillars in computer science. The first algorithm evaluation paradigm is to evaluate the algorithm through complexity anal- ysis, being the important content in textbooks on algorithm analysis. A look at complexity analysis reveals that it is not applicable to most of the AI algorithms because their inputs are restricted to a narrow range of sizes, whereas complexity anal- ysis requires that the input size ranges from finite to infinity. In consequence, a second algorithm evaluation paradigm was developed (Mendling et al., 2021), which evaluates algorithms by their performance on benchmark datasets. The benchmark evaluation tests against performance indexes such as accuracy, recall, and running time on benchmark datasets. Such evalua- tions are seen as competitive tests inviting significant criticism. One of these is that the overemphasis on \"state of the art\" per- formance was \"allowing researchers to publish dull papers that proposed small variations of existing algorithms and reported their small-but-significant incremental performance improve- ments in comparison studies\" (Mendling et al., 2021). The sec- ond criticism is that it provides limited understanding of the reasons for the performance of algorithms. Therefore, in re- cent years, the ablation experiment has become a requirement for benchmark evaluation paradigms. This is an advance in al- gorithm evaluation since it offers some transparency in terms of the techniques that have contributed to the algorithm's per- formance. However, it is still an \u201cafter algorithm\u201d or \u201cexternal algorithm\" comparison that does not consider the constituents (i.e., technique) of algorithms. This has prompted the develop- ment of other analysis schemes although they have not yet been fully developed. For example, a formal specification based on the first-order language was proposed to describe the internal state transition of algorithms (Luan and Li, 2001) which has so far not been adopted, to the best of our knowledge. Thus, the limitations of traditional review schemes are stimulating the search for new paradigms for reviewing algorithms. Xia and Yu (2021), for example, have developed an approach re- view scheme for algorithms that solve arithmetic word prob- lems. This development demonstrated that the instances that instantiate abstract frameworks can be used to uniformly de- fine the approaches instead of using heuristic indicators without technique scaffold. Based on the understanding gained from a thorough evaluation of existing review paradigms and the"}, {"title": "3. State Transform Theory", "content": "The review of the related work in the preceding section dis- closes that the traditional review methods lack theory founda- tion. To fill this gap, this section develops the State Transform Theory (STT) as the theory base of the review method proposed in this paper."}, {"title": "3.1. Motivation and Justification", "content": "In AP-solving, review papers concentrated on the new trans- forms (i.e., techniques), almost neglected the evaluation of state creation and evolution (Carifio and Nasser, 1994; Mukherjee and Garain, 2008; Kotwal and Patnaik, 2019; Mandal, 2019; Zhang et al., 2020a; Faldu et al., 2021; Lu et al., 2023). This motivates to do a different review with emphasis on the fact that it is capable of creation of state as well as technique.\nSome other works with theoretical notions also attracted our attention such as those that developed basic concepts, abstract frameworks, theoretical explanations, theoretical processes for different purposes (Luan and Li, 2001; Xia and Yu, 2021; Yu et al., 2023). Some researchers proposed an equivalent rep- resentation theory, which pointed out that mathematical prob- lem solving is a state transition from problem input to output through intermediate states(Yu et al., 2019). This theory shows that several equivalent intermediate states will be generated dur- ing the entire transition process of problem solving. Then, the researchers further proposed a state action framework to explain the process of solving APs (Xia and Yu, 2021). This framework consists of states and actions and it defines the approaches of solving algorithms by states. Recently Yu et al. (2023) created another usage of the state action framework. Namely, it pro- posed a three-phase scheme to develop algorithms for solving AWPss, which is a scheme to design algorithms from abstract to concreteness. In another view, this three-phase scheme reveals the relationship among framework, approach, algorithm, state, and action. These achievements motivate us to build a theory as the basis of review.\nThis section builds the State Transform Theory by further refining the theoretical concepts introduced in the previously discussed papers. The theory posits that the structural makeup of states dictates their core properties, and both these structures and the techniques applied to them influence performance. The theory will introduce several new assertions to highlight the es- sential characteristics of individual algorithms as well as groups of algorithms. First, all representative algorithms developed since 2014 can be modeled as graphs of states and transforms. Second, all such algorithms are decomposable. Third, these al- gorithms share a common set of states and transforms.\nLeveraging the above stated theory accumulation, this paper develops a theoretical framework to review all representative"}, {"title": "3.2. Constructs of State Transform Theory", "content": "The following concepts are the constructs of building state transform theory, in which state and transform are two pillar constructs.\nDefinition 1 (Corpus). A set of algebra problems (APs), pre- pared by the research community, is called as a corpus of APs, denoted as $C$.\nIn this paper, Algebra Problems are Algebra Word Problems and Algebra Text-Diagram Problems, which are mainly from mathematics, physics, and chemistry in basic education.\nDefinition 2 (Solving Algorithm). Let $C$ be a corpus of alge- bra problems. $\\\u00c6$ is said to be a solving algorithm of $C$ if $\\\u00c6$ can correctly solve a significant percent of elements in $C$.\nDefinition 3 (State). A state refers to an intermediate mile- stone representation generated by a solving algorithm while solving algebra problems, typically denoted a state as $S$ with subscription.\nDefinition 4 (Transform). Let $S_s$ and $S_e$ be two states and $t$ be a method or scheme that can be instantiated into a process of some solving algorithms that can transform instances in $S_s$ into instances in $S_e$ always for a corpus of problems.\n\"State\" and \"Transform\" are two pillar concepts of the the- ory. \"State\" is the general name of various intermediate out- comes produced by solving algorithms and \"transform\" is an umbrella term of a range of processes. The concrete states and transforms are hidden in the algorithms in the literature. To identify them and to dissemble them from algorithms are two tasks in the next section.\nStates are the representations of the results of the milestone intermediate goals. The understood form of problems is a sam- ple intermediate goal. The results of such a goal could be a math expression, a set of linear equations, or a set of relations. The vector form of problems becomes another sample intermediate goal if machine learning is used to solve algebra problems.\nHere, two example states are on the understood form. The first example is Linear Equations, initially proposed by Kush- man et al. (2014). Linear equations are widely recognized as"}, {"title": "3.3. State Transform Graphs of Algorithms", "content": "The state transform graph is defined to depict the concern algorithms.\nDefinition 5 (State Transform Graph). A directed graph, $G = (S, T, \\phi)$, is called as a state transform graph, where $S$ is a set of state nodes and $T$ is a set of transforms that directly link states, which appear in algorithms for solving algebra prob- lems, $\\phi: {T \u2192 (x, y) ||(x, y) \u2208 S X S, x \u2260 y}$ is an incidence function mapping every link to an ordered pair of nodes.\nDefinition 6 (Decomposable Algorithm). An algorithm is called as a decomposable algorithm if its state transform graph has more than two states.\nWith these concepts, we have the following three statements.\nStatement 1. All the algorithms for solving algebra problems can be depicted by state transform graphs.\nStatement 2. All the representative algorithms for solving al- gebra problems since 2014 in the literature are decomposable.\nStatement 3. All the representative algorithms for solving al- gebra problems since 2014 in the literature share a set of states and transforms.\nThe lists of algorithms, states, and transforms will be pre- sented in Section 4.2. Three statements will be verified in Sec- tion 3.3. Statement 1 and 2 are the core conclusions of the state transform theory because they show that this paper can use the state transform graph to analyze and compare the solving algo- rithms. Statement 3 further tells us that the task of developing a solving algorithm can be broken into the state design, trans- form design, and state transform graph design. Thus, we can evaluate states, transforms, algorithms, and approaches in any form of combination."}, {"title": "4. State Transform Analysis", "content": "With the built STT, this section presents a novel State Trans- form Analysis (STA) applied to algebra problem-solving. It begins with an overview of STA, followed by the real steps of the analysis."}, {"title": "4.1. Overview of STA", "content": "This section provides an explanation of State Transform Analysis (STA). To begin, the STA is defined as follows:\nDefinition 7 (State Transform Analysis (STA)). The State Transform Analysis is a method for analyzing algorithms based on State Transform Theory. It involves examining individual algorithms to generate state transform graphs that represent the transitions between different states during execution. These graphs are then aggregated to identify common properties and patterns across multiple algorithms.\nThe STA performs the following tasks: First, it identifies 47 representative solving algorithms from the literature since 2014. Next, it identifies 15 non-default states and 42 trans- forms. Following that, it constructs state transform graphs for all 47 algorithms and combines them into a single, aggregated state transform graph. Furthermore, it abstracts this aggregated graph into a state graph and defines four distinct approaches.\nThe STA and the STT are highly related. The STT tells that solving algorithms have their own state transform graphs. This allows the algorithms to be uniformly compared and ag- gregated, highlighting their aggregate properties. In turn, the results from the STA validate the findings of the STT."}, {"title": "4.2. States and Transforms", "content": "Two criteria are set for selecting the reference papers. This paper selects papers with two criteria. The first one is that they published since 2014 (or after 2013). The other one is that they developed decent algorithms for solving algebra problems nar- rated by word and diagrams. In other words, we do not select the papers that just discuss some methods without presenting the algorithm. In addition, we select the final journal paper as our representative paper if one algorithm is developed from the immature version in conference paper and the mature version in journal paper. With the above criteria, this paper gains 47 pa- pers, thus defined 47 algorithms $A = {A_{01}, A_{02},..., A_{47}}$, listed in Table 1. These 47 algorithms are divided into two categories of original and incremental. The algorithms in original are the first 30 algorithms in $A$, proposing new states and/or new trans- forms or made the significant progress, say that the developed algorithms are published in high rank journals; the algorithms in incremental are the remaining 17 algorithms.\nThe 17 states are identified from $A = {A_{01}, A_{02}, ,A_{30}}$, denoted as $A = {8_{00},8_{01},8_{02},...,8_{15}, SoS}$. In $A$, $8_{00}$ and $SoS$ are two default states because any solving algorithms must have them. Table 1 lists the 15 non-default states and their basic facts. The items of the basic facts are reference paper (Within Table 1, we indicate reference papers by their serial numbers defined in the bottom of Table 1), development year, and oc- currence number (the frequency with which the state is used in the 47 algorithms). We named each of the identified 17 states and described their original paper and features. Some further explanations are presented as follows."}, {"title": "4.3. State Transform Graphs of Individual Algorithms", "content": "With the identified 17 states and 42 transforms from the 47 algorithms in the preceding listed in Table 1, this section will show that all the 47 algorithms can be depicted by the State Transform Graphs. Figure 1 uses state transform graph to depict $A_{07}$ proposed in Wang et al. (2017), being an example to draw the state transform graph of an algorithm."}, {"title": "4.4. Aggregated State Transform Graph", "content": "Figure 1 shows that the algorithm proposed in Wang et al. (2017) is decomposable and can be abstracted into a graph with states as its nodes and transforms as its links. From the above analysis, we know that all the algorithms share the 17 states and 42 transforms. Based on these facts, the graphs of depicting a collection of algorithms can merge into an aggregated graph. Thus, we have a definition as follows.\nDefinition 8 (Aggregated Graph). Let $A$ be a collection of algorithms for solving algebra problems. A graph $H$ is called as an aggregated graph of $A$ if it is formed by integrating all the graphs of depicting all individual algorithms in $A$."}, {"title": "4.5. State Graph and Approach", "content": "Since the aggregated graph in Figure 3 is for the collection of 47 algorithms, Figure 3 can reflect the advance in develop- ing algorithms for AP-solving. Hence, the conclusions about the global progress can be made by analyzing this graph. For example, we can focus on the reachability from one state to an- other without concerning the concrete transforms to conduct. For this objective, we can have the following state graph.\nDefinition 9 (State Graph). Let $H$ be an aggregated graph. $H'$ is called as the state graph of $H$ if it is formed by con- verting the multiple links of $H$ that link the same pair of states into single link.\nFrom the above definition, state graph concerns that whether there is a link to link a pair of states. In other word, it pays attention to the reachability of states. The state graph in Figure 4 is formed from Figure 3. From Figure 4, approach can be defined as follows."}, {"title": "4.6. Taxonomy of Algorithms", "content": "Appendix B presents the state transform graphs for each of the 47 individual algorithms. In Section 4.4, these individual graphs are combined into an aggregate state transform graph, which is further abstracted into a state graph, and four distinct approaches are defined. These analyses and results offer deeper insights into the problem-solving algorithms.\nBuilding on this improved understanding, a new taxonomy for the algorithms is introduced, organized as a two-level hier- archy. At the first level, the algorithms are grouped into four overarching approaches. At the second level, they are further categorized based on the primary techniques they employ to solve problems. This taxonomy is illustrated in Figure 6."}, {"title": "5. Evolution of Four Approaches", "content": "For the four approaches defined earlier, this section will delve into the detailed establishment and progression of each approach. The focus will be on examining the development of these approaches over time, including both the evolution of their states and their transforms."}, {"title": "5.1. Math Expression Approach", "content": "The first approach denoted as $\\Omega_1$ and its characteristics is to acquire a math expression that can produce the value of the unknown of the problem by evaluating it. Hence, the algorithms belong this approach can solve only the problems with single unknown."}, {"title": "5.1.1. $\\Omega_1$ State Evolution", "content": "The essential task of $\\Omega_1$ is to accomplish the transform from Input AP ($S_{00}$) to Math Expression ($S_{01}$) for the given prob- lem. Since this task is hard to be done by a single transform, researchers proposed some bridge states.\nRoy and Roth (2015) proposed Expression Tree ($S_{03}$) as the first bridge state. Koncel-Kedziorski et al. (2015) continued the idea of using Expression Trees ($S_{04}$) to bridge Input AP ($S_{00}$) and Expression Tree ($S_{03}$). Expression Trees($S_{04}$) are the set of the possible expression trees, which is prepared to identify the wanted expression tree.\nInspired by the success of seq2seq translation, Wang et al. (2017) first brought seq2seq method into solving APs. Hence, two states, vector text ($S_{06}$) and vector single linear equation ($S_{07}$), were proposed as bridge states. Since then, various deep neural networks were proposed to translate $S_{06}$ into $S_{07}$ (Wang et al., 2019; Mandal et al., 2020). Wang et al. (2018a) used vector computing to translate from $S_{06}$ into vector expression tree $S_{08}$ instead of $S_{07}$. Since vector expression tree can keep the structure information, more transforms were developed to transform from $S_{06}$ to $S_{08}$ (Liu et al., 2019; Wang et al., 2019;"}, {"title": "5.1.2. $\\Omega_1$ Transform Evolution", "content": "In the early years, the researchers developed the multiple transforms from $S_{00}$ to $S_{01}$. With the observation that verbs may determine the operands in the expression of a given AP, Hosseini et al. (2014) developed a transform, being denoted as $t_{01}$. They presented a verb categorization based method, namely ARIS to solve simple addition and subtraction APs. ARIS first analyzes each of the sentences in the problem to identify the relevant variables and their values, and then mapped this in- formation into a predefined logic template, namely \"container\" so as to capture the relations between variables. A verb in a sentence is classified into one of seven categories to determine the operator between two quantities. Mitra and Baral (2016) adopted a similar idea, first using predefined logical templates to capture the types of relations between variables, thereby gen- erating expressions. Although these methods perform well on some datasets, they are considered unable to be popularized on large datasets due to the high cost of data annotation.\nTaking Expression Tree ($S_{03}$) as a bridge state, Roy and Roth (2015) formalized the AP-solving problem into multiple clas- sification problems, and generated the expression by judging whether the number in the expression participated in the com- position of the expression and the operator between the two candidate numbers. More specifically, they proposed $t_{05}$ to generate Expression Tree ($S_{03}$) from Input APs ($S_{00}$), and $t_{06}$ to generate Math Expression ($S_{01}$) from Expression Tree ($S_{03}$). Koncel-Kedziorski et al. (2015) took the Expression Trees ($S_{04}$) as a bridge state between $S_{01}$ and $S_{03}$ and proposed $t_{07}$, namely integer linear programming to generate candidate expression trees, and $t_{08}$ to identify a wanted expression tree by scoring the candidate expression trees through local and global discrim- inant models and selecting the one with the highest score.\nCompared with the algorithm in Hosseini et al. (2014), the ones in Roy and Roth (2015) and Koncel-Kedziorski et al. (2015) have two progresses. First, they are machine learning based so that they are compact without requiring tedious pro- cesses such as annotation, classification. Second, they have a higher accuracy. However, due to the limited expression abil- ity of the state $S_{03}$, they can solve only problems with single unknown.\nInspired by the recent advancements in NLP (Natural Lan- guage Processing), the seq2x approach is developed (seq2x is the umbrella name of seq2seq, seq2tree, seq2graph, etc). This approach targets to obtain the expression that can produce the"}, {"title": "5.2. Linear Equations Approach", "content": "This approach is denoted as $\\Omega_2$, targeting to acquire a set of linear equations to represent the given problem. Hence, this approach can solve the problems with multiple unknowns. The goal of this approach is to generate Linear Equations ($S_{02}$) from the Input APs ($S_{00}$)."}, {"title": "5.2.1. $\\Omega_2$ State Evolution", "content": "Kushman et al. (2014) first built this approach. The algorithm in Kushman et al. (2014) used a state of Linear Equations ($S_{02}$) to represent the given problem. It used a template based method to obtain the system of linear equations. The algorithm has a set of templates of abstract linear equations; it used a machine learning based procedure to select a template and to instantiate with the quantity entities from the given problem.\nShi et al. (2015) first proposed \"Formal Language\" ($S_{05}$) as the first bridge state. \u201cFormal Language\" appeared in a form of tree, whose each internal node is a function, and each leaf node can be a constant, a class, or a zero-argument function.\nThe previous seq2tree models have proved the importance of structural information. However, seq2tree cannot handle mul- tiple unknown problems. Because the equations in the equa- tion set problem are unordered, but for the seq2tree and seq2seq models, the generation of equations will involve the order prob- lems, which will add unnecessary burden to the model. To solve this problem, Cao et al. (2021) firstly proposed $S_{12}$ (DAG = Di- rect Acyclic Graph) as the new bridge state, where leaf nodes of DAG are the quantities, and other (internal and root) nodes are arithmetic or comparison operators. It integrates multiple expression trees of an equation set problem into the same solv- ing scenario, so as to obtain a DAG. In this way, it not only preserves the structural information of the expression, but also extends the scope to the equation set problems."}, {"title": "5.2.2. $\\Omega_2$ Transform Evolution", "content": "Kushman et al. (2014) proposed a template-based transform ($t_{"}]}