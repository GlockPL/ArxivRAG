{"title": "RiskSEA : A Scalable Graph Embedding for Detecting On-chain Fraudulent Activities on the Ethereum Blockchain", "authors": ["Ayush Agarwal", "Lv Lu", "Arjun Maheswaran", "Varsha Mahadevan", "Bhaskar Krishnamachari"], "abstract": "Abstract-Like any other useful technology, cryptocurren-cies are sometimes used for criminal activities. While transac-tions are recorded on the blockchain, there exists a need for a more rapid and scalable method to detect addresses associated with fraudulent activities. We present a RiskSEA a scalable risk scoring system capable of effectively handling the dynamic nature of large-scale blockchain transaction graphs. The risk scoring system, which we implement for Ethereum, consists of 1) a scalable approach to generating node2vec embedding for entire set of addresses to capture the graph topology 2) transaction-based features to capture the transactional behavioral pattern of an address 3) a classifier model to generate risk score for addresses that combines the node2vec embedding and behavioral features. Efficiently generating node2vec embedding for large scale and dynamically evolving blockchain transaction graphs is challenging \u2013 we present two novel approaches for generating node2vec embeddings and effectively scaling it to the entire set of blockchain addresses: 1) node2vec embedding propagation and 2) dynamic node2vec embedding. We present a comprehensive analysis of the proposed approaches. Our experiments show that combining both behavioral and node2vec features boosts the classification performance significantly, and that the dynamic node2vec embeddings perform better than the node2vec propagated embeddings.", "sections": [{"title": "I. INTRODUCTION", "content": "A. Background and Problem Statement\nThe increasing association of cryptocurrencies to vari-ous industries has attracted wide attention from everyone. However, because of its pseudonymous nature and lack of identity tied to blockchain addresses, some criminals have used it to commit cyber crimes [1]. In traditional banking, in which all transactions happen on privately controlled, internal ledgers, customers cannot open accounts and transact without direct approval of the financial institu-tion; however, in case of blockchain in which transactions happen on public ledgers and no financial institution is required to open an account, users can transact without the approval of regulated entities. It would be beneficial to compliance in the crypto space to improve visibility into transactions that happen peer-to-peer without third-party intermediaries. Moreover, as cryptocurrency transactions become more widespread, the number of transactions and wallets increase, making detection time-consuming and hard to scale.\nNumerous prior studies have been aimed to identify fraudulent transactions on large financial transaction net-works [2] [3] [4], including Blockchain networks [5] [6]. The predominant approach in most of these studies involves modeling the patterns associated with fraudulent transac-tions using features derived from transaction timestamps and amounts. These models are subsequently employed to unveil previously unnoticed transactions exhibiting these distinctive patterns. To our knowledge, with a few exceptions (such as [7] [8] [9]), the prior work has not significantly explored the use of graph embeddings for fraud detection and risk assessment. None of the prior works have focused on the scalability of such graph em-beddings for the very large-scale blockchain transaction networks or adequately addressed the dynamic nature of blockchain transaction graphs as they evolve over time.\nB. Our Proposed Solution\nWe present RiskSEA, a scalable system for predicting the risk for all Ethereum blockchain addresses, in the form of a risk score. The risk score is normalized to be between 0 and 1, where 0 corresponds to no risk, and 1 corre-sponds to a very high risk of fraudulent activity associated with the address. Our approach leverages the power of machine learning and graph analysis to identify patterns and relationships within the Ethereum network that may indicate fraudulent activity. Specifically, we use the well-known node2vec algorithm [10] to generate embeddings for each node in the Ethereum blockchain, and we use behavioral features based on volume, amount, and time to create more sophisticated and accurate models for fraud detection. Our experimental findings show that the com-bination of graph-based and behavioral features based on statistics can improve the accuracy and reliability of risk scores for Ethereum addresses.\nThe system we describe is scalable enough to be able to provide risk scores for every Ethereum address (as of September 2023, there are approximately 266 million nodes on Ethereum). For this purpose, we present and evaluate different scalability approaches. To our knowl-edge it is the first such comprehensive system ever de-veloped and deployed in practice. Further, our system is based on a dynamic variant of the node2vec algorithm [11] and is therefore able to effectively handle the dynamic and evolving nature of transaction graphs which have new nodes and transactions added over time."}, {"title": "C. Node2Vec: Background and Motivation", "content": "Node2vec is a graph-based machine learning algorithm that can be used to analyze the structure of a network. It was first introduced in a paper by Grover and Leskovec titled \"node2vec: Scalable Feature learning for Networks\" [10] and has been widely used in a variety of applications including fraud detection, recommendation systems and social network analysis. It is based on the idea of learning low-dimensional representations i.e embeddings for nodes in a graph. The algorithm works by first constructing a random walk on the graph, which is a sequence of nodes that is generated by randomly moving through the graph. It then uses the random walk to create training samples for a semi-supervised learning model, which learns the node embeddings.\nThe node embeddings learned by node2vec algorithm capture the structural information of the graph, such as connections between nodes and relative proximity of nodes to one another. It helps in identifying patterns and relationships within a network that may not be apparent using traditional methods making it valuable for appli-cations such as fraud detection, where ability to identify hidden patterns and relationships is critical.\nWhen analyzing addresses that engage in transactions within the blockchain, we utilize node2vec embedding to generate graph based features that are provided as an input to a classifier model. Node2Vec helps us create numerical representations (embeddings) for each address based on relationships and connections it has with other addresses in the blockchain network. Malicious addresses often disperse their funds within a closely intercon-nected cluster of supporting addresses. By leveraging the node2vec embeddings, we can identify and analyze these dense clusters of addresses that exhibit similar transaction patterns. This enables us to detect and classify potential malicious addresses based on their association within these tightly knit groups. The embedding serves as a repre-sentation of the address's network relationships, aiding us in understanding and distinguishing specific transactional behavior within blockchain.\nHowever, node2vec embeddings have certain limita-tions: 1) they cannot be generated for addresses that were not part of the training data, 2) generating node2vec embedding for large scale transaction graphs with hun-dreds of millions of nodes is computationally challeng-ing, 3) it requires re-computation to handle the evolving nature of blockchain transaction graph which is very time-consuming. To tackle these challenges, we consider two approaches. The first approach propagates node2vec embeddings from the nodes involved in the training to all other nodes. The second approach implements an incremental approach to train the node2vec model to handle the dynamic nature of blockchain and generate embeddings for the addresses. In our incremental ap-proach each training iteration only needs to consider in-cremental changes in the transaction graph over a period"}, {"title": "D. Our Contributions", "content": "of time, and embeddings are only updated for changed regions since the last training. The incremental training approach is inspired by the paper from Mehdavi et al. titled \"dynnode2vec: Scalable Dynamic Network Embed-ding\" [11] with few modifications to efficiently generating random walks on large graphs. With both approaches we are able to successfully generate embeddings for a complete spectrum of addresses in blockchain, and with the second approach we are also able to handle the evolving nature of the blockchain transaction graph.\nThe main contributions of our work are as follows:\n1. Risk Scoring System: We present RiskSEA, a novel risk scoring system designed to efficiently and effectively generate normalized risk scores for Ethereum blockchain addresses, to predict their likelihood of being involved with fraudulent activity. The system employs a supervised machine learning approach involving a soft binary clas-sification model, with outputs corresponding to the risk score. For training and evaluation, we use an extensive set of datasets for obtaining the ground-truth binary risk labels, including both addresses known to have engaged in malicious behavior as well as benign addresses.\n2. Comprehensive Set of Features: The model uses a comprehensive feature set combining both behavioral and graph-based features. The behavioral features aim to capture the transactional behavior pattern of an address based on transaction amount and timestamps. The graph-based node2vec feature we use captures topology of the Ethereum transaction graph (where addresses are nodes and directed edges correspond to transactions between them).\n3. Demonstrating Benefit of Graph Features: We show through an ablation study that graph-based features a) provide better classification results compared to behav-ioral features, and b) when combined with behavioral features provide a better result than either behavioral or graph-based features in isolation.\n4. Scalable approaches: Motivated by the goal to gen-erate risk scores for all Ethereum addresses (hundreds of millions of them), we develop, implement and evaluate techniques to generate node2vec embedding for the en-tire Ethereum transaction graph. We compare two main approaches: 1) an embedding propagation approach that computes node2vec embeddings for a subset of addresses and propagates them to other addresses in a specified manner, and 2) an incremental dynamic node2vec ap-proach, that is capable also of handling the dynamic and time-evolving nature of blockchain transaction graphs. In conjunction with the latter, we also present a novel horizontal scalable random walks approach that allows us to efficiently implement incremental training for the dynamic node2vec model. To our knowledge this is the first-ever system for risk scoring that has been imple-mented and deployed at the scale of the entire Ethereum"}, {"title": "E. Organization of the Paper", "content": "transaction graph and capable of being incrementally updated over time as the transaction graph evolves.\n5. Evaluations of proposed scheme: We show that the dynamic node2vec approach is both computationally scalable and capable of handling dynamic transaction graphs in an incremental manner, and results in bet-ter risk score predictions. We provide a comprehensive analysis evaluating the efficacy of the dynamic node2vec embedding in terms of the risk prediction under various hyperparameters of the node2vec model.\nThe remainder of the paper is as follows. In Section 2, we present related work on the problem of detecting fraudulent transactions in blockchain and methods using graph based embeddings and GNN models. In Section 3, we introduce our overall approach for generating risk scores of addresses based on a combination of statistical features of the addresses and address embedding gener-ated using the node2vec model. In Section 4, we present the methodology for propagating the embedding to entire set of addresses and it's drawbacks, and about horizontally scalable random walks for efficiently training a node2vec model, an incremental training approach to generate ad-dress embeddings, as well as a performance evaluation of the address embedding with varied node2vec parameters and how it is able to tackle the evolving nature of the transaction graph. Finally, Section 6 concludes this study and discusses the scope of future work and different applications."}, {"title": "II. RELATED WORK", "content": "Fraud detection in the Ethereum transaction network is one of the hot topics due to its social importance and the availability of Ethereum transaction data pub-lically. Financial transaction networks usually have edge attributes - timestamp and amount. These attributes are assumed to be the key to fraud detection. Many fraud detection methods have been proposed using transaction edge attributes based on this assumption. However, some proposed models and algorithms are used with arbitrary features, which may not apply to other transaction net-work datasets or other types of fraud detection tasks.\nWith the development of graph embedding and graph neural network research, phishing detection methods [12] using graph embedding have been proposed. The advan-tage of using graph embedding and GNN models is to capture features of suspicious account node.\nKilic et al's research on fraud detection using ML [13] proposes an automated system for detecting blockchain addresses through the construction of transaction graphs and extraction of address features including global fea-tures like pagerank, using standard machine learning algorithms. Wu et al. proposed a transaction embedding model named trans2vec [14], incorporating the amount and timestamp properties of the transaction edges. They compared trans2vec with state-of-the art embedding al-gorithms, and it achieved better model performance with time and amount of features. While creating account based embedding vectors, it applies random walks with the amount and time-biased sampling.\nKanezakshi et al's research on ethereum fraud detection with heterogeneous graph neural networks [9] compared the model performance of GNN models on the actual Ethereum transaction network dataset and phishing re-ported label data and showed that heterogeneous models had better model performance than homogenous models.\nChen et al. proposed another phishing detection model [7] based on GCN and autoencoder. It samples subgraphs by random walk and applies node embeddings and a GCN model to incorporate spatial structures and node features. The proposed model performed better than other tradi-tional embedding methods. However, some node features from transaction data are determined arbitrarily, and only the GCN model is used to extract the structural features. Tan et. al also proposed [15] a framework for detect-ing fraudulent transactions, which involves the use of a transaction behavior-based network embedding algorithm and GCN to classify ethereum addresses as legitimate or fraudulent.\nLin et al. modeled the Ethereum transaction network as a weighted temporal graph and a Temporal Weighted Mul-tidigraph Embedding T-EDGE [8] to incorporate temporal and weighted transaction edges. In T-EDGE, it extends the edge probabilities to be visited in the random walk by transaction amount and interval. Xie et al. also modeled it as a temporal-amount snapshot multigraph and extended the random walk named temporal-amount walk TAW [16] to generate embeddings. Construct a transaction subgraph network TSGN [17] with a learnable transaction weight mapping function and directed-TSGN to be aware of the edges. The model performance of TSGN is better than the baseline method in other Ethereum datasets.\nOverall, the literature on fraud detection on detecting fraudulent addresses on ethereum blockchain shows that there is a variety of embedding approaches for nodes in a transaction graph that can be used to identify and prevent fraudulent activity in the system. However, there is little or no research in terms of a scalable approach which can be applied to each address in the ethereum blockchain in an efficient way. Our work addresses this gap in the literature."}, {"title": "III. RISK SCORING OF ETHEREUM ADDRESSES (RiskSEA)", "content": "This section briefly describes the overall pipeline in our RiskSEA system for generating risk scores of ethereum blockchain addresses. This pipeline includes the data collection and processing, feature computation and ex-traction, and model training and evaluation.\nA. Data Collection and Preprocessing\nWhen working on problems where security is a primary concern, it is crucial to carefully analyze the data we ingest and train the models on. It is particularly crucial to ensure a balanced representation of \"bad\" actors, i.e., addresses involved in malicious activities, due to the significant imbalance between such actors and \"good\" actors. To achieve this, a curated dataset was created by evaluating various sources for their genuineness and quality of labels and their feasibility to be incorporated into our systems.\nIn the data preparation step, we considered different sources of data 1. The data points collected from various sources provide labels associated with an address high-lighting the form of activity the address is involved in, examples of such labels include - phishing, scam, theft, miner, exchange, etc. Based on these labels, risk class is assigned to these ground truth addresses.\nWe have labeled addresses into two risk classes:\n\u2022\nRisk-1/\"Bad\" actors: addresses involved in illegal ac-tivities\nRisk-0/\"Good\" actors: addresses belonging to ex-changes, miners, government, etc.\nFor addresses having different risk scores coming from different sources, a high risk score is given precedence.\nB. Feature Extraction\nOur analysis of the Ethereum transaction graph revealed distinct spending patterns among addresses of different risk categories. To leverage this insight, we provide our classifier model with a comprehensive summary of an ad-dress's activity. By considering transactional behavior and patterns, we can better understand the characteristics as-sociated with different risk levels, enabling more informed assessments and analysis. However these transactional features can not fully capture the transaction pattern or structural pattern of different blockchain addresses, so to capture the structural information, we use a graph based feature Node2Vec. It captures topology of an address with respect to other addresses, helps in identifying patterns and relationships within a network that may not be apparent using traditional methods.\n1) Behavioral Features: These features capture the be-havioral transaction patterns among different addresses, these are features based on timestamp, amount, and frequency of the incoming/outgoing transactions for a particular address.\nWe created two buckets of behavioral features one based on Ethereum transactions of a particular address and the other based on ERC-20 token based transactions performed by an address. This helps in acquiring valuable insights from both types of transactions, capturing both allows us to utilize the trading patterns linked to different Ethereum-based tokens as a potential indicator to assess address risk score.\n2) Node2Vec Embeddings: Node2Vec is a graph-based machine learning algorithm that can be used to analyze the structure of a network [10]. It is based on the idea of learning low-dimensional representations i.e embeddings for nodes in a graph. The node embeddings learned by Node2Vec algorithm capture the structural information of the graph, such as connections between nodes and relative proximity of nodes to one another.\nWhen analyzing addresses that engage in transactions within the blockchain, we utilize Node2Vec embedding to generate graph based features for our classifier model. Node2Vec helps us create numerical representations (em-beddings) for each address based on relationships and connections it has with other addresses in the blockchain network. Embeddings generated by Node2Vec are par-ticularly valuable because they capture the topology of the graph. Malicious addresses often disperse their funds"}, {"title": "C. Risk Scoring Model", "content": "within a closely interconnected cluster of supporting ad-dresses. By leveraging the Node2Vec embeddings, we can identify and analyze these dense clusters of addresses that exhibit similar transaction patterns. This enables us to detect and classify potential malicious addresses based on their association within these tightly knit groups. The embedding serves as a representation of the ad-dress's network relationships, aiding us in understanding and distinguishing specific transactional behavior within blockchain.\nHowever, generating node2vec embedding for entire set of blockchain addresses is challenging and have certain limitations\n1) they cannot be generated for addresses that were not part of the training data, which is required since blockchain is an evolving graph of addresses and transactions.\n2) Generating node2vec embedding for large scale transaction graphs is challenging. To put this in context, as of 20th Sep, 2023 Ethereum transaction graph had approximately 266M nodes.\n3) Node2vec require re-computation of embeddings to handle the evolving nature of the blockchain transaction graph which is very time-consuming.\nTo tackle these scalability challenges, we explored mul-tiple approaches to scale the node2vec embeddings to the entire set of blockchain addresses. In the section IV we present approaches for scaling node2vec embedding and the overall performance of the risk scoring model in capturing fraudulent addresses.\nIn our risk scoring model, we employed three major sets of features which can capture the transactional pattern of an address. We created two sets of behavioral features based on features defined in Table 1, first only based on Ethereum transactions of an address and second based on ERC-20 transactions for a particular address. Apart from these behavioral features we created a graph based feature - node2vec embedding, which captures topology of the graph. In order to classify an address into a specific risk class, we utilize a random forest classifier model. We combined all three sets of features and the resulting vector is used as input to the classifier model. This approach enables us to leverage the combined power of Node2Vec embeddings and transactional data for accurate risk classification of addresses.\nTo assess the performance of our risk scoring model and conduct a comparative analysis of various models, we have adopted a set of baseline metrics, including Precision, Recall, and the area under the precision-recall curve (PR-AUC). These metrics enable us to evaluate how effectively the model identifies and labels known mali-cious addresses. We evaluated the model's performance on a diverse test dataset, which comprises addresses from a variety of sources. The diverse test dataset allows us to gauge the model's accuracy in identifying malicious addresses from a wide range of origins.\nOverall, the combination of different behavioral fea-tures and node2vec embeddings has performed very well in capturing fraudulent addresses in the blockchain. In section IV we present the performance of the risk score generation model with different scaling node2vec embed-ding approaches. We also presented that the node2vec feature has a very high feature importance compared to other features using the risk scoring model defined in this section for capturing fraudulent addresses."}, {"title": "IV. SCALING NODE2VEC EMBEDDINGS OF BLOCKCHAIN ADDRESSES", "content": "Blockchain ecosystem characterized by its decentralized and immutable ledger has grown exponentially over the years with cryptocurrencies like Bitcoin and Ethereum at the forefront. As of 20th Sep 2023, Ethereum boasts approximately 266M addresses and Bitcoin has approx-imately 1.2B addresses. These numbers reflect the scale and complexity of blockchain networks which presents a unique challenge for generating node embeddings for address. Despite the increasing significance of blockchain, there has been a noticeable gap in research when it comes to scalable approaches for generating embeddings in blockchain graphs. We have used node2vec to generate blockchain node embeddings, but there are challenges in generating node2vec embedding for large scale evolving blockchain graphs. Node2Vec is a transductive node em-bedding algorithm i.e it needs the list of all nodes to be available at the time of training to learn their embedding. This transductive nature restricts its direct applicability to generate embeddings for new blockchain addresses that were not part of the initial training set. We address these limitations by proposing approaches that adapt to the scalability and the evolving nature of the blockchain transaction graph and enable generation of embeddings for every node within the network.\nA. Embedding Propagation Methodology\nIn embedding propagation methodology we tackle the scalability limitations by propagating the embeddings from a known set of addresses for which the node2vec embeddings are computed to a unknown set of addresses with missing embeddings. We start by first training a node2vec model on a set of 30M addresses and generate node2vec embeddings, this forms our core node2vec ad-dress embeddings. To come up with core 30M addresses, we used our training dataset where we included all the addresses from ethereum blockchain which have trans-acted with any addresses in the training set and randomly sampled a set of 30M addresses from a broader set of addresses."}, {"title": "B. Drawbacks of Embedding Propagation Methodology", "content": "1) Due to computational resource limitations, the train-ing dataset for Node2Vec is constrained in terms of the number of addresses and links between them. This restriction arises from the necessity of loading the entire network into memory, particularly during the execution of random walks. Consequently, as the network expands, an increasing number of addresses become inaccessible for embedding computation. Although it is possible to enhance coverage by iterating the propagation process, the quality of embeddings for nodes situated farther from those included in the initial training set is expected to diminish.\n2) Retraining on a large graph is time & resource consuming, which will limit how frequent the retrain will be conducted.\n3) Retrain will cause node embeddings to change, which leads to much higher cost if we want to store embeddings in hot data storage for fast serving as we need to repopulate embeddings for all addresses. At the same time, any downstream models will also need to be retrained as embedding space has changed after retrain.\nTo overcome these challenges, we have devised an alter-native solution known as Dynamic Node2Vec Embedding Generation. This approach is designed to address the dynamic nature of the blockchain network by efficiently generating node2vec embeddings for the entire address set. Employing an incremental methodology, the model is trained in a manner that handles the evolving nature of the blockchain transaction graph, incorporating new addresses or transactions seamlessly into the embedding generation process."}, {"title": "C. Dynamic Node2Vec Embedding Generation on Blockchain (DynN2VChain)", "content": "still face few issues:\nTo overcome the challenges faced by Embedding Prop-agation Methodology and to handle the evolving nature of the blockchain transaction graph, we need to have a graph learning algorithm that supports incremental train-ing such that each training iteration only needs to take incremental graph information as input and embeddings are only updated for addresses in changed regions since last training. We found that Dynamic Node2Vec learning algorithm [2] effectively provides such characteristics. Dy-namic node2vec is a scalable dynamic network embedding for large evolving networks. It modifies the well known static embedding method, node2vec by employing the previously learned embedding vectors as initial weights for skip-gram model. In addition, it utilizes evolving random walks for updating the trained skip-gram model where walks are generated only for nodes that have changed in consecutive timestamps. However, traditional libraries for computing random walks load the entire graph into memory which limits the size of the graph due to mem-ory constraint. To overcome this, we developed a novel"}, {"title": "D. Dynamic Node2Vec", "content": "MapReduce approach that can compute random walks in a horizontally scalable manner.\nDynamic node2vec has two main subcomponents - node2vec random walk and skip gram model. Node2Vec random walks is a flexible random walk which samples neighborhoods of a source node by Breadth-first sampling (BFS) and Depth-first sampling (DFS). Node2Vec generates a corpus by sampling a number of fixed lengths starting at each vertex. Then, the Skip-gram uses these random walks to learn the representation vector of each node. For a dynamic network $G = G_1, G_2, ..., G_T$, it runs the static node2vec for the first graph G1 separately, extracts the embedding vectors and keeps the structure of trained Skip-gram for next timestamp. For all other subsequent timestamps 2, .. T, the following two steps i.e Evolving Walk Generation and Dynamic Skip-gram Model are performed between two consecutive timestamps.1) Evolving Walk Generation: In the static node2vec, random walks are generated independently for each timestamp for all nodes which is a very time-consuming process. In dynamic node2vec, random walks are gener-ated only for evolving nodes instead of generating random walks for all nodes in the current timestamp. Therefore, new random walks from changed regions in the graph can efficiently update the embedding vectors according to temporal evolution of networks over time. However, in the worst case evolving nodes include all nodes as all nodes might have changed in the timestamp which in case of blockchain is very rarely possible or not possible.2) Dynamic Skip-gram Model: In the natural language processing domain, several dynamic word embeddings have been proposed to track word evolution such as new words are created, and some words die out throughout time [18][19]. For learning the representation vectors at timestampt they train the Skip-gram by initializing word vectors obtained from previous timestampt-1. In this dy-namic Skip-gram model, the vocabulary set is updated and the Skip-gram is retrained by new documents in new timestamps. In network embedding domains, dyn-node2vec also takes advantage of dynamic Skip-gram model for obtaining embedding vectors at time t and uses the pre-trained Skip-gram model as initial weight for further training. In order to do that, first the vocabulary set of Skip-gram is updated according to new evolving walks. Then, Skip-gram is trained by new evolving walks generated on the evolving nodes.Using Dynamic Node2Vec, we developed an incremen-tal approach to generate the embeddings for evolving blockchain transaction graphs and we consider addresses that have transacted since the last run of training as delta nodes and evolving walks for those nodes as delta walks. To compute delta walks, even though we only need to conduct walks for delta nodes, however, each random walk will still need to be conducted against the whole graph. For example, A is used to be only connected to B."}, {"title": "E. Horizontally Scalable Random Walks on Blockchain", "content": "To overcome the above limitations, we developed a novel MapReduce [3] approach that can compute ran-dom walks in a horizontally scalable manner. For each timestamp, we first store the graph as node pairs on a distributed file system partitioned by source node then to avoid data skew issues for each source we considered top K neighbors sorted based on interaction count. The node pairs are stored to get a list of neighboring nodes for source nodes, we call it NodeNeighborList. At each random walk step, we evaluate and pick destination nodes"}, {"title": "F. Hyper-parameter Tuning of DynN2VChain Model", "content": "Intuitively, parameters p and q control how fast the walks explore and leave the neighborhood of starting node u. It allows the walk generation process to interpolate between BFS & DFS. Based on the evaluation performed on different hyperparameters, we found that keeping p & q both as 1, and number of walks and length of walks as 10 gives the best result. Fig 5-9 shows the PR curve at different configuration of node2vec by varying a particular parameter, and Table II has AUC score for all the different configurations.\nThe parameters p and q play a crucial role in influenc-ing the exploration dynamics of walks generated by the node2vec algorithm. Intuitively, they determine the speed at which walks explore and depart from the initial node, providing a flexible mechanism to interpolate between Breadth-First Search (BFS) and Depth-First Search (DFS) strategies.\nThrough a comprehensive evaluation involving various hyperparameter settings, we have identified that setting both p and q to 1, along with configuring the number of walks and the length of walks to 10, yields optimal"}, {"title": "G. Evaluation on Ethereum Transaction Graph", "content": "We evaluated the embeddings generated by training a risk scoring model, and evaluating the model performance on a particular test-set by varying the hyperparameters of the dynamic node2vec model.\nFor this evaluation, we have trained a random forest classifier with a fixed configuration and only the node2vec embeddings as an input feature to the model. We eval-uated the embeddings by training the risk scoring and observing the overall performance of the risk scoring model on the test-set. Evaluation after training on all the blocks present in Ethereum chain would take very long for dynamic node2vec embeddings, instead we compared the model performance at different checkpoints like initial 5M, 8M, 10M and 16M blocks.\nWe have compared the embeddings generated by dy-namic node2vec embeddings at multiple checkpoints with the node2vec propagated embeddings generated on sim-ilar checkpoints with similar hyper-parameters. We ob-served dynamic node2vec embeddings performs better than the node2vec propagated embeddings in the task of generating risk scores. Fig. 10 and Table IV present comprehensive results obtained across different config-uration of hyper-parameters, specifically across number of walks, walk length, and the initial Ethereum blocks considered in the transaction graph for comparison of embedding propagation methodology and DynN2VChain embeddings."}, {"title": "V. DISCUSSION AND CONCLUSIONS", "content": "In this paper, we introduced RiskSEA, a scalable sys-tem for risk scoring of blockchain addresses, utilizing a rich feature set combining both behavioral and graph based features and employing a supervised machine learning model for efficient generation of normalized risk scores. We described the scalability challenges in gener-ating graph based features posed by the vast number of Ethereum blockchain addresses. To address the scalability challenges, we proposed two approaches for generating node2vec embedding, an embedding propagation method and an incremental dynamic node2vec approach. The latter accommodates the dynamic nature of blockchain transaction graphs and introduces a novel horizontally scalable random walk technique for efficient incremen-tal training. We performed a thorough analysis of the dynamic node2vec embeddings across various hyperpa-rameters and also evaluated the approach which validates the computational scalability and effectiveness of the proposed approach. Our system handles the dynamic Ethereum network with approximately 275M nodes by generating a graph embedding for all the nodes present in the ethereum blockchain. This marks the first practical deployment of such a comprehensive system, addressing the evolving nature of blockchain transaction graphs.\nAlthough we source the blockchain ground truth data from various sources, expanding the ground truth data should improve the risk scoring system. The efficacy of our approach is exemplified by the visualization of node2vec embeddings, illustrating distinct clusters of various class labels, as detailed in Appendix. This suggests the system's potential applications beyond risk scoring, that it can be utilized to predict other multi-class labels for blockchain addresses. It's worth noting that our current focus on explainability for the generated risk scores using node2vec embeddings has been limited. Establishing a robust mech-anism for explainability is imperative to offer a more com-prehensive understanding of the results obtained from the system. Considering the expansion of our system, there is an exciting opportunity to broaden its scope to encom-pass other blockchains. This extension could potentially provide valuable insights into risk factors across different blockchain networks. Furthermore, it would be of interest to explore the feasibility of integrating our system with Layer2 chains, potentially unlocking a new dimension in risk assessment with the blockchain ecosystem."}]}