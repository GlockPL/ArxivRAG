{"title": "Order Theory in the Context of Machine Learning: an application", "authors": ["Eric Dolores-Cuenca", "Aldo Guzm\u00e1n-S\u00e1enz", "Sangil Kim", "Susana L\u00f3pez-Moreno", "Jose Mendoza-Cortes"], "abstract": "The paper \"Tropical Geometry of Deep Neural Networks\" by L. Zhang et al. introduces an equivalence between integer-valued neural networks (IVNN) with activation ReLUt and tropical rational functions, which come with a map to polytopes. Here, IVNN refers to a network with integer weights but real biases, and ReLUt is defined as ReLUt(x) = max(x, t) fort\u2208 RU {-8}.\nFor every poset with n points, there exists a corresponding order polytope, i.e., a convex polytope in the unit cube [0, 1] whose coordinates obey the inequalities of the poset. We study neural networks whose associated polytope is an order polytope. We then explain how posets with four points induce neural networks that can be interpreted as 2 \u00d7 2 convolutional filters. These poset filters can be added to any neural network, not only IVNN.\nSimilarly to maxout, poset convolutional filters update the weights of the neural network during backpropagation with more precision than average pooling, max pooling, or mixed pooling, without the need to train extra parameters. We report experiments that support our statements.\nWe also prove that the assignment from a poset to an order polytope (and to certain tropical polynomials) is one to one, and we define the structure of algebra over the operad of posets on tropical polynomials.", "sections": [{"title": "1 A Novel CNN Filter Inspired by Order Theory", "content": null}, {"title": "1.1 Introduction", "content": "The paper [30] explains an equivalence between integer-valued neural networks (IVNN) with ReLUt activation (where ReLU+(x) := ReLU(x,t) = max(x, t)) and tropical rational functions, which come with a map of polytopes. This map associates a \u201csimplified tropical polynomial\u201d (sum of tropical monomials) with a convex polytope, sending \u2211cixai, where a\u00a1 are vectors and the sum is finite, to the convex envelope of (a1, C1), . . ., (An, Cn).\nOrder theory [21, 25] is a discipline in pure mathematics that formalizes the study of structures with an order. A partially ordered set, also called a poset, is a set in which we can compare some elements, but perhaps not all of them."}, {"title": "Example 1.", "content": "Let {A, B, C, D} be a list of computer programs, where program B needs the output of program A, program C needs the output of program B, and program D can run in parallel to all. If we specify A < B, B < C and extend the relation < by transitivity, we obtain the poset {A, B, C, D | A < B < C}. Any linear order of {A, B, C, D | A < B < C'} compatible with the original order (for example A < D <B<C) determines a way to run the programs one at a time."}, {"title": "Definition 1.", "content": "Given a poset P with |P| = n points, the order polytope of P [23] is the polytope contained in the unit cube [0,1]n defined by the inequality of the poset assuming that every point of the poset corresponds to a basis element of Rn."}, {"title": "Example 2.", "content": "Then, we see, for example, that Poly(x < y) = {(x, y) \u2208 [0, 1]2 | 0 \u2264 x \u2264 y \u2264 1}, that Poly(x1 <\u2026 < xn) is the n-simplex \u2206[n] and that the polytope of the poset in Example 1 is Poly({A, B, C, D | A < B < C'}) = \u2206[3]\u00d7[0,1]."}, {"title": null, "content": "In this paper, we describe tropical polynomials associated with order polytopes. Expanding on the work of [30], we define poset neural networks as neural networks whose tropical polynomial is associated with an order polytope.\nAlthough poset neural networks are IVNN, when interpreting them as convolutional filters\u00b9 they can be included in arbitrary convolutional neural networks. As convolutional filters, the following are two examples of the functions that we discovered:"}, {"title": null, "content": "\u2022 The first filter sends the 2 \u00d7 2 square\n[\u03b10,0 \u03b10,1\n\u03b11,0 \u03b11,1\nto the following:\nmax{0, \u03b10,0, \u03b10,0 + a0,1, a0,0 + a0,1 + a1,0, a0,0 + a0,1 + a1,0 + a1,1} (1)"}, {"title": null, "content": "\u2022 The second filter sends the same input to:\nmax\n0,\nmax{ai,j},\ni,j\nmax {ai,j + \u03b1\u03ba,\u03b9},\ni,j,k,l\n(i,j)\u2260(k,l)\nmax {ai,j + ak,l + am,n},\ni,j,k,l,m,n\n(i,j)\u2260(k,l)\n(i,j)\u2260(m,n)\n(k,l)\u2260(m,n)\na0,0 + a1,0 + a0,1 + a1,1\n(2)"}, {"title": null, "content": "We verified that these filters do not appear in the literature [8, 29, 9].\nIn the first part of this paper, we perform experiments to evaluate the performance obtained after adding these filters, and compare the results with max pooling [27], average pooling [16] and mixed pooling [28].\nThe second part of this paper, of theoretical nature, describes the algebraic properties of these poset neural networks, introducing the formalism of algebras over the operad of posets [7]. The main theoretical results consist of the proof that we can recover a poset from the vertices of an order polytope (Corollary 1), we find polynomials that distinguish posets (Lemma 2), and we introduce an action of the operad of posets on convex polytopes and tropical polynomials.\nThis paper is organized as follows. In Section 1.2 we introduce the basic definitions and some necessary theoretical results. Section 1.3 is dedicated to the study of the newly defined convolutional filters. We summarize our experimental results in Section 1.4. Appendices A.3 and A.4 contain details about the experiments. Section 2 introduces the language of operads. Section 2.2 reviews the action of posets on polytopes. Section 2.3 describes an action of posets in a family of neural networks, and Section 2.4 explains how to define the action of posets on tropical polynomials. Appendix A.6 studies the corresponding geometric transformations associated with poset filters."}, {"title": "1.2 Mathematical background", "content": null}, {"title": "1.2.1 Order theory", "content": "We review the basic notions of order theory.\nDefinition 2. A partially ordered set, or poset, P is an ordered pair P = {X, \u2264} that consists of a set X and a partial order <.\nNotation 1. By n-chain (n), we mean the poset 1 < 2 <\u2026 < n.\nDefinition 3. A Hasse diagram is a graph associated with a poset, in which a vertex is connected vertically to each of the successors of that vertex.\nHasse diagrams encode all the information required to characterize a poset. Usually, x is located at the bottom and the successors of x are drawn above it."}, {"title": "Example 3.", "content": "By the previous definitions, : is the Hasse diagram of the poset {x < y} and represents the poset {x, y, z | x < y}."}, {"title": "1.2.2 Convexity", "content": "Given a poset P with n points, the order polytope Poly(P) is defined as the object in the n cube [0, 1]n where each coordinate is assigned to a vertex of the poset and where we look for the spaces of points with the restrictions of the poset. Equivalently,\nPoly(P) = {f : P \u2192 [0,1], f(x) \u2264 f(y) if x \u2264p y}."}, {"title": "Example 4.", "content": "Following the definition, P({1 < 2}) = {0 < x \u2264 y \u2264 1} and P({a,b}) = {0 < x \u2264 1, 0 \u2264 y \u2264 1}.\nIt follows that P((n)) is the n-simplex."}, {"title": "Example 5.", "content": "The order polytope of the N poset, defined as N = {w <y>\nx < z}, is the region that satisfies:\nPoly(N) =\n{0 \u2264 w \u2264 x \u2264 y \u2264 x \u2264 1}\n(3)\n\u222a\n{0 \u2264 w \u2264 x \u2264 x \u2264 y \u2264 1}\n(4)\n\u222a\n{0 \u2264 x \u2264 w \u2264 y \u2264 x \u2264 1}\n(5)\n\u222a\n{0 \u2264 x \u2264 x \u2264 w \u2264 y \u2264 1}\n(6)\nU\n{0 \u2264 x \u2264 w \u2264 x \u2264 y \u2264 1}.\n(7)"}, {"title": null, "content": "We assume has vertices with labels (from left to right) w, y, z, and z. There are 5 ways to give a linear order to the poset, compatible with the original order, as seen in Figure 1. Here, we use height to order the vertices. For instance, in the linearization at the very bottom of Figure 1, the order is x"}, {"title": null, "content": "It is shown in [4, Section 3.2] that two n-simplices in an order polytope share a (n - 1)-face if the corresponding linearizations differ only on a pair x < y and yx, with the face being the region where x = y. In Figure 1 two linearizations are connected if their corresponding simplices share a face.\nThe order polytope of a poset is a convex set (this follows from Lemma 8). The following lemma relates the study of posets with the study of convex polytopes in [0,1]n. In the proof of this lemma, we use the fact that any n-simplex induces a linear order on {1,2, . . ., n}, which is defined from the vertices of the simplex."}, {"title": "Example 6.", "content": "From the vertices of the 3-simplex, say (0,0,0), (0, 0, 1), (0, 1, 1), (1,1,1), we can deduce the following order: X1 \u2264 X2 \u2264 X3. Note that the value of the second coordinate is always less than or equal to the value of the third coordinate."}, {"title": "Lemma 1.", "content": "Let C be a convex n-dimensional subset of the unit n-cube. If C is the union of n-simplices, all sharing the line from the zero vector to the one vector, then the convex set C is an order polytope."}, {"title": "Proof.", "content": "Every simplex of C represents the order polytope of a linear order in the set {1,2,..., n} that indexes the orthogonal basis of Rn. Let the order P be the intersection of those linear orders. By definition, C is contained in Poly(P). It remains to show that Poly(P) \u0441 \u0421.\nWe proceed to prove the lemma by contradiction. Among all the simplices in Poly(P) \\ C, let S be any sharing (at least) two (n - 1)-faces with the corresponding simplices in C. Then by connecting the points on those two faces of S with a line, and using the convexity of C, we show that S intersects Cat more points than the boundary, which is a contradiction.\nNow, assume that all simplices of Poly(P) \\ C share one face with one of"}, {"title": null, "content": "all the simplices in C. Pick one of such simplices T, then for some pair of coordinates ti, tj, the points in the simplex T satisfy ti < tj, but any other element of C satisfies tj < ti. Thus, the simplex T does not belong to Poly(P) (as it introduces a relation ti < tj not contained in C), which is a contradiction.\nFinally, it is not possible that every simplex of Poly(P) \\ C only intersects C in a face of dimension at most n - 2, as we explain below.\nTake a point in the center of a simplex U \u2208 Poly(P) \\ C and a point in the center of a simplex in C. The line between these points is included in Poly(P). This line intersects the boundary of a simplex in Poly(P) and a simplex in C and, by varying the point in a ball inside of U, we find that the intersection is open and thus, a whole face is shared by Poly(P) and C.\nWe conclude that C = Poly(P)."}, {"title": "Corollary 1.", "content": "The assignment P \u2192 Poly(P) is a bijection."}, {"title": "Proof.", "content": "The proof of Lemma 1 and the results of [4, Section 3.2] give us a way to uniquely reconstruct an order out of the simplices of the order polytope."}, {"title": "1.2.3 Tropical algebra", "content": "Consider the tropical semiring (R\u222a{\u2212\u221e},\u2295, \u2299), where a \u2295 b = max{a,b} and a \u2299 b = a + b. Although some of the usual properties still hold, such as the following distributive property:\na \u2299 (b \u2295 c) = a \u2299 b \u2295 a \u2299 c,\ntropical elements behave in surprising ways. For instance,\nx \u2295 x = x, 1 \u2299 x \u2260 x.\nTropical fractions are defined by a \u2296 b := a \u2299 b, where a, b are tropical elements, and using max{a \u2013 b,c} = max{a,b + c} \u2013 b and b = max{b,0} \u2013 max{-b, 0}, one can show that for tropical numbers a, b, a2, b2:\n(a \u2296 b) \u2299 (a2 \u2296 b2) = (a \u2299 a\u2082) \u2296 (b \u2299 b\u2082),\n(a \u2296 b) \u2295 (a2 \u2296 b2) = (a \u2299 b2 \u2295 a2 \u2299 b) \u2296 (b \u2299 b\u2082)."}, {"title": "Remark 1.", "content": "A tropical polynomial\nS\nCiX1i\u2026 Xni\ni=1\ncorresponds to the function:\nmax {ci + X1i +\u2026\u2026+ Xni}.\n1"}, {"title": "Definition 4.", "content": "We say that a tropical polynomial f(x) is in its reduced form when there are no repeated (tropical) monomials in its expression."}, {"title": "Definition 5.", "content": "Following [30], given a tropical polynomial f(x) in its reduced form, we define the polytope of a tropical polynomial P(f) by taking the convex envelope of the monomial vectors according to the following rule: given a tropical monomial cx\u00b9,...xar, we associate the vector (a1,..., an, c)."}, {"title": null, "content": "The operation \u2296 is invertible, associating to a convex polytope Q with positive integer coordinates (except perhaps the last one) its tropical polynomial Tr(Q)."}, {"title": "Example 7.", "content": "By the above definition, we have the following:\n4x\u00b2y \u2295 1 = {\u03bb(2, 1, 4) + (1 \u2212 \u03bb)(0, 0, 1) | 0 \u2264 \u03bb \u2264 1}.\nHere the monomial 4x\u00b2y is related to the point (2, 1, 4), and the monomial 1 is related to the point (0,0,1)."}, {"title": "Definition 6.", "content": "Given a poset P, its tropical polynomial Tr(P) is defined as the tropical sum of the tropical monomials defined by the vertices of Poly(P) \u00d7 0 C RIP+1.\nSince the order polytope of a poset is a convex set (see Lemma 8), we can associate a tropical polynomial with each poset by using the vertices of its order polytope. However, we assume that there is an extra coordinate, set to 0, ensuring that the values represent only the exponents of the monomials and not the constants. In Example 7, the vector (2,1,4) is associated with the monomial 4x\u00b2y, while the tropical polynomial Tr(\u2022) will be the tropical polynomial of Poly(\u2022) \u00d7 0 (where 0 \u2295 0x = 0 \u2295 x).\nThen, the general expression is of the form Tr(P) = \u2295 x\u00b2, where v belongs to the set of vertices of the order polytope of P."}, {"title": "Example 8.", "content": "The tropical polynomial of the linear order, or n chain, (n) is of the form:\n0 \u2295 xn \u2297 (0 \u2295 xn\u22121 \u2297 (\u2026 \u2297 (0 \u2295 x1))). (8)"}, {"title": "Example 9.", "content": "Given the N poset, we list the vertices of Poly(N), where we assume a vector (w, x, y, z).\nV(Poly(N)) =\n{(0, 0, 0, 0), (1, 1, 1, 1)}\n\u222a {(0,0,0,1), (0, 0, 1, 1), (0, 1, 1,1)} from Equation (3)\n\u222a {(0,0,1,0), (0, 0, 1, 1), (0, 1,1,1)} from Equation (4)\n\u222a {(0,0,0,1), (0, 0, 1, 1), (1, 0,1,1)} from Equation (5)\n\u222a {(0,0,1,0), (1, 0, 1, 0), (1, 0, 1,1)} from Equation (6)\n\u222a {(0,0,1,0), (0, 0, 1, 1), (1, 0,1,1)} from Equation (7)\nWithout repetition, we obtain the following vertices:\n{(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1), (1, 0, 1, 0), (0, 1, 1, 1), (1, 0, 1, 1), (1, 1, 1, 1)}."}, {"title": "Definition 7.", "content": "We say that the tropical polynomial of a poset P with |P| = n is in its expanded presentation if it is a tropical sum of tropical polynomials of n-chains, where every tropical polynomial of an n-chain appears only once."}, {"title": "Example 10.", "content": "The tropical polynomial in expanded presentation associated to N is the following:\nTr(N)(w, x, y, z) =\n(0\u2295 z\u2295 x \u2295 y \u2295 z \u2295 wxyz)\n(0\u2295 z\u2295 x\u2295 w \u2295 xyz)\n(0\u2295 z\u2295 w\u2295 y \u2295 xyz)\n(0\u2295 w\u2295 y\u2295 z \u2295 wxyz)\n(0\u2295 y\u2295 z\u2295 wxyz).\n(9)\nNote that x \u2295 x = x, so the expression above could be simplified as in Table 1. We prefer to represent the tropical polynomials of posets as tropical sums of tropical polynomials of linear orders."}, {"title": "Lemma 2.", "content": "The map Q \u2192 Tr(Q), from finite posets to tropical polynomials in their expanded presentation, is injective."}, {"title": "Proof.", "content": "Let f(x) be a tropical polynomial of a poset, then it is possible to deter- mine the tropical polynomials of the linearizations from the expression of f(x), as follows: if each maximal simplex has k vertices, when transforming those vertices into monomials we obtain a sequence of k monomials, each dividing the next one.\nThen, from a tropical polynomial of a poset we can recover the linear or- ders of the poset and, since a poset is determined by the intersection of its linearizations, we also recover the original poset."}, {"title": "Remark 2.", "content": "Given a poset P, there is a well-known polynomial \u2126(P) called the Stanley order polynomial [22]. When two posets have the same Stanley order polynomial, such as \u2126( 11 ) = \u2126( ), they are called Doppelg\u00e4nger [11]. There was a question about the existence of a set of polynomials that distinguishes posets, and this question is answered by Lemma 2."}, {"title": "1.2.4 Neural networks and tropical polynomials", "content": "Up to this point, we have linked each poset to its associated tropical polynomial. Next, we will describe the neural networks associated with tropical polynomials of posets.\nFirst, we explore tropical operations at the level of neural networks."}, {"title": "Remark 3.", "content": "In the context of IVNN, nodes in the same layer, say (y1,..., Yn), can have a different parameter t in their ReLU activation function, that is,\nReLU((y1,..., Yn), (t1, ..., tn)) = (max{y1, t1},..., max{yn, tn})."}, {"title": "Definition 8.", "content": "If the neural network a corresponds to the tropical polynomial p(X) and b corresponds to q(X), then from:\np \u2295 q = p + q = max(p+q, -\u221e), (10)\nwe define at the level of neural networks the tropical product as the following:\na \u2297 b = ReLU([a b] [1 \u22121], -\u221e). (11)"}, {"title": "Definition 9.", "content": "We define the tropical fraction a \u2296 b of two neural networks a and b as the following operation:\na \u2296 b = ReLU([a b] [1 \u22121], -\u221e). (12)\nWe note that the tropical sum has the following properties:\np \u2295 q = max{p, q}\n= max{p - q, 0} + q\n= max{p - q, 0} \u2295 max{q, 0} \u2296 max{-q, 0}. (13)"}, {"title": "Remark 4.", "content": "This means that we have made choices, such as taking max{p-q} instead of max{q-p}, to determine the factorization of p\u2295q in terms of the usual ReLUs with parameters 0 or -\u221e. Thus, more than one neural network can be assigned to a tropical polynomial."}, {"title": "Definition 10.", "content": "By computing the vector [max{p-q,0} \u2295 max{q, 0}, max{-q, 0}], we define the tropical sum of two neural networks a and b as:\na \u2295 b = ReLU (ReLU([a b] [1 0 0 1\n0 1 \u22121 0\n], 0) [1\n1\n, -\u221e)."}, {"title": "Remark 5.", "content": "If we make the other choice and describe the tropical sum as:\np \u2295 q = max{p, q}\n= max{q - p, 0} + p\n= max{q - p, 0}\u2299 max{p, 0} \u25ca max{-p, 0}\n= max {max{q - p, 0} \u2295 max{p, 0} \u25ca max{\u2212p, 0},\u2212\u221e}, (14)\nthen the tropical sum a\u2295 b is as follows:\na\u2295 b = ReLU(ReLU([a b] [1 \u22121\n1 0\n], 0) [1\n\u22121\n, -\u221e)."}, {"title": null, "content": "Since Poly(Q) contains the origin, Tr(Q) always has a zero, so the final layer is ReLUo."}, {"title": "Remark 6.", "content": "If a neural network is the result of a binary operation between two neural networks with a different number of layers, we can enforce the same number of layers by applying ReLU_\u221e and the multiplication by the identity matrix (either at the beginning, at the end, or in the middle) to the input that has fewer layers."}, {"title": null, "content": "Now that we have defined the basic tropical operations on neural networks, we can move on to answering the question: what is the neural network associated to a simplex/n-chain?\nLet In-1,1 be the (n - 1)-dimensional identity matrix with the last row repeated. Given a vector of dimension n, consider ReLU\u2212\u221e,...,-\u221e,0, the ReLU activation function with a parameter vector containing n - 1 coordinates with value-\u221e, and the last coordinate with value 0."}, {"title": "Lemma 3.", "content": "The neural network associated to the tropical polynomial of a chain is an iteration of transformations of the form:\nXi \u2192 Yi = ReLU-\u221e,...,-\u221e,0(Xi)\nand\nYiXi-1 = XiIi-1,1,\nwhere each Xi is a (1 \u00d7 i) vector and where Xn is the input."}, {"title": "Proof.", "content": "It follows from direct computation and Equation (8)."}, {"title": null, "content": "Row 2 and 3 of Table 2 show the resulting neural networks."}, {"title": null, "content": "A tropical polynomial can have several neural networks associated with them by Remark 4 and Remark 6. Poset tropical polynomials (in extended form) are the sum of tropical polynomials of linearizations, and all tropical polynomials of linearizations have the same number of monomials.\nWe choose a neural network representative of each tropical polynomial of a poset in a coherent way using Lemma 3, which describes the neural network associated to a linear order."}, {"title": "Definition 11.", "content": "An inception module [15, 24] is a network that takes an input vector x and sends it to k neural networks running in parallel, each of which returns a coordinate of the k dimensional output of the inception module."}, {"title": null, "content": "It is worth mentioning that the inception module is defined in an abstract manner, but a physical implementation requires ordering the linearizations of the poset/ neural networks that form the inception module."}, {"title": "Definition 12.", "content": "Let P be a poset with k linear orders, then a poset neural network is defined as the inception module formed by the k neural networks associated with each linear order of P."}, {"title": null, "content": "The function that maps x\nto xy\nis not a linear transformation, but an inception module allows us to take the input (x,y) and send copies of it, each of which can then be permuted in a different way."}, {"title": "Remark 7.", "content": "An alternative to the inception module is to allow for a nonlinear function to take a (n \u00d7 1) vector and return a (n \u00d7 1 \u00d7 k) matrix whose columns (in the k direction) are certain permutations of the input. An advantage of this permutation function is that the architecture of the neural network of a poset will consist of first the permutation, followed by the operations of Lemma 3 concatenated k times."}, {"title": null, "content": "Since a poset specifies uniquely its linearizations, the neural network of a poset is well defined up to the order of the networks in the inception module/the output of the permutation function."}, {"title": "1.3 Proposed Convolutional Filters", "content": "The max pooling operation [27] returns the maximum value in a certain region. It is well known that in this case there is a loss of information, specifically when there are several large values, as the pooling only selects one and ignores the other values. A second popular filter is the average pooling filter [16], which takes the average of inputs in a certain region. A drawback to this pooling filter is that if one value is large and the remaining ones are small, the output is close to the larger value divided by four, which in some situations may not be desirable. To address these and other issues, a third filter was suggested: mixed pooling [28], in which average pooling and max pooling are applied randomly.\nNow, looking at the back propagation step for the average pooling filter, the gradient from the next layer is equally distributed among all entries entering"}, {"title": null, "content": "the pooling layer (irrespective of whether they were zero or non-zero during the forward pass). In the case of the max pooling, if there are several entries that achieve the maximum or are close, max pooling passes the gradient to only one of them. Mixed pooling then either equally distributes the gradient or may not pass the gradient to relevant entries.\nWe propose a family of filters that are more precise during the back-propagation step."}, {"title": "Definition 13.", "content": "For any poset P with four points, we write its tropical polynomial in simplified form (using x \u2295 x = x). This expression represents a function which is a combination of the function max evaluated on a linear combination of variables with coefficients 0 or 1. We call this function the poset filter of P."}, {"title": null, "content": "For a given input \u03b10,0 \u03b10,1\n\u03b11,0 \u03b11,1\nthe corresponding filter of the disjoint union of four points, whose order polytope is the cube, computes all possible sums out of the four inputs, as seen in Equation (15).\nmax\n0,\nmax{ai,j},\ni,j\nmax {ai,j + \u03b1\u03ba,\u03b9},\ni,j,k,l\n(i,j)\u2260(k,l)\nmax {ai,j + ak,l + am,n},\ni,j,k,l,m,n\n(i,j)\u2260(k,l)\n(15)\n(i,j)\u2260(m,n)\n(k,l)\u2260(m,n)\na0,0 + a1,0 + a0,1 + a1,1"}, {"title": "Remark 8.", "content": "Let us have inputs of the form a00 = 0, a01 = 0.1, a10 = 1, and a11 = 2. During back propagation, the incoming vector will be distributed to the entries after multiplying the incoming vector by the entries values, a behavior that differs from that of the average pooling. Note also that if two entries of the input achieve the maximum value, both will pass the gradient. Poset filters are similar to maxout [10], without the need to train additional parameters."}, {"title": null, "content": "An immediate drawback of the filter associated with the disjoint union of points is the number of operations. We consider then the filter associated to the four chain, whose order polytope is the four simplex:\nmax{0, a1,1, a1,1 + a1,0, a1,1 + a1,0 + 0,1, a1,1 + a1,0 + 0,1 + a0,0}, (16)\nand the filter of the poset N, from Table 1:\nmax\n{\n0, \u03b11,1, \u03b11,0, \u03b11,0 + 21,1, 00,0 + \u03b11,0, \u03b11,0 + 20,1\n+ 01,1,\n20,0 + 21,0 + 21,1, 00,0 + 20,1 + a1,0 + a1,1\n}. (17)"}, {"title": null, "content": "Our experiments, detailed in Section 1.4.1, show that the simplex filter (or other 4-point posets) can be used instead of the filter of the disjoint union of points with a similar performance and fewer computations.\nIn Appendix A.6 we downsize images with the poset filters, assuming pixel values to be between -1 and 1.\nOne may wonder why posets are related to convolutional filters. According to Table 2, the tropical polynomial of a simplex consists of a tropical sum of monomials, where each monomial divides the subsequent one. This property, in the context of poset filters, means that each term of a filter (which is a linear combination of the inputs) considers one more input than the previous term. Due to the previous property, we decided to work with simplices. Finally, convexity of the union of simplices (sharing a line) is equivalent to working with order polytopes (see Lemma 1).\nPoset filters are closely related to Maxout networks [10], but they differ in that poset filters have fixed weights. One can also wonder if we really need the vectors of posets or if we can use random vectors instead. In Table 10 we show results of experiments when using random vectors and training a neural network with them. Although the average precision is lower than 78.92% (our best result), the accuracy with random vectors is still higher than average pooling, mixed pooling, and max pooling."}, {"title": "1.4 Review of experimental results", "content": null}, {"title": "1.4.1 Quaternion Neural Network", "content": "With respect to the CIFAR10 dataset, we have tested on a quaternion convolutional neural network. We aimed to conduct experiments by placing the poset filters in different locations within the convolutional part of the algorithm, and the quaternion architecture was convenient for this, as"}]}