{"title": "Enhancing Efficiency in Computational Intensive Domains via Redundant Residue Number Systems", "authors": ["Soudabeh Mousavi", "Dara Rahmati", "Saeid Gorgin", "Jeong-A Lee"], "abstract": "In computation-intensive domains such as digital signal processing, encryption, and neural networks, the performance of arithmetic units, including adders and multipliers, is pivotal. Conventional numerical systems often fall short of meeting the efficiency requirements of these applications concerning area, time, and power consumption. Innovative approaches like residue number systems (RNS) and redundant number systems have been introduced to surmount this challenge, markedly elevating computational efficiency. This paper examines from multiple perspectives how the fusion of redundant number systems with RNS (termed R-RNS) can diminish latency and enhance circuit implementation, yielding substantial benefits in practical scenarios. We conduct a comparative analysis of four systems- RNS, redundant number system, Binary Number System (BNS), and Signed-Digit Redundant Residue Number System (SD- RNS) and appraise SD-RNS through an advanced Deep Neural Network (DNN) utilizing the CIFAR-10 dataset. Our findings are encouraging, demonstrating that SD-RNS attains computational speedups of 1.27 times and 2.25 times over RNS and BNS, respectively, and reduces energy consumption by 60% compared to BNS during sequential addition and multiplication tasks.", "sections": [{"title": "I. INTRODUCTION", "content": "In recent years, technological advancements have led to an exponential increase in data generation, outpacing the computational capabilities of current systems. On the other hand, the efficiency of compute-intensive applications such as neural networks [1], digital signal processing, and image processing-heavily depend on the speed of computer arithmetic units like adders and multipliers. However, in conventional binary number systems (BNS), computation speed diminishes as the number of bits increases, primarily due to carry propagation. Consequently, innovative approaches utilizing unconventional number systems, such as the residue number system (RNS), redundant number system, and redundant residue number system (R-RNS), have been explored to boost performance and efficiency in computations. RNS has emerged as a significant topic in fast computer arithmetic. In this numerical system, multiplication and addition operations are decomposed into smaller, independent units with fewer bits, thereby reducing carry digit propagation compared to BNS- though carry propagation within each digit persists [2]. Furthermore, redundant number systems are instrumental in executing rapid computations. Their defining characteristic is eliminating carry propagation between digits during addition/subtraction operations. When integrated with residue arithmetic-especially in applications where core tasks hinge on addition and multiplication this attribute leads to more efficient computer arithmetic circuit implementations [4]. The advantages of R-RNS have been documented in several studies [3]. Similarly, SD-RNS (Signed-Digit Residue Number System) is noted for its speed and efficiency across various computational paradigms [4]."}, {"title": "II. SYSTEM OVERVIEW", "content": "This study compares the efficiency of addition and multiplication in hardware implementations, focusing on applications that require frequent arithmetic operations within a defined numerical range. It assesses four computational methods: BNS, RNS, Redundant Number Representation, and SD-RNS. An n digit SD integer, X = [xn\u22121, ...,0], xi \u2208 {1, 0, 1} has the value\n\n\u03a7 = \u03a3= x2\n\nThis representation offers multiple ways to represent an integer, making it a redundant number system. In this work, multiplier and adder circuits have been implemented in different systems using a {2n \u2212 1, 2n, 2n + 1} set of modules besides the BNS at various precisions. The adder and multiplier cells of SD and SD-RNS used in this project are circuits described in [3]. An SD adder consists of identical adder cells operating in parallel and independently of each other, while an SD-RNS adder requires a carry end-around operation. The main difference between SD and SD-RNS multiplier circuits is the number of input bits. In RNS, operands are first converted into remainders according to the modules of the system, which are smaller numbers. Arithmetic operations are performed on each remainder after redundant representation is applied to each remainder. The partial products ppi = (22i.(rpi)>m can be generated by rotation if the moduli are 2n, 2n \u2013 1 or 2n + 1 by using the rules in equation set Eq. 2. These rotations can be accomplished by wiring connections appropriately [3].\n\n(2\u0430.\u0443)2\u0440-1 = [\u0423\u0440-1-\u0430 ... \u0423\u043e\u0423\u0440-1 ... \u0423\u0440-\u0430]\n\n(2\u00ba. y)2p = [\u0423\u0440\u22121\u2212a \u2026\u2026 Yo0p-1 ... 0p-a]\n\n(2\u00ba. \u0423)2p+1 = [\u0423\u0440-1-\u0430 ... \u0423\u043e(-\u0423\u0440-1) ... (-\u0423\u0440-\u0430)]\n\np \u2265 a, y = [\u0423\u0440\u22121 ... Yo]\n\nThe RNS adder and multiplier for the selected set of modules comprise three adders and multipliers in channels 2", "2": 1, "follows": "n\nTTotal = {TFC}+x{Tadd} + y{TMul} + {TRC}"}, {"title": "III. EVALUATION", "content": "The performance assessment of the four numerical systems was conducted using AlexNet and VGG16 networks alongside the CIFAR-10 dataset. Results were analyzed for precisions of 16, 24, 32, and 64 bits, with channel sizes of n = 5, 8, 11, and 21 in the moduli set {2\u2033 \u2013 1, 2n, 2n + 1}.\n\nThe plots indicate that SD-RNS excels in applications with balanced numbers of consecutive additions and multiplications and in programs dominated by consecutive multiplications, owing to its rapid computation capabilities. Conversely, the redundant residue number system demonstrates superior speed for tasks focused exclusively on addition/subtraction operations, achieving addition in constant time irrespective of operand length. The analysis reveals that in all scenarios, the delay of SD-RNS is consistently lower than that of the RNS system. This table demonstrates that for various applications, which may require anywhere from no to many additions followed by multiplications, the most suitable number representation system-RNS, SD-RNS (or R- RNS), and SD-can be deduced from the table."}, {"title": "IV. CONCLUSION", "content": "In this research, we conducted a comparative study of four number representation systems and developed an SD-RNS- based architecture to improve the efficiency of DNN computational circuits, followed by a thorough performance evaluation. The implementation of SD-RNS in applications that rely solely on arithmetic operations, such as addition and multiplication\u2014encompassing digital signal processing systems, digital filters, encryption algorithms, and neural networks-results in a notable increase in computational speed and energy efficiency. The efficacy of the proposed architecture was assessed using the AlexNet and VGG-16 networks with the CIFAR-10 dataset. The findings reveal that SD-RNS achieves a 1.27-fold increase in calculation speed over RNS and a 2.25-fold enhancement over BNS. Additionally, this paper determines the most appropriate number representation system-RNS, and SD- RNS-based on the specific requirements of a wide range of applications, from those with minimal to extensive addition and multiplication operations."}]}