{"title": "Zero-X: A Blockchain-Enabled Open-Set Federated Learning Framework for Zero-Day Attack Detection in IoV", "authors": ["Abdelaziz Amara korba", "Abdelwahab Boualouache", "Yacine Ghamri-Doudane"], "abstract": "The Internet of Vehicles (IoV) is a crucial technology for Intelligent Transportation Systems (ITS) that integrates vehicles with the Internet and other entities. The emergence of 5G and the forthcoming 6G networks presents an enormous potential to transform the IoV by enabling ultra-reliable, low-latency, and high-bandwidth communications. Nevertheless, as connectivity expands, cybersecurity threats have become a significant concern. The issue has been further exacerbated by the rising number of zero-day (0-day) attacks, which can exploit unknown vulnerabilities and bypass existing Intrusion Detection Systems (IDSs). In this paper, we propose Zero-X, an innovative security framework that effectively detects both 0-day and N-day attacks. The framework achieves this by combining deep neural networks with Open-Set Recognition (OSR). Our approach introduces a novel scheme that uses blockchain technology to facilitate trusted and decentralized federated learning (FL) of the Zero-X framework. This scheme also prioritizes privacy preservation, enabling both CAVs and Security Operation Centers (SOCs) to contribute their unique knowledge while protecting the privacy of their sensitive data. To the best of our knowledge, this is the first work to leverage OSR in combination with privacy-preserving FL to identify both 0-day and N-day attacks in the realm of IoV. The in-depth experiments on two recent network traffic datasets show that the proposed framework achieved a high detection rate while minimizing the false positive rate. Comparison with related work showed that the Zero-X framework outperforms existing solutions.", "sections": [{"title": "I. INTRODUCTION", "content": "With the rapid development of computing and communi- cation technologies, we are witnessing a growing prevalence of Connected and Automated Vehicles (CAVs) in our mod- ern world. Internet of Vehicles (IoV) technology provides a crucial communication framework for CAVs, facilitating reliable communication between CAVs and other IoV entities, such as infrastructure, pedestrians, and smart devices. The fifth generation (5G) and the forthcoming sixth generation (6G) networks promise to revolutionize the IoV by enabling ultra-reliability with ultra-low latency and high bandwidth communications.\nWith the growing level of connectivity and complexity in the IoV, cybersecurity risks have become a major concern. Among these risks, Zero-day cyberattacks stand out as a significant threat. A zero-day attack refers to a new type of cyber attack that is unknown to both the general public and the cybersecurity experts [1]. This kind of attack exploits unknown vulnerabilities or uses innovative methods to evade detection by security mechanisms. Upstream [2], a cybersecurity and data management platform for CAVs has analyzed over 900 publicly reported cyberattacks on cars in the last decade. Examples of real-world cyberattacks can be found in [2], including instances where hackers could disable the brakes and kill a car's engine traveling at 65 mph using a laptop and custom-written software plugged into the OBD II port. In another case, hackers remotely controlled a Jeep's engine while driving on a highway. These incidents highlight the significant cybersecurity risks associated with IoV and the urgent need for robust cybersecurity measures to ensure the safety of vehicle occupants and other road users.\nTo mitigate cyberattacks in the context of the IoV, Artificial Intelligence (AI) has emerged as a crucial tool for cybersecu- rity. Machine Learning (ML) and Deep Learning (DL) based IDSs have been proposed to protect vehicular networks from cyber-attacks [3]. In ML, classification involves assigning data to predefined categories based on their features, using a trained model. This model, developed with a labeled dataset, learns to recognize patterns indicative of each class for predicting unlabeled data. In a real IoV environment, zero-day attacks will inevitably occur frequently. However, existing IDSs [4]\u2013 [6] are typically designed for static and closed-set scenarios. Assuming that all possible attack types an intrusion can belong to are known and predefined during the training phase of the IDS. However, this assumption is unrealistic as new types of attacks are constantly emerging. The majority of current IDSS rely on Supervised Learning (SL), a method that can prove to be inefficient in effectively identifying unknown attacks characterized by patterns substantially divergent from those observed during the training phase.\nTo enable the detection of zero-day attacks, anomaly and novelty detection techniques have been used [7]\u2013[9]. Although the solutions based on these techniques yield promising results in detecting unseen/ zero-day attacks, they can unfortunately not recognize the type of detected attacks. This poses a substantial challenge in the development of a security mecha- nism capable of identifying known (N-day) attacks while also"}, {"title": "", "content": "detecting emerging zero-day (0-day) attacks.\nOpen-Set Recognition (OSR) [10] offers a realistic approach in a dynamic field like intrusion detection. This method equips models to manage both known and unexpected attack types, considering the limitations of incomplete training data and the possibility of encountering new attack types after training. OSR emphasizes the need for classifiers to be both accurate and flexible, adapting to scenarios where test samples may include previously unseen attack types. This adaptability is crucial for effectively responding to the continuously evolving nature of such fields. In recent years, combining deep neural networks with open-set recognition has led to significant advances in detecting unknown classes in computer vision [11]\u2013[13]. However, this approach has yet to be fully utilized in intrusion detection. While some studies have explored the application of open-set recognition in this context [14], [15], to the best of our knowledge, OSR has never been leveraged to detect 0-day attacks in IoV.\nRecent IDSs [6], [16]\u2013[18] leveraged the potential of Federated Leaning (FL) paradigm to train the detection model in a distributed and privacy-preserving manner. FL enables collaborative training of the model without requiring the trans- mission of raw data, which enhances participants' data privacy. Due to centralized model aggregation, however, standard FL is susceptible to server failures and external attacks, which can result in inaccurate detection model updates or training failures.\nTo address the limitations mentioned in existing IDSs within the IoV environment, this paper introduces the Zero-X frame- work. This security framework effectively identifies both 0- day and N-day attacks by integrating deep neural networks with Open-Set Recognition (OSR). Our approach introduces a pioneering scheme that utilizes blockchain technology to facilitate secure and decentralized federated training of the Zero-X framework. The framework not only guarantees high accuracy but also ensures fast detection, which is a critical factor in mitigating the impact of attacks. The Zero-X frame- work is designed to detect and classify attacks solely based on network traffic. Its device-agnostic nature makes it suitable for deployment on both CAVs and Multi-access Edge Computing (MEC) infrastructure. Its purpose is to secure CAVs against inter-vehicular attacks while protecting the MEC infrastructure from possible attacks, including Distributed Denial of Service (DDoS) attacks, that may originate from compromised CAVs. In summary, the main contributions of this paper are:\n\u2022 Our proposed framework uses unsupervised privacy- preserving FL to train an attack detection (AD) model. Specifically, we use a Deep Auto-Encoder (DAE) to model the expected communication pattern of CAVs and detect any deviations from this pattern as malicious activity. This approach is highly effective in detecting various types of attacks, as opposed to existing methods that require separate training for each new attack.\n\u2022 The Zero-X framework leverages open-set federated learning to train the attack classifier (AC) model, a deep multi-class data descriptor that aims to identify a spherical decision boundary for each type of attack. This boundary determines whether a network flow belongs to a"}, {"title": "", "content": "given attack type, making it effective in detecting unseen attacks while accurately identifying known attacks. To the best of our knowledge, this is the first work to leverage OSR in combination with FL for intrusion detection in the context of the IoV.\n\u2022 We propose a new training scheme utilizing blockchain technology to empower the federated learning, enhancing the security and decentralization of the Zero-X frame- work's training process. Our contribution lies in the introduction of an innovative Byzantine Fault Tolerance consensus mechanism named Proof-of-Accuracy (PoA). This mechanism plays a pivotal role in guaranteeing the secure dissemination and aggregation of FL model updates.\n\u2022 The framework's effectiveness is thoroughly assessed by extensive evaluations on two recent datasets. The first dataset, 5G-NIDD [19], comprises 5G network traffic traces of attacks that target the infrastructure (MEC). The second dataset, VDoS [20], contains network traffic origi- nating from inter-vehiclar attacks. To create a realistic test scenario, we designate one type of attack as the 0-day attack, while the remaining attack types are considered as N-day attacks.This process is repeated with different 0-day attacks, resulting in K test scenarios per dataset, where K represents the number of attack types in the dataset.\nThe remainder of this paper is outlined as follows. Sec- tion II provides an overview of the related work. Section III introduces the system design of the framework. In Section IV, we present in detail the development and operation of the framework. The performance evaluation results are depicted in Section V. Finally, Section VI concludes the paper."}, {"title": "II. RELATED WORK", "content": "The development of IDS for IoV has gained significant attention in recent years due to its criticality in ensuring the security and privacy of these connected systems. A security framework [5] is proposed for efficient cyber-attack detection in the intravehicle networks (IVN) and External Vehicular Networks (EVNs). To differentiate cyberattack patterns more easily, Anbalagan et al.'s [21] IDS framework transforms vehi- cle network data into images, enhancing attack identification. However, both approaches rely on centralized learning, which raises privacy concerns within the broader context of the IoV, as data collection could potentially infringe on user privacy.\nUprety et al. [16] introduced a FL-based collaborative IDS, enabling CAVs to train Deep Learning (DL) models on locally labeled datasets and share model parameters with a central FL server for global model aggregation. Similarly, Hbaieb et al. [18] proposed an IDS for CAVs combining Software-Defined Networking (SDN) and FL, where SDN controllers train local models using data from CAVs, and global model aggregation is performed on a central cloud server. Both approaches [16], [18] rely on a central server, presenting risks as potential attack targets and single points of failure. There is also the risk of attackers intercepting and observing model updates during network transmission. Differently, Boualouache et al. [6] pro- posed an FL-based privacy-preserving IDS using multiple FL"}, {"title": "", "content": "servers for global model aggregation. However, this solution, along with the previous ones [16], [18], do not consider the risk of a compromised FL client poisoning the model during training. To address these challenges, Zero-X employs differential privacy and blockchain technology, facilitating decentralized and privacy-enhanced federated training of the framework. Additionally, it incorporates a Byzantine Fault Tolerance consensus mechanism, named Proof-of-Accuracy (PoA), to ensure secure dissemination and aggregation of FL model updates.\nLiu et al. [17] introduced an FL-based IDS that incorporates a blockchain-based incentive mechanism to mitigate adver- sarial attacks. In this system, CAVs function as FL clients, building models from their locally labeled datasets, with Roadside Units (RSUs) aggregating the global models. How- ever, this approach's reliance on a simple MLP (Multi-Layer Perceptron) network for the classification task in intrusion detection may not be sufficiently effective in detecting new attack patterns. To classify various attack types, Abdel-Basset et al. [4] presented FED-IDS, a Blockchain-enabled FL IDS utilizing a transformer network, capable of understanding the spatial and temporal patterns of traffic flows in vehicles. How- ever, the authors acknowledge practical challenges with their consensus mechanism, such as divergence, limited efficiency, and high computational demands. Lai et al. [22] introduced a FL and Edge Cloud communication architecture (FL-EC) and a Feature Select Transformer (FSFormer) model for robust intrusion detection in the IoV. Yet, they recognize that this model comes with the drawback of high computational costs.\nThe aforementioned FL-based IDSs operate under the as- sumption that CAVs possess labeled datasets for FL rounds, an assumption that might be unrealistic due to the general ab- sence of pre-labeled malicious traffic data. Additionally, these systems often assume an IID (Independent and Identically Distributed) configuration for classifier training, which may not reflect the significant imbalances in real-world training data, a known factor adversely affecting collaborative detection performance. Moreover, their dependence on closed-set and supervised learning methods limits the detection of unseen and zero-day attacks. In contrast, our framework employs a more realistic configuration, recognizing that CAVs typically do not have traffic labeling functions and considering the case of non-IID training data. Additionally, Zero-X enhances attack detection, including zero-day attacks, by integrating deep neu- ral networks with Open-Set Recognition (OSR) capabilities.\nTo detect zero-day attacks in the IoV, Khan et al. [23] introduced an IDS using state-based Bloom filters and a bidirectional LSTM classifier for detecting cyber-attacks in both In-Vehicle and external networks. This approach, how- ever, necessitates a considerable number of observations for high detection accuracy, and its detection rate for certain attack types is lower compared to other methods. Other recent studies [8], [24], [25] have focused on detecting zero-day attacks in Intra-Vehicular Networks. Jeong et al. [8] utilized autoencoders to process live streams in CAN (Controller Area Network) message payloads. However, X-CANIDS [8] might face limitations in effectively detecting suspension attacks, which are typically identified by time-interval or sequence-"}, {"title": "", "content": "based IDSs. In their respective works, Agrawal et al. [24] and Yang et al. [25] employed unsupervised learning and anomaly- based IDS for CAN message analysis. While the approaches [8], [23], [24] enable zero-day attack detection, they fall short in identifying the types of N-day attacks. Their effectiveness is further constrained by the lack of shared CAN databases among carmakers. Moreover, their dependence on centralized learning poses privacy concerns, where data collection could infringe on user privacy. In contrast, Zero-X, with its OSR detection model, enables the detection of zero-day attacks and the identification of N-day attacks. Additionally, it respects user privacy through federated learning, eliminating the need for data collection."}, {"title": "III. SYSTEM DESIGN", "content": "This section introduces the system model, seamlessly putting in collaboration different CAVs with SOCs. It il- lustrates the synergy operation between them through the Blockchain-enabled collaborative training of the Zero-X Framework. Furthermore, an exploration of the system's ad- dressed threat model will also be presented."}, {"title": "A. System Model", "content": "Our framework enables privacy-preserving collaboration among multiple CAVs and Security Operation Centers (SOC) that may be owned by different stakeholders within the ITS ecosystem, as illustrated in figure 1. To participate in the federated training process, the SOCs deploy MEC servers on strategically placed Base Stations (BSs). The system model is composed of three main elements with different roles which can be summarized as follows:\n1) CAVs: are tasked with training the Attack detector (AD) model using their own local dataset, which exclusively consists of benign traffic, as CAVs typically lack traffic labeling functions. When a CAV drives near a BS, it can download and read the last block of the blockchain to get the latest global AD model. Acting as FL workers, each CAV conducts the learning process using its own On Board Unit. The CAV trains the global model on its local data and adds a specific amount of Gaussian noise to the trained parameters before sending them back to the BS. This technique, known as differential privacy, protects the privacy of CAV's native data from honest-but- curious MEC nodes.\n2) MECs: play a crucial role in validating and aggregating AD model updates that are received from CAVs. During the training of the Attack Classifier (AC) model, each MEC is assigned one of three roles: worker, validator, or miner. As a worker, the MEC trains the AC model using its local dataset, which includes labeled malicious network flows. Given that SOCs are equipped with cyber threat intelligence tools, it is reasonable to assume that they possess labeled samples of malicious network traffic. As a validator, the MEC ensures the accuracy of transactions and validates blocks that are proposed by miners. Finally, as a miner, the MEC is responsible for creating new blocks during the consensus process.\n3) Blockchain: to ensure secure and transparent FL model updates, the framework uses blockchain technology for AD"}, {"title": "B. Threat Model", "content": "We consider three categories of potential cybersecurity attacks that could target the IoV ecosystem. These include inter-vehicle attacks, attacks against the MEC infrastructure, and attacks against the intrusion detection mechanism itself.\n\u2022 Inter-vehicular attacks: our threat model considers sce- narios where one or colluding internal/external malicious CAVs launch DoS/DDoS attacks affecting the availability of the CAV and the network. For example, a colluding malicious CAVs can perform flooding attacks against a target CAV, aiming to overwhelming its capacity and preventing legitimate traffic from being processed. For comprehensive information on examples of attack sce- narios please refer to [3].\n\u2022 Attacks against the MEC infrastructure: MEC handles sensitive and valuable data, making it a target for various network attacks from both internal and external sources [26]. As a crucial component of the IoV ecosystem its security is essential for ensuring the overall security of the IoV. Hackers could potentially create an IoV botnet [27] by compromising a group of CAVs and using them to launch DDoS attacks on the MEC infrastructure. Such attacks are similar to DDoS attacks based on IoT bots.\n\u2022 Attacks against the detection framework: one potential threat against the security framework is attacks on the framework's detection capabilities. This could happen during the training phase, where malicious CAVs or compromised MECs may be selected as FL workers. If this occurs, the attackers could attempt to undermine the collaborative learning process by injecting malicious"}, {"title": "", "content": "updates during the global model aggregation, which is known as a poisoning attack [28]. Additionally, attackers may also try to infer sensitive information from the model parameters through an inference attack [29]. Both types of attacks can significantly compromise the accuracy and effectiveness of the security framework."}, {"title": "IV. PROPOSED ZERO-X FRAMEWORK", "content": "This section details the Zero-X framework. It begins with a presentation of the framework overview. Following this, the flow extraction and feature engineering processes are described. Then, the attack detection process and subsequent attack classification phase are explained. Finally, we will present the proposed blockchain-enabled FL scheme to ensure secure sharing and aggregation of model updates."}, {"title": "A. Zero-X Overview", "content": "During the development phase, the AD and AC models are trained independently on the network flows using a decen- tralized FL approach, as illustrated in Figure 2. First, network flows are extracted from collected raw network traffic, and then a set of features is calculated for each flow. The AD model is designed as a deep auto-encoder (DAE) trained exclusively on benign traffic data. On the other hand, the AC model is a deep multi-class data descriptor [30] trained on the MEC's local dataset, which includes labeled malicious network flows. During the deployment phase,as illustrated in Figure 2, the flow collector monitors incoming and outgoing packets. The preprocessing module extracts network flows from the raw traffic data, according to a specific Time Window (TW), and generates a vector of features. This features vector is then sent to the AD module, which evaluates the flow as benign or malicious. The framework's attack classifier module further examines any malicious flows detected by the AD to determine if they correspond to a new (0-day) or existing (N-day) attack."}, {"title": "B. Flow extraction & features engineering", "content": "First, we use a combination of five properties from the packet header, including the network and transport layer headers of the TCP/IP protocol stack, to identify a traffic flow. These include the source IP address, the destination IP address, the source port number, and the destination port number, as well as the protocol. For each flow extracted, a set of features are calculated according to a given time window (ex. 10 seconds). Flow features include mainly packet header characteristics and statistics computed based on header information of network and transport layers. This set of features is then used as a features vector."}, {"title": "C. Attack Detector", "content": "As a CAV runs a set of well-known applications such as those related to safety, convenience, and commercial use, its communication pattern should exhibit a high degree of regularity as long as it is not under attack or experiencing any faults. Conversely, any attack on the CAV's system would inevitably alter its communication pattern. Hence, we use a Deep Auto-Encoder (DAE) to model the expected communi- cation pattern of the CAV and detect any attacks as anomalous occurrences. The DAE model [31] is an unsupervised model that compresses input vectors as code vectors using a set of recognition weights and then converts back to $m$ ($m < d$) number of neurons reconstructed input vectors using a set of generative weights. An AE architecture has two major parts: the encoder and the decoder. The encoder reduces the dimension of the input vectors ($x_i \\in \\mathbb{R}^d$) to numbers of neurons that form the hidden layer. The activation of the neuron i in the hidden layer is given by:\n$h_i = f_\\theta(x) = \\sigma( \\sum_{j=1}^n W^{input} x_j + b^{input})$\nwhere X is the input vector, $\\theta$ is the parameters $W^{input}, b^{input}$, W is an encoder weight matrix of dimension"}, {"title": "", "content": "mxd, while b is a bias vector of dimension m. Thus, the input vector is encoded to a vector with fewer dimensions. The decoder maps the low-dimensional hidden representation $h_i$ to the original input space $\\mathbb{R}^d$ by the same transformation as the encoder. The function of mapping is as follows:\n$x'_i = g_{\\theta'}(h) = \\sigma(\\sum_{j=1}^n W^{hidden} h_j + b^{hidden})$\nThe set of decoder parameters is $\\theta'(W^{hidden} h_j + b^{hidden})$. The objective of an autoencoder is to minimize the reconstruc- tion error relative to $\\theta$ and $\\theta'$ :\n$\\theta^*,\\theta'^* = argo_{\\theta,\\theta'} min \\frac{1}{n}\\sum_{i=1}^n(x_i, x'_i)$\n$\\theta^*,\\theta'^* = argo_{\\theta,\\theta'} min \\frac{1}{n}\\sum_{i=1}^n(x_i, g_{\\theta'} (f_\\theta(x_i)))$\nThe reconstruction error is utilized as the anomaly score. Network flows with significant reconstruction errors are re- garded as malicious flows (anomalies). Only benign flows are used to train the DAE model. After training, the DAE model will reconstruct benign flows exceptionally well, but not malicious flows that it has never seen. Algorithm 1 shows the anomaly detection process using the reconstruction errors of the DAE model. The threshold, a, is the mean squared error (MSE) median, and the sample's C times the MSE Median Absolute Deviation (MAD) over the validation set. MAD uses the deviation from the median, which is less likely to be skewed by outlier values.\nIn Algorithm 1, the DAE training complexity is O(n \u00d7 m) (lines [1-2]), where n is the number of samples and m the count of weighted connections. RE computations for datasets (lines [3-4]) and median determination using a specialized algorithm (lines [5 - 6]) have a linear complexity of O(N). The testing phase functions $g_\\theta$ and $f_\\theta$ (lines [7 - 9]) also operate"}, {"title": "D. Attack Classifier", "content": "To identify the type of the detected attack (N-day), or eventually determine if it is an unseen or 0-day attack, we leverage the potential of OSR through FL. In this paper, we use deep multi-class data description method, called Deep- MCDD [30], as it can accurately classify in-distribution (ID) samples into known classes and detect out-of-distribution (OOD) samples as well. This method seeks to identify, for each class, a spherical decision boundary that determines whether a test sample belongs to the class or not. Deep-MCDD integrates K hypersphere-modeled one-class classifiers into a single network. The objective of learning a single hypersphere is to assess whether or not a test sample belongs to the target class; hence, training it for each class is useful for recognizing OOD samples that do not belong to any given class. Each sample from a K-th class-conditional distribution can be considered as an isotropic Gaussian distribution with class mean $\\mu_k$ and standard deviation $\\sigma_k$ within the latent space, denoted by $N(\\mu_k, \\sigma_k I)$. Using the resulting distributions, the class-conditional probabilities are calculated. This reflects the likeli- hood that an input sample is drawn from each distribution, and this probability can serve as a good confidence measure [30]. Based on the K-th class conditional distribution, the distance function D can be defined in Equation 5:\n$D_k(x) \\approx \\frac{||f(x; W) \u2013 \\mu_k ||^2}{2\\sigma^2_k} + log \\sigma^d_k$\nThe Deep MCDD loss is defined as a Maximum A Posteriori (MAP) loss estimation of the generative classifier as defined"}, {"title": "", "content": "in Equation 6:\n$Loss = \\frac{1}{N} \\sum_{i=1}^N log[\\sum_{k=1}^K exp(-D_k(x_i) + b_k)] - \\frac{1}{N} \\sum_{i=1}^N exp(-D_{y_i}(x_i) + b_{y_i})$\nThe objective can be defined as follow:\n$\\underset{W, \\mu_k, \\sigma_k, b_k}{min} [\\frac{1}{N} \\sum_{i=1}^N log[\\sum_{k=1}^K exp(-D_k(x_i) + b_k)] - \\frac{1}{N} \\sum_{i=1}^N exp(-D_{y_i}(x_i) + b_{y_i})]$\nThe training can be seen as minimizing the intra-class de- viation in the embedded space. The four trainable parameters used in the objective, that is, DNN weights (W), class means ($\\mu_{class}$), standard deviations ($\\sigma_{class}$), and biases ($b_{class}$), can be optimized simultaneously and effectively using mini-batch SGD and gradient back-propagation. The confidence score S(x) represents the distance between a test sample and the closest class-conditional distribution in the latent space. The $C_s$ represents the minimum value of the confidence score calculated on the training set. If the confidence score S(x) of a network flow x is less than $C_s$, then it is considered an unseen/ 0-day attack. Otherwise, we predict the class label of an input sample to the class with the highest posterior probability $\\hat{y}(x)$. The procedure of training and testing the attack classifier is described in detail in Algorithm 2."}, {"title": "E. Blockchain-enabled Federated Training", "content": "To ensure the secure and decentralized federated training of both AD and AC models, we use blockchain technology. In our framework, updates of both models are recorded on the same blockchain, while their training is performed in- dependently. Integrating blockchain with FL requires careful selection of the blockchain type and consensus protocol, as they significantly impact scalability, latency, complexity, and cost. Public blockchains face issues like scalability limitations and high latency. Private blockchains improve scalability and latency but may reduce decentralization and privacy. Consor- tium blockchains, which Zero-X employs, strike a balance, making them well-suited for our system. Zero-X utilizes"}, {"title": "", "content": "a consortium blockchain featuring a novel Byzantine Fault Tolerance consensus mechanism known as Proof-of-Accuracy (PoA). This mechanism ensures secure sharing and aggrega- tion of model updates. Our approach strategically prioritizes scalability, latency, and security, with a slight compromise in decentralization. We consider two types of nodes within the blockchain network:\n\u2022 Passive node: refers to CAVs that solely download and read blocks without actively participating in the consen- sus process.\n\u2022 Active node: refers to MECs actively participating in the consensus process. In each round, every MEC is assigned to one of the following roles: worker, validator, and miner. A worker participates in the FL of the AC model and aggregates local AD model updates received from CAVs before relaying them. A validator node checks the correctness of transactions, and validates miner-proposed blocks. The miner is responsible for creating a new block during the consensus round.\nThe node's identifier (ID) is its public key. This key is used to verify the signatures of transactions or blocks created by the device. The following outlines the process of selecting miners and validators in each round. The role-switching policy guar- antees that miners and validators are re-selected for each new round, thereby minimizing the likelihood of a compromised MEC being repeatedly assigned to a validator or a miner role.\n1) Federated Training: In our framework, updates of both models are recorded on the same blockchain. However, it is worth noting that sharing AD model updates from CAVs to MEC is done off-chain to enhance the scalability of the system. This approach allows faster and more efficient communication without overburdening the main blockchain with every AD up- date. We assume that a reference dataset $B_{Test}$ containing only"}, {"title": "", "content": "benign network flows has been provided to all participating MECs. Each CAV extracts the AD model from the blockchain, then trains it on its local dataset. After local training, each CAV sends the model updates to the adjacent MEC node. Since an adversary may attempt to infer the data at the i-CAV from its uploaded updates, we use differential privacy to enforce privacy-preserving of local updates. After completing the local training, a CAV\u00bf will add a specific quantity of Gaussian noise to the trained parameters $w_t$. As outlined in Algorithm 3, after clipping the gradient $w_t$: $w_{t+1} \\leftarrow w_{t+1}/max(1, ||w_t^\\parallel||)$, where C denotes the gradient norm bound, an additive noise $\\eta t$ is added to $w_t$. Then, the noised updates $w'_t$ are sent to the adjacent MEC node. To avoid model poising, the MEC node will first check the AD model updates $AD_{Up}$ on $B_{Test}$. The model is considered to be valid when the gap between $l(w_t)$ and $l(w_{t-1})$ locates within a certain range $\\delta$.\nWhen a MEC node is designated as a worker, it lever- ages its local dataset to train the AC model retrieved from the blockchain. Upon completing the training, the worker generates two transactions: TAD, which includes the AD model update (computed based on the aggregated updates received from the CAVs), and TAC, which contains the AC model's local updates. Both transactions are signed with the worker's private key and transmitted to the validator nodes. The procedure of federated training of the AD and AC models is described in detail in Algorithm 3.\n2) Proof-of-Accuracy Consensus Mechanism: In our pro- posed blockchain framework, collaboration among MECs is achieved through a consensus process where model updates are shared, packaged into blocks, and validated by a group of validators. To ensure the consensus process is efficient and secure, we introduce a lightweight consensus mechanism called Proof-of-Accuracy (PoA), which is inspired by the Delegated Byzantine Fault Tolerance (dBFT) algorithm [32]. The PoA mechanism involves selecting a set of validator nodes (delegates) based on their contributions to improving the model's accuracy. We assume a total of 3f + 1 validators, where f is the maximum number of validators that can be faulty. Among these validators, one is designated as the miner. The detailed design of the PoA mechanism is explained in the following three steps.\na) Collecting and verifying transaction: When a valida- tor receives a transaction, it first verifies its signature. Then, it creates a test model $M_{Test}$ with the update, which it evaluates on its local dataset (for AC transactions) or on the reference dataset $B_{Test}$ (for AD transactions). Next, it calculates the accuracy gain $ACC_{gain}$ of a transaction using the equation 8, with the $G_{j-1}$ representing the global model constructed in round $R_{j-1}$. Validators exchange $ACC_{gain}$ values for all transactions with each other. The final score of $ACC_{gain}$ value for a given transaction is the sum of the $ACC_{gain}$ values calculated by all validators. At the end of the validation process, all validators will have the same list of transactions with their respective $ACC_{gain}$ values.\n$ACC_{gain} = ACC(M_{Test}) \u2013 ACC(G_{j-1})$"}, {"title": "", "content": "b) Generating Blocks: The MEC assigned with the miner's role is responsible for creating a new block. Once the FL process has expired, the miner collects TAD and TAC transactions, including their corresponding $ACC_{gain}$, from the transaction pool. These transactions are then combined to form a candidate block. The miner signs the block with its private key, before broadcasting it to the other validators in the network."}, {"title": "V. PERFORMANCE EVALUATION", "content": "In this section, we will assess the effectiveness of the Zero-X framework by conducting a thorough evaluation on two recent datasets. The first dataset, 5G-NIDD [19], con- sists of 5G network traffic traces of attacks that target the MEC infrastructure. The second dataset, VDoS [20], contains network traffic originating from inter-vehicle attacks. After briefly introducing the datasets and the experimental setting, we analyze the detection performance in detail. We also test various time-window (TW) sizes as it directly impacts the detection delay. Further, we will comprehensively analyze the identification performance of N-day and 0-day attacks. We then evaluate the performance of the blockchain system, and present the incentive mechanism's performance. Next, we present a security analysis of the Zero-X framework. Finally, we compare our approach with existing solutions in the literature."}, {"title": "A. Datasets", "content": "The 5G Network-Intrusion Detection and Defense (5G- NIDD) dataset [19] comprises data collected from a 5G testbed connected to the 5G Test Network at the University of Oulu in Finland. The testbed consists of two base stations, each equipped with an attacker node and multiple benign 5G users. The attacker nodes simulate various attack scenarios against"}, {"title": "B. Experimental setting", "content": "To extract flows and calculate features from raw traffic (PCAP files)", "33": "a popular flow traffic exporters. For a more comprehen- sive understanding of the list of features and their correspond- ing descriptions", "7": ".", "parts": 60}]}