{"title": "Auto-bidding in real-time auctions via Oracle Imitation Learning", "authors": ["Alberto Chiappa", "Zhao Wang", "Briti Gangopadhyay", "Shingo Takamatsu"], "abstract": "Online advertising has become one of the most successful business models of the internet era. Impression opportunities are typically allocated through real-time auctions, where advertisers bid to secure advertisement slots. Deciding the best bid for an impression opportunity is challenging, due to the stochastic nature of user behavior and the variability of advertisement traffic over time. In this work, we propose a framework for training auto-bidding agents in multi-slot second-price auctions to maximize acquisitions (e.g., clicks, conversions) while adhering to budget and cost-per-acquisition (CPA) constraints. We exploit the insight that, after an advertisement campaign concludes, determining the optimal bids for each impression opportunity can be framed as a multiple-choice knapsack problem (MCKP) with a nonlinear objective. We propose an \"oracle\" algorithm that identifies a near-optimal combination of impression opportunities and advertisement slots, considering both past and future advertisement traffic data. This oracle solution serves as a training target for a student network which bids having access only to real-time information, a method we term Oracle Imitation Learning (OIL). Through numerical experiments, we demonstrate that OIL achieves superior performance compared to both online and offline reinforcement learning algorithms, offering improved sample efficiency. Notably, OIL shifts the complexity of training auto-bidding agents from crafting sophisticated learning algorithms to solving a nonlinear constrained optimization problem efficiently.", "sections": [{"title": "1 Introduction", "content": "Online advertising is a cornerstone of the internet economy. In the US alone, internet advertising revenues reached $225 billion in 2023, with a 7.3% year-over-year increase\u00b9. Advertisement impression opportunities (IOs) arise from user actions, such as visiting web-pages or scrolling social media feeds [34]. Advertisement slots are usually allocated via real-time bidding (RTB) [23], where multiple advertisers compete in an auction to win IOs (e.g., sponsored links in an online search) and show their advertisement [42]. Each advertiser can employ a customized bidding strategy, to optimize their specific key performance indicators (KPI), such as engagement, visualizations, clicks and conversions. Bidding strategies adhere to budget and to cost-per-acquisition (CPA) constraints (i.e., how much the advertiser is ready to spend in total and per unit of KPI)."}, {"title": "2 Related work", "content": "Bid optimization has been thoroughly studied both in industry and academia [9, 11, 15, 25, 46]. Early research focused on sponsored search [8, 22] or on using contextual information to optimize advertisement bids. However, with the popularity of RTB [23] and the progressively wider availability of user information, more recently targeted advertisement has become the predominant framework in online advertising [34].\nOptimal bidding in online advertising. Different approaches have been experimented, with varying popularity over the years. Ou et al. [24] show that rule-based methods [10, 20, 45] have been replaced over time by prediction methods coupled with optimization algorithms [1, 3, 12], while reinforcement learning (RL) has recently become more common [14, 21, 35, 47]. Different works focus on specific aspects of online advertising, such as single constraint [4, 37], multiple constraints [14, 32, 33] or multiple agents [16, 36]. In this work, we focus on the problem of a single agent bidding in second-price auctions, with a single optimization target and a budget constraint. The target incorporates the trade-off between acquisition volume (number of conversions) and cost-per-acquisition (CPA), as proposed by Xu et al. [40].\nAuto-bidding in second price auctions. A core component of advertisement bidding is estimating the utility value V = K \u00d7 \u03bc of each IO, where K is the target CPA and u is the acquisition rate [39]. K is a parameter selected by the advertiser, stating how much it is ready to pay for an acquisition, while u can be a function of the advertiser, the potential customer and the context [38, 41, 42, 46]. It can be either estimated by the advertisement platform or by the advertiser itself [7]. V defines the fair value of an IO [39]. Theoretical results prove that bidding equal to the fair value (truth-telling) is optimal for second-price auctions, under the assumption of infinite budget [19, 29]. However, when the budget is limited, it might be convenient to bid below the fair value, to increase the acquisition efficiency [13], or even above the fair value, if the advertiser can"}, {"title": "3 Dataset and simulator", "content": "Open-source bidding datasets have historically been limited in size and feature diversity [24], and usually focus on predicting the click and conversion probability [7]. Consequently, no common benchmark for auto-bidding agents exists, and recent works"}, {"title": "4 Oracle policy", "content": "The core of OIL is an oracle policy designed to identify the optimal set of slots to maximize acquisitions (e.g., clicks, conversions), given the entire information about the advertisement campaign. This problem can be modeled as a MCKP with nonlinear objective. By retrospectively analyzing campaign data (costs and conversion probabilities), the oracle determines how to improve the agent's actions. Unlike reward-based methods, which face challenges dealing with sparse conversions and noisy estimates, this approach offers robust supervision by leveraging perfect information in hindsight."}, {"title": "4.1 MCKP formulation", "content": "The problem of finding the optimal set of slots can be formulated as the following nonlinear stochastic integer optimization problem:\nmaximize  $U = \\mathbb{E} \\min \\left\\{1, \\left( K \\frac{\\sum_{t,i,d} A_{t,i,d} x_{t,i,d}}{\\sum_{t,i,d} C_{t,i,d} x_{t,i,d}} \\right)^2 \\right\\}$ \nsubject to $\\sum_{t,i,d} C_{t,i,d} x_{t,i,d} \\leq B,$\n$\\sum_{d} x_{t,i,d} \\leq 1 \\quad \\forall t, i,$ \n$X_{t,id} \\in \\{0, 1\\},$                                                                        (1)\nwhere\n\u2022 xt,i,d: A binary variable indicating the outcome of a bid. Xt.id = 1 if the agent wins the slot d for impression i at time step t, and xt,id = 0 otherwise.\n\u2022 At,i,d: A Bernoulli random variable representing an acquisition event, with mean \\beta_{t,i,d}, which indicates the probability of acquiring a conversion upon winning the slot.\n\u2022 Ct,i,d: The cost of slot d for impression (t, i). It is defined as $C_{t,i,d} = k_{t,i,d} H_{t,i,d}$, where $k_{t,i,d}$ is the cost of the slot (as determined by the second price auction), and $H_{t,id}$ is a Bernoulli random variable with parameter ha representing the probability of the ad being exposed (exposure probability), which only depends on the slot position d).\n\u2022 B: The total budget constraint for the campaign.\n\u2022 K: The target cost-per-acquisition (CPA) constraint.\n\u2022 \\beta_{tid}: The mean acquisition probability, a Gaussian random variable $\\mathcal{N}(H_{t,i,d} \\mu_{t,i}, \\sigma^2_{t,i})$, clipped between 0 and 1. \u00b5t,i and \\sigma_oti are the mean and standard deviation of the conversion probability for impression (t, i).\nThe objective U, proposed by Xu et al. [40] is the product of the total acquisitions $\\sum_{t,i,d} A_{t,i,d} x_{t,i,d}$ and a penalty coefficient"}, {"title": "4.2 Heuristic algorithm", "content": "Exact solutions to Problem 2 are computationally infeasible for campaigns involving hundreds of thousands of IOs, such as the ones in the Alimama dataset. Instead, we employ a greedy heuristic approximation. Inspired by knapsack problem solutions, the algorithm ranks slots by efficiency (e.g., conversion probability over cost, $u_{t,i}/k_{t,i,d}$) and selects slots until the budget is exhausted. Expected conversion probabilities and costs are adjusted for exposure probabilities since conversions and costs only occur when ads are displayed (effective conversion probability $\\bar{\\mu}_{t,i,d} = \\mu_{t,i}h_d$ and effective cost $\\bar{k}_{t,i,d}= k_{t,i,d}h_d$). This ranking approach leads to an efficient utilization of the budget and controls the CPA (which is, in fact, a measure of efficiency), but the multiple-choice nature of the problem adds complexity. Algorithm 1 maintains the structure of standard knapsack heuristics [6, 17], with two main blocks: advertisement slot ranking by efficiency (lines 3-12) and accumulation of slots until the budget is over (lines 14-24). However, it presents three key modifications:\n1. Efficiency measure. Slots are ranked by a generic efficiency function $f(k_{t,i,d}, \\mu_{t,i}, A_{ct,i,d}, A_{mt,i,d})$, depending on the cost $k_{t,i,d}$, the conversion probability $p_{t,i}$, the slot upgrade cost $A_{ct,i,d} = k_{t,i,d} - k_{t,i,d+1}$ and slot upgrade conversion probability $A_{mt,i,d} = p_{t,i,d} - \\mu_{t,i,d+1}$. Importantly, the ranking function must give higher score to slots with higher index within the same IO, as this property allows to deal with multiple slots.\n2. Handling multiple slots. The constraint $\\sum_{d} x_{t,i,d} \\leq 1$ imposes that an advertiser can win at most one slot per IO. This means that, if slot d of IO (t, i) is ranked before slot d' of the same IO, slot d needs to be removed from the solution set before acquiring slot d'. This action can be modeled by subtracting the cost and expected conversions of slot d and adding those of slot d'. If the ranking function guarantees that the slots are sorted in descending order (i.e., slot d + 1 is always more efficient than slot d), then the algorithm can pre-compute the cost and conversion upgrades (lines 5 and 6) and use them to efficiently derive the cumulative conversions and costs (lines 18 and 19)."}, {"title": "4.3 Oracle-slot algorithm", "content": "Here we describe the first version of Algorithm 1, where slots are ranked by their efficiency.\nDefinition 1. D-slot second-price IO (D-SPIO). A D-SPIO $I = \\{C_1, ..., C_D, P_1, ..., P_D\\}$ is a collection of D\u2208 N expected costs $c_d \u2208 \\mathbb{R^+}$ and D expected conversion probabilities $p_d \u2208 [0,1]$ which admits $d_a \u2208 (0, 1]$ cost discount factors and $h_a \u2208 (0, 1]$ exposure discount factors (d \u2208 {1, ..., D}) such that:\n(1) $c_d = k_1 d_a h_d$ \\quad \u2200d \u2208 {1, ..., D}\n(2) $p_d = \\mu h_d$ \u2200d \u2208 {1, ..., D}\n(3) $0 < h_i \u2264 h_j \u2264 1$ \u2200i, j\u2208 {1, ..., D}, i > j\n(4) $0 < \\delta_i < \\delta_j \u2264 1$ \u2200i, j \u2208 {1, ..., D}, i > j\nwith $k_1 \u2208 \\mathbb{R}$ being the cost of the first slot (before exposure discount) and \u00b5\u2208 \\mathbb{R} the conversion probability (before exposure discount).\nRemark. The definition reflects a multi-slot IO, where slots are assigned according to an auction, under the assumption that slots with a higher index have a smaller probability of being displayed to a customer, and that the slots are assigned from the first to the last to advertisers ranked from the highest bid to the D-th top bid. In this case, the expected cost of a slot is given by the cost $k_1$ of the first slot, discounted by the exposure probability (if an advertisement is not exposed, no price is paid) and by the fact that later slots have a lower base price. Also the conversion probability u is discounted by the exposure probability, because an ad that is not exposed cannot lead to a conversion.\nDefinition 2. Slot efficiency. The efficiency of slot d of an D-SPIO is $\u03b7_\u03b7 = \\frac{P_d}{C_d}$, i.e., the ratio between the conversion probability and the cost of that slot.\nRemark. The slot efficiency of slot d is also equal to $\\frac{\\mu}{\\delta_a k_1}$, which means that it is independent of the exposure probability of the slot.\nThe first version of Algorithm 1, which we call oracle-slot uses the efficiency measure\n$f(\\mu, k_d) = \\frac{\\mu}{k_d}.$  (3)\nThis efficiency measure is a natural choice when the objective is to maximize the number of conversions. It bears two important properties: (1) it decreases with the slot index, so it can be seamlessly implemented in Algorithm 1 (Lemma 1), and (2) the solution can be implemented by a bidding agent outputting bids proportional to the expected conversion probability pt.i.d of each impression (Lemma 2). However, its solutions might be suboptimal in certain situations (Section 4.4). We now formalize these properties.\nLemma 1. Slot efficiencies are sorted. Given a D-SPIO, the efficiency of a slot monotonically increases with its position, i.e., Ni > nj if i > j."}, {"title": "4.4 Oracle-upgrade algorithm", "content": "The oracle-slot algorithm suffers from one limitation: maybe counter-intuitively, adding the most efficient slot currently not in the solution set R* is not always the most efficient way to extend R*. We clarify this statement with an example. For simplicity, let us consider two IOs with two advertisement slots each (D=2). We call Si,j the slot j of IO i. The specifications of the two IOs are detailed in Table 1. According to the efficiency values of Example 1, we have that S1,2 is the most efficient, with \u03b71,2 = 0.278, followed by S1,1 (\u03b71,1 = 0.1), S2,2 (\u03b72,2 = 0.048) and S2,1 (\u03b72,1 = 0.4). And in fact, when bidding proportionally to the conversion probability, we would win slot S1,2 with a bid coefficient a such that 1/\u03b71,2 < \u03b1 < 1/\u03b71,1, S1,1 with 1/\u03b71,1 < \u03b1 < 1/\u03b72,2, S1,1 and S2,2 with 1/\u03b72,2 < \u03b1 < 1/\u03b72,1 and finally S1,1 and S2,1 with \u03b1 \u2265 1/\u03b72,1. However, we can easily verify that this strategy does not always achieve the maximum expected conversions for a given budget. In fact, winning S1,1 leads to 0.1 expected conversions for an expected cost of 1, while winning S1,2 and S2,2 leads to 0.112 expected conversions, for the same expected cost. This inefficiency is caused by S1,2 being much more efficient than S1,1. Therefore, although S1,1 is more efficient than S2,2, it is still better to win S2,2 than S1,1, in order not to lose the very efficient S1,2 (reminder: we cannot win both S1,1 and S1,2, because they are slots of the same IO).\nFrom the previous example, one might conclude the best strategy is to always bid for the most efficient slot of each IO. However, this intuition is incorrect. Let us consider another two IOs (Table 1,"}, {"title": "4.5 Oracle-upgrade algorithm", "content": "Definition 3. Slot upgrade efficiency. The efficiency of upgrading from slot j to slot i of the same D-SPIO (i < j) is\n$\\eta_{i,j} = \\frac{\\mu_{i} - \\mu_{j}}{\\mu_{i} - \\mu_{j}} = \\frac{\\mu (h_i - h_j)}{k_1 (\\delta_i h_i \u2013 \\delta_j h_j)},$                                        (4)\ni.e., the ratio between the expected difference in conversion probability and the expected difference in cost when winning slot i instead of slot j.\nRemark. The exposure probability is essential in defining a meaningful slot upgrade efficiency. Without factoring in the exposure probability, the efficiency of an upgrade would be 0, because it would lead to an increased cost for the same conversions.\nRemark. The ordering valid for slot efficiency does not hold for the slot upgrade efficiency, i.e., there can be cases in which \u03b7i,k > \u03b7k,j for i < k < j.\nIn the examples of Table 1, comparing the efficiency of the upgrade to the efficiency of acquiring a new slot leads us to the correct decision: in the Example 1, we have \u03b71,1 = 0.029, which is less than \u03b72,2 = 0.04. In Example 2, instead, \u03b71,1 = 0.057, while \u03b72,2 = 0.04, meaning that upgrading to slot 1 is more efficient in this case. Following these considerations, we define the efficiency function of the oracle-upgrade as:\n$f(A_{ct,i,d}, A_{mt,i,d}) = \\frac{A_{mt,i,d}}{A_{ct,ind}} $  (5)\nwhere $A_{mt,i,d} = \\mu_{t,i}(h_d - h_d)$ and $A_{ct,i,,d} = k_{t,i,d}h_d - k_{t,i,d'}h_{d'}$. Here d' > d indicates the slot that is being upgraded to d, and depends on the slot (t, i, d). In fact, while consecutive upgrades are not necessarily sorted by efficiency, skipping specific slots when upgrading can restore the order. Lemmas 3 and 4 clarify how we can construct a sequence of upgrades from slot D to slot 1 of the same IO with monotonically decreasing efficiency, as required by the oracle algorithm.\nLemma 3. The last slot D is more efficient than any upgrade. Given a D-SPIO I = {cd, Pd, \u00b5, k1, da}, we have that \u03b7D > \u03b7i,j, for any i, j \u2208 {1, ..., D} s.t. i < j."}, {"title": "5 Oracle Imitation Learning (OIL)", "content": "OIL is implemented as a behavior cloning (BC) algorithm where a student policy (the auto-bidding agent) learns to replicate the actions of an expert policy (the oracle). Unlike standard BC setups, OIL features an asymmetry of information between the student and the expert: the oracle has perfect knowledge about the advertisement traffic for the entire campaign, while the student does not. This encourages the auto-bidding agent to extract patterns from the past observations and predict the future advertisement traffic to compensate for its lack of information.\nOIL employs an online trining strategy, i.e., the agent generates new experience by interacting with the environment rather than using a pre-collected dataset (Algorithm 2).\nThis approach mitigates the issue highlighted by Ross et al. [28], which occurs when the agent deviates from the policies in the dataset, encountering states outside of the dataset's distribution. By collecting transitions online, the training state distribution is more likely to match that encountered during deployment, enhancing robustness and generalization. An important detail of OIL is the dynamic update of the oracle bids at every time step, rather"}, {"title": "6 Experiments and results", "content": "We trained auto-bidding agents using OIL in the advertisement campaign simulator built on the advertisement traffic from the Alimama dense and sparse datasets. Budget and target CPA values for each simulated campaign were extracted from uniform distributions encompassing the dataset ranges. To capture campaign dynamics and temporal patterns from past auctions, we engineered 60 features (see Appendix) and fed them into a three-layer fully connected network with 256 units per layer to generate bids. Each OIL training experiment involved 10 million environment interactions, which were sufficient for convergence (Fig. 4). Detailed hyperparameters are listed in the Appendix. We evaluated three versions of OIL:\n1. OIL-slot. The oracle algorithms is the oracle-slot (Section 4.3). By Lemma 2, bids in the form bt = \u03b1\u03bct (proportional to the expected conversion probabilities) can win the advertisement slots in R* as"}, {"title": "7 Discussion, limitations and future work", "content": "We presented OIL, an imitation learning framework to train auto-bidding agents for real-time auctions. Leveraging the structure of multi-slot impression opportunities, we developed an efficient greedy algorithm to determine near-optimal bids. Our experiments demonstrate that even a simple policy network can effectively imitate the oracle's bids, outperforming all the baselines.\nOur work presents a few limitations. First, we embedded the CPA constraint into the objective function, which does not guarantee that it is always satisfied. Scenarios where this constraint might be violated include highly variable auction dynamics or cases with low availability of IOs with high conversion probability. Exploring alternative formulations which strongly impose the target CPA constraint would require significant changes in the theoretical analysis. Second, we assumed the bids of other advertisers not to be influenced by the bids of the auto-bidding agent. While this assumption is reasonable in large-scale auctions, where individual strategies"}, {"title": "Appendix", "content": "Approximation of the MCKP\nTo make Problem 1 tractable, we operate a few simplifications. If the CPA is smaller than K, the objective U can be simplified to:\n$U = \\mathbb{E} \\sum_{t,i,d} A_{t,i,d} x_{t,i,d} = \\sum_{t,i,d} \\mathbb{E}[A_{t,i,d}]x_{t,i,d} = \\sum_{t,i,d} ha \\mu_{t,i}x_{t,i,d}$ (8)\nHere we have used the law of total expectations to obtain $\\mathbb{E}[\\beta_{t,i,d}] = ha \\mu_{t,i}$, while also assuming that $\\sigma_{ti}$ is small enough compared to \u00b5t,i, so that clipping $\\beta_{t,id}$ between 0 and 1 does not noticeably change its mean. If, instead, the CPA is larger than K, the objective function becomes:\n$U=\\mathbb{E}K \\frac{(\\sum_{t,i,d} A_{t,i,d} x_{t,i,d})^3}{(\\sum_{t,i,d} C_{t,i,d} x_{t,i,d})^2} \\simeq K \\frac{(\\sum_{t,i,d} hd \\mu_{t,i}x_{t,i,d})^3}{(\\sum_{t,i,d} hd k_{t,i,d}x_{t,i,d})^2},$ (9)\nwhere we used a large number approximation (for a large number of IOs) to replace $\\sum_{t,i,d} hd \\mu_{t,i}x_{t,i,d}$ and $\\sum_{t,i,d} hd k_{t,i,d}x_{t,i,d}$ with their expected values.\nFinally, we replaced the budget constraint with a constraint in expectation, so that the oracle agent plans a strategy that, on average, does not exceed the total budget:\n$\\mathbb{E} \\sum_{t,i,d} C_{t,i,d} x_{t,i,d} = \\sum_{t,i,d}ha k_{t,i,d}x_{t,i,d} \\leq B$ (10)"}, {"title": "Two-slopes approximation (oracle-upgrade-2s)", "content": "Because of the difficulties encountered by the auto-bidding agent in regressing the optimal bids output by the oracle-upgrade, we attempted to simplify the oracle's output, while preserving high performance. We observed that the ratio between the oracle's bid for an IO and the the conversion probability of that IO tend to decrease as the conversion probability gets larger. We have assumed that, if the oracle wants to win slot d of IO (t, i), then $b_{t,i} k_{t,i,d+k_{t,i,d-1}}$ (i.e., the average between the price of the slot d it wants to win and the price of the slot d + 1). In fact, any bid between $k_{t,i,d} and k_{t,i,d-1}$ would lead to the same outcome (winning slot d of IO (t, i) and paying $k_{t,i,d}$). Furthermore, the inverse of the ratio between the optimal bid and the conversion probability seems to increase linearly after a certain threshold (empirical validation, Fig. 5A). For this reason, we decided to approximate the bids of the oracle with just three parameters: (1) The bidding coefficient for IOs with low conversion probability. The coefficient is barely small enough so that none of the inefficient slots is won and (2) the angular coefficient and (3) the intercept of the line regressing the inverse of the ratio between the oracle's bids and the conversion probabilities of the IOs that the oracle wants to win (Fig. 5A). This simplified oracle, which we call oracle-upgrade-2s computes the linear regression on the transformed oracle bids at every time step and finds the intercept between such line and the constant bidding coefficient for low-conversion-probability bids (Fig. 5A). Given an IO, if the conversion probability is on the left of the crossing point, it the bidding"}, {"title": "Proofs of the theoretical results", "content": "Lemma 1. Slot efficiencies are sorted. Given a D-SPIO, the efficiency of a slot monotonically increases with its position, i.e., Ni > nj if i > j.\nPROOF. If i > j, we have that\n$\\eta_i > \\eta_j  \\leftrightarrow \\frac{\\mu}{\\delta_i k_1} > \\frac{\\mu}{\\delta_j k_1}  \\leftrightarrow \\delta_i < \\delta_j,$ (12)\nwhich is true by definition of D-SPIO.  \u03a0\nLemma 2. A constant bidding coefficient identifies the oracle-slot's solution. Consider the set R* of IOs output by Algorithm 1 and assume that no two advertisement slots have exactly the same efficiency nt,i,d. Then a bidding agent whose bid for the IO i at time t is bt,i = apt,i, with a = max {1/Nt.id s.t. (t, i, d) \u2208 R*} wins all and only the slots in R*. If multiple slots of the same IO are part of R*, the bidding agents wins the one with the smallest d."}, {"title": "4.6 Proof", "content": "PROOF. First of all, we observe that in a second-price auction, a bid awards slot d for the IO (t, i) if $k_{t,i,d} \\leq b_{t.i} < k_{t,i,d-1}$, i.e., the bid is larger than the cost of slot d, but smaller than slot d + 1. We have used a notation abuse so that, if d = 1, we ignore the inequality bt.i <<k_{t,i,d-1}$ (any bid larger than $k_{t,i,d}$ awards the first slot). We need to prove that the bids defined by $b_{t,i} = a \\mu_{t,i}$ are (1) larger than the cost of all slots in R*, but (2) smaller than the costs of all slots which do not belong to R*.\n(1) We proceed as follows:\na = max {1/nt,i,d s.t. (t,i,d) \u2208 R*} \u21d2\n$a \\mu_{t,i} \\geq \\mu_{t,i}/N_{t,d,i} \\quad \\forall(t, i, d) \\in R^* \u21d2 b_{t,i} \\geq k_{t,i,d} \\quad \\forall (t, i, d) \\in R^*$(definition of efficiency)\nSo this means that the bidding agent bids higher than the cost of all slots in R*. (2) We observe that all the slots that are not in R* are less efficient than the slots in R*, because the slots in R are ranked by efficiency and R* includes the top slots of R. Therefore, we have that\n$\\min \\{ \\eta_{t.id} \\text{ s.t. } (t, i,d) \\in R^* \\} > \\max \\{ \\eta_{t.i.d} \\text{ s.t. } (t, i, d) \\notin R^* \\}$ $\\max \\{ 1/\\eta_{t,i,d} \\text{ s.t. } (t, i,d) \\in R^* \\} < \\min \\{ 1/\\eta_{t,i,d} \\text{ s.t. } (t, i, d) \\notin R^* \\}$$\n$a \\mu_{t,i} < \\mu_{t,i}/N_{t,d,i} \\quad \\forall (t, i, d) \\notin R^* \u21d2\nb_{t,i} k_{t,i,d} (t, i, d) \\in R^*$\nwhere by R* we indicated the complementary set of R*, i.e., the elements of R not in R*. This means that the agents' bids are lower than the cost of any advertisement slot not in R, which concludes the proof.  \u03a0"}, {"title": "4.7 Lemmas 3 and 4", "content": "Lemma 3. The last slot D is more efficient than any upgrade. Given a D-SPIO I = {cd, Pd, \u00b5, k1, da}, we have that \u03b7D > \u03b7i,j, for any i, j \u2208 {1, ..., D} s.t. i < j.\nPROOF. By definition of slot efficiency and upgrade efficiency we can rewrite the claim as\n$\\frac{\\mu}{\\delta_p k_1} > \\frac{\\mu(h_i - h_j)}{k_1 (\\delta_i h_i \u2013 \\delta_j h_j)} $\n$\\frac{1}{\\delta_p} > \\frac{h_i-h_j}{\\delta_i h_i \u2013 \\delta_j h_j} $         (13)        (14)\nIf h\u2081 = hj then the inequality is true. We consider the case in which hi \u2260 hj:\n$\\frac{1}{\\delta_p} > \\frac{h_i-h_j}{\\delta_i h_i \u2013 \\delta_j h_j}$     (15)\n$ \\leftrightarrow \\delta_i h_i \u2013 \\delta_j h_j > \\delta_p (h_i-h_j)$         (16)\n$ \\leftrightarrow  \\delta_i h_i - \\delta_j h_j > \\delta_p h_i - \\delta_p h_j$         (17)\n$ \\leftrightarrow \\delta_p < \\delta_i + \\frac{(\\delta_i \u2013 \\delta_j)h_j}{h_i - h_j}$         (18)\nSince, by definition of D-SPIO, we have that di \u2265 \u03b4p (because i \u2264 D by hypothesis), \u03b4\u03b9 > \u03b4j (because i < j by hypothesis), hi > hj (because i < j by hypothesis) and hi > 0, this inequality is always verified.\n \u03a0\nLemma 4. The efficiency of an upgrade is the weighted harmonic mean of the efficiencies of intermediate upgrades. Given a D-SPIO I = {cd, Pd, \u00b5, k1, da}, we consider three upgrades \u03b7i,k, \u03b7k,j and \u03b7i,j, with i \u2264 k \u2264 j. Then"}, {"title": "4.8 Equations", "content": "$\\frac{1}{\\eta_{i,j}} = \\beta \\frac{1}{\\eta_{i,k}} + (1 - \\beta) \\frac{1}{\\eta_{k,j}}$    (19)\nwith $\u00df = \\frac{h_i-h_k}{h_i-h_j}$, which implies that \u03b7i,j \u2264 min(\u03b7i,k, \u03b7k,j) .\nPROOF. The cases i = k = j, i = k and k = j can be easily verified. Thus, we focus on the general case i < k < j. Using the definition of upgrade efficiency, we have that\n$ \\frac{k_1(\\delta_i h_i \u2013 \\delta_j h_j)}{\\mu (h_i - h_j)}$\n$\\frac{k_1(\\delta_i h_i \u2013 \\delta_k h_k) + k_1(\\delta_k h_k \u2013 \\delta_j h_j)}{\\mu (h_i - h_j)}$\n$\\frac{h_i - h_k}{h_i-hj} \\frac{k_1(\\delta_i h_i \u2013 \\delta_k h_k)}{\\mu (h_i - h_j)} + \\frac{h_k - h_j}{h_i-hj} \\frac{k_1(\\delta_k h_k \u2013 \\delta_j h_j)}{\\mu (h_i - h_j)}$\n$ \\frac{h_i - h_k}{h_i-hj} \\frac{1}{lik} + \\frac{h_k - h_j}{h_i-hj} \\frac{1}{nk,j}$            (20)\n            (21)  (22)\n                (23)\nSince\n$\\frac{h_i - h_k}{h_i-hj} + \\frac{h_k - h_j}{h_i-hj} = 1$     (24)\nthe first claim is proven. For the second claim, we can simply observe that"}, {"title": "4.9 Claims", "content": "$\\eta_{i,k} \\geq \\eta_{k,j}$ (25)\n$ \\leftrightarrow \\beta \\frac{1}{\\eta_{i,k}} + (1 - \\beta) \\frac{1}{\\eta_{k,j}} < \\frac{1}{\\eta_{k,j}}$ (26)\n$ \\leftrightarrow \\frac{1}{\\eta_{i,j}} < \\frac{1}{\\eta_{k,j}} \\rightarrow \\eta"}]}