{"title": "Importance Weighting Can Help Large Language Models Self-Improve", "authors": ["Chunyang Jiang", "Chi-min Chan", "Wei Xue", "Qifeng Liu", "Yike Guo"], "abstract": "Large language models (LLMs) have shown remarkable capability in numerous tasks and applications. However, fine-tuning LLMs using high-quality datasets under external supervision remains prohibitively expensive. In response, LLM self-improvement approaches have been vibrantly developed recently. The typical paradigm of LLM self-improvement involves training LLM on self-generated data, part of which may be detrimental and should be filtered out due to the unstable data quality. While current works primarily employs filtering strategies based on answer correctness, in this paper, we demonstrate that filtering out correct but with high distribution shift extent (DSE) samples could also benefit the results of self-improvement. Given that the actual sample distribution is usually inaccessible, we propose a new metric called DS weight to approximate DSE, inspired by the Importance Weighting methods. Consequently, we integrate DS weight with self-consistency to comprehensively filter the self-generated samples and fine-tune the language model. Experiments show that with only a tiny valid set (up to 5% size of the training set) to compute DS weight, our approach can notably promote the reasoning ability of current LLM self-improvement methods. The resulting performance is on par with methods that rely on external supervision from pre-trained reward models.", "sections": [{"title": "1 Introduction", "content": "Recently, Large Language Models (LLMs) have made impressive achievements on a large amount of NLP tasks and applications (Li et al., 2023a; OpenAI, 2023; Yang et al., 2023; Li et al., 2023b). Moreover, new capabilities emerge in LLMs with the model size scaled to hundreds of billions of parameters, especially the general reasoning capabilities (Kojima et al., 2022). Relevant techniques like in-context few-shot learning (Brown et al., 2020a), Chain-of-Thought prompting (Wei et al., 2022), and self-consistency (Wang et al., 2023a) were further proposed to get better performance.\nDespite the remarkable capabilities of LLMs pre-trained on the large corpus, fundamentally improving the model's performance still necessitates fine-tuning on a great amount of high-quality supervised data (Huang et al., 2023a), which is usually costly. To alleviate this problem, many works are committed to investigating the self-improvement ability of LLMs (Shinn et al., 2023; Madaan et al., 2023; Vernikos et al., 2024). Among them, fine-tuning the LLM on self-generated data appears as one of the most promising way (G\u00fcl\u00e7ehre et al., 2023; Huang et al., 2023a; Wang et al., 2023b; Xu et al., 2023; Li et al., 2024). This formula typically includes generating reasoning thoughts and answers on unsupervised datasets, filtering data, and fine-tuning models on the self-generated data (Huang et al., 2023a). It is regarded as an attractive approach for LLMs to self-supervise by utilizing unlabeled data without external supervision.\nThe primary challenge of utilizing self-generated data is the variability in data quality. While high-quality samples can enhance the model's reasoning abilities, there are low-quality samples that may detrimentally affect performance (Li and Qiu, 2023). For example, an incorrectly generated answer could mislead the model. Therefore, a good filtering strategy is decisive for effective self-improvement. Many approaches have been proposed to address this issue. Inspired by Self-Consistency (Wang et al., 2023a), LMSI (Huang et al., 2023a) adopts majority voting to select the most consistent answer, under the assumption that consistency is positively related to the correctness. MoT (Li and Qiu, 2023) further introduces uncertainty to the filtering strategy, by utilizing entropy to exclude high-uncertainty data points. Self-Alignment (Li et al., 2024) demonstrates that prompting the LLM to self-filter is also feasible.\nHowever, present methods mostly emphasize as-"}, {"title": "2 Related Work", "content": "sessing the correctness of generated samples, yet ignore the distribution shift problem. Specifically, the distribution of the LLM self-generated data may differ from that of real-world data, and fine-tuning models on samples with high distribution shift extent (DSE) may defect the resulting performance (Shumailov et al., 2023a). In this paper, we demonstrate that even self-generated samples with correct answers can possess high DSE, potentially degrading model performance. Consequently, filtering out high DSE samples is essential to further promote the efficacy of LLM self-improvement.\nTo exclude samples with high DSE, the primary question is how to estimate the DSE, since the actual data distribution is usually inaccessible. We note Importance Weighting (IW) (Sugiyama et al., 2007a) as a well-known approach to address the traditional distribution shift problem (Sugiyama and Kawanabe, 2012), where the key idea is deriving importance weights based on the distribution ratio between test and training data, and using it to rebuild an unbiased training loss. IW usually contains two steps: weight estimation computes test-over-training density ratio and weighted classification utilizes the ratio to weight each data point and train the model (Fang et al., 2020).\nInspired by IW, we propose Distribution Shift Weight (DS weight) as a new metric to measure the DSE of self-generated samples. Based on this, we build an LLM self-improvement framework that incorporates both the correctness and DSE in its filtering strategy. Specifically, given a question-only dataset, we first let a pre-trained LLM generate multiple reasoning thoughts as well as answers. Then we create a tiny valid set comprising a few human-written demonstrations. With the pre-trained LLM and valid set, we leverages a simple approximation for importance weights to compute DS weight, as a measure of DSE, for each training data point. We subsequently combine the results from majority voting (for correctness) and DS weight (for DSE) to filter the dataset and fine-tune the LLM. We denote our framework as Importance Weighting-based Self-Improvement (IWSI). Experiments show that the performance of IWSI largely surpasses baseline self-improvement methods and rivals the enhancements achieved with supervision from the pre-trained reward model.\nOur contributions are threefold: (1) We propose a metric called DS weight to approximate the DSE of LLM self-generated data, with help from a tiny"}, {"title": "2.1 LLM Self-Improvement", "content": "Fundamentally improving LLMs' reasoning ability essentially requires fine-tuning on a large amount of high-quality supervised data. However, this methodology faces the threat that the stock of high-quality language data will be exhausted in some day (Villalobos et al., 2022). Self-improvement emerges as a promising approach to utilize the inherent knowledge to make supervision for self-training LLMs. While LLMs can easily generate extensive data, the data quality is not always guaranteed (Huang et al., 2023b) and training on unfiltered data may even cause performance degradation (Shumailov et al., 2023b). Therefore, an essential requirement in LLM self-improvement is data filtering.\nPioneering works (Wang et al., 2023b; Bai et al., 2022; Xu et al., 2023) use language models to generate diverse types of data such as feedback, instructions, and questions. They filter data by heuristic rules as well as manual inspection, which is challenging and costly. LMSI (Huang et al., 2023a) proposed a framework including generating data for a question-only dataset and using the majority voting (self-consistency) (Wang et al., 2023a) to select the most consistent answers, which is empirically proven to be effective among various tasks. LMSI also demonstrates that the answer correctness is positively relevant to self-consistency. Along with this work, MoT (Li and Qiu, 2023) proposes further filtering the consistent answers by entropy, which measures the answer uncertainty. Self-Alignment (Li et al., 2024) shows it is feasible to prompt the LLM self-filtering the generated data. To comprehensively evaluate the generated data, some works use external pre-trained LMs as the reward model to score the generated data, such as GENIE (Yehudai et al., 2024) and ReST (G\u00fcl\u00e7ehre et al., 2023). With external supervision from the reward model, their filtering strategies are typically more considered."}, {"title": "2.2 Importance Weighting", "content": "valid set. (2) Leveraging DS weight, we build a novel self-improvement framework called IWSI where the filtering strategy considers both the answer correctness and DSE. (3) We empirically examine the effectiveness of our proposed method, analyze the impact of high DSE samples on LLM self-improvement, and explore how DS weight interacts with other filtering criteria.\nImportance weighting (IW) is a primary approach to mitigate the influence of distribution shift problem (Sugiyama and Kawanabe, 2012). The typical IW process includes two steps: weight estimation and weighted classification. Weight estimation approximates the importance weights, which are subsequently used in the weighted classification stage to build a weighted training loss (Fang et al., 2023). Traditional IW methods mainly estimate the importance weights by assessing the matching between training and test distribution in different ways, such as maximum mean discrepancy in a reproducing kernel Hilbert space (Huang et al., 2006), KL divergence (Sugiyama et al., 2007b), and squared loss (Kanamori et al., 2009). While these methods work well in linear models, their performances degrade largely in deep learning scenarios (Fang et al., 2020). To overcome this, DIW (Fang et al., 2020) proposes an end-to-end dynamic solution, which uses a deep network to predict the importance weights, and repeats weight estimation and weighted classification stages to iteratively converge on the optimal solution.\nIn this paper, we use some lemmas and empirical results in DIW to build the DS weight for estimating the DSE of self-generated data."}, {"title": "3 Methodology", "content": "Fig. 1 shows the overview of IWSI. Given an unsupervised (question-only) dataset \\(D_q\\), we first use the pre-trained LLM \\(M_L\\) to generate multiple candidate answers as well as the reasoning thoughts for each question, using CoT prompts (Wei et al.,"}, {"title": "3.1 Candidate Answers Generation and Self-Consistency Filtration", "content": "In this stage, we let the pre-trained LLM \\(M_L\\) generate candidate answers as well as reasoning thoughts for an unsupervised dataset \\(D_q\\) which only contains unlabeled questions. Given a question \\(q_i \\in D_q\\), we concatenate Few-Shot-CoT (Wei et al., 2022) prompts with \\(q_i\\) to form the input text \\(x_i\\). With temperature \\(T > 0\\), we let \\(M_L\\) sample \\(m\\) candidate answers \\[a_{i_1}, a_{i_2}, ..., a_{i_m}\\] and their reasoning thoughts \\[r_{i_1}, r_{i_2},...,r_{i_m}\\]. Then we select the most consistent answer \\(\\hat{a_i}\\) by majority voting (Wang et al., 2023a), \\(\\hat{a_i} = \\arg \\max_{a_{ij}} \\Sigma_{r=1}^{m} 1(a_{ij} = a_{ir})\\), and keep the corresponding reasoning thoughts \\(R_i = \\{r_{ij}| a_{ij} = \\hat{a_i}, 1 \\leq j \\leq m\\}\\). By repeating it over each question in \\(D_q\\), the consistency-filtered dataset \\(D_c\\) is built."}, {"title": "3.2 DS Weight Computation", "content": "To elaborate DS Weight, we first introduce some important preliminaries in the distribution shift problem and importance weighting methods.\nDistribution shift problem denotes that the training data and test data are drawn from two different distributions \\(P_{train}\\) and \\(P_{test}\\), and \\(P_{train} \\neq P_{test}\\) (Sugiyama and Kawanabe, 2012). A common assumption for distribution shift is that there exists a function \\(w^*(x)\\), holding that:\n\\(E_{P_{test}(x)} [f(x)] = E_{P_{train}(x)} [w^*(x) \\cdot f(x)]\\) \\(1\\)\nfor any function \\(f\\) of \\(x\\) (Fang et al., 2020). Based on Eq. 1, importance weighting methods (Sugiyama et al., 2007a,b) deal with distribution shift in two steps: weight estimation finds a proper solution for \\(w^*(x)\\); weighted classification trains the model with a weighted loss derived by substituting \\(f\\) in Eq. 1 with the target loss function.\nObviously, it plays a decisive role in importance weighting that finding the appropriate importance weights \\(W = \\{w_i\\}_{i=1}^{N_t}\\), to approximate \\(w^*(x)\\) in"}, {"title": "3.3 Utilizing DS Weight to Improve LLM", "content": "Eq. 1. To simplify the question, DIW (Fang et al., 2020) provides an empirical surrogate goal with the help of a valid set:\n\\frac{1}{N_v} \\Sigma_{j=1}^{N_v} L(M(\\tilde{x}^v_j)) \\approx \\frac{1}{N_t} \\Sigma_{i=1}^{N_t} w_i L(M(x^t_i)).\\) \\(2\\)\nHere \\(N_v, N_t, x^v\\), and \\(x^t\\) indicate the size of the valid set, the size of the training set, data in the valid set, and data in the training set. \\(M\\) is the training model and \\(L\\) represents the training loss.\nWhile in DIW, Eq. 2 is used as a goal to train a deep model that predicts the desired \\(W\\), we use Eq. 2 to design a naive measurement for the distribution shift extent between training samples and valid set. Our intuition is that when the training data distribution is identical to the valid data distribution, \\(w_i = 1\\) would be a proper solution to Eq. 2. Conversely, the larger the actual \\(w_i\\) differs from 1, the more different the training distribution and valid distribution are.\nBased on this idea, we first design a naive estimation \\(w_i'\\) for \\(x^t_i\\) by regarding \\(N_t\\) as 1:\nw'_i = \\frac{E_{x\\in D_v} L(M_L(x))}{N_v \\cdot L(M_L(x_i))}.\\) \\(3\\)\nwhere \\(M_L\\) is the pre-trained LLM, \\(L\\) denotes the sft loss (Brown et al., 2020b), \\(D_v\\) is a tiny valid set and \\(x_i\\) is a self-generated training data point. Then we define DS weight \\(w^{DS}_i\\) as:\nw^{DS}_i = \\begin{cases} w'_i & \\text{if } w'_i \\geq 1 \\\\ \\frac{1}{w'_i} & \\text{if } w'_i < 1 \\end{cases}\\) \\(4\\)\nWith DS weight measuring DSE, we are able to further filter the self-generated data in \\(D_c\\), excluding data points that possibly possess higher DSE.\nFirst, all data points are ranked with respect to their DS weight \\(w^{DS}_i\\), and the \\(k\\)-percentile \\(\\sigma_{k\\%}\\) is selected, s.t.\n\\Sigma_{x_i \\in D_c} 1(w^{DS}_i \\leq \\sigma_{k\\%}) = k\\%\\) \\(5\\)\nwhere |\\cdot| denotes the set size and \\(w^{DS}_i\\) is the corresponding DS weight of sample \\(x_i\\). As a result, only samples whose \\(w^{DS}_i \\leq \\sigma_{k\\%}\\) are kept to train the model \\(M_L\\). The training loss can be written as:\nL_F = \\frac{1}{|D_c^{k\\%}|} \\Sigma_{x_i \\in D_c} 1_{k\\%}(x_i) \\cdot L(M_L(x_i))\\) \\(6\\)"}, {"title": "4 Experiment", "content": "With DS weight measuring DSE, we are able to further filter the self-generated data in \\(D_c\\), excluding data points that possibly possess higher DSE.\nFirst, all data points are ranked with respect to their DS weight \\(w^{DS}_i\\), and the \\(k\\)-percentile \\(\\sigma_{k\\%}\\) is selected, s.t.\n\\Sigma_{x_i \\in D_c} 1(w^{DS}_i \\leq \\sigma_{k\\%}) = k\\%\\) \\(5\\)\nwhere |\\cdot| denotes the set size and \\(w^{DS}_i\\) is the corresponding DS weight of sample \\(x_i\\). As a result, only samples whose \\(w^{DS}_i \\leq \\sigma_{k\\%}\\) are kept to train the model \\(M_L\\). The training loss can be written as:\nL_F = \\frac{1}{|D_c^{k\\%}|} \\Sigma_{x_i \\in D_c} 1_{k\\%}(x_i) \\cdot L(M_L(x_i))\\) \\(6\\)"}, {"title": "4.1 Setup", "content": "4.2 Main Results"}, {"title": "4.1.1 Datasets", "content": "where \\(1_{k\\%}(x_i)\\) equals to \\(1(w^{DS}_i \\leq \\sigma_{k\\%})\\) and \\(L\\) represents the sft loss.\nAnother natural way to utilize DS weight is directly employing Eq. 3 to calculate a weighted loss, which is more analogous to the standard IW procedure. We also implement this variant in our work and denote it as IWSI-w. The weighted loss is:\nL_w = \\frac{1}{|D_c|} \\Sigma_{x_i \\in D_c} Clip (w'_i, C) \\cdot L(M_L(x_i))\\) \\(7\\)\nwhere \\(C\\) is a constant. We clip \\(w'_i\\) to (0, C] for stabilizing the training process.\nHowever, we found that IWSI-w is much less effective than IWSI. We believe this is mainly attributed to the inadequacy of Eq. 3. Empirical results and details are discussed in Sec 4.4."}, {"title": "4.1.2 Baselines", "content": "The goal of our experiments is to verify whether incorporating DS weight into the filtering strategy in our proposed approach can help LLMs self-improve. Therefore, given the same base model, we compare IWSI with the fundamental self-improvement framework LMSI (Huang et al.,"}, {"title": "4.1.3 Implementation details", "content": "We select Llama3-8B as our base model (Touvron et al., 2023). In the candidate answers generation stage, we let the base model generate 15 candidates for each question, with temperature \\(T = 1.1\\). All training process is performed on eight RTX-4090 GPUs. The training batch size per device is set to 1 and the gradient accumulation steps is 4. We use LORA (Hu et al., 2022) to do fine-tuning. We use AdamW (Loshchilov and Hutter, 2019) optimizer and the learning rate is 3e-4. Few-Shot-CoT prompts are only applied in generating candidate answers and the evaluation stage. CoT examples for each dataset and the prompt used for Self-filter are listed in Appendix D."}, {"title": "4.3 Hyperparameter Study", "content": "We investigate the effect of varying the filtering threshold \\(k\\) and corresponding percentile \\(\\sigma_{k\\%}\\) (in Eq. 5). Fig. 2 shows the accuracy results on gsm8k, StrategyQA, and ANLI-A1. As the figure shows, either a too-large or too-small \\(k\\) value will make the performance degrade. When \\(k\\) is very large, more samples with high DSE will be kept, thus potentially harming the performance. If the \\(k\\) is pretty small, there will not be sufficient samples kept to support the model training. The optimal \\(k\\) value range varies across different tasks. In general, around 80% would be an appropriate choice.\nFig. 3 shows the varying \\(k\\)-percentile \\(\\sigma_{k\\%}\\) of DS weight. While \\(\\sigma_{k\\%}\\) of different datasets are similar when \\(k\\) is very small, the difference becomes larger as \\(k\\) increases. This phenomenon suggests that the boundary above which the DSE of samples can be regarded as \"high\" is relative according to different datasets."}, {"title": "4.4 Valid Set Analysis", "content": "The valid set \\(D_v\\), plays a crucial role in IWSI. It determines the calculation results of DS weight and subsequently steers the filtering strategy. Therefore, variation in the composition of the valid set can introduce randomness and thus potential instability. In this section, we take the gsm8k dataset as example to discuss the impact of valid set.\nWe employ the loss value distribution as the analytical tool and, for simplicity, we assume all distributions of different sample sets conform to the"}, {"title": "4.5 Orthogonality Analysis", "content": "In IWSI, two factors are considered in the filtering strategy, the answer correctness (represented by self-consistency) and the sample DSE (repre-"}, {"title": "4.6 Perception of DSE", "content": "We conduct a case study on gsm8k to provide an intuitive perception about what a correct but with"}, {"title": "5 Conclusion", "content": "In this paper, we investigate the impact of sample DSE on LLM self-improvement. We propose DS weight to approximate the DSE inspired by importance weighting methods, and a novel framework IWSI where the filtering strategy comprehensively considers DSE and answer correctness. Empirical results demonstrate that the incorporation of DS weight significantly enhances the effectiveness of LLM self-improvement. Further analysis reveals that DSE is nearly orthogonal to other factors, suggesting a new direction to promote LLM self-improvement for the future work."}]}