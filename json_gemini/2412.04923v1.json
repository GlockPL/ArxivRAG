{"title": "HyperGraphOS: A Meta Operating System for Science and Engineering", "authors": ["Antonello Ceravola", "Frank Joublin", "Ahmed R. Sadik", "Bram Bolder", "Juha-Pekka Tolvanen"], "abstract": "This paper presents HyperGraphOS, an innovative Operating System (OS) designed for the scientific and engineering domains. It combines model-based engineering, graph modeling, data containers, and computational tools, offering users a dynamic workspace for creating and managing complex models represented as customizable graphs. Using a web-based architecture, HyperGraphOS requires only a modern browser to organize knowledge, documents, and content into interconnected models. Domain-Specific Languages (DSLs) drive workspace navigation, code generation, AI integration, and process organization.\nThe platform's models function as both visual drawings and data structures, enabling dynamic modifications and inspection, both interactively and programmatically. HyperGraphOS was evaluated across various domains, including virtual avatars, robotic task planning using Large Language Models (LLMs), and meta-modeling for feature-based code development. Results show significant improvements in flexibility, data management, computation, and document handling.", "sections": [{"title": "1 INTRODUCTION", "content": "Operating Systems (OSs) have evolved significantly since the 1950s, when they were first developed for general-purpose computers such as IBM's 701 and 709, as illustrated in Figure 1. Initially, these systems required manual intervention for executing programs and lacked automation. The introduction of batch processing in the 1950s, exemplified by IBM systems, allowed sequences of jobs to be processed without human input. Time-sharing systems soon followed, enabling multiple users to interact with the same computer simultaneously, as seen in MIT's CTSS and IBM's System/360.\nAt this same time, Teletypewriters (TTY) and the concept of file were introduced, followed a few years later by the concept of hierarchical folders in Multics. At the end of the 1960s, UNIX, developed at Bell Labs, popularized these abstractions and the concept of console which since then form the foundation of modern OSs."}, {"title": "2 BACKGROUND", "content": "OSs can be defined from several perspectives. However, their primary function is to manage and allocate hardware resources such as memory, processors, and input/output devices, to ensure efficient interactions between users and applications [24,23]. An OS abstracts the underlying hardware and resources, providing a user-friendly interface and offering basic services that facilitate interactions for both users and programs.\nOSs are generally divided into two categories: general-purpose and special-purpose OSs [3]. This paper focuses on general-purpose OSs like Windows, Linux, and macOS, designed for broad use and enabling users to organize documents and applications without requiring specific technical expertise. These systems are widely employed in various environments, from households to professional and technical settings, where they support tasks such as document management, billing, and software development. However, general-purpose OSs often fall short when addressing specific domain needs. General-purpose OSs rely exclusively on applications to solve the domain-specific needs of users. For example, household users may find the file and folder structure cumbersome, while professionals may struggle to relate documents like bills and orders without relying on billing applications. Technical users may face challenges in organizing their work environments due to limited project-specific support in traditional OSs if they do not turn to project management applications. The challenge here is that these applications are vendor-dependent and create a zoo of problems (e.g., file formats, compatibility, interoperability) when integration of multiple tools is needed. These problems can all be solved through the use of \"glue\" applications (e.g., converters) that increase usage complexity in unnecessary ways (accidental complexity [2]).\nFrom Model-Based System Engineering (MBSE) perspective [6][27], OSs can be seen as applications that provide specific DSLs for users to model their tasks and interactions. In MBSE, abstract models represent system architecture, behavior, and interactions without focusing on implementation details [27]. OSs can be analyzed through their DSLs, which facilitate user interaction, program execution, and hardware management. High-level DSLs define elements like files, folders, and windows, enabling visual organization and interaction with the system. Files and folders, represented"}, {"title": "3 HYPERGRAPHOS CONCEPT", "content": "HyperGraphOS [12] is designed to redefine how users interact with computers and digital information systems by leveraging DSLs [12]. Particularly for interdisciplinary systems like Multi-Agent Systems (MAS). Its core architecture leverages flexible model execution strategies, allowing for rapid prototyping and iterative design adjustments. The tool includes features such as automated code generation, support for multiple modeling paradigms, and a user-friendly interface. The complete implementation of HyperGraphOS, including source code, user guides, and examples, can be accessed through its open-source repository at [11]."}, {"title": "4 SYSTEM ARCHITECTURE", "content": "HyperGraphOS is built on a modular architecture as shown in Fig. 4. The architecture is composed of five main modules: a Kernel Interface, a Back-end, Front-ends, External Cloud Services, and Data management. These modules work together to provide a flexible, distributed, and scalable system that redefines traditional file management and work organization. At the core of HyperGraphOS is the Kernel Interface, which manages the hardware abstraction and rendering of the user interface. The Rendering Engine within this module ensures seamless graphical interaction, while the OS Kernel interfaces with essential hardware resources like CPU, memory, and input/output devices. Additionally, the File System plays a crucial role in managing data storage and retrieval, interfacing with the back-end for efficient data processing and handling of user OmniSpaces.\nThe Back-end acts as an intermediary between the front-end and the kernel, built on JavaScript Engine components and Server-Side Scripts that handle data requests, OmniSpaces management, and batch execution. This module processes user requests, manages OmniSpaces files as JSON objects, and ensures that data is stored or retrieved from the file system. Moreover, the back-end is responsible for interacting with External Cloud Services, enabling integration with local or cloud-based APIs like OpenAI for AI tasks, Cloud Storage for scalable data handling, and Security Services for managing data protection and privacy. The Front-end of HyperGraphOS operates through a browser interface, where users interact with OmniSpaces via a graphical canvas powered by DSLs, JavaScript Libraries and GoJS (one of the most complete graphical libraries available in the web domain [17]). This dynamic interface allows users to manipulate visually the content of OmniSpaces, using graphs to represent nodes, and links. Each workspace is stored as a JSON object, allowing light and flexible storage [18][29] and intuitive management of files and documents (due to easy access of its content through a visual inspection or programmatic one). The front-end ensures that users have a streamlined and interactive experience, directly connected to the back-end for data requests and processing.\nThe External Cloud Services module integrates key functionalities that extend the capabilities of HyperGraphOS.\nThrough cloud-based APIs, the system interacts with external tools for data processing, security management, and"}, {"title": "5 CASE STUDIES", "content": "In this section, three case studies are presented to demonstrate the practical application of various system modeling and artificial intelligence methodologies using HyperGraphOS. Each case study highlights the significant contribution that HyperGraphOS provides in the creation of a multi-agent robotic task execution system, a meta-model for system architectures in research applications, and a dialog management system. The first two will be briefly presented, and the last one will be explored in greater detail.\nCase Study 1: Multi-Agent Robotic Task Planning and Execution\nIn this case study, HyperGraphOS is used to develop a robotic control system based on multi-agent task planning and execution [15]. The system integrates natural language processing with task and motion planning using a hier-archical architecture built with OpenAI's LLMs. The CoPAL (Cognitive Planning and Learning) system allows the robot to perform complex tasks in the real world, such as preparing pizza and stacking cubes. This is achieved by incorporating replanning feedback loops. The model, defined using the dataflow DSL, integrates components allowing ROS [20] communication with the robotic system. The research and development of CoPAL with HyperGraphOS demonstrates the flexibility of modeling, executing, debugging, and testing complex data flow models that generate tasks for a humanoid robot in the real world. The core development of the multi-agent system, including the DSL, took only a single week, allowing most of the time to be spent on evaluation and experiments with the model.\nCase Study 2: Modeling Research Projects with Thebes DSL\nThis case study addresses the challenge of managing dynamic research projects using Thebes, a lightweight DSL tailored for modeling flexible research projects within HyperGraphOS. Thebes facilitates rapid prototyping and in-cremental design, enabling seamless integration with existing tools via code generation. Applied to projects like the tabletop robot Haru [9] and the CoPAL system [15], Thebes significantly improved collaboration and adaptability. Hy-perGraphOS provided support for creating the metamodel in about 30 minutes and implementing the model integrity checkers and code generation in JavaScript in about three days.\nCase Study 3: Virtual Receptionist for Visitor Registration\nThis case study focuses on the development of a virtual receptionist system used for visitor registration at a research institute [14]. The system, initially developed before the widespread adoption of LLMs, utilized a recursive neural network to define a behavior engine for the AI-driven receptionist. This research explored the challenges of creating dialogue systems capable of interacting with users through natural language or speech. Traditional dialogue systems often face several issues, including the need for extensive training data and difficulties in defining reward functions. They also struggle with limited control and explainability."}, {"title": "6 DISCUSSION, CONCLUSION, AND FUTURE WORK", "content": "Hyper GraphOS marks a major advancement in OSs, tailored for scientific and engineering applications. Leveraging a web-based architecture and DSLs, HyperGraphOS offers a flexible and robust platform for managing complex models and data. This section compares HyperGraphOS to other state-of-the-art systems and highlights its unique contributions. In comparison to systems like PlantUML [5] and Graphviz [8], which are widely used for static diagram creation and visualization, HyperGraphOS distinguishes itself by enabling dynamic interactions with graph models and seamless integration with advanced technologies like AI and LLMs [4]. The ability to manipulate nodes and links programmatically using JavaScript and navigate virtually unlimited workspaces sets HyperGraphOS apart from traditional graph modeling tools.\nWhen compared to DSL-centric systems like MetaEdit+ [27], JetBrains MPS [19], and Eclipse Xtext [10], Hyper-GraphOS provides a more intuitive and accessible interface due to its web-based architecture and extensive use of the visual OmniSpace. Its flexibility in creating and adapting DSLs enables rapid prototyping and incremental devel-opment, which is especially beneficial for dynamic research projects. Furthermore, HyperGraphOS's integration with AI components and LLMs facilitates complex task automation and significantly boosts productivity [22]. By offering on-demand assistance and intelligent data manipulation within documents, HyperGraphOS expands the possibilities of AI-augmented OmniSpace."}, {"title": "6.2 CONCLUSION", "content": "In this paper, we presented HyperGraphOS, a modern DSL-based OS designed specifically for scientific and engineer-ing interdisciplinary applications. Through the use of DSLs and graph-based model representations, HyperGraphOS provides users with an intuitive and flexible platform for creating, manipulating, and visualizing complex models and data. HyperGraphOS's open-source nature invites further exploration and contributions from the community. The tool is available as open-source software and can be accessed at [11], where additional documentation and videos [12] and future updates are posted.\nThe case studies in robotic task planning, dynamic research projects, and virtual receptionist systems demonstrate HyperGraphOS's versatility and practical benefits. In comparing HyperGraphOS to other state-of-the-art systems, its unique contributions were outlined, such as dynamic graph model interaction, flexibility in creating new DSLS, and seamless integration with AI components. While HyperGraphOS presents numerous advantages, it also opens up opportunities for further enhancements, particularly in data handling, scalability, and facilitating collaboration. Expanding these capabilities will be essential as the system evolves to handle increasingly complex and larger datasets."}, {"title": "6.3 FUTURE WORK", "content": "Moving forward, there are several areas for improvement in HyperGraphOS. While relying on external services for security and privacy management offers flexibility, future iterations could include robust, built-in security measures to strengthen data protection. As the system scales to support larger and more complex datasets, enhancing performance while maintaining a seamless user experience will be essential.\nThere is also significant potential in further exploring low-code development platforms and innovation. For instance, a start-up like Thunkable [26] provides a no-code platform for designing and creating mobile applications. Its drag-and-drop interface and pre-built components allow users, even without a development background, to create fully functional iOS and Android. Another innovative example is the Rabbit R1 [25], which introduces an AI-driven OS designed to simplify interactions with apps and services through voice commands and AI-powered tools, positioning it as a next-generation alternative to smartphones and smart speakers. A drawback of OmniSpace is its reliance on large screens for comfortable use. One potential mitigation could involve enabling the use of HyperGraphOS in Virtual Reality settings. HyperGraphOS shows great potential but requires further development in several areas. For this reason, HyperGraphOS will soon become an open-source project to garner support from early adopters.\nIn summary, HyperGraphOS presents a novel approach to OS design that addresses the evolving needs of mod-ern scientific and engineering workflows. Its flexible, efficient, and user-friendly platform sets the stage for further advancements in OS design."}]}