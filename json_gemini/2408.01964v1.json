{"title": "TOP K ENHANCED REINFORCEMENT LEARNING ATTACKS ON HETEROGENEOUS GRAPH NODE CLASSIFICATION", "authors": ["Honglin Gao", "Gaoxi Xiao"], "abstract": "Graph Neural Networks (GNNs) have attracted substantial interest due to their exceptional perfor- mance on graph-based data. However, their robustness, especially on heterogeneous graphs, remains underexplored, particularly against adversarial attacks. This paper proposes HeteroKRLAttack, a targeted evasion black-box attack method for heterogeneous graphs. By integrating reinforcement learning with a Top-K algorithm to reduce the action space, our method efficiently identifies effective attack strategies to disrupt node classification tasks. We validate the effectiveness of HeteroKRLAt- tack through experiments on multiple heterogeneous graph datasets, showing significant reductions in classification accuracy compared to baseline methods. An ablation study underscores the critical role of the Top-K algorithm in enhancing attack performance. Our findings highlight potential vulnerabilities in current models and provide guidance for future defense strategies against adversarial attacks on heterogeneous graphs.", "sections": [{"title": "1 Introduction", "content": "In modern data science and network analysis, Graph Neural Networks (GNNs) have garnered significant attention for their superior performance on graph data. Graph data is prevalent in various practical applications, such as social networks [Fan et al., 2019], biological networks[Muzio et al., 2021a], and knowledge graphs [Ye et al., 2022], where nodes and edges represent different entities and their relationships. GNNs update node representations by aggregating information from neighboring nodes, thereby capturing the complex relationships within the graph structure.\nHeterogeneous Graphs are complex networks that contain multiple types of nodes and edges. Unlike homogeneous graphs, which have a single type of node and edge, heterogeneous graphs can have diverse node and edge types. For example, in an academic knowledge graph, nodes can represent researchers, papers, and institutions, while edges can represent author relationships, citation relationships, and collaboration relationships. Due to their ability to more accurately reflect real-world complex relationships, heterogeneous graphs are widely used in financial networks [Xu et al., 2022], citation networks [Geng et al., 2022], etc.\nNode Classification is a core task in graph analysis, aiming to predict the category of nodes based on their features and the graph structure. In social networks, this task is used to predict user interests or community affiliations [Bhagat et al., 2011]; in biological networks, to predict gene functions or disease associations [Muzio et al., 2021b]. By uncovering patterns and relationships within the graph structure, node classification provides valuable insights and supports various applications.\nAlthough Heterogeneous Graph Neural Networks (HGNNs) have shown great potential in node classification on heterogeneous graphs, research on the robustness of graph neural networks on heterogeneous graphs remains very limited, particularly in the face of adversarial attacks. While some studies have begun to focus on improving the"}, {"title": "2 Related Work", "content": "In Section 2, we review related work on heterogeneous neural networks and adversarial attacks on graph neural networks. Section 3 provides the necessary preliminaries and formal definitions used throughout this paper. In Section 4, we present our proposed HeteroKRLAttack method in detail, including the reinforcement learning framework and the Top-K algorithm to reduce the action space. Section 5 describes the experimental setup and results, including the performance comparison with baseline methods and the ablation study. Finally, in Section 6, we conclude the paper and discuss future research directions.\nIn summary, our main contributions are as follows:\n\u2022 Reinforcement learning black-box attack method: We propose a reinforcement learning-based black-box attack method on heterogeneous graphs, attacking the model by observing inputs and outputs.\n\u2022 Top-K algorithm for action space reduction: We utilize the Top-K algorithm to effectively reduce the action space, improving search efficiency and attack effectiveness.\n\u2022 Experimental validation: We conducted experiments on multiple publicly available heterogeneous graph datasets; the results demonstrate that the proposed method significantly lowers the accuracy of node classifica- tion."}, {"title": "2.1 Heterogeneous Graph Neural Network", "content": "Early work on heterogeneous graph embedding focused mainly on using Random Walk [He et al., 2019] and Matrix Factorization methods [Newman, 2006] to generate node embeddings. For instance, metapath2vec [Dong et al., 2017] captures the structure and semantic information of graphs through meta-path guided random walks, while PME [Chen et al., 2018] uses relation-specific matrices to project nodes, thereby maintaining the heterogeneity of different types of links.\nWith the rise of deep learning, deep models based on message passing have been applied to heterogeneous graphs. The Heterogeneous Graph Attention Network (HAN) [Wang et al., 2019] effectively aggregates information from different types of nodes and meta-paths through a hierarchical attention mechanism, significantly improving the performance in handling tasks such as node classification and link prediction. Other methods, such as MAGNN [Fu et al., 2020] and HetGNN [Zhang et al., 2019], further extend attention mechanisms and message passing techniques to capture richer structural and attribute information.\nIn particular, many heterogeneous graph neural networks (HGNNs) are built on existing HGNN frameworks. These methods enhance model expressiveness and generalization by introducing new aggregation strategies, attention mech- anisms, or meta-path selection techniques into existing models. For example, GATNE [Cen et al., 2019] utilizes the relational information of different types of edges in multiplex graphs, further improving the accuracy of node embeddings."}, {"title": "2.2 Adversarial Attacks on Graph Data", "content": "In the field of adversarial attacks on graph data, recent research has highlighted the vulnerability of deep neural networks, especially in applications involving graph structures. While these networks excel in tasks like image recognition and natural language processing, their robustness on graph data remains problematic [Sun et al., 2022]. Attack methods often involve subtle perturbations to graph structures or node features, misguiding models into incorrect classifications [Goodfellow et al., 2014, Szegedy et al., 2013]. Furthermore, researchers have employed reinforcement learning to develop black-box attack strategies that do not require knowledge of the target model's internals. For instance, a study by Dai et al. [Dai et al., 2018] demonstrated a reinforcement learning-based attack that only needs prediction labels from the target classifier. Another research by Ma et al. [Ma et al., 2021] in 2020 explored less detectable methods like graph rewiring, using deep reinforcement learning to devise effective attack strategies. These insights not only highlight the fragility of graph neural networks but also prompt further development of defensive measures for graph data.\nAlthough research on the robustness of heterogeneous graphs is still in its early stages, there are several noteworthy contributions. Zhang et al. [Zhang et al., 2022] developed a robust HGNN framework called RoHe, which enhances the robustness of HGNNs against adversarial attacks by pruning malicious neighbors through an attention purifier. On the other hand, Zhao et al. [Zhao et al., 2024b] introduced HGAttack, the first grey-box evasion attack method specifically designed for heterogeneous graphs, which generates perturbations by designing a new surrogate model"}, {"title": "3 Preliminaries", "content": "Definition 3.1 (Heterogeneous graph) A heterogeneous graph is defined as $G = \\{V,E, X, \\phi, \\psi\\}$, where V is a set of nodes, & is a set of edges, and $X \\in R^{|V|\\times f}$ is a node feature matrix with f representing the dimension of each node feature. The functions & and 4 map node types and edge types, respectively: $\\phi : V \\rightarrow A$ and $\\psi : E \\rightarrow R$, where A and R are predefined sets of node types and edge types. A heterogeneous graph satisfies the condition $|A| + |R| > 2$. Each edge typer \u2208 R is associated with a binary adjacency matrix $A_r$. We define a function $h : G \\rightarrow G$ that converts a heterogeneous graph into its corresponding homogeneous graph. The resulting graph $\\tilde{G} = \\{V, \\tilde{E}, X\\}$ has the same set of nodes V, and each pair of nodes is connected if there exists any edge between them in the original heterogeneous graph, regardless of the edge type. The adjacency matrix A of the homogeneous graph is defined as $\\tilde{A}_{ij} = 1$ if there is at least one edge between node $v_i$ and node $v_j$ in the original graph; otherwise $\\tilde{A}_{ij} = 0$.\nDefinition 3.2 (Meta-path) A metapath in a heterogeneous graph is a sequence of node types connected by edge types. Formally, a metapath M is defined as $M = A_1 \\xrightarrow{R_1} A_2 \\xrightarrow{R_2}, \\xrightarrow{R_{l-1}} A_l$, where $A_i$ are node types and $R_i$ are edge types, with $A_i \\in A$ and $R_i \\in R$. The length of the metapath M is l, which denotes the number of edges in the path. For instance, in a bibliographic network, a metapath can be represented as Author $\\xrightarrow{writes} Paper \\xrightarrow{cites} Paper \\xrightarrow{written\\, by} Author$, indicating a connection between two authors through papers they have written and cited.\nDefinition 3.3 (Targeted evasion attack) A targeted evasion attack is a specific type of adversarial attack aiming at decreasing the performance of a target instance in a machine learning model. This attack is characterized by its focus on altering the input data after the training phase, thereby causing the model to misclassify or incorrectly process the altered data during testing. The goal of a targeted attack is to decrease the performance of the model specifically for a targeted instance. This means that the attacker selects one or more specific instances and modifies them in a way that leads to a significant drop in the model's accuracy or effectiveness for those instances. An evasion attack involves making modifications to the data after the model has been trained, with the intent to deceive the model during the testing phase. The attacker changes the test data in a subtle way that is often imperceptible to humans but causes the model to fail in correctly classifying or processing the data.\nExample 1 Consider a heterogeneous graph with node types such as \u2018Author', 'Paper', and 'Field'. Assume we have a trained model M that classifies papers into different categories. An original test instance x could be a specific paper node with its features and relationships to authors and field. An evasion attack would then modify this paper's features or its links to authors and fields to create a perturbed instance x' such that $M (x') \\neq M(x)$, i.e., the model misclassifies the perturbed paper. The goal is to maximize the discrepancy between the model's outputs on x and x'. In summary, a targeted evasion attack is a type of adversarial attack where the attacker aims to reduce the performance of the model on specific target instances by altering the test data after the model has been trained. The modifications are designed to evade the model's learned patterns, causing it to misclassify or mishandle the targeted instances.\nDefinition 3.4 (Primary type and auxiliary type) In a heterogeneous graph, node types can be classified into primary types and auxiliary types [Luo et al., 2021] based on their roles in a targeted attack scenario. The primary type refers to the targeted attack node type. This is the specific type of node that is the focus of the attack in node classification tasks. Formally, if T represents the set of all node types in the graph, the primary type P is a subset of T that includes the node types specifically targeted for the attack($P \\subseteq T$). We define the set of nodes belonging to the primary type as $V_P$\nThe auxiliary type refers to all other node types that are not the primary target of the attack but may still interact with the primary type nodes. These node types provide additional context and information which can be used to facilitate the attack on the primary type nodes. Formally, if T represents the set of all node types in the graph, the auxiliary type A is defined as the set difference between all node types and the primary type nodes ($A = T \\backslash P$). The set of nodes belonging to the auxiliary type is denoted as $V_A$.\nExample 2 In a bibliographic network with node types such as 'Author', 'Paper', and 'Field', if the attack targets the 'Paper' nodes, then \u2018Paper' is the primary type. The \u2018Author' and 'Field' nodes would be considered as auxiliary types, as they are not the primary focus of the attack but can provide relevant information and context."}, {"title": "4 HeteroKRLAttack Approach", "content": "In this work, our goal is to build an attacker B that takes a heterogeneous graph as input and modifies its structure to fool a HAN (Heterogeneous Graph Attention Network) classifier by altering the adjacency matrix of a meta-path M. The attacker's function can be represented as $\\hat{G} = B(G) = \\{B(M), X\\} = \\{\\hat{M}, X\\}$. Given a classifier $f(\\cdot)$, the objective of the attacker is to maximize the difference between the classifier's output and its original prediction by modifying the graph structure. Here, we ignore the parameters @ in $f(\\cdot)$ as the classifier is already trained and fixed. As mentioned earlier, the attacker B is specifically designed for a given classifier $f(\\cdot)$. In summary, we can formulate the following optimization problem:\n$\\underset{G}{argmax} \\, L(f(G), f(\\hat{G}))$\nsubject to $\\hat{G} = B(G)$,\n$||G - \\hat{G}||_0 \\leq C$,\nwhere $L(f(G), f(\\hat{G}))$ is the function that measures the difference between the classifier's outputs on the original graph G and the modified graph $\\hat{G}$. C is a budget that limits the number of modifications to the adjacency matrix of G. The optimization problem aims to maximize the discrepancy between the original and modified predictions, thus enhancing the effectiveness of the attack."}, {"title": "4.1 Reinforcement Learning-based Attack Strategy", "content": "We formulate the graph modification problem as a reinforcement learning task, where the RL attack agent iteratively modifies the graph structure to fool the classifier $f(\\cdot)$. The key components of our RL framework are defined as follows:\n\u2022 State (s): The state $s_t$ at time t is represented by the tuple $(\\hat{G}, v)$, where v is the victim node with its primary type, and $\\hat{G}$ includes the chosen auxiliary type and modified graph information.\n\u2022 Action (a): The action $a_t$ involves selecting an auxiliary type or a node within that auxiliary type, denoted as $a_t = (A, v_A)$. After choosing this action, the victim node will add or delete an edge between itself and the"}, {"title": "4.2 Policy Network", "content": "We design two policy networks based on HAN to estimate the distributions in Equation 5. First, we develop a type network (TypeNet) that extracts information from node features and classification features to select an auxiliary type. The type network's primary structure includes a Heterogeneous Graph Attention Network (HAN), which processes node features and passes them to an attention mechanism. HAN can capture complex relationships between nodes, enhancing node feature representation. The attention mechanism in this context is its ability to dynamically weigh the importance of different nodes in the graph, allowing the model to prioritize more relevant nodes and relationships. Specifically, this process is represented by:\n$p(A \\mid s_t) = softmax \\Big(W_{out} \\cdot \\big( \\sum_{i} \\frac{exp \\big( q \\cdot k_i / \\sqrt{d_k} \\big)}{\\sum_j exp \\big( q \\cdot k_j / \\sqrt{d_k} \\big)} v_i \\big) + b_{out}\\Big)$\nThe probability of selecting an auxiliary type given state $s_t$ is calculated using the softmax function. The core of the attention mechanism is the computation of the query, key, and value vectors. The query vector combines the target node and graph embeddings, the key and value vectors are the embeddings of all nodes. In the equation, the query vector q represents the combined embedding, the key vector $k_i$ is the i-th node's embedding, and the value vector $v_i$ is also the i-th node's embedding. By calculating the dot product of the query and key vectors, followed by normalization, attention scores are obtained. These scores are used to compute attention weights via the softmax function, and a weighted sum of the value vectors generates the context vector. This process ensures that the model focuses on key nodes, enhancing node feature representation.\nAnother important network is the action network (ActionNet), which is designed similarly to the type network but aims to select actions based on the chosen node type. The action network also first extracts node features through a Heterogeneous Graph Attention Network (HAN), followed by linear transformation and ReLU activation to generate node embeddings. To determine actions, the action network further calculates the embeddings of the target node and the graph, combining them with the embeddings of all possible action nodes. Unlike the type network, it does not use an attention mechanism but instead processes these combined features through a multi-layer perceptron (MLP) to generate the probability distribution for each action. Specifically, this process can be represented as:\n$p (V_A \\mid s_t, A) = softmax (W_2 (ReLU (W_1 [h_{target}; h_{graph}; h_{action}] + b_1)) + b_2)$\nwhere the probability of selecting an action given state $s_t$ and auxiliary type A is calculated using the softmax function. In this formula, $h_{target}$ represents the embedding of the target node, $h_{graph}$ represents the embedding of the entire graph, and $h_{action}$ represents the combined embeddings of all possible action nodes. $W_1$ and $W_2$ are the weight matrices for the two linear transformations, and $b_1$ and $b_2$ are the corresponding bias vectors. These combined features are processed through linear transformations and ReLU activation, and the action selection probability distribution is ultimately generated by the softmax function."}, {"title": "4.3 Top-K Algorithm for Reducing Action Space", "content": "We observed that for large-scale networks, even when actions are divided into several parts according to auxiliary types, the action space remains vast, leading to inefficient search processes. To address this challenge, inspired by Google DeepMind's [Dulac-Arnold et al., 2015] success in handling large action spaces, we introduced a Top-K algorithm during the testing phase. This algorithm aims to identify the K most promising candidate actions, thereby significantly reducing the number of actions to consider and enhancing decision-making efficiency and accuracy. To further improve spatial and temporal search efficiency, we selected the k-d tree (KD-Tree) [Friedman et al., 1976] as the underlying structure for implementing the Top-K algorithm.\nKD-Tree (k-dimensional tree) is an efficient data structure used for organizing k-dimensional spatial data, commonly applied in multidimensional searches such as nearest neighbor search and range queries. The construction of a KD-Tree involves the following steps: First, the root node is selected by choosing the median point along a particular dimension (e.g., the Oth dimension) from the dataset, and the data points are divided based on this dimension. Next, the same procedure is recursively applied to the left and right subtrees, each time selecting the median point along the next dimension for partitioning, until all points are included in the tree. The nearest neighbor search starts from the root node, recursively selecting the left or right subtree by comparing the query point with the current node in the splitting dimension. During the backtracking process, it checks whether the other subtree needs to be searched to ensure the closest neighbor is found. This method significantly optimizes data queries in high-dimensional spaces through efficient partitioning and search strategies.\nIn the testing phase, we employed the KD-Tree algorithm to identify the optimal attack strategy. Initially, we converted the heterogeneous graph into a homogeneous graph and utilized the Node2Vec algorithm [Grover and Leskovec, 2016]"}, {"title": "5 Experiments", "content": "to obtain embeddings for each node. Subsequently, leveraging the results from the reinforcement learning framework, we used the KD-Tree algorithm to find the N nearest nodes. From these N nodes, we select the most suitable node based on the following criteria:\n1. If a node can directly mislead the attack model, it is selected as the final result. In the case of multiple nodes capable of misleading the attack model, a node is randomly selected.\n2. Otherwise, we select the node that maximizes the difference between the attacked graph and the original graph, based on Equation 1."}, {"title": "5.1 Attack Performance", "content": "In this experiment, we evaluated the performance of the proposed HeteroKRLAttack method and compared it with four baseline methods: RandomEdgeAddGlobalAttack, RandomEdgeDeleteGlobalAttack, BetweennessEdgeAddGlobal- Attack, and BetweennessEdgeDeleteGlobalAttack. These baseline methods disrupt the graph structure by randomly adding or deleting edges or by adding or deleting edges based on betweenness centrality [Iyer et al., 2013]. The specific setup is as follows: for the HeteroKRLAttack method, we set K to 0.5%, which is 5 per thousand of the number of nodes for each auxiliary type. The evaluation metrics included node classification accuracy, Micro F1 score and Macro F1 score. The experiments were conducted on a computer with a 12th Gen Intel(R) Core(TM) i7-12650H CPU, 16GB RAM, and an NVIDIA GTX 3060 GPU with 6GB VRAM.\nAs shown in Table 2, the HeteroKRLAttack method significantly outperforms baseline methods, drastically decreasing node classification performance across the ACM, IMDB, and DBLP datasets. In the ACM dataset, accuracy drops to 0.17 at budget 5, primarily due to the concentration of node types in Papers, Authors, and Fields, which limits the effectiveness of the TypeNet and results in less successful attacks. In contrast, the IMDB and DBLP datasets, which feature more evenly distributed node types, see more dramatic drops in performance, illustrating the method's efficiency in exploiting these balanced structures. Specifically, the accuracy on the IMDB dataset plummets to 0.01, while in the DBLP dataset, which mainly includes Papers, Authors, and Terms, the accuracy decreases to 0.06 at budget 5. The extensive interconnections between Papers and Terms in DBLP, similar to the node distribution in IMDB, provide a fertile ground for the propagation of attacks. Despite the variances in node type concentrations, the HeteroKRLAttack"}, {"title": "5.2 Ablation study", "content": "To evaluate the impact of the Top-K algorithm on the HeteroKRLAttack method, we designed an ablation study in which we removed the Top-K algorithm and directly searched for the optimal strategy within the entire action space. By comparing the performance differences between the original method and the method without the Top-K algorithm (HeteroRLAttack), from Table 2, we can assess the contribution of the Top-K algorithm in dramatically increasing the attack effectiveness."}, {"title": "6 Conclusion", "content": "In this study, we introduced the HeteroKRLAttack method, a reinforcement learning-based black-box attack strategy enhanced with the Top-K algorithm, aiming at node classification tasks on heterogeneous graphs. Our approach leverages the Top-K algorithm to notably reduce the action space and enhance the efficiency of the search process. Extensive experiments on multiple heterogeneous graph datasets showed that HeteroKRLAttack significantly decreases the accuracy of node classification, outperforming several baseline methods. Moreover, the results confirm that the Top-K algorithm is pivotal in increasing the attack success rate by identifying the most influential nodes within a specific range, as evidenced by an ablation study where removal of the Top-K algorithm leads to a noticeable decline in attack performance.\nLooking forward to future research, two promising directions are identified. First, exploring attacks based on community structures within graphs could offer a novel and potent strategy for disrupting node classification by exploiting the natural divisions within heterogeneous graphs. Second, designing robust defense mechanisms tailored to counteract adversarial attacks like HeteroKRLAttack could improve resilience against such strategies, thus safeguarding the integrity and reliability of graph-based systems."}]}