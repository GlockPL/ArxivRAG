{"title": "Examining Attacks on Consensus and Incentive Systems in Proof-of-Work Blockchains: A Systematic Literature Review", "authors": ["Dinitha Wijewardhana", "Sugandima Vidanagamachchi", "Nalin Arachchilage"], "abstract": "Cryptocurrencies have gained popularity due to their transparency, security, and accessibility compared to traditional financial systems, with Bitcoin, introduced in 2009, leading the market. Bitcoin's security relies on blockchain technology-a decentralized ledger consisting of a consensus and an incentive mechanism. The consensus mechanism, Proof of Work (PoW), requires miners to solve difficult cryptographic puzzles to add new blocks, while the incentive mechanism rewards them with newly minted bitcoins. However, as Bitcoin's acceptance grows, it faces increasing threats from attacks targeting these mechanisms, such as self-ish mining, double-spending, and block withholding. These attacks compromise security, efficiency, and reward distribution. Recent research shows that these attacks can be combined with each other or with either malicious strategies, such as network-layer attacks, or non-malicious strategies, like honest mining. These combinations lead to more sophisticated attacks, increasing the attacker's success rates and profitability. Therefore, understanding and evaluating these attacks is essential for developing effective countermeasures and ensuring the long-term security. This paper begins by examining the individual attacks executed in isolation and their profitability. It then explores how combining these attacks with each other or with other malicious and non-malicious strategies can enhance their over-all effectiveness and profitability. The analysis further explores how the deployment of attacks such as selfish mining and block withholding by multiple competing mining pools against each other impacts their economic returns. Lastly, a set of design guidelines is provided, outlining areas future work should focus on to prevent or mitigate the identified threats.", "sections": [{"title": "1. Introduction", "content": "Cryptocurrency is a type of digital or virtual money that runs on decentralized networks, which are not under the jurisdiction of a single centralized authority like a bank or government [1, 2, 3]. Currently, there are thousands of different cryptocurrencies available which can be used for investing, enabling smart contracts, powering decentralized applications, facilitating peer-to-peer transactions, and taking part in decentralized finance (DeFi) systems [4, 5, 6]. The market leader and original cryptocurrency in the cryptocurrency market is Bitcoin [7] which makes up 48.6% of the total value of the crypto market as of 2024. As of February 2024, the global cryptocurrency market cap is USD 2.09 trillion whereas Bitcoin's market cap of USD 1.02 trillion accounts for around 50% of that total 1. During the global economic crisis of 2009, Bitcoin was introduced as a so-lution to the issues with centralized transaction management. It offers a number of advantages, including increased trust, security, and transparency among mem-ber organizations by enhancing the traceability of data shared across a business network and generating cost savings through new efficiencies [11]. Nearly all cryptocurrencies, including Bitcoin [7], Ethereum [12], Bitcoin Cash [13], and Litecoin [14], are secured by blockchain networks. A blockchain is essentially a public ledger of transactions that anybody can examine and validate [15]. Trans-actions are broadcast by users in a peer-to-peer network, and participants use this ledger to validate them. The decentralization of the blockchain among a network of nodes ensures that it is not under the control of a single entity [16].\nThe consensus and incentive mechanisms are two of the core components of blockchain networks [16, 17, 18]. As the blockchain is decentralized, a consen-sus mechanism is essential for achieving common agreement among all nodes on the state of the ledger, thereby preventing inconsistencies and fraudulent updates [19, 20]. There are several consensus mechanisms, each with its own approach. These include Proof-of-Work (PoW) [16], Proof-of-Stake (PoS) [21], Proof-of-Activity (PoA) [22], and Proof-of-Burn (PoB) [23], among others. Bitcoin em-ploys PoW consensus mechanism which involves, participants, known as min-ers, compete to solve a complex cryptographic puzzle known as the PoW puzzle [17, 24]. When a miner successfully solves this puzzle, they share the solution"}, {"title": "2. Preliminaries", "content": "This section offers a brief overview of blockchain fundamentals, covering the PoW consensus algorithm, mining process, blockchain forks, and mining pools"}, {"title": "2.1. Proof of Work and Mining", "content": "Blockchain is a distributed ledger technology that operates in a decentralized manner, enabling the secure and transparent recording of transactions across a network of computers [44, 45, 46]. At its essence, a blockchain consists of a se-ries of blocks, each containing a collection of transactions. A block in the Bitcoin blockchain typically consists of components such as Block Header, Transactions, Block Size, Block Height, Block Hash, and Block Reward [47]. The Block header contains metadata about the block. It includes Version, Previous Block Hash, Merkle Root 2, Timestamp, Nonce, and Difficulty Target. The blocks are con-nected through cryptographic hashing, with each block referencing the hash of the preceding block in its header (Figure 1), forming a chronological sequence that is highly resistant to tampering [7].\nThe PoW algorithm functions as Bitcoin's consensus mechanism, facilitat-ing agreement on the state of the blockchain and transaction validation [7, 16]."}, {"title": "2.2. Blockchain Forks", "content": "A blockchain fork occurs when the main chain splits into two separate branches [51]. This situation typically arises when two miners simultaneously discover and broadcast different valid blocks that reference the same preceding block. Each branch of the blockchain now contains a different valid block at the same height. When both blocks are broadcast to the network, nodes receive and propagate both versions. Consequently, different parts of the network may temporarily see dif-ferent versions of the blockchain, leading to a brief period of uncertainty about which block is the \"correct\u201d one. During this time, miners and nodes will continue to build upon the block they received first, effectively extending their respective branches of the blockchain. This creates a competitive environment where miners compete to discover the next block. The branch that expands the fastest\u2014meaning the one with the most blocks added-ultimately becomes the dominant chain. Ac-cording to the blockchain's consensus rules, the network will recognize the longer"}, {"title": "2.3. Mining Pools", "content": "The current hash rate of modern mining operations exceeds 7 \u00d7 10^{19}  hashes per second [52]. As a result, the likelihood of an individual miner successfully discovering a block is extremely low. To address this, miners join mining pools to achieve a steadier income and reduced variance in rewards [33]. Mining pools provide miners with a higher probability of mining blocks and earning rewards, thereby reducing the financial risks associated with solo mining by increasing their chances of earning rewards more consistently [53]. Nowadays, more than 90% of cryptocurrency mining is conducted through pooled mining [54].\nIn a mining pool, miners collaborate by pooling their resources to jointly work on block discovery and share the resulting rewards. In a typical setup, a pool operator oversees the management of mining, coordinating the pool's activities. The operator sets up and maintains the pool's server, monitors its performance, distributes the rewards among the participants, and may charge a fee for their ser-vices. Individual miners join the pool by connecting their mining hardware to the pool's server, allowing their computational power to be combined with that of other miners. The pool operator assigns smaller, manageable tasks to each miner, and miners contribute to the pool's computational effort by finding and submitting shares. When a miner finds a block that produces a hash starting with a consid-erable number of zeros, they submit this hash to the pool manager as a share. Each hash attempt has a probability of  \\frac{1}{2^{32}} of resulting in a share. Solving shares involves the same process as mining a block, but shares are solutions that meet a lower difficulty target set by the pool, rather than the full network difficulty. The pool manager verifies the share submitted by the miner to ensure it meets the pool's difficulty target. When a miner in the pool discovers a share that satisfies the network's difficulty target, it is submitted as a valid block to the blockchain network. Upon finding a valid solution that meets the network's difficulty, Bit-coin's incentive mechanism decides how the rewards are distributed among the miners involved in the pool. These distribution mechanisms, also known as pay-out or reward schemes, vary in structure and impact. Below are some of the most common payout schemes:"}, {"title": "3. Methodology", "content": "The study utilized a Systematic Literature Review (SLR) methodology to ad-dress the research questions detailed in Section 3.1 In accordance with the updated 2020 Preferred Reporting Items for Systematic Reviews (PRISMA) guidelines [55]. The selection of studies for our SLR focusing on attacks targeting con-sensus and incentive mechanisms in PoW-based blockchain networks involves a rigorous, transparent, and methodical process to ensure the inclusion of relevant, high-quality research. The selection process consisted of the following steps:"}, {"title": "3.1. Formulation of research questions", "content": "To guide our investigation into attacks on consensus and incentive mecha-nisms, we formulated the following research questions (RQs):\n\u2022 RQ1: How do pure attacks perform in isolation within PoW-based blockchain systems and what are their effectiveness and profitability?\n\u2022 RQ2: What are the impacts on their effectiveness and profitability when these attacks are combined, either with each other or with other malicious or non-malicious strategies?\n\u2022 RQ3: How does the competition between multiple mining pools deploying attacks like selfish mining and block withholding against each other affect the profitability of each pool?"}, {"title": "3.2. Data Sources and Search Strategies", "content": "The SLR conducted in this study involved an in-depth exploration of pub-lished articles spanning the period from 2018 to 2024 across a wider range of electronic databases: Scopus, IEEE Xplore Digital Library, Springer Link and Google Scholar. These databases were selected due to their globally acknowl-edged impact indices, which encompass a wide array of peer-reviewed scientific and scholarly literature from various scientific domains and disciplines world-wide. We determined search strings by identifying associated key terms within consensus and incentive attacks. This was based on our subject knowledge and previous most-cited research papers and journals. We established two generic search terms in association with informatics and employed Boolean operators as follows to encompass all literature focusing on bitcoin-like PoW-based blockchain systems.\n(blockchain AND bitcoin)\nDrawing upon subject knowledge, we identified various types of attacks tar-geting consensus and incentive mechanisms in PoW-based blockchain networks. Subsequently, we formulated search terms tailored to capture these attacks effec-tively as given below.\n(selfish mining, 51% attack, pool hopping, stubborn mining, block discarding, block withholding, honest mining, mining attack, faw attack, double spending)\nSubsequently, we combined these key values into the generic query and ex-ecuted iterative queries across digital libraries for each attack. A few example search queries are given below.\n\u2022 Query1: (\"blockchain\" AND \"bitcoin\u201d) AND (\"mining attack\")\n\u2022 Query2: (\u201cblockchain\u201d AND \u201cbitcoin\u201d) AND (\u201cselfish mining\u201d)\n\u2022 Query3: (\u201cblockchain\u201d AND \u201cbitcoin\u201d) AND (\u201c51% attack\")"}, {"title": "3.3. Selection of studies", "content": "These inclusion criteria help ensure that our SLR focuses on relevant, high-quality research that contributes meaningfully to understanding attacks on con-sensus and incentive mechanisms of PoW-based blockchain networks.\n\u2022 Empirical studies employing quantitative, qualitative, or mixed-methods re-search designs, including experimental studies, case studies, surveys, and observational studies.\n\u2022 Articles that specifically focus on the development, implementation, as-sessment, or implications of various attacks on the consensus and incentive mechanisms of PoW-based blockchain networks.\n\u2022 Only the articles published in English are considered.\n\u2022 Articles with a clear description of research methods, data collection tech-niques, analysis procedures, and consideration of potential sources of bias.\n\u2022 Articles available through academic databases, institutional repositories, or other accessible sources for data extraction and analysis.\nWe established these inclusion criteria to ensure our SLR includes only the most relevant and high-quality studies. This strategy enhances the reliability and validity of our findings, providing a solid basis for understanding the various at-tacks on consensus and incentive mechanisms in PoW-based blockchain networks."}, {"title": "3.4. Screening Process", "content": "The screening process for our SLR utilizes a systematic and thorough method to guarantee the inclusion of relevant, high-quality studies. It comprises two pri-mary stages: initial screening and full-text screening. This process helps in effi-ciently filtering out irrelevant studies and selecting those that meet the predefined inclusion criteria."}, {"title": "3.4.1. Initial Screening", "content": "The initial screening phase entails an initial review of the titles and abstracts of all studies obtained from our search strategy. The primary goal is to quickly assess each study's relevance to the research questions and eliminate those that do not fulfil the fundamental inclusion criteria. During this phase, the titles and ab-stracts of 518 publications were reviewed by two independent reviewers to assess their relevance. The reviewers then applied predefined inclusion criteria, focusing"}, {"title": "4. Results", "content": "In this section, we present the findings of our SLR, organized to address our three primary research questions. Section 4.1 focuses on pure attacks, directly mapping to RQ1, where we evaluate the effectiveness and profitability of individ-ual attack strategies within PoW-based blockchain systems. Section 4.2 delves into hybrid attacks, aligning with RQ2, as we investigate how the combination"}, {"title": "4.1. Pure attacks analysis", "content": "In our study, we define pure attacks as individual, discrete strategies employed by attackers to exploit vulnerabilities in consensus and incentive mechanisms of PoW-based blockchain systems. These attacks are executed independently, with-out the need to combine them with other strategies. In this section, we analyze the mechanism behind these strategies and evaluate their effectiveness and profitabil-ity."}, {"title": "4.1.1. Selfish mining", "content": "Eyal and Sirer [33] proposed a strategy known as selfish mining, which al-lows a minority pool to earn more revenue than its share of the overall mining power. The concept behind selfish mining involves the pool intentionally forking the main chain by concealing its mined blocks from public view. As a result, the pool mines on its own private branch while the honest network continues to mine on the public chain. By consistently adding more blocks, the pool creates a sig-nificant lead over the public chain. When the public chain gets close to matching the length of the pool's private branch, the pool releases blocks from its private chain to the public, effectively discarding the blocks mined by the honest net-work. This compels honest miners, who are following the Bitcoin protocol, to waste resources on solving cryptographic puzzles that yield no real benefit. Eyal and Sirer [33] outlined the strategy of selfish mining by assuming that miners are categorized into two groups: an adversarial minority pool that employs the selfish mining approach and possesses a fraction \u03b1 of the network's total computational power, and honest miners, who form the majority and follow the standard Bitcoin protocol, controlling the remaining portion 1 \u2212 \u03b1 of the network's computational power. They introduced a parameter known as communication capability denoted as \u03b3, which indicates the fraction of honest miners who selects pool's branch during a blockchain fork, while the remaining fraction 1 \u2212 \u03b3 mines on the other branch. This occurs because when both the pool and an honest miner publish their newly mined blocks around the same time, not all miners in the network receive the notification immediately due to communication and propagation delays. As a result, only a portion of honest miners become aware of the new block. Their"}, {"title": "4.1.2. Stubborn Mining", "content": "Nayak et al. [34] introduced a set of mining strategies known as stubborn mining, which not only extend the selfish mining but also enable miners to achieve greater profits. The core idea behind stubborn mining strategies is that attackers can frequently achieve higher profits by continuing to mine on their private chain, even when their private chain lags behind the honest chain. This contrasts with the selfish mining strategy, where the selfish miner withholds their mined blocks only when they are ahead and adopts to the honest chain when they fall behind. In their study, three stubborn mining strategies were presented: Lead Stubborn (L-stubborn), Equal Stubborn (F-stubborn), and Trail Stubborn (Tj-stubborn) mining. Each strategy involves slightly different behaviors from the attacker.\nIn the L-stubborn strategy, an attacker risks their mined blocks by selectively releasing them, even when maintaining a significant lead over the public chain. When the honest network finds a block, the attacker reveals only enough blocks to match the public chain's length, rather than disclosing their entire private chain, as seen in selfish mining. This results in a fork in the blockchain, with a fraction \u03b3 of honest miners working on the attacker's chain and the remainder 1 \u2212 \u03b3 continuing on the public chain. This strategy carries the risk of losing the private chain if the public chain ultimately becomes the accepted chain.\nIn the F-Stubborn strategy, the attacker refrains from revealing their next block when the blockchain encounters an equal-length fork. Rather than disclosing their block to match the public chain, the attacker retains it privately and continues mining on their own chain. This approach contrasts with selfish mining, in which an attacker would usually release their next block to match the length of the public chain.\nThe idea behind Tj-stubborn strategy is that the attacker persists in mining on their private chain, even when it lags behind the public chain, aiming to eventu-ally close the gap and overtake it. Under Tj-stubborn strategy, Nayak et al. [34] presented a family of \"trail stubborn\u201d strategies characterized by the parameter j. This parameter determines that the attacker will abandon their private chain if it"}, {"title": "4.1.3. Optimal selfish mining", "content": "Sapirshtein et al. [35], used a general Markov Decision Process (MDP) [79] model, to represent the mining process. Solving this MDP yields an optimal self-ish mining (OSM) strategy, enabling even smaller mining pools to achieve higher rewards than through standard selfish mining. They initially formulated the min-ing process as a single-player decision problem with a non-linear objective func-tion (Equation 2).\nREV = \\frac{E[\\sum_{t=1}^T r_t^1(\\pi)]}{E[\\sum_{t=1}^T r_t^1(\\pi) + \\sum_{t=1}^T r_t^2(\\pi)]}  (2)\nwhere  r_t^1(\\pi) ,  r_t^2(\\pi)  is the immediate reward issued in the block interval t un-der the action defined by policy , and T is the size of the observing window. The action space includes four actions: Adopt, Override, Match, and Wait. Each state is represented by a three-element tuple ( l^{(a)}, l^{(h)}, fork ), where  l^{(a)} and l^{(h)} denote the lengths of the adversary's and the honest chain, respectively, since the last fork. The fork element indicates one of three states: relevant, irrelevant, or ac-tive. To obtain an optimal mining policy, the study addressed the the non-linear objective function by initially converting the problem into a series of MDPs with linear objectives. Subsequently, they employed a standard MDP solver alongside a numerical search across these MDPs to derive the optimal selfish mining pol-icy. Their simulations reveals that an attacker can achieve a greater portion of the rewards by employing a lower profit threshold of 23.21%.\nHowever, this approach faced limitations due to its model-based nature. It requires knowledge of network parameters such as the attacker's computational power (\u03b1) and communication capability (\u03b3). In real blockchain networks, these values are difficult to determine due to their variability [59]. Moreover, the model does not account for various blockchain characteristics such as stale block rates, confirmation times, and real-world parameters like network delays [60]. Conse-quently, there is a substantial gap between this model and real-world blockchain networks."}, {"title": "4.1.4. Optimal selfish mining with Reinforcement Learning", "content": "In contrast to the model-based approach presented by Sapirshtein et al. [35], Wang et al. [59] proposed a model-free, Reinforcement Learning (RL) [80, 81] based approach which allows an RL agent to dynamically learn a mining strat-egy with performance approaching that of the optimal mining strategy. For their work, they adopted the MDP mining model proposed by Sapirshtein et al. [35] with tabular Q-Learning [82] algorithm to derive the optimal mining strategy. In their research, they employed a refined version of the Q-Learning algorithm, termed the Multidimensional Q-Learning algorithm, owing to the non-linearity inherent in the objective function (Equation 2). Leveraging this multidimensional Q-Learning algorithm, they successfully optimized the non-linear objective func-tion to achieve the optimal mining strategy.\nHowever, this approach faced limitations in its applicability to a real blockchain environment due to two primary reasons. Firstly, it relied on the MDP model proposed by Sapirshtein et al. [35], which lacked consideration for real-world blockchain parameters like stale block rates, eclipsed attacks, propagation param-eters, among others. Secondly, in their study, they employed a tabular Q-Learning algorithm, which is highly inefficient for handling realistic blockchain environ-ments with large state spaces. Indeed, this directly impacts the convergence of the algorithm. If the algorithm requires a substantial amount of time to discover the optimal policy, it becomes economically unviable for miners. This is because prolonged computation time translates to increased expenses for hardware and computing power that the miners has to expend, reducing the economic feasibility of mining operations."}, {"title": "4.1.5. Double-spending", "content": "Sompolinsky and Zohar [42] show that malicious entities possess the capabil-ity to disrupt the synchronization of the ledger across multiple nodes, facilitating a form of attack known as the double-spending attack. In a double-spending attack, the attacker spends the same cryptocurrency tokens more than once. There are many variants of double-spending attacks.\nThe Race attack exploits the traders and merchants who accept payments im-mediately upon receiving \"0-unconfirmed\u201d transactions [83, 64]. A 0-confirmation transaction is simply a transaction that has been broadcast to the network but has not yet been included in a block and added to the blockchain. These transactions are risky because they are susceptible to being reversed or replaced as they have not yet been confirmed. The Race attack involves the following steps."}, {"title": "4.1.6. Pool Hopping attack", "content": "The Pool Hopping attack [70] involves miners carefully timing when they join and leave a mining pool to increase their mining reward. In this strategy, min-ers direct their computational resources to the pool when it's most advantageous, then pull out and move their resources elsewhere when the potential rewards de-crease. By doing so, these miners manage to earn rewards that are higher than what would be fair based on their actual contribution to the pool's overall com-putational power, resulting in smaller rewards for other miners. Pool hopping is particularly effective in pools that use the proportional reward system, which is popular because of its simplicity. In this system, the value of a share submitted at any given moment is influenced by the total number of shares submitted since the last block was found. It means during a \"short mining round\", fewer shares are generated, so each share holds a relatively higher value in the proportional reward system. Miners participating in a short round may earn a higher reward per share because the total number of shares submitted is low, leading to a larger portion of the block reward being distributed to each participating miner. In contrast, a \"long mining round\" occurs when it takes more time to discover the next block, resulting in a larger number of shares being submitted. This makes the value of each share less worth. A rational miner can exploit this situation by strategically submitting shares to the pool during shorter rounds and redirect their efforts elsewhere during longer rounds. As a result, the rational miner will leave the pool when it becomes less rewarding and redirect their efforts to another pool with better rewards. This strategic shifting of resources allows them to increase their mining reward at the expense of miners who consistently contribute to the pool. This is because, since pool hoppers get a disproportionate share of the rewards, while consistent min-ers who contribute throughout the round receive less than their fair share. This unfair distribution discourages regular miners from staying in the pool, as they\""}, {"title": "4.1.7. Block Discarding attack", "content": "Bahack [71] introduced the Block Discarding attack, a concept similar to the selfish mining strategy proposed by Eyal and Sirer [33]. However, there are sev-eral key distinctions between these approaches. Firstly, they introduced a param-eter called Network Superiority (ns), analogous to the communication capability of the attacker (\u03b3) presented by Eyal and Sirer [33]. They analyzed the Block discarding attack through a hierarchical family of strategies denoted as  s_{t,k} , where k represents different strategies (k = 0,1,2,...) tailored to various combinations of attacker hash rates (p) and ns values. In this family, the selfish mining strategy proposed by Eyal and Sirer [33] is considered the simplest case, corresponding to the case when k = 1. Secondly, unlike the selfish mining strategy, which was initially designed for mining pools, Bahack [71] argues that maintaining block se-crecy within pools is highly challenging. Therefore, they propose that the Block discarding attack is more feasible for execution by solo miners rather than mining pools. This distinction emphasizes the tailored approach for solo miners, aiming to exploit the network's vulnerabilities more effectively without the complexities involved in coordinating a mining pool's efforts. Another notable difference is that Eyal and Sirer [33] describes a process that continues indefinitely until the attacker's pool completely ousts all other miners. In contrast, Bahack [71] argues that a more likely outcome is the establishment of a new equilibrium where there are fewer honest miners, but those remaining continue to maintain the same profit levels due to the difficulty adjustment making mining easier by lowering the dif-ficulty level to maintain the same block rate. Alternatively, the study suggests a scenario where all honest miners might eventually leave the system entirely."}, {"title": "4.1.8. Difficulty Raising attack", "content": "Bahack [71] proposed another type of attack called the Difficulty Raising at-tack which aims to manipulate the Bitcoin difficulty adjustment mechanism to create a situation where an attacker's chain can surpass the honest chain. This involves increasing the difficulty of the attacker's chain in such a way that it even-"}, {"title": "4.1.9. Block Withholding attack", "content": "The Block Withholding (BWH) attack is a mining attack in which a malicious miner participates in a mining pool while withholding valid blocks, thereby in-flicting financial damage on the pool [72]. The attacker initiates their attack by joining a mining pool just like any regular miner and contributing their computa-tional power to the mining pool. The attacker starts to mine and submits Partial"}, {"title": "4.2. Hybrid attacks analysis", "content": "In our study we define Hybrid attacks as sophisticated attack strategies that combine a pure attack with another pure attack or with another malicious or non-malicious strategy to potentially increase the success probability or the profitabil-ity of the attack. This section provides a comprehensive analysis on hybrid at-tacks. Figure 4 illustrates the relationships and interactions between various attack strategies."}, {"title": "4.2.1. Intermittent Selfish mining (ISM)", "content": "Negy et al. [36] introduced a variant of the selfish mining strategy known as Intermittent Selfish Mining (ISM). In this approach, the attacker halts their selfish mining actions immediately following a difficulty adjustment. In particular, the attacker switches between selfish and honest mining strategy at every difficulty adjustment in Bitcoin. ISM strategy consists of two distinct phases. In the first phase, the attacker engages in selfish mining with the intention of undermining the honest miners by withholding blocks and strategically releasing them to maximize their own block rewards. This phase mainly serves to invalidate the blocks mined by the honest participants; therefore, it sets the attacker in an advantageous posi-tion for the start of the next epoch. In the second phase, following the difficulty adjustment, the attacker transitions to honest mining. Given the reduced difficulty due to the slower block discovery rate induced by the earlier selfish mining phase, the mining process is more efficient. This lower difficulty results in a faster min-ing rate, benefiting all miners, but most significantly allowing the attacker to gain a higher relative reward in both phases."}, {"title": "4.2.2. Semi-selfish mining", "content": "The selfish mining strategy can backfire if honest miners detect an abnormal forking rate, prompting them to abandon the blockchain and thereby reducing the"}, {"title": "4.2.3. Selfish mining with Eclipse attacks", "content": "Heilman et al. [62] showed that the success of the selfish mining strategy can be increased when it is combined with eclipse attacks. The effectiveness of self-ish mining depends on the computational power of the adversary pool (\u03b1) and the communication capability of the adversary (\u03b3). As \u03b3 represents the compu-tational power of the honest miners that end up mining on the adversary's chain during a fork, when \u03b3 is high, then \u03b1 can be small [62]. A lower \u03b1 means that the pool needs to possess small computational power, making the attack easier. With an eclipse attack, the adversary can increase \u03b3 by isolating certain miners from the rest of the network. The isolated (eclipsed) miners are fed a false view of the blockchain that only shows the adversary's blocks. When eclipsed miners find blocks that would compete with the adversary's chain, the adversary discards these blocks, preventing them from propagating through the network. By control-ling what the eclipsed miners see, the adversary ensures that these miners continue to mine on the adversary's chain. This effectively increases \u03b3 because the eclipsed miners unknowingly support the adversary's chain rather than the honest chain. With a high \u03b3, even a small \u03b1 is enough for the adversary to successfully imple-ment the selfish mining strategy."}, {"title": "4.2.4. Stubborn mining with Eclipse attacks", "content": "Nayak et al. [34] showed that an attacker can increase their revenue by com-bining their stubborn strategies with eclipse attacks. They presented two extremes of composing eclipse attacks with stubborn strategies, namely Collude and De-stroy, and proposed a moderate yet effective strategy called Destroy if No Stake (DNS).\nUnder the Destroy strategy, the attacker chooses to drop all blocks mined by the eclipsed victim. This particularly neutralizes or \u201cdestroys\u201d the impact of the eclipsed victim's mining efforts, enabling the attacker to increase their revenue.\nUnder the Collude strategy, the attacker enters into a collaborative agreement to mine together. Both the attacker and the eclipsed victim work on a single private chain, and the attacker agrees to accept the blocks mined by the eclipsed victim to extend this private chain. While the attacker and the eclipsed victim work together,"}, {"title": "4.2.5. Double-spending with Sybil attacks", "content": "Iqbal and Matulevi\u010dius [61] showed how a double-spending attack can be combined with a Sybil attack. In this scenario, the attacker creates numerous fake identities, known as Sybil nodes, to interfere with regular communication and transaction processing in a blockchain network. The attacker initially gener-ates several Sybil nodes, which appear as legitimate participants in the network. After that, the attacker initiates a transaction Tx and broadcasts it to the network. Honest nodes, which follow the standard protocol, verify this transaction and add it to their memory pool, where pending transactions wait to be included in the next block.\nWhile the network processes Tx, the attacker starts mining a private chain and simultaneously creates a double-spend transaction Ty, which is included in the attacker's private chain. The Sybil nodes are used by the attacker to intentionally delay the propagation of the new block containing Tx. These nodes accomplish this by refraining from sharing information about the newly mined block with the rest of the network, effectively halting the propagation process. If honest nodes do not receive a new block within a certain time frame, they stop waiting and"}, {"title": "4.2.6. Double-spending with Eclipse attacks", "content": "Iqbal and Matulevi\u010dius [61] demonstrated a type of hybrid attack that com-bines elements of an eclipse attack to execute a double-spending scheme, exploit-ing both 0-confirmation and N-confirmation mechanisms. In this attack, the ad-versary targets specific nodes within a blockchain network, rather than the entire network, as is typical with a Sybil attack. The attacker first identifies a target node, which could be a miner, a merchant, or any other relevant node. Subsequently, the attacker deploys an eclipse attack by flooding the victim node with connections from their own IP addresses, isolating it from the rest of the network. As a result, the victim node can only communicate with the attacker.\nIn the case of the 0-confirmation mechanism, the attacker sends a transaction Tx to the merchant's eclipsed node. The isolated merchant, believing the trans-action is valid, proceeds to send the goods. Concurrently, the attacker initiates a second transaction Ty that double-spends the same amount of cryptocurrency and broadcasts this transaction to the rest of the network. Since the merchant's node is eclipsed, it cannot broadcast Tx to the wider network. Consequently, when the network eventually confirms a transaction, it validates Ty and discards Tx. This allows the attacker to successfully receive the goods without actually making a payment, as the legitimate transaction Tx never gets confirmed.\nIn the case of N-confirmations, where merchants may wait for a certain num-ber of confirmations before releasing goods, the attacker isolates both the mer-chant and a fraction (n) of the miners responsible for confirming transactions. These miners are also eclipsed and only see the blockchain controlled by the attacker. Similarly, the attacker generates a transaction Tx for the merchant's eclipsed node. The merchant waits for N \u2013 1 confirmations, which are provided by the miners under the attacker's control during the eclipse. Believing that the"}, {"title": "4.2.7. Double-spending with BGP Hijacking", "content": "The Border Gateway Protocol (BGP) is a protocol used to exchange routing information between different networks, such as Internet Service Providers (ISPs) or Autonomous Systems [61, 86]. These networks are independently operated and collectively comprise the broader internet infrastructure.\nBGP hijacking is a type of routing attack in which an attacker manipulates the BGP protocol to make false routing announcements, diverting traffic from its intended path to a path they control [61]. In this attack, the adversary falsely claims ownership of specific IP address ranges (prefixes), causing traffic destined for those addresses to be rerouted to the attacker's network. This manipulation can lead to network partitioning, including the separation of blockchain data, across the internet.\nBy hijacking IP prefixes, the attacker can effectively isolate significant por-tions of the blockchain network. For instance, they can isolate up to 50% of the Bitcoin network's hash rate by hijacking fewer than 100 BGP IP prefixes. This isolation allows the attacker to slow down the propagation of new blocks across the network. With delayed block propagation, an attacker can execute ei-ther 0-confirmation or N-confirmation double-spending attacks by exploiting the time lag between when a transaction is broadcast and when it is confirmed on the blockchain."}, {"title": "4.2.8. Optimal selfish mining with Eclipse attacks", "content": "Gervais et al. [60"}]}