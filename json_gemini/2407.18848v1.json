{"title": "Repairing Networks of EL\u300d Ontologies using\nWeakening and Completing", "authors": ["Ying Li", "Patrick Lambrix"], "abstract": "The quality of ontologies and their alignments is crucial for\ndeveloping high-quality semantics-based applications. Traditional debug-\nging techniques repair ontology networks by removing unwanted axioms\nand mappings, but may thereby remove consequences that are correct in\nthe domain of the ontology network. In this paper we propose a frame-\nwork for repairing ontology networks that deals with this issue. It defines\nbasic operations such as debugging, weakening and completing. Further,\nit defines combination operators that reflect choices in how and when to\nuse the basic operators, as well as choices regarding the autonomy level\nof the ontologies and alignments in the ontology network. We show the\ninfluence of the combination operators on the quality of the repaired net-\nwork and present an implemented tool. By using our framework together\nwith existing algorithms for debugging, weakening and completing, we\nessentially provide a blueprint for extending previous work and systems.", "sections": [{"title": "1 Introduction", "content": "Ontologies and ontology networks, i.e., a set of ontologies connected through\nalignments, are core components in application scenarios that involve searching,\nintegrating, managing and extracting value from diverse sources of data at large\nscale. In the latter case they are the input for machine learning and data mining\napplications in diverse fields such as business analytics, health, crime analysis,\nand materials design. They are also the structural part of knowledge graphs\nwhich are used by, e.g., major data and database providers such as Google,\nAmazon, Meta, and Neo4j. The quality of ontologies, ontology networks and\nknowledge graphs is crucial for developing high-quality semantics-based appli-\ncations. However, ensuring their quality, in particular regarding completeness\n(or coverage, all relevant information is modeled) and correctness (no wrong\ninformation is modeled), is a major challenge [33,32,9,4,18].\nRepairing ontology networks is a natural requirement for any application\nthat would need to use several ontologies. We have, for instance, experience in"}, {"title": "2 Preliminaries", "content": ""}, {"title": "2.1 Description logics", "content": "Description logics (DL) [2] are knowledge representation languages where con-\ncept descriptions are constructed inductively from a set $N_C$ of atomic concepts\nand a set $N_R$ of atomic roles and (possibly) a set $N_I$ of individual names. Dif-\nferent DLs allow for different constructors for defining complex concepts and\nroles. An interpretation $I$ consists of a non-empty set $\u0394^I$ and an interpretation\nfunction $\u00b7^I$ which assigns to each atomic concept $P \\in N_C$ a subset $P^I \\subseteq \u0394^I$, to\neach atomic role $r \\in N_R$ a relation $r^I \\subseteq \u0394^I \u00d7 \u0394^I$, and to each individual name\n$i \\in N_I$ an element $i^I \\in \u0394^I$. The interpretation function is straightforwardly\nextended to complex concepts. A TBox is a finite set of axioms which in $EL^+\n\u22a5$\nare general concept inclusions (GCIs). The syntax and semantics for $EL^+\n\u22a5$ are\nshown in Table 1."}, {"title": "2.2 Ontology networks", "content": "In this paper we assume that ontologies are represented using DL TBoxes. An\nalignment between two ontologies is a set of mappings between the ontologies. A\nmapping between two ontologies is represented by $P \\subseteq Q$ where $P$ is a concept\nin the first ontology and $Q$ is a concept in the second ontology. Note that equiv-\nalence mappings (e.g., $P$ is equivalent to $Q$) are represented by two subsumption\nmappings ($P \\subseteq Q$ and $Q \\subseteq P$). Although we base our work and examples on\n$EL^+\n\u22a5$, the discussions hold for ontologies represented by DLs in general. An on-\ntology network is a collection of ontologies together with their alignments and\ncan be represented by a TBox (Def. 1). In the remainder we use the term axiom\nfor the axioms in the ontologies and the mappings. When we mean axioms in\nthe ontologies, we will explicitly state this.\nDefinition 1. Let $T_1, ...,T_n$ be TBoxes representing ontologies $O_1, ..., O_n, re-\nspectively. For $i, j\\in [1..n]$ with $i < j$, let $A_{ij}$ be an alignment between ontology\n$O_i$ and $O_j$. The network of the ontologies and their alignments is then repre-\nsented by TBox $T = (\\bigcup_{i=1..n} T_i) \\cup (\\bigcup_{i,j=1..n,i<j} A_{ij})$.\nOur aim is to find repairs that remove as much wrong knowledge and add as\nmuch correct knowledge (back) to our ontology network as possible. Therefore,\nwe use the preference relations more complete and less incorrect between TBoxes\n(Defs. 2 and 3) that formalize these intuitions [18]. Further, if a TBox represent-\ning an ontology (network) is more complete/less incorrect than the Tbox of an\nother ontology (network), then we say that the first ontology (network) is more\ncomplete/less incorrect than the second ontology (network). The definitions as-\nsume the existence of an oracle (representing a domain expert) that, when given\nan axiom, can answer whether this axiom is correct or wrong in the domain of\ninterest of the ontology network.\nDefinition 2. (more complete) TBox $T_1$ is more complete than TBox $T_2$ (or $T_2$\nis less complete than $T_1$) according to oracle $Or$ iff $(\u2200\u03c8: (T_2 |= \u03c8 > Or(\u03c8) ="}, {"title": "2.3 Basic operations", "content": "To repair ontologies, algorithms can be developed using a number of basic oper-\nations such as debugging, removing, weakening and completing, and combining\nthese in different ways [24,25]. In this paper we use variants of these operations\nto repair ontology networks.\nGiven a set of wrong axioms $W$, debugging aims to find a set of wrong\nasserted axioms $D$ that when all axioms in $D$ are removed from the network,\nthe axioms in $W$ cannot be derived anymore. Many debugging approaches have\nbeen proposed (e.g., [40,39,16,28,41,15,23,11,29,31,42,7,1,17,36,38,30], overview\nin [18]). A basic approach is based on the computation of justifications for the\nwrong axioms and then computing a Hitting set over the set of justifications.\nAs an example, in Fig. 1 derived wrong axiom $A \\subseteq C$ needs to be removed.\nThis can be done by removing asserted axiom $A \\subseteq B$ or asserted axiom $B\n\\subseteq C$. Removing deletes all the wrong asserted axioms in a given set $D$ from the\nontology network. Removing makes a network less or equally incorrect than it\nwas before the operation. Given an axiom, weakening aims to find other axioms\nthat are weaker than the given axiom, i.e., the given axiom logically implies the\nother axioms within the network. For the repairing this means that a wrong\naxiom $\u03b1 \\subseteq \u03b2$ can be replaced by a correct weaker axiom $s_b \\subseteq s_p$ such that $s_b$\nis a sub-concept of $\u03b1$ and $s_p$ is a super-concept of $\u03b2$, thereby mitigating the\neffect of removing the wrong axiom (Fig. 1). Algorithms for weakening have\nbeen provided in e.g., [43,3,5,24]. Completing aims to find correct axioms that\nare not derivable from the ontology yet and that would make a given axiom\nderivable. For a given axiom $\u03b1 \\subseteq \u03b2$, it finds correct axioms $s_p \\subseteq s_b$ such that\n$s_p$ is a super-concept of $\u03b1$ and $s_b$ is a sub-concept of $\u03b2$ (Fig. 1). This means\nthat if $s_p \\subseteq s_b$ is added to $T$, then $\u03b1 \\subseteq \u03b2$ would be derivable. Completing is\nperformed on correct axioms, and in repairing, it is applied to weakened axioms.\nCompleting algorithms are proposed in, e.g., [20,44,6,8,24]. Note that weakening\nand completing are dual operations where the former finds weaker axioms and\nthe latter stronger axioms. Both these operations make an ontology network\nmore or equally complete.\nThese basic operations can be combined in different ways and there are\nchoices to be made in terms of, e.g., the order in which the operations are\nperformed, the order in which the axioms are processed, whether one axiom is"}, {"title": "3 Repairing ontology networks - problem definition", "content": "In this section we define the repairing problem for ontology networks. Def. 4 is\nan extension of the definition of repair for single ontologies as defined in [24]. We\nare given a set of wrong axioms W that we want to remove from the ontology\nnetwork, and when they are removed, they cannot be derived from the TBox\nrepresenting the ontology network anymore. These axioms in W can be axioms\nin the ontologies or mappings. Further, to guarantee a high level of quality of\nthe ontology (i.e., so that no correct information is removed or no incorrect\ninformation is added), domain expert validation is a necessity (e.g., [35,24]).\nTherefore, we assume an oracle (representing a domain expert) that, when given\nan axiom, can answer whether this axiom is correct or wrong in the domain of\ninterest of the ontology network. A repair (A, D) for the ontology network given\nthe TBox T, oracle Or, and a set of wrong axioms W, is a tuple containing two\nsets: a set A of axioms that are correct according to the oracle and should be\nadded to the TBox, and a set D of asserted axioms that are not correct according\nto the oracle and should be removed from the TBox. We require that when the\naxioms in D are removed and the axioms in A are added, the wrong axioms in\nW cannot be derived anymore.\nDefinition 4. (Repair) Let TBox $T = (\\bigcup_{i=1..n} T_i) \\cup (\\bigcup_{i,j=1..n,i<j} A_{ij})$ repre-\nsent a network of ontologies $O_i$ represented by TBoxes $T_i$, and their alignments\n$A_{ij}$. Let $Or$ be an oracle that given a TBox axiom returns true or false. Let $W$\nbe a finite set of TBox axioms in T such that \u2200 $\u03c8 \\in W$: $Or(\u03c8) = false$. Then, a\nrepair for Debug-Problem DP(T, Or, W) is a tuple (A, D) where A and D are\nfinite sets of TBox axioms such that\n(i) \u2200 $\u03c8 \\in A$: $Or(\u03c8) = true$;\n(ii) D is a finite set of asserted axioms in T;\n(iii) \u2200 $\u03c8 \\in D$: $Or(\u03c8) = false$;\n(iv) \u2200 $\u03c8 \\in W$: $(T\\cup A) \\backslash D |\\neq \u03c8$.\nFrom a theoretical point of view, as we have represented the ontology network\nas a TBox, and previous work has represented ontologies as TBoxes, we could\nreuse the algorithms and approaches in, e.g., [24,25]. However, from a practical\npoint of view, the situation is more complex. When working with single ontolo-\ngies, it is in the interest and mandate of the ontology owners to repair their\nontologies. However, when ontologies are connected in a network, the ontology\nand alignment owners may want to retain different levels of autonomy and not\nnecessarily allow others to change or propose changes to their ontologies and\nalignments. Also, computation time and validation work for repairing may be\nissues. In this case, computation time and validation work may be lower within\nan ontology or alignment than for the whole network. In this paper we discuss\nthree levels of autonomy and show the influence of these different choices.\nThe first level consists of the cases 'O' (ontology) and 'M' (mappings). 'O'\nrepresents the choice where ontologies are completely autonomous. Essentially,\nthis means that ontologies act on their own regarding detection and repairing of\ndefects. W in Def. 4 contains only axioms in the ontology, only the axioms within"}, {"title": "4 Repairing ontology networks - Combination operators", "content": "During the repairing process different levels of autonomy can be used at different\nstages. The choice has an influence on the quality of the repair. Here we show\nthis influence for different stages.\nWe note that a choice may be made regarding which axioms to materialize. For\ntaxonomies it may be feasible to materialize all. However, for $EL^+\n\u22a5$ there is an infinite\nnumber of derivable axioms. In our experiments we restrict the space to axioms with\nconcepts at the left- and right-hand side with non-nested operators (SCC in [24])."}, {"title": "4.1 Use of background", "content": "As discussed earlier, we can use different autonomy levels during the computation\nof repairs. In our algorithms, this is reflected by which TBox is used. We can\ncombine particular choices for debugging, removing, weakening and completing\nalgorithms with different autonomy levels. As an example, assume we have made\nthe choices for the basic operations as in Algorithm 1. Then, for autonomy level\n'ON' we can use Algorithm 1 with as input the TBox representing the whole\nnetwork. For levels 'O' and 'MO' we can use Algorithm 1 repeatedly using each\nof the TBoxes of the ontologies or materialized ontologies, respectively. (Another\npossibility is to use as input the union of these TBoxes, i.e., there will be no\naxioms representing mappings in the network.) For 'M' and 'MM' we use the\nalignments or materialized alignments as TBoxes. The choices are explained in\nTable 2 where KB stands for 'knowledge base'. Note that the choices can be\nperformed on each of the basic operations. For instance, it is possible to debug\nusing 'ON' and then weaken and complete using 'MO'. We can organize the\nchoices in a Hasse diagram as in Fig. 4(a). The proofs for the Hasse diagram are\ngiven in the appendix. In general, using more background knowledge leads to\nmore (or equally) complete and more (or equally) incorrect networks, and more\nvalidation work by the oracle.\nAs an example, assume we have used 'ON in the debugging step where we\nvalidate all axioms in the justifications, for the network in Fig. 3. This results\nin wrong axioms $e \\subseteq b$ and $b \\subseteq D$. We now look at the weakening step for\nthe different autonomy levels. When weakening $e \\subseteq b$ in the second ontology,\nwe use sub-concepts of e and super-concepts of b to find weakened axioms."}, {"title": "4.2 Add sets", "content": "Another stage where the choice of autonomy level influences the quality of the\nrepair is when deciding what repairing solutions to retain for the final repair,\ni.e. A in Def. 4. The choices are summarized in Table 2 under 'AS' (Add Set).\nChoice ASON is the most general case and allows all kinds of axioms to be\nadded to the network. This means that regardless which choice was used during\nthe computation of the repairs, these repairs can be used without any adaptions.\nChoice ASO only allows to add axioms within ontologies. This represents the case\nwhere ontology owners only focus on repairing their own ontologies. Similarly,\nchoice ASM only allows to add mappings and represents the case where alignment\nowners only focus on repairing their own mappings. In ASO and ASM, not all\nrepairing suggestions may be retained for the final solution. Therefore, when\n'ON' was used during the computation of repairs and 'O' or 'M' is used during\nthis stage, this may lead to a lower level of completeness for the network than if\n'ON' is used for this stage. The Hasse diagram for these choices is given in Fig.\n4(b) and the proofs are given in the appendix."}, {"title": "4.3 Finalizing", "content": "In the case of 'ON' the repairing solutions may contain axioms in different on-\ntologies as well as mappings. In this case the ontology and alignment owners\nmay decide to materialize the knowledge derived from the network which re-\ngards their ontology or alignment. From the network point of view the network\ndoes not change logically as the same axioms can be derived. From the ontology\nor alignment point of view, the difference appears when they are disconnected\nfrom the network. The materialized versions are more (or equally) complete."}, {"title": "4.4 Discussion", "content": "When the network is owned by one entity (e.g., in the case of modular on-\ntologies with mappings) or there is a tight cooperation between the owners"}, {"title": "5 Experiments", "content": "As examples of the use of different choices for the combination operators, we\nperformed experiments on 5 ontology networks. The ontologies (ekaw, sigkdd,\niasted, cmt) used in these networks are from the conference track of the OAEI.\nWe have used the parts of these ontologies that are expressible in $EL^+\n\u22a5$ in the\nsense that we removed the parts of axioms that used constructors not in $EL^+\n\u22a5$.\nWe introduced wrong axioms in the ontologies and mappings between ontologies\nby replacing existing axioms with axioms where the left-hand or right-hand side\nconcepts of the existing axioms were changed. Further, we also flagged some\nexisting axioms as wrong in our full experiment set. All axioms were validated\nmanually. The characteristics of the ontologies and the wrong axioms are shown\nin the supplemental material.\nWe repaired the networks using all choices regarding the use of background\nknowledge together with Algorithm 1. To repair ontology axioms we used KBO,\nKBMO and KBON. To repair mappings we used KBM, KBMM and KBON. We\ncomputed the sizes of the sets of sub-concepts and super-concepts used in weake-\ning and completing. The sizes of these sets reflect the number of axioms that\nneed to be validated by the oracle. We note, however, that using the visualization\nin our system (see below) these sets are shown together and thus the validation\nof many axioms can be done at the same time."}, {"title": "6 Implemented system", "content": "We implemented a Java-based system which extends the $EL^+\n\u22a5$ version of the Re-\nPOSE system ([44,22,24]) with full debugging, weakening and completing for\n$EL^+\n\u22a5$ ontology network repairing. The system allows the user to choose different\ncombinations, thereby giving a choice in the trade-off between validation work,\nincorrectness and completeness.\nThe system uses an interactive way to repair the ontology network. It takes\nas input the ontologies and alignments in the network as well as a set of wrong\naxioms. It is also possible to not give a set of wrong axioms but let the system\ndeduce unsatisfiable concepts in the network. As basic algorithms, we have used\nthe black-box algorithm in [15] for debugging, and the weakening and complet-\ning algorithms in [24]. With respect to the combination operators in the Hasse\ndiagrams, the system supports (S-one, D-v-all) and (S-one, D-one-v) thereby\nproviding the choice to validate all axioms in the justifications or to validate\nHitting sets. Regarding weakening the combinations are (R-none, AB-none/W-\nall,U-end_all), (R-all, AB-none/W-all,U-end_all) and (R-one,AB-one/W-one, U-\nend_all). The first combination does not remove wrong axioms during the compu-\ntation, weakens all axioms at once and updates at the end. The second removes\nall wrong axioms before the computation, weakens all axioms at once and up-\ndates at the end. The third removes wrong axioms one at a time during the\ncomputation and puts them back before dealing with the next wrong axiom.\nIt weakens axioms one at a time and updates at the end. For completing, the\nchoices are (C-all,U-end_all) and (C-one,U-end_one). The first combination com-\npletes all weakened axioms at once and updates at the end. The second completes\nthe weakened axioms one at a time and updates the ontology after the weakened\naxiom set is handled for each wrong axiom. Regarding the choices for the com-\nbinations for the network, all choices for KB are implemented. The AS choices\nare supported using visual clues. The concepts in the axioms to be validated are\nlabeled with the ontology source, such that the user can distinguish mappings\nfrom axioms within the ontologies. We also use different colors to represent the\nconcepts which belong to different ontologies. At the appropriate times the sys-\ntem shows the different combinations that can be chosen and the user can select\nthe desired choice.\nFor the basic operations the user interactions are adapted to the task at hand\nand different panels are used. For debugging the user requests the generation of\nthe justifications. Then, the user can validate the axioms in the justifications or\nask the system to compute Hitting sets and validate the axioms in those. The"}, {"title": "7 Conclusion", "content": "In this paper we presented a framework for repairing ontology networks that\nalleviates the problem of removing correct knowledge when removing unwanted\naxioms from the network. It uses the basic operators of debugging, removing,\nweakening and completing for which there exist different approaches. We defined\ncombination operators that represent choices to be made when combining the\nbasic operations. We introduced different levels of autonomy for the ontologies\nand alignments in the networks and defined combination operators based on\nthese levels and the use of background knowledge during the computation of\nrepairs and the selection of the final solution. We have shown the influence of\nthe combination operators on the quality of the repaired network. The framework"}]}