{"title": "Repairing Networks of EL\u300d Ontologies using Weakening and Completing", "authors": ["Ying Li", "Patrick Lambrix"], "abstract": "The quality of ontologies and their alignments is crucial for developing high-quality semantics-based applications. Traditional debugging techniques repair ontology networks by removing unwanted axioms and mappings, but may thereby remove consequences that are correct in the domain of the ontology network. In this paper we propose a framework for repairing ontology networks that deals with this issue. It defines basic operations such as debugging, weakening and completing. Further, it defines combination operators that reflect choices in how and when to use the basic operators, as well as choices regarding the autonomy level of the ontologies and alignments in the ontology network. We show the influence of the combination operators on the quality of the repaired network and present an implemented tool. By using our framework together with existing algorithms for debugging, weakening and completing, we essentially provide a blueprint for extending previous work and systems.", "sections": [{"title": "Introduction", "content": "Ontologies and ontology networks, i.e., a set of ontologies connected through alignments, are core components in application scenarios that involve searching, integrating, managing and extracting value from diverse sources of data at large scale. In the latter case they are the input for machine learning and data mining applications in diverse fields such as business analytics, health, crime analysis, and materials design. They are also the structural part of knowledge graphs which are used by, e.g., major data and database providers such as Google, Amazon, Meta, and Neo4j. The quality of ontologies, ontology networks and knowledge graphs is crucial for developing high-quality semantics-based applications. However, ensuring their quality, in particular regarding completeness (or coverage, all relevant information is modeled) and correctness (no wrong information is modeled), is a major challenge [33,32,9,4,18].\nRepairing ontology networks is a natural requirement for any application that would need to use several ontologies. We have, for instance, experience in a number of settings where an ontology network is repaired. A first example is the case of ontologies in the Ontology Alignment Evaluation Initiative (O\u0391\u0395\u0399) where the ontologies to be aligned and a partial alignment were used to detect and repair defects [21] (and the results were sent to the ontology owners). Another example is the development of modular ontologies where the modules and connections between the modules have been repaired (e.g., [19]). Further, we have worked with companies that used publicly available ontologies as well as concern-wide ontologies and where the network of these were repaired (e.g., [10]).\nThe workflow for dealing with unwanted axioms in ontologies or networks consists of several steps including the detection and localization of the defects and the repairing. In this paper we assume we have detected defects and we now need to repair the ontologies and networks. In the classical approaches the end result is a set of axioms to remove from the ontology or network that is obtained after detection and localization, and the repairing consists solely of removing the suggested axioms. However, more knowledge than needed may be removed and approaches that alleviate the effect of removing unwanted axioms using weakening and completing have been proposed. In [24] a framework for repairing EL ontologies, based on the basic operations removing, weakening and completing, was proposed. Further, different combination operators were introduced that relate to choices that can be made when combining the basic operations (e.g., in which order to perform the operations, and when to update the ontologies). It was shown that the choice of combination has an influence on the amount of validation work by a domain expert and the completeness of the final ontology. It was also shown that earlier work on weakening (without completing) only considered one of the possible combinations. Similarly, earlier work on completing (without weakening) also considered only one of the possible combinations. The framework was extended with the basic operation debugging in [25].\nOur contributions in this paper relate to different ways in which we extend the framework in [24,25] to deal with ontology networks. (i) We formalize the problem, and show that new choices appear in addition to the choices for ontologies, when ontologies are connected with alignments (Sect. 3) (ii) We introduce different levels of autonomy for the ontologies and the alignments in the ontology network, reflecting the policies of the ontology and alignment owners regarding updating and computing for their ontologies and alignments (Sect. 3). We define combination operators based on these autonomy levels and show the influences on the quality of the repair and the validation work (Sect. 4). In general, there is a trade-off between the quality of the repaired ontologies on the one hand, and the amount of validation work for the oracle (e.g., domain experts) and the autonomy level for the ontologies and alignments on the other hand. We also give recommendations about which combinations to use in different cases, and we show that current systems for alignment repair (a special case of ontology network repair) use one particular combination of choices. In Sect. 5 we give examples of repairing existing ontology networks and (iii) in Sect. 6 we briefly"}, {"title": "Preliminaries", "content": "Description logics (DL) [2] are knowledge representation languages where concept descriptions are constructed inductively from a set $N_C$ of atomic concepts and a set $N_R$ of atomic roles and (possibly) a set $N_I$ of individual names. Different DLs allow for different constructors for defining complex concepts and roles. An interpretation $I$ consists of a non-empty set $\\Delta^I$ and an interpretation function $\u00b7^I$ which assigns to each atomic concept $P \\in N_C$ a subset $P^I \\subseteq \\Delta^I$, to each atomic role $r \\in N_R$ a relation $r^I \\subseteq \\Delta^I \\times \\Delta^I$, and to each individual name$^2$ $i \\in N_I$ an element $i^I \\in \\Delta^I$. The interpretation function is straightforwardly extended to complex concepts. A TBox is a finite set of axioms which in $EL_\\bot$ are general concept inclusions (GCIs). The syntax and semantics for $EL_\\bot$ are shown in Table 1."}, {"title": "Ontology networks", "content": "In this paper we assume that ontologies are represented using DL TBoxes. An alignment between two ontologies is a set of mappings between the ontologies. A mapping between two ontologies is represented by $P \\sqsubseteq Q$ where $P$ is a concept in the first ontology and $Q$ is a concept in the second ontology. Note that equivalence mappings (e.g., $P$ is equivalent to $Q$) are represented by two subsumption mappings ($P \\sqsubseteq Q$ and $Q \\sqsubseteq P$). Although we base our work and examples on EL, the discussions hold for ontologies represented by DLs in general. An ontology network is a collection of ontologies together with their alignments and can be represented by a TBox (Def. 1).$^4$ In the remainder we use the term axiom for the axioms in the ontologies and the mappings. When we mean axioms in the ontologies, we will explicitly state this.\nDefinition 1. Let $T_1, ...,T_n$ be TBoxes representing ontologies $O_1, ..., O_n$, respectively. For $i, j \\in [1..n]$ with $i < j$, let $A_{ij}$ be an alignment between ontology $O_i$ and $O_j$. The network of the ontologies and their alignments is then represented by TBox $T = (\\cup_{i=1..n} T_i) \\cup (\\cup_{i,j=1..n,i<j} A_{ij})$.\nOur aim is to find repairs that remove as much wrong knowledge and add as much correct knowledge (back) to our ontology network as possible. Therefore, we use the preference relations more complete and less incorrect between TBoxes (Defs. 2 and 3) that formalize these intuitions [18]. Further, if a TBox representing an ontology (network) is more complete/less incorrect than the Tbox of another ontology (network), then we say that the first ontology (network) is more complete/less incorrect than the second ontology (network). The definitions assume the existence of an oracle (representing a domain expert) that, when given an axiom, can answer whether this axiom is correct or wrong in the domain of interest of the ontology network.\nDefinition 2. (more complete) TBox $T_1$ is more complete than TBox $T_2$ (or $T_2$ is less complete than $T_1$) according to oracle $Or$ iff $(\u2200\u03c8 : (T_2 \\models \u03c8 \u2227 Or(\u03c8) = true) \u2192 T_1 \\models \u03c8)) \u2227 (\u2203\u03c8 : Or(\u03c8) = true \u2227 T_1 \\models \u03c8 \u2227 T_2 \\nvDash \u03c8)$. They are equally complete iff $\u2200\u03c8 : Or(\u03c8) = true \u2192 (T_1 \\models \u03c8 \u2194 T_2 \\models \u03c8)$"}, {"title": "Basic operations", "content": "To repair ontologies, algorithms can be developed using a number of basic operations such as debugging, removing, weakening and completing, and combining these in different ways [24,25]. In this paper we use variants of these operations to repair ontology networks.\nGiven a set of wrong axioms $W$, debugging aims to find a set of wrong asserted axioms $D$ that when all axioms in $D$ are removed from the network, the axioms in $W$ cannot be derived anymore. Many debugging approaches have been proposed (e.g., [40,39,16,28,41,15,23,11,29,31,42,7,1,17,36,38,30], overview in [18]).$^5$ A basic approach is based on the computation of justifications for the wrong axioms and then computing a Hitting set over the set of justifications. As an example, in Fig. 1 derived wrong axiom $A \\sqsubseteq C$ needs to be removed. This can be done by removing asserted axiom $A \\sqsubseteq B$ or asserted axiom $B \\sqsubseteq C$. Removing deletes all the wrong asserted axioms in a given set $D$ from the ontology network. Removing makes a network less or equally incorrect than it was before the operation. Given an axiom, weakening aims to find other axioms that are weaker than the given axiom, i.e., the given axiom logically implies the other axioms within the network. For the repairing this means that a wrong axiom $\u03b1 \\sqsubseteq \u03b2$ can be replaced by a correct weaker axiom $s_b \\sqsubseteq s_p$ such that $s_b$ is a sub-concept of $\u03b1$ and $s_p$ is a super-concept of $\u03b2$, thereby mitigating the effect of removing the wrong axiom (Fig. 1). Algorithms for weakening have been provided in e.g., [43,3,5,24]. Completing aims to find correct axioms that are not derivable from the ontology yet and that would make a given axiom derivable. For a given axiom $\u03b1 \\sqsubseteq \u03b2$, it finds correct axioms $s_p \\sqsubseteq s_b$ such that $s_p$ is a super-concept of $\u03b1$ and $s_b$ is a sub-concept of $\u03b2$ (Fig. 1). This means that if $s_p \\sqsubseteq s_b$ is added to T, then $\u03b1 \\sqsubseteq \u03b2$ would be derivable. Completing is performed on correct axioms, and in repairing, it is applied to weakened axioms. Completing algorithms are proposed in, e.g., [20,44,6,8,24]. Note that weakening and completing are dual operations where the former finds weaker axioms and the latter stronger axioms. Both these operations make an ontology network more or equally complete.\nThese basic operations can be combined in different ways and there are choices to be made in terms of, e.g., the order in which the operations are performed, the order in which the axioms are processed, whether one axiom is"}, {"title": "Repairing ontology networks - problem definition", "content": "In this section we define the repairing problem for ontology networks. Def. 4 is an extension of the definition of repair for single ontologies as defined in [24]. We are given a set of wrong axioms W that we want to remove from the ontology network, and when they are removed, they cannot be derived from the TBox representing the ontology network anymore. These axioms in W can be axioms in the ontologies or mappings. Further, to guarantee a high level of quality of the ontology (i.e., so that no correct information is removed or no incorrect information is added), domain expert validation is a necessity (e.g., [35,24]). Therefore, we assume an oracle (representing a domain expert) that, when given an axiom, can answer whether this axiom is correct or wrong in the domain of interest of the ontology network. A repair (A, D) for the ontology network given the TBox T, oracle Or, and a set of wrong axioms W, is a tuple containing two sets: a set A of axioms that are correct according to the oracle and should be added to the TBox, and a set D of asserted axioms that are not correct according to the oracle and should be removed from the TBox. We require that when the axioms in D are removed and the axioms in A are added, the wrong axioms in W cannot be derived anymore.\nDefinition 4. (Repair) Let TBox $T = (\\cup_{i=1..n} T_i) \\cup (\\cup_{i,j=1..n,i<j} A_{ij})$ represent a network of ontologies $O_i$ represented by TBoxes $T_i$, and their alignments $A_{ij}$. Let $Or$ be an oracle that given a TBox axiom returns true or false. Let $W$ be a finite set of TBox axioms in $T$ such that $\u2200 \u03c8 \\in W : Or(\u03c8) = false$. Then, a repair for Debug-Problem $DP(T, Or, W)$ is a tuple $(A, D)$ where $A$ and $D$ are finite sets of TBox axioms such that\n(i) $\u2200 \u03c8 \\in A: Or(\u03c8) = true$;\n(ii) $D$ is a finite set of asserted axioms in $T$;\n(iii) $\u2200 \u03c8 \\in D : Or(\u03c8) = false$;\n(iv) $\u2200 \u03c8 \\in W: (T\\cup A) \\setminus D \\nvDash \u03c8$.\nFrom a theoretical point of view, as we have represented the ontology network as a TBox, and previous work has represented ontologies as TBoxes, we could reuse the algorithms and approaches in, e.g., [24,25]. However, from a practical point of view, the situation is more complex. When working with single ontologies, it is in the interest and mandate of the ontology owners to repair their ontologies. However, when ontologies are connected in a network, the ontology and alignment owners may want to retain different levels of autonomy and not necessarily allow others to change or propose changes to their ontologies and alignments. Also, computation time and validation work for repairing may be issues. In this case, computation time and validation work may be lower within an ontology or alignment than for the whole network. In this paper we discuss three levels of autonomy and show the influence of these different choices.\nThe first level consists of the cases 'O' (ontology) and 'M' (mappings). 'O' represents the choice where ontologies are completely autonomous. Essentially, this means that ontologies act on their own regarding detection and repairing of defects. W in Def. 4 contains only axioms in the ontology, only the axioms within"}, {"title": "Repairing ontology networks - Combination operators", "content": "During the repairing process different levels of autonomy can be used at different stages. The choice has an influence on the quality of the repair. Here we show this influence for different stages.\nWe note that a choice may be made regarding which axioms to materialize. For taxonomies it may be feasible to materialize all. However, for EL\u2081 there is an infinite number of derivable axioms. In our experiments we restrict the space to axioms with concepts at the left- and right-hand side with non-nested operators (SCC in [24]).\nE unsatisfiable because $D \\sqcap E \\sqsubseteq B, E \\sqsubseteq e, e \\sqsubseteq b, b \\sqsubseteq D$. e unsatisfiable because E unsatisfiable and $e \\sqsubseteq E$. f unsatisfiable because e unsatisfiable and $f \\sqsubseteq e$. F unsatisfiable because f unsatisfiable and $F \\sqsubseteq f$."}, {"title": "Use of background", "content": "As discussed earlier, we can use different autonomy levels during the computation of repairs. In our algorithms, this is reflected by which TBox is used. We can combine particular choices for debugging, removing, weakening and completing algorithms with different autonomy levels. As an example, assume we have made the choices for the basic operations as in Algorithm 1. Then, for autonomy level 'ON' we can use Algorithm 1 with as input the TBox representing the whole network. For levels 'O' and 'MO' we can use Algorithm 1 repeatedly using each of the TBoxes of the ontologies or materialized ontologies, respectively. (Another possibility is to use as input the union of these TBoxes, i.e., there will be no axioms representing mappings in the network.) For 'M' and 'MM' we use the alignments or materialized alignments as TBoxes. The choices are explained in Table 2 where KB stands for 'knowledge base'. Note that the choices can be performed on each of the basic operations. For instance, it is possible to debug using 'ON' and then weaken and complete using 'MO'. We can organize the choices in a Hasse diagram as in Fig. 4(a). The proofs for the Hasse diagram are given in the appendix. In general, using more background knowledge leads to more (or equally) complete and more (or equally) incorrect networks, and more validation work by the oracle.\nAs an example, assume we have used 'ON in the debugging step where we validate all axioms in the justifications, for the network in Fig. 3. This results in wrong axioms $e \\sqsubseteq b$ and $b \\sqsubseteq D$. We now look at the weakening step for the different autonomy levels. When weakening $e \\sqsubseteq b$ in the second ontology, we use sub-concepts of e and super-concepts of b to find weakened axioms."}, {"title": "Add sets", "content": "Another stage where the choice of autonomy level influences the quality of the repair is when deciding what repairing solutions to retain for the final repair, i.e. A in Def. 4. The choices are summarized in Table 2 under 'AS' (Add Set). Choice ASON is the most general case and allows all kinds of axioms to be added to the network. This means that regardless which choice was used during the computation of the repairs, these repairs can be used without any adaptions. Choice ASO only allows to add axioms within ontologies. This represents the case where ontology owners only focus on repairing their own ontologies. Similarly, choice ASM only allows to add mappings and represents the case where alignment owners only focus on repairing their own mappings. In ASO and ASM, not all repairing suggestions may be retained for the final solution. Therefore, when 'ON' was used during the computation of repairs and 'O' or 'M' is used during this stage, this may lead to a lower level of completeness for the network than if 'ON' is used for this stage. The Hasse diagram for these choices is given in Fig. 4(b) and the proofs are given in the appendix."}, {"title": "Finalizing", "content": "In the case of 'ON' the repairing solutions may contain axioms in different ontologies as well as mappings. In this case the ontology and alignment owners may decide to materialize the knowledge derived from the network which regards their ontology or alignment. From the network point of view the network does not change logically as the same axioms can be derived. From the ontology or alignment point of view, the difference appears when they are disconnected from the network. The materialized versions are more (or equally) complete."}, {"title": "Discussion", "content": "When the network is owned by one entity (e.g., in the case of modular ontologies with mappings) or there is a tight cooperation between the owners"}, {"title": "Experiments", "content": "As examples of the use of different choices for the combination operators, we performed experiments on 5 ontology networks. The ontologies (ekaw, sigkdd, iasted, cmt) used in these networks are from the conference track of the OAEI10.\nWe have used the parts of these ontologies that are expressible in EL\u2081 in the sense that we removed the parts of axioms that used constructors not in EL\u2081. We introduced wrong axioms in the ontologies and mappings between ontologies by replacing existing axioms with axioms where the left-hand or right-hand side concepts of the existing axioms were changed. Further, we also flagged some existing axioms as wrong in our full experiment set. All axioms were validated manually. The characteristics of the ontologies and the wrong axioms are shown in the supplemental material.\nWe repaired the networks using all choices regarding the use of background knowledge together with Algorithm 1. To repair ontology axioms we used KBO, KBMO and KBON. To repair mappings we used KBM, KBMM and KBON. We computed the sizes of the sets of sub-concepts and super-concepts used in weakening and completing. The sizes of these sets reflect the number of axioms that need to be validated by the oracle. We note, however, that using the visualization in our system (see below) these sets are shown together and thus the validation of many axioms can be done at the same time."}, {"title": "Implemented system", "content": "We implemented a Java-based system which extends the EL version of the Re-POSE system ([44,22,24]) with full debugging, weakening and completing for EL ontology network repairing. The system allows the user to choose different combinations, thereby giving a choice in the trade-off between validation work, incorrectness and completeness.\nThe system uses an interactive way to repair the ontology network. It takes as input the ontologies and alignments in the network as well as a set of wrong axioms. It is also possible to not give a set of wrong axioms but let the system deduce unsatisfiable concepts in the network. As basic algorithms, we have used the black-box algorithm in [15] for debugging, and the weakening and completing algorithms in [24]. With respect to the combination operators in the Hasse diagrams, the system supports (S-one, D-v-all) and (S-one, D-one-v) thereby providing the choice to validate all axioms in the justifications or to validate Hitting sets. Regarding weakening the combinations are (R-none, AB-none/W-all,U-end_all), (R-all, AB-none/W-all,U-end_all) and (R-one,AB-one/W-one, U-end_all). The first combination does not remove wrong axioms during the computation, weakens all axioms at once and updates at the end. The second removes all wrong axioms before the computation, weakens all axioms at once and updates at the end. The third removes wrong axioms one at a time during the computation and puts them back before dealing with the next wrong axiom. It weakens axioms one at a time and updates at the end. For completing, the choices are (C-all,U-end_all) and (C-one,U-end_one). The first combination completes all weakened axioms at once and updates at the end. The second completes the weakened axioms one at a time and updates the ontology after the weakened axiom set is handled for each wrong axiom. Regarding the choices for the combinations for the network, all choices for KB are implemented. The AS choices are supported using visual clues. The concepts in the axioms to be validated are labeled with the ontology source, such that the user can distinguish mappings from axioms within the ontologies. We also use different colors to represent the concepts which belong to different ontologies. At the appropriate times the system shows the different combinations that can be chosen and the user can select the desired choice.\nFor the basic operations the user interactions are adapted to the task at hand and different panels are used. For debugging the user requests the generation of the justifications. Then, the user can validate the axioms in the justifications or ask the system to compute Hitting sets and validate the axioms in those. The"}, {"title": "Conclusion", "content": "In this paper we presented a framework for repairing ontology networks that alleviates the problem of removing correct knowledge when removing unwanted axioms from the network. It uses the basic operators of debugging, removing, weakening and completing for which there exist different approaches. We defined combination operators that represent choices to be made when combining the basic operations. We introduced different levels of autonomy for the ontologies and alignments in the networks and defined combination operators based on these levels and the use of background knowledge during the computation of repairs and the selection of the final solution. We have shown the influence of the combination operators on the quality of the repaired network. The framework"}, {"title": "Combinations of basic operations", "content": "Table 4 shows combination operators that can be used as building blocks in the design of algorithms. For each of the basic operations (debugging, removing, weakening and completing) we show choices. The operations for removing, weakening and completing are taken from [24]. The operations for debugging are from [26,25]."}, {"title": "Derivation of Hasse diagrams", "content": "The proofs for the Hasse diagrams are based on the following observations. For a given TBox T, let Der(T) denote the set of derivable axioms from T. Then, for TBoxes T\u2081 and T2, if T\u2081 \u2286 T2, then we know that Der(T\u2081) \u2286 Der(T2). This means that if an axiom is derivable from TBox 71, it is also derivable from TBox T2, but not necessarily the other way around. Therefore, if T1 \\sqsubseteq T2, all correct axioms in T\u2081 can also be derived from T2, and thus T2 is more or equally complete than 71. Similarly, all wrong axioms in T\u2081 can also be derived from 72, and thus T2 is more or equally incorrect than 71."}, {"title": "Ontologies", "content": "The Hasse diagrams for removing, weakening and completing were derived in [24]. The Hasse diagram for debugging was derived in [26,25]. The proofs for these are in [25] and are copied here for the sake of completeness."}, {"title": "Debugging", "content": "When choosing the operations which contain D-all-v or D-v-all, all wrong asserted axioms in the justifications of the given wrong axioms are retained after validation (Ws-all,D-all-v/D-v-all = WS-one,D-all-v/D-v-all).\nFor the other choices, not all axioms in the justifications are validated and used and thus the set of asserted wrong axioms to remove for each of those choices is a subset of WS-all,D-all-v/D-v-all. Note that the Hitting sets computed by"}, {"title": "Removing", "content": "In general, when removing all axioms at once, the TBox is a subset of the TBox with one axiom removed, which in turn is a subset of the TBox where no axioms are removed. When adding no axioms back, the TBox is a subset of the TBox with one axiom added back, which in turn is a subset of the TBox where all axioms are added back. If no wrong axioms are removed, then nothing needs to be added back and thus AB-one, AB-all and AB-none have the same result (TR-none,AB-all = TR-none,AB-one = TR-none,AB-none).\nThe TBox for these strategies is larger during computation (of weakened or completed axiom sets) than the TBoxes where one or all wrong axioms are removed. If one wrong axiom at the time is removed, the adding back all (AB-all) or one (AB-one) give the same result (TR-one,AB-all = TR-one,AB-one) as both strategies add the same one axiom back. The TBox for these strategies is larger than when no wrong axiom is added back (TR-one,AB-none\u2286 TR-one,AB-all = TR-one,AB-one). When all wrong axioms are removed at once, then they will be added back at the end or not.\nHowever, this does not influence the TBox during the computation. Therefore, the add back strategy does not matter and the TBox during computation is smaller than when wrong axioms were removed one at a time (TR-all, AB-all = TR-all,AB-one = TR-all,AB-none \u2286 TR-one,AB-none)."}, {"title": "Weakening", "content": "First, we note that updating immediately or updating after each wrong axiom is the same operation for weakening, as a complete weakened axiom set for a wrong axiom is computed. Thus, the TBox for (Tw-one,U-now) is the same as for (TW-one,U-end_one), and the TBox for (Tw-all,U-now) is the same as for (Tw-all,U-end_one). Further, when weakening one axiom at a time and updating the TBox (i.e., adding the axioms of the weakened axiom set for a wrong axiom) immediately, results in a larger TBox for the next computations of weakened axiom sets for wrong axioms, than if we would not update immediately (Tw-one,U-end_all \u2286 TW-one,U-now). When not immediately updating, the TBox for generating the weakened axiom sets, stays the same for all wrong axioms and thus gives the same result as weakening all wrong axioms at once. Thus, Tw-all,U-now = TW-all,U-end-all = Tw-one,U-end_all\u00b7"}, {"title": "Completing", "content": "When completing one axiom at a time and updating the TBox (i.e., adding the axioms of the completed axiom set for a weakened axiom) immediately, results in a larger TBox for the next computations of completed axiom sets for weakened axioms than not updating immediately (Tc-one,U-end_one \\subseteq Tc-one,U-now, TC-one,U-end_all \\subseteq TC-one,U-now). When not updating immediately, there is the choice between updating after all weakened axioms for a"}, {"title": "Ontology networks", "content": "Let T1, ..., Tn be TBoxes representing ontologies 01, ..., On, respectively. For i, j \u2208 [1..n] with i < j, let Aij be an alignment between ontology O\u017c and Oj. Let TBox Ton = (\u222ai=1..n Ti) \u222a (\u222ai,j=1..n,i<j Aij) represent the network.\nLet Tbox TMON be the materialized version of the network, i.e., all (chosen) derived axioms in the network represented by Ton are asserted in TMON. Then TMON = (\u222ai=1..n Tmi) \u222a (\u222ai,j=1..n,i<j Amij) where Tmi contains all axioms in TMON that relate concepts within ontology Oi, and Amij contains all mappings in TMON between concepts in O\u00bf and concepts in Oj.\nThen we have the following observations.\n(i) Der(TMON) = Der(\u03a4\u03bf\u039d).\n(ii) As each axiom in Ti is derivable from the network, it is contained in Tmi. Thus, for each i: Ti \\sqsubseteq Tmi\n(iii) As each mapping in Aij is derivable from the network, it is contained in Amij. Thus, for each i,j: Aij \\sqsubseteq Amij.\nWe give now the proof of the Hasse diagrams considering that all ontologies (or alignments) use the same autonomy level. (The framework allows to have different autonomy levels for different ontologies and alignments. For this case the proofs are similar.)\nIf we use KBO, then the algorithms for debugging, repairing and weakening use TBox Ui Ti. (No connections between the ontologies, so, in principle each ontology is dealt with separately.) When using KBMO, then the algorithms use TBox \u222ai Tmi. By observation (ii), more knowledge is used for KBMO than for KBO, and thus the repaired ontology network for KBMO is more (or equally) complete and more (or equally) incorrect than for KBO.\nKBON uses TBox \u03a4\u03bf\u03bd which is logically equivalent to using TMON (observation (i)). As \u222ai Tmi \\sqsubseteq (\u222ai=1..n Tmi) \u222a (\u222ai,j=1..n,i<j Amij) = TMON, we know that the repaired ontology network for KBON is more (or equally) complete and more (or equally) incorrect than for KBM\u039f\u00b7\nSimilar reasoning (using observations (i) and (iii)) leads to the fact that the repaired ontology network for KBON is more (or equally) complete and more (or equally) incorrect than for KBMM, which in its turn is more (or equally) complete and more (or equally) incorrect than for KBM."}, {"title": "Add sets", "content": "Axioms are added to the ontology network after weakening, completing or as the final result. Assume the set of axioms AS is a result of one of these stages. Then AS = OA \u222aM where OA is the set of axioms within ontologies in the result and M is the set of mappings between ontologies in the result. We know that OA \u2229 M = \u00d8.\nAssume the current ontology is represented by T. When using ASON, AS is added to the ontology network. When using ASO, OA is added to the ontology network. Finally, when using ASM, M is added to the ontology network. As T \u222a M \\sqsubseteq T \u222aAS and T \u222a OA \\sqsubseteq T \u222a AS, using ASON leads to a more complete network than using AS or ASM."}, {"title": "Computing weakened and completed axioms", "content": "In this section we show the sub- and super-concept sets used for computing weakened and completed axioms for the example in Sect. 4. (When there are empty cells in the tables, it means that we did not need to compute the sub- and super-concepts sets for these choices of combination operator.)"}, {"title": "Experiments - results", "content": "In the experiments we use 5 ontology networks. Each network consists of two ontologies and an alignment. The number of concepts, roles and axioms of the ontologies are given in Table 9 and the number of mappings in the alignments is given in Table 10. Tables 11 and 12 list the wrong axioms and mappings we introduced in each ontology network. These wrong axioms were generated by replacing existing axioms with axioms where their left/right-hand side concepts were changed.\nThe results of the experiments are listed in Tables 13-17. These tables list the sizes of the sub-concepts set of a and the super-concepts set of \u03b2 for each wrong axiom \u03b1 \\sqsubseteq \u03b2 and the correct weakened axioms. Further, for each correct weakened axiom a \\sqsubseteq \u03b2, it shows the sizes of the super-concepts set of a and the sub-concepts set of \u03b2 as well as the correct completed axioms. The sizes of these sets reflect the number of axioms that need to be validated by the oracle. We note, however, that using the visualization in our system these sets are shown together and thus the validation of many axioms can be done at the same time."}]}