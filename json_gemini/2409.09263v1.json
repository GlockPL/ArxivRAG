{"title": "Operational Wind Speed Forecasts for Chile's Electric Grid Using A Hybrid Machine Learning Model", "authors": ["Dhruv Suri", "Flora Xue", "Praneet Dutta", "In\u00eas Azevedo", "Ravi Jain"], "abstract": "As Chile's electric power sector advances toward a future powered by renewable energy, accurate forecasting of renewable generation is essential for managing grid operations. The integration of renewable energy sources is particularly challenging due to the operational difficulties of managing their power generation, which is highly variable compared to fossil fuel sources, delaying the availability of clean energy. To mitigate this, we quantify the impact of increasing intermittent generation from wind and solar on thermal power plants in Chile and introduce a hybrid wind speed forecasting methodology which combines two custom ML models for Chile. The first model is based on TiDE, an MLP-based ML model for short-term forecasts, and the second is based on a graph neural network, GraphCast, for medium-term forecasts up to 10 days. Our hybrid approach outperforms the most accurate operational deterministic systems by 4-21% for short-term forecasts and 5-23% for medium-term forecasts and can directly lower the impact of wind generation on thermal ramping, curtailment, and system-level emissions in Chile.", "sections": [{"title": "Introduction", "content": "Replacing fossil fuels with renewable energy for electricity generation has a direct impact on climate change, since electricity generation globally contributes to roughly a third of annual carbon emissions [9]. However, the integration of renewable energy sources into the electric grid is challenging due to the operational difficulties of managing their highly variable power generation. Chile has taken a globally leading role in clean energy and has emerged as a leading destination for solar and wind developers and ambitious clean energy goals for the future [6]. This makes it a particularly interesting and important area of study for renewable energy forecasting. While Chile's electricity demand is relatively modest (6.5% of Central and South America's total in 2022), it is growing rapidly, both in aggregate (up from 40 TWh in 2000 to 88 TWh in 2022) and per-capita (70% over the same period). In 2023, the share of thermal, solar and wind in annual generation in Chile was 38.9%, 19.9%, and 11.8% [4]. Electric grid Independent System Operators (ISOs) recognize the need for precise renewable generation and net demand forecasts. Historically, thermal plants provided stable generation with predictable net demand patterns. However, increased penetration of renewables necessitates advanced forecasting due to significant generation ramps from wind and solar. Accurate forecasts are critical for subsequent thermal generator dispatch, which rely on forecast accuracy and security constraints. Among renewable sources, wind power prediction is particularly challenging due to its temporal and spatial variability, and oftentimes lack of sufficient high-quality data, not only for wind power but for wind speed itself [14]. Our work aims to contribute to improving the coordination and control of Chile's electric power system amidst growing renewable energy integration by enhancing the reliability and accuracy of wind speed forecasts. Our approach diverges from traditional forecast methods by applying machine learning techniques. We introduce a novel hybrid methodology for short and medium-term wind speed forecasts, designed as an input to the ISO's unit commitment and economic dispatch models in the day-ahead and week-ahead electricity market. For short-term forecasts (0 to 48 hours) we develop a custom ML model specifically optimized for capturing the intricate temporal dependencies in hourly wind speed. For medium-term forecasts (2 to 10 days), we develop a custom ML model based on GraphCast - a graph neural network-based machine learning weather prediction (MLWP) model for medium-range weather forecasts [7, 8]."}, {"title": "Data & Methods", "content": "Data. We develop a dataset with thermal power plants that includes hourly generation by fuel source obtained from Coordinador El\u00e9ctrico Nacional (CEN) [3], Chile's national ISO. CEN also records historical hourly generation from wind, solar, hydro and geothermal plants, and system demand. For short and medium-term wind magnitude forecasts, we use ERA5, a global reanalysis dataset produced by ECMWF [10]. GraphCast is initially trained on ERA5 data spanning 1979-2016. HRES provides real-time weather predictions using the most recent observations and advanced numerical weather prediction models [12]. HRES-fc0 is a dataset derived from HRES, consisting of the initial state of each high-resolution ensemble forecast and is used as the benchmark for evaluating our hybrid model.\nElectricity generation marginal response models. We use a fixed effects ordinary least squares (OLS) regression formulation to model the change in operational behavior of thermal generators in response to a marginal increase in generation from wind and solar. The formulation is a non-logarithmic form of the statistical model used by [2] and [13].\n$G_t = \\alpha + \\beta_1S_t + \\beta_2W_t + \\beta_3D_t + \\beta_4(W_t - W_{t-1}) + \\beta_5(S_t - S_{t-1}) + N_{t,m} + \\gamma X_t + N_{t,a} + \\epsilon$ (1)\nwhere t denotes the current timestep; $G_t$, $S_t$, $W_t$ represent the thermal, solar, and wind generation, respectively; $D_t$ is the electricity demand, and the terms between the brackets denote the hourly wind and solar ramp. $N_{t,m}$ and $N_{t,a}$ denote the month and year fixed effects. $X_t$ is a set of control variables that includes the hydro and geothermal generation, and imports. The parameters that are of interest are the coefficients for solar, $\\beta_1$ and wind, $\\beta_2$. These coefficients represent the change in thermal generation in response to a marginal unit increase in generation.\nOperational wind speed forecast models. In medium and long-term weather forecasts, the current top deterministic operational system in the world is ECMWF's HRES forecast. Owing to its proven versatility, we use a graph neural network forecasting model, GraphCast, that outperforms the baseline HRES forecasts on 90.3% of 1380 location targets with an overall skill improvement of 7 to 14% across global locations [7]. However, the GraphCast model in [7] with HRES-fc0 finetuning for Chile proves to be more accurate than HRES forecasts only following a lead time of approximately 7 days. Before this cross-over point, GraphCast's normalized RMSE relative to HRES ranges from 0 to 1.15 (shown in the SI) in Chile. To overcome this limitation we categorize the forecasting problem into two distinct temporal regimes, short-term and medium-term forecasts. Furthermore, in Chile, day-ahead dispatch processes require advanced hourly generation and net demand forecasts to be made available a day prior for unit commitment and economic dispatch models to be run by the ISO. As GraphCast's time step size is 6 hours, we propose a short-term model with hourly granularity. In order to draw a direct comparison of our methods with ECMWF's HRES, we use a quarter-degree model resolution. However, we focus on those mesh points that are closest to the actual 52 wind farm locations in Chile, and wind speed forecasts are developed for 24 unique quarter-degree interpolated locations in Chile.\nShort-term forecasts. We use an enhanced Time-series Dense Encoder (TiDE) model [5] that represents a state-of-the-art approach for short-term wind speed forecasting from 0 to 48 hours. This model employs a Multi-layer Perceptron (MLP) based encoder-decoder architecture, optimized to handle time-series data with multiple covariates and complex, non-linear dependencies. The encoder processes historical wind speed data and relevant covariates, transforming them into a latent space representation through multiple residual blocks, which are crucial for capturing intricate patterns in the data. The decoder then reconstructs future wind speeds from this latent representation, allowing"}, {"title": "Results", "content": "the model to make accurate predictions up to 48 hours ahead. To enhance the forecast accuracy of TiDE for our application, we integrate a randomized iterative forecasting framework. This integration is inspired by the decomposition-ensemble learning methodology where the data is first decomposed into simpler components, which are then modeled individually using randomized algorithms.\nMedium-term forecasts. For medium-range forecasts, we use GraphCast, a neural network architecture designed to predict weather states by taking the two most recent states of Earth's weather - the current time and six hours earlier - and forecasting the next state six hours ahead. The model uses a 0.25-degree latitude-longitude grid to represent a single weather state, corresponding to roughly 28 km by 28 km resolution at the equator. Implemented as a neural network architecture based on Graph Neural Networks (GNNs) in an \"encode-process-decode\" configuration, GraphCast consists of 36.7 million parameters. To improve the forecast accuracy of GraphCast, we develop a custom model using a novel multi-stage fine-tuning process. This involved autoregressive fine-tuning on HRES-fco data to account for potential distribution shifts between reanalysis data (ERA5) and real-time operational data. The model is further customized through location-based weighting, emphasizing accuracy within a bounding box encompassing the Chilean wind farms, and wind magnitude and power weighting, directly optimizing for these specific metrics. Finally, iterative fine-tuning is combined with linear regression post-processing to further enhance the model's accuracy. We first fine-tune the base GraphCast model autoregressively on five years (2016-2020) of HRES-fc0 data. During this stage, we used the original GraphCast loss function, a spatially-weighted mean squared error (MSE) calculated across all variables and pressure levels:\n$L_{base} = \\frac{1}{D_{batch}} \\sum_{d_o \\in D_{batch}} \\frac{1}{T_{train}} \\sum_{\\tau \\in T_{train}} \\frac{1}{G_{0.25^\\circ}} \\sum_{i \\in G_{0.25^\\circ}} \\sum_{j \\in J} s_j w_j a_i (\\hat{x}_{i,j,d_o+\\tau} - x_{i,j,d_o+\\tau})^2$ (2)\n$N_{t,m}$\nwhere $D_{batch}$ denotes a batch of forecast initialization date-times in the training set, $T_{train}$ is the number of autoregressive steps used for training, $G_{0.25^\\circ}$ is the set of grid cells in the 0.25-degree latitude-longitude grid, J is the set of variables and pressure levels, $s_j$ represents the inverse variance of time differences for variable j, $w_j$ is the loss weight for variable j, $a_i$ is the area of grid cell i, normalized to unit mean over the grid, $\\hat{x}_{i,j,d_o+\\tau}$ is the model's prediction for variable j at grid cell i and lead time $\\tau$ from initialization $d_o$, and $x_{i,j,d_o+\\tau}$ is the corresponding target value from the HRES-fc0 data.\nMarginal response of thermal power plants. By analyzing the coefficients $\\beta_1$ and $\\beta_2$ of the statistical model, we find that, on average, fluctuations or ramps in thermal generation are more sensitive to increases in wind generation compared to solar. A 1 GWh increase in wind generation displaces 0.95 GWh of thermal generation, whereas the same increase in solar generation displaces only 0.67 GWh, which is 30% less. We also model the response of individual thermal generators to marginal changes in wind and solar generation by isolating hourly generation in the fixed-effects model. Using these coefficients, we classify each power plant as either 'solar-following' or 'wind-following' determined based on the absolute value of the larger, statistically significant coefficient. Of the 128 thermal plants, we find that 91 are wind-following, while the remaining 37 largely to solar generation. The vast majority of wind-following thermal plants clearly necessitates better operational wind forecasts in dispatch models used by the ISO.\nShort-term forecasts. We evaluate the performance of our TiDE model using the Root Mean Squared Error (RMSE) metric, averaged hourly across all 24 locations, for wind speed. Figure 1a shows the metric over a 48-hour horizon for both TiDE and HRES. The RMSE increases gradually over the forecast period for both models; for HRES the data available is at 6-hour intervals. The short-term model performs better than auto-regressive models, as evidenced by a 4-21% improvement over HRES. The RMSE for HRES forecasts at hours 6 and 12 is lower than that of our short-term model, however, given that operational forecasts are made at 10 am the day prior, the critical forecasting window used for unit commitment and economic dispatch by the ISO is from 14 - 38 hours, during"}, {"title": "Methods", "content": "A.1 Statistical Models\nWe use a fixed effects ordinary least squares (OLS) regression formulation to model the change in operational behavior of thermal generators in response to a marginal increase in generation from wind and solar. The formulation is a non-logarithmic form of the statistical model used by [2] and [13].\n$G_t = \\alpha + \\beta_1S_t + \\beta_2W_t + \\beta_3D_t + \\beta_4(W_t \u2013 W_{t-1}) + \\beta_5(S_t - S_{t-1}) + N_{t,m} + \\gamma X_t + N_{t,a} + \\epsilon$ (3)\nwhere t denotes the current timestep; $G_t$, $S_t$, $W_t$ represent the thermal, solar, and wind generation, respectively; $D_t$ is the electricity demand, and the terms between the brackets denote the hourly wind and solar ramp. $N_{t,m}$ and $N_{t,a}$ denote the month and year fixed effects. $X_t$ is a set of control variables that includes the hydro and geothermal generation, and imports.\nIn our formulation, the parameters that are of interest are the coefficients for solar, $\u03b2_1$ and wind, $\u03b2_2$. These coefficients represent the change in thermal generation in response to a marginal unit increase in generation from solar and wind, respectively. For example, if generation from wind increases by 1 MWh, then $\u03b2_1$ and $\u03b2_2$ will represent the MWh change in generation from thermal plants in Chile. These coefficients thus measure the causal change in the dependent variable under the assumption that daily wind and solar production (represented by W and S) is uncorrelated with the error term e after controlling for demand and time fixed effects. As suggested by [11], this assumption is valid for wind at the hourly level and can thus be extended into the present form of the statistical model.\nA.2 Short-term Wind Forecasting\nThe Time-series Dense Encoder (TiDE) model represents a state-of-the-art approach for short-term wind speed forecasting. This model employs a Multi-layer Perceptron (MLP) based encoder-decoder architecture, optimized to handle time-series data with multiple covariates and complex, non-linear dependencies. The encoder processes historical wind speed data and relevant covariates, transforming them into a latent space representation through multiple residual blocks, which are crucial for capturing intricate patterns in the data. The decoder then reconstructs future wind speeds from this latent representation, allowing the model to make accurate predictions up to 48 hours ahead.\nThe hyperparameters of the TiDE model are chosen to enhance its predictive performance, tuned on the validation loss for each interpolated wind-farm location. Ranges of different hyperparameters are shown in Table 1. Key hyperparameters include the number of layers in the encoder and decoder, the hidden layer sizes, and dropout rates to prevent overfitting. Specifically, the encoder and decoder each consist of four residual blocks, with each block containing fully connected layers of 128 neurons. Dropout is applied with a rate of 0.1 to ensure regularization. The model is trained using the Mean Squared Error (MSE) loss function, which measures the average squared difference between predicted and actual wind speeds. The Adam optimizer, with a learning rate of 0.001, is utilized to update the model's weights efficiently during training. An early stopping mechanism with a patience of 20 epochs is implemented to halt training when the validation loss ceases to improve, thus avoiding overfitting."}, {"title": "Integration with Randomized Iterative Forecasting", "content": "The TiDE model's performance is evaluated using the Root Mean Squared Error (RMSE) metric, averaged hourly across multiple locations in Chile. To handle the time-series nature of the data, the model incorporates various datetime attributes as additional covariates, such as the hour of the day, day of the week, and month, which are encoded using dense layers in a Multi-Layer Perceptron (MLP)-based architecture. Additionally, the model is equipped to use a Scaler transformer to normalize the input data, ensuring that all features have zero-mean unit variance. This preprocessing step is essential for maintaining the stability and performance of the neural network. We normalize and detect outliers using a z-scoring threshold specified in [1]. By adopting a higher z-score threshold, performance at later lead times beyond 24 hours in not affected. The inclusion of future covariates, such as temperature, pressure, and various wind parameters at different altitudes, enhances the model's ability to capture the underlying weather patterns, leading to more accurate short-term wind speed forecasts.\nTo further enhance the predictive performance and computational efficiency of the TiDE model, we integrate a randomized iterative forecasting framework into the model. This integration is inspired by the decomposition-ensemble learning methodology where the data is first decomposed into simpler components, which are then modeled individually used to condition the TiDE model on randomly selected time intervals during training. At inference time, the model uses the learned intervals to generate multiple forecasts for a specific lead time. For example, to predict the weather 7 days ahead, the model might use a combination of forecasts at 12-hour intervals repeated 14 times or at 24-hour intervals repeated 7 times. These forecasts are then averaged to produce the final prediction, significantly improving accuracy by reducing the uncertainty inherent in long-term forecasts.\nA.2.2 Model Architecture and Mathematical Formulation\nLet $y_{1:L}$ represent the historical wind speeds, $X_{1:L+H}$ the covariates over the look-back and forecast horizon, and a the static attributes. The encoding step maps the past covariates and wind speeds into a dense representation e:\n$x_t = ResidualBlock(x_t)$ (4)\n$e = Encoder(y_{1:L}; X_{1:L+H}; a)$ (5)\nThis encoding e is then utilized by the decoder to predict future wind speeds.\nThe decoding process in the TiDE model involves mapping the encoded hidden representations into future predictions. The dense decoder processes the encoding e to produce an intermediate representation, which is further refined by the temporal decoder to generate the final forecast. The process is described by the following equations:\n$g = Decoder(e)$ (6)\n$D = Reshape(g)$ (7)\n$\\hat{y}_{L+t} = TemporalDecoder(d_t; X_{L+t})$ (8)\nwhere g is the output of the dense decoder, D is the reshaped matrix of decoded vectors, and dt is the decoded vector for time t. The temporal decoder combines this decoded vector with the projected covariates XL+t to generate the final prediction \u0177L+t.\nA.2.3 Randomized Algorithm-based Decomposition-Ensemble Learning\nThe proposed method involves three major steps: data decomposition, individual prediction using randomized algorithms, and results ensemble.\nData Decomposition: We employ an effective multi-scale analysis technique such as Ensemble Empirical Mode Decomposition (EEMD) to decompose the original time series data into n intrinsic"}, {"title": "Performance Evaluation", "content": "mode functions (IMFs) and a residue. This decomposition ensures that the data complexity is reduced, making it easier to model.\n$x_t = \\sum_{j=1}^n C_{j,t} + r_t$ (9)\nIndividual Prediction using Randomized Algorithms: For each decomposed component, instead of forecasting weather conditions at fixed intervals, we condition the TiDE model on randomly selected time intervals during training. This is done by introducing a distribution over time intervals, choosing from intervals such as 6, 12, 24, and 48 hours. This randomization serves a dual purpose: it acts as a form of data augmentation by varying the intervals during training, and it enables the model to produce multiple forecasts for a specified lead time during inference by combining predictions from different intervals.\nResults Ensemble: The final forecast is obtained by aggregating the predictions of all decomposed components and the residue.\n$x_t = \\sum_{j=1}^n \\hat{c}_{j,t} + \\hat{r}_t$ (10)\nMathematically, the forecasting function f can be defined as:\n$f: (\\{(c_j^{(i)})^{N}_{1:L}\\}_{i=1}^{n}, \\{(X_{1:L+H}^{(i)})^{N}\\}_{i=1}) \\rightarrow (\\{\\hat{c}_{L+1:L+H,j}^{(i)}\\}_{i=1}^{n}, \\{\\hat{r}_{L+1:L+H}^{(i)}\\}_{i=1}^{N})$ (11)\nwhere:\n\u2022 N is the number of time-series,\n\u2022 L is the look-back period,\n\u2022 H is the forecast horizon,\n\u2022 $\\hat{c}_{L+1:L+H,j}^{(i)}$ represents the predicted values for the j-th IMF,\n\u2022 $\\hat{r}_{L+1:L+H}^{(i)}$ represents the predicted residue.\nThe accuracy of the prediction is measured by the Root Mean Squared Error (RMSE), defined as:\n$RMSE \\sqrt{\\frac{1}{NH}\\sum_{i=1}^{N} \\sum_{t=1}^{H} (y_{L+t}^{(i)} - (\\sum_{j=1}^{n} \\hat{c}_{L+t,j}^{(i)} + \\hat{r}_{L+t}^{(i)}))^2}$ (12)\nThis integration of randomized iterative forecasting with TiDE leverages the speed and robustness of randomized algorithms to enhance the efficiency and accuracy of wind speed predictions, particularly in scenarios involving large-scale time series data with complex patterns.\nA.3 GraphCast"}, {"title": "Finetuning GraphCast", "content": "GraphCast is a neural network architecture designed to predict weather states by taking the two most recent states of Earth's weather - the current time and six hours earlier - and forecasting the next state six hours ahead. The model uses a 0.25-degree latitude-longitude grid to represent a single weather state, corresponding to roughly 28 km by 28 km resolution at the equator. Implemented as a neural network architecture based on Graph Neural Networks (GNNs) in an \"encode-process-decode\" configuration, GraphCast consists of 36.7 million parameters.\nThe encoder within GraphCast employs a single GNN to map variables, normalized to zero-mean unit variance, represented as node attributes on the input grid to learned node attributes on an internal multi-mesh representation. This multi-mesh is spatially homogenous and defined by refining a regular icosahedron iteratively six times, leading to a high-resolution graph with 40,962 nodes and a flat hierarchy of edges of varying lengths. The processor then uses 16 unshared GNN layers to perform learned message-passing on the multi-mesh, enabling efficient local and long-range information propagation with minimal message-passing steps. The decoder maps the final processor layer's learned features back to the latitude-longitude grid using a single GNN layer, predicting the output as a residual update to the most recent input state, with output normalization to achieve unit-variance on the target residual.\nFor fine-tuning GraphCast to optimize wind magnitude and power forecasts specifically for Chilean wind farms, a multi-stage fine-tuning process was employed. This involved autoregressive fine-tuning on HRES-fc0 data to account for potential distribution shifts between reanalysis data (ERA5) and real-time operational data. The model was further customized through location-based weighting, emphasizing accuracy within a bounding box encompassing the Chilean wind farms, and wind magnitude and power weighting, directly optimizing for these specific metrics. Iterative fine-tuning combined with linear regression post-processing enhanced the model's accuracy, making it a robust tool for predicting wind patterns in Chile's diverse and complex terrain.\nGraphCast demonstrates strong global weather forecasting skills, but our objective is to optimize wind magnitude and power predictions specifically for Chilean wind farms. To achieve this, we customized the publicly available GraphCast model, pre-trained on ERA5 reanalysis data, using a multi-stage fine-tuning process. This section elaborates on each stage and provides the mathematical formulation of the modified loss function.\nB.1 Operational Data Fine-tuning\nRecognizing the potential distribution shift between reanalysis data (ERA5) and real-time operational data (HRES-fc0), we first fine-tuned the base GraphCast model autoregressively on five years (2016-2020) of HRES-fc0 data. This fine-tuning involved several steps. Firstly, HRES-fc0 data was pre-processed to align with the GraphCast input format. This included variable selection, focusing on relevant variables directly related to wind dynamics, such as eastward and northward wind components at various pressure levels. Additionally, the data was converted to the same spatial resolution as GraphCast (0.25-degree latitude-longitude grid).\nThe autoregressive fine-tuning process involved 30,000 steps where the model predicted the weather state six hours ahead for up to a ten-day lead time. In each training step, the model's output from the previous timestep was fed back as input, simulating a real-time forecasting scenario. This recursive process allowed the model to learn temporal dependencies and adapt to the dynamics of operational data. During this stage, we used the original GraphCast loss function, a spatially-weighted mean squared error (MSE) calculated across all variables and pressure levels:\n$L_{base} = \\frac{1}{D_{batch}} \\sum_{d_o \\in D_{batch}} \\frac{1}{T_{train}} \\sum_{\\tau \\in T_{train}} \\frac{1}{G_{0.25^\\circ}} \\sum_{i \\in G_{0.25^\\circ}} \\sum_{j \\in J} s_j w_j a_i (\\hat{x}_{i,j,d_o+\\tau} - x_{i,j,d_o+\\tau})^2$ (13)\nIn this equation, Dbatch denotes a batch of forecast initialization date-times in the training set, Ttrain is the number of autoregressive steps used for training, G0.25\u00b0 is the set of grid cells in the 0.25-degree"}, {"title": "Wind Magnitude Weighting", "content": "latitude-longitude grid, J is the set of variables and pressure levels, $s_j$ represents the inverse variance of time differences for variable j, $w_j$ is the loss weight for variable j, $a_i$ is the area of grid cell i, normalized to unit mean over the grid, $\\hat{x}_{i,j,d_o+\\tau}$ is the model's prediction for variable j at grid cell i and lead time $\\tau$ from initialization $d_o$, and $x_{i,j,d_o+\\tau}$ is the corresponding target value from the HRES-fc0 data.\nB.2 Location and Wind-Magnitude Weighting\nTo focus the model's predictive skill on Chilean wind farms, we applied location-based weighting and wind magnitude weighting. The location-based weighting emphasized the accuracy within a bounding box encompassing the Chilean wind farms, while the wind magnitude weighting directly optimized for predicting wind weather variables. This involved adjusting the weights in the loss function to prioritize errors in these regions and variables, thereby fine-tuning the model to the specific operational characteristics of the Chilean wind farms.\nThe location-based weighting modified the loss function as follows:\n$L_{loc} = \\frac{1}{D_{batch}} \\sum_{d_o \\in D_{batch}} \\frac{1}{T_{train}} \\sum_{\\tau \\in T_{train}} \\frac{1}{G_{0.25^\\circ}} \\sum_{i \\in G_{0.25^\\circ}} \\sum_{j \\in J} s_j w_j a_i m_i (\\hat{x}_{i,j,d_o+\\tau} - x_{i,j,d_o+\\tau})^2$ (14)\nwhere $m_i$ is defined as:\n$m_i = \\begin{cases} \\omega_l, & \\text{if grid cell i is within the bounding box} \\\\ 1, & \\text{otherwise} \\end{cases}$ (15)\nand $\\omega_l$ is the location-based up-weighting factor.\nFor wind magnitude and power weighting, we introduced additional loss terms to optimize the model for predicting wind magnitude (wm) and power (wp). Wind magnitude was calculated from the predicted eastward ($u_{10m}$) and northward ($v_{10m}$) wind components at 10 meters:\n$w_m = \\sqrt{u_{10m}^2 + v_{10m}^2}$\nWind power was estimated using a simplified cubic relationship:\n$w_p = w_m^3$\nB.3 Iterative Fine-tuning and Configuration Selection\nAn iterative fine-tuning process was employed to refine the model further. Various configurations were tested, adjusting hyperparameters and re-evaluating performance to identify the optimal setup. The configuration achieving the lowest RMSE for Chilean wind farm locations was chosen as the final fine-tuned model.\nB.4 Linear Regression Post-processing\nTo enhance accuracy, we applied a per-lead-time bias correction using linear regression. This involved training separate linear regression models for each six hour lead time (up to 10 days), variable (e.g., U10m, V10m, wind magnitude, and power), and grid cell within the bounding box. The last year (2020) of HRES-fc0 data was used for training these models, with the results evaluated on 2021. The correction formula is given by:\n$\\hat{y}_{corrected} = \\alpha + \\beta \\hat{y}_{raw}$ (16)\nwhere \u0177corrected is the bias-corrected prediction, \u0177raw is the raw GraphCast prediction, and \u03b1 and \u03b2 are the learned intercept and slope, respectively. These models were applied to the fine-tuned GraphCast predictions to generate the final bias-corrected wind forecasts."}, {"title": "HRES Initialized Inputs", "content": "B.5 HRES Initialized Inputs\nTo further enhance the predictive accuracy of our location and wind-magnitude weighted GraphCast model, we investigated the integration of real-time forecasts from the ECMWF's High-Resolution Forecasting System (HRES) as additional input features. Building on existing work in this field, our \"HRES forcing\" approach leverages the inherent short-term predictive skill of HRES to potentially inform and improve the medium-range wind speed forecasts generated by the GraphCast model.\nImplementation of HRES forcing involves augmenting the input layer of our customized GraphCast model to accommodate the HRES forecast variables. The weights associated with these new inputs are initialized as zeros, preserving the model's pre-existing functionality, which is derived from pre-training on ERA5 and operational fine-tuning on historical HRES-fc0 data. A subsequent single-step autoregressive fine-tuning process, utilizing a reduced number of steps (2,000 compared to the standard 30,000), allows the model to learn how to effectively incorporate the real-time HRES information while minimizing disruption to the previously established, regionally-tailored weights."}]}