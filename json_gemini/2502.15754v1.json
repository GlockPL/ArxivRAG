{"title": "Text2Net: Transforming Plain-text To A Dynamic Interactive Network Simulation Environment", "authors": ["Alireza Marefat", "Abbaas Alif Mohamed Nishar", "Ashwin Ashok"], "abstract": "This paper introduces Text2Net, an innovative text-based network simulation engine that leverages natural language processing (NLP) and large language models (LLMs) to transform plain-text descriptions of network topologies into dynamic, interactive simulations. Text2Net simplifies the process of configuring network simulations, eliminating the need for users to master vendor-specific syntaxes or navigate complex graphical interfaces. Through qualitative and quantitative evaluations, we demonstrate Text2Net's ability to significantly reduce the time and effort required to deploy network scenarios compared to traditional simulators like EVE-NG. By automating repetitive tasks and enabling intuitive interaction, Text2Net enhances accessibility for students, educators, and professionals. The system facilitates hands-on learning experiences for students that bridge the gap between theoretical knowledge and practical application. The results showcase its scalability across various network complexities, marking a significant step toward revolutionizing network education and professional use cases, such as proof-of-concept testing.", "sections": [{"title": "I. INTRODUCTION", "content": "Network simulators and emulators are essential tools in computer science (CS) education, allowing students to explore and experiment with complex network behaviors without relying on physical hardware. These tools are also widely used in industry for testing and validation purposes. Simulators are software engines that replicate various networking scenarios to test protocols, configurations, and network dynamics. Cisco Packet Tracer [1] is a popular simulator for beginners [2], while GNS3 [3] caters to advanced users with its capability to simulate real device images. However, these simulators primarily model network behavior and may not fully replicate real-world dynamics. In contrast, emulators like EVE-NG [4] offer a more realistic solution by supporting actual device system code images (e.g., Cisco IOS), enabling accurate emulation of real-world operations. EVE-NG's robust features make it particularly valuable for advanced education and professional training, allowing users to engage with complex network topologies in realistic environments [5].\nChallenges with network simulators in education. Despite advancements in simulation tools, significant barriers hinder their effective use in education. Traditional tools often require mastering complex, vendor-specific command syntax, making setup processes repetitive and time-consuming [6]. This focus on memorizing configurations detracts from understanding core concepts and designing network architectures, which are far more valuable skills. Furthermore, the wide variety of simulation tools introduces challenges such as poor maintenance, the dilemma of paid versus open-source options, and difficulties in transferring experiments between platforms [7].\nText2Net: Bridging the gap using plain text and AI. Text2Net provides an innovative solution by enabling users to create and interact with network simulations using plain-text English instead of vendor-specific syntax. Leveraging advancements in natural language processing (NLP) and large language models (LLMs), Text2Net interprets user inputs and translates them into actionable simulation commands. While LLMs are powerful, they are prone to issues such as errors and inaccuracies. Text2Net addresses these challenges by eliminating the need for technical expertise, simplifying the simulation process, and shifting the focus from command syntax to conceptual learning. This approach enhances accessibility and efficiency, reducing the effort required to deploy and manage network scenarios.\nThis paper focuses on the development of the Text2Net engine and its application in network education. We present the system architecture and demonstrate its usability through a case study involving the EVE-NG tool. A complete prototype implementation is evaluated qualitatively through user surveys and quantitatively by comparing task completion steps and time between Text2Net and EVE-NG."}, {"title": "II. RELATED WORKS", "content": "The intersection of AI and network management has prompted several innovative approaches, each aimed at enhancing the adaptability and efficiency of network systems. NetGPT [8] has been developed as an AI-native network architecture that strategically deploys LLMs both at the edge and cloud to optimize personalization and efficiency. The architecture highlights improvements in network management and user intent inference by integrating communications and computing resources more deeply [9]. Similarly, NetLM [10] introduces an AI-driven architecture to enhance autonomous capabilities in network management, notably in complex 6G environments. The system leverages multi-modal representation learning to integrate diverse network data, aiming to refine network intents and autonomously manage network operations. ABC (Automatic Bottom-up Construction) [11] revolutionizes the configuration knowledge base for multi-vendor networks by automating the alignment and generation of configuration templates through natural language processing and active learning, significantly reducing the manual effort typically required. CONFPILOT [12] employs a retrieval-augmented generation framework to translate natural language intents into precise network configuration commands. This system not only accelerates configuration processes but also enhances accuracy with its innovative use of a retrained BERT model and a parameter description-enhanced BM25 algorithm, which together improve the retrieval and matching of network commands. NetCR [13] utilizes a knowledge graph to facilitate manual network configurations, providing adaptive recommendations that enhance the efficiency and accuracy of network operations across various devices. This tool underscores the potential of using structured knowledge to streamline network management tasks in multi-vendor environments. To the best of our knowledge, Text2Net is the first initiative that directly integrates AI, specifically NLP, into network simulation for educational purposes and beyond. While prior works have explored the use of AI to enhance network management and configuration, Text2Net uniquely applies these technologies to simplify and democratize the learning and execution processes in network simulations."}, {"title": "III. TEXT2NET METHODOLOGY", "content": "As depicted in Figure 1, Text2Net comprises five modules: User, Software-Adaptor, instructed LLM, Text Extractor, and Simulator. The user inputs a network topology scenario, which the Software-Adaptor forwards to the instructed LLM, OpenAI's ChatGPT-4T, via API calls. The LLM processes this input and returns Structured Command Strings (SCS) to the Software-Adaptor. Utilizing NLP tools (SpaCy), along with RegEx and pattern matching, the Software-Adaptor extracts the desired key-value pairs, formatting them into a JSON dictionary. This JSON file is input to the EVE-NG emulator to provision the live network topology and configurations."}, {"title": "A. System preparation", "content": "The initial setup of Text2Net involves using EVE-NG, a network emulator (it is beyond simulator that replicates real-world environments and supports actual device images from manufacturers like Cisco, Juniper, and HPE). For Text2Net, Cisco devices are primarily used due to their commonality in networking. EVE-NG can be deployed either via an ISO file on virtual machines like VMware or directly on physical hardware to avoid performance issues associated with nested virtualization. To broaden Text2Net's accessibility, it is hosted on the Google Cloud Platform (GCP) using an n2-standard-8 machine with 8 vCPUs and 32 GB of memory, running Linux Ubuntu. After the EVE-NG installation, the system is configured with a static IP, and HTTPS and SSH ports are opened to ensure it is accessible from any location, verified by navigating to the public IP address in a web browser to reach the EVE-NG login screen.\nTo leverage OpenAI's ChatGPT-4T for Text2Net, we trained the model to interpret and generate SCS from plain text descriptions of network topologies, commonly presented in computer network lectures. The model was trained to precisely extract and structure key information into command strings with key-value pairs essential for network topology provisioning. The model recognizes detailed textual descriptions of network setups, outputting accurate command strings without superfluous content. For valid, complete inputs, the model confirms with returning the phrase \"Understood\", moving to the next phase. For inputs that are empty, incomplete, or incorrect, it prompts the user to refine their input. The initial user interaction with Text2Net involves a user-friendly interface where users are prompted to input network topologies in plain English. This input becomes the basis for generating network configurations.\nA significant challenge was standardizing how users describe network topologies; this was addressed through a qualitative survey to establish a standard input format. Text2Net is equipped to assess the validity and completeness of user inputs, ensuring no essential details, like IP formatting or technical configurations, are missing. This capability ensures the system efficiently transitions from user input to network configuration. When an input scenario includes an invalid IP address, such as \"192.168.0.300,\" Text2Net automatically detects the error. For configurations involving specific protocols like static routing that lack necessary details, the system does not simply accept the input. Instead, it prompts the user \"Please provide additional details about the static route\" before proceeding with generating the SCS."}, {"title": "B. Extracting Structured Command Strings", "content": "To efficiently extract key-value pairs from the plain text, the text is decomposed into segments known as Structured Command Strings a.k.a. SCSs. These SCSs are derived from the plain text by employing the instructed GPT-4T model. Each SCS consists of short strings that encapsulate one or a few specific key-value pairs, ensuring clarity and specificity in data extraction. Thanks to prompt engineering, the system is able to extract the same SCSs as an output from the following different scenarios that explain the same network topology with different styles of explanation. Figure 3 shows the network diagram for which we have considered input/output configuration testing across three different user-input scenarios that may be possible:\nScenario 1 \"R-1\" is a router that is connected to \"R-2\". \"R-1\" interface gi 0/0 has IP address 192.168.0.1/24 and is connected to \u201cR-2\" interface Gi 0/0 with IP address 192.168.0.2/24. R-2 is connected to \u201cR-3\u201d via interface Gi 0/1 using IP address 192.168.100.1/24. \u201cR-3\u201d is connected back to \"R-2\" using interface Gi 0/0 with IP address 192.168.100.2/24. A static route is configured on \u201cR-1\u201d to reach \u201cR-3\" as well as a static router on \"R-3\" to reach to \u201cR-1\u201d through \u201cR-2\u201d.\nScenario 2 The network has three routers: R-1, R-2, and R-3, interconnected in a specific manner. R-1 connects to R-2 through its interface Gi 0/0, with the IP address 192.168.0.1/24, while R-2's corresponding interface, Gi 0/0, has the IP address 192.168.0.2/24. R-2 establishes a connection with R-3 via interface Gi 0/1, with R-2 assigned the IP address 192.168.100.1/24 for this link. The reverse connection from R-3 to R-2 is achieved through R-3's interface Gi 0/0, configured with the IP address 192.168.100.2/24. For seamless communication between R-1 and R-3, static routes are set up on both routers through R-2, ensuring efficient routing between them."}, {"title": "C. Extracting Key-value pairs", "content": "To develop a comprehensive key-value pair dictionary, the first step is to establish a detailed entity relationship. Understanding the scope of the system is crucial for designing the relationships between entities to structure the corresponding JSON dictionary effectively. In the current phase of Text2Net, we leveraged RegEX and pattern matching to implement the system's functionality for routing in networking. However, scaling this approach to cover all networking concepts would be labor-intensive and inefficient. As future work, we aim to explore more on NLP techniques, also including Retrieval Augmented Generators (RAGs) in our model, to enhance scalability and extend the system's capabilities."}, {"title": "IV. EVALUATION", "content": "The evaluation of Text2Net was conducted using both qualitative and quantitative methods. For the quantitative analysis, we compared Text2Net's performance with manual configuration in the EVE-NG simulation environment, focusing on two parameters: time and steps. We measured only the time to input commands, excluding thinking or troubleshooting time, ensuring the results represent the best-case scenario for manual configuration. This assumption of an error-free manual process further highlights Text2Net's competitiveness.\nTo assess scalability and efficiency, we analyzed three network scenarios of increasing complexity. The results demonstrate that Text2Net significantly reduces time and steps, with its advantages growing as complexity increases. This improvement stems from eliminating repetitive commands and tasks inherent in traditional workflows.\nScenario 1 involves configuring a router with basic settings, including date/time, hostname, disabling DNS lookups, configuring an interface, and verifying the configuration. As shown in Figure 6 (Gantt chart), manual configuration in EVE-NG requires 12 steps, such as launching the simulator, logging in, creating a lab environment, starting a node, and configuring the interface. These steps, common across network platforms, take 200 seconds. In contrast, Text2Net completes the same task in just two steps and 110 seconds with the prompt: \"Configure a router as R1 with basic setup. Configure the interface Fast Ethernet 0/1 with IP address 192.168.0.1 and subnet mask 255.255.255.0, and finally check the configurations.\u201d\nScenario 2 introduces greater complexity with two routers, each having internal networks configured as loopback interfaces and interconnected with static routes. The steps from Scenario 1 are repeated for each node, including configuring loopback interfaces, setting static routes, verifying configurations, and running ping tests. Manual configuration in EVE-NG requires 510 seconds, while Text2Net completes the task in 250 seconds using the prompt: \"Configure Router 1 as R1 and Router 2 as R2 with basic configurations. On R1, configure the interface Fast Ethernet 0/1 with IP address 192.168.0.1 and subnet mask 255.255.255.0. Configure loopback 1 interface to act as Network 1 with IP address 192.168.1.1/24. On R2, configure the interface Fast Ethernet 0/1 with IP address 192.168.0.2 and subnet mask 255.255.255.0. Configure loopback 1 interface to act as Network 2 with IP address 192.168.2.1/24. Set static routes from R1 to R2 and vice versa. Finally, check the configurations.\u201d\nScenario 3 adds a third router, acting as a transit node between the two from Scenario 2. The static route from Router 1 (R1) now targets Router 3 (R3) via Router 2 (R2), which lacks an internal network. Manual configuration in EVE-NG requires 10 steps, including repeating all tasks from Scenario 1 for each node (R1, R2, and R3), configuring additional interface links, and setting static routes. Completing this scenario manually takes 730 seconds. Text2Net reduces this to 310 seconds with the prompt: \"R1 is a router connected to R2. R1 interface Gigabit Ethernet 0/0 has IP address 192.168.0.1/24 and is connected to R2 interface Gigabit Ethernet 0/0 with IP address 192.168.0.2/24. R2 is connected to R3 via interface Gi 0/1 using IP address 192.168.4.1/24. R3 is connected back to R2 using interface Gi 0/0 with IP address 192.168.4.2/24. R1 has a loopback interface 1 with IP address 192.168.1.1/24 to act as internal network-1. R3 also has a loopback interface 1 with IP address 192.168.2.1/24 to act as internal network-2. A static route is configured on R1 to reach R3, and another static route on R3 to reach R1 through R2.\u201d\nAcross Scenarios 1, 2, and 3, Text2Net consistently outperforms manual configuration, requiring 110, 250, and 310 seconds, compared to 200, 510, and 730 seconds in EVE-NG. This demonstrates Text2Net's scalability and efficiency in handling increasingly complex configurations. Figure 9 summarizes the qualitative evaluation of Text2Net, based on feedback from 15 participants, including graduate students, professors, and engineers. Participants highlighted Text2Net's ability to reduce errors, repetitive tasks, and setup time, making it more efficient compared to traditional methods. Additionally, the system was noted for simplifying simulation workflows and providing practical insights into real-world network scenarios. Text2Net received high ratings for ease of use, transparency, and educational value, achieving an average score of 4.66 out of 5, demonstrating its potential as a transformative tool for both academic and professional applications."}, {"title": "V. CONCLUSION", "content": "Text2Net represents a transformative approach to network simulation, bridging the gap between plain-text user input and fully functional network configurations. By leveraging LLMs and NLP, Text2Net automates the setup of complex network scenarios, making network simulations faster, more intuitive, and accessible. The evaluation highlights its efficiency, scalability, and educational value, as it significantly reduces the cognitive and operational overhead of manual configuration. Text2Net not only accelerates the learning curve for students and educators but also demonstrates potential applications in professional settings where rapid prototyping and testing are critical. This study is limited to routing, specifically static routing, as a proof-of-concept to demonstrate Text2Net's functionality. Future work will expand its capabilities to include Layer 2 protocols (e.g., VLAN and Spanning Tree Protocol) and advanced configurations like NAT and VPN. Additionally, we plan to replace RegEX and pattern matching with LangChain and RAGs, enabling dynamic retrieval and generation of accurate network commands. These enhancements will improve scalability and establish Text2Net as a versatile tool for network simulation, education, and professional use."}]}