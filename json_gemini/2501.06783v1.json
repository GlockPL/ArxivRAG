{"title": "Cost-Effective Robotic Handwriting System with AI Integration", "authors": ["Tianyi Huang", "Richard Xiong"], "abstract": "This paper introduces a cost-effective robotic handwriting system designed to replicate human-like handwriting with high precision. Combining a Raspberry Pi Pico microcontroller, 3D-printed components, and a machine learning-based handwriting generation model implemented via TensorFlow.js, the system converts user-supplied text into realistic stroke trajectories. By leveraging lightweight 3D-printed materials and efficient mechanical designs, the system achieves a total hardware cost of approximately $56, significantly undercutting commercial alternatives. Experimental evaluations demonstrate handwriting precision within \u00b10.3 millimeters and a writing speed of approximately 200 mm/min, positioning the system as a viable solution for educational, research, and assistive applications. This study seeks to lower the barriers to personalized handwriting technologies, making them accessible to a broader audience.", "sections": [{"title": "I. INTRODUCTION", "content": "Despite the increasing popularity of digital communications, handwritten text retains a unique and sentimental value in both personal and professional contexts [1], [2]. Traditional handwriting machines, however, are often expensive, complex, and bulky, limiting their accessibility primarily to large companies [3], [4]. These systems typically cost around $150 and use expensive materials, posing challenges in terms of cost and usability for smaller groups or individual users [5].\nTo address these challenges, this study introduces a cost-effective robotic handwriting system that uses a Raspberry Pi Pico microcontroller and 3D-printed components to reduce the overall cost to approximately $56 per unit [6]. This cost reduction allows for enhanced accessibility for educational settings and small businesses where such technology was previously considered too expensive [7].\nThe Raspberry Pi Pico provides a compact yet powerful platform for controlling the mechanical components of the handwriting machine. Combined with 3D printing technology for structural components, the system allows for easy prototyping and customization, enhancing its adaptability [2], [4]. By replacing traditional metal components with lightweight 3D-printed plastics and simpler mechanical designs such as lead screws instead of timing belts, the system becomes cheaper to produce and more energy-efficient [8].\nIn addition to its mechanical innovations, this paper incorporates a machine learning-based handwriting generation model implemented via TensorFlow.js [9]. This AI integration enables the system to convert user-provided text into stroke trajectories that emulate human-like writing [10], [11]. By doing so, this system enhances the realism and personalization of the handwriting output, expanding its utility for creative, educational, and assistive applications [12]. Experimental results confirm that the system achieves handwriting precision within \u00b10.3 millimeters while maintaining efficient operations and low costs.\nThis paper explains the design and implementation of the overall system, discusses its components, provides cost analysis, and presents experimental results that demonstrate its accuracy and effectiveness. We also explore potential applications and future work to improve the system further."}, {"title": "II. SYSTEM IMPLEMENTATION", "content": "The development of the hardware system involved four major stages:\n1) Mechanical Design: Using Autodesk Fusion 360, a 3D CAD design software, the entire mechanical framework was carefully designed [13]. This included the structural frame, lead screw mechanisms for movement along the X, Y, and Z axes, the pen holder, and mounts for electronic components. Precise modeling ensured that all parts would function correctly upon assembly.\n2) Assembly: The components were made using a Cre-ality Ender 3 3D printer with PLA filament [14]. The 3D-printed parts were then assembled along with the specified hardware components, including the Rasp-berry Pi Pico microcontroller, 28BYJ-48 stepper motors, ULN2003 driver boards, limit switches, and ball bear-ings [15], [16]. Assembly involved securing components through friction fit or screws.\n3) Hardware Controls: The Raspberry Pi Pico was pro-grammed using an Arduino sketch with a modified version of the AccelStepper library [17], [18]. The front-end interface was developed using HTML, CSS, and JavaScript, incorporating TensorFlow.js for handwriting generation [19]. The microcontroller code was uploaded via USB for direct communication with the controlling computer.\n4) Testing: Movements to specific coordinates were tested to verify accuracy. Calibration involved adjusting con-stants related to millimeter-to-step conversions, step off-sets, and Z-axis corrections until the machine accurately reached the desired coordinates."}, {"title": "B. Components Implementation", "content": "The hardware system comprises the following primary hardware components:\n\u2022 Structural Components: All structural parts were 3D-printed using PLA filament with a gyroid infill pattern for optimal strength and material efficiency. The design includes the main frame, lead screw supports, pen holder, and motor mounts.\n\u2022 Microcontroller: A Raspberry Pi Pico serves as the central control unit, selected for its cost-effectiveness and sufficient processing capability for real-time motor control.\n\u2022 Stepper Motors and Drivers: Six 28BYJ-48 stepper motors, each paired with a ULN2003 driver board, con-trol movement along the X, Y, and Z axes [15], [16]. These motors offer adequate torque for the application's requirements while remaining inexpensive.\n\u2022 Lead Screws and Bearings: Custom 3D-printed lead screws translate rotational motion from the motors into precise linear movement. 8 mm \u00d7 22mm ball bearings support the lead screws, ensuring smooth operation and reducing friction.\n\u2022 Limit Switches: CYT1073 limit switches are installed at the origin of each axis to support homing procedures and establish a consistent reference point.\n\u2022 Fasteners and Miscellaneous Components: M3 and M4 screws of various lengths are used for assembly. The writing surface is constructed from foam board, providing a lightweight and inexpensive base for the paper.\nMechanical Operation: Movement along each axis is achieved through the rotation of lead screws driven by the stepper motors. The pen holder travels through the X and Y axes to position the pen over the desired location, while the Z-axis controls the pen's contact with the paper. The system calculates the required number of motor steps based on the desired movement distance and the lead screw's pitch. Bearings secure the lead screws and reduce mechanical play, enhancing accuracy."}, {"title": "C. Control System Implementation", "content": "To effectively control pen movements and execute motor commands rapidly, the system employs a dual-component control architecture comprising a microcontroller and a front-end application. The microcontroller, a Raspberry Pi Pico running an Arduino sketch, handles low-level motor control tasks. The front-end application, developed using JavaScript and TensorFlow.js [19], manages high-level operations such as handwriting generation and coordinate transformation. These two components communicate over a direct USB serial con-nection."}, {"title": "1) Front-End Application:", "content": "The front-end application serves as the user interface for handwriting generation. Its main functions include:\n1) User Interaction and Initiation: The user initiates the system by sending a \"home\" command, prompting the microcontroller to perform a homing procedure and position the machine at its origin. The user inputs the desired text into a textbox within the application.\n2) Text Processing: The input text is segmented into lines by determining the number of characters per line and splitting at spaces to avoid word fragmentation. The segmented text is converted into a series of coordinate points representing handwritten strokes using Tensor-Flow.js.\n3) Coordinate Transformation: The generated points, initially in millimeter units, are scaled to match the machine's coordinate system. This scaling factor is cal-culated based on the motor step size and lead screw pitch (e.g., scaling factor = steps per revolution divided by lead screw pitch). A constant offset is added to the X and Y coordinates to align them with the machine's reference frame.\n4) Z-Axis Compensation: An additional Z-axis offset is applied based on the pen's X and Y positions to com-pensate for mechanical flex and ensure consistent pen pressure across the writing area. This compensation uses a rectified linear unit (ReLU) function to adjust the pen's distance from the paper when it is farther from the Z-axis lead screws [20].\n5) Pen-Up and Pen-Down Movements: Coordinates are added to control the pen's lifting and lowering at the start and end of each stroke, ensuring proper stroke formation.\n6) Data Management: The transformed coordinates are organized into a queue for efficient management. The microcontroller communicates its buffer capacity to the front-end, which sends coordinates accordingly to pre-vent overloading the microcontroller."}, {"title": "2) Microcontroller Firmware:", "content": "The firmware on the Rasp-berry Pi Pico, written in C++ using the Arduino framework and a modified AccelStepper library [17], [18], is responsible for executing precise motor control commands. Key aspects of the firmware include:\n1) Initialization: Configuring all input/output pins for communication with motors, drivers, and limit switches. Initializing AccelStepper objects for each motor.\n2) Main Control Loop: Continuously checks for incoming serial messages and determines if motor steps need to be executed. Processes received messages using a finite-state machine to execute the appropriate actions.\n3) Homing Procedure: Each axis moves toward its cor-responding limit switch until triggered. After activation, the axis moves a predefined number of steps away from the switch to ensure accurate positioning. The current position is set to zero, establishing the origin (0, 0, 0).\n4) Movement Execution: Upon receiving target coordi-nates, the firmware calculates the required steps for each motor based on the difference between current and target positions. To achieve linear motion, the motor that needs to travel the greatest distance is set to its maximum speed. The speeds of the other motors are adjusted pro-portionally based on the ratio of their required distances to the longest distance.\n5) Motor Control and Step Execution: The AccelStep-per library manages motor stepping with acceleration and deceleration profiles for smooth motion. Steps are executed until the target coordinates are reached.\n6) Queue Management: After completing a movement, the firmware updates its internal queue and sends feed-back to the front-end about its capacity to receive more data. This ensures continuous operation without buffer overflows."}, {"title": "3) System Coordination:", "content": "Communication between the front-end application and the microcontroller uses a simple, custom protocol over the USB serial connection. The protocol includes:\n\u2022 Command Messages: The home command signals the microcontroller to perform the homing procedure. The move command contains target coordinate data for move-ment execution. Status updates are messages indicating movement completion and buffer capacity.\n\u2022 Data Formatting: Messages are structured in a con-sistent format for reliable parsing. Example of a move command: MOVE X:1200 Y:800 Z:200\n\u2022 Feedback: The microcontroller sends feedback on sys-tem status and readiness for new data upon receiving commands.\nThe system coordination benefits from this architecture in several ways. First, it ensures efficient resource usage by allowing the front-end to handle computationally intensive tasks, while the microcontroller focuses on time-sensitive motor control. Second, it provides flexibility as updates to the front-end software do not require changes to the firmware, and users can run the application on various computers with minimal requirements. Lastly, it enhances error handling by in-corporating firmware checks for invalid commands and out-of-bounds coordinates, and by using limit switches and firmware safeguards to prevent mechanical overrun and damage."}, {"title": "D. AI-Based Handwriting Generation", "content": "A machine-learning handwriting generation model was de-veloped using TensorFlow.js to process user-provided text and generate stroke trajectories, simulating natural handwriting. The main components of this AI system are:\n1) Text Preprocessing: The input text is segmented into individual letters. Each letter is extracted from the user-provided input to serve as the base for further process-ing.\n2) Handwriting Model: A pretrained recurrent neural net-work (RNN) model goes through post-training using samples of the user's handwriting to adapt to their style. This allows the system to generate coordinate sequences custom to the user's letter formation.\n3) Stroke Generation: Using the output of the fine-tuned RNN, the system generates precise pen movement co-ordinates for each letter [21].\n4) Integration with Mechanical Control: The generated coordinate data is passed to the control system, where it is translated into motor commands. This ensures that the machine physically reproduces the AI-generated handwriting accurately."}, {"title": "III. RESULTS AND DISCUSSIONS", "content": null}, {"title": "A. System Performance", "content": "To assess precision, the machine was programmed to write lines of text generated by the AI handwriting model. The output was compared to the original by overlaying the ma-chine's writing onto a printed version of the AI-generated text under bright light [22]. The maximum deviation between corresponding points was measured using a caliper.\nAn example of this comparison is shown in Figure 6. The green line represents the measured deviation between a point on the machine's output and the target point. After testing 10 full lines of text, the maximum observed deviation was within \u00b10.3 millimeters, indicating sufficient accuracy. The maximum speed of the machine was also measured to be approximately 200 mm/min using calipers and a stopwatch."}, {"title": "B. Cost Analysis", "content": "A complete cost analysis was conducted to compare this machine with existing commercial handwriting machines. The total cost of the primary components is outlined in Table I.\nThe handwriting machine's cost-effectiveness results from inexpensive material selections and design simplifications that greatly reduce expenses without compromising performance. One primary factor is the substitution of traditional materials with more affordable alternatives. Conventional handwriting machines often use aluminum chassis to enhance stability, which is necessary for devices like 3D printers and CNC routers that handle heavier loads. However, moving a single pen or pencil does not require such robust construction. Therefore, this machine replaces aluminum rails with 3D-"}, {"title": "C. Advantages and Limitations", "content": "With its modified structure and movement system, this handwriting machine presents clear advantages while also facing specific limitations that warrant consideration for future development.\nAdvantages:\n1) Accessibility: By reducing the cost to about one-third of existing commercial machines, it becomes accessible not only to institutions but also to individuals, including those with disabilities who may benefit from assistive writing devices.\n2) Simplified Assembly and Customization: The inte-gration of a lead screw system simplifies the assembly process by eliminating the need for belt tensioning and complex alignments. Additionally, the use of 3D-printed components allows users to easily customize and prototype parts.\n3) Material Efficiency: 3D-printed plastics reduce material waste and energy consumption compared to machining metal components. The ability to produce parts on demand also contributes to a more sustainable manu-facturing approach [24].\nLimitations:\n1) Reduced Writing Speed: The use of more cost-effective stepper motors and low-pitch lead screws results in slower operation compared to other handwriting ma-chines. This may reduce productivity when handling larger volumes of text.\n2) Longer Assembly Time: Since many structural compo-nents must be 3D-printed by the user and electronic parts purchased separately, the assembly process will likely be more time-consuming and complex for individuals without prior experience.\n3) Limited Writing Volume: The size constraints of com-mon 3D printers limit the dimensions of the machine's components, resulting in a smaller writing area com-pared to commercial machines. For handwriting full pages of text, the machine may require multiple passes or repositioning of the paper."}, {"title": "D. Comparative Study", "content": "To analyze the advancements of the handwriting machine, we compare it with two existing systems: an Arduino-based 3-axis plotter machine by Hasan et al. and a handwriting robot by Zamani et al.\nHasan et al. developed a low-cost plotter machine using an Arduino and CNC shield. Their machine operates on three axes (X, Y, and Z) with stepper motors controlled by an Arduino microcontroller. The movement ranges are 215 mm on the X-axis and 235 mm on the Y-axis. The system is modeled using SolidWorks and relies on standard CNC principles [25]. However, the paper does not detail specific strategies for cost reduction beyond utilizing open-source hardware and software.\nZamani et al. presented a handwriting robot that also uses an Arduino microcontroller to control stepper motors along the X and Y axes, with a servo motor managing the pen's up-and-down movement on the Z-axis. They employ Inkscape and G-Code for signal generation from drawings, enabling the replication of intricate graphics and text [26]. Their focus is on creating a system capable of handling both graphics and handwriting using standard CNC methodologies.\nIn contrast, the handwriting machine introduces several innovations to enhance cost-effectiveness and accessibility. It employs a Raspberry Pi Pico microcontroller, offering sufficient processing power for real-time motor control at a lower cost. The system uses six 28BYJ-48 stepper motors paired with ULN2003 driver boards for precise control along all three axes, optimizing both performance and affordability. Moreover, the handwriting machine extensively uses 3D-printed components made from PLA filament with gyroid infill patterns. This choice significantly reduces material costs and allows for easy customization and prototyping. By replacing traditional metal components with lightweight plastic parts, this machine achieves a reduction in overall weight and manufacturing expenses.\nAnother innovation is the adoption of 3D-printed lead screws for movement along all axes, replacing conventional timing belts and pulleys. This simplification reduces mechan-ical complexity, eases assembly, and enhances precision by eliminating the need for belt tensioning.\nIn terms of cost, the handwriting machine stands out with a total estimated cost of approximately $56 per unit. This is achieved through strategic material selection, simplified mechanical design, and the use of affordable components."}, {"title": "IV. CONCLUSION AND FUTURE WORK", "content": "This paper presented the design and implementation of a cost-effective robotic handwriting system utilizing a Raspberry Pi Pico microcontroller and 3D-printed components. By sim-plifying mechanical designs and using affordable materials, the system reduces the overall cost to approximately $56 significantly lower than the $150 cost of existing commercial machines. Despite the reduced cost, the handwriting machine maintains a high accuracy in handwriting reproduction, achiev-ing a maximum deviation of \u00b10.3 millimeters.\nThe successful development of this machine demonstrates that advanced robotic handwriting technology can be made ac-cessible to a wider audience without sacrificing performance. The use of 3D-printed components and a lead screw mecha-nism not only reduces costs but also simplifies assembly and allows for greater customization, making it suitable for various applications, including education and assistive technologies."}, {"title": "A. Future Work", "content": "Future enhancements of the handwriting machine could focus on improving writing speed by experimenting with higher-pitch lead screws or upgrading motors. Structural im-provements to increase rigidity might further enhance accuracy and eliminate the need for software compensation. Simplifying the assembly process through the development of a custom PCB or offering pre-assembled kits could make the system more user-friendly. Additionally, expanding the writing area by designing modular components or integrating a paper-feeding mechanism would increase functionality. Adapting the system to accommodate various writing instruments could broaden its applications to include artistic expressions such as calligraphy."}]}