{"title": "Hydra: Bidirectional State Space Models Through Generalized Matrix Mixers", "authors": ["Sukjun Hwang", "Aakash Lahoti", "Tri Dao", "Albert Gu"], "abstract": "A wide array of sequence models are built on a framework modeled after Transformers, comprising alternating sequence mixer and channel mixer layers. This paper studies a unifying matrix mixer view of sequence mixers that can be conceptualized as a linear map on the input sequence. This framework encompasses a broad range of well-known sequence models, including the self-attention of Transformers as well as recent strong alternatives such as structured state space models (SSMs), and allows understanding downstream characteristics such as efficiency and expressivity through properties of their structured matrix class. We identify a key axis of matrix parameterizations termed sequence alignment, which increases the flexibility and performance of matrix mixers, providing insights into the strong performance of Transformers and recent SSMs such as Mamba. Furthermore, the matrix mixer framework offers a systematic approach to developing sequence mixers with desired properties, allowing us to develop several new sub-quadratic sequence models. In particular, we propose a natural bidirectional extension of the Mamba model (Hydra), parameterized as a quasiseparable matrix mixer, which demonstrates superior performance over other sequence models including Transformers on non-causal tasks. As a drop-in replacement for attention layers, Hydra outperforms BERT by 0.8 points on the GLUE benchmark and ViT by 2% Top-1 accuracy on ImageNet.", "sections": [{"title": "Introduction", "content": "Large-scale pretrained models such as GPT [34], BERT [10], and ViT [11] exhibit state-of-the-art performance across a wide range of tasks in multiple domains, including language and vision. A large number of these pretrained models follow a multi-layer architectural blueprint: a sequence mixer, such as Self-Attention [41], aggregates information across the input sequence, followed by a channel mixer processes information within each sequence element. Over the years, Attention has been the predominant choice for sequence mixing due to its ability to facilitate direct pairwise interactions between elements of the input sequence in a single step. However, this capability incurs a quadratic cost with respect to sequence length, making the training and deployment of these models prohibitively expensive for longer sequences. Although numerous alternatives have been proposed, designing principled sequence models that match the performance and versatility of attention-based systems remains a substantial challenge.\nOne general strategy in designing alternative sequence models involves substituting the Attention matrix with different matrix parameterizations as the core sequence mixer. These modifications are motivated by various goals. For instance, simplifying the sequence mixer has led to the development of models such as MLP-Mixer [39], which uses dense matrices, and FNet [23], which utilizes the Discrete Fourier Transform matrix. Additionally, incorporating inductive biases such as positional information has resulted in the use of Toeplitz matrices in models like TNN [32]. Enhancing computational efficiency has spurred the creation of low-rank structures in models like Linear Attention (LA) [22] and Linformer [44], as well as Monarch matrices [5] in models such as M2 [13]."}, {"title": "The Matrix Mixer Framework:\nBridging Sequence Mixers and Structured Matrices", "content": "In Section 2.1, we formally define the matrix mixer framework, conceptualizing sequence mixers as linear maps on input sequences. In Section 2.2, we introduce sequence alignment, a new axis of variation of matrix structures which controls important characteristics of downstream sequence models such as data-dependent parameterizations and extendability. Section 2.3 leverages these definitions to categorize a wide array of previous works based on their matrix mixers, facilitating the understanding of sequence mixers through their matrix structures. Furthermore, in Section 2.4, we propose novel sequence mixers utilizing Vandermonde and Cauchy matrices, demonstrating the flexibility of our framework in systematically designing new sequence mixers."}, {"title": "Formalizing the Matrix Mixer Framework", "content": "Definition 2.1 (The matrix mixer framework). Let \\(X \\in \\mathbb{R}^{L\\times C}\\) be the input sequence, consisting of L elements, each with C channels. Let \\(f_x : \\mathbb{R}^{L\\times C} \\rightarrow \\mathbb{R}^{L\\times D}\\) be the input preprocessing function that encapsulates common data transformations. Let H and P be the number of heads and head dimension respectively, such that \\(HP = D\\). Let \\(M \\subseteq \\mathbb{R}^{L\\times L}\\) represent the underlying class of mixer matrices. For each head \\(h \\in [H]\\), let \\(f_h : \\mathbb{R}^{L\\times C} \\times \\mathcal{O} \\rightarrow M\\) be the matrix construction function that maps input data to mixer matrices, where \\(\\mathcal{O}\\) is the space of learnable parameters. We denote \\(M^h = f_h(X, \\theta)\\), when \\(M, \\theta, X\\) are clear from the context. Then, we define matrix mixing as,\n\\(Y^h = M^h (f_x (X))^h\\),\nwhere \\((f_x (X))^h, Y^h\\) denote the preprocessed input and output slice corresponding to head h.\nThis definition encapsulates the view that existing sequence mixers can be mathematically represented as L \u00d7 L mixer matrices that act on the sequence length (see Figure 1, left). The framework not only incorporates typical data preprocessing steps like projections [22, 38], and short convolutions [16, 6], but it also accommodates data dependent mixer matrices [38, 33]. Furthermore, it is also powerful enough to capture the concept of head structure [41] by equivalently sharing the mixer matrices within a head.\nMoreover, Definition 2.1 offers a different lens to conceptualize the computational cost of sequence mixers. If we assume that both the preprocessing function and the matrix construction function are sub-quadratic in the sequence length L, which is generally true in practice, then the computational bottleneck lies in the \\(M f_x (X)\\) operation. For a general matrix M, this multiplication will incur a \\(O(L^2)\\) cost. The only way to mitigate this to restrict M to being a structured matrix, which are known to possess sub-quadratic matrix multiplication algorithms. We refer to such sequence mixers as structured matrix mixers. This paves the way to systematically develop new sequence mixers: select an appropriate class of structured matrices from established mathematical literature, devise a data-dependent matrix construction function, and integrate them into the matrix mixer framework."}, {"title": "Sequence Aligned Matrices", "content": "Unstructured mixer matrices, also known as dense matrices, lack two key useful properties: 1) these matrix mixers cannot be easily made data-dependent, which has been identified as a key property of performant sequence models such as Transformers and Mamba, and 2) they can only be applied to fixed-length sequences, a property we call extendability. Due to substantial importance of these features for sequence mixers, we formally define the class Sequence Aligned Matrices (SAM) to systematically explore matrices that are characterized with both properties.\nDefinition 2.2 (Sequence Aligned Matrices). Let L be the sequence length and let \\(M \\in \\mathbb{R}^{L\\times L}\\) denote a matrix with a parameter set \\(\\mathcal{P}\\). Then, we say that M is a Sequence Aligned Matrix if there exists a partition \\(\\Pi\\) of \\(\\mathcal{P} \\subseteq \\mathcal{P}\\), and \\(\\mathcal{P} \\neq \\emptyset\\), such that for all sets \\(\\mathcal{E} \\in \\Pi\\), there exists a bijective map \\(f_{\\mathcal{E}} : [L] \\rightarrow \\mathcal{E}\\), and, for each \\(i \\in [L]\\), the sub-matrix \\(M[: i + 1, : i + 1]\\) is composed solely from the parameters in the subset \\(\\bigcup_{\\mathcal{E}, k \\leq i}f_{\\mathcal{E}}(k) \\subseteq \\mathcal{P}\\).\nIn simpler terms, this implies that each parameter of a SAM is either mapped to a specific element of the sequence or is left data-independent, ensuring that every upper-left sub-matrix upto index i is constructed using only the parameters corresponding sequence segment upto and including index i and/or the data-independent ones.\nProposition 2.3 (Data Dependency). Sequence aligned matrices exhibit canonical data-dependent parameterization.\nProof. This property arises from the parameter partition structure guaranteed in the definition. Specifically, for each partition we associate a parametric function that, for any given element i computes the parameter's value by treating the element itself as an input.\nProposition 2.4 (Extendability). Sequence aligned sequence mixers can be extended beyond their trained length.\nProof. This is a direct consequence of Proposition 2.3: the pretrained parametric functions assigned to each partition enable the computation of matrices larger than those encountered during training.\nWe identify data dependency \u2013 the property induced by SAM as a key axis of differentiation amongst existing models. Although data-dependency is a popular notion that is widely regarded as being crucial to performance of Attention, it lacked any formal definition in the literature. Consequently, various works have adopted different interpretations of this notion: Hyena [30] implements it via a data-dependent linear operators over the Toeplitz matrix mixer; GSS [26] adds a data-dependent gate post sequence mixing; LA, SSD [22, 6], like Attention, directly map input data to the parameters of the matrix mixer. Using our definition of data dependency that aligns with the third interpretation, it is clear that models like Hydra, SSD, and LA are data-dependent, whereas MLP-Mixer, FNet, S4, S4D, and TNN, only have data-independent parameters."}, {"title": "Prior Sequence Models as (Structured) Matrix Mixers", "content": "Using the formalization of the Matrix Mixer framework, we categorize a wide array of previous works \u2013 MLP-Mixer [39], Transformer [41], Linear Attention [22], Linformer [44], S4 [18, 17], H3 [14], TNN [32], CKConv [36], FNet [23], Kaleidoscope [8, 7], Monarch [5, 13], and Mamba [16, 6] as matrix mixers in Table 1. For illustrative purposes, we explicitly show that MLP-Mixer, FNet and LA are matrix mixers (proofs in Appendix B), and leave out normalizing factors for simplicity as follows:\nProposition 2.5. (MLP-Mixer is a matrix mixer). MLP-Mixer employs \\(f_x\\) as an identity function, and its mixer matrix M has an unstructured parameterization with a single head (H = 1).\nProposition 2.6. (LA is a structured matrix mixer with sequence alignment). LA employs \\(f_x\\) as a linear projection \\(f_x (X, W_v) = XW_v\\), with its low-rank mixer matrix being SAM. The mixer matrix M has H heads with a structured parameterization, where each (i, j)-element \\(m_{ij}\\) is defined as:\n\\(m_{ij} = \\phi(x_i W_Q)\\phi(x_j W_K)^T, \\quad \\phi(\\cdot) = elu(\\cdot) + 1, \\quad W_Q, W_K \\in \\mathbb{R}^{C\\times D}\\).\nAdditionally, it is important to note that not all structured matrix mixers inherently exhibit sequence alignment. For example, consider the matrix mixer formulation \\(M = W_Q W_K^T\\) where \\(W_Q, W_K \\in \\mathbb{R}^{L\\times C}\\) are trainable parameters. This formulation yields a low-rank matrix mixer, which qualifies as a structured matrix mixer. However, this structure is independent of the input data, directly contradicting the concept of SAM. Another illustrative example is FNet:\nProposition 2.7. (FNet is a structured matrix mixer without sequence alignment). FNet employs \\(f_x\\) as an identity function, using the canonical Vandermonde matrix \u2013 Discrete Fourier Transform (DFT) \u2013 for its mixer matrix. The mixer matrix M has a single head (H = 1) with a structured parameterization, where each (p, q)-element \\(m_{pq}\\) is defined as \\(m_{pq} = w^{pq}\\), where \\(w = e^{\\frac{2\\pi i}{L}}\\).\nUsing these definitions, we present a series of matrix mixers, incorporating various mixer matrices both with and without the SAM property, and provide extensive experimental evaluations to investigate the influence of SAM on the expressivity of sequence mixers in Section 4.1.1."}, {"title": "The Matrix Mixer Framework as a Creative Toolbox", "content": "Armed with this framework, we illustrate how more classes of performant sequence models can be derived. In particular, we introduce Vandermonde and Cauchy matrix mixers, chosen because they are: 1) well-known families of structured matrices with sub-quadratic matrix multiplication, hence are efficient as sequence models, and 2) we show that they have SAM parameterizations. In Section 4.1.1, we validate that these properties are enough to create efficient and strong sequence models, e.g. our Cauchy matrix mixer is on par with LA. This validates the central theme of this paper that developing sequence models can be reduced to choosing structured matrix classes with target properties. We assume an input sequence \\(X \\in \\mathbb{R}^{L\\times C}\\) is given, and utilize the prevalent query-key concept that we employ \\(Q = XW_Q, K = XW_K\\) where \\(W_Q, W_K \\in \\mathbb{R}^{C\\times D}\\). For simplicity, we show the single-headed (H = 1) case, where \\(D = P\\). Further details including the implementations of multi-headed extensions are in Appendix E.\nSequence aligned Vandermonde mixer. In contrast to FNet, which employs a fixed-parameter Vandermonde mixer based on the Discrete Fourier Transform (DFT), we propose a trainable, and data-dependent Vandermonde-based matrix mixer. Then, we can construct a mixer matrix from a combination of two separate Vandermonde matrices \\(M_Q\\), \\(M_K\\), each generated from Q and K. Specifically, each (i, j)-element of the resulting mixer matrix M is formulated as \\(m_{ij} = \\sum_a (cos(2\\pi q_a) - cos(2\\pi k_a))\\). This formulation utilizes the cosine function \u2013 the real part of an imaginary number \u2013 which is a well established technique used in SSMs [17, 28] to prevent the potential for excessive values resulting from the powers of elements. Thanks to the associative property of matrix multiplications, our sequence aligned Vandermonde matrix mixer enjoys algorithms with efficient computational complexities.\nSequence aligned Cauchy mixer. As indicated by the definition of Cauchy matrices in Table 1, the underlying philosophy of using both the Cauchy and low-rank matrix classes as a sequence mixer is remarkably similar: the relevance of a pair of elements is directly proportional to their associated value \u2013 the greater the relevance, the higher value assigned. Specifically, each (i, j)-element of the mixer matrix M is constructed by \\(m_{ij} = \\sum_d \\frac{1}{(q_{id} - k_{jd} + c)}\\), where c is a trainable"}, {"title": "Hydra: The Double-Headed Mamba", "content": "In this section, we introduce Hydra, a novel sequence-to-sequence model through a bidirectional extension of Mamba. We briefly begin with a preliminary background that SSMs are semiseparable matrix mixers (Section 3.1). Then, we motivate the design choice of Hydra under the domain of the matrix mixer framework. Specifically, we opt for quasiseparable matrices as our matrix mixer, a choice grounded by solid mathematical foundations (Section 3.2). Additionally, we underline the computational benefits and enhanced parameter efficiency afforded by adopting quasiseparable matrices (Section 3.3)."}, {"title": "Background: State Space Models are Semiseparable Matrix Mixers", "content": "SSD [6], the latest advancement in the iterations of SSMs, presents a sub-quadratic sequence mixer that attains language modeling performance on-par with Attention. Crucially, SSD underscores that all SSMs are inherently parameterized by semiseparable matrices, which play a pivotal role in their computational efficiency and strong empirical performance. Specifically, the operational essence of selective SSMs such as Mamba \u2013 the transformation of an input sequence \\(X \\in \\mathbb{R}^{L\\times C}\\) \\(Y \\in \\mathbb{R}^{L\\times C}\\) \u2013 can be succinctly represented within the matrix mixer framework, as detailed below:\n\\[\\begin{aligned}\nX_t = \\sum_{s=0}^{t-1} C A^{t-1-s} B X_s,\n\\\\\\\\\nY = SSM(A, B, C) (X) = MX,\n\\end{aligned}\\]\n\\qquad(1)\n\\[\\begin{aligned}\nA^t_{ij} = \\begin{cases}\n\\prod_{k=j+1}^i A_k \\quad \\text{ for } i > j \\\\\n1 \\quad \\text{ for } i = j\n\\end{cases}\n\\end{aligned}\\]\n\\qquad(2)\n\\\\\n\\qquad m_{ij} = c_i^T A^t_{ij} B_j\nHere, \\(m_{ij}\\) represents an (i, j)-element of the mixer matrix \\(M \\in \\mathbb{R}^{L\\times L}\\), with each matrix \\(A_i \\in \\mathbb{R}^{N\\times N}\\) and vector \\(c_i, b_i \\in \\mathbb{R}^{N\\times 1}\\) as time-varying parameters of selective SSMs. This formulation reveals that the mixer matrices M follow a fundamental class of structured matrices known as semiseparable matrices, defined as follows:\nDefinition 3.1 (The rank characterization of semiseparable matrices). A lower triangular matrix M is N-semiseparable iff any submatrix from the lower triangle (on or below the diagonal) has a rank of at most N. See Figure 2 (a).\nHowever, a key limitation of these matrices \u2013 and by extension, SSMs \u2013 is their inherent causality, which restricts their use in scenarios where bidirectional processing is vital. To circumvent this limitation, previous efforts [43, 15, 12] have explored employing two separate SSMs, one for forward and the other for backward sequence processing, then combine the outputs using strategies like element-wise addition, the Hadamard product, or concatenation. Among such heuristics, addition-based bidirectional extensions of SSMs [15, 47, 37] can be conceptualized within our matrix mixer framework, as illustrated in Figure 2 (c)."}, {"title": "Quasiseparable Matrices: A Principled Bidirectional Matrix Mixer", "content": "We fully utilize the matrix mixer framework, which is discussed in Section 2, to explore a novel bidirectional sequence mixer and identify quasiseparable matrices as a prime candidate. Our exploration focuses on structured matrix classes that meet the following criteria: 1) they feature upper triangular components for bidirectionality, 2) they possess strong expressivity, and 3) they benefit from sub-quadratic matrix multiplication algorithms.\nThe structural design of quasiseparable matrices inherently meets the first criterion, which is defined as follows: a matrix M is N-quasiseparable if each element \\(m_{ij}\\) satisfies\n\\[\\begin{aligned}\nm_{ij} = \\begin{cases}\n\\overrightarrow{c_i}A^t_{ij} \\overrightarrow{b_j} \\quad \\text{if } i \\geq j \\\\\n\\delta_i, \\quad \\text{if } i = j,\\\\\n\\overleftarrow{c_i}A^t_{ij} \\overleftarrow{b_j} \\quad \\text{if } i < j\n\\end{cases}\n\\end{aligned}\\]\n\\qquad(3)\nwhere each \\(\\delta_i\\) is a scalar, \\(b_i, c_i \\in \\mathbb{R}^{N\\times 1}\\), and \\(A_i \\in \\mathbb{R}^{N\\times N}\\) [4]. Clearly, this matrix class features non-zero upper triangular components, enabling bidirectional processing.\nFurthermore, the second requirement \u2013 the expressivity of quasiseparable matrices \u2013 is confirmed by their rank characterization:\nDefinition 3.2 (The rank characterization of quasiseparable matrices [29]). A matrix M is N-quasiseparable iff any submatrix from either the strictly upper or lower triangle (off from the diagonal) has a rank of at most N. See Figure 2 (b).\nThis definition emphasizes the rank constraint inherent in quasiseparable matrices, which is also evident from Equation (3) given that each vector \\(c_i, b_i \\in \\mathbb{R}^{N\\times 1}\\) and matrix \\(A_i \\in \\mathbb{R}^{N\\times N}\\) has a rank of at most N. This structural flexibility of quasiseparable matrices directly leads to significant generalizations, extending the capabilities of both low-rank and semiseparable matrices.\nCorollary 3.3. Quasiseparable matrices generalize low-rank matrices.\nCorollary 3.4. Quasiseparable matrices generalize and extend semiseparable matrices.\nAdditionally, we revisit the previous addition-based bidirectional extensions of SSMs [15, 47, 37] through the lens of our matrix mixer framework. Unlike other elements, the diagonal values in a mixer matrix embody a unique concept of residuals, serving as a critical aspect of model expressivity. As demonstrated in Figure 2 (c), the mixer matrices in these bidirectional SSMs exhibit constraints in their diagonal elements \\(\\{c_i \\overrightarrow{b_i} + \\overleftarrow{c_i} \\overleftarrow{b_i}\\}_L\\), which are directly influenced by the shared non-diagonal construction vectors \\(\\{\\overrightarrow{c}, \\overrightarrow{b}, \\overleftarrow{c}, \\overleftarrow{b}\\}\\). Importantly, the rank characterization of semiseparable matrices includes on-diagonal elements, whereas that of quasiseparable matrices applies only to off-diagonal submatrices. This generosity in the rank-based definition suggests that sequence models employing quasiseparable mixers not only offer inherent extendability in handling both causal and bidirectional processing, but also exhibit strong expressivity.\nCorollary 3.5. Quasiseparable matrices are strictly more expressive than mixer matrices of addition-based bidirectional SSMs.\nLeveraging this inherent flexibility of quasiseparable matrix mixers, our Hydra in Section 3.3 is defined by incorporating shift operations. Our experimental results strikingly confirm that this nuanced parameterization difference leads to a notable improvement in downstream task performance, thereby substantiating our theoretical claims (see Section 4.1.2).\nMoreover, with their structural similarity to semiseparable matrices, quasiseparable matrices are confirmed as sequence aligned matrices. Given our experimental results that SAM parameterizations are the key to the strong representational power (Section 4.1.1), we further validate our choice of quasiseparable matrices for the bidirectional sequence mixer.\nProposition 3.6. N-quasiseparable matrices are sequence aligned matrices.\nProof. quasiseparable matrices, due to their structural similarity to semiseparable matrices, belong to the class of Sequence Aligned matrices. Specifically, the set of parameters is given by \\(\\mathcal{P} = \\mathcal{P} = \\{A_i, b_i, c_i, \\delta_i\\}_L\\). We consider the partition \\(\\Pi = \\{\\{A_i\\}_L, \\{b_i\\}_L, \\{c_i\\}_L, \\{\\delta_i\\}_L\\}\\), and for each element of the partition set, we choose the bijection that maps token i to \\(A_i\\), \\(b_i\\), \\(c_i\\), and \\(\\delta_i\\) respectively. Finally, it is easy to see that the sub-matrix \\(M[: i + 1, : i + 1]\\) indeed only contains parameters in the set \\(\\{A_j, b_j, c_j, \\delta_j\\}_i\\), thus satisfying the last requirement of SAM matrices."}, {"title": "Taming the Hydra", "content": "As a direct consequence of the favorable mathematical properties of quasiseparable matrices, we present a new sequence mixer Hydra. We adopt quasiseparable matrices as matrix mixers in Hydra, which bring forth three significant advantages: 1) higher representational power compared to its heuristic alternatives, 2) easy to implement sub-quadratic matrix multiplication algorithm, and 3) significant parameter savings.\nWe exploit the relationship between semiseparable and quasiseparable matrices to develop an easy-to-implement, sub-quadratic matrix multiplication algorithm. Specifically, we recognize that quasiseparable matrices can be expressed as a combination of two semiseparable matrices.\nProposition 3.7. Let \\(X \\in \\mathbb{R}^{L\\times D}\\) be the input sequence, and let QS(\\(\\cdot\\)) and SS(\\(\\cdot\\)) denote the action of a quasiseparable and semiseparable matrix respectively. Let the two matrices share the parameters \\(\\{A_i, b_i, c_i\\}_L\\), and define D = diag(\\(\\delta_1,\\cdots, \\delta_L\\)), where \\(\\delta_i\\'s\\) are the diagonal parameters of the quasiseparable matrix. Then,\nQS(X) = shift(SS(X)) + flip(shift(SS(flip(X)))) + DX,\nwhere flip() denotes the operation that reverses the input sequence, while shift(\\(\\cdot\\)) refers to shifting the sequence right by one position, padding the beginning with zero. (Proof in Appendix B)\nThe above proposition demonstrates that quasiseparable matrix multiplication can be decomposed into two operations of semiseparable matrix multiplication with simple functions such as flip and shift. Given that semiseparable matrix structure encompasses SSMs, this flexibility allows for the selection of any SSM variant for implementation. In this paper, we employ SSD [6], chosen for its linear-time and dedicated hardware-efficient implementation. However, the architecture of Hydra is compatible with a variety of SSMs [18, 17, 16, 6] and can also be generalized with other recurrent models [46, 28].\nFurthermore, Hydra significantly improves parameter over the heuristic approaches to bidirectional modeling using SSMs [15, 47, 43, 12]. For example, some approaches utilize two distinct SSMs, which doubles the number of training parameters. In contrast, since we conceptualize the model as a quasiseparable matrix mixer (see Figure 4), we naturally share the \\(f_x\\) projection layer, which accounts for a bulk of the model size. Empirically, we observe only a marginal increase in the total number of parameters compared to a single SSM, and can cut the the number of parameters nearly in half compared to the heuristic approaches to bidirectionality."}, {"title": "Experiments", "content": "In Section 4.1, we begin by analyzing the matrix mixer framework through extensive performance comparisons between different structured matrix classes (Section 4.1.1). The data-dependent parameterization of Quasiseparable matrices surpasses the performance of all other matrix classes, validating our selection of it as the sequence mixer. Furthermore, we compare our method against other ad-hoc solutions that extend SSMs to acquire bidirectionality (Section 4.1.2), and show that our Hydra outperforms them, underscoring the utility of the matrix view of sequence mixers.\nThen, in Section 4.2, we validate the effectiveness of our method by evaluating Hydra on quintessential language and image benchmark tasks: Masked Language Modeling (Section 4.2.1) and Image Classification (Section 4.2.2). State-of-the-art performance in both tasks has generally been dominated by transformer-based models [10, 11]. Our Hydra serves as an efficient and powerful replacement to the transformer layer, outperforming it on both tasks.\nIn the presentation of results across all tables, the highest performing scores are highlighted in bold, while the second-highest scores are marked with an underline. Each number is the average of five runs."}, {"title": "Analysis of the Matrix Mixer Framework", "content": "Our controlled experimental setting distinctly separates the mixer matrices from other architectural components, enabling a rigorous and focused comparison between different types of mixer matrices. Specifically, utilizing the recent Mamba [6] block, we only replace SSD with different mixer matrices M. In Table 2 we provide experimental results that showcase the expressivity of various matrix mixers that support bidirectional sequence processing, primarily by utilizing off-the-shelf structured matrix families for the mixer matrix. Further details of the experimental setup are provided in Appendix E.\nResults. The results distinctly highlight the substantial advantage in expressivity conferred by the SAM property (Definition 2.2). Previously, the high performance observed in [22, 44] was attributed to their low-rank based mixer matrices, particularly emphasized by the query-key \\(Q K^T\\) interaction. The results show that the structures of mixer matrices affect the capability of sequence models. However, we demonstrate that the key factor that primarily contributes to significant improvements in the expressivity of sequence models is not the query-key formulation, but rather the SAM property. Through our systematic extension, we adapt six structured matrix families \u2013 Toeplitz, Vandermonde, Cauchy, low-rank, Attention, and quasiseparable \u2013 to include the SAM property (see Appendix E for implementation details). This adaptation reveals that the sequence-aligned Cauchy variant performs nearly as well as the sequence-aligned low-rank variant, which characterizes LA. Moreover, the experimental results consistently indicate that variants equipped with the SAM property outperform those lacking this feature across all tested matrix families."}, {"title": "Ablating Approaches for Bidirectionality", "content": "We compare the quasiseparable matrix mixer approach to prior bidirectional SSMs models that achieve bidirectionality by aggregating forward and backward SSMs using various heuristics including element-wise addition [15], the Hadamard product [43], and concatenation [43, 12].\nExperimental Setup. Each method under consideration employs 12 layers. As depicted in Table 3, due to shared projection layers for forward and backward SSMs, Hydra only requires an additional 2M parameters compared to its unidirectional counterpart. Moreover because of the parameter increase in the concatenation variant, we lower its hidden dimension to match parameters. As [CLS] token is typically placed at the start of a sequence, we add an additional technique only to Mamba, which substitutes a [CLS] token with a global average pool of tokens."}, {"title": "Bidirectional Masked Language Modeling", "content": "We pretrain our models on the masked language modeling objective using the Colossal Cleaned Common Crawl (C4) corpus [35], then finetune and evaluate them on the GLUE benchmark [42].\nExperimental Setup. We align our setup with the BERT-Base [10] architecture, which consists of 110M parameters across 12 transformer encoder layers. To ensure a fair comparison, MLP-Mixer [39], FNet [23], and M2 [13] are configured with 12 layers, with the number of channels adjusted to match the parameter count of BERT. Similarly, Hydra is structured with 23 layers to align with the total number of parameters of BERT. We follow the well-established BERT training recipes [31, 13] for optimal performance of each method. We relegate further experimental details in Appendix D.1.\nResults. The results in Table 4, showcase that Hydra outperforms all existing state-of-the-art methods. Notably, Hydra surpasses the performance of BERT \u2013 trained with the latest HuggingFace recipe [45] \u2013 in both pretraining and GLUE benchmark scores. BERT has shown a noticeable gap in the masked language modeling task compared to other previous methods [39, 23, 13]. Hydra gains a 1.8% improvement in accuracy of C4 validation and a 0.8% increase in the average GLUE score, illustrating the effectiveness of leveraging matrix mixer view for bidirectional settings."}, {"title": "Image Classification", "content": "We assess Hydra on the renowned ImageNet-1K benchmark [9], which comprises 1.28M training images and 50k validation images across 1,000 categories. We use the ViT-Base [11] model as a baseline to facilitate a rigorous comparison of various sequence mixers by substituting the Transformer block in ViT with alternative sequence mixer models, specifically S4ND [27], Hyena [30], Mamba [16], and our proposed Hydra model. Unlike many off-the-shelf models such as CNN-based [19, 25] and vision-specialized Transformers [24] that include additional techniques such as hierarchical spatial downsampling to boost accuracy, our approach involves substituting only the sequence mixer layers within the ViT architecture. In addition, as opposed to other baselines in the setting of [30], our method uses no tuning over the default ViT recipe except for droppath. We found that Hydra fits the training data noticeably better than ViT, perhaps due to better expressivity and inductive bias, so we simply increased droppath from 0.3 to 0.5 as stronger regularization. We relegate further experimental details in Appendix D.1.\nResults. The results, as presented in Table 5, compare the performance of Hydra with ViT [11] and other variants [27, 30] on ImageNet-1K. Hydra exhibits superior performance in image classification, outperforming ViT by 2.2% in Top-1 accuracy and 1.1% in Top-5 accuracy. Remarkably, even though Hydra simply flattens images without incorporating any specific 2D architectural adjustments, it still surpasses S4ND [27] \u2013 which is specifically tailored for image processing \u2013 by a notable margin of 1.6% in Top-1 accuracy. This showcases the versatility and effectiveness of Hydra in handling diverse data types."}, {"title": "Conclusion", "content": "In this work, we have explored a common paradigm for sequence models wherein the sequence mixer can be represented by a matrix. This framework encompasses many well-known models such as MLP-Mixer, FNet, convolutions, Transformers (softmax attention), and recent state-space models such as Mamba. By formalizing the matrix mixer framework and exploring additional matrix variants, we have identified a key axis of variation (sequence alignment) in matrix parameterizations, which enables benefits such as data dependence. This, in turn, provides increased flexibility and stronger performance for sequence models. Furthermore, we have leveraged the matrix mixer framework to motivate a natural bidirectional extension of state space models called Hydra, which can be formulated as quasiseparable matrix mixers. Hydra consistently outperforms unidirectional Mamba and other bidirectional sequence models in tasks such as masked language modeling and image classification."}, {"title": "Discussions", "content": "In this section, we share two limitations of our work, namely 1) Representation-Computation Tradeoff, and 2) Hardware Efficiency.\nRepresentation-Computation Tradeoff. While structured matrix mixers are computationally more efficient than their dense matrix mixer counterparts like softmax attention, they are also representationally less expressive, which may be seen as a limitation of these methods. For instance, concurrent works [1, 2, 21"}]}