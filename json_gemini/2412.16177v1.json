{"title": "Mining Math Conjectures from LLMs: A Pruning Approach", "authors": ["Jake Chuharski", "Elias Rojas Collins", "Mark Meringolo"], "abstract": "We present a novel approach to generating mathematical conjectures using Large Language Models (LLMs). Focusing on the solubilizer, a relatively recent construct in group theory, we demonstrate how LLMs such as ChatGPT, Gemini, and Claude\u00b9 can be leveraged to generate conjectures. These conjectures are pruned by allowing the LLMs to generate counterexamples. Our results indicate that LLMs are capable of producing original conjectures that, while not groundbreaking, are either plausible or falsifiable via counterexamples, though they exhibit limitations in code execution.", "sections": [{"title": "1 Introduction", "content": "Artificial intelligence, specifically deep learning, has created much discussion around the possibility to augment human creativity with computational capability. Among the leading technologies pushing this discussion are large language models (LLM's) such as OpenAI's ChatGPT, Anthropic's Claude, and Google's Gemini [1, 2, 3]. While LLMs have been widely recognized for their competence in text generation, their interactions within abstract academic fields such as mathematics, specifically with conjecture creation, remain under-explored. Initial work has evaluated LLMs' ability to pass exams like the SAT and MBA qualifying exams [4, 1]. More recently, efforts have focused on bench-marking their capacity to generate mathematical proofs [5]. However, there has been little work on bench-marking the ability of language models to act as a creative agent towards coming up with new conjectures.\nIn this study, we use the Claude Sonnet, Gemini 1.5, and GPT-4 APIs to both generate conjectures and write GAP computer algebra code to check them for plausibility. GAP (Groups, Algorithms, and Programming) is a computer algebra system designed for computational group theory and related areas in abstract algebra. However, GAP is not a proof assistant so does not give the user proofs for theorems, but it can be used to check conjectures for immediate counterexamples. We work specifically on the solubilizer subset which is a relatively new/unexplored construction in group theory that contains much potential for novel conjectures (see Appendix A.2). GAP computer algebra can check the conjecture for chosen groups and allows for language models to \"guess and check\". The system provides a method to mine for conjectures using language models and a pruning step to remove conjectures that are false for obvious (or sometimes non-obvious) reasons. This approach offers a systematic method for generating and validating conjectures, combining model output with automated computational verification without requiring a strong formal theorem prover."}, {"title": "2 Related Work", "content": "Recent studies have explored LLMs' role in conjecture generation. Johansson and Smallbone observe that many of the symbolic structures generated by LLMs may already exist in training data, raising concerns about genuine originality [6]. They note that GPT-4 appears to have been trained on proof libraries like QuickSpec, Hipster, and Isabelle/HOL, providing a potential caveat for verifying the originality of any generated conjectures.\nWe mitigate this challenge by deliberately focusing on a mathematical area with limited prior exposure: the solubilizer (see Appendix A.2). By iteratively updating prompts, we also attempt to steer the models away from generating as many redundant conjectures which they also found to be a problem because \"GPT-4 usually produces the same kind of \u2018generic' lemmas every time\u201d [6].\nOther studies, such as Davies et al. [7], use machine learning to assist mathematicians in proof creation rather than conjecture generation. In Wu et al. [8], LLMs are shown to autoformalize natural language math into formal theorem provers like Isabelle, translating competition problems into formal proofs with impressive accuracy. In Si et al. [9], LLMs are evaluated on the ability to be creative agents in coming up with research ideas, however math was touched minimally. They additionally corroborate the claim that \u201cLLMs lack diversity in idea generation\"[9]. These approaches focus on proof generation, formalization, or assistance, whereas our work emphasizes the initial creative step of formulating new conjectures, and then provides an immediate \u2018guess-and-check' step to verify plausibility."}, {"title": "3 Methodology", "content": "The method that we propose to \"mine\u201d for math theorems, shown in Table 1, is as follows:\n1.  We begin with a prompt that includes literature on the solubilizer from [10, 11, 12, 13, 14, 15, 16]. The model is prompted to generate theorems related to the literature provided and write GAP code to test conjectures on groups. Full prompting is provided in Appendix A.3.\n2.  The LLM then generates GAP code and the GAP code is run.\n   If the code compiles and runs, then the outcome is recorded.\n \u00d7 If the code does not compile the LLM is prompted again to fix the code, provided with the output of the failing program. It is given the chance to do two revisions (in practice allowing for further revision almost never results in working code).\n3.  If the result is that the conjecture is false, the theorem and it's result is added to the prompt, and the process is repeated with the false conjecture added to the set of ideas that are known to fail.\nThis process was run with three models: ChatGPT 4 (gpt-4o-2024-05-13), Claude Sonnet (claude-3-5-sonnet-20240620), and Gemini 1.5 (gemini-1.5-flash). LLM's have a \u201cTemperature\" parameter which varies the level of randomness in the outputs to a given prompt. This is sometimes taken as a proxy for \u201cCreativity\u201d, although this description is dispuited [17]. The temperature for the Claude model was set to 1 for conjecture generation and .1 for code generation. The GPT-4 conjecture was set to 1.08 for conjecture generation and was left at default for code generation. The Gemini 1.5 conjecture generation was set to 1.5 (top_k: 5, top_p:.99) and default for code generation. The values were generated by trial and error where the authors observed qualitatively the most consistent conjecture variation without extreme hallucinations2."}, {"title": "3.1 Area of Focus", "content": "The mathematical area of focus is called the solubilizer and is defined as follows:\nDefinition 3.1. Let G be a finite group. For any element $x \\in G$, the solubilizer of $x$ in G is defined as:\n$Sol_G(x) := \\{y \\in G | (x, y) \\text{ is soluble}\\}$.\nMore introductory and historical information on the solubilizer can be found in the Appendix A.2."}, {"title": "4 Results", "content": "The experiment provided three types of outcomes (Summarized in Table 1):\n\u2022 Successful generation of counterexample-finding code in 25.95% of cases (109 out of 420 unique outputs).\n\u2022 Generation of conjectures without counterexamples in 9.52% of cases (40 out of 420 unique outputs).\n\u2022 Generation of non-executable code in 64.52% of cases (271 out of 420 unique outputs)."}, {"title": "4.2 Examples", "content": "The following is an example with no counter-examples from Claude:\nConjecture 4.1. Let G be a non-solvable group. For any element x in G, if $Sol_G(x)$ is a subgroup,\nthen the Frattini subgroup of $Sol_G(x)$ is contained in the Frattini subgroup of G.\nThis result is simple enough that the model can be prompted to prove the conjecture with slight modification. See appendix A.5.1. The following is a conjecture that failed from Gemini (see A.5.2):\nConjecture 4.2. Let G be a non-solvable group, and let $x \\in G$. If $|Sol_G(x)|$ is divisible by exactly\ntwo primes, then one of them is 2.\nOutput 4.3. Conjecture failed for group: PSL(3, 2)\nWhere PSL(3, 2) is the projective special linear group of 3x3 matrices over the finite field F2. Lastly, we have an example where code could not be executed from GPT-4:\nConjecture 4.4. Let G be a finite non-solvable group and $x \\in G$. Then for every abelian subgroup\nA of G, we have $Sol_G(x) \\cap A \\neq \\{1\\}$."}, {"title": "4.3 Similarity Analysis", "content": "To quantitatively measure diversity, we calculated the cosine self-similarity, and similarity between conjecture sets/literature. The similarity results are summarized in Table 2. Where we see a maintained level of similarity throughout the experiments and between models. See Appendix A.8 for heatmaps.\nScaling the system further by increasing the number of trials or generating more variations in the prompt failed to yield significantly more diverse conjectures. However the quality did not decrease either. This finding suggests that a different approach, such as multi-modal model interaction or combining LLMs with automated theorem provers, could help diversity."}, {"title": "5 Discussion", "content": "Observations\nAmong the 757 outputs generated by the LLMs, 420 unique conjectures were identified. The high number of duplicates shows a considerable redundancy in the results, as approximately 55.48% of the conjectures were deemed to be unique. While not unexpected, the duplicates suggest that LLMs likely rely on similar patterns when prompted similarly across trials as described in [6]. However, this did not significantly hinder overall performance other than increase the number of total iterations needed to yield a desirable number of conjectures.\nNot all of the conjectures generated by the models were entirely original and was verified by one of the authors of the seven original solubilizer papers for all 420 unique conjectures. For example,\nTheorem 5.1. Let G be an insoluble group and x an element of G. Then the cardinality of cannot be equal to $p^2$ for any prime p.\nshows up in [12] and GPT-4 conjectured:\nConjecture 5.2. Let G be an insoluble group and $x \\in G$. Then the cardinality of $Sol_G(x)$ cannot be equal to $p^2$ for any prime p.\nThat being said, this result was contained in the system prompt and can be ignored. In all other cases the models output conjectures that were distinct from anything found in literature or their system prompt.\nIn 109 cases (25.95%), the generated code successfully identified counterexamples, which is critical for falsifying conjectures. Secondly, of the 420 unique outputs, only 40 (9.52%) produced conjectures with no counterexamples. ChatGPT significantly outperformed both Claude and Gemini in this area, generating 26.60% valid conjectures compared to Gemini's 4.64% and Claude's 4.49%. This shows that ChatGPT was more effective at producing conjectures that are plausible at first glance. However, a large portion of the GPT-4 conjectures were looking at the size of the solubilizer rather than about interactions with other groups, group structure, or subgroup properties. Therefore, one could argue that they were easier to write code for, or at least more likely to succeed based on similarity. Further still, results classified as having \"no counterexamples\" by GPT-4 seemed to be qualitatively more obvious than those by Claude or Gemini (see Conjecture A.5 vs. Conjecture A.4 vs. Conjecture A.9). Lastly, the fact that the models are able to generate novel, original conjectures at all provides promise for these models to be used as useful tools when developing the theory of a new construction."}, {"title": "5.2 Limitations", "content": "A limitation observed in both models was the generation of non-executable code, which occurred in 271 instances (64.52% of unique outputs). Gemini and Claude struggled more with code execution, having 81.86% and 49.44% instances of non-executable code respectively, compared to ChatGPT's 37.76%. This potentially points to differences in how the models handle code syntax in GAP, however the models were prompted to have a near identical code format (see Appendix A.3). This corroborates the idea that some conjectures set by Claude/Gemini are more difficult to write code for, and therefore more likely to fail in this system. Interestingly, there are some examples that Claude/Gemini gave"}, {"title": "5.3 Future Work", "content": "We propose the investigation of conjecture generation in fields where existing conjectures are sparse or absent. For example, LLMs could be applied to generate conjectures in newer or less explored areas such as tropical geometry or higher homotopy theory, where automated tools exist but have yet to be fully integrated with LLMs [18, 19]. Furthermore, the study above was limited to using a single LLM. If one model is better at writing code and the other is better at conjectures, using a combination structure could yield better results. We remark that a quantitative metric for 'interestingness' of a math conjecture or problem seems to be elusive, nontrivial, yet useful (see Appendix A.7)."}, {"title": "6 Conclusion", "content": "The study opens up several promising avenues for the use of LLMs in research. Our work, while small, shows the potentially impactful way that LLM's augmented with other computational capacity can solve more complex problem. For example, further work integrating conjecture generation with proof validation systems could streamline the process of discovery.\nThat being said, LLM-based conjecture generation is still very limited to existing knowledge. Rather than producing fundamentally new ideas, LLMs are likely to lean on known results, limiting their ability to drive groundbreaking discoveries [20]. Indeed, when thinking of language models as statistical traversers of some sort of higher dimensional surface built from training data, it is easy to imagine that the models are not able to stray too far from what they are fed to generate the surface. Specifically, conjectures and theorems involving well-understood subgroups on which the solubilizer is inspired (think centralizer and normalizer) can serve as an incredibly large well from which an LLM can sample a new direction about the solubilizer. This may all be permissible to a practitioner if one is only interested in clearing out the brush around a new construct such as the solubilizer; but as of writing, it should not be expected that these models will conjecture something profound.\nWe demonstrate that combining LLMs with computational resources like GAP can successfully generate and test original, albeit simple math conjectures. Performance suggests that LLMs like ChatGPT, Claude, and Gemini have potential, but only on conjectures that are similar to existing ideas or are otherwise simple. Furthermore, the models face significant challenges in generating executable code and avoiding duplicate conjectures. Indeed, ChatGPT-4 demonstrated stronger performance in generating conjectures that could not be immediately falsified, Claude was slightly more effective at identifying counterexamples, and Gemini had the least redundancy likely due to the longer context window. The high percentage of non-executable code reinforces the need for robust error-checking and handling within the models. GAP is limited in the variety of error codes that are produced when code fails, so other more verbose computational algebra solvers could help with error correction. Lastly, further analysis of failed code generation to find patterns of failure could lead to better prompting for avoiding common bugs. Further work would likely include adding a formal automated theorem prover or another form of neuro-symbolic proof engine, giving an end-to-end system that can generate new conjectures and prove them in a single pass[21, 22]. The authors are also interested to see other new approaches for accurate conjecture generation in various abstract fields, or more generally, improvements to conjecture generation by non-LLM based models."}, {"title": "A.2 Solubilizer", "content": "Background\nThe solubilizer is a construct that can be attributed to Doron Hai-Reuven in [14] from 2013. Much of the work in the area can be atributed to Banafsheh Akbari et al. in [10, 11, 12, 13]. The construct itself should be intelligible for anyone who has taken an introductory university algebra course, although can be potentially unpredictable to work with. It is therefore also simple for the models to understand, but non-trivial to produce conjectures. All of the models claim to have not heard of the construction before, meaning that the training data either excluded this information or did not have enough for it to be in the knowledge base. In either case, the models seem to be able to understand the definition once it is given, and provide often accurate assumptions about how the set behaves. For example, when testing these ideas on GPT-4, the model responded with the following:\nInput: Give me the definition of the solubilizer in group theory\nOutput: \"In group theory, there isn't a concept specifically called 'solubilizer.' However, I suspect you might be referring to the 'solubility' of a group or the concept of a 'solvable group.' A group G is said to be solvable if there exists a sequence of subgroups\n{e} = $G_0 < G_1 < G_2 <\u2026 < G_n = G$\nsuch that each G\u1d62 is a normal subgroup of G\u1d62\u208a\u2081 and the quotient group $G_{i+1}/G_i$ is abelian. Solvable groups generalize the notion of abelian groups. Solvability is an important property in group theory and plays a key role in Galois theory, which connects group theory with field theory. If you had a different concept in mind or need more information about solvable groups or another topic, please clarify, and I'll be happy to assist further!\"\nWe also further note that the model presents an almost identical response to \u201csolvabilizer\u201d instead of \"solubilizer\" which is another name that the set can be found under in the literature. We then present the definition to the model so that it can begin to formulate an understanding of the area.\nInput: I will define the solubilizer as follows: Let G be a finite group. For an element x in G, we\ndefine the solubilizer of x in G as the set: SolG(x) := {y \u2208 G|(x, y) is soluble}\nOutput: \"Ah, I see. Given your definition, the solubilizer $Sol_G(x)$ of an element x in G is the set of\nall elements y in G such that the subgroup generated by x and y, denoted $(x, y)$, is a solvable group.\nTo further elaborate on this:\n1.  $(x, y)$ denotes the subgroup of G generated by the elements x and y. This is the smallest subgroup of G that contains both x and y.\n2.  The condition that $(x, y)$ is solvable means that there exists a sequence of subgroups, starting\nwith the trivial group and ending with $(x, y)$, such that each subgroup in the sequence is a\nnormal subgroup of the next, and the quotient of successive subgroups is abelian."}, {"title": "A.2.2 Math", "content": "Let G be a finite group, and for any element x \u2208 G, the solubilizer of x in G is defined as:\n$Sol_G(x) := \\{y \\in G | (x, y) \\text{ is soluble}\\}$.\nIn general, $Sol_G(x)$ is not necessarily a subgroup of G. However, there are specific conditions under which this set does form a subgroup. It has been proven in [14] that $Sol_G(x)$ is a subgroup of G for any element x \u2208 G if and only if G is a soluble group.\nA well-known result, attributed to Thompson [23], states that a finite group G is soluble if and only if, for every x, y \u2208 G, the subgroup $(x, y)$ is soluble. Thus, a finite group G is soluble if and only if for any element x \u2208 G $Sol_G(x) = G$.\nAn important related concept is the soluble radical R(G), the largest soluble normal subgroup of\nG. Guralnick et al. [24] demonstrated that for an element x \u2208 G, x \u2208 R(G) if and only if $(x, y)$ is soluble for all y \u2208 G. Consequently, x \u2208 R(G) if and only if $Sol_G(x) = G$.\nA common question is how the structure of a single solubilizer influences the structure of the entire group. For instance, it was shown in [14] that if G contains an element x such that all elements\nof $Sol_G(x)$ commute pairwise, then G must be abelian. Another example, [11] generalizes this\nby proving that if there exists x \u2208 G such that for every $x_1, x_2, x_3 \\in Sol_G(x)$, the commutator\n$[x_1, x_2, x_3] = 1$, then $F_3(G) = 1$, implying that the group is nilpotent. Here, $F_3(G)$ is the third term"}, {"title": "A.3 Model Usage and prompting", "content": "Both the prompt for generating conjectures and the prompt for generating code were prefaced with:\n\"\"\"You are a mathematician and efficient computer scientist. You\nare interested in abstract algebra, but you are generally very\nknowledgeable and interested in the intersections between\ndifferent areas of math.\n4  You have began working on the 'solubilizer', subset of a non-\nsolvable group. You are very good at writing GAP code. The user\nwill ask for either a conjecture, or GAP code to check a\nconjecture.\n6  When a user asks for GAP computer algebra code you will provide\nnothing in your response except code to complete their task. When\nwriting code make sure that the answer to your question is PRINTED\nto the terminal.\n8  A maximum of two things should be printed by your code. If the\nconjecture fails, the code should break and just print for which\ngroup the conjecture failed. If the code does not generate any\ncounter-examples, the code should return \"No Counter-examples!\".\n10  Additionally, make sure you only test conjectures on Non-Solvable\ngroups! For example, when checking a conjecture, you might want to\ncheck it on all non-solvable groups of order less than one\nmillion by using: SimpleGroupsIterator(1, 10^6). This means ONLY\ngive GAP computer algebra code unless the user asks for a\nconjecture. When the user asks for a conjecture you should return\nnothing but the conjecture.\"\"\"\nThe code generation system prompt for both models included code snippets for how to accurately and consistently generate the solubilizer and had the format for how the conjectures should be checked and output."}, {"title": "A.3.1 Compute", "content": "The computer used for the experiments has the following specifications:\n\u2022 Model: Macbook Air\n\u2022 Chip: Apple M1\n\u2022 Memory: 8Gb\n\u2022 OS: MacOS BigSur 11.6 (20G165)\nThe experiments took between 48-72 hours to run for each model. This was mainly due to checking all non-solvable (or in some cases just simple) groups of order up to 1,000,000."}, {"title": "A.4 Additional Examples", "content": "In the following we include one example of each type from each model."}, {"title": "A.4.1 Claude", "content": "Example with no counterexamples from Claude:\nConjecture A.1. Let G be a non-solvable group. For any two elements x, y \u2208 G, if$Sol_G(x)\u2229Sol_G(y)$ is non-empty, then $Sol_G(x) \u2229 Sol_G(y)$ contains a non-trivial normal subgroup of G.\nThe following conjecture failed:\nConjecture A.2. Let G be a non-solvable group. For any element x in G, if $Sol_G(x)$ is a subgroup\nof G, then the derived subgroup [$Sol_G(x)$, $Sol_G(x)$] is contained in the Fitting subgroup of G.\nOutput A.3. Conjecture failed for group: A5\nIn a similar example, the model could not write code that executed properly:\nConjecture A.4. Let G be a non-solvable group. For any element x in G, if $Sol_G(x)$ is a proper subgroup of G, then the intersection of $Sol_G(x)$ with its normalizer in G is always properly contained\nin the normalizer of the Fitting subgroup of G."}, {"title": "A.4.2 GPT-4", "content": "The following had no counterexamples from ChatGPT 4:\nConjecture A.5. For any finite non-solvable group G and any element x \u2208 G, the set $Sol_G(x)$ is not\na cyclic group.\nSimilarly GPT-4 suggested that the following be true although it was immediately obvious to be false:\nConjecture A.6. For any element x \u2208 G of a non-solvable finite group G, the set $Sol_G(x)$ contains\nall elements of a certain conjugacy class in G\nOutput A.7. Conjecture failed for group: A5\nWhere A5 is the alternating group on five elements (see A.5.4). Lastly, an example where GPT-4 could not execute code for the conjecture:\nConjecture A.8. For any finite non-solvable group G, there exists an element x \u2208 G such that $Sol_G(x)$ is a nilpotent subgroup of G."}, {"title": "A.4.3 Gemini", "content": "The following is a conjecture with no counterexample:\nConjecture A.9. Let G be a finite non-solvable group and suppose x \u2208 G is not an element of\nthe soluble radical R(G) of G. Assume that $(x, xy)$ is not solvable for any element y \u2208 G. Then\n$(x, Sol_G(x)) = Sol_G(x)$ for all x \u2208 G.\nThe following is a conjecture that is false:\nConjecture A.10. Let G be a finite non-solvable group. For any element x of G, the probability that\na randomly chosen element y \u2208 G is contained in $Sol_G(x)$ is less than or equal to the probability\nthat y is contained in the radical of G.\nOutput A.11. Conjecture failed for group: A5\nWhere, again, A5 is the alternating group on 5 elements (see A.5.5). The following is a conjecture where code could not be executed:"}, {"title": "A.5 Conjectures", "content": "Proof of Conjecture 4.1\nProof: By assumption, $Sol_G(x)$ is a subgroup of G. Let \u03a6(G) and \u03a6($Sol_G(x)$) denote the Frattini\nsubgroups of G and $Sol_G(x)$, respectively. We aim to prove that\n$\u03a6(Sol_G(x)) \u2286 \u03a6(G)$.\nThe Frattini subgroup (H) of a group H is the intersection of all maximal subgroups of H. In particular, for any maximal subgroup M of $Sol_G(x)$, there exists a maximal subgroup N of G such\nthat MCN. Since\n$(Sol_G(x)) = \\bigcap \\{M | M \\text{ is a maximal subgroup of } Sol_G(x)\\}$,\nwe have\n$(Sol_G(x)) \\subseteq \\bigcap \\{N | N \\text{ is a maximal subgroup of } G\\} = \u0424(G)$.\nThus, we conclude that (Sol_G(x)) \u2286 \u03a6(G).\nFailure of Conjecture 4.2\n\u2022 Conjecture failed for group: PSL(3, 2)\n\u2022 Element: (2, 8, 4, 3, 6, 7, 5)\n\u2022 Prime divisors of $|Sol_G(x)|$ : [3, 7]\nFailure of Conjecture A.2\n\u2022 Conjecture failed for group: A5\n\u2022 Element: (1,5,2,4,3)\n\u2022 Derived subgroup: Group( [ (1,5,2,4,3) ] )\nFailure of Conjecture A.6\n\u2022 Conjecture failed for group: A5\n\u2022 Conjugacy class: (345)\n\u2022 Co-generator: (123)\n\u2022 Generated group: ((123), (345)) = A5 is not solvable\nFailure of Conjecture A.10\n\u2022 Conjecture failed for group: A5\n\u2022 Element: () (the identity element)\n\u2022 Probability(SolG(x)) : 1\n\u2022 Probability(Radical(G)):"}, {"title": "A.5.6 Additional Conjectures", "content": "The following conjectures are just a couple of the conjectures that had code that was unable to be run but are still potentially interesting from Claude:"}, {"title": "A.6 OpenAI 01", "content": "Here we briefly summarize data taken from OpenAI 01[25]. Due to initial limiting factors and the short timeline, the authors have not finished gathering sufficient data to be included into the main body. We recieved 51 conjectures with the following data:"}, {"title": "A.6.1 OpenAI 01 Examples:", "content": "The following are four randomly chosen examples and their output.\nConjecture A.18. In any finite non-solvable group G, the intersection of $Sol_G(x)$ over all $x \\in\nG\\R(G)$ is equal to R(G), the solvable radical of G.\nOutput A.19. No Counter-examples!\nConjecture A.20. In any finite non-solvable group G, for any element $x \\in G \\ R(G)$, there does not\nexist an element $y \\in Sol_G(x)$ such that $(x, y) = G$.\nOutput A.21. No Counter-examples!\nConjecture A.22. In any finite non-solvable group G, for any elements x,y \u2208 G \\ R(G), if\ny \u2208 $Sol_G(x)$, then x \u2260 $Sol_G(y)$.\nOutput A.23. Conjecture failed for group: A5\nConjecture A.24. In any finite non-solvable group G, for any elements x,y \u2208 G \\ R(G), if (x, y) is solvable, then x and y are both contained in a common solvable maximal subgroup of G."}, {"title": "A.7 Conjecture \u2018Interestingness'", "content": "In mathematics, evaluating the \u201cinterestingness\" of a conjecture or problem is inherently subjective and resists quantification. However, if one seeks a quantitative approach, there are several aspects to be considered: the conjecture's depth, its generality or specificity, its implications for other fields, simplicity of solution, and whether it leads to significant advancements or novel methods. Indeed, some of these are impossible to predict, and are not always necessary for a conjecture to be labeled interesting. Some conjectures, like the Riemann Hypothesis, have clear applications to a wide range of fields, yet others garner interest without obvious practical use. Consider the Collatz Conjecture: despite its straightforward formulation, the conjecture resists resolution and has few known applications, yet it draws wide attention due to its seemingly simple, though elusive nature. Furthermore, a conjecture's \"interestingness\u201d often depends on historical context, cultural influence within mathematical communities, and its perceived difficulty or elegance.\nAnother difficulty in quantifying interestingness is the risk of conflating technical complexity with profundity. A conjecture could be formally intricate yet lack broader appeal or connection to other domains. Additionally, highly specialized conjectures may be overlooked by non-specialists despite their beauty or importance for those knowledgebale in the field. Further, the evolving nature of mathematical interest itself becomes an issue; conjectures once regarded as obscure can gain recognition as foundational connections become clearer.\nNevertheless, certain conjectures seem almost universally intriguing. The Poincar\u00e9 Conjecture and Fermat's Last Theorem captivated broad attention due to their simplicity, profound implications, and historical legacy. If just pieces of these ideas could somehow be built into a standardized metric, many studies will surely benefit."}, {"title": "A.8 Similarity Analysis", "content": "We include figures that show the similarity heatmaps between conjectures below. It is visually apparent from these maps that Claude in general had the most syntactic similarity. Indeed, with conjectures exampled as the following A.27A.28, the entire structure of the first conjecture is held within the second but they are not the same idea.\nConjecture A.27. \"Let G be a finite non-solvable group. Then for any element x in G, if $Sol_G(x)$ is\na proper subgroup of G, there exists a prime p dividing |G| such that $Sol_G(x)$ intersects at least two\ndistinct Sylow p-subgroups of G non-trivially.\"\nConjecture A.28. Let G be a finite non-solvable group. Then for any element x in G, if $Sol_G(x)$ is\na proper subgroup of G, there exists a prime p dividing |G| such that $Sol_G(x)$ intersects at least two\ndistinct Sylow p-subgroups of G non-trivially, but does not contain any full Sylow p-subgroup of G.\"\nGPT-4 clearly has the most syntactic differences in the conjectures. While many of the conjectures reference the same idea, the way that they are stated is highly variable. Claude and Gemini both have a more methodical approach which show up as lighter colored squares. One can see that Gemini also had a period of runtime where the conjectures were mostly structured similarly with different modifiers at the end of the conjecture. The authors are unsure why these structural \u2018loops' seem to occur periodically throughout the repeated process, but they are interesting to note regardless. In these patches there didn't seem to be a significant difference in the quality of conjecture.\nWith regards to the similary with the literature, non-surprisingly GPT-4 had the highest similarity due to the reproduction of a conjecture from literature as noted above. Otherwise, the distinction in the models between themselves was roughly comparable with that in literature. We note that Claude had the lowest maximum similarity, that all of the models had a minimum similarity of zero, and that on average, the models were slightly more disjoint from literature than they were from each other."}]}