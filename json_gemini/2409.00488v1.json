{"title": "Rapid Gyroscope Calibration: A Deep Learning Approach", "authors": ["Yair Stolero", "Itzik Klein"], "abstract": "Low-cost gyroscope calibration is essential for ensuring the accuracy and reliability of gyroscope measurements. Stationary calibration estimates the deterministic parts of measurement errors. To this end, a common practice is to average the gyroscope readings during a predefined period and estimate the gyroscope bias. Calibration duration plays a crucial role in performance, therefore, longer periods are preferred. However, some applications require quick startup times and calibration is therefore allowed only for a short time. In this work, we focus on reducing low-cost gyroscope calibration time using deep learning methods. We propose a deep-learning framework and explore the possibilities of using multiple real and virtual gyroscopes to improve the calibration performance of single gyroscopes. To train and validate our approach, we recorded a dataset consisting of 169 hours of gyroscope readings, using 24 gyroscopes of two different brands. We also created a virtual dataset consisting of simulated gyroscope readings. The two datasets were used to evaluate our proposed approach. One of our key achievements in this work is reducing gyroscope calibration time by up to 89% using three low-cost gyroscopes.", "sections": [{"title": "I. INTRODUCTION", "content": "Inertial navigation systems (INS) are commonly used in manned and autonomous platforms operating in different environments. The INS provides the navigation solution based on its inertial sensor readings [1], [2]. The sensors are arranged in an inertial measurement unit (IMU) consisting of three orthogonal gyroscopes and accelerometers. INSs are popular because of their small size, low cost, high cost-effectiveness, and low power consumption. Yet, the accuracy of the INS depends heavily on the performance of its inertial sensors and their error regime, in particular in the absence of external physical sensor data or information updates[3], [4]. The use of low-cost IMUs further exacerbates this issue because of their large error terms and noise characteristics [5].\nTo reduce the effect of the sensor error terms on the navigation solution, stationary bias calibration of the inertial sensors is performed before the mission begins. This calibration aims to estimate the deterministic parts of the sensor errors. Once estimated, the errors are removed from the sensor readings during navigation. Calibration approaches can generally be divided into lab and field types. The former requires expensive equipment but it is considered to be more accurate. Lab calibration is essential for ensuring accuracy, consistency, and reliability in sensor measurements. This process requires specialized equipment, including precision turntables and temperature chambers, to meet the stringent demands of various applications. As outlined in [6], the six-position gyroscope calibration method requires a turntable capable of precise angular velocity measurement. Another approach to IMU calibration is temperature compensation, which requires a temperature chamber. Sensor readings can drift because of temperature variations, therefore a temperature sensor is used to record these changes, allowing the creation of a compensation model that adjusts the sensor readings accordingly [7]. A hybrid calibration technique for fiber optic gyroscopes using low-cost IMUs is presented in [8]. In [9], gyroscope calibration is carried out using a pendulum. Additional lab calibration methods include self-calibration through factorization [10], gyroscope denoising [11], and deep learning approaches [12]. Yet, the equipment needed to perform high-accuracy calibration is not always available. To address this problem, field calibration methods have been developed, including some tailored for low-cost IMUs. For example, Lasmadi showed how to mitigate sensor errors and bias compensation using a Kalman filter and zero velocity compensation [13]. The 3-axis rotations calibration is performed by rotating the gyroscope around each of its three axes and recording the output to calibrate the bias, scale factor, and misalignment errors [14]. In [15], an analytical method is developed. The IMU is moved only by hand to various locations, then using certain analytical equations, the IMU is calibrated. The above are some ideas for calibrating gyroscopes, but when considering only the bias as the main error term, the fastest reliable method is the zero-order calibration [16], where regardless of the gyroscope orientation, a predefined sequence of readings is averaged to estimate the bias. A more comprehensive view of calibration methods can be found in [17], [18].\nIn parallel with the advances in field calibration approaches for a single IMU with model-based methods, important breakthroughs occurred in the field of multiple inertial measurement units (MIMU) and inertial sensing based on artificial intelligence. In a MIMU setup, multiple IMUs are rigidly connected and aligned with one another [19]. A broad overview of the topic is presented in [20]. Applying a data fusion algorithm to the output of MIMU, two objectives can be accomplished: (a) the ability to detect outlier measurements, and (b) a general reduction in errors, specifically the IMU noise [21]. Skog et al. demonstrated how these goals are achieved in a massive MIMU structure [22]. MIMU has been proven to be useful in improving accuracy for positioning, bias, and coarse alignment [19], and has various applications such as calibration [23], [24], integration with GNSS [25], pedestrian navigation [26], [27], [28], data fusion and filtering [29], [30], [31], and localization algorithms [32].\nIn recent years, machine and deep learning (DL) approaches"}, {"title": "II. FORMULATION OF THE PROBLEM", "content": "In our study, we focused on calibrating low-cost gyroscopes in stationary conditions. The gyroscope error model is [1]:\n$\\tilde{\\omega}_g = M \\omega_g + b_g + w_g$\nwhere $\\tilde{\\omega}_g$ is the gyroscope measurement expressed in the gyro frame g, $\\omega_g$ is the true angular velocity vector expressed in frame g, M is a matrix of the misalignment (off-diagonal elements) and scale factor (diagonal terms) errors, $b_g$ is the gyroscope bias, and $w_g$ is zero mean white Gaussian noise. The most common technique for sensor calibration is zero-order calibration, which involves taking measurements while the gyroscope is stationary. In the zero-order calibration method, the bias is estimated by taking the mean over a sequence of stationary measurements. The underlying assumption is that the measurement noise is zero-mean and the actual measurement should be zero, as low-cost gyroscopes are not capable of measuring the earth rotation rate (low signal-to-noise ratio). Thus, taking the expectation operator from both sides of (1) gives:\n$E[\\tilde{\\omega}_g] = M \\underbrace{E[\\omega_g]}_{\\approx 0} M + \\underbrace{E[b_g]}_{b_{g,d}} + \\underbrace{E[w_g]}_{\\approx 0} \\implies E[\\tilde{\\omega}_g] \\approx b_{g,d}$\nwhere $b_{g,d}$ is the deterministic part of the gyroscope bias. Equation (2) demonstrates how averaging the gyroscope measurements in stationary conditions results in an estimate of the bias only. The performance of this calibration approach depends on the number of measurements and therefore on the calibration time."}, {"title": "III. PROPOSED APPROACH", "content": "Our goal is to improve the performance of gyroscope calibration using neural networks. To further enhance our approach, we used real MGs and a virtual MG array to assist in the calibration of a single IMU consisting of three gyroscopes. We proposed two DL calibration methods: one with increasing input channels and the other with increasing the training data with real and virtual MGs."}, {"title": "A. Motivation", "content": "When considering multiple IMUs operating together in close proximity, commonly a virtual IMU is used [21] to average all the physical inertial readings from existing IMUs into a single virtual one. In this case, MG calibration leverages multiple gyroscopes to achieve superior error estimation compared to that of single gyroscope. By integrating data from several gyroscopes, each from the same series, the MG setup operates as a unified system, thereby refining the precision of the sensor data. Motivated by the use of MG to improve calibration performance, in this research, we integrated DL algorithms with MG to achieve rapid and accurate gyroscope calibration."}, {"title": "B. Increasing Input Channels", "content": "The basic NN approach uses single gyroscope readings as input to output its bias. We increased the number of input channels, each channel representing a single gyroscope so that the output size corresponds to the number of channels (gyroscopes). As an IMU consists of three orthogonal gyroscopes, with the addition of each IMU, the input channels are increased by three. We sought to train the network with multiple channels and rely on the interconnections between the MG readings to improve the calibration performance. For example, when training the network with data from three gyroscopes, the network input consists of three channels corresponding to the three axes and the network output is the three deterministic bias values. Next, we examined the effect of increasing the number of input channels by incorporating data from additional gyroscopes, resulting in an input of 3N channels, where N is the number of IMUs. Note that the training data increases with the use of addition gyroscopes. If M is the number of samples recorded by each gyro, the training data with consist of $3 \\cdot N \\cdot M$ samples."}, {"title": "C. Increasing Training Data", "content": "Recall that the basic NN approach uses single gyroscope readings as input to output its bias. Following this approach, we used a fixed number of input channels and increased the training data using real and virtual MGs. Given that an IMU consists of three orthogonal gyroscopes, we set the"}, {"title": "D. Neural Network Architecture", "content": "Aiming to use the same NN in both proposed approaches, we conducted initial experiments with various neural architectures. These included convolutional layers and recurrent neural networks such as long short-term memory layers. Based on this evaluation, we decided to focus on convolutional neural network architecture\nIt consists of a convolution layer followed by a LeakyReLU activation function [39] and a max-pooling layer. Next, two fully connected layers, with a LeakyReLU activation function between them, process the output features. The input to the network is a multi-channel time series data from multiple gyroscopes. The input to the first layer is:\n$X \\in \\mathbb{R}^{3N \\times S}$\nwhere N is the number of gyroscopes and S is the window size. In the $i^{th}$ convolutional layer, the output Zi is obtained as follows:\n$Z_i = \\sum_{j=1}^m (x_j + (j - 1)s \\cdot w_j) + b$\nwhere m represents the window/kernel size, b is the bias, s denotes the stride, and $w_j$ represent the weights. The LeakyReLU is the LeakyReLU activation function, defined as follows:\nLeakyReLU $(Z_i) = \\begin{cases} Z_i & \\text{if } Z_i \\ge 0 \\\\ \\alpha \\cdot Z_i, & \\text{otherwise} \\end{cases}$\nwhere $\\alpha$ (slope) is 0.1. Then, we apply max pooling to $Z_i$:\n$Y_i = max Z_{is+m}$\nwhere P is the pooling size. After flattening the input into a 2-dimensional tensor, we computed the first fully connected layer:\n$L_1 = YW_1 + b_1$\nwhere $W_1$ and $b_1$ are the weights and biases of the first fully connected layer. We applied the activation function and repeated the process for the second fully connected layer, resulting in the final output $\\hat{y}_i$:\n$\\hat{y}_i = LeakyReLU(L_1)W_2 + b_2$\nwhere $W_2$ and $b_2$ are the weights and biases of the second fully connected layer, respectively.\nFor the training process, we used the mean squared error (MSE) loss function:\nMSE = $\\frac{1}{n} \\sum_{i=1}^n (Y_i - \\hat{Y}_i)^2$\nwhere n is the number of data points, $Y_i$ is the actual bias value, and $\\hat{Y}$ is the predicted bias value. The GT bias is obtained using a long-duration recording, whereas all approaches were evaluated over shorter periods, ranging from 5% to 50% of the total time required for the GT. We used the Adam optimizer [40] to train the neural network, leveraging its adaptive learning rate and efficient gradient-based optimization to enhance convergence speed and accuracy. The batch size was 64, with a learning rate of 0.0001 and a learning rate decay of 0.1 every 200 epochs. Training was conducted over 1,200 epochs."}, {"title": "IV. ANALYSIS AND RESULTS", "content": "We begin by describing the gyroscopes used in our experiments and the corresponding datasets. Next, we outline our evaluation process for both proposed approaches and compare them with the model-based baseline. Following this, we present the results and conclude with a brief summary of our findings.\nWe employed two types of gyroscopes for our experiments: (a) Movella Dot [41] and (b) SparkFun [42].\nTo achieve an accurate bias estimate from a single recording, a substantial number of samples is necessary to average out the Gaussian mean-zero noise. Consequently, 13,000 samples were recorded for each of the 24 gyroscopes. The bias distribution was estimated by repeating the experiment 100 times. After each experiment, the sensors were powered off for 10 seconds to cool down and return to room temperature.\nThe SparkFun measurements were conducted at a sample rate between 130 Hz and 145 Hz. For each recording, 13,000 samples were collected over 87 seconds. All SparkFun USB cables were connected to a USB hub, whereas the DOTs were controlled through Bluetooth using a smartphone to start and stop the recordings. For the DOTs, 13,000 samples were collected at 120 Hz over 120 seconds. The total recording time for the DOT gyroscopes was 34 hours and for the SparkFun gyroscopes 24.65 hours. Therefore, our dataset contains a total of 58.65 hours of recordings from 24 gyroscopes.\nIn addition to the real-world dataset, we generated virtual gyroscope measurements using simulation. The goal of this dataset was twofold: (a) increase the training set data for better results and (b) examine whether less data recorded by real gyroscopes, combined with virtual data, may be used to achieve similar performance in the bias regression task. To create the virtual dataset, we first calculated the bias ground truth values of the 24 gyroscopes (both brands) using (2). The minimum and maximum bias values were identified from the 24 values, for both IMU brands. Next, a bias was derived from a uniform distribution, with the minimum and maximum bias values as limits of the distribution. From the selected bias, we created a normal distribution with a mean equal to the bias and a standard deviation of 0.01 [deg/sec]. Finally, we generated gyroscope measurements from this normal distribution. To this end, given a bias value, we generated a sequence of 13,000 virtual measurements for a single recording. In total, for the same bias value, we made 100 recordings. We randomly selected 24 bias values, each representing a virtual gyroscope, and generated 100 recordings for each of them.\nFor the evaluation process, we divided the real and virtual data into four datasets:\n*   Dataset-1: Contains recorded data from all 12 SparkFun gyroscopes across 100 recordings, each with 13,000 measurements corresponding to 87 seconds of recording time per session. The training set includes 23.2 hours of recording and the testing set includes 1.45 hours of recording that are not present in the training.\n*   Dataset-2: Includes data from all 12 DOT gyroscopes across 400 recordings, each with 13,000 measurements corresponding to 120 seconds of recording time per session. The training set includes 32 hours of recording and the testing set includes 2 hours of recording that are not present in the training.\n*   Dataset-3: Contains virtual data from 24 virtual SparkFun gyroscopes with a total time of 46.4 hours. This dataset is used only as additional training data for Dataset-1.\n*   Dataset-4: Includes virtual data from 24 virtual DOT gyroscopes with a total time of 64 hours. This dataset is used only as additional training data for Dataset-2."}, {"title": "B. Evaluation Metric and Approach", "content": "We chose the root mean square error (RMSE) metric to quantify the performance of the model-based method and of our learning approaches. The RMSE is defined as follows:\nRMSE = $\\sqrt{\\frac{1}{N} \\sum_{i=1}^N (y_i - \\hat{y}_i)^2}$\nwhere N is the number of predicted biases, $y_i$ represents the GT bias from the test dataset, and $\\hat{y}_i$ is the estimated bias. From a machine learning perspective, more data in the training set improves performance. Practically, it is much easier to create a virtual dataset than to record data from MGs. Therefore, we used three training approaches based on the same test dataset:\n*   Real2Real: Only real recorded data were used for training, either from Dataset-1 or Dataset-2. In this approach we examined a minimum of three gyroscopes (a single IMU) and a maximum of 12 gyroscopes (4 IMUs).\n*   (3 Real+Virtual)2Real: This approach involved mixing Dataset-1 with Dataset-3 and Dataset-2 with Dataset-4. Only the data from three gyroscopes (a single IMU) was used in the real dataset, with additional data from the virtual sets.\n*   (12 Real+Virtual)2Real: This approach involved mixing Dataset-1 with Dataset-3 and Dataset-2 with Dataset-4. The data from 12 gyroscopes was used in the real dataset, with additional data from the virtual sets.\nThe testing dataset for all three approaches contained real recorded data from Dataset-1 or Dataset-2. We repeated this procedure for testing the other IMUs. We found that a different set of parameters was required (with the same network architecture) for each IMU. Thus, without loss of generality and for the sake of simplicity of the presentation, we focus only on the three gyroscopes of IMU #1."}, {"title": "C. Increasing the Number of Input Channels", "content": "In this section, we explore the effect of increasing the number of input channels and training data during neural network training on gyroscope calibration accuracy, using the Real2Real approach. Specifically, we analyze the performance of the neural network when using data from Dataset-1. We computed the running RMSE across the test dataset using the model-based approach. Subsequently, we trained the network four times with varying numbers of gyroscopes in the input to the network and training set. We repeated this process twice, once with a 10-second calibration period and again with a 30-second period. Finally, we determined the time difference between the RMSE achieved by the neural network after 10 or 30 seconds and the time required for the model-based approach to reach the same RMSE."}, {"title": "D. Increasing the Size of the Training Dataset", "content": "We followed the same procedure as in the previous section and examined the influence of the size of the training dataset on the calibration performance. We began the evaluation with three gyroscopes in the training set, and each time, we increased the number of gyroscope recordings by three until we reached 12 gyroscopes."}, {"title": "E. Adding Virtual Data", "content": "We first examined the possibility of improving a set of three gyroscopes (single IMU) using a virtual dataset. To this end, we applied the increasing the size of the training set approach and added virtual gyroscope readings using the (Real+Virtual)2Real method. We first trained on the data of three real gyroscopes from Dataset-1 and added virtual gyroscope readings from Dataset-3 to the training set."}, {"title": "F. Approach Robustness", "content": "To examine the robustness of our approach with different types of IMUs, we used the DOT IMU recordings. We followed the same procedure as in the previous section, and examined the influence of the training dataset on calibration performance, using virtual data. We used the same algorithm as before but this time with DOT gyroscopes. The real data were taken from"}, {"title": "G. Summary", "content": "As demonstrated, our results consistently indicate significant improvements in calibration time and accuracy. Table III summarizes the results using three gyroscopes (single IMU) and virtual data. In all the approaches, we improved the accuracy of the model-based approach for short calibration times. Additionally, the model-based approach requires more time to achieve the performance that we achieve with a 10-second calibration interval. We demonstrated this performance using two types of IMUs. The addition of virtual data improved both accuracy and calibration time compared to using only three real gyroscopes."}, {"title": "V. CONCLUSIONS", "content": "This study aimed to improve the zero-order calibration process of low-cost gyroscopes. To this end, we developed a simple yet efficient neural network for bias regression. To further improve performance, we incorporated MGs, using a mix of real and virtual data in the training dataset. We conducted the evaluation using 3 gyroscopes (a single IMU). For training, we created a dataset of real recorded data from 24 gyroscopes of two different brands and additional virtual data. The dataset contains 169 hours of recordings. The investigation revealed that our DL approach significantly reduced calibration time, i.e., the time to reach the performance achieved using the baseline approach, and significantly improved the accuracy of the model-based approach for the same calibration time. Given a single IMU, our DL calibration improved the baseline approach accuracy by 57% and calibration time by 72%. With the addition of virtual data, improvement in accuracy increased further to 84% and in calibration time to 79%. Using 12 MGS in the training set, greatly improved the results over a single IMU in both metrics, yet with 12 MGs, the addition of virtual data helped improve only the calibration time. The same behavior for 3 and 12 gyroscopes with and without virtual data was achieved using gyroscopes of a different brand, attesting to the robustness of our approach. Our findings reveal a critical trade-off between calibration speed and accuracy. With no time constraints, the model-based baseline approach continues to provide the most precise bias estimation. Yet, in applications such as search and rescue and robotics, where rapid calibration is a must, our approach has mission-critical advantages. Therefore, users can choose the most suitable method based on their concrete requirements, balancing the need for speed against accuracy and enhancing both flexibility and efficiency in various practical scenarios."}]}