{"title": "Probabilistic Circuits for Cumulative Distribution Functions", "authors": ["Oliver Broadrick", "William Cao", "Benjie Wang", "Martin Trapp", "Guy Van den Broeck"], "abstract": "A probabilistic circuit (PC) succinctly expresses a\nfunction that represents a multivariate probability\ndistribution and, given sufficient structural prop-\nerties of the circuit, supports efficient probabilis-\ntic inference. Typically a PC computes the prob-\nability mass (or density) function (PMF or PDF)\nof the distribution. We consider PCs instead com-\nputing the cumulative distribution function (CDF).\nWe show that for distributions over binary random\nvariables these representations (PMF and CDF)\nare essentially equivalent, in the sense that one can\nbe transformed to the other in polynomial time.\nWe then show how a similar equivalence holds\nfor distributions over finite discrete variables us-\ning a modification of the standard encoding with\nbinary variables that aligns with the CDF seman-\ntics. Finally we show that for continuous variables,\nsmooth, decomposable PCs computing PDFs and\nCDFs can be efficiently transformed to each other\nby modifying only the leaves of the circuit.", "sections": [{"title": "1 INTRODUCTION", "content": "Modeling multivariate probability distributions in a way\nthat is both expressive and allows efficient probabilistic rea-\nsoning is a fundamental problem in the field of artificial in-\ntelligence. Probabilistic circuits (PCs) provide a unifying\nframework for a myriad of tractable probabilistic models\nand reduce tractability to syntactic properties of the under-\nlying circuit [Darwiche, 2003, Poon and Domingos, 2011,\nChoi et al., 2020]. In general, a PC computes a multilin-\near polynomial in its inputs, most commonly computing a\nprobability mass (or density) function (PMF/PDF). How-\never, other polynomials can be used to encode probability\ndistributions and have been studied as alternative seman-\ntics for PCs, including generating functions [Zhang et al.,\n2021, Harviainen et al., 2023, Bl\u00e4ser, 2023] and character-\nistic functions [Yu et al., 2023]. In this paper, we extend\nthis line of work and consider the cumulative distribution\nfunction (CDF) as a semantics for PCs.\nUnlike the PMF, which computes the probability of an in-\nput assignment, the CDF computes the probability of re-\nalizing any assignment with entries elementwise less than\nor equal to the input assignment. The CDF exists for ev-\nery real-valued multivariate probability distribution, which\nis not true for mass or density functions, and has broad ap-\nplications in machine learning and statistics [Huang, 2009,\nHuang and Jojic, 2010, Hyv\u00e4rinen and Pajunen, 1999, Gre-\nsele et al., 2021]. A particularly useful property of the CDF\narises from its interpretation as a transformation, i.e., CDF\ntransformed random variables are uniformly distributed.\nThis property has been heavily exploited in the literature,\nfor example, in copulas [Ling et al., 2020], for inverse trans-\nform sampling [Gentle, 2003], and density estimation via\nboosting [Awaya and Ma, 2021].\nWhile CDFs are defined for arbitrary distributions over real-\nvalued random variables, we consider three important spe-\ncial cases. We begin with distributions over binary random\nvariables for which PCs are known to be tractable when\nthey express a multilinear polynomial that computes the\nPMF (called the PMF polynomial). Therefore we consider\nmultilinear polynomials that compute the CDF, which we\ncall CDF polynomials. We find that for binary random vari-\nables, CDF polynomials are exactly equal to probability\ngenerating functions (PGFs). This surprising equivalence\nimmediately implies that a circuit computing the PMF (re-\nspectively CDF) can be transformed to a circuit computing\nthe CDF (respectively PMF) in polynomial time, by recent\nresults [Broadrick et al., 2024, Agarwal and Bl\u00e4ser, 2024].\nMoreover, our new interpretation of PGFs as CDFs enables\nus to give an alternative and interesting proof of the trans-\nformation from PGFs to PMFs based on the generalized\nprinciple of inclusion-exclusion.\nNext we consider distributions over finite discrete random"}, {"title": "2 BACKGROUND ON CIRCUITS", "content": "We study probabilistic circuits (PCs): computation graphs\nthat, given sufficient structural properties, render inference\ntasks tractable. Let $X = {X_1,...,X_n}$ be random vari-\nables, and denote the set of all assignments to X by\nval(X).\nDefinition 1. A probabilistic circuit (PC) in variables $X =$\n${X_1,..., X_n}$ is a rooted directed acyclic graph. Each\nnode $v$ is either (i) a product node, (ii) a sum node with\nedges to children labeled by weights $W_{v1}, ..., W_{vk} \\in \\mathbb{R}$, or\n(iii) a leaf node, labeled by a function $l_v$: val($X_i$) $\\rightarrow \\mathbb{R}$\nfor some $X_i$. Each node $v$ (with children $v_1,..., v_k$) com-\nputes a polynomial whose indeterminates are $l_1,..., l_m$\n(the functions labeling the leaves of the PC):\n$P_v (l_1,..., l_m)$\n=\\begin{cases}\n\\prod_{i=1}^{k} P_{v_i} (l_1,..., l_m) & \\text{if $v$ a product node} \\\\\n\\sum_{i=1}^{k} W_{vi}P_{v_i} (l_1,..., l_m) & \\text{if $v$ a sum node} \\\\\nl_v & \\text{if $v$ a leaf node}.\n\\end{cases}$\nThe polynomial $p$ computed by a PC is the polynomial\ncomputed by its root. The function computed by a PC is\n$P$: val(X) $\\rightarrow \\mathbb{R}$ given by\n$P(x) = p(l_1(x),..., l_m(x)).$\nLastly, the size of a PC is the number of edges in it.\nIf each $X_i$ is binary, taking values in {0, 1}, we commonly\nconsider the leaf functions $x_i$ and $\\bar{x_i}$ respectively mapping\nthe bit $b \\in \\{0,1\\}$ = val($X_i$) to $b$ and $1 \\text{--} b$. In the case\nthat we only use the leaf functions $x_i$, then the polynomial"}, {"title": "3 CUMULATIVE DISTRIBUTION\nFUNCTIONS", "content": "For real-valued random variables $X_1,..., X_n$ the cumula-\ntive distribution function (CDF) $F : \\mathbb{R}^n \\rightarrow [0, 1]$ is\n$F(x_1,...,x_n) = \\mathbb{P}[X_1 \\leq x_1, ..., X_n \\leq x_n]$.\nThis is a general notion; the CDF exists, e.g., regardless of\nwhether the variables are discrete, continuous, or otherwise.\nIf the random variables are all discrete, meaning that they\ntake values in some countable subset of the reals $\\mathbb{D} \\subset \\mathbb{R}$,\nthen the distribution can also be specified by a probability\nmass function (PMF) $f : \\mathbb{D}^n \\rightarrow [0, 1]$ given by\n$f(x_1,...,x_n) = \\mathbb{P}[X_1 = x_1, ..., X_n = x_n]$.\nIf instead all the random variables are absolutely continu-\nous, then there exists a probability density function (PDF)\n$f : \\mathbb{R}^n \\rightarrow \\mathbb{R}_{\\geq 0}$ given by\n$f(x_1,...,x_n) = \\frac{\\partial^n}{\\partial x_1 ... \\partial x_n}F(x_1,...,x_n)$.\nIn the following sections we consider three cases. The first\ntwo concern discrete distributions: those over binary ran-\ndom variables in Section 4, and those over finite discrete\nvariables in Section 5. We then consider continuous vari-\nables in Section 6."}, {"title": "4 BINARY VARIABLES", "content": "We first consider the simplest setting: probability distribu-\ntions over binary random variables. Let $X_1, . . ., X_n$ be ran-\ndom variables taking values in {0, 1} $\\subset \\mathbb{R}$. Then there ex-\nists a PMF $f : \\{0,1\\}^n \\rightarrow [0,1]$ with $f(x_1,...,x_n) =$\n$\\mathbb{P}[X_1 = x_1,..., X_n = x_n]$. Moreover, there is a unique\nmultilinear polynomial $p\\in \\mathbb{R}[x_1,..., x_n]$ that computes $f$\n(in the sense that it agrees with $f$ on all inputs in {0, 1}\")\nwhich we will call the PMF polynomial:\n$p(x_1,...,x_n) = \\sum_{S\\subseteq[n]} f(v_S) \\prod_{i \\in S}x_i \\prod_{i \\notin S}(1 - x_i)$\""}, {"title": "5 FINITE DISCRETE VARIABLES", "content": "We now consider distributions over finite discrete random\nvariables, those taking values in some finite set of re-\nals, $K \\subset \\mathbb{R}$. In particular, we focus on the case $K =$\n\\{0,1,..., k-1\\}$ for some $k \\in \\mathbb{N}$. We note that any other\nfinite set of reals of size $k$ may be bijected with this set, as\nwell as other categorical or ordinal random variables.\nThe standard approach in the probabilistic circuits literature\nfor handling such finite discrete variables is to encode them"}, {"title": "6 CONTINUOUS VARIABLES", "content": "Lastly we consider the case where all of the variables are\ncontinuous with the distribution admitting a joint density\nfunction. Let $X_1, ..., X_n$ be real-valued random variables\nwith CDF $F : \\mathbb{R}^n \\rightarrow [0,1]$ and PDF $f : \\mathbb{R}^n \\rightarrow \\mathbb{R}_{\\geq 0}$. In\nthis setting, we show that it is straightforward to efficiently\ntransform between circuits computing the PDF and CDF\nwhen the circuits are smooth and decomposable. Smooth-\nness and decomposability are standard structural properties\nof PCs that enable efficient inference [Darwiche and Mar-\nquis, 2002, Choi et al., 2020]. In order to define them, we\nuse the notion of the scope of a node $v$ denoted scope($v$)\nwhich is the set of all variables appearing in the sub-PC\nrooted at $v$.\nDefinition 3 (Smoothness). A sum node $v$ with children\n$v_1,..., v_k$ is smooth if the scope of its children are equal to\nits own scope: scope($v$) = scope($v_i$) for $i = 1, ..., k$.\nDefinition 4 (Decomposable). A product node $v$ with chil-\ndren $v_1$ and $v_2$ is decomposable if the scope of its children\npartition its scope: scope($v$) = scope($v_1$) $\\cup$ scope($v_2$) and\nscope($v_1$) $\\cap$ scope($v_2$) = $\\emptyset$.\nIt is well known that a smooth and decomposable PC sup-\nports efficient integration, by pushing integrations to the\nleaves [Choi et al., 2020]. In particular, the following propo-\nsition follows by simply replacing each input distribution\n$l(x)$ with a new input distribution $l_{CDF}(x) = \\int_{-\\infty}^x l(t)dt$.\nProposition 2. A smooth, decomposable PC of size s com-\nputing the PDF $f$ can be transformed to a smooth, decom-\nposable PC of size s computing the CDF F.\nIn order to perform a transformation in the other direction\n(i.e., from CDF to PDF), decomposability alone suffices. In-\ntuitively, partial derivatives can be pushed over sum nodes\nby linearity and can be pushed over product nodes because\ndecomposability ensures that one of the two terms in the\nproduct rule is zero. A proof of the following claim is given\nin Appendix A.\nProposition 3. A decomposable PC of size s computing the\nCDF F can be transformed to a decomposable PC of size\ns computing the PDF f."}, {"title": "7 CONCLUSION", "content": "We study a basic question: what if a tractable PC computes\na CDF instead of a PMF or PDF? We show that in three\nimportant cases the two models are roughly equivalent. For\ndistributions over binary random variables, we observe that\nthe CDF polynomial is exactly the probability generating\nfunction (PGF) of the distribution. This observation allows\nus to conclude that PCs computing a PMF polynomial or\nCDF polynomial can be transformed to each other in poly-\nnomial time, and we were able to give a new explanation\nfor how a circuit computing the PGF can be transformed\nto a circuit computing the PMF. We then showed how to\nreduce the finite discrete case to the binary case with a\nslight modification to the standard encoding with binary\nindicators that respects the less-than-or-equal-to relation\nneeded to compute the CDF. Finally, we showed how the\nstandard structural properties of smoothness and decompos-\nability suffice in the continuous case to make transforma-\ntions between PDFs and CDFs simplify to modifications\nof the leaves. We leave open the question of whether sim-\nilar results hold for circuit models handling discrete vari-\nables over infinite domains, mixed distributions, or finite\ndiscrete variables with more efficient encodings into binary\nvariables, e.g. like those used by Cao et al. [2023] for finite\ndiscrete variables or those obtained by Garg et al. [2023]\nfor discretizations of continuous densities."}, {"title": "A PROOFS", "content": "We first give an alternative proof that, for distributions over binary random variables, a circuit computing the PGF can be\ntransformed to a circuit computing the PMF in polynomial time.\nWe identify vectors $x \\in \\{0,1\\}^n$ with sets $S_x = \\{i : x_i = 1\\}$ and then view $p$ and $c$ as set functions, $p, c : \\mathcal{P}([n]) \\rightarrow \\mathbb{R}$\nwhere $\\mathcal{P}([n])$ is the power set of $[n]$, yielding\n$c(S) = \\sum_{T \\subseteq S} p(T)$\nfrom Equation 3. We now recall the generalized principle of inclusion-exclusion, which allows 'inversion' of set-functions\nof the form in Eq. (5) (see e.g. Brualdi [2004]).\nFact 1 (Inclusion-Exclusion). For a finite set S, let $f : \\mathcal{P}(S) \\rightarrow \\mathbb{R}$ be an arbitrary function (where $\\mathcal{P}(S)$ is the power set\nof S), and let $g : \\mathcal{P}(S) \\rightarrow \\mathbb{R}$ be given by:\n$g(A) = \\sum_{B \\subseteq A} f(B)$.\nThen,\n$f(A) = \\sum_{B \\subseteq A} (-1)^{|A|-|B|}g(B)$.\nTherefore, applying Fact 1 to Eq. (5), we obtain\n$p(S) = \\sum_{T \\subseteq S} (-1)^{|S\\setminus T|}c(T)$.\nWhile this successfully expresses $p$ in terms of $c$, it also introduces a sum over exponentially many terms, and so any direct\nconstruction of a circuit based on this expression yields a circuit of exponential size. However it is possible to use a certain\nform of $c$ to compute Eq. (6) in a single forward pass (and to construct a circuit for $c$).\nFor any multilinear polynomial\n$f(x_1,...,x_n) = \\sum_{S \\subseteq [n]} a_S \\prod_{i \\in S}x_i$\nwith $a_S \\in \\mathbb{R}$, we define the network\u00b9 form of $f$ as\n$\\overline{f}(x_1,..., x_n,\\overline{x}_1,..., \\overline{x}_n) = \\sum_{S \\subseteq [n]} \\overline{f}(v_S) \\prod_{i \\in S}x_i \\prod_{i \\notin S}\\overline{x}_i$"}]}