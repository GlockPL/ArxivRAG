{"title": "Sim-to-Real Reinforcement Learning for Vision-Based Dexterous Manipulation on Humanoids", "authors": ["Toru Lin", "Kartik Sachdev", "Linxi \u201cJim\u201d Fan", "Jitendra Malik", "Yuke Zhu"], "abstract": "Reinforcement learning has delivered promising results in achieving human- or even superhuman-level capabilities across diverse problem domains, but success in dexterous robot manipulation remains limited. This work investigates the key challenges in applying reinforcement learning to solve a collection of contact-rich manipulation tasks on a humanoid embodiment. We introduce novel techniques to overcome the identified challenges with empirical validation. Our main contributions include an automated real-to-sim tuning module that brings the simulated environment closer to the real world, a generalized reward design scheme that simplifies reward engineering for long-horizon contact-rich manipulation tasks, a divide-and-conquer distillation process that improves the sample efficiency of hard-exploration problems while maintaining sim-to-real performance, and a mixture of sparse and dense object representations to bridge the sim-to-real perception gap. We show promising results on three humanoid dexterous manipulation tasks, with ablation studies on each technique. Our work presents a successful approach to learning humanoid dexterous manipulation using sim-to-real reinforcement learning, achieving robust generalization and high performance without the need for human demonstration.", "sections": [{"title": "I. INTRODUCTION", "content": "Deep reinforcement learning (RL) has delivered a number of impressive results during recent years, covering a diverse range of application domains: classical board games [48], competitive multiplayer online games [6, 56], large language models [1, 14], real-world robotic locomotion [21, 26], autonomous drone racing [24] to name a few. These accomplishments have not only showcased RL's potential to achieve or surpass human-level performance across various tasks but also highlighted its distinctive ability to scale and generalize via autonomous exploration. Such inherent characteristics position RL as a performant and long-term approach to tackling tasks that are difficult to solve with human priors or demonstrations.\nMotivated by its potential, we explore RL to address challenging dexterous manipulation tasks from vision. The successes that deep RL has produced in this problem domain remain limited so far. Previous works have demonstrated highly dexterous manipulation capabilities that could not be simply programmed or teleoperated by humans [2, 17, 31]. However, these approaches are often tailored to a single manipulation skill, limiting their broad applicability.\nWhat prevents RL from being more generally applicable to vision-based dexterous manipulation? We first investigate this by identifying the inherent properties of dexterous manipulation that differentiate this application domain from others. Then, we examine how these properties contribute to challenges in applying RL algorithms and develop a collection of novel techniques to address the challenges. Putting together our experiences and techniques, we outline a recipe for applying sim-to-real RL to vision-based humanoid manipulation tasks and show promising results. Below, we articulate the key challenges and our strategies to tackle them."}, {"title": "Challenge in environment modeling.", "content": "The first challenge in applying RL to dexterous manipulation lies in the difficulty (or impossibility) of matching a simulated environment with the real environment. While real-world RL circumvents this problem, training with physical hardware is highly demanding regarding hardware quality, maintenance support, controller robustness, and safety. With a system as high-dimensional as a humanoid with multi-fingered hands, real-world exploration becomes even less tractable. In contrast, simulations offer unlimited chances of trial and error in a virtual sandbox, motivating the development of sim-to-real RL approaches. While previous successes in RL-based locomotion [16, 21, 26, 43] are encouraging, we observe that previous successes in dexterous manipulation involve much more laborious real-to-sim engineering efforts that are task-specific or hardware-specific [2, 17, 31]. To better align simulation with the real world, we propose an automated real-to-sim tuning module that substantially reduces the engineering effort required for the environment modeling gap."}, {"title": "Challenge in reward design.", "content": "While the reward function is commonly used as a general interface for specifying a task to train RL policies, it is notoriously hard to design generalizable rewards for manipulation tasks, especially for those that are contact-rich or long-horizon. Prior work often resorts to hand engineering based on the knowledge of human experts [40, 61], which has limited scalability in the long run. This challenge differentiates manipulation from locomotion, where many tasks of interest can be specified with variations of the reward for a single \"walking\" task. We propose a general principle to design rewards for dexterous manipulation tasks: disentangle a full task into intermediate \u201ccontact goals\" and \"object goals\". We use a novel keypoint-based state representation to specify contact goals. Following our reward design techniques, a task as long-horizon and contact-rich as bimanual handover can be learned with RL tabula rasa."}, {"title": "Challenge in policy learning.", "content": "A well-defined reward function does not guarantee the successful learning of RL policies due to the sample complexity and reward sparsity of exploring in a high-dimensional space. The variety and complexity of contact patterns in dexterous manipulation with multi-fingered hands further exacerbate the problem. Although unsupervised methods [7, 30, 39] have been proposed to encourage exploration by favoring novel state visitations, they do not fundamentally reduce the difficulty of hard-exploration problems. We tackle this challenge by introducing two practical techniques: (1) initializing tasks with task-aware hand poses; (2) breaking down hard exploration problems into sub-tasks with much-reduced dimensionality, training expert policies on the sub-tasks, then distilling them into a generalist policy for the full task. We experimentally verify that these techniques improve sample efficiency of learning and study how different divide-and-conquer schemes vary in effectiveness."}, {"title": "Challenge in object perception.", "content": "Compared to other robotic tasks, object perception is particularly important for manipulation because the task is inevitably coupled with interaction with objects. Object perception is a long-standing challenge because the variety of objects is uncountable in shapes, sizes, masses, colors, textures, and many other properties. Research in applying sim-to-real RL to dexterous manipulation is bottlenecked by this dilemma: while object representations that are more expressive and information-dense can improve dexterity and capability of the learned policy, they also present a larger sim-to-real gap. To overcome this challenge, we propose to use a mixture of low-dimensional and high-dimensional object representations, with modality-specific data augmentation on the high-dimensional features to reduce the sim-to-real perceptual gap. We systematically study how this combination could help achieve a good balance between learning dexterous manipulation policy and reliably transferring the policy onto real robot hardware.\nThe strategies we outline above form a complete recipe of sim-to-real RL for vision-based dexterous manipulation. We show successful results of learning a collection of three dexterous manipulation tasks on humanoids and conduct systematic ablation studies."}, {"title": "II. BACKGROUND", "content": "The successes of deep RL across a wide range of appli-cations [1, 6, 14, 21, 24, 26, 48, 56] have sparked lots of excitement in recent years. However, works over the years have identified brittleness with this paradigm, most notably the sensitivity to hyperparameters [19] and questionable reproducibility [23] due to the high variance intrinsic to RL algorithms.\nAmong the open problems in RL, the most important and long-standing is exploration. In supervised learning, it is often assumed that data is given. In RL, however, agents need to collect their own data and update their policy based on the collected data. The problem of how data is collected is known as the exploration problem. Real-world robotics, with high-dimensional observations and dynamics and often sparse rewards, present a particularly challenging set of hard exploration problems for RL. While there have been works that algorithmically scale exploration to high-dimensional inputs by encouraging visitation to novel states [4, 7, 30, 38, 39, 50, 53],"}, {"title": "III. CHALLENGES AND APPROACHES", "content": "In Section I, we identify four areas of challenges in applying sim-to-real RL to dexterous manipulation and briefly describe our strategies to tackle the challenge in each area. Below, we describe our specific approaches in detail."}, {"title": "A. Real-to-Sim Modeling", "content": "Simulators offer unlimited trial-and-error chances to perform the exploration necessary for RL. However, whether policies learned in simulation can be reliably transferred to the real world heavily depends on the faithfulness of modeling both the robot itself and the environment. When applying sim-to-real RL to solve dexterous manipulation, this real-to-sim modeling problem is further exacerbated by the necessity to model objects, which have great variability and whose full physical properties cannot be easily quantified. Even when one assumes that the ground-truth physical parameters are known, quantitatively matching the simulation with the real world is hard: due to the limitations of physics engines, the same values for physical constants in simulation and the real world do not necessarily correspond to identical kinematic and dynamic relationships.\nWhile robot manufacturers are often able to provide proprietary model files for their robot hardwares, the models mostly serve a starting reference for robot real-to-sim effort rather than ground truth models that can be used without modifications. Empirical solutions to increase modeling accuracy range from hand-tuning the robot model constants and simulatable physical parameters [2] to reformulating specific kinematic structures (e.g., four-bar linkage) in the simulator of choice [44]. This is a laborious process as there is no \"ground truth\" pairing between the real world and the simulated world. We propose a practical technique to speed up this real-to-sim modeling process via an \"autotune\" module. The autotune module enables rapid calibration of simulator parameters to match real robot behavior by automatically searching the parameter space to identify optimal values for both simulator physics and robot model constants in under four minutes (or 2000 simulated steps in 10 Hz).\nThe module operates on two parameter types: simulator physics parameters affecting kinematics and dynamics, as well as robot model constants from the URDF file (including link inertia values, joint limits, and joint/link poses). The calibration process begins by initializing multiple simulated environments using randomly sampled parameter combinations from the parameter space, bootstrapped from the manufacturer's robot model file. It then executes N calibration sequences consisting of joint position targets on both the real robot hardware (single run) and all simulated environments in parallel. By comparing the tracking error between each simulated environment and the real robot when following the same joint targets, the module selects the parameter set that minimizes the mean squared error in tracking performance. This approach eliminates iterative manual tuning by requiring only one set of calibration runs on the real robot, automatically optimizing traditionally hard-to-tune URDF parameters, and supporting parallel evaluation of multiple parameter combinations. The method's generality allows it to tune any exposed simulator or robot model parameter that affects kinematic behavior.\nAs demonstrated in previous works [31, 41], modeling objects as primitive shapes like cylinders with randomized parameters is sufficient for sim-to-real transferrable dexterous manipulation policies to be learned. Our recipe adopts this approach and finds it effective."}, {"title": "B. Generalizable Reward Design", "content": "In the standard formulation of RL [51], the reward function is a crucial element within the paradigm because it is solely responsible for defining the agent's behavior. Nevertheless, the mainstream of RL research has been preoccupied with the development and analysis of learning algorithms, treating reward signals as given and not subject to change [13]. As tasks of interest become more general, designing reward mechanisms to elicit desired behaviors becomes more important and more difficult [12] \u2014 as is the case of applications to robotics. When it comes to dexterous manipulation with multi-fingered hands, reward design becomes even more difficult due to the variety of contact patterns and object geometries.\nFrom a wide variety of human manipulation activities [15], we observe a general pattern in dexterous manipulation: each motion sequence to execute a task can be defined as a combination of hand-object contact and object states. Building on this intuition, we propose a general reward design scheme for even long-horizon contact-rich manipulation tasks. For each task of interest, we first break it down into an interleaving sequence of contact states and object states. For example, the handover task can be broken down into the following steps: (1) one hand contacting the object; (2) the object being lifted to a position near the other hand; (3) the other hand contacting the object; (4) object being transferred to the final goal position. The reward can then be defined based on solely the \u201ccontact goals\" and \"object goals\u201d: each contact goal can be specified by penalizing the distance from fingers to desirable contact points or simply the object's center-of-mass position; each object goal can be specified by penalizing the distance from its current state (e.g., current xyz position) to its target state (e.g., target xyz position). To reduce the difficulty of specifying contact goals, we propose a novel keypoint-based technique as follows: for each simulated asset, we procedurally generate a set of \"contact stickers\" attaching to the surface of the object, where each sticker represents a potentially desirable contact point. The contact goal, in terms of reward, can then be specified as\n$r_{contact} = \\sum_{i=1}^n \\frac{1}{[1 + \\alpha d(X_L, F_L)]} + \\frac{1}{[1 + \\beta d(X_R, F_R)]}$,\nwhere $X_L \\in \\mathbb{R}^{n \\times 3}$ and $X_R \\in \\mathbb{R}^{m \\times 3}$ are the positions of contact markers specified for left and right hands, $F_L \\in \\mathbb{R}^{4 \\times 3}$ and $F_R \\in \\mathbb{R}^{4 \\times 3}$ are the position of left and right fingertips, $\\alpha$ and $\\beta$ are scaling hyperparameters, and $d$ is a distance function defined as\n$d(A, x) = min \\lVert A_i - x \\rVert_2$.\nWe show a visualization of contact markers in Figure 2B, and experimental results on their effectiveness in Section IV."}, {"title": "C. Sample Efficient Policy Learning", "content": "Due to the sample complexity and reward sparsity in exploring a high-dimensional space especially on a humanoid embodiment with multi-fingered hands policy learning can take a prohibitively long time, even with a well-defined reward function. We propose two techniques that more effectively improve the sample efficiency of policy learning: (1) initializing tasks with task-aware hand poses; (2) dividing a challenging task into easier sub-tasks, then distilling the sub-task specialists into a generalist policy.\nWe reduce the exploration challenge by collecting task-aware hand pose data from humans. This can be done by connecting any teleoperation system for bimanual multi-fingered hands to the simulator of choice. The collected states, including object poses and robot joint positions, are then randomly sampled as task initialization states in simulation. Distinct from prior works that require full demonstration trajectories [3], we find that teleoperators need not accomplish the task and only need to \"play around\" with the task goal in mind while environmental states are collected. The approach massively reduces the time needed for teleoperation since human operators do not need to spend time \"ramping up\" to collect high-quality data. In our experiments, each task requires less than 30 seconds for sufficient amount of hand pose data to be collected."}, {"title": "Divide-and-conquer distillation.", "content": "Previous methods to improve sample efficiency of policy learning mostly focus on exploring the state space more efficiently [7, 30, 39, 52]. However, these methods do not reduce the difficulty of the exploration problem fundamentally: the probability of receiving learning signals from exploring the \"right\" states remains the same. Following this observation, we reason that an easier way to overcome the exploration problem in sparse reward settings is to break down the explorable state space itself. For example, a multi-object manipulation task can be divided into multiple single-object manipulation tasks. After dividing a complex task into easier sub-tasks, we can train specialized policies for each sub-task and distill them into a generalist policy. Another benefit of this approach is that we can flexibly filter out trajectory data from the sub-task policies based on their optimality and only retain high-quality samples for training. This effectively brings RL closer to learning from demonstrations, where the sub-task policies act as teleoperators for task data collection in the simulation environment, and the generalist policy acts as a centralized model trained from curated data."}, {"title": "D. Vision-Based Sim-to-Real Transfer", "content": "Transferring a policy learned in simulation to the real world is challenging because of the sim-to-real gap. In the case of vision-based dexterous manipulation, the sim-to-real gap stems from both dynamics and visual perception both are challenging open research problems to solve. We outline two key techniques we employ to reduce the gap.\nObject perception is crucial for dexterous manipulation because the task is inevitably coupled with object interaction. Prior works that show successful sim-to-real transfer of manipulation policies have explored a wide range of object representations, including (in order of increasing dimensionality and complexity) 3D object position [31], 6D object pose [2], depth [35, 42], point cloud [33], and RGB images [17]. There is a delicate trade-off between using these different object representations: while higher-dimensional representations encode richer information about the object, the larger sim-to-real gap in those data modalities makes the learned policy harder to be transferred; on the other hand, it is harder to learn optimal policies with lower-dimensional object representations because of the limited amount of information. We, therefore, propose a combination of both types of object representations to balance the trade-offs: a low-dimensional 3D object position and a high-dimensional depth image. Importantly, the 3D object position is obtained from a third-view camera to ensure the object is also in camera view and its noisy position can be consistently tracked. The depth image complements with information on object geometry.\nWe apply a wide range of domain randomizations to ensure reliable sim-to-real transfer. We list the details in Appendix C."}, {"title": "IV. EXPERIMENTS", "content": "Our proposed approaches form a general recipe that allows for the practical application of RL to solve dexterous manipulation with humanoids. In this section, we show experimental results of task capabilities and ablation studies of each proposed technique. Videos can be found on project website."}, {"title": "A. Real-World and Simulator Setup", "content": "We use a Fourier GR1 humanoid robot with two arms and two multi-fingered hands. Each arm has 7 degrees of freedom (DoF). For most experiments, we use the Fourier hands, each of which has six actuated DoFs and five underactuated DoFs. To show cross-embodiment generalization, we include results on the Inspire hands, each with 6 actuated DoFs and six underactuated DoFs. The hardware has substantially different mass properties, surface frictions, finger and palm morphologies, and thumb actuations. We use the NVIDIA Isaac Gym simulator [36].\nAs outlined in Section III-D, we use a combination of dense and sparse object features for policy learning in both simulation and real-world transfer. In the real world, we set up an egocentric-view camera by attaching a RealSense D435 depth camera onto the head of a humanoid robot and a third-view camera by putting another RealSense D435 depth camera on a tripod in front of the robot (illustrated in Figure 1). In simulation, we similarly set up an egocentric-view camera and a third-view camera by calibrating the camera poses against the real camera poses. The dense object feature is obtained by directly reading depth observations from the egocentric-view camera.\nThe sparse feature is obtained by approximating the object's center-of-mass from the third-view camera, using a similar technique as in Lin et al. [31]. As illustrated in Figure 2, we utilize the Segment Anything Model 2 (SAM2) [46] to generate a segmentation mask for the object of interest at the first frame of each trajectory sequence and leverage the tracking capabilities of SAM2 to track the mask throughout all remaining frames. To approximate the 3D center-of-mass coordinates of the object, we calculate the center position of their masks in the image plane, then obtain noisy depth readings from a depth camera to recover a corresponding 3D position. The perception pipeline runs at 5 Hz to match the neural network policy's control frequency."}, {"title": "B. Task Definition", "content": "In this task, the robot needs to use one hand to grasp a tabletop object, lift it up, and move it to a goal position. At task initialization, a scripted visual module determines which hand is closer to the object and instructs the robot to use that hand. The test objects have varying geometric shapes, masses, volumes, surface frictions, colors, and textures; a visualization of all objects can be found in Figure 1. For each trial, we vary the initial position and orientation of objects, as well as the goal position.\nIn this task, the robot needs to lift a box that is too large to be grasped with a single hand. Box colors, sizes, and masses are varied. For each trial, we randomize the boxes' initial position and orientation about the vertical axis.\nIn this task, the robot needs to grasp a block object from one side of the table with one hand that is too far to reach for the other hand and hand the object over to the other hand. Objects include blocks of varying colors, dimensions, and masses. We vary the initial position and orientation of blocks in each trial."}, {"title": "C. Evaluation of Real-to-Sim Modeling", "content": "We apply the autotune module outline in Section III-A to find the optimal parameter set for robot modeling. To evaluate its effectiveness, we compare the sim-to-real transfer success rates of three sets of policy checkpoints. All policies are trained with identical task and RL settings, but each set of policies uses robot modeling parameters that achieve different MSE from autotune, ranging from lowest (i.e., smallest real-to-sim gap) to highest (i.e., highest real-to-sim gap). The quantitative results indicate that autotuned robot modeling improves sim-to-real transfer. Additionally, in our video, we show qualitative results of successful sim-to-real transfer of policies to the Inspire hands, demonstrating the generalizability of our autotune module.\nEmpirically, we find that modeling objects as primitive geometric shapes (cylinders, cubes, and spheres) strikes a good balance between training efficiency and sim-to-real transferability. In Figure 4 (left), we compare the training curves of policies with primitive shapes against those with complex shapes, and the former setting is more sample efficient. More importantly, policies trained with randomized primitive shapes can also generalize to a variety of unseen objects, as shown in our video."}, {"title": "D. Evaluation of Reward Design", "content": "With our proposed reward design principle, a wide range of long-horizon contact-rich tasks can be accomplished with pure reinforcement learning, as shown in Figure 3 and our video. The learned policies exhibit a high degree of dexterity and robustness against random force disturbances.\nIn Figure 5, we visualize different contact behaviors that emerged from different placements or contact markers, using the task as an example. We find that contact behaviors align closely with the contact positions specified, showing the effectiveness of using contact markers to specify contact goals."}, {"title": "E. Evaluation of Policy Learning", "content": "In Table II, we compare the percentage of successfully trained policies for each task with and without task-aware hand pose initialization. The empirical results show that having human priors upon initialization can greatly improve the exploration efficiency of hard RL tasks.\nWe evaluate our divide-and-conquer distillation approach through two ablation studies. First, we study the effect of divide-and-conquer granularity on training efficiency. Specifically, we experiment with dividing a multi-object task into sub-tasks that handle different numbers of objects. Starting from a total of 10 objects, we experiment with three task designs: (1) training with all objects in one policy (all); (2) training with three groups of similarly shaped objects in three policies (shape); (3) training with three groups of differently shaped objects in three policies (mix); (4) training with ten single-object policies (single). As shown in Figure 4, sample efficiency is highest for single, followed by shape, all, and mix. There is also a noticeable difference in the average success rates of each task, which could be explained as an indicator of task difficulty. Interestingly, while training with a reduced object set all reaches the same performance, training all objects in one policy shows a consistently lower performance. Second, we study the sim-to-real transfer success rate of each type of policy. Over 30 trials of each policy on an in-distribution object, we find that sim-to-real performance of the mix policy is the highest (90.0%), followed by shape (63.3%), single (40.0%), and all (23.3%). Based on the qualitative behavior of policies, we hypothesize that the low success rates of mix and single policies stem from overfitting to specific geometries, and that of all policy correlates with its worse performance during RL training. These results suggest that divide-and-conquer distillation helps achieve a good balance between policy training and sim-to-real transfer performance."}, {"title": "F. Evaluation of Vision-Based Sim-to-Real Transfer", "content": "We investigate the effect of using different object representations and show the sim-to-real transfer comparisons . These results suggest combining dense object representation (segmented depth image) and sparse object representation (3D object center-of-mass position) improves sim-to-real transfer. Notably, the gap between the success rate of the depth-and-position policy and that of the depth-only policy increases as knowledge of the full object geometry becomes more crucial to task success."}, {"title": "G. System Capabilities", "content": "We evaluate the overall capabilities of our system via task success rates of the best-performing task policy. For each task, we conduct 10 trials for each test object and report the average success rate across all objects. We report a 62.3% success rate for the task, 80% for the task, and 52.5% for the task. We test our policy's ability to generalize to out-of-distribution objects and report qualitative results of successful zero-shot generalization in our video. We also show the robustness against force perturbations of our learned policies for all tasks in Figure 6 and video. More details on the object set for each task are reported in Figure 1.\nThe learned RL policies can be flexibly chained with finite state machines, teleoperation, etc., to perform longer-horizon tasks while maintaining dexterity, robustness, and generalization. As an example, we present in our video a general pick-and-drop system that can be scripted by utilizing the policy."}, {"title": "V. LIMITATIONS", "content": "In this work, we investigate the key challenges in applying RL to robot manipulation and introduce practical and principled techniques to overcome the hurdles. Based on the techniques proposed, we build a sim-to-real RL pipeline that demonstrates a feasible path to solve robot manipulation, with evidence on generalizability, robustness, and dexterity.\nHowever, the capabilities achieved in this work are still far from the kind of \u201cgeneral-purpose\" manipulation that humans are capable of. Much work remains to be done to improve each individual component of this pipeline and unlock the full potential of sim-to-real RL. For example, the reward design could be improved by integrating even stronger human priors, such as task demonstrations collected from teleoperation.\nThere are also important open problems that our work does not address. For example, our work uses no novel technique to reduce the sim-to-real gap in dynamics other than applying naive domain randomization. We hypothesize that this could be a reason for the low success rate on task, which is the most dynamic among our collection of tasks. Lastly, we find ourselves heavily constrained by the lack of reliable hardware for dexterous manipulation. While we use multi-fingered robot hands, the dexterity of these hands is far from that of human hands in terms of the active degrees of freedom. We believe the dexterity of our learned policies is not limited by the approach, and we hope to extend our framework to robot hands with more sophisticated designs in the future."}, {"title": "VI. CONCLUSION", "content": "We present a comprehensive recipe for applying sim-to-real RL to vision-based dexterous manipulation on humanoids. By addressing key challenges in environment modeling, reward design, policy learning, and sim-to-real transfer, we show that RL can be a powerful tool for learning highly useful manipulation skills without the need for extensive human demonstrations. Our learned policies exhibit strong generalization to unseen objects, robustness against force disturbances, and the ability to perform long-horizon contact-rich tasks."}, {"title": "APPENDIX", "content": ""}, {"title": "A. Environment Modeling Details", "content": "Modeling underactuated joints. Since modeling underactuated joint structure is not directly supported, we approximate the relationship between each pair of actuated and underactuated joints by fitting a linear function $q_u = kq_a + b$, where $q_u$ is the underactuated joint angle and $q_a$ is the actuated joint angle. Note that parameters k,b are included as tunable parameters to search over using our autotune module detailed in Section III-A."}, {"title": "B. Reward Design Details", "content": "We design generalizable rewards based on the principle outlined in Section III-B and list task reward details below. Both grasp and lift tasks can be defined with the following goal states: (1) finger contact with the object; (2) the object being lifted up to a goal position. Our reward design can, therefore, follow by combining the contact goal reward and the object goal reward terms:\n$r(s_h, s_o) = r_{contact}(s_h, s_o) + r_{goal}(s_o)$,\nwhere $s_h$ includes fingertip positions, $s_o$ includes object center-of-mass position, and all contact marker positions (if any).\nSimilarly, the handover task can be defined with the following goal states: (1) one hand's finger contact with the object; (2) object being transferred to an intermediate goal position while still in contact with the first hand; (3) the second hand's finger contact with the object; (4) object being transferred to the final goal position. Due to the hand switching, we introduce a stage variable $\\alpha \\in {0,1}$ and design the reward as follows:\n$r(s_h, s_o) = (1 - \\alpha) \\cdot (r_{contact}(s_{h_A},s_{o_A})+r_{goal}(s_{o_n})) + \\alpha \\cdot (r_{contact}(s_{h_B}, s_{o_B})+r_{goal}(s_{o_n}))$,\nwhere $s_{h_A}, s_{h_B}$ denote fingertip positions of the engaged hand at each stage, $s_o$ denote object center-of-mass position and desirable contact marker positions (if any) at each stage. At completion of each stage, we also reward policy with a bonus whose scale increases as stage progresses."}, {"title": "C. Policy Training Details", "content": "To learn the specialist policies, the observation space includes object position and robot joint position at each time step, and the action space is robot joint angles. We use Proximal Policy Optimization [47] with asymmetric actor-critic as the RL algorithm. In addition to the policy inputs, we provide the following privilege state inputs to the asymmetric critic: arm joint velocities, hand joint velocities, all fingertip positions, object orientation, object velocity, object angular velocity, object mass randomization scale, object friction randomization scale, and object shape randomization scale. Both the actor and critic networks are 3-layer MLPs with units (512, 512, 512).\nPhysical randomization includes the randomization of object friction, mass, and scale. We also apply random forces to the object to simulate the physical effects that are not implemented by the simulator. Non-physical randomization models the noise in observation (e.g., joint position measurement and detected object positions) and action. A summary of our randomization attributes and parameters is shown in Table IV."}, {"title": "D. Distillation Details", "content": "To learn the generalist policy, we reduce the choices of observation inputs to the robot joint states and selective object states, including 3D object position and egocentric depth view, since privileged information is unavailable for sim-to-real transfer. To more efficiently utilize the trajectory data and improve training stability, for each sub-task specialist policy, we evaluate for 5000 steps over 100 environments, saving trajectories filtered by success at episode reset on the hard disk. We then treat the saved data as \"demonstrations\" and learn a generalist policy for each task with Diffusion Policies [11].\nThe proprioception and object position states are concatenated and passed through a three-layer network with ELU activation, hidden sizes of (512, 512,512), and an output feature size of 64. For depth observations, we use the ResNet-18 architecture [18] and replace all the BatchNorm [22] in the network with GroupNorm [59], following [11]. All the encoded features are then concatenated as the input to a diffusion model. We use the same noise schedule (square cosine schedule) and the same number of diffusion steps (100) for training as in [11]. The diffusion output from the model is the normalized 7 DoF absolute desired joint positions of each humanoid arm and the 6 DoF normalized (0 to 1) desired joint positions of each humanoid hand. We use the AdamW optimizer [25, 34] with a learning rate of 0.0001, weight decay of 0.00001, and a batch size of 128. Following [11], we maintain an exponential weighted average of the model weights and use it during evaluation/deployment."}]}