{"title": "NavTopo: Leveraging Topological Maps For\nAutonomous Navigation Of a Mobile Robot", "authors": ["Kirill Murayvev", "Konstantin Yakovlev"], "abstract": "Autonomous navigation of a mobile robot is a challenging\ntask which requires ability of mapping, localization, path planning and\npath following. Conventional mapping methods build a dense metric map\nlike an occupancy grid, which is affected by odometry error accumulation\nand consumes a lot of memory and computations in large environments.\nAnother approach to mapping is the usage of topological properties, e.g.\nadjacency of locations in the environment. Topological maps are less\nprone to odometry error accumulation and high resources consumption,\nand also enable fast path planning because of the graph sparsity. Based\non this idea, we proposed NavTopo\na full navigation pipeline based on\ntopological map and two-level path planning. The pipeline localizes in\nthe graph by matching neural network descriptors and 2D projections of\nthe input point clouds, which significantly reduces memory consumption\ncompared to metric and topological point cloud-based approaches. We\ntest our approach in a large indoor photo-relaistic simulated environment\nand compare it to a metric map-based approach based on popular metric\nmapping method RTAB-MAP. The experimental results show that our\ntopological approach significantly outperforms the metric one in terms\nof performance, keeping proper navigational efficiency.", "sections": [{"title": "Introduction", "content": "Autonomous navigation is a crucial property for a mobile robot operation. In\nmany cases, mobile robots solve tasks related to navigation in unknown or\nchaniging environment. It is a challenging task which is divided to map build-\ning, localization, path planning, and path following. A map of the environment is\nusually built as a 2D occupancy grid or a 3D voxel grid. Such metric environment\nrepresentation is convenient for computation and contains complete information\nabout obstacles. However, in large environments, consumption of memory and\ncomputational resources may be too high for online map maintaining. Also, plan-\nning path in large grids may take long time. One more drawback of metric maps\nis the accumulation of odometry error, which may lead to incorrect mapping,\nlike \"corridor bifurcation\" shown in Fig. 1.\nAnother approach to environment representation is the usage of topologi-\ncal structures like graph of locations. In such topological structures, vertices"}, {"title": "Related Work", "content": null}, {"title": "Metric Mapping", "content": "The problem of metric map building and Simultaneous Localization and Map-\nping (SLAM) has long history of study. Pioneering SLAM methods track robot's\nposition and surrounding objects using Extended Kalman Filter (EKF) [5] to\nestimate robot's trajectory from noised sensor data. More recent works extract\nfeatures from input images and track robot motion matching these features [6],\nor match input images directly using photometric error [7]. Methods like RTAB-\nMAP [4] or Cartographer [8] build dense 2D and 3D maps from input point\nclouds using probabilistic optimization and loop closure techniques. Such meth-\nods are widely used because of the grids built by them are convenient for path\nplanning. However, the computations and memory consumption of these meth-\nods is significant [9].\nIn last years, the progress in deep learning techniques lead to creation of\nneural network-based SLAM methods like [10], [11]. In method [11] neural net-\nwork is used for optical flow estimation in order to accurately estimate robot's\nposition. In work [10] SLAM is performed by a fully learning-based pipeline,"}, {"title": "Topological Mapping", "content": "The topological mapping is an actively developing research field, and it encom-\npasses various methods which differ in graph type and input data. For example,\nsome methods like [12], [13] build a topological map offline for fast path planning\nusing a pre-built metric map. Some other methods like [14], [15], build hybrid\nmulti-level metric-topological map. Such hybrid map provides complete and de-\ntailed information about the environment, however, these mapping methods are\nsusceptible to metric SLAM's shortcomings like high resources consumption and\nodometry error accumulation.\nIn recent years, a large number of learning-based topological mapping meth-\nods which do not rely on a metric map was emerged. However, most of them\n(like [16], [17]) are designed for solving specific task like image-goal navigation\nin simulated environments and were not tested on data from a real robot. Also,\nsuch methods usually rely on neural network-predicted features only, which can\ncause linking far locations in the environment and result in navigation failures."}, {"title": "Path Planning", "content": "One of the most common approaches to robot trajectory planning is to represent\nthe environment as a graph and find paths in this graph. In case of a metric map,\nthe vertices of the graph usually form a regular grid [19] of free space cells. In case\nof a topological map (e.g. graph of locations), the path is planned in it directly. In\ntopological graphs, a common graph path finding algorithms like Dijkstra [20] or\nA* [21] are widely used. For grid-like graphs, besides these common algorithms,\nany-angle path planning methods like Theta* [22] or D*-lite [23] are used. Also,\nin partially unknown environments, probabilistic approaches like RRT [24] or\nRRT* [25] are widely used to plan paths in uncertainty conditions.\nMany topological navigation approaches suppose two-level path planning,\nwith a global path planned in the topological graph, and a local path planned\nin order to reach the next vertex on the global path. For example, in method [1]\nglobal path planning by A* algorithm is used to reach frontiers of the map, and\nlocal path planning by an RRT-based approach is used to search fine path in a\nsliding window near the robot. In the method [2] a similar scheme is used - first,\nglobal path in the graph of rooms is planned to the room node where the goal\nis located. Next, a local path between nodes is searched using RRT algorithm.\nIn recent years, end-to-end learning-based approaches expanded the field\nof study related to robots navigation. For example, RL-based navigation ap-\nproaches like DD-PPO [26] are widely used for point-goal navigation, but mostly\nin simulated environments. In the methods [16] and [17] image-goal navigation\ntask is solving by and end-to-end RL-based approach with building of the graph\nof locations. In these methods, two-level approach is used: high level RL pol-\nicy chooses a location where the goal located in, and low-level policy outputs\nactions which are needed to reach the target location. Some methods like SkillFu-\nsion [27] involve combined approach to navigation and switch between classical\nand learning-based methods depending from conditions of the map."}, {"title": "System Overview", "content": "The proposed system maintains a graph of locations of the environment for\nefficient robot navigation. Its scheme is shown in Fig. 3. It is divided into several\nmodules: mapping and localization, global and local path planners, and local\npath follower. Graph maintaining module maintains and outputs the graph of"}, {"title": "Graph Structure", "content": "The proposed system builds and maintains a graph of locations $G = (V, E)$ for\nnavigation. Each location in the graph $v \\in V$ is assigned its occupancy grid\nfor local path planning, and a descriptor for neural network-based localization:\n$v = (grid_v, desc_v)$. Two locations are connected by an edge if they are adjacent\n(i.e. free areas of their occupancy grids are connected). Each edge is assigned\nthe locations it connects and a relative pose between the observation points of\nthe locations it connects: $e = (u, v, T_{uv})$. An example of the graph is shown in\nFig. 3.1."}, {"title": "Graph Maintaining", "content": "The graph maintaining module is based on the graph maintaining module of the\nPRISM-TopoMap method [3]. It builds and expands graph of locations and also"}, {"title": "Localization", "content": "For localization, we use two-stage pipeline: first, we find possible robot's posi-\ntions in the graph via place recognition technique, and next we filter the found\nlocations and find relative poses from robot to them using a scan matching tech-\nnieque. The scheme of the localization module is shown in Fig. 3.3. For place"}, {"title": "Path Planning", "content": "To plan paths to a goal, we use a two-level approach. At a high level, we plan\nglobal path in the graph of locations - from $v_{cur}$ to the location where the goal\nis located in. This path is planned using Dijkstra's algorithm [20], with edges\nweighted by lengths of these relative poses. At a low level, we plan the local path\nto reach the next point on the global path and avoid collisions with obstacles.\nA scheme of the path planning module is shown in Fig. 6. If the goal is located\nin $v_{cur}$, the next point is the goal position relative to $v_{cur}$'s observation point.\nOtherwise, it is the position from a relative pose written on the first edge of the\npath."}, {"title": "Path Following", "content": "To move the robot to the goal, we follow the local path using a simple and\nstraightforward algorithm described in the work [29]. The algorithm checks the\ndifference between the robot's orientation angle and the direction to the next\npoint of local path. If the angle is low, the robot is moved forward. Otherwise,\nthe robot is turned left or right to eliminate this angle difference."}, {"title": "Experiments", "content": "To prove the navigational and computational efficiency of our navigation system,\nwe performed some experiments in a large indoor photorealistic simulated scene.\nOn this scene, we compared the proposed system with the metric SLAM-based\napproach. For both metric and our topological solutions, we measured memory\nconsumption, path planning time and navigational efficiency."}, {"title": "Setup", "content": "We tested our approach and the metric approach on in Habitat simulator [30].\nThe scene for evaluation is created by ours from a long branched corridor with\ntotal length of 150 m. The map of the scene and observations are shown in Fig.\n7."}, {"title": "Conclusion and Future Work", "content": "In this work we proposed NavTopo a system for autonomous robot navigation\nbased on a graph of locations and two-level path planning. The proposed system\nmaintains the graph using 2D projections of point clouds and feature descriptors\npredicted from them. So, raw point clouds or 3D maps are not stored the graph,"}]}