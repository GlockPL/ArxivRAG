{"title": "Hotspot-Driven Peptide Design Via Multi-Fragment Autoregressive Extension", "authors": ["Jiahan Li", "Tong Chen", "Shitong Luo", "Chaoran Cheng", "Jiaqi Guan", "Ruihan Guo", "Sheng Wang", "Ge Liu", "Jian Peng", "Jianzhu Ma"], "abstract": "Peptides, short chains of amino acids, interact with target proteins, making them a unique class of protein-based therapeutics for treating human diseases. Recently, deep generative models have shown great promise in peptide generation. However, several challenges remain in designing effective peptide binders. First, not all residues contribute equally to peptide-target interactions. Second, the generated peptides must adopt valid geometries due to the constraints of peptide bonds. Third, realistic tasks for peptide drug development are still lacking. To address these challenges, we introduce PepHAR, a hot-spot-driven autoregressive generative model for designing peptides targeting specific proteins. Building on the observation that certain hot spot residues have higher interaction potentials, we first use an energy-based density model to fit and sample these key residues. Next, to ensure proper peptide geometry, we autoregressively extend peptide fragments by estimating dihedral angles between residue frames. Finally, we apply an optimization process to iteratively refine fragment assembly, ensuring correct peptide structures. By combining hot spot sampling with fragment-based extension, our approach enables de novo peptide design tailored to a target protein and allows the incorporation of key hot spot residues into peptide scaffolds. Extensive experiments, including peptide design and peptide scaffold generation, demonstrate the strong potential of PepHAR in computational peptide binder design.", "sections": [{"title": "1 INTRODUCTION", "content": "Peptides, typically composed of 3 to 20 amino acid residues, are short single-chain proteins that interact with target proteins. (Bodanszky, 1988). Peptides play essential roles in various biological processes, including cellular signaling and immune responses (Petsalaki & Russell, 2008), and are emerging as a promising class of therapeutic drugs for complex diseases such as diabetes, obesity, hepatitis, and cancer (Kaspar & Reichert, 2013). Currently, there are approximately 80 peptide drugs on the global market, 150 in clinical development, and 400 600 undergoing preclinical evaluation (Craik et al., 2013; Fosgerau & Hoffmann, 2015; Muttenthaler et al., 2021; Wang et al., 2022). Traditional peptide discovery methods rely on labor-intensive techniques like phage/yeast display for screening mutagenesis libraries (Boder & Wittrup, 1997; Wu et al., 2016), or energy-based computational tools to score candidate peptides (Raveh et al., 2011; Lee et al., 2018; Cao et al., 2022), both of which face limitations due to the immense combinatorial design space.\nRecently, deep generative models, particularly diffusion and flow-based methods, have shown substantial promise in de novo protein design (Huang et al., 2016; Luo et al., 2022; Watson et al., 2022; Yim et al., 2023a; Bose et al., 2023). Given the compact relationship between the structure and sequence of peptides and their target proteins (Grathwohl & W\u00fcthrich, 1976; Vanhee et al., 2011), a few methods have successfully designed peptides conditioned on target information (Xie et al., 2023; Li et al., 2024a; Lin et al., 2024). These approaches typically represent peptide residues as rigid frames in the SE(3) manifold, angles in a torus manifold, and types in a statistical manifold (Cheng et al., 2024; Davis et al., 2024). Encoder-decoder architectures, particularly flow-matching methods Lipman et al. (2022), are then used to generate all residues simultaneously."}, {"title": "2 RELATED WORK", "content": "Generative Models for Protein Design Generative models have shown significant promise in designing functional proteins (Yeh et al., 2023; Dauparas et al., 2023; Zhang et al., 2023c; Wang et al., 2021; Trippe et al., 2022; Yim et al., 2024). Some approaches focus on generating protein sequences using protein language models (Madani et al., 2020; Verkuil et al., 2022; Nijkamp et al., 2023) or through methods like directed evolution (Jain et al., 2022; Ren et al., 2022; Khan et al., 2022; Stanton et al., 2022). Others aim to design sequences based on backbone structures (Ingraham et al., 2019; Jing et al., 2020; Hsu et al., 2022; Li et al., 2022; Gao et al., 2022; Dauparas et al., 2022). For protein structures, which are crucial for determining protein function, diffusion-based (Luo et al., 2022; Watson et al., 2022; Yim et al., 2023b) and flow-based models (Yim et al., 2023a; Bose et al., 2023; Li et al., 2024a; Cheng et al., 2024) have been successfully applied to both unconditional (Campbell et al., 2024) and conditional protein design (Yim et al., 2024). However, these generative models typically treat all residues as equal, generating them simultaneously and overlooking the distinct roles of residues, such as those involved in catalytic sites (Giessel et al., 2022) or binding regions (Li et al., 2024a).\nComputational Peptide Design The earliest methods for peptide design rely on protein or peptide templates for design (Bhardwaj et al., 2016; Hosseinzadeh et al., 2021; Swanson et al., 2022). These approaches use heuristic rules to search for similar sequences or structures in the PDB database as seeds for peptide design. A more prevalent class of models focuses on optimizing hand-crafted or statistical energy functions for peptide design (Cao et al., 2022; Bryant & Elofsson, 2023). While effective, these methods are computationally expensive and tend to get stuck in local minima (Raveh et al., 2011; Alford et al., 2017). Recently, deep generative models, such as GANs (Xie et al., 2023), diffusion models (Xie12 et al.; Wang et al., 2024), and flow models (Li et al., 2024a; Lin et al., 2024), have been applied to design peptide structures and sequences, conditioned on target protein information, offering more flexibility and efficiency in the design process."}, {"title": "3 PRELIMINARY", "content": "Protein Composition A protein or peptide is composed of multiple amino acid residues, each characterized by its type and backbone structure, which includes both position and orientation (Jumper et al., 2021). For the i-th residue, denoted as $R_i = (c_i, x_i, O_i)$, its type $c_i \\in \\{1...20\\}$ refers to the class of its side-chain R group. The backbone position $x_i \\in \\mathbb{R}^3$ represents the coordinates of the central Ca atom, while the backbone orientation $O_i \\in SO(3)$ is defined by the spatial configuration of the heavy backbone atoms (N-Ca-C). In this way, a protein can be represented as a sequence of N residues: $[R_1,..., R_N]$.\nProblem Formation The goal of this work is to generate a peptide $D = [R_1,..., R_N]$, consisting of N residues, based on a target protein $T = [R_1, . . ., R_M]$ of length M. We also define fragments, where the k-th fragment is denoted as $F_{(k,i_k,l_k)} = [R_{i_k},..., R_{i_k+l_k-1}]$, a contiguous subset of residues. Fragments are sequentially connected within the protein, where $i_k$ indicates the N-terminal residue's index of the fragment in the original peptide, and $l_k$ represents the fragment's length. Multiple fragments can be assembled into a complete protein based on their residue indices.\nDirectional Relations The sequential ordering from the N-terminal to the C-terminal residue, along with the covalent bonds between adjacent residues, is fundamental in our approach. As illustrated in Fig 1, residues are linked via covalent peptide bonds (CO-NH), with each residue $R_i$ connecting to its neighboring residues $R_{i-1}$ and $R_{i+1}$. These peptide bonds are partially double bonds, limiting their rotational freedom and resulting in a planar configuration for atoms between adjacent residues (Ca, C, O, and H atoms). The backbone structure of a protein can thus be described using dihedral angles, which define the spatial relations between these planes in 3D space. Each residue has three associated dihedrals: $\\psi_i$, $\\Phi_i$, and $\\omega_i$. The first two angles determine the geometric relationship between adjacent residues, while the third controls the position of the O atom. Given a protein's backbone structure, we can calculate the dihedral angles for each residue. Conversely, the backbone structure of neighboring residues can also be derived from the dihedral angles, which serve as the building blocks in our model. Specifically, given the backbone position $x_i$ and orientation $O_i$, we can approximate the backbone structures of neighboring residues $R_{i-1}$ and $R_{i+1}$ using coordinate"}, {"title": "4 METHODS", "content": "To tackle the challenges in peptide design, we propose a three-stage approach to generate peptides D based on their target protein T. Our method involves generating hot-spot residues, extending fragments, and correcting peptide structures. As shown in Figure 2 and Algorithm 1, the first stage, the Founding Stage, independently generates a small number k of hot-spot residues $R_{i_1},..., R_{i_k}$ from the learned residue distribution $P(R|T)$. In the second stage, the Extension Stage, these hot-spot residues are used as starting points to progressively extend k fragments $F_1,..., F_k$ by adding new residues to the Left or Right in an autoregressive manner, until the total peptide reaches the desired length L. Finally, since each fragment is extended independently, the third stage, the Correction Stage, adjusts the sequences and structures of the fragments, refining them based on the gradients of the objective function to ensure valid geometries and meaningful peptide sequences.\n4.1 FOUNDING STAGE\nThe founding stage first generates k hot-spot residues based on the target protein T. By introducing the residue distribution $P(R | T)$, hot-spot residues represent those that have higher probabilities (i.e., lower energies) of appearing near the binding pocket compared to other backbone structures and residue types. The generation of hot-spot residues focuses on finding regions with high prob-abilities, where residues are more likely to interact directly with the target. Conversely, regions with low probabilities (i.e., high energies) will have fewer peptide residues. For example, peptide residues should neither occur too far from nor too close to the pocket (Cao et al., 2022; Li et al., 2024a), as such regions may have near-zero probabilities (high energies) of residue occurrence. We parameterize $P(R | T)$ using an energy-based model, which is a conditional joint distribution of backbone position \u00e6, orientation O, and residue type c:\n$P_{\\theta} (c, x, O | T) = \\frac{1}{Z} \\exp (g_{\\theta,c}(x, O | T)).$  (3)\nhere $g_{\\theta}$ is a scoring function parameterized by an equivariant network, which quantifies the score of residue type c occuring at a given backbone structure with position \u00e6 and orientation O In other words, $g_{\\theta,}$ is the unnormalized probability of type c. And Z is the normalizing constant associated with sequence and structure information, which we do not explicitly estimate."}, {"title": "4.2 EXTENSION STAGE", "content": "The extension stage expands fragments into longer sequences, starting from the sampled hot-spot residues. At each extension step, we adds a new residue to either the left or right of fragment F. Based on the relationship between adjacent residues (Eq.1,2), the backbone structure of the new residue is inferred from its dihedral angles and the structure of the adjacent residue, which is either the N-terminal or C-terminal residue of the fragment. Specifically, when connecting a new residue to residue $R_{i_j}$ in the j th fragment $F_j$, we model the dihedral angle distribution $P(\\psi, \\phi | d, R_{i_j}, E)$, where $d \\in \\{L, R\\}$ indicates the extension direction, and E represents the surrounding residues, including target T and other residues in the currently generated fragments.\n$P(\\psi, \\phi | d, R_{i_j}, E) = \\begin{cases}  P(\\psi_{i_j-1}, \\Phi_{i_j}), & d = L,\\\\  = P(\\psi_{i_j}, \\Phi_{i_j+1}), & d = R.\\end{cases}$ (9)\nSince multiple angles are involved, the dihedral angle distribution is modeled as a product of pa-rameterized von Mises distributions (Lennox et al., 2009), which use cosine distance instead of L2 distance to measure the difference between angles, behaving like circular normal distributions. For example, when d = L, we have:\n$P(\\Psi_{i_j-1}, \\Phi_{i_j}) =f_{vM}(\\psi_{i_j}; \\mu_{\\psi_{i_j-1}}, \\kappa_{\\psi_{i_j-1}})f_{vM}(\\Phi_{i_j}; \\mu_{\\phi_{i_j}}, \\kappa_{\\phi_{i_j}}),$  (10)\n$f_{vM} (\\Psi_{i_j-1}; \\mu_{\\psi_{i_j-1}}, \\kappa_{\\psi_{i_j-1}}) = \\frac{1}{2\\pi I_o(\\kappa_{\\psi_{i_j-1}})} exp (\\kappa_{\\psi_{i_j-1}} . COS (\\mu_{\\psi_{i_j-1}} - \\Psi_{i_j-1})),$ (11)\n$f_{vM}(\\Phi_{i_j};\\mu_{\\phi_{i_j}}, \\kappa_{\\phi_{i_j}}) \\frac{1}{2\\pi I_o(\\kappa_{\\phi_{i_j}})} exp (\\kappa_{\\phi_{i_j}} \\cdot Cos(\\mu_{\\phi_{i_j}} - \\Phi_{i_j})).$  (12)\nHere, $I_o()$ denotes the modified Bessel function of the first kind of order 0. The four distribution parameters are predicted by a neural network $h_\\theta$, referred to as the prediction network. Similarly, for d = R, the network predicts another set of four parameters:\n$h_{\\theta}(d, R_{i_j}, E) = \\begin{cases}  (\\mu_{\\psi_{i_j-1}}, \\kappa_{\\psi_{i_j-1}}, \\mu_{\\phi_{i_j}}, \\kappa_{\\phi_{i_j}}), & d = L,\\\\  (\\mu_{\\psi_{i_j}}, \\kappa_{\\psi_{i_j}}, \\mu_{\\phi_{i_j+1}}, \\kappa_{\\phi_{i_j+1}}), & d = R.\\end{cases}$ (13)\nNetwork Implementation The prediction network $h_\\theta$ uses the same IPA backbone to extract fea-tures. However, to avoid data leakage during training, since the neighboring backbone structures are known and dihedral angles can be derived analytically, we employ directional masks in the Attention module. For instance, if the direction is Left, residues can only attend to their neighbors on the right during attention updates, and vice versa for Right.\n$CMLE = -E [log P(\\psi, \\phi | d, R_{i_j}, E)] .$ (14)\nTraining We optimize the network parameters using Maximum Likelihood Estimation (MLE) over directions $d \\sim \\{L, R\\}$ and peptides in the peptide-target complex dataset. The MLE objective is given by:\nSampling During the extension stage, we generate k fragments corresponding to k hot-spot residues from the founding stage. The extension process is iterative, where fragments are autoregressively extended until the total peptide length (the sum of fragment lengths) reaches a predefined value (e.g., the length of the native peptide). Consider a one-step extension of fragment F in direction d. The starting residue $R_{i_j}$ depends on the direction: d = L implies adding a residue to the left of the fragment, making $R_{i_j}$ the N-terminal residue (first residue); d = R implies adding to the right, making $R_{i_j}$ the C-terminal residue (last residue). The other residues in the fragment and target form the environment E. We then sample the dihedral angles for the new residue in the chosen direction from the predicted distribution, using $h_\\theta$. For example, when d = L:\n$\\Psi_{i_j-1} \\sim f_{VM}(\\Psi_{i_j -1}; h_{\\theta}(d = L, R_{i_j}, E)),$  (15)\n$\\Phi_{i_j} \\sim f_{VM}(\\Phi_{i_j}; h_{\\theta}(d = R, R_{i_j}, E)).$ (16)"}, {"title": "4.3 CORRECTION STAGE", "content": "Although we autoregressively extended each fragment, the resulting fragments may not form a valid peptide with accurate geometry. For example, some fragments may not maintain proper distances between each other, leading to broken peptide bonds, while others may have incorrect dihedrals or residue types in relation to the whole peptide and the target protein. Some fragments may also exhibit atom clashes within the target protein. Inspired by traditional methods using hand-crafted energy functions (Alford et al., 2017), we introduce a correction stage as a post-processing step to refine the generated peptides. Rather than relying on empirical functions, we use the learned, network-parameterized distributions from the first two stages to regularize the peptides.\nFor a generated peptide $D = [(c_1, x_1, O_1), ..., (c_N, x_N, O_N)]$, the dihedrals of each residue are derived based on the backbone structures of adjacent residues. To ensure self-consistency between dihedrals and backbone structures, we use the dihedrals to estimate new backbone structures and compare them with the original ones. The distance between these backbone structures reflects the validity of the generated peptide with respect to peptide bond properties and planarity. We define the distance between two residues' backbone structures separately for position and orientation, and derive the backbone objective considering both directions:\n$\\d((x_i, O_i), (x_j, O_j)) = ||x_i - x_j||^2 + ||log(O_i) - log(O_j)||^2,$ (19)\n$\\sum_{i=2}^N T_{bb} \\sum_{i=1}^{N-1} \\sigma(Left(x_i, O_i, \\psi_{i-1}, \\Phi_i) - (x_{i-1}, O_{i-1})) - \\sum_{i=1}^{N-1} \\sigma(Right(x_i, O_i, \\psi_i, \\Phi_{i+1}) - (x_{i+1}, O_{i+1})).$ (20)\nAdditionally, the dihedral angles must conform to the learned distribution $P(\\psi, \\phi)$ to ensure correct geometric relationships between neighboring residues. This leads to the dihedral objective, which is similar to Eq. 14. However, in Eq. 14, we optimize the network parameters to fit the angle distribution, whereas here, we keep the learned networks fixed and update the dihedrals instead:\n$\\T_{ang} = \\sum_{i=2}^N logP (\\Wi\u22121, \u03a6i) - \\sum_{i=1}^{N-1} logP(Wi, \u03a6i+1).$ (21)\nThe final optimization objective is a weighted sum of the backbone and dihedral objectives. We iteratively update the peptide's backbone structures by taking gradients, similar to the founding stage, but here we optimize the entire peptide at each timestep. The residue types are predicted by the density model $g_\\theta$ at the end of each update step. Unlike the founding stage, where we started from random structures, the correction stage begins with the complete peptide.\n$\\Icorr = \\AbbTbb + \\dang Tang,$\n$(x^{t+1}, O^{t+1}) \\leftarrow update(x^t, O^t, \\nabla_{x_i}J,\\nabla_{O_i}I,),$\n$c^{t+1} \\sim softmax g_\\theta(x^t, O^t | E).$ (22)\n(23)\n(24)"}, {"title": "5 EXPERIMENTS", "content": "Overview We evaluate PepHAR and several baseline methods on two main tasks: (1) Peptide Binder Design and (2) Peptide Scaffold Generation. In Peptide Design, we co-generate both the structure and sequence of peptides based on their binding pockets within the target protein. However, in real-world drug discovery, prior knowledge-such as key interaction residues at the binding interface or"}, {"title": "5.1 PEPTIDE BINDER DESIGN", "content": "In Peptide Binder Design, we co-generate peptide sequences and structures conditioned on the binding pockets of their target proteins. The models are provided with both the sequence and structure of the target protein pockets and tasked with generating bound-state peptides."}, {"title": "5.2 PEPTIDE SCAFFOLD GENERATION", "content": "Compared to designing peptides from scratch, a more practical approach involves leveraging prior knowledge, such as key interaction residues. We introduce this as the task of scaffold generation, where certain hot spot residues in the peptide are fixed, and the model must generate a complete peptide by connecting these residues. In this context, the generated peptide should incorporate the hot spot residues in the correct positions, effectively scaffolding them. Hot spot residues are selected based on their higher potential for interacting with the target protein. To identify these, we first calculate the energy of each residue using an energy function (Alford et al., 2017), then manually select residues that are both energetically favorable and sparsely distributed along the peptide sequence. These selected residues are fixed as the condition for scaffold generation."}, {"title": "5.3 ANALYSIS", "content": "PepHAR produces novel and diverse scaffolds. Figure 5 presents two examples of scaffolded pep-tides alongside native peptides and given residues. The generated scaffolds exhibit similar structures to the native ones, while displaying variations in geometry and orientation at the midpoints and ends of the peptides, indicating flexibility in the scaffolding regions. Furthermore, the generated scaffolds often have lower total energy than the native peptides, suggesting enhanced stability of the complex and improved interaction potential.\nEffect of Hot Spots Comparing Tables 1 and 2, we observe that introducing hot spots as prior knowledge significantly boosts PepHAR's performance, while providing little benefit to RFDiffu-sion and PepFlow. This highlights PepHAR's versatility across different design tasks. We also investigate the effect of varying the number of hot spots, denoted as K = 1,2,3. As shown in Tables and Figure 3, increasing the number of hot spots improves geometries and energies, regard-less of whether the hotspots are estimated by density models or provided as ground truth; however, it negatively impacts novelty and diversity. This illustrates a trade-off between designing low-diversity but high-quality peptides (in comparison to the native) and high-diversity but varied peptides (Luo et al., 2022; Li et al., 2024a).\nAblation Study Table 3 presents our ablation study, which assesses the effectiveness of different components in PepHAR. \"PepHAR w/o Hot Spot\" refers to the model where hot spots sampled from the density model are replaced with randomly positioned and typed residues. \"PepHAR w/o Von Mises\" indicates the use of direct angle predictions instead of modeling angle distributions. We also remove the correction stage in \"PepHAR w/o Correction.\" Our findings reveal that generated hot spots are crucial for Valid, RMSD, SSR, and BSR metrics, underscoring their importance for achieving valid geometries and interactions. Modeling angle distributions also contributes positively by accounting for the flexibility of dihedral angles. Lastly, the final correction stage plays a vital role in enhancing fragment assembly, leading to peptides with higher affinity and stability, which are essential for effective protein binding."}, {"title": "6 CONCLUSION", "content": "In this work, we presented PepHAR, a hot-spot based autoregressive generative model designed for efficient and precise peptide design targeting specific proteins. By addressing key challenges in peptide design\u2014such as the unequal contribution of residues, the geometric constraints imposed by peptide bonds, and the need for practical benchmarking scenarios\u2014PepHAR provides a compre-hensive approach for generating peptides from scratch or assembling peptides around key hot spot residues. Our method leverages energy-based hot spot sampling, autoregressive fragment extension through dihedral angles, and an optimization process to ensure valid peptide assembly. Through extensive experiments on both peptide generation and scaffold-based design, we demonstrated the effectiveness of PepHAR in computational peptide design, highlighting its potential for advancing drug discovery and therapeutic development."}, {"title": "A HOT SPOT RESIDUES", "content": "In the context of protein interactions, hot spots refer to specific amino acid residues within a protein-protein interface that significantly contribute to the binding affinity and stability of the complex (Bogan & Thorn, 1998; Moreira et al., 2007; Keskin et al., 2005; Guo et al.). These residues are often characterized by their energetic contributions, with a few critical interactions having a dispro-portionate effect on the overall binding energy. These regions typically have a higher likelihood of binding events and are characterized by favorable structural and energetic features. Identifying and understanding these hot spots is crucial for the design of effective inhibitors or modulators that selectively target protein-protein interactions (PPIs). Several classic examples illustrate the concept of protein interaction hot spots:\n\u2022 p53 and MDM2: The interaction between the tumor suppressor protein p53 and its negative regulator MDM2 is a well-studied example. Key residues in p53, such as Leu-22, Trp-23, and Phe-19, have been identified as hot spots for binding to MDM2. Disruption of this interaction is a promising strategy for cancer therapy (Vassilev, 2004).\n\u2022 Antibody-Antigen Interactions: The binding of antibodies to their specific antigens often involves hot spots that are essential for the specificity and affinity of the interaction. For example, the interaction between the antibody 1G12 and the HIV-1 envelope glycoprotein gp120 features specific residues on both molecules that contribute significantly to binding (Zhou et al., 2007).\n\u2022 Receptor-Peptide Interactions: The interaction between the CD4 receptor and the HIV-1 gp120 envelope protein is another notable example. Specific residues on CD4, such as Asp368 and Tyr371, serve as hot spots that facilitate binding, leading to viral entry into host cells (Sattentau & Moore, 1993).\n\u2022 Cytokine-Receptor Binding: The interaction between cytokines and their receptors is crit-ical for immune signaling. For instance, the binding of interleukin-6 (IL-6) to its receptor IL-6R involves hot spot residues that are crucial for signal transduction and biological ac-tivity (Rose-John et al., 2007).\nIn addition to hot-spot residues, which directly mediate protein-protein interactions, the remaining residues in the interface are referred to as scaffold residues. These scaffold residues play a crucial role in providing structural support to maintain the stability and conformation of the interface. While scaffold residues do not typically contribute significantly to the binding free energy, they ensure that the hot spots are properly positioned to interact with their binding partners. This structural framework is essential for maintaining the overall architecture of the protein complex and facilitating specific interactions at the hot-spot regions. For example, scaffold residues often help to shield hot spots from solvent exposure, thereby preserving their high binding affinities.\nIn our context, we focus on the hot-spot residues on the peptides that are crucial for key interactions with their target, as they are thought to be structurally conserved. While there are also hot spots on the target proteins, we do not model them here. Some works, however, focus on designing binders that specifically target these hot-spot residues on the proteins, treating them as critical interaction points (Watson et al., 2022; Zambaldi et al., 2024).\nIn our peptide design task, since we aim to design peptides from scratch, we lack prior knowledge about the ground-truth hot-spot residues, which are typically defined by energy functions and con-served interactions. Instead, we employ a density model to identify statistically favorable residues as hot spots. Essentially, our energy function is represented by a neural network. For the scaffold generation task, we first use the Rosetta energy function (Raveh et al., 2011; Alford et al., 2017) to compute the factorized binding energies of each peptide residue at the binding interface. We then manually select key residues with lower binding energy contributions, ensuring they are uniformly distributed along the peptide. This approach is important because, in scaffold generation, we aim to link these hot spots with a feasible and evenly distributed scaffold structure, ensuring the stability and functionality of each fragment."}, {"title": "BADJACENT RESIDUE RECONSTRUCTION", "content": "B.1 PEPTIDE BOND AND PLANAR\nPeptide bonds are the key linkages between amino acids in proteins, formed through a condensation reaction between the carboxyl group of one amino acid and the amino group of another. This bond is an amide bond, specifically between the carbonyl carbon (C=O) of one amino acid and the nitrogen (N-H) of another. The nature of the peptide bond plays a crucial role in determining the structure and stability of peptides and proteins.\nOne significant characteristic of the peptide bond is its partial double bond nature. Although it's formally a single bond, resonance between the lone pair of electrons on the nitrogen and the car-bonyl group gives the bond partial double-bond character. This resonance limits rotation around the peptide bond, which leads to a rigid and planar structure between the alpha carbon atoms of the amino acids involved in the bond. As a result, the peptide bond creates a flat, coplanar arrangement of the six atoms involved: the nitrogen, hydrogen, carbon, oxygen, and the two alpha carbons (one from each amino acid).\nThis planarity is crucial because it helps constrain the protein's overall folding pattern. The rigid planes of successive peptide bonds are connected by flexible single bonds at the alpha carbons, allowing the polypeptide chain to fold into its specific secondary structures like alpha helices and beta sheets. The restricted rotation around the peptide bond imposes dihedral angles, \u03c6 and \u03c8, which define the conformation of the polypeptide backbone and are critical in shaping the overall three-dimensional structure of proteins.\nIn summary, the partial double-bond character of the peptide bond is a key factor in maintaining the planarity and rigidity of the peptide backbone, which in turn plays a fundamental role in determining the folding and function of proteins.\nB.2 DIHEDRAL ANGLES\nIn proteins, the dihedral angles- and -define the conformation of the protein backbone by describing the rotation around specific bonds in the peptide chain. These angles are crucial for understanding the three-dimensional structure of a protein. Below is a detailed explanation of how these angles are calculated:\nGeneral Formula for Dihedral Angle Calculation To calculate a dihedral angle between four consecutive atoms (A, B, C, D), the steps are:\n1. Compute the bond vectors:\nAB = B - A, BC=C-B,CD=D-C\n2. Calculate the normal vectors of the two planes formed by the atoms:\n\u0e17\u0e35\u2081 = AB \u00d7 BC, \u0e17\u0e352 = BC \u00d7 CD\n3. Use the dot product to find the angle between the two planes:\nangle = arctan 2$\\frac{(BC. (\u0e17\u0e35\u0e481 \u00d7 \u0e17\u0e35\u0e482),}{ \u0e17\u0e35\u0e481 \u0e17\u0e35\u0e482)}$ (25)\nThis general method can be applied to calculate & and 4 dihedral angles across a protein's backbone.\nPhi (4) Angle The \u2081 angle is the dihedral angle around the bond between the nitrogen (N) and alpha carbon (Ca) of residue i. It is defined by the following four atoms:\n\u2022 Ci-1: Carbonyl carbon of the previous residue\n\u2022 Ni: Amide nitrogen of the current residue\n\u2022 Ca,i: Alpha carbon of the current residue\n\u2022 Ci: Carbonyl carbon of the current residue"}, {"title": "CADJACENT STRUCTURE RECONSTRUCTION", "content": "Reconstructing the backbone structures of adjacent residues Ri\u22121 and Ri+1 involves two main steps. First, we use dihedral angles to rotate the standard residue coordinates in the local frame. Then, we transform the local frame coordinates back to the global frame based on the position and orientation of the given residue. As an example, let's consider the Right operation, where we use the coordinates of Ri and the associated dihedral angles Vi and $i+1 to compute the structure of Ri+1.\nC.1 CALCULATING X\u2081 AND O\nTo convert local coordinates into global coordinates, we first need to calculate the translation vector xi and the orientation matrix O\u00bf for residue Ri."}, {"title": "C.2 LOCAL COORDINATE RECONSTRUCTION", "content": "Given a reference peptide structure, we apply dihedral angle transformations to compute the new coordinates based on the angles Vi and $i+1.\nRotation Matrix Definition The rotation matrix for an arbitrary axis d = (dx,dy, dz) and angle @ is given by the Rodrigues' rotation formula:\nR(d, 0) = I + sin(0)K + (1 \u2212 cos(0))K2 (38)\nwhere K is the skew-symmetric matrix of d:\nK = $\\begin{bmatrix}\n    0 & -dz & dy \\\\\n    dz & 0 & -dx \\\\\n    -dy & dx & 0\n\\end{bmatrix}$ (39)"}, {"title": "D.1 PROBABILITY DENSITY FUNCTION (PDF)", "content": "The probability density function (PDF) of the von Mises distribution is given by:\nf(0\u03bc", "\u03bc))$\nwhere": "n\u2022 \u03b8\u2208 [0", "as": "n\u0399\u03bf(\u03ba) = $\\frac{1"}, {"\u03bc": "n\u2022 When K 0, the von"}]}