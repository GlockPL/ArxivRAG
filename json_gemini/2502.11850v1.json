{"title": "Steering the LoCoMotif: Using Domain Knowledge in Time Series Motif Discovery", "authors": ["Aras Yurtman", "Daan Van Wesenbeeck", "Wannes Meert", "Hendrik Blockeel"], "abstract": "Time Series Motif Discovery (TSMD) identifies repeating patterns in time series\ndata, but its unsupervised nature might result in motifs that are not interesting to\nthe user. To address this, we propose a framework that allows the user to impose\nconstraints on the motifs to be discovered, where constraints can easily be defined\naccording to the properties of the desired motifs in the application domain. We\nalso propose an efficient implementation of the framework, the LoCoMotif-DoK\nalgorithm. We demonstrate that LoCoMotif-DoK can effectively leverage domain\nknowledge in real and synthetic data, outperforming other TSMD techniques\nwhich only support a limited form of domain knowledge.", "sections": [{"title": "1 Introduction", "content": "Time series data often contain repeating patterns, some of which might be interesting\nbecause they reveal important aspects of the underlying process. Such patterns can\nbe manually extracted by experts, but this is a time-consuming and costly approach.\nAn alternative is to use Time Series Motif Discovery (TSMD), which automati-\ncally identifies (approximately) repeating patterns in a time series in an unsupervised\nmanner. In the context of TSMD, a time segment that contains a single occurrence of\na pattern is called a motif, and the set of all occurrences of the same pattern is called\na motif set."}, {"title": "2 Notation", "content": "A time series x of length n is a sequence of n samples (i.e., measurements):\n$x = [x_1,...,x_n]$ where $x_i \\in R$ for univariate time series and $x_i \\in R^D$ for D-dimensional\nmultivariate time series for $i = 1, ..., n$.\nA (time) segment $\u03b2 = [b : e] = [b, b + 1, . . ., e]$ is an interval of time indices with\nlength $|B| = e-b+1$ for $1 < b < e < n$. The subsequence of x that corresponds to $\u1e9e$ is\n$x_\u03b2 = [x_b, x_{b+1},...,x_e]$. To check whether a segment $\u1e9e$ overlaps with another segment"}, {"title": "3 Proposed Framework for Motif Discovery with\nDomain Knowledge", "content": "We introduce a TSMD framework that allows the user to specify domain knowledge as\nconstraints on the motif sets to be discovered. By only finding motif sets that comply\nto the specified constraints, we are more likely to discover the desired patterns. We\nformulate this task as a constrained optimization problem, which is explained next."}, {"title": "3.1 Constrained Optimization Problem", "content": "The constrained optimization problem has the decision variables $M_1,..., M_\u03ba$ that\nrepresent the motif sets to be discovered. Constraints are defined separately\nfor every motif set $M_i$ and for every pair of distinct motif sets $(M_i, M_j)$ where\n$i, j \\in [1 : \u03ba]$ with $i \u2260 j$.\nConstraints can be of two types: hard constraints (requirements) and soft con-\nstraints (preferences). Hard constraints must be satisfied by the discovered motif sets,\nand are represented by predicates that evaluate to True when satisfied and False oth-\nerwise.\nTo discover the best motif sets, we consider a nonnegative quality measure $(M)$\nthat evaluates a motif set Min an unsupervised manner, e.g., based on the sim-\nilarities between motifs as existing TSMD techniques do.\nThese concepts lead us to the constrained optimization problem\n$\\max\\limits_{M_1, M_2,..., M_\u03ba} \\sum\\limits_{i=1}^\u03ba D_i(M_i) \u00b7 \u03c6(M_i)$ \ns.t. $H^{mset}(M_i) \\forall i \\in [1: \u03ba]$ \n$H^{msets}(M_i, M_j)  \\forall i, j \\in [1: \u03ba], i \u2260 j$"}, {"title": "3.2 Special Cases of Constraints", "content": "While all the constraints in the optimization problem are defined on (pairs of) motif\nsets, we consider certain special cases of hard constraints where constraints are defined\non (pairs of) motifs. These special cases are easier to define in certain scenarios and\ncan be converted to soft constraints.\nWe consider two special cases of a motif set constraint $H^{mset}(M)$, as shown in\nthe dashed red rectangles in Figure 2: The first one requires all motifs $\u03b2$ in the motif\nset to satisfy a predicate $H^{mot}(\u03b2)$. The second requires all pairs of distinct motifs"}, {"title": "3.3 Catalogue of Constraints", "content": "The user can represent domain knowledge by defining any function in the form of\n$H^{mset}, H^{mot}, H^{mots-same}, H^{mots-diff}$, or D. However, for convenience, we provide a cat-\nalogue of readily-implemented constraints that are leveraged in existing\nTSMD techniques or in the remainder of this paper. It is important to note that\ndesirability functions (D) can be defined differently from what we provide.\nTypes 1-4 of domain knowledge restrict two characteristics of a motif set: cardinal-\nity and time coverage. The corresponding hard constraints set lower- or upper-bounds\non these characteristics. In the soft implementation, desirability is set to 1 when the\ncharacteristic is within the bounds, and is gradually decreased beyond the bounds. The\ndecrease is linear beyond the lower bound (where it reaches 0 when the characteristic\nbecomes 0) and exponential beyond the upper bound with a decay constant $\u03c1\u2208 (0,1)$\nprovided by the user.\nTypes 5-8 of domain knowledge impose constraints on individual motifs accord-\ning to their length, standard deviation of the measurements in them, and whether\ntheir beginning and end time points are allowed or not (determined by the masks).\nTheir hard implementations simply require defining $H^{mot}$ according to these proper-\nties. Their soft implementations, on the other hand, deserve some explanation: For\ntypes 5-6, we set a desirability $r(\u03b2)$ for every motif $\u03b2$ in the motif set (similarly to\nthe desirability in types 1-4), and multiply these desirabilities to obtain the overall\ndesirability D of the motif set. For types 7-8, we rely on user-provided soft masks that\nrepresent the preference (between 0 and 1) for a motif starting or ending at every time\nindex. We then compute the desirability of a motif set by multiplying the preferences\nfor all motifs."}, {"title": "4 Implementation of the Proposed Framework:\nLoCoMotif-DoK", "content": "As an implementation of the proposed framework, we present the LoCoMotif-DoK\nalgorithm. We first provide an overview of LoCoMotif-DoK and then explain individual\nmechanisms of it."}, {"title": "4.1 Overview and Motivation", "content": "LoCoMotif-DoK is a TSMD technique that discovers motif sets that satisfy hard con-\nstraints by taking into account soft constraints. LoCoMotif-DoK performs this by\nsolving the constrained optimization problem in Equation 1 in a tractable manner.\nHence, LoCoMotif-DoK supports all types of constraints and desirability functions\nthat are considered in the framework. In our implementation, those constraints and\ndesirability functions can simply be selected from the catalogue (Table 1) or defined\nby the user as Python functions.\nWe base LoCoMotif-DoK on the existing TSMD technique LoCoMotif for two reasons. First, LoCoMotif has useful capabilities: It can\ndiscover multiple motif sets of different cardinalities where motif length can differ\nwithin and among motif sets; it supports multivariate time series; and it can option-\nally apply time warping to compensate for nonlinear variations in time. Second, the\nLoCoMotif algorithm efficiently obtains a diverse set of so-called candidate motif sets,\nevaluates them, and selects the highest-quality ones as the discovered motif sets. This\nprocess is well-suited for integrating domain knowledge by filtering out inadmissible\nmotif sets and scaling the quality of the remaining ones by their desirability.\nWe provide the pseudocode of LoCoMotif-DoK in Algorithm 1 and its flowchart\nin Figure 3. LoCoMotif-DoK first extracts time segments of x that are similar to\neach other using the Local Concurrences (LoCo) method of LoCoMotif (line 1) so\nthat candidate motif sets can later be generated efficiently. Then, LoCoMotif-DoK\ndiscovers k motif sets greedily (lines 4-14), where k is specified by the user: For each\nmotif set i to discover (i = 1,...,), the best admissible motif set Ci is found by\nthe procedure FINDBESTADMISSIBLEMOTIFSET by taking into account the domain\nknowledge provided for the i-th motif set. Among these motif sets, the best one\n(Ci*) is saved as the i*-th discovered motif set M. This process is repeated for the\nundiscovered motif sets until all are discovered or no more admissible motif sets can\nbe found.\nIn the next subsections, we explain the mechanisms of generating a candidate motif\nset, finding the single best admissible motif set, and discovering multiple motif sets."}, {"title": "4.2 Generating A Candidate Motif Set", "content": "LoCoMotif-DoK inherits LoCoMotif's LoCo step that\nenables obtaining candidate motif sets efficiently. LoCo obtains a set P of local warping\npaths, each of which relates two similar time segments of x with each other with\ntime warping,\nas shown in Figure 4 (left). The strictness of assessing the similarity"}, {"title": "4.3 Finding the Best Admissible Motif Set", "content": "Given a hard motif set constraint H mset and desirability function D, the procedure\nFINDBESTADMISSIBLEMOTIFSET finds the best admis-\nsible motif set in three steps by (1) generating candidate motif sets, (2) filtering them"}, {"title": "4.4 Discovering Multiple Admissible Motif Sets", "content": "LoCoMotif-DoK discovers multiple motif sets greedily: Instead of finding globally\noptimal motif sets, it identifies the best admissible motif set at a time by the proce-\ndure FINDBESTADMISSIBLEMOTIFSET and repeats this process until k motif sets are\ndiscovered or no more can be found (lines 4-14 in Algorithm 1). While this iterative\napproach is analogous to LoCoMotif, LoCoMotif-DoK needs to ensure that the dis-\ncovered motif sets satisfy constraints, which is not trivial because constraints might\nbe defined differently for every (pair of) motif set(s) to be discovered.\nSince the constraints might differ across the motif sets $M_1,..., M_\u03ba$, in every iter-\nation of LoCoMotif-DoK, the FINDBESTADMISSIBLEMOTIFSET procedure is called\nseparately for every motif set that hasn't been discovered yet. Among these 'best'\nmotif sets, the one with the highest fitness scaled by desirability is selected as the\ndiscovered motif set (M). If there are no motif sets found or all motif sets have\nbeen discovered, then the iterative process is terminated. Hence, the LoCoMotif-DoK\nalgorithm can discover less thank motif sets (in which case some M are (\u00d8).\nThe FINDBESTADMISSIBLEMOTIFSET procedure checks the constraints of types\nHmset and D (which are defined for individual motif sets) and not Hmsets (which are\ndefined for pairs of motif sets). This is because every constraint defined for a pair of\nmotif sets can be represented as a constraint defined for a single motif set if one of the\ntwo motif sets is known (i.e., discovered). Given this fact, once LoCoMotif-DoK discov-\ners a motif set (M), for every undiscovered motif set j, it changes the representation\nof the constraints Husets and Husets (which involve M) into Hmset by substituting\nthe corresponding free variables by M. LoCoMotif-DoK then combines the con-\nstraints whose representations have changed, with the existing constraints Hmset using\nthe 'and' operation in line 14, where C is an independent variable that represents any\nmotif set. This process is represented by the parts highlighted in blue in Figure 3."}, {"title": "5 Related Work", "content": "Most existing TSMD techniques do not support domain knowledge. Although they\nhave hyperparameters, some of which can be determined using domain knowledge,\nthey are never sufficient to represent domain knowledge in general. This is because\nhyperparameters are limited in expressiveness, as they only capture predetermined\nproperties such as motif length or the cardinality of motif sets.\nTo our knowledge, there are only three existing TSMD techniques that support\ndomain knowledge, but they are all quite limited in expressiveness. They merely utilize\na mask m, which is an auxiliary time series that specifies the desirability (between 0\nand 1) or permissibility (either 0 or 1) of motifs at each time index. The mask m can\nbe provided by a domain expert or computed from the input time series x (or from an\nauxiliary one) using a simple method that leverages domain knowledge."}, {"title": "6 Experimental Evaluation", "content": "To evaluate the impact of domain knowledge on the motifs discovered by\nLoCoMotif-DoK, we perform three sets of experiments: detecting exercise executions\nin a physiotherapy use case, discovering the motifs inserted into time series in a\nTSMD benchmark, and identifying meaningful repeating patterns in several other\napplications."}, {"title": "6.1 Physiotherapy Use Case", "content": "Here, we detail the physiotherapy use case, from which we have already provided\nan example time series in Figure 1. In this use case, we apply TSMD on wearable\nmotion sensor data acquired during physiotherapy sessions to identify each exercise\nexecution and group them by their execution type to aid a physiotherapist.\nBy using LoCoMotif-DoK, we can leverage much more compre-\nhensive domain knowledge than LoCoMotif, which leads to the following Research\nQuestion (RQ):"}, {"title": "6.1.1 Dataset", "content": "We use all the 40 time series that represent exercise sessions available in a publicly\navailable dataset. In every session, a subject performs\na certain exercise in three different types: ten times in a correct manner, ten times\ntoo quickly, and ten times with a low range of motion, as shown in Figure 1. Time\nsegments of all the executions are available as ground-truth (GT) information that\nwe use for evaluation. The subjects' body movements are captured as time series\ndata by wearable sensors (at 25 Hz) placed at five different positions on the body.\nWe use the data acquired by the tri-axial accelerometer that moves the most in each\nexercise (position 4 for exercise 2 and position 2 for the remaining exercises), as done\nby"}, {"title": "6.1.2 Experimental Setup", "content": "We consider three levels of domain knowledge:\n\u2022 LoCoMotif-0: We do not leverage any domain knowledge.\n\u2022 LoCoMotif (limited domain knowledge): All exercises need to start and end when\nthe subject is at the resting position, which is determined simply by thresholding\nthe standard deviation over a sliding window. We\nrepresent this domain knowledge through the masks mbegin-repr and mend-repr that\nconstraint the beginning and end points of the representative motifs (as explained\nin Section 5). This is the only type of domain knowledge LoCoMotif supports.\n\u2022 LoCoMotif-DoK (comprehensive domain knowledge): In addition to the masks in\nthe previous setting, we represent two more pieces of domain knowledge: (1) The\nsubject is expected to perform 10 executions of each type in every exercise session.\nWe represent this by soft constraints on the cardinality for every motif set to\nbe discovered by setting kmin = kmax = 10 and p = 0.5 (rows 1-2 in Table 1).\n(2) The three execution types present in every time series have different duration\ncharacteristics; for example, the second type is expected to be shorter than the\nother types (Figure 1a). To represent this information, we constrain the lengths\nof the representatives of the three motif sets to be discovered using three different\nlength ranges (using hard constraint 5 in Table 1). While a physiotherapist can\ndefine these ranges according to the expected durations in practice, we obtain\nthem from the dataset according to the shortest and longest executions of the\nthree execution types in the entire dataset.\nWe use the same hyperparameter values for all three levels of domain knwoledge:\nWe set (Imin, Imax) = (2.0, 10.5) seconds according to the shortest and longest exer-\ncise executions in the dataset. We repeat the experiments with different values\nfor the strictness: \u03c1\u2208 {0,0.05,...,1}. We use the default values for the remaining\nhyperparameters: v = 0.25 and time warping enabled.\nFor each level of domain knowledge, we run the experiments in two settings: In\nthe first setting, we assume that a physiotherapist is available. Since they can easily"}, {"title": "6.1.3 Results", "content": "Figure 5 provides experimental results for each setting, level of domain knowl-\nedge, and strictness (p). In both settings, LoCoMotif-DoK substantially outperforms\nLoCoMotif for most p values. As expected, LoCoMotif-0, which doesn't leverage any\ndomain knowledge, yields substantially worse results in all experiments, especially\nfor K = 3. The main reason is the quasi-periodicity of successive exercise executions\nwhere the phase-shifted versions of the executions can be discovered as motifs, which\nare uninteresting repeating patterns. This problem is eliminated in LoCoMotif and\nLoCoMotif-DoK by requiring motifs to start and end when the subject is at resting\nposition.\nIn terms of the peak performance (for the optimal p), LoCoMotif-DoK is dra-\nmatically better than LoCoMotif in precision, recall, and F1-score in the first\nsetting. For the second setting, the peak performance of\nLoCoMotif-DoK is slightly better than LoCoMotif with a very similar precision and\nslightly higher recall and Fl-score. This is despite the fact that LoCoMotif-DoK is\nconfigured to discover up to 6 motif sets while the domain knowledge includes the\npresence of 3 motif sets. We observe that the peak performance corresponds to a\nsmaller strictness (p) when more domain knowledge is leveraged, which is expected\nbecause domain knowledge makes the algorithm stricter in a different way (through\nconstraints) than p (through similarities between motifs in a motif set).\nTo conclude, in the physiotherapy use case, leveraging domain knowledge is essen-\ntial to discover desired motifs, and additional domain knowledge can further improve\nthe results. Hence, our answer to RQ1 is yes."}, {"title": "6.2 TSMD Benchmark", "content": "We investigate the impact of domain knowledge on the quality of the discovered motif\nsets using a TSMD benchmark, that consists of a diverse set of time series for which\nGT motif sets are available for evaluation. This leads to:\nRQ2: Does incorporating additional information about the GT motif sets help in\ndiscovering motif sets that are more similar to the GT ones?"}, {"title": "6.2.1 Experimental Setup", "content": "Every time series in the benchmark consists of concatenation of time series instances\nfrom a classification dataset, where repeating classes are considered as GT motif sets.\nTo emulate domain knowledge in such a time series, we extract some information from\neach GT motif set and represent it by different hard and soft constraints. Parameters\nof constraints are determined specifically for every motif set in every generated time\nseries, since the characteristics of these motif sets might differ.\nTo observe the impact of constraints on the quality of the discovered motif sets, we\napply LoCoMotif without domain knowledge as well as LoCoMotif-DoK with every\nconstraint separately. We set the hyperparameters as being the number of GT motif\nsets; v = 0.5; Imin and Imax being the 0.1- and 0.9-quantiles of the lengths of the\ninstances in the validation set (of the classification dataset), as in"}, {"title": "6.2.2 Results", "content": "Hard constraints are provided in Table 2 and the corresponding results in Figure 6a.\nThe constraint Start- and End-points yields the greatest improvement, pushing the\nF1-scores to 1 in most cases, which is expected because the constraint defines the time\nsegments of possible motifs with some flexibility, making the TSMD task much easier.\nThe constraints Max. Cardinality, Non-consecutive Motifs, and Positive Region also\nbring an improvement. The Exact Cardinality constraint, on the other hand, does\nnot help in most cases, partially because of its strictness: it discards candidate motif\nsets with incorrect cardinalities and may cause no motif sets to be discovered. For\nexample, if there are five motifs in a GT motif set and one of them is too noisy, then\nall candidate motif sets might contain four motif sets and hence be inadmissible. The\nLength constraint also has an adverse effect on the result.\nSoft constraints are listed in Table 3 with their results presented in Figure 6b.\nThe constraints Cardinality, Soft Mask, and Positive Region improve the Fl-score.\nIn particular, the soft Cardinality constraint performs much better than its hard\nimplementation because the former does not suffer from being too strict, as it intro-\nduces a preference for certain motif sets without discarding others. Lastly, the Length\nconstraint does not improve the results.\nA possible reason for the adverse effect of the Length-related constraints is\nLoCoMotif-DoK's time warping capability, which causes candidate motif sets to con-\nsist of possibly variable-length motifs, some of which may not be admissible or desired\naccording to constraints. This problem could be solved if LoCoMotif-DoK could com-\npute time warping by considering the constraints; however, this is not straightforward\nto achieve in a computationally tractable manner, especially while supporting generic\nconstraints.\nOverall, domain knowledge is more helpful for variable-length datasets than fixed-\nlength ones. This is because motif (set)s with more diverse properties enable the\ndomain knowledge to be more specialized for individual motif sets, which can be\nsuccessfully leveraged by LoCoMotif-DoK.\nTo conclude, the majority of the constraints we consider lead to higher-quality\nmotif sets; hence, our response to RQ2 is 'most of the time'."}, {"title": "6.3 Validation Based on Selected Time Series", "content": "Leveraging domain knowledge represented by a mask m has been shown to be essen-\ntial for the existing TSMD technique MPV to discover interesting motifs in various\napplications. This leads us to:\nRQ3: Can LoCoMotif-DoK leverage the available domain knowledge in multiple\napplications to discover (only) interesting motifs?\nTo answer this question, we consider the time series selected by Dau and Keogh (2017)\nfrom different application domains and evaluate the results qualitatively since there\nare no GT motif sets available. We present the results for the ECG time series in this\nsection and for the remaining applications in Appendix A.\nThe ECG time series x plotted in Figure 7 consists of a calibration signal and\nheartbeats, and only the latter are interesting to discover as\nmotifs. The figure also shows the motifs discovered by different TSMD techniques as\ntime segments (filled rectangles) and overlaid subsequences.\nAmong the existing TSMD techniques that don't leverage domain knowledge,\nMatrix Profile (MP) discovers a pair of calibration waves, and LoCoMotif discovers\ntwo motif sets, one consisting of heartbeats and the other calibration waves. While\nthe outcome of MP is not useful at all, the result of LoCoMotif is satisfactory, as one\nof the two discovered motif sets is interesting. LoCoMotif obtains a satisfactory result"}, {"title": "7 Conclusion", "content": "We have presented a framework that incorporates domain knowledge into TSMD\nin a generic form and an efficient implementation of the framework with the\nLoCoMotif-DoK algorithm. We have quantitatively and qualitatively evaluated\nLoCoMotif-DoK in a real physiotherapy use case, on a TSMD benchmark, and on other\ntime series from different application domains. We have shown that LoCoMotif-DoK\nsuccessfully leverages various types of domain knowledge and discovers higher-quality\nmotifs than existing TSMD techniques in most cases.\nAs future work, one might optimize the efficiency of LoCoMotif-DoK for certain\nconstraints."}, {"title": "A Additional Example Time Series for Validation", "content": "Here we answer RQ2 in Section 6.3 for the four remaining example time series from Dau\nand Keogh (2017). We use the same experimental setup as the ECG example in\nSection 6.3 and the same domain knowledge as the original paper (Dau and Keogh\n2017). The motif length hyperparameter I of MP(V) is selected in the same way as Dau\nand Keogh (2017). For LoCoMotif(-DoK), we select (Imin, Ilmax) according to l, dis-\nable time warping, and select a reasonable strictness (p). Hyperparameter values are\nprovided in the captions of the figures that present the results.\nThe electrooculoram (EOG) time series that captures eye movements suffers\nfrom sensor saturation, which causes flat plateaus that are similar to each other\nand don't have any medical significance. The domain knowledge is \"motifs\nshould not include saturated measurements\" and is represented as a mask m based\non the ratio of unsaturated measurements over a sliding window. By leveraging m,\nthe MPV technique discovers a medically interesting motif pair instead of the regions\nwith sensor saturation (discovered by MP). The interesting motif pair is discovered as\nthe third motif set by LoCoMotif and as the first motif set by LoCoMotif-DoK thanks\nto the domain knowledge. Hence, LoCoMotif-DoK performs better than LoCoMotif,\nconsidering that the motif sets discovered by LoCoMotif(-DoK) are sorted from the\nbest to the worst (unless constraints are determined differently in LoCoMotif-DoK for\nevery (pair of) motif set(s) to be discovered, which is not the case here).\nThe Functional Near Infrared Spectroscopy (fNIRS) data that represents\nbrain activities contains sensor artifacts due to motion of the body (high-amplitude\nfluctuations in Figure 9). The domain knowledge is \"motifs must not be found when\nthere is substantial body motion\". To this end, time segments with substantial motion\nare detected based on another sensor (a body-worn accelerometer) and the correspond-\ning values of m are set to 0 while the remaining are 1. The use of m enables MPV\nto discover a pair of medically significant motifs that represent neuronal activities\ninstead of sensor artifacts (discovered by MP). On the other hand, both LoCoMotif\nand LoCoMotif-DoK obtain desired results: they only discover medically significant\nmotifs, regardless of whether domain knowledge is used or not.\nThe electrocorticography (ECoG) time series measures the flexion of a finger.\nThe example time series in Figure 10 contains three flexions, which causes three time\nperiods with high-frequency oscillations that are interesting to discover. The domain\nknowledge in this application is \u201cnot discovering simple motifs\u201d. This is represented\nby m that is calculated based on the \u201ccomplexity\u201d of the time series over a sliding win-\ndow, where the complexity of a subsequence is measured by the Euclidean norm of the\nfirst-order difference. MP-based algorithms need the domain knowledge to discover the\ninteresting finger flexions as motifs (although they can discover only two of them by\ndesign). Without domain knowledge, LoCoMotif obtains a satisfactory result: it discov-\ners three motif sets where the last one consists of two finger flexions. LoCoMotif-DoK\noutperforms LoCoMotif thanks to the domain knowledge by successfully discovering\nall the three finger flexions as the first motif set and some uninteresting patterns as\nthe second motif set. We note that m approaches 0 but does not reach it most of the\ntime; hence, motifs are allowed in these regions, albeit highly discouraged."}]}