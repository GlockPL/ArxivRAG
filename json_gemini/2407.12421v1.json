{"title": "SafePowerGraph: Safety-aware Evaluation of Graph Neural Networks for Transmission Power Grids", "authors": ["Salah GHAMIZI", "Aleksandar BOJCHEVSKI", "Aoxiang MA", "Jun CAO"], "abstract": "Power grids are critical infrastructures of paramount importance to modern society and their rapid evolution and interconnections has heightened the complexity of power systems (PS) operations. Traditional methods for grid analysis struggle with the computational demands of large-scale RES and ES integration, prompting the adoption of machine learning (ML) techniques, particularly Graph Neural Networks (GNNs). GNNs have proven effective in solving the alternating current (AC) Power Flow (PF) and Optimal Power Flow (OPF) problems, crucial for operational planning. However, existing benchmarks and datasets completely ignore safety and robustness requirements in their evaluation and never consider realistic safety-critical scenarios that most impact the operations of the power grids. We present SafePowerGraph, the first simulator-agnostic, safety-oriented framework and benchmark for GNNs in PS operations. SafePowerGraph integrates multiple PF and OPF simulators and assesses GNN performance under diverse scenarios, including energy price variations and power line outages. Our extensive experiments underscore the importance of self-supervised learning and graph attention architectures for GNN robustness. We provide at https://github.com/yamizi/SafePowerGraph our open-source repository, a comprehensive leaderboard, a dataset and model zoo and expect our framework to standardize and advance research in the critical field of GNN for power systems.", "sections": [{"title": "I. INTRODUCTION", "content": "In recent decades, the energy sector has experienced sig-nificant transformations driven by a range of technological, economic, and environmental influences. One of the most remarkable trends is the development and maturity of renew-able energy resources (RESs), and energy storage systems (ESs) that increase the complexity of monitoring and online-operations of power systems (PS).\nTransmission system operators (TSOs) require real-time tools for effective power systems operations, but current meth-ods for grid analyses, hindered by their computational speed, cannot fully meet the challenges posed by RESs and ESs at large scale. Driven by these limitations, TSO are increasingly relying on machine learning (ML) techniques to support power operations. In particular, Graph Neural Networks (GNNs) have demonstrated their effectiveness in modeling the dynamics of the power grid and have emerged as the leading techniques for real-time solutions to solve optimizations of the alternating-current (AC) power system [3, 26, 34].\nSolving AC power flow (PF) and AC Optimal Power Flow (OPF) problems is a routine task in power system operational planning. The PF problem involves determining the voltage magnitudes and phase angles of all buses in an electrical power system, ensuring that the power supplied meets the demand while satisfying the constraints of the network. Meanwhile, the OPF problem is an optimization problem. It seeks to find the best voltage settings in the system buses and generator power outputs to satisfy load requirements (energy demand), while satisfying network constraints and minimizing energy losses and energy generation costs. This optimization is not always scalable when considering large topologies, new components (RESS, ESs), and high variations in loads and energy prices.\nGNNs are today de facto the predominant approaches to solve the PF problem [6, 9, 20, 27, 30] and the OPF problem [28, 29, 34, 36]. Few approaches are designed outside of pure academia and are implemented by TSO themselves [3, 24]. However, each publication and approach are evaluated under different experimental settings, using different PF and OPF solvers (we identified six) to generate their labeled datasets and rarely consider challenging and safety-critical evaluation scenarios with network perturbations.\nA comprehensive study on the perturbations of Nordic power grids [5] showed that these eight countries faced a total of 1972 major disturbances in 2022. These disturbances were associated with 1345 faults on overhead lines. Line faults and outages are among the main security threats to the stability and safety of power grids. Energy price surges are another real threat to the stability of the network, and the recent crises have challenged, for example, European energy prices (Fig. 2).\nPublic power grid datasets such as the Electricity Grid Simulated (EGS) dataset [4], the PSML [43] dataset and the Simbench dataset [33] are not specifically designed for machine learning applications on graphs and do not account for these realistic perturbations. To the best of our knowledge, there are only two benchmarks related to our work: LIPS[24] and PowerGraph[39]. We compare them in Table II.\nTheir main limitations are that they (1) do not solve the variability problem of PF and OPF simulators in the commu-nity, and only support one simulation tool, (2) do not sup-port safety-critical scenarios such as line outages and energy price variations, and (3) only consider traditional supervised learning (SL), while most of the new approaches are driven by self-supervised learning (SSL) with physics-informed ML [17, 26]. These limitations make them unsuitable to unify and springboard future research in GNN for PS.\nWe make up for these shortcomings with SafePower-Graph, the first safety-oriented framework and benchmark. Our framework is simulator-agnostic and natively integrates the four popular PF and OPF simulators, and provides safety assessment of GNN by considering supervised errors (MSE), and physical errors (constraints violations) for three settings: in-distribution (ID) scenarios, energy price variations scenar-ios, and power line outages scenarios. Our study demonstrates the relevance of self-supervised learning and Graph Attention architectures for the robustness of GNN for PS.\nIn summary, we make the following contributions.\n\u2022 To the best of our knowledge, we are the first to define the problem of GNN vulnerability and safety for realistic PS operations. We introduce realistic scenarios and evaluation metrics tailored to this real-world critical application of GNN.\n\u2022 We introduce an innovative integrated GNN framework, called SafePowerGraph, which is, to the best of our knowledge, the first practical framework and benchmark addressing the safey and robustness of GNNs within the PS operations context.\n\u2022 We conduct extensive experiments on three stan-dardized graph power grids networks and two critical safety edge-cases, and demonstrate the relevance of our benchmark. SafePowerGraph, uncovers the criti-cal impact of GNN architectures and self-supervised learning to ensuring safe and robust GNNs for PS. SafePowerGraph is open-source and available at this repository: https://github.com/[ANONYMIZED].\n\u2022 We share with the community a Leaderboard based on more than 200 evaluations to track the progress and the current state of the art in safety and robustness of graph deep learning models for PS, including SL and SSL approaches. The goal is to clearly identify the most successful ideas in GNN architectures and robust training mechanisms to accelerate progress in the field. Our leadearboard is accompanied with a Dataset zoo and a Model Zoo to standarize the research."}, {"title": "II. PRELIMINARIES", "content": "Power grids consist of two elements: buses, which denote key points within the grid such as generation sites, load centers, and substations, and transmission or distribution lines that link these buses. Therefore, it is quite natural to visualize power grid networks as graphs, where buses and transmission lines are depicted as nodes and edges of the corresponding graph.\nThe buses are divided into three main categories: PV, PQ, and V0. PV buses denote grid generators that supply and inject energy. PQ buses denote the grid's loads, which are components that consume energy (e.g. households). The Ve bus is referred to as a \"slack bus\" and acts as a reference point for grid operation. The state of each bus is defined by a set of variables depending on its type (Table I).\nGiven the diversity of the components of the power grid, one can use a homogeneous graph representation where all buses have the same shape of features and labels, and their di-versity is processed as homogeneous GNN with masking [27], or leverage heterogeneous GNN to consider the node types separately [11]."}, {"title": "A. Graph Neural Networks", "content": "Graph Neural Networks (GNNs) have emerged as powerful tools for learning on graph-structured data, which are prevalent in various domains such as social networks, molecular biology, and power grids. At their core, GNNs leverage the message-passing framework, where node features are iteratively up-dated by aggregating information from their neighbors. Early approaches, such as Graph Convolutional Networks (GCNs) [23] applied convolutional operations to graphs, enabling the extraction of local patterns and capturing the graph struc-ture effectively. Following this, numerous enhancements have been proposed to improve GNNs' expressive power, such as GraphSAGE[15], which addressed the scalability issues of GNNs by employing a sampling strategy to aggregate information from a fixed number of neighbors, thus allowing the model to handle large graphs efficiently. Another sig-nificant development was Graph Attention Networks (GATS) [40], which leverages attention mechanisms to assign different weights to neighbor nodes, and DeeperGCN[25], designed to mitigate vanishing gradient, over-smoothing and over-fitting when going deeper.\nRecent advances include heterogeneous graph neural net-works (HGNNs), which extend conventional graph neural networks (GNNs) to handle multiple types of nodes and edges effectively, for example, by leveraging metapath-based aggregation for richer representations [37, 42].\nGNNs support a wide range of tasks, broadly categorized into node- and graph-level tasks. Node-level tasks, such as node classification and node regression, focus on predicting the properties or labels of individual nodes within the graph. In power grids, predicting the state of specific buses belongs to this category. Graph-level tasks, on the other hand, in-volve predicting properties of entire graphs, such as molecular property prediction in chemistry or powerflow convergence in power grids. In addition, GNNs have been utilized for link prediction tasks, which aim to infer missing edges in partially observed graphs. In power systems, link prediction could consist of predicting vulnerable or non-robust lines of the grids, commonly referred to as \"contingency analysis\".\nOur work focuses on two node-level regression tasks for power systems that are critical for power grid operations: Power Flow (PF) and Optimal Power Flow (OPF)."}, {"title": "B. Power Grids Operations", "content": "The scope of our work is to model and solve power flow and optimal power flow problems of transmission grids. We summarize in the following the equations of both the PF and the OPF problems using the polar form, and refer you to Appendix A-A for detailed explanations."}, {"title": "The Power flow problem", "content": "The goal of the PF problem is to find the solution of the unknown variables in each bus given the known values of the buses and the state of the grid (topology and attributes of the grid), as shown in Table I. $P_i^g$, $Q_i^g$ are the generated active and reactive power into bus i, $P_i^l$, $Q_i^l$ are the demand active and reactive power out of the bus i, $P_i$, $Q_i$ are the net real and reactive power injections with $P_i = P_i^g - P_i^l$ and $Q_i = Q_i^g - Q_i^l$, $V_i$, $\\theta_i$ are the voltage magnitude and voltage angle at bus i.\nThe model of the PF problem can be mathematically formulated using Kirchhoff's equations:\n$\\begin{cases}P_i = V_i \\sum\\limits_{k=1}^{N} V_k (G_{ik} cos(\\theta_i - \\theta_k) + B_{ik} sin(\\theta_i - \\theta_k)) \\\\Q_i = V_i \\sum\\limits_{k=1}^{N} V_k (G_{ik} sin(\\theta_i - \\theta_k) - B_{ik} cos(\\theta_i - \\theta_k))\\end{cases}$\n\nfor each bus $i,k \\in \\{1..N\\}$ of the grid, where $G_{ik}$ and $B_{ik}$ denote two physical line properties, the conductance and susceptance, respectively. Traditionally, PF problem is addressed with iterative solvers. The most popular use the Newton-Raphson method, linearizing power flow equations starting from an initial guess of the unknown variables in Table I. We elaborate on the solver's optimization in Appendix A-A.\nWe learn the PF problem by minimizing three losses:\n1- A supervised loss that uses the solution from the solver (the oracle) as ground truth and minimizes the MSE between the predicted values of the GNN and the oracle's output.\n2- A self-supervised loss that computes all the terms of equations 1, and minimizes the error between the left side and the right sides of the equations.\n3- A boundary-violation loss that models the limits of the components as soft constraints and pushes the outputs to satify them; e.g., to force the predicted active power of each generator within its active power capacity."}, {"title": "The Optimal Power Flow Problem", "content": "The AC Optimal PowerFlow (OPF) problem is a more challenging problem than PF. It consists of finding the best solution to distribute electricity through power grids, consid-ering factors such as demand, supply, storage, transmission limits, and costs, to ensure that everything runs smoothly and efficiently without overloading the system. The objective of this optimization is to fulfill the demand while minimizing the cost of generation of various sources of energies."}, {"title": "Robustness and Safety of Constrained NN", "content": "Despite their effectiveness and scalability, GNNs face sig-nificant challenges in terms of robustness and generalization, and thus are not yet reliable to be deployed for critical applications [26]. In particular, researchers have explored the lack of robustness of GNNs to out-of-distribution data [14] and to adversarial perturbations [21].\nEarly approaches to improve GNN robustness such as Graph Robustification [45] and Adversarial Training [31] have successfully been explored to enhance GNNs' resilience to such perturbations. Recent approaches [7, 13, 22, 41] demon-strated the impact of architectures, training, and losses on the inherent robustness of GNN. However, few studies considered feasible perturbations under domain constraints. Geisler et al. [8] explored the robustness of GNN-based solvers for the traveling salesman problem, where the perturbation space was restricted by the problem.\nConstrained perturbation is a blooming field of research in computer vision and tabular machine learning. Ballet et al. [1] focused on the importance of characteristics in the design of attacks, Mathov et al. [32] took into account mutability, type, boundary, and data distribution constraints, and Simonetto et al. [35] emphasized the importance of considering domain-constraints (inter-feature relationships) for crafting realistic perturbations.\nOur work focuses on three realistic scenarios that GNNs for PS can encounter in the real world: load variations, price variations, and line outages. We generate valid perturbations by ensuring that all the domain constraints of the grid are satisfied, in particular the power flow equations defined in Eq. 1, and the boundaries of the features (Appendix B-A)."}, {"title": "III. PROBLEM FORMULATION", "content": "PF and OPF are node-level regression tasks, and the target (the ground truth of the state) for each node is a continuous vector provided by an oracle. At each perturbation, both the prediction and the target will then vary.\nContrary to traditional robustness assessment, where the target is not supposed to vary under small perturbations, the robustness of power grids is measured based on an acceptable threshold of error compared to the oracle. The targets of the nodes require expensive solvers to obtain the new ground truths. We formulate in the following the problem of hetero-geneous GNN robustness under constrained perturbations.\nWe consider a heterogeneous graph, denoted as $G = (V, E, M)$, that consists of a node set $V$ and a link set $E$ and an adjacency matrix $M$. A heterogeneous graph is also associated with a node-type mapping function $\\phi : V \\rightarrow A$ and a link-type mapping function $\\psi : E \\rightarrow R$. $A$ and $R$ denote the sets of predefined node types and link types, where $|A| + |R| > 2$.\nFor both PF and OPF problems, we consider a homoge-neous link type $|R| = 1$, and the following node types: $A = \\{bus, line, transformer, generator, slack, load, capacitor\\}$.\nWe denote by $n_i$ the number of nodes of type $i$ in the graph G, by $f_i$ the number of features of nodes of type $i$, and by $t_i$ the number of outputs of nodes of type $i$. Each node of type $i$ has a set of features $X_i = \\{X_{ik} \\in \\mathbb{R} | k \\in 1..f_i\\}$. The details of the features and outputs of each node are in Appendix B-A.\nWe denote by $X = \\{X_i \\in \\mathbb{R}^{n_i \\times f_i} \\text{ for } i \\in A\\}$ an input example, defined as the heterogeneous dictionnary of features of the nodes of the graph G, and denote by $y = \\{y_i \\in \\mathbb{R}^{n_i \\times t_i} \\text{ for } i \\in A\\}$ its correct target. Let $h : (X, M) \\rightarrow Y$ be a graph neural network that outputs a regression value $h = \\{h_i \\in \\mathbb{R}^{n_i \\times t_i} \\text{ for } i \\in A\\}$, and $g : (X,M) \\rightarrow \\hat{y}$ an oracle that outputs the ground truth value using traditional exact solvers (e.g., Newton Raphson).\nLet $\\Delta$ be the space of allowed perturbations. We define a $(\\Delta, \\mu)$-robust model $h$ to be any model (e.g. GNN) that satisfies\n$\\forall \\delta \\in \\Delta : ||h(X + \\delta) - g(X + \\delta))||_p \\leq \\mu,$\nwhere $||\\cdot||_p$ is a defined distance (e.g. an Lp-normed distance) and $\\mu$ is an acceptable error threshold.\nIn image classification, the set $\\Delta$ is typically chosen as the perturbations within some Lp-ball around $X$, that is, $\\Delta_p = \\{\\delta \\in \\mathbb{R}^d, ||\\delta||_p \\leq \\epsilon\\}$ for a maximum perturbation threshold $\\epsilon$.\nPower grid data are by nature different from images. Each feature $X_{ij} \\in X_i$ of the graph represents a physical property (e.g., line resistances, length, etc.) or a smart meter measurement (e.g. load's active power). Thus, $X_{ij}$ has to respect physical constraints to be valid.\nA minimal requirement is to respect the boundary con-straints of each feature, and a sufficient requirement is that the perfect solver converges to a solution when optimizing the perturbed Pf or OPF problem. In practice, traditional solvers are not perfect and are dependent on their hyper-parameters (threshold, budget, ...), however, we assume that our oracle solver is perfect. A robust GNN is then defined as follows:\n$\\forall g(X+\\delta) \\text{ converges } \\rightarrow ||h(X+\\delta)-g(X+\\delta))||_p \\leq \\mu$\na) Threat Model: Within the Power Grid operations problems outlined above, a critical concern is the threat of unexpected grid variations during model inference, which com-promises the safety of the grids and the integrity of operations of the Transmission System Operator (TSO). To scope our"}, {"title": "IV. SAFEPOWERGRAPH", "content": "We introduce the architecture of our framework in Fig. 1. Our Python API abstracts both Power Systems (PS) and Ma-chine Learning (ML) functionalities for practitioners from both fields. For ML practitioners, SafePowerGraph is a standarized datasets and models zoo with a unified benchmark to evaluate node-level GNN tasks on complex graphs: Constrained hetero-geneous graphs modeling physical equations and a nonlinear minimization problem. For PS practioners, SafePowerGraph is a GNN-powered OPF and PF simulator that supports major PS formats and tools, and achieves precise, robust, and safe predictions. The main features of our API are:\nA. PowerFlow and OPF Simulation\nOur framework supports the most popular Power Grid libraries for full interoperability:\na) PandaPower (PF, OPF): PandaPower [38] is an open-source Python library that provides tools for the mod-eling, analysis, and optimization of electrical power systems. It is built on top of the popular data analysis library pandas, PandaPower and the power flow solver PYPOWER.\nb) MATPOWER (PF, OPF): MATPOWER [44] is an open-source MATLAB package that provides tools for steady-state power system simulations and optimizations. It supports large-scale PF analysis and OPF optimizations.\nc) OpenDSS (PF): OpenDSS (Open Distribution Sys-tem Simulator) [18] is a popular open-source software for simulating electric power distribution systems. In particular, it natively supports unbalanced distribution grid power flow estimations and is highly scalable.\nd) PowerModels (OPF): PowerModels [2] is a Julia/JuMP-based open-source package designed for solving complex power network optimization problems such as OPF, unit commitment and transmission expansion planning. It is highly extensible and scalable to larger grids.\nB. Graph Data Generation\nIn Fig. 3 we summarize how each graph is generated from a power grid. Starting from an initial grid descriptor (in MatPower, PandaPower or PyPower formats), we generate"}, {"title": "C. Training", "content": "Heterogeneous graph training supports multiple existing architectures, including GCN, Sage, and GAT. It consists of interleaving the message functions on each node type individually. We present in figure 4 the extension of a standard single-node type architecture to two node types (bus and load).\nEach of our models consists of a succession of heteroge-neous graph layers (the backbone), and a set of fully connected layers that outputs the final predictions (head) [28]. Following [11], we extend this standard structure by computing the loss of each node type separately. The splitted loss computations allows to dynamically update the weight (the contribution) of each node type's loss in the backpropagated loss. SafePower-Graph supports weighting strategies because previous research demonstrated that adequate weighting can significantly im-prove the robustness of multitask models [10, 12].\nTraining loss: We incorporate the constraints of the prob-lem in the loss of our GNN as regularization terms. We transform each of the constraints and optimization objectives into a regularization loss. Given a training graph G, its set of node types A, its features X, its associated ground truth prediction y and its predicted output y, the training loss function of our GNN (parametrized by \u04e8) becomes:\n$\\mathcal{L}(\\Theta) := \\Lambda_b ||y_b - \\hat{y}_b||_2 + \\Lambda_s ||y_s - \\hat{y}_s||_2 + \\Lambda_g ||y_g - \\hat{y}_g||_2 + \\\\ \\qquad \\qquad + \\sum_{i \\in A} \\sum_{y_i \\in \\Omega_b} c_{\\tau loss}(i, y_i) + \\lambda_c \\cdot sslloss (x,y) + \\\\ + \\Lambda_c \\cdot costloss(x_g, y_g, x_s, y_s)$     \nwhere the first term is the supervised loss over the bus, slack, and generator outputs. The second term captures the weighted constraints violations of the power grid given the set of constraints $\\Omega$ of each type of node. The third term is the self-supervised loss that solves the equations of the power"}, {"title": "A. Experimental Settings", "content": "Power grid topologies: We evaluate three commonly used topologies: WSCC 9-Bus system, IEEE 30-Bus system, and IEEE 118-Bus system. The first case represents a simple system with 9 buses, 3 generators, and 3 loads. The IEEE test cases represent an approximation of the American Electric Power system. The IEEE 30-Bus system has 30 buses, 5 generators, and 24 loads, and IEEE 118-bus has 118 buses, 19 generators, 35 synchronous condensers, 177 lines, 9 trans-formers, and 91 loads.\nPower grid mutations: For each experiment, we generate 1000 valid mutants (that is, for which the solver converged to a solution). We generate 800 training graphs using load variations from a real-world timeseries, and 200 test graphs are generated following different perturbation scenarios. The initial scenario is an In-Distribution mutation, where the loads are mutated following the same distribution of the training set (while ensuring no data leakage between train and test). We refer to this scenario as ID. For the second scenario (line outage), we randomly disconnect one line from the grid. In the last scenario, we randomly mutate the price of production of individual generator within the original generator price boundaries. We refer to this last scenario as Price variation.\nGNN architectures: We evaluated three GNN layer ar-chitectures: Graph Convolution (cgn), SageConv (sage), and Graph Attention (gat). We use two layers and run a hyperpa-rameter search on the number of features and hyperparameters of the layers (with 20% cross-validation). In evaluation we report the best performing model for each architecture.\nAfter the two graph layers, each model is composed of two fully connected layers with 128 features each. The output of the models depends on the size of the grid and is of size 2x (Nbus + Ngenerators + 1) to learn a regression task for the OPF solutions.\nEvaluation Metrics For the quantitative study, we report the supervised normalized MSE for the active and reactive powers of the generators and the slack node, and for the voltage magnitude and angle of the buses. We refer to them as Pgen, Qgen, Pslack, Qslack, and V, 0, respectively. We run our evaluations over three random seeds, report/plot in the main paper the mean values, and report in the appendices the standard deviations.\nFor the qualitative study, we evaluated the boundary con-straints with a tolerance of $10^{-4}$ (as they are hard physical constraints, such as the generation capacity), and we used a tolerance of $10^{-2}$ for the power flow equations.\nTraining and optimization: We trained all models with the 4x32Gb V100 GPU, for 1000 epochs and batch size of 128. We used Adam optimizer and a multistep learning rate, starting at 0.001 and decaying by 0.5 at epochs $\\in \\{500, 750, 875\\}$.\nWe evaluated three weighting strategies to weight $\\lambda_i$ in the loss equation 6. A strategy with equal weights, a strategy with softmax randomized weights at each batch and epoch, and a normalized weight based on the cardinality of each loss term (number of buses, generators, constraints,...). We report an empirical study on the best weighting strategies in Appendix C-C."}, {"title": "B. OPF quantitative evaluation", "content": "Line outages. We report in orange in Fig. 5 the impact of line outages. They have limited impact on the errors of the Powerflow equations compared to the ID setting for 9-bus and 30-bus. The error varies from $6.02\\times10^{-7}$ to $6.42\\times10^{-7}$ in 9-bus and from $4.05\\times10^{-9}$ to $3.84\\times10^{-9}$ in 30-bus.\nLine outages, however, significantly increase the Powerflow equation errors for the larger 118-bus from $2.00\\times10^{-6}$ to $1.38\\times10^{-2}$. Line outages have limited impact on the boundary violation errors across all the grids sizes. The remaining metrics show a moderate increase in error between the ID and line outage scenarios across all grids.\nImpact of price variations. We report in blue in Fig. 5 the impact of price variations. There is a significant error increase in the GNNs predictions across all grid sizes. That is, the error of the reactive power of the slack node increases from $4.67\\times10^{-6}$ to $1.29\\times10^{-2}$ the 9-bus grid, from $1.49\\times10^{-7}$ to $2.94\\times10^{-4}$ for the 30-bus grid and from $1.87\\times10^{-4}$ to 1.19 for the 118-bus grid. Meanwhile, the powerflow error is slightly affected for small grids, but increases significantly in the 118-bus grid, from $2.00\\times10^{-6}$ to 2.52.\nImpact of GNN architecture. We compare in Fig. 6 the performance of three architectures, GCN, SAGE, and GAT over the ID cases, and their robustness to line outages and price variations. Across all sizes, scenarios and metrics, GAT is the best performing architecture. Across all scenarios, SAGE layers lead to the highest error in 15/18 metrics and 13/18 met-rics for the 30-bus grids and the 9-bus grids respectively. For the large 118-bus grid, GCN is however the worst performing architecture for 16/18 metrics.\nImpact of self-supervised learning. We compare in Table III the performance of the best OPF GNN models with super-vised learning alone and with a combination of supervised and self-supervised learning. We evaluate the ID scenario and the robustness to the price variations and line outages scenarios.\nOur results show that combining SSL and SL improves the robustness to price variations on 4/6 metrics for the 9-bus grid. In other cases, SSL + SL achieves similar performance as SL alone, except for the Slack bus, where SL alone marginally outperforms SL+SSL."}, {"title": "C. OPF qualitative evaluation", "content": "How stable is our framework across simulators?\nWe evaluate the robustness of the oracle by comparing the OPF solution from the three simulators Pandapower, MatPower and PowerModels.jl. We mutate the initial grid to generate 100 mutants for each grid size.\nFirst, we compare the solutions found by each simulator when changing the initial states of the grid with 10 random seeds, and the standard deviation of the solvers solutions remained zero.\nNext, we compare the solutions found by each simulator, and we report the mean and standard deviation of the difference"}, {"title": "D. Powerflow evaluation", "content": "The PF problem only supports line outage perturbations. In the following we report the results for the 9-bus and 30-bus"}, {"title": "VI. LIMITATIONS", "content": "We are releasing our replication package on https://figsh are.com/projects/SafePowerGraph_-_NDDS25/212777. This anonimized repository allows to replicate all the experiments of this work. While our study is the first evaluation of GNN safety for power systems un real-world perturbations, complementary studies could be explored:\nDistribution grids: Our work focused on transmission grids, characterized by medium and high voltage and balanced 3-phase nodes. Distribution grids cover low voltages and use a mix of single-phase and three-phase systems and unbalanced loads. Thus the PF and OPF equations for transmission grids are different, and even traditional solvers do not efficiently solve them. Our framework paves the way for fully self-supervised GNN that could solve unbalanced OPF problems without relying on untractable solvers.\nOther perturbations: While our work only considered line outages and energy price variations, other manipulation can be considered: The loads (the consumption) of the households can be manipulated sometimes (because of the vulnerability of smart meters), while the line properties (the reactance for example) or the generation capacities are hardly manipulable.\nMalicious perturbations: We only considered random perturbations and did not try to optimize the perturbations to maximize the errors of the GNN. Our study already demon-strated the vulnerability of GNN to random manipulations, our framework should be considered as a minimal benchmark to foster further research on robustness to both random and malicious perturbations.\nGNN models: We only considered 3 type of graph layers using undirected graphs and heterogeneous nodes because GNN for OPF achieved best performances with these archi-tectures [11]. Additional graph and layer architectures can be explored using our framework."}, {"title": "CONCLUSION", "content": "This paper presents SafePowerGraph, a novel, safety-oriented framework designed to address the limitations of existing benchmarks for GNN in PS operations. Our extensive experiments reveal key insights into the robustness and perfor-mance of GNN models under realistic, safety-critical scenarios.\nFirst, GNN models are notably vulnerable to price varia-tions across all grid sizes, with bus power flow errors escalating by up to six orders of magnitude for larger grids. Next, GAT architecture consistently outperforms other architectures, demonstrating superior performance and robustness across all scenarios and grid sizes. In addition, integrating SSL with SL enhances model robustness against price variations while maintaining effectiveness on in-distribution load variations and line outages. Lastly, our findings indicate that price variation scenarios lead to significantly more broken power flow and boundary constraints compared to line outage scenarios.\nIn summary, SafePowerGraph advances the field by provid-ing an open-source, standardized, and robust benchmark that addresses the safety and robustness of GNNs in PS operations. By revealing critical insights and offering a comprehensive evaluation platform, we aim to accelerate progress in devel-oping more resilient and effective GNN models for real-world power systems challenges."}, {"title": "APPENDIX A PROBLEM DEFINITION", "content": "A. The Powerflow optimization\nComplex power in AC circuits:\nElectric power transmission is more efficient at high volt-ages because these higher voltages minimize energy loss due to dissipation in the transmission lines. Power grids typically utilize alternating current (AC) because the voltage of AC can be conveniently changed (from high to low) using transform-ers. Hence", "time": "their magnitude and direction change periodically. Due to various technical benefits such as reduced losses and fewer disturbances", "components": "n$S_{ij"}, "p_{ij} + jq_{ij}$\nwhere j = \u221a-1. The complex power flow can be expressed as the product of the complex voltage at bus i, Vi, and the complex conjugate of the current flowing between the buses $I_{ij}^*$,\n$S_{ij} = V_iI_{ij}^*$\nTransmission lines have power losses due to their resistance (ri,j), that indicates the opposition to current flow. In AC circuits, there is an additional dynamic effect due to the line reactance (xij). Unlike resistance, reactance does not result in power loss but causes temporally delays by storing and then returning power to the circuit. The combined effect of resistance and reactance can be expressed through a complex quantity called impedance: $Z_{ij} = r_{i,j}+jx_{i,j}$. We also consider the admittance, which is the reciprocal of the impedance: $Y_{ij} = \\frac{1}{Z_{ij}}$. Similarly to the impedance, the admittance can be also decomposed into its real, conductance (gij), and imaginary, susceptance (bij), components: $Y_{ij} = g_{ij} ++"]}