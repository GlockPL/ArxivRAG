{"title": "AI-Driven Fast and Early Detection of IoT Botnet Threats: A Comprehensive Network Traffic Analysis Approach", "authors": ["Abdelaziz Amara korba", "Aleddine Diaf", "Yacine Ghamri-Doudane"], "abstract": "In the rapidly evolving landscape of cyber threats targeting the Internet of Things (IoT) ecosystem, and in light of the surge in botnet-driven Distributed Denial of Service (DDoS) and brute force attacks, this study focuses on the early detection of IoT bots. It specifically addresses the detection of stealth bot communication that precedes and orchestrates attacks. This study proposes a comprehensive methodology for analyzing IoT network traffic, including considerations for both unidirectional and bidirectional flow, as well as packet formats. It explores a wide spectrum of network features critical for representing network traffic and characterizing benign IoT traffic patterns effectively. Moreover, it delves into the modeling of traffic using various semi-supervised learning techniques. Through extensive experimentation with the IoT-23 dataset-a comprehensive collection featuring diverse botnet types and traffic scenarios-we have demonstrated the feasibility of detecting botnet traffic corresponding to different operations and types of bots, specifically focusing on stealth command and control (C2) communications. The results obtained have demonstrated the feasibility of identifying C2 communication with a 100% success rate through packet-based methods and 94% via flow-based approaches, with a false positive rate of 1.53%.", "sections": [{"title": "I. INTRODUCTION", "content": "In the digital era, the proliferation of Internet of Things (IoT) devices has spurred unprecedented advancements across various sectors, from enhancing home automation to revolutionizing industrial processes. However, this rapid expansion has also exposed new vulnerabilities, positioning these interconnected networks as prime targets for sophisticated cyber threats. Among these, botnet attacks have emerged as a particularly significant challenge [1]. A botnet, a network of infected devices controlled by a malicious actor, can silently compromise numerous devices to orchestrate disruptions like Distributed Denial of Service (DDoS) attacks, as seen with the Mirai attack against OVH. The 2023 Nokia Threat Intelligence Report [1] and FortiGuard Labs' 2022 [2] review collectively underline the escalating cyber threat landscape, marked by a surge in IoT botnet-driven DDoS traffic and brute force attacks. This includes a significant increase in IoT device involvement, from 200,000 to 1 million within a year, and a rise in mobile trojans compromising banking data.\nBotnet operations unfold in several stages: scanning, infection, control, and finally, attack. Mirai [3], a notorious bot malware, exemplifies the botnet lifecycle, which encompasses four phases: scanning, infection, control, and attack. During the scanning phase, Mirai searches for vulnerable IoT devices with open Telnet ports. Once identified, the infection phase begins, exploiting weak default credentials to compromise devices. In the control phase, infected devices, now bots, connect to a Command and Control (C&C) server, receiving instructions. Finally, in the attack phase, these bots execute coordinated attacks, such as DDoS. Much research has focused on detecting botnet-led attacks, particularly the final phase, which often involves volumetric DDoS attacks. These attacks are markedly distinct from legitimate traffic due to their network flow volume. To effectively prevent such attacks and ensure early detection, our study delves into identifying network traffic associated with the stages preceding the attack phase. Detecting network traffic related to the scanning and infection stages allows for interrupting the process and preventing device compromise. Moreover, identifying command and control (C2) communication aids in detecting IoT devices compromised by botnets. This proactive approach aims to neutralize the bot malware before it reaches the attack stage, and mitigating their propagation.\nThe landscape of IoT botnet detection has been extensively researched, with numerous studies focusing on the development of network-based intrusion detection systems (NIDS) that utilize artificial intelligence (AI). Despite the impressive performance of existing research in detecting botnet attacks, a significant gap remains in their prevention and early-stage detection. Most current methodologies are centered on recognizing and mitigating botnet attacks after their occurrence, overlooking the crucial need for proactive and anticipatory measures to prevent these threats before they materialize. This situation underscores a broader issue within the field: a notable deficiency in the early detection of IoT bots.\nFurthermore, reducing the detection delay is critically important, both in the event of actual attacks and in the stages leading up to them. Minimizing this delay is vital to limit the impact of the infection and prevent the spread of bot malware throughout the network. Nonetheless, only a few existing studies have concentrated on reducing this response time. Our study aims to minimize the detection delay by conducting a thorough investigation of the representation of network traffic"}, {"title": "II. RELATED WORK", "content": "The increasing sophistication of IoT botnets necessitates advanced detection methodologies that not only identify threats but do so promptly to mitigate potential damage. Recent research in this domain has paved the way for various innovative detection strategies, each contributing uniquely to the field's advancement. This section reviews these contributions, particularly emphasizing the evolution towards early-stage and rapid detection mechanisms.\nWei et al. [4] developed a deep learning framework targeting early-stage IoT botnet detection, notable for its use of a 5-second detection window. This approach leverages packet payload-independent features, marking a significant step towards accurate and timely identification of network anomalies associated with botnet activities. Nguyen et al. [5] explored the potential of collaborative machine learning models in the early detection of IoT botnets, assessing various algorithms such as Support Vector Machine and K-Nearest Neighbors. Their work contributes valuable insights into the effectiveness of machine learning techniques in identifying botnet threats at an incipient stage. In a related effort, Nguyen et al. [6] enhanced detection methodologies through a hybrid model that integrates PSI-rooted subgraph features, focusing on combining static and dynamic analysis to improve detection precision. While their model advances the detection capabilities, it primarily emphasizes the identification rather than the swift response to IoT botnet threats. Bojarajulu et al. [7] proposed a novel optimization strategy, SMIE (Slime Mould with Immunity Evolution), to optimize a hybrid classifier comprising Bidirectional Gated Recurrent Units (Bi-GRU) and Recurrent Neural Networks (RNN). This approach signifies an important development in enhancing the accuracy of botnet detection mechanisms.\nDespite these advancements, a gap remains in the field for an approach that integrates the benefits of early detection with the requisite speed to respond to threats effectively. The present study aims to fill this gap by proposing a detection methodology that not only identifies IoT botnets at an early stage but does so with a significantly reduced detection time. Our approach is designed to offer a rapid response capability, crucial for limiting the impact of botnet attacks on IoT systems, thereby advancing beyond the current state-of-the-art in both detection timeliness and efficiency."}, {"title": "III. PROPOSED METHODOLOGY", "content": "This section outlines the methodology for network traffic analysis, considering both unidirectional and bidirectional flows, as well as packet formats. It explores the features critical for representing traffic and discusses the selection process for identifying those that best characterize the traffic patterns. Finally, it delves into the modeling of traffic using different"}, {"title": "A. Network traffic representation", "content": "1) Flow and features extraction: We consider both packet-based and flow-based network traffic formats for botnet detection. To identify traffic flows, we utilize 5-tuple information, which includes the source port number, destination port number, and protocol, but exclude source and destination IP addresses to protect user privacy. For each extracted flow, we calculate a set of features within a specified time window, applying the same feature set for packet-based analysis as well. Detailed descriptions of the features calculated for bidirectional flows are available in [8], while in-depth explanations for unidirectional flows and packet-based analysis can be found in [9]. To further ensure user privacy and avoid biased outcomes, we also exclude payload details, source and destination ports, and timestamps. The network features fall into the following four main categories:\n\u2022 Packet-Based: This category focuses on metrics related to individual packets, such as their counts and transmission rates. It is crucial for evaluating the volume and flow patterns within the network, providing insights into traffic density and potential congestion points.\n\u2022 Byte-Based: These features examine the volume of data transmitted, encompassing total bytes and sizes of packets. They are key to assessing the network's load and utilization, helping to identify significant data transfers and understand bandwidth consumption.\n\u2022 Time-Based: Time-based metrics capture the temporal characteristics of network traffic, including flow durations and the intervals between packet transmissions. They offer valuable perspectives on the timing of network activities, highlighting patterns of usage and detecting irregular or anomalous behaviors.\n\u2022 Protocol-Based: Derived from specific protocol information, such as TCP/UDP protocols and various header details, this category is instrumental in distinguishing types of network traffic.\n2) Features selection: Our objective is to refine the features set, retaining only those features that are truly pertinent. Considering that this study adopts a realistic configuration,"}, {"title": "B. Botnet Network traffic detection", "content": "Our methodology is designed to accurately model the baseline network traffic of connected devices, identifying any deviations from established patterns as potential security threats. To accurately model the normal network traffic pattern of IoT devices, we rigorously assess the feasibility and effectiveness of our approach by scrutinizing the following five prominent semi-supervised learning techniques. The selected algorithms exemplify varied semi-supervised detection methods: Elliptic Envelope defines geometric boundaries to identify outliers, Isolation Forest employs ensembles for complex pattern detection, Local Outlier Factor uses clustering for nuanced analysis, and Autoencoder leverages neural networks for subtle behavior detection. Brief descriptions of their functions follow.\n\u2022 Isolation Forest (IF) [11]: Utilizes Isolation Trees to detect anomalies, with the anomaly score $s(x, n)$ reflecting the ease of isolating a point. The score is calculated as:\n$s(x,n) = 2^{\\frac{-E(h(x))}{c(n)}}$ \nwhere $E(h(x))$ is the average path length to isolate the point in iTrees, and $c(n)$ is a normalization factor based on the dataset size n.\n\u2022 Elliptic Envelope (EE) [12]: Encloses data points within an ellipse, assuming Gaussian distribution. Outliers are identified using the Mahalanobis distance $D_M(x)$:\n$D_M(x) = \\sqrt{(x - \\mu)^TS^{-1}(x - \\mu)}$\nPoints with $D_M(x)$ exceeding a threshold are flagged as outliers.\n\u2022 Local Outlier Factor (LOF) [13]: Identifies outliers by comparing local density. The LOF score for a point x is given by:\n$LOF_k(x) = \\frac{\\sum_{y \\in N_k(x)} \\frac{lrd_k(y)}{lrd_k(x)}}{ |N_k(x)| }$\nThis score indicates the extent to which a point is an outlier based on its neighborhood density.\n\u2022 One-Class SVM (OSVM) [14]: Separates data points from the origin in a high-dimensional space. The optimization problem is:\n$minimize_{\\omega, \\xi_i, \\rho} = \\frac{1}{2}||w||^2 + \\frac{1}{\\nu n} \\sum_{i=1}^{n} \\xi_i - \\rho$\n The decision function $f(x)$ classifies points as normal or anomalous:\n$f(x) = sgn((w. \\varphi(x)) \u2013 \\rho)$\n\u2022 Deep Autoencoders (AE): Detects anomalies through the reconstruction error $E(x)$:\n$E(x) = ||x \u2212 x||^2$\nA high reconstruction error indicates an anomaly, due to significant deviation from the normal data pattern."}, {"title": "IV. PERFORMANCE EVALUATION", "content": "A. Datasets generation\nOur study leveraged the Aposemat IoT-23 dataset [15], sourced from the Stratosphere Laboratory at CTU University, Czech Republic. This dataset contains twenty-three scenarios of IoT network traffic, including real malware infections and benign traffic. Due to the IoT-23 dataset's vast size, we couldn't analyze it in full. Instead, we chose representative samples from each scenario to capture the diversity of bot malware and activities. We developed scripts leveraging two distinct traffic exporters to process network flows: CICFlowMeter [8] for extracting bidirectional flows and Tranalyzer [9] for unidirectional flow extraction. For comprehensive details on the features computed for bidirectional flows, the reader is directed to [8]. Similarly, in-depth analyses concerning unidirectional flows and packet-based assessments are thoroughly documented in [9]. From the initial dataset consisting of PCAP captures, we meticulously curated three distinct datasets: one containing bidirectional flows, a second comprising unidirectional flows, and a third dedicated to packet-level data. The distribution of samples by dataset and type, following data preprocessing operations such as cleaning, converting categorical attributes to numerical format, and normalization, is depicted in Table I.\nB. Experimental results\nWe employed the Scikit-learn package for the implementation of the anomaly detection models. These models were trained and tested within the Google Colab cloud environment. We utilized a random search, a lightweight and effective method, to identify the optimal combination of hyperparameters. Additionally, we conducted a 5-fold cross-validation to ensure the robustness of our models. The model evaluation was based on the performance metrics detailed below:\n\u2022 $Precision: \\frac{TP}{TP+FP}$\n\u2022 $Recall: \\frac{TP}{TP+FN}$\n\u2022 $Accuracy: \\frac{TP+TN}{TP+FN+FP+TN}$\n\u2022 FPR (False Positive Rate): $\\frac{FP}{FP+TN}$\n\u2022 F1-Score: $F1\\_Score = \\frac{2xTP}{2xTP+FP+FN}$\n\u2022 AUC (Area Under the ROC Curve): Measures the entire two-dimensional area underneath the entire ROC curve from (0,0) to (1,1)"}, {"title": "1) Detection performances", "content": ": Upon analyzing the performance metrics presented in Table II, OSVM stands out as the best-performing classifier across a variety of traffic types, including bidirectional, unidirectional flows, and packet-based formats. Notably, its performance in packet-based traffic is exceptional, demonstrating a perfect detection rate (recall) alongside a remarkably low false alarm rate (FPR). This efficacy is further evidenced by a high AUC score, underscoring OSVM's capability to accurately differentiate between normal and bot traffic with minimal error. Therefore, the optimal configuration for detecting botnet traffic involves utilizing OSVM with network traffic represented in packet format. For unidirectional flow and packet traffic, the autoencoder is the second-best choice, with its high recall and precision. AE is especially useful in cases where One-Class SVM (OSVM) cannot be used, like in federated learning."}, {"title": "2) Detection Delay", "content": ": Considering packet-level monitoring, the detection delay is measured in milliseconds, enabling near real-time detection for immediate identification and mitigation of botnet traffic. For unidirectional flow, which demonstrates the second-best performance, we tested various sampling time windows to determine the minimal detection delay that does not compromise the system's performance. Experimenting with different Time Window (TW) durations aimed to find an optimal balance for quick and accurate detection. Contrary to our initial assumption that larger TWs would enhance detection capabilities, as indicated in Table III, a 1-second TW size surprisingly yielded the highest precision, accuracy, and F1-score while maintaining the lowest false positive rate. However, it is important to note that detection delay is influenced by various factors, including the traffic volume, system resources, feature extraction time, and implementation efficiency. In the best-case scenario, the detection delay could be at the lower end of its range, leaning towards milliseconds for packet-based detection, and around 1 second for unidirectional flow-based detection."}, {"title": "3) Features selection", "content": ": In the development of our anomaly detection framework, the selection of an appropriate feature set is critical to effectively model the normal network pattern. Our analysis has led us to a feature set predominantly composed of Time-Based and Protocol-Based attributes, which together represent an impressive 75.38% of the total features used\u2014specifically, 36.92% for Time-Based features and 38.46% for Protocol-Based features. This composition was chosen based on the premise that the nuances of temporal communication patterns and protocol-specific data are instrumental in establishing a baseline of 'normal' traffic. Feature selection, as depicted in Table IV, achieved a reduction of 35%, bringing the number of features down from 79 to 51. Considering the AUC, there was a very slight decrease; overall, the performance remained the same, even with a reduction of more than one-third of the features. Through this process, the model was efficiently streamlined, preserving its efficacy with a notably reduced set of features."}, {"title": "4) Discussion", "content": ": Given that packet-based detection achieves a 100% detection rate for all traffic types, we now examine the performance of detection in the case of unidirectional flow-based detection. Based on the confusion matrices presented in Figure 2, we observe perfect detection of scan flows and download inductions. It is particularly noteworthy how we have managed to anticipate the detection of C2 traffic, which poses a greater challenge compared to previous traffic types, achieving an impressive success rate of 94%. As for Heartbeat traffic, the detection rate is at 76%, making it the most difficult type of traffic to detect. In the Mirai botnet, HeartBeat is often associated with a type of communication used to maintain connection and check the presence of a bot within the botnet. The heartbeat typically involves periodic, simple messages sent between the bot and the C2 server. For Mirai, these heartbeat messages can be very basic, just a few bytes, to confirm the bot is still active and connected."}, {"title": "V. CONCLUSION", "content": "This study has conclusively demonstrated the feasibility of effectively modeling normal network traffic for IoT devices. By leveraging packet-based and unidirectional flow formats, alongside Time-Based and Protocol-Based features, we have optimized the representation of network traffic. The"}]}