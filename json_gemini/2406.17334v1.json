{"title": "Joint Admission Control and Resource Allocation of Virtual Network Embedding via Hierarchical Deep Reinforcement Learning", "authors": ["Tianfu Wang", "Li Shen", "Qilin Fan", "Tong Xu", "Tongliang Liu", "Hui Xiong"], "abstract": "As an essential resource management problem in network virtualization, virtual network embedding (VNE) aims to allocate the finite resources of physical network to sequentially arriving virtual network requests (VNRs) with different resource demands. Since this is an NP-hard combinatorial optimization problem, many efforts have been made to provide viable solutions. However, most existing approaches have either ignored the admission control of VNRs, which has a potential impact on long-term performances, or not fully exploited the temporal and topological features of the physical network and VNRs. In this paper, we propose a deep Hierarchical Reinforcement Learning approach to learn a joint Admission Control and Resource Allocation policy for VNE, named HRL-ACRA. Specifically, the whole VNE process is decomposed into an upper-level policy for deciding whether to admit the arriving VNR or not and a lower-level policy for allocating resources of the physical network to meet the requirement of VNR through the HRL approach. Considering the proximal policy optimization as the basic training algorithm, we also adopt the average reward method to address the infinite horizon problem of the upper-level agent and design a customized multi-objective intrinsic reward to alleviate the sparse reward issue of the lower-level agent. Moreover, we develop a deep feature-aware graph neural network to capture the features of VNR and physical network and exploit a sequence-to-sequence model to generate embedding actions iteratively. Finally, extensive experiments are conducted in various settings, and show that HRL-ACRA outperforms state-of-the-art baselines in terms of both the acceptance ratio and long-term average revenue. Our code is available at https://github.com/GeminiLight/hrl-acra.", "sections": [{"title": "1 INTRODUCTION", "content": "As the demand for Quality of Service (QoS) has been continuously strengthened, research on efficient network resource management architectures has received massive attention from academia and industry. Traditional network management architectures directly execute diverse network functions on different dedicated servers, confronted with the increasing pressure of network services. Network virtualization has emerged as one of the promising approaches to overcome this problem, which is capable of decoupling the network services from their underlying hardware and empowering the programmability of services [1]. By integrating advanced technologies such as software-defined networking (SDN) and network function virtualization (NFV), network virtualization has become an essential part of next-generation networks for its superior capabilities to improve network resource utilization and reduce network difficulty management significantly [2].\nIn the network virtualization framework, user network requests are constructed as graph-structured virtual network requests (VNRs), consisting of virtual network functions and virtual links, dynamically arriving at the physical network to acquire resources. Then, the Internet providers will attempt to allocate node and link resources of physical network for VNRs under various constraints. To maximize the revenue of Internet providers, we need to decide which VNRs to be accepted and how resources to be allocated, constituting an NP-hard combinatorial optimization problem, called virtual network embedding (VNE) [3].\nFor this fundamental network management problem, many research efforts have been devoted to improving the performance of VNE. Classical approaches are categorized as the exact [4], [5], [6], the heuristic [7], [8], [9] and the meta-heuristic [10], [11], [12] ones. For exact algorithms, they aim at finding the optimal embedding solutions yet result in high computational complexity. Heuristic methods require rich expert knowledge and trial experience to design efficient heuristics. At the same time, meta-heuristic approaches are often non-deterministic and depend on extensive searches to discover high-quality solutions.\nRecently, several learning-based approaches [13], [14], [15] have been proposed due to their excellent abilities to build better heuristics from data automatically. However, these works pose two challenges. First, they rely on manually-extracted features or merely exploit partial latent temporal or topological features of the physical network and VNRs. Insufficient representation capability will limit the accuracy of VNE decisions. Second, most existing approaches can only optimize resource allocation for the current incoming VNR, ignoring the admission control of VNRs which has a potential impact on long-term benefits. VNRs need to compete for the limited resources provided by the physical network. An embedded VNR will release the resource occupied until its service completes. If a VNR is embedded with a low-quality solution, the network system will remain in a low resource utilization state until this VNR completes. As a result, more VNRS arriving later may be rejected due to scarce resources. Therefore, the uncertainty of upcoming VNRs presents a critical challenge in promoting the long-term benefits of Internet providers.\nTo address the above-mentioned challenges, we propose a Hierarchical Reinforcement Learning (RL) approach to learn a joint Admission Control and Resource Allocation policy for online VNE, named HRL-ACRA. Admission control and resource allocation are considered as upper-level and lower-level tasks in a hierarchical framework. We model both tasks as Markov decision processes (MDPs) and develop a hierarchical optimization framework based on the proximal policy optimization (PPO) [16] algorithm to train the corresponding policies. For each arriving VNR, an upper-level policy is responsible for deciding whether to admit it or not. The early rejection of inappropriate VNRs could reduce the unnecessary embedding process, thus improving resource utilization and accelerating the deployment speed. A lower-level policy is appointed to allocate resources of the physical network to meet the requirement of VNR. Specially, the average revenue method [17] is adopted to address the infinite horizon problem of the upper-level agent, and a multi-objective intrinsic reward is customized to alleviate the sparse reward issue of the lower-level agent. To fully use topological information and temporal relationship, we also design some deep neural network modules for sufficient feature extraction. Thanks to these carefully designed modules, HRL-ACRA achieves state-of-the-art (SOTA) performance with respect to several criteria.\nTo the end, our contributions are summarized as four-fold:\n\u2022\tWe propose a hierarchical RL method for the admission control-aware online VNE problem. We cast admission control and resource allocation as upper-level and lower-level tasks in a hierarchical framework, model them as MDPs, and learn a joint policy. The upper-level agent takes the long-term benefits into consideration, while the lower-level agent pays close attention to the short-term profit.\n\u2022\tTo address the infinite horizon problem caused by the continuous interactions between the upper-level agent and incoming VNRs, we adopt the average revenue method to enhance the upper-level agent to treat the current and future revenue more equally. We also customize a multi-objective intrinsic reward with multiple local indicators to alleviate the sparse reward issue, encouraging the lower-level agent to perform exploration.\n\u2022\tWe design a deep feature-aware graph neural network (GNN) with link feature awareness to make full use of topological features of the physical network and VNRs. Exploiting the topological information and temporal dependence simultaneously, we employ a sequence-to-sequence (Seq2seq) model based on this GNN and gated recurrent unit (GRU) to generate embedding actions iteratively.\n\u2022\tTo simulate various real network situations, we conduct simulation experiments by adjusting the environment parameters. Extensive experimental results demonstrate that the proposed approach outperforms other SOTA algorithms on acceptance ratio and long-term average revenue."}, {"title": "2 RELATED WORK", "content": "Since the VNE problem is critical but challenging in network virtualization, studies for tackling it have received tremendous attention. In this section, we summarize the related works in two categories, the traditional and learning-based methods, and their brief information is concluded in Table 1."}, {"title": "2.1 Traditional Methods", "content": "We categorize the traditional methods into three categories, the exact, heuristic, and meta-heuristic algorithms.\nFor the exact algorithms, the VNE problem can be typically formulated as mathematical programming. Chowdhury et al. [4] transformed VNE as a mixed-integer linear programming (MILP) by physical network augmentation and constraint relaxation, coordinating node, and link Mapping. Shahriar et al. [5] formulated VNE as an integer linear programming (ILP) problem, taking spare capacity location and request survivability into consideration. Diallo et al. [6] developed an ILP-based method for VNR splitting and a MILP-based approach for resource mapping to solve the multi-domain VNE problem. However, these algorithms cannot handle online deployment scenarios for their high computational complexity.\nInstead of achieving optimal solutions, a wealth of heuristics-based algorithms are proposed to find feasible solutions quickly. Among them, node ranking is the primary strategy. Gong et al. [7] applied global resource capacity to evaluate the importance of nodes of the physical network and virtual network based on a random walk model, and then used the greedy matching strategy and the breadth-first search algorithm to conduct the node mapping and link mapping, respectively. A simple admission control strategy based on revenue-to-cost also was proposed to improve the long-term benefits. Still, it only focused on the embedding solution of the current VNR without considering future VNRs. Similarly, Zhang et al. [8] adopted a capacity-based metric to sort nodes with multiple resource types.\nEven though these algorithms are capable of generating feasible solutions quickly, they incur high blocking rates. Some schemes are also proposed to further improve the solution quality of VNE problems by handling failure situations. Yang et al. [19] studied the NP-hardness of the delay-sensitive and availability-aware VNE problem, and introduced a recursive heuristic method using the restricted shortest path algorithm method to solve it. Fan et al. [9] designed a priority of location VNE algorithm, following node proximity sensing and path comprehensive evaluation. Lin et al. [27] designed several heuristic algorithms for energy-aware VNE problem based on auxiliary graph building methods. Nevertheless, designing heuristics relies on rich expert knowledge and trial experience and only accommodates a few specific scenarios.\nMoreover, many meta-heuristic algorithms have also been adopted to address the VNE problem and obtain near-optimal"}, {"title": "2.2 Learning-based Methods", "content": "Recently, machine learning has proved to be a promising direction for solving combinatorial optimization problems. According to the nature of the available learning signal, machine learning is usually categorized into three major categories: supervised learning (SL), unsupervised learning (uSL), and reinforcement learning (RL). Several works investigate machine learning applications to the VNE problem, and we introduce some of them following the three categories mentioned above.\nSupervised learning has achieved great success in image recognition, text classification, and other scenarios. Treating the admission control mechanism of VNE as a binary classification problem, Andreas et al. [20] applied this idea to improve the existing VNE algorithm's performance by utilizing a Recurrent Neural Network (RNN) to judge whether to admit or reject arriving VNRs, but only considered the rejection of infeasible VNRs to avoid wasting time. Different from supervised learning relying on labeled samples, unsupervised learning is capable of discovering underlying structures in unlabeled data. To reduce the large search space, Blenk et al. [13] applied the Hopfield neural network to extract subgraphs fed to other existing VNE algorithms, resulting in faster and more resource-efficient embeddings. Habibi et al. [21] adopted the graph autoencoder (GAE) to cluster physical nodes and then randomly sample one node as the initial center to execute the breadth-first search (BFS) method in each cluster.\nThe embedding process of VNE can be regarded as a series of decisions, and some studies tackled this problem by reinforcement learning (RL). Modeling the node selection process as a Markov decision process (MDP), Haeri et al. [14] utilized the Monte Carlo tree search (MCTS) to improve the revenue-to-cost ratio. Wang et al. [23] trained a multi-layer perceptron (MLP) model with temporal-difference learning to approximate the value function of VNE states. Using a convolutional neural network (CNN) to extract the attributes of physical nodes and training it with REINFORCE algorithm, Li et al. [24] proposed a double-layer RL-based framework for VNE to learn the node mapping and link mapping process jointly. Yao et al. [25] designed a sequence-to-sequence model based on a recurrent neural network (RNN) to exploit the historical information of previous decisions, and train with the REINFORCE algorithm. But these traditional neural networks often exhibit limited representational capabilities when dealing with non-Euclidean data, requiring manual topological feature extraction like closeness and betweenness from graph theory. In contrast, graph neural networks (GNNs) excel at automatically mining deep features from graph data, generating richer representations [28]. Yan et al. [15] presented an RL-based method with a graph convolutional network (GCN) [29] to extract state features from the physical network, but did not explicitly exploit edge features. Cheng et al. [26] proposed a hierarchical RL control framework to select the VNR from batch candidates stored in the time window, where the GCN is used for the rough feature exploitation. However, their subagent for admission control only works for offline settings, e.g., within the time window batch, and is not unqualified to tackle the online VNE where future VNRs are not known in advance. In conclusion, existing RL-based works only concentrate on the resource allocation of arriving VNRs, or exploit partial latent temporal or topological features of the physical network and VNRs.\nCompared with existing learning-based works, HRL-ACRA learns a joint admission control and resource allocation policy based on a hierarchical framework, capable of perceiving the long-term benefits and short-term interests. The well-designed neural network model also enables extracting sufficient temporal relationships and topological structures."}, {"title": "3 PRELIMINARIES", "content": null}, {"title": "3.1 Admission control-aware Online VNE", "content": null}, {"title": "3.1.1 System Description", "content": "Figure 1 illustrates an example of the admission control-aware VNE Problem. In the practical network system, user services are virtualized as the virtual network requests (VNRs) set V, dynamically requesting resources provided by the physical network.\n\u2022\tPhysical Network is defined as a weighted undirected graph GP = (NP, LP), where NP and LP respectively denote a set of physical nodes and a collection of physical links. The remaining node resources capacity of each physical node n \u2208 NP is represented by Cnr, while the remaining link resources capacity of each physical link l \u2208 LP is characterized as Blp.\n\u2022\tVirtual Network Request is defined as a tuple v = (Gu, Au), where Gu denotes a virtual network and Au represents its global attributes. Here, Au denotes the global attributes, e.g., lifetime. We describe the virtual network as a weighted undirected graph Gu = (Nu, Lu), where Nu refers to a set of virtual nodes, and Lu is a collection of virtual links. Similarly, each virtual node nu \u2208 Nu specifies node resources demand Cnv, while each virtual link lu \u2208 Lu indicates link resources demand B lv.\nIn standard online VNE workflow, the system will always attempt to allocate resources of physical network resources to each arriving VNR. The VNR will only be accepted if all virtual nodes and virtual links are mapped to physical nodes and physical paths, respectively, under the condition that the constraints are satisfied. Once a VNR is successfully embedded, the resources will be occupied until the service completes. Since embedded VNRS cannot be discarded until their lifetime expires, each incoming VNR needs to compete for limited resources provided by the physical network with the currently serving VNRs. Therefore, the uncertainty of upcoming VNRs results in a critical challenge to promoting the long-term benefits of Internet providers.\nAdmission control (AC) is a proactive scheduling mechanism that has a potential impact on long-term benefits. It decides whether to admit or reject the incoming VNR, according to the VNR's requirements and the current situation of physical network. Considering the resource availability of the current physical network and the future VNR demand, the system can adaptively reject some VNRs to reserve resources for subsequent VNRs to improve long-term benefits, including acceptance ratio and long-term average revenue. For the unadmitted VNRs, they can further refine their orchestration [30] to enhance the probability of finding a high-quality feasible solution and request again. Additionally, early rejecting of VNRs in which no feasible solution exists and skipping the resource allocation phase contributes to speeding up the decision-making. Here, we emphasize that the status of admission control has long been ignored by most existing works. In this work, we try to utilize the hierarchical RL method to solve the VNE problem with more practical and challenging settings by jointly considering admission control and resource allocation. The detailed description of the admission control-aware VNE procedure is summarized in Algorithm 1."}, {"title": "3.1.2 Problem Formulation", "content": "Embedding a VNR into the physical network can be defined as a mapping process from Gu to a subgraph of physical network GP with various constraints.\n$$f : G^v \\rightarrow G^{p'}.$$\nIt is composed of node mapping and link mapping, where massive discrete variables need to be decided.\n\u2022\tNode Mapping is defined to assign all virtual nodes nv \u2208 Nu to feasible physical nodes np \u2208 NP, constrained by:\n$$\\sum_{n^p \\in N^P} \\varphi^{n_v}_{n^p} = 1, \\quad n_v \\in N^v,$$\n$$\\sum_{n_v \\in N^v} \\varphi^{n_v}_{n^p} \\leq 1, \\quad n^p \\in N^P,$$\n$$C_{n_v} \\leq C_{n^p}, \\quad n_v \\in N^v, \\forall n^p \\in N^P,$$\nwhere $\\varphi^{n_v}_{n^p}$ is a binary variable that is set 1 when nv is embedded in np. Cnv and Cnr denote node resource requirement and remaining capacity. Eq. (2) and Eq. (3) are related to the relationship between every virtual node nv and physical node np. Each virtual node n \u2208 G of the same virtual network must be placed on different network nodes. Eq. (4) refers to the node resource constraint, i.e., the available resources of each physical node must exceed the resource request of the virtual node carried by it.\n\u2022\tLink Mapping is defined to embed each virtual links lu \u2208 LU into one loop-free physical path pl \u2208 PP, constrained by:\n$$B_{lv} < B_{lp}, \\quad \\forall l^p \\in p$$ \nwhere PP is defined as a set of all loop-free physical paths in the physical network. pl is one element of PP that connects two physical nodes that accommodate the source and destination nodes of the virtual link lv.  Blv and Bip denote the bandwidth resource requirement and remaining capacity. Eq. (5) means the"}, {"title": "3.1.3 Performance Evaluation", "content": "The most important performance evaluation metrics are acceptance ratio (AC_Ratio), long-term average revenue (LA_Rev), and running time [31], which are defined as:\n\u2022\tAcceptance Ratio measures the QoS with the number of the accepted VNRs, which is defined as:\n$$AC\\_Ratio = \\lim_{T \\rightarrow \\infty} \\frac{\\sum_{v \\in V_T} I(v)}{|V_T|}$$\nwhere II(v) is the indicator function that returns 1 if the VNR v is accepted and 0 otherwise.\n\u2022\tLong-Term Average Revenue is a direct indicator to reflect the revenue of Internet providers, which is defined as:\n$$LA\\_Rev = \\lim_{T \\rightarrow \\infty} \\frac{\\sum_{v \\in V_T} I(v)(w_a + w_b * A_v) Rev(G^v)}{|V_T|}$$\nwhere VT = {v0 < t < T} is the set of VNRs arriving before time instance T.  A donates the lifetime of VNR v. Wa and wb are the weight of starting price and the weight of the service time charge, respectively. Internet providers can make various pricing strategies by deciding the value of wa and wb to control the two components of price. Rev(G) is the basic revenue of a VNR calculated by the total amount of resource requests of its nodes and links, computed by\n$$Rev(G) = \\sum_{n \\in N^v} C_n + \\sum_{l_v\\in L_U} B_{lv}$$\n\u2022\tRunning Time describes the time consumption of the VNE algorithm to process VNRs. In practice, a VNE algorithm needs to face online and dynamic scenarios, which requires a high real-time guarantee. Consequently, it is necessary that the used VNE algorithm should balance the running time and performance, arranging the arriving VNR as soon as possible to meet the real-time requirements.\nIn this work, we jointly optimize the long-term average revenue and acceptance ratio, while considering running time."}, {"title": "3.2 Graph Neural Network", "content": "Graph neural networks (GNN) that can operate on non-European data have become a hot topic in the field of deep learning recently, which enables deep learning technology to be competent for more complex tasks. Based on the message propagation mechanism between nodes, GNN models the relationships and dependencies between nodes to extract the deep-level information in the graph-structured data [28]. A variety of GNNs can be divided into several categories, one of which is the spatial-based graph convolutional neural network. By designing an aggregation function and adopting a message propagation mechanism, the spatial-based graph convolutional neural network updates the central node's representation by aggregating its neighbor nodes' representation.\nGraph attention network (GAT) [32] is a typically spatial-based graph convolutional neural that integrates the self-attention mechanism into the propagation step. To obtain the new representation of one node, GAT computes adaptive attention coefficients between two nodes to aggregate representations of neighbor nodes. Formally, the graph convolutional operation of GAT l-th layer is defined by:\n$$h_i^{(l)} = \\sigma(\\sum_{j \\in N(i) \\cup {i}} a_{ij} Wh^{(l-1)}_j)$$\nHere, || is the concatenation operation. N(i) is the set of node i's neighbor nodes and Wa is a trainable attention weight vector.\nGraph pooling networks are usually utilized to obtain the global representation of one whole graph for conducting graph-level tasks. Graph attention pooling (GAP) is one of the powerful graph pooling networks that considers both node features and graph topology based on self-attention [33]. GAP aggregates all node representations h by doing a weighted summation, where a context is employed to compute the attention coefficients. The context is defined as the linear transformation of all node"}, {"title": "4 METHODOLOGY", "content": "To solve this challenging combinatorial optimization problem of VNE, we propose a Hierarchical Reinforcement Learning based approach to learn a joint Admission Control and Resource Allocation policy of VNE, named HRL-ACRA. As illustrated in Figure 3, we cast the admission control and resource allocation as upper-level and lower-level tasks, respectively. The upper-level agent has a foresight capability, whose goal is to optimize the long-term benefits, including the acceptance ratio and long-term revenue. According to the current situation of physical network and the request information of incoming VNR, it decides whether to admit the arriving VNR. The lower-level agent focuses on the resource allocation for admitted VNRs to generate high-quality solutions. To reduce the action space, we utilize a sequence-to-sequence (seq2eq) model to construct the solution iteratively rather than in one step, i.e., the embedding actions of each virtual node are generated sequentially. Considering the state of VNRs is consistent, this seq2seq model consists of a static encoder and a dynamic decoder. The encoder extracts the decision order and features of nodes and links as node representations. The decoder selects a physical node to accommodate the current virtual node iteratively, based on the information aggregated by a fusion module at each timestep. Two agents are trained by the proximal policy optimization (PPO) method."}, {"title": "4.1 Upper-level Agent", "content": "The upper-level agent is responsible for deciding on admission or rejection of arriving VNRs, which optimizes the acceptance ratio and the long-term revenue of Internet providers."}, {"title": "4.1.1 MDP Definition", "content": "We model whether to admit the arriving VNR as an MDP, which contains three key elements: state, action, and reward.\n\u2022\tState. The upper-level state consists of the request information of incoming VNR and the current situation of the physical network, shown in Table 2. Specifically, the request information of incoming VNR includes node resource demands and link resource requirements, topology structure, and lifetime. And the current situation of the physical network is composed of maximum and available resources of all nodes and links, and topology structure.\n\u2022\tAction. The upper-level action a \u2208 A = {0, 1} is a binary variable that indicates whether to admit the incoming VNR.\n\u2022\tReward. The extrinsic reward for the upper-level agent is designed to guide to optimize the long-term average revenue, also considering the revenue-to-cost ratio and avoidance of failed embedding to enable assessment of more situations, defined as:\n$$r = \\begin{cases}\\frac{Rev(G)}{Cost(G)}, & \\text{if G is admitted and embedded,}\\\\ -W_1, & \\text{if } G^u \\text{ is admitted but not embedded,} \\\\ 0, & \\text{otherwise.} \\end{cases}$$\nHere, $\\frac{Rev(G)}{Cost(G)}$ denotes the revenue-to-cost ratio. Similar to the $Rev(G)$, $Cost(G) = \\sum_{n \\in N_v} C_n^2 + \\sum_{l_v\\in L_U} \\sum_{i \\in p} B_{lv}$\nis computed by the total amount of resource consumption for embedding Gu. A higher revenue-to-cost ratio means fewer resources are consumed to embed the current VNR, saving more resources for future VNRs. When an arriving VNR is admitted and then successfully embedded, we return a positive reward to encourage the agent to satisfy as many requests as possible. Considering different embedding solutions for the same VNR and the physical network, a better revenue-to-cost ratio can contribute to greater reward. For admitted but unsuccessfully embedded VNRs, we feedback a small negative reward -W\u2081 to prevent the agent from admitting infeasible VNRs, which contributes to omitting the resource allocation phase and improving the decision speed."}, {"title": "4.1.2 Policy Network", "content": "Since both the physical network and VNRs are graph-structured, GNN is a suitable and powerful feature extractor that is employed in our framework. GCN [29] and GAT [32] are the two best representative GNN models. GAT allows for adaptive weights for each neighbor node when aggregating the node features, while GCN assigns the fixed weight to all neighbor nodes. This attention mechanism enables GAT to adaptively model the importance of different neighborhood nodes and capture more fine-grained information about the neighborhood. Therefore, GAT is more powerful and flexible than GCN, especially in our tasks where fine-grained information about the graph structure is important.\nUnlike traditional graph tasks, link features are significant for VNE to perceive bandwidth resources. To engage bandwidth awareness with our deep model, we extend the GAT to blend link features into nodes during the propagation process. Besides, the shortest paths determined during the link mapping stage may consist of multiple hops. As such, it is necessary to build a deep GNN to learn a comprehensive node representation by leveraging information from multi-hop neighbors. However, the use of many layers in the construction of a GNN can lead to the problem of over-smoothing. To mitigate this issue, we deepen the GNN by using initial residual connections [34] and identity mapping [35].\nGAT is capable of extracting node features and topology information from non-European data. Still, it is not directly applicable to the VNE problem where link features play an important role. Consequently, we extend GAT to blend link features into node embedding, bringing awareness of bandwidth resources. Based on Eq. (10), introducing link features into the calculation of coefficients, the attention coefficient between node i and j is computed by:\n$$a_{i,j} = \\frac{exp (\\sigma (W_a [h_i^{(l)}||h_j^{(l)} || h_{i,j}]))}{\\sum_{k \\in N(i) \\cup {i}} exp (\\sigma (W_a [h_i^{(l)}||h_k^{(l)} || h_{i,k}]))}$$\nwhere $h_{i,j} = MLP(B_{e_{i,j}})$ is the edge representation of link eij, obtained by pass its link features  Bei,j into an MLP.\nMoreover, deepening the number of GNN layers has been shown to be more effective in mining information from the graph, but it also confronts the challenge of over-smoothing. Therefore, we customize an attribute-aware GNN using the initial residual connection and identity mapping to alleviate this problem. Formally, the operation of this GNN l-th layer is defined by:\n$$h_i^{(l)} = \\sigma[\\sum_{j \\in N(i) \\cup {i}} ((1 - \\alpha)a_{i,j}h_j^{(l-1)} + \\alpha h_i^{(0)}))\n((1 - \\beta)I_n + \\beta W)].$$\nHere, \u03b1 and \u03b2 are two hyperparameters denoting the strength of the initial residual connection and the identity mapping, respectively. $h_j^{(0)}$ is the initial node representation of node j. An identity mapping In = f(H(l)) is added to the l-th weight matrix W(e).\nThe direct use of node representations is computation-intensive, we adopt graph attention pooling (GAP) to obtain the graph-level representation based on the attention mechanism [36]. Specifically, when a VNR v arrives in the system, the physical network GP and the virtual network Gu of this VNR are encoded into node representations as hp and hv respectively by this GNN:\n$$\\hat{h}^p = GNN (G^p), \\hat{h}^v = GNN (G^v) .$$\nWe then adopt graph attention pooling (GAP) to obtain the graph-level representations of physical and virtual network. Meanwhile, VNR's global attributes Au are perceivable by MLP:\n$$\\hat{g}^p = GAP (\\hat{h}^p), \\hat{g}^v = GAP (\\hat{h}^v), \\hat{g}^u = MLP (A^v).$$\nWe fuse them with an MLP and then pass the result and last hidden state h to a GRU to receive the current hidden state h':\n$$h' = GRU (MLP (\\hat{g}^p, \\hat{g}^v, \\hat{g}^u), h).$$\nThe final upper-level action probabilities is generated by:\n$$\\uparrow = Softmax (MLP (h'))."}, {"title": "4.2 Lower-level Agent", "content": null}, {"title": "4.2.1 MDP Definition", "content": "When a VNR is admitted by the upper-level agent, the lower-level agent will attempt to find an embedding solution to allocate resources for it. Similarly, we model the resource allocation process of VNE as an MDP, which is defined as follows.\n\u2022\tState. Compared to the upper-level state, the lower-level state needs more detailed information on the resource allocation situation for the same VNR. This is due to the state changes that occur after a virtual node is successfully embedded. Specifically, the lower-level state is composed of the current situation of the physical network and virtual network, and VNR's global attributes, which are similar to the upper-level state. Notably, we design two binary flag features to reflect the status of physical nodes at each timestep, including (1) Selection flag of physical nodes indicates whether the physical nodes were selected. The flag value is 1 if the physical node was already selected; otherwise, 0; (2) Neighbor flag of physical nodes"}, {"title": "4.2.2 Policy Network", "content": "As shown in Figure 4, a seq2seq model, containing a static encoder and a dynamic decoder, is employed to extract the static and dynamic features respectively to seek a trade-off between running time and performance.\n\u2022\tEncoder. For the fixed state of VNR, we adopt a static GNN encoder to learn the feature embedding of each virtual node. Additionally, the decision order of each virtual node is usually preset, which is generally neglected by existing learning-based methods and incapable of being handled by GNN. Therefore, a position encoder [37] is also used to generate the position embedding for each virtual node hp, which is concatenated (CONCAT) with the virtual node's GNN embedding hy to form the VNR's node embedding hv as follow:\n$$h_i^v = GNN (g_i^v), h_i^p = PE (g_i^v),$$\n$$h_i = CONCAT (h_i^v, h_i^p) .$$\n\u2022\tDecoder. At each timestep t, we encode the state of the physical network G with GNN to extract node embeddings and use a GAP layer to congregate them to obtain the graph embedding. Simultaneously, the global attributes of VNR are sent into an MLP as follows:\n$$g^p = GAP (GNN (G)), g^u = MLP (A^u) .$$\nThe fusion embedding at timestep t is renewed by integrating the current virtual node embedding hr, the VNR's global"}, {"title": "4.3 Training Method", "content": "To enhance the stability and efficiency of training, the proximal policy optimization (PPO) [16] is adopted to train two agents. PPO is an improved policy gradient algorithm based on actor-critic architecture, whose objective function is following:\n$$L(\\theta) = min (r(\\theta) \\hat{A}, clip (r(\\theta), 1 - \\epsilon, 1 + \\epsilon) \\cdot \\hat{A}),$$\nwhere $r(\\theta) = \\frac{\\pi_{\\theta}(a_t|s_t)}{\\pi_{\\theta_{old}}(a_t|s_t)}$ denotes the probability ratio defined by the ratio of the current policy with parameter \u03b8 to the pre-update policy with parameter \u03b8old, A represent an estimator of the advantage function computed by the discounted accumulative reward minus the prediction value of critic network, and \u03f5 indicates a hyperparameter clipping the probability ratio."}, {"title": "5 EXPERIMENTS", "content": "In this section, we conduct extensive experiments to demonstrate the effectiveness of HRL-ACRA algorithms, by summarizing the main implementation details and result analysis. Due to the limitation of page length, we place the baseline descriptions, ablation studies, and hyperparameter sensitivity analysis in Appendix."}, {"title": "5.1 Experimental Setup", "content": null}, {"title": "5.1.1 Implementation Details", "content": "Following the settings of most previous works [7", "15": [22], "2-10": "nodes following the uniform distribution, and each pair has a half probability of being connected to form a virtual link. Besides, the demands of VNR for node and link resources are uniformly distributed from 0 to 50.\nAll learning-based models are implemented with PyTorch"}]}