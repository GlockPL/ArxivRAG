{"title": "Beyond Text: Implementing Multimodal Large Language Model-Powered Multi-Agent Systems Using a No-Code Platform", "authors": ["Cheonsu Jeong"], "abstract": "This study proposes the design and implementation of a multimodal LLM-based Multi-Agent System (MAS) using a No-Code platform to address the practical constraints and significant entry barriers in the process of Al technology adoption within enterprises.\nBackground: The adoption of advanced AI technologies, such as Multi-Agent Systems powered by Large Language Models (LLMs), poses significant challenges for many organizations due to high technical complexity and implementation costs. No-Code platforms, which enable the development of Al systems without programming knowledge, have emerged as a potential solution to lower these barriers.\nObjective: This research presents the design and implementation of a multimodal LLM-based Multi-Agent System (MAS) using a No-Code platform, aiming to address the practical challenges of AI adoption in enterprises and demonstrate its effectiveness in automating complex business processes.\nMethods: The proposed system is designed to process multimodal inputs such as text and images, automate tasks through specialized agents, and reduce the technical burden of AI adoption. Key use cases include code generation from image-based notes, Advanced RAG-based question-answering systems, text-based image generation, and video generation using images and prompts. The system's performance is evaluated through various business application scenarios.\nResults: The system demonstrated excellent performance in automating business processes. The efficiency of code generation was improved, document search accuracy was enhanced, and image generation time was reduced. These results validate the system's practicality and scalability.\nConclusion: The research shows that No-Code platforms can democratize Al technology by enabling general users, not just specialists, to utilize AI for enhancing productivity and efficiency. The multimodal LLM-based MAS framework contributes to lowering AI adoption barriers, promoting its widespread use across various industries.", "sections": [{"title": "1. INTRODUCTION", "content": "The rapid advancement of artificial intelligence (AI) technologies has highlighted the importance of Large Language Models (LLMs) across various fields. Generative AI, which leverages vast amounts of training data to create new content such as text, images, audio, and video, has enabled users to easily utilize generative Al services [1]. Notably, generative AI chatbots have reached a level where they can analyze human emotions and intentions to provide appropriate responses [2], and the advent of LLMs has facilitated their application in tasks such as automated conversation generation and translation [3].\nHowever, LLMs may generate responses that conflict with the most recent information and rely on previously trained data, which limits their understanding of new problems or domains [4]. To address these limitations, various solutions have been explored, including domain-specific fine-tuning of LLMs and utilizing internal knowledge to improve reliability through Retrieval-Augmented Generation (RAG) techniques [5].\nAdditionally, generative AI technologies based on extensive datasets have made it easier for users to access services that generate new content such as text, images, audio, and video [1], [6]. Multimodal AI models, such as OpenAI's GPT-4V and GPT-40, demonstrate the capability to integratively process various forms of data, including text, images, and audio [7]. These advancements are driving significant transformations in enterprise environments. Companies are increasingly seeking ways to automate various business processes, such as code generation, RAG-based search, and image processing, using Al technologies. This growing demand underscores the need to enhance productivity and efficiency through AI-driven solutions.\nAdopting Al technologies in enterprises faces several practical challenges. Building and operating high-performance Al systems require specialized developers and advanced technical resources. Particularly, implementing and managing large-scale AI models such as LLMs involves high complexity, significant costs, and extensive time investments, which makes it difficult for many organizations to easily adopt these technologies [8].\nIn this context, the concept of No-Code development platforms has recently gained attention. No-Code platforms allow users to build and manage Al systems without programming knowledge, significantly lowering the barriers to AI adoption. According to a report by the Korea Copyright Commission, it is projected that by 2025, approximately 70% of all applications will be developed using Low-Code or No-Code platforms, highlighting the growth potential of this approach. No-Code development environments enhance the accessibility of AI technologies across organizations, enabling not only developers but also non-technical users to leverage Al tools [9].\nThe objective of this study is to implement a multimodal LLM-based Multi-Agent System (MAS) using No-Code tools and to propose a methodology for effectively integrating AI technologies into business processes without requiring professional developers. To achieve this, the study utilizes workflow-based No-Code platforms such as Flowise to build a system that integrates Multimodal LLMs (MLLMs), image generation, and RAG-based MAS. The feasibility of applying such a system to real-world business processes is evaluated through specific use cases, including analyzing and summarizing captured images for code generation, generating AI-based images, and implementing question-and-answer systems using RAG. Furthermore, the study explores the potential of designing MAS to maximize the specialized roles of agents and create synergies through collaborative operations.\nThe scope of this study is defined from two perspectives: technical and business processes. From a technical perspective, the study employs Flowise as the No-Code development platform, GPT-40 API for MLLMs, Stable Diffusion for image generation, the Ray model for video generation, and vector databases for RAG implementation. From a business process perspective, the study focuses on applying Al systems to practical environments, including code generation processes, document-based Q&A processes, and image creation processes.\nThe research methodology consists of three main approaches: literature review, system implementation, and performance evaluation. In the literature review phase, the study analyzes the latest research trends in multimodal AI and MAS and examines case studies using No-Code platforms to establish a foundation for this research. During the system implementation phase, the study designs a No-Code-based system architecture, implements the MAS, and develops the necessary API integrations and user interfaces. Lastly, in the performance evaluation phase, the system's performance is analyzed comprehensively through quantitative evaluations (e.g., processing speed, accuracy, reliability) and qualitative assessments (e.g., user satisfaction, improvement in work efficiency).\nThis study is expected to provide the following contributions: First, it lowers the barriers to AI adoption, increasing accessibility for non-experts and small-to-medium-sized enterprises. Second, it enhances productivity and operational efficiency by automating business processes using AI and reducing inefficient manual work. Third, it proposes a methodology for building Al systems using No-Code platforms, providing a guideline for AI adoption across various industries. Lastly, it validates the practical applicability of MAS, offering insights into their scalability and future development directions."}, {"title": "2. LITERATURE REVIEW", "content": ""}, {"title": "2.1 Multimodal Learning", "content": ""}, {"title": "2.1.1 Concept and Advancements of Multimodal Learning", "content": "Multimodal Learning is a field of artificial intelligence that emulates the cognitive learning processes of humans by integratively processing and learning from diverse modalities of data [10]. Just as humans acquire and understand information through various senses such as vision, hearing, and touch, multimodal AI systems are capable of simultaneously processing and understanding multiple forms of data, including text, images, audio, and video [11].\nThe recent integration of multimodal capabilities in major AI models, such as GPT-40, Claude 3, and Gemini, exemplifies the rapid progress in this field. These models demonstrate not only the ability to recognize images but also the capability to understand and reason about complex relationships between images and text, marking significant advancements in multimodal learning."}, {"title": "2.1.2 Multimodal Fusion Methods", "content": "The effective integration of data from different modalities requires robust fusion methods to combine information from diverse sources."}, {"title": "2.1.3 Multimodal Tasks", "content": "Recent multimodal systems are capable of performing various tasks, as shown in Table 2."}, {"title": "2.1.4 Advancements in MLLM Architecture", "content": "Recent benchmark results for multimodal LLMs are presented in Table 3, as introduced in MMMU (Massive Multi-discipline Multimodal Understanding and Reasoning), with the GPT-401 model demonstrating capabilities beyond human intelligence [15]."}, {"title": "2.2 Multi-Agent System (MAS)", "content": ""}, {"title": "2.2.1 Concept and Structure of MAS", "content": "An agent is a system that uses LLMs to determine the control flow of an application, and it can be categorized into Single Agents, which perform a single task, and Multi-Agents, which work together to perform complex tasks. When the context becomes too complex for a single agent to track, one solution is to divide the application into several small, independent agents and configure. them into a MAS, as shown in Fig. (2). The Agent Supervisor plays a central role within the Multi-Agent workflow, coordinating communication and task distribution between different Worker Agents. It receives outputs from an agent, interprets these messages, and then directs the workflow accordingly. The Supervisor is responsible for managing the sequence of tasks, making decisions about the next steps in the workflow, and ensuring the overall efficiency of the system [17]."}, {"title": "2.2.2 Characteristics of LLM-based MAS", "content": "The construction of an LLM-based Single Agent system focuses on formalizing interactions between internal mechanisms and the external environment. In contrast, LLM-based MAS emphasize various agent profiles, interactions between agents, and collective decision-making processes, allowing for more dynamic and complex tasks to be solved through the collaboration of multiple autonomous agents, each with unique strategies and behaviors [21].\nLLM-based MAS have three key characteristics:\n1.  Natural Language-based Interaction: Communication between agents occurs through natural language interactions. These interactions enable effective information exchange without the need for complex communication protocols, significantly enhancing the system's flexibility [22].\n2.  Role Specialization: Each agent holds a specialized prompt template tailored to a specific task, enabling specialized functionality. This role specialization contributes to improved overall system efficiency [23]."}, {"title": "2.2.3 Design Considerations for Agents in Multimodal Processing", "content": "The design of a MAS for multimodal processing is based on three core types of agents.\n1.  Preprocessing Agents by Modality: These agents specialize in preprocessing data from each modality, such as images or text, converting it into a standardized format for subsequent processing [24]. This preprocessing ensures that the unique characteristics of each modality are preserved while preparing the data for integrated processing.\n2.  Modality Integration Agents: Based on the Flamingo model proposed by Alayrac et al. [25], the importance of modality integration agents is highlighted. Flamingo, a visual language model (VLM), takes text and visual data as input and generates free-form text as output. These agents play a key role in effectively integrating multimodal information, especially by leveraging cross-modal attention mechanisms to understand and learn complex relationships between modalities. This enables the complementary use of information from different modalities, enhancing understanding and interpretation.\n3.  Context Management Agents: The design of context management agents is crucial for system performance. These agents manage the temporal and spatial relationships between multimodal information, ensuring that consistent responses are generated in a multimodal environment. Effective context management is essential for the overall performance and reliability of the system, particularly when dealing with complex multimodal interactions [26].\nFor these three types of agents to work synergistically, additional design principles must be considered:\n*   Efficient communication protocol design between agents\n*   Data transformation strategies to minimize information loss between modalities\n*   Parallel processing structures for real-time handling\n*   Modular architecture design for system scalability\nBy incorporating these design considerations, a MAS for multimodal processing can provide more effective and stable performance. Specifically, the specialized functions of each agent and their collaborative interaction play a critical role in successfully completing complex multimodal tasks."}, {"title": "2.3 Advanced RAG System", "content": ""}, {"title": "2.3.1 Concept and Working Principle of RAG", "content": "RAG is a hybrid architecture that combines the generative capabilities of LLMs with external knowledge retrieval, addressing the hallucination issue of LLMs and enabling the use of up-to-date and domain-specific knowledge [27]. A RAG system consists of two main components: the Retriever and the Generator. The retriever performs similarity searches based on a vector database, utilizing semantic indexing and search optimization techniques. The generator uses the retrieved context to generate responses, with advanced prompt engineering applied during the generation process.\nThe operation of the RAG system can be divided into three main stages:\n1.  Document Processing Stage: This includes a series of steps from chunking the original document to storing it in a vector database. Specific tasks include:\n    *   Deciding optimal chunk sizes for efficient document splitting\n    *   Using overlap techniques to preserve contextual information\n    *   Creating embeddings based on the document's characteristics\n    *   Structuring the vector database for efficient search\n2.  Search Stage: This stage involves converting the user query into a vector space and extracting relevant documents [28]. ultiple search strategies are applied to improve search accuracy, and reranking processes optimize the search results. Dynamic search range adjustments are made based on context.\n3.  Generation Stage: In this stage, the retrieved results and the original query are combined to generate the final response [29]. Contextual appropriateness is ensured using dynamic prompt templates, and the quality of the response is verified for accuracy, consistency, and source traceability via metadata management."}, {"title": "2.3.2 Advanced RAG", "content": "The Advanced RAG model improves the accuracy and consistency of generated answers by incorporating additional verification and refinement processes. In particular, its multimodal capabilities, which integrate various forms of data, are particularly useful in tasks such as internal document search in organizations.\n1.  Multi-Modal RAG\nMulti-Modal RAG is an innovative information retrieval system that integrates and processes various forms of data, such as text, images, and charts. Unlike traditional text-based search systems, it can generate accurate and relevant responses to complex queries that include visual information. The multi-modal RAG system generates synergy through the interaction of different modalities, simultaneously analyzing both text and visual data to more accurately understand the query's meaning and provide comprehensive related information.\nKey advantages of the Multi-Modal RAG system include:\n*   Improved Accuracy: By utilizing information from multiple modalities, the system can more precisely understand the query's intent and provide highly relevant information.\n*   Expanded Versatility: It is capable of processing a wider range of data types, including not just text but also images, videos, and more.\n*   Enhanced User Experience: The system offers intuitive responses to complex queries, improving user convenience.\nBy integrating multiple modalities, the multi-modal RAG system expands the scope of information retrieval and enhances the information search process.\n2.  Agent RAG Application\nTo enhance the RAG process, the Agent RAG model introduces the concept of agents that assist in the answer generation process. By incorporating agents, the model improves the accuracy and consistency of responses [30]."}, {"title": "3. RAG in Corporate Document Processing", "content": "The use of RAG systems in corporate environments has unique requirements and characteristics distinct from general RAG implementations. Specifically, in corporate document processing, the system must effectively handle the diversity and complexity of documents and incorporate the organization's specific domain knowledge.\nStructured document processing is crucial for enhancing data accuracy and usability within corporate documents. Unstructured data, such as tables and charts, is converted into analyzable structures through automated extraction and transformation processes, and metadata within documents is used to maintain context and relevance. Furthermore, various document formats (PDF, DOCX, XLSX) need to be standardized into consistent data formats. Security management is also a key consideration, as corporate documents often contain sensitive information. A detailed access control system must be implemented to manage user access to documents and block unauthorized data access. Additionally, an automatic filtering mechanism for sensitive data (e.g., personal information, confidential data) and an audit trail system to track document access and usage are essential.\nMoreover, RAG systems tailored to the company's domain are required, with a focus on specialized terminology and the integration of organizational context to achieve better outcomes. Managing company-specific jargon and acronyms systematically is essential. A domain-specific dictionary should be constructed and integrated into the RAG system to ensure that the system understands and consistently interprets specialized terms [5]. Additionally, the expansion and management of abbreviations and synonyms are necessary for accurately understanding documents with industry-specific terminology.\nThese optimizations in preprocessing and domain-specific handling allow RAG systems to play a critical role in enhancing knowledge management and maximizing operational efficiency in a corporate environment."}, {"title": "2.4 No-Code Development Platforms", "content": "No-Code development platforms are environments that enable the creation of applications without the need for traditional programming knowledge. These platforms allow non-developers to build simple business applications, while professional developers can focus on more critical tasks such as system architecture and cloud server management by distributing the development workload [3]. The importance of No-Code platforms is increasingly recognized in the AI field, as they significantly contribute to the Democratization of AI technology. These platforms are designed to be easily used by non-experts, enabling rapid prototyping and iterative modifications."}, {"title": "2.4.1 Advantages and Disadvantages of No-Code Platforms", "content": "No-Code platforms provide notable advantages in terms of development productivity, accessibility, and operational efficiency.\n*   Development Productivity: The drag-and-drop visual development environment eliminates the need for complex coding processes, significantly reducing development time. Additionally, it allows for rapid prototyping using pre-built components, enabling quick responses to market changes.\n*   Accessibility: These platforms allow application development without the need for specialized technical knowledge, enabling non-developers to build complex systems using AI technology, contributing greatly to the democratization of technology.\n*   Operational Efficiency: Three key benefits are observed in terms of operational efficiency:\n    *   First, needed features can be implemented without the involvement of specialized developers, optimizing IT resources.\n    *   Second, cloud-based operation improves operational efficiency and reduces costs.\n    *   Third, integration with a variety of external services through APIs allows for the expansion of application functionality.\nAdditionally, No-Code platforms offer numerous advantages in utilizing AI technology, including:\n*   LLM Integration: Platforms such as Langflow and Flowise easily integrate with LLMs like GPT-4, Gemini, and Claude.\n*   Computer Vision Modules: Image processing, object detection, and OCR capabilities can be implemented with No-Code tools.\n*   Natural Language Processing: Built-in nodes can be used for tasks like document summarization, sentiment analysis, and question answering.\n*   Multimodal Integration: These platforms can combine and process multiple types of data, including text, images, and audio.\nIn this way, No-Code platforms play a key role in the democratization of AI and in promoting digital transformation within enterprises.\n2.  Disadvantages of No-Code Platforms\nDespite their advantages, No-Code platforms come with several significant limitations.\n*   Challenges in Implementing Complex Logic: A major limitation is the difficulty in implementing complex business logic or mathematical modeling. For projects that require advanced functions or intricate workflows, No-Code platforms may not be sufficient.\n*   Limitations in Handling Complex Projects: These platforms may struggle with handling complex projects that involve extensive workflows or large-scale data manipulation. As the complexity of the application or user base increases, performance bottlenecks may arise, or scalability may become a limitation [31].\n*   Customization Restrictions: One of the primary issues is the limited ability for customization. Since development is based on predefined components and features, implementing specific or complex functionalities can be restrictive.\nConsidering both the advantages and disadvantages, No-Code platforms are ideal for projects that require quick development and easy accessibility. However, for projects that demand extensive customization or high performance, No-Code platforms should be used with caution."}, {"title": "2.4.2 Comparison of Workflow-based AI Multi-Agent No-Code Platforms", "content": "Effective implementation of MAS through No-Code platforms requires an intuitive drag-and-drop interface that provides an environment for organically linking various agents around workflows. Currently, open-source workflow-based No-Code AI platforms such as Langflow, Flowise, and n8n are gaining attention, each offering distinct approaches for designing and executing Al workflows. This study compares and analyzes the features of these platforms and discusses their respective strengths and weaknesses to assess their applicability in real-world scenarios.\nThe selection of a No-Code platform is a key factor in determining the scalability, autonomy, and level of developer control within a system. This section compares three major No-Code platforms with unique characteristics and provides objective criteria for selecting an implementation platform.\n1.  Flowise\nFlowise combines Al models with a visual process designer, enabling users to easily design workflows. Flowise supports various Al models, including LLM, Computer Vision (CV), and NLP, and allows for rapid workflow design through its visual process designer. The platform offers a lightweight runtime environment based on Node.js and Docker support, ensuring stable deployment and integration with various external APIs. A notable strength of Flowise is its multimodal processing capabilities and robust architecture based on TypeScript. Additionally, Flowise enhances scalability and maintainability through its built-in API management, real-time execution monitoring, and plugin extension system [32].\n2.  Langflow\nLangflow specializes in designing and executing conversational Al workflows and is highly compatible with LangChain components. It offers a scenario editor for creating customized chatbots and supports various Al functions, including LLM, document retrieval, and image generation. Langflow can be deployed in both cloud and on-premises environments and boasts high scalability and modular integration based on Python. The platform benefits from continuous feature improvements supported by the open-source community. However, Langflow has some limitations, including a complex initial installation process, limited multimodal support, and concerns about the stability of its execution environment [33].\n3.  n8n\nn8n is a platform offering extensive service integration and powerful workflow automation capabilities. It excels in integrating AI and non-AI tasks, allowing for comprehensive management of workflows involving multiple services. n8n supports enterprise-level features and provides high flexibility for users to control workflows in detail. However, n8n has some limitations, such as a lack of AI-specific features and a steep learning curve, which may pose an entry barrier for novice users [34]."}, {"title": "3. SYSTEM DESIGN AND ARCHITECTURE", "content": ""}, {"title": "3.1 Overall System Architecture", "content": "The multimodal LLM-based MAS proposed in this study is illustrated in Fig. (7)., which adopts a modular architecture designed with scalability and maintainability in mind. The overall system structure is divided into four main layers: Multimodal Input Layer, Multi-Agent Layer, Process Layer, and Multimodal Output Layer.\nThe Multimodal Input Layer receives various modality inputs such as text, image, and audio. The Multi-Agent Layer consists of the Agent Supervisor and Agent Workers, with the Agent Supervisor managing the collaboration and task distribution among the worker agents. The Agent Workers include RAG, Web Search, Image Analysis, Image Generation, and Audio Generation Agents. The Process Layer houses the MLLM, where each worker agent's characteristics are mapped to the corresponding LLM and functions for processing. Finally, in the Multimodal Output Layer, answers in the form of text, image, video, and audio are provided by each agent based on its specific task."}, {"title": "3.2 Multi-Agent Definition and Architecture Design", "content": "This section proposes the detailed design of the multimodal LLM-based MAS, focusing on core system components such as agent interactions, task distribution, data flow, and external system integration."}, {"title": "3.2.1 Agent Types and Role Definitions", "content": "The agent structure in this study is divided into two primary categories: Supervisor Agent and Worker Agents. The Supervisor Agent plays the role of the coordinator for the entire system, while the Worker Agents are designed to specialize in specific domains. This structure ensures the autonomy of each agent while maintaining seamless cooperation within the system.\n*   Supervisor Agent: Acts as the central controller of the system, managing task distribution, setting priorities, handling error management, and overseeing the overall system status. One Supervisor Agent oversees multiple Worker Agents.\n*   Worker Agent: These agents perform specialized tasks as directed by the Supervisor Agent. For example, an image analysis agent handles visual information, while a RAG query agent handles question answering."}, {"title": "3.2.2 Integration Structure of Multi-Agent System", "content": "The integration structure of each agent in the multimodal LLM-based MAS follows a hierarchical structure. The Supervisor Agent and Worker Agents interact within this hierarchy, which ensures clear role allocation and reduces overall system complexity. Each agent operates autonomously within its designated layer, following the directives of the Supervisor Agent to meet the system's collective goals."}, {"title": "3.2.3 Collaboration and Task Distribution Among Agents", "content": "To ensure efficient communication and task distribution among agents, the system is designed with a communication framework that includes message structuring, priority level definitions, and routing mechanisms. Task orchestration is based on the prioritization of tasks, resource requirement analysis, and dynamic capacity allocation.\n1.  Collaboration Mechanism\nEffective collaboration among different Worker Agents is essential to handle complex tasks. This system adopts the following collaboration strategies:\n*   Information Sharing: Each agent shares the results or intermediate outcomes of its tasks with others, facilitating the use of this information in other agent tasks. This maximizes synergy and minimizes redundancy.\n*   Role Division: Each agent focuses on the task it performs best, increasing overall system efficiency. For example, the image analysis agent specializes in visual data processing, while the RAG search agent focuses on text-based information retrieval.\n*   Negotiation: Agents negotiate priorities, resource allocations, and other factors to find the best possible solution. In this process, each agent's objectives and constraints must be considered to reach a consensus.\n2.  Task Distribution Strategy\nTo ensure efficient task distribution, the following strategies are implemented:\n*   Task Decomposition: Complex tasks are broken down into smaller sub-tasks, which are then assigned to the appropriate agents. This allows for parallel processing and improves system processing speed.\n*   Dynamic Allocation: Task allocation is dynamically adjusted based on the system's state or task characteristics. For example, if an agent becomes overloaded, tasks may be reassigned to other agents.\n*   Priority-Based Allocation: Tasks are assigned priorities based on their importance or urgency, with high-priority tasks processed first. This ensures optimal system performance.\n3.  Architecture for Collaboration and Task Distribution\nThe architecture for collaboration and task distribution in this system includes the following components:\n*   Centralized Management System: This system monitors the overall status of tasks, assigns tasks to agents, and coordinates collaboration.\n*   Agent Communication Protocol: A standardized communication protocol ensures efficient message passing between agents.\n*   Task Queue: Tasks to be assigned to agents are stored in a queue, allowing for priority management and ensuring that agents receive tasks dynamically when needed.\nThis architecture ensures effective collaboration and task distribution, enabling the MAS to function efficiently while maintaining flexibility and adaptability in response to changing workloads and priorities."}, {"title": "3.2.4 Prompt Chain and Agent State Management", "content": "1.  Prompt Chain Design:\nThe Prompt Chain is a crucial structure for AI agents to interact and perform tasks efficiently. The design of the prompt chain is organized in a way that allows tasks to be processed sequentially, incorporating feedback loops to continually improve the results. The chain provides flexibility, enabling different paths based on task conditions to respond to various scenarios. Additionally, the prompt chain maintains task context to ensure consistent results and includes memory buffers and history tracking for temporarily storing and referencing necessary data. Lastly, dynamic parameter adjustments and automatic improvements ensure that the prompt chain delivers optimal task performance.\n2.  Agent State Management:\nManaging the state between agents is an essential design element to maintain system consistency and efficiency. The state of each agent is stored in a central repository to ensure consistent management, with distributed storage reducing the load on the central server. A version control system for state information allows for rollback to previous states, and real-time synchronization and state propagation ensure all agents use the latest data. In case of state conflicts, an automatic conflict resolution mechanism is included, ensuring system stability through a recovery system.\n3.  Error Handling and Recovery Strategy:\nError handling and recovery strategies are critical for ensuring system reliability. These strategies continuously monitor the system for exceptions, enabling early detection and swift responses to errors. Thresholds are set to immediately alert users upon errors, and an automatic retry mechanism resolves issues. When problems arise along critical paths, alternative paths are activated, and performance is gradually reduced to prevent a complete system halt. Backup system switching and preventive measures minimize data loss and ensure an efficient recovery process, maintaining system stability."}, {"title": "3.3 Flowise-based MAS Implementation Design", "content": "This study presents a design methodology for constructing a multimodal LLM-based MAS utilizing the Flowise platform, which incorporates functionalities to facilitate the implementation of both Supervisor Agent and Worker Agent concepts. The proposed architecture is designed to enable each agent to operate independently while maintaining effective collaborative capabilities."}, {"title": "3.3.1 Key Features of Flowise and Multi-Agent Support", "content": "Flowise is based on a modular architecture, ensuring that each component operates independently but is organically connected to implement the system's functionality. The core architecture is built with modular elements, such as the Frontend, API Layer, Core Engine, and LLM Services, ensuring high scalability and maintainability. Additionally, Flowise supports asynchronous node execution, memory-efficient stream processing, and an error recovery mechanism for efficient task processing.\nFlowise provides the following key features for implementing a MAS:\n*   Agent Templates: Predefined templates for specific roles, allowing for quick agent creation and customization.\n*   State Management: Synchronizes the state between agents using a distributed state store and manages state changes through transactional mechanisms.\n*   Monitoring and Debugging: Real-time agent monitoring and log tracking for troubleshooting.\nTwo main structures are used for building a MAS:\n*   Chain-based Agent Configuration: Using the Agentflows category, the Multi-Agents menu in Flowise, the Supervisor and Worker cards are combined to create a hierarchical agent structure. The Supervisor manages and distributes the overall tasks, while the Workers handle specific sub-tasks. Collaboration between agents occurs through message passing between chains.\n*   State Management: Shared memory systems are used to maintain conversation context and synchronize the progress of tasks in real-time."}, {"title": "3.3.2 Flowise-Based Design and Implementation Procedure", "content": "1.  Create a New Workflow in Agentflows: Initiate a new workflow for the MAS.\n2.  Place the Supervisor Card: Position the Supervisor card to define the management role of the overall system.\n3.  Add Worker Cards: Add the required number of Worker cards, assigning them specialized roles.\n4.  Set Up Message Passing Paths Between Agents: Establish communication paths between agents for collaboration.\n5.  Configure Shared Memory: Set up shared memory to maintain the conversation context and synchronize task progress between agents.\n6.  Define Prompt Templates and Task Rules: Define each agent's prompt template and task rules to control agent behavior.\n7.  Multi-Agent Integration in the Chatflows Category: To efficiently operate multiple agents within a single channel, an integrated workflow is created. In this context, the 'Chatflow Tool' is employed to enable various agents to interact seamlessly, ensuring that they work harmoniously within a unified flow."}, {"title": "3.4 Use Case-based MAS Implementation Design", "content": ""}, {"title": "3.4.1 Image Analysis and Code Generation Agent: Image to Text, Text Code to Code", "content": "This agent analyzes the input image and generates the optimal, completed code based on the analysis results, which are prompted by the image."}, {"title": "4. SYSTEM IMPLEMENTATION", "content": "This chapter presents the setup and detailed implementation of a multimodal LLM-based MAS using the Flowise platform, based on the MAS design introduced in Chapter 3. The implementation is demonstrated through specific case examples."}, {"title": "4.1 Development Environment Setup", "content": ""}, {"title": "4.1.1 Flowise Cloud and API Key Setup", "content": "To implement the multimodal LLM-based MAS, the first step is to set up the Flowise platform in the cloud environment. Flowise is a No-Code platform that facilitates the easy integration and management of various agents, making it ideal for building complex Al systems that utilize multimodal data and multiple agents. By setting up Flowise in the cloud, users can perform large-scale computations without relying on local resources, and easily integrate and process data across various agents.\nThe setup process in the cloud involves initializing the server environment and configuring the network to create a stable and scalable infrastructure. Users can allocate resources through their cloud account and deploy the Flowise server to secure the necessary computing power.\nFor MAS implementation, ensuring secure access to data and external service integration is essential. API authentication and key management are crucial to maintaining the system's security. This ensures that external models, such as OpenAI and Stable Diffusion, are securely connected. API keys serve as an important authentication method to allow communication with external services, and their leakage can pose a risk of data breaches. Therefore, Flowise uses environment variables to configure. API keys, ensuring that only necessary keys are loaded into the system, minimizing exposure to sensitive information. These security settings help ensure the stable and secure operation of the MAS."}, {"title": "4.1.2 Database Configuration and External Service Integration", "content": "In the Flowise-based MAS, the database plays a crucial role in managing data exchange and state management between the system components. Each agent, such as the image analysis, code generation, RAG search, and image generation agents, generates or consumes unique data, so a robust database is required to effectively store and manage this data. When configuring the database, it is important to record each agent's task history and optimize data access speeds by setting up indexes.\nGiven the multimodal nature of the data, which includes images, text, documents, etc., the system should be capable of storing and retrieving various data formats. A combination of a relational database for structured data and a NoSQL database for unstructured data is an effective approach. This hybrid database configuration contributes to optimizing the MAS's performance and ensuring data consistency.\nTo improve the performance and expand functionality, external service integration is necessary. The Flowise platform supports the integration of various external APIs, enabling the use of multimodal Al services and LLMs for knowledge retrieval. For example, integrating OpenAI's API for natural language processing and the Stable Diffusion API for image generation allows the system to process diverse input data in real-time. When integrating external services, it is important to manage network and computational resources based on API call frequencies and processing capacities. Flowise's integrated modules help manage connections with each API, ensuring efficient service and resource allocation."}, {"title": "4.2 Multi-Agent Implementation", "content": ""}, {"title": "4.2.1 Image Analysis and Code Generation Agent Implementation", "content": "The MAS handles the modality processing of 'Image to Text' and 'Text Code to Code'. For input image analysis", "follows": "nSupervisor Agent System Prompts:\nYou are a supervisor tasked with managing a conversation between the following workers: {team_members"}, ".", "nGiven the following user request, respond with the worker to act next. Each worker will perform a task and respond with their results and status.\nWhen finished, respond with FINISH.\nSenior Programmer Agent System Prompts:\nYour goal is to lead the development of high-quality software solutions.\nThe output should be a fully functional, well-documented feature that enhances our product's capabilities. Include detailed comments in the code. Pass the code to Quality Assurance Engineer for review if necessary. Once their review is good enough, produce a finalized version of the code.\nQuality Assurance Engineer System Prompts:\nYour goal is to ensure the delivery of high-quality software through thorough code review and testing. Review the codebase for the new feature designed and implemented by the Senior Software Engineer.\nAlways pass back the review and feedback to Senior Programmer.\nThe Worker Agents are composed of the Senior Programmer and Quality Assurance Engineer, and the workflow is implemented as follows. The Supervisor Agent analyzes the sample code image and"]}