{"title": "Towards Edge-Based Data Lake Architecture for Intelligent\nTransportation System", "authors": ["Danilo Fernandes", "Douglas L. L. Moura", "Gean Santos", "Geymerson S. Ramos", "Fabiane Queiroz", "Andre L. L. Aquino"], "abstract": "The rapid urbanization growth has underscored the need for in-\nnovative solutions to enhance transportation efficiency and safety.\nIntelligent Transportation Systems (ITS) have emerged as a promis-\ning solution in this context. However, analyzing and processing\nthe massive and intricate data generated by ITS presents signifi-\ncant challenges for traditional data processing systems. This work\nproposes an Edge-based Data Lake Architecture to integrate and an-\nalyze the complex data from ITS efficiently. The architecture offers\nscalability, fault tolerance, and performance, improving decision-\nmaking and enhancing innovative services for a more intelligent\ntransportation ecosystem. We demonstrate the effectiveness of the\narchitecture through an analysis of three different use cases: (i)\nVehicular Sensor Network, (ii) Mobile Network, and (iii) Driver\nIdentification applications.", "sections": [{"title": "1 INTRODUCTION", "content": "Urbanization is a global phenomenon characterized by the growth\nand development of large cities resulting from migrating people\nfrom rural to urban areas. It involves concentrating economic activi-\nties and infrastructure in urban centers [19]. Rapid urbanization has\nmodernized many people's lives and brought numerous challenges\nto transportation systems. These challenges include air pollution,\nnoise, traffic congestion, and accidents [29]. In this context, Intel-\nligent Transportation System (ITS) emerges as a potential solution\nto address the impacts of urbanization and improve the efficiency\nand safety of transportation systems [4]. ITS integrates advanced\ncommunication and information technologies with transportation\ninfrastructure to support various applications and services, such\nas real-time traffic management, road safety, smart parking, and\nautonomous vehicles [30].\nThese applications transmit data through various communica-\ntion technologies and obtain them from heterogeneous data sources,\nsuch as vehicles, road infrastructure, and citizens. The rapid growth\nof ITS systems made analyzing and processing the data challenging\nfor traditional data processing systems presenting a new Big Data\nscenario [15]. However, solutions are emerging to provide a flexible\nand scalable data store to handle the new ITS Big Data [18]. To pro-\nvide this support, the Logical Data Lake (DL) concept [15] enables\nefficient management of ITS Big Data, allowing advanced analytics,\ninference, and making data-driven decisions. Despite their proven\nbenefits, existing DL architectures suffer from certain limitations\nwhen applied in the context of ITS: (i) Vehicles typically move at\nhigh speeds, resulting in frequent disconnections, especially when\ncombined with reduced communication range; (ii) ITS data is dis-\npersed and heterogeneous, which poses a significant challenge for\ndata integration; (iii) Cloud architectures can suffer from high com-\nmunication and computing overheads due to the concentration of\ndata and processing in a single central server.\nTo address these challenges, we propose a novel edge-based data\nlake architecture that provides an abstraction layer and enables effi-\ncient data integration, cleansing, and inference for decision-making\napplications in ITS. Multi-access Edge Computing (MEC) infrastruc-\nture provides processing and storage resources at the network edge,\nsuch as at the cellular base station [23]. In our approach, we design\na distributed architecture across servers located at the network edge\nand in the cloud, with each layer utilizing the data differently. The\nmain contribution of this research is a novel edge-based data lake"}, {"title": "2 RELATED WORK", "content": "Big Data Analytics has the potential to revolutionize transportation\nsystems, bringing significant improvements to traffic management,\nreducing congestion, and increasing road safety. However, many\nissues and challenges still need to be addressed to ensure the ef-\nfective use of these technologies, such as effective management,\nstorage, and processing of large and complex data sets. Existing\narchitectures explore using advanced big data management tech-\nnologies, such as cloud computing, data warehousing, and data\nlakes, to address these issues and handle this data efficiently and\ncost-effectively.\nGuerreiro et al. [6] propose an ETL (Extract, Transform, and\nLoad) architecture for big data analytics in ITS applications, address-\ning an application scenario on dynamic toll charging for highways.\nThe proposed architecture can efficiently process and model large\nvolumes of raw traffic data using Apache Spark and SparkSQL for\ndata processing and MongoDB for data storage. Similarly, Ramos et\nal. [15] present a zone-based data lake architecture for smart cities\nand governments. Their approach enables the ingestion and integra-\ntion of heterogeneous data sources from IoT systems, social media,\ndata streams, information systems databases, and Data Warehouses.\nAdditionally, they integrate all data via a flexible metadata system,\nwhich enables manual data labeling, automatic metadata extraction,\nand data queries through the metadata.\nZhu et al. [30] provided a comprehensive survey of Big Data An-\nalytics in ITS and introduced a three-layer architecture composed\nof a data collection layer, a data analytics layer, and an application\nlayer. They also presented several use cases of Big Data Analytics\nin ITS, such as road traffic flow prediction, road traffic accident\nanalysis, public transportation service planning, personal travel\nroute planning, and others.\nDarwish and Bakar [3] proposed a fog-based architecture for ITS\nbig data real-time processing called RITS-BDA. The fog nodes can\nform clusters vertically or horizontally, sharing computational and\nstorage resources. Singh et al. [20] proposed BlockIoTIntelligence\narchitecture of converging blockchain and AI for the Internet of"}, {"title": "3 EDGE-BASED DATA LAKE ARCHITECTURE", "content": "The data lakes play a crucial role in the overall architecture cor-\nresponding to a data storage and intelligence layer. Dealing with\nheterogeneity in Big Data landscapes and scaling in distributed\nenvironments are the main features that make it well suited for ITS\nplatforms [7]. This layer collects, catalogs, cleans, and transforms\ndata from IoT Devices. These tasks compose a process known as\ndata wrangling, which enriches the data and makes it suitable for\nanalysis. [8]. Nevertheless, the ultimate feature is providing data\nanalytics, the core of the application layer.\nData management is always a challenge when facing data het-\nerogeneity. Data Lakes addresse this issue by storing all collected\ndata in raw format and providing an evolving framework for data\nstructuring and refinement [15]. Such a methodology is known\nas the Zone-Based Data Model [5]. Data collected from external\nsources are logically assigned to an ingested data zone [18]. We\ntransform the data enhancing the quality; thus, the outcome can\nmove into the following zones [18]. Such transformations run until\nthe data reaches the maximum level of maturity at which it is ready\nto be analyzed by decision-makers [15].\nA data governance layer traverses all the zones to assure data\nsecurity, privacy, quality, and monitoring [5]. Data governance\nrequirements are different for each zone. At the ingestion zone,\ndata must satisfy conditions for security and consistency. The dis-\ntillation zone should enforce data privacy by controlling access.\nThe processing zone reinforces data quality, and the monitoring\nzone provides reports on the health of specific components and\nthe general infrastructure of the data lake. Data governance should\nincrease and stack as the data follows through the ingestion to the\ninsights zone. However, this is only one of several variants of zone\narchitecture. Such architectures generally differ in the number and\ncharacteristics of the zones [18].\nWe usually deploy data lakes in the cloud due to the considerable\ncomputing resources available and the elasticity in their allocation.\nTheir costs are often tied only to resource demand, skipping the\ninfrastructure maintenance costs. However, in an environment with\na considerable volume of sensors constantly providing data and\ndemand for real-time analysis, the latency in uploading it to the\ncloud can be a bottleneck. Nevertheless, given its more constrained\ncomputing assets, this does not justify deploying the data lake at\nthe edge. Thus, the cooperative adoption of both approaches can\nbalance the trade-off between physical resources and latency to\nminimize costs.\nIn this light, the proposed data lake architecture is internally\ncomposed of two distributed data lakes running in the edge and\ncloud. Although independent, these data lakes exchange data, op-\nerating together organically. Our architecture (Figure 1) considers\nfour layers: IoT Device, Edge Data Lake, Cloud Data Lake,\nApplication. The IoT Device layer represents the mechanisms\nused to handle the data used by devices embedded in vehicles and\nother traffic-related devices. The Edge Data Lake, and Cloud Data\nLake layers, collect, store, and sprocesses the data in batches or\nin real-time using distributed technologies at the edge or cloud.\nThe Application layer uses the processed data. Examples of appli-\ncations for ITS applications are congestion detection, traffic man-\nagement, accident prediction, and other urban mobility solutions.\nFinally, all these layers exchange their data horizontally through\na Data Bus. The Data Bus implements a lightweight messaging\nprotocol to enable communication between all architecture com-\nponents. An example of such a protocol is the Message Queuing\nTelemetry Transport (MQTT) [14], which is designed to work on top\nof the TCP/IP protocol. This event-driven protocol acts on a pub-\nlish/subscribe model, facilitating real-time communication within\nan ITS ecosystem."}, {"title": "3.1 IoT Device Layer", "content": "The IoT Device layer, also known as the perception layer, is where\nthe smart sensors are in the data lake architecture. These devices\nmay include various types of sensors, such as intra-vehicular sen-\nsors (e.g., chemical detectors, video cameras, and vibration/acoustic\nsensors), traffic control sensors (e.g., traffic lights, radar, inductive\nloops), and infrastructure sensors (e.g., roadside units and roadside\nweather stations). This layer collects data from the environment\nand makes it available to other layers for heavy processing and\nanalysis. Wireless communication technologies like Bluetooth, Wi-\nFi, Zigbee, LoRa, 5G, and others are commonly used in the device\nlayer to transmit data.\nIn addition, the IoT Device layer has a Processing Engine\nto enable the performance of specific tasks and functions, such as\ndata transformations, device actuator control, and communication.\nThere is also a Storage System for local buffering of the data\ncollected by the sensor and the processing outcome. This set of\ncomponents can help reduce the amount of data that needs to be\ntransmitted to the network and reduce bandwidth consumption.\nFinally, the DL interface handles all communication with the other\nlayers."}, {"title": "3.2 Edge and Cloud Data Lake Layers", "content": "The Edge Data Lake layer is mainly responsible for: i) Collecting\ndata from sensors; ii) Keep stored frequently used data (hot data);\niii) Data cataloging and metadata model inference; iv) Real-time\nand reduced batch processing; v) Interfacing with MEC applications.\nAdditionally", "to": "i) Storing\nhuge volumes of sporadically used data (cold data); ii) Costly batch\nprocessing.\nThe data kept by the ITS infrastructure should be in any layer\npresent in the architecture. The system sends the data from the\nlowest storage capacity tier to the highest as required for more\ncostly processing or to free up storage space. It executes the reverse\ndirection when a layer with less computing power requests data\nstored in the next layer. Consequently", "latter": "Data Pipeline\nOrchestrator and Metadata System. The Data Orchestrator Pipeline\nis responsible for data ingestion from Applications and data ex-\nchange with Cloud Data Lake. For the first case, the DL Interfaces\nwill intermediate the connection with the application, passing the\nreceived data (stream or batch) to the Orchestrator and indicating a\nlocation in the Edge Storage System. When exchanging data with\nthe Cloud Data Lake, the DL Interface will inform the source and\ntarget data location in the cloud and edge Storage Systems, and the\nOrchestrator will transfer it in batches. Note that such Orchestra-\ntor is a distributed system; therefore, data transfer occurs in large\nvolumes in parallel.\nThe Storage System stores the data on the edge. The Data Pipeline\nOrchestrator and the Processing Engine feed it. In the last one, the\nstored data results from some processing task. In addition, it re-\nturns data to all other components of the Edge Data Lake when\nrequested via DL Interface. The Metadata System is in charge of\nlogically integrating all data and making it accessible to the user\nthrough homogeneous modeling. It also stores and manages in-\nformation about the usage and performance of the data lake, for\nexample, data lineage, history of data access, and data transfers.\nWhen new data is ingested or created into the Edge Data Lake, it\nreceives its location in the Storage System and the available elemen-"}]}