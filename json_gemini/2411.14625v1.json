{"title": "Predictive Analytics of Air Alerts in the Russian-Ukrainian War", "authors": ["Demian Pavlyshenko", "Bohdan Pavlyshenko"], "abstract": "The paper considers exploratory data analysis and approaches in predictive analytics for air alerts during the Russian-Ukrainian war which broke out on Feb 24, 2022. The results illustrate that alerts in regions correlate with one another and have geospatial patterns which make it feasible to build a predictive model which predicts alerts that are expected to take place in a certain region within a specified time period. The obtained results show that the alert status in a particular region is highly dependable on the features of its adjacent regions. Seasonality features like hours, days of a week and months are also crucial in predicting the target variable. Some regions highly rely on the time feature which equals to a number of days from the initial date of the dataset. From this, we can deduce that the air alert pattern changes throughout the time.", "sections": [{"title": "1 Introduction", "content": "Starting from February 24, 2022, the date of Russian invasion in Ukraine, it has been very important to understand the structure and patterns of air alerts and predict when and how long an air alert is going to take place. Initially, we created a channel in Telegram Messenger social network for air alerts forecast in Ukraine. The main approach was based on loading messages from other Telegram Messenger channels, analyze them using NLP methods, and then, using experimental heuristics, make prediction when an air alert is about to start. Currently, there are many similar channels in Telegram Messenger, which publish up-to-date information about current air alerts. At the same time, there are many datasets with historical data about air alerts. Our experience of air alerts intuitively shows that there is a geospatial pattern in emerging alerts in different regions of Ukraine. As a result, knowing the cause of the alert and how alerts propagated in different regions, we can anticipate when an air alert is going to start and how long it is going to last in our region. Air alerts analytics is also considered in [1, 2, 3, 4, 5, 6, 7, 8].\nThe main goal of our study is to conduct an exploratory data analysis and create a predictive model to forecast the duration of air alerts."}, {"title": "2 Exploratory data analysis", "content": "For our study, we took historical data from [1]. Here we present some results about exploratory data analysis."}, {"title": "3 Training and validation of machine learning model", "content": "To build a predictive model, we can use binary features of the alert_ts dataframe; as a target for the model, we can specify the binary variable that the alert is going to occur at some time period within next 5 minutes. So, value 1 means that the alert will take place within next 5 minutes. In the case when the alert is not occurring at the current moment, it means that it will start not later than 5 minutes. In the case when the alert is ongoing, it means that the alert will last for at least 5 minutes. If the target value is 0, it means that the alert is not going to start or will be over in 5 minutes. To build a predictive model, we can use lagged values for binary regions features. So, we can face with a large number of lagged values. We tried another approach based on the features with cumulative values for alert duration. When there is no air alert, the value for this feature is 0. When the air alert starts in a region, then this feature is equal to the current duration of the alert. When the alert in the region is over, then the feature will have the value 0. For predictive analytics study, we chose the following regions: Lvivska oblast, Vinnytska oblast, Kyivska oblast, Kharkivska oblast."}, {"title": "4 Conclusion", "content": "In this study, we considered exploratory data analysis and approaches of predictive analytics for air alerts during Russian-Ukrainian war which started on Feb 24, 2022. The results show that alerts in some regions highly correlate with one another and have patterns which make it possible to build a predictive model to predict that alert in a certain region will start within a certain time period. Obtained results show that features from neighboring regions play more important role for the target variable of a specified region. Seasonality features such as hour, day of week and month, as well as time features equal to number of days from the initial day of dataset are also of high importance. We can observe that air alert patterns change with time. Alert time series of some regions have high level of correlation. It means that there are geospatial patterns in air alerts. As a result, features from one region can have a predictive potential for the air alert target variable in other regions."}, {"title": "A Appendix", "content": null}, {"title": "A.1 Forecasting alerts with time horizon 15 minutes", "content": "Figures 23-34 show features importance, ROC curve and accuracy scores on the test dataset for the regions under investigations in case of 15 minute time horizon of target variable."}, {"title": "A.2 Python function for training and validation of machine learning model", "content": "def train_validate_model(alert_ts, features, target, train_test_split_date,\n    n_estimators, filename):\n    \"\"\"\n    Training and validation machine learning model for prediction of alert duration\n    \"\"\"\n    alert_ts [target] = alert_ts [target].astype(int)\n    alert_ts_train = alert_ts[alert_ts['datetime']<train_test_split_date]\n    alert_ts_test = alert_ts [alert_ts ['datetime']>=train_test_split_date]\n    X_train, X_test = alert_ts_train [features], alert_ts_test [features]\n    y_train, y_test = alert_ts_train [target], alert_ts_test [target]\n    cl = RandomForestClassifier (n_estimators=n_estimators, random_state=15)\n    cl.fit (X_train, y_train)\n    y_pred = cl.predict(X_test)\n\n    accuracy = accuracy_score (y_test, y_pred)\n    print (f\"Accuracy: {accuracy:.2f}\")\n    print(\"\\nClassification_Report:\")\n    print (classification_report (y-test, y-pred))\n\n    print(\"\\nConfusion_Matrix:\")\n    print(confusion_matrix (y_test, y-pred))\n\n    y_prob = cl.predict_proba (X_test) [:, 1]\n\n    feature_importances = pd.Series(cl.feature_importances, index=features)\n    feature_importances.sort_values (ascending=False, inplace=True)\n    feature_importances.plot(kind='barh',figsize=(7,7))\n    plt.tight_layout()\n    plt.savefig(filename+'_imp.png', dpi=150, bbox_inches='tight')\n    plt.show()\n\n    fpr, tpr, _ = roc_curve (y-test, y-prob)\n    roc_auc = auc (fpr, tpr)\n\n    # Plot the ROC curve\n    plt.figure(figsize=(5,5))\n    plt.plot(fpr, tpr, color=\"blue\", lw=2, label=f\"ROCK Curve(AUC={roc_auc:.2f})\")\n    plt.plot([0, 1], [0, 1], color=\"gray\", linestyle=\"--\")\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True PositiveRate\")\n    plt.title(\"Receiver Operating Characteristic (ROC) Curve\")\n    plt.legend(loc=\"lower_right\")\n    plt.tight_layout()"}]}