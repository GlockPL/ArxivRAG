{"title": "DetectBERT: Towards Full App-Level Representation Learning to Detect Android Malware", "authors": ["Tiezhu Sun", "Nadia Daoudi", "Kisub Kim", "Kevin Allix", "Tegawend\u00e9 F. Bissyand\u00e9", "Jacques Klein"], "abstract": "Recent advancements in ML and DL have significantly improved Android malware detection, yet many methodologies still rely on basic static analysis, bytecode, or function call graphs that often fail to capture complex malicious behaviors. DexBERT, a pre-trained BERT-like model tailored for Android representation learning, enriches class-level representations by analyzing Smali code extracted from APKs. However, its functionality is constrained by its inability to process multiple Smali classes simultaneously. This paper introduces DetectBERT, which integrates correlated Multiple Instance Learning (c-MIL) with DexBERT to handle the high dimensionality and variability of Android malware, enabling effective app-level detection. By treating class-level features as instances within MIL bags, DetectBERT aggregates these into a comprehensive app-level representation. Our evaluation demonstrates that DetectBERT not only surpasses existing state-of-the-art detection methods but also adapts to evolving malware threats. Moreover, the versatility of the DetectBERT framework holds promising potential for broader applications in app-level analysis and other software engineering tasks, offering new avenues for research and development.", "sections": [{"title": "1 INTRODUCTION", "content": "The ubiquity of Android devices in today's digital ecosystem has made them a prime target for malicious actors. As the sophistication of Android malware continues to evolve, so does the need for effective detection mechanisms. Traditional malware detection approaches, while beneficial, often struggle to keep pace with the rapid development of new and complex malware apps [4, 15]. This challenge is exacerbated by the dynamic and open nature of the Android platform, which allows for the frequent introduction of new applications and updates."}, {"title": "2 BACKGROUND", "content": "To provide a foundation for understanding this study, this section delves into the background of three core concepts: Android malware detection, DexBERT, and multiple instance learning."}, {"title": "2.1 Android Malware Detection", "content": "Traditional Android malware detection methods have increasingly fallen short in addressing the complexity of malware varieties [4, 15]. The integration of machine learning [2, 24] and deep learning techniques [5, 7, 11] into the field represents a significant advance-ment, promising enhanced detection capabilities. Nonetheless, the application of these sophisticated approaches in Android malware detection encounters substantial challenges, as they largely rely on static analysis [8, 13, 18], low-level bytecode [5, 22], and function call graphs [14, 27], potentially overlooking the intricate behaviors inherent in modern malware. DetectBERT is the fist endeavor to enable DexBERT [21] to detect Android malware with a comprehen-sive app-level representation, from a novel perspective of multiple instance learning."}, {"title": "2.2 DexBERT", "content": "DexBERT [21] is a pretrained model based on the BERT architec-ture [6]. It is designed specifically for extracting class-level features from Android applications. It processes disassembled Smali code from Dalvik bytecode as input and learns to produce corresponding representations, i.e., the embedding of a Smali class. Smali serves as the textual representation of Dalvik bytecode, similar to how assembly code represents compiled code in a readable form. These class embeddings, or feature vectors, enable the execution of var-ious class-level Android analysis tasks, including malicious code localization. DexBERT's ability to understand the intrinsic logic and behavior of applications represents a substantial step forward in the battle against malware. However, its input capacity is limited to 512 BERT tokens, which is only enough to process one single Smali class. Considering that an APK typically contains thousands of Smali classes, there is a clear need for an effective class embed-ding aggregation method. Our proposed method, DetectBERT, is designed to leverage DexBERT's representation learning capabili-ties for app-level tasks, such as Android malware detection."}, {"title": "2.3 Multiple Instance Learning", "content": "In this study, we adopt Multiple Instance Learning [10, 12, 20] (MIL) as our strategy for integrating class-level embeddings into an over-all app-level representation. MIL is characterized by its ability to handle a collection of instances grouped into a \u201cbag\u201d, where the bag is assigned a single label, but individual instance labels are not provided. A notable challenge within MIL is the variable number of instances each bag may contain, requiring a MIL model that can adeptly manage bags of diverse sizes. MIL's versatility has been demonstrated in various domains, especially in computer vi-sion [19, 28] and in natural language processing [12, 23]. These successful applications inspired us to explore MIL's potential in enhancing Android malware detection using DexBERT. Specifi-cally, by conceptualizing each APK as a \u201cbag\u201d and its constituent Smali classes as \"instances\" within this framework, we are able to establish a fitting model for detecting malware in Android applica-tions. However, standard MIL may not fully capture the complex interconnections between Smali classes. This is where correlated Multiple Instance Learning (c-MIL) comes in, which considers the dependencies and interactions among instances within a bag. c-MIL enables DetectBERT to assess collective class behavior, crucial for"}, {"title": "3 APPROACH", "content": "In this section, we start with the key theoretical foundations of our method, then detail the design of DetectBERT."}, {"title": "3.1 Theoretical Foundations", "content": "THEOREM 3.1. Suppose $\\mathcal{S}: \\mathcal{X} \\rightarrow \\mathbb{R}$ is a continuous set function w.r.t Hausdorff distance [16] $d_{H}(., .)$. $\\forall \\epsilon > 0$, for any invertible map $\\mathcal{P}: \\mathcal{X} \\rightarrow \\mathbb{R}^{n}$, function $\\sigma$ and $g$, such that for any set $X \\in \\chi$:\n\n$|S(X) - g(\\mathcal{P}_{x\\in X}\\{\\sigma(x) : x \\in X\\})| < \\epsilon$ (1)\nThe proof of Theorem 3.1 can be found in [19]. This theorem shows that a Hausdorff continuous set function $\\mathcal{S}(X)$ can be ar-bitrarily approximated by a function in the form $g(\\mathcal{P}_{x\\in X}\\{\\sigma(x) : x \\in X\\})$. This concept applies to MIL, where the theorem's sets correspond to MIL's bags. Consequently, the theorem provides a foundation for approximating bag-level predictions in MIL using instance-level features. In the context of Android malware detection, this principle instructs us to achieve app-level predictions through the utilization of class-level embeddings produced by DexBERT.\nTHEOREM 3.2. The instances in the bag are represented by random variables $\\theta_{1}, \\theta_{2}, ..., \\theta_{n}$, the information entropy of the bag under the correlation assumption can be expressed as $H(\\theta_{1}, \\theta_{2}, ..., \\theta_{n})$, and the information entropy of the bag under the i.i.d. (independent and identical distribution) assumption can be expressed as $\\sum_{t=1}^{n} H(\\theta_{t})$, then we have:\n\n$\\begin{aligned} H(\\theta_{1}, \\theta_{2}, ..., \\theta_{n}) & = \\sum_{t=2}^{n} H(\\theta_{t}|\\theta_{1}, \\theta_{2}, ..., \\theta_{t-1}) + H(\\theta_{1}) \\\\ & \\leq \\sum_{t=1}^{n} H(\\theta_{t})  \\end{aligned}$ (2)\nThe proof of Theorem 3.2 can be found in [19]. This theorem demonstrates that a bag under the correlation assumption has lower information entropy than that under the i.i.d. assumption (i.e., in standard MIL). The lower information entropy in c-MIL suggests reduced uncertainty and the potential to provide more valuable information for bag classification tasks than the standard MIL. In the context of Android malware detection, we claim that the Smali classes from the same APK are correlated in some way (e.g., invoca-tion relationships between classes). This implies that the presence or absence of a malicious class in a bag can be influenced by the other classes contained within the APK. Therefore, c-MIL seems a perfect choice to leverage the class embeddings of DexBERT for the app-level task of Android malware detection.\nGiven an app $X_{i}$ composed of Smali classes $\\{x_{i,1}, x_{i,2}, ..., x_{i,n}\\}$, for $i = 1,..., N$, that exhibit correlation among each other. The"}, {"title": "3.2 DetectBERT", "content": "According to Theorem 3.1, we leverage a series of sub-functions to approximate the c-MIL score function $\\mathcal{S}$ defined in Equation 4. Given a set of APKs $\\{X_{1}, ..., X_{N}\\}$, where each APK $X_{i}$ contains multiple Smali classes $\\{x_{i,1},..., x_{in}\\}$ and an APK label $Y_{i}$, a corre-sponding category vector $x_{i,category}$ is randomly initialized. We represent DexBERT [21] as a feature extracting function $f$, Multi-layer Perceptron [17] as $MLP$, Nystr\u00f6m Attention Layer [25] as $NAL$ and Layer Normalization [3] as $LN$. The c-MIL score function $\\mathcal{S}$ can be approximated as follows:\n\n$X = [x_{i,category}, f (x_{i,1}), ..., f (x_{i,n})]$ (5)\n\n$x_{i,category} = (NAL(LN(X)) + X) (6)$\n\n$\\hat{Y}_{i} = MLP(LN(x_{i,category}))$ (7)\nThe selection of the Nystr\u00f6m Attention layer in DetectBERT's architecture is driven by its capability to efficiently handle large sequences of data. First, as an attention mechanism, Nystr\u00f6m At-tention naturally facilitates the learning of correlations among class embeddings, treating them akin to tokens in natural language processing. This enables DetectBERT to dynamically assess and prioritize the relevance of each Smali class' features based on their contextual relationship, crucial for accurate malware detection. Sec-ondly, when confronted with a vast number of tokens-typical in complex Android applications-the Nystr\u00f6m Attention layer proves significantly more efficient than traditional attention mechanisms. Its design reduces computational complexity from quadratic to lin-ear, making it especially suitable for large-scale datasets where efficiency is paramount. These characteristics make Nystr\u00f6m At-tention an ideal choice for DetectBERT.\nDetectBERT distinguishes itself from TransMIL and LaFiCMIL in three key aspects. Firstly, unlike the image cropping in TransMIL or document splitting in LaFiCMIL, DetectBERT directly utilizes Smali classes as natural instances for c-MIL without requiring any pre-processing steps. Secondly, our model does not employ positional embeddings, as outlined in Equation 5. This decision is based on the observation that Smali classes are interconnected through invoca-tion relationships rather than a sequential order. Lastly, to enhance efficiency, the weight parameters of DexBERT are frozen during training. DetectBERT leverages the DexBERT's original capacity to generate meaningful class embeddings without the need for further fine-tuning, thus avoiding additional computational costs."}, {"title": "4 STUDY DESIGN", "content": "This section outlines the design of our study, detailing the research questions, dataset, empirical setup, and evaluation metrics used to assess the performance of DetectBERT."}, {"title": "4.1 Research Questions", "content": "We mainly investigate three research questions, each aimed at exploring different aspects of DetectBERT's performance:\n\u2022 RQ1: How does DetectBERT perform compared to basic feature aggregation methods in detecting Android malware?\n\u2022 RQ2: How does DetectBERT perform compared to state-of-the-art Android malware detection models?\n\u2022 RQ3: How does DetectBERT maintain its detection effective-ness over time in the face of evolving Android malware?\nThese questions are designed to comprehensively evaluate the effectiveness, competitiveness, and robustness of DetectBERT."}, {"title": "4.2 Dataset", "content": "For our evaluation, we utilize the large-scale benchmark dataset from DexRay [5], which contains a total of 158 803 apps. This dataset facilitates a direct comparison of DetectBERT against basic aggre-gation methods and the state-of-the-art Android malware detection approaches. The malware and benign apps in the DexRay dataset are selectively collected from the popular and continually growing Android repository named AndroZoo [1]. Specifically, the DexRay dataset contains 96 994 benign and 61 809 malware apps. Benign apps are defined as the apps that have not been detected by any antivirus from VirusTotal 1, while the malware collection contains the apps that have been detected by at least two antivirus engines."}, {"title": "4.3 Empirical Setup", "content": "In our empirical setup, we employ the DexBERT model to generate a feature vector for each Smali class. Considering the extensive size of the dataset, we optimize our process by storing these generated"}, {"title": "4.4 Evaluation Metrics", "content": "For comparison with basic aggregation methods in Section 5.1 and comparison with state-of-the-art approaches in Section 5.2, we follow the baseline DexRay [5] by shuffling the dataset and split it into 80% for training, 10% for validation, and 10% for test. This process is repeated 10 times to ensure robustness, with the average results reported. In Section 5.3, to assess temporal consistency, we temporally partition our dataset, using apps from 2019 for training (90%) and those from 2020 for testing (10%), based on the date information in the app's DEX file. Results are reported using the four metrics: accuracy (%), precision (%), recall (%), and F1 Score (%), with precision maintained to two decimal places for consistency with baseline results."}, {"title": "5 EXPERIMENTAL RESULTS", "content": "In this section, we evaluate DetectBERT's performance by address-ing the three research questions outlined in Section 4.1, aiming to provide insights into distinct aspects of its effectiveness."}, {"title": "5.1 RQ1: How does DetectBERT perform compared to basic feature aggregation methods in detecting Android malware?", "content": "In this subsection, we evaluate DetectBERT's performance in detect-ing Android malware by comparing it against three fundamental techniques for aggregating DexBERT embeddings: Random Selec-tion, Element-wise Addition, and Element-wise Average. Each tech-nique compresses information from multiple class embeddings into a single representative vector, which is then used as input to a fully connected layer for final prediction.\n\u2022 Random Selection: It randomly selects a single class em-bedding to represent the entire APK, testing the efficacy of individual class features in malware detection.\n\u2022 Element-wise Addition: It aggregates class embeddings by adding corresponding elements together, aiming to capture the cumulative effect of features across all classes.\n\u2022 Element-wise Average: Similar to addition, it calculates the average of corresponding elements, offering a normalized representation of class features.\nTable 1 shows that while the Element-wise Average method achieves an F1 score of 0.92, indicating the effectiveness of DexBERT embeddings, DetectBERT significantly outperforms this and other"}, {"title": "RQ1 Answer:", "content": "DetectBERT significantly outperforms basic aggregation methods in detecting Android malware, emphasizing the importance of advanced embedding processing techniques for handling complex Android APKs, thus enhancing the reliability and accuracy of malware detection systems."}, {"title": "5.2 RQ2: How does DetectBERT perform compared to state-of-the-art Android malware detection models?", "content": "In this subsection, we evaluate the competitive performance of DetectBERT against two established state-of-the-art models in the field of Android malware detection: Drebin [2] and DexRay [5]. Drebin is known for its application of machine learning techniques to hand-crafted features, while DexRay utilizes a deep learning framework to analyze low-level bytecode images."}, {"title": "RQ2 Answer:", "content": "DetectBERT slightly surpasses the performance of state-of-the-art models Drebin and DexRay. This superior per-formance still demonstrates the effectiveness of its archi-tecture in leveraging MIL to enhance detection accuracy in complex malware datasets."}, {"title": "5.3 RQ3: How does DetectBERT maintain its detection effectiveness over time in the face of evolving Android malware?", "content": "Model aging [26, 30] is a significant challenge in machine learning, where a model's performance tends to degrade when applied to new, previously unseen samples. In this section, we assess the robustness of DetectBERT against model aging by evaluating its temporal consistency, a measure of how well a model trained on historical data performs against recent threats. The methodology for this temporal consistency evaluation is detailed in Section 4.4, where the dataset is divided into training sets from 2019 and testing sets from 2020 to accurately emulate real-world applications against evolving malware. The performance of DetectBERT and other state-of-the-art models is compared using these temporally distinct datasets."}, {"title": "RQ3 Answer:", "content": "DetectBERT exhibits exceptional temporal consistency in malware detection, effectively mitigating model aging is-sues and demonstrating robust generalization capabilities to new and evolving threats. These qualities position our model as an invaluable asset in the ongoing battle against Android malware."}, {"title": "6 CONCLUSION", "content": "In this paper, we introduce DetectBERT, a novel framework that leverages the capabilities of DexBERT for app-level analysis, specif-ically tailored for the complex task of Android malware detection. By employing a correlated Multiple Instance Learning (c-MIL) strat-egy, DetectBERT not only surpasses traditional feature aggregation methods but also outperforms current state-of-the-art malware detection models. The performance improvement suggests that De-tectBERT could set a new standard for Android security analysis, representation learning, and other software engineering tasks.\nFuture Work: We aim to further validate DetectBERT by com-paring it with additional malware detection models and enhancing its ability to analyze a wider range of malware behaviors. This in-cludes integrating continuous learning mechanisms and incorporat-ing more comprehensive contextual data from APKs. Furthermore, we are excited about the prospects of adapting our c-MIL-based framework for other software engineering tasks that handle large-scale data inputs, potentially broadening its applicability and impact in the field."}]}