{"title": "Exact Algorithms for Multiagent Path Finding with Communication Constraints on Tree-Like Structures", "authors": ["Foivos Fioravantes", "Du\u0161an Knop", "Jan Maty\u00e1\u0161 K\u0159i\u0161\u0165an", "Nikolaos Melissinos", "Michal Opler"], "abstract": "Consider the scenario where multiple agents have to move in an optimal way through a network, each one towards their ending position while avoiding collisions. By optimal, we mean as fast as possible, which is evaluated by a measure known as the MULTIAGENT PATH FINDING problem. In this work, we additionally provide the agents with a way to communicate with each other. Due to size constraints, it is reasonable to assume that the range of communication of each agent will be limited. What should be the trajectories of the agents to, additionally, maintain a backbone of communi-cation? In this work, we study the MULTIAGENT PATH FIND-ING WITH COMMUNICATION CONSTRAINT problem under the parameterized complexity framework.\nOur main contribution is three exact algorithms that are effi-cient when considering particular structures for the input net-work. We provide such algorithms for the case when the com-munication range and the number of agents (the makespan resp.) are provided in the input and the network has a tree topology, or bounded maximum degree (has a tree-like topol-ogy, i.e., bounded treewidth resp.). We complement these re-sults by showing that it is highly unlikely to construct efficient algorithms when considering the number of agents as part of the input, even if the makespan is 3 and the communication range is 1.", "sections": [{"title": "Introduction", "content": "The MULTIAGENT PATH FINDING (MAPF for short) prob-lem is a well-known challenge in the field of planning and coordination. It involves navigating multiple agents through a topological space, often modeled as an undirected graph, to reach their respective destinations. In many real-world scenarios, additional constraints on the agents' movements are required. One such constraint is the communication constraint, which requires agents to maintain a connected set of vertices in a communication graph as they move; this is then the MULTIAGENT PATH FINDING WITH COMMU-NICATION CONSTRAINT (MAPFCC for short) problem.\nThis requirement can arise, for example, from the need to constantly communicate with a human operator (Amigoni, Banfi, and Basilico 2017). Sometimes, only a periodic con-nection might be sufficient (Hollinger and Singh 2012). On the other hand, applications in a video game movement of agents (Snape et al. 2012) should require near-connectivity, since we want the group of virtual soldiers to move in a mob.\nIt should also be noted that the communication constraints we consider are born as a natural first step towards further understanding and providing new insights into solving the MAPF problem in the distributed setting. We believe that such a setting, where each agent needs to do some local computation taking into account only a partial view of the network and the subset of the other agents that are withing its communication range, is rather natural and worth investi-gating. Such a framework is particularly well-suited for ex-ploring the emergence of swarm intelligence through agent cooperation.\nThe complexity of the MULTIAGENT PATH FINDING problem increases significantly when the movement and communication graphs are independent of each other. In fact, under these conditions, the problem is PSPACE-complete (Tateo et al. 2018). This raises a natural ques-tion: Is the problems' complexity equally severe when the movement and communication graphs are related? For in-stance, if we assume that communication among agents oc-curs within the same space they are navigating, it is reason-able to model the communication graph as identical to the movement graph. Alternatively, we could consider scenarios where the communication graph is a derivative of the move-ment graph, such as its third power, allowing agents to com-municate over a distance of three edges in the original graph. However, the problem stays PSPACE-complete even if the agents move in a subgraph of a 3D grid and the communica-tion is based on radius (Calviac, Sankur, and Schwarzentru-ber 2023).\nWe refer the reader to the next section for the formal def-initions.\nBoth MULTIAGENT PATH FINDING and MULTIAGENT PATH FINDING WITH COMMUNICATION CONSTRAINT problems are systematically studied; most researchers deal with the hardness using specific algorithms or heuristics. The most popular approaches to find optimal solutions are using the A* algorithm (e.g. (Sharon et al. 2015, 2013)) or ILP solvers (e.g. (Yu and LaValle 2013)). Another pop-ular line of research used the Picat language (Zhou, Kjeller-strand, and Fruhman 2015; Bart\u00e1k et al. 2017). A wide range of heuristics is commonly used, such as those based on lo-"}, {"title": "Preliminaries", "content": "Formally, the input of the MULTIAGENT PATH FINDING problem consists of a graph $G = (V, E)$, a set of agents $A$, two functions $s_0: A \\rightarrow V$, $t: A\\rightarrow V$ and a positive integer $l$, known as the makespan. For any pair $a, b \\in A$ where $a \\neq b$, we have that $s_0(a) \\neq s_0(b)$ and $t(a) \\neq t(b)$. Initially, each agent $a \\in A$, is placed on the vertex $s_0(a)$. At spe-cific times, the agents are allowed to move to a neighboring vertex but are not obliged to do so. The agents can make at most one move per turn, and each vertex can host at most one agent at a given turn. The position of the agents at the end of the turn $i$ (after the agents have moved) is given by an injective function $s_i : A \\rightarrow V$.\nIn this paper we consider the MULTIAGENT PATH FIND-ING WITH COMMUNICATION CONSTRAINT (MAPFCC for short) problem. In this generalization of the classical MULTIAGENT PATH FINDING problem, each agent has the capacity to communicate with other agents that are located within his communication range, and it must always be en-sured that there is a subset of agents that form a backbone ensuring the communication between all pairs of agents. This communication range is modeled by an integer $d$ that is also part of the input.\nIn order to define what is a feasible solution, we first need to define an auxiliary graph $D$; let us call this the communi-cation graph. First, we set $V(D) = V(G)$. Then, for ev-ery pair $u, v \\in V(D)$ we add an edge in $D$ if and only if $dist(u, v) \\leq d$. We say that a vertex set $W \\subseteq V(G)$ is $d$-connected if the induced subgraph $D[W]$ is connected. We say that a sequence $s_1,..., s_m$ is a feasible solution of $(G, A, s_0, t, d, l)$ if:\n1.  $s_i(a)$ is a neighbor of $s_{i-1}(a)$ in $G$, for every agent $a \\in A$, $i \\in [m]$,\n2.  for all $i \\in [m]$ and $a, b \\in A$ where $a \\neq b$, we have that $s_i(a) \\neq s_i(b)$,"}, {"title": "The Problem is Very Hard", "content": "In this section we will prove the following theorem.\nTheorem 1. The MULTIAGENT PATH FINDING WITH COMMUNICATION CONSTRAINT problem is W[1]-hard parameterized by the number of agents, even for $l = 3$ and $d = 1$.\nProof. The reduction is from the $k$-MULTICOLORED CLIQUE ($k$-MCC for short) problem. This problem takes as input a graph $G = (V, E)$, whose vertex set $V$ is parti-tioned into the $k$ independent sets $S_1, ..., S_k$. The question is whether there exists a clique on $k$ vertices as an induced subgraph of $G$. Observe that if such a clique does exist, then it contains a unique vertex from $S_i$, for each $i \\in [k]$. This problem was shown to be W[1]-hard in (Fellows et al. 2009).\nStarting from an input of the $k$-MCC problem, con-sisting of a graph $H$ whose vertex set is partitioned into the sets $S_1,..., S_k$, we will construct an instance $I = (G, A, s_0, t, 1, 3)$ of MAPFCC such that $I$ is a yes-instance if and only if $H$ contains a clique on $k$ vertices as an induced subgraph.\nThe construction of G. First, we describe the two gad-gets that will serve as the building blocks of G. For each $i \\in [k]$, let $S_i = \\{v_1^i, . . ., v_n^i\\}$; we build the $V_i$ gadget as fol-lows. We begin with $n$ paths with $k - 1$ vertices each, each one corresponding to a vertex of $S_i$. So, for each $p \\in [n]$, we have the path $P_p^i = v_{p,1}^i...v_{p,i-1}^i v_{p,i+1}^i...v_{p,k}^i$ which excludes the vertex $v_p^i$. We then add the new path $a_1^i...a_{i-1}^i a_{i+1}^i...a_k^i$ and, for each $p\\in [n]$, we add the edge $a_j^i v_{p,j}^i$, for each $j \\in [k] \\backslash i$. We say that the vertices $v_{p,0}^i,v_{p,1}^i$ and $v_{p,k}^i$ for every $p \\in [n]$ are the top and bottom ver-tices of the $V_i$ gadget, respectively (if $i = 1$ or $i = k$ we adapt accordingly). This finishes the construction of the $V_i$ gadget. Next, for each $l, m \\in [k]$ with $l < m$, we build the $E_{l,m}$ gadget. This gadget consists in a forest of edges, each one corresponding to an edge between the vertices of $S_l$ and $S_m$ in $H$. That is, there exist vertices $u_p^{l,m}$ and $u_q^{l,m}$ in $E_{l,m}$ such that $u_p^{l,m}u_q^{l,m} \\in E(E_{l,m})$ if and only if there exist vertices $v_p^l \\in S_l$ and $v_q^m \\in S_m$ such that $v_p^l v_q^m \\in E(H)$. We say that $u_p^{l,m}$ and $u_q^{l,m}$, for every $p,q \\in [n]$, are the top and bottom, respectively, vertices of $E_{l,m}$. Note that $E_{l,m}$ contains at most $O(n^2)$ vertices. More-over, since $l < m$, we have $\\frac{k(k-1)}{2}$ different such gadgets in total. This finishes the construction of the two gadgets we will need.\nWe are now ready to construct the graph $G$. We start with a copy of the $V_i$ gadget for each $i \\in [k]$ and a copy of the $E_{l,m}$ gadget for each $l, m \\in [k]$ with $l < m$. For each $i \\in [k - 1]$, we add all the edges between the bottom vertices of $V_i$ and the top vertices of $V_{i+1}$, as well as the edge $a_k^i a_1^{i+1}$."}, {"title": "Efficient Algorithms", "content": "In this section we present our FPT algorithms that solve the MAPFCC problem.\nFew Agents and Short Communication\nTheorem 2. The MULTIAGENT PATH FINDING WITH COMMUNICATION ConstraiNT problem is in FPT pa-rameterized by the number of agents $k$ plus the maximum degree $\\Delta$ and the communication range $d$.\nProof. Let $(G, A, s_0, t, d, l)$ be an instance of MULTI-AGENT PATH FINDING WITH COMMUNICATION CON-STRAINT. The algorithm is as follows. We build a directed graph $H$ which has a vertex $u$ for every possible arrange-ment of the $k$ agents of $A$ into feasible ($d$-connected) po-sitions. Observe that $V(H)$ contains the vertices $u_s$ and $u_t$ which correspond to the initial and the final configurations of the agents on the vertices of $G$ respectively. Two ver-tices $u_1, u_2 \\in V(H)$ are joined by the arc $(u_1, u_2)$ if and only if it is possible to move from the configuration that is represented by the vertex $u_1$ into the one represented by $u_2$ in one turn. Clearly, $(G, A, s_0, t, d, l)$ is a yes-instance of MULTIAGENT PATH FINDING WITH COMMUNICATION CONSTRAINT if and only if the shortest directed path of $H$ connecting $u_s$ to $u_t$ is of length at most $l$. We will show that $|V(H)| \\leq \\Delta^{O(dk)}k^{dk}n$, which suffices to prove the state-ment.\nLet us consider an agent $a \\in A$. We will first count the different feasible arrangements of the $k$ agents of $A$ (i.e., the possible positions of the agents on the graph) such that $a$ is located at a vertex $u \\in V(G)$. Since two agents are considered connected if they are in distance at most $d$ and we have $k$ agents, there must be a set $U$ of $dk$ vertices such that $G[U]$ is connected and all agents are located in $U$. It is known (see Proposition 5.1. of (Guillemot and Marx 2014)) that given $u$, there exist at most $\\Delta^{O(dk)}$ sets $U$ of size $dk$ where $u \\in U G[U]$ is connected. We can also enumerate them in time $\\Delta^{O(dk)}$. Finally, we need to guess the exact positions of the agents in $U$. Since the possible arrangement of the agents in $U$ are $(dk)^k! \\leq k^{dk}$, we have that $|V(H)| \\leq \\Delta^{O(dk)} k^{dk}n$.\nTheorem 3. The MULTIAGENT PATH FINDING WITH COMMUNICATION ConstraiNT problem is in FPT pa-rameterized by the number of agents $k$ plus the communi-cation range $d$ when the input graph is a tree.\nProof. Let $I = (T, A, s_0, t, d, l)$ be an instance of MUL-TIAGENT PATH FINDING WITH COMMUNICATION CON-STRAINT, where $T$ is a tree. The idea here is to create a new instance $I' = (T', A, s_0, t, d, l)$ such that $I$ is a yes-instance if and only if the same is true for $I'$, where $T'$ is a tree of maximum degree $3k$. In essence we will prune the tree $T$ so that its maximum degree becomes bounded by $3k$ and adapt appropriately the movements of the agents. Once this is done, it suffices to apply the algorithm provided in Theo-rem 2 to decide if $I'$ is a yes-instance or not.\nIf $\\Delta(T) \\leq 3k$ then we are done. So, let $u \\in V(T)$ such that $d_T(u) > 3k$. We may also assume that the makespan of $I$ is optimal. For each $j \\in [k]$, we define $P_{ju}$ to be the simple path of $T$ that connects $s_0(a_j)$ to $u$. Similarly, let $P_{ju}^t$ be the simple path of $T$ that connects $u$ to $t(a_j)$. Observe that in the case where $u = s_0(a_j)$ ($u = t(a_j)$ resp.), for some $j \\in [k]$, then $P_{ju} = \\emptyset$ ($P_{ju}^t = \\emptyset$ resp.).\nThen, we define $P^-(u) = \\{P_{1,u},..., P_{k,u}\\}$ and $P^+(u) = \\{P_{1u}^t,..., P_{ku}^t\\}$. Intuitively, the former (latter resp.) set contains all the paths of $T$ that will be relevant for the agents to reach $u$ (their targets resp.) from their initial positions (from $u$ resp.). Finally, let $V_u = N(u) \\cap (P^-(u) \\cup P^+(u))$. That is, $V_u$ contains $u$ and its neighbors that are relevant in regards to the paths mentioned above. Observe that $V_u < 2k$. Let $T_u$ be the connected subtree of $T[V \\backslash V_u]$ that con-tains $u$. Since $d_T(u) > 3k$, we have that $T_u$ contains at least the vertices $v_1, ..., v_p \\in N(u) \\backslash V_u$, for some $p > k$. We are now ready to describe the pruning that we perform: starting from $T$, delete all the vertices of $T_u$, except from $u$ and $k$ of its children $v_1, . . ., v_k$ in $T_u$; let $T'$ be the resulting graph.\nClaim 1. If $I = (T, A, s_0, t, d, l)$ is a yes-instance, then $I' = (T', A, s_0, t, d, l)$ is also a yes-instance.\nProof of the claim. Assume that $s = (s_1,..., s_\\ell)$ is a feasi-ble solution of $I$; we will construct $s' = s_1, ..., s_\\ell$ to be a feasible solution of $I'$. We start by setting $s_0'(a) = s_0(a)$ for every $a \\in A$. Then, for every $i \\in [\\ell]$ and for every $j \\in [k]$, we set\n\\[s_i'(a_j) = \\begin{cases}s_i(a_j), & \\text{if } s_j(a_j) \\notin T_u \\backslash \\{u\\}\\\\v_i, & \\text{otherwise}.\\end{cases}\\]\nFirst, we need to show that $s_i'(a)$ is a neighbor of $s_{i-1}'(a)$ for every $a \\in A$. Let $a \\in A$ and $i \\in [\\ell]$. We distinguish the following cases:\n1.  $s_i(a) \\in T_u \\backslash \\{u\\}$ and $s_{i-1}(a) \\in T_u \\backslash \\{u\\}$. Then $s_i'(a) = s_{i-1}'(a) = v_i$ for some $j \\in [k]$.\n2.  $s_i(a) \\in T_u \\backslash \\{u\\}$ and $s_{i-1}(a) \\notin T_u \\backslash \\{u\\}$. Since $s$ is a feasible solution, we have that $s_{i-1}(a) = u$. Thus, $s_i'(a) = v_i$ for some $j \\in [k]$ and $s_{i-1}'(a) = s_{i-1}(a) = u$.\n3.  $s_i(a) \\notin T_u \\backslash \\{u\\}$ and $s_{i-1}(a) \\notin T_u \\backslash \\{u\\}$. Then $s_i'(a) = s_i(a)$ and $s_{i-1}'(a) = s_{i-1}(a)$ and the feasibility of $s'$ is guaranteed by the feasibility of $s$."}, {"title": "Tree-like Structures", "content": "Theorem 4. The MAPFCC problem is in FPT parameter-ized by the treewidth $w$ of $G$ plus the makespan $l$ and the communication range $d$.\nProof. Let $I = (G, A, s_0, t, d, l)$ be an instance of MAPFCC. Our goal is to construct an auxiliary graph $G_I$ with special vertex and edge labels, such that (i) the treewidth of $G_I$ is at most $3lw$ whenever $I$ is a yes-instance, and (ii) the existence of a solution can be expressed by an MSO2 sentence over $G_I$. The claim then follows by a stan-dard use of the Courcelle's theorem (Courcelle 1990).\nLet $G = (V, E)$ be the graph of the input instance. We start by constructing a labeled auxiliary graph $G_1$. Its vertex set is composed of sets $V_0,..., V_\\ell$ where $V_i$ contains one copy of each vertex from $V$, i.e., $V_i = \\{v_i | v \\in V\\}$ ( we denote by $v_i$ the copy of the vertex $v$ in $V_i$). We refer to these sets as layers and we give all the vertices in $V_i$ a vertex label $vertex_i$. The graph $G_1$ contains four different types of edges with four distinct edge labels defined as follows.\n1.  For every $v \\in V$ and $i \\in [\\ell]$, we add to $G_I$ the edge $v_{i-1}v_i$ with an edge label copy.\n2.  For every $uv \\in E$ and $i \\in \\{0, . . ., \\ell\\}$, we add to $G_I$ the edge $u_iv_i$ with an edge label inner.\n3.  For every $uv \\in E$ and $i \\in [\\ell]$, we add to $G_I$ the edges $u_{i-1}v_i$ and $v_{i-1}u_i$ with an edge label cross.\n4.  Finally for every agent $a \\in A$, we add to $G_I$ the edge $s_0(a)_0t(a)_\\ell$ with en edge label agent.\nObserve that the first three types of edges correspond ex-actly to the strong product of G with a path of length $l$. In a sense, the construction combines the time-expanded graphs used previously for MAPF (Fioravantes et al. 2024) with the augmented graphs considered for edge-disjoint paths (Zhou, Tamura, and Nishizeki 2000; Ganian, Ordyniak, and Ra-manujan 2021). Importantly, we observe that the existence of a solution is equivalent to an existence of a set of vertex-disjoint paths in $G_1$ with some additional properties.\nObservation 1. The instance $I$ is a yes-instance if and only if there exists a set of vertex-disjoint paths $P = \\{P_a | a \\in A\\}$ such that\n1.  each $P_a$ contains exactly one vertex from each layer,\n2.  the endpoints of each $P_a$ are the vertices $s_0(a)_0$ and $t(a)_\\ell$,\n3.  there are no two paths $P_a$ and $P_b$, vertices $u, v \\in V$ and $i \\in [\\ell]$ such that $P_a$ contains the edge $u_{i-1}v_i$ and $P_b$ contains the edge $v_{i-1}u_i$, and\n4.  for each $i \\in \\{0,...,l\\}$, the set of vertices $W_i \\subseteq V_i$ visited by paths from $P$ forms a $d$-connected set in $G[V_i]$.\nWe show later how to translate these properties into MSO2 predicates. Unfortunately, it is not guaranteed that $G_1$ must have small treewidth due to the edges connecting targets and destinations of individual agents. However, we can bound its treewidth whenever $I$ is a yes-instance.\nClaim 2. If $I$ is a yes-instance, then the treewidth of $G_I$ is at most $O(lw)$."}, {"title": "Conclusion", "content": "In this paper we initiated the study of the parameterized complexity of the MULTIAGENT PATH FINDING WITH COMMUNICATION CONSTRAINT problem. Our work opens multiple new research directions that can be explored. First and foremost is the question of checking the efficiency of our algorithms in practice. In particular, the MSO encoding we provide for Theorem 4 is implementable by employing any state-of-the-art MSO solver (e.g., (Langer 2013; Ban-nach and Berndt 2019; Hecher 2023)). On the other hand, one could also argue that our work provides ample motiva-tion to follow a more heuristic approach. Even in this case, it is worth checking if our exact algorithms can be used as sub-routines to improve the effective running time of the state-of-the-art algorithm that are used in practice. We consider all the above important enough to warrant their respective dedicated studies."}]}