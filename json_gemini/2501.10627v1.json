{"title": "AI/ML Based Detection and Categorization of Covert Communication in IPv6 Network", "authors": ["Mohammad Wali Ur Rahman", "Yu-Zheng Lin", "Carter Weeks", "David Ruddell", "Jeff Gabriellini", "Bill Hayes", "Salim Hariri", "Edward V. Ziegler Jr."], "abstract": "The flexibility and complexity of IPv6 extension headers allow attackers to create covert channels or bypass security mechanisms, leading to potential data breaches or system compromises. The mature development of machine learning has become the primary detection technology option used to mitigate covert communication threats. However, the complexity of detecting covert communication, evolving injection techniques, and scarcity of data make building machine-learning models challenging. In previous related research, machine learning has shown good performance in detecting covert communications, but oversimplified attack scenario assumptions cannot represent the complexity of modern covert technologies and make it easier for machine learning models to detect covert communications. To bridge this gap, in this study, we analyzed the packet structure and network traffic behavior of IPv6, used encryption algorithms, and performed covert communication injection without changing network packet behavior to get closer to real attack scenarios. In addition to analyzing and injecting methods for covert communications, this study also uses comprehensive machine learning techniques to train the model proposed in this study to detect threats, including traditional decision trees such as random forests and gradient boosting, as well as complex neural network architectures such as CNNs and LSTMs, to achieve detection accuracy of over 90%. This study details the methods", "sections": [{"title": "1. Introduction", "content": "Internet Protocol version 6 (IPv6) is the latest developed version of the Internet Protocol with a larger addressing space. It was launched to solve the problem of IPv4 addresses being exhausted. Several improvements are designed to improve network security and efficiency and apply to various devices. However, extension headers in IPv6 allow attackers to inject covert traffic, which increases the risk of data leakage or injects malware that is difficult to detect. Therefore, exploring methods for detecting IPv6 covert communications is crucial in emerging network environments.\nIn recent years, with the development of computer computing power and massive research investment in machine learning algorithms, machine learning has succeeded in cybersecurity, including the classification of network traffic [1]. In this context, using machine-learning approaches for detecting packets injected with covert communication and identifying the location of the injected headers become the solution of choice. The goal is to mitigate the threat of injected covert communication when using IPv6. However, attack methods are changing rapidly, and effectively training a machine learning model to detect and classify anomalies requires a large amount of high-quality data. In addition, it also relies on a comprehensive understanding of IPv6's potential covert communication injection threats to reflect real-world issues.\nIn this study, we used the prisoner problem as a covert communication scenario[2], where Alice wants to send a message to Bob, and the warden, Wendy, tries to detect it. To address the high-quality dataset required for machine learning training, we developed a real-life IPv6 dataset embedded with hidden communications, mimicking the complexity and subtlety of po-"}, {"title": "2. Related Research", "content": "Though critical, the exploration of covert communications within the IPv6 protocols remains under-researched compared to other aspects of network security. The existing research focuses extensively on the potential for embedding covert data within various IPv6 header fields, which the protocol's expanded architecture has significantly facilitated.\nThe Study by Lucena et al. [4] has been foundational, identifying up to 22 covert channels within IPv6. These channels leverage underutilized fields such as the Flow Label and Payload Length, offering stealthy methods for transmitting hidden information across networks while evading standard detection mechanisms. Another notable development is the pcapStego tool by Zuppelli and Caviglione (2021), designed to inject covert communications directly into IPv6 headers, simulating real-world covert channel utilization for research purposes [5]."}, {"title": "3. Methodology", "content": null}, {"title": "3.1. Threat Modelling", "content": "As shown in Figure 2, our threat modeling is motivated by the idea of the Prisoners' Problem and the application of Subliminal Channels [2]. In this scenario, two parties, Alice and Bob, want to communicate secretly through IPv6 packets so that Wendy, the warden, will not be able to intercept their communication. Manipulation of several IPv6 header fields, including the Flow Label, Payload Length, and the Source/Destination Address Spaces, may enable covert communication [8]. These fields might contain encrypted data or patterns that a novice observer or a simple detection system would not immediately recognize as anomalous.\nOur machine learning model's primary goal is to enable Wendy to recognize these secret communications and, if feasible, retrieve the hidden information. The model applies sophisticated machine learning techniques as described in [9] to identify discrepancies that indicate covert activities by leveraging patterns found from the analysis of these header fields."}, {"title": "3.2. Operational Pipeline", "content": "Our research employs a sophisticated machine learning pipeline to identify and categorize covert communications within IPv6 network traffic, illustrated in Figure 3. This machine learning pipeline integrates data collection, encryption, preprocessing techniques, and advanced neural network models.\nBelow, we detail each step involved in the pipeline."}, {"title": "3.2.1. Data Collection and Generation", "content": "Data for this study was meticulously collected and generated to ensure a robust dataset for machine learning analysis. Below are details on the acquisition and generation of both normal and covert traffic:\n\u2022 Normal Traffic Acquisition: Data on normal IPv6 traffic was obtained from the 2019 IPv6 Launch Day Anonymized Internet Traces provided by CAIDA [10]. This dataset offers a thorough view of typical network behavior. The dataset was further processed using the"}, {"title": "\u2022 Covert Traffic Creation", "content": "To simulate the anomalous or covert class, covert communication traffic was synthetically created. The covert traffic was created using Python scripts that applied different encryption techniques to IPv6 fields. This ensured that the traffic looked authentic. This methodology tests and challenges our machine learning models' detection capabilities [12].\nThe dataset used in our machine learning research is summarized in the following table.\nIn addition, the covert packets were further categorized according to the fields in IPv6 packets that were encrypted, providing us insights about the IPv6 fields, that are exploited the most during covert communications."}, {"title": "3.2.2. Data Processing", "content": "\u2022 Filtering and Preprocessing: Before being preprocessed to make it appropriate for machine learning analysis, the gathered data is filtered to remove unnecessary information. This could involve preparing the data into an organized CSV format for additional processing, cleaning the data, and dealing with missing values.\n\u2022 Feature Selection: We employ domain knowledge and data characteristics to perform feature selection, identifying which IPv6 fields are most indicative of covert communications. This step enhances model accuracy and computational efficiency [13].\n\u2022 Normalization and Encoding: The data may be normalized or encoded depending on the nature of the IPv6 fields, to prepare it for use in machine learning models. Normalization scales numeric fields to a uniform scale, while encoding transforms categorical fields into numeric formats [14]."}, {"title": "3.2.3. Covert Communication Detection", "content": "\u2022 Binary Classification: A neural network for binary classification is trained using a labeled dataset that includes both covert and normal traffic. As a first filter in the detection process, the classifier's job is to"}, {"title": "3.2.4. Covert Communication Classification", "content": "\u2022 Multiclass Classification: An in-depth examination employing a multiclass classifier neural network is performed on traffic that has been recognized as possibly covert communication. The sophisticated model has been trained not only to identify the type of communication based on manipulated IPv6 fields, but also to confirm the existence of covert communications."}, {"title": "3.2.5. Result", "content": "\u2022 Identification and Classification of Covert Packets: The pipeline's last stage involves identifying and classifying covert IPv6 packets, which are identified and categorized according to their type. This process offers important insights about different IPv6 fields that are used for covert communication.\n\u2022 Differentiation from Normal Traffic: Legitimate IPv6 packets are filtered out as normal traffic, allowing for efficient network operation and focused security analysis on detected anomalies."}, {"title": "\u2022 Script Refinement with Generative AI", "content": "Based on the classifiers' performance on detecting and classifying covert communication packets, a dedicated Generative AI agent expert in code generation task will review the results and refine or make adjustments to the scripts in an iterative process until the performance exceeds an expected threshold."}, {"title": "4. IPv6 Vulnerability Assessment", "content": null}, {"title": "4.1. Hop Limit", "content": "Analysis of the distribution of Hop Limit values in the CAIDA dataset reveals a high distribution of counts between 48 and 60 and a lower distribution of counts between 109 and 114. This is indicative of the general use of unix-like operating systems (Linux and BSD) for servers that generate a greater number of packets and the use of Windows operating systems for clients on the Internet, as unix-like operating systems generally default to a Hop Limit of 64 and Windows defaults to a Hop Limit of 128. A smaller set of data between 233 and 255 indicates that some of the traffic was generated by older versions of Linux, which set the Hop Limit to 255 by default, or alterations to the default settings of other operating systems (see Figure 4).\nThese characteristics of the Hop Limit place restrictions on how it can be used effectively as a covert channel. As was pointed out in [6], the most effective way to use the Hop Limit is to choose between values of 64 and 128 to represent either one or zero to transmit a bit of information with each packet. This is effective as the average number of hops on the internet as found in [15] was 9.497, so the decrementing of the value as it traverses the network is unlikely to corrupt the value, as values greater than 64 could be considered a zero and other values a one. It is also possible to encode additional information if one also includes 255 as a possible value, allowing one to encode a ternary bit per packet."}, {"title": "4.2. Traffic Class", "content": "Traffic differentiation and network congestion notification are crucial functions of the Traffic Class field in IPv6, comprising the Differentiated Services Code Point (DSCP) and Explicit Congestion Notification (ECN) values. With these elements as our primary focus, our analysis shows that typical traffic patterns vary little. As suggested by [16] for DSCP and [17] for ECN standards, the DSCP values primarily exhibit a strong bias towards default settings with slight deviations into other classifications."}, {"title": "4.3. FlowLabels", "content": "The FlowLabel field in IPv6 is designed to provide a means for labeling sequences of packets that belong to the same flow, a concept intended to facilitate packet processing along the path of the flow. Our analysis has highlighted significant patterns in the use of FlowLabels across different protocols which have implications for their potential use in covert communications [18]."}, {"title": "4.3.1. Pattern Analysis", "content": "FlowLabel values in TCP packets indicate a particular flow and are frequently set to\u201c0x00000\u201d or sporadically stay constant. Because of this regularity, any unusual or encrypted FlowLabels within TCP protocols should be simple to identify because they deviate from the norm. Because of this, TCP packets are not the best for concealing secret communications without running the risk of being discovered.\nOn the other hand, UDP packet FlowLabel values show more randomness. Because of its inherent variability, which would help to mask any anomalies brought about by encryption, this feature suggests that UDP may be a better option for embedding covert communications within the FlowLabel field."}, {"title": "4.3.2. Special Case with ICMPv6", "content": "ICMPv6 packets, particularly those used for \u201cPing Requests\u201d and \u201cPing Replies,\" exhibit little variation in FlowLabel values, similar to TCP. However, ICMPv6 packets that transmit error messages often have randomly assigned FlowLabel values. This randomness makes them another viable channel for embedding covert messages in a way that is less likely to be detected."}, {"title": "4.3.3. FlowLabel Encryption Strategy", "content": "These features have led us to concentrate our covert communications efforts on error messages sent by UDP and ICMPv6. Using a Python script designed to create covert communication packets, we alter the FlowLabel values in these packets. With the exception of the encrypted FlowLabels, the majority of these packets remain original to blend in with normal traffic. The FlowLabel values are encoded using the RC4 encryption algorithm. The FlowLabel's first eight bytes are used as a sequence identifier, and the final 16 bytes are encrypted. Both the RC4 encryption key and this sequence identifier are predetermined and decided upon by the parties involved in covert communication. A sequence arrangement might look like this:\nsequence = [E, A, 7, 1, 2, 3, 4, 5, 6, 8, 9, B, C, D, F, O]\nExample of Encrypted FlowLabels: The list in Table 2 provides an example of how encrypted FlowLabels might appear in a stream of covert communications."}, {"title": "4.4. Length Field", "content": "Since the payload length is specified by the IPv6 Length field\u2014which is not used in checksum calculations it offers a chance to embed covert communications. This property makes it possible to make changes that are difficult to find using common integrity checks."}, {"title": "4.4.1. Encryption Strategy", "content": "We investigate whether the RC4 stream cipher can encrypt the Length field. To improve security, this method entails changing the data's ASCII values and using RC4 encryption. Adjusting ASCII values before encryption masks predictable patterns in the data, making unauthorized decryption more difficult."}, {"title": "4.4.2. Key Management", "content": "Both parties engaged in covert communication must share a secret key in order for encryption and decryption to be effective. To guarantee the security of the communication, this key, which is essential for starting the encryption algorithm, needs to be closely guarded."}, {"title": "4.5. Address Space", "content": "Our security analysis included investigating the possibility of using the IPv6 address space for covert communication. The last 8 bytes of an IPv6 address, which are the least important bits and usually contain the interface identifier or a portion, are where we specifically looked at whether information could be encoded. This technique guarantees that packets are routed correctly within the network by enabling address modifications without compromising the network prefix."}, {"title": "4.5.1. Encryption Methodology", "content": "The RC4 algorithm is used to encrypt the least significant bits of the IPv6 address to preserve confidentiality. To prevent network routing disruptions, this encryption is restricted to the final 8 bytes of the address, leaving the"}, {"title": "4.5.2. Data Set Considerations", "content": "Due to anonymization, only the first 8 bytes of the IPv6 addresses were accessible in our tests using the CAIDA 2019 anonymized dataset. Thus, in order to accomplish our study's objectives, the final 8 bytes had to be artificially generated. For packet sequences where the source and destination addresses' first eight bytes were consistent, indicating a connection between them, we made sure that the last eight bytes of these addresses, which were artificially generated, remained consistent as well, in order to imitate realistic network interactions and maintain consistency. This methodology proved instrumental in maintaining the integrity of our experiments and facilitating the investigation of surreptitious communication techniques in the IPv6 address space."}, {"title": "5. Experimental Study", "content": "The experimental configuration used to evaluate the feasibility and detectability of covert communications in IPv6 networks is described in detail in this section. The purpose of our experiments was to examine different encryption strategies applied to different IPv6 fields by integrating covert packets into legitimate network traffic."}, {"title": "5.1. Dataset Creation", "content": "The datasets for our experiments were meticulously constructed to simulate real-world network traffic conditions. The FlowLabel, Address Space, and Length fields were used to generate and carefully insert covert packets, which were encrypted based on the specified strategies."}, {"title": "5.1.1. Covert Packet Integration", "content": "\u2022 FlowLabel and Length Field Encryption: Covert packets were inserted into active, valid connections in which encryption was applied to either the FlowLabel or the Length field. This method reduced the detectability of the covert packets among regular traffic by ensuring that they followed logical TCP sequence numbers and shared the same source and destination addresses. It is noteworthy that FlowLabel"}, {"title": "\u2022 Address Space Encryption", "content": "When the encryption strategy involved modifying the Address Space, the insertion of covert packets did not require alignment with existing traffic flows since the very nature of the encryption could mask the origin effectively. This method allowed more flexibility in packet insertion without the need for matching TCP sequence numbers or other header fields that might link packets to a specific flow.\nTo create covert communication packets and smoothly incorporate them into the dataset, We took inspiration from pcapStego and created a Python script to automate the process. The dataset underwent a systematic division, with 75% of it being used for training and 25% for testing. The split was carried out in an unrandomized manner to preserve the integrity of sequential data patterns."}, {"title": "5.1.2. Covert Communication Challenges", "content": "The primary challenge was ensuring that the covert packets remained undetectable. By using established connections to insert covert packets (except in cases of Address Space encryption), we aimed to mimic legitimate traffic patterns closely. This method tested the effectiveness of the encryption techniques and the ability of potential detection systems to identify anomalies within what appears to be regular traffic."}, {"title": "5.2. Machine Learning Models", "content": "Several machine learning models were used in our study to identify and categorize covert communications in IPv6 networks. Both Covert Communication Type Identification (Multiclass Classification) and Covert Communication Detection (Binary Classification) were major tasks that these models played a key role in addressing."}, {"title": "Decision Tree-Based Models:", "content": "\u2022 Random Forest: Effective for binary and multiclass classification tasks, this model uses 100 decision trees and is set up with class weights to counteract imbalances between classes [19]."}, {"title": "\u2022 Gradient Boosting and XGBoost", "content": "By concentrating on fixing mistakes from earlier trees, both models seek to improve predictions progressively. XGBoost, specifically, has been optimized to minimize logarithmic loss across classes [20]."}, {"title": "\u2022 LightGBM", "content": "It is especially well-suited for covert communication analysis because of its reputation for efficiency with large datasets and its application of class weights to enhance the handling of imbalanced data [21]."}, {"title": "Neural Network Models:", "content": "\u2022 Deep Neural Network (DNN): Comprises four main layers 1 dense layer of 256 units, followed by dropout, a second dense layer of 128 units, another dropout, and further dense layers reducing to 2 units for output, designed to extract deep features from complex data patterns [22].\n\u2022 Convolutional Neural Network (CNN): Includes two convolutional layers and pooling layers, followed by dropout layers and a flatten layer, culminating in dense layers for classification particularly effective in pattern recognition tasks [22].\n\u2022 Recurrent Neural Network (RNN) and Long Short-Term Memory (LSTM): The RNN uses two SimpleRNN layers, each followed by dropout, while the LSTM incorporates a bidirectional layer post several dense and dropout layers, enhancing the model's ability to remember information over extended sequences [23].\n\u2022 Graph Convolutional Network (GCN): Applies convolutional processing to graph-structured data, ideal for network topology analysis [24]."}, {"title": "5.3. Evaluation Metrics", "content": "To rigorously evaluate the machine learning models' performance in detecting and classifying covert communications, we utilized several key metrics: Precision, Recall, F\u2081 Score, and Accuracy. These metrics provide insights into the models' effectiveness in terms of error minimization and information retrieval capabilities."}, {"title": "5.3.1. Precision", "content": "Precision is the ratio of correctly predicted positive observations to the total predicted positives. It is a measure of a classifier's exactness. Higher precision relates to a lower false positive rate. The precision is mathematically defined as:\nPrecision =  \\frac{TP}{TP + FP} (1)\nwhere TP is the number of true positives and FP is the number of false positives."}, {"title": "5.3.2. Recall", "content": "Recall (also known as sensitivity) is the ratio of correctly predicted positive observations to all observations in actual classes. It is a measure of a classifier's completeness. The higher the recall, the more cases the classifier covers. The mathematical formula for the recall is:\nRecall = \\frac{TP}{TP+FN} (2)\nwhere TP is the number of true positives and FN is the number of false negatives."}, {"title": "5.3.3. F Score", "content": "The F\u2081 Score is the weighted average of Precision and Recall. Therefore, this score takes both false positives and false negatives into account. It is especially useful when the class distribution is uneven. The formula for the F\u2081 score is:\nF\u2081 Score = 2 \\frac{Precision \\cdot Recall}{Precision + Recall} (3)"}, {"title": "5.3.4. Accuracy", "content": "Accuracy is the ratio of correctly predicted observations to the total observations. It is useful when the target classes are well balanced. The formula for accuracy is:\nAccuracy = \\frac{TP + TN}{TP+TN + FP + FN}(4)\nwhere TN is the number of true negatives.\nEach of these metrics provides different insights into the performance of the models, helping to ensure that our evaluations are both comprehensive and informative."}, {"title": "6. Results", "content": null}, {"title": "6.1. Comparative Performance Analysis of Deployed Models", "content": "The performance of various machine learning models in the covert communication detection task was rigorously evaluated using precision, recall, F\u2081 score, and accuracy and can be observed in Figure 5 and Figure 6. These metrics serve as fundamental indicators of each model's performance and are depicted in the accompanying bar charts for both binary and multiclass classification scenarios."}, {"title": "6.1.1. Binary Classification", "content": "With excellent performance on all criteria, the Random Forest (RF), Extreme Gradient Boosting (XGB), and Light Gradient Boosting (LGB) models proved their capacity to discriminate between the two groups. The RF and XGB models outperformed the others in terms of accuracy and F\u2081 scores, demonstrating their resilience in binary classification tasks.\nThe Graph Convolutional Network (GCN), on the other hand, had much lower results, indicating that it had trouble adjusting to binary classifica-"}, {"title": "6.1.2. Multiclass Classification", "content": "In the more challenging multiclass classification task, RF and XGB models maintained their high performance, further emphasizing their adaptability to complex scenarios involving multiple classes. The Light Gradient Boosting (LGB) model outperformed all other models, achieving the highest accuracy and F\u2081 scores, which highlights its exceptional capability in handling the intricacies of multiclass classification.\nInterestingly, the Bidirectional LSTM (LSTM) emerged as a particularly effective model for multiclass classification tasks, demonstrating a remarkable ability to balance precision and recall. This performance can likely be attributed to the LSTM's inherent capacity to capture sequential dependencies"}, {"title": "6.2. Generative AI Assisted Refinement", "content": "In this work, we refined Python scripts related to covert communication detection using the GPT-4-turbo model as a generative AI agent expert in code generation. Utilizing generative AI, the classifier models underwent iterative refinement, with a binary classifier for detection and a multi-class classifier for identifying the type of covert communication. The main objective of the generative AI agents was to iteratively refine the Python scripts until performance exceeded a predetermined threshold. Figure 7 illustrates the process.\nThe generative AI agent was configured with a maximum token limit of 4096, providing ample capacity to process and refine the scripts. An essential feature of this refinement process is that the AI agent can choose the most suitable machine learning or large language model (LLM) for classification tasks. This adaptability guarantees that the context and the data under examination are selected as the best strategy. Through user prompts, the agent is also given the accuracy threshold for classification, directing the refinement process toward meeting the necessary performance metrics.\nThe system prompt includes detailed information about the dataset, such as column properties, specific IPv6 fields vulnerable to covert communication, and other contextual information that may impact the detection process. The user prompt contains the path to the dataset, classification results (provided as data frames), the Python scripts needing refinement, and the classification accuracy threshold. Generative AI makes systematic improvements by iteratively reviewing, adjusting, and honing the classifiers until they reach or surpass the accuracy threshold. This process of refining leads to improved detection and classification accuracy in cybersecurity applications by effectively automating model selection and script improvements utilizing the capabilities of GPT-4-turbo."}, {"title": "7. Conclusion", "content": "This study significantly advances the field of cybersecurity by providing a robust methodology for detecting covert communications within IPv6 networks. By leveraging a Python-based tool inspired by pcapstego, we curated a balanced dataset aimed at machine learning applications that included"}, {"title": "7.1. Contributions and Distinguishing Features", "content": "Our research addressed several critical challenges and presented novel solutions:\n\u2022 Realistic Data Generation: Unlike previous studies in this domain that often used unrealistic and overly simplistic datasets for covert communication, leading to near-perfect detection rates, our dataset generation approach introduces realistic complexities and variations. This approach better mimics actual operational environments, making the detection task more challenging and the results more indicative of real-world performance.\n\u2022 Comprehensive Machine Learning Evaluation: We systematically evaluated a range of machine learning models, demonstrating that while traditional tree-based models like RF, XGB, and LGB perform robustly, the effectiveness of advanced neural network models like LSTM in handling multiclass tasks provides valuable insights into their deployment in network security."}, {"title": "7.2. Future Directions", "content": "Despite the promising results, the study highlights several areas for future research:\n\u2022 Streaming Data Processing: The current methods focus on accuracy rather than processing speed, which may limit real-world deployment for streaming data analysis. Future efforts should aim at optimizing these models for real-time data processing.\n\u2022 Adaptation to Diverse Network Environments: The performance of machine learning models can degrade when deployed in different network settings from those they were trained on. Ongoing research should focus on developing adaptable models that can self-tune to varying network conditions without compromising accuracy.\n\u2022 Detection of Encrypted Covert Communications: Further research is needed to enhance the detection capabilities for encrypted covert communications, which pose a significant challenge due to their sophisticated obfuscation techniques."}, {"title": "\u2022 Integration of Generative AI", "content": "Because generative AI generates and refines detection scripts dynamically based on changing threat landscapes, it can help with both the detection and classification phases. This robust tool can be used to counter covert communications because of its capacity to process and synthesize large amounts of packet data, identify subtle anomalies in IPv6 fields, and iteratively improve detection methods. Furthermore, the ability to select from a variety of machine learning models or extensive language models for classification allows the generative AI agent to swiftly adjust to newly discovered covert channel types. The integration of AI-driven real-time monitoring systems, in which generative AI creates and modifies detection algorithms on the fly based on real-time network traffic, may be the subject of future research. This would improve the overall resilience of cybersecurity defenses by enabling dynamic adaptation to new attack vectors in IPv6 environments. To further enhance the process of detecting and classifying covert communications, multi-agent systems\u2014where various generative AI models cooperate to exchange insights on vulnerabilities\u2014might be used.\nIn conclusion, our work not only enhances the detection and classification of covert communications within IPv6 networks but also sets a new standard for dataset realism and applicability in cybersecurity research. This foundation encourages further exploration into effective and adaptable cybersecurity measures in an ever-evolving digital landscape."}]}