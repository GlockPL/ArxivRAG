{"title": "Fractional Budget Allocation for Influence Maximization under General Marketing Strategies", "authors": ["Akhil Bhimaraju", "Lav R. Varshney", "Eliot W. Robson", "Abhishek K. Umrawal"], "abstract": "We consider the fractional influence maximization problem, i.e., identifying users on a social network to be incentivized with potentially partial discounts to maximize the influence on the network. The larger the discount given to a user, the higher the likelihood of its activation (adopting a new product or innovation), who then attempts to activate its neighboring users, causing a cascade effect of influence through the network. Our goal is to devise efficient algorithms that assign initial discounts to the network's users to maximize the total number of activated users at the end of the cascade, subject to a constraint on the total sum of discounts given. In general, the activation likelihood could be any non-decreasing function of the discount, whereas, our focus lies on the case when the activation likelihood is an affine function of the discount, potentially varying across different users. As this problem is shown to be NP-hard, we propose and analyze an efficient (1 \u2013 1/e)-approximation algorithm. Furthermore, we run experiments on real-world social networks to show the performance and scalability of our method.", "sections": [{"title": "1 INTRODUCTION", "content": "Marketing firms who wish to promote their products or services on a social network should solve the problem of selecting influential nodes on the network who can spread the word among their followers [3, 7, 22]. Once the influencers have been identified, the firm offers discounts to incentivize them to use and promote the product in their network. The higher the discount given to a particular influencer, the more likely they will use the product and promote it among their followers. Since marketing budgets tend to be finite, the total amount of discount given is limited by a sum constraint. In the binary-discount case where a node is either completely selected or not (i.e., the \"discount\" given is 100%), this problem reduces to a set-selection problem under a cardinality constraint where we need to select the optimal set of nodes as our influencers. This problem has been modeled using standard diffusion models over the network. In their seminal work, Kempe et al. [7] showed that this set-selection problem involves solving a submodular maximization problem subject to a cardinality constraint. They also show that this problem is NP-hard, and using techniques from [15], they develop greedy algorithms and show that the solution given by their algorithm is at least (1 - 1/e) times the optimal solution. Following [8], several solutions [4, 5, 11, 20, 22] have been proposed this problem. For the continuous case where discounts are arbitrary, [7] also provides a hill-climbing algorithm that traverses the feasible set in steps similar to a gradient ascent. The submodular maximization problem has seen a lot of significant work over the years, and we now have algorithms for more general constraints [2, 23]. However, these still study the discrete optimization problem where the discounts are binary. More recently, a much faster algorithm for the continuous problem where potentially fractional discounts are given to the influencers has been developed by [21]. They achieve this by hopping over vertices of the feasible set directly and avoiding the more time-consuming hill-climbing process. However, a key assumption in their setup is that the discount given is equal to the probability of a node getting activated, i.e., the probability that the influencer uses the product and advertises it in their network. This is a very restrictive assumption since there is no reason \"discount\" and \"probability of activation\u201d should be the same. It is not even clear if they are in the same space in terms of units and dimensions. In this paper, we extend their work to the more general case where the probability of activation is any arbitrary affine function of the discount offered, with potentially different functions for different nodes. We prove that our algorithm achieves the same (1-1/e) approximation guarantee as in prior work, and demonstrate its effectiveness in numerical simulations over real-world networks. The rest of this paper is organized as follows. Sec. 2 describes our notation, the mathematical model, and the formal problem. Sec. 3 discusses our algorithm and proves the constant-factor approximation guarantee. Sec. 4 shows the empirical performance of our algorithm on real-world networks, and Sec. 5 concludes the paper."}, {"title": "2 MATHEMATICAL MODEL", "content": "We mostly follow the notation used in [21]. Consider a social network G = (V, E) where a node v \u2208 V represents a person who can influence their neighbors $N_v = \\{u : (v,u) \\in E\\}$ in the edge set E. At time 0, node v is given a discount $y_v$, which activates v with probability $f_v(y_v)$. Let the initially active set be denoted by $S_0$. At each time t, if an active node v is the neighbor of an inactive node u, the node u gets activated with probability $e_{v,u}$ independently for each active neighbor v. More concretely, the probability that u gets activated at time t, $p_u^{(t)}$, is given by\n$p_u^{(t)} = 1 - \\prod_{\\{v:u \\in N_v\\} \\cap S_{t-1}}(1 - e_{v,u}),$\nwhere $S_t$ denotes the set of nodes activated at time t (which does not include the nodes activated before time t). Note that in this model, nodes do not get deactivated, and each activated node has only one attempt at activating each of its inactive neighbors. The goal is to find the optimal discounts $y_v$ to be given under a sum constraint $\\sum_{v \\in V} y_v \\le K$, so that the most number of nodes are activated at the end of the cascade (in expectation):\n$F(y) = E\\left[\\text{card}\\left(\\bigcup_{t=0}^{\\infty} S_t\\right) | y \\right]$\nwhere y denotes the vector containing the values of $y_v$, and card(\u00b7) denotes cardinality. The optimization problem for generalized fractional influence maximization (GFIM) is formally stated as follows.\n$\\begin{aligned} y^* &= \\text{arg max } F(y) \\\\ y_v \\ge 0 \\\\ &\\text{subject to }\\sum_{v \\in V} y_v \\le K, \\\\ &\\text{and } f_v(y_v) \\le 1 \\text{ for all } v \\in V. \\end{aligned}$\n[7] show that the final objective can be expressed as a submodular function of $S_0$, $\\sigma(S_0)$. This implies we can rewrite (1) as\n$\\begin{aligned} F(y) &= E_{S_0} [\\sigma(S_0) | y] \\\\ &= \\sum_{S_0 \\subseteq V} \\sigma(S_0) \\prod_{v \\in S_0}f_v(y_v) \\prod_{v \\notin S_0} (1 - f_v(y_v)), \\end{aligned}$\nwhere $\\sigma(\\cdot)$ is a submodular function on V, i.e.,\n$\\sigma(R \\cup S) + \\sigma(R \\cap S) \\le \\sigma(R) + \\sigma(S) \\quad \\forall R, S \\subseteq V.$\nAn approximation algorithm referred to as MLE-Greedy was provided in [21] to solve (GFIM) when $f_v(y) = y$ for all $y \\in [0, 1]$ and $v \\in V$. They referred to that simpler case as fractional influence maximization (FIM). This allows (2) to be interpreted as a multilinear extension from [23]. However, this is very restrictive and does not capture the way nodes get activated in the real world. There is no reason the amount of discount should be equal to the probability of the node getting activated. In this work, we directly analyze (2) and develop a polynomial-time constant-factor approximation algorithm when $f_v(\\cdot)$ are any increasing linear functions."}, {"title": "3 APPROXIMATION ALGORITHM WITH CONSTANT-FACTOR GUARANTEE", "content": "In this section, we provide our algorithm for (GFIM) and prove its performance guarantees. The algorithm is based on greedy optimization, which has long been used for maximizing submodular functions under a cardinality constraint. The idea is that we start with an empty set and add elements that give the maximum incremental gain in the objective until the constraint is reached and no more elements can be added. A generalization for real-valued submodular functions has been studied by [24] when the objective F(\u00b7) is piecewise linear. A more general problem of submodular maximization under arbitrary matroid constraints has also been studied by [2, 23], but their algorithm involves a continuous-greedy approach that traverses the entire feasible region in small steps. In contrast, the discrete-greedy approach we propose is much faster as its complexity is just polynomial in |V| and does not depend on the problem instance in any other way. We also see in Sec. 4 that our technique is much faster in practice for influence maximization than other techniques that use a continuous-greedy approach. A similar approach has been proposed by [21] but for the special case of $f_v(y) = y$, and the analysis does not seem to directly translate to the more general case. To the best of our knowledge, no prior work uses the discrete approach for more general $f_v(\\cdot)$ for the influence maximization problem.\nOne main difference with the discrete-greedy approach of [21] is that we now also have potentially different $f_v(\\cdot)$ for different v. To account for this, we need to weigh the increment by $f'_v(0)$ before choosing the next best element at each step. We state the algorithm formally as Alg. 1. As in other works on influence maximization, we assume the submodular function $\\sigma(\\cdot)$ can be computed. In practice, this is usually estimated using simulations.\nWe state the performance guarantee of Alg. 1 as Theorem 1.\nTHEOREM 1. When the functions $f_v(\\cdot)$ are all nonnegative increasing linear functions, i.e., $f_v(y_v) = a_v y_v + b_v$ with $a_v, b_v \\ge 0$, the output y of Alg. 1 satisfies\n$F(y) \\ge F(y^*) \\left(1 - \\frac{1}{e}\\right),$\nwhere $y^*$ is the optimal solution of (GFIM). Further, Alg. 1 runs in O($|V|^2T), where T is the time complexity of computing $\\sigma(\\cdot)$.\nPROOF. The proof is based on techniques from [2, 23]. Let the output of Alg. 1 for a given value of K be denoted by y(K), and let"}, {"title": "4 EXPERIMENTS", "content": "In this section, we provide experiments where we evaluate our greedy approximation algorithm on large real-world networks.\nNetwork Data. We ran experiments using three real-world social network graphs from [13]. The number of nodes, number of edges, and type of each network are provided in Table 1. Each edge in the undirected networks is replaced by two directed edges. For edge weights, we use the weighted cascade model [8] where for each node v \u2208 V, the weight of each edge entering v was set to 1/in-degree(v). We used the Pooch library [19] for automated data retrieval and the NetworkX library [6] for graph data processing.\nAlgorithms. We run experiments with the proposed generalized discrete-greedy algorithm using non-negative linear functions as in Theorem 1. We do this by running the algorithm with different sets of random non-negative coefficients for the linear functions $f_v$ at each vertex v. As a baseline, we include runs where the coefficients are fixed to $a_v = 1$ and $b_v = 0$, which in the case of an integral value of k, recovers the behavior of the Floor-Greedy algorithm (using the standard weighting scheme and ignoring fractional weights).\nExperimental Details. We ran the methods for all budgets \u039a\u2208 {0.5, 1.0, ..., 7.0}. After the methods finished, to compare their solutions, we separately evaluated the outputted solutions using 1000 Monte-Carlo simulations each. The experiments were run out on a computer with an Intel Core i5-5200U CPU with 4 cores running at 2.2 GHz, and 8 GB of memory. We used Python for our implementation, along with the CyNetDiff library [17] for faster execution of the Monte-Carlo diffusion simulations. In addition, our implementation used an optimization similar to that of the CELF algorithm [12] for improved runtime when selecting the largest in the inner loop.\nDiscussion. The runtimes shown in Figure 2 demonstrate a consistently good performance of the proposed algorithm across different budgets and coefficient values $a_v$ and $b_v$ for $f_v()$. Specifically, the scale used on each of these plots only covered a small range, showing similar performance (in terms of runtime) over the different parameters used in the experiments across different budgets. This consistency in runtime across budgets is most pronounced for the Deezer network (refer to Figure 1c). Furthermore, as can be seen in Table 1, the Deezer network has substantially more nodes than the Wikipedia and Facebook networks while achieving similar runtime with our algorithm. This demonstrates the scalability of our algorithm even for large networks.\nTurning our attention to Figure 1, the relative similarity of final influence values across different coefficients is an indication of our algorithm's robustness. This shows our algorithm can handle more realistic inputs while still achieving good final output values. As a point of comparison, choosing the coefficients $a_v = 1$, $b_v = 0 in the proposed algorithm recovers the behavior of the MLE-Greedy algorithm [21]. Thus, our results show that our algorithm achieves comparable performance to a known baseline while providing increased flexibility when given more diverse input data."}, {"title": "5 CONCLUSION", "content": "We studied the problem of influence maximization over social networks under general marketing strategies. We specifically focused on strategies involving an affine relation (potentially varying across users) between the adoption likelihood and the incentive received by a user. We proposed an efficient (1 - 1/e)-approximation algorithm and demonstrated its performance using experimental evaluations. In the future, we are interested in exploring even more general marketing strategies. For instance, a convex relation and an arbitrary non-linear relation between the adoption likelihood and the incentive received by a user. We are also interested in extending our work to an online setting [1, 16]."}]}