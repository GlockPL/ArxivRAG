{"title": "Text Semantics to Flexible Design: A Residential Layout Generation Method\nBased on Stable Diffusion Model", "authors": ["Zijin Qiu", "Jiepeng Liu", "Yi Xia", "Hongtuo Qi", "Pengkun Liu"], "abstract": "Flexibility in the AI-based residential layout design remains a significant challenge, as\ntraditional methods like rule-based heuristics and graph-based generation often lack flexibility\nand require substantial design knowledge from users. To address these limitations, we propose\na cross-modal design approach based on the Stable Diffusion model for generating flexible\nresidential layouts. The method offers multiple input types for learning objectives, allowing\nusers to specify both boundaries and layouts. It incorporates natural language as design\nconstraints and introduces ControlNet to enable stable layout generation through two distinct\npathways. We also present a scheme that encapsulates design expertise within a knowledge\ngraph and translates it into natural language, providing an interpretable representation of design\nknowledge. This comprehensibility and diversity of input options enable professionals and\nnon-professionals to directly express design requirements, enhancing flexibility and\ncontrollability. Finally, experiments verify the flexibility of the proposed methods under\nmultimodal constraints better than state-of-the-art models, even when specific semantic\ninformation about room areas or connections is incomplete.", "sections": [{"title": "1. Introduction and Background", "content": "Architectural design in the Architecture, Engineering, and Construction (AEC) industry,\nparticularly for residential buildings, must address complex requirements such as structural\nintegrity, construction methods, and energy efficiency. The conceptual design phase is\nespecially challenging, requiring creativity, experience, and careful management of the\ntopological and geometric constraints. Traditionally, architectural design relies on clients\nexpressing their requirements, which architects then manually transform into design solutions\nbased on experience, a process that is often cumbersome and time-consuming. This\ninefficiency arises because clients typically lack design expertise, leading to vague\nrequirements expressed in natural language, which are insufficient to support effective design.\nConsequently, this study aims to explore how natural language can be used effectively in design\nby providing clients with structured templates to express their requirements while assisting\narchitects in generating rule-based designs in response. This could be benefit for common\npeople while designing their personal house. To address this purpose, the task must fulfill two\nkey functions: firstly, it must ensure flexibility in input conditions, as clients who are not\nexperts in architectural design\u2014such as homeowners or individuals planning their personal\nresidences can only provide simple requirements, such as the number of rooms, sizes, and\nspatial relationships. Secondly, the generated output must be stable, diverse, and controllable.\nControllability ensures that output quality is high and meets personalized user needs, while\ndiversity provides a broad range of floor plans from which users can choose."}, {"title": null, "content": "Computer-aided generative design methods offer a way to accelerate the design process.\nThese can be divided into rule-based heuristic search methods and learning-based methods.\nRule-based heuristics, such as evolutionary and growth algorithms [1,2], effectively solve\nstraightforward problems but struggle with complex layout designs and implicit design rules\nthat defy explicit parameterization. Moreover, their generation speed is constrained by the\nmanual input of parameters, which is time-consuming. With the development of intelligent\nalgorithms and AI-generated content, learning-based approaches, including deep learning\ntechniques such as generative adversarial networks (GANs) and graph neural networks (GNNs)\n[3-7], have proven adept at managing complex architectural requirements and implicit design\nknowledge."}, {"title": null, "content": "However, issues of flexibility during the design stage remain unresolved. Owing to\nlimitations in visual model architectures, existing methods often severely restrict the user's\nability to modify conditions. As illustrated in Fig. 1, the design input forms of common\nmethods are divided into learning objectives and design constraints. These methods often limit\nthe types of learning objectives to boundaries or layouts. Relying on a single learning objective\nrestricts flexibility; users can only select from pre-designed apartment types, providing a\npreferred layout without the ability to define necessary boundaries. Designers, however, can\nabstract rough boundaries as design input. Therefore, it is essential to develop a method that\naccepts both layouts and boundaries as input. Moreover, existing studies often use rigid ways\nof expressing design constraints, which require users to have substantial design knowledge.\nCommon representations, such as knowledge graphs, require users to abstract mathematical\nand connection constraints into graphical structures a significant challenge for non-\nprofessional or inexperienced designers. They may find it difficult to specify detailed space\nallocations and may only provide general preferences or constraints, such as the number of\nrooms and partial connection relationships. Since these preferences are described in natural"}, {"title": null, "content": "language, users cannot abstract design knowledge into formal representations. Designers are\nthen required to supplement these requirements in detail to form complete design specifications.\nTherefore, it is necessary to explore how to use natural language to express design knowledge\nand provide users and designers with a way to generate constraints using natural language. This\nstudy aims to improve the flexibility of generative design and reduce the requirements for\nprofessionalism while maintaining controllability."}, {"title": null, "content": "To automate the design process for both professional and non-professional designers\nwhile maintaining flexibility, this paper proposes a cross-modal design approach based on the\nStable Diffusion (SD) model. This method offers multiple input types for learning objectives,\nallowing users to specify boundaries or layouts. Regarding design constraints, we innovatively\nutilize natural language text and establish a paradigm for extracting design knowledge from\nknowledge graphs using natural language processing (NLP) techniques. This approach\nencapsulates design expertise within a knowledge graph, which is then translated into natural\nlanguage, facilitating the standardized representation of design rules based on natural language.\nOur method reduces the need for extensive designer expertise and contrasts with traditional"}, {"title": null, "content": "methods that require manual specification of knowledge graphs and double abstraction of\ndesign rules. Our approach intelligently combines two types of design constraints\u2014natural\nlanguage text and input images-to enhance the interpretability and flexibility of the design\nprocess, making it more accessible and controllable for all designers."}, {"title": null, "content": "The study sets two specific objectives: (1) to define the design requirements, constraints,\nand evaluation metrics and to represent the design rules for residential layout design from\ndesign drawings in natural language and (2) to develop and evaluate a SD-based design method,\nassessing its effectiveness in generating innovative design solutions for residential layouts. In\nsummary, the contributions of this research are manifold: (1) It introduces a methodology that\ntranslates complex architectural design rules into natural language, leveraging the synergy\nbetween knowledge graphs and NLP to enhance both the communicability and applicability of\nthese rules in architectural projects; (2) It presents a cross-modal design methodology that\nutilizes Low-Rank Adaptation (LoRA) to fine-tune large-scale generative models, thereby\nenhancing their capacity to produce high-quality, compliant residential layouts from natural\nlanguage inputs; (3) It demonstrates the generative model's adaptability and innovation in\ncreating varied design solutions under conditions of incomplete semantic information,\nshowcasing the model's ability to adjust creatively to missing data while adhering to design\nconstraints. This flexibility is essential for practical applications where initial design\ninformation may be incomplete or subject to change."}, {"title": null, "content": "The paper has the following structure: Section 2 discusses the related work; Section 3\ndefines the problem, relevant design rules, and evaluation metrics for architectural layout\ndesign; Section 4 explains the method for the SD-based design method, the dataset preparation;\nSection 5 reports a validation study that assesses the generated layouts; and Section 6 ends with\nfinal conclusions and suggestions for future research."}, {"title": "2. Literature Review", "content": null}, {"title": "2.1 Architectural Layout Design Knowledge", "content": "As urbanization and populations rise, residential design has become increasingly\nimportant, blending a mix of taste, quality, and practicality while satisfying various\nstakeholders. Architectural layout design optimizes the arrangement of spaces to fulfill both\nfunction and form, balancing considerations like space use, flow, natural light, air quality,\nprivacy, ease of access, and affordability. Residential layouts prioritize bedroom, bathroom,\nand living room configurations to match the number of potential residents and market trends,\nwhile adhering to regulations and what buyers want."}, {"title": null, "content": "Architectural layout design knowledge refers to the information and rules that guide the\ncreation and evaluation of spatial configurations for buildings. It includes aspects such as the\nfunctional requirements, spatial relations, circulation patterns, environmental factors, aesthetic\npreferences, and cultural influences of a design problem. Architectural layout design\nknowledge can be derived from various sources, such as precedents, standards, guidelines,\ncodes, and user feedback. It can also be acquired through the experience, intuition, and\ncreativity of the designer. For example, Tokunaga and Murota [8] noted that consumer\npreferences regarding unit size and type are critical determinants of a building's appeal, with\nvarying preferences observed across different life stages of residents. The interconnectivity of\nspaces significantly influences the quality of residential design. Well-connected spaces\nenhance community living and reduce the occurrence of isolated areas, which is critical for\npromoting resident mobility and comfort. Weber et al. [9] emphasize the benefits of connected\nspaces, highlighting the importance of efficient circulation paths and minimizing empty or\nunusable areas."}, {"title": null, "content": "Different sources of knowledge, such as design guidelines, precedents, standards, and user\nfeedback, can inform and inspire the generation of design alternatives. However, managing and\napplying this knowledge effectively is not trivial, as it requires a systematic and structured\napproach to represent and evaluate design knowledge."}, {"title": "2.2 Knowledge Representation from Designs", "content": "One of automated design's main difficulties is capturing and expressing domain-specific\nknowledge and constraints, such as those in residential architecture. Knowledge representation\nis the method of defining and structuring the data and rules of a problem domain in a machine-\nreadable way [10]. It allows computers to think about the design problem and create solutions\nthat meet the given needs and goals."}, {"title": null, "content": "One of the common ways to represent design rules is through shape grammars, which are\nformal systems that define the rules and operations for manipulating shapes [11]. Shape\ngrammars can capture the syntactic and semantic aspects of design, enabling the generation of\nlayouts that conform to a specific style or typology. Another method uses optimization\ntechniques, which are mathematical methods for finding the best design solution among a set\nof feasible alternatives according to an objective function [12,13]. Optimization techniques can\nincorporate design rules in terms of constraints and objectives that reflect the desired\ncharacteristics and performance of the design. Optimization techniques can also provide a way\nof evaluating design alternatives by comparing their objective values and ranked them\naccording to their optimality. However, optimization techniques also have challenges, such as\ndifficulty defining and quantifying the objective function, the trade-off between multiple\nconflicting objectives, and the computational cost of finding the optimal or near-optimal\nsolution. Traditional approaches to building design include topology optimization, genetic\nalgorithms, cellular automata, and generative and analogical design. These traditional methods\n[2] presuppose predefined rules for automated design and cannot learn and represent design"}, {"title": null, "content": "codes and structural constraints outside predefined ones. So, this approach with hard-coded or\nrestricted constraints cannot adequately represent design rules and design constraints."}, {"title": null, "content": "Employing semantic models offers an alternative method for representing and assessing\ndesign intelligence. These models encompass the intended meaning and functionality of design\nsolutions. They facilitate various analytical operations, including assessments of consistency,\nadherence to standards, or refinement through the application of logic-based techniques and\ndeduction mechanisms [14\u201325]. Semantic models are also instrumental in measuring specific\nfactors like interconnectivity, ease of access, or exposure by leveraging graph theories and\nnetwork analyses. Semantic models confront several hurdles, such as constructing and\nupholding an exhaustive and uniform ontology, managing the uncertainty and diversity\ninherent in semantic details, and addressing the computational demands of reasoning\nalgorithms. For example, graphs can model the topology and geometry of design layouts, as\nwell as the attributes and constraints of each element [10]."}, {"title": null, "content": "One promising method to represent and evaluate design rules is using natural language, a\nnatural and expressive medium for communication and reasoning. Language can capture the\nmeaning and intention of the design solutions, as well as the context and preferences of the\nstakeholders. Language can also support various tasks and interactions, such as querying,\nexplaining, or negotiating, to facilitate the design process. Language-based methods can\npotentially analyze and generate design layouts from textual descriptions or specifications [26]."}, {"title": "2.3 Generative Design with Rules", "content": "Architectural layout design with rules can benefit from generative design methods that\nsearch a vast and varied design space, producing original and ideal solutions that meet multiple\nrequirements and limitations. This section surveys the current research on architectural layout"}, {"title": null, "content": "design with knowledge, concentrating on three main perspectives: rule-based methods, data-\ndriven methods, and cross-modal methods."}, {"title": null, "content": "Rule-based methods use predefined rules, constraints, and heuristics to generate and\noptimize layouts according to various criteria, such as functionality, aesthetics, and regulations\n[27,28]. These methods often rely on expert knowledge and domain-specific languages to\nencode the design rules and objectives. These methods can be divided into two sub-categories:\nshape grammar and optimization. Shape grammar methods use a formal language of shapes\nand rules to define and generate design alternatives [11]. Optimization methods use\nmathematical models and techniques to find optimal or near-optimal solutions to design\nproblems with multiple objectives and constraints [29]."}, {"title": null, "content": "Data-driven methods use machine learning techniques to learn design rules and\npreferences from data, such as existing designs, user feedback, or contextual information, and\ngenerate layouts that reflect them [14]. These methods can be further divided into two sub-\ncategories: generative methods and retrieval methods. Generative methods use probabilistic\nmodels, such as generative adversarial networks (GANs) [14\u201320], variational autoencoders\n(VAEs) [30,31], normalizing flows [32], or graph neural networks (GNN) [33\u201336] to learn the\nlatent distribution of design data and sample new designs from it. Retrieval methods use\nsimilarity measures, such as distance metrics, feature embeddings, or graph kernels, to find\nexisting designs that match a given query or specification [35,37]. Knowledge-based design\nmethods utilizing structured knowledge to inform and guide the design process have been a hot\nresearch topic in the AEC industry. Hu et al. [38] proposed Graph2Plan, which uses building\nboundaries as input to output floor plans and their associated layout graphs from the RPLAN\ndatabase. Liu et al. [4] proposed embedding graph-constrained into the generative adversarial\nnetwork for high-rise residential building design. Additionally, Jiang et al. [39], Huang and"}, {"title": null, "content": "Zheng [40], Nauata et al. [6], Tang et al. [41], and Wang et al. [42] employed GANs to learn\nfrom architectural design drawings and generate house layouts."}, {"title": null, "content": "Cross-modal methods combine rule-based and data-driven methods to leverage the\nadvantages of both approaches [43\u201348]. Cross-modal methods use multiple modalities of data,\nsuch as text, images, sketches, or speech, to represent and generate design layouts. These\nmethods can leverage the complementary information from different modalities to enhance the\ndesign process and enable more natural and intuitive interactions. These methods aim to\nintegrate the explicit knowledge and constraints of design rules with the implicit knowledge\nand creativity of design data. For example, Jain et al. proposed research to automatically render\nbuilding floor plan images from textual descriptions [49]. Li et al. evaluate SD models'\neffectiveness in generating residential floor plans from text prompts [26]. Wu et al. and Jia et\nal. [50,51] use a conditional generative adversarial network to translate sketches into realistic\nfloor plans."}, {"title": null, "content": "In summary, existing methods for generating residential floor plans have limitations\nregarding the inputs to each model. Current models rely heavily on bubble diagrams,\nboundaries, and the addition of explicit constraints. The inputs to the bubble diagrams are\nmainly in graphical form, which is convenient for design professionals. However, for non-\nspecialists, the lack of inputs such as shapes makes it difficult to have control when editing the\ngenerated residential planes. It, therefore, can be abstract and difficult to understand. Similarly,\ninputs in terms of room masks are more demanding as it is difficult for the designer to\ndetermine the location of the room, let alone the size and shape of the room, in the early stages\nof the design. Therefore, these models have limitations in terms of input flexibility."}, {"title": "2.4 Research Gaps", "content": "This review has identified several research gaps in the existing literature. First, although\nstudies have refined the definition of design rules, they predominantly rely on rigid\nrepresentations such as bubble charts, which limit the portrayal of design rules. Second, current\nmodels are confined to using visual graphs for both inputs and outputs, generally adhering to a\nsingle, fixed input method without offering flexible alternatives. The constraints of these\nrepresentations necessitate considerable experience in the construction industry, as\npractitioners must prepare specific inputs like bubble diagrams in advance, creating a high\nentry barrier for non-specialists. Consequently, there is an urgent need for advanced models to\ngenerate designs adhering to essential design."}, {"title": null, "content": "Sections 2.2 and 2.3 demonstrate the feasibility of using large-scale models with natural\nlanguage to integrate essential domain knowledge and constraints for producing viable designs.\nHowever, research on architectural graphic design remains scant. Our study aims to address\nthis gap, proposing a generative process that is more flexible and user-friendly for\ninexperienced designers. Design involves creating and communicating visual concepts that\nmeet specific goals and constraints, often requiring both natural language and graphical inputs\nand outputs, such as sketches, diagrams, or layouts. For instance, a designer might need to\ngenerate a floor plan from a textual description of a client's needs or explain the rationale\nbehind a design decision using natural language. Compared to previous research, our method uses natural language as an input modality, making\nit more accessible and intuitive for non-expert users, and incorporates explicit and implicit\ndesign rules and constraints, such as room size, shape, adjacency, accessibility, and circulation,\nto ensure the designs' feasibility and functionality."}, {"title": "3. Problem Formulation", "content": null}, {"title": "3.1 Design Requirements of Residential Layouts", "content": "In automated design generation, a critical challenge is ensuring that design outcomes\nadhere to both functional principles and practical architectural requirements. A literature\nreview on automated building solution design, presented in Section 2.1, categorizes building\ndesign considerations into two main areas: design preferences and quality requirements. Design\npreferences tailor building solutions to the specific needs and desires of inhabitants, while\nquality requirements prioritize the building's functionality and occupant comfort. For abstract\nconcepts such as architectural style, most current research relies on models to learn intrinsic\narchitectural features. One of the objectives of this research is to propose a comprehensive\nmapping between graph structures and natural language based on the methods summarized in\nSection 2.4. Collectively, these elements form a\ncomprehensive framework for evaluating and designing residential structures that meet both\nfunctional and aesthetic requirements while enhancing productivity."}, {"title": "3.2 Rules Representation Approach", "content": "This section outlines a natural language-based approach to knowledge representation in\nresidential graphic design. Traditional floor plan design primarily relies on image information,\nwith knowledge representation confined to the construction of room masks or knowledge\ngraphs. Room masks encode design rules via network operations that depend heavily on the\nspecific model used, resulting in variable outcomes. Consequently, various techniques have\nemerged to integrate knowledge graph information into networks. For instance, methods such\nas graph neural networks and Conv-MPN within GAN models represent each room as a node,\nwith connections between nodes to articulate design rules. Specific implementations, such as\nHouseGAN++ and Graph2plan, differ in their construction of knowledge graphs, which may\ninclude details on connectivity (via internal doors), location, proximity, and area. Traditional\nrepresentations often lack flexibility and comprehensiveness due to model variations and"}, {"title": null, "content": "limitations in the scope of expressible design rules. In contrast, natural language provides a\nmore adaptable and comprehensive medium for expression."}, {"title": null, "content": "This article advocates using natural language to express architectural design rules while\nmaintaining the structure of a knowledge graph to outline basic design requirements and ensure\ndiversity. As detailed in Fig. 2, our approach segments the natural language descriptions into\nthree parts aligned with the knowledge graph. The first segment specifies the number of various\nrooms, addressing points (a) and (c) in Table 2. The second describes the connectivity of the\nroom, covering points (c) and (e)\u2013(g). The third outlines room area ratios, meeting the\nrequirements of point (b) as discussed in Section 4.2. Notably, this study does not differentiate\nbetween connectivity and proximity in the descriptions, anticipating that model training will\nintelligently resolve door placement in spatial layouts to define these aspects. This\nrepresentation offers a cross-modal perspective of traditional knowledge graphs for graphic\ndesign; specifics on NLP are covered in Section 4."}, {"title": "4. Methodology", "content": "This study proposes an innovative approach to automate the design of floor plans for\nresidential layouts. As illustrated in Fig. 3, the methodology comprises two consecutive phases:\n(1) dataset preparation for residential layouts and (2) development of the residential layout"}, {"title": "4.1 Dataset Preparation", "content": "This study utilized the RPLAN dataset, derived from authentic architectural drawings and\ncontaining over 80,000 unique building floor plans. The dataset was subjected to a standardized\npre-processing procedure to ensure case diversity and enhance the visual-to-natural language\nrepresentation of design rules."}, {"title": "4.1.1 Illustration of Dataset and Colorization", "content": "Each sample in the RPLAN dataset is a 256x256 RGBA (Red, Green, Blue, Alpha) format\nimage with four different channels. These images are not only labeled but also annotated\nthrough the four channels, highlighting their semantic information. Channel 1 is used to label\nexternal walls and front doors, and channel 2 is used to label the different spaces (room types)\nin the layout, as well as internal walls and doors. Channel 3 is used to show the number of\nrepetitions for each room type in the layout, and channel alpha is used as a mask to distinguish\nbetween external and internal areas. In order to reduce the complexity of the design rules, the\nroom types were simplified in this study, including the merging of rooms with similar functions,\nsuch as living room, dining room, and entrance, and the merging of uncommon room types as\nwell, such as the merging of Wall-in with toilet. The 13 space types were reduced to 7, and\ndifferent space types and different types of walls were recoloured."}, {"title": "4.1.2 Resampling", "content": "Since the training and generation of large models require high image clarity, a pixel\nregion-based image resampling strategy is used to enhance the clarity of the images.\nSpecifically, the resolution of the original image is enhanced from 256 pixels to 512 pixels. By\nboosting the resolution, the detail and quality of the image can be enhanced, resulting in more\naccurate and detailed results for model training and generation. This method of increasing\nresolution can provide richer visual information for the large model, thus helping the model to\nbetter learn and understand the image content, which can effectively improve the performance\nand application effect of the model."}, {"title": "4.1.3 Knowledge Graph Generation", "content": "The design rules that can be articulated through traditional visual design methods vary,\nand this paper offers a comprehensive overview of these methods, categorized into three\nprimary aspects as shown in Table 2: 1) expression of the number of room types; 2) constraints"}, {"title": null, "content": "on the connectivity between rooms; and 3) constraints on the area and location of rooms. The\nautomated extraction of the knowledge graph in this study involves splitting different rooms\ninto distinct masks to complete the type segmentation within the node information. Each mask\nrepresents a node, with its mask colour indicating the room category. The second step\ncalculates the boundary frames of each mask and uses the center coordinates of these frames\nas the node positions, thereby storing positional information. The radius of each node is\ndetermined by the length of its bounding box width. Finally, rooms are merged to determine\nwhether there is an intersection between the bounding boxes; if so, they are deemed connected,\nthus completing the edge set identification."}, {"title": "4.1.4 Prompt Generation", "content": "This section explains the method for generating natural language cues from a knowledge\ngraph representation of a floor plan. The description structure adopted in this study initially\npresents the room type, followed by the room area, and concludes with the connectivity\nrelations between rooms, reflecting the structure of the knowledge graph. Initially, the room\ntypes and areas represent the node information in the knowledge graph. Subsequently, the\nconnectivity relations between these nodes are detailed. This description is structured as\nfollows:"}, {"title": null, "content": "(a) Room Types: We employ a generalized structure that combines a broad description of\nroom types with a specific enumeration of the number of each room type. This approach\nimposes constraints that limit and define the total number of rooms by including an additional\ncue word about the total number of rooms. This starting point facilitates subsequent\ndescriptions of room sizes and connectivity without reiterating the total room count."}, {"title": null, "content": "(b) Room Sizes: We utilize a non-prescriptive, itemized description of individual room\nsizes. Rooms of the same type are differentiated by numbering (e.g., Bedroom_1 and"}, {"title": null, "content": "Bedroom_2 which clarifies that there are multiple rooms of the same type\nand maintains consistency with the initial room type description. Room areas are linked to their\nrespective identifiers with an underscore, thus connecting the area measurement directly to the\nspecific room."}, {"title": null, "content": "(c) Room Connectivity: Having already detailed the type and size of each room, it is\nessential to describe the connectivity between rooms at the end of the sequence. This final step\ncompletes the description of the entire knowledge graph. Notably, while the room number (e.g.,"}, {"title": "4.2 Floor Plan Generation", "content": "This section delineates the methodologies employed to generate residential layouts using\nSD. The process bifurcates into two principal methodologies: Text-to-residential layouts\ngeneration and Boundary-to-residential layouts generation, as depicted in Fig. 5. Floor plans\nare initially represented in pixel space and are encoded into a latent space using a VAE. This\nlatent representation is crucial for capturing the high-dimensional data in a more manageable\nform, which is then processed through the diffusion steps. The diffusion model is central to our\napproach to generating floor plans and consists of diffusion and denoise processes. The\ndiffusion process involves progressively adding noise to the latent representations of the floor\nplans, moving them towards a purely noisy state over a series of time steps $T_0$ to $T_N$. At each\nstep of the denoise process, a U-Net predicts the noise that has been added, which is then used\nto iteratively denoise the image, step by step, moving back from $T_N$ to $T_0$. After the denoising\nsteps, the latent representations are converted back to pixel space using the decoder part of the\nVAE, resulting in the final floor plan that reflects both the textual and design requirements."}, {"title": null, "content": "The generate method operates in two key conditioning pathways: textual descriptions and\nboundary constraints. Textual descriptions specifying room types, connections, and dimensions\nare first encoded using a text encoder. This encoded representation serves as a conditioning\ninput to guide the diffusion process, ensuring the generated layouts align with the textual\nspecifications. Boundary constraints are integrated using the ControlNet, which adjusts the\ngeneration process based on boundary images processed by a Canny preprocessor. Boundary\nimages of floor plans are processed using a Canny edge detector to enhance boundary"}, {"title": null, "content": "definitions, which are crucial for maintaining the structural integrity of the generated layouts.\nThe processed boundary image is encoded into latent space via the encoded section \u025b in the\nVAE model, thus serving as an additional conditioning input for the control net. ControlNet\nworks in conjunction with the U-Net architecture used in the diffusion process. It refines the\ndenoised output from the diffusion steps by ensuring the floor plans adhere to the boundary\nconditions. This is achieved by adjusting the U-Net parameters dynamically based on the\nboundary inputs. The ControlNet fine-tunes the generated layout by minimizing the error\nbetween the predicted layout and the boundary constraints, ensuring the final output respects\nthe specified boundaries. Combining U-Net's predictive capabilities with ControlNet's\nboundary adherence results in a floor plan that meets the aesthetic and functional requirements\ndictated by the natural language descriptions and the architectural boundaries."}, {"title": "4.2.1 Text to Residential Layouts Generation", "content": "This section elaborates on the first approach for generating floor plans, which uses textual\ndescriptions alongside residential layout images as inputs to produce designs that adhere to\nspecified layouts and conditions. The diffusion model, particularly the SD model, which is a\nvariant of Latent Diffusion Models, excels in generating high-quality images from initial noise\nby iteratively refining noisy images into targeted designs. This model employs a reverse\ndiffusion process that methodically transforms a purely noisy base into a clear, detailed image."}, {"title": null, "content": "The diffusion model functions through two primary processes: the forward diffusion process,\nwhich incrementally adds noise to the data as outlined in Eq. 1, and the reverse generation\nprocess, aimed at reconstructing data from noise, detailed in Eq. 2. provides a schematic\nof the diffusion model's process."}, {"title": null, "content": "$q(X_t|X_{t-1}) = N(X_t;\\sqrt{\\alpha}X_{t-1}, (1 - \\alpha)I)$\n$P_\\theta(X_{t-1}|X_t) = N(X_{t-1}; \\mu_\\theta(X_t, t), \\sigma^2_\\theta(X_t, t)I)$\nHere, $X_t$ represents the data at time step t, and \u03b1 is a parameter that controls the extent of\nnoise addition. \u03bc\u0473ando\u1ebb represent the mean and variance parameterized by network parameters,\nrespectively."}, {"title": "4.2.2 Boundary to Residential Layouts Generation", "content": "This section elaborates on the second approach for generating floor plans, which uses\ntextual descriptions alongside boundary images as inputs to produce designs that adhere to\nspecified layouts and conditions. The ControlNet module is a fine-tuning technique applied to\nlarge models, particularly within the SD architecture, to enhance its ability to conform to\nspecific boundary conditions while incorporating textual guidance. ControlNet adjusts the\nparameters of the U-Net within the SD model to align generated outputs with the provided\nboundary constraints. This adaptation ensures that the floor plans meet the aesthetic and\nfunctional requirements described in the textual input while strictly conforming to the specified\narchitectural boundaries. Given the characteristics of the RPLAN dataset, which contains well-\ndefined boundaries and distinct threshold variations, the Canny edge detection algorithm is\nused to preprocess boundary images. This preprocessing step enhances edge definition,\nfacilitating ControlNet's ability to recognize and adhere to these boundaries during generation."}, {"title": null, "content": "The preprocessed boundary images are then fed into the SD model, where ControlNet\nutilizes these enhanced edges to guide the diffusion process. The sharper and more defined the\nboundaries, the more effectively ControlNet can apply corrections to the U-Net parameters,\nensuring that the generated layouts strictly conform to the boundary conditions."}, {"title": null, "content": "$W' = W + a \\cdot ZeroConv(C(B))$\nWhere Wis the original weight of the U-Net layers. W' is the updated weight after applying\nControlNet adjustments. a is the learning rate or scaling factor for updates. Zero convolution\noperation that adapts the control signals to the dimensions of the U-Net parameters. C(B) is\nderived from the boundary information B, processed by the Canny edge detector. B is a\nboundary image processed to enhance edge definition."}, {"title": "4.2.3 Model Training", "content": "However, existing diffusion models cannot generate realistic images of residential layouts.\nTherefore, we introduce a fine-tuning method based on LoRA to enable the diffusion model to\nlearn the style characteristics of residential layout design rules. LoRA is an optimization\nmethod that reduces the parameter count and computational complexity of weight matrices in\nneural networks through low-rank decomposition. The basic idea is to decompose the pre-\ntrained weight matrix into two low-rank matrices and introduce a scaling factor to control the\nupdate magnitude. Given an input x, the output y can be represented in Eq. 5."}, {"title": null, "content": "$y = x(W' + \\frac{r}{r'}(A x B)) + b$\nWhere y is the output, x is the input, W' is the pre-"}]}