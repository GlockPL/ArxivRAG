{"title": "IRSKG: Unified Intrusion Response System Knowledge Graph Ontology for Cyber Defense", "authors": ["Damodar Panigrahi", "Shaswata Mitra", "Subash Neupane", "Sudip Mittal", "Benjamin A. Blakely"], "abstract": "Cyberattacks are becoming increasingly difficult to detect and prevent due to their sophistication. In response, Autonomous Intelligent Cyber-defense Agents (AICAs) are emerging as crucial solutions. One prominent AICA agent is the Intrusion Response System (IRS), which is critical for mitigating threats after detection. IRS uses several Tactics, Techniques, and Procedures (TTPs) to mitigate attacks and restore the infrastructure to normal operations. Continuous monitoring of the enterprise infrastructure is an essential TTP the IRS uses. However, each system serves different purposes to meet operational needs. Integrating these disparate sources for continuous monitoring increases pre-processing complexity and limits automation, eventually prolonging critical response time for attackers to exploit. We propose a unified IRS Knowledge Graph ontology (IRSKG) that streamlines the onboarding of new enterprise systems as a source for the AICAs. Our ontology can capture system monitoring logs and supplemental data, such as a rules repository containing the administrator-defined policies to dictate the IRS responses. Besides, our ontology permits us to incorporate dynamic changes to adapt to the evolving cyber-threat landscape. This robust yet concise design allows machine learning models to train effectively and recover a compromised system to its desired state autonomously with explainability.", "sections": [{"title": "I. INTRODUCTION", "content": "Most of today's automated cyber defense tools are passive watchers and do little to plan and execute responses to attacks, as well as recovery activities [1]. Response and recovery are the two core components of cyber resilience and are left for human cyber analysts, incident responders, and system administrators. Given the escalating threats, Autonomous Intelligent Cyber-defense Agents (AICAs) have emerged as a security mechanism that offers adaptive and real-time protection against evolving digital threats. AICAs leverage AI and Machine Learning (ML) techniques to independently monitor network traffic, identify anomalies, and respond to potential security breaches without continuous human intervention. Specifically, AICA, with its Intrusion Detection System (IDS) and Intrusion Response System (IRS) components, is designed to automatically identify and initiate the most effective response to an ongoing attack [2]. IDS identifies potential security breaches or attacks by monitoring network traffic and system activities. The IRS then dynamically adjusts its defense strategies based on the identified threat's nature, effectively diluting the impact before it can cause significant damage while restoring the system to its desired state.\nTo effectively respond to an active attack, the IRS requires data from various sources, such as IDS and enterprise sensors, to identify suitable Rules of Engagement (RoEs) and determine intended behavior. This multi-source data is then used with RoEs to further train the AI and ML models for predictions, enhancing the dynamic and real-time fortifications against these attacks. As a result, the IRS must process system logs, RoEs, and AI/ML model input data for learning and prediction. However, enterprise systems possess individual schemas, leading to complex knowledge propagation and increased inference time. This multi-faceted data ingestion creates several problems (listed below) that significantly impede cyber defense operations.\n\u2022 Firstly, AICAs need to interact and share information seamlessly. Diverse operating schema between multiple systems often results in data misinterpretation and complicates IRS AI/ML training and predictive modeling. Without proper training, ML systems cannot differentiate between benign and legitimate threats, increasing false positives or unnecessary alerts and responses.\n\u2022 Secondly, cyber defense is a collaborative effort where organizations, governmental bodies, and security agencies collaborate together to address threats across organizational boundaries. Having different communication schemas to share threat intelligence and response strategies prolongs information sharing.\n\u2022 Lastly, the cyber threat landscape is dynamic, meaning attack vectors, tools, and defense mechanisms evolve, and the IRS must frequently adapt to new threat patterns. Without a standardized new information ingestion channel, agility is compromised, and various regulatory compliance audits for detecting, responding, and reporting cyber incidents are prevented.\nUnfortunately, due to these limitations, Intrusion Response Systems (IRS) have not been able to keep up with the increasing threats [3]. In order to tackle this ongoing issue, we have developed a knowledge graph ontology that can encompass senses and strategies from various sources. By representing knowledge from diverse sources in a unified manner, we can enhance the AICA's efficiency in prompt response and recovery. The same ontology can also capture the RoEs and AI/ML model input data, as shown in Fig. 1. Therefore, this work introduces a revolutionary AICAS IRS Knowledge Graph (IRSKG) ontology that allows streamlined knowledge ingestion, sharing, and adaptation. We demonstrate our ontology implementation utilizing a case study (see Section IV for details): a network infrastructure management enterprise system. To validate our approach, we demonstrated improved IRS representation techniques for AI/ML models. Due to the graphical structure, we demonstrate a Graph Neural Network (GNN) representation for defensive cyber operations [4] using the IRS. It is important to note that our generalized ontology is designed to accommodate any techniques, AI/ML models of choice, and enterprise systems. As per our knowledge, this research is the first attempt to develop a unified knowledge graph ontology for IRS systems."}, {"title": "II. BACKGROUND", "content": "In this section, we cover the preliminaries of our ontology. We cover popular graph semantics to build an ontology for the AICA IRS system. We extensively evaluate two popular graph model techniques, namely Resource Description Framework (RDF) and Property Graph (PG) in Section II-A. Then, we briefly describe AICA, IRS, IRS rules, IRS computation model, and AICA prototype in Section II-B."}, {"title": "A. Knowledge Representation, Knowledge Graph Ontologies, and Property Graphs (PG)", "content": "Knowledge Representation (KR) organizes information in a way the computer software can understand and use to solve specific tasks. KR captures real-world knowledge so that software can process and reason. Ontologies are specialized approaches of KR and act as blueprints to represent knowledge in specific domains. They define the entities and their relationships in a particular domain relevant only to that domain. Property Graph (PG) [5] schema handles complex and evolving relationships defined by the ontologies. We found a few ontologies on security alert systems [6], smart city security [7], information system risk management [8], cyber threat intelligence [9], etc. However, to our knowledge, no specific ontology exists for cyber security response systems, such as an IRS, which represents enterprise system logs, rules, and computation models. Thus, we propose a knowledge graph called IRS Knowledge Graph (IRSKG). The PG schema specification has nodes and edges as the fundamental building blocks. These graph nodes and edges help represent entities and their relationships. The PG schema, also known as Labeled Property Graph (LPG) [10], has the following elements: 'vertices', 'edges', a collection of \u2018properties', and 'labels'. The vertices and the edges can have only one label, while they can have multiple properties represented as key-value pairs [11]. A formal PG specification can be found at [12], which factors in a few more parameters than the four properties mentioned here. The specification uses a circle to represent a 'vertex' having a 'label' which identifies it. An arrow represents an edge between two vertices with an identity represented by a 'label'. A rectangle represents multiple key-value pairs for vertices and edges.\nWe demonstrate the PG specification by showing a TCP packet flow between a Web browser and an intranet-hosted web server. Figure 2 captures a partial network flow of the TCP packets from the Web browser to the Web server. The Graph model depicts the TCP packet flow starting from a Web Browser that attempts to get home.html hosted in mywebserver.com using HTTP protocol on port 8080. The Computer, where the Web Browser is running, then contacts a Domain Name Service, to resolve the mywebserver.com to a destination address. The Computer then forwards the request to a network Router with the destination address, which eventually connects to the Web Server. An example of two vertices connected via an edge: the vertex Web Browser (properties: host = mywebserver.com, port = 8080), protocol http, page = home.html has an edge accessPage (properties: pid = 34567) to another vertex Computer (properties: ip = 1.2.3.4, os = linux)."}, {"title": "B. Intrusion Response System (IRS)", "content": "AICAs defend enterprise systems from cyber security breaches [15]. The AICAs are a group of security software that collectively continuously monitors systems and detects and remedies security breaches. One such instance is the Intrusion Response System (IRS). It restores systems to their desired state during a cyberattack, as shown in Figure 3.\nThe IRS is an AICA component responsible for thwarting security breaches. It automates the procedure of responding to cybersecurity breaches to save time and reduce damage. IRS aims to prevent an attack and restore breached enterprise systems to their desired state by following certain enterprise administrators' defined IRS governing rules. The primary two IRS Plan and Execute components collectively fulfill IRS objectives. They use rules as a guiding principle to generate actions to thwart security breaches. Moreover, the IRS Plan component uses these rules and the system logs to train an AI/ML model that generates a response to a security breach.\nTo meet its goal, an IRS computes a wide variety of potential responses including taking actions to prevent the attack from completing, restoring the system to comply with the organizational security policy, containing or confining an attack, attack eradication, deploying forensics measures to enable future attack analysis, counterattack, etc. IRS depends on governing rules defined by administrators to compute responses. There are two primary category rules governing an IRS. The first category tells the IRS when to trigger such actions. The IRS Plan and Execute components use these rules. However, such a system must have defined rules to constrain its actions. They are the second rule category, called Rules of Engagement (ROEs). Systems must determine which actions they can take in a fully automated manner (and when), which actions require confirmation from a human operator, and which actions must never be executed. The IRS-constrained action components use RoEs. We define the rules, their semantics, and templates, with an illustration in Section III-B.\nThe IRS Plan component uses different techniques, such as game theory, machine learning, etc., to create computational models. It utilizes the rules and the enterprise system information logs to build the models. The component employs these pre-trained models to generate the best response to thwart security breaches and restore the enterprise system to its desired state defined by the administrators.\nWe use an AICA prototype, as shown in Figure 3, to demonstrate our ontology implementation in the Case Study Section IV. Next, we describe the prototype data flow. First, the AICA-Monitoring managing system components continuously monitor the enterprise systems, thereby collecting the data from AICA sensors and storing data in the AICA-Knowledge components. Second, the AICA-Analyze components continuously investigate the stored data to detect threats. Third, the AICA-Plan component creates a plan for each threat, to thwart cyberattacks. Fourth, the AICA-Constrained Action component receives a response from the Plan component, checks if the response is permitted as per the RoEs, creates a final response and passes it forward. Fifth, the AICA-Execute component executes the response on the enterprise system(s) through AICA actuators to restore the system to its desired state."}, {"title": "III. INTRUSION RESPONSE SYSTEM KNOWLEDGE GRAPH (IRSKG) ONTOLOGY SCHEMA", "content": "In this section, we introduce a unified ontology to capture the semantic relationships among different components of an Intrusion Response System (IRS). In addition, we create a schema called IRSKG to represent the ontology in a data structure. Our schema, shown in figure 4, has been designed to represent disparate enterprise system information such as system logs, system monitoring information, chat conversation logs, intrusion response rules, and response computation model input data. To the best of our knowledge, there is no publicly available ontology that helps represent the above mentioned data for Intrusion Response Systems (IRSs). \u03a4\u03bf build our IRKG ontology we utilize the PG specification (See Section II-A) over RDF because of the following primary reasons:\n\u2022 PG is widely adopted in cyber security domain [17], and is more suitable for dynamic datasets [18].\n\u2022 PG uses the flexible and extensible JSON format, unlike RDF, which uses XML.\n\u2022 Information retrieval semantic standard is available for PG [19].\nIn our IRSKG case studies (Section IV), we utilize Neo4J [20], a PG, to demonstrate our ontology implementation. Next, we explain the IRSKG ontology schema in detail. For simplicity we only discuss three enterprise system information schema. The following three subsections describe the schema for the enterprise systems logs, IRS rules, and the computation model inputs. Table I summarizes the used set of notations."}, {"title": "A. Enterprise System Log Schema", "content": "In this section, we create a schema that captures the logs of heterogeneous enterprise systems. Typically, the logs are in single-line text entries and are better suited for anything but unstructured textual repository format. We choose a graphical representation model to relate information visually. The IRSKG schema uses the graph notations and represents a 'Graph' (G) as a set of 'vertices' (V) and \u2018edges' (E) as shown in the Equation 1a. We use the PG model technique (see section II-A) and thus each vertex and edges have one or more 'properties' along with a 'label' that identifies the vertex or edge as shown in the Equations 1b and 1c respectively.\n$G = (V, E) | E_{i,j} \u2208 E, V_i \u2208 V$ (1a)\n$V_i = {L(V_i), P(V_i)}$ (1b)\n$E_{i,j} = {L(E_{i,j}), P(E_{i,j})})$ (1c)\nWe demonstrate an implementation in Section IV-A."}, {"title": "B. Intrusion Response System Rules Schema", "content": "We create a schema to represent all the IRS governing rules. The rules are the instructions that tell the IRS how to thwart a security breach. The rules comprise two primary categories: the first category is conditions that trigger the IRS to take action on the breach, and the second is constraints that overwrite the IRS actions deemed unsafe to the system. Usually, these rules follow different schemas and are stored in various file formats (JSON, XML, YARA specification, etc.) IRSKG enables a unified graph schema to represent the rules that show the relationship among the components of the various rules. Next, we describe the IRS governing rules graph notations, their semantics, templates, and constraints, followed by their illustration.\n1) Rules Graph Notation: RoEs influence the AICA IRS Plan Components ML models that predict an action or a set of actions to thwart the security breach and restore the enterprise systems to their predefined desired state. We denote RoE as a set of rules Ri, as shown in the Equation 2a. Ri has two vertices and an edge connecting those vertices as shown in Equation 2b. We represent the vertices as $V_{a|b}(R_i)$, with a label, $L(V_{a}(R_i))$, and a property set, $P(V_{a}(R_i))$, as shown in Equation 2c. In addition, we express the edge between $V_{a}(R_i)$ and $V_{b}(R_i)$ as $E(R_i)$, with a label $L(E(R_i))$ and a property set $P(E(R_i))$ as shown in Equation 2d. The property set is a {key, value} pair and can have any arbitrary number of such pairs. However, the organization admin constrains the property set by defining a template ($R^t$) that all Ri must comply with. The logic can be related to the inheritance concept in object-oriented programming for improved understanding.\n$R = {R_i\\ \\forall 0 < i < n}$ (2a)\n$R_i = {V_a(R_i), E(R_i), V_b(R_i)}$ (2b)\n$V_{a}(R_i) = {L(V_a(R_i)), P(V_a(R_i))}$ (2c)\n$E(R_i) = {L(E(R_i)), P(E(R_i))}$ (2d)\n2) Rule Symantic: The Ri captures 'who can do what in which resource'. The 'who' and 'which' are vertices and capture the source and destination computers. The 'who' and 'which' are vertices, $V_a(R_i)$ and $V_b(R_i)$ respectively. We capture the computer 'IP' as the vertex label, namely, $L(V_a(R_i))$ and $L(V_b(R_i))$. However, our schema is flexible; thus, it can contain additional properties such as computer name, computer location, asset name, asset tag, etc. We capture these in $P(V_a(R_i))$ and $P(V_b(R_i))$. The 'what' is a verb that the 'who' wants to carry on 'which resources. We represent the 'what' as en edge, $E(R_i)$ between $V_a(R_i)$ and $V_b(R_i)$. The $L(E(R_i))$, the label captures the verb. The $E(R_i)$ relationship also captures the \u2018constraint' that $E(R_i)$ should follow as laid out by the organization administrators.\n3) Rule constraint: We further define the 'rule constraints' that organization administrators define to 'allow' or 'deny' certain graph relationships. As an illustration, a certain path from vertex $V_a(R_i)$ to vertex $V_b(R_i)$ with an edge $E(R_i)$ is not allowed. We capture this value as a property in the $E(R_i)$ with a key 'constraint'. We use this while training the GNN to give a special weight to the relationships of the graph. We aim to have the GNN predict the appropriate action, either deny or allow at model inference time. In addition, our notations are flexible to accommodate additional constraints as needed by the enterprise systems.\n4) Rules Template: We use 'meta-template' and specific 'templates' for each enterprise system that each rule should comply with. The 'meta-template' governs all enterprise system templates and hence all rules. Each rule must follow an enterprise system template that also adheres to the meta templates and introduces further semantics specific to that enterprise system. We define $R_t$ as the meta template that adheres to the Ri as we explain in Equation 2b. We define enterprise system templates as $R_{tk}$. The organization administrator specifies the necessary rule semantics in the enterprise system template. Each enterprise system has precisely one enterprise system template. All instance of enterprise system uses the same system template. Each enterprise system template, $R_{tk}$, defines a rule set, $R^{tk} (j)$. Two enterprise systems differ at the least by 'what' (verb) allowed on them. We further explain the template mechanism with concrete examples later in the Case Study Section IV."}, {"title": "C. Response Computation Model Input Data Schema", "content": "In addition to the logs and the rules, IRSKG creates a schema for the input data that the IRS uses to prepare a response computational model. IRS uses the model to create action to thwart security breaches. We use a graph neural network (GNN) as a machine learning model to demonstrate the transformation concept. One can change to any other format suitable for a different machine learning model. Next, we elaborate on IRSKG notations on this ML model input data in this section.\nWe aggregate the cumulative outbound and inbound connections from and to from each vertex, Vi, and represent them in a property in $P(V_i)$, 'count' as shown in the Equation 4a. In addition, we also represent the total connections between two vertices, Vi, and Vj in their edge, $E_{i,j}$, in a property in the dictionary, $P(E_{i,j})$, called \u2018count\u2019 shown in Equation 4b.\n$P_{count}(V_i) = deg(V_i)\\ |\\ deg\\ =\\ degree\\ of\\ vertex\\ V_i$ (4a)\n$P_{count}(E_{i,j}) = P_{count}(V_i)\\ + P_{count}(V_j)$ (4b)\n5) Rules illustration: We illustrate a RoE that uses our IRSKG notation in this section. One rule in $R_t^1$ could represent a consolidated set of rules $R^1$. As an illustration, an administrator might want to deny remote connectivity from any source IP to a critical network asset such as a physical router in a Network Infrastructure management enterprise system. We represent such a rule with the source IP of \u2018any\u2019 as the $L(V_a(R1))$ of the vertex $V_a(R1)$, the destination IP consists of the router IP as $L(V_b(R1))$ of the vertex $V_b(R1)$, and the connectivity \u2018SYN' as $L(E(R1))$ with a property 'constraint' having value 'deny' as shown in the Equation 3. The equation adheres to the model we describe in Section 2a. Moreover, it also adheres to the semantics we define in Section III-B2 where \u2018who\u2019 maps to $L(V_a(R1))$, \u2018which\u2019 maps to $L(V_b(R1))$, \u2018what\u2019 maps to the verb $L(E(R1))$, and the property 'constraint' with value 'deny' is represented in $P(E(R1))$ as {\u201cconstraint\u201d:\"deny\"}.\n$R_1 = {V_a(R_1), E(R_1), V_b(R_1)}$ (3a)\n$V_a(R_1) = {L(V_a(R_1)), P(V_a(R_1))}\\ |\\ L(V_a(R_1))\\ = \u2018any\u2019,\\ P(V_a(R_1)) = {...}$ (3b)\n$V_b(R_1) = {L(V_b(R_1)), P(V_b(R_1))}\\ |L(V_b(R_1)) = \u20181.2.3.4\u2019,\\ P(V_b(R_1)) = {...}$ (3c)\n$E(R_1) = {L(E(R_1)),P(E(R_1))}\\ |\\ L(E(R_1)) =\u2018SYN\u2019,\\ P(E(R_1)) = { 'constraint': \u2018deny\u2019 }$ (3d)\nIn Section IV-B we demonstrate schema implementation.\nNext, we provide data transform examples that is needed to create a GNN model, using Equation 4a to calculate $P_{count}(V_i)$. Its value is either a cumulative count value as explained by the equation or is a hyper-parameter. For the latter, for example, we transform the constraint rule R1 defined in the Equation 3 as follows: the rule R1, with a vertex label $L(V_i(R1))$ of 'any' with an edge E(R1) with a property key and value pair represented in $P(E(R1))$ as {\u2018constraint\u2019: 'deny'} to a $P_{count}(V1) = -100000$. The -1000000 value, is a data model hyper-parameter set at the design time, makes the network ignore the edge between any vertex to the vertex $V_a(R1)$ as shown in the Equation 5. The value has to be a sufficiently large negative value. The absolute value depends on the enterprise systems transformed graph maximum| $P_{count}(V_i)$ |. We use GNN, so we must adopt this mechanism to define large negative values. However, one can change the mechanism to a different one based on the technique suitable for their IRS of choice.\n$P_{count}(V_i) = -1000000\\ |\\ L(V_i(R1)\\ =\\ \u2018any\u2019,\nP(E(R1))\\ =\\ {\u2018constraint\u2019: \u2018deny\u2019}$ (5)\nWe demonstrate an implementation in Section IV-C."}, {"title": "IV. CASE STUDY OF THE KNOWLEDGE GRAPH FOR INTRUSION RESPONSE SYSTEM (IRS)", "content": "This section demonstrates an IRSKG implementation that translates the abstract schema semantics created in section III to software artifacts. We do so for a cyber defense case study, a Network Infrastructure Management (NIMS) enterprise system. Furthermore, we use the AICA prototype (see section II-B) as the software stack to demonstrate the IRSKG representation. Moreover, we demonstrate the IRS rules, specifically the RoE 'constraints' rules, as explained in Section III-B. In addition, we chose a GNN that the IRS uses as a response computation model (see section III-C). Fig. 5, demonstrates a generalized IRSKG of a typical network system, RoEs that govern the network path between hosts, and the model input to train the GNN. We choose Neo4J [20] to demonstrate a concrete IRSKG schema semantic implementation.\nNext, we demonstrate the IRSKG implementation of the NIMS that uses Graylog system logs in three tasks. In each task, we represent the subject in IRSKG, followed by its concrete implementation in Neo4J. We handle Graylog in the first task. We show raw logs, followed by their IRSKG representation and Neo4J implementation. In the second task, we illustrate an IRS rule that denies modifying the router entries. Finally, we show an IRS GNN computation model input that the IRS uses to formulate a response to thwart security breaches. We demonstrate the three above tasks in detail in the following three subsections."}, {"title": "A. Enterprise System Network Logs Graph Schema", "content": "This section demonstrates the implementation of the IRSKG enterprise system log schema (see section III-A) in Neo4J. We store NIMS logs in Neo4J, which complies with the IRSKG enterprise system schema. The current implementation of the AICA prototype uses Graylog as a Security Information and Event Management (SIEM) to consolidate logs from sensors in the environment for further IRS use. We use the logs to demonstrate our IRSKG implementation. Ni represents the sources and destinations of a network log entry. Ej represents the action that the source wants to take on the destination. For example, SYN is an action when a source sends a connect request to a destination. We represent the activity as the source node, NEP1, has E1,2 relationship of type SYN with a destination NEP2."}, {"title": "B. Enterprise System Network Rules Graph Schema", "content": "We demonstrate the IRSKG rules schema (see Section III-B) in this section. We chose an example IRS rule, R1, that denies any machine (source) to modify the router with an IP 10.10.10.10. We represent the R\u2081 in IRSKG as shown in Figure 7 and store the rule in the Neo4J IRSKG implementation as shown in Listing 3. The node type of the source and destination nodes, represented as $L(V_a(R_1)) = NEP_1$ and $L(V_b(R_1)) = NEP_2$, are NetworkEndpoint type. They have property name as ip-address values as * and 10.10.10.10 represented in $P(V_a(R_1))$ and $P(V_b(R_1))$ respectively. Furthermore, NEP\u2081 and NEP2 has id property, specific to Neo4J software, as 27550 and 27551 respectively. The edge, E1,2 of type relationship, between NEP\u2081 (start) and NEP2 (end) has a label $L(E(R_1))$ = COMMUNICATES_TO with properties such as $P_{constraint}(E(R_1))$ as deny."}, {"title": "C. Enterprise System Network Computational Model Input Graph Schema", "content": "Finally, we demonstrate the IRSKG response computational model input (see Section III-C) implementation in this section. The IRS uses this data in the NIMS case study to train a GNN model. Next, we explain the GNN computational model input schema using the Graylogs, as shown in Fig. 6 and constraint rules, as shown in Fig. 7. We illustrate how the input Gray logs, as shown in the Listing 1, are transformed to the GNN input data schema as shown in the Listing 4. We calculate the 'count' property value, $P_{count}(V_i)$ as 4, following the Equation 4a because there are two nodes, where the ip, '192.168.1.100' appears as either the 'source' or 'destination' address in Listing 1. The source node is represented as IP\u2081 and the destination node as IP2 as shown in Figure 6. Similarly, we assign the same 'count' value to the ip 192.168.1.101' as shown in the Listing 4. Moreover, we calculate the property value, $P_{count}(E_{i,j})$ as two of the edge, E1,2 between IP\u2081 and IP2, as shown in the Listing 5 abiding to the Equation 4b.\nFinally, we transform the IRSKG Gray logs using the constraint IRSKG rules to the IRSKG GNN computational input IRSKG. As explained in Section III-B, an enterprise administrator creates a constraint rule, R1, to prevent any source IP from connecting to a critical infrastructure piece, the router, by adhering to the rules of engagement semantics as illustrated in the Equation 5 and demonstrated in Listing 3 and in Figure 7. R\u2081 prevents any machines from connecting to the router, thus denying them the ability to add new rules to the router. The constraint rule transforms the router vertex and the edge to vertex from any source IP and assigns the edge count property to -1000000. The transformed GNN computational model input IRSKG schema is shown in Fig. 8. The ISRKG Neo4J implementations for the Vertex and the Edge are shown in the Listing 6 and 7."}, {"title": "V. CONCLUSION", "content": "The goal of the paper is to introduce a novel schema, called IRSKG, for capturing information to enhance cyber defense Intrusion Response Systems (IRSs). The schema accomplishes this by enabling: faster onboarding of new enterprise systems, brisker IRS rules management, and faster input data transformations to continuously train computation models to thwart security breaches. Additionally, IRSKG is designed to be adaptable to the evolving cyber threat landscape and allows the onboarding of new configurable structures. This schema represents enterprise system information, including Enterprise system logs, IRS rules, computation model input data, and chat conversation history. We chose a Network Infrastructure Management system as a case study using the AICA Prototype software for the demonstration. Using IRSKG, we represented Graylog network logs, IRS rules that govern the network path between hosts, and the model input to train the GNN. We considered GNN for demonstration due to the graphical nature of the data structure; however, one could use any technique and AI/ML model type to implement IRSKG. Moreover, one could choose a different prototype and a case study to prototype IRSKG. This unified and robust approach allows streamlined automated intrusion response with collaborative information sharing and explainability. In the future, we plan to automate our approach further by incorporating a set of programming APIs and tools to provide additional methods to interact with the IRSKG schema-compliant data. We want to use the APIs to ingest enterprise systems' logs, IRS rules, and computation model input data to use the tools and manage the data by visualizing the schema."}]}