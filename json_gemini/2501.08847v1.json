{"title": "Automatic tuning of communication protocols for vehicular ad hoc networks using metaheuristics", "authors": ["J. Garc\u00eda-Nieto", "J. Toutouh", "E. Alba"], "abstract": "The emerging field of vehicular ad hoc networks (VANETs) deals with a set of communicating vehicles which are able to spontaneously interconnect without any pre-existing infrastructure. In such kind of networks, it is crucial to make an optimal configuration of the communication protocols previously to the final network deployment. This way, a human designer can obtain an optimal QoS of the network beforehand. The problem we consider in this work lies in configuring the File Transfer protocol Configuration (FTC) with the aim of optimizing the transmission time, the number of lost packets, and the amount of data transferred in realistic VANET scenarios. We face the FTC with five representative state-of-the-art optimization techniques and compare their performance. These algorithms are: Particle Swarm Optimization (PSO), Differential Evolution (DE), Genetic Algorithm (GA), Evolutionary Strategy (ES), and Simulated Annealing (SA). For our tests, two typical environment instances of VANETs for Urban and Highway scenarios have been defined. The experiments using ns- 2 (a well-known realistic VANET simulator) reveal that PSO outperforms all the compared algorithms for both studied VANET instances.", "sections": [{"title": "1. Introduction", "content": "Vehicular ad hoc networks (VANETs) (H\u00e4rri et al., 2007) are fluctuating networks composed of a set of communicating vehicles (nodes) equipped with devices which are able to spontaneously interconnect each other without any pre-existing infrastructure. This means that no service provider is present in such kind of networks as it is usual in traditional or in mobile cellular communication networks. The most popular wireless networking technology available nowadays for establishing VANETS is the IEEE 802.11b WLAN, also known as WiFi (wireless fidelity). New standards such as the IEEE 802.11p and WiFi direct are promising but still not available to perform real tests with them. This implies that vehicles communicate within a limited range while moving, thus exhibiting a topology that may change quickly and in unpredictable ways. In such kind of networks, previous to its deployment, it is crucial to provide the user with an optimal configuration of the communication protocols in order to increase the effective data packet exchange, as well as to reduce the transmission time and the network use (with their implications on higher bandwidth and lower energy consump- tion). This is specially true in certain VANET scenarios (as shown in Fig. 1) in which buildings and distances discontinue communication channels frequently, and where the available time for connecting to vehicles could be just 1 s.\nThe efficient protocol configuration for VANETs without using automatic intelligent design tools is practically impossible because of the enormous number of possibilities. It is especially difficult (e.g., for a network designer) when considering multiple design issues, such as highly dynamic topologies and reduced coverage. In addition, the use of exact techniques is also impracticable due to the time spent during the great number of simulations required. All this motivates the use of metaheuristic techniques (Blum and Roli, 2003) which arise as well-suited tools to solve this kind of problems.\nIn this paper, we face the optimal File Transfer protocol Configuration (FTC) in VANETs by means of five different state-of- the-art optimization techniques. This problem lies in the core of any VANET application, and thus optimal configuration is a major concern. Also, we use many optimization algorithms because this is a new field, and their relative advantages are still unclear. Indeed, we cannot find results for comparisons in the literature since only manual (human expert) VDTP configurations were made so far. These algorithms are two swarm intelligence techniques: Particle Swarm Optimization (PSO) (Kennedy and Eberhart, 1995) and Differential Evolution (DE) (Price et al., 2005); two evolutionary algorithms: Genetic Algorithm (GA) (Blum and Roli, 2003) and Evolutionary Strategy (ES) (Beyer and Schwefel, 2002); and a trajectory search technique, Simulated Annealing (SA) Kirkpatrick et al. (1983). We have chosen these algorithms because they constitute a representative subset of well-known"}, {"title": "2. Related work", "content": "Few related works can be found in the specialized literature concerning the use of metaheuristics for the optimization of mobile ad hoc networks (MANETs). Vanhatupa et al. (2006) proposed a flexible Genetic Algorithm for optimizing channel assignment in mesh wireless networks. In that work, the network capacity was increased by 20% while keeping the coverage above 80%. In Alba et al. (2007c), a specialized Cellular Multi-Objective Genetic Algorithm (cMOGA) was used for finding an optimal broadcasting strategy in Urban MANETs, obtaining in this case three objectives fronts with coverage, bandwidth, and duration as performance metrics. The use of multi-objective techniques in this kind of works provides the specialists with a range of non- dominated solutions which can help them in the decision making process. Nevertheless, the use of (mono-objective) aggregated functions allows us the possibility of weighting the objectives and assign more (or less) importance to them for better guiding the search. This way, in Dorronsoro et al. (2008), six versions of GAs (panmictic and descentralized) were evaluated and successfully used in the design of ad hoc injection networks. From a different point of view, and due to its specific design, ant colony optimization (ACO) has been successfully adapted for implement- ing new routing protocols for MANETs (Di Caro et al., 2005), as well as for resource management (Chiang et al., 2007). Never- theless, in these two last cases, the routing load provoked by the internal operations of ACOs makes these approaches unfeasible for large networks. More recently, Huang et al. (2009) proposed a new routing protocol based on a PSO to make scheduling decisions for reducing the packet loss rate in a theoretical VANET scenario.\nIn our work, besides of using the optimization technique itself as a protocol algorithm, our main contribution consists of improving the performance of an existing protocol by optimally tuning its parameters. This way, we will hopefully obtain optimal configurations in the network design phase without incorporating extra management load to the actual network operation."}, {"title": "3. Problem overview", "content": "The optimal File Transfer Configuration consists in optimi- zing the main parameters required by an application commu- nication protocol. This protocol, called VDTP (vehicular data transfer protocol) (Alba et al., 2006), operates on the transport layer protocols of VANETs, allowing the end-to-end file transfer. This implies that considerations about the multi-hop interconnec- tion mode and routing issues can be avoided, since they are carried out by the previous down layer protocols (e.g., UDP, DSR, IP, etc.). Therefore, the different vehicles that constitute the nodes in a given VANET can exchange complete files of information to each other by using VDTP. In this section, we briefly describe the VDTP, detailing the main parameters to be optimized."}, {"title": "3.1. Vehicular data transfer protocol", "content": "VDTP is a connectionless protocol which operates on DSR (Johnson et al., 2001), a routing protocol for multi-hop wireless ad hoc networks. In VDTP, the communication process is carried out by both a file petitioner, which tries to download a file, and a file owner, which stores the file. This transfer protocol operates by using the following packets: FIRQ (file information request), FIRP (file information reply), DRQ (data request), and DRP (data reply). As shown in Fig. 2(a), once the file petitioner knows the name and the location of a given file, it starts the communication by using the FIRQ packet in order to obtain the file size. Then, the petitioner waits for this information which is sent by the owner by means of a FIRP packet. After receiving the information about the file size, the petitioner computes the number of segments in which the file will be split, dividing the file size by the chunk_size. The petitioner starts the transfer by sending a DRQ(1) packet asking for the first segment of the file; then it waits for the first data chunk sent by the owner which uses the DRP(1) packet. This operation is repeated by both, petitioner and owner, until transferring the last chunk DRP(n), and hence making up the complete file.\nIn VANETs, it is usual to work in a hostile medium which can provoke a high number of lost packets during the communication process. In this sense, VDTP provides the specialist with several mechanisms based on timers and counters, in order to solve such"}, {"title": "3.1.1. Problem design variables", "content": "Since we are interested in finding the best possible configura- tion of VDTP, we have focused on the three aforementioned parameters: chunk_size, retransmission_time and number of total_attempts. Therefore, a given configuration (representing a solution of the problem) is a vector of three real values (chunk_size, total_attempts and retransmission_time). The range of each parameter is:\n\u2022 chunk_size: R+ \u2208 [128524, 288] bytes (524,288bytes = 512 kBytes),\n\u2022 total_attempts: R+ \u2208 [1250] attempts,\n\u2022 retransmission_time: R+ \u2208 [1... 10] s.\nThese ranges were stated following the CARLINK consortium requirements for VANETs applications (http://carlink.lcc.uma.es)."}, {"title": "4. The algorithms", "content": "In this section we briefly describe the five metaheuristic algorithms evaluated in this study. Specifically, they are two swarm intelligence techniques, Particle Swarm Optimization and Differential Evolution; two evolutionary algorithms, Genetic Algorithm and Evolutionary Strategy; and a trajectory search technique, Simulated Annealing. These techniques were selected with the aim of experimenting with different population structures, as well as different reproduction mechanisms. We have stated the same stop condition (reaching a certain number of generations) in all algorithms in order to simplify the following descriptions."}, {"title": "4.1. Particle Swarm Optimization (PSO)", "content": "Particle Swarm Optimization (Kennedy and Eberhart, 1995) is a population based metaheuristic inspired in the social behavior of birds within a flock, and initially designed for continuous optimization problems. In PSO, each potential solution to the problem is called particle and the population of particles is called swarm. In this algorithm, each particle position $x_i$ is updated each generation $g$ by means of the following equation:\n$X_i^{g+1}=X_i^g+V_i^{g+1}$ (1)\nwhere factor $v_i^{g+1}$ is the velocity of the particle and is given by\n$V_i^{g+1} = w \\cdot v_i^g + \\Phi_1 \\cdot (p_i - x_i) + \\Phi_2 \\cdot (b_g - x_i)$ (2)\nIn this formula, $p_i$ is the best solution that the particle i has stored so far, $b_g$ is the best particle (also known as the leader) that the entire swarm has ever created, and w is the inertia weight of the particle (it controls the trade-off between global and local experience). Finally, $\\Phi_1$ and $\\Phi_2$ are specific parameters which control the relative effect of the personal and global best particles ($\\Phi_1 = \\Phi_2 = 2 \\cdot UN(0, 1)$)."}, {"title": "4.2. Differential Evolution (DE)", "content": "Differential Evolution (Price et al., 2005) is a stochastic population based algorithm designed to solve optimization problems in continuous domains. The population consists of a set of individuals which evolve simultaneously through the search space of the problem. The task of generating new individuals is performed by differential operators such as the differential mutation and crossover. A mutant individual $w_i^{g+1}$ is generated by the following equation:\n$W_i^{g+1} = v_{r1}^g+\\mu \\cdot (v_{r2}^g-v_{r3}^g)$ (3)\nwhere $r_1, r_2, r_3 \\in \\{1,2,...,i-1,i+1,...,N\\}$ are random integers mutually different, and also different from the index i, the mutation constant $\\mu > 0$ stands for the amplification of the difference between the individuals $v_{r2}^g$ and $v_{r3}^g$, and it avoids the stagnation of the search process.\nIn order to increase even more the diversity in the population, each mutated individual undergoes a crossover operation with the target individual $v_i^g$, by means of which a trial individual $u_i^{g+1}$ is generated. A randomly chosen position is taken from the mutant individual to prevent that the trial individual replicates the target individual.\n$u_i^{g+1}(j)= \\begin{cases} w_i^{g+1}(j) \\quad \\text{if } r(j) \\le C_r \\text{ or } j= j_r  \\\\ v_i^g(j) \\quad \\text{otherwise} \\end{cases}$ (4)\nAs shown in Eq. (4), the crossover operator randomly chooses a uniformly distributed integer value $j_r$, and a random real number $r \\in (0, 1)$, also uniformly distributed for each component $j$ of the trial individual $u_i^{g+1}$. Then, the crossover probability $C_r$ and $r$ are compared just like $j$ and $j_r$. If r is less than or equal to $C_r$ (or j is equal to $j_r$) then we select the $j^{ th}$ element of the mutant individual to be allocated in the $j^{ th}$ element of the trial individual $u_i^{g+1}$. Otherwise, the $j^{ th}$ element of the target individual $v$ becomes the $j^{ th}$ element of the trial individual. Finally, a selection operator decides the acceptance of the trial individual for the next generation if and only if it yields a reduction in the value of the evaluation function (also called fitness function $f()$), as shown by the following equation:\n$v_i^{g+1} = \\begin{cases} u_i^{g+1} \\quad \\text{if } f(u_i^{g+1}) \\le f(v_i^g)  \\\\ v_i^g \\quad \\text{otherwise} \\end{cases}$ (5)"}, {"title": "4.3. Genetic Algorithm (GA)", "content": "Genetic Algorithms (Blum and Roli, 2003) are the most popular metaheuristic algorithms. A GA iterates a process in which two parents are selected from the whole population with a given selection criterion, they are then recombined, the obtained offsprings are mutated, and finally they are evaluated and inserted back into the population following a given criterion. The mutation process is carried out by randomly (uniformly) selecting one of the elements in the solution, and assigning (randomly) a new value in the range as stated in Section 3.1.1. As recombination operator we use here a polynomial crossover defined for continuous variables (Blum and Roli, 2003). Algorithm 3 summarizes the operations of a canonical GA.\nThere are two main versions of GA: steady state GA (ssGA) and generational GA (genGA). The difference between the ssGA and the genGA is the way in which the population is being updated with the new individuals generated during the evolution. In the case of the ssGA, new individuals are directly inserted into the current population while in the case of the genGA, a new auxiliary population is built with the obtained offsprings and then, once this auxiliary population is full, it completely replaces the current population. Thus, in ssGAs the population is asynchronously being updated with the newly generated individuals, while in the case of genGAs all the new individuals are updated at the same time, in a synchronous way."}, {"title": "4.4. Evolutionary Strategy (ES)", "content": "Evolutionary Strategy (Beyer and Schwefel, 2002) is a metaheuristic algorithm, designed by Rechenberg and Schwefel, also based on the ideas of adaptation and evolution.\nAs common with evolutionary algorithms, the mutation and selection operators are applied to the individuals through a given number of generations. The selection in evolutionary strategies is deterministic and only based on the fitness rankings, not on actual fitness values. We used here a mutation operator as explained in GA.\nThe canonical ES (Algorithm 4) operates on a population of size two: the current individual (parent c) and the result of its mutation (offspring o). After the parent initialization (Line 1), ES starts the evolution process by generating a mutated offspring (Line 3) which is evaluated (Line 4). Only if the offspring has a better fitness than the parent, it becomes the parent of the next generation (Lines 5 and 6). Otherwise the offspring is ignored. This is version of ES is called (1+1)-ES. More generally, in (1+\u03bb)-ES, a population with more than one offsprings (\u03bb) can be generated for being compared with the same parent. In a (1, \u03bb)-ES the best offspring becomes the parent of the next generation while the current parent is always ignored. The most generalized version, (\u03bc+ /, \u03bb)- ES, often uses a population of parents (\u03bc) and also recombination as an additional operator."}, {"title": "4.5. Simulated Annealing (SA)", "content": "SA was first presented as a trajectory based optimization technique in Kirkpatrick et al. (1983). It is inspired in the metallurgy processes of annealing, and basically lies in a local search method with a mechanism that eventually promote solutions of worse quality than the current ones (uphill moves), in order to escape from local minima. The probability of performing such a movement decrease during the search process.\nThe pseudocode of the canonical SA is showed in Algorithm 5.\nThe algorithm works iteratively keeping a single tentative solution Sa at any time. In every iteration, a new solution Sn is generated from the previous one, Sa (Line 5), and either replaces it or not depending on an acceptance criterion (Lines 7-8). The acceptance criterion works as follows: both the old (Sa) and the new (Sn) solutions have an associated quality value, determined by a fitness function (f()). If it is worse, it replaces it with probability $prob$ (Eq. (6)). This probability depends on the difference between their quality values and control parameter T named temperature. This acceptance criterion provides the way of escaping from local optima.\n$prob = \\frac{2}{1+e^{(f(S_a)-f(S_n))/T}}$ (6)\nAs iterations go on, the value of the temperature (T) is reduced following a cooling schedule (Line 11), thus biasing SA towards accepting only better solutions. In this work, we employ the geometric rule T(n + 1) = \u03b1 \u00b7 \u03a4(n), where 0 < a < 1, and the cooling is performed every k iterations (k is the Markov chain length).\nFor the neighbor selection, we use a mutation operator (as in GA and ES). The initial value of temperature T is automatically generated in such a way that any movement from the initial (random) solution will be accepted with a certain probability."}, {"title": "5. Optimization strategy", "content": "Our optimization strategy for this problem is composed of basically two main parts: an optimization algorithm and a simulation procedure. The optimization part is carried out by (independently) one of the algorithms described in Section 4. All of them are specially adapted to find optimal (or cuasi-optimal) solutions in continuous search spaces (which is the case in this work). The simulation process is a way of assigning a quantitative quality value to the factors regulating VDTP, thus leading to optimal configurations of this protocol tailored to a given scenario. This procedure is carried out by means of the ns-2 simulator in which we have implemented the VDTP protocol for sending files in VANETS.\nIn each optimization algorithm, the evaluation of each solution is carried out by means of the simulation component. As Fig. 3 illustrates, when a given algorithm generates a new solution it is immediately used for configuring the VDTP. This configuration evaluates the quality of the solution by using the received retransmission time, chunk size, and total number of attempts, as explained in Section 3.1. Then, ns-2 is started and maps a given VANET scenario instance, taking its time in evaluating the scenario with buildings, signal loss, obstacles, vehicles, speed, covered area, etc., under the circumstances defined by the three control parameters optimized by the algorithm. After the simulation, ns-2 returns the global information about the transmission time required for sending the file, the number of lost packets generated during the simulation, and the amount of data exchanged between vehicles. This information is used to compute the fitness function."}, {"title": "5.1. Fitness function", "content": "Since ns-2 operates by simulating (and averaging) many potential variations scenario all fitting the actual vehicle system, there is a possibility of obtaining different fitness values even using the same VDTP configuration (solution). Therefore, in order to provide each solution with a fitness value as reliable as possible, a single evaluation of one solution requires N=10 internal simulations, computing the global fitness (F) as the mean of all ns-2 results:\n$F=\\frac{1}{N}\\sum_{i=1}^{N}\\frac{transmission\\_time_i +lost\\_packets_i}{log(data\\_transferred_i +C)}$ (7)\nIn this equation, i\u2208 [1..10] is the number of simulations per solution evaluation. The factor C=2 avoids division zero if there is no data transference, preventing a possible error in the fitness calculation. The data transferred is presented in logarith- mic scale in order to make up for the difference in the range of values. This way, the algorithm looks for minimizing the global fitness."}, {"title": "6. Experiments", "content": "We have used the implementation of the five algorithms provided by MALLBA (Alba et al., 2007a), a C++ based framework of metaheuristics for solving optimization problems. The simulation phase is carried out by running ns-2 simulator v-2.31. For the experiments, we made 30 independent runs of each algorithm on machines with Pentium IV 2.4 GHz core, 1 GB of RAM and O.S Linux Fedora core 6."}, {"title": "6.1. Instances: VANET scenarios", "content": "We have created two simulation VANET scenarios (instances) from real Urban and Highway areas of M\u00e1laga, Spain (selected areas in Fig. 4). These instances have been generated following the real tests carried out by experts in the scope of the CARLINK project, with the aim of obtaining as different as possible conditions of speed, number of vehicles, obstacles, signal noise, network use, etc. Therefore, we can analyze in both scenarios the behavior and performance of the compared algorithms, as well as the differences in the resulting VDTP configurations in terms of communication efficiency. Furthermore, we can compare these automatically generated configurations against the ones used in the real experiments by human experts in CARLINK (Alba et al., 2008a, 2008b)."}, {"title": "6.1.1. Urban", "content": "The Urban instance covers an area of 120,000 m\u00b2 including buildings and semaphores. We have used VanetMobiSim (Alba et al., 2007b) for generating a realistic simulation mobility model where vehicles move randomly according to real traffic rules. A number of 30 vehicles move with a velocity between 30 and 50 km/h, and 20 of them trying to send and receive a file of 1024 kBytes."}, {"title": "6.1.2. Highway", "content": "The Highway instance covers a stretch of 1 km with two directions without buildings and semaphores. In this case, the absence of obstacles is made up for the handicap of the high speed of vehicles, which also interferes the communication among vehicles. We have also used VanetMobiSim (Alba et al., 2007b) for generating a realistic simulation mobility model where vehicles move randomly according to real traffic rules. In the Highway VANET, a number of 30 vehicles move with a velocity between 80 and 110 km/h, and 20 of them trying to send and receive a file of 1024 kBytes size.\nThe resulted communication environments of Urban and Highway instances, including directions and mobile nodes (vehicles), were mapped in the ns-2 simulator following the"}, {"title": "6.2. Parameter settings", "content": "In our experiments, all studied algorithms were configured in order to perform 1000 solution evaluations per run. At each one of these solution evaluations, ns-2 performs 10 independent simula- tions of the target scenario with the same protocol configuration as stated in Section 5.1. Therefore, the population based algorithms (PSO, DE, GA, and (\u03bc, \u03bb)-ES) were configured with 20 individuals, performing 50 generational steps."}, {"title": "6.3. Results and comparisons", "content": "In this section we present the results obtained by the five studied algorithms when solving the optimal File Transfer Configuration (FTC) problem on VDTP. Table 3 shows the resulting fitness values regarding the Urban and Highway VANET scenarios in terms of the mean, the standard deviation, the minimum (best fitness), the median, and the maximum (worst fitness) found in 30 independent runs of every algorithm.\nFor the Urban scenario, we can observe (in Table 3) that PSO obtained the best result in terms of the mean fitness. This smallest mean value leads us to believe that using the PSO the resulting VDTP ends in an efficient communication which is fast and accurate between vehicles. In addition, the best median and maximum values were also obtained by PSO, although the best minimum (e.g., the best VDTP configura- tion found for Urban) was reached by DE. This is an expected value, since DE generally shows a pronounced exploitative behavior (using a parametrization close to the standard one, Price et al., 2005), while PSO tends to have an explorative performance using a high inertia (as in this study w=0.5, Eberhart and Shi, 2000). Similar results can be observed for the Highway scenario, in which PSO obtained the best mean fitness value again. For this instance, PSO also showed the lowest value of standard deviation. This implies a considerable advantage, since it provides our model with a high robustness, which is a crucial issue when designing VANETs. In terms of the minimum fitness, GA and DE obtained the best VDTP configura- tions for the Highway scenario. The worst configuration was obtained by ES.\nIn order to provide such comparison with statistical meaning, we have applied a Signed Rank (Wilcox, 1987) statistical test to the distributions of the aforementioned results. We have used this non-parametric test with confidence level of 95% (p-value=0.05), which leads us to ensure that these results are statistically different if they result in p-value < 0.05. Table 4 contains the resulted p-value of applying the Signed Rank test to PSO (the one with the best mean fitness) in comparison with the remaining of algorithms, hence confirming the differences in results. In this table, the symbol \u25b2 means that PSO is statistically better than the compared algorithm, whereas the symbol A means that PSO has a better rank than the compared algorithm, but without statistical difference.\nAs we can observe in Table 4, PSO is statistically better than all compared algorithms for the Urban instance. Only DE shows a p-value (0.047) close to 0.05, being lower in any case. Concerning the Highway instance, PSO shows the best rank, not far from GA and SA.\nA general comparison can be made using the Friedman (Iman and Davenport, 1980) statistical test by means of which the algorithms are sorted in a ranked list. Table 5 shows the Friedman ranking of the compared algorithms in Urban and Highway instances (the best ranked algorithm is in the top). For Urban instance, PSO and DE are the best ranked algorithms, but showing SA the last position. Nevertheless, for Highway scenario, SA obtains the best rank, whereas PSO is located in the third position.\nTheses statistical results lead us to think that, in spite of the global best behavior of PSO, the different requirements implicit to both instances implies that each algorithm can show quite different results depending on the VANET scenario on which it operates. For example, DE shows a competitive performance in Urban scenario whereas it is the second worst in Highway. The opposite example can be observed in GA and SA which show weak results in Urban but highly competitive ones in Highway.\nTherefore, the VANET designer can select the optimization model"}, {"title": "6.4. Performance analysis", "content": "We present now a performance study which basically lies in analyzing the best fitness value, resulted from each function evaluation, during the whole evolution process of a given algorithm. Figs. 5 and 6 illustrate the graphs of the best fitness values (communication cost) obtained through the median execution in Urban and Highway instances, respectively.\nWe can observe in both graphics that PSO and DE tend to converge in the same range of solution evaluations, although they could improved their fitness even in the final steps of the evolution process. GA shows a similar trend as the former ones but it is subjected to an early stagnation.\nFinally, the different behaviors observed in ES, and specifically in SA, for Urban and Highway instances confirm us the high dependency of such algorithms to each different VANET instance (they are not robust in this application).\nConcerning the mean run time that each algorithm spent in the experiments, Table 6 shows both the mean time in which the best solution was found $T_{best}$, and the global mean run time $T_{run}$ for Urban and Highway scenarios. In general, SA shows the shortest times to find the best solution for the two VANET instances. We suspect that despite its temperature mechanism, SA quickly falls in local optima hence obtaining weak results in Urban scenario. Nevertheless, this behavior can be an advantage for Highway scenario where SA obtained accurate solutions with a fast performance. As expected in PSO and DE, they spent closed executions times for the two VANET instances since they have similar internal operations. This resemblance in time consumption was also registered in the two evolutionary algorithms, GA and ES.\nAs a summary, the algorithms use between 9.00E+03 and 4.76E+03 s for the Urban scenario (150 and 80 minutes, respectively), and between 2.19E+03 and 8.45E+02 s for Highway scenario (60 and 23 minutes, respectively). This relative low effort in the protocol design is completely justified by the subsequent benefits obtained in the global data transmission time and loss of packets once the VANET is physically deployed as observed in the following analysis."}, {"title": "6.5. Scalability analysis", "content": "Once we have analyzed the performance of the five algorithms in two different VANET scenarios, we study in this section how do various network sizes affect the performance of these optimiza- tion techniques. For this purpose, we have generated two new VANET instances from the initial Urban scenario (of M\u00e1laga) by enlarging the metropolitan area considered. Therefore, as Fig. 7 shows, the initial urban area (A1) has been expanded to A2 and A3 VANET areas. We have set the traffic flow as described in Section 6.1, also increasing the number of vehicles as follows:\n\u2022 Urbana 1 with 30 vehicles in 120,000 m\u00b2,\n\u2022 Urbana 2 with 40 vehicles in 240,000 m\u00b2,\n\u2022 Urbana 3 with 50 vehicles in 360,000 m\u00b2.\nFrom the point of view of the mean fitness obtained by each algorithm (out of 30 independent runs), we can observe in Table 7 that PSO keeps the best performance for Urbana 2 and Urbana 3. Additionally, one of the most interesting results can be observed in GA, which arises as the second best algorithm in improving its behavior with the VANET size. ES obtains moderate mean fitness values for all network instances, keeping a low standard deviation. The worst results are registered by SA in Urbana 2, and DE in Urbana 3. Concerning DE, the initial choice of its parameters (Cr=0.9 and \u03bc = 0.1) could lead the algorithm to perform an exploitative search, hence obtaining good results in small instances (the second best for Urbana 1) but damaging its behavior in larger VANETs (the worst for Urbana 3). In summary, excepting for GA and DE, we can confirm that for the scaled VANET instances the performance of the algorithms are similar to their performances in Urbana 1 (the initial Urban VANET instance) being PSO always the best procedure.\nA secondary but also interesting observation lies in the mean fitness values, which are in Urbana 2 lower than in Urbana 1. We suspect that, in spite of the larger dimension of Urbana 2, the proportion of communicating vehicles (per m\u00b2) in this VANET helps the protocol operation specially for intermediate nodes, hence improving the effective ratio of delivery packets and the overall retransmission time. This proportion could not be enough for Urbana 3 where the cost of transmissions is the larger one.\nConcerning the execution time, Table 7 shows in the three last columns the time required to find the best solution ($T_{best}$) for each VANET instance. Surprisingly, for PSO, ES, and SA the time required to converge in Urbana 2 is lower than in Urbana 1. This behavior can be explained by the fact of obtaining good solutions faster in Urbana 2 than in Urbana 1, where the lower number of vehicles could harm the communications conditions. On the contrary, the global run time ($T_{run}$) always increases with the network size. This is of course an expected result."}, {"title": "6.6. QoS analysis", "content": "Finally, from the point of view of the worked VDTP configura- tions (solutions), we analyze the results in terms of the QoS indicators considered here: the transmission time, the number of lost packets, and the amount of data transferred induced in the designed VANET. In this sense, Table 8 shows the results after simulating the best solutions found by the studied algorithms. In addition, the last row of this table contains the results of simulating the configuration of VDTP that has been used in the scope of the CARLINK project (real word results with actual cars).\nFor the Urban VANET, the VDTP configuration obtained by PSO (Chunk_Size=41,358 Bytes, Retransmission_Time=10s, and num-"}, {"title": "7. Conclusions", "content": "In this paper, we tackle the optimal File Transfer protocol Configuration (FTC) in VANETs by means of five popular metaheuristic algorithms. For this, we need a complex system accounting for a flexible simulation structure targeted for optimizing the transmission time, the number of lost packets, and the amount of data transferred in simulated and also realistic VANET scenarios.\nThe experiments, using ns-2 (well-known VANET simulator), reveal that all algorithms are capable of efficiently solve the optimum FTC problem. In the comparisons, PSO performs statistically better than all algorithms in Urban and statistically better than DE and ES in Highway. In addition, GA and SA show a competitive performance in Highway. The scalability analysis shows that GA improves with the network size, whereas DE decreases its performance with large VANET instances. PSO keeps the best result even for larger instances.\nFrom the point of view of its real world utilization, PSO can reduce 19% of the transmission time in Urban and 25.43% in Highway with regards to human experts configuration of CARLINK, while transmitting the same amount of data (1024 kBytes). The highest effective data rates obtained by PSO (of 300.39 kBytes/s in comparison with 241.5 kBytes/s of human experts) and DE (292.57 kBytes/s) in Urban lead us to advise the final use of our automatic design algorithms.\nAs a matter of further work we are presently extending our benchmark with new VAN"}]}