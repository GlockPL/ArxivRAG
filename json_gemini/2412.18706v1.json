{"title": "SurvAttack: Black-Box Attack On Survival Models through Ontology-Informed EHR Perturbation", "authors": ["Mohsen Nayebi Kerdabadi", "Arya Hadizadeh Moghaddam", "Bin Liu", "Mei Liu", "Zijun Yao"], "abstract": "Survival analysis (SA) models have been widely studied in mining electronic health records (EHRs), particularly in forecasting the risk of critical conditions for prioritizing high-risk patients. However, their vulnerability to adversarial attacks is much less explored in the literature. Developing black-box perturbation algorithms and evaluating their impact on state-of-the-art survival models brings two benefits to medical applications. First, it can effectively evaluate the robustness of models in pre-deployment testing. Also, exploring how subtle perturbations would result in significantly different outcomes can provide counterfactual insights into the clinical interpretation of model prediction. In this work, we introduce SurvAttack, a novel black-box adversarial attack framework leveraging subtle clinically compatible, and semantically consistent perturbations on longitudinal EHRs to degrade survival models' predictive performance. We specifically develop a greedy algorithm to manipulate medical codes with various adversarial actions throughout a patient's medical history. Then, these adversarial actions are prioritized using a composite scoring strategy based on multi-aspect perturbation quality, including saliency, perturbation stealthiness, and clinical meaningfulness. The proposed adversarial EHR perturbation algorithm is then used in an efficient SA-specific strategy to attack a survival model when estimating the temporal ranking of survival urgency for patients. To demonstrate the significance of our work, we conduct extensive experiments, including baseline comparisons, explainability analysis, and case studies. The experimental results affirm our research's effectiveness in illustrating the vulnerabilities of patient survival models, model interpretation, and ultimately contributing to healthcare quality.", "sections": [{"title": "1 INTRODUCTION", "content": "Mining health records uncovers valuable patterns and insights to enhance healthcare decision-making [6, 17, 18, 30]. Mining health records uncovers valuable patterns and insights to enhance health-care decision-making [6, 17, 18, 30]. Survival analysis [7], as a significant tool for time-to-event modeling, has been widely used in mining electronic health records (EHR) to analyze the time until the occurrence of an event of interest [21, 27, 33, 42]. Despite extensive research on constructing more effective survival models [42], there is a growing demand for model robustness and failure analysis when facing threatening situations given the high-stakes nature of health applications. Therefore, testing through a series of practical and effective \u201cadversarial attacks\u201d can be a necessary step for certifying the safety and robustness of a medical decision-support model before its deployment in the real world. One of the prevalent adversarial attacks is applying a curated imperceptible perturbation [15] to input data, to \u201ctrick\u201d a well-trained predictive model into overturning its decisions. In survival analysis, which estimates the patient's survival urgency and its underlying risk factors, the consequences of such attacks can be particularly severe as the patients in critical condition may lose their priority for ICU admission to the non-urgent patients. In such threatening situations, survival models are usually the \"black-box\" where adversaries lack knowledge of the model's architecture and parameters and cannot make any alterations to the model. Thus, the attack actions would solely fall on the input data.\nStudying adversarial attacks on survival models in this \"black-box\" setting can be beneficial in three ways. First, this is one of the most practical means to initialize an attack which requires almost the lowest level of model access - inference. Therefore, the framework to study can account for a major portion of realistic threats. Second, studying how these models get \"fooled\u201d by making minimal changes to the input is an effective approach to illustrate the inherent vulnerabilities of the model, prompting preemptive measures to avoid such high-risk failure in deployment. Third, such attacks can offer explainability insights into the turning points and sensitive decision boundaries in the survival model's decision-making process since they can pinpoint the critical positions along the EHR history. Although studies on adversarial attacks initially emerged in image recognition [3, 16, 31, 34], and later extended to more tasks such as natural language processing [10, 37, 50], the study of such attacks on healthcare modeling [2, 40, 46], specifically for the task of survival models within the context of longitudinal health records, still remains highly unexplored. To bridge this research gap, there are two pressing challenges.\nThe first challenge is posed by the uniqueness of longitudinal EHR data. Generally, EHR data intrinsically exhibit a high-dimensional, discrete, and sparse feature space, where each patient"}, {"title": "2 PRELIMINARY OF SURVIVAL ANALYSIS", "content": "Survival models aim to estimate the survival function $S(t|V) = P_y(\\tau > t)$ that represents the probability that an individual will survive beyond a specific time point t given the subject's covariate V. In survival analysis, the mean lifetime denoted as u, representing the average time until an event occurs, is computed by integrating the survival function over time:\n$\\uparrow = \\int_{0}^{\\infty} S(t|V) dt$ (1)\nwhere \u2191 denotes the predicted survival time duration, and the output under attack in the victim survival models.\nThe objective of attacks on survival models is to undermine the survival model's ranking capability and compromise survival time prediction. Specifically, the following two survival analysis metrics are monitored to assess attack effectiveness in achieving its goals. First, the Harrell's Concordance Index (C-index) [19], which is used to assess concordance or agreement between the predicted survival times ranking and that of the actual survival times. A higher c-index indicates better concordance, meaning that the model's predicted rankings align more closely with the actual survival outcomes. Consider a pair of subjects (i, j) with the actual survival times of $T_i$ and $T_j$, predicted survival times of $\\widehat{T_i}$ and $\\widehat{T_j}$, and censoring labels of $k_i$ and $k_j$ (censored k = 0, observed k = 1). To compute the c-index, we consider three types of patient pairs:\n(1) Patients in the pair are both observed subjects ($k_i = k_j = 1$). We say (i, j) is a concordant pair if $T_j > T_i$ and $\\widehat{T_j} > \\widehat{T_i}$ (correct ranking prediction), a discordant pair if $T_j > T_i$ and $\\widehat{T_j} < \\widehat{T_i}$ (incorrect ranking prediction), and a tied pair if $\\widehat{T_j} = \\widehat{T_i}$.\n(2) Patients in the pair are both censored subjects ($k_i = k_j = 0$). They are excluded from the computation because it's impossible to determine who experienced the event first (unrankable).\n(3) Patient i is a censored subject and patient j is an observed subject ($k_i = 0, k_j = 1$). If $T_j > T_i$, the pair is excluded because, again, it's unclear who experienced the event first. If $T_j < T_i$, (i, j) is a concordant pair if $\\widehat{T_j} < \\widehat{T_i}$, a discordant pair if $\\widehat{T_j} > \\widehat{T_i}$, and a tied pair if $\\widehat{T_j} = \\widehat{T_i}$.\nGiven the defined pairs, Harrell's C-index is defined as:\n$C = \\frac{\\Sigma_{i,j} [I (\\widehat{T_i} < \\widehat{T_j}) + 0.5 \\cdot I (\\widehat{T_i} = \\widehat{T_j})] \\cdot I (T_i < T_j) \\cdot k_j}{\\Sigma_{i,j} I (T_i < T_j) \\cdot k_i}$ (2)"}, {"title": "3 PROPOSED METHOD", "content": "In this section, we first introduce the notations used in the paper. Subsequently, we present the details of our proposed method."}, {"title": "3.1 Notation and Problem Definition", "content": "Electronic Health Records (EHRs) contain comprehensive information about patients' medical history. Usually, for each patient with covariate V representing the patient's medical history, multiple hospital visits $v_n$ have been recorded at each time point n (1 \u2264 n \u2264 N), where V = {$v_n$}$_{n=1}^{N}$. In each visit $v_n$ = {$c_i$}$_{i=1}^{s_n}$, there are $s_n$ number of standardized medical codes $c_i$ representing diagnoses, prescriptions, procedures, etc., which are documented within hospitals' databases. Three sets of information are needed from EHRs to enable survival analysis: 1) patient covariate V, 2) time of the event T, and 3) a label k indicating the event observation status (censored k = 0/observed k = 1). Consider a survival model F : V \u2192 T, which maps from input covariate space V, containing all the possible EHR information of patients in the form of data V, to output survival time space T encompassing all the survival time T \u2208 R. We can feed a patient's covariate V to F to derive the estimated survival time F(V) = $\\widehat{T}$. Given two subjects of $V_i$ and $V_j$ with true labels of ($T_i, k_i$) and ($T_j, k_j$), the survival model F strives to predict $T_i$ and $T_j$ to first be concordant with the ranking of actual survival times, meaning if $I(T_i < T_j) \\cdot k_i = 1$ then $\\widehat{T_i} < \\widehat{T_j}$, and second, if $k_i = 1$, then $T_i \u2248 \\widehat{T_i}$, indicating accurate time prediction. We attack the victim survival model F by adding an indiscernible adversarial perturbation \u2206V to one of the subjects (e.g. i) to create an adversarial subject V* = $V_i$ + \u2206$V_i$, tricking the victim model in two ways: first, it outputs a wrong ranking result $\\widehat{T_i}$* \u226f $T_j$ given $\\widehat{T_i} < \\widehat{T_j}$ (ranking flipped), and second, it enlarges the predictive error |$T_i$ - $\\widehat{T_i}$* | > |$T_i$ \u2013 $\\widehat{T_i}$| (accuracy deterioration). On the input side, the adversarial perturbation also requires to be subtle in a way that V and V* are almost indistinguishable. We formulate this constraint by keeping the similarity of the V and V* upper than a threshold: SSF(V, V*) \u2265 \u03b8, where SSF is a domain-specific semantic similarity function presented in Section 3.4. The threshold \u03b8 \u2208 R upholds the utility and semantic-preserving property of the perturbation. In other words, we adversarially manipulate patient i's EHR input to obtain the corresponding manipulated survival time $\\widehat{T_i}$*, flipping the correct ranking between i and j. This manipulation deteriorates the survival model's performance in terms of concordance index and time prediction accuracy."}, {"title": "3.2 Overview of the Proposed SurvAttack", "content": "In this section, we present an overview of our proposed black-box adversarial attack framework, named SurvAttack, targeting on EHR survival models. As shown in Figure 1, SurvAttack employs a greedy search that begins by first considering three adversarial action candidates (removal, replacement, and addition) for medical codes within each hospital visit of a patient's records. In the cases of replacing or adding, to maintain clinical consistency and conformity, we have devised a meticulous ontology-informed synonym code selection (SCS) strategy (section 3.3) that integrates the medical domain knowledge and statistical information. This approach aims to ensure seamless alignment of any added code with the clinical semantic context in the patient's medical record. Also, we designed a semantic similarity function (SSF) (section 3.4) leveraging a SOTA ontology-aware deep encoder. SSF is utilized in both the adversarial action scoring and the ultimate attack stealthiness check. Using a composite code scoring (CCS) mechanism (section 3.5), SurvAttack evaluates each of the adversarial candidates. These actions are subsequently sorted in descending order based on their associated composite scores. The attack (section 3.6) proceeds in this order, executing high-scoring adversarial candidates first until either the adversarial attack succeeds or one of the attack constraints is breached (attack fails). Finally, we propose a dynamic SA-specific attack (DSA) strategy in section 3.7, which is specifically designed for survival analysis, dynamically using the defined greedy adversarial perturbation to disrupt the ranking ability of the SA model when performing on a set of patients."}, {"title": "3.3 Ontology-informed Synonym Code Selection (SCS)", "content": "The Synonym Code Selection (SCS) strategy, as illustrated in Figure 2, incorporates both medical ontological data as clinical domain knowledge and co-occurrence probabilities as overall statistics in datasets. This meticulous integration identifies a synonym set of codes for a targeted medical code for attack, thereby maintaining both clinical conformity and statistical consistency.\nA medical ontology, depicted in Figure 2, is a hierarchical structure of medical concepts, like a directed acyclic graph (DAG), that categorizes medical codes based on their similarities in clinical meaning. For example, In the International Classification of Diseases (ICD) coding system, codes within the same group represent related diseases, symptoms, or procedures. Similarly, in the Anatomical Therapeutic Chemical (ATC) classification system, the drug codes within the same categorization class share pharmacological or therapeutic properties. The ontology starts with broad general categories at the top level that encompass a wide range of related concepts and becomes increasingly specific as the classification descends. To choose an appropriate synonym code, we begin by identifying the targeted code's siblings. These are other codes within the same group under the same parent code, usually related and sharing semantic similarity. However, sometimes, two sibling codes, although sharing many similarities, may not occur simultaneously in reality. For instance, while the diagnoses \"Type I Diabetes Mellitus (ICD-9 code: 250.01)\" and \"Type II Diabetes Mellitus (ICD-9 code: 250.00)\" both stem from the same ancestor, \"Diabetes mellitus without complication (ICD-9 code: 250.0)\", they almost never co-occur in the EHR data as they have different underlying causes. It's more common for individuals to have either Type I or Type II diabetes. Another example is \"Fracture of neck of femur, closed (ICD-9 code: 820.8)\" and \"Fracture of neck of femur, open (ICD-9 code: 820.9)\". A fracture of the femur neck cannot be both open and closed simultaneously. These codes describe mutually exclusive conditions where a closed fracture means the skin is not broken, and an open fracture means there is a break in the skin. As a result, using such codes together or substituting one for another may not be consistent with the clinical reality of the patients and could compromise the stealthiness of the attack. Therefore, we add a second component which is code co-occurrence information to mitigate the aforementioned problem. A high co-occurrence probability between two medical codes indicates a strong statistical correlation and consistency. We utilized a co-occurrence conditional probability calculated as follows for the target code $c_i$ and its sibling $s_{ij}$:\n$P[s_{ij}, c_i] = Pr(s_{ij}|c_i)$ (4)"}, {"title": "3.4 Semantic Similarity Function (SSF)", "content": "In many prior studies on adversarial attacks involving discrete EHR data [40, 46], the enforcement of similarity between the attacked subject and the original version relied on the count of perturbations. However, this approach is inherently simplistic as it fails to consider the distinct impact of each action (e.g., removal, replacement, addition, etc.) on the semantic information within the patients' health landscape. Moreover, even perturbations of the same action do not have the same semantic effect as each code carries a different amount of information given the nature of the event. To accurately evaluate the preservation of semantic information, we utilize a deep learning-based semantic similarity function (SSF), depicted in Figure 3. Specifically, we employ an ontology-aware transformer-based encoder capable of extracting essential information and representing it within a distilled embedding vector E = Enc(V) \u2208 $R^d$. This encoder consists of three main blocks: 1) GRAM [5], which utilizes the attention mechanism on ontology hierarchy, incorporating medical domain knowledge, 2) attention-pooling, compressing the data flow using attention mechanism, and 3) transformer [41], harnessing the self-attention across multiple visits. This encoder was firstly pre-trained through a survival analysis target in work [32]. The survival predictor layer was then discarded after training. By feeding the encoder with the covariate V and its perturbed version V*, we infer the embedding vectors E and E*, then we use cosine similarity as the final step to derive the similarity index. The similarity function SSF : $R^n \u00d7 R^n$ \u2192 R is defined as:\n$SSF(V, V^*) = Cos(Enc(V), Enc(V^*)) = \\frac{E \\cdot E^*}{||E|| ||E^*||}$ (5)\nThe SSF function will be utilized in the following Composite Code Scoring (CCS) section for code suggestion and in the Greedy EHR Adversarial Attack section for checking attack stealthiness."}, {"title": "3.5 Composite Code Scoring (CCS)", "content": "The adversarial attack begins with iterating over the codes inside the history of a patient and scoring them regarding possible adversarial actions. We consider only removal and addition during the scoring phase and bring the replacement action on top of the"}, {"title": "3.6 Greedy EHR Adversarial Attack", "content": "We start the adversarial attack by initializing the adversarial subject V* with V. Using the CCS strategy to identify and rank all potential adversarial actions, we begin with executing the highest-scored actions first. If the action's label I is \"add\", we consider adding the code to V*, and calculate the model's output change AF and similarity index SI. While not violating the similarity threshold, if the output of the model changes to the desired direction (AF > 0 for increase, and AF < 0 for decrease), we keep the added code. In the case of violating the similarity threshold, we drop the added code and stop the process.\nIf the label l is \"remove\", we consider removing the code and repeating the same steps of the model's output change and similarity check. Then, we consider replacing the code with a similar code from the synonym set $S_i$ which was already created in the scoring phase. In this stage, we calculate the score of each replacement candidate using the composite score H and choose the code from synonym set that has the highest score.\n$s^*_j = argmax_{s_{ij} E S_i} {H(V^*, (V^* \u2013 c_i) \u222a s_{ij}))}$ (11)\nWe execute the replacement step and subsequently proceed with the output and similarity checks, as previously described. We compare the removal and replacement and proceed with the action that yields the greatest model's output change while maintaining similarity. We note that if the similarity criterion is not met during the removal phase, we do not halt the process and instead continue to the replacement step to see if the similarity comes back above the threshold. The attack continues until the model's output is successfully altered to the desired value (flipping the predicted survival ranking) or fails, such as when breaching the similarity threshold. Algorithm 2 shows the attack details."}, {"title": "3.7 Dynamic SA-specific Attack (DSA) Strategy for Population Survival Disruption", "content": "Finally, Given SurvAttack's primary objective, disrupting the predicted survival ranking of patients inside a patient cohort in the hospital, we design a dynamic SA-specific (DSA) strategy to adversarially adjust patients' predicted survival time, aiming to convert all permissible pairs to be discordant (a patient pair with incorrect survival ranking). This ultimately results in a low c-index and high MAE. Unlike a naive approach of attacking all possible permissible pairs to flip their concordance, DSA achieves the goal with a single attack per patient, minimizing attack computations.\nIn the first step, we want to target all observed-censored concordant pairs ($k_i = 1, k_j = 0$) by attacking censored subjects to reduce their predicted survival time, aiming to flip the correct ranking of these pairs. Before the attack, we have $I(\\widehat{T_i} < \\widehat{T_j}) \\cdot I(T_i < T_j) = 1$, but after the attack we have $\\widehat{T_i} > \\widehat{T_j}$, so $I(\\widehat{T_i} < \\widehat{T_j}) \\cdot I(T_i < T_j) = 0$, meaning that the pair becomes discordant.\nNext, we focus on observed-observed pairs. We set a starting target point $t_{min}$, initialized with the highest post-attack predicted survival time among censored subjects. Then, sorting observed subjects based on their survival time in ascending order, we start attacking them one by one with respect to target time $t_{min}$. If the observed patient's original predicted survival time $\\widehat{T_i}$ is less than $t_{min}$ ($\\widehat{T_i} < t_{min}$), we perturb it so that its predicted survival time is above $t_{min}$ ($\\widehat{T_i^*} > t_{min}$) and set $t_{min} = \\widehat{T_i^*}$. If the observed patient's original predicted survival time $\\widehat{T_i}$ is larger than $t_{min}$ ($\\widehat{T_i} > t_{min}$), we adversarially perturb it till the predicted survival time becomes closest to the $t_{min}$ but above it ($\\widehat{T_i} > t_{min}$), and then set $t_{min} = \\widehat{T_i^*}$. Performing this strategy, we ensure that ideally all the observed subjects' predicted survival times are above those of censored subjects (keeping observed-censored pairs discordant), while the survival ranking between each observed-observed pair is incorrect. DSA is detailed in Algorithm 3 and also, Figure 6 shows the visualization of this strategy."}, {"title": "4 EXPERIMENTS", "content": "Dataset Description\nWe utilized a real-world Electronic Health Record (EHR) dataset [28] obtained from the Anonymous University Medical Center, encompassing the data of more than 77-thousand patients collected from early 2009 to late 2021, focusing on forecasting a critical and widely existing condition - Acute Kidney Injury (AKI). Compared to the public datasets, AKI offers a richer and longer history of visits for each patient (comparing to ICU stays in MIMIC), and a clearer labeling of onset dates, making it more suitable for survival analysis and attack study. More detailed statistics of the dataset are shown in Table 2."}, {"title": "4.2 Experimental Setting", "content": "For experimenting with SurvAttack, we set the co-occurrence ratio p to 0.75 and similarity threshold e to 0.90 and then attacked four popular survival models evaluated on a target set consisting of 3549 patient subjects (2984 censored and 565 observed). These survival models are as follows: (1) CoxCC [24]: CoxCC uses neural networks to parameterize the relative risk function, allowing for the modeling of complex relationships between covariates and event times. (2) DeepSurv [21]: DeepSurv is a personalized treatment recommendation system based on a Cox proportional hazards deep neural network. (3) N-MTLR [13]: The Neural Multi-Task Logistic Regression is founded on the Multi-Task Logistic Regression (MTLR) model, as introduced by Yu et al. [48], with a deep learning architecture at its core. (4) DeepHit [25]: DeepHit is a deep learning survival analysis method that employs multi-task learning to estimate survival time and event type probabilities, addressing competing risks. Trained on a set of 69599 patients, their evaluation results before the attack are demonstrated in Table 1.\nMoreover, as for medical ontology used in synonym selection strategy (SCS), we employed the International Classification of Diseases (ICD-9) for diagnosis codes and the Anatomical Therapeutic Chemical (ATC) classification system for prescription codes. The anonymous GitHub implementation of SurvAttack\u00b3 is released.\nRegarding computational complexity, if N is the total number of visits of a patient, S is the total number of codes in a visit, and C is the maximum number of acceptable synonyms for a code, the time complexity for attacking one patient is O(NSC). On average, our"}, {"title": "4.3 Results and Discussion", "content": "As this is the first work designing an adversarial attack on health survival models, we choose some of the popular black-box baselines from other domains, mostly text classification, and adapt them for attacking survival models in EHRs. These adapted baselines are prefixed with \"Surv\". The five baselines are: (1) Random: A naive approach that randomly selects adversarial actions, without employing any survival analysis-specific strategy. (2) Surv-PWWS: Adapted from the probability weighted word saliency (PWWS) [37] which is a black-box attack algorithm. (3) Surv-TextBugger: Adapted from a black-box adversarial attack method referred to as TextBugger [26]. (4) Surv-WS: Adapted from the black-box adversarial attack algorithm in [38]. (5) SurvAttack-NoSym: Same as SurvAttack but excludes the similarity index in the composite score. Codes are sorted solely based on the saliency index.\nWe compare the adversarial attack performance results of SurvAttack with the five introduced attack baselines, as shown in Table 1. The table shows the c-index and MAE before and after the attack regarding different cases. In a real scenario when deploying SA models in hospitals, the attacker knows which patients are more urgent maybe based on early medical discretion or prior accurate survival analysis. The attacker aims to disrupt the survival ranking of the SA model, prioritizing non-urgent patients over critical ones. This is similar to when all the subjects are observed. However, there might be cases when the survival urgency of some patients has not been determined yet (both censored and observed). Hence, we consider different cases in our evaluation to cover all potential scenarios, and also as an ablation study of different steps of the DSA strategy. We consider cases when we have both observed and"}, {"title": "5 RELATED WORK", "content": "We review recent advancements in white-box and black-box adversarial attacks, highlighting algorithms that enhance our understanding of deep network robustness. Finally, we examine healthcare-based attacks and distinguish our method from them.\nIn white-box adversarial attacks, where accessing the structure and parameters of the model is plausible, most of the methods heavily depend on gradient calculation with respect to input features. Fast Gradient Sign Method (FGSM) introduced in [16] leverages gradients from the loss function concerning the input data to identify the perturbation direction that maximizes the loss subject to an Loo"}, {"title": "6 CONCLUSION", "content": "Ensuring the robustness of EHR-based patient survival models is vital due to their direct impact on human lives. To advance this field, we introduce SurvAttack, a black-box adversarial attack framework designed to compromise the robustness of survival models. SurvAttack is based on meticulously calculating a composite score for a set of adversarial actions while taking into account the clinical semantic similarity and survival output change, to diminish the survival ranking as well as the time regression predictive ability of patient survival models. Experimental results, including baseline comparisons, attack pattern analysis, survival explainability, and case studies, underscore the significance of our work."}]}