{"title": "HEnRY: A Multi-Agent System Framework for Multi-Domain Contexts", "authors": ["Emmanuele Lacavalla", "Shuyi Yang", "Riccardo Crupi", "Joseph E. Gonzalez"], "abstract": "This project, named HEnRY, aims to introduce a Multi-Agent System (MAS) into Intesa Sanpaolo. The name HEnRY summarizes the project's core principles: the Hierarchical organization of agents in a layered structure for efficient resource management; Efficient optimization of resources and operations to enhance overall performance; Reactive ability of agents to quickly respond to environmental stimuli; and Yielding adaptability and flexibility of agents to handle unexpected situations. The discussion covers two distinct research paths: the first focuses on the system architecture, and the second on the collaboration between agents. This work is not limited to the specific structure of the Intesa Sanpaolo context; instead, it leverages existing research in MAS to introduce a new solution. Since Intesa Sanpaolo is organized according to a model that aligns with international corporate governance best practices, this approach could also be relevant to similar scenarios.", "sections": [{"title": "Introduction", "content": "Assist employees in performing their daily activities is not only a concern of knowledge. In an complex context, an assistant, in addition to providing answers to questions about company knowledge, it can also perform actions within the information system by carrying out certain tasks. The peculiarity of this work lies in the environment, as the solution is applied across different independent domains. The context of this work pertains to Intesa Sanpaolo, a prominent European banking group and the leading financial institution in Italy across all business sectors. The Intesa Sanpaolo Group\u00b2 serves 13.6 million customers domestically and maintains a strategic international presence, providing services to an additional 7.4 million customers worldwide.\nIn a complex environment like Intesa Sanpaolo, knowledge management can be challenging. As showed in the Figure 1, the company structure has a tree-like, hierarchical organization. This condition leads to the creation of domains within the knowledge base. Additionally, the strict regulations in this banking context significantly divide information, creating very specific visibility cones for each type of domain. One of the challenges was to segment domains knowledge according to the end user. This situation arises from the principle of least privilege, which is applied to every single user. Indeed, each person can access information relevant to their role. Another aspect relates to the architecture, particularly the topology of the system. As matter of, within each domain, there are not only knowledge and procedures but also technological functions that provide services necessary for the domain's operation. This leads to a segmentation of domain-specific technological experts who can operate within their context. This means that each domain function is managed by a domain expert with proper tools and processes. Given the complexity of this scenario, this work was preceded by the creation of a chatbot for a single domain. This solution will be described in appendix A.1. Based on this initial experience, the HEnRY project at Intesa Sanpaolo is being structured. The aims of this work is to introduce a MAS across multiple domains. Introducing a MAS requires careful consideration and study of certain components to make it easily integrable and, therefore, pervasive."}, {"title": "Context and Issue Outline", "content": "Intesa Sanpaolo is organized according to a model that aligns with international corporate governance best practices. As a result, this work does not focus merely on the structure of the Intesa Sanpaolo context; instead, it leverages existing research in MAS to propose an innovative solution in this field. The organizational structure [4] is customer-oriented, with seven main Divisions targeting specific market segments. Alongside these Divisions, the central Governance Areas are responsible for guidance, coordination, and control. These Governance Areas cover a range of responsibilities, including human resources, administration and control, finance, legal matters, social responsibility and sustainability, technology and innovation, communication and external relations, cost, risk, and credit management. Each of these areas has specific knowledge related to its concepts, procedures, and responsibilities. This collective body of knowledge constitutes the definition of domains. Typically, each domain of knowledge has its own channel as a touchpoint (i.e., the point of access for the knowledge in that area), and this could represent an issue for those who need to interact across different domains when necessary.\nThe version of the chatbot (based on a RAG approach) developed prior to this work is tailored to a single domain. However, this approach led to the creation of silos for each new domain, resulting in several issues that represent the starting points for this work:\n\u2022 Scalability and Governance of the Solution: The key problem here is how the system performs as the number of domains increases. If not addressed, the amount of data, the level of services, and the functionality could vary significantly and may not integrate seamlessly. Additionally, without proper governance, managing and arbitrating between"}, {"title": "Literature Review", "content": "Stone and Veloso [7] emphasize the importance of AS in scenarios where multiple individuals or departments have distinct goals and proprietary information. In these cases, MAS plays a crucial role in managing interactions between these entities. When departments need to model their internal operations, it is often challenging for them to agree on a single system that meets everyone's needs. Each department requires a system tailored to its unique capabilities and priorities. A solution could be to allow each department to develop agents that represent its specific goals and interests. These agents can then be integrated into a MAS using specialized techniques. From this perspective, Dorri et al. [2] describe MAS as a platform where autonomous entities, known as agents, work together to solve tasks. Typically, these agents can learn, make independent decisions, and interact with their peers or the environment. MAS is often modeled as a graph, with middle agents used to reduce the overhead involved in finding the appropriate agent.\nZhang et al. [8] show that recent research demonstrates the use of Large Language Models (LLMs) to drive agents in single-agent tasks through zero-shot prompting for instruction-following or few-shot prompting for more complex, long-horizon tasks. However, the creation of cooperative agents, that can work with other agents or humans in decentralized settings, remains a challenging and an underexplored area.\nLiu et al. [5] argue that the field of LLM-agent collaborations requires a systematic framework to improve generalizability, efficiency, and performance. Ideally, MAS should dynamically adapt their composition to the specific domain of a query with minimal supervision. Although there have been some attempts, a comprehensive framework has yet to be developed. Their work addresses this gap by introducing a framework for LLM-agent collaboration on complex tasks. Packer et al. [6] point out the limitations of LLMs due to their restricted context windows, which hinder their effectiveness in tasks such as extended conversations and document analysis. They suggest virtual context management, as a solution to these limitations. This technique involves a system that intelligently manages different storage tiers to effectively extend the usable context within the LLM's limited context window."}, {"title": "Key Challenges", "content": "This work, building on the previous experience described in Appendix A.1, aims to outline an evolutionary path from a single-domain chatbot to a MAS based on multiple domains, addressing the following questions: how to set up, what architecture to use, how to enable communication between agents in a multi-domain context structured like Intesa Sanpaolo, and how to make the approach non-invasive and reliable for the group?\nThe proposed solution aims to provide a scalable approach based on heterogeneous agents that can be easily deployed in a multi-domain context. The tools allow the creation of a network of agents, which can be managed collaboratively across various domains. When a task is assigned to the MAS, it is decomposed into all the necessary steps, which are solved by agents distributed across different domains. This focuses on an important point: each part of the problem is managed by its own domain of expertise, in accordance with established rules. Additionally, the agents within each domain can be heterogeneous, enabling the use of the most suitable LLMs for the domain's specific purpose.\nAnother crucial element is the intrinsic traceability within the system. For each request, it is possible to identify which agents were involved, ensuring accountability for the activation of the MAS network"}, {"title": "Proposed Solution and Forward-Looking Vision", "content": "This session will describe the proposal for the MAS of the HEnRY project and its research areas. In the repository github.com/2mmanu/henry, you can find a Kubernetes application capable of instantiating a MAS. An example is provided in Appendix A.3. The agents used in the MAS are based on agentBUDDY [1], a Python package that encapsulates the tools needed for the MAS and the system's agent abstraction. These two components are developed as part of this work.\nAs showed in Figure 2, the solution features a specific architecture with four types of agents: the digital-twin, the facilitator, the mediator, and the domain agent. In the MAS, there can be one or more instances of each type of agent."}, {"title": "Digital Twin Concept", "content": "The digital-twin represents the agent that instantiates the human user in the MAS. This agent has persistent memory and can extend its functionality by requesting support from a facilitator or mediator agent. Thus, the digital-twin can act as a leader within the MAS and request services from the system. As the digital entity of the user, this agent receives information related to its user or retrieves it from its memory based on historical data. Moreover, this agent can humanize the interaction with the MAS. For example, in case of local operational issues within the domains, the digital-twin can explain to the user what is happening without using technical or incomprehensible information, and the agent itself can store the request and resubmit it later, notifying the end user of the final result."}, {"title": "Domain Agent Concept", "content": "The domain agent is a specific agent for domains that can perform a particular role. These func-tionalities are possible because the agent has access to a knowledge base or services within the information system. In this way, the agent performs very simple and specific tasks, making it modular and controllable regarding its actions towards the information system. In a domain, there can be one or more domain agents. Each domain agent has a parent. A parent assumes the role of a facilitator, as it groups different domain agents. Thus, it will be possible to access various basic services through a single access point. This is configured as a tree from an architecture point of view. When a domain agent joins the network, it notifies its parent nodes with a syntax of its capabilities to help them send appropriate requests. This process continues across all layers, allowing each node to grasp the key topic of its respective section without needing all the details."}, {"title": "Facilitator Concept", "content": "The primary function of this agent is to answer questions based on knowledge distributed across the domains through its child agents. A digital twin can receive assistance from a facilitator. This process divides questions into specific queries for the appropriate child domain agent and so forth. Additionally, if further information is required, the facilitator can request integrations from the digital twin without returning to the user with information already known to the system. This approach helps avoid requiring information that the user might consider obvious. An example of the agent is provided in Appendix A.2."}, {"title": "Mediator Concept", "content": "The mediator can set up an asynchronous job to solve a complex problem with the goal of performing an action or creating a digital resource by instantiating a group across the available domains. The mediator works as an ephemeral agent with four stages. In the first stage, it receives a request and prepares an environment for addressing it, including creating a shared context called agora, recruiting or creating relevant agents, and providing feedback to the digital twin. In the second stage, the mediator collects initial solutions from all agents within the shared context. The third stage involves initiating a parallel discussion where agents refine their solutions. Finally, in the fourth stage, the mediator gathers the final solutions from the agents and publishes them in the shared area with the digital twin, facilitating discussion with the end user. An example of the agent can be found in Appendix A.2."}, {"title": "Conclusions", "content": "The initial phase of Project HEnRY involves establishing the project's discovery stage. The project's current maturity is not yet consolidated as it remains in the simulation phase. Additionally, the mentioned tools are still under development. The next steps of the project will be to create a extended baseline to evaluate the effectiveness of the upcoming design phases in an industrial environment. Project with such complexity, raise various questions, such as: \"When should a human intervene? At which level?\", \"How to optimize the prompts used for agent collaboration?\", or \"How to verify whether the proposed solution is a pattern or an anti-pattern?\"\nThis work marks the initial phase of the HEnRY project, aiming to establish a framework for the MAS solution. The project's structure includes two distinct research paths:\nMacro Viewpoint: This path is engage in to defining the structure, topology, communication protocols, and components of the global MAS.\nMicro Viewpoint: This path focuses on the collaboration of agents to address business procedures and common issues within the company.\nThe macro viewpoint ensures common integration of the system, while the micro viewpoint is crucial for effective task decomposition and collaboration, enabling the completion of designed tasks. The dual-path approach could facilitate both system-wide coherence and detailed agent interactions, paving the way for further development and refinement in the project's subsequent stages."}, {"title": "Social Impact Statement", "content": "This project aims to introduce a MAS by addressing the challenge of instantiating multiple domains in a financial/industrial environment. At present, the work does not have significant social impacts, as it is still in the early stages. However, as the project progresses and is consolidated in an industrial setting, potential broader impacts will need to be considered. This includes addressing ethical aspects, privacy concerns, security measures, and mechanisms for monitoring system learning and fairness. Exploring these areas will be crucial for understanding the future societal consequences of the system."}, {"title": "Appendix: Detailed Insights", "content": null}, {"title": "Previous chatbot solution details", "content": "The Data and Artificial Intelligence Office (DAIO) within the Governance Areas of Intesa Sanpaolo has realized a minimum viable product (MVP) to implement a Generative AI-based virtual assistant to replicate across various domains, with the initial release focused on the HR domain. The MVP aims to address a problem that is both simple and complex. It is simple because the literature and technological solutions for a chatbot are well-established, making it a straightforward initial step. However, the complexity arises when considering advanced functionalities, which significantly increase the scenario's complexity. For example, consider requests that require handling across multiple domains, which necessitates implementing numerous procedural software functionalities within the chatbot.\nAn employee of Intesa Sanpaolo can interact with the chatbot and discuss topics based on the HR domain knowledge base. The platform supports defining responses based on accessible user documentation. Additionally, the system offers direct visibility into the sources used to generate responses, along with performance monitoring functionalities to assess the chatbot's effectiveness and key performance indicators. The chatbot is composed of two main components: an AI Web Portal and an Al Backend. The AI Backend utilizes several cloud functionalities and LLM services. Periodically, the AI application is called upon by the HR domain to ingest new data useful for the chatbot. The ingestion pipelines are capable of managing different types of content, such as text, infographics, and markup languages. Another functionality acquired by the system is the capability to apply access control policies to the knowledge base (KB). In fact, the entire KB is tagged with a proper role that represents a boolean condition over some attributes that the user has. In the end, the system has a suite of tools for monitoring the performance of the chatbot and the efficiency of the responses based on [3]."}, {"title": "Facilitator and Mediator Illustration", "content": "Figures 3 and 4 illustrate a specific case for the facilitator and the mediator, respectively. These simulations showcase the MAS's capability to manage multiple domains by demonstrating how the facilitator agent fuses knowledge from various domains and how the mediator agent engages in decision-making processes. Each figure provides a visual representation of the system's operational effectiveness in handling complex tasks within the system."}, {"title": "Sample Application", "content": "In the repository github.com/2mmanu/henry, you'll find a customizable Kubernetes application designed for deploying a MAS based on HEnRY. In this case, the application is packaged as a Helm chart. Helm is a package manager for Kubernetes that simplifies the deployment and management of applications. The Helm chart in this repository includes the necessary configurations to deploy the HENRY MAS, which comes with a web app, a digital twin, and a facilitator by default. You can customize the deployment by modifying the Helm chart values as shown in listing A.3."}]}