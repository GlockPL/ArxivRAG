{"title": "A Predictive Approach for Enhancing Accuracy in Remote Robotic Surgery Using Informer Model", "authors": ["Muhammad Hanif Lashari", "Shakil Ahmed", "Wafa Batayneh", "Ashfaq Khokhar"], "abstract": "Precise and real-time estimation of the robotic arm's position on the patient's side is essential for the success of remote robotic surgery in Tactile Internet (TI) environments. This paper presents a prediction model based on the Transformer-based Informer framework for accurate and efficient position estimation. Additionally, combined with a Four-State Hidden Markov Model (4-State HMM) to simulate realistic packet loss scenarios. The proposed approach addresses challenges such as network delays, jitter, and packet loss to ensure reliable and precise operation in remote surgical applications. The method integrates the optimization problem into the Informer model by embedding constraints such as energy efficiency, smoothness, and robustness into its training process using a differentiable optimization layer. The Informer framework uses features such as ProbSparse attention, attention distilling, and a generative-style decoder to focus on position-critical features while maintaining a low computational complexity of O(Llog L). The method is evaluated using the JIGSAWS dataset, achieving a prediction accuracy of over 90% under various network scenarios. A com-parison with models such as TCN, RNN, and LSTM demonstrates the Informer framework's superior performance in handling position prediction and meeting real-time requirements, making it suitable for Tactile Internet-enabled robotic surgery.", "sections": [{"title": "I. INTRODUCTION", "content": "The Tactile Internet (TI) represents a significant evolu-tion of the Internet, transitioning from traditional data exchange to enabling real-time haptic communications and control over networks. TI introduces new possibilities in several areas, including remote robotic surgery, which depends on real-time touch feedback and accuracy [1]. For these appli-cations, reliability should be high, and extremely low latency is required, with end-to-end delays less than 1 millisecond [2]. Remote robotic surgery will allow surgeons to perform surgical procedures such as Incision, Knot-tying, Suturing, and Needle-Passing [3] over vast distances, breaking geographical barriers. However, the success of these surgical procedures is highly dependent on the accurate and timely transmission of haptic commands and feedback between the Surgeon's Side Manipulator (SSM) and the Patient Side Manipulator (PSM) [4] or Robotic Surgical System.\nSome of the critical challenges in remote robotic surgery include network-induced uncertainties such as delays, jitter, and packet loss [5]. These factors can disrupt the data packet transmission of haptic commands and feedback between the SSM and the PSM, leading to inaccuracies in the PSM's movements. Moreover, packet loss can cause arm's position data loss. This will make it difficult for the robot on the PSM's side to replicate the SSM's intended actions accurately. Recent advances in teleoperation systems in [6] have demonstrated the effectiveness of integrating active vision and pose estimation techniques for precise and stable robotic control. These meth-ods highlight the need to address the challenges of real-time position estimation in remote robotic surgery.\nWith the advent of ultra-responsive connectivity provided by technologies like 5G, the development of the TI has gained significant momentum, especially for applications requiring real-time precision, such as remote robotic surgery. Although advances in network infrastructure have substantially reduced latency, challenges such as packet loss and jitter persist due to physical and environmental limitations [7]. Integrating prediction-based systems, such as the Informer model, can anticipate and compensate for network-induced uncertainties. Traditional methods for mitigating these network issues often involve retransmission strategies, which cannot be used in time-critical applications like surgery due to the added la-tency [8]. Therefore, there is a pressing need for advanced prediction models that can accurately estimate the PSM's position in real time despite challenges posed by network imperfections.\nIn this research, we presents a new method that utilizes the Informer framework [9], a cutting-edge transformer-based model for long sequence time-series forecasting, to improve position estimation of the PSM in remote robotic surgery. First, we integrated a 4-state HMM to simulate the network's packet loss conditions realistically. This method effectively addresses network-induced delays, jitter, and packet loss. Next, we inte-grated network simulation with the Informer model to predict the robotic arms. The Informer model's efficient self-attention mechanism and its ability to handle long sequences make it particularly suitable for this application [9]. We validated our approach using the publicly available JHU-ISI Gesture and Skill Assessment Working Set (JIGSAWS) dataset [10]. Using this dataset, our project demonstrates that the proposed model achieves over 90% accuracy in position estimation despite adverse network conditions.\nThe contributions of this research are as follows.\n\u2022 Development of a robust prediction model using the Transformer-based Informer architecture for real-time position estimation in remote robotic surgery while maintaining a computational complexity of O(Llog L).\n\u2022 Integration of the optimization problem (position estimation with certain constraints) into the Informer model by embedding constraints such as energy efficiency, smooth-ness, and robustness into its training process using a differentiable optimization layer."}, {"title": "II. RELATED WORK", "content": "Recent progress in deep learning models has revolutionized time-series forecasting, particularly for scenarios demand-ing real-time predictions and accurate estimations. Conven-tional models such as Long Short-Term Memory (LSTM) networks [11] and Gated Recurrent Units (GRU) [12] have been extensively used for robotic control and position esti-mation [13], using their ability to capture temporal patterns in sequential data. Although these models address challenges such as vanishing and exploding gradients, their prediction accuracy remains limited [14]. To address these limitations, Transformer-based models have emerged as a compelling alternative for time-series forecasting. By removing the re-liance on sequential processing, Transformers employ a self-attention mechanism to capture long-range dependencies more proficiently [15]. Recent applications of Transformers have demonstrated their effectiveness in diverse forecasting tasks, such as multivariate time-series prediction for energy systems and health monitoring in cyber-physical systems [9], [16].\nDespite their advantages, standard Transformers struggle with processing very long sequences due to their quadratic complexity in time and memory [9], which restricts their suitability for real-time tasks like remote robotic surgery. As a result, modifications of the Transformer framework, including Temporal Convolutional Networks (TCN) and Convolutional Self-Attention Networks, have been developed to manage long-sequence data with lower computational costs and en-hanced prediction performance [17]. The Informer frame-work enhances performance by employing a ProbSparse self-attention mechanism, reducing computational complexity from O(n\u00b2) to O(n log n). This development in the Informer model makes it effective for handling long-sequence data in real-time settings [9]. Furthermore, the Informer's generative-style decoder mitigates error accumulation in long-term predictions, enhancing its reliability for tracking positional changes over time [18]. These features make the Informer a robust choice for predicting the arm's position of the PSM in remote robotic surgery. In such scenarios, challenges such as packet loss and jitter can disrupt performance, but the Informer's design ensures stability and precision in PSM position estimation, even under challenging network conditions."}, {"title": "III. PROBLEM STATEMENT", "content": "Remote robotic surgery is a promising application within the Tactile Internet. For remote surgical procedures to succeed, precise and real-time control of the PSM is essential. The PSM needs to carry out commands from the SSM with accuracy, including details such as position, orientation, linear and angular velocity, and the gripper angle of the surgical tools. However, sending the surgeon's commands over a network can face several challenges including, but not limited to, packet loss, jitter, and delay. These issues, whether they happen as bursts or randomly, can seriously impact the reliability and accuracy of the PSM's movements."}, {"title": "A. System Model", "content": "The proposed system model for remote robotic surgery integrates three key domains. The surgeon-side, patient-side, and network domains. Each domain plays a crucial role in the surgical workflow. The surgeon-side domain includes the surgeon console, which captures surgeon gestures and converts them into haptic commands. These commands represent the intended surgical movements, including force, orientation, and kinematic details. The commands are trans-mitted to the patient's domain, where the PSM executes them highly. The PSM is equipped with a deep learning (Informer model in our case) that estimates and corrects the robot's arm position in real time. This ensures the surgeon's movements are accurately replicated despite network-induced losses and delays. The network domain connects these two domains, providing reliable and low-latency communication necessary for seamless execution of the surgery. This system enables precise remote surgeries, addressing distance and network variability challenges using TI technology."}, {"title": "B. System Overview", "content": "Let x(t) represent the state vector of the PSM at time t, which comprises several key operational parameters.\n$$x(t) =\\begin{bmatrix}\np(t)\\\\\nR(t)\\\\\nv(t)\\\\\nw(t)\\\\\ny(t)\n\\end{bmatrix}$$\nwhere p(t) = [x(t), y(t), z(t)]T is the 3D position vector of the PSM tool tip. R(t) \u2208 R3\u00d73 is the orientation of the PSM, represented as a rotation matrix. v(t) = [vx(t), vy(t), vz(t)]T is the linear velocity vector. w(t) = [wx(t), wy(t), wz(t)]T is the angular velocity vector. y(t) is the gripper angle of the PSM. The key parameter of interest in this study is the 3D position of the PSM's robotic arm, represented as p(t) = [x(t), y(t), z(t)]T, where t denotes time. The goal is to ensure that p(t), as commanded by the SSM, is accurately executed by the PSM in real time. However, due to network imperfections, the state information p^(t) received by the PSM can be incomplete or delayed, necessitating the need for a robust prediction model."}, {"title": "C. Network Errors and Challenges", "content": "In this paper, we focus on addressing the critical network-induced errors that impact the performance of the PSM in Tactile Internet-enabled robotic surgery. Specifically, we con-sider the following types of errors\n\u2022 Burst Errors: These errors occur in clusters, where mul-tiple consecutive packets are lost, leading to significant gaps in transmitted data.\n\u2022 Random Errors: These errors result in the loss of individual packets at random intervals, creating sporadic gaps in the transmitted position data.\nBoth types of errors can significantly degrade the PSM's ability to accurately replicate the SSM's commands in real-time. In our previous work [19], we addressed random errors using the Kalman Filter (KF) for position estimation, which demonstrated effective compensation. However, the KF strug-gled to handle burst errors, highlighting the need for a more robust approach. In this study, we focus on mitigating the impact of burst errors using the Informer predictive model to enhance position estimation accuracy under these challenging conditions."}, {"title": "D. Optimization Problem", "content": "We have formulated the position estimation as an optimiza-tion problem that aims to improve the accuracy and perfor-mance of the PSM. The problem involves multiple parameters, including the tool tip's 3D position(x, y, z), linear velocity, angular velocity, orientation, and gripper angle. However, the primary focus is on minimizing the state estimation error of the 3D position. Considering the complexity introduced by network-induced uncertainties, such as packet loss and jitter, this targeted approach ensures smooth, energy-efficient, and reliable operation under challenging network conditions. The optimization problem is expressed as follows.\n$$\\min_{p(t)} E = \\sum_{t=1}^{T} (||\\hat{p}(t) - p(t)||^2 + \\alpha E(t) + \\beta\\Phi(t))\n$$\ns.t.\n$$\n||p(t) - p(t - \\Delta t)|| \\leq \\epsilon_{sync}, \\forall t\n$$\n$$\np(t) \\in P, p_{min} \\leq p(t) \\leq p_{max}, \\forall t\n$$\n$$\n||v(t)|| \\leq U_{max}, ||w(t)|| \\leq W_{max}, \\forall t\n$$\n$$\n||a(t)|| \\leq a_{max}, a(t) = \\frac{v(t) - v(t-1)}{\\Delta t}, \\forall t\n$$\n$$\\gamma_{min} \\leq \\gamma(t) \\leq \\gamma_{max}, \\forall t\n$$\n$$\n\\sum_{t=1}^{T} (\\lambda_{v}||v(t)||^2 + \\lambda_{w}||w(t)||^2) \\leq E_{max}.\n$$\nThe objective function in (2a) minimizes the expected weighted sum of three components: state estimation error, energy consumption, and a penalty term for network-induced uncertainties. The state estimation error, represented as ||p(t)-\\hat{p}(t)||2, ensures that the predicted position p^(t) is as close as possible to the true position p(t) at each time step t. The en-ergy consumption E(t), expressed as \u03bbv||v(t)||\u00b2 + \u03bbw||w(t)||2, accounts for the contributions of linear velocity ||v(t)|| and angular velocity ||w(t)|| to the total power usage. Here, \u03bbv and \u03bbw are weighting coefficients that balance the relative im-portance of these velocities. The penalty term \u03a6(t) quantifies the impact of network-induced uncertainties, such as packet loss and jitter, and is modeled using a 4-state HMM. The trade-offs among accuracy, energy efficiency, and robustness are controlled by the weighting coefficients \u03b1 and \u03b2.\nThe optimization problem is subject to several constraints to ensure operational feasibility. The real-time synchronization constraint in (2b) enforces that the variation between consec-utive predicted positions is below a predefined threshold \u20acsync, ensuring that the system operates in real-time. The position feasibility constraint in (2c) ensures that the predicted position p(t) lies within the predefined workspace P, bounded by pmin and pmax.\nThe velocity limits in (2d) restrict the linear velocity ||v(t)|| and angular velocity ||w(t)|| to their respective maximum allowable values Umax and Wmax. To maintain smooth tran-sitions in position, the smoothness constraint in (2e) limits the acceleration a(t), calculated as a(t) = (v(t)-v(t-1))/At to an upper bound @max. The gripper angle constraint in (2f) ensures that the gripper angle y(t) remains within operational limits [ymin, ymax]. Finally, the energy budget constraint in (2g) ensures that the total energy consumption over the time horizon T does not exceed Emax.\nThis optimization problem integrates multiple objectives and constraints to achieve accurate position estimation while maintaining smooth, energy-efficient, and reliable operations under network-induced uncertainties. However, several chal-lenges arise in this context, including ensuring real-time exe-cution, effectively handling both random and burst packet loss, and maintaining computational efficiency. These challenges are critical to achieving precise, smooth, and reliable remote robotic operations.\nTo address these challenges, we propose the use of the Transformer-based Informer predictive model. This model is"}, {"title": "IV. PROPOSED MODEL", "content": "In this section, we discuss the proposed approach for solving the problem outlined above. The section is divided into two parts. Part A focuses on modeling network-induced packet loss using a 4-state HMM to simulate realistic loss scenarios, and part B, provides an explanation of the Informer framework, detailing its capabilities and structure."}, {"title": "A. Modeling Packet Loss", "content": "Packet loss in the network is simulated using a 4-state HMM [22], where each state represents a specific network condition, such as.\n\u2022 State 1 (S1): Successful packet reception during a gap period.\n\u2022 State 2 (S2): Successful packet reception during a burst period.\n\u2022 State 3 (S3): Packet loss during a burst period.\n\u2022 State 4 (S4): Packet loss during a gap period.\nTwo probabilities govern state transitions.\n\u2022 Burst Density (PB): Probability of entering or remaining in a burst state.\n\u2022 Gap Density (PG): Probability of entering or remaining in a gap state.\nThe transition probabilities are represented by the following matrix T.\n$$T=\\begin{bmatrix}\n1-P_B & 0 & P_B & 0\\\\\n0 & 1-P_G & 0 & P_G\\\\\n0 & 0 & 1-P_B & P_B\\\\\n0 & 0 & P_G & 1-P_G\n\\end{bmatrix}$$\nThe 4-state HMM is chosen for its ability to model complex patterns of bursts and random errors, providing a more detailed representation than simpler models like the Gilbert or 2-State HMM [23], [24]. This model offers a precise simulation of network conditions by distinguishing between packet loss and successful reception in burst and gap periods, which is essential for high-performance TI environments.\nTo address the impact of network-induced uncertainties on position estimation, we first simulate packet loss in haptic data. A sequence of haptic data points, representing the position of the SSM over time, is defined as follows.\n$$p(t) = [x(t), y(t), z(t)]$$\nwhere t = 1,2,..., T and T is the sequence length. Packet loss is simulated by modifying this sequence based on the HMM state at each time step.\n\u2022 For States S3 or S4 (packet loss), the data point is set to zero.\n$$p(t) = [0,0,0]$$\n\u2022 For States S\u2081 or S2 (packet reception), the data point is preserved.\n$$p(t) = \\hat{p}(t)$$\nThe resulting sequence p(t) is processed by the proposed prediction framework to estimate the accurate position of the PSM."}, {"title": "B. Informer Model-based Predictive Approch", "content": "This study employs the Informer framework, a modified Transformer-based approach, to improve the real-time ac-curacy of PSM position predictions during remote robotic surgery, as illustrated in Fig. 2. Traditional Transformers often struggle with handling long sequences due to their high computational demands and memory usage. The Informer addresses these limitations through key innovations, such as ProbSparse attention, self-attention distilling, and a generative-style decoder. This methodology is adapted from [9], [18].\na) Description of the Informer Model: This subsection provides a detailed description of each component of the Informer Model and its role in achieving efficient and accurate predictions.\nb) Optimized Attention Mechanism: In conventional self-attention, as introduced in [15], scaled dot-products are com-puted for queries, keys, and values.\n$$A(Q, K, V) = Softmax(\\frac{Q K^T}{\\sqrt{d}})\nV$$\nwhere Q\u2208 RLQ\u00d7d, K\u2208 RLK\u00d7d, and V \u2208 RLv\u00d7d. For each query qi, the attention mechanism is defined as.\n$$A(q_i, K, V) = \\sum_j \\frac{\\exp(\\frac{q_i k_j^T}{\\sqrt{d}})}{\\sum_{l} \\exp(\\frac{q_i k_l^T}{\\sqrt{d}})} v_j$$\nThis method has a computational complexity of O(L2), making it inefficient for lengthy sequences. To address this, the Informer introduces ProbSparse attention, which reduces computational requirements while retaining accuracy.\nc) Identifying Relevant Queries: To efficiently process extended sequences, the Informer uses a query sparsity mea-surement based on Kullback-Leibler (KL) divergence. For a given query qi, the attention distribution p(kj|qi) is compared with a uniform distribution u(kj|qi) = 1/K. The sparsity metric is defined as.\n$$M(q_i, K) = ln(\\sum_{k=1}^{L_K} \\exp(\\frac{q_i k_j^T}{\\sqrt{d}})) - \\frac{1}{K}\\sum_{j=1}^{L_K} \\frac{q_i k_j^T}{\\sqrt{d}}$$\nThis metric identifies the top queries that carry the most critical information.\nd) ProbSparse Attention Mechanism: Using the sparsity metric, the ProbSparse attention mechanism focuses only on significant queries. The updated attention mechanism is defined as.\n$$A(Q, K, V) = Softmax(\\frac{Q K^T}{\\sqrt{d}})\nV$$\nHere, Q is a sparse matrix containing the top u queries selected based on M(q, K). The number of key queries u is determined using a factor c, set as u = c. ln LQ, reducing the complexity to O(Lln L).\ne) Streamlined Self-attention Distilling: The Informer applies self-attention distilling to simplify data processing. Input sequences are condensed layer by layer to emphasize key features and eliminate unnecessary information. The distilling process is described as.\n$$X_{j+1}^{i} = MaxPool (ELU(Conv1d([X_j]^i_{AB} )))$$\nwhere [X]AB represents the attention block, and Conv1d is a one-dimensional convolutional layer. This reduces memory usage to O((2 \u2013 \u0454) L ln L).\nf) Efficient Encoder for Long Sequences: The Informer encoder efficiently processes long sequential inputs, balancing memory use and computational efficiency. Input sequences Xt are transformed into matrices Xten \u2208 RL \u00d7dmodel, with self-attention distilling ensuring only essential features are retained. Inspired by techniques in dilated convolutions [20]- [21], the transformation from layer j to j + 1 follows.\n$$X_{j+1}^{i} = MaxPool (ELU(Conv1d([X_j]^i_{AB} )))$$\ng) Fast Generative Decoder: The decoder in the In-former model predicts entire sequences in a single pass, ultimately improving speed and reducing cumulative er-rors. Known tokens Xtoken and placeholders X are used, with masked multi-head attention ensuring predictions remain causal\n$$X_{de}^{i} = Concat(X_{token}, X_o)$$\nThis design enables fast, precise predictions, making the Informer ideal for real-time applications like remote robotic surgery. We have explained the Informer model and its com-ponents. In the next section, we will integrate the optimization problem into the Informer framework to address the challenges in our work."}, {"title": "V. INTEGRATION OF OPTIMIZATION PROBLEM", "content": "Building on the optimization problem formulated in Section III Part B, we now integrate it with the Transformer-based In-former model. The Informer model serves as the foundation for solving this problem by directly embedding the constraints and objectives into its training process. This approach aligns with treating optimization as a differentiable layer, as introduced in [25], and is further guided by insights from optimization principles reviewed in [26]. By combining the strengths of the Informer model and optimization techniques, this approach enhances predictive accuracy.\na) Optimization as a Layer: The optimization problem, defined to minimize the state estimation error ||p(t) \u2013 p(t)||2, while satisfying constraints like energy efficiency and smooth-ness, is modeled as a differentiable layer. This layer translates as.\n\u2022 Objective Function: Position accuracy and energy effi-ciency are incorporated as primary and secondary terms in the loss function.\n$$L_{total} = L_{pos} + \\alpha E(t) + \\gamma||a(t)||^2 + \\beta\\Phi(t)$$\nwhere E(t) represents energy consumption, ||a(t)|| en-sures smoothness, and \u03a6(t) addresses robustness to net-work uncertainties.\n\u2022 Constraints: Operational feasibility is maintained through penalties for violating constraints, ensuring the model adheres to real-time requirements.\nb) ProbSparse Attention for Position-Critical Features: The ProbSparse attention mechanism in the Informer frame-work is designed to focus computational resources on the most relevant input features, enabling efficient processing of complex data dependencies. To align the attention mechanism with the optimization problem, the sparsity metric is modified to prioritize position-critical features while deemphasizing secondary features, such as velocity (v(t)) or angular velocity (w(t)). The updated sparsity metric is defined as.\n$$M_{pos}(q_i, K) = M(q_i, K) + \\lambda_1 e_x(t)^T W e_x(t)$$\nwhere M(qi, K) is the original sparsity metric for attention weights. ex(t) = p(t) \u2212p(t) is the state estimation error for the tooltip position. \u03bb\u2081 is a scaling factor that prioritizes position estimation error. W is the weighting matrix to emphasize certain components of x, y, z. This modification ensures that the attention mechanism emphasizes features that reduce the position estimation error directly. The original ProbSparse attention mechanism has a complexity of O(Llog L), where L is the sequence length. The modification to the sparsity metric adds the position-related term ex(t)TWex(t), which involves a matrix-vector multiplication. Since this operation has constant time complexity concerning L, the overall complexity of the attention mechanism remains unchanged at O(Llog L). This ensures that the attention mechanism remains efficient while prioritizing position-critical features.\nc) Encoder-Guided Constraint Adherence: The encoder processes input sequences, including corrupted or incomplete position data \u00ee\u00ee(t) arising from packet loss modeled by a 4-state HMM. To ensure that the latent representations align"}, {"title": "VI. EXPERIMENTAL SETUP & RESULTS", "content": "A. Dataset\nThe JIGSAWS dataset [10] is a publicly available re-source containing data from surgical tasks performed using the da Vinci robotic surgical system. This dataset includes synchronized kinematic data, video recordings, and gesture annotations. It was collected during three core surgical tasks, such as knot-tying, suturing, and needle-passing, performed on a bench-top model by eight surgeons with varying skill levels categorized as expert, intermediate, and novice. For this study, 39 trials of the knot-tying task were selected for evaluation. The kinematic data in the JIGSAWS dataset provides Cartesian positions (p \u2208 R\u00b3), rotation matrices (R \u2208 R3\u00d73), linear velocities (v \u2208 R\u00b3), rotational velocities (w \u2208 R\u00b3), and grasper angles (0) for both the left and right tools. These features correspond to the PSM and SSM, resulting in 76 attributes sampled at 30 Hz.\nB. Simulation Setup\nWe conducted the simulations on a system equipped with an Intel Core i7 processor, 32GB of RAM, running Linux OS, and using Python with PyTorch as the primary framework. The experiments were carried out in Jupyter Notebook, which was used for coding and execution. Data preprocessing, model training, and evaluations were performed entirely within this environment. Packet loss patterns were programmatically gen-erated to simulate realistic network conditions, mimicking real Tactile Internet scenarios.\nC. Results and Discussion\n1) Impact of Packet Loss on Position Estimation: The Fig. 3 part 1, illustrates the packet loss pattern over 1000 time steps. The red spikes indicate the moments when packets were lost (with a value of 1) and successfully received (value of 0). This pattern highlights packet loss's irregular and bursty nature, effectively simulating real-world network conditions.\nFigure 3, parts 2\u20134, depict the original and corrupted posi-tions of the robotic arm's tool tip along the X, Y, and Z axes under simulated packet loss conditions. The solid blue line represents the ground truth position, while the red dashed line illustrates the corrupted position data resulting from packet loss. The gray areas indicate the time intervals during which packet loss occurs.\n2) Performance of the Model under Packet Loss: Fig. 4 shows how the Informer model predicts the robotic arm's tool tip position along all axes in bursty packet loss. Each plot compares the ground truth and the estimated position for 200 test time steps.\n\u2022 The X position prediction accuracy is 96.68%. The model achieves high accuracy in predicting the X-axis position. The predicted position closely follows the actual posi-tion, with very few deviations, indicating that the model handles packet loss well for this axis.\n\u2022 Y position prediction accuracy is 95.96%. Similarly, the model performs effectively in predicting the Y-axis posi-tion. The predicted values align almost perfectly with the actual values, except for minor deviations during sharp transitions, demonstrating the robustness of the model.\n\u2022 Z position prediction accuracy is 90.37%. The Z-axis shows a slightly lower accuracy than the X and Y axes, with some noticeable deviations during time steps where the actual position exhibits rapid changes. However, the overall prediction still captures the trend of position movements, showing that the model can still predict reasonably well in challenging packet loss scenarios.\nIn Table II, the Informer model's performance was evalu-ated under varying network conditions, including different burst densities, gap densities, burst lengths, and gap lengths. For comparison, we have evaluated the Informer framework alongside other deep learning models using the same data subset, with the results summarized in Table 1. The Informer model outperforms TCN, RNN, and LSTM in predicting tool tip positions under packet loss scenarios. Its ProbSparse attention mechanism reduces the computational complexity from O(L2) in traditional self-attention to O(Llog L). TCN, with a complexity of O(Lk) (where k is the filter size), struggles with fixed receptive fields, making it less effective in burst error scenarios. RNNs, with a complexity of O(L\u00b7d\u00b2), are hindered by vanishing gradients, which limit their ability to capture temporal correlations. LSTMs address this issue with gating mechanisms but have the same complexity O(L\u00b7d\u00b2) and higher computational costs due to sequential processing. These characteristics make the Informer the most effective model for this task."}, {"title": "VII. CONCLUSION", "content": "This paper presented a predictive approach using the Transformer-based Informer model to enhance position esti-mation accuracy in remote robotic surgery. A 4-state HMM was employed to simulate realistic packet loss scenarios, addressing both burst and random loss conditions. The In-former model effectively mitigated network-induced uncer-tainties, such as jitter and delay, ensuring accurate real-time predictions. Experimental results demonstrated a prediction accuracy exceeding 90% under diverse network conditions, outperforming traditional models like LSTM and RNN. The integration of constraints such as energy efficiency, smooth-ness, and robustness further validated the model's suitability for Tactile Internet-enabled surgical applications.\nFuture work will focus on several key areas. First, the framework can be extended to incorporate multi-objective optimization, balancing position estimation accuracy, latency reduction, and surgical task precision. Second, adaptive mech-anisms will be explored to dynamically address varying net-work conditions, including fluctuating levels of jitter, delay, and packet loss. Lastly, the model's generalizability will be evaluated through cross-domain validation on diverse surgical datasets and tasks beyond knot-tying, ensuring its applicability to a broader range of robotic-assisted medical procedures."}]}