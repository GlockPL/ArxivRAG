{"title": "D-Wave's Nonlinear-Program Hybrid Solver: Description and Performance Analysis", "authors": ["ENEKO OSABA", "PABLO MIRANDA-RODRIGUEZ"], "abstract": "The development of advanced quantum-classical algorithms is among the most prominent strategies in quantum computing. Numerous hybrid solvers have been introduced recently. Many of these methods are created ad hoc to address specific use cases. However, several well-established schemes are frequently utilized to address optimization problems. In this context, D-Wave launched the Hybrid Solver Service in 2020, offering a portfolio of methods designed to accelerate time-to-solution for users aiming to optimize performance and operational processes. Recently, a new technique has been added to this portfolio: the Nonlinear-Program Hybrid Solver. This paper describes this solver and evaluates its performance through a benchmark of 45 instances across three combinatorial optimization problems: the Traveling Salesman Problem, the Knapsack Problem, and the Maximum Cut Problem. To facilitate the use of this relatively unexplored solver, we provide details of the implementation used to solve these three optimization problems.", "sections": [{"title": "I. INTRODUCTION", "content": "The emergence of quantum technology is expected to have a significant impact on a number of industries. The field of Quantum Computing (QC), which leverages the principles of quantum mechanics to process information, is constantly making advances to connect quantum processing with practical use cases. Thus, QC has advanced significantly in recent years, mainly due to the rapid development of technology and advancements in the democratization of its access [1]. As a result, QC has facilitated the development of various proofs of concept across multiple sectors, including finance [2], energy [3], and logistics [4].\nCurrently, there are two types of real quantum devices that we can differentiate between: gate-based quantum computers and quantum annealers. A gate-based system, on the one hand, employs basic quantum circuit operations on qubits, which are akin to the classical operations on regular bits and may be combined in any order to create algorithms. Initially, these quantum computers were created to replicate quantum physics. Later, the idea was expanded to encompass the entire processing capacity of a Turing machine. This version is often referred to as a universal quantum computer. On the other hand, a quantum annealer applies a problem-specific magnetic field after bringing a group of qubits into equal superposition. Under this magnetic field, the qubits interact and move toward the lowest-energy state, which represents the solution to an optimization problem. As a result, quantum annealers, which are specialized rather than universal systems, utilize quantum- mechanical probabilities to solve optimization problems [5].\nHowever, despite all the progress made in the field, quantum computers are still in their infancy in contrast to classical computers, which have been developed for decades and are therefore highly advanced. Thus, quantum devices are cur- rently unable to efficiently solve real-world problems mainly because of the small number of qubits and their unstable nature, which results in errors, noise, and information loss. At this time, the number of qubits for both universal quantum computers and quantum annealers is around three orders of magnitude (thousands of qubits) [6], [7]. However, this number needs to be much greater in order for the technology to become truly useful for real industrial use cases. In any case, there are factors other than the qubit count that influence the practical capabilities of quantum computers, such as the topology layout of the qubits or the operation parallelism.\nAs a result of this situation, recent advancements have emerged during the noisy intermediate-scale quantum (NISQ, [8]) era, a period characterized by quantum computers' limita- tions in efficiently handling problems, even those of small to medium size. As it turns out, both universal quantum devices and annealers suffer from these limitations."}, {"title": "", "content": "As a consequence, the entire community is striving to come up with mechanisms to deal with the present limitations and capitalize on the promise that QC has to offer. The design of advanced hybrid algorithms, which combine the advantages of both computing paradigms, are among the most popular strategies [9]. Arguably, hybrid quantum computing represents the immediate future of this area. This is so because the adoption of quantum techniques to address real-world use cases is heavily reliant on hardware capabilities. In this regard, just as QC should not be thought of as a direct replacement for conventional computing, it would also be a mistake to view quantum-classical hybrid computing as merely a tem- porary fix to minimize the limitations of NISQ-era systems. As stated in works such as [10], hybrid algorithms will be influential well beyond the NISQ-era and even into full fault tolerance, with quantum computers enhancing the capabilities of already powerful classical processors by carrying out certain specialized tasks. The challenge here is in determining how to integrate classical and quantum computing to create a synergy that surpasses the performance of purely classical approaches.\nIn any case, it is crucial to note that the design and imple- mentation of quantum algorithms could necessitate a high degree of subject matter expertise. This intricacy could be a hindrance for researchers who lack a sufficient background in disciplines like physics or quantum mechanics. In order to remove that barrier and make QC more accessible, various frameworks and programming languages are proposed, such as Silq [11], Eclipse Qrisp [12], or Qiskit [13]. The availability of such frameworks and languages helps to foster the building of a multidisciplinary community focused on QC and helps the field to progress toward new horizons [14].\nAs part of the strategy to bring QC to a wider audience, the Canadian company D-Wave Systems, a leading supplier of quantum annealers, published D-Wave-Hybrid-Framework in 2018, which, in the words of its creators, is \u201ca general, minimal Python framework to build hybrid asynchronous de- composition samplers for QUBO problems"}, {"title": "II. NONLINEAR-PROGRAM HYBRID SOLVER", "content": "We divide this section on the NL-Hybrid into two parts. First, in Section II-A, we give an overview of the method. Then, in Section II-B, we take a look at its structure and workflow."}, {"title": "A. OVERVIEW OF NL-HYBRID", "content": "In recent years, the community has proposed a plethora of hybrid solvers. Many of these techniques are ad hoc imple- mentations to tackle specific problems. Usually, researchers consider a number of factors when designing their hybrid solvers, such as i) the specifics of the problem to be solved; ii) the limitations and characteristics of the quantum device to be used; and/or iii) the knowledge and intuition of the developer. In many cases, the researcher's knowledge in fields such as artificial intelligence or optimization is crucial [45]."}, {"title": "", "content": "However, there are some perfectly identifiable methods that the community has routinely used, such as the Quantum Approximate Optimization Algorithm (QAOA, [46]), the Variational Quantum Eigensolver (VQE, [47]), or QBSolv [48]. Another interesting and recognizable scheme is Kerberos [49], which is a concretization of the above-described D-Wave Hybrid Framework. More specifically, Kerberos is a reference hybrid workflow comprised of three methods iteratively run- ning in parallel: two classical methods, Simulated Annealing and Tabu Search, and a quantum one that uses the Quantum Processing Unit of D-Wave.\nAs mentioned beforehand, D-Wave's main motivation for creating HSS is to introduce a portfolio of hybrid techniques that lighten the method-implementation phase. In this way, HSS is made up of a set of four ready-to-use methods that target different categories of input and use cases. The last of the methods included in HSS is the NL-Hybrid, which is the one we will focus on in this article and which represents a breakthrough in the implementation of hybrid algorithms.\nFirstly, NL-Hybrid stands out because it allows for the definition of variables in more advanced formats than those considered in the methods previously included in HSS. More specifically, NL-Hybrid excels with decision variables that embody common logic, such as ordering permutations or subsets of options. For instance, in routing problems like the TSP, a permutation of variables indicates the sequence in which nodes are visited. Similarly, in the KP, the variables representing items to be stored can be categorized into two distinct groups: packed and unpacked.\nIn this way, in addition to allowing variables defined as binary and integer values, NL-Hybrid permits the definition of the following types of decision variables:\nlist (number_variables): The solver can use a list as the decision variable to optimize, this being an ordered permutation of size number_variables describing a possible itinerary.\nset(number_variables): The decision variable can be a set, being this a subset of an array of size number_variables, representing possible items in- cluded in a knapsack.\ndisjoint_list(n_variables,n_lists):The solver can employ a disjoint_list as the decision variable, which divides a set of n_variables into n_lists disjoint ordered partitions, each representing a permutation of variables. This encoding is appropriate for complex logistic problems such as the Vehicle Routing Problem. There is a variant of this variable, called disjoint_bit_sets, where the order of the produced partitions is not semantically meaningful.\nIt is worth mentioning at this point that in the field of opti- mization, whether by means of classical or quantum systems, the performance of a solver is closely tied to the size of the so- lution space of the problem at hand. Generally, algorithms per- form better in smaller solution spaces. Therefore, employing decision variables that act as implicit constraints is an effective way to reduce the solution space and the complexity of the problem. For instance, using list(number_variables) to represent a TSP implicitly ensures that no nodes are visited more than once along the route. For this reason, the use of the aforementioned decision variables is a significant advantage for NL-Hybrid.\nFinally, NL-Hybrid permits linear, quadratic, inequal- ity, and equality constraints, expressed even arithmetically. This aspect represents a significant contribution compared to other well-established hybrid solvers (with the exception of CQM-Hybrid, which also includes this feature).\nTo conclude this section, it is important to note that the ex- istence of NL-Hybrid does not imply the complete depreca- tion of previously existing methods in HSS. Depending on the characteristics of the problem and the decision variables used, NL-Hybrid may not always be the most efficient algorithm. As will be demonstrated in later sections, CQM-Hybrid or BQM-Hybrid might be more suitable for problems primarily composed of binary variables."}, {"title": "B. STRUCTURE AND WORKFLOW OF NL-HYBRID", "content": "Being part of HSS, NL-Hybrid has the same structure as the other methods within the portfolio. This structure, which is depicted in Figure 1, is divided into three distinct phases:\n1) First, the NL formulation of the problem is introduced as input into a classical front end. In this preliminary phase, the solver creates a predetermined number of equally structured branches.\n2) Secondly, each created thread is executed in parallel on a set of Amazon Web Services (AWS) CPUs and/or GPUs. Each branch is composed of a Classical Heuristic Module (CM) and a Quantum Module (QM). The CM is in charge of exploring the problem-solution space using traditional heuristics. During this exploration, the CM formulates different quantum queries, which are exe- cuted by the QM, and which are partial representations of the problem that are accommodated to the QPU ca- pacity. The solutions provided by the QPU are employed to guide the CM toward promising areas of the solution search space. Furthermore, QM can even improve the solutions found by the CM. NL-Hybrid resorts to the latest D-Wave quantum device to execute the quantum queries. At the time of this writing, the system used was the Advantage_system6.4, which is made up of 5616 qubits organized in a Pegasus topology.\n3) Finally, after a predefined time limit T, all generated branches stop their execution and return their solution to the front end. Then, NL-Hybrid forwards the best solution found among all the threads. It should be noted that CM and QM communicate asynchronously, ensuring that latency in a particular branch does not hinder the overall progress of the NL-Hybrid solver.\nSome of the benefits of using NL-Hybrid over ad hoc generated methods or other widely recognized solvers are:\nNL-Hybrid is built to manage low-level operational specifics, eliminating the need for users to have any expertise in properly parameterizing the QPU."}, {"title": "", "content": "NL-Hybrid accepts inputs that are much larger than those of other solvers focused on solving problems in QUBO format and even larger than those of the rest of the solvers within HSS. NL-Hybrid is intended to take advantage of the QPU's capability to quickly find promising solutions, expanding this property to a wider range of input types and sizes than would otherwise be feasible.\nNL-Hybrid provides a user-friendly use of quantum resources, allowing the user to model a problem in an intuitive way. This is an advantage in comparison to QUBO, which is the native formulation for QPUs, mainly because translating a problem to this binary formulation is often a challenging task [50]. In fact, inefficient translation can critically affect the performance of the solver."}, {"title": "III. IMPLEMENTATION DETAILS", "content": "The experiments conducted in this study focus on three combinatorial optimization problems: TSP, KP, and MCP. Due to its incipient nature, there is little information regarding NL-Hybrid. Given this lack of documentation, we provide several key implementation details on how to tackle the above- mentioned problems by means of NL-Hybrid. This allows the reader to understand how intuitive the problem design is.\nIt should be noted that, while the implementation of MCP was done from scratch, those for TSP and KP are slight adaptations of the open-source code published by D-Wave.\nFirst, in order for the problem to be solved by NL-Hybrid, it must be defined using a special entity dedicated for this purpose, called Model. Once this model is initialized, the definition of a problem includes the following four steps:\nDefining the decision variables.\nEntering the information necessary to describe the prob- lem as constants (if needed).\nDefining the problem constraints (if any).\nFormulating the objective function.\nThe rest of the section is divided into four subsections. The first three are devoted to each of the problems to be addressed, while the last is devoted to the execution of the NL-Hybrid."}, {"title": "A. TRAVELING SALESMAN PROBLEM", "content": "The TSP is a classical routing problem that can be represented as a complete graph G = (V, A) of size N, where V illustrates the set of nodes and A the set of edges linking every pair of nodes in V. Furthermore, a matrix C of size NxN contains the costs $c_{ij}$ associated with traveling from node i to node j.\nThe TSP is a problem that is particularly suitable for being solved by NL-Hybrid, since the decision variables can be defined using the above-described list(number_variables) type. Thus, list (N) rep- resents an ordered permutation of the nodes in V. It is worth noting at this point that, thanks to permutation-based coding, it is not necessary to add any constraints to the model, such as those required when the TSP is defined using the QUBO or CQM formulations. This is undoubtedly an advantage for the NL-Hybrid.\nIn the following Python code snippet, we show how to initialize the model and the decision variables. We also show how to introduce the information needed to describe the problem."}, {"title": "", "content": "Regarding the objective function, it can be mathematically formulated as follows:\n$obj = min \\sum_{i=1}^{N-1} costmatrix[route_i, route_{i+1}] + costmatrix[route_N, route_1]}$"}, {"title": "B. KNAPSACK PROBLEM", "content": "In summary, KP consists of a set I of N items, describing each one by its weight (wi) and its profit (vi), which must be packed into a knapsack with a maximum capacity C. The objective is to choose a subset of items to be stored that maximizes the profit obtained and does not exceed C.\nLike the TSP, the KP is a problem that benefits from the features of NL-Hybrid, since we can use the set(number_variables) type to define the decision variables of the problem. Thus, set (N) represents a subset of"}, {"title": "", "content": "Furthermore, the objective function can be mathematically formulated as:\n$obj = min \\sum_{i=1}^{M} values_{items_i}$"}, {"title": "C. MAXIMUM CUT PROBLEM", "content": "Taking into account a directed graph G made up of N nodes and a weight matrix W of size NxN, the objective of the MCP is to divide N into two subsets such that the sum of the weights of the cut edges is maximum.\nIn order to formulate the MCP to be solved by NL-Hybrid, the set X = x1,...,x of binary decision variables has been defined, where xi is 0 if node i is part of the first subset and 1 otherwise.\nWe show the initialization process of the model in the following Python code snippet."}, {"title": "", "content": "Furthermore, the objective function can be mathematically formulated as:\n$obj = min \\sum_{i=1}^N \\sum_{j=1}^N |nodes_i - nodes_j| * weights_{i,j}$"}, {"title": "D. EXECUTING THE PROBLEM", "content": "Once the problem has been modeled following the steps described above, it is ready to be submitted to NL-Hybrid. This process is carried out in the same way as the rest of the HSS portfolio, as can be seen in the following snippet."}, {"title": "IV. EXPERIMENTATION AND RESULTS", "content": "The main elements of the experiments carried out are described in this section. First, we detail the characteristics of the benchmark used in Section IV-A. Then, in Section IV-B, we describe the design choices adopted. Lastly, we show and analyze the results obtained in Section IV-C."}, {"title": "A. BENCHMARK DESCRIPTION", "content": "As mentioned, a benchmark composed of 45 instances has been used, equally distributed over three combinatorial optimization problems:\nTSP, for which instances of sizes between 7 and 107 nodes have been used. Instances with a size equal to or less than 25 nodes have been obtained from the QC- oriented benchmark QOPTLib [51], while the rest have been obtained from the well-known TSPLib [52].\nKP, for which each case is named sX_Y, where X is the number of items and Y is a suffix to distinguish the set of instances with the same X. All instances have been obtained from the KPLib benchmark, described in [53].\nMCP, for which each instance is coined MC_X, with X being the number of nodes that define the graph. Ten of the instances have been obtained from the QOPTLib mentioned above, while graphs of sizes 80, 90, 120, 140, and 170 have been generated ad hoc for this study."}, {"title": "B. EXPERIMENTAL SETTING", "content": "Using the benchmark described above, the main objective is to analyze the performance of the NL-Hybrid, and to compare the results obtained by this method with those obtained by three D-Wave-based counterparts: the full-quantum QPU, BQM-Hybrid and CQM-Hybrid. Our main motivation for choosing these counterparts is to measure the main contri- bution that NL-Hybrid provides in relation to previously available methods.\nRegarding parameterization, the default values have been used for all the solvers for the sake of fairness. For hybrid solver versions, v2.2, v1.12, and v1.1 have been used for"}, {"title": "C. RESULTS", "content": "In order to obtain representative results, all the outcomes pre- sented in this section have been obtained after 10 independent runs per method and instance. Regarding TSP, we show in Figure 2 the average of the best solution reached by each solver. It should be noted that the metric used to represent the quality of the solutions is the approximation ratio. This metric has been calculated taking as reference the known optimal solution, which have been obtained from [51] and [52].\nIn addition to the best solution found, each solver provides a set of solutions called sample-set for each execution. It is possible that there are repeated solutions in this sample-set. For this reason, the reliability of a method can be measured by analyzing the entire sample-set, with it being preferable that the quality of the solution set approaches the optimal solution to the problem. Thus, to represent the robustness of each method, the averages of the complete sample-sets obtained by each technique are presented in Figure 3.\nA simple glance at both figures is enough to detect the superiority of the NL-Hybrid solver over its competitors. To verify this improvement, two statistical tests have been performed with the results shown in Figure 2 and Figure 3.\nFirst, we applied Friedman's nonparametric test to deter- mine if there are significant differences among NL-Hybrid, CQM-Hybrid, and BQM-Hybrid. It should be noted that QPU has been left out of all these tests as it does not provide outcomes for all datasets. The results of this test are presented in Table 3. More specifically, on the left-hand side of the table, we show the results referring to the best results obtained, while on the right-hand side, we show those concerning the complete sample-set mean.\nThe Friedman statistics obtained in these tests are 26.53 and 28.13. With a 99% confidence interval, the critical value in a x\u00b2 distribution with 2 degrees of freedom is 9.21. Since both statistics are greater than this critical value, we can conclude that there are significant differences among the results, with NL-Hybrid having the lowest rank.\nFollowing the results described above, we conducted Holm's post-hoc test to evaluate the statistical significance of NL-Hybrid's superior performance. The adjusted p-values from Holm's post-hoc procedure are presented in Table 4. Upon analyzing these results, and considering that all p-values are below 0.05, we can confidently conclude that NL-Hybrid significantly outperforms BQM-Hybrid and CQM-Hybrid with 95% confidence.\nFinally, as can be seen in Figure 2, the performance of NL-Hybrid in all the datasets considered is almost per- fect. For this reason, and to get a glimpse of the limits of NL-Hybrid's performance, we have conducted additional experiments with TSPLib instances composed of between 100 and 783 nodes. We show the average of the best results and the average of the complete sample-sets in Figure 4, where it can be seen how NL-Hybrid obtains remarkable results (above 0.8 with respect to the optimum) in instances of up to 439 nodes. This performance is a substantial improvement over other hybrid methods in the literature.\nSimilar conclusions can be drawn if we focus our attention on the tests carried out with the KP. For the KP, we show in Figure 5 and Figure 6 the results obtained in terms of the best solution found per run and the average of the entire sample- sets, respectively. In this case, the optimal values used as the baseline have been obtained by solving each instance through Google OR-Tools. As mentioned, NL-Hybrid proves to be superior to its competitors also for the KP. The outcomes obtained after the execution of both Friedman's and Holm's post hoc tests are depicted in Table 5 and Table 6, respectively. On the one hand, the Friedman statistics obtained are 26.53 and 30. Given that both statistics exceed the critical value, we can infer that there are significant differences between the results, with NL-Hybrid achieving the lowest rank. On the other hand, because all p-values are below 0.05, we can conclude that Holm's post-hoc test supports the conclusion that NL-Hybrid is significantly better than CQM-Hybrid and BQM-Hybrid with 95% confidence."}, {"title": "", "content": "Finally, Figures 7 and 8 present the results for MCP, where the conclusions differ significantly from the previous ones. A glance at the results shows that NL-Hybrid only outperforms the QPU, offering considerably lower performance compared to BQM-Hybrid and CQM-Hybrid, both of which demon- strate outstanding suitability for this problem. To assess if the differences between NL-Hybrid and the other algorithms are statistically significant, we used the Wilcoxon rank-sum test. The results are included in Table IV-C. Each cell displays the two metrics considered (best solution found and average of the sample set) using one of the following symbols: \" indicates that NL-Hybrid has produced better results than the algorithm in the column with 99% confidence, and \u201c\u2207\u201d denotes that the algorithm in the column is statistically superior to NL-Hybrid.\"\nThus, as can be observed in Table IV-C, NL-Hybrid significantly outperforms QPU in both metrics, but the superi- ority of BQM-Hybrid and CQM-Hybrid is also statistically significant for both metrics. However, this performance does not detract an iota of value from NL-Hybrid. Although these results seem counterintuitive compared to those of TSP and KP, they are consistent with what was expressed in Section II-A. That is, depending on the type of problem and the coding of its decision variables, NL-Hybrid may not always be the most suitable algorithm. Specifically, as shown through this experimentation and supported by D-Wave [55], for problems primarily involving binary variables or integers with low ranges, CQM-Hybrid or BQM-Hybrid are more appropriate. This situation opens up a wide range of future work to be carried out around the NL-Solver and its applicability to industrial problems, which we detail in the following section."}, {"title": "V. CONCLUSIONS AND FURTHER WORK", "content": "This paper focuses on the recently introduced NL-Hybrid solver, evaluating its performance through a benchmark of 45 instances across three combinatorial optimization problems. The results have been compared with three different coun- terparts. Additionally, to facilitate the use of this relatively unexplored solver, we have provided detailed implementa- tion guidelines for solving the three optimization problems considered.\nTwo main conclusions can be drawn from the experimenta-"}, {"title": "", "content": "tion carried out. On the one hand, the NL-Hybrid has demon- strated excellent performance compared to its competitors for those problems where the new decision variables could be used. NL-Hybrid proves to be a high-quality alternative for this type of problem, solving large instances with remarkable efficiency and obtaining solutions close to the optimum.\nOn the other hand, the NL-Hybrid has shown inferior performance compared to other hybrid alternatives in the MCP, where the decision variables used were of the binary type. This situation is in line with what was previously stated by D-Wave in [55]. In summary, it is a mistake to consider NL-Hybrid as a general-purpose solver, as the goal behind its implementation is not to replace the existing algorithms in HSS, but to complement them. In this way, NL-Hybrid is specifically designed to solve those problems that can take advantage of the new types of decision variables.\nFurthermore, an important factor to consider when evaluat- ing NL-Hybrid is its ease of use. As shown in Section III, the way variables, constraints, and the objective function are defined is very intuitive. This is not a trivial matter, as it helps to bring and expand the use of quantum computing to a larger group of researchers who may not be familiar with complex quantum concepts.\nFinally, the findings reported in this work have allowed us to identify a set of inspiring opportunities, which pave the way for several future research directions. These are some of the most interesting challenges to pursue:\nAnalyze the performance of NL-Hybrid against other well-known optimization problems, such as Bin Packing, or the Job-shop Scheduling Problem. For this, it will be necessary to work on adapting the formulation of these problems to the new types of decision variables.\nStudy the performance of NL-Hybrid compared to other commercial hybrid methods.\nConsidering the NL-Hybrid's ability to handle com- plex constraints, efforts will be made to solve problems composed of multiple constraints. The Rich-Vehicle Routing Problem or the Three-Dimensional Bin Packing Problem are suitable cases to advance in this line.\nExplore alternative problem formulations to improve the performance of the NL-Hybrid. An example of this line of research is the Maximum Cut problem, where a formulation that allows the use of the new types of decision variables will be studied."}]}