{"title": "Toward a Cohesive Al and Simulation Software Ecosystem for Scientific Innovation\u00b9", "authors": ["Michael A. Heroux", "Sameer Shende", "Lois Curfman McInnes", "Todd Gamblin", "James M. Willenbring"], "abstract": "In this document, we outline key considerations for the next-generation software stack that will support scientific applications integrating Al and modeling & simulation (ModSim) to provide a unified Al/ModSim software stack.", "sections": [{"title": "Key Points:", "content": "1. The scientific computing community needs a cohesive Al/ModSim software stack.\n2. This stack must ensure version compatibility across a diverse collection of community software on diverse computing systems and be updated regularly to support new libraries and tools and new versions of existing products.\n3. This Al/ModSim stack must support binary distributions to enable emerging scientific workflows.\n4. Investment in a unified Al/ModSim community stack that complements computer system stacks is essential."}, {"title": "A Cohesive Software Stack for Al and Modeling & Simulation", "content": "To address future scientific challenges, the next-generation scientific software stack must provide a cohesive portfolio of libraries and tools that facilitate Al and ModSim approaches. As scientific research becomes increasingly interdisciplinary, scientists require both of these toolsets to address complex, data-rich problems in problem domains such as climate modeling, material discovery, and energy optimization. A unified software ecosystem integrating established Al frameworks and emerging scientific Al frameworks alongside established ModSim libraries is crucial for solving these next-generation scientific challenges effectively."}, {"title": "Leveraging Current Efforts: DOE Office of Science Efforts in Software Stewardship", "content": "The DOE Office of Science has sponsored significant software stewardship and advancement efforts, especially in the post-Exascale Computing Project (ECP) era, to provide long-term support for libraries and tools used by the DOE community. These efforts include funding for math, data and visualization, performance analysis, and programming systems libraries and tools, as well as for curating a portable, reliable, and performant version-compatible portfolio of these libraries and tools and their dependencies. While the current DOE-supported stack includes many Al libraries and tools that our scientific community needs, installing the comprehensive Al stack is challenging and labor-intensive, especially on high-performance computing (HPC) systems. The PESO Project, led by the authors of this document, is one of the projects involved in post-ECP efforts, sponsoring efforts to expand the use of Spack in open- science codes and to curate and deliver E4S, the software stack created by ECP."}, {"title": "Version Management and Compatibility Challenges", "content": "One critical challenge in developing such a cohesive stack is version management and compatibility across different tools and libraries. Both the Al and MS communities face significant challenges in this area, but they have taken distinct approaches to managing versions and software upgrades. In the Al community, package managers like Pip and Conda are widely used to simplify installation for individual users. While these tools are effective for deploying Al libraries quickly, they often do not adequately address broader compatibility issues, which makes integration with ModSim tools difficult. This gap results in challenges when scientists need to integrate numerous Al libraries and ensure consistent behavior across diverse computing environments. To enable smooth integration, we need a comprehensive and cohesive portfolio that includes both Al and ModSim components."}, {"title": "Building Software from Source vs. Prebuilt Binaries", "content": "On the other hand, the ModSim community has leaned toward building software from source, which has traditionally provided more flexibility for configuring and optimizing for performance. However, as the need for more productive scientific computing environments grows, the demand for ease of deployment has grown. This community also increasingly requires prebuilt binaries of core libraries and tools, leading to similar challenges faced by the Al community. Tools like CMake are often used to manage builds, and Spack has become an essential tool for managing dependencies and configurations"}, {"title": "User Interaction with Computing Resources", "content": "Another distinction between Al and ModSim approaches is how users interact with their computing resources. The Al community is based heavily in the Python ecosystem. PyTorch, TensorFlow, JAX, and related tools expose powerful Python front-ends to users, and users may drive computation from Jupyter notebooks, or from orchestration tools like Kubernetes, KubeFlow, or Argo. Traditional high-performance ModSim relies primarily on batch schedulers (e.g., SLURM or Flux) that do not have good support for persistent services, databases, or interactive web applications used throughout the Al community. Al models themselves require versioning, regular updates, and bugfixes, and Al inference is typically deployed as a persistent service. These processes are referred to in industry as \"MLops\". A modern Al for science software environment that combines Al and ModSim to solve complicated scientific problems. ModSim needs to support both cloud-like persistent services (orchestration tools, notebooks, databases, etc.) and a traditional batch environment."}, {"title": "Developing a Consistent and Evolving Software Stack", "content": "Providing a consistent and up to date software stack that incorporates Al and ModSim software libraries and tools will require significant effort in identifying the core requirements, converting those requirements to specifications and design, and producing a cohesive software stack that is easily used in a portable way and available with significant updates on a regular schedule that users can count on. While present Al users are typically using industry-provided capabilities that target a broad spectrum of domains, we anticipate the creation and wide use of Al libraries and tools specifically trained for scientific problems. These libraries and tools must be curated and provided to the scientific community, especially on DOE leadership computing platforms."}, {"title": "Need for a Portable and Cohesive Library and Tool Ecosystem", "content": "Traditionally, computing system vendors have provided these kinds of libraries. However, insufficient effort has been applied to making a portable and cohesive library and tool ecosystem that users can rely on, independent of which vendor's platform they are running on. The Exascale Computing Project made progress in providing a portable, high- performance software stack that provides libraries and tools for established ModSim applications for users on major HPC platforms. The same basic approach needs to be"}, {"title": "A Unified Framework for Al and ModSim Software", "content": "The complexities of managing Al and ModSim software products go beyond supporting individual libraries and tools products and highlight the need for DOE to support efforts that bring Al and ModSim libraries and tools into a integrated stack. This approach is particularly important when ensuring compatibility across different versions of programming systems (for example, different Python and C++ standards), hardware platforms, and performance requirements. This integrated approach would allow scientists to seamlessly combine Al and ModSim capabilities, leveraging the strengths of both to address next-generation scientific problems more effectively."}, {"title": "Role of Continuous Integration", "content": "To build a portable, integrated software stack for Al and ModSim, the task of updating and integrating the software stack cannot be manual. Continuous Integration has become a critical part of modern software development, but DOE platforms are bespoke and sit behind significant security barriers for open-source developers. In particular, key open- source projects cannot currently test and rapidly ensure that the latest versions of their fast-moving software runs on platforms of interest to DOE. This is a chicken/egg problem- adoption for new GPUs in the cloud hinges on useful software being available for those GPUs, and vendors can only do so much to enable and test this. If the DOE intends to build a portable, integrated Al/ModSim platform, it must enable key open-source projects to build and test on hardware architectures of interest. Otherwise, our ecosystem will lag behind the fast-moving Al ecosystem in industry. ECP developed tools to enable CI at HPC centers, but there is still work to do to ensure that these tools can be run securely and reliably to support a portable ecosystem for our community."}, {"title": "Conclusion and Recommendations", "content": "By supporting a cohesive, integrated portfolio of Al/ModSim scientific tools and libraries, DOE can facilitate more rapid development, greater collaboration across domains, and efficient scaling of Al/ModSim techniques to new scientific discoveries. We believe continued investments in community-driven ecosystems like the Extreme-scale Scientific Software Stack (E4S) and Spack can bridge the Al and ModSim communities by providing"}]}