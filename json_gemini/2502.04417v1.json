{"title": "NeuralMOVES: A lightweight and microscopic vehicle\nemission estimation model based on reverse engineering and\nsurrogate learning", "authors": ["Edgar Ramirez-Sanchez", "Catherine Tang", "Yaosheng Xu", "Nrithya Renganathan", "Vindula Jayawardana", "Zhengbing He", "Cathy Wu"], "abstract": "The transportation sector significantly contributes to greenhouse gas\nemissions, necessitating accurate emission models to guide mitigation\nstrategies. Despite its field validation and certification, the industry-\nstandard Motor Vehicle Emission Simulator (MOVES) faces chal-\nlenges related to complexity in usage, high computational demands,\nand its unsuitability for microscopic real-time applications. To ad-\ndress these limitations, we present NeuralMOVES, a comprehensive\nsuite of high-performance, lightweight surrogate models for vehicle\nCO2 emissions. Developed based on reverse engineering and Neu-\nral Networks, NeuralMOVES achieves a remarkable 6.013% Mean\nAverage Percentage Error relative to MOVES across extensive tests\nspanning over two million scenarios with diverse trajectories and the\nfactors regarding environments and vehicles. NeuralMOVES is only\n2.4 MB, largely condensing the original MOVES and the reverse en-\ngineered MOVES into a compact representation, while maintaining\nhigh accuracy. Therefore, NeuralMOVES significantly enhances ac-\ncessibility while maintaining the accuracy of MOVES, simplifying\nCO2 evaluation for transportation analyses and enabling real-time, mi-\ncroscopic applications across diverse scenarios without reliance on\ncomplex software or extensive computational resources. Moreover,\nthis paper provides, for the first time, a framework for reverse engi-\nneering industrial-grade software tailored specifically to transportation\nscenarios, going beyond MOVES. The surrogate models are available\nat https://github.com/edgar-rs/neuralMOVES.", "sections": [{"title": "Introduction", "content": "The transportation sector is one of the largest contributors to greenhouse gas (GHG) emissions worldwide,\napproximately accounting for one fourth of total CO2 emissions (Environmental Protection Agency, 2023).\nThis significant contribution makes it a critical sector for climate change mitigation, as reducing emissions\nfrom transportation is essential for achieving global climate goals. The sector's transformation through\nelectrification, automation, and intelligent infrastructure offers promising avenues for substantial emissions\nreductions (Sciarretta et al., 2020; International Energy Agency, 2023; McKinsey Center for Future Mobility,\n2023). However, the success of these innovations is critically dependent on the availability of suitable and\naccurate emission estimation models to guide the design and deployment of new technologies.\nMotor Vehicle Emission Simulation (MOVES) (U.S. Environmental Protection Agency, 2022), one of\nthe most well-established emission estimation models, serves as the official and state-of-the-art emission\nestimation model in the U.S., provided, enforced, and maintained by the U.S. Environmental Protection\nAgency (EPA). Despite its technical certification, MOVES' processing and software is tailored for two\nspecific governmental uses: State Implementation Plans and Conformity Analyses U.S. Environmental\nProtection Agency (2021), which are for states to achieve and maintain air quality standards; and its use\nbeyond trained practitioners and these specific analyses poses two main limitations. First, a steep learning\ncurve, computational demands, and complex inputs make it difficult for researchers and practitioners to\nuse. In particular, MOVES has rigid input requirements, including a combination of toggle-based settings\nwithin its GUI and structured input files in specific formats. Second, MOVES is tailored for macroscopic\nanalysis and is unsuitable for microscopic applications, such as control and optimization, which commonly\nrequire second-by-second emission calculations for individual actions and vehicles. Unfortunately, many\nstudies avoid using MOVES due to its technical complexities (Ravindra et al., 2006; Kopfer et al., 2014;\nZhao et al., 2018; Wu et al., 2019; Kou et al., 2020; Bai et al., 2022; Tsanakas et al., 2022), despite the\nstrong incentive to use a centralized, established, and certified model, such as MOVES, for accurate and\ncomparable emission estimates.\nTo avoid this issue, alternative emission estimation models are used, with the choice of model\ndepending on the application requirements (He et al., 2020). For high-level, aggregated analyses, users\noften choose macroscopic (link-based) models that are faster, more flexible, and easier to use. In contrast,\nmicroscopic (vehicle-based) applications, such as eco-driving (Mintsis et al., 2020; Wu et al., 2019) and\ntrajectory planning (Jiang et al., 2023), require real-time emission estimations for each vehicle action at\na given time step. These models are crucial for emission analysis, leading to the emergence of various\nmicroscopic model alternatives (Rakha et al., 2011; Krajzewicz et al., 2015; Madziel, 2023). However,\nthese alternatives account for different variables as inputs and their emission profiles vary significantly,\nmaking the estimation results incomparable. Moreover, optimization using different microscopic emission\nmodels may lead to vastly different outcomes (Rakha and Kamalanathsharma, 2011). Therefore, using\nalternative microscopic models does not equate to utilizing the officially-recommended MOVES.\nGiven that alternative models cannot fully substitute MOVES, efforts have focused on preserving\nMOVES' processing capabilities while improving its usability. These efforts aim to bridge MOVES'\nemission modeling with applications that require faster, programmatic, and microscopic processing. In the\nliterature, two MOVES variants are found, namely, MOVES-Matrix (Liu et al., 2016) and MOVEStar (Wang\net al., 2020). MOVES-Matrix is an emission modeling framework that precomputes MOVES outputs for all\ninput combinations, storing them in a large lookup table. This allows for queries that retrieve MOVES-\ncompliant emission estimates 200\u2013800 times faster than running MOVES directly. However, MOVES-\nMatrix inherits MOVES' complex input requirements, meaning users must still configure all MOVES"}, {"title": "Methodology", "content": "A two-step framework is proposed to develop NeuralMOVES: first, microscopic and instantaneous emission\ndataset, i.e., MOVESRE, is extracted and collected through reverse-engineering MOVES; then, Neural-\nMOVES as a model is constructed by surrogate learning the reverse-engineered emission data (Figure\n1)."}, {"title": "MOVESRE: A reverse-engineered MOVES dataset", "content": "The lowest (i.e., the most microscopic or granular) level at which MOVES can estimate emissions is a\nso-called driving cycle, defined as a time series of speed in MOVES\u00b9. The speed could be the speed of a\nvehicle or the average speed of a group of vehicles. By using driving cycles, MOVES can model emissions\nat various scales, from individual vehicle trips to regional or national levels. The goal of the reverse\nengineering is to extract instantaneous (second-by-second) emissions of a single vehicle from the driving\ncycle-based MOVES."}, {"title": "Calculation of instantaneous emission", "content": "We begin by defining a set of driving cycle tuples of the form (\u03c4, \u03c4'), where \u03c4 and \u03c4' represent the baseline\nand custom driving cycles, respectively. The baseline driving cycle is defined as a time series with constant\nspeed v and time intervals At, ranging from 1 to n, i.e.,\n\u03c4 = {v}_i=1, \u2200i = v, \u2200i \u2208 {1,2,..., n}.\n(1)\nThe custom driving cycle \u03c4' is formed by appending an additional time step n + 1 to the baseline driving\ncycle, where the new speed v' at time step n + 1 is determined based on a specific acceleration a of interest\nfor one time step At, i.e.,\n\u03c4' = {v'}_i=1, \u2200i = v, vn+1 = v' = v +a\u2206t, \u2200i \u2208 {1,2,...,n+1}.\n(2)\nLet E(T,X) denote the total emissions of the driving cycle \u03c4, where X is the vector of other emission-\nrelated input factors, such as the environment and vehicle factors. Since \u03c4' is identical to t for the first n\ntime steps, differing only in the additional n + 1 time step, where the speed transitions from v to v' with\nacceleration a, we can compute the emission e associated with applying an acceleration a at speed v, as\nfollows:\ne(\u03bd,\u03b1,X) = \u0395(\u03c4',\u03a7) \u2013 \u0395(\u03c4,\u03a7).\n(3)\nThis method, which estimates instantaneous emissions by calculating the difference in emissions\nbetween two driving cycles, is particularly designed for MOVES, since MOVES is more suitable for\ncalculating driving cycle-based emissions than directly calculating instantaneous emissions. Moreover,\nMOVES computes different types of emissions for different operating stages, such as starting and running\nemissions. By adjusting the length of the baseline driving cycle t, i.e., n, we can control which emission\nstage is the focus of the reverse engineering. Here, we set n = 5 and \u2206t = 1 second, i.e., the resulting\ndataset will reflect the running emissions. One may set n = 1 to reflect the starting emissions.\nAlthough we already have an n-second driving cycle, MOVES calculates emissions based on a standard\n1-hour operating time. Therefore, to obtain the emissions for the n-second driving cycle, we need to follow\na two-step process.\n\u2022 Run MOVES for 1-hour operation time. We force MOVES to use a total operating time of 1 hour by\nsetting the vehicle miles traveled to an artificially high value, which allows MOVES to assign the\nmaximum processing duration, defaulting to T = 1 hour in MOVES' project mode, which is one of\nthe multiple modes of MOVES. The emissions are calculated based on the vehicle's operating modes\nduring this 1-hour period, and the operating mode distribution is influenced by the driving cycle's\nspeed and acceleration patterns. Mathematically, the emissions for the 1-hour operating time E1-hour\nare computed as follows.\nJ\nE1-hour (T, X) = T \u2211 pj(t).rj(X),\nj=1\n(4)\nwhere pj(t) is a function that calculates the fraction of time spent in operating mode j (1 \u2264 j \u2264 J)\nfrom the driving cycle t; and rj(X) is a function that specifies the emission rate for operating mode j\nbased on emission-related input factors required by MOVES. For t, J = 1 and pj = 1, since all the\nspeeds in T are the same. For T', J = 2, p\u2081 = (n \u2212 1)/n and p2 = 1/n.\n\u2022 Scale emissions to match the n-second cycle. Once we have the emissions for the 1-hour operation\ntime, we can then scale them to the desired driving cycle length (e.g., n or n+1 seconds). To scale\nthe emissions, we use the fact that the emissions calculation in MOVES is linearly proportional to the\noperating time. Therefore, the emissions for the n-second cycle, i.e., E, can be estimated as follows.\nE(\u03c4,\u03a7) = E1-hour (T,X). n\n3600\n(5)"}, {"title": "Dataset generation", "content": "There are many factors that influence vehicle emissions. In addition to vehicle dynamics factors (i.e., speed\n(v) and acceleration (a)), other influential factors that are selected as the input include environment factors\n(i.e., road grade (xgrade), temperature (Xtemp), and humidity (Xhumid)), and vehicle factors (i.e., vehicle type\n(Xtype), vehicle age (xage), and fuel type (xfuel)). Therefore, the input X in Equation 3, which is used to\nreverse engineer MOVES, is concretized as\nX = {xgrade, Xtemp, Xhumid, Xtype, Xage, Xfuel}.\n(6)\nTo construct a dataset, which is discrete in nature, we first discretize all above factors (Table 1) and\nthen input each valid combination of the factor values to MOVES according to Equation 3. Finally, we\nobtain the reverse-engineered dataset representing MOVES, named MOVESRE and written as\nMOVESRE : (v, a, Xgrade, Xtemp, Xhumid, Xtype, Xage, Xfuel) \u2192 e.\n(7)\nwhere all variables are discrete,and the total size of the dataset is determined as\n|MOVESRE| =\n-mc\nnspeed,accntemp,humid grade nage type fuel\n+nspeed,acc. Ntemp,humid \u00b7 Ngrade \u00b7 Nage\nnmiss = 109,367,240\nmc gas\ntype\nfuel\nmc\n(8)\nwhere nspeed,acc is the number of the valid combinations of speed and acceleration; ntemp,humid is the number\nof the valid combinations of temperature and humidity; nage is the number of vehicle age values; ntype and\nme are the numbers of the types of motorcycle and the total types of other vehicles, respectively; nfuel and\nuel are the numbers of the fuel types of fuel and the fuel types of gasoline; nmiss is the number of missing\nand corrupted values. The specific values of the variables, which are determined based on the statistics in\nTable 1, are listed as follows.\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022\nnspeed, acc =4,791. This is less than the product of the number of speed values and acceleration values\n(i.e., 66 \u00d7 76 = 5,016) due to invalid combinations. An invalid combination v, a, v' happens the\nvehicle is subject to an negative acceleration value a larger that its current speed v, since it would\nlead to a negative speed v' .\nntemp,humid = 21. The temperature and humidity variables do not span the full combinatorial space, i.e.,\nthey are not multiplied such that every temperature value pairs with all 21 humidity values and vice\nversa. Instead, we select the combinations as follows. First, 10 combinations were carefully chosen\nto represent the annual average temperature and humidity levels of 10 U.S. cities (Jayawardana et al.,\n2024). Then, 11 additional points were strategically added to optimize coverage in the temperature-\nhumidity space, using a minimization optimization process to effectively fill data gaps. Finally, we\nobtain only 21 unique temperature-humidity combinations\u00b2.\n1 and me\nNtype\n2 and neas\nNtype\nnfuel\nmc\n4. The sum is 5, i.e., the total number of vehicle types in Table 1;\n1;\nnage = 11, including the latest model year available in MOVES: 2019; and the 10 years prior;\nnmiss = 198,139. Throughout the extraction process, system crashes and failures occasionally\nrequired rerunning batches. While most missing data was recovered, a final inspection revealed\nthat a subset of results contained errors due to an extraction-related technical issue. Specifically,\nfor the group comprising vehicle age 2016, only 18 valid temperature-humidity combinations were\nsuccessfully retrieved for motorcycles with gasoline. In total, 198,139 data points were identified as\ncorrupted and removed from the dataset.\nIt is worth noting that the discreteness and the small number of missing values in the inputs will not cause\nsignificant issues, as Section 2.2 introduces surrogate learning to connect the discrete inputs, effectively\ncreating a continuous input space."}, {"title": "Dataset features", "content": "Different from MOVES, the reconstructed dataset has the following important features. First, it provides\nhighly disaggregated data, capturing instantaneous emissions as a function of a specific speed and accelera-\ntion combinations for a single vehicle under given other static conditions (i.e., X in Equations 3 and 6). In\ncontrast, MOVES operates at a much more aggregated level. Second, this dataset is location-independent,\nenabling universal applicability. MOVES, by design, requires a U.S. location to infer variables such as\ntemperature, humidity, fuel distribution, and vehicle fleet composition. By decoupling emissions data from\nlocation, the dataset allows users to directly input environmental parameters, facilitating emissions estima-\ntion for international contexts or customized scenarios, such as seasonal variations. This flexibility extends\nMOVES' scope, offering enhanced control and granularity for both domestic and global applications,\nparticularly for microscopic, real-time analyses.\nThe resulting instantaneous emission dataset contains over 100 million data points spanning all factors\nlisted in Table 1. It weighs 9.89 GB and is publicly available. While having instantaneous emissions is a\nsignificant advantage, and the dataset could be used as a lookup table, its format presents two important\nlimitations when used directly. First, the approximately 10 GB size can slow down applications, particularly\nwhen frequent data extraction and lookup are required in large-scale operations. Second, the discreteness\nof the input variables limits the widespread application of the dataset. This necessitates interpolation or\nnearest-neighbor approaches to estimate unobserved points. To address these issues, the following section\nwill introduce surrogate modeling to significantly reduce the dataset size and convert it into a continuous\nfunction."}, {"title": "NeuralMOVES: A learning-based surrogate of MOVESRE", "content": "Surrogate learning is a widely used approach for approximating complex models or processes that are\ncomputationally expensive. The fundamental concept involves training a surrogate model to approximate\nthe output of a more detailed and computationally intensive model. By learning an accurate surrogate,\npractitioners can evaluate approximations of the target model more efficiently while preserving critical\ninput-output relationships (Cozad et al., 2014).\nThis section aims to replace the large, discrete dataset MOVESRE with a lightweight, continuous\napproximation using a Machine Learning (ML) model, enabling faster, real-time application. The ML\nmodel, denoted by fe, is trained to learn the mapping from the inputs to the output by minimizing a loss\nfunction, which is the Mean Absolute Percentage Error (MAPE) here.\nMAPE(0) =\n1\n\u2211\nle;-fo(xi)\nx 100\n(9)\nN\nei\ni=1\nwhere fe (xi) is the predicted output from the surrogate model and ei is the output from MOVESRE; x\u00a1 is\nthe input vector for the i-th training sample, i.e., x\u2081 = (Vi, ai, Xgrade,i, Xtemp,i, Xhumid,i, Xtype,i, Xage,i, Xfuel,i); The\nmodel parameters @ are optimized during training to minimize the loss function. Note that the optimized\noutput is additionally truncated with the idling emission value for that environment (denote by eidling), which\nis the emission value associated with having the motor on without exerting any power. This truncation\nensures that the minimum possible emission is the idling value, rather than zero or negative, which the\nmodel might predict when extrapolating the data.\nFor the surrogate model fe, we employ different model types and architectures, including polynomial\nregression with a third-order polynomial following the structure of alternative emission models (Krajzewicz\net al., 2015; INFRAS, 2022) as the baseline; and then decision trees and Neural Networks. The following\nobservations are made in the results presented in Table 2.\n\u2022 Polynomial models provide a simple representation but lack the capacity to capture the intricate\ndynamics of the data, with a high MAPE of 31.04%.\n\u2022 Decision Trees partition the input space into discrete regions, which can be suboptimal for continuous\nvariables like temperature and humidity. While they achieve competitive accuracy with an MAPE of\n6.17%, the Mean Percentage Error (MPE) is more than double that of Neural Networks, indicating a\nmore pronounced skew in the error distribution. Additionally, Decision Trees are non-differentiable,\nlimiting their applicability in optimization and control tasks.\n\u2022 Neural Networks emerge as the most effective architecture, capturing both the stepwise emissions\npattern and continuous environmental variations. Through hyperparameter optimization, we identify\nan optimal architecture comprising two layers with five hidden neurons and a tanh activation func-\ntion. This model achieves an MAPE of 6.01%, closely approximating MOVESRE while remaining\nlightweight and highly generalizable.\nFinally, a Neural Network with two layers, each consisting of 5 neurons (dim 5), and an initialization\nscaling factor of 0.97 is chosen as the surrogate architecture. Mathematically, the model can be written as\nfollows:\nNeuralMOVES : max{eNN, eidling} \u2192 e.\n(10)"}, {"title": "Validation", "content": "To assess the accuracy of NeuralMOVES in representing MOVES, we conduct a direct comparison of\nNeuralMOVES emission outputs with MOVES outputs for an extensive test set. The design of the validation\nset is based on representativeness (i.e. including realistic and diverse tests), and robustness (i.e. having\nenough samples to properly draw conclusions). The set of evaluations are designed by varying two primary\ncomponents: (1) environments and vehicles (2) driving dynamics; as the three types of factors detailed in\nTable 1. The environments and vehicles under which a vehicle operates are generated by systematically\ncombining values for all factors regarding environments and vehicles in Table 1 within the minimum and\nmaximum values. This process renders a diverse set of scenarios that reflect a comprehensive evaluation of\nthe model's performance across diverse but realistic conditions, with a total of 22,869 scenarios covering all\ncombinations of environment and vehicle factors in Table 1). For the driving dynamics, we create a set of\n100 driving cycles that capture a wide range of driving behaviors using the following five distinct strategies.\n\u2022 Random speed: A random walk generated by sampling random acceleration values from a uniform\ndistribution with realistic acceleration range from -1.5 to 3 m/s\u00b2. The speed is truncated at 0 m/s to\nprevent a random acceleration that leads to negative speed values (Figure 4(a)).\n\u2022 Sinusoidal speed: Periodic speed variations designed to enforce acceleration and deceleration cycles\nwith noise, mimicking stop-and-go traffic (Figure 4(b)).\n\u2022 Piecewise speed: A vehicle maintains a constant speed for a finite duration, followed by a transition\nperiod during which it reaches the next speed with constant acceleration. The set of constant speeds,\ntheir duration, and the length of the transition periods are parameterized and randomly set, allowing\nfor variability in these three aspects while ensuring realistic acceleration values (Figure 4(c)). Such\nspeed profiles are commonly used in human-compatible control applications (Sridhar and Wu, 2021).\n\u2022 Approaching intersections: The well-known Intelligent Driver Model (IDM) (Treiber et al., 2000) is\nused to simulate a vehicle approaching a signalized intersection, where car-following, acceleration,\ndeceleration, and idling behaviors are replicated (Figure 4(d)).\n\u2022 Eco-driving: Dynamic eco-driving strategies are implemented to the vehicles that approach a signal-\nized intersection (Figure 4(e)). A set of fuel and emission optimized driving cycles generated using\nreinforcement learning-based policy as outlined in Jayawardana and Wu (2022). The learned vehicle\ncontrol policy reduces idling time at intersections by adjusting vehicle acceleration to synchronize its\narrival with the green phases of the traffic signal. This results in a gliding behavior, minimizing the\nneed for stopping and improving overall fuel and emission efficiency.\nEach combination of the driving cycles, and environments and vehicles is processed with MOVES and\nNeuralMOVES, respectively, and total emissions are computed for comparison, rendering an extensive\nvalidation set of 22,869\u00d7100=2,296,900 evaluations.\nThe accuracy of NeuralMOVES is evaluated using MAPE across all 2,286,900 evaluations, yielding\nan overall MAPE of 6.013%. Moreover, Figure 5 presents a detailed breakdown of the percentage error\ndistribution across various dimensions. It is found that, although the maximum errors are about \u00b120%\n(Figure 5(a)), most of the errors centered at zero with most errors ranging between -5% and 10% under\nvarious environment and vehicle conditions (Figure 5(c)). The distribution exhibits slight positive skewness,\nindicating that NeuralMOVES is likely to overestimate rather than underestimate emissions (Figures 5(a)\nand 5(c)). Regarding the estimation under various scenarios, the error remains relatively consistent across\nthe trajectories generated by distinct strategies (Figure 5(b)). In general, these results demonstrate that while\nNeuralMOVES introduces some error, it maintains high precision and consistent accuracy in replicating\nMOVES outputs across diverse scenarios. The observed biases and variability patterns highlight potential\nareas for refinement but confirm the surrogate model's reliability as an efficient alternative for emissions\nestimation."}, {"title": "Use case: Dynamic eco-driving", "content": "To showcase the practical benefits of NeuralMOVES and its effectiveness, we implement a Model Predictive\nControl (MPC)-based dynamic eco-driving application. Dynamic eco-driving refers to optimizing driving\nbehavior in real-time to minimize fuel consumption and emissions, adapting to traffic conditions and\nroad characteristics (Haitao Xia and Barth, 2013; Mintsis et al., 2020; Yu et al., 2021). Dynamic eco-\ndriving optimization is a typical traffic optimization problem that heavily involves the estimation of fuel\nconsumption and/or emissions, as these variables are usually part of the objective function and need to be\ncomputed for each possible action at each time step of the optimization process. (He et al., 2015; Zhang\net al., 2023; Lu et al., 2024; Shafik and Rakha, 2024).\nDynamic eco-driving can be formulated as the following optimal control problem.\nto+N\nminE = \u2211 (weM(a(t), v(t)) - w,v(t))\na\n(12)\nt=to\nsubject to:\nx(t+1) = x(t) +\nv(t) + v(t+1) dt\n2\n(13)\nv(t+1) = v(t)+a(t)dt\n(14)\nx(0) = 91\n(15)\nv(0) = 92\n(16)\nx(t) \u2265 x(0)\nt \u2208 [to, to +N]\n(17)\nvmin \u2264 v(t) \u2264 Vmax\n\u2200t \u2208 [to, to+N]\n(18)\namin \u2264 a(t) \u2264 amax\n\u2200t \u2208 [to, to +N]\n(19)\n93 \u2264 x(N) \u2264 94\n(20)\nv(N) \u2265 95\n(21)\nwhere M(\u00b7) represents any emission estimation model; weights we and w, balance emission minimization\nagainst speed maximization; vmin and vmax are the lower and upper boundaries of vehicle speed; amin and\namax are the lower and upper boundaries of vehicle acceleration; 91, 92, 93, 94 and q5 are all coefficients.\nThe constraints define vehicle dynamics (Constraints (13) and (14)), initial conditions (Constraints (15)\nand (16)), and operational bounds (Constraints (17) ~ (21)).\nMPC iteratively solves the finite-horizon optimal control problem to determine acceleration sequences\nthat minimize cumulative emissions while satisfying dynamic constraints. Specifically, the vehicle's initial\nstate including position, velocity, and environmental conditions, is established. Then, at each timestep,\nMPC solves the optimization problem to determine the sequence of control actions a0:T\u22121 that minimizes\nthe cumulative cost over the horizon T, where the cost function incorporates emission predictions from\nNeuralMOVES to consider environmental impact. Only the first control action ap is then applied to the\nvehicle, updating its state based on the control action and vehicle dynamics model. This process is repeated\nat each time step using the updated state information.\nFigures 6 present a series of optimized driving trajectories generated for a 2019 passenger car model\nand a 2019 bus model in the scenario of approaching a signalized intersection. These trajectories were\ncalculated under three distinct scenarios: varying road grades, ambient temperatures, and humidity levels.\nIn each scenario, the surrogate model efficiently adjusted to account for external factors, producing driving\npaths that minimize CO2 emissions while adhering to travel time requirements. For instance, steeper road\ngrades necessitate shifts in acceleration patterns, whereas temperature and humidity changes influenced\nengine performance and emissions profiles.\nOur experimental results reveal that optimal trajectories vary significantly with environmental parame-\nters, demonstrating that eco-driving strategies are indeed environment-dependent. This finding underscores\nthe importance of using emission models that can accurately capture these environmental dependencies.\nFurthermore, the trajectories generated using NeuralMOVES differ notably from those produced by simpler\nemission models, such as VT-CPFM, suggesting that previous eco-driving applications might have yielded\nsuboptimal results by not incorporating comprehensive emission modeling."}, {"title": "Conclusions and discussion", "content": "At last, we emphasize that the following two key properties of NeuralMOVES make it compatible and\nsuccuessful with this optimization technique and other control and optimization applications.\n\u2022 NeuralMOVES is differentiable, a crucial property for gradient-based optimization methods. In\ncontrast, MOVES and other dataset-based emission estimation models are not differentiable, making\nthem unsuitable for integration into the optimization frameworks. As a Neural Network-based\nsurrogate model, NeuralMOVES enables the computation of gradients with respect to control inputs,\nthereby facilitating the optimization process.\n\u2022 NeuralMOVES has a computation time on the order of milliseconds for instantaneous emission\nestimates (i.e., one forward pass of the Neural Network). This rapid emission estimation enables\nreal-time application within an optimization method. Such computational efficiency is critical, as\nmany optimization and control methods require frequent evaluations of the cost function to determine\noptimal control actions at each timestep.\nMOVES, as one of the most well-established emission estimation models, serves as the official and state-of-\nthe-art emission estimation model in the U.S.. While a powerful and authoritative tool, MOVES presents\nsignificant challenges due to its complexity, data requirements, and computational demands, which limit\nits accessibility and applicability. To address these limitations, this paper extracts vehicle running CO2\nemissions through carefully designed data extraction and scenario generation. The reverse engineering\napproach ultimately generates a dataset of more than 9.89 GB with 109,367,240 data points, representing\nMOVES. Furthermore, we proposed a surrogate learning-based method to approximate the reverse engi-\nneered MOVES dataset and develop a computationally efficient lightweight model, namely, NeuralMOVES.\nImportantly, the 2.4 MB NeuralMOVES achieves only a 6.013% MAPE compared to MOVES across\ndiverse scenarios, while offering a differentiable emission estimation model with a computing time in the\norder of milliseconds.\nA dynamic eco-driving problem is solved as a use case, demonstrating the capability and flexibility of\nthe proposed NeuralMOVES, which is well-suited (but not limited) to computationally intensive real-time\nand microscopic applications.\nThe proposed NeuralMOVES represents a significant advancement in emission modeling for the\ntransportation sector, contributing to both macro- and micro-scale analyses. Its scalability and adaptability\nmake it a valuable resource for both researchers and practitioners. At last, it is important to note that the\ncurrent NeuralMOVES only accounts for CO2 emissions from vehicle running operation. Future work\ncould include extracting air pollutants, such as NOx and PM2.5, and emissions from other driving states,\nsuch as starting emissions. Moreover, the accuracy of the model could be further improved."}]}