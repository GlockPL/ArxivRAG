{"title": "When Al Meets Finance (StockAgent): Large Language Model-based Stock Trading in Simulated Real-world Environments", "authors": ["CHONG ZHANG", "XINYI LIU", "MINGYU JIN", "ZHONGMOU ZHANG", "LINGYAO LI", "ZHENTING WANG", "WENYUE HUA", "DONG SHU", "SUIYUAN ZHU", "XIAOBO JIN", "SUJIAN LI", "MENGNAN DU", "YONGFENG ZHANG"], "abstract": "Can AI Agents simulate real-world trading environments to investigate the impact of external factors on\nstock trading activities (e.g., macroeconomics, policy changes, company fundamentals, and global events)?\nThese factors, which frequently influence trading behaviors, are critical elements in the quest for maximizing\ninvestors' profits. Our work attempts to solve this problem through large language model based agents. We\nhave developed a multi-agent AI system called StockAgent, driven by LLMs, designed to simulate investors'\ntrading behaviors in response to the real stock market. The StockAgent allows users to evaluate the impact\nof different external factors on investor trading and to analyze trading behavior and profitability effects.\nAdditionally, StockAgent avoids the test set leakage issue present in existing trading simulation systems based\non AI Agents. Specifically, it prevents the model from leveraging prior knowledge it may have acquired related\nto the test data. We evaluate different LLMs under the framework of StockAgent in a stock trading environment\nthat closely resembles real-world conditions. The experimental results demonstrate the impact of key external\nfactors on stock market trading, including trading behavior and stock price fluctuation rules. This research\nexplores the study of agents' free trading gaps in the context of no prior knowledge related to market data.\nThe patterns identified through StockAgent simulations provide valuable insights for LLM-based investment\nadvice and stock recommendation. The code is available at https://github.com/MingyuJ666/Stockagent.", "sections": [{"title": "1 Introduction", "content": "The stock market operates within a complex and volatile ecosystem where the buying and selling of\nstocks often occurs amidst high liquidity and constant price fluctuations [13, 16]. This environment\nis consistently shaped by the interplay of various participants, including individual investors,\ninstitutions, and automated trading systems [34, 45]. The trading behaviors of these participants\nreflect a complex result of competition and cooperation, influenced by uncertainties such as\neconomic trends [29], geopolitical events [15], and psychological factors (e.g., market sentiment)\n[42]. Consequently, the rapid pace of trading, coupled with the vast amount of available information,\nposes significant challenges for traders to make consistently well-informed decisions.\nThis underscores the necessity for data-driven tools like algorithms or simulations to facilitate\ninformed and strategic investment decisions. The prevalent method involves backtesting with\nhistorical data to simulate trading environments and assess strategies. Popular tools for this purpose\ninclude Zipline [26], Backtrader [18], and PyAlgoTrade [19]. These event-driven models for trading\nsimulation can help evaluate trader-designed strategies. In addition, the integration of machine\nlearning techniques has opened up new avenues for supporting investment decisions [12, 25, 35].\nAmong those, one popular tool is called Trading Gym [30], which leverages reinforcement learning\nto optimize investment strategies.\nWhile historical data-based analysis offers valuable insights, its static nature and retrospective\nbias can limit its effectiveness in supporting financial decisions in a dynamic and evolving envi-\nronment [4, 6]. Consequently, simulations or machine learning models trained on historical data\nmay overfit and fail to accurately reflect real-time market liquidity or the influence of collective\nsentiment. On the other hand, understanding the mechanisms of market operations, particular the\ninterplay between stakeholders and market sentiment, is crucial for developing robust investment\nstrategies [5, 11]. Simulating human sentiments and behaviors can provide a closer approximation\nof how investment strategies can work in response to the market's rapidly evolving nature, bridging\ngaps left by traditional data analysis.\nRecent advancements in large language models (LLMs) like GPT and Gemini can facilitate sim-\nulations of complex stakeholder interactions [17, 23]. Integrating these LLMs into agent-based\nsystems has been demonstrated useful in conducting intricate simulations across various disciplines\n[23, 50]. One reason is that these LLMs are trained on extensive datasets and have shown immense\ncapability to comprehend, generate, and reason through diverse scenarios. These reasoning abili-\nties empower LLMs to model intricate systems where individual LLM-based agents can interact\ndynamically and make decisions under evolving conditions [1], which is particularly advantageous\nfor simulating the dynamics of stock markets. In this regard, multiple recent studies have leveraged\nLLMs to enhance stock market simulations that can mimic complex human behaviors, addressing\nbacktesting limitations. These simulations can also replicate social dynamics by leveraging LLMs\u2019\ngeneralization capabilities [10, 17, 23, 36, 49, 52]."}, {"title": "2 Background and Related Work", "content": "Computational finance leverages platforms like Zipline [44] and Backtrader [26] for backtesting\nstrategies with historical data. These tools allow researchers and traders to test their trading\nalgorithms on past market data and thus assess their potential performance. However, in addition\nto localized solutions, cloud solutions such as QuantConnect [32] also provide a simulation of the\nglobal market, which enables users to validate their strategies in a wider market environment. In\naddition, Trading Gym provides a reinforcement learning environment dedicated to the development\nand testing of algorithms [3]. This environment can be very beneficial for those looking to leverage\nmachine learning techniques to optimize their trading strategies.\nIn terms of strategy development and stock trading, PyAlgoTrade and Alpaca are the two very\npopular tools that simplify the strategy development process and provide the ability to simulate\ntrading [40]. These platforms allow traders to test their ideas and strategies without risking real\nmoney to better understand their underlying market behavior and performance.\nWhile these tools are extremely useful for strategy optimization and backtesting, there are\nchallenges in transitioning from the backtesting phase to actual trading. A major problem is\noverfitting, where strategies perform well on historical data but underperform in real-time markets.\nIn addition, many strategies are developed without considering key factors such as market sentiment"}, {"title": "2.2 Large Language Model based Agents", "content": "LLMs are changing AI Agents' capabilities by giving them advanced cognitive skills for reasoning\nand interaction. One of the key techniques contributing to this transformation is Chain of Thought\n(CoT) [46, 47, 51]. CoT enables LLM-driven AI Agents to address tasks that have traditionally been\nthe domain of symbolic AI. By breaking down complex problems into a series of intermediate\nreasoning steps, CoT enhances the problem-solving capabilities of these agents, making them more\neffective in handling intricate tasks.\nThese agents are applied to natural language tasks in different domains, such as ChatDev [37]\nand MetaGPT [21], two platforms that allow users to write or generate their own AI Agents\naccording to their needs, to deal with a wide range of tasks in different scenarios. AutoGen [48] is\nan open-source framework that allows developers to develop agents. Developers can build LLM\napplications through multiple agents that can interact with each other to complete various LLM\ntasks. These tasks include math, programming, decision making, etc. WarAgent [23] simulates a\nset of adversarial systems that can be used to simulate military operations through an AI Agent.\nCosmoAgent [27] focuses on the field of universe exploration and scientific research by using AI\nAgent. Such adaptability is crucial for developing reactive agents that can adjust their strategies\nbased on real-time feedback and evolving contexts.\nThese cross-domain applications underscore the flexibility and diversity of LLM agents in\nmanaging complex environments. The integration of advanced reasoning techniques, multimodal\nlearning, and feedback-driven adaptability highlights the significant strides made in enhancing the\ncognitive and interactive capabilities of AI Agents."}, {"title": "2.3 Large Language Models with Finance", "content": "The intersection of LLMs and economics is changing how we approach financial analysis and\nprediction. Traditional quantitative models are giving way to LLMs' sophisticated processing of\neconomic literature, improving trend forecasts, as shown by Alonso-Robisco and Carb\u00f3 [2]. For\ninstance, Alonso-Robisco and Carb\u00f3 [2] demonstrates how LLMs can enhance trend forecasts by\nanalyzing economic literature, leading to more nuanced predictions. Compliance and risk manage-\nment sectors benefit from LLMs' ability to detect textual risks, enhancing regulatory compliance\nand threat management, as evidenced by [14]. Furthermore, specialized models like PIXIU's Finan-\ncial Language Model, built on Llama, offer superior assessments of financial statements, as noted\nby Zhao et al. [53].\nIn algorithmic trading, LLMs can contribute through improved sentiment analysis and financial\ntext interpretation, as highlighted by Huang et al. [24]. This allows for more responsive trading\nalgorithms that can swiftly adapt to market sentiments. Overall, LLMs are significantly impacting\neconomic decision-making and market dynamics by providing more accurate and strategic insights\nthrough advanced data processing and interpretation capabilities."}, {"title": "2.4 Behavioral Finance", "content": "Behavioral finance [20] combines the research results of psychology and economics to study the\nbehavior and decision-making process of investors in financial markets. It focuses on how the"}, {"title": "3 StockAgent Architecture Design", "content": "We design StockAgent as Multi-Agent System (MAS) that can simulate actual stock markets and\ninvestor trades through agent interaction, comprising (1) Investment Agent module, (2) Transaction\nmodule, and (3) BBS module, structured to prevent agent action conflicts and ensure message\navailability."}, {"title": "3.1 Investment Agent Module", "content": "Investment Agents: Investment Agents are initialized with random capital, liabilities, and one of\nfour personalities: Conservative, Aggressive, Balanced, and Growth-Oriented, to study personality\nimpacts on decision-making. Initial liabilities incentivize profit-driven trading.\nAgent Interaction: In our framework, agents are tasked with decisions on loans, trading, fore-\ncasting tomorrow's actions, and sharing tips on BBS. They must consider varied information, such\nas market data and BBS exchanges, detailed in Appendix A. Following [23], a \u201csecretary\u201d corrects\nagents' invalid responses, preventing unrealistic actions like spending beyond available cash."}, {"title": "3.2 Transaction Module", "content": "Agents' buy and sell orders are logged into an order book, which is managed using a dictionary data\nstructure in Stock Agent. After an agent completes a trade, the system assesses if and how much was\ntraded, updating the order book accordingly. With agents competing in simultaneous transactions,\nour prompt-driven simulation risks deadlock. Therefore, with the help of the page replacement\nalgorithm in the multitasking operating system, we propose a random clock page replacement\nalgorithm, which is shown in Figure 1. Agents are randomly sequenced for decision-making,\npreventing deadlock by avoiding concurrent contention."}, {"title": "3.3 Bulletin Board System (BBS) Module", "content": "Our framework includes a unique BBS, which allows agents to post messages. At the end of each\nday, we ask agents to share their trading tips on BBS. By making this information available to all\nagents, we aim to simulate a realistic environment where others' opinions may influence investor\ndecisions."}, {"title": "4 StockAgent Simulation Design", "content": "In this study, we investigate stock trading within a MAS to understand market dynamics and\nagent interactions. We simulate trading to observe how AI Agents' decision-making, informed\nby varied information, influences market indicators like volatility and liquidity. The simulation\nflow is presented in Figure 2. In the following, we refer to each agent adhering to the StockAgent"}, {"title": "4.1 Initial Assumptions and Settings", "content": "In StockAgent trading simulations, it is crucial to set clear initial assumptions and initial settings.\nThese underlying parameters ensure that the simulation gives a true representation of market con-\nditions and behavior. A clear initial configuration prevents AI agents from behaving unpredictably\nor arriving at results that are unreliable or difficult to interpret. By setting clear boundaries and\ncapabilities for AI agents and market environments, we can systematically explore how different\nconditions can affect trading outcomes. These assumptions and settings include (1) agent initial\nassumptions, (2) agent initialization settings, and (3) market initialization settings."}, {"title": "4.1.1 StockAgent Initial Assumptions.", "content": "\u2022 StockAgent Setup Assuming basic common sense of stock market trading, our StockAgent\ncan make profitable trades to maximize profits. This maximizes profits and consists of\nmaximizing the total value of assets and cash. The StockAgent also has a basic estimation\nability.\n\u2022 StockAgent Trading Behavior We restrict the StockAgent actions to buy, sell, hold, long\nand short. Among them, buying, selling, and holding are defined as basic behaviors, long\nand short selling are defined as derived behaviors, and StockAgent can use basic behaviors\naccording to the basic knowledge of the stock market.\n\u2022 StockAgent Financial Behavior We assume that under the existing StockAgent framework,\nthe StockAgent can understand the financial attempt settings we set for loans, interest rates,\ndividends, and bankruptcy and use or avoid the above situations according to the goal of\nmaximizing profits."}, {"title": "4.1.2 StockAgent Initialization Settings.", "content": "\u2022 Personality and Assets Allocation: Each agent is endowed with distinct personality traits,\ninfluencing their trading styles. Initial assets are allocated randomly within a range of 100,000\nto 5,000,000 currency units, which is the sum of an agent's available cash and the market\nvalue of stocks. The random allocation ensures a diverse spectrum of wealth among agents.\n\u2022 Debt Configuration: Agents may incur debt, with the amount not exceeding the value of\ntheir capital. The loan-to-value ratio is capped to ensure realistic leverage levels.\n\u2022 Transaction Cost: We set the transaction stamp tax according to the rules of the American\nstock market. We put the transaction fee of each Agent in purchasing shares to 0.005 currency\nunits per share, the minimum transaction fee of each transaction is 1 currency unit, and the\nmaximum transaction fee is 5.95 currency units."}, {"title": "4.1.3 Market Initialization Settings.", "content": "\u2022 Trading Year: The simulation covers one year comprising 264 trading days, divided into\nfour quarters of 66 trading days each.\n\u2022 Interest Rates and Deposits: For companies and individuals, the deposit rate is 0%, reflecting\ncontemporary low-interest-rate environments.\n\u2022 Personal Loan Costs: Agents are subject to varying interest rates on loans, with different\nterms and corresponding costs. The actual annualized interest rate is 2.7% for a one-month\nloan, 3% for a two-month loan, and 3.3% for a three-month loan."}, {"title": "4.2 Simulation Flow", "content": "Figure 2 shows the simulation flow. On each trading day, after repayment, check, and decisions\nabout loans, agents are asked to trade stocks in 3 trading sessions, including pre-trading preparation,\ntrading session, and post-trading procedures. At the end of the trade, agents estimate tomorrow's\nactions and post trading tips on BBS."}, {"title": "4.2.1 Pre-Trading Preparation.", "content": "\u2022 Interest Repayment: Agents pay interest on their loans with cash on the last day of each\nmonth days (e.g., 22, 44, 66), which of these days is the last trading day of each month. We\nuse simple interest as the interest charge.\n\u2022 Loan Repayment: When a loan matures, agents need to repay the loan with cash."}, {"title": "4.2.2 Trading Sessions.", "content": "\u2022 Sequence Generation: In each session, our simulation randomly generates a sequence, and\nagents initiate transactions in this order.\n\u2022 Buy&Sell Decision: Agents can decide whether to buy, sell, or hold shares and determine\nthe transaction price and quantity. Their orders are then matched in a market order book,\nwhen the bid and ask coincide, a trade is made.\n\u2022 Price Update: To simplify the actual stock trading procedure, we only update stock prices\nat the end of trading sessions. Stock prices are updated to the price of the last transaction in\nthis session."}, {"title": "4.2.3 Post-Trading Procedures.", "content": "\u2022 Tomorrow's Action Estimation: Based on current information, agents are asked to estimate\nwhether they will loan, buy, or sell tomorrow.\n\u2022 Trading Tip Sharing on BBS: Agents share their trading tips and insights anonymously on\nBBS. Messages on BBS are available to all agents on the next day."}, {"title": "4.3 External Event Simulation Settings", "content": "We use external economic and financial events from 2014 to 2019 to align our valuation and volume\nenergy calculations with reality. The specific conditions are listed below:\n\u2022 Suppose that Company A and Company B, which issue Stock A and Stock B, both announce\nthe financial situation of the previous quarter at the end of each quarter; for example, the\nthird quarter of the first year announces the financial data of the second quarter of the first\nyear, and so forth.\n\u2022 Suppose that on the first trading day of the first quarter of the second year, both Company A\nand Company B announce their financial results for the previous year's fourth quarter. On\nthe same day, the government announces a reduction in the reserve ratio, causing a boost in\nmarkets M1 and M2. This results in a decrease in the loan cost for both companies from 6%\nto 4.5%.\n\u2022 Suppose that on the first trading day of Q1 in year three, the economy overheats, which\nleads to the government announcing an interest rate hike and balance sheet contraction. This\nresults in a decrease in market liquidity and a rise in loan costs from 4.5% to 5%.\n\u2022 Also assume that on the first trading day of the first quarter of the third year, Company A\nannounces that it expects revenue in the fourth quarter of the second year to be 3% below\nexpectations because of special events in the quarter, and Company B announces that it\nexpects revenue in the fourth quarter of the second year to be 2% above expectations because\nof special events in the quarter."}, {"title": "4.4 Financial Analysis in the Simulation", "content": "To support the financial analysis in the simulation, we use two companies' stock trading as an\nexample, with Tables 2 to 7 showing the Statement of Valuation, financial indicators, and ideal stock\nprice conclusion for Company A and Company B, respectively. First, the enterprise's financial data\nare collected, including the income statement, balance sheet, and cash flow statement. We use the\nincome statement to show non-cash expenses, such as net income depreciation and amortization.\nFurther, we use the balance sheet to show long-term debt and shareholders' equity.\nThe valuation method we use is FCFF (discounted free cash flow) valuation, as illustrated below:\nTotal market value = $\\sum_{t=1}^{n}\\frac{FCF_t}{(1 + WACC)^t}$ + $\\frac{FV}{(1 + WACC)^n}$  (1)\nWhich $FCF_t$ represents the cash flow in the growth period, FV represents the present value of the\ncash flow discounted to the end of the growth period,\nValue of equity = Total market value \u2013 Present value of debt (2)\nIPO listing price = $\\frac{Number \\ of \\ listed \\ shares}{Number \\ of \\ total \\ shares}$ \u00d7 Value of equity + IPO fees/Number of listed shares (3)\nWACC = $\\frac{KeXE}{D+E}$ + $\\frac{K\u00d7 D}{D+E}$ (4)\nWeighted average cost of capital (WACC) represents a company's average after-tax cost of capital\nfrom all sources, including common stock, preferred stock, bonds, and other forms of debt. Where\nKe is the cost of equity, $K_d$ is the cost of debt, E is equity capital, and D is debt capital. According\nto the Capital Asset Pricing Model (CAPM) :\n$K_e = R_f + \u03b2 \u00d7 (R_f - R_m)$ (5)\nWhere $R_f$ is the risk-free rate of return, $R_m$ is the expected market rate of return, and $\u03b2$ is the\nbeta coefficient. Where $K_d$can be calculated as follows,\n$Kd = \\frac{(SD \u00d7 SR + LD \u00d7 LR)}{D} \u00d7 AF \u00d7 (1 \u2013 TR)$ (6)\nWhere SD is short-term debt, LD is long-term debt, SR is the short-term interest rate, LR is the\nlong-term interest rate, AF is bond adjustment factor, and TR is the income tax rate and D is debt\ncapital."}, {"title": "4.5 Ideal Stock Price Conclusion", "content": "According to the financial analysis in the previous sections, Tables 6 and 7 show the ideal stock\nprices of stocks A and B for each year and quarter, respectively. The financial analysis provided the\nfollowing valuations, which can be used as initial data for our simulations."}, {"title": "5 Experiment, Results, and Validation", "content": "Our experimental design is demonstrated in Figure 3. Agents make trading decisions based on\nnumerous external information in our simulations. The simulation evaluation is conducted from"}, {"title": "5.1 Backbone Large Language Models", "content": "For the experiment, we select two widely used LLMs, namely Gemini and GPT at the time of this\nstudy, as the backbone LLMs to conduct the stock trading tasks. These two LLMs have shown\nrobust abilities to comprehend and generate information in complex simulated environments, as\ndemonstrated by prior studies listed in Sections 2.3 and 2.4. Both models represent current state-of-\nthe-art in large language models, each with unique strengths in natural language processing and\ngeneration. For simplicity, we call them GPT and Gemini in our subsequent experiment and result\nanalysis.\nGemini-Pro (Gemini-pro-1.0): Gemini is a family of multimodal language models developed\nby Google DeepMind [41]. As the successor to LaMDA and part of the PaLM2 family, it represents a\nsignificant advancement in AI capabilities. The Gemini family includes Ultra, Pro, and Nano models,\neach designed for different use cases. Gemini-Pro, used in this study, offers a balance of advanced\nlanguage processing and computational efficiency. It can handle various input types including text,\nimages, audio, and video, making it versatile for diverse applications.\nGPT-3.5-Turbo (gpt-3.5-turbo-0125): Part of the GPT (Generative Pre-trained Transformer)\nseries by OpenAI [8], GPT-3.5-Turbo is an improved iteration of the GPT-3.5 model. It offers\nenhanced accuracy in responding to specific format requests and improved efficiency. This model"}, {"title": "5.2 Simulation Evaluation", "content": "To evaluate the simulation, we focus on three aspects: (1) simulation effectiveness, (2) LLM reliability,\nand (3) the impact of external factors on simulated stock trading, as highlighted by our three\nresearch questions. The first two evaluations aim to establish a foundation for understanding how\nthe selection of LLM can affect the simulation. In contrast, the last evaluation aims to demonstrate\nthat our developed AI Agents can respond to external events and make reasonable trading decisions.\nSimulation Effectiveness. In response to RQ1, we use GPT and Gemini to trade stocks for\n10 trading days under the same premise and setup. We collect the transaction logs of each model\nto conduct price trend correlation, volume, and transaction frequency to judge the similarity of\ntrading volume. Combining these properties, we evaluate the effect of simulation based on different\nAI Agents and determine the trading preferences of LLMS.\nLLM Reliability. In response to RQ2, we investigate how AI agents, driven by different LLMs,\nmake trading decisions over multiple simulation rounds. Specifically, we aim to assess whether\nthe propensity to trade, influenced by prior LLM knowledge, can impact the decision reliability.\nTherefore, we simulate each AI Agent's longitudinal decision-making and analyze their trading\npatterns and outcomes.\nSimulated Stock Trading under External Conditions. In response to RQ3, we first identify\ntrading patterns through data analysis to analyze deviations in trading behavior in simulated stock\ntrading, focusing on frequency, timing, volume, and transaction decisions. Statistical methods can\nhighlight anomalies or notable deviations. We must also evaluate how these biases affect investment\nperformance, often by comparing trading returns against benchmarks. Tools like regression analysis\nand ANOVA help quantify the impact of behavioral bias on performance. Table 8 and Table 9 below\nmainly elaborate on the Evaluation method of our Research Questions and the experimental\nenvironment setting."}, {"title": "5.3 RQ1. Simulation Effectiveness", "content": "In this simulation effectiveness experiment, we use GPT-3.5-Turbo and Gemini-Pro as two backbone\nLLMs, respectively, to conduct simulated trading for 10 days under our standard experimental\nenvironment. The detailed settings are in Table 9."}, {"title": "5.3.1 Correlation of Price Movements.", "content": "In this part, we analyze the similarity of price movement on\ntwo 10-day trading data based on Gemini and GPT. We use the correlation coefficient to measure\nand visualize the linear relationship between the stock price time series of two stocks, Stock A\nand B. The visualization results of correlation analysis are listed as follows Figure 4. Based on\nthe experimental results, it is evident that GPT and Gemini exhibit different trading tendencies."}, {"title": "5.3.2 Trading Behavior Analysis.", "content": "In this part, we analyze the difference between GPT and Gemini-\ndriven AI Agents' trading behaviors, including trading volume, price, and frequency. From the\nresults shown in Table 10 and Table 11, we observe the trading preferences of the two LLMs from\nthe perspective of the trading volume. The trading volume of the GPT group is significantly higher\nthan that of the Gemini group, but the trading frequency of the GPT group is lower than that of the\nGemini group. This feature appears not only in Stock A but also in Stock B. We refer to the idea\nstock price A and B in Table 6 and Table 7. In addition, GPT agents are more cautious about their\ntrading decisions in Stock B than in Stock A. Regarding trading frequency, Gemini trades more\ndays, while GPT follows the trend."}, {"title": "5.3.3 Al Agent Features.", "content": "In this section, we focus on the AI Agent features. We compare the agents\nbetween traders and give a reasonable qualitative analysis. Further, we use clustering analysis to\ncluster according to the trading behavior of each AI Agent to see whether the trading crowd based\non the two models conforms to behavioral finance.\nWe collect each AI Agent's asset changes, earnings, stock holdings, and the number of stock\nA-shares bought and sold, clustered the situation of each Agent, and perform T-SNE visualization.\nAccording to the results in Figure 5, the investors of Gemini Agent have similar characteristics\nand only a very few investors show performance different from that of the general public in the\nvisualization results. However, in the T-SNE visualization of GPT agents, samples are relatively\nmore dispersed, which means that GPT-driven agents have more subjective decision-making ability\nand thus conduct fewer herd and trend transactions than Gemini."}, {"title": "5.4 RQ2. Large Language Model Reliability", "content": "Fig.6 and Fig.7 depict the final prices of Stock A and Stock B at the end of each trading day based\non the trading decisions made by GPT and Gemini-driven AI Agents, respectively. Overall, the\ntrading price change trend of the same stock on different LLMs is similar, but the final price gap at\nthe end of each trading day is large.\nThe comparison of Gemini and GPT-driven AI Agent trading behaviors reveals interesting\ninsights. First, both agents demonstrate similar overall trends for each stock, suggesting a com-\nparable underlying understanding of market dynamics. However, their execution strategies differ\nsignificantly. The Gemini-driven AI Agent exhibits a more conservative approach, with lower\nvolatility and smaller price ranges over a shorter trading period of about 450 rounds. In contrast,\nthe GPT-based agent displays a more aggressive strategy, allowing for larger price fluctuations\nover a much longer trading duration of approximately 1750 rounds. This results in higher potential\ngains but also increased risk.\nDespite these differences, both agents consistently show Stock A outperforming Stock B, indi-\ncating a shared ability to identify relative stock performance. The GPT-based AI Agent achieves\nhigher final prices for both stocks, while the Gemini-based AI Agent maintains more stable, albeit\nlower, prices. These observations indicate that while different LLMs share similar foundational\nknowledge of stock market behavior, their distinct abilities or implementations can lead to different\ntrading outcomes."}, {"title": "5.5 RQ3. Simulated Stock Trading under External Conditions", "content": "In this simulated stock trading experiment, we use Gemini-Pro as the baseline model to conduct\nan ablation study. The study simulates 30 rounds over 10 days under different experimental\nenvironments, removing financial information, BBS, financial state, loan, and interest change,\nrespectively. The detailed settings are presented in Table 9, and detailed experimental data can be\nfound in the Appendix B."}, {"title": "5.5.1 Transaction Pattern Recognition and Behavioral Analysis.", "content": "In this section, we analyze the\ntransaction pattern and transaction behavior through the analysis of the log results. First, here's a\ncomparison of stock price movements in different trading environments in Figure 8. The trading\nfrequency of Stock A and Stock B in each case is shown in Figure 9. According to our experimental\nresults, canceling the benchmark interest rate information significantly promotes Stock A's trading,\nwhile the lack of other information has little impact. The AI Agent is relatively sensitive to the\ninterest rate brought by the loan in the transaction style. The cancellation of the interest rate\npromotes the interest-free loan to a certain extent, which makes the Agent optimistic about the\ntransaction."}, {"title": "6 Discussion", "content": "In this study, we design a MAS called StockAgent to simulate stock trading activities. We utilize\ntwo widely used LLMs, namely GPT-3.5-Turbo and Gemini-Pro, to drive the simulation and test\nStockAgent's performance in an event-driven environment. Through comprehensive financial and\nstatistical analyses, we identify several key findings and implications in response to each research\nquestion, which are outlined below:"}, {"title": "6.1 Key Findings and Implications", "content": "In this study, we design a MAS called StockAgent to simulate stock trading activities. We utilize\ntwo widely used LLMs, namely GPT-3.5-Turbo and Gemini-Pro, to drive the simulation and test\nStockAgent's performance in an event-driven environment. Through comprehensive financial and\nstatistical analyses, we identify several key findings and implications in response to each research\nquestion, which are outlined below:\nDifferent LLMs can cause AI Agents to exhibit significant differences in trading behavior.\nWhen comparing GPT-based and Gemini-based AI Agents, we observe significant differences"}, {"title": "6.2 Opportunities for Future Work", "content": "This study opens several avenues for future work. First, we could perform more technical analysis\nby employing different trading strategies on the current platform, including in-depth research on\nindicators. For instance, we could explore the effectiveness of commonly used technical indicators\nsuch as Moving Average, Relative Strength Index, and Bollinger Bands under various market\nconditions. Additionally, we could integrate other aspects into the StockAgent system, such as\nalgorithm optimization, high-frequency trading strategies, risk management, market sentiment\nanalysis, and data visualization.\nIn addition, we could improve and strengthen the module design in several ways. For example,\nwe could improve and strengthen the sentiment analysis module, incorporating both the trading\nchanges caused by the external environment and the emotional impact of trading behavior on other\ntraders. We could also add customizable prompts into the module design, which could increase\nthe robustness of the overall trading system. As a result, enhancing the interpretability of the\nmodule design within the StockAgent could provide deeper insights into trading dynamics through\ndiscrete-time simulations.\nAnother future work could consider developing a stock market simulation experiment platform.\nThis platform could conduct customizable agent-based trading experiments across various stock\nmarkets. On this platform, we could also expand the variety of LLMs driving the simulation, increase\nthe number of trading days and rounds, and vary the number of traders to enhance the experiment's\nrobustness. The customizable platform can be tailored to the trading rules of specific exchanges in\nthe stock market, providing a comprehensive and adaptable simulation environment."}, {"title": "7 Conclusions", "content": "This study introduces StockAgent, an AI Agent framework driven by LLMs, designed to simulate\nstock trading in real-world environments. StockAgent replicates the processes and external con-\nditions of actual trading, offering valuable insights into AI Agent-based stock trading methods.\nThe framework is designed to mitigate the influence of historical stock trends on LLMs' prior\nknowledge, thereby freeing AI Agents to explore diverse trading patterns and preferences within\nthe stock trading environment. Our findings highlight significant differences between GPT and\nGemini-driven AI Agents in trading behavior, group tendencies, and responses to external fac-\ntors. These observations present opportunities for further research into the reliability of stock\nrecommendations and trading strategies based on LLMs."}, {"title": "Appendix", "content": "A Event-driven Prompts in Market and Agent Roles"}, {"title": "A.1 Stock Trading Drives Prompts", "content": "BACKGROUND_PROMPT.\nYou are a stock trader", "follows": {}}]}