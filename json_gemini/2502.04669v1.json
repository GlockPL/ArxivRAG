{"title": "A Comprehensive Review on Noise Control of Diffusion Model", "authors": ["Zhehao Guo", "Jiedong Lang", "Shuyu Huang", "Yunfei Gao", "Xintong Ding"], "abstract": "Diffusion models have recently emerged as powerful generative frameworks for producing high-quality images. A pivotal component of these models is the noise schedule, which governs the rate of noise injection during the diffusion process. Since the noise schedule substantially influences sampling quality and training quality, understanding its design and implications is crucial. In this discussion, various noise schedules are examined, and their distinguishing features and performance characteristics are highlighted.", "sections": [{"title": "I. INTRODUCTION", "content": "Machine learning has experienced exponential growth in re- cent years, with generative artificial intelligence (AI) emerging as one of its most significant branches. The increasing preva- lence of generative AI has led to its widespread integration into various aspects of daily life. A primary application of genera- tive AI is text generation, as demonstrated by platforms such as ChatGPT, which boasts over 180 million users engaging with Al for question answering, conversational interactions, and numerous other tasks. Beyond text generation, the demand for AI-driven image synthesis has been rapidly increasing. Advances in generative AI now enable the transformation of textual descriptions into entirely novel images. Given a set of input sentences, machine learning models can generate unique images that did not previously exist, facilitating creative and design processes across multiple industries. The broad applicability of AI-powered image generation has garnered significant academic and industrial interest, further driving research and development in this field. In the context of image synthesis, two primary types of models-discriminative and generative-can be utilized for static image generation, each with distinct methodologies and capabilities. A discriminative model [1]-[3] is a type of machine learning model designed to differentiate between distinct categories within a given dataset. In contrast, a generative model seeks to learn the underlying data distribution and leverage this knowledge to generate new data samples that resemble the original dataset. In the domain of image generation [4], generative models have become the predominant statistical approach for research and development [5]. Various methodologies have been proposed within this field, including Generative Adversarial Networks (GANs), Variational Autoencoders (VAEs), and Flow-based models. These approaches have demonstrated that generative artificial intelligence is capable of producing high-quality images that are perceptually coherent to humans. However, each method presents inherent limitations. Generative Adversarial Networks (GANs) consist of two neural networks: a discriminator and a generator, which are trained through an adversarial process formulated as a minimax game. While GANs have been highly successful in generating realistic images, they are known for challenges such as training instability and limited output diversity. These issues arise due to the adversarial training framework, where the generator and discriminator iteratively optimize against each other. A particularly notable challenge is mode collapse, in which the generator produces a narrow set of outputs rather than fully capturing the diversity of the data distribution. Variational Autoencoders (VAEs) are powerful generative models that integrate probabilistic reasoning with neural networks to learn and generate data from a compressed latent space. This latent space represents a lower-dimensional probabilistic distribution from which the original data can be reconstructed. Unlike other generative models, VAEs utilize a surrogate loss function derived from the Evidence Lower Bound (ELBO) to approximate the data likelihood. While this approach ensures greater training stability, it often comes at the cost of output fidelity, leading to generative results that tend to appear blurrier compared to those produced by Generative Adversarial Networks (GANs). Flow-based models, which facilitate tractable sampling and latent variable inference, employ a series of transformations applied to an initial prior distribution. These models rely on specialized architectural designs that enforce invertibility and reversibility, ensuring the exact computation of the likelihood function through bijective mappings. While these constraints enable precise likelihood estimation, they impose significant limitations on the model's flexibility and scalability, particularly when dealing with high- dimensional data spaces.\nGiven the limitations of existing generative models, diffu- sion models have emerged as the most prominent approach in AI-driven image generation, owing to their greater flexibility and fewer constraints. The introduction of diffusion models has significantly enhanced image generation and editing ca- pabilities, enabling high-quality image synthesis and modifi- cation. As their name suggests, diffusion models operate by progressively introducing noise into images during training. Diffusion models can also be employed to generate synthetic data that preserves privacy while maintaining the utility of the original data which benefits for privacy-preserving blockchain applications [6], [7]. The training process involves gradually corrupting images with noise and subsequently employing a neural network to learn the reverse process, effectively denois- ing the images to reconstruct the original data distribution. Once trained, the neural network is capable of generating entirely new images from scratch, serving as representations of the learned data distribution. The iterative process of noise addition and removal resembles the physical phenomenon of diffusion, hence the model's name. Unlike other generative approaches, diffusion models belong to a class of probabilistic generative models that transform random noise into structured data samples. A key factor influencing their performance is the noise schedule, which governs the rate at which noise is injected during the training and sampling processes. The choice of an appropriate noise schedule plays a crucial role in determining the quality of the generated images [8]\u2013[11], making it a critical parameter in diffusion-based image syn- thesis.\nWe begin by detailing the underlying mechanisms of the diffusion model."}, {"title": "II. DIFFUSION MODEL", "content": "Diffusion models utilize parameterized Markov Chains in their computational framework [12]-[15]. A Markov Chain represents a sequence of continuous states, where transitions between states occur according to a defined probability dis- tribution. A key characteristic of a Markov Chain is that the next state depends solely on the present state, rather than the entire sequence of preceding states.\nIn diffusion models, the Markov Chain is leveraged in conjunction with variational inference to facilitate data gener- ation. Variational inference is a technique used to approximate complex probability distributions that are computationally intractable to evaluate directly. During the diffusion process, a neural network is trained to learn the transition dynamics of the reverse diffusion process. The model is trained using Gaussian noise, which is progressively added during the forward process and subsequently removed during the reverse process. This iterative noise injection and removal allow the neural network to reconstruct high-quality data from an initially noisy input, making diffusion models a powerful framework for generative modeling."}, {"title": "A. MATHEMATICS", "content": "The original data sample is written as xo. A sequence of latent variables can be expressed as xo, X1, X2..., XT, all having the same dimensionality as 20. The whole process is constructed such that I follows a Gaussian distribution. The diffusion model denoises xr, which is filled with noise, to reconstruct the original data sample xo. We define q(xo) as the real data distribution that forms the data sample xo.\n1) FORWARD PROCESS: During the forward process, Gaussian noise is incrementally added at each iteration. This process can be effectively represented using a Markov Chain, where each state transition is governed by a predefined prob- ability distribution.\n$q(x_t | x_{t-1}) := N(x_t; \\sqrt{1 - \\beta_t} x_{t-1}, \\beta_tI)$ (1)\nHere \\is a variance schedule that exists in each iteration from Bo to Bt as \u03b2t \u2208 (0,1). Bt is the variance that decides how much noise is added to the q(xt-1) to obtain the next data distribution q(xt). The parameter {\u1e9et} is called noise schedule, as it controls the rate of noise addition from the original data distribution q(x0) to an approximately Gaussian distribution q(xt) [16], [17]. {\u1e9et} increases as t increases. The manner in which {\u1e9et} increases can take various forms, e.g., linear schedules and exponential schedules. The noise schedule is a critical factor in diffusion models, as it affects both performance and precision [18]. The nosing step from xo to xt is the product of all previous Markov chain transitions. The equation can be expressed as below\n$q(x_1,...,x_T | x_o) = \\prod_{t=1}^{T}q(x_t | x_{t-1})$ (2)\nMoreover, because every step in the forward process leverages Gaussian noise to transition from the previous state of the data distribution to the next step of the data distribution, based on Eq. 2 we can derive an equation from any q(xt) to q(xo):\n$q(x_t | x_{t-1}) = N(x_t; \\sqrt{1 - \\beta_t} x_{t-1}, \\beta_tI)$ (3)"}, {"title": "2) REVERSE PROCESS:", "content": "In contrast to the forward process, which progressively adds noise to the data distribution, the reverse process aims to remove noise and reconstruct the original data. This denoising, or reverse, process is facilitated by a deep learning model, which is trained to approximate the noise and ultimately learn to remove it from a Gaussian- distributed latent variable.\nA deep learning learn, parameterized by 0, is designed to learn the reverse noise transformation. By leveraging the transition probability q(xt | Xt\u22121), the model can effectively reverse the noise injection process, restoring xo from xt, where xt follows an approximate Gaussian distribution. To train the model, an appropriate loss function is minimized, allowing the network to learn to reconstruct the original data distribution or estimate the noise introduced by the forward process [16], [19].\n$P_\\theta(x_{0:T}) = p(x_T) \\prod_{t=1}^{T} P_\\theta(x_{t-1} | x_t)$ (4)"}, {"title": "3) LOSS FUNCTION:", "content": "In the diffusion models, the models are often trained by optimizing a variational bound with the negative log-likelihood. The posterior q(x1:T | 20) is closed to po(X1:T | X0). The diffusion model leverages Kullback- Leibler(KL) divergence, which is used to measure the simi- larity between two data distributions, to compare q(x1:T | X0) and po(X1:Txo) [16].\n- log po (xo) <\n- log po(x0) + DKL (q(x1:T | Xo) || Po(X1:T | Xo))\n=\n$\\mathbb{E}_{q(x_{1:T}|x_0)} [log\\frac{q(x_{1:T}|x_0)}{p_\\theta(x_{1:T}|x_0)} ]$\nSince logpe (xo) is hard to calculate, the variational lower bound (as known as Evidence Lower Bound, or ELBO) is used to approximate its value. The ELBO consists of a sum of KL divergences between forward and reverse conditional dis- tributions. It is important to note that KL divergence is always larger than or equal to zero, which explains the origin of the term \"lower bound\". Therefore, by minimizing the loss, we are maximizing the lower bound of the probability of generating real data samples. [2] When training the Gaussian diffusion models, the loss function is further simplified to enhance training efficiency by removing the weighting component of the original loss function [16], [20].\n$L_{simple} (\\theta) := \\mathbb{E}_{x_0, \\epsilon \\sim N(0, I), t} [\\epsilon - \\epsilon_\\theta(\\sqrt{\\bar{a}_t} x_0 + \\sqrt{1-\\bar{a}_t} \\epsilon, t)]^2$\nTraining with the simplified loss function allows the denoising process to prioritize more challenging tasks, such as removing large amounts of noise at higher values of t, while placing less emphasis on simpler tasks, such as eliminating smaller noise levels. This optimization strategy enhances the model's ability to generate higher-quality samples when synthesizing new data [16]."}, {"title": "III. NOISE SCHEDULE", "content": "As previously discussed, diffusion models are a class of gen- erative artificial intelligence models trained through a process of iterative denoising of random noise. The forward process involves progressively adding noise to the data distribution until the training data converges to a purely Gaussian noise distribution. Conversely, the reverse process seeks to remove this noise to reconstruct the original data.\nDuring both the forward and reverse processes, noise is added or removed in small increments or decrements over a sequence of time steps. The rate of noise addition or removal over time is referred to as the noise schedule, which plays a critical role in the training of diffusion models [21].\nAn inadequately chosen noise schedule can significantly impact model performance. A slow noise schedule can lead to inefficiencies in training, increasing computational time. Ad- ditionally, an improperly selected noise schedule can degrade the quality of generated samples. For instance, applying the same noise schedule to images of different resolutions can lead to poor image reconstruction and information loss [21].\nThus, selecting an appropriate noise schedule is essential for optimizing the performance and efficiency of diffusion model training. Diffusion models define the noise injection process as following:\n$x_t = \\sqrt{1 - \\beta_t} x_{t-1} + \\sqrt{1 - \\beta_t} \\epsilon_{t-1}$ (5)\nwhere xo represent the input data distribution, and let e be a sample drawn from a Gaussian distribution. The variable t denotes the timestep in the noise schedule, where t \u2208 [1,T], and T represents the total number of noise schedule steps. The variable xt corresponds to the data distribution at timestep t, while \u00dft is a continuous value within the range (0,1) expressed as {$ \\beta_t \\in (0,1)$}\\_(t=1)^T [16]. As the t increases, Xt progressively converges toward a pure Gaussian noise distribution."}, {"title": "A. COMMON NOISE SCHEDULE", "content": "Next, we introduce several commonly used noise schedules that are widely employed in the process of diffusion models.\n1) LINEAR SCHEDULE: A linear schedule is a noise scheduling strategy in which noise is added or removed at a constant rate throughout the diffusion process. The linear noise schedule strategy is a straightforward approach commonly employed in various diffusion processes, such as DDPM [16]. The variance parameter \u00dft increases uniformly from an initial small value \u00dfo at the first timestep to a final value \u1e9er at the last timestep. During the reverse process, the noise level decreased linearly. For any t \u2208 [1,T], the noise follows this predefined linear progression.\n$\\beta_t = \\beta_1 + \\frac{t-1}{T-1} (\\beta_T - \\beta_1)$ (6)\nwhere T represents the final timestep, \u03b2r denotes the final noise level, t is the current timestep, Bt is the current noise level, and B\u2081 corresponds to the initial noise level. The complexity of learning the noise removal process gradually increases over time. Initially, when betat is small, only a minor amount of noise is introduced into the data distribution. As betat increases linearly, the denoising task becomes progres- sively more challenging, requiring the model to learn how to remove larger amounts of noise at later timesteps. Although the linear noise schedule is straightforward to implement, it lacks flexibility, as noise is added in a uniform and unadaptive manner, without consideration of the underlying data distribu- tion.\n2) FIBONACCI SCHEDULE: A Fibonacci noise schedule is derived from the first T terms of the Fibonacci sequence. The function is defined as follows [22]:\n$\u03b2_\u03b7 = \u03b2_{\u03b7-1} + \u03b2_{n-2}$ n \u22652 (7)\nwhere we define the two numbers of the Fibonacci sequence are defined as follows: \u03b20 = 1\u00d710-6, \u03b2\u2081 =2\u00d710-6. In the figure 2 [22], in comparison to the linear noise schedule, the Fibonacci noise schedule exhibits a distinct pattern in noise level progression. Initially, the noise level changes gradually; however, at certain points, it decreases significantly, reflecting the characteristic growth pattern of the Fibonacci sequence. Unlike the linear noise schedule, which follows a constant rate of change, the Fibonacci noise schedule is nonlinear and demonstrates a self-similar growth pattern in noise distribu- tion.\n3) COSINE SCHEDULE: Instead of increasing noise in a linear fashion, a cosine noise schedule employs a smooth, non- linear function that follows a trajectory similar to the cosine function. This scheduling approach is inspired by the math- ematical properties of the cosine function, providing a more gradual and adaptive noise progression. With \u1e9et = 1$\\frac{\\bar{a}_t}{\\bar{a}_{t-1}}$, we define COSINE noise schedule in terms of \u0101 as following function:\n$\\alpha_t = \\frac{f(t)}{f(0)}$ , $f(t) = cos(\\frac{t/T + s}{1+s} \\frac{\\pi}{2})^2$ (8)\nwhere s is a small constant offset introduced to prevent \u1e9et approaching zero at the beginning of the timestep [23]. The relationship between \u1e9et and \u0101 is defined as follows: \u1e9et = 1-$\\frac{\\bar{a}_t}{\\bar{a}_{t-1}}$ [23]. This design ensures that the rate of change in the noise schedule is highest when \u0101 is at its midpoint, resembling a linear drop-off. However, as the timestep approaches 0 or T, the rate of change smooths out, meaning that only a minimal amount of noise is added to the data distribution in these regions. The key distinction between the cosine noise schedule and the linear noise schedule lies in their handling of denoising complexity. The cosine schedule delays the more challenging denoising tasks until after the midpoint of training, which leads to improved sample quality, enhanced training efficiency, and faster convergence [23].\n4) SIGMOID SCHEDULE: Similar to cosine schedule, the sigmoid noise schedule exhibits a smooth rate of change compared to the linear noise schedule. The sigmoid function transitions gradually from 0 to 1, with its steepest slope occurring around x = 0. At each timestep t, the sigmoid noise schedule is defined by the following function [24]:\n$\\alpha_t = \\frac{sigmoid((t-T)/4)+5) + sigmoid(\\frac{T}{4})}{sigmoid(\\frac{T}{4}) - sigmoid(-\\frac{T}{4})}$ (9)\nwhere s represents the starting point of the sigmoid function's range, while t denotes its endpoint. The parameter 7 serves as a temperature coefficient, typically varying around 1. Selecting an appropriate temperature parameter allows for reducing the noise level's influence towards the end of the diffusion process, thereby optimizing the denoising performance [24]. The sigmoid noise schedule begins with a gradual increase and transitions smoothly toward the end. This characteristic enhances the stability of the sigmoid noise schedule and helps mitigate abrupt transitions that could negatively impact sample quality at the beginning and end of training. For high- resolution images, which exhibit greater redundancy among neighboring pixels, the sigmoid noise schedule demonstrates greater stability compared to the cosine noise schedule [24].\n5) EXPONENTIAL SCHEDULE: As the name suggests, the exponential noise schedule defines the rate of noise change in a manner that follows an exponential growth pattern. This schedule is designed to ensure that \u1e9et increases exponentially as the timestep t progresses. The function governing the exponential noise schedule is given by:\n$\\beta_t = \\beta_{min} (\\frac{\\beta_{max}}{\\beta_{min}})^{\\frac{t-1}{T-1}}$ for t\u2208 [1,T]. (10)\nwhere min = \u03b2\u2081 at t = 1, \u03b2max = \u03b2\u0442 at t = T. With the function of exponential noise schedule,, the rate of noise increase accelerates rapidly at the beginning compared to the linear and cosine noise schedules. This characteristic makes the exponential noise schedule particularly advantageous in scenarios where the model benefits from the rapid introduction of noise, such as when early-stage features are crucial for effective learning.\n6) CAUCHY DISTRIBUTION: The Cauchy distribution is a heavy-tailed probability distribution [25] that can be utilized as a noise schedule in the diffusion process. Within the Cauchy distribution framework, the noise schedule is defined as follows:\nBt = constant \u00d7 fCauchy(t) (11)"}, {"title": null, "content": "where fCauchy (t) = f (t; x0,y) = $\\frac{1}{\\pi \\gamma}\\frac{\\gamma}{(t-x_0)^2 + \\gamma^2}$ and represent the scale parameters, which define the width of the peak of the Cauchy distribution. This implies that the noise level reaches its maximum when t is close to xo, as a key characteristic of the Cauchy distribution is that its peak is concentrated nearxo, with the noise level decreasing in a heavy-tailed manner as t increases. The Cauchy distribution exhibits a gradual rate of change at the beginning, followed by a sharp transition near the peak. Unlike most conventional noise schedules, such as the cosine schedule, where the noise level changes smoothly and continuously over time without abrupt variations [25], the Cauchy distribution introduces more localized variations. Additionally, as a heavy-tailed probability distribution, the Cauchy distribution assigns greater weight near its peak while maintaining heavier tails. This property makes the Cauchy distribution a preferred choice when the noise needs to be concentrated within a specific range of time steps, allowing for controlled noise generation over the diffusion process.\n7) LAPLACE DISTRIBUTION: The Laplace distribution is a continuous probability distribution that can be utilized as a noise schedule in the diffusion process. It is defined as follows:\n$f(t; \\mu, b) = \\frac{1}{2b} exp(-\\frac{|t-\\mu|}{b})$ (12)\nwhere u and b are the parameters that determine the center of the peak and the width of the distribution, respectively. A Laplace distribution noise schedule concentrates the majority of noise injection around its center, meaning that more noise is introduced during mid-range timesteps. Since a greater proportion of noise is generated at mid-range timesteps, this scheduling approach can be computationally efficient, offering improved performance under resource-constrained conditions [25].\n8) LOGISTIC SCHEDULE: Like the cosine noise schedule, the logistic noise schedule exhibits a smooth rate of change compared to the linear noise schedule. It maintains a gradual transition over discrete timesteps t, ranging from 1 to T. A key characteristic of the logistic schedule is that it introduces noise slowly at the beginning, followed by a rapid increase in the noise change rate around the midpoint of training [26]. This structure helps preserve critical features of the training data. As t approachs T, the rate of noise increase gradually smooths out, mirroring the behavior observed at the start of the process. The logistic noise schedule can be expressed as follows:\n$\u03b1_t = \\frac{1}{1+e^{-k (t-t_0)}}$ (13)\nwhere k and to are hyperparameters that govern the behavior of the logistic noise schedule. The parameter k is a steepness coefficient that controls how the curve evolves over time, determining how rapidly the function transitions from near 0 to near 1. Meanwhile, to defines the midpoint of the curve, representing the timestep at which the transition from low to high noise levels occurs, typically around 50% of the curve's progression. The logistic noise schedule begins with a gradual increase in noise and transitions smoothly towards the end. This characteristic enhances stability and helps mitigate abrupt transitions that could negatively impact sample quality at both the beginning and end of training. By preserving the integrity of the original data distribution xo, this approach contributes to improved training stability and overall generative performance. As shown in figure2 [26], the noise value varies across different types of noise schedules. here, \u0101t applies reparameterization [16] to express xt at any timestep t in terms of xo and B. In this parameterization, at is introduced as a replacement for \u1e9e to facilitate the trans- formation process. The expressions are listed as following: at := 1 - \u1e9et and \u1fb6\u03c4 := \u03a0-1 \u03b1\u03c2.\n$x_t = \\sqrt{a_t} x_o + \\sqrt{1 - \\bar{a}_t} \\epsilon$ (14)\nThe figure2 illustrates a linear change in noise levels during the midpoint of the diffusion process. By adhering to the continuous dynamics of the diffusion process, this approach minimizes unintended deviations and reduces errors, resulting in more accurate and stable latent predictions. Consequently, it improves the overall fidelity of the inversion process [26].\n9) MONOTONIC NEURAL NETWORK: Instead of em- ploying a fixed noise schedule, a learned noise schedule can be utilized, specifically one modeled by a monotonic neural network with a sigmoid-like function [27]. The noise schedule is optimized through the following parameterization:\n$\\sigma_t = sigmoid(\u03b3_\u03b7(t))$ (15)\nwhere \u03b3\u03b7(t) represents a monotonic neural network parame- terized by \u03b7, which satisfies the boundary condition SNR(t) < SNR(s) for any t > s. The neural network consists of three linear layers with output dimensions of 1, 1024, and 1, respectively. The equation at = $\\sqrt{1 - \u03c3_t}$ is employed to simplify the parameterization, leading to the formulations: \u03c3t = sigmoid(-(t)) and SNR(t) = exp(-(t)) [27]. This formulation enables the noise schedule to become a set of learnable parameters, allowing diffusion models to dynamically optimize the manner in which noise is added over time. This approach not only leads to lower variance estimates, resulting in faster and more stable training compared to fixed, handcrafted noise schedules [27], [28], but it also excels at generating robust representations of data and can be used to enhance or denoise feature extraction from sensor inputs. For instance, it leads to improving landmark detection and reliable keypoint matching [29]-[31]."}, {"title": "IV. CONCLUSION", "content": "The noise schedule plays a critical role in the diffusion process. Thus, selecting an appropriate noise schedule can significantly enhance the performance and quality of diffusion- based generative models [18], [32]. However, there is no universal noise schedule that is optimal for all diffusion processes. Instead, different noise schedules perform more effectively under specific conditions. For instance, the sigmoid noise schedule demonstrates superior performance compared to the cosine noise schedule when applied to high-resolution images. Additionally, the impact of noise schedules varies not only across different scenarios but also at different stages of the diffusion process. For example, during training, the sigmoid noise schedule provides greater stability than the cosine noise schedule. However, during the sampling stage, the difference in performance between these two schedules is less significant [24]. Moreover, even within the same noise schedule, parameter adjustments can lead to substantial vari- ations in performance. As shown in Table 1 [18], [33], the effectiveness of a noise schedule can vary based on different parameter settings. Therefore, to achieve optimal performance in the diffusion process, it is essential to explore different noise schedules and fine-tune their parameters accordingly."}]}