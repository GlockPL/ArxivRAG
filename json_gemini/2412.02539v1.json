{"title": "Graph-Powered Defense: Controller Area Network Intrusion Detection for Unmanned Aerial Vehicles", "authors": ["Reek Majumder", "Gurcan Comert", "David Werth", "Adrian Gale", "Mashrur Chowdhury", "M Sabbir Salek"], "abstract": "The network of services, including delivery, farming, and environmental monitoring, has experienced exponential expansion in the past decade with Unmanned Aerial Vehicles (UAVs). Yet, UAVs are not robust enough against cyberattacks, especially on the Controller Area Network (CAN) bus. The CAN bus is a general-purpose vehicle-bus standard to enable microcontrollers and in-vehicle computers to interact, primarily connecting different Electronic Control Units (ECUs). In this study, we focus on solving some of the most critical security weaknesses in UAVs by developing a novel graph-based intrusion detection system (IDS) leveraging the Uncomplicated Application-level Vehicular Communication and Networking (UAVCAN) protocol. First, we decode CAN messages based on UAVCAN protocol specification; second, we present a comprehensive method of transforming tabular UAVCAN messages into graph structures. Lastly, we apply various graph-based machine learning models for detecting cyber-attacks on the CAN bus, including graph convolutional neural networks (GCNNs), graph attention networks (GATs), Graph Sample and Aggregate Networks (GraphSAGE), and graph structure-based transformers. Our findings show that inductive models such as GATs, GraphSAGE, and graph-based transformers can achieve competitive and even better accuracy than transductive models like GCNNs in detecting various types of intrusions, with minimum information on protocol specification, thus providing a generic robust solution for CAN bus security for the UAVs. We also compared our results with baseline single-layer Long Short-Term Memory (LSTM) and found that all our graph-based models perform better without using any decoded features based on the UAVCAN protocol, highlighting higher detection performance with protocol-independent capability.", "sections": [{"title": "INTRODUCTION", "content": "Unmanned Aerial Vehicles (UAVs), and their commercial variants, drones, have seen phenomenal growth in the past decade, with their application becoming ubiquitous, seemingly in every domain, from product delivery to agriculture, surveillance, and environmental monitoring. Deployment of UAVs with diverse sensors and communication technology provides significant business benefits, such as cost reduction, efficiency improvement, and capability for many different commercial sectors. By 2026, in the United States alone, drone applications will have an annual impact on the country's GDP in the range of USD 31 billion to USD 46 billion, driven by innovations in UAV technology and developments in application areas (1).\nElectronic Control Units (ECUs) are the main vital component in the modern UAV system. The main responsibilities of ECUs include controlling and managing the electrical subsystems of a UAV. For instance, ECUs are considered the brains of UAVs, processing data from sensors and executing commands to ensure smooth and safe operations. Most of the ECUs used in such systems are connected through the common Controller Area Network (CAN) bus, which is one of the well-known vehicle bus standards that is widely used in automotive and aerospace applications (2, 3). The CAN bus facilitates communication between microcontrollers and devices without host computers. It implements strategies to control networking issues like error detection, data integrity, and data consistency (4). So, the CAN bus provides simple, efficient, and cost-effective solutions for networking in UAVs by enabling real-time communications between UAV modules, controlled feedback, and monitoring critical systems (5).\nThe security of CAN bus networks is critical, particularly as UAVs are increasingly integrated into a complex and potentially hostile environment. However, the CAN bus provides low latency and reliable network communication features. Still, it lacks integrated security features like authentication, authorization, data encryption, and network segmentation, which could make it vulnerable in potentially hostile UAV environments (6). With UAVs now integrated with more complex environments, this security gap could allow them to be compromised, especially if the ECUs have to communicate outside the network to gain more situational awareness (7\u20139). Several vulnerabilities have been documented, such as command injection attacks via DJI universal markup language (DUML) on DJI drones, which include about 94% of the world's consumer and commercial drones. During this attack, the attacker exploits DUML commands to disrupt the communication between the drone and the Remote Controller (RC) communicating via the OcuSync protocol (10). Furthermore, commercial drones, such as Amazon Prime Air's delivery drones, have recently received a Beyond Visual Line of Sight (BVLOS) clearance from the Federal Aviation Administration (FAA) for its MK27 aerial drone (11). This could make drones more vulnerable to cyberattacks where attackers could potentially gain control of a drone's navigation either by signal jamming or GPS spoofing to divert it from its intended path or steal it (12). For example, in a high-profile incident, Iran intercepted and gained control of a US RQ-170 sentinel stealth drone with BVLOS capability. By jamming its GPS and exploiting navigation vulnerability, Iranian forces mislead the UAV, causing it to land within Iranian territory (13). These examples exemplify the need for embedded IDS to detect and prevent unwanted access in real-time, reducing the risk of security breaches.\nUAV networks are becoming increasingly dependent on seamless connectivity, making them susceptible to attacks such as GPS-spoofing, jamming, malware injection, and denial of service (DoS) during dynamic drone missions or multi-drone operations. The cost of neglecting cybersecurity measures in UAVs might have a serious economic and social risk. For example, a compromised drone in a commercial sector, specifically in a supply chain application, could"}, {"title": "", "content": "disrupt operations and lead to financial loss. Some vulnerabilities include attacks on crucial ECUs like Flight Controller Units (FCUs) via CAN bus. At the same time, some are linked to ground- based control systems and external communication, which can increase attack surfaces for UAVs, compromising the safety and functionality of the UAVs.\nEnhancing threat detection through IDS in UAVs can generate a strong return on investment (ROI) by reducing the risk of mission failure, data breaches, and operational downtime, representing significant cost savings (14). In sectors like drone delivery, where companies like Amazon are focusing on using drones to improve delivery time, an attack on these operational drones will lead to disruption of fleet operations, delayed deliveries, damage to their reputation, and lost revenue. In defense applications, compromised UAVs will lead to classified data breaches, potentially costing the government millions and compromising national security (15).\nThe following steps are crucial as they need collaboration from the manufacturers of UAVs, the cyber security specialists, and the government regulatory bodies. Firstly, the manufacturers must focus on designing UAVs with IDS capabilities so that high-performance intrusions, such as message injection and jamming, can be detected in real-time without additional hardware (16). Secondly, cyber security experts need to work closely with the manufacturers to update deployed IDS systems and make them adaptable to new threats. Thirdly, regulatory agencies, such as the FAA and the European Union Aviation Safety Agency (EASA), should define cybersecurity standards for consumer and commercial UAVs to ensure deployed drones have sufficient security resilience. These steps will help minimize the financial losses that might occur due to cyberattacks on drones and improve their reliability for multiple domains (14).\nFor a cyber-secure future for drones, extensive research is being conducted to create intrusion detection systems (IDSs) based on numerous features that have been proposed to safeguard UAV's CAN bus networks (17). These studies suggest that the cost associated with integrating robust IDS is much less than the financial loss of a cyberattack that may lead to serious data breaches, security, and privacy issues. The integration of an Intrusion Detection System (IDS)"}, {"title": "", "content": "into UAV communication networks is depicted in Figure 1. It illustrates how IDS can work against injected attack messages aimed at compromising communication interfaces and ECUs. This configuration exhibits how the IDS safeguards the network and maintains operational integrity by guarding against possible ECU compromises.\nThere are two major issues with currently available IDSs; first, some solutions require understanding the details provided by the CAN protocol or altering it by adding some authentication field. This becomes a challenge for many modern vehicles, such as UAVs, that use closed-source protocols, making these solutions impractical to apply in the real world. Secondly, some IDSs use advanced machine learning models that require large amounts of carefully labeled CAN messages, including attack and non-attack scenarios. Compiling data for various attacks can be challenging in generating an effective classifier (5, 18). Our method aims to overcome these issues by proposing a CAN protocol-independent but density-based parameter-monitoring system.\nImplementing advanced IDS may include specific hardware such as a hardware security module (HSM), which will support a secure boot process, or a processor with cryptographic acceleration capability like AURIX TC399, which can support data encryption. Implementing a secure boot process or adding hardware like AURIX TC399 will significantly increase the cost of implementation (4). This investment can be considered reasonable if a cyberattack on a UAV system can compromise mission-critical data and the safety of people or resources, which can further lead to financial loss in commercial and military applications (19). Due to the high cost of specific hardware related to security approaches in UAVs, this study presents the design, development, and comparison of different graph-based IDS models with the Long Short-Term Memory (LSTM) based IDS for Uncomplicated Application-level Vehicular Communication and Networking (UAVCAN) protocol to address various injection attacks. As LSTM-based or other deep learning-based IDS demands more computing power from UAVs, they often require GPUs or specialized processors like NVIDIA Jetson Nano or Xavier, which significantly increases the cost (20). These processors require higher power than microcontroller ARM Cortex-M, and may also need a battery upgrade. In contrast, graph-based IDS can run on low-powered devices such as microcontrollers with ARM Cortex-M that prioritize energy efficiency, which is ideal for different UAV applications (21). For instance, GraphSAGE hybrid implementations using Field Programmable Gate array (FPGA) and Central Processing Unit (CPU) have shown notable latency reductions without requiring a large amount of GPU resources, which makes these models appropriate for on-device inference systems with minimal computational cost (22).\nWe hypothesize that utilizing graph-structure data can enhance the IDSs by leveraging the structural properties of a graph, thus making communication through the CAN bus more resilient to injection attacks. Thus, this setup will improve the IDS system's performance in UAV and meet the UAV's real-time processing requirement without the necessity of investing and integrating specialized hardware, which increases cost and power consumption. The key contributions of this paper include using dynamic weighted graphs generated from the flow of CAN messages and their structural properties, creating and analyzing several graph-based machine learning models such as graph convolutional neural networks (GCNNs), graph attention networks (GATs), Graph Sample and Aggregate Networks (GraphSAGE), and graph structure-based transformers for developing a protocol-independent IDS."}, {"title": "LITERATURE REVIEW", "content": "UAVs are evolving from simple remote-controlled aerial devices to fully autonomous systems that rely on complex networks of sensors and controllers for their operations. Integrating"}, {"title": "", "content": "asynchronous half-duplex communication protocols, such as CAN buses in UAVs, makes them more vulnerable to cyberattacks than those targeting automotive systems. Thus, it emphasizes the need for more robust and reliable IDS systems for UAV networks. Though both UAVs and autonomous systems use the CAN bus protocol for reliable and fast real-time communication, the application scenarios provide some key differences. Automobile CAN buses often interoperate with additional networks such as LIN (23) or FlexRay (24) to process hierarchical data, minimize cost and improve performance. On the other hand, UAVs focus on a centralized and compact CAN bus structure to address stringent dimensions, weight and energy requirements. In addition, security concerns differ significantly because automotive CAN buses are typically confined to a vehicle and have security focused on the vehicle, while UAVs use wireless communications channels for remote operation, leaving their CAN bus networks vulnerable to a broader spectrum of remote attacks (25). Thus, it emphasizes the need for more robust and reliable IDS systems for UAV networks.\nA CAN provides a dedicated, dependable, and effective communication channel for all in- vehicle-connected ECUs, sensors, and systems. It is widely accepted as a standard for in-vehicle communication systems. Recent studies have shown that CAN is vulnerable to various cyberattacks such as denial of service (DoS), spoofing, fuzzy, flooding and replay attacks (26, 27) due to a lack of security measures like authentication, authorization, and encryption schemes within the protocol (28\u201330). These attacks compromise the network's confidentiality, integrity, and availability by introducing fake messages to the CAN bus. Figure 2 depicts several possible security threats to UAV ECUs communicating through the CAN bus interface.\nTechniques like network segmentation, encryption, and authentication have been proposed to enhance the security of the CAN bus, thus mitigating attacks through vehicular networks. These methods will stop attacks by automatically initiating predefined policies against unknown threats (31, 32). Network segmentation improves CAN bus security by creating subnetworks, which control access to specific segments of the network (33). Another method includes encrypting data from the CAN frame using a dynamically changing symmetric key generator (34). Some research efforts have combined encryption and authentication of CAN messages using the stream cipher RC4 (35). However, integrating authentication, authorization, and encryption solutions poses a significant challenge, especially when modern vehicles demand real-time communication. To address this drawback, other IDS were investigated (36, 37). The IDS for in-vehicle networks can be divided into four types: fingerprints-based (38, 39), parameters-monitoring-based (40\u201342), information-theoretic-based (43), and machine-learning-based systems (44, 45). Our proposed method falls into the parameter-monitoring and machine learning-based systems class, where we track the density (42) of a particular CAN ID and use it as a feature for graph-based machine learning (GB-ML) models.\nIn recent years, the emergence of new types of malwares has accelerated alarmingly. This trend highlights the necessity for an algorithm to handle future unknown attacks, as signature- based methods are only effective against known attacks. Researchers have presented various machine-learning and deep-learning-based IDS. In (46), proposed a support vector machine-based classification of regular and anomalous CAN frames. Similarly, (47) uses deep neural network- based packet classification. Another method, based on time-series analysis using a Long Short- Term Memory (LSTM) based IDS (44), showed a performance of over 87% for potent replay attacks. LSTM approaches were studied in depth in Machine Learning-based Intrusion Detection Systems (MLIDS) in (48), and it was found that these models can slow down execution in a low- resource environment, specifically when considering UAVs with other sensors. A study evaluated"}, {"title": "", "content": "the quantum-restricted Boltzmann machine (45) and hybrid quantum-classical neural network (49) for CAN intrusion detection, leveraging advancement in quantum technology to improve detection capabilities. However, these methods will still take some time to be implemented in real-time due to resource constraints in quantum machines(50, 51).\nRecently, research on GB-ML models has drawn much attention because of the use of graphs in large language models (52). The latter can be designed to store knowledge about related data items and their context, and GB-ML can be used to harness that information. Some graph- based anomaly detection strategies incorporate evaluation metrics as background knowledge. For example, in (53) background knowledge is added as a rule coverage reporting the percentage of the final graph covered by the instances of the substructure. They hypothesize that anomalous structures can be detected by giving negative weights to rules. In (54), the authors present graph- based outlier detection using real-time home IoT traffic as graph streams to detect DoS attacks while processing graph data in real-time.\nBesides anomaly detection, GB-ML techniques have also been applied to enhance IDSs in various network infrastructures, such as the CAN bus in automobiles. In (6), a graph-based approach was combined with a variational autoencoder (VAE) to train the classifier on positive samples only. Similarly, a graph convolution neural network (GCNN) to analyze CAN data was utilized in (55). This approach minimized the need for extensive feature engineering and excelled in detecting mixed attacks, such as combinations of DoS, fuzzy, spoofing, and replay attacks.\nDespite significant advances in GB-ML, there is a significant lack of comprehensive research applying it to real-world, large-scale systems. The potential for generalization of GB-ML approaches across attacks and environments remains largely underexplored. This creates a promising avenue for future research that could lead to robust, scalable, and adaptive IDSs capable of securing critical systems."}, {"title": "BACKGROUND", "content": "This section covers the introduction of the CAN bus and the security flaws discovered in the CAN bus. We also discussed the UAVCAN protocol built by the UAV community to improve drone network security. Furthermore, we discuss various attacks on UAVCAN protocol via CAN bus."}, {"title": "Controller Area Network (CAN)", "content": "Robert Bosch invented CAN, a serial communication protocol, in the early 1980s (56). Since it was invented, CAN has been used extensively to network ECUs in vehicles and in controlled systems, avoiding complicated wiring circuits. Figure 3 shows two specifications of the CAN protocol: CAN 2.0A and CAN 2.0B. In both cases, the CAN message starts with the SOF bit to indicate that the new frame has started. The arbitrator field differs between CAN 2.0A and CAN 2.0B, where CAN 2.0A accepts only 11-bit identifications and CAN 2.0B accepts both 11- bit or 29-bit identifications. On CAN 2.0A, the arbitration field contains an 11-bit identifier and then a Remote Transmission Request (RTR) bit to discriminate remote frames from data frames, while on CAN 2.0B there is an 11-bit identifier, Substitute Remote Request (SRR) bit, IDE bit followed by an 18-bit identifier which is used during 29-bit identifications. SRR behaves just like RTR for CAN 2.0A, while the IDE extension flag is specified if the code requires a 29-bit format. The control field contains two reserved bits (r1 and r0) to allow future expansion and a Data Length Code (DLC) to define the size of data in the data field. The data field contains the actual data being passed. Cyclic redundancy check (CRC) is a 15-bit code with a delimiter, which is present in both the specification and guarantees data integrity by finding faults in the transmitted data. After the CRC there is an acknowledgment (ack) bit and then a delimiter, where the receivers confirm that the message has been received successfully. Finally, there is the End of the Field (EOF), which indicates the message ending, and the Intermission (INT) field for the bus to be inactive."}, {"title": "Uncomplicated Application-level Vehicular Computing and Networking (UAVCAN) protocol", "content": "UAVCAN is a lightweight protocol based on CAN 2.0B specification that offers secure communication for modern vehicles such as UAVs. It is a decentralized network, thereby avoiding a single point of failure. Nodes in the network can broadcast messages or invoke services to communicate with one another, which is uniquely identified by their numerical IDs. The UAVCAN protocol uses the principles of publish/subscribe for message broadcasting between multiple network nodes, permitting the transfer of actuator commands, status data, and sensor data. Moreover, for the service invocation, the protocol involves a two-step peer-to-peer process for node configuration and firmware updates. During the service invocation process, a server receives a request from a client node and processes it before responding to it. The data used in this study is defined based on UAVCAN protocol specifications."}, {"title": "Graph-Based Models", "content": "Graph-based models have been increasingly utilized to interpret data as graphs rather than in traditional tabular format, offering unique advantages in classification tasks. These models leverage the inherent relationships and structures within graph data, making them well-suited for various applications, including intrusion detection in UAVCAN networks. These models can be briefly categorized into transductive and inductive models."}, {"title": "Transductive Models", "content": "Transductive learning refers to when the model is trained and tested on the same graph, making predictions about nodes and edges that are present in the training graph. These models do not generalize to new nodes or graphs and are often confined to the graph used during training. The full graph structure is used during training, thus allowing the model to have better-learned embeddings (or representations) of the nodes within the same network. This often leads to better performance as the models have inherent knowledge about the entire graph and its nodes. However, transductive models cannot generalize new nodes or graphs, thus making them less adaptable to dynamic graph scenarios, where new nodes or edges are frequently added or removed. One such example of a transductive model is GCNN.\nThe concept of Convolution Neural Networks has been extended to graph-structured data by GCNNs. Convolution operations are carried out among the nodes of a graph, aggregating feature data from a node's neighbors to create new feature representations. This method works well when the underlying data distribution is greatly influenced by connection patterns or graph structure."}, {"title": "Inductive Models", "content": "Inductive learning refers to the scenario where models are trained on a portion of the graphs and then make predictions about nodes and edges previously unseen by the model. These models are beneficial when there is a sequence of dynamic graphs where nodes and edges are constantly added or removed. Because of their flexibility, inductive models can be evaluated on graphs different from the training graphs. GAT, GraphSAGE, and Graph-Based Transformer are inductive learning-based graph models that we have used.\nGAT incorporates an attention mechanism into the graph convolution process to weigh the importance of neighboring nodes in the graph. This mechanism focuses on the most relevant information in a graph by giving attentional scores to nodes more relevant to the task performance, thus enhancing the ability to detect subtle anomalies.\nGraphSAGE is an inductive learning framework that generates node embeddings by sampling and aggregating features from the node's local neighborhood. This makes it suitable for dynamic and evolving network graphs like the ones generated in this study from CAN bus messages. By sampling a fixed number of neighbors compared to an entire neighborhood, GraphSAGE can be scaled to large graphs. Several different aggregation functions, such as mean, Long Short-Term Memory, or pooling, could be used to aggregate features of sampled neighborhoods, making it possible to capture different kinds of relationships in the graph.\nTransformers were originally created for Natural Language Processing, which involves sequences to sequences tasks. Transformers have been modified for the use of graph-based data because of their capacity to detect long-range relationships via self-attention mechanisms. This enables the model to capture local and global structures by simultaneously considering the relationships between every pair of nodes in the graph. This capability makes graph based-"}, {"title": "", "content": "transformer powerful in detecting complex and long-range interactions that might indicate an intrusion."}, {"title": "DATASET", "content": "The Hacking and Countermeasure Research Lab (HCRL) provides the dataset used in this research (26). A testbed was constructed using drones equipped with Pixhawk 4 (PX4) autopilot systems. The PX4 was connected to four Electronic Speed Controllers (ESCs) that control the motors via a serial CAN bus. The CAN bus was linked to Raspberry Pi 4, allowing for the reading, copying, and injecting of messages into the CAN bus. Various insertion attacks considered in this study are explained in the following subsections. Based on the different types of attacks and their corresponding settings, we defined a total of ten scenarios, as presented in Table 1."}, {"title": "Flooding attack", "content": "A flooding attack is a Denial of Service (DoS) attack designed to consume resources on a server and prevent legitimate users and messages from using the resources. The dataset used in this study includes valid commands that halt the UAV's motors during the hovering phase. Scenarios 1 and 2 were created to collect data during flooding attacks. The only difference between these scenarios is the interval for injecting data, where scenario 1 uses an interval of 0.0015, and scenario 2 uses an interval of 0.005 seconds, as shown in Table 1."}, {"title": "Fuzzy attack", "content": "A fuzzy attack injects random values into the message frame to induce abnormal behavior. The UAVCAN protocol uses a 29-bit identifier, which exempts the CAN ID field from being attacked directly with a random value generator. However, the shared data within the protocol are not protected by any security measures. Thus, random values are inserted into the data of CAN messages, which can result in abnormal behavior of the UAVs. Table 1 shows Scenarios 3 and 4, designed for fuzzy attack, with injection intervals of 0.0015 and 0.005 seconds, respectively."}, {"title": "Replay attack", "content": "A replay attack, a prevalent and effective type of man-in-the-middle attack, involves copying and retransmitting communications while an attacker poses as a legitimate user. UAV directional control signals were pre-collected from the PX4 autopilot system. Table 1 shows Scenarios 5 and"}, {"title": "", "content": "6, specifically designed for replay attacks focusing on retransmitting left directional control messages at an injection interval of 0.005 seconds."}, {"title": "Mixed Attacks", "content": "Pairwise combinations of flooding, fuzzy, and replay attacks were generated, as shown in Table 1, with a data injection interval of 0.005 seconds. Scenario 10 included all three attacks, also with a data injection interval of 0.005 seconds."}, {"title": "GRAPH-BASED INTRUSION DETECTION STRATEGY", "content": "The graph-based IDS approach can be divided into five modules: (i) the data decoding module, (ii) the graph construction module, (iii) the feature generation module, (iv) the model training module, and (v) the intrusion detection module. In the graph construction and feature engineering module, we discuss the generation of graph streams from tabular time series data and calculating page rank features and density features. Our approach workflow is shown in Figure 4. We elaborate on data decoding, graph construction, feature engineering, model training, and intrusion detection in the following subsections."}, {"title": "Data Decoding", "content": "The dataset consists of \u201c.bin\u201d files, from which columns like the label, timestamp, interface, CAN ID, data length, and data field were retrieved. As shown in Figure 5, a hexadecimal tail byte of UAVCAN protocol messages includes encoded bits for the start and end of a transfer, toggle bit, and transfer ID. The remaining hexadecimal data from the data field was also decoded for single- frame and multi-frame messages. Based on the UAVCAN protocol, we ignored the first two hexadecimal bytes of the multi-frame message, which signifies the Cyclic Redundancy Check (CRC) used for checking the data integrity of messages when targeted ECUs received all the frames of multi-frame messages. The CAN ID from the UAVCAN protocol is a 29-bit identifier, which includes information like request or response message, service or non-service message, priority of the message, message type ID, and source node ID."}, {"title": "", "content": "Following the decoding, the data was then cleaned, ensuring that the data type of each column was consistent with no null values. For our analysis during the graph construction phase, one feature, transfer ID, is used, which defines self-loops in graphs."}, {"title": "Graph Construction Module", "content": "This subsection discusses the process of converting decoded tabular CAN messages into graphs to identify intrusion behavior using minimal protocol specification. Only the Timestamp, CAN ID, and Transfer ID were extracted for this task from the decoded dataset. CAN IDs were collected over a fixed message window At and generated a stream of graph Gt generated at time t\u012f. To handle multi-frame messages, we incorporated a constraint where self-loop is introduced between two consecutive identical CAN IDs only if there is a difference in the Transfer ID. This is because a difference in Transfer ID signifies a new message, as shown in concept formulation in Equation 1. Figure 6 represents a simple graph depicting the concept formulation of Equation 1 to ensure an accurate representation of frames of messages.\nWith constraint\n$G_t = \\bigcup_{t_i} (CAN\\_ID_{t_i} \\rightarrow CAN\\_ID_{t_{i+1}})$\nif $CAN\\_ID_{t_i} = CAN\\_ID_{t_{i+1}}$ then $Transfer\\_ID_{t_i} != Transfer\\_ID_{t_{i+1}}$\n$t_i$ = time defination window\n$t_i \\in (t_0 + k\\Delta t, t_0 + (k + 1)\\Delta t), k \\in N$\n(1)"}, {"title": "Feature Generation Module", "content": "After the graph construction phase, a sequence of streams of graphs Gt is obtained. The importance of each vertex in each graph is calculated using the PageRank algorithm and the density of occurrence in the past 150 samples is calculated along with the current window."}, {"title": "PageRank Algorithm", "content": "The Page Rank algorithm was developed by Google's founders Larry Page and Sergey Brin and is used to rank websites for search engine optimization (57). Weights are assigned to each website,"}, {"title": "", "content": "reflecting its importance through the outdegree, defined as the number of edges originating from the vertex. An iterative process is employed where rank values are distributed to linked pages based on current ranks until stabilization.\nConsider a graph with three nodes as shown in Figure 6, V1 = 10E2001, V2 = 11015501, and V3=05040601. Initially, an equal weight of 1/Nv\u2081, where Nv\u2081, is the number of unique nodes in a time window (1/3 in this case), is assigned to ensure probabilities between 0 to 1. In each iteration, weights are recalculated based on connected nodes as shown in Equation 3. Self-loops are avoided in page rank calculation. A minimum value is set for isolated vertices so each node can be visited with minimal probability. We used d as a damping factor and modified the page rank equation as shown in Equation 4.\n$PageRank(V_i) = \\frac{\\frac{PageRank (V_2)}{OutDegree(V_2)}+ \\frac{PageRank (V_3)}{OutDegree(V_3)}}{(3)}$\n$PageRank(V_i) =  \\frac{1-d}{N_{V_i}}() + d(\\frac{\\frac{PageRank (V_2)}{OutDegree(V_2)} + \\frac{PageRank (V_3)}{OutDegree(V_3)}}{(4)}$\n$PageRank(V_i) =  \\frac{1-d}{N_{V_i}}() + d(\\sum_{p_j}^{V_2,V_3} \\frac{\\frac{PageRank (V_2)}{OutDegree(V_2)}}{Edge \\ Weight(V_1,p_j)}(5))$"}, {"title": "Density Feature", "content": "The density of each node, i.e., CAN ID, is calculated with the current window and 150 samples that preceded the current window, as shown in Figure 8. Density is one of the protocol- independent parameters we choose as a feature for our GB-ML models. This enables us to extend these models to other CAN-based protocols by just considering the CAN ID and its density."}, {"title": "Model Training and Intrusion Detection Module", "content": "Model training involves two key steps: incorporating class weights for each class in the training phase and using different graph-based models to test the detection capabilities of the IDS for UAVCAN networks. Class weights were considered during the training phase to address the data imbalance issue, where non-attack instances outnumber attack instances. This is crucial as it"}, {"title": "", "content": "prevents the model from becoming biased towards non-attack data instances, which can lead to poor performance during attack instances. Therefore, more priority was assigned to attack instances during the training phase, assuring the model learns to recognize both attack and non- attack data appropriately.\nThis study evaluated four different graph-based models to leverage the spatial and temporal information in UAVCAN network data, such as GCNN, GAT, GraphSAGE, and Graph-Based Transformer. Metrics like accuracy, precision, recall, and F1 scores were used to evaluate the models during each type of attack. The goal was to achieve higher performance accuracy during individual and mixed attack scenarios."}, {"title": "RESULTS AND DISCUSSION", "content": "The IDS performance was evaluated using inductive and transductive learning models to leverage the spatial and temporal information in CAN bus network data. The study evaluated four graph-based machine-learning models, namely GCNN, GAT, GraphSAGE, and Graph-Based Transformer, to assess their detection performance when the CAN bus network of UAVs is attacked. Tables 2 and 3 represent the evaluation metrics for GraphSAGE and Graph-Based transformer models generated across ten attack scenarios, respectively."}, {"title": "", "content": "The performance of GraphSAGE and Graph-Based transformers was highly effective in detecting various attack scenarios for CAN bus networks in UAVs. As an inductive graph model, these models utilized mean aggregation to achieve the following results with high precision, recall, and F1-score.\nMoreover, Table 4 and Table 5 present the evaluation metrics for the GCNN and GAT models. However, it performed moderately compared to GraphSAGE and Graph-based transformers. As discussed earlier, the GCNN model, being a transductive model, failed to scale out to samples beyond the training graph, which resulted in lower performance in a few attack scenarios. The GAT model, although an inductive model, did not achieve the same level of performance as GraphSAGE and Graph-based transformers since it leverages local neighborhood information without being able to effectively capture the global graph structure, which is essential for identifying complex attacks."}, {"title": "", "content": "To evaluate the performance of the GB-ML models further, we compare them with a baseline single-layer LSTM model. In most cases, the LSTM model continuously performed worse than the graph-based models. For example, in Scenario 1, the LSTM obtained an accuracy of 69.81%, which was poor compared with either GraphSAGE's or the Graph-Based Transformer's"}, {"title": "", "content": "accuracy of 99.45%. The LSTM could not match the performance of the graph-based models, even in Scenario 4, when it performed at its peak accuracy of 93.2%. GB-ML models consistently outperformed during more complex attack scenarios, such as scenarios 6 to 10. These results show that while LSTMs could capture temporal sequences, graph-based models are far better at capturing the complexity of the communication structures within CAN scenarios, leading to superior performance in the intrusion detection task.\nOverall, Table 6 compares the performance of graph-based machine learning models with LSTM baselines. The results show that GraphSAGE and Graph-Based Transformers outperformed LSTM models in all the attack cases evaluated. Overall, these results indicated that graph-based methods could potentially have a promising role in enhancing the IDS's performances in CAN bus networks."}, {"title": "CONCLUSIONS", "content": "In this study, we developed and evaluated a graph machine learning-based intrusion detection system for UAVs communicating via UAVCAN protocol. We encoded UAVCAN protocol messages into graphs and used them as input for various GB-ML models. These models demonstrate higher detection performance from 1% to 29% compared to the baseline LSTM-based IDS, in terms of precision, recall, and F1 scores in detecting various injection attacks on the CAN bus network.\nThe results show that graph-based methods outperform conventional sequence-based models like LSTMs in detecting intrusions because they are highly effective at capturing intricate communication structures of CAN bus data. Therefore, graph-based approaches are likely better at identifying intrusions"}]}