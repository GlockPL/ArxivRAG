{"title": "RITA: Automatic Framework for Designing of Resilient IoT Applications", "authors": ["Luis Eduardo Pessoa", "Crist\u00f3v\u00e3o F. Iglesias Jr", "Claudio Miceli"], "abstract": "Designing resilient Internet of Things (IoT) systems requires i) identification of IoT Critical Objects (ICOs) such as services, devices, and resources, ii) threat analysis, and iii) mitigation strategy selection. However, the traditional process for designing resilient IoT systems is still manual, leading to inefficiencies and increased risks. In addition, while tools such as ChatGPT could support this manual and highly error-prone process, their use raises concerns over data privacy, inconsistent outputs, and internet dependence. Therefore, we propose RITA, an automated, open-source framework that uses a fine-tuned ROBERTa-based Named Entity Recognition (NER) model to identify ICOs from IoT requirement documents, correlate threats, and recommend countermeasures. RITA operates entirely offline and can be deployed on-site, safeguarding sensitive information and delivering consistent outputs that enhance standardization. In our empirical evaluation, RITA outperformed ChatGPT in four of seven ICO categories, particularly in actuator, sensor, network resource, and service identification, using both human-annotated and ChatGPT-generated test data. These findings indicate that RITA can improve resilient IoT design by effectively supporting key security operations, offering a practical solution for developing robust IoT architectures.", "sections": [{"title": "I. INTRODUCTION", "content": "Resilience should be addressed in the early stages of the development [1]. It should be done in the design phase [2]-[4]. A general approach for designing a resilient IoT application during the design phase includes three steps: (i) Identification of IoT critical objects (ICOs). This initial step focuses on identifying the essential elements within the IoT system that are vital for proper functionality and susceptible to IoT-specific threats. This is typically done by reviewing documents, such as storylines, user stories, and system requirements, to identify the key devices, resources, and services critical to the operation of the system [2], [4]-[6]. (ii) Threat Identification. Once critical components have been identified, the next step is to assess potential risks to the system. This includes identifying security, privacy, and reliability threats, which may arise from sources such as cyberattacks, malware, physical damage, or environmental conditions [2], [4], [6]. (iii) Selection of Mitigation Strategies. The final step is to specify effective measures to counteract the identified threats. Mitigation strategies may involve implementing security protocols, using encryption, adding redundancy, monitoring for anomalies, or applying physical security measures to safeguard critical IoT components [2], [4], [6].\nAddressing resilience in the design phase allows [2]-[5], [7]: (i) to deal with the complexity of the problems, (ii) effective communication, (iii) complete understanding, (iv) reduced costs, (v) predict behavior, (vi) reuse and (vii) analyze the feasibility (financial and practical) of the IoT system. However, designing resilient systems often requires a deep understanding of the potential sources of disturbances, their impacts, and how the system can respond to ensure continued operation. Furthermore, manually addressing resilience can be a significant challenge. As an effect, the manual process can be time-consuming and prone to error as it involves anticipating a wide range of potential scenarios and formulating appropriate responses.\nMotivation and problem specification. In [1] an investigation was made to determine the usefulness of NER models to identify IoT critical objects (services, devices, and resources) from IoT systems documents to sidestep the challenges of manual identification. However, as described before, the identification of IoT critical objects is only the first step of the general procedures to design a resilient IoT application. Therefore, the following question remains open. How can we automatically extract IoT critical objects from documents (storyline and requirements) and list all possible IoT threats and resilient countermeasures that can be used in the design of a resilient IoT application?\nOur contributions. To address the problem above, we propose a framework named RITA. It provides an environment for the automatic design of the Resilient IoT Application (RITA). Three of the main components of the RITA can be seen in the Figure 1 as well as the input and output. Component 1 of RITA addresses the automatic extraction of IoT critical objects with an NER model. It is a fine-tuned ROBERTa model, trained with the dataset created in this work. The ROBERTa model is a BERT model with optimized hyperparameters [7]. Upon processing a text input, the NER model will reply with the identified IoT Critical Object and the category for the identified object from the text. It is done following the definitions from Table I. Component 2 addresses the threat identification based on the relational nature of IoT critical objects and threats through an IoT threat database. Component 3 addresses the selection of mitigation"}, {"title": "II. RELATED WORK", "content": "Natural language processing techniques have been used by different authors with different objectives in the field of Requirements Engineering (RE), such as classification of requirements into functional/non-functional, classification of online product review, detection of redundant requirements and information extraction by leveraging NER models [9]. There also has been a research about the development of models to capture key elements of natural language requirements [10], [11]. In [12], it is proposed a pipeline for the automated creation of conceptual models from user stories with the application of natural language heuristics. Similar work was proposed in [13]. Existing NER models are typically trained in general categories, such as PERSON, LOCATION and ORGANIZATION, which are not useful in the niche paradigm of the IoT Systems [10]\u2013[13]. As an extension of the categories defined in [1], we have defined 7 subcategories to further subdivide Devices, Resources and Services. These categories can be seen on Table I where the first column has the name of the categories defined in [1] and the sub categories are"}, {"title": "III. TECHNICAL APPROACH", "content": "Named Entity Recognition (NER) is a Natural Language Processing task where entities are identified in text. The categories here defined were Actuators, Tags, Sensors, Smart Cameras, On-Device Resources, Network Resources and Services. The definition for each category can be seen on Table I. For the identification process of the specific niche categories of the IoT Domain, we adopted the best architecture, BERT [1]. The model chosen for our NER task was the RoBERTa model available through the Spacy framework 2. The ROBERTa model has the same architecture as the BERT model, performing better due to the pre training approach adjustments that involve the time taken to train the model, the size of the batches, size of sequences and dynamically changing the masking pattern applied to the training data [14]. The fine tuning of the RoBERTa model was done with a regular split of the dataset with 30% for test and 70% for trainig. For the evaluation of GPT-3, a group of 300 phrases were chosen, where 100 of these phrases represented Storylines phrases, 100 represented User Stories, and another 100 represented requirements. The storyline phrases were taken from the test group of the dataset. The other 200 phrases were generated using GPT-3. This group of 300 phrases formed the validation set (Table II third column). The input of the model is some text representing a user story, storyline or requirement such as \"The A3144E Hall Effect Sensor Switch is used in the smart garage door opener, which allows you to open and close the garage door remotely\". The output would be (\"a3144e hall effect sensor switch\u201d,\u201dACTUATOR\")"}, {"title": "IV. EMPIRICAL EVALUATION", "content": "Our evaluation aims to answer the following Research Question (RQ): 1) What is the performance of RITA and ChatGPT to identify IoT Critical Objects?\nDescription of The Dataset: It was not possible to find an annotated dataset with categories pertaining to the niche domain of IoT systems besides the dataset described in [1]. We build over the previous dataset of [1], with the addition of 7121 phrases. Moreover, the original dataset was sub categorized to split 4 categories of the original dataset into the 7 categories found in the current dataset and create a large-sized dataset [15]. The original dataset was generated utilizing two approaches.\nFor the first approach, to annotate sentences for devices and resources, online sentence dictionaries 3 4 were used, and the phrases were found by searching for examples of the proposed"}, {"title": "V. CONCLUSION", "content": "This work presents RITA, an automated framework for identifying IoT Critical Objects (ICOs) essential to resilient IoT applications. By leveraging a fine-tuned RoBERTa model, RITA consistently demonstrated competitive performance, surpassing ChatGPT in key ICO categories, including actuators, sensors, network resources, and services, while addressing significant limitations in data privacy, internet dependency, and output consistency associated with online tools. Our empirical evaluations affirm that RITA is a viable, secure alternative for resilience-focused IoT development, capable of functioning entirely offline and mitigating risks inherent to sensitive data processing in IoT environments. Future research could enhance RITA's adaptability across all ICO categories, improving its performance in areas like smart cameras and tags. Additionally, scaling capabilities of the RITA to accommodate broader IoT architectures will enable its application in increasingly complex environments. The RITA framework marks a step forward in resilient IoT system design, supporting automated, consistent, and secure handling of critical security functions."}]}