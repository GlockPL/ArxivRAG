{"title": "Exploring the impact of Optimised Hyperparameters on Bi-LSTM-based Contextual Anomaly Detector", "authors": ["Aafan Ahmad Toor", "Jia-Chun Lin", "Ernst Gunnar Gran"], "abstract": "The exponential growth in the usage of Internet of Things in daily life has caused immense increase in the generation of time series data. Smart homes is one such domain where bulk of data is being generated and anomaly detection is one of the many challenges addressed by researchers in recent years. Contextual anomaly is a kind of anomaly that may show deviation from the normal pattern like point or sequence anomalies, but it also requires prior knowledge about the data domain and the actions that caused the deviation. Recent studies based on Recurrent Neural Networks (RNN) have demonstrated strong performance in anomaly detection. This study explores the impact of automatically tuned hyperparamteres on Unsupervised Online Contextual Anomaly Detection (UoCAD) approach by proposing UoCAD with Optimised Hyperparamnters (UoCAD-OH). UoCAD-OH conducts hyperparameter optimisation on Bi-LSTM model in an offline phase and uses the fine-tuned hyperparameters to detect anomalies during the online phase. The experiments involve evaluating the proposed framework on two smart home air quality datasets containing contextual anomalies. The evaluation metrics used are Precision, Recall, and F1 score.", "sections": [{"title": "I. INTRODUCTION", "content": "With the advancement of sensor technology, more and more Internet of Things (IoT) devices are being used throughout the world and their numbers are growing exponentially [1]. IoT devices are interconnected devices that are designed to collect and share data with each other and often with the cloud. A smart device is referred to as an IoT device which not only shares the data with the cloud but also improves the daily life. For instance, air quality sensors in a smart home not just records measures like temperature, CO2, PM2.5, humidity, etc., but also alerts the home owners of potential dangers like virus risk, air pollution, burglary, etc. Use of IoT devices is not limited to smart homes, many use cases of IoT can be found in industrial applications, healthcare, agriculture, factories, finance, bio-mechanics, etc. [1]\u2013[3]. The data generated by these IoT devices is also growing exponentially [4], which brings us to challenges of storing and processing this huge amounts of data, monitoring behaviors, and predicting patterns to improve the quality of life.\nThe data generated from IoT devices, referred to as time series, is time-bound and it is important to preserve its temporal context in order to extract useful information. Time series is a set of sequential data points taken as equally, or in some cases irregularly, spaced points in time. Time series can be univariate, i.e., consisting of only one time-bound column, or multivariate, i.e., multiple time-bound columns recording data for the same event. Time series often behaves unusually and show signs of irregularity due to system failure, sensor malfunction, or malicious activities. These irregularities are called anomalies which are essentially a deviation from the normal pattern.\nResearchers have identified different types of anomalies based on their nature and behavior, such as point anomalies (a significant deviation of a single data point), collective anoma- lies (a significant deviation of multiple adjacent data points), and contextual anomalies (a point or collective anomaly that is considered anomalous only within a specific context, such as the time of occurrence) [3]. Some contextual anomalies do not deviate significantly from the normal pattern but their unusual temporal location makes them anomalous. These complex types of anomalies are difficult to detect [5]. To better define such anomalies, defining the 'normal' in the context of a specific domain is also very important.\nTuning the hyperparameters of a DNN-based model has been addressed in many recent studies [6]\u2013[12]. The objective of tuning the hyperparameters is to balance the bias-variance trade-off. Bias-variance trade-off ensures the adequate bifur- cation of model predictions and the ground truth (bias), and the ability of the model to produce consistent and reliable results for unseen data (variance). For any DNN-based model, there are many hyperparameters which have direct or indirect affect on the prediction accuracy and overall performance. For example, learning rate affects the convergence of the model, having more neurons increases a model's ability to learn complex relationships among the data points, model's complexity and learning ability is determined by the number of layers, etc.\nThis study builds on the work of the Unsupervised Online Contextual Anomaly Detector (UoCAD) [5] by introducing UoCAD-OH, i.e., UoCAD with Optimised Hyperparameters. UoCAD is an online contextual anomaly detection method based on a Bidirectional LSTM (Bi-LSTM) that uses a sliding window approach to process smart home time series for anomaly detection. UoCAD conducts experiments using eight"}, {"title": "II. RELATED WORKS", "content": "In recent years, Deep Neural Network (DNN) based meth- ods have outperformed the conventional methods for time series anomaly detection [3], [13]. Within the DNN domain, Recurrent Neural Network (RNN) based methods, such as Simple RNN, LSTM, and GRU are most common among researchers for anomaly detection [4]. LSTM and GRU are the improved forms of simple RNNs, and they have been used more frequently by researchers. However, simple RNNs have also been used [14] to detect performance anomalies from a simulated web service time series with throughput as the context of anomaly. A supervised learning-based study uses simple RNNs in combination with convolutional neural networks [15] to detect anomalies in a time series representing the operating status of a service elevator. In this study, contex- tual anomalies specifically refer to the elevator's descending journeys. Both [14] and [15] have compared simple RNN'S performance with various RNN-based methods, including LSTM, GRU, Bi-LSTM, and Bi-GRU.\nLSTM-based anomaly detection approaches are very com- mon among researchers [16]\u2013[19]. The LSTMAD framework [16] consists of four modules: noise reduction, normalization, an LSTM layer, and anomaly detection. The framework cap- tures the influence of context within the dataset and detects contextual anomalies. LSTMAD is evaluated on a synthetic dataset and a real world dataset of a smart card ticketing system. Fluctuations in the ticket sales caused by some event is considered as contextual anomalies in the real world dataset. Another LSTM-based method SALAD [17] detects anomalies from the recurrent time series in the New York City (NYC) taxi demand dataset. SALAD is an online and lightweight method that detects anomalies by calculating the Average Absolute Relative Error (AARE) and a self-adaptive detection threshold. Due to the resource requirements for calculating its detection threshold based on all the historical AARE values, SALAD becomes less efficient when dealing with open-ended time series.\nRePAD2 [18] is a sliding-window-based real-time time series anomaly detection method that is less resource-intensive than SALAD. Instead of storing all historical AARE values, RePAD2 retains only the most recent values and determines the decision threshold based on these recent values. RePAD2 evaluated the performance on four different sliding window sizes and the results show that it outperformed it's prede- cessors in anomaly detection, retrain ratio, and time perfor- mance. A recent study [20] evaluated the performance of RePAD2 using three simple RNN variants\u2014RNN, LSTM, and GRU\u2014and three deep learning platforms: TensorFlow-Keras, PyTorch, and Deeplearning4j. The results indicated that the LSTM variant of RePAD2, implemented on Deeplearning4j, delivered the best performance.\nROLA [19] is another LSTM-based study that employs a divide-and-conquer strategy for anomaly detection from the FerryBox dataset, which was collected using sensors on a Norwegian tall ship. RoLA splits multivariate time series into univariate time series and introduces the concept of Lightweight Anomaly Detectors (LAD), which operate in a parallel processing environment to jointly detect anomalies in the multivariate time series.\nOne common characteristic of most of the studies dis- cussed above is the absence of contextual anomalies. This highlights the gap in the availability of real-world datasets having contextual anomalies. We discuss some studies that focus on detecting contextual anomalies but their methodology is neither RNN nor DNN-based. These anomaly contexts include traffic increase on highway due to dodgers game [21], stock market manipulation [22], cyber attack on smart grid [23], context inference using causal discovery [24], contextual anomaly relationship on the basis of temporal and spacial neighbors in wireless sensor network data [25], and calculation of the context using importance scores [26].\nThe related works discussed above highlight several gaps in the field of online time series anomaly detection. First, only few studies focus on contextual anomalies, likely due to the scarcity of real-world datasets containing such anomalies. Second, very few studies perform automatic hyperparameter optimisation, instead most studies either tune only a few hyper- paramteres or use predefined hyperparamteres based on hunch. Lastly, although most online anomaly detection approaches use a sliding window technique, only a small number recognize the importance of selecting an appropriate window size. Many studies rely on a single predefined window size, increasing the likelihood of selecting one that fails to accurately capture the underlying anomalies. This study addresses these issues and aims to fill these gaps."}, {"title": "III. UOCAD AND UOCAD-OH", "content": "The Unsupervised Online Contextual Anomaly Detector (UoCAD) [5] was proposed to detect contextual anomalies in multivariate time series data from smart homes. The core idea behind UoCAD is to process time series data in online manner to identify contextual anomalies. UoCAD employs a sliding window approach to process small chunks of incoming data and determines whether the next instance is anomalous or normal. Each sliding window is preprocessed and fed into a Bi-LSTM model to compute error losses.\nUoCAD then calculates the Average Absolute Relative Error (AARE) values using Equation 1. Here, M represents each"}, {"title": "IV. EXPERIMENTS AND RESULTS", "content": "This section outlines the details of the experiments con- ducted in this study and presents the results obtained."}, {"title": "A. Datasets", "content": "The smart home time series datasets used in this study were collected using the AirThings View Plus device [27]. The data includes features related to indoor air quality in a smart home environment, with the device placed in the kitchen near the stove. The multivariate time series datasets consist of a timestamp feature and nine numeric features: temperature, humidity, carbon dioxide (CO2), volatile organic compounds (VOC), particulate matter (PM) 2.5 and 1.0, pressure, light, and sound. Three datasets from different periods were used for the experiments: a 2-day dataset containing one contextual anomaly, a 5-day dataset with two contextual anomalies, and a 5-month dataset. Further details on these datasets are provided in the following subsections.\n1) 2-days dataset (2dla): This multivariate time series dataset, referred to as 2dla, is also used in UoCAD [5]. It is a 2-day air quality dataset containing 1,151 instances. The dataset includes one sequential contextual anomaly-unintended cooking-which spans 28 instances. This anomaly was generated by intentionally burning food on the stove while ventilation was turned off, and the doors and windows were shut. Table I [5] provides a summary of the dataset, including the minimum, maximum, average, and standard deviation values for each feature.\n2) 10-days dataset (10d2a): The second dataset used in this study was collected from the same AirThings View Plus device. Referred to here as 10d2a, this dataset consists of 10 days of air quality sensor data and includes two sequential contextual anomalies. The first anomaly simulates a heating malfunction. To generate this anomaly, the heating was turned off, and the doors and windows were opened while the out- side temperature ranged between -5\u00b0C and -8\u00b0C. The second"}, {"title": "B. Hyperparameter Optimisation", "content": "Hyperparameter tuning is an offline task that exhaustively test a lot of parameters and their respective values to find an optimised combination of hyperparameters. Hyperparameter tuning is model- and dataset-specific, so in this study, the tuning process was repeated for Bi-LSTM model using the 5M dataset. The Keras Tuner [28] was employed to automatically tune the hyperparameters for each model. Table IV provides the details of the tuner setup.\nThe hyperband search method is used for the tuning process. This method was chosen for its efficiency, as opposed to its alternative method, i.e., Random Search. Random Search method trains the model with all possible combinations of hyperparameters and their values, which is time-consuming and often results in trying many suboptimal combinations. In"}, {"title": "C. Evaluation Metrics", "content": "The performance of the Bi-LSTM model for anomaly detection is evaluated using the Precision: $\\frac{TP}{TP+FP}$, Recall: $\\frac{TP}{TP+FN}$, and F1-score: $\\frac{2 \\cdot \\text{Precision} \\cdot \\text{Recall}}{\\text{Precision}+\\text{Recall}}$ metrics, which most researchers prefer for anomaly detection. Here, TP refers to True Positives, FP to False Positives, and FN to False Negatives. Sequence anomalies are a collection of adjacent instances representing a particular event; thus, detecting any one of these adjacent instances indicates that the entire anoma- lous event has been detected. Based on this assumption, if p is the total number of anomalous instances and any instance i belongs to p, the whole p is considered as true positive."}, {"title": "D. Experimental Setup", "content": "All experiments are conducted on an Apple MacBook Pro with an M2 chip, 16GB of RAM, and 256GB of disk storage. The code was written using Python-based libraries, including TensorFlow [29] for end-to-end machine learning and Keras [30] for neural network methods.\nTo ensure consistency with UoCAD's experiments and allow for a fair evaluation, this study conducts experiments using eight window sizes for each selected model: 6, 12, 24, 48, 72, 96, 120, and 144. Similarly, this study also presents anomaly detection results using two criteria: individual and majority. Under the individual criterion, an anomaly is detected if at least one feature reports an anomaly, whereas, in the majority criterion, an anomaly is considered valid only if at least five out of nine features report it."}, {"title": "E. Results and Discussion", "content": "In this section, we present the anomaly detection results and discuss the performance of UoCAD-OH for the 2d1a and the 10d2a datasets. Table VII summarize the Precision (referred as P), Recall (referred as R), and F1-scores (referred as F1) from the experiments, while Figures 1 to 2 visualize the anomaly detection results of UoCAD-OH for both datasets."}, {"title": "V. CONCLUSIONS", "content": "This study evaluates the anomaly detection performance of Recurrent Neural Network (RNN)-based Bi-LSTM model on smart home time series data containing contextual anomalies. UoCAD-OH extends the original UoCAD method by intro- ducing both offline and online phases. In the offline phase, the hyperparameters of Bi-LSTM model are fine-tuned using a large smart home time series dataset. In the online phase, which is based on the original UoCAD method, the predefined hyperparameters are replaced with automatically fine-tuned hyperparameters. This study also compares the performance of eight sliding window sizes with UoCAD-OH, using both individual (where an anomaly is detected if at least one feature reports it) and majority (where more than half of the features must report an anomaly) criteria.\nThe results show that the majority criterion is generally ineffective for anomaly detection. UoCAD-OH is capable of detecting anomalies for window sizes between 6 and 96, with 24 and 48 being the most effective window sizes. This study also provides a better understanding of the proposed method's ability to detect different types of contextual anomalies. In future, an expanded study can be performed to evaluate different RNN-based methods to find the best RNN variant. Additionally, UoCAD-OH can be made adaptive to different types of anomalies and scalable across various time series domains to enhance its generalization and robustness."}]}