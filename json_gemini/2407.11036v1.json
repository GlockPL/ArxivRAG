{"title": "Hybrid-Generative Diffusion Models for Attack-Oriented Twin Migration in Vehicular Metaverses", "authors": ["Yingkai Kang", "Jinbo Wen", "Jiawen Kang", "Tao Zhang", "Hongyang Du", "Dusit Niyato", "Rong Yu", "Shengli Xie"], "abstract": "The vehicular metaverse is envisioned as a blended immersive domain that promises to bring revolutionary changes to the automotive industry. As a core component of vehicular metaverses, Vehicle Twins (VTs) are digital twins that cover the entire life cycle of vehicles, providing immersive virtual services for Vehicular Metaverse Users (VMUs). Vehicles with limited resources offload the computationally intensive tasks of constructing and updating VTs to edge servers and migrate VTs between these servers, ensuring seamless and immersive experiences for VMUs. However, the high mobility of vehicles, uneven deployment of edge servers, and potential security threats pose challenges to achieving efficient and reliable VT migrations. To address these issues, we propose a secure and reliable VT migration framework in vehicular metaverses. Specifically, we design a two-layer trust evaluation model to comprehensively evaluate the reputation value of edge servers in the network communication and interaction layers. Then, we model the VT migration problem as a partially observable Markov decision process and design a hybrid-Generative Diffusion Model (GDM) algorithm based on deep reinforcement learning to generate optimal migration decisions by taking hybrid actions (i.e., continuous actions and discrete actions). Numerical results demonstrate that the hybrid-GDM algorithm outperforms the baseline algorithms, showing strong adaptability in various settings and highlighting the potential of the hybrid-GDM algorithm for addressing various optimization issues in vehicular metaverses.", "sections": [{"title": "I. INTRODUCTION", "content": "THE vehicular metaverse is a virtual space that operates parallel to the physical world [1]. It seamlessly inte- grates the physical and virtual worlds through technologies such as eXtended Reality (XR), Artificial Intelligence (AI), and Digital Twin (DT) technology [2], providing Vehicular Metaverse Users (VMUs) with an immersive experience, that is expected to bring revolutionary changes to the automotive industry [3]. For example, the Augmented Reality (AR) head- up display solution uses AR technology to project important information such as navigation information, traffic signs, and driving routes directly onto the windshield, allowing the driver to obtain key information without diverting his or her gaze. This seamless information integration improves driving safety and significantly reduces the cognitive load of drivers. Vehicle Twin (VT) is a key technology in the vehicular metaverse [4], enabling real-time monitoring and management of vehicles by creating high-precision digital replicas that cover the entire vehicle life cycle [1]. VTs synchronize real-time vehicle status and traffic conditions from the physical space to the virtual space, enabling the vehicle to operate in a dynamic virtual environment [5]. Vehicles can provide VMUs with various metaverse services through VTs, such as allowing VMUs to experience virtual travel in the form of an avatar. Constructing and updating VTs require substantial comput- ing and storage resources. Due to the limitations in local computing resources of vehicles [6], computation-intensive tasks for VT construction and update have to be offloaded to edge servers. However, maintaining service stability is challenging due to the high vehicular mobility and the uneven distribution of edge servers. Hence, VT migrations are con- ducted from the current edge servers to other edge servers [7], which ensures seamless virtual experiences for VMUs. To reduce the load pressure on the current edge servers, vehicles adopt a pre-migration strategy to pre-migrate part of VT tasks [8], thereby effectively utilizing computing resources, reducing data processing delays, and ensuring a seamless and high-quality user experience. Considering that the vehicular metaverse will integrate 6G technology to achieve space-air- ground-sea integrated networks [9], satellites can be used to supplement the computing power of RoadSide Units (RSUs). Unfortunately, there are security risks during the VT migra- tion process. For example, attackers launch Distributed Denial of Service (DDoS) attacks on the edge servers to paralyze the VT migration or obtain the data uploaded by vehicles through the Co-resident attack [10], [11]. To ensure that vehicles migrate VTs to reliable edge servers, the reputation value of edge servers needs to be evaluated through trust evaluation methods. Most trust evaluation methods are based on user re- views in DT migration scenarios, among which the subjective logic model is the most common [1], [12]. Nevertheless, the traditional subjective logic model only quantifies the reputation value of edge servers according to the evaluation of VMUs, which makes the reputation evaluation of edge servers not objective enough. Besides, there may be malicious evaluators among VMUs, which may damage the reliability of reputation evaluation. To address the above challenges, we propose a secure and reliable VT migration framework in vehicular metaverses. Specifically, we design a two-layer trust evaluation model to compute the reputation values of edge servers. This model ensures the security of VT migrations while safeguarding the immersive experience for VMUs. Considering that the VT migration problem is NP-hard [8], and traditional algorithms struggle to find optimal solutions within an acceptable time frame, we propose a hybrid-GDM algorithm based on Deep Reinforcement Learning (DRL), which utilizes a diffusion model to generate hybrid actions (i.e., continuous actions and discrete actions), thereby generating an optimal migration strategy for vehicles. The main contributions of this paper are summarized as follows: \u2022 To provide VMUs with immersive experiences, we pro- pose a novel VT migration framework with high security and reliability. In the VT migration framework, vehicles select the appropriate and reliable edge servers (e.g., satellites and RSUs) to achieve efficient and reliable VT migrations, enabling real-time updates of VTs within the vehicular metaverse. \u2022 Considering the potential security threats of edge servers, we propose a two-layer trust evaluation model. At the network communication layer, the reputation value of the edge server is evaluated based on its historical defense data and performance in detection tasks. In the interaction layer, the reputation value of an edge server is evaluated based on the interaction evaluation of the edge server by VMUs. By integrating the reputation values of the edge server at the network communication layer and interaction layer, the overall credibility of the edge server can be comprehensively quantified. \u2022 To effectively identify the optimal VT migration strategy, we first model the VT migration decision problem as a Partially Observable Markov Decision Process (POMDP). Then, we propose the hybrid-GDM algorithm, which combines the diffusion model with advanced DRL algo- rithms to enhance the optimization potential. In previous work, GDMs can only generate continuous actions [13] or discrete actions [14], while the hybrid-GDM algorithm is designed to generate hybrid actions to effectively optimize the migration strategy. The rest of the paper is organized as follows. Section II summarizes the related work. System overview is introduced in Section III. The VT migration optimization problem formula- tion is described in Section IV. Section V describes a scheme for making VT migration decisions using the proposed hybrid- GDM algorithm. Section VI demonstrates the evaluation of multiple performances. Section VII concludes this paper."}, {"title": "II. RELATED WORK", "content": "A. Vehicular Metaverse Neal Stephenson first depicted the concept of the metaverse in his science fiction novel Snow Crash in 1992 [5]. The metaverse is a digital world constructed by the integration of Internet and network technologies along with XR, aiming at simulating and enhancing interactions and experiences in real life [2]. The authors in [15] discussed a novel distributed metaverse architecture and the foundational technologies of the metaverse, highlighting key issues in security and privacy protection. In [16], the authors defined Vetaverse as a future continuum between the vehicles industry and metaverses, envisioning it as the DTs of intelligent transportation systems. Most metaverse services are computationally intensive [17]. In [18], the authors optimized the allocation of computing re- sources in vehicular metaverses through an intelligent schedul- ing algorithm, thereby improving the performance and user experience of AR applications. The authors in [5] proposed a contract model based on the migration task age to incentivize RSUs to provide bandwidth resources and ensure the continu- ity and service effectiveness of the VTs migration in the ve- hicular metaverse. The author in [8] proposed a framework for optimizing VTs migration using real-time trajectory prediction and multi-agent DRL, aimed at enhancing user immersion in the vehicular metaverse and reducing resource consumption. However, existing work rarely considers the security issues during VT migration in the vehicular metaverse. B. Digital Twin Migration Virtual machine migration refers to transferring a virtual machine between different physical hardware units, and has been studied in detail in [19]. For example, the authors in [20] introduced the dynamic virtual machine migration scheduling strategy, which significantly reduces computing service latency. Some recent studies have introduced the DT to optimize the migration process. DTs are the digital replica that covers the life cycle of their physical counterparts, i.e., Physical Twin, such as a physical object, process, or system [21]. In [22], the authors introduced a wireless DT edge network model leveraging DRL, aiming to effectively reduce DT migration delay. The authors in [7] optimized the VT migration framework to address the high vehicular mobility and the unpredictable load on edge servers. The authors in [23] proposed a tiny machine learning-based Stackelberg game framework to achieve efficient DT migration in the emerging paradigm of the UAV metaverse through a tiny MADRL algorithm to address the challenges of UAV dynamic mobility and limited communication coverage of ground base stations. However, existing work does not consider the impact of potential security threats from edge servers on users during the VT migration. C. Generative Diffusion Models As an emerging GAI technology, GDMs are widely used in various fields such as image and video generation [24] and molecular design [25] due to their powerful content"}, {"title": "III. SECURE AND RELIABLE VEHICLE TWIN MIGRATION FRAMEWORK", "content": "In this section, we introduce the proposed framework in ve- hicular metaverses, including the VT migration model, attack models, the two-layer trust evaluation model, and utility func- tions. Fig. 1 demonstrates that each vehicle will migrate the VT (e.g., avatar) to an edge server with a good reputation value for updates in each time slot, and some of VTs update tasks are pre-migrated to the subsequent edge servers with a good rep- utation for processing (i.e., the pre-migration process). After the edge servers complete the update of the VTs, they send the results back to the vehicles. In the vehicular metaverse, there are multiple vehicles and multiple edge servers, where the vehicle set is represented as V = {1, . . ., v..., V} and the edge server set is expressed as S = {1, . . ., s, . . ., S}. Let Sp represent the edge server where the vehicle pre-migration VT task arrives, $L_{max}$ represent the maximum load capacity of the edge server s, $Room_{s}$ represent the communication coverage of the edge server s, and $c_{s}$ represent the computing capability of the edge server s. Time is divided into discrete time slots $T = {1, ...,t,...,T}$ [28]. A. Migration Model Initially, the delay from migrating VTs to an edge server s (e.g., an RSU or a satellite) is calculated. Let $P_{s} = (x_{s}, y_{s}, z_{s})$ represent the spatial coordinate of the edge server s, and $P_{v}(t) = (x_{v}(t), y_{v}(t), z_{v}(t))$ represent the spatial coordinate of vehicle v at time slot t. Thus, the Euclidean distance between the edge server s and the vehicle v at time slot t can be calculated as\n$P_{v,s}(t) = \\sqrt{[x_{s} - x_{v}(t)]^{2} + [y_{s} - y_{v}(t)]^{2} + [z_{s} - z_{v}(t)]^{2}}.\n$   (1)\nThe propagation model of the link between the edge server and the vehicle consists of Line-of-Sight (LoS) and Non-Line- of-Sight (NLOS) channels [29]. As vehicles move, their wire- less communication channels with edge servers will change. Considering the uniformity of the wireless transmission chan- nels [8], both uplink and downlink, the path loss channel gain [7] for the link between the vehicle v and the edge server s can be calculated as\n$h_{v,s}(t) = \\begin{cases} \\frac{A_{rsu}}{\\[4\\pi fP_{us}(t)]}, \\text{s is RSU,} \\\\ \\frac{A_{los}}{[A_{nlos} + A_{los}][P_{vs}(t)]^{2}}, \\text{s is satellite.} \\end{cases}\n$   (2)\nHere, $A_{rsu}, A_{los}$, and $A_{nlos}$ represent the gain for the RSU channel, LoS channel, and NLoS channel, respectively, c is the speed of light, and f is the carrier frequency. In the wireless communication scenario, the transmission delay generated when the vehicle v sends the VT task to the edge server s is determined by the uplink transmission rate, which can be calculated as\n$R_{\u03c5\u03c2}^{up} (t) = B^{up} log_{2} \\[1 + \\frac{P_{v}h_{v,s}(t)}{\\sigma^{2}}\\],$   (3)\nwhere $B^{up}$ is the uplink bandwidth, $p_{v}$ is the transmission power of the vehicle v, and $\\sigma^{2}$ is additive Gaussian white noise at the vehicle v. When VMUs require vehicular services, the vehicle will offload the VT task $D^{task}$ to the edge server currently serving. Thus, the uplink transmission delay caused by migrating the VT to the edge server s can be calculated as\n$T_{\u03c5\u03c2}^{up}(t) = \\frac{D_{\u03c5\u03c2}^{up}(t)}{R_{\u03c5\u03c2}^{up} (t)}.\n$   After the VT task is offloaded to the edge server, it must wait for the edge server to process it. This queuing time depends on the current load $L_{s}(t)$ and computing capability $c_{s}$ of the edge server s. Hence, the queuing delay can be expressed as $T_{que}^{s}(t) = \\frac{L_{s}(t)}{c_{s}}$. To ensure a seamless experience for VMUs, vehicle v can pre-migrate some part of VT tasks from the current edge server s to the edge server $s_{p}$, and the VT tasks are pre-migrated from the current server s to the pre-migration server $s_{p}$ through entity links between edge servers. Consequently, the edge server $s_{p}$ can process VT tasks simultaneously with the current server s, thereby optimizing resource allocation and utilization. We define the proportion of pre-migrated tasks as $K_{pre}(t) \\in [0,1]$. The physical link bandwidth between these servers is defined as $B_{s,sp}$. Thus, the delay caused by the pre-migration part of the VT task can be calculated as\n$T_{s,sp}^{mig}(t) = \\frac{D_{s,sp}^{mig} (t)}{B_{s,sp}},\n$   (4)\nwhere $D_{mig}(t) = K_{pre}(t)D^{task}(t)$ is the total size of pre-migration tasks and $D^{task}(t)$ is the task size that needs to be processed by the edge server s. After other tasks are processed, the edge server handles the VT tasks of vehicle v. The delay in processing from the current edge server s receiving a task request to completing the tasks is calculated as\n$T_{s}^{pro}(t) = T_{que}^{s}(t) + \\frac{e_{v}(D^{task}(t) - D_{mig} (t))}{c_{s}},\n$   (5)\nwhere $e_{v}$ denotes the number of GPU cycles needed to process a unit of data from vehicle v. For the edge server $s_{p}$, the processing delay of the pre-migration server $s_{p}$ can also be calculated as\n$T_{s,sp}^{pro}(t) = T_{s,sp}^{mig} (t) + T_{que}^{sp}(t) + \\frac{e_{v}D_{mig} (t)}{c_{sp}}.\n$   (6)\nSince the current edge server s and the pre-migration server $s_{p}$ process VT tasks simultaneously, the delay of this process can be expressed as\n$T^{pro} (t) = max{T_{s}^{pro} (t), T_{s,sp}^{pro} (t)}.\n$   (7)\nIn addition to offloading VT tasks, vehicles may receive results (e.g., AR navigation routes) from different edge servers processing VT tasks. Specifically, vehicle v will offload the VT task to the edge server s and pre-migrate part of the VT task to the edge server $s_{p}$ based on the migration deci- sion. When edge servers s and $s_{p}$ finish processing the VT task, the results will be returned to the vehicle v. Similar to the uplink rate, the downlink rate of the edge server s returning the processed results to the vehicle v is calculated as $R_{\u03c5\u03c2}^{down} (t) = B^{down} log_{2}[1 + \\frac{P_{v}h_{v,s}(t)}{\\sigma^{2}}]$. Thus, the delay experienced by vehicle v when downloading the VT task results can be calculated as\n$T_{\u03c5\u03c2}^{down} (t) = \\frac{D^{task} (t) - D_{mig}(t)}{R_{\u03c5\u03c2}^{down} (t)} + \\frac{D_{mig}(t)}{R_{\u03c5s,sp}^{down} (t)}.\n$   (8)\nIn summary, for the vehicular metaverse, when vehicle v performs a VT migration task at time slot t, it first sends a VT migration request to edge server s based on the migration"}, {"title": "B. Attack Model", "content": "decision $K_{v}(t)$, which is discussed in detail in Section V-A, resulting in uplink delay $T^{up}(t)$. The edge server s then mi- grates some of the VT task to the edge server $s_{p}$ for processing. These two servers process the task in parallel, resulting in processing delay $T^{pro}(t)$. After the task is completed, the result is sent back to the vehicle v, and this process will generate a downlink delay $T^{down} (t)$. Therefore, the total delay for the VT migration can be calculated as\n$T^{sum} (t) = T^{up}(t) + T^{pro}(t) + T^{down} (t).\n$   (9)\nDuring the VT migration, there are security risks in virtual- real interaction and large amounts of data transmission be- tween edge devices [30]. Attackers may use specific strategies to attack edge servers and degrade migration efficiency. To better evaluate the reliability of edge servers, we discuss the main attacks faced in migration scenarios in Section III-B. We consider two attacks against edge servers: DDoS at- tacks [31] and Co-resident attacks [32]. In the DDoS attack, attackers flood the target server with a large amount of ma- licious traffic, making it unable to handle legitimate requests. Since VT migrations rely on the physical network composed of edge servers, VT migrations may be forced to stop when these edge servers are attacked. In the co-resident attack, the attacker hides in an edge server, remains dormant as long as possible, and then leaks information stored on the edge server through side-channel attacks. Attackers take advantage of restricted resources to launch a variety of attacks. To maximize the effect, attackers employ strategies as follows: 1) Direct DDoS attacks: Malicious traffic is sent straight to a target edge server, flooding the link and pushing the current load $L_{s}(t)$ of edge server s to its maximum capacity $L_{max}(t)$. When performing trust evaluation on the edge server s, resource exhaustion and service unavailability cause a significant increase in abnormal data and unresponsive requests. Consequently, there are significant reductions in the data security and service performance of the edge server s. Additionally, the edge server s will receive negative evaluations due to service unavailability at this time. 2) Indirect DDoS attacks: Attackers do not directly target the edge server but indirectly affect it by attacking nearby edge servers (e.g., crossfire attack [33]). Overloading nearby edge servers that share critical links prevents them from effectively processing transmitted data, increasing network congestion, and resulting in an increase in load on the target edge server and a decrease in overall respon- siveness. The impact of this attack on the neighboring edge servers is similar to suffering a direct DDoS attack. 3) Co-resident attacks: Attackers attempt to coexist their malicious script with the target edge server, using side- channel attacks to steal information from the target server and affect its performance. At this time, the edge server s generates unexpected load and computing overhead due to the existence of malicious scripts. When performing detection tasks on edge servers, the presence of malicious scripts can slightly increase the volume of abnormal data and the incidence of abnormal response failures. To prevent vehicles from migrating VTs to compromised edge servers that suffer the above attacks, we designed a two-layer trust evaluation model to effectively quantify the reliability of edge servers, thereby achieving efficient VT migrations and ensuring a seamless virtual experience for VMUs. The evaluation model is discussed in Section III-\u0421."}, {"title": "C. Two-layer Trust Evaluation Model", "content": "Figure 1 shows that the reliability of edge servers is eval- uated when migrating VTs from vehicles to these servers, which is critical to ensuring service quality and network security. This directly affects the efficiency of data processing and VT migration. To effectively measure the performance and credibility of edge servers, we design a two-layer trust evaluation model, as shown in Fig. 2. This trust evaluation model comprehensively evaluates the reputation value of the edge server by considering its historical performance, task completion rate, service quality, and user feedback. The first step of trust evaluation occurs at the network communication layer, evaluating the data security and service performance during edge server communication. After an edge server is attacked, the transmitted data might be intercepted, altered, or damaged [34]. The capability of the edge server to maintain data security and integrity is measured by the ratio of non-anomalous data identified during task detections issued by detection systems (e.g., Snort and Suricata) [35]. Specifically, the ratio of anomalous data is identified by following way [36]: (1) Verify the integrity of the data format and encapsulation; (2) Verify the consistency of data content with the parameters specified in the packet header; (3) Verify the consistency of multiple data contents at the same time. A higher ratio indicates that the edge server has more robust capabilities in protecting data from corruption or alteration, ensuring reliability during VT migrations. Therefore, the data security of the edge server s can be calculated as [36]\n$P_{s}^{data} = \\frac{D_{tot}^{s} - D_{abr}^{s}}{D_{tot}^{s}}\n$   (10)\nwhere $D_{tot}^{s}$ is the total data size of the detection task and $D_{abr}^{s}$ is the abnormal data size of the detection task. After being attacked, the edge server may become overloaded and unable to respond to service requests or be controlled by the attacker and refuse service requests [37]. The service reliability of the server can be evaluated by calculating the ratio of the number of successful response requests $R_{suc}^{s}$ to the total number of requests $R_{tot}^{s}$ issued in the detection task. A higher ratio of successful responses indicates that the edge server s has a stronger capability to process and complete service requests effectively. Therefore, the service performance of edge server s can be calculated as\n$P_{s}^{ser} = \\frac{R_{suc}^{s}}{R_{tot}^{s}}\n$   (11)\nThe historical defense record of an edge server is an important indicator for evaluating its reputation value [38]. The defense performance of an edge server can be determined by calculating the ratio of the number of successful defenses $N_{suc}^{s}$ to the total number of historical attacks $N_{tot}^{s}$, which can be calculated as $\\beta_{s} = \\frac{N_{suc}^{s}}{N_{tot}^{s}}$. Based on the above evaluation indicators, the reputation value of the edge server s at the network communication layer can be calculated as [36]\n$Rep_{s}^{Net} = \\begin{cases} 0, \\text{if } \\beta_{s} \\in (0,\\theta_{1}), \\\\ \\alpha(\\omega P_{s}^{data} + (1 -  \\omega) P_{s}^{ser}), \\text{if } \\beta_{s} \\in (\\theta_{1},\\theta_{2}), \\\\ \\omega P_{s}^{data} + (1 \u2013 \\omega)P_{s}^{ser}, \\text{otherwise.} \\end{cases}\n$   (12)\nWe divide (12) into three cases. In the first case, if the de- fense performance of edge server s is lower than the threshold $\\theta_{1}$, we consider it high-risk and set its reputation value of the network communication layer to 0, where $0 < \\theta_{1} < 1$. In the second case, when the defense performance of the edge server s is higher than the threshold $\\theta_{1}$ but lower than the threshold $\\theta_{2}$, we calculate the weighted sum of data security $P_{s}^{data}$ and service performance $P_{s}^{ser}$ of edge server s, adjusting the balance between the two with weight $w$ and penalizing with factor $\\alpha$, where $\\theta_{1} < \\theta_{2} < 1$ and $0 < \\alpha < 1$. Finally, when the defense performance of the edge server is higher than the threshold $\\theta_{2}$, we consider it to have a high degree of trust and directly use the weighted sum of data security and service performance to represent its reputation value. The second step of trust evaluation occurs at the interaction layer between the VMUs and the edge server, reflecting the direct interaction experience between the VMUs and the edge server. The reputation value of the edge server is assessed by recording the evaluation given by the VMU during each interaction with the edge server. Let $E_{s} = {E_{1,s},..., E_{i,s},..., E_{n,s}}$ denote the set of evaluations by all VMUs that have interacted with edge server s, where n denotes the number of VMUs interacting with server s. For each VMU i, the set $E_{i,s} = {C_{i_{1},s},..., C_{i_{m},s},..., C_{i_{k},s}}$ represents the evaluation scores across k interactions, where $C_{i_{m},s} = 1$ and $C_{i_{m},s} = 0$ indicate a positive evaluation and a negative evaluation for the m-th interaction, respectively. In addition, the total number of evaluations received by edge server s is calculated as $E_{tot} = \\sum_{i=1}^{n} i_{k}$. Based on the beta distribution [1], the reputation value of edge server s at the interaction layer is defined as\n$Rep_{s}^{Int} = \\frac{\\sum_{i=1}^{n}\\sum_{m=1}^{i_{k}}C_{i_{m},s} + 1}{E_{tot} + 2}\n$   (13)\nIn summary, when evaluating the reputation value of edge server s using the two-layer trust evaluation model, the initial step involves calculating its $P_{s}^{data}$ and $P_{s}^{ser}$ at the network communication layer and then performing a weighted summa- tion of $P_{s}^{data}$ and $P_{s}^{ser}$ to obtain the preliminary reputation value at this layer. The reputation value at the network com- munication layer is classified and discussed according to the historical defense data of edge server s. Then, the reputation value of edge server s at the interaction layer is calculated based on the interaction evaluations from VMUs. Finally, the comprehensive reputation value of edge server s is obtained by performing a weighted summation of the reputation values from the network communication layer and interaction layer, calculated as\n$Rep_{s} = \\xi Rep_{s}^{Net} + (1-\\xi)Rep_{s}^{Int},\n$   (14)\nwhere $\\xi$ is a weight parameter. In addition, the reputation value of the edge server s is updated by combining the latest evaluated reputation value $Rep_{s}^{late}$ with the past reputation value $Rep_{s}^{past}$. The formula for updating is given by\n$Rep_{s}^{new} = \\phi Rep_{s}^{late} + (1-\\phi)Rep_{s}^{past},\n$   (15)\nwhere $\\phi \\in (0, 1)$ controls the update rate."}, {"title": "D. Utility Function", "content": "To provide VMUs with a seamless and reliable service experience, we design the utility function of VMUs as the difference between reputation values and service latency. Specifically, the reputation value reflects the reliability and consistency of the edge server in providing services, while the latency measures the response and processing speed of the service, which directly affects the interactive experience of VMUs. High reputation values and low service latency lead to high utility value, indicating that VMUs can enjoy fast and reliable services. Therefore, the utility function of vehicle v at time t is given by\n$U_{v}(t) = \\lambda(Rep_{s}(t) + Rep_{s_{p}} (t)) - \\mu T^{sum} (t).\n$   (16)\n$Rep_{s}(t)$ and $Rep_{s_{p}}(t)$ are the reputation values of edge servers s and $s_{p}$ selected by the vehicle v at time t, respec- tively. $T^{sum}(t)$ is the total delay of the VT migration. $\\lambda$ and $\\mu$ are coefficients that convert unit reputation value and unit delay into monetary benefits. By applying the utility function, the experience benefit of the decision at a specific moment can be evaluated."}, {"title": "IV. PROBLEM FORMULATION", "content": "This paper aims to maximize the overall utility of vehicles within a finite time T by identifying the optimal migration decision strategy, subject to the constraints of edge server reliability and limited load, which is given by\n$\\underset{K_{u}}{max} \\sum_{t=1}^{T}\\sum_{v=1}^{V}U_{v}(t)\n$   (17a)\ns.t. $k_{sel}^{s}(t) \\in {1,2,...,S}, \\forall v \\in V,$\n   (17b)\n$k_{sel}^{sp}(t) \\in {1,2,...,S}, \\forall v \\in V,$\n   (17c)\n$K_{pre} (t) \\in [0,1], \\forall \\upsilon\\in V,$\n   (17d)\n$\\rho_{u,s}(t) < Room_{s}, s \\in {s, s_{p}}, \\forall y \\in V,$\n   (17e)\n$Rep_{s}(t) > Rep_{thre}, s \\in {S, S_{p}},$\n   (17f)\n$L_{s}(t) < L_{max}, s \\in {S, S_{p}},$\n   (17g)\n$t \\in {1, ..., T}.\n$   (17h)\nIn constraints (17b) and (17c), $k_{sel}^{ks}$ and $k_{sel}^{kos}$ represent the indices of the edge servers utilized by vehicle v for VT migra- tions. This ensures that at any given time, the edge servers used for VT migrations by vehicles belong to the existing set of edge servers, thereby securing the feasibility of the migration decisions. Constraint (17d) specifies that the proportion of pre-migration tasks lies between 0 and 1. Constraint (17e) requires the communication ranges of the selected edge servers s and sp to be greater than their Euclidean distances from the vehicle. Constraint (17f) demands that the reputation value of the selected server must exceed the preset threshold $Rep_{thre}$ to ensure the basic reliability of the task. Constraint (17g) ensures that the load on the chosen server at that moment does not reach its maximum capacity to prevent overload. Constraint (17h) indicates the need for optimization to be completed in a limited time frame T."}, {"title": "V. HYBRID-GDM FOR TWIN MIGRATION", "content": "In this section", "39": "the optimal solution of intelligent networks typically changes with the dynamic environment [40", "41": "to capture high- dimensional and complex network structures. This avoids the problem that traditional DRL algorithms tend to converge to sub-optimal solutions in such tasks. In the vehicular metaverse", "follows": 1, "Space": "The observation space O consists of real-time information from vehicles and edge servers. The observation space at time slot t is defined as O(t) = {$P_{v"}, "t), T^{sum} (t), \\forall v \\in V$} $\\cup$ {$L_{s}(t), Rep_{s}(t), \\forall s \\in S$}, where $P_{v}(t)$ is the position of vehicle v at the current moment, $T^{sum} (t)$ is the total delay of a VT migration in time slot t, and $L_{s}(t)$ and $Rep_{s}(t)$ are the load condition and reputation value of edge server s at this time, respectively. 2) Action Space: The action space is defined as the mi- gration decisions the agent generates for all vehicles, expressed as A = {$K_{v}, \\forall v \\in V$}. The migration decision of each vehicle at each time slot includes a discrete de- cision to select an edge server and a continuous decision to determine the proportion of pre-migration VT tasks. Thus, the migration decision of vehicle v at time slot t can be represented as the tuple $K_{v}(t) = {K_{sel}(t), K_{pre}(t)}$, where $K_{sel}(t) = {k_{sel}^{s}(t), k_{sel}^{sp}(t)}$ represents the in- dices of the current edge server s and the pre-migration edge server sp chosen by vehicle v at time slot t. These indices correspond one-to-one with the edge servers in the vehicular metaverse. $K_{pre}(t) \\in [0,1"], "Function": "In each time slot", "actions": "VTs migration de- cision of vehicles is sampled from the composite distribution $\\textbf{x}_{0} = \\pi_{\\theta}(O) \\sim R^{|A|}$ of the output from the reverse denoising process based on the given observation O. This distribution consists of three parts, i.e.,  $\\textbf{x}_{0} = \\^Ux\\cup\\^Ux\\cup\\^Uxpre$, where $\\textbf{x}_{0}^{s}$ represents the probability of each edge server being chosen for uploading VT tasks, $\\textbf{x}_{0}^{sp}$ represents the probability of each server being chosen as a pre-migration server, and $\\textbf{x}_{0}^{pre}$ represents"}