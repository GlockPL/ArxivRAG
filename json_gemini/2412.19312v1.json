{"title": "FROM INTERESTS TO INSIGHTS: AN LLM APPROACH \u03a4\u039f COURSE RECOMMENDATIONS USING NATURAL LANGUAGE QUERIES", "authors": ["Hugh Van Deventer", "Mark Mills", "August E. Evrard"], "abstract": "Most universities in the United States encourage their students to explore academic areas before\ndeclaring a major and to acquire academic breadth by satisfying a variety of requirements. Each\nterm, students must choose among many thousands of offerings, spanning dozens of subject areas, a\nhandful of courses to take. The curricular environment is also dynamic, and poor communication\nand search functions on campus can limit a student's ability to discover new courses of interest. To\nsupport both students and their advisers in such a setting, we explore a novel Large Language Model\n(LLM) course recommendation system that applies a Retrieval Augmented Generation (RAG) method\nto the corpus of course descriptions. The system first generates an 'ideal' course description based on\nthe user's query. This description is converted into a search vector using embeddings, which is then\nused to find actual courses with similar content by comparing embedding similarities. We describe\nthe method and assess the quality and fairness of some example prompts. Steps to deploy a pilot\nsystem on campus are discussed.", "sections": [{"title": "1 Introduction", "content": "Course selection is a critical aspect of a student's academic journey, significantly impacting their educational experience\nand future career prospects [Bruch and Feinberg, 2017]. On large campuses such as the University of Michigan, a\nmajor public university that offers more than 10,000 courses each year, this process can be quite challenging and time\nconsuming, especially for new students. Traditionally, students have relied on academic advisors and peer networks for\nguidance in course selection. However, this approach can lead to inequities in access to quality information, as different\nstudents may have varying levels of access to knowledgeable peers or experienced advisors [Lynch and O'riordan,\n1998]. Traditional recommender systems, such as collaborative filtering, have been employed in various domains\nto provide personalized recommendations. However, these systems face several limitations when applied to course\nrecommendations in higher education:\n\n1.  Lack of interactivity: Traditional systems typically provide static recommendations based on historical data,\n without the ability to engage in a dynamic dialogue with the user.\n2.  Impersonal recommendations: Course enrollment data alone does not fully capture a student's unique interests,\n aspirations, and career goals. As a result, recommendations may not align well with a student's individual\nneeds. Legal restrictions may not allow the use of some student demographic features in recommendation\nsystems.\n3.  Cold start problem: This issue is particularly acute for freshmen, who lack both course history and experience\n in navigating the selection process. Ironically, while upperclassmen might receive better recommendations\n from traditional systems, they are also better equipped to navigate course selection independently.\n\nTo address these challenges, we explore a course recommendation system that leverages the power of Large Language\nModels (LLMs) applied to the corpus of course descriptions. The work we present here is exploratory. We aim to share\na pilot recommender service with advisers and a test set of students within a few months. Plans for wider deployment\nwithin an existing campus service called Atlas are discussed below.\n\nAfter reviewing related work in \u00a72 and providing background context in \u00a73, we outline the methods used in \u00a74. We\nexplore semantics of the embedding space, offer example service recommendations from simple prompts, and perform\npreliminary tests for biased responses in \u00a75 before summarizing in \u00a76."}, {"title": "2 Related Work", "content": "Course recommender systems to help students make better decisions about their academic pathways have been studied\npreviously. Prior work has explored various approaches including collaborative filtering, content-based methods, and\nhybrid systems that combine multiple techniques. Our work seeks to expand the capabilities of a search-based curricular\ninformation service (see \u00a73.1) to include course recommendations."}, {"title": "2.1 Traditional Approaches", "content": "Early course recommender systems relied heavily on collaborative filtering techniques, analyzing historical enrollment\npatterns and student grades to make recommendations [Lynn and Emanuel, 2021]. While effective for established courses\nwith sufficient data, these methods suffer from the cold-start problem - they cannot make meaningful recommendations\nfor new courses or students without historical data. This limitation is particularly challenging in academic environments\nwhere course offerings and student populations dynamically evolve on few-year timescales."}, {"title": "2.2 Knowledge-Based Systems", "content": "To address cold-start limitations, some researchers have developed knowledge-based recommender systems that\nincorporate domain expertise and academic rules. For example, CrsRecs [Ng and Linn, 2017] uses topic analysis,\nsentiment analysis, and survey data about student priorities to rank potential courses. These systems can make\nrecommendations even without extensive historical data, but require significant effort to encode domain knowledge and\nrules. The Atlas platform [Evrard et al., 2023] uses university credentialing rules to offer course options to students\nwithin a degree completion feature."}, {"title": "2.3 Hybrid Approaches", "content": "Recent work has focused on hybrid approaches that combine multiple recommendation techniques. Pathways [Chen\net al., 2022] visualizes historical course enrollment patterns while incorporating student interests and academic require-\nments. The system helps students explore course options through an interactive interface, balancing personalization\nwith serendipitous discovery. Similarly, Salehudin et al. [Salehudin et al., 2019] propose a collaborative filtering model\nthat integrates with historical enrollment patterns and student performance data to make personalized recommendations."}, {"title": "2.4 Evaluation Challenges", "content": "A common challenge across course recommender systems is evaluation. Unlike e-commerce recommendations where\npurchases provide clear success metrics, measuring the quality of course recommendations requires long-term analysis\nof student outcomes [Pardos et al., 2018][Pardos and Jiang, 2020]. Additionally, factors like prerequisites, graduation\nrequirements, and course availability constrain the recommendation space in ways not present in other domains."}, {"title": "2.5 Data Requirements", "content": "Most sophisticated recommendation approaches require extensive data collection over multiple academic terms or years\nto build effective models [Salehudin et al., 2019]. This requirement presents challenges for institutions looking to\nimplement such systems, as they must invest significant time in identifying and collating data access across multiple\ndata servers, often managed by different units, before the system becomes useful.\n\nUniversities are leaky data environments, and corporate actors have a potential advantage if they can aggregate data\nprovided by students themselves across multiple institutions. University leadership should prepare internally before\nexternal solutions for course recommendations appear on their campus. The work presented here reflects a philosophy\nof ownership and innovative cultivation of an institution's information and intelligence environment."}, {"title": "3 Background", "content": ""}, {"title": "3.1 University Context: the Atlas Platform", "content": "The work reported here is an exploratory effort aimed at providing a pilot service to students deployed through the Atlas\nplatform [Evrard et al., 2023] at the University of Michigan. On Atlas, students can explore the curricular landscape of\ncourses, instructors and degrees through search and hyperlinks, and they also register for classes using Atlas' Schedule\nBuilder feature. The platform hosts tens of thousands of users each semester.\n\nThe Atlas team is working on a degree completion tool that will recommend course options based on a student's declared\ndegree credentials. By its nature, this recommender service is strongly constrained by existing degree requirements.\nThe work we report here seeks to complement this prescriptive approach with a more open style of inquiry that could\ninform students who are new to campus or students who are looking for courses outside of a particular degree pathway.\n\nSince students already talk to their peers, advisers, and faculty about course opportunities on campus, a service based\non natural language queries would be a natural fit to support their discovery needs. Ideally, the service would go beyond\nproducing a simple list of courses by offering explanations as to why the entries fit the expressed need along with some\nindication of the quality of that fit."}, {"title": "3.2 LLMs for Recommendation", "content": "Recent advances in LLMs have opened new possibilities for recommender systems. Rather than treating recommendation\nas purely a matching or ranking problem, LLMs enable a more flexible approach by converting recommendation tasks\ninto language understanding and generation problems [Geng et al., 2023]. This allows recommender systems to leverage\nthe rich semantic understanding and generation capabilities of language models while providing a unified framework\nfor multiple recommendation tasks.\n\nLLMs can serve multiple roles within recommender systems [Xu et al., 2024]. They can perform feature engineering\nby generating rich textual features, extract semantic embeddings for items or users to address cold-start scenarios, act\nas direct recommenders, or serve as controllers enabling more interactive and explainable recommendations. These\ncapabilities can be leveraged through zero-shot/few-shot approaches using carefully constructed prompts, or through\nfine-tuning on domain-specific recommendation data.\n\nA key advantage of language model-based recommenders is their ability to unify diverse types of information and tasks\nunder a single framework. As demonstrated by the M6-Rec system [Cui et al., 2022], a single foundation model can\nsupport multiple recommendation tasks by converting them into language understanding and generation problems. This\nincludes traditional tasks like retrieval and ranking, as well as more complex tasks such as explanation generation and\nconversational recommendation. The text-based representation approach allows the system to handle user behavior data,\nitem metadata, and user-item interactions in a consistent format, while avoiding the limitations of ID-based systems\nwhen dealing with unseen items."}, {"title": "3.3 Retrieval Augmented Generation", "content": "Using a language model for course recommendation requires the model to access genuine course data. In recent times,\nlanguage models are instructed to use data by generating a context and adding it to the prompt. It would be unrealistic\nto paste the entire collection of courses and course descriptions into a prompt. Instead, methods have been developed to\nprovide an effective context from a body of knowledge. One popular paradigm for information retrieval is Retrieval\nAugmented Generation (RAG) [Lewis et al., 2021]."}, {"title": "4 Course Recommendation Process", "content": "The course recommendation system employs a hybrid approach that combines embedding-based similarity search with\nLLM reasoning to provide personalized course suggestions. Users interact with the recommender using natural language\nto describe their background, interests, and goals. The system operates on a dataframe of course descriptions and\nallows users to constrain the search space through simple filtering based on course levels, enabling recommendations\nappropriate to different academic stages.\n\nThe recommendation process consists of five main operations illustrated in Figure 1 and organized into two stages:\n\n1.  Context Generation: Creates a relevant search context from the user query\n2.  Recommendation: Identifies and ranks the most suitable courses"}, {"title": "4.1 Data", "content": "The system operates on a pandas dataframe (which we store as\na .pkl) containing course information with the following fields:\n\n\u2022 Course number (unique identifier)\n\u2022 Course level (100, 200, etc.)\n\u2022 Course title\n\u2022 Course description\n\u2022 Pre-computed embedding vector of the course descrip-\ntion\n\nThe embeddings are generated using OpenAI's text-embedding-\nada-002 model [OpenAI, 2024], which maps course descrip-\ntions into a 1,536 dimensional vector space where semantic\nsimilarity between courses can be measured."}, {"title": "4.2 Context Generation", "content": "Traditional RAG systems rely on direct semantic similarity be-\ntween query and document embeddings for retrieval, which\ncan be suboptimal when there is a significant lexical and se-\nmantic gap between how users express their interests and how\ndocuments are written. This challenge is particularly acute\nin educational contexts where student queries (e.g., \"I want to\nlearn how computers think\") often lack the technical vocabulary\nand structured format of course descriptions (e.g., \"Introduction\nto Neural Architectures\u201d, \u201cMathematical Methods of Deep\nLearning Systems\"). Even modern dense retrievers like DPR"}, {"title": "4.3 Recommendation", "content": "After generating a filtered context of the most semantically relevant courses, the system employs GPT-40 [OpenAI\net al., 2024] to make the final recommendation. We use GPT-40's enhanced reasoning capabilities to better evaluate the\ncomplex interplay between student interests, course content, and educational trajectories.\n\nThe recommendation prompt engineering focuses on three key objectives: maintaining recommendation quality,\nensuring system reliability, and providing actionable insights. To maintain consistency across recommendations, we\nset the temperature parameter to 0, though our experiments reveal that significant output variability persists for more\nopen-ended queries a property we discuss in our results section.\n\nThe system returns a set of ten course recommendations, structured in markdown format for enhanced readability.\nEach recommendation includes the course identifier, a short, focused rationale explaining the course's relevance to\nthe student's specific profile, and a confidence level assessment. This structured format balances comprehensiveness"}, {"title": "5 Results", "content": "As discussed in [Pardos et al., 2018, Pardos and Jiang, 2020], the evaluation of course recommendation systems suffers\nfrom a lack of ground truth to compare recommendations with. While academic advisers might lay claim to this truth,\nit's very hard to scale this information source.\n\nLacking this formal evaluative structure, we instead perform a series of experiments to heuristically evaluate the\nintuition behind our design choices and the properties of course recommendations. In Section 5.1, we evaluate the\ntext-embedding-ada-002 model's ability to capture semantic relationships by constructing network visualizations where\nnodes represent academic subjects and edges indicate the strength of cross-subject course similarities. In Section 5.2,\nwe analyze the relationship between courses' cosine similarity rankings during context generation and their likelihood\nof being recommended, providing insight to determine an optimal threshold for the context window size. In Section 5.3,\nwe evaluate example outputs from the recommender. In section 5.4, we conduct preliminary bias testing across three\ndemographic attributes. Finally, in Section 5.5 we evaluate the speed and computational costs of running the course\nrecommender."}, {"title": "5.1 Subject-level Embedding Similarities", "content": "To evaluate the semantic coherence of the text-embedding-ada-002 model, we analyze interdepartmental relationships\nby aggregating course embeddings at the subject level. For each academic subject/department, we create a representative\nembedding by normalizing the mean of all course embeddings within that subject. We then visualize these relationships\nthrough network graphs where nodes represent subjects and edge colors indicate the cosine similarity between subject\nembeddings, with warmer colors (red) representing higher similarity."}, {"title": "5.2 Similarity Rank Analysis", "content": "To develop intuition behind an optimal context window size for our recommender system, we conduct an analysis of the\nrelationship between a course's similarity ranking during context generation and its likelihood of being recommended.\nWe designed an experiment using 10 diverse student queries, running 10 trials per query to account for variability in\nGPT-40's recommendations. In each trial, we tracked which courses were recommended and their associated cosine\nsimilarity ranking during context generation."}, {"title": "5.3 Course Recommendation Examples", "content": "We present a pair of explicit course recommendations generated from two queries in Figure 4. The first example\nimagines a first-year student submitting an open ended query while the second imagines a more advanced student with\na focused query. Query 1's recommendations draws from undergraduate courses, numbered 100-499, while Query 2\nincludes graduate courses at the 500 level."}, {"title": "5.3.1 Analysis of Query 1", "content": "The student states their Political Science major and four examples of their interests. The student does not place\nrestrictions on the type of courses they want. Thus, an ideal recommendation would recommend a wide range of courses\nrelevant to the student's major and interests. The recommender system's response to Query 1 demonstrates positive\ncharacteristics across three dimensions:\n\nCross-Disciplinary Integration. The recommendations span multiple subjects (ENVIRON, POLSCI, STATS) while\nmaintaining relevance to the student's interests. The courses address the stated areas of interest:\n\n\u2022 Public policy content in ENVIRON 405\n\u2022 Historical aspects integrated in ENVIRON 405\n\u2022 Computer programming & Data analysis through POLSCI 373 & 300, and STATS 306 & 206\n\nSkill Development Coverage. The course selection spans four distinct skill areas:\n\n\u2022 Core disciplinary knowledge: POLSCI 140, 190\n\u2022 Research methodology: POLSCI 300, 381\n\u2022 Technical competencies: POLSCI 373, STATS 306 & 206\n\u2022 Applied analysis: ENVIRON 405, POLSCI 499\n\nConfidence Distribution. In this example, higher confidence correlates with direct major relevance, while medium\nconfidence correlates with complementary and specialized offerings."}, {"title": "5.3.2 Analysis of Query 2", "content": "The student states their math major and interest in computer science theory. Ideal recommendations would be theoretical\ncomputer science courses that leverage mathematical foundations. With a much narrower range of acceptable courses\nfor this query, our primary evaluation metric is relevance to theoretical computer science.\n\nTheoretical computer science focuses on mathematical models of computation, complexity theory, and algorithm\nanalysis. These areas require rigorous mathematical foundations and formal proof techniques.\n\nThe confidence distribution in the recommendations shows a clear pattern of relevance:\n\n\u2022 The five high-confidence recommendations (EECS 574, EECS 376, CSE 586, EECS 477, MATH 416)\ndirectly address core theoretical computer science topics (algorithms, computational complexity, theory of\ncomputation)\n\u2022 The medium-confidence recommendations support theoretical foundations through related mathematical\nareas (discrete mathematics, combinatorics, number theory) that provide important background for advanced\ntheoretical computer science study"}, {"title": "5.3.3 Takeaways", "content": "We manually inspect the course descriptions associated\nwith each recommendation and verify that the provided\nrationales are accurate. Through extended testing of the\nrecommender system, we observe that it consistently gen-\nerates contextually appropriate recommendations across\ndiverse query types. The system demonstrates strong\ncapability in both broad, exploratory queries and special-\nized requests. The confidence ratings provide meaningful\nguidance by accurately reflecting the alignment between\ncourses and student goals. Our experience with the sys-\ntem suggests it can serve as a valuable tool for academic\nadvising, helping students and advisors discover relevant\ncourses across subjects while maintaining focus on their\nobjectives."}, {"title": "5.4 Bias Testing", "content": "To evaluate potential biases in our recommender system,\nwe analyze variations in course recommendations across\nthree demographic dimensions: birth sex (man/woman),\nrace (white/black), and sexuality (gay/straight). For each\ndimension, we ran 100 trials using paired queries that\ndiffered only in the demographic descriptor (e.g., \"I am a\nman/woman interested in machine learning. What courses\nshould I take?\").\n\nFor each pair, we compared recommendation rates of the\ntop 10 most recommended courses across both queries.\nA rate of 1.0 indicates consistent recommendation across\nall trials. Figure 5 shows the recommendation rates for\neach demographic comparison.\n\nAcross all three experiments, we see EECS 445: Introduc-\ntion to Machine Learning recommended at a rate of 1.0.\nThe rest of the recommended courses are recommended\nat different rates for each query formulation across all\nthree experiments.\n\nIn Figure 5a and c, EECS 551 and EECS 492 show sig-\nnificant variations between query pairs. EECS 551 is\nrecommended at a rate of ~ 0.9 for queries with 'woman'\nversus ~ 0.0 for 'man', and ~ 0.9 for 'gay' versus ~ 0.4 for 'straight'. EECS 492 shows the opposite pattern: ~ 0.85\nfor 'man' versus ~ 0.1 for 'woman', and ~ 0.75 for 'straight' versus 0.0 for 'gay'. EECS 551 teaches extremely\ntechnical mathematical background behind machine learning methods and EECS 492 teaches more conceptual ideas\nbehind creating AI systems. Figure 5b shows a large difference in recommendation rate for EECS 504 between query\npairs, with ~ 0.8 for 'white' and 0.0 for 'black'. EECS 504 teaches technical foundations of computer vision. Course\ntitles and descriptions can be found in Appendix B.\n\nWe argue that these recommendation variations appear unrelated to learned societal biases, but rather emerge from the\nunderlying dynamics of the language model. Consider the birth sex bias experiment: EECS 551 (a highly technical\nmathematics course) is recommended more frequently for women, while EECS 492 (a more conceptual AI course) is\nrecommended more for men. This pattern contradicts what we might expect if the model were exhibiting stereotypical\nbirth sex biases from internet training data."}, {"title": "5.5 Speed Analysis", "content": "To evaluate the computational costs of generating recommendations, we measured the average total recommendation\ntime and context retrieval time over 10 trials for 4 course filtering levels, as shown in Table 1. Testing was run on a\nLenovo Yoga 9i laptop with an Intel Core i7-10750H CPU. We developed a web application interface using FastAPI to\nprovide an accessible front-end for the recommender system.\n\nThe context retrieval times shown in Table 1 represent when our system has identified relevant courses and can begin\ngenerating recommendations. While these 2-5 second retrieval times demonstrate reasonable performance, users\ncurrently must wait for the entire recommendation to be generated (9-13 seconds total) before seeing any results. This\nmoderate delay time stems from accessing OpenAI models through UMGPT's non-streaming implementation. Once\nUMGPT adds streaming capabilities, users will be able to see recommendations being generated in real-time after the\ninitial context retrieval period, creating a more interactive experience."}, {"title": "6 Summary and Discussion", "content": "We introduce a two-stage retrieval process for a RAG-based LLM course recommender system that uses only course\ndescriptions. A first step generates an idealized course description based on the user query, and a second uses an\nembedding space similarity to surface a context of the fifty most similar courses. A final ten course recommendations\nare generated by providing this output along with the query context to the LLM. The recommendations are returned\nwith both an explanation and a confidence rating.\n\nWe show that the LLM's embedding space contains useful information about conceptual ties across subject areas.\nExample recommendations demonstrate the system's ability to join courses across multiple subject areas based on the\nuser's stated interests. A preliminary study of bias finds that top-ranked courses are similar, while intriguing potential\npatterns at lower rank deserve further study.\n\nBeing independent of historical enrollment data and credentialing requirements, the method is easy to implement with\ndata that is openly available on most campuses. This form of recommender system could be a valuable discovery tool to\nstudents or advisers new to campus or to advisers and faculty seeking to identify whether courses covering specific\ntopics already exist at their institution.\n\nThe lack of information on prior student pathways and institutional degree requirements would limit the widespread\nimplementation of this style of course recommendation, especially for students who are near degree completion. The\nAtlas platform already has a degree progress feature that surfaces the course options required to complete a student's\nchosen set of credentials. Before a wide deployment of the recommender system explored here, we foresee augmenting\nthis prototype with planning ability, for example via the planning domain definition language [Liu et al., 2023].\n\nIn the near term, we plan to engage with advising staff to evaluate the responses to common prompts that they've\nencountered. Academic advisers are key participants in course planning, and their acceptance of any automated system"}, {"title": "A Similarity Rank Experiments", "content": "We analyze recommendation likelihoods and similarity rank distributions across different query types. For each query,\nwe plot: (1) the distribution of similarity ranks in recommendations over 10 trials, and (2) the distribution of similarity\nranks for individual recommended courses. As shown in Figures 6-9, focused queries (e.g., \"Need to improve my data\nanalysis skills...\") tend to generate likelihood-rank distributions skewed toward highly ranked courses, while broader\nqueries (e.g., \"Fascinated by how new technologies...\") tend to produce wider likelihood-rank distributions with more\nvariable course-rank patterns."}, {"title": "B Bias Testing Course Descriptions", "content": "EECS 551 - Matrix Methods for Signal Processing, Data Analysis and Machine Learning: Theory and application\nof matrix methods to signal processing, data analysis and machine learning. Theoretical topics include subspaces,\nengenvalue and singular value decomposition, projection theorem, constrained, regularized and unconstrained least\nsquares techniques and iterative algorithms. Applications such as image deblurring, ranking of webpages, image seg-\nmentation and compression, social networks, circuit analysis, recommender systems and handwritten digit recognition.\nApplications and theory are covered in greater depth than in EECS 453.\nEECS 492 - Introduction to Artificial Intelligence: Introduction to the core concepts of AI, organized around building\ncomputational agents. Emphasizes the application of AI techniques. Topics include search, logic, knowledge represen-\ntation, reasoning, planning, decision making under the uncertainty, and machine learning.\nEECS 504 - Foundations of Computer Vision: The course lays in framework for the extraction of useful information\nfrom images. Topic include representations of visual content (e.g., functions, points, graphs); visual invariance;"}]}