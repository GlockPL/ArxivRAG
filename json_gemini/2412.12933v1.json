{"title": "Two Layer Walk: A Community-Aware Graph Embedding", "authors": ["He Yu", "Jing Liu"], "abstract": "Community structures play a pivotal role in understanding the mesoscopic organization of networks, bridging local and global patterns. While methods like DeepWalk and node2vec effectively capture node positional and local structural information through random walks, they fail to incorporate critical community information. Other approaches, such as modularized nonnegative matrix factorization and evolutionary algorithm-based methods, preserve community structures but suffer from high computational complexity, making them unsuitable for large-scale networks. To address these limitations, we propose Two Layer Walk (TLWalk), a novel graph embedding algorithm that explicitly incorporates hierarchical community structures. By balancing intra- and inter-community relationships through a community-aware random walk mechanism automatically without using any parameters, TLWalk achieves robust and scalable representation learning that can fully extract local and global topologies, which is proved theoretically by showing TLWalk can overcome locality bias in the walk. Extensive experiments on benchmark datasets demonstrate TLWalk's superior performance, with significant accuracy gains-up to 3.2%-over state-of-the-art methods for the link prediction task. TLWalk's ability to encode both dense local and sparse global structures ensures its adaptability across diverse network types, offering a powerful and efficient solution for network analysis.", "sections": [{"title": "Introduction", "content": "Graphs are ubiquitous in representing complex systems across diverse domains, from social networks\u00b9 and biological systems\u00b2 to transportation\u00b3 and recommendation systems4. These structures, consisting of nodes and edges, capture re-lationships and interactions within the system. Analyzing these graphs is crucial for tasks like link prediction, node classification, and uncovering hidden structures. Graph embedding provides a powerful solution by mapping graphs into low-dimensional vector spaces while preserving their essen-tial properties.5\u20137 These embeddings encode positional rela-tionships, structural roles, and patterns, facilitating efficient downstream tasks. Positional information reflects how nodes are situated, while structural roles highlight patterns and topo-logical features. A wide range of embedding methods has been developed, broadly categorized into shallow and deep learning-based approaches. Shallow methods, such as Deep-Walk,5 node2vec, and matrix factorization, efficiently cap-ture local and global patterns through strategies like random walks or linear decomposition. Deep learning approaches, such as Graph Neural Networks (GNNs) and Graph Atten-tion Networks (GATs)10, address non-linear dependencies but face challenges like over-smoothing, high computational demands, and sensitivity to hyperparameters.\nCommunities, residing at the mesoscopic level, bridge microscopic node-level and macroscopic graph-level struc-tures 11,12. By identifying densely connected groups of nodes, communities provide a unique lens for understanding inter-mediate network organization. Incorporating community in-formation into embeddings enhances their capacity to encode local and global patterns, making them vital for nuanced net-work analysis. Despite these advancements, effectively incor-porating community structure into graph embeddings remains a critical challenge. Early community-preserving embedding methods, such as modularized nonnegative matrix factoriza-tion (M-NMF)13 and evolutionary algorithm(EA)14,15-based approaches, have demonstrated the value of integrating com-munity information. However, M-NMF suffers from high computational complexity due to iterative matrix decompo-sition and lacks support for incremental learning, making it unsuitable for large-scale or dynamic networks. Similarly, EA-based methods, such as EA-NECommunity16, while capable of preserving both local proximity and community structures, are computationally intensive. These limitations highlight the need for scalable, dynamic, and community-aware em-bedding methods that strike a balance between computational efficiency and representational richness.\nThe random walk mechanism used in DeepWalk and node2vec is simple yet powerful for extracting local structural and positional information in graphs. Their inherent flexi-bility allows for incremental updates and scalability to large graphs. Traditional methods often mix local and global walks, resulting in a loss of critical mesoscopic information and an in-ability to fully leverage community structures. In contrast, we propose Two Layer Walk (TLWalk), a novel graph embedding algorithm designed to overcome the limitations of existing approaches in capturing community structures17. TLWalk in-troduces a hierarchical two-layer design that separates the net-work into an intra-community layer and an inter-community layer.By independently conducting walks within each layer, TLWalk effectively extracts dense local structures from com-munities while capturing sparse global relationships across communities. This design allows TLWalk to preserve the nuanced interplay between local and global structures while ensuring communication between layers through \"bridging\" nodes-key connectors that link communities. This separa-tion and targeted exploration enable TLWalk to achieve a more precise and comprehensive embedding of network structures, addressing gaps left by existing methods. Figure 1 illustrates this hierarchical organization using the Zachary's Karate Club network 18.\nThis study rigorously evaluates TLWalk through experi-ments on benchmark datasets spanning social, biological, and ecological domains. The results consistently demonstrate TL-Walk's superior performance in tasks such as link prediction, node classification, and clustering, outperforming state-of-the-art methods while maintaining computational efficiency. Our key contributions are as follows:\n1. We propose a graph embedding algorithm that explicitly incorporates community structures into random walk-based methods without using any parameters, effectively bridging local and global perspectives in network analysis.\n2. We theoretically prove the proposed TKWalk can over-come locality bias, thus, can fully extract both local and global topologies.\n3. We validate the versatility of TLWalk, demonstrating significant performance improvements across key tasks, including link prediction, node classification, and clus-tering.\nBy addressing critical challenges in graph embedding, this study not only enhances predictive performance but also advances the theoretical and practical development of community-aware algorithms. Leveraging random walk-based methods to effectively extract community structures, TLWalk strikes a balance between computational efficiency and representational richness, establishing itself as a powerful tool for diverse real-world network analysis tasks."}, {"title": "Methods", "content": "Preliminaries\nA graph is represented as G = (V,E), where V is the set of nodes, and E is the set of edges connecting pairs of nodes. For an undirected graph, (u,v) \u2208 E implies (v,u) \u2208 E. The adjacency matrix of G is denoted by A \u2208 {0,1}|V|\u00d7|V|, where A[u, v] = 1 if (u, v) \u2208 E, and A[u, v] = 0 otherwise.\nThe degree of a node v, denoted by d(v), is the number of edges incident to v:\n$d(v) = \\sum_{u \\in V} A[v, u].$ \n\nA community in a graph refers to a subset of nodes that are densely connected internally but sparsely connected to nodes outside the subset. A community partition of G is"}, {"title": "Two Layer Walk Algorithm", "content": "TLWalk is a graph embedding algorithm designed to cap-ture mesoscopic community structures while maintaining scalability and efficiency. By explicitly modeling both intra-community and inter-community relationships, the method ensures robust representations that encode both local and global graph patterns. The algorithm consists of three main compo-nents: community detection, hierarchical random walks, and embedding generation using Word2Vec.\nCommunity Detection and Modeling\nTo identify mesoscopic structures in the graph, we employ the Louvain algorithm for community detection20, which opti-mizes modularity Q to partition nodes into communities. Each community is defined as a densely connected group of nodes, while inter-community edges represent connections between different groups. This leads to two type of key subgraphs:\nIntra-Community Subgraphs: For each community Ci, we construct a subgraph G\u2081 = (Vi,Ei), where V\u00a1 is the set of nodes within community Ci. E\u00a1 is the set of edges between nodes in Ci. These subgraphs capture dense local patterns, ensuring that nodes within the same community are closely embedded.\nInter-Community Subgraph: The inter-community sub-graph Gc = (Vc, Ec) captures connections between communi-ties, where Ve is the set of bridging nodes that participate in at least one inter-community edge, which connecting two nodes in different communities. Ec is the set of edges between nodes in Ve that connect different communities. This representation captures the sparse global structure of the network, focusing on the relationships between different communities.\nPath-Level Random Walks\nRandom walks in TLWalk are designed to operate fully in the intra-community layer or the inter-community layer, where the intra-community layer corresponds to the intra-community subgraphs and the inter-community layer cor-responds to the inter-community subgraphs. In this way, the path-level complete random walk in each layer ensure a comprehensive exploration of both dense local structures and sparse global relationships. Each walk with length Lw , w = (W0, W1,..., $W_{L_w-1}$), is conducted entirely within a se-lected layer by the node types. Classification of the current node wt, resulting in two distinct exploration strategies:\n1. Non-bridging nodes (Community-exclusive nodes) (v \u2208 Ve)): For nodes that belong solely to the intra-community subgraph Gi and are not bridging nodes, their walks are pri-marily restricted to the intra-community layer, ensuring that dense local structures are captured. When t = 0, the walk starts from v; that is, wo = v. Then, wt+1 is selected with the following probability:\n$P_{intra}(w_{t+1}| w_t) = \\frac{A[w_t, w_{t+1}]}{\\sum_{v'\\in V_i} A[w_t, v']},\\quad w_t, w_{t+1} \\in V_i$.\n\nThe next step wt+1 may include bridging nodes in Vi, as they are part of the community C\u012f. This design ensures that while the walk is restricted to the community Ci, it captures both dense intra-community structures and the influence of bridg-ing nodes within the community.\n2. Bridging nodes (v \u2208 V): For bridging nodes, the walk explores the inter-community layer Gc, capturing sparse global structures across communities. When t = 0, the walk starts from v; that is, wo = v. Then, wt+1 is selected with the following probability:\n$P_{inter}(w_{t+1}| w_t) = \\frac{A[w_t, w_{t+1}]}{\\sum_{v'\\in V} A[w_t, v']},\\quad w_t, w_{t+1} \\in V_c$.\n\nThe distinction between V(e) and Ve introduces an implicit parameterization of the random walk process. This dynamic adjustment reflects the network's structural properties without requiring manual parameters and enables TLWalk to automat-ically and systematically balance local and global exploration by leveraging both the intra-community and inter-community layers. The random walk mechanism, detailed in Algorithm 1, seamlessly integrates this layer-specific exploration strategy, allowing the algorithm to adaptively encode the complex in-terplay between dense local patterns and sparse global rela-tionships."}, {"title": "Computational Complexity", "content": "The computational efficiency of TLWalk is achieved through modularity, hierarchical design, making it suitable for large-scale graphs. Below, we analyze the complexity of its compo-nents:\nThe community detection step leverages the Louvain algo-rithm, which is widely regarded for its efficiency and scalabil-ity. The complexity of this algorithm is:\n$O(|E|log|V|),$ \nwhere |E| is the number of edges and |V| is the number of nodes in the graph. This logarithmic dependence on |V| arises from the iterative optimization of modularity.\nRandom walks in TLWalk are performed separately within intra-community subgraphs and the inter-community graph, the cost of generating a walk is proportional to the walk length Lw and the number of walks per node R. The total complexity of this step is:\n$O(R L_w V).$ \nCombining the above steps, the overall complexity of TL-Walk is:\n$O(|E|log|V|)+O(R \\cdot L_w \\cdot |V|).$"}, {"title": "Results", "content": "In this section, we evaluate the proposed TLWalk (TLW) method against six baseline methods: node2vec (N2V), Deep-Walk (DW), LINE7, Struc2Vec (S2V)21, GraphSage (GS)22, and M-NMF (MN)13.\nThe implementations of these methods are sourced from publicly available repositories. Specifically, node2vec (N2V), DeepWalk (DW), and M-NMF (MN) are implemented using the Karate Club library 23 (https://github.com/benedekrozemberczki/karateclub). LINE is implemented based on the repository provided at https://github.com/tangjianpku/LINE, while Struc2Vec (S2V) and GraphSage (GS) are sourced from their respective repositories at https://github.com/leoribeiro/struc2vec and https://github.com/williamleif/GraphSAGE.\nAll graph datasets used in our experiments are publicly available at NetworkRepository24 (https://networkrepository.com) and the Stanford Large Net-work Dataset Collection25 (https://snap.stanford.edu/data).\nExperiment 1: Link Prediction\nLink prediction26,27 assesses the capability of embedding methods to infer missing edges in a graph, which is essen-tial for understanding network dynamics and uncovering hid-den relationships. We conduct experiments on six datasets spanning diverse domains, including social networks (soc-hamsterster, fb-pages-food, ego-Facebook), biological net-works (bio-DM-LC, bio-WormNet-v3), and ecological net-works (aves-weaver-social), as summarized in Table 2.\nExperimental Setup\nWe split each graph into 70% edges for training and 30% edges for testing. Node embeddings are learned using the training graph, where edges corresponding to the testing edges are removed to ensure that the testing set remains unseen during embedding learning. For each split (training or testing), positive and negative samples are generated separately based on the corresponding subset of edges. Positive samples consist of edges in the graph, while negative samples are non-existent edges randomly sampled from the graph.\nFor TLW, DW, and N2V, we set the hyperparameters to Lw = 80 (walk length), R = 10 (number of walks per node), d = 128 (embedding dimension). The performance of all algorithms is evaluated using the logistic regression, and AUC (Area Under Curve). Edge embeddings are computed by applying the element-wise Hadamard product (vi vj) on the node embeddings of the two nodes vi and vj. All experiments are repeated for 10 random seeds, and the average AUC scores are reported in Table 3.\nResults and Analysis\nTable 3 presents the AUC scores for TLW and baseline meth-ods. TLW consistently achieves the highest scores across all datasets, demonstrating its effectiveness in preserving both local and global graph features. On bio-WormNet-v3, TLW achieves an AUC of 0.9915, surpassing M-NMF by 3.2%, while on ego-Facebook, TLW achieves 0.9885, showcasing robust performance on large-scale social networks. Notably, TLW excels on datasets with strong community structures, such as soc-hamsterster (AUC 0.9122 vs. 0.861 for the best baseline). Illustrated in Figure 2, TLW achieves significant gains over baseline methods, particularly on fb-pages-food and soc-hamsterster, while maintaining consistent perfor-mance across diverse datasets.\nThese results highlight TLW's ability to capture both meso-scopic community structures and global connectivity patterns, achieving superior performance and demonstrating its robust-ness and adaptability in link prediction tasks across diverse network topologies."}, {"title": "Experiment 2: Node Clustering and Classification", "content": "We evaluated the performance of TLW on two fundamental tasks: Node Clustering and Node Classification, using nine diverse real-world networks that include the label of commu-nity. These experiments demonstrate the effectiveness of TLW compared to six baseline methods across various domains.\nDatasets and Experimental Setup\nThe datasets span academic, social, and political domains. WebKB: Academic networks from Cornell, Texas, Washing-ton, and Wisconsin28,29, comprising 877 webpages and 1608 edges, divided into five ground-truth communities per uni-versity. Polblogs: A political blog network with 1222 nodes and 16,715 edges, categorized into two communities (liberal and conservative)30. Facebook Social Networks: University social networks, including Amherst, Hamilton, Mich, and Rochester, where ground-truth communities correspond to users' class years31.\nEmbeddings were generated using TLW and baseline meth-ods with a uniform embedding dimension (d = 128). For Node Clustering, K-means clustering32 was applied to the learned representations, and clustering accuracy was calcu-lated. For Node Classification, a logistic regression model33 classified nodes into labels, with 80% of nodes used for train-ing and 20% for testing. Each task was repeated five times, and average results are reported. This evaluation approach is consistent with prior studies on graph embeddings.\nNode Clustering Results\nTable 4 summarizes the clustering accuracy across datasets. TLW consistently achieves the highest accuracy on most datasets. Notably, TLW achieves 85.17% accuracy on the Pol-blogs dataset, surpassing the next best method (N2V) by 0.4%. On academic datasets, such as Cornell and Texas, TLW out-performs the second-best baseline by 4.1% and 1.9%, respec-tively. On smaller datasets, such as Rochester, TLW demon-strates a notable lead, achieving 39.35% accuracy compared to 33.80% by GS. These results highlight TLW's strength in preserving community structures across diverse graph topolo-gies.\nNode Classification Results\nTable 5 presents the classification accuracy. TLW outperforms all baseline methods in nine datasets. On the Amherst dataset, TLW achieves 93.74%, surpassing the next best method (GS) by 2.2%. Similarly, on Polblogs, TLW achieves 91.20%, showcasing its ability to leverage both local and global fea-tures. On challenging datasets, such as Texas, TLW main-tains a competitive edge, achieving 74.89% accuracy with a 1.7% lead over MN. These results demonstrate that TLW produces high-quality embeddings that excel in classification tasks, effectively capturing both mesoscopic and global graph structures."}, {"title": "Experiment 3: Community Detection on LFR Bench-mark Networks", "content": "To evaluate the performance of node embedding in detect-ing community structures34,35, we conducted experiments on synthetic networks generated using the LFR benchmark model36. The LFR model allows for realistic community structures with heterogeneous degree and community size distributions, which are essential for evaluating the robust-ness and scalability of graph embedding methods in practical scenarios37.\nExperimental Setup\nSynthetic networks are generated using the LFR benchmark model as follows: Each network consists of n = 104 nodes with an average degree (k) = 10, ensuring a moderate connec-tivity level. The degree distribution follows a power law with degree exponents \u03c4\u2081 = 2.1 and \u03c4\u2081 = 3.0, where \u03c4\u2081 = 2.1 rep-resents a highly heterogeneous distribution with a few nodes having significantly higher degrees than most others, while \u03c4\u2081 = 3.0 corresponds to a less heterogeneous distribution with a more balanced degree spread across nodes. Nodes are divided into multiple communities with a predefined size distribution. To control the ratio of inter-community edges relative to the total degree of a node, we use the mixing parameter \u00b5, defined as:\n$\\mu = \\frac{n \\cdot P_{out}}{\\langle k \\rangle}$"}, {"title": "Theoretical Analysis", "content": "Overcoming Locality Bias in Traditional Random Walks\nTraditional random walks, as employed in methods like Deep-Walk, exhibit a strong locality bias due to their uniform neighbor-based transitions. This bias limits their ability to explore inter-community structures effectively, leading to em-beddings that predominantly reflect local properties. TLWalk, by introducing separate intra- and inter-community random walk layers, ensures comprehensive exploration of both dense local structures and sparse global relationships, thereby ad-dressing the locality bias. Below, we provide a theoretical comparison of traditional random walks and TLWalk.\nLocality Bias in Traditional Random Walks\nLet a sequence of nodes generated by a traditional random walk be {$W_1,W_2,..., W_{L_w}$}, where w\u012f \u2208 V and i = 1,2,..., |V|. At time t +1, t = 1, 2, ..., Lw - 1, the walk moves to a neighbor of wr with probability 1/d(wt). Denote Puv as the probability of moving from node u to node v in one step, which is defined as:\n$P_{uv} = \\begin{cases}\n    1/d(u), & \\text{if } (u,v) \\in E, \\\\\n    0, & \\text{otherwise}.\n\\end{cases}$\nSuppose W1 = u and w\u2081 = v, where u,v \u2208 V and W1, W2,..., Wt-1 \u2260 v. The probability that the walk starts at u and visits v for the first time at time t is given by:\n$\\hat{r}_{uv} = \\sum_{j\\in N(u)}P_{uj} \\cdot \\hat{r}_{jv}^{t-1} = \\sum_{j\\in N(u)} \\frac{1}{d(u)}\\hat{r}_{jv}^{t-1}$,\nwhere N (u) is the set of neighbors of node u. This equation shows that ruv is the mean of the (t \u2212 1)-step probabilities r over all neighbors of u. The reliance on all neighbors dilutes the transition probability towards distant nodes, reinforcing locality bias.\nEnhanced Global Accessibility in TLWalk\nLemma 1. In TLWalk, let nodes u and v belong to two dif-ferent communities, and u, v \u2208 Ve are bridging nodes. The probability that the walk starts from u and visits v for the first time at time t satisfies:\n$r_{uv}^t \\ge \\frac{1}{d(u)} \\sum_{j \\in N(u)}r_{jv}^{t-1}$,\nwith equality when all neighbors of u are bridging nodes (N (u) = Ninter(u)).\nProof. Partition N (u) into two disjoint subsets:\n\u2022 Ninter(u) = N (u) \u2229V, the set of inter-community neigh-bors (bridging nodes),\n\u2022 Nintra(u) = N(u) \u2013 Ninter(u), the set of intra-community neighbors.\nThe total probability of transitioning to neighbors of u can be expressed as:\n$\\sum_{j\\in N (u)}r_{jv}^{t-1}= \\sum_{j \\in N_{inter} (u)}r_{jv}^{t-1}+ \\sum_{j\\in N_{intra} (u)}r_{jv}^{t-1}$ \n\nIn TLWalk, intra-community transitions do not reach nodes in different communities. Thus, for any j \u2208 Nintra (u), rj1 = 0. The total probability simplifies to:\n$\\sum_{j \\in N (u)}r_{jv}^{t-1}= \\sum_{j \\in N_{inter} (u)}r_{jv}^{t-1}$.\n\nThe transition probability ru from u to v in TLWalk is:\n$r_{uv}^t = \\frac{1}{|N_{inter} (u)|}\\sum_{j \\in N_{inter} (u)}r_{jv}^{t-1}$.\n\nSince | Ninter(u)| \u2264 d(u), it follows that:\n$\\frac{1}{|N_{inter} (u)|}>\\frac{1}{d(u)}$."}, {"title": "Matrix Factorization Perspective of TLWalk", "content": "Lemma 2: Let Me and Mi represent the inter-community and intra-community transition matrices, respectively. The embeddings learned by TLWalk using skip-gram with negative sampling (SGNS) correspond to a low-rank factorization of the following shifted Pointwise Mutual Information (PMI) matrix:\n$log \\left(vol(G) \\left( \\sum_{r=1}^{T} (M_c^r + M_i^r) \\right) D^{-1}\\right) - logk$,\nwhere:\n\u2022 vol(G) = \u03a3\u00a1\u2211jAi,j = \u2211idi is the volume of a graph G,\n\u2022 T is the context window size,\n\u2022 M and M are the r-step powers of Mc and M\u2081, respec-tively,\n\u2022 D-\u00b9 is the inverse degree matrix,\n\u2022 k is the negative sampling parameter.\nProof. We begin with the skip-gram objective, which seeks to maximize the probability of observing a context node c given a target node w. Under the TLWalk framework, random walks are independently applied to the inter-community transition matrix Mc and the intra-community transition matrix M1.\nStep 1: Joint Probability. The joint probability P(w, c) of observing a node w with context c is defined by the stationary distribution \u03c0(w) and the T-step transition probabilities:\n$P(w, c) \\approx \\frac{1}{T} \\pi(w) .\\left(\\sum_{r=1}^{T} (M_c^r + M_i^r) \\right) [w, c]$,\nwhere:\n\u2022 \u03c0(w): The stationary probability of node w, given by $ \\pi(w) = \\frac{d(w)}{vol(G)}$, where d(w) is the degree of w and vol(G) is the graph volume.\n\u2022 M and Mr: The r-step transition probability matri-ces for Mc (inter-community transitions) and M\u2081 (intra-community transitions), respectively.\nStep 2: Marginal Probabilities. The marginal probability P(w) of a node w under the stationary distribution is given by:\n$P(w) = \\pi(w) = \\frac{d(w)}{vol(G)}$,\nwhere d(w) is the degree of node w, and vol(G) is the volume of the graph.\nSimilarly, the marginal probability P(c) of context c is:\n$P(c) = \\pi(c) = \\frac{d(c)}{vol(G)}$."}, {"title": "Step 3: Pointwise Mutual Information (PMI).", "content": "The PMI between a target node w and a context node c is defined as:\n$PMI(w,c) = log \\frac{P(w,c)}{P(w)P(c)}$\nPMI is a widely used measure to quantify the association between two events in information theory42,43.\nSubstituting P(w,c), P(w), and P(c), we obtain:\n$PMI(w, c) \\approx log \\frac{\\pi(w) .\\sum_{r=1}^{T} (M_c^r + M_i^r) [w, c]}{\\pi(w)\\pi(c)}$\nSimplifying:\n$PMI(w, c) \\approx log \\left(\\frac{\\sum_{r=1}^{T}(M_c^r+M_i^r) [w,c]}{\\frac{d(c)}{vol(G)} }\\right)$. \n\nStep 4: Matrix Representation. We can represent the PMI matrix in the following matrix form:\n$log \\left(vol(G) \\left( \\sum_{r=1}^{T} (M_c^r + M_i^r) \\right) D^{-1} \\right)$, \nwhere D-\u00b9 is the inverse degree matrix for normalization.\nStep 5: SGNS Objective. The skip-gram with negative sampling introduces a shift - logk, where k is the number of negative samples. Therefore, the final form of the factorization becomes:\n$log \\left(vol(G) \\left( \\sum_{r=1}^{T} (M_c^r + M_i^r) \\right) D^{-1} \\right) - logk$.\n\nLemma 2 shows the embeddings learned by TLWalk corre-spond to the low-rank factorization of the combined T-step transition probabilities derived from Mc and M\u2081, effectively in-tegrating inter-community and intra-community relationships and capturing both local and global relationships without ad-ditional parameters."}, {"title": "Discussion", "content": "In this study, we introduced Two Layer Walk (TLWalk), a novel graph embedding method that explicitly integrates mesoscopic community structures to address critical gaps in existing graph embedding techniques. By leveraging a hierarchical two-layer random walk mechanism, TLWalk sys-tematically balances intra-community and inter-community relationships, providing a more precise and comprehensive embedding of network structures.\nThe two-layer design of TLWalk overcomes the limitations of traditional random walk-based methods, such as Deep-Walks and node2vec, which often mix local and global walks, resulting in the loss of mesoscopic-level structural information. By conducting targeted walks separately within intra- and inter-community layers, TLWalk effectively cap-tures dense local patterns while maintaining sparse global rela-tionships. This balanced exploration ensures the embeddings encode both community-specific structures and broader net-work topologies, addressing the long-standing locality bias37 inherent in previous approaches.\nOur extensive experiments on benchmark datasets span-ning social, biological, and ecological networks highlight TLWalk's superiority. Specifically, TLWalk consistently out-performed six state-of-the-art methods, including modularized approaches like M-NMF13 and structure-aware embeddings like Struc2Vec21. For example, in link prediction tasks, TL-Walk achieved significant accuracy improvements on datasets with strong community structures, such as bio-WormNet-v3 and ego-Facebook. Furthermore, TLWalk excelled in node clustering and classification experiments, demonstrating its ability to generalize across domains with varying network properties.\nThe robustness of TLWalk was further validated on syn-thetic networks generated using the LFR benchmark36. Re-sults showed TLWalk's resilience in detecting communi-ties across networks with both highly heterogeneous degree distributions (\u03c4\u2081 = 2.1) and more balanced degree spreads (\u03c4\u2081 = 3.0). This adaptability across varying network condi-tions underscores its practical utility in diverse real-world applications.\nDespite its strong performance, TLWalk relies on pre-defined community structures for partitioning the network, which may not always align perfectly with real-world net-works. Future research could explore adaptive community detection mechanisms or dynamic embedding approaches that evolve with changes in network topology. Additionally, in-tegrating TLWalk with deep learning frameworks, such as Graph Neural Networks (GNNs), may enable modeling of complex non-linear relationships, further enhancing its repre-sentational power.\nIn conclusion, TLWalk represents a significant advance-ment in graph embedding techniques by explicitly incorporat-ing mesoscopic community structures. Its scalability, robust-ness, and interpretability make it a powerful tool for a wide range of network analysis tasks, including link prediction, node classification, and community detection. The insights gained from this study pave the way for practical applications in social network analysis, bioinformatics, and beyond, provid-ing a foundation for future innovations in community-aware embedding algorithms."}]}