{"title": "Mapping the Provenance Ontology to Basic Formal Ontology", "authors": ["Tim Prudhomme", "Giacomo De Colle", "Austin Liebers", "Alec Sculley", "Peihong (Karl) Xie", "Sydney Cohen", "John Beverley"], "abstract": "The Provenance Ontology (PROV-O) is a World Wide Web Consortium (W3C) recommended ontology\nused to structure data about provenance across a wide variety of domains. Basic Formal Ontology (BFO) is a\ntop-level ontology ISO/IEC standard used to structure a wide variety of ontologies, such as the OBO\nFoundry ontologies [1] and the Common Core Ontologies (CCO). To enhance interoperability between these\ntwo ontologies, their extensions, and data organized by them, an alignment is presented according to a\nspecific mapping criteria and methodology which prioritizes logical and semantic considerations. The\nontology alignment is evaluated by checking its logical consistency with canonical examples of PROV-O\ninstances and querying terms that do not satisfy the mapping criteria as formalized in SPARQL. A variety of\nsemantic web technologies are used in support of FAIR (Findable, Accessible, Interoperable, Reusable)\nprinciples.", "sections": [{"title": "Introduction", "content": "The data silo problem is the problem of having data stored in isolated databases all of which are\norganized according to independent schemes [2]. Data sets in different data silos are not\ninteroperable. Ontologies are well-structured vocabularies that logically define classes and\nrelationships in the interest of promoting interoperability [3]. A popular way to construct ontologies,\nand the way relevant to this paper, is by leveraging the W3C standard Web Ontology Language\n(OWL) [4]. Data sets become more semantically interoperable when interpreted by the same OWL\nontology into a knowledge graph. While ontologies are a promising strategy for remedying the data silo\nproblem, the proliferation of ontologies in a domain may lead to larger ontology silos. The ontology\nsilo problem is the problem of having data organized by independent ontologies. Although a data set\norganized within an ontology is internally interoperable, different data sets organized by\nindependent ontologies are not mutually interoperable. One solution is to create mappings between\nterms in ontologies of interest.\nAn ontology mapping, or correspondence, is a statement <s, p, o> such that \u2018s' is a subject term\nrepresenting a class or object property in a ontology, \u2018o' is an object term representing a class or\nobject property in some other ontology, and \u2018p' is a predicate that specifies how s and o relate. An"}, {"title": "Methods", "content": "Our approach to mapping is based on the semi-automated curation of ontologies leveraging\nconceptual analysis techniques and semantic web technologies. This involves carefully evaluating the\nnecessary and sufficient conditions for something to qualify as an instance of a class or relation\nrepresented in an ontology. Although this is a challenging process compared to fully-automated\nontology matching techniques, we believe it is well-worth the effort given the generality and\nwide-spread use of both PROV-O and BFO. Our methodology can be described first in terms of the\ntheoretical criteria we chose for a successful alignment, and second in terms of the engineering\ntechniques used for rigorously evaluating the alignment and ensuring that its technical artifacts\nconform to FAIR principles."}, {"title": "Criterion 1: Types of Mapping Relations", "content": "Equivalence relations represented by OWL equivalentClass and OWL equivalentProperty give\nnecessary and sufficient conditions for something to be an instance of a certain BFO class or\nrelation and a certain PROV-O class or relation at the same time. Everything that satisfies these\nconditions will be an instance of both, and nothing else will be an instance of either. An equivalence\nmapping provides a two-way bridge which allows for interoperability between two knowledge\ngraphs. For example, the class PROV Activity is mapped as equivalent to the class BFO process. All\ninstances of BFO processes are instances of PROV activities and vice versa, and both classes would\nstand in the same relation to other classes represented in a knowledge graph that used both\nontologies together. If that is the case, then respective instances will now be differently axiomatized\nand produce new results when a reasoner is run over the knowledge graph that contains them.\nSubsumption relations represented by RDFS subClassOf or RDFS subProperty Of give\nsufficient conditions for an instance of one class or relation to be an instance of another class or\nrelation [14]. If a certain PROV class is a subclass of a certain BFO class, then all the instances of the\nPROV class are also instances of the corresponding BFO class. The result of a subsumption relation\nmapping is then a one-way bridge from one term to another. Notice that the use of subsumption\nrelations allows for non-injective alignments, such that multiple terms from one ontology can be\nsubsumed under a single term from the other ontology.\nComplex equivalence and subsumption relations between combinations of terms may be\nrepresented with SWRL rules [15]. SWRL rules are especially useful for restricting the domain or\nrange of an OWL object property in order to use it in a valid mapping. An advantage of SWRL is\nthat it is implemented by semantic reasoners such as HermiT [16, 17]. If a set of relations in one\nontology should entail a relation in another ontology, OWL property chain axioms can be used to\naxiomatize this complex subsumption relation between object properties."}, {"title": "Criterion 2: Coherence and Consistency", "content": "An ontology may be implemented as a logical theory, or a consistent set of formulas in a first-order\nlanguage. The OWL implementations of BFO and PROV-O are based on first-order logic\nfragments which balance expressivity and computational efficiency for automated reasoning tasks\nsuch as classification or checking satisfiability. An ontology alignment is coherent if and only if all\nformulas in the aligned ontologies are satisfiable, i.e. it is possible for all formulas to be true in some\ninterpretation (a model) [5]. An incoherent alignment might contain classes that cannot have\ninstances. For example, a formula mapping PROV Plan to a subclass of both BFO continuant and\noccurrent is unsatisfiable: nothing could be an instance of a PROV Plan in that case because nothing\ncan be both a continuant and occurrent in BFO. Such an instance would contradict this disjointness\naxiom in BFO, making the alignment also inconsistent. By contrast, a consistent alignment is free of\nderivable or entailed contradictions. An alignment should be both coherent and consistent, although\nchecking for consistency requires instances.\nCoherence: Let OM be the union of O1, O2, and an alignment between the two ontologies.\nThis set of aligned ontologies, OM, is coherent if and only if every formula in OM is satisfiable.\nConsistency: A set of aligned ontologies is consistent if and only if it entails no contradictions."}, {"title": "Criterion 3: Conservativity", "content": "The conservativity principle [19] states that an ontology alignment should not change the semantic\nrelationships between terms within each ontology. This is based on the notion of a conservative\nextension of a logical theory, which does not introduce or eliminate entailments expressed in the\nsignature of that theory [20]. Similarly, the signature of an OWL ontology is the set of terms\nrepresenting its classes, object properties, and individuals. A weaker, more tractable version of the\nconservativity principle aims to prevent changes to the subsumption relationships entailed by\nformulas of an ontology's signature. [21] calls the set of subsumptions, for a given ontology\nsignature, entailed in one ontology but not in another, the approximate deductive difference between the\nontologies.\nConservativity: Let OM be the union of O1, O2, and an alignment between the two\nontologies. The ontology alignment is conservative if and only if the approximate deductive difference\nbetween O1 and OM is empty for the signature of O1, and the approximate deductive difference\nbetween O2 and OM is empty for the signature of O2.\nFor example, a mapping of PROV Bundle as a subclass of PROV Collection would be\nincluded in the approximate deductive difference between PROV-O and the union of PROV-O and\nits alignment to another ontology, and thus violate conservativity in this sense."}, {"title": "Criterion 4: Scope of Alignment", "content": "An ontology alignment can be characterized by the number of mappings between ontologies. We\nwill describe three related types of alignments to provide context for our mapping project. When\nevery formula in one ontology is surjectively mapped onto by at least one formula in the other\nontology, this constitutes a total alignment [5].\nTotality: An alignment A is a total alignment of an ontology O1 to ontology O2 for their\nlanguages L(O1) and L(O2) if and only if for any formula \u03c3\u2208 L(O1), there exists some formula q\n\u2208 L(O2) and some relation r \u2208 \u2299 where \u2299 is a set of mapping relation types, such that \u3008\u03c3, r, \u03c6) \u2208\n\u0394.\nWhen every type of mapping relation in a total alignment is an equivalence relation, and the\nalignment is conservative, this is similar to the notion of interpreting one logical theory into another.\nAn equivalence relation which conservatively extends a logical theory is called a translation definition\n[22]. Informally, a translation definition provides a way of understanding a part of one theory in\nterms of another theory. We can apply the same idea to ontologies.\nInterpretability: An ontology O1 is interpretable in ontology O2 if and only if there exist a\nset of translation definitions (an alignment) \u2206 for O1 into O2 such that O2 \u222a_\u2206 = 01.\nAs a set of translation definitions, an alignment makes one ontology interpretable in another\njust in case the alignment plus one of the ontologies entails all formulas of the other ontology. For\nexample, PROV activities are disjoint with PROV entities. Our alignment maps these classes to BFO\nprocesses and BFO entities, respectively, which are also disjoint. The alignment combined with BFO\nentails the disjointness of the PROV classes, preserving the corresponding axiom in PROV.\nA stronger alignment makes interpretability between ontologies bidirectional, demonstrating\na kind of synonymy between their theories [23].\nSynonymy: Two ontologies O1 and O2 are synonymous if and only if there exist two sets of\ntranslation definitions A and I, respectively from O1 to O2 and from O2 to O1, such that O1 \u222a \u03a0\nis logically equivalent to O2 \u222a \u0394.\nA synonymous alignment provides the most interoperability between ontologies because\neach can be fully understood in terms of the other. It represents the ideal criteria and methodology\nof model-based ontology mapping. We can summarize this approach with the slogan\n\u201cinterpretability enhances interoperability\u201d."}, {"title": "Summary: Criteria for Mapping PROV-O to BFO", "content": "Although PROV-O is a generic ontology, BFO represents domains that are not represented in\nPROV, such as those covering spatial and temporal regions. Thus, not every term in BFO can be\nmapped to some term in PROV. A total alignment of BFO to PROV, much less a synonymous\nalignment, is not possible. However, as an upper ontology, the domain of BFO includes the domain\nof PROV, so a total alignment of PROV to BFO is possible. But PROV also includes\ndomain-specific terms related to provenance that may not be translatable to BFO or its extensions.\nIn such cases where the domains overlap but the PROV term is more specific, a subsumption\nrelation mapping between the BFO and PROV term can be used.\nGiven these considerations, we aimed to create at least a coherent, consistent,\nconservative, total alignment of all classes and object properties in all extensions of\nPROV-O to some class or object property in an extension of BFO using only equivalence or\nsubsumption mappings, which could also be implemented with property chain axioms or SWRL\nrules. For simplicity, we did not map any OWL data properties, although we have no reason to\nbelieve this is not possible. This type of alignment maximizes interoperability with mappings that\nproduce new inferences when the ontologies are used together. It also brings us closer to a full\ninterpretation of PROV into extensions of BFO, as described in Interpretability. Additional SKOS\nmappings could add extra metadata about alternative mappings and informal relationships between\nterms, but we did not include SKOS relations as part of the formal mapping criteria used for\nevaluation, described in the next section.\nFinally, explicit mappings for some terms are not provided in cases where the relations for\nthese mappings are entailed by logical axioms. For example, terms that are subsumed by a more\ngeneric term for which there is a mapping were not explicitly mapped due to the transitivity of\nsubsumption, unless there are more specific terms that could appropriately map to those subclasses.\nFor example, PROV Agent is mapped as a subclass of BFO material entity that participates in some\nPROV Activity. This entails that every instance of any subclass of the former is an instance of the\nlatter. Subclasses of PROV Agent thereby need not be explicitly mapped, unless there are more\nspecific terms that could appropriately map to those subclasses. Mappings for specific terms that\ninherit from more generic mapped terms are only provided for more interoperability when available.\nSimilarly, mappings for object properties that are the inverse of some mapped object property were\nnot provided because these can be automatically inferred using a reasoner."}, {"title": "Evaluation and Quality Control", "content": "A SPARQL [24] query was developed for automatically detecting terms that did not meet any of the\nmapping criteria described above. The query finds any PROV term such that it, or its inverse, is not\ntransitively related via equivalence or subsumption, or related via a property chain axiom or SWRL\nrule, to some BFO, RO, or CCO term. The query provides an executable specification of the\nalignment criterion Totality in order to verify that it was satisfied. It also measures progress during\nthe course of the mapping project. This query was added to the automated development pipeline,\nand generated a spreadsheet of unmapped terms when triggered.\nThe SPARQL query specifies each type of mapping relation. First, mappings transitively\nentailed by subsumption, as explained above, were excluded using a SPARQL property path\nexpression. Second, entailed mappings from inverse object properties were materialized into a\ntemporary graph using the HermiT reasoner [16, 17] and ROBOT command-line tool [25] before\nrunning the query. Third, mappings involving either an OWL property chain axiom or SWRL rule\nwere also excluded in the SPARQL query for generating the list of unmapped terms.\nTo test the mappings, every canonical example instance from the W3C documentation for\nPROV-O and its extensions was copied into RDF files serialized in the Terse Triple Language (TTL\nor \u201cRDF Turtle\u201d) [26] and imported into the editor's module. The HermiT reasoner was used for\ntesting the consistency of these example instances with PROV, BFO, RO, CCO, and the mappings\nbetween them. HermiT determines whether a set of OWL 2 DL axioms and assertions are satisfiable\nand consistent by using the hypertableau calculus to explore whether any derivations lead to a\ncontradiction. This verifies that the aligned ontologies satisfy the Coherence criterion. Two\nexamples were discovered to be inconsistent with PROV itself, while two others were inconsistent\nwith our mappings. These few inconsistencies are mostly due to unintentional, technical errors and\ndescribed later in the Results section. In our view, this is \u201ca feature, not a bug\u201d: The alignment can\nbe used to find inconsistencies in data interpreted as instances of PROV classes. If we assume these\ninconsistencies are due to mistakes, then the Consistency criterion is satisfied by the alignment with\nrespect to all other canonical examples.\nThe mappings were further tested for consistency with a direct mapping between PROV and\nthe SOSA (Sensor, Observation, Sample, and Actuator) ontology [27], which is a core subset of the\nSemantic Sensor Network Ontology (SSN) [28], another W3C recommendation ontology. No\ninconsistencies were found when testing our mapping and ontologies with this mapping plus\nexample SOSA instances from its W3C documentation. While our mappings provide additional\ninteroperability between BFO, CCO, RO and SOSA, we reserve a more complete discussion of\nSOSA for another time.\nConservativity of the alignment was tested by constructing the deductive differences [21]\nbetween each set of input ontologies and the union of aligned ontologies. First, all subsumptions\nand equivalence relations were materialized from each set of input ontologies, and then the aligned\nontologies, using HermiT via ROBOT. Second, a SPARQL CONSTRUCT query filtered these\nmaterialized relations to those which relate terms from the same ontology. Third, the ROBOT\n\u201cdiff\u201d command compared the output of these SPARQL queries. We found no difference in"}, {"title": "FAIR Compliance", "content": "The technical artifacts produced by our work comply with FAIR (Findable, Accessible,\nInteroperable, Reusable) principles [30]. To support interoperability and reuse, the mappings are\nimplemented in OWL 2 DL and serialized in RDF Turtle. They are maintained in files separate from\nthe corresponding ontologies, similar to the Dublin Core extension of PROV [31]. Providing\nseparate files, as opposed to changing the corresponding ontologies, preserves compatibility with\ntheir existing usage. Although we provide some ontological commentary on PROV itself within the\nencoded mappings, we refrained from making any changes to existing terms in order to avoid\ndisrupting their existing usage. The artifacts can be found and accessed as described in the Data and\nCode Availability sections of this paper.\nProvenance of the mappings is provided as metadata in the form of OWL axiom\nannotations, which allow us to simultaneously assert the mappings and annotate them. Informal\njustifications for each mapping are annotated using RDFS comment. Although automated ontology\nmatching techniques typically include a confidence value for each mapping, we did not include\nconfidence values because our mapping process was based on manually analyzing the meaning of\neach term. Annotation properties from the Simple Standard for Sharing Ontology Mappings\n(SSSOM) [32] vocabulary were also used for interoperability with other ontology mapping efforts."}, {"title": "Results", "content": "Out of 153 total classes and object properties in PROV-O and its extensions, 34 were explicitly\nmapped to BFO using 6 equivalence relations, 23 subsumption relations, and 8 SWRL rules. 36\nterms were explicitly mapped to CCO using 5 equivalence relations, 22 subsumption relations, 1\nproperty chain, and 6 SWRL rules. Finally, 25 terms were explicitly mapped to RO using 26\nsubsumption relations. Among the total mappings, 4 terms were supplemented with additional\nSKOS mappings to provide commentary on possible alternative mappings. Implicit mappings for all\nother PROV-O terms are entailed by logical axioms of the aligned ontologies. Some of the class\nmappings are displayed in Figure 1.\nThe mappings will be described in order of groupings used by the W3C PROV-O\ndocumentation. Starting Point terms are referred to as \u201ca small set of classes and properties that can\nbe used to create simple, initial provenance descriptions\u201d. Expanded terms are subclasses and\nsubproperties of Starting Point terms and also terms used to provide more specific details about\nprovenance. Qualified terms are those used to provide \"additional attributes of the binary relations\u201d\nasserted by use of the Starting Point and Expanded terms."}, {"title": "Starting Point classes and object properties", "content": "PROV Entity is defined as \u201ca physical, digital, conceptual, or other kind of thing with some fixed\naspects; entities may be real or imaginary.\u201d Our interpretation of this is that a PROV Entity can exist\nentirely, with all spatial parts, at different times. We have therefore mapped PROV Entity as a\nsubclass of BFO continuant with one exception. Instances of BFO spatial regions are continuants\nthat neither participate in processes nor bear qualities. This exception is captured by mapping PROV\nEntity to a subclass of things that are independent continuants and not spatial regions, in a\nunion with generically dependent and specifically dependent continuants in BFO. In other\nwords, every instance of a PROV Entity is one of these kinds of continuants but not a spatial region.\nStructurally, this mapping is supported by the disjoint relationship between PROV Entity and PROV\nActivity. This disjoint relationship is entailed by additionally mapping PROV Activity to a subclass of\nBFO occurrent because continuants and occurrents are disjoint.\nPROV Agent is mapped as a subclass of BFO material entities that both participate in\nsome PROV Activity and bear some BFO role that is realized in a PROV Activity (see Figure 2).\nThe reason for this mapping is that a PROV Agent always has some matter as a part that persists in\ntime. This is true even for instances of its subclass, PROV SoftwareAgent, which is defined as\n\u201crunning software\u201d, because every particular instance of a PROV SoftwareAgent is a material\nrealization of some software (which may itself be considered a generically dependent continuant).\nThe definition of PROV Agent also states that an agent \u201cbears some form of responsibility for an\nactivity taking place, for the existence of an entity, or another agent's activity\u201d. This is formalized in\naxioms which entail that every PROV Agent participates in, and bears some role that is realized in, some\nPROV Activity. According to Requirement VI3 in \u201cThe Rationale of Prov\u201d [33], a PROV Agent\ncould be a PROV Entity and this is possible in our mapping because both PROV Agent and PROV\nEntity are subclasses of BFO continuant."}, {"title": "CCO agents that are a CCO agent in some PROV Activity. The BFO and CCO mappings are both\nprovided for BFO users who are not CCO users, and for CCO users who want to benefit from the\nmore specific equivalence relation mapping.\nPROV Activity is mapped as equivalent to the class BFO process. The definition of PROV\nActivity includes \u201csomething that occurs over a period of time and acts upon or with entities\u201d.\nSimilarly, a BFO occurrent - the parent class of BFO process - is defined as \u201can entity that unfolds\nitself in time or it is the start or end of such an entity or it is a temporal or spatiotemporal region\u201d.\nHowever, instances of PROV Activity do not seem to include instances of BFO temporal regions,\nsuch as the year 1986. Hence, BFO process was selected as a more appropriate equivalence class.\nNote that, although all instances of PROV Agent are participants in some PROV Activity at some\ntime, not all instances of PROV Activity have participants. The definition of BFO process suggests\nthat all processes have participants, but this is not formalized as a logical axiom, so we did not\ninclude this axiom for PROV Activity either.\nAn important caveat to our mapping of PROV Agent and PROV Activity relates to\nRequirement VI4 in \u201cThe Rationale of PROV\u201d, which states: \u201cprov is to allow agents to be activities\u201d.\nThis stipulation is described as a consequence of Requirement GE1: \u201cprov is to minimize class\ndisjointness constraints and to use strong rationale when defining such constraints\u201d and Requirement\nGE2: \u201cprov is to include the mirror of each concept, where relevant.\u201d The authors elaborate: \u201cAs a\nresult, being an agent is not an intrinsic characteristic of an entity or activity. Instead, it is the very\npresence of responsibility relations that implies that some entities or activities are also agents.\u201d\nIt is possible to formally accommodate Requirement V14, by mapping PROV Agent as the\ndisjoint union of (non-spatial region) continuants and processes. This would ensure that every\nPROV Agent is an instance of a continuant or process but not both. Despite this mapping being a\npossible implementation, we decided not to include it, as this would ultimately go against the spirit\nof BFO's core axiom that continuants and occurrents are disjoint. Our mapping is not merely a\ntranslation but is also intended to enrich the semantics of each ontology. Mapping PROV Agent to\nBFO continuant and PROV Activity to BFO process entails that PROV Agent is disjoint with\nPROV Activity. While this contradicts Requirement V14, it does not contradict any specific example\nprovided in the essay or W3C documentation of something that is both a PROV Agent and PROV\nActivity.\nIn this case, there is indeed a strong reason for making continuants and occurrents disjoint.\nThis rationale is given for Requirement VI7: \u201cprov is not to allow an activity to be an entity\u201d, where\nthe authors state: \"An activity represents something that \u201chappened\", whereas an entity is a thing,\nwhether real or imaginary. This distinction is similar to that between \u201ccontinuant\u201d and \u201coccurrent\u201d\nin logic\u201d. Moreover, a simpler explanation of how an activity can be related to some responsibility is\nthat an activity may involve an agent that bears that responsibility. This is formalized by our logical\naxiom stating that every PROV Agent bears some BFO role that is realized in a PROV Activity.\nHowever, this does not and should not entail that a PROV Agent could be a PROV Activity."}, {"title": ""}, {"title": "We will now highlight some Starting Point object properties in PROV. Since the domain and\nrange of PROV wasGeneratedBy are PROV Entity and PROV Activity, respectively, it is mapped as\na subproperty of BFO participates in, whose domain and range are non-spatial region continuants\nand process, respectively. A more specific subproperty mapping to CCO is also provided: CCO is\noutput of has domain and range of continuant and process, respectively. Despite redundancy with\nBFO, a mapping to RO is also provided: RO participates in has domain and range of continuant\nand occurrent, respectively. All three mappings are logically consistent when used together. The\ndifference with the BFO mapping is that it excludes spatial regions from being used in a PROV\nwasGeneratedBy relation. Both participates in predicates were used for practical reasons. While the RO\npredicate is more compatible with OBO Foundry ontologies, the BFO predicate is a newer, more\nrefined version.\nPROV wasAssociatedWith has domain PROV Activity and range PROV Agent. This is used\nto represent, for example, that an activity of illustrating was associated with an illustrator. This object\nproperty was mapped as a subproperty of BFO has participant, which is the inverse of BFO\nparticipates in. It was also mapped as a subproperty of CCO has agent, which is informally defined as\nrelating between a BFO process and CCO Agent, but does not formally specify these as domain and\nrange. Finally, PROV wasAssociatedWith was also mapped to RO has participant, which is the inverse\nof RO participates in."}, {"title": "Expanded classes and object properties"}, {"title": "Among the Expanded classes for PROV-O are PROV Person and PROV Organization. PROV\nPerson is a good example of a term which might be incorrectly mapped if relying on automated\nlexical matching. CCO Person has the same RDFS label as PROV Person, however, PROV Person is\na subclass of PROV Agent, while CCO Person is not a subclass of CCO Agent. To map these\nrelated terms, we mapped PROV Person as equivalent to the intersection of CCO Person and\nPROV Agent. This entails that every PROV Person is both a CCO Person and PROV Agent.\nHowever, this does not entail that every CCO Person is a PROV Person, much less a PROV Agent.\nAll of the same considerations apply to PROV Organization, which is a subclass of PROV Agent,\nwhile CCO Organization is not a subclass of CCO Agent. Therefore, PROV Organization is\nequivalent to the intersection of CCO Organization and PROV Agent.\nPROV Location is mapped as equivalent to BFO site, which is defined as \u201ca\nthree-dimensional immaterial entity whose boundaries either (partially or wholly) coincide with the\nboundaries of one or more material entities or have locations determined in relation to some\nmaterial entity\u201d. On the other hand, the informal definition of PROV Location states that an\ninstance of it", "mapping": "title"}, {"title": "Qualified classes and object properties", "content": "The Qualification Pattern employed in PROV-O is a particular form of reification, which is generally\nrecommended as a standard methodology for alleviating the representational limits of description\nlogic [34] and representing n-ary information among the OWL community [35]. For any unqualified\nbinary object property in the Starting Point or Expanded categories (which is called \u201cUnqualified\nInfluence", "say,": "sortActivity and :datasetA (a corresponding RDF triple is: :sortActivity\nprov:used :datasetA), the Qualification Pattern would reify it as an instance of Qualified Influence\nclass, say, PROV Usage, and then restrict relevant information to the instance of PROV Usage via\nnew representational artifact properties (see Figure 3). Two examples of representational artifact\nproperties are PROV qualifiedUsage and PROV entity. The former is a Qualification Property, which\nserves as connecting an instance of an Influenced Class (e.g. :sortActivity) to the instance of Qualified\nInfluence to which it is subject (e.g. the particular PROV Usage), while the latter is an Influencer\nProperty, which serves as connecting the instance of Qualified Influence to an instance of an\nInfluencing Class (e.g. :datasetA) as its influencer. Other representational artifact properties could be\nposited for connecting more additional information to the instance of Qualified Influence when\nnecessary. For more discussion, see Supplement: Qualified Influence Mappings.\nIn this way, the Qualification Pattern introduces 17 Qualified Influence classes, 14\nQualification Properties, 4 Influencer Properties, and 10 additional classes or properties used for\nqualified data annotation in PROV-O. First, PROV Influence, as the superclass of the other 16\nQualified Influence classes, is mapped to a subclass of the disjoint union of BFO process and BFO\nprocess boundary. In PROV-O, some of its subclasses such as PROV Generation, PROV Start,\nand PROV End are subsumed under PROV InstantaneousEvent, which is equivalently mapped\nto BFO process boundary since the instances of PROV InstantaneousEvent are indivisible\nboundaries of some PROV Activity that is equivalently mapped to BFO process. Other subclasses of\nPROV Influence, like PROV Communication, are not subsumed under PROV\nInstantaneousEvent, and therefore are mapped as subclasses of BFO process instead. Either way,\nhowever, no subclass of PROV Influence can be both a process and a process boundary because\nprocess and process boundary are disjoint in BFO."}, {"title": "It is worth noting a radical divergence of our mapping of PROV Influence from its original\ndefinition in PROV-O. According to its original definition,\n\u201cInfluence is the capacity of an entity, activity, or agent to have an effect on the character,\ndevelopment, or behavior of another by means of usage, start, end, generation, invalidation,\ncommunication, derivation, attribution, association, or delegation.\u201d\nIn our view, PROV-O authors' conception of influence as capacity is intended to emphasize\nthe dependent nature of PROV Influence. After all, a capacity, understood as a special kind of BFO\ndisposition, would be a BFO specifically dependent continuant since it specifically depends on some\nindependent continuant as its bearer. For example, an act of illustrating a bar chart, when considered\nas a type of influence on the bar chart, clearly depends on the existence of an illustrator. The bar\nchart could also be derived from some dataset, and this derivation clearly would depend on the\ndataset. However, in both cases, it seems more appropriate to consider these influences as events\noccurring in time and not capacities of the illustrator or dataset, respectively. This example comes\nfrom the W3C documentation, where an illustration and derivation of a bar chart are both\nclassified as examples of PROV Influence (see Figure 4). The illustration is classified as a PROV\nGeneration, which is a subclass of PROV InstantaneousEvent, while the derivation is classified as a\nPROV Derivation."}, {"title": ""}, {"title": "PROV-O further divides PROV Influence into 3 direct child classes - PROV\nEntityInfluence, PROV ActivityInfluence, PROV AgentInfluence \u2013 according to a trisection\nof influencers. Since an influencer is an entity, activity, or agent, the influence it exerts is, accordingly,\nan entity influence, activity influence, or agent influence. These 3 influence classes lack equivalent\nmappings in BFO, but they are automatically mapped into a subclass of the disjoint union of BFO\nprocess and BFO process boundary since they are subclasses of PROV Influence. Furthermore,\ntheir respective subclasses such as PROV Derivation and PROV Generation, though similarly\nlacking equivalent BFO-mappings, are more specifically mapped to either a subclass of BFO process\nor a subclass of BFO process boundary (see Figure 10 in Supplement: Qualified Influence\nMappings).\nCCO is used to provide two additional cases of equivalent mappings. PROV Start is\nequivalently mapped to CCO process beginning, while PROV End is equivalently mapped to\nCCO process ending. PROV-O treats PROV Start and End as instantaneous events connected to\nparticular activities via the Qualification Properties PROV qualifiedStart and qualifiedEnd,\nsubject to further restrictions by particular triggering entities, locations, time data, and so on. So,\nPROV Start and PROV End can be matched to CCO process beginning and CCO process ending.\nA process beginning/ending is a process boundary occurring on the starting/ending instant of the\ntemporal period occupied by a process that is equivalent to PROV Activity.\nIn addition to PROV InstantaneousEvent, PROV-O uses two other classes for annotating\nqualified data concerning provenance. We map PROV Role directly to a subclass of BFO role on\nthe grounds that a PROV Role is externally determined by the context in which the bearer plays the\nrole and thus serves as a BFO role. However, PROV Role is not made equivalent to BFO role\nbecause it is defined as existing specifically in a \u201ccontext of a usage, generation, invalidation,\nassociation, start, and end.\""}, {"title": ""}, {"title": "The case of PROV Plan is more complicated. It is mapped to a subclass of CCO\nInformation Content Entity. According to CCO, an Information Content Entity is a BFO\ngenerically dependent continuant (GDC) that generically depends on some CCO Information\nBearing Entity and stands in relation of aboutness to some Entity. It is clear that a PROV Plan is a\nGDC"}]}