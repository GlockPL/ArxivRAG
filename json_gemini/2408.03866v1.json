{"title": "Mapping the Provenance Ontology to Basic Formal Ontology", "authors": ["Tim Prudhomme", "Giacomo De Colle", "Austin Liebers", "Alec Sculley", "Peihong (Karl) Xie", "Sydney Cohen", "John Beverley"], "abstract": "The Provenance Ontology (PROV-O) is a World Wide Web Consortium (W3C) recommended ontology used to structure data about provenance across a wide variety of domains. Basic Formal Ontology (BFO) is a top-level ontology ISO/IEC standard used to structure a wide variety of ontologies, such as the OBO Foundry ontologies [1] and the Common Core Ontologies (CCO). To enhance interoperability between these two ontologies, their extensions, and data organized by them, an alignment is presented according to a specific mapping criteria and methodology which prioritizes logical and semantic considerations. The ontology alignment is evaluated by checking its logical consistency with canonical examples of PROV-O instances and querying terms that do not satisfy the mapping criteria as formalized in SPARQL. A variety of semantic web technologies are used in support of FAIR (Findable, Accessible, Interoperable, Reusable) principles.", "sections": [{"title": "Introduction", "content": "The data silo problem is the problem of having data stored in isolated databases all of which are organized according to independent schemes [2]. Data sets in different data silos are not interoperable. Ontologies are well-structured vocabularies that logically define classes and relationships in the interest of promoting interoperability [3]. A popular way to construct ontologies, and the way relevant to this paper, is by leveraging the W3C standard Web Ontology Language (OWL) [4]. Data sets become more semantically interoperable when interpreted by the same OWL ontology into a knowledge graph. While ontologies are a promising strategy for remedying the data silo problem, the proliferation of ontologies in a domain may lead to larger ontology silos. The ontology silo problem is the problem of having data organized by independent ontologies. Although a data set organized within an ontology is internally interoperable, different data sets organized by independent ontologies are not mutually interoperable. One solution is to create mappings between terms in ontologies of interest.\nAn ontology mapping, or correspondence, is a statement <s, p, o> such that \u2018s' is a subject term representing a class or object property in a ontology, \u2018o' is an object term representing a class or object property in some other ontology, and \u2018p' is a predicate that specifies how s and o relate. An ontology alignment is a set of ontology mappings [5]. Data sets tagged with aligned ontologies are more or less semantically interoperable based on the number of mappings and types of predicates used in the mappings. Maximum semantic interoperability can be achieved via a synonymous alignment, where every term in both ontologies is mapped using only predicates representing equivalence relations. Our practical goal is to get as close to maximum interoperability as is possible. The methodology we will present encodes mappings in machine-readable axioms that provide a basis for automated reasoning over data tagged according to the two ontologies. In this way, human intervention is minimized, and the two ontologies can be automatically used together in a consistent way.\nIn what follows, we apply our strategy by mapping the Provenance Ontology (PROV-O) and extensions to Basic Formal Ontology (BFO) and two of its extensions: the Common Core Ontologies (CCO) and the OBO Relations Ontology (RO)\u00b2. The result is a total alignment of every class and object property in all W3C extensions of PROV-O to some class or object property in BFO, CCO, or RO, using only subsumption and equivalence relations. These mappings are designed such that users of BFO-conformant ontologies will be able to structure data about provenance using PROV-O terms. This allows for terms from PROV-O to be used in BFO-conformant domain ontologies in order to facilitate interoperability in information systems and to support querying and reasoning over data. The project's ultimate aim is to allow for new inferences to be drawn from the integration of extra semantic information coming from other ontologies. For example, new SPARQL queries could be run over PROV-O data also using BFO classes, and a semantic reasoner using axioms taken from BFO could discover new implicit information in PROV-O conformant knowledge graphs.\nPROV-O is a W3C recommended ontology used to structure data about provenance: \"information about entities, activities, and people involved in producing a piece of data or thing, which can be used to form assessments about its quality, reliability or trustworthiness\u201d [6, 7]. BFO is a top-level ontology ISO standard [8] used to provide foundational classes to structure different domain ontologies and to allow for semantic interoperability between them [9, 10]. RO is an extension of BFO developed by Open Biomedical Ontologies (OBO) Foundry [11, 12] to standardize relations between domain ontologies. CCO is a suite of mid-level ontologies, used to span across different domain ontologies and intended to bridge the gap between domain ontologies and BFO [13]. Given the success of BFO as a top-level ontology to integrate data tagged with different ontologies and the widespread adoption of PROV-O as an ontology for provenance, a successful mapping between the two would provide integration between all the knowledge graphs currently structured according to BFO and PROV-O, as well as homogeneity between the recommended standards for semantic interoperability."}, {"title": "Methods", "content": "Our approach to mapping is based on the semi-automated curation of ontologies leveraging conceptual analysis techniques and semantic web technologies. This involves carefully evaluating the necessary and sufficient conditions for something to qualify as an instance of a class or relation represented in an ontology. Although this is a challenging process compared to fully-automated ontology matching techniques, we believe it is well-worth the effort given the generality and wide-spread use of both PROV-O and BFO. Our methodology can be described first in terms of the theoretical criteria we chose for a successful alignment, and second in terms of the engineering techniques used for rigorously evaluating the alignment and ensuring that its technical artifacts conform to FAIR principles."}, {"title": "Criterion 1: Types of Mapping Relations", "content": "Equivalence relations represented by OWL equivalentClass and OWL equivalentProperty give necessary and sufficient conditions for something to be an instance of a certain BFO class or relation and a certain PROV-O class or relation at the same time. Everything that satisfies these conditions will be an instance of both, and nothing else will be an instance of either. An equivalence mapping provides a two-way bridge which allows for interoperability between two knowledge graphs. For example, the class PROV Activity is mapped as equivalent to the class BFO process. All instances of BFO processes are instances of PROV activities and vice versa, and both classes would stand in the same relation to other classes represented in a knowledge graph that used both ontologies together. If that is the case, then respective instances will now be differently axiomatized and produce new results when a reasoner is run over the knowledge graph that contains them.\nSubsumption relations represented by RDFS subClassOf or RDFS subProperty Of give sufficient conditions for an instance of one class or relation to be an instance of another class or relation [14]. If a certain PROV class is a subclass of a certain BFO class, then all the instances of the PROV class are also instances of the corresponding BFO class. The result of a subsumption relation mapping is then a one-way bridge from one term to another. Notice that the use of subsumption relations allows for non-injective alignments, such that multiple terms from one ontology can be subsumed under a single term from the other ontology.\nComplex equivalence and subsumption relations between combinations of terms may be represented with SWRL rules [15]. SWRL rules are especially useful for restricting the domain or range of an OWL object property in order to use it in a valid mapping. An advantage of SWRL is that it is implemented by semantic reasoners such as HermiT [16, 17]. If a set of relations in one ontology should entail a relation in another ontology, OWL property chain axioms can be used to axiomatize this complex subsumption relation between object properties.\nMapping predicates from the SKOS vocabulary [18] represent informal relations between terms which may be interpreted by users to be intuitively similar. However, SKOS predicates have weaker inferential semantics than those of subsumption and equivalence in RDFS and OWL. For example, SKOS relatedMatch is a symmetric, non-transitive object property \u201cused to state an associative mapping link between two conceptual resources in different concept schemes.\u201d A semantic reasoner will not infer anything about instances of two classes or object properties mapped using SKOS relatedMatch other than their symmetric relationship. This can be desirable when SKOS is used to both compare and contrast terms by providing a text description annotation of the mapping."}, {"title": "Criterion 2: Coherence and Consistency", "content": "An ontology may be implemented as a logical theory, or a consistent set of formulas in a first-order language. The OWL implementations of BFO and PROV-O are based on first-order logic fragments which balance expressivity and computational efficiency for automated reasoning tasks such as classification or checking satisfiability. An ontology alignment is coherent if and only if all formulas in the aligned ontologies are satisfiable, i.e. it is possible for all formulas to be true in some interpretation (a model) [5]. An incoherent alignment might contain classes that cannot have instances. For example, a formula mapping PROV Plan to a subclass of both BFO continuant and occurrent is unsatisfiable: nothing could be an instance of a PROV Plan in that case because nothing can be both a continuant and occurrent in BFO. Such an instance would contradict this disjointness axiom in BFO, making the alignment also inconsistent. By contrast, a consistent alignment is free of derivable or entailed contradictions. An alignment should be both coherent and consistent, although checking for consistency requires instances.\nCoherence: Let OM be the union of O1, O2, and an alignment between the two ontologies. This set of aligned ontologies, OM, is coherent if and only if every formula in OM is satisfiable.\nConsistency: A set of aligned ontologies is consistent if and only if it entails no contradictions."}, {"title": "Criterion 3: Conservativity", "content": "The conservativity principle [19] states that an ontology alignment should not change the semantic relationships between terms within each ontology. This is based on the notion of a conservative extension of a logical theory, which does not introduce or eliminate entailments expressed in the signature of that theory [20]. Similarly, the signature of an OWL ontology is the set of terms representing its classes, object properties, and individuals. A weaker, more tractable version of the conservativity principle aims to prevent changes to the subsumption relationships entailed by formulas of an ontology's signature. [21] calls the set of subsumptions, for a given ontology signature, entailed in one ontology but not in another, the approximate deductive difference between the ontologies.\nConservativity: Let OM be the union of O1, O2, and an alignment between the two ontologies. The ontology alignment is conservative if and only if the approximate deductive difference between O1 and OM is empty for the signature of O1, and the approximate deductive difference between O2 and OM is empty for the signature of O2.\nFor example, a mapping of PROV Bundle as a subclass of PROV Collection would be included in the approximate deductive difference between PROV-O and the union of PROV-O and its alignment to another ontology, and thus violate conservativity in this sense."}, {"title": "Criterion 4: Scope of Alignment", "content": "An ontology alignment can be characterized by the number of mappings between ontologies. We will describe three related types of alignments to provide context for our mapping project. When every formula in one ontology is surjectively mapped onto by at least one formula in the other ontology, this constitutes a total alignment [5].\nTotality: An alignment A is a total alignment of an ontology O1 to ontology O2 for their languages L(O1) and L(O2) if and only if for any formula \u03c3\u2208 L(O1), there exists some formula q \u2208 L(O2) and some relation r \u2208 \u2299 where \u2299 is a set of mapping relation types, such that \u3008\u03c3, r, \u03c6) \u2208 \u0394.\nWhen every type of mapping relation in a total alignment is an equivalence relation, and the alignment is conservative, this is similar to the notion of interpreting one logical theory into another. An equivalence relation which conservatively extends a logical theory is called a translation definition [22]. Informally, a translation definition provides a way of understanding a part of one theory in terms of another theory. We can apply the same idea to ontologies.\nInterpretability: An ontology O1 is interpretable in ontology O2 if and only if there exist a set of translation definitions (an alignment) \u2206 for O1 into O2 such that O2 \u222a_\u2206 = 01.\nAs a set of translation definitions, an alignment makes one ontology interpretable in another just in case the alignment plus one of the ontologies entails all formulas of the other ontology. For example, PROV activities are disjoint with PROV entities. Our alignment maps these classes to BFO processes and BFO entities, respectively, which are also disjoint. The alignment combined with BFO entails the disjointness of the PROV classes, preserving the corresponding axiom in PROV.\nA stronger alignment makes interpretability between ontologies bidirectional, demonstrating a kind of synonymy between their theories [23].\nSynonymy: Two ontologies O1 and O2 are synonymous if and only if there exist two sets of translation definitions A and I, respectively from O1 to O2 and from O2 to O1, such that O1 \u222a \u03a0 is logically equivalent to O2 \u222a \u0394.\nA synonymous alignment provides the most interoperability between ontologies because each can be fully understood in terms of the other. It represents the ideal criteria and methodology of model-based ontology mapping. We can summarize this approach with the slogan \u201cinterpretability enhances interoperability\u201d."}, {"title": "Summary: Criteria for Mapping PROV-O to BFO", "content": "Although PROV-O is a generic ontology, BFO represents domains that are not represented in PROV, such as those covering spatial and temporal regions. Thus, not every term in BFO can be mapped to some term in PROV. A total alignment of BFO to PROV, much less a synonymous alignment, is not possible. However, as an upper ontology, the domain of BFO includes the domain of PROV, so a total alignment of PROV to BFO is possible. But PROV also includes domain-specific terms related to provenance that may not be translatable to BFO or its extensions. In such cases where the domains overlap but the PROV term is more specific, a subsumption relation mapping between the BFO and PROV term can be used.\nGiven these considerations, we aimed to create at least a coherent, consistent, conservative, total alignment of all classes and object properties in all extensions of PROV-O to some class or object property in an extension of BFO using only equivalence or subsumption mappings, which could also be implemented with property chain axioms or SWRL rules. For simplicity, we did not map any OWL data properties, although we have no reason to believe this is not possible. This type of alignment maximizes interoperability with mappings that produce new inferences when the ontologies are used together. It also brings us closer to a full interpretation of PROV into extensions of BFO, as described in Interpretability. Additional SKOS mappings could add extra metadata about alternative mappings and informal relationships between terms, but we did not include SKOS relations as part of the formal mapping criteria used for evaluation, described in the next section.\nFinally, explicit mappings for some terms are not provided in cases where the relations for these mappings are entailed by logical axioms. For example, terms that are subsumed by a more generic term for which there is a mapping were not explicitly mapped due to the transitivity of subsumption, unless there are more specific terms that could appropriately map to those subclasses. For example, PROV Agent is mapped as a subclass of BFO material entity that participates in some PROV Activity. This entails that every instance of any subclass of the former is an instance of the latter. Subclasses of PROV Agent thereby need not be explicitly mapped, unless there are more specific terms that could appropriately map to those subclasses. Mappings for specific terms that inherit from more generic mapped terms are only provided for more interoperability when available. Similarly, mappings for object properties that are the inverse of some mapped object property were not provided because these can be automatically inferred using a reasoner."}, {"title": "Evaluation and Quality Control", "content": "A SPARQL [24] query was developed for automatically detecting terms that did not meet any of the mapping criteria described above. The query finds any PROV term such that it, or its inverse, is not transitively related via equivalence or subsumption, or related via a property chain axiom or SWRL rule, to some BFO, RO, or CCO term. The query provides an executable specification of the alignment criterion Totality in order to verify that it was satisfied. It also measures progress during the course of the mapping project. This query was added to the automated development pipeline, and generated a spreadsheet of unmapped terms when triggered.\nThe SPARQL query specifies each type of mapping relation. First, mappings transitively entailed by subsumption, as explained above, were excluded using a SPARQL property path expression. Second, entailed mappings from inverse object properties were materialized into a temporary graph using the HermiT reasoner [16, 17] and ROBOT command-line tool [25] before running the query. Third, mappings involving either an OWL property chain axiom or SWRL rule were also excluded in the SPARQL query for generating the list of unmapped terms.\nTo test the mappings, every canonical example instance from the W3C documentation for PROV-O and its extensions was copied into RDF files serialized in the Terse Triple Language (TTL or \u201cRDF Turtle\u201d) [26] and imported into the editor's module. The HermiT reasoner was used for testing the consistency of these example instances with PROV, BFO, RO, CCO, and the mappings between them. HermiT determines whether a set of OWL 2 DL axioms and assertions are satisfiable and consistent by using the hypertableau calculus to explore whether any derivations lead to a contradiction. This verifies that the aligned ontologies satisfy the Coherence criterion. Two examples were discovered to be inconsistent with PROV itself, while two others were inconsistent with our mappings. These few inconsistencies are mostly due to unintentional, technical errors and described later in the Results section. In our view, this is \u201ca feature, not a bug\u201d: The alignment can be used to find inconsistencies in data interpreted as instances of PROV classes. If we assume these inconsistencies are due to mistakes, then the Consistency criterion is satisfied by the alignment with respect to all other canonical examples.\nThe mappings were further tested for consistency with a direct mapping between PROV and the SOSA (Sensor, Observation, Sample, and Actuator) ontology [27], which is a core subset of the Semantic Sensor Network Ontology (SSN) [28], another W3C recommendation ontology. No inconsistencies were found when testing our mapping and ontologies with this mapping plus example SOSA instances from its W3C documentation. While our mappings provide additional interoperability between BFO, CCO, RO and SOSA, we reserve a more complete discussion of SOSA for another time.\nConservativity of the alignment was tested by constructing the deductive differences [21] between each set of input ontologies and the union of aligned ontologies. First, all subsumptions and equivalence relations were materialized from each set of input ontologies, and then the aligned ontologies, using HermiT via ROBOT. Second, a SPARQL CONSTRUCT query filtered these materialized relations to those which relate terms from the same ontology. Third, the ROBOT \u201cdiff\u201d command\u00b9\u2070 compared the output of these SPARQL queries. We found no difference in subsumptions or equivalences between terms within each ontology, which intuitively means that the class hierarchies of each input ontology were not changed by the alignment. Although this level of conservativity was achieved, our alignment does entail new disjoint relations between PROV terms, as we will explain in our mapping of PROV Agent.\nAutomated tests for the techniques described above were implemented as part of an ontology engineering pipeline using ROBOT and GNU Make [29]. ROBOT commands used for running SPARQL queries and the HermiT reasoner were composed into Make tasks. These Make tasks are run within a continuous development pipeline using GitHub Actions. The result is that changes to the mapping project can be automatically, rigorously tested when added to the Git repository hosted in GitHub.\nTo narrow down possible object property mappings, a SPARQL query was developed to find BFO, RO, and CCO object properties with the same (possibly inherited) domain and range as each PROV object property. For example, PROV generated has domain PROV Activity and range PROV Entity. When these classes were mapped as subclasses of BFO process and BFO continuant, respectively, the SPARQL query found three object property matches: CCO CCO affects, CCO has input, and CCO has output all have BFO process and continuant as their domain and range. The last, CCO has output, was then manually selected by curators because it best matches the meaning of PROV generated. This semi-automated method of object property matching by narrowing down candidate mappings is especially useful when the domain or range of an object property is not always obvious based on its label.11"}, {"title": "FAIR Compliance", "content": "The technical artifacts produced by our work comply with FAIR (Findable, Accessible, Interoperable, Reusable) principles [30]. To support interoperability and reuse, the mappings are implemented in OWL 2 DL and serialized in RDF Turtle. They are maintained in files separate from the corresponding ontologies, similar to the Dublin Core extension of PROV [31]. Providing separate files, as opposed to changing the corresponding ontologies, preserves compatibility with their existing usage. Although we provide some ontological commentary on PROV itself within the encoded mappings, we refrained from making any changes to existing terms in order to avoid disrupting their existing usage. The artifacts can be found and accessed as described in the Data and Code Availability sections of this paper.\nProvenance of the mappings is provided as metadata in the form of OWL axiom annotations, which allow us to simultaneously assert the mappings and annotate them. Informal justifications for each mapping are annotated using RDFS comment. Although automated ontology matching techniques typically include a confidence value for each mapping, we did not include confidence values because our mapping process was based on manually analyzing the meaning of each term. Annotation properties from the Simple Standard for Sharing Ontology Mappings (SSSOM) [32] vocabulary were also used for interoperability with other ontology mapping efforts. The predicate SSSOM object label is used to provide a convenient, human friendly reference for terms with opaque IRIs. For example, the BFO term process has the IRI ending \u201cBFO_0000015\u201d, so a mapping that uses this can add that label to the annotation axiom.12 Informal justifications for SWRL rule mappings were added directly to the rules themselves.\nMappings for BFO, RO, and CCO are also encoded in separate files with some redundancy to make them independently usable. For example, PROV Plan is mapped as a subclass of BFO generically dependent continuant in the BFO mapping, while also mapped as a subclass of CCO Information Content Entity in the CCO mapping, where the latter entails the former. This allows for use of the BFO mapping independently of the CCO mapping. RO and CCO mappings include OWL imports of the BFO mapping because RO and CCO logically depend on BFO. Lastly, a separate RDF Turtle file imports all three of the mapping files, along with the BFO, RO, and CCO ontologies, for viewing the mappings in context and for testing with reasoners and SPARQL queries."}, {"title": "Results", "content": "Out of 153 total classes and object properties in PROV-O and its extensions, 34 were explicitly mapped to BFO using 6 equivalence relations, 23 subsumption relations, and 8 SWRL rules. 36 terms were explicitly mapped to CCO using 5 equivalence relations, 22 subsumption relations, 1 property chain, and 6 SWRL rules. Finally, 25 terms were explicitly mapped to RO using 26 subsumption relations. Among the total mappings, 4 terms were supplemented with additional SKOS mappings to provide commentary on possible alternative mappings. Implicit mappings for all other PROV-O terms are entailed by logical axioms of the aligned ontologies. Some of the class mappings are displayed in Figure 1.\nThe mappings will be described in order of groupings used by the W3C PROV-O documentation. Starting Point terms are referred to as \u201ca small set of classes and properties that can be used to create simple, initial provenance descriptions\u201d. Expanded terms are subclasses and subproperties of Starting Point terms and also terms used to provide more specific details about provenance. Qualified terms are those used to provide \"additional attributes of the binary relations\u201d asserted by use of the Starting Point and Expanded terms."}, {"title": "Starting Point classes and object properties", "content": "PROV Entity is defined as \u201ca physical, digital, conceptual, or other kind of thing with some fixed aspects; entities may be real or imaginary.\u201d Our interpretation of this is that a PROV Entity can exist entirely, with all spatial parts, at different times. We have therefore mapped PROV Entity as a subclass of BFO continuant\u00b9\u00b3 with one exception. Instances of BFO spatial regions are continuants that neither participate in processes nor bear qualities. This exception is captured by mapping PROV Entity to a subclass of things that are independent continuants and not spatial regions, in a union with generically dependent and specifically dependent continuants in BFO14. In other words, every instance of a PROV Entity is one of these kinds of continuants but not a spatial region. Structurally, this mapping is supported by the disjoint relationship between PROV Entity and PROV Activity. This disjoint relationship is entailed by additionally mapping PROV Activity to a subclass of BFO occurrent because continuants and occurrents are disjoint.\nPROV Agent is mapped as a subclass of BFO material entities that both participate in some PROV Activity and bear some BFO role that is realized in a PROV Activity (see Figure 2). The reason for this mapping is that a PROV Agent always has some matter as a part that persists in time. This is true even for instances of its subclass, PROV SoftwareAgent, which is defined as \u201crunning software\u201d, because every particular instance of a PROV SoftwareAgent is a material realization of some software (which may itself be considered a generically dependent continuant). The definition of PROV Agent also states that an agent \u201cbears some form of responsibility for an activity taking place, for the existence of an entity, or another agent's activity\u201d. This is formalized in axioms which entail that every PROV Agent participates in, and bears some role that is realized in, some PROV Activity.15 According to Requirement VI3 in \u201cThe Rationale of Prov\u201d [33], a PROV Agent could be a PROV Entity and this is possible in our mapping because both PROV Agent and PROV Entity are subclasses of BFO continuant.\nSubClass Of 'material entity'\nand ('participates in' some Activity)\nand ('bearer of some\n(role\nand ('has realization' some Activity)))\nHaving created a subsumption to a general class in BFO, we then developed a more specific, equivalence mapping for PROV Agent in CCO: A PROV Agent is equivalent to the intersection of"}, {"title": "PROV Activity is mapped as equivalent to the class BFO process.", "content": "The definition of PROV Activity includes \u201csomething that occurs over a period of time and acts upon or with entities\u201d. Similarly, a BFO occurrent - the parent class of BFO process - is defined as \u201can entity that unfolds itself in time or it is the start or end of such an entity or it is a temporal or spatiotemporal region\u201d. However, instances of PROV Activity do not seem to include instances of BFO temporal regions, such as the year 1986. Hence, BFO process was selected as a more appropriate equivalence class. Note that, although all instances of PROV Agent are participants in some PROV Activity at some time, not all instances of PROV Activity have participants. The definition of BFO process suggests that all processes have participants\u00b96, but this is not formalized as a logical axiom, so we did not include this axiom for PROV Activity either.\nAn important caveat to our mapping of PROV Agent and PROV Activity relates to Requirement VI4 in \u201cThe Rationale of PROV\u201d, which states: \u201cprov is to allow agents to be activities\u201d. This stipulation is described as a consequence of Requirement GE1: \u201cprov is to minimize class disjointness constraints and to use strong rationale when defining such constraints\u201d and Requirement GE2: \u201cprov is to include the mirror of each concept, where relevant.\u201d The authors elaborate: \u201cAs a result, being an agent is not an intrinsic characteristic of an entity or activity. Instead, it is the very presence of responsibility relations that implies that some entities or activities are also agents.\u201d\nIt is possible to formally accommodate Requirement V14, by mapping PROV Agent as the disjoint union of (non-spatial region) continuants and processes. This would ensure that every PROV Agent is an instance of a continuant or process but not both. Despite this mapping being a possible implementation, we decided not to include it, as this would ultimately go against the spirit of BFO's core axiom that continuants and occurrents are disjoint. Our mapping is not merely a translation but is also intended to enrich the semantics of each ontology. Mapping PROV Agent to BFO continuant and PROV Activity to BFO process entails that PROV Agent is disjoint with PROV Activity. While this contradicts Requirement V14, it does not contradict any specific example provided in the essay or W3C documentation of something that is both a PROV Agent and PROV Activity.\nIn this case, there is indeed a strong reason for making continuants and occurrents disjoint. This rationale is given for Requirement VI7: \u201cprov is not to allow an activity to be an entity\u201d, where the authors state: \"An activity represents something that \u201chappened\", whereas an entity is a thing, whether real or imaginary. This distinction is similar to that between \u201ccontinuant\u201d and \u201coccurrent\u201d in logic\u201d. Moreover, a simpler explanation of how an activity can be related to some responsibility is that an activity may involve an agent that bears that responsibility. This is formalized by our logical axiom stating that every PROV Agent bears some BFO role that is realized in a PROV Activity. However, this does not and should not entail that a PROV Agent could be a PROV Activity.\""}, {"title": "We will now highlight some Starting Point object properties in PROV.", "content": "Since the domain and range of PROV wasGeneratedBy are PROV Entity and PROV Activity, respectively, it is mapped as a subproperty of BFO participates in, whose domain and range are non-spatial region continuants and process, respectively. A more specific subproperty mapping to CCO is also provided: CCO is output of has domain and range of continuant and process, respectively. Despite redundancy with BFO, a mapping to RO is also provided: RO participates in has domain and range of continuant and occurrent, respectively. All three mappings are logically consistent when used together. The difference with the BFO mapping is that it excludes spatial regions from being used in a PROV wasGeneratedBy relation. Both participates in predicates were used for practical reasons. While the RO predicate is more compatible with OBO Foundry ontologies, the BFO predicate is a newer, more refined version.\nPROV wasAssociatedWith has domain PROV Activity and range PROV Agent. This is used to represent, for example, that an activity of illustrating was associated with an illustrator. This object property was mapped as a subproperty of BFO has participant, which is the inverse of BFO participates in. It was also mapped as a subproperty of CCO has agent, which is informally defined as relating between a BFO process and CCO Agent, but does not formally specify these as domain and range. Finally, PROV wasAssociatedWith was also mapped to RO has participant, which is the inverse of RO participates in."}, {"title": "Expanded classes and object properties", "content": "Among the Expanded classes for PROV-O are PROV Person and PROV Organization. PROV Person is a good example of a term which might be incorrectly mapped if relying on automated lexical matching. CCO Person has the same RDFS label as PROV Person, however, PROV Person is a subclass of PROV Agent, while CCO Person is not a subclass of CCO Agent. To map these related terms, we mapped PROV Person as equivalent to the intersection of CCO Person and PROV Agent. This entails that every PROV Person is both a CCO Person and PROV Agent. However, this does not entail that every CCO Person is a PROV Person, much less a PROV Agent. All of the same considerations apply to PROV Organization, which is a subclass of PROV Agent, while CCO Organization is not a subclass of CCO Agent. Therefore, PROV Organization is equivalent to the intersection of CCO Organization and PROV Agent.\nPROV Location is mapped as equivalent to BFO site, which is defined as \u201ca three-dimensional immaterial entity whose boundaries either (partially or wholly) coincide with the boundaries of one or more material entities or have locations determined in relation to some material entity\u201d. On the other hand, the informal definition of PROV Location states that an instance of it \"can also be a non-geographic place such as a directory, row, or column\u201d. This fits with our mapping if we interpret a row in a digital spreadsheet, for example, as being located inside and bound by some material realization of a computer.\nExpanded object properties include PROV hadPrimarySource, wasQuotedFrom, and wasRevisionOf. These are all subproperties of PROV wasDerivedFrom, with domain and range of PROV Entity, which was mapped as a subproperty of RO causally influenced by. This mapping allows us to interpret any derivation relation represented in PROV as a causal relation between entities. By contrast, PROV wasInvalidatedBy has domain and range of PROV Entity and PROV Activity, respectively. This was mapped as a subproperty of both BFO participates in and RO participates in, which have slightly different domains and ranges, as mentioned previously. Finally, PROV wasInvalidatedBy was also mapped as a subproperty of CCO is affected by, which has BFO continuant and process as its domain and range.\nPROV atLocation was mapped using SWRL rules. Its domain is the union of PROV Agent, PROV Activity, PROV Entity and PROV InstantaneousEvent, while its range is PROV Location. In BFO, there are two object properties similar to PROV atLocation. The domain of BFO occurs in is the union of BFO process and process boundary, while its range is the union of BFO site and material entity. BFO located in has a domain and range of BFO independent continuants that are not spatial regions. In order to map PROV atLocation to both of these object properties, SWRL rules were used to restrict the domain and range of particular instances of them. Here are the SWRL rules for mapping between PROV atLocation and BFO occurs in, preceded with informal descriptions of each:\n\"If a PROV Activity is at some location, then it occurs in that location\"\nprov:atLocation(?x, ?y) ^ prov:Activity(?x) -> obo:BFO_0000066(?x, ?y)\n\"If a PROV InstantaneousEvent is at some location, then it occurs in that location\"\nprov:atLocation(?x, ?y) ^ prov:InstantaneousEvent(?x) -> obo:BFO_0000066(?x, ?y)\n\"If something occurs in a PROV Location, then it is at that Location\"\nobo:BFO_0000066(?x, ?y) ^ prov:Location(?y) -> prov:atLocation(?x, ?y)\nThese rules restrict the domain of PROV atLocation to the domain of BFO occurs in, the union of process and process boundary, which are mapped as equivalent to PROV Activity and PROV InstantaneousEvent, respectively. This allows a semantic reasoner to automatically infer that some subset of the instances of the PROV atLocation relation are also instances of the BFO occurs in relation \u2013 only those involving a PROV Activity or PROV InstantaneousEvent. Conversely, the last rule restricts the range of occurs in to entail that anything related by the occurs in relation to a PROV Location is also related to it by the PROV atLocation relation. These rules are necessary because some instances of PROV atLocation could involve a PROV Entity or PROV Agent, which are disjoint with BFO process and process boundary in virtue of being subclasses of \u201ccontinuant\u201d. That is, instances of PROV atLocation can be inferred to be instances of BFO occurs in only when involving instances of PROV Activity or PROV InstantaneousEvent. Similar SWRL rules provide a mapping between PROV atLocation and BFO located in."}, {"title": "Qualified classes and"}]}