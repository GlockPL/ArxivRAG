{"title": "Prompt Tuning for Item Cold-start Recommendation", "authors": ["Yuezihan Jiang", "Gaode Chen", "Wenhan Zhang", "Jingchi Wang", "Yinjie Jiang", "Qi Zhang", "Jingjian Lin", "Peng Jiang", "Kaigui Bian"], "abstract": "The item cold-start problem is crucial for online recommender systems, as the success of the cold-start phase determines whether items can transition into popular ones. Prompt learning, a powerful technique used in natural language processing (NLP) to address zero- or few-shot problems, has been adapted for recommender systems to tackle similar challenges. However, existing methods typically rely on content-based properties or text descriptions for prompting, which we argue may be suboptimal for cold-start recommendations due to 1) semantic gaps with recommender tasks, 2) model bias caused by warm-up items contribute most of the positive feedback to the model, which is the core of the cold-start problem that hinders the recommender quality on cold-start items. We propose to leverage high-value positive feedback, termed pinnacle feedback as prompt information, to simultaneously resolve the above two problems. We experimentally prove that compared to the content description proposed in existing works, the positive feedback is more suitable to serve as prompt information by bridging the semantic gaps. Besides, we propose item-wise personalized prompt networks to encode pinnaclce feedback to relieve the model bias by the positive feedback dominance problem. Extensive experiments on four real-world datasets demonstrate the superiority of our model over state-of-the-art methods. Moreover, PROMO has been successfully deployed on a popular short-video sharing platform, a billion-user scale commercial short-video application, achieving remarkable performance gains across various commercial metrics within cold-start scenarios.", "sections": [{"title": "1 INTRODUCTION", "content": "Recently, item cold-start recommendation has garnered significant attention from researchers [5, 24], as every item inevitably undergoes this phase, which significantly shapes its potential for popularity. With the burgeoning success of pre-training techniques in Natural Language Processing (NLP) [27], numerous endeavors have been made to integrate pre-training into cold-start recommendations [15, 16].\nThese methods leverage pre-trained knowledge to alleviate the sparsity issue, thereby enhancing the quality of cold-start recommendations [41]. However, amidst the prevailing trend of pre-training, the effective extraction of useful information from pre-trained models emerges as a promising avenue. One such method, prompt-tuning [21, 25], stands out for its remarkable advantages over classical fine-tuning paradigms, particularly in zero-shot and few-shot scenarios. By employing hard text templates or soft continuous embeddings as prompts, prompt-tuning transforms downstream tasks into analogous well-trained pre-training tasks.\nThe merits of prompt-tuning lie in two key aspects: firstly, it bridges the gap between pretraining and downstream objectives, thereby optimizing the utilization of pretraining model knowledge, which is especially advantageous in cold-start scenarios. Secondly, prompt-tuning requires tuning only a small set of parameters for the prompts and labels, making it more parameter-efficient."}, {"title": "2 RELATED WORKS", "content": "In this section, we briefly introduce several hybrid recommender systems that can handle the item cold-start scenario. Item cold-start recommendation aims to provide effective recommender results to users on the cold-start items. It can be divided into several kinds.\nContent-based methods propose to model the distribution of content features, e.g., taking audio information to encode recommender embeddings [4, 8, 31], or taking domain-related information for downstream tasks [1, 2, 6, 10]. Though content information relieves the data sparsity problem, it is hard to ensure the content information can always supplement the downstream tasks, because there exists a gap between the semantic information and the recommender tasks. Collaborative filtering strategies such as CBF and CF have limited scope in the cold start scenario due to lack of information, e.g., involving social relations for collaborative filtering [7, 29], or proposing a new similarity measure for neighborhood based CF for item cold-start scenarios [38]. Meta-learning addresses the cold-start problem by learning to quickly adapt a model to new items or users with minimal data. For example, [47] introduces a meta-learning strategy for item cold-start recommendations by employing deep neural networks that adapt a neural network's biases using item history. [26] enhances tasks with multifaceted semantic contexts and employs a co-adaptation meta-learner to effectively address the challenges of new item recommendation. Transfer learning-based recommendation optimizes the cold-start recommendation quality by utilizing cross-domain knowledge. For example, [45] learns to transfer model knowledge from rich data settings to few data settings by a meta-learner learning the model parameter shifting relations. [40] utilize prompt learning mode to utilize pretrained knowledge to boost cold-start recommendations. PROMO belongs to this line of methods."}, {"title": "2.1 Cold-start Recommendation", "content": "In this section, we briefly introduce several hybrid recommender systems that can handle the item cold-start scenario. Item cold-start recommendation aims to provide effective recommender results to users on the cold-start items. It can be divided into several kinds.\nContent-based methods propose to model the distribution of content features, e.g., taking audio information to encode recommender embeddings [4, 8, 31], or taking domain-related information for downstream tasks [1, 2, 6, 10]. Though content information relieves the data sparsity problem, it is hard to ensure the content information can always supplement the downstream tasks, because there exists a gap between the semantic information and the recommender tasks. Collaborative filtering strategies such as CBF and CF have limited scope in the cold start scenario due to lack of information, e.g., involving social relations for collaborative filtering [7, 29], or proposing a new similarity measure for neighborhood based CF for item cold-start scenarios [38]. Meta-learning addresses the cold-start problem by learning to quickly adapt a model to new items or users with minimal data. For example, [47] introduces a meta-learning strategy for item cold-start recommendations by employing deep neural networks that adapt a neural network's biases using item history. [26] enhances tasks with multifaceted semantic contexts and employs a co-adaptation meta-learner to effectively address the challenges of new item recommendation. Transfer learning-based recommendation optimizes the cold-start recommendation quality by utilizing cross-domain knowledge. For example, [45] learns to transfer model knowledge from rich data settings to few data settings by a meta-learner learning the model parameter shifting relations. [40] utilize prompt learning mode to utilize pretrained knowledge to boost cold-start recommendations. PROMO belongs to this line of methods."}, {"title": "2.2 Prompt-tuning for Recommendation", "content": "Prompt-tuning, initially proposed in NLP [9, 11, 23], has gained traction in recommender systems for its performance improvements, particularly in few-shot scenarios. Typically, it involves freezing the backbone model and providing downstream tasks with related tunable prompt embeddings. Recently, inspired by NLP works, researchers have introduced prompt-tuning modes to recommender systems, such as encoding user-profiles and behaviors as prompts [40], incorporating graph structures as additional prompts [44], or encoding discrete item features for prompting [22]. Further, considering the relevance of few-shot learning and cold-start recommendations, [39, 40] have introduced prompt learning to solve the cold-start recommendation problem. However, these methods often achieve suboptimal performance in item cold-start scenarios because the corresponding prompt information, such as item profiles, lacks crucial contextual relevance to cold-start recommendations. Some research efforts propose leveraging annotated text descriptions and knowledge graphs to activate large language models for recommender tasks [13, 36, 42]. While effective in igniting the backbone with extra input prompt data, these approaches are less practical in industrial settings due to the high annotation costs associated with millions or billions of new items in such scenarios."}, {"title": "3 PRELIMINARY", "content": "We focus on addressing the item cold-start problem, where new items have no or few prior interactions, like click or rating logs. The item cold-start problem requires to provide a scoring function that can accurately estimate the user's preference for a new item, thus provides effectiveness guarantee for the item cold start problem."}, {"title": "3.1 Item Cold-start Problem", "content": "We focus on addressing the item cold-start problem, where new items have no or few prior interactions, like click or rating logs. The item cold-start problem requires to provide a scoring function that can accurately estimate the user's preference for a new item, thus provides effectiveness guarantee for the item cold start problem."}, {"title": "3.2 Notations & Problem Formulation", "content": "In this work, we use boldface lowercase letters (e.g., e) to denote vectors, boldface uppercase letters (e.g., W) to denote matrices, and calligraphic capital letters (e.g., $\\mathcal{D}$) to denote sets. Let $\\mathcal{U}, \\mathcal{I}$ denote the sets of users and items, respectively. The problem here can be formulated as a typical CTR prediction task. Each user $u \\in \\mathcal{U}$ is associated with a set of items $\\mathcal{I}_u$ with feedback $y_{ui} = 1$ for $i \\in \\mathcal{I}_u$, indicating that the user has clicked on the items. $e_u, e_i \\in \\mathbb{R}^d$ are the input ID embeddings of u and i, respectively. $\\mathbb{R}$ is the set of real numbers, and d is the embedding dimension. In our scenario, given the pair of (u, i), where $u \\in \\mathcal{U}$ and $i \\in \\mathcal{I}$, our goal is to learn a function that can forecast how likely the item will be clicked by the user, i.e. $\\hat{y}_{ui}$, $\\hat{y}_{ui}$ ranges from 0 to 1, indicating how likely the user will clicked on the item."}, {"title": "4 THE PROPOSED METHOD", "content": "We initiate the pre-training phase of PROMO, showcasing its adaptability across various base models. It consists of three parts.\n(1) Embedding Layer. In our scenario, the input to the base model includes several item content features and categorical ID features, such as item ID. These ID features cannot be directly input into the model as they are not trainable for downstream tasks. Therefore, we adopt the widely used embedding technique to transform the original sparse features into low-dimensional vectors. For user $u \\in \\mathcal{U}$ and item $i \\in \\mathcal{I}$, id embeddings $e_u$ and $e_i$ are concatenated with their other continuous features to generate the overall embeddings.\n(2) Backbone. We first introduce the pre-training stage of PROMO. Following [40], we use the classical SASRec [19] as our pre-training model, which can be flexibly substituted with other representation learning methods in recommendations. SASRec stacks Transformer [33] blocks to encode the historical behavior sequence. For each user u with behavior sequence $s_u$, its l-layer behavior matrix is formulated as $S^l = (e_{s_1}^l, e_{s_2}^l,..., e_{s_{|s_u|}}^l)$, where $e_{s_k}^l$ is the k-th behavior's representation of u at the 1-th layer. The (1 + 1)-layer behavior matrix is learned as follows:\n$H^{l+1} = Transformer (H^l), h_u = f_{seq}(H^L, e_u)$\nwhere $f_{seq}$ is a MLP encoder, $h_u$ is the final user representation of u learned in the pre-training stage, and L is the number of Transformer layers.\nThrough the base model, we can obtain the hidden representations $h_u \\in \\mathbb{R}^d$ and $h_i \\in \\mathbb{R}^d$ of user u and item i, respectively. Then, we can make predictions on the unobserved interaction between user u and item i as follows:\n$Y_{ui} = \\sigma(\\frac{[h_u]^T h_i}{\\tau})$\nwhere [.] represents the transpose of the matrix, $\\tau$ represents the temperature coefficient, and $\\sigma$ is the sigmoid function.\n(3) Loss. The objective function used in the base model and PROMO is both the negative log-likelihood function defined as:\n$\\mathcal{L}= -\\frac{1}{N}\\sum_{(u,i, y) \\in D_{train}} (y_{u,i} log \\hat{y}_{u,i} + (1 - y_{u,i}) log(1 - \\hat{y}_{u,i}))$\nwhere $D_{train}$ is the training set, $\\hat{y}$ is the output representing the predicted probability whether item i is clicked by u, and y $\\in$ 0, 1 is the ground-truth label."}, {"title": "4.1 Prompt Generator", "content": "Existing methods face challenges in effectively prompting recommendation models in cold-start scenarios for two primary reasons. Firstly, these methods heavily rely on content features as prompt information. These content features may suffer from a semantic gap between their representation and the requirements of recommender tasks, potentially hindering their efficacy. Secondly, as experimentally illustrated in Sec.1, we argue that positive feedback information is better suited to serve as prompt information, as it offers contextual information tailored to address the scarcity of positive feedback in item cold-start scenarios. From a model perspective, the training samples of popular items, especially the positive samples, provide the majority of training data to the recommender system, resulting in the predominance of training samples from popular items. Consequently, this leads to model bias, where the model tends to assign higher scores to popular items, perpetuating their dominance in recommendations."}, {"title": "4.1.1 Prompt Data", "content": "Initially, we propose utilizing pinnacle feedback as input for prompting, where \"pinnacle feedback\" refers to users who have provided exceptionally positive feedback for a given item. This approach offers advantages on two fronts: (1) These users are crucial for the recommender system to understand the item, and (2) by leveraging user feedback as prompt information and as part of the cold-start item representation, the user-item matching problem can be reframed as a user-user matching problem, potentially increasing the traffic distribution efficiency of cold-start items and aiding more cold-start items in transitioning into popular items.\nTo select appropriate positive feedback for item $i \\in \\mathcal{I}$, we present a criterion to measure the score of each feedback for item i, which is also applied in our online recommender system. For each user $u \\in \\mathcal{U}$ who has viewed the item i, we consider multiple positive feedback from users (i.e., positive comments and forward) on the items to calculate preference score for selecting pinnacle feedback. This measurement standard can be flexibly modified to suit different recommender scenarios, e.g., short-video recommendation and e-commerce recommendation. Specifically, we measure the sample value $v_{u,i}$ of user (feedback) u to item i using the following formula.\n$V_{u,i} = \\alpha \\ CR_{u,i} + \\beta \\ IR_{u,i}$\nwhere $CR_{u,i}$ represents the staying time of the user on the item page, and $IR_{u,i}$ is a comprehensive score of user interaction feedback, such as liking the item or following the owner of the item. According to the above criteria, we select the top-k users with the highest value as the pinnacle sample list for the item i, that is, $Pos_i = (u^{pos}_1, u^{pos}_2,...., u^{pos}_k)$.\nFor cases where certain items lack user feedback, referring to ideas behind [3], we utilize collaborative filtering information from warm-up items to help cold-start items, we generate pseudo-pinnacle sample information from related popular items. Specifically, for a cold-start item $a \\in \\mathcal{I}$, we calculate item similarities between itself and popular item $b \\in \\mathcal{I}$ using the formula:\n$U_{ba} = \\frac{h_a h_b}{|h_a|^2 + |h_b|^2 - h_a h_b}$\nwhere $h_a$ and $h_b$ represent embeddings of items a and b, encoded from the base model. We select the most similar popular item to item a, and apply Equation (4) to extract related positive feedback as pseudo-prompt information."}, {"title": "4.1.2 Personalized Prompt Network", "content": "(1) Model Architecture. From the model perspective, we use the prompt generator to generate $I$ independent sets of embeddings $e_i^0 \\in \\mathbb{R}^{d_{P_0}}, e_i^1 \\in \\mathbb{R}^{d_{P_1}},\u2026\u2026\u2026, e_i^{l} \\in \\mathbb{R}^{d_{P_l}}$, for cold start item i $\\in \\mathcal{I}$, which are different from the Embedding Layer in the base model. For the specific n-th item embedding $e_i^n$, we reshape and split them into the weight matrix and bias vector for the personalized prompt network. This process for $e_i^n$ can be formulated as:\n$e_i^n = W_i^{pn}//b_i^{pn}, W_i^{pn} \\in \\mathbb{R}^{d_{Pn - 1} \\times d_{Pn}}, + b_i^{pn} = e_i^n \\in \\mathbb{R}^{d_{Pn}}$\nwhere $W_i^{pn}$ and $b_i^{pn}$ denote the weight and bias of n-th layer of the personalized prompt networks, $//$ indicates the concatenation operation, $|x|$ gets the size of the variables.\nThis process mitigates the problem of model bias, where popular items dominate model updates, as each item only updates its item-personalized prompt networks. Furthermore, it ensures that the prompt information fully takes effect, as the personalized prompt network is independent from the original base model and solely encodes the prompt information.\n(2) Complexity. PROMO is parameter-efficient, since it only needs to tune and store a few parameters compared with fine-tuning the base model. The tunable parameters in PROMO only cost in the personalized prompt network part ($W_i^{pn}$ and $b_i^{pn}$), which is very efficient. In PROMO, the number of parameters to be updated merely 20.1%, 27.6%, 17.7% and 25.6% of those fine-tuning in MovieLens100K, MovieLens1M, KuaiRand, and TMall datasets."}, {"title": "4.2 Prompt Learning in PROMO", "content": "In the previous section, we obtain the positive feedback list $S^{pos}$, negative feedback list $S^{neg}$ and the parameters of the personalized prompt network for the cold-start item $i \\in \\mathcal{I}$ based on the prompt generator. Next, $S^{pos}$ and $S^{neg}$ are fed into the personalized prompt network and the feature interaction is realized via the concatenation of the output of each layer. Take $S^{pos}$ as an example:\n$h_i^{pos} = (W_i^{p - 1} (... (h_i^0 + b_i^0) + b_i^1)... + b^{l - 1}),$\nwhere $\\cdot$ denotes the matrix multiplication, $\\sigma$ indicates the activation function, l represents the layers of the personalized prompt network, $h_i^{pos}$ is the output of the prompt data fed through the prompt network, and $h_i^0 = S^{pos}$. We can also get $h_i^{neg}$ for $S^{neg}$.\nTo fully leverage the potential of prompt information in PROMO, we introduce the pinnacle feedback prompt-enhanced loss $\\mathcal{L}_{pfpe}$ and the popularity-aware prompt-enhanced loss $\\mathcal{L}_{pape}$.\nPer-sample Pinnacle Feedback Prompt-enhanced Loss. Per-sample Positive Feedback Prompt-enhanced Loss is designed to fully take advantange of high-value positive samples for cold-start items. To achieve this, for the item i $\\in \\mathcal{I}$, we leverage the concept of contrastive learning to widen the gap between its pinnacle and negative feedback representations. We calculate the sum of the distances between each pinnacle feedback and each negative feedback of i as follows:\n$\\Delta_i = \\sum_{x \\in Pos_i} \\sum_{y \\in Neg_i} ||e_i^{pos_{1,x}} - e_i^{neg_{1,y}}||\nwhere we employ the $L_1$ distance to calculate the discrepancy between each pinnacle feedback vector and each corresponding negative feedback vector. Furthermore, we utilize the log function to implement the loss:\n$\\mathcal{L}_{pfpe} = log (1 + exp (- \\Delta_i))$.\nOptimizing $\\mathcal{L}_{pfpe}$ enables PROMO to indirectly memorize valuable feedback information in both the prompt network parameters and the prompt embedding. Additionally, the pair-wise $\\mathcal{L}_{pfpe}$ supplements order information to the base model, which is trained in a point-wise manner and lacks ordering ability.\nIntra-batch Popularity-aware Prompt-enhanced Loss. The final representation of the item i $\\in \\mathcal{I}$ is composed of the output $h_i$ of the base model, the average of its positive feedback list $h_i^{pos}$, and the last layer of personalized prompt network embedding $e_i^{pl}$:\n$e^{final} = MLP (h_i; h_i^{pos}, e^{pl})$\nwhere MLP is the Multi-layer Perceptron network. With the final embeddings, we adopt a simple but widely-used inner product model, i.e., $\\hat{y}_{u,i} = [e_u^{final}]^T e_i^{final}$ to estimate the value of $\\hat{y}_{u,i}$, which is the interaction probability between a given pair of user and item.\nIndustrial recommender systems frequently exhibit biased preferences for popular items. This bias emerges because popular items"}, {"title": "4.3 Optimization", "content": "To fully leverage knowledge from the pretrained model and PROMO, we directly fuse the representations from the pretrained model and PROMO by concatenating the embeddings together, thus obtaining the final embeddings. The final prediction value is estimated from the final embedding. The overall objective function is formulated as:\n$\\mathcal{L} = \\lambda_1 \\mathcal{L}_{pfpe} + \\lambda_2 \\mathcal{L}_{pape} + \\mathcal{L}_{rec}$\nwhere $\\lambda_1$ and $\\lambda_2$ are positive coefficients serving as balancing factors for the multiple loss functions. $\\mathcal{L}_{rec}$ has the same format as Equation 3, which is important to inject representations with personalized recommender knowledge. Following the training paradigm in prompt learning [21], the base model is frozen during the optimization. Only tuning on the small set of model parameters without changing the base model is not only parameter-efficient, but it can also better leverage the pre-trained model and avoid the catastrophic forgetting problem [20]."}, {"title": "5 EXPERIMENT", "content": "In this section, we conduct an empirical assessment of our framework and present comprehensive results. Our focus lies on addressing the following six questions: Q1: Can PROMO surpass state-of-the-art baseline methods in terms of recommendation performance in cold-start scenarios across real-world datasets? Q2: What are the advantages of the prompt learning module within PROMO for enhancing downstream recommender tasks? Q3: How effective is the proposed positive feedback prompt information? Can it be replaced by other types of prompt information? Q4: How does the personalized prompt network affect the overall system performance? Q5: Does the prompt paradigm in PROMO effectively enhance the high-value positive feedback information? Q6: Does PROMO effective in providing high-quality recommender results in the industrial application?"}, {"title": "5.1 Datasets & Baselines", "content": "Datasets. We utilize four public recommender datasets - MovieLens 100K & 1M [17] about movie recommendations, KuaiRand [12] of short-video recommendations and TMall [30] of E-commerce recommendations, to evaluate the effectiveness of our methods. Specifically, we preprocessing the datasets for the evaluation on cold-start performance. For all four datasets, We divide items into two groups, popular and cold-start based on their positive feedback interaction frequencies, where items with more than positive feedback interactions are popular and others are cold-start. We use of 20, 50, 50 and 20 for MovieLens 100K, MovieLens 1M, KuaiRnad-Pure and Tmall dataset, respectively. Note that the ratio of cold-start items to popular items is approximately 8:2, which is similar to the definition of long-tail items. Following the same leave-one-out technique in existing works [40, 46], we take the last interactive item for each user as the test data, the second-to-last as validation data, and the remaining data as training data to simulate the online recommendation environment. The detailed statistics are summarized in Table 1.\nBaselines. In order to comprehensively assess the efficacy of the prompt tuning mode in our system (PROMO), we conduct a comparison with two approaches: Pre-train, where we directly apply the pre-trained model (SASRec [19]) to the test set, and Fine-tuning, which involves tuning all parameters of the pre-trained model during the tuning phase. Besides, we compare PROMO with four popular and effective CF model: DCN [35], DeepFM [14], SASRec [19], DSSM [18], four state-of-the-art cold-start recommender models: CDN [46], DropoutNet [34], CB2CF [3], MetaEmb [28], and two prompt-tuning in recommender systems: PPR [40], PLATE [37]. Our code for PROMO is available at https://github.com/PROMOREC/PROMO. The main characteristic of all baselines are listed below:\n\u2022 CDN [46]: CDN presents a Cross Decoupling Network (CDN) to enhance long-tail item recommendation by addressing biases in user preference predictions.\n\u2022 DCN [35]: DCN is a novel cross network that is efficient in learning certain bounded-degree feature interactions. As it is poweful and the feature crossing manner is similar to prompt network in PROMO, we take it as one of the baseline method.\n\u2022 DeepFM [14]: DeepFM derives an end-to-end learning model that emphasizes both low- and highorder feature interactions by a shared input to the \"wide\" and \"deep\" parts.\n\u2022 SASRec [19]: SASRec capture both long-short recommender interests by utilizing both long-term semantics (like an RNN) and using an attention mechanism to makes its predictions based on relatively few actions.\n\u2022 DSSM [18]: SASRec capture both long-short recommender interests by utilizing both long-term semantics (like an RNN) and using an attention mechanism to makes its predictions based on relatively few actions."}, {"title": "5.2 Evaluation Metrics & Parameter Settings", "content": "For each user in the test set, we take all the items that the user has not interacted with as negative samples. For each testing user-item positive pair, we randomly sample 100 items which are not interacted by the user to generate negative pairs for evaluation, which mirrors similar settings in existing works. We evaluate the proposed PROMO with two metrics: Hitrate@K and NDCG@K. These metrics can be formulated as follows:\n$Hitrate@K = \\frac{\\sum_{u} \\sum_{j=1}^{K}rel_j}{\\sum_u |T(u)|}$\n$NDCG@K = \\frac{1}{u} \\frac{DCG@K}{IDCG@K}, DCG@K = \\sum_{j=1}^{K} \\frac{2^{rel_j} - 1}{log_2(j + 1)}$\nwhere R(u) and T(u) represent the model recommendation set and the whole test set respectively; relj = 0/1 indicates item at rank j in R(u) is also belonging to T(u). IDCG is the DCG score for the most ideal ranking, which is ranking the items top down according to their real score. In our experiment, K is separately set to be 5 and 10. A higher score indicates a model with better retrieval or ranking ability."}, {"title": "5.3 End-to-End Comparison", "content": "To address Q1, we present the performance results of our end-to-end comparison in Table 2. Across four recommender datasets, our system (PROMO) consistently outperforms all baseline methods across various metrics (H@1, H@5, H@10, N@1, N@5, and N@10).\nCompared to cold-start baseline methods, PROMO achieves superior performance. For instance, PROMO outperforms CB2CF and MetaEmb by large margins of 37.8% and 27.2%, respectively, in HitRate@5 on the MovieLens 1M dataset. This highlights the importance of positive feedback in enhancing recommender tasks compared to content-based information. Moreover, CF-based methods generally achieve better performance than content-based methods, further underscoring the effectiveness of utilizing feedback information for recommendations. Despite this, PROMO achieves significant improvements over CF-based methods, e.g., surpassing SASRec by 16.3%, 13.1%, 14.7%, and 13.7% according to the metrics of H@5, H@10, N@5, and N@10, respectively, on the MovieLens 100K dataset. This superiority indicates the effectiveness of the proposed pinnacle feedback information for recommendations.\nAdditionally, it is noteworthy that the cutting-edge prompt recommender method PPR often achieves the second-best performance. This underscores the effectiveness of the prompt paradigm in addressing few-shot learning problems. However, PROMO surpasses cutting-edge prompt recommender methods like PPR and PLATE across all metrics. While PPR adopts SASRec as its backbone model and follows a two-stage training approach, PROMO's superiority is evident due to several factors. PPR's reliance on content features for prompt information may lead to suboptimal results due to the lack of utilization of positive feedback information. Furthermore, PPR's use of a shared neural network to encode prompt information may introduce model bias, favoring popular items over cold-start ones."}, {"title": "5.4 Interpretability of PROMO", "content": "To elucidate why PROMO is effective for downstream recommender tasks to answer Q2, we begin by revaluating the architecture of PROMO. As delineated in the model overview, PROMO operates as a flexible module within a two-stage framework, with the base model held constant. We contend that PROMO is more efficacious due to the prompt embedding it generates containing aligned information pertinent to the downstream tasks. This alignment stems from the informative nature of pinnacle positive feedback, which guides the recommender system in item distribution. To illustrate this phenomenon, we visualize the item representations produced by PROMO and a baseline of DSSM model. Specifically, upon convergence on the MovieLens100K dataset, we extract the final output embeddings of items from both models and visualize all item embeddings. The left segment of Figure 4 depicts the node representations of the DSSM, while the right segment illustrates the embeddings from PROMO. It becomes apparent that items sharing the same classes are more closely mapped together in PROMO, whereas the base model fails to implicate category information. This observation suggests that recommender systems, when better aligned with the recommendation tasks, can enrich representations with collaborative relations concerning content information, such as item class information in this instance. These learned content relations can furnish pertinent information aiding in task optimization in an end-to-end fashion. Consequently, the prompt learning module enhances the model's capacity to produce discriminative item representations by assimilating more task-relevant information from the proposed prompt optimization method in PROMO, thereby augmenting the performance of downstream tasks."}, {"title": "5.5 Influence on Prompt Information", "content": "To address Q3, we conducted experiments to evaluate the effectiveness of the proposed prompt information. PROMO represents the first work to utilize pinnacle feedback as prompt information. To assess the efficacy of this approach, we replaced pinnacle feedback with commonly used prompt information from other prompt recommendation approaches. Specifically, we replaced the pinnacle feedback prompt information with item-IDs (referred to as PROMO-I), item features (referred to as PROMO-F), and both IDs and item features (referred to as PROMO-IF), while keeping other components of PROMO unchanged. We evaluated the effectiveness of prompt information on the MovieLens 100K, MovieLens 1M, and KuaiRand datasets, with results presented in Table 3.\nIt is evident that PROMO outperforms all its variants according to the HitRate and NDCG metrics. This indicates that the prompt information proposed in PROMO is more relevant in indicating user interests, thereby enhancing downstream tasks. Additionally, it's noteworthy that PROMO-I exhibits the poorest performance among the variants. This can be attributed to the fact that cold-start items scarcely provide samples for the recommender system, resulting in their ID embeddings being inadequately updated, thereby failing to provide sufficient information for model prediction. Although PROMO-IF achieves considerable performance compared to other PROMO variants, it still falls behind PROMO. For example, it lags behind by 10.6% and 11.9% according to H@10 and N@10 on MovieLens 100K, and falls short by 2.4% and 8.6% on KuaiRand according to H@10 and N@10 respectively. This underscores the significance of positive feedback information in recommendations, especially in cold-start scenarios."}, {"title": "5.6 Influence of Personalized Prompt Network", "content": "To address Q4, we assessed the effectiveness of the personalized prompt network by comparing the performance of related variants of PROMO. Specifically, PROMO was evaluated in the following configurations: (i) substituting the personalized prompt network with a global shared MLP prompt network (referred to as \"PROMO-M\"), and (ii) removing the personalized prompt network module and incorporating the positive feedback information directly as an input feature to the base model, denoted as \"PROMO-T\". The performance results are provided in Table 4.\nIt is evident that PROMO-M outperforms PROMO-T across all metrics in the three datasets. This superiority is attributed to the exclusive prompt network in PROMO-M, which emphasizes the importance of pinnacle feedback, thereby avoiding any reduction in effectiveness that may occur when combined with other features in PROMO-T. However, PROMO-M encounters the model bias problem, as the model parameters become dominated by popular items, leading to suboptimal performance in cold-start recommendations. On the contrary, PROMO overcomes this issue with the personalized prompt network, which enhances the pivotal pinnacle feedback information while simultaneously avoiding the model bias problem."}, {"title": "5.7 Effectiveness of Pinnacle Feedback Enhancement", "content": "To address Q5", "limitations": "DeepFM from CF-based methods, MetaEmb from content-based methods, and PPR from prompt learning methods. The memory retention rate comparison is depicted in Fig. 5. It was observed that as the cumulative negative feedback amount increased, the memory retention rate declined in all three baseline methods. The decline was more pronounced with higher cumulative negative feedback amounts, particularly evident in the DeepFM baseline.\nThis phenomenon can be attributed to CF-based methods' focus on recent feedback"}]}