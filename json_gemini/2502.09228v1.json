{"title": "Computational methods for\nDynamic Answer Set Programming", "authors": ["Susana Hahn"], "abstract": "In our daily lives, we commonly encounter problems that require reasoning with time. For instance,\nplanning our day, determining our route to work, or scheduling our tasks. We refer to these problems\nas 'dynamic' because they involve movement and change over time, which sometimes includes metric\ninformation to express deadlines and durations. For example, getting to the office within the next\nhour while ensuring that you have had breakfast beforehand. In industrial settings, the complexity of\nthese problems increases significantly. We see this complexity in scenarios such as train scheduling,\nproduction sequencing, and many other operations. Therefore, modeling these large-scale problems\nrequires addressing both dynamic aspects and complex combinatorial optimizations, which is a significant\nchallenge.\nSemantic formalisms for expressing dynamic knowledge have been around for many years. Dynamic\nlogics provide the means to describe ordered events, making them powerful tools for domains that need to\ncapture actions and changes. These formalisms are typically approached from a theoretical perspective,\nand the systems built around them tend to be single-purpose, lacking the flexibility to fully model complex\nproblems. This creates a need for systems that offer comprehensive modeling capabilities for dynamic\ndomains, efficient solving techniques, and tools for industrial integration. Answer Set Programming (ASP)\nis a prime candidate for solving knowledge-intensive search and optimization problems. This declarative\napproach offers a rich modeling language and effective solvers. However, ASP is primarily suited for\nstatic knowledge and lacks built-in solutions for managing dynamic knowledge.\nThe overall goal of this research project is to extend ASP into a general-purpose technology for\ndynamic domains. The first step is to develop the logical foundations for enhancing ASP's base logic with\nconcepts from dynamic, temporal, and metric logic. Significant progress in this area has already been\nmade by previous efforts of our research group, providing a solid foundation for further development.\nWe need to identify fragments of these languages that offer the necessary modeling power for our target\ndynamic problems while maintaining properties that allow for formalization and translation using various\napproaches. These approaches include using different structures, such as automata and other transition\nsystems, and compiling durations into other formalisms, such as linear constraints. Implementing these\napproaches will leverage existing technology in the ASP system clingo and its surrounding tools. This\nproject will employ advanced programming techniques in ASP to create effective systems for modeling\ncomplex dynamic problems. Additionally, we aim to add interactive capabilities to these systems to\nbenefit both modelers and end users. We anticipate that incorporating these features into ASP will enhance\nusers' ability to model dynamic problems and perform various reasoning tasks.", "sections": [{"title": "Introduction", "content": "In our daily lives, we commonly encounter problems that require reasoning with time. For instance,\nplanning our day, determining our route to work, or scheduling our tasks. We refer to these problems\nas 'dynamic' because they involve movement and change over time, which sometimes includes metric\ninformation to express deadlines and durations. For example, getting to the office within the next\nhour while ensuring that you have had breakfast beforehand. In industrial settings, the complexity of\nthese problems increases significantly. We see this complexity in scenarios such as train scheduling,\nproduction sequencing, and many other operations. Therefore, modeling these large-scale problems\nrequires addressing both dynamic aspects and complex combinatorial optimizations, which is a significant\nchallenge.\nSemantic formalisms for expressing dynamic knowledge have been around for many years. Dynamic\nlogics provide the means to describe ordered events, making them powerful tools for domains that need to\ncapture actions and changes. These formalisms are typically approached from a theoretical perspective,\nand the systems built around them tend to be single-purpose, lacking the flexibility to fully model complex\nproblems. This creates a need for systems that offer comprehensive modeling capabilities for dynamic\ndomains, efficient solving techniques, and tools for industrial integration. Answer Set Programming (ASP)\nis a prime candidate for solving knowledge-intensive search and optimization problems. This declarative\napproach offers a rich modeling language and effective solvers. However, ASP is primarily suited for\nstatic knowledge and lacks built-in solutions for managing dynamic knowledge.\nThe overall goal of this research project is to extend ASP into a general-purpose technology for\ndynamic domains. The first step is to develop the logical foundations for enhancing ASP's base logic with\nconcepts from dynamic, temporal, and metric logic. Significant progress in this area has already been\nmade by previous efforts of our research group, providing a solid foundation for further development.\nWe need to identify fragments of these languages that offer the necessary modeling power for our target\ndynamic problems while maintaining properties that allow for formalization and translation using various\napproaches. These approaches include using different structures, such as automata and other transition\nsystems, and compiling durations into other formalisms, such as linear constraints. Implementing these\napproaches will leverage existing technology in the ASP system clingo and its surrounding tools. This\nproject will employ advanced programming techniques in ASP to create effective systems for modeling\ncomplex dynamic problems. Additionally, we aim to add interactive capabilities to these systems to\nbenefit both modelers and end users. We anticipate that incorporating these features into ASP will enhance\nusers' ability to model dynamic problems and perform various reasoning tasks."}, {"title": "Background", "content": "One of the most commonly used temporal logics [21] is Linear-time Temporal Logic (LTL) [35]. LTL\nprovides modal operators to express temporal properties such as 0 (next), (always), and \u25ca (eventually).\nLTL can also be defined in terms of Dynamic Logic (DL) [27], which allows for writing regular expressions\nover (infinite) traces and mixing declarative with procedural specifications. These types of specifications\nare also targeted by action languages such as GOLOG [40], which is based on situation calculus. Another\ninteresting approach is Metric Temporal Logic (MTL) [38], which allows measuring time differences\nbetween events. This measurement is done by assigning a time value to states. Metric Logic can be used\nin different applications such as scheduling [41], routing [37], and more [31]. Originally, these temporal\nformalisms were investigated for infinite traces. However, in the past decade, the case of finite traces \u00b7f\nhas gained interest, as it aligns with a large range of AI applications and constitutes a computationally\nmore feasible variant. The introduction of LTLf and Linear Dynamic Logic over finite traces (LDLf) [19]\nserved as a stepping stone to define the syntax and classical semantics under this restriction.\nThere are several tasks addressed by these formalisms and other action theories. The most commonly\nknown are satisfiability checking, model checking, and synthesis [47, 48, 20, 49]. Furthermore, other\nmore elaborate tasks closer to real-world scenarios include reactive control [8], diagnostics [33], planning\n[4, 25, 5], and verification.\nMany of these tasks are solved by translating complex constructs into simpler ones, for instance, by\nreducing MTL into LTL [31]. Another very common strategy for addressing these problems is mapping\nthem into automata. This automata-theoretic approach involves constructing an automaton that accepts\nexactly the models of a dynamic formula. This relationship has been extensively researched in areas\nsuch as satisfiability checking, model checking, planning [4, 25, 5], and synthesis [47, 48, 20, 49]. Non-\ndeterministic finite automata (NFA) [30] and Deterministic Finite Automata (DFA) have been used for\nfinite traces, though they are of exponential size relative to the input formula. To tackle this issue, [19]\nproposed a translation from LTLf and LDLf to a more elaborate but succinct automaton: Alternating\nAutomaton on Finite Words (AFA) [18, 48, 19]. These automata, an adaptation of Alternating B\u00fcchi\nAutomata to finite traces, extend NFAs with universal transitions. This translation, however, led to circular\ndefinitions for some dynamic formulas and did not include past operators. These issues were addressed\nin [45], where the authors introduced Automata Linear Dynamic Logic over finite traces (ALDLf) and\npresented a translation into even more sophisticated automata: Two-Way Alternating Finite Automata\n(2AFA) [39, 36]. In addition to alternation, this type of automaton allows multiple head movements:\nstationary, left, and right. More evolved translations from metric logic into automata have also been\ndeveloped, such as translating MTL into Timed Automata [42].\nAnswer Set Programming\nAnswer Set Programming (ASP) [10] is a well-established approach to declarative problem-solving where\nproblems are encoded as logic programs. The combination of its rich modeling language and highly\neffective solving engines makes ASP a very attractive choice. ASP semantics can be formalized using\nequilibrium models [44] of the logic of here-and-there (HT) [29]. This logic has also been extended to\nhere-and-there with constraints (HTc) [17], which introduces difference constraints, a simplified form of\nlinear constraints, into HT.\nThe ASP system clingo [24] is known for its high-performing engines. The system provides various"}, {"title": "Contributions and future work", "content": "To this moment, I have pursued different translations of dynamic and temporal logic with finite traces into\nautomata, and implemented them using ASP. In the current status of the project, I have not yet explored\nthe non-monotonic side of temporal reasoning with automata. Even though the semantics I have used so\nfar for the temporal formalisms have been monotonic, I was able to incorporate them in ASP by restricting\nthe dynamic formulas to integrity constraints where their behavior is classical. With this in mind, at the\nmoment, one can only use these formulas to filter plans via a translation into automata, which is one of\nour primary goals.\nThe first approach, found in [11], proposes an adaptation of the translation of LDLf to AFA from\n[19], which is incorporated into ASP using meta programming in clingo. This implementation is solely\nbased on ASP, relying on the theory extension to define the language for LDLf formulas, and the reified\noutput of clingo. This reification corresponds to a linearized representation of the dynamic formula as\nfacts based on the grammar defined for the theory. Then, using an ASP encoding, these facts are translated\ninto a declarative representation of the corresponding alternating automaton. In the full version of this\nwork [12], we explore other existing tools for computing an automaton from a dynamic formula. In order"}, {"title": "Future work", "content": "The quest to conceptualize metric logic programming is far from over. In view of the results from the\nlast project, we have started to craft a translation that handles more metric operators. The translation is\nplanned to follow a Tseitin-style translation like the one in [2]. We want to further investigate HTc for\nencoding time, and examine the integration of non-monotonic reasoning and optimization in the timed\naspect of MLP. Additionally, we plan to investigate how far ASP can address reactive-dynamic tasks\nwhere the user and environment play a role by interacting with the system."}]}