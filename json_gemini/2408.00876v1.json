{"title": "On the Relationship Between Monotone and Squared Probabilistic Circuits", "authors": ["Benjie Wang", "Guy Van den Broeck"], "abstract": "Probabilistic circuits are a unifying representation of functions as computation graphs of weighted sums and products. Their primary application is in probabilistic modeling, where circuits with non-negative weights (monotone circuits) can be used to represent and learn density/mass functions, with tractable marginal inference. Recently, it was proposed to instead represent densities as the square of the circuit function (squared circuits); this allows the use of negative weights while retaining tractability, and can be exponentially more compact than monotone circuits. Unfortunately, we show the reverse also holds, meaning that monotone circuits and squared circuits are incomparable in general. This raises the question of whether we can reconcile, and indeed improve upon the two modeling approaches. We answer in the positive by proposing InceptionPCs, a novel type of circuit that naturally encompasses both monotone circuits and squared circuits as special cases, and employs complex parameters. Empirically, we validate that InceptionPCs can outperform both monotone and squared circuits on image datasets.", "sections": [{"title": "1 INTRODUCTION", "content": "Probabilistic circuits (PC) [Choi et al., 2020] are a unifying class of tractable probabilistic models. By imposing simple structural properties on the circuit, one can answer many inference queries such as marginalization and maximization, efficiently and exactly. The typical way to learn PCs is to enforce non-negativity throughout the circuit, by restricting to non-negative parameters; these are known as monotone PCs [Darwiche, 2003, Poon and Domingos, 2011]. However, recent works have also shown that there exist many tractable models that provably cannot be expressed in this way [Zhang et al., 2020, Yu et al., 2023, Broadrick et al., 2024].\nThis motivates the development of new approaches for practically constructing generalized PCs. To this end, Loconte et al. [2024] recently proposed employing PCs with real (possibly negative) parameters; the probability distribution is then (proportional to) the square of the circuit function. It was shown that this can be exponentially more expressive efficient than similar monotone PCs.\nIn this work, we reexamine monotone and squared (structured-decomposable) PCs, and show that they are incomparable in general: either can be exponentially more expressive efficient than the other. Motivated by this observation, we show that by explicitly instantiating latent variables inside or outside the square, one can express both types of PCs. This gives rise to a novel means of constructing tractable models representing non-negative functions, which we call InceptionPCs, that generalizes and extends monotone and squared PCs. Finally, we empirically test InceptionPCs on image datasets including MNIST and FashionMNIST, demonstrating improved performance."}, {"title": "2 PRELIMINARIES", "content": "Notation We use capital letters to denote variables and lowercase to denote their assignments/values (e.g. X, x). We use boldface (e.g. X,x) to denote sets of variables/assignments.\nDefinition 1 (Probabilistic Circuit). A probabilistic circuit C over a set of variables V is a rooted DAG consisting of three types of nodes n: input, product and sum nodes. Each input node n is a leaf encoding a function $f_n: W \\rightarrow \\mathbb{R}$ for some $W\\subseteq V$, and for each internal (product or sum) node n, denoting the set of inputs (i.e. nodes n' for which $n \\rightarrow n'$) by $in(n)$, we define:\n$f_n =\\begin{cases} \\prod_{n_i\\in in(n)} f_{n_i} & \\text{if n is product;} \\\\ \\sum_{n_i\\in in(n)} \\Theta_{n,n_i}f_{n_i} & \\text{if n is sum.} \\end{cases}$                                (1)\nwhere each sum node has a set of weights $\\{\\Theta_{n,n_i}\\}_{n_i\\in in(n)}$ with $\\Theta_{n,n_i} \\in \\mathbb{R}$. Each node n thus encodes a function over a set of variables $sc(n)$, which we call its scope; this is given by $sc(n) = \\bigcup_{n_i\\in in(n)} Sc(n_i)$ for internal nodes. The function encoded by the circuit $f_C$ is the function encoded by its root node. The size of a probabilistic circuit |C| is defined to be the number of edges in its DAG.\nIn this paper, we will assume that sum and product nodes alternate. A key feature of the sum-product structure of probabilistic circuits is that they allow for efficient (linear-time) computation of marginals, for example the partition function $Z = \\sum_{\\textbf{v}} f(\\textbf{v})$, if they are smooth and decomposable:\nDefinition 2 (Smoothness, Decomposability). A probabilistic circuit is smooth if for every sum node n, its inputs $n_i$ have the same scope. A probabilistic circuit is decomposable if for every product node n, its inputs have disjoint scope.\nWe will also need a stronger version of decomposability that enables circuits to be multiplied together efficiently [Pipatsrisawat and Darwiche, 2008, Vergari et al., 2021]:\nDefinition 3 (Structured Decomposability). A smooth and decomposable probabilistic circuit is structured-decomposable if any two product nodes n, n' with the same scope decompose in the same way."}, {"title": "3 EXPRESSIVE EFFICIENCY OF MONOTONE AND SQUARED STRUCTURED-DECOMPOSABLE CIRCUITS", "content": "One of the primary applications of probabilistic circuits is as a tractable representation of probability distributions. As such, we typically require the function output of the circuit to be a non-negative real. The usual way to achieve this is to enforce non-negativity of the weights and input functions:\nDefinition 4 (Monotone PC). A probabilistic circuit is monotone if all weights are non-negative reals, and all input functions map to the non-negative reals.\nGiven a monotone PC C, one can define a probability distribution $p_1(V) = \\frac{f_C(V)}{Z_C}$ where $Z_C$ is the partition function of the PC. However, this is not the only way to construct a non-negative function. In Loconte et al. [2024], it was proposed to instead use $f_C$ to represent a real (i.e. possibly negative) function, by allowing for real weights/input functions; this can then be squared to obtain a non-negative function. That is, we define $p_2(V) := \\frac{f_C(V)^2}{\\sum_{\\textbf{v}} f_C(\\textbf{v})^2}$.\nIn order for $\\sum_{\\textbf{v}} f_C(\\textbf{v})^2$ to be tractable to compute, a sufficient condition is for the circuit C to be structured-decomposable; one can then explicitly construct a"}, {"title": "4 TOWARDS A UNIFIED MODEL FOR DEEP SUMS-OF-SQUARES-OF-SUMS", "content": "We begin by noting that, beyond simply negative parameters, one can also allow for weights and input functions that are complex, i.e. take values in the field C. Then, to ensure the non-negativity of the squared circuit, we multiply a circuit with its complex conjugate. That is:\n$P2(V) = \\frac{|f_C(V)|^2}{\\sum_{\\textbf{v}}|f_C(\\textbf{v})|^2} =  \\frac{f_C(V)\\overline{f_C(V)}}{\\sum_{\\textbf{v}} f_C(\\textbf{v})\\overline{f_C(\\textbf{v})}}$\nAs complex conjugation is a field isomorphism of C, taking a complex conjugate of a circuit is as straightforward as taking the complex conjugate of each weight and input function, retaining the same DAG as the original circuit."}, {"title": "4.1 DEEP SUMS-OF-SQUARES-OF-SUMS: A LATENT VARIABLE INTERPRETATION", "content": "In the latent variable interpretation of probabilistic circuits [Peharz et al., 2016], for every sum node, one assigns a categorical latent variable, where each state of the latent variable is associated with one of the inputs to the sum node; we show an example in Figure 1a. In this interpretation, when performing inference in the probabilistic circuit, we explicitly marginalize over all of the latent variables beforehand.\nHowever, interpreting these latent variables when we consider probability distributions defined by squaring circuits. The key question is, does one marginalize out the latent variables before or after squaring? We show both options in Figures 1b and 1c. In Figure 1b, we square before marginalizing Z. In this case, and we are left with a sum node with non-negative real parameters. On the other hand, if we marginalize before squaring, we have a sum node with four children and complex parameters. Interestingly, the former case is very similar to directly constructing a monotone PC, while the latter is more like an explicit squaring without latent variables. This suggests that we can switch between monotone and squared PCs simply by deciding whether to sum the latent variables inside or outside the square.\nUsing this perspective, we propose the following model, which makes explicit use of both types of latent variable. For simplicity, we assume that each sum node has the same number of children $K_U \\times K_W$. For each scope $sc(n)$ of sum node in the circuit, we assign two latent variables $U_{sc(n)}, W_{sc(n)}$, which are categoricals with cardinality $K_U, K_W$ respectively. Writing U, W for the sets of all such latents, we can then construct an augmented PC where each child of a sum node corresponds to a value of both latents $U_{sc(n)}, W_{sc(n)}$.\nDefinition 5 (Augmented PC). Given a smooth and decomposable probabilistic circuit C over variables V where each sum node has $K_U \\times K_W$ children, we define the augmented PC $C_{aug}$ over variables $V \\cup U \\cup W$ as follows. In reverse topological order (i.e. from leaves to root), for each sum node n with inputs $n_1, ..., n_{K_U \\times K_W}$, we replace the inputs with new product nodes $n'_1, ..., n'_{K_U \\times K_W}$, where for each $1 \\leq i \\leq K_U, 1 \\leq j \\leq K_W$:\n$n'_{iK_W+j} = n_{iK_W+j} \\times [U_{sc(n)} = i] \\times [W_{sc(n)} = j]$\nwhere $[U_{sc(n)} = i], [W_{sc(n)} = j]$ are input nodes with input functions that output 1 if the condition inside the bracket is satisfied and 0 otherwise."}, {"title": "4.2 TENSORIZED IMPLEMENTATION", "content": "To implement InceptionPCs at scale and with GPU acceleration, we follow recent trends in probabilistic circuit learning [Peharz et al., 2020, Mari et al., 2023] and consider tensorized architectures, where sum and product nodes are"}, {"title": "5 EXPERIMENTS", "content": "We run preliminary experiments with InceptionPCs on variants of the MNIST image dataset [LeCun and Cortes, 2010, Cohen et al., 2017, Xiao et al., 2017]. Our primary research question is to examine the relative expressivity and"}, {"title": "6 DISCUSSION", "content": "To conclude, we have shown that two important classes of tractable probabilistic models, namely monotone and squared real structured-decomposable PCs are incomparable in terms of expressive efficiency in general. Thus, we propose a new class of probabilistic circuits based on deep sums-of-squares-of-sums that generalizes these approaches. As noted by [Loconte et al., 2024], these PCs can be viewed as a generalization of tensor networks for specifying quantum states [Glasser et al., 2019, Novikov et al., 2021]; indeed InceptionPCs can be interpreted as a mixed state, i.e. a statistical ensemble of pure quantum states. Our InceptionPCs are also related to the PSD circuits of [Sladek et al., 2023], which can be interpreted as a sum of squared circuits, with the difference being that we allow for latents to be summed out both inside and outside the square throughout the circuit while achieving quadratic complexity. Promising avenues to investigate in future work would be improving the optimization of InceptionPCs, for example, by deriving an EM-style algorithm using the latent variable interpretation outlined here; as well as reducing the computational cost of training by designing more efficient architectures."}]}