{"title": "Visual Reasoning and Multi-Agent Approach in Multimodal Large Language Models (MLLMs): Solving TSP and mTSP Combinatorial Challenges", "authors": ["Mohammed Elhenawy", "Ahmad Abutahoun", "Taqwa I.Alhadidi", "Ahmed Jaber", "Huthaifa I. Ashqar", "Shadi Jaradat", "Ahmed Abdelhay", "Sebastien Glaser", "Andry Rakotonirainy"], "abstract": "Multimodal Large Language Models (MLLMs) harness comprehensive knowledge spanning text, images, and audio to adeptly tackle complex problems, including zero-shot in-context learning scenarios. This study explores the ability of MLLMs in visually solving the Traveling Salesman Problem (TSP) and Multiple Traveling Salesman Problem (mTSP) using images that portray point distributions on a two-dimensional plane. We introduce a novel approach employing multiple specialized agents within the MLLM framework, each dedicated to optimizing solutions for these combinatorial challenges. Our experimental investigation includes rigorous evaluations across zero-shot settings and introduces innovative multi-agent zero-shot in-context scenarios. The results demonstrated that both multi-agent models-Multi-Agent 1, which includes the Initializer, Critic, and Scorer agents, and Multi-Agent 2, which comprises only the Initializer and Critic agents-significantly improved solution quality for TSP and mTSP problems. Multi-Agent 1 excelled in environments requiring detailed route refinement and evaluation, providing a robust framework for sophisticated optimizations. In contrast, Multi-Agent 2, focusing on iterative refinements by the Initializer and Critic, proved effective for rapid decision-making scenarios. These experiments yield promising outcomes, showcasing the robust visual reasoning capabilities of MLLMs in addressing diverse combinatorial problems. The findings underscore the potential of MLLMs as powerful tools in computational optimization, offering insights that could inspire further advancements in this promising field.", "sections": [{"title": "1. Introduction", "content": "The Traveling Salesman Problem (TSP) and its multi-salesmen variant (mTSP) are classic challenges in combinatorial optimization, recognized for their NP-hard complexity and practical relevance in logistics, planning, and network design [1,2]. TSP involves finding the shortest route for a single salesman to visit a set of cities and return to the start, while mTSP extends this to several salesmen, each covering different subsets of cities. These problems are computationally tough, especially as the number of cities grows, despite many advanced algorithms developed over the years.\nTraditional solutions to TSP and mTSP typically rely on distance matrices and explicit calculations of routes based on node coordinates [3,4]. However, human problem-solving often employs visual and heuristic approaches to generate reasonable solutions without detailed calculations quickly. Inspired by these intuitive human strategies, our research explores a novel visual reasoning approach to solve TSP and mTSP. This approach leverages the power of visual inspection and team-based iterative refinement, bypassing the need for textual data or distance matrices, which are standard in computational methods [3,4]."}, {"title": "2. Related Work", "content": "Recent literature in multi-agent systems (MAS) has increasingly integrated deep reinforcement learning (DRL), as evidenced by Gronauer and Diepold [31]. This review outlines how DRL methods are structured to train multiple agents, emphasizing their applications in cooperative, competitive, and mixed scenarios. It also identified and addressed specific challenges unique to MAS, proposing strategies to overcome these obstacles and suggesting future research directions. Complementing this perspective, Dorri et al. [32] provided a comprehensive overview of MAS, discussing its definitions, features, applications, and challenges. Similarly, in Pop et al. [33], researchers evaluated various visual reasoning methodologies against traditional computational techniques. The study comprehensively surveyed mathematical formulations, solution approaches, and the latest advances regarding the generalized traveling salesman problem. Moreover, Yang et al. conducted alike survey on the cooperative control of multi-agent systems.\nCurrently, researchers are exploring the use of Large Language Models (LLMs) to address combinatorial problems like the traveling salesman problem. Liu et al.[34] introduced the concept of LLM-driven evolutionary algorithms (LMEA), marking the first attempt to apply LLMs in solving such problems. Meanwhile, Yang et al. [35] proposed Optimization by PROmpting (OPRO), where the LLM generates solutions from prompts containing previously generated solutions and their evaluations. This iterative process enhances solution quality with each step. Additionally, ensemble learning methods combined with LLMs, as discussed in works by Silviu et al. [36] have shown promising results in optimizing solutions.\nIn addressing the mTSP, Zheng et al. [37] focused on optimizing two objectives: minimizing the total length of all tours (minsum objective) and minimizing the length of the longest tour (minmax objective) among all salesmen. Furthermore, combining LLMs with other optimization techniques demonstrates potential for improving TSP solutions. Each method, whether utilizing zero-shot, few-shot, or Chain-of-thoughts (CoT) prompting techniques, aimed to enhance the accuracy of LLM responses, as evidenced in recent studies [38,39].\nAdditionally, a study of B\u00e9rczi et al. [40] considered a further generalization of mTSP, the many-visits mTSP, where each city has a request of how many times it should be visited by the salesmen. The authors provided polynomial-time algorithms for several variants of the many-visits mTSP that compute constant-factor approximate solutions. Huang et al. [41] explored LLMs' application in vehicle routing problems, demonstrating that direct input of natural language prompts enhances performance. They proposed a self-refinement framework to iteratively improve LLM-generated solutions, stressing the role of detailed task descriptions in boosting performance. Despite excelling in text-based tasks, LLMs face challenges with other data types [15]. However, MLLMs aim to overcome these limitations by integrating diverse data modalities (text, image, video, audio, etc.), broadening LLMs' potential applications beyond traditional text domains.\nThis study introduces two novel strategies for solving the TSP and mTSP that leverage the visual reasoning capabilities of MLLM. Unlike traditional approaches that rely on numerical data such as node coordinates or distance matrices, this study uses purely visual cues to infer efficient routes. This method mimics human visual problem-solving abilities and provides a more intuitive and flexible solution to spatial problems. While some recent research has explored the use of Large Language Models (LLMs) in combinatorial problems and optimization, such as LLM-driven evolutionary algorithms and Optimization by PROmpting (OPRO), these studies have primarily focused on text-based tasks. This study extends the application of LLMs to visual data, demonstrating the potential of MLLMs to address complex problem-solving scenarios without extensive computational resources.\nFurthermore, this study fills the gaps identified in the existing literature by proposing a multi-agent system involving distinct roles for MLLM agents-Initializer, Critic, and Scorer. This collaborative, iterative approach enhances the quality of solutions through diverse perspectives and expertise, which is not extensively covered in prior research. While some studies have discussed the integration of DRL in multi-agent systems and the cooperative control of such systems, this study uniquely applies visual reasoning in a multi-agent context to optimize routes for TSP and mTSP. By focusing on visual reasoning and iterative refinement in MLLMs, the study minimizes route intersections, optimizes route lengths, and ensures comprehensive node coverage, thus offering a novel methodology that advances the current state of research in visual computational techniques and complex problem-solving."}, {"title": "3. Materials and Methods", "content": "Our methodology draws on two concepts inspired by human problem-solving approaches. The first is based on the human ability to suggest efficient routes through nodes without explicit calculations visually. The second concept leverages the advantages of teamwork, where individuals collaboratively refine solutions. In this approach, a team member proposes one or more solutions, which are collectively analyzed. Ineffective solutions are discarded while promising ones are iteratively improved through subsequent proposal, evaluation, and refinement cycles. This iterative team-based strategy enhances the development of practical solutions by leveraging diverse perspectives and expertise.\nIn this paper, we adopt these ideas to develop two strategies to solve the TSP and mTSP using visual reasoning alone, without relying on textual information about node locations or distance matrices with the use of MLLMs. The use of MLLMs in solving the TSP and mTSP is important because it harnesses the power of advanced AI to integrate visual reasoning and collaborative problem-solving. MLLM can process and interpret visual information, enabling the identification of efficient routes through nodes based solely on visual cues, without requiring textual data or distance matrices. This capability mirrors human visual problem-solving and enhances flexibility in dealing with complex spatial problems. Additionally, MLLM can facilitate iterative teamwork by analyzing and refining proposed solutions collaboratively, leveraging diverse inputs and perspectives to optimize outcomes. This approach not only improves the practical application of visual computational techniques but also demonstrates the potential for MLLM to revolutionize complex problem-solving by mimicking human cognitive processes. The following subsection will detail the proposed strategies, explaining how each leverages purely visual cues to infer efficient routes across multiple nodes, thus enhancing our understanding of visual computational capabilities in complex problem-solving."}, {"title": "3.1 Multi-Agent 1", "content": "The proposed methodology in Fig. 1 adopts a multi-agent strategy to solve the m-salesmen problem where $m \\in \\{1,2,3\\}$. The process involves three agents: the Initializer, the Critic, and the Scorer. Initializer Agent visually inspects the nodes' layout without textual information about their coordinates. Using visual reasoning, it suggests an initial order for visiting the nodes, aiming to propose a good solution. The suggested solution by the Initializer is visualized and presented to the Critic Agent along with a prompt instructing it to inspect the visualization and suggest better routes. The Critic Agent employs a self-ensemble method by raising its temperature to 0.7, generating seven solutions. These solutions are visualized and passed on to the Scorer Agent. This agent assigns a score to each solution based solely on its visual quality without calculating the actual distances. The solution with the highest score is then selected and returned to the Critic.\nThe steps involving the Critic and the Scorer continue iteratively until the maximum number of iterations is reached. Finally, the best solution is returned as the proposed solution to the m-salesmen problem. This strategy leverages a visually driven multi-agent strategy where the Initializer proposes, the Critic refines, and the Scorer evaluates solutions based on visual reasoning using MLLM to iteratively enhance the solution quality for the m-salesmen problem. In this strategy, we used ChatGPT-4o as the Initializer, the Critic, and the Scorer."}, {"title": "3.2 Multi-Agent 2", "content": "The simplified Multi-Agent 2 strategy, designed for solving the m-salesmen problem with fewer agents, uses only the Initializer and Critic agents, eliminating the Scorer agent. In this lighter approach, the Initializer Agent continues by visually inspecting the nodes and proposing an initial sequence for visiting them, leveraging visual cues instead of relying on coordinate data. This proposed route is then passed to the Critic Agent, which, unlike its role in Multi-Agent 1, operates under a higher temperature setting of 0.7 to generate a single alternative route per iteration. Each new solution is visually presented back to the Critic for further refinement. The iterative process between the Initializer and Critic continues until the maximum number of iterations is reached, at which point the process halts. This streamlined version focuses on rapid iteration and refinement without the evaluative step of scoring, aiming to efficiently enhance route optimization through continuous visual feedback and critical adjustments. In this strategy, we used ChatGPT-4o as the Initializer and the Critic."}, {"title": "3.3 Prompts Engineering", "content": "In this subsection, we detail the specific prompts used in ChatGPT-4o to direct the actions of the different agents involved in our multi-agent system for solving the m-salesmen problem using visual reasoning. Each agent is tasked with unique functions that contribute to identifying good routes based on visual inputs alone without relying on numerical data like distances or coordinates."}, {"title": "3.4 Initializer Agent Prompt", "content": "The prompt provided for the Initializer agent is designed to guide the agent in constructing routes for multiple salesmen (the exact number specified by {num_salesmen}) from a visual representation of nodes on an image. The prompt directs the agent as follows:\nStarting Point: The prompt specifies that the routes must start and end at a depot, marked as a black square in the image. This sets a clear starting and returning point for each salesman's route.\nNode Visitation: It's stipulated that all nodes must be visited exactly once by only one salesman, ensuring that the task covers all designated points without overlap between salesmen.\nRoute Efficiency: The prompt demands minimizing intersections within and between routes. This aims to reduce potential route conflicts and ensures that the paths taken are as efficient as possible.\nCluster Coverage: Each route should cover a cluster of points, implying that the agent should look for logical groupings of close nodes to form each route, enhancing practicality and efficiency.\nRoute Length: The emphasis is also on keeping routes short, prioritizing direct paths and proximity among nodes within a route.\nOutput Format: The expected output format is very structured, asking for the route of each salesman to be listed sequentially from the depot, through each node, and back to the depot. The format is specified to begin with <<start>> and end with <<end>>, and only the routes are to be listed without any additional text or explanation."}, {"title": "3.5 Critic Agent Prompt", "content": "The prompt for the Critic agent builds on the Initializer's task by refining the suggested routes. It is structured to guide the Critic in analyzing the existing routes provided by the Initializer and then improving them based on specific criteria. Here's how the prompt directs the agent:\nInitial Instructions: Like the Initializer agent, the Critic starts with the same basic guidelines regarding the depot, unique node visits by each salesman, minimizing route intersections, and covering clustered points.\nOptimization Focus: The key addition for the Critic is the instruction to \"improve upon the current routes shown in the image by further reducing intersections and optimizing the travel distance.\" This pushes the agent to look for enhancements over the already suggested routes, focusing on increased efficiency and reduced travel distances.\nOutput Format: The format for output remains structured and specific. The Critic must list each salesman's route starting and ending at the depot in a precise sequence without additional commentary. The sequence is strictly formatted from the depot to the last node and back, maintaining clarity and consistency."}, {"title": "3.6 Score Agent Prompt", "content": "The prompt for the Score agent is designed to evaluate and rank multiple solutions for the Traveling Salesman Problem (TSP) based on visual clarity and efficiency. Here's how the prompt directs the agent:\nEvaluation Criteria:\nComplete Node Coverage: This ensures all nodes are visited precisely once, emphasizing routes that don't skip any nodes.\nMinimized Crossing Lines: Routes with fewer intersections are preferred as they generally suggest a shorter overall path.\nRoute Clarity: The paths should be straightforward to trace visually, with minimal overlapping, which enhances the readability and practicality of the route.\nStarting and Ending Point: It's essential that the route begins and ends at the same point, labeled as node 0, ensuring a closed loop that is typical for TSP solutions.\nScoring and Ranking: Each route is assigned a score based on how well it meets the above criteria. The scores are directly related to the route's efficiency and clarity. The prompt specifies that each image representing a different route solution should be scored and then listed with its corresponding score, maintaining a clear format for easy comparison.\nOutput: The scores are to be formatted concisely: <<image1: score, image2: score, ..., image7: score>>. Additionally, the highest-scoring route is to be highlighted as the best solution with its specific ID in the format: <<the best route: ID>>.\nFormat and Procedure: The agent is instructed to strictly adhere to the output format without adding any supplementary explanations or textual content. This structured approach ensures that the outputs are standardized and focused solely on the numerical scoring and ranking."}, {"title": "3.7 Test Data", "content": "The test data described in this paper is generated through a process where each node's coordinates (x and y) are independently sampled from a uniform distribution ranging from zero to five. This method ensures that all data points are evenly and randomly distributed within a 5x5 square area. The uniform distribution is used to simulate an equal probability of any point within the chosen specified range, which helps create a diverse set of scenarios for evaluating the model's performance on spatial problems like the TSP. This approach is typical in computational experiments where the goal is to assess algorithmic efficiency under varied yet controlled conditions to ensure that the performance metrics are not biased by any specific configuration of the nodes [4]."}, {"title": "3.8 Ground Truth Solutions", "content": "In this study, we employed the Google OR-Tools framework to address the mTSP [42,43], a variant of the TSP, where more than one salesman is involved. The mTSP is known for its NP-hard complexity, making exact solutions impractical for large datasets. To manage the routing challenges efficiently, we utilized the pywrapcp package . Routing Model from the OR-Tools suite, a powerful tool designed to streamline the process of defining, solving, and analyzing routing problems. The Routing Model is configured with a Euclidean distance matrix representing the distances between nodes. This matrix is crucial for the algorithm as it serves as the foundation upon which the routing decisions are based. To generate initial feasible solutions rapidly, we employed the SAVINGS heuristic, a commonly used approach for vehicle routing problems that provides a good starting solution for further improvement. This heuristic is integrated into the OR-Tools through the routing_enums_pb2.FirstSolutionStrategy.SAVINGS.\nFurther refinement of the initial solution is achieved using the GUIDED_LOCAL_SEARCH metaheuristic, which is part of the OR-Tools' local search algorithms. This metaheuristic helps navigate the solution space effectively, improving the quality of solutions by escaping local optima\u2014a frequent challenge in route optimization problems. The local search parameters are tuned to balance between computation time and solution quality, making the approach feasible for larger datasets.\nAlthough the solutions derived from this methodology are not guaranteed to be globally optimal due to the heuristic nature of the algorithms, they are generally close to optimal and computationally efficient [42,43]. This approach allows us to handle more significant problem instances that are typically infeasible with exact methods, providing practical solutions within a reasonable timeframe. Thus, the use of Google OR-Tools, particularly the pywrapcp and RoutingModel, represents a robust method for tackling complex routing problems like the mTSP in applied research settings [42,43]."}, {"title": "4. Results", "content": ""}, {"title": "4.1 Multi-Agent 1 Solution Quality", "content": "The presented analysis in Fig. 3 across three distinct scenarios-solving the traveling salesman problem with one, two, and three salesmen-demonstrates a comparative evaluation of solution quality measured by the mean and standard deviation of gap percentages as problem size increases. For configurations involving two and three salesmen, the observed negative mean gap values at smaller problem sizes indicate superior performance of the proposed strategies over the solutions generated by the Google OR tool within a fixed computation time of 120 seconds. This suggests that as the complexity introduced by additional salesmen increases, the proposed strategies are better equipped to handle such complexities, outperforming the baseline set by Google's optimization tools, particularly at smaller problem scales.\nFurther, the standard deviation of the gaps consistently illustrates lower variability for the Multi-Agent Strategy 1 compared to the zero-shot method across all problem sizes, indicating a more consistent output from the proposed strategies. This trend is consistent even as the problem size increases, underlining the challenges posed by larger problems and showcasing the proposed solutions' robustness."}, {"title": "4.2 Multi-Agent 1 Example 1", "content": "In this example, the multi-agent system comprises an initializer and a critic agent and shows an illustrate of an incomplete route hallucination. The process starts with the initializer generating an initial solution which is visualized in the first row of the images. Notably, this initial solution misses one crucial node. The incomplete solution is then presented to the critic agent, which evaluates it and suggests seven possible solutions to improve the initial output. These solutions are visually represented in Fig. 4. Subsequently, these images are passed to a score agent, which assigns a score to each solution based on its effectiveness and completeness.\nThe scoring details reveal that solutions number 1 and 3 are identical, and both received the same score, which indicates consistency in the scoring process by the score agent. Furthermore, solutions number 4 and 7 achieved the highest score of 4, suggesting they are the most promising solutions offered by the critic. Following this scoring process, the solution with the highest score, in this case, solution number 4, is selected to be passed back to the critic agent for the next iteration. This iterative process aims at refining the solution until it covers all required nodes, which, as noted, happens after the first iteration-indicating that the initial solution's shortcomings are effectively addressed by the multi-agent system. This example illustrates the iterative interaction between the initializer, critic agent, and score agent in improving a solution within a multi-agent system, ultimately leading to a good solution."}, {"title": "4.3 Multi-Agent 1 Example 2", "content": "Figure 6 shows the third iteration of solving a problem with a network comprising 30 nodes, the progression begins with the leading solution from the previous iteration, showcased at the top of the visual table. This serves as the benchmark for the subsequent evaluations conducted by the critic agent.\nThe additional solutions proposed are visually represented and scored based on their coverage and accuracy in addressing the node network. These solutions are listed as follows: Suggested Solution #1 with a score of 3, Suggested Solution #2 with a score of 4, Suggested Solution #3 also scoring 3, Suggested Solution #4 with the lowest score of 1, Suggested Solution #5 scoring 2, Suggested Solution #6 with the highest score of 5, and Suggested Solution #7 scoring 3. The scoring outcomes indicate a clear correlation between the completeness of node coverage and the assigned scores, with missing nodes notably reducing the effectiveness of the solutions. The highest score, a 5, reflects a solution that significantly improves on node coverage, suggesting near-optimal completeness. This methodical, iterative approach, facilitated by the interactions between the critic and scoring agents, underscores the efficacy of the multi-agent system in refining solutions to ensure comprehensive node coverage."}, {"title": "3.3 Multi-Agent 2 Solutions Quality", "content": "The analysis of Multi-Agent 2 strategy performance in addressing the m-Salesmen problem demonstrates a significant enhancement in solution quality, particularly when contrasting against the Zero-Shot strategy. As outlined in Fig. 6, the mean gap of gaps across different salesman configurations show that Multi-Agent 2 consistently reduces the solution gaps, even as problem sizes increase. Additionally, the standard deviation of the gap is equal to or improved in Multi-agent 2 compared to the zero-shot strategy. This is indicative of its robustness in managing complex scenarios more effectively than the baseline Zero-Shot approach."}, {"title": "4.5 Multi-Agent 2 Example 2", "content": "Fig. 9 illustrates the intricate and evolving process of route optimization through the Multi-Agent 2 strategy. This example highlights the critic agent's exceptional ability to correct initial errors and make necessary adjustments. The series of iterations exemplifies the critic agent's thorough and deliberate approach to identifying and correcting misconceptions, particularly in instances where vital junctions were omitted during the initial proposals.\nInitially, the initializer provides a solution with a total distance of 35.43 units. The critic's first two iterations make minor adjustments with negligible reductions in total distance, reflecting the critic's initial struggle to optimize the route effectively. Notably, iterations 2 and 6 demonstrate the occurrence of hallucinations, where the critic agent fails to include all nodes, leading to a NaN (i.e., Not a Number) total distance, indicating an incomplete or erroneous route computation.\nDespite these setbacks, the critic agent remarkably recovers in subsequent iterations. Iteration 3 shows a significant improvement with a reduced total distance of 32.74 units, Iterations 4 through 8 oscillate in effectiveness, but each maintains a coherent route. Following other hallucinations in iterations 6 and 7, the agent recovers again in iterations 9 and 10, finalizing with a distance of 34.07 units, demonstrating an overall enhancement from the initial route."}, {"title": "5. Conclusion", "content": "This study introduces a pioneering framework for tackling the TSP and mTSP solely through visual reasoning using ChatGPT-4o as an example of MLLMs, marking a departure from conventional reliance on numerical data. By leveraging a multi-agent system in MLLMs, our approach systematically improves route quality by iteratively refining proposed solutions. This iterative process ensures comprehensive node coverage, minimal route intersections, and optimized path lengths without explicit computation of distances. Comparative analyses underscore the competitiveness of our approach against industry-standard tools, validating its potential for practical applications in diverse domains requiring efficient routing solutions\nResults showed that two multi-agent models including Multi-Agent 1, which contains Initializer, Critic, and Scorer; and Multi-Agent 2, which only contains Initializer and Critic-both led to a significant enhancement in the quality of solutions for TSP and mTSP problems. Using MLLM as an agent utilized visual reasoning to bypass traditional computational complexities, offering a novel problem-solving method that mirrors human intuitive processes. The results indicate that Multi-Agent 1, with its trio of Initializer, Critic, and Scorer agents, excels in environments necessitating strict route refinement and evaluation, suggesting a robust framework for managing intricate optimization situations. On the other hand, Multi-Agent 2 streamlines the optimization process by concentrating on iterative refinements conducted by the Initializer and Critic, proving effective in fast decision-making contexts.\nNevertheless, as problem sizes increase, the emergence of hallucinations-instances where routes fail to visit all designated nodes-highlights a critical flaw in the scaling capabilities of the proposed strategies using MLLMs. This phenomenon raises questions about the dependability of these systems in larger, more intricate situations, a significant limitation in real-world applications like urban planning and logistics. Future research includes exploring other open-source MLLMs. Another promising avenue is experimenting our methodology on 3-dimensional data points, as well as using other valuation metrics such as the combination of time and distance cost."}]}