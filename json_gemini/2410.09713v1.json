{"title": "Agentic Information Retrieval", "authors": ["Weinan Zhang", "Junwei Liao", "Ning Li", "Kounianhua Du"], "abstract": "What will information entry look like in the next generation of digital products? Since the 1970s, user access to relevant information has relied on domain-specific architectures of information retrieval (IR). Over the past two decades, the advent of modern IR systems, including web search engines and personalized recommender systems, has greatly improved the efficiency of retrieving relevant information from vast data corpora. However, the core paradigm of these IR systems remains largely unchanged, relying on filtering a predefined set of candidate items. Since 2022, breakthroughs in large language models (LLMs) have begun transforming how information is accessed, establishing a new technical paradigm. In this position paper, we introduce Agentic Information Retrieval (Agentic IR), a novel IR paradigm shaped by the capabilities of LLM agents. Agentic IR expands the scope of accessible tasks and leverages a suite of new techniques to redefine information retrieval. We discuss three types of cutting-edge applications of agentic IR and the challenges faced. We propose that agentic IR holds promise for generating innovative applications, potentially becoming a central information entry point in future digital ecosystems.", "sections": [{"title": "1 The Trends of IR", "content": "Information retrieval (IR) refers to the tasks or techniques of finding information items to match the user's needs from a large corpus. Broadly speaking, there exists a wide range of real-world IR applications, including web search, item recommendation, online advertising, online travel agency, online shopping, online food delivery, etc.\nAs an automated information filtering system, the traditional IR generally employs a specialized architecture to retrieve, rank, and select the information item according to the query. Web search engines, a remarkable example of IR, employ an inverted index system to maintain the posting list of documents for each term (or word). Given a query, the candidate documents containing the query terms are retrieved using the inverted index, and then ranked using a refined or learned scoring function. Finally, the top-ranked documents are presented on the search engine result page (SERP)\nPersonalized recommender systems, another major IR example, typically involve retrieval, pre-ranking (optional), ranking, and re-ranking stages to perform a funnel-like filtering of the items and finally present the re-ranked top items to the user.\nDespite their technical and business success, the above IR architectures need to be predefined from the very beginning of the application, and, once built, remain unchanged throughout the lifetime of the IR systems, so as to the information flow during each IR process. Based on the fixed information flow of the predefined architectures, it is difficult to perform interactive or complex IR tasks (with multiple-step reasoning and actions). For example, on a search engine, the user needs to carefully refine the search keywords to iteratively get the updated SERPs to find the webpage he is seeking; on an e-commerce recommender system, the user has no effective way to change the recommended item list for him rapidly. Moreover, the returned items are as they are - there is no way to manipulate the information items across the IR process which keeps the IR scenarios simple and limited."}, {"title": "2 Agentic IR", "content": "Since the beginning of 2023, with the success of large language models (LLMs) such as ChatGPT, Claude, and GPT4, the generative question-answering applications become much popular. Furthermore, by wrapping an LLM as an AI agent to interact with the environment, it becomes feasible to let the agent to perform multiple (or/and multi-round) reasoning-action steps to accomplish completed tasks. In addition, a variety of tools, including search engines, calculators, weather forecasters, databases, can be accessed by the agents via APIs, which largely enhance the task-solving abilities of the AI agents. With such a background, it is good timing to think about the next-generation IR architectures in the era of LLM-driven AI agents.\nIn this position paper, we introduce the concept of agentic information retrieval (Agentic IR), a novel paradigm of IR techniques that could serve as the key architecture form of the next-generation information retrieval. In general, agentic IR differs from traditional IR in the following aspects.\n\u2022 Task scope. Agentic IR deals with a much wider scope of tasks. For agentic IR, the user shows an expected information state, while the agent takes actions to reach the user to that information state. As such, the traditional IR is a special case of agentic IR, i.e., to present the relevant information items to the user.\n\u2022 Architecture. Unlike the fixed domain-specific architecture for the served scenario in traditional IR, agentic IR generically employs a unified architecture, i.e., the AI agent, to different scenarios, as illustrated in Figure 1. The key difference between the architectures of agentic IR and traditional IR is that the agent solves the problem with the recurrence architecture of observation, reasoning, and action across multiple steps, while the traditional IR tries to solve the problem in one interaction step with a large architecture.\n\u2022 Key methods. The key methods of agentic IR include prompt engineering, retrieval-augmented generation, fine-tuning with supervised and reinforcement learning, multi-agent systems, which are essentially different from those of traditional IR, such as indexing, retrieval methods, scoring function, learning to rank, and pseudo relevance feedback.\nThe remaining part of this paper is organized as follows. In Section 2, we formally present agentic IR including task formulation, architecture form, and some key methods. Then, in Section 3, we describe several emergent representative applications of agentic IR, namely life assistant, business assistant, and coding assistant. Later we discuss the current challenges of agentic IR in Section 4. Finally we conclude this paper in Section 5."}, {"title": "2.1 Task Formulation", "content": "Let $s$ denote the user's target information state, which can be a desired document in a document retrieval task, a satisfying answer in a QA task, or an accomplished accurate order for an online shopping task, etc. Let $x(s^*)$ denote the instruction text provided by the user describing his target information state $s^*$.\nLet $\\pi(a_t|x(s_t))$ denote the policy of the agent, where $s_t$ denotes the information state at step $t$, $x(s_t)$ denotes the corresponding transformed text input to the policy, and $a_t$ denotes the corresponding action $a_t$ taken by the agent. The action is then delivered to the environment and environment"}, {"title": "2.2 Architecture", "content": "The agent policy $\\pi(a_t|x(s_t))$, as shown in the central module of the agentic IR subplot in Figure 1, takes the user's language instruction as input, then interacts with the environment with single or multiple turns, and finally reaches the resulting information state.\nThe inner-architecture modules of the agent generally include memory and thought. Generally, the memory means the the log history, experience that can be stored in the disk, while the thought is the information stored in the context window of the LLM. Additionally, there is a pool of external tools for the agent to call [Patil et al., 2023, Lin et al., 2024]. A tool can be regarded as a function (with input arguments) that cannot be replaced by a neural net model, such as web search engine, relational DB, real-time weather app, calculator, etc.\nAs such, the textual description of the information state of the agent at step $t$ can be written as\n$x(s_t) = g(s_t, h_t, MEM, THT, TOOL),$"}, {"title": "2.3 Key Methods", "content": "Given the above task formulation and agent architecture, the key methods to improve the perfor- mance of agentic IR, namely Eq. (1), would include but not be limited to prompt engineering, retrieval-augmented generation, reflection, supervised fine-tuning, preference learning, reinforcement (learning) fine-tuning, complex reasoning, reward modeling, multi-agent systems, etc.\n\u2022 Prompt engineering. Prompts are the task-based language token input to the LLM to enable its ability for the task . For an LLM, the prompt is a human-controllable way to set its hidden state in comparison to the model parameters, including the chain-of-thought prompting.\n\u2022 Retrieval-augmented generation (RAG). The task-specifically retrieved demonstrations play a crucial role in LLM-based applications. In agentic IR, the retrieved demonstrations can be on the action level or the thought level .\n\u2022 Reflection. The agent may use the failure or suboptimal results of its interactions with the environment to update its thoughts, so as to make further attempts to refine its actions and thus the resulting information state .\n\u2022 Supervised fine-tuning (SFT). As a basic methods for fine-tuning LLMs, SFT can be seamlessly adapted to agentic IR tasks, where the successful historic trajectories are used as the training data with each step of action or the output of each inner function as the label to fit. SFT corresponds to"}, {"title": "3 Application Scenarios and Case Studies", "content": "In this section, we briefly discuss three types of applications with case studies of agent IR, i.e., life assistant, business assistant, and coding assistant. As their names are, the agent IR would play more like an assistant for users with a certain level of autonomy. The traditional IR, by contrast, is like a tool to call in agent IR, which is non-autonomous."}, {"title": "3.1 Life Assistant", "content": "In recent years, life assistants have evolved from simple voice-activated tools into sophisticated sys- tems capable of supporting users across a wide array of daily tasks. At the core of this transformation is a significant advancement in IR technologies. Agentic IR empowers these assistants not only to gather and deliver information but also to proactively support planning and decision-making with a deep understanding of the user's needs, context, and preferences. This shift enables life assistants to act as active, autonomous agents that adapt seamlessly to a user's lifestyle, offering guidance and taking actions in real time.\nAgentic IR capabilities are already present in major products like Apple's ecosystem, where Apple Intelligence\u00b9 powers advanced assistant features across devices such as iPhone, iPad, and Mac [Apple, 2024]. Apple Intelligence enhances user experience by seamlessly integrating with apps, services, and smart devices, embodying the proactive and contextual characteristics of agentic IR. Beyond Apple, other life assistants, such as Google Assistant\u00b2, Amazon Alexa\u00b3, Oppo Breeno, and Huawei Celia\u2074, operate across diverse platforms, including smartphones, smart home devices, and wearables. These assistants empower users with convenient control over both digital and physical environments, enabling them to make informed plans and adjustments anytime, anywhere [Li et al., 2024b]."}, {"title": "Autonomous task execution and final information states", "content": "Beyond simply gathering information, agentic IR enables the assistant to autonomously execute tasks, such as booking a dinner reservation or setting reminders. When Jane's assistant books a restaurant, it concludes that conversation round in an information state where the booking is completed and confirmed in her calendar. This autonomous"}, {"title": "3.2 Business Assistant", "content": "Business assistant is designed to support enterprise users by providing relevant business knowledge and insights based on various documents and data sources. With agentic IR capabilities, the business assistant goes beyond passive information retrieval to actively participate in intention recognition and response generation. Leveraging powerful information retrieval and generation capabilities, business assistants can address a wide range of business-related queries, from financial analysis to marketing strategies, helping users make better decisions.\nThe business assistant workflow generally involves four stages: query understanding, document retrieval, information integration, and response generation, as illustrated in Figure 3. Today, there are already several business assistants powered by agentic IR in use, such as Amazon Q Business\u2075. Below, we will illustrate each stage with reference to this example.\nQuery understanding. Given a business-related query, the agent, core of the business assistant, first attempts to understand and analyze the user's intention. For complex queries, the agent can generate thoughts (THT) with CoT to break down the problem into smaller, manageable steps, allowing for multi-step reasoning. In Amazon Q Business, conversations are continuous, allowing the historical"}, {"title": "3.3 Coding Assistant", "content": "Interactive programming assistance and automatic program synthesis play important roles in liberating productivity and improving development efficiency. Industrial programming assistant products like Copilot emerge, offering an interactive environment for developers to gather information from open world and reach their programming needs. Agentic information retrieval in the context of coding assistants refers to systems designed to autonomously retrieve and provide relevant information based on developer queries and contextual needs. This approach emphasizes the ability of the assistant not just to respond to requests but to proactively understand developer intent, code context, and potential challenges the user may face. The main stages of Developer - Coding Assistant interaction process can be summarized into information need diagnosis, knowledge content generation, and information state update. An illustration is provided in Figure 4.\nInformation need diagnosis. At a certain state $s_t$, the developer's information need can be con- scious and unconscious. On the one hand, developers can consciously input their requirements like \"Generate docs\" or call '/doc' to retrieve documentary knowledge from the coding assistant to suit the need. On the other hand, the information need can be unconscious. For example, during the programming procedure, a developer may write a function declaration, while the functionality to be achieved can be automatically identified by the coding assistant and then used to query itself for corresponding assistance. This unconscious information need diagnosis makes agentic IR distinct and advanced compared to the traditional IR, offering timely and tailored knowledge assistance. Another characteristic of agentic IR is the memory module (MEM), which allows the coding assistant to remember previous interactions, including developer preferences, past queries, debugging histories, and specific coding projects. This enables the assistant to maintain context over time, providing more tailored information need diagnosis.\nKnowledge content generation. After the information need is identified, it is then used to query the code assistant for corresponding knowledge content. Powered by the intelligent large language"}, {"title": "4 Challenges", "content": "As a branding-new paradigm of IR, most of the techniques and engineering modules of agentic IR are still in their infancy and facing challenges in different aspects.\n\u2022 Data acquisition. As a decision-making task, the logged data of agentic IR largely comes from the agent's interaction with the environment, which is determined by the users' instructions, the agent policy, and the environment dynamics. The exploration-exploitation tradeoff will be crucial to collecting high-quality and wide coverage data. Directly labeling the correct trajectories to achieve the target state is still possible, but highly expensive.\n\u2022 Model training. As the agent policy would consist of a DAG of functions, i.e., memory update, thought manipulation, and tool use, it is highly challenging to effectively update the parameters of these functions and the total composite policy function. Some recent attempts to tackle this challenge via RFT and action decomposition have been performed.\n\u2022 Inference cost. Due to the large parameter size and the autoregressive nature, the inference of LLMs is both GPU-heavy and time-consuming. Thus, the system optimization of agentic IR is crucial for practical service deployment.\n\u2022 Safety. As the agent directly interacts with the real environment, its decision of action will change the environment and carry the user to different resulting information states. Thus, it is even more important than the chat applications to guarantee safety across the user journey. Alignment techniques [Ji et al., 2023] can be helpful but the safety is not guaranteed. A recent proposal of \"world model + verifier\" framework [Dalrymple et al., 2024] can be a way to explore safety for agentic IR.\n\u2022 Interacting with users. Finally, given the differences from traditional IR in almost all aspects, including inference latency, data manipulation, information state representation, etc., the product form of agentic IR is still under-explored. There is still a long way to go to find the product-market fit for agentic IR."}, {"title": "5 Conclusions", "content": "In this position paper, we conceptualize a new technical paradigm of information retrieval in the era of LLMs, named Agentic IR. Unlike the traditional IR that filters the item corpus and returns the relevant items to the user, in agentic IR, the agent automatically interacts with the environment to reach the user's target information state. As such, the agentic IR serves a broad task scope, employs a unified agent architecture, and involves different key methods compared to traditional IR. Although facing challenges in multiple aspects, it can be expected that agentic IR will be highly developed and promoted in the coming couple of years."}]}