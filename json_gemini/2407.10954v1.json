{"title": "A Unified Differentiable Boolean Operator with Fuzzy Logic", "authors": ["HSUEH-TI DEREK LIU", "MANEESH AGRAWALA", "CEM YUKSEL", "TIM OMERNICK", "VINITH MISRA", "STEFANO CORAZZA", "MORGAN MCGUIRE", "VICTOR ZORDAN"], "abstract": "This paper presents a unified differentiable boolean operator for implicit solid shape modeling using Constructive Solid Geometry (CSG). Traditional CSG relies on min, max operators to perform boolean operations on implicit shapes. But because these boolean operators are discontinuous and discrete in the choice of operations, this makes optimization over the CSG representation challenging. Drawing inspiration from fuzzy logic, we present a unified boolean operator that outputs a continuous function and is differentiable with respect to operator types. This enables optimization of both the primitives and the boolean operations employed in CSG with continuous optimization techniques, such as gradient descent. We further demonstrate that such a continuous boolean operator allows the modeling of both sharp mechanical objects and smooth organic shapes with the same framework. Our proposed boolean operator opens up new possibilities for future research toward fully continuous CSG optimization.", "sections": [{"title": "1 INTRODUCTION", "content": "Boolean operations are a central ingredient in Constructive Solid Geometry (CSG) \u2013 a modeling paradigm that represents a complex shape using a collection of primitive shapes which are combined together via boolean operations (INTERSECTION, UNION, and DIFFERENCE). CSG provides a precise, hierarchical representation of solid shapes and is widely used in computer graphics.\nThe importance of CSG has motivated researchers to investigate the inverse problem; constructing a CSG tree for a given 3D model from a collection of parameterized primitive shapes. A common approach is to treat this as an optimization problem that involves choosing the structure of the CSG tree; the type of boolean operation to perform at each internal node in the tree, as well as the parameters and type (e.g., sphere, cube, cylinder) of the leaf node primitive shapes. The optimization is difficult because it contains a mixture of discrete (type of boolean operation, number and type of primitive shapes) and continuous (parameters of primitives e.g., radius, width, etc.) variables. Moreover, the degrees of freedom grow exponentially with the complexity of the CSG tree, making the optimization landscape very challenging to navigate.\nPrevious attempts either tackle the inverse optimization directly with evolutionary algorithms [Friedrich et al. 2019], or relax some of the discrete variables into continuous variables to reduce the discrete search space. For instance, one of the discrete decisions is"}, {"title": "2 RELATED WORK", "content": "Our contribution uses fuzzy logic to design a unified differentiable boolean operator with applications in gradient-based inverse CSG optimization. While researchers have formulated inverse CSG as a program synthesis [Du et al. 2018; Sharma et al. 2018; Wu et al. 2021], combinatorial optimization [Wu et al. 2018], or a global optimization [Friedrich et al. 2019; Hamza and Saitou 2004] problem, we reformulate it as differentiable gradient descent optimization problem with respect to boolean and primitive parameters. Here, we consider how our work relates to differentiable CSG optimization and to other boolean operators used in geometric modeling."}, {"title": "2.1 Gradient-Based CSG Optimization", "content": "Optimizing CSG trees requires determining the structure of the tree, the boolean operations, and the primitive parameters. In order to deploy continuous optimization techniques (such as gradient descent), existing solutions rely on pre-defining all the discrete variables (the tree structure and the boolean operations), and then only optimizing the primitive parameters. The simplest pre-defined \"CSG tree\" is a union of many parts, including convex shapes [Chen et al. 2020; Deng et al. 2020] and neural implicit functions [Deng et al. 2022]. Some works have also explored more complicated pre-defined tree structures with a mixture of INTERSECTION, UNION, DIFFERENCE operators [Ren et al. 2021; Yu et al. 2023, 2022]. Instead of pre-determining the boolean operators, Kania et al. [2020] proposed a brute force approach to all possible boolean combinations. However this approach suffers from scalability issues as the number of combinations grows exponentially with respect to the depth of the CSG tree.\nOur contribution complements these techniques by introducing a unified boolean operator which enables continuous optimization on the choice of boolean operations. This avoids the need for brute force or pre-determining boolean operations, leading to better re-construction (Fig. 1)."}, {"title": "2.2 Boolean Operators in Geometric Modeling", "content": "The importance of boolean operations has stimulated research topics in differentiable boolean operators in geometric modeling. Despite having the same name, the term \u201cdifferentiable boolean\" can refer to (1) boolean operators that output a differentiable function, and (2) unified boolean operators that can be differentiated with respect to the type of operations.\nThe most common usage of \"differentiable boolean\" refers to boolean operations that produce differentiable functions, also known as soft blending. Traditionally, min and max operators are used to produce INTERSECTION and UNION between two implicit functions. But the caveat is that their gradients are ill-defined at locations when the input functions have the same value. This motivated Ricci [1973] to introduce a soft blending operator using a variant of p-norms $||x||_p = (\\Sigma_i |x_i|^P)^{1/p}$ to produce smooth and differentiable outputs."}, {"title": "3 BACKGROUND", "content": "The concept of fuzzy logic [Zadeh 1965] has applications in a wide variety of problem domains [Dzitac et al. 2017]. In computer graphics, fuzzy logic has been used in image processing [Chac\u00f3n M 2006], color compositing [Smith 1995], and spline interpolation [Li and Tian 2008]. Here we summarize the core ideas of fuzzy logic."}, {"title": "3.1 Fuzzy Set", "content": "A fuzzy set X = (P, fx) is a tuple of the universe of elements P = {p} and a membership function fx : P \u2192 [0, 1] such that fx (p) = 0 implies that element p is not a member of X, fx (p) = 1 implies p is a full member of X and 0 < fx (p) < 1 implies p is a partial member of X. Fuzzy sets are a generalization of the classic \"crisp\" set, whose membership function only outputs 0 or 1. For instance, suppose we define a fuzzy set H = (P, fH) of the temperatures one considers hot. The universe of elements P are all possible temperature values. One might consider some temperature values, such as 40 degrees Celsius, as full members of H so that fH (40\u00b0C) = 1. But 25 degrees Celsius, might only be a partial member fH (25\u00b0H) = 0.3. Fuzzy sets model this notion of partial membership."}, {"title": "3.2 Fuzzy Logic", "content": "Fuzzy logic develops boolean operations on fuzzy sets. Given two fuzzy sets X = (P, fx) and Y = (P, fy), a boolean operation is defined on the membership function. For instance, INTERSECTION \u2229, UNION U, and COMPLEMENT - between fuzzy sets are defined as\n$X O Y = (P, f_{x\\cap y}), X \\cup Y = (P, f_{x\\cup y}), \\neg X = (P, f_{\\neg x}).$ (1)\nA core question in fuzzy logic research is how to define these boolean membership functions $f_{x\\cap y}, f_{x\\cup y}, f_{\\neg x}$. A very common approach is to define them using the min, max operators [G\u00f6del 1932] as\n$f_{x\\cap y} = min(f_x (p), f_y (p)) = min(x, y),$ (2)\n$f_{x\\cup y} = max(f_x (p), f_y (p)) = max(x, y),$ (3)\n$f_{\\neg x} = 1 - f_x (p) = 1 \u2212 x.$ (4)\nTo simplify notation, here and for the rest of the paper, we use the lowercase letter x to refer to fx (p), the membership function of X applied to a generic element p \u2208 P. Similarly, y refers to fy (p).\nFuzzy Intersection. Fuzzy logic researchers have explored other definitions of $f_{x\\cap y}$ [Klir and Yuan 1995]. Suppose $f_{x\\cap y} = T(x, y)$. They define T as a valid intersection function when the following axioms hold:\n$T(x, 1) = x$ (boundary condition)\n$T(x, y) \u2264 T(x, z), if y \u2264 z$ (monotonicity)\n$T(x, y) = T (y, x)$ (commutativity)\n$T(x, T(y, z)) = T(T(x, y), z)$ (associativity)\nwhere x = fx (p), y = fy (p), z = fz(p) \u2208 [0, 1] are fuzzy mem-bership values for generic element p. Any function that satisfies these axioms is called a t-norm T [Menger 1942]. These axioms ensure that the behavior of the fuzzy intersection operator converges to the classic intersection (AND) operator when membership values are binary. Some popular t-norms include G\u00f6del's [1932] minimum where T(x,y) = min(x, y), product T(x, y) = xy, \u0141ukasiewicz T (x, y) = max(0, x + y \u2212 1), and Yager [1980] T(x, y) =\n$max(1 \u2013 ((1 \u2013 x)^P + (1 \u2212 b)^P)^{1/P}, 0).$"}, {"title": "Fuzzy Union", "content": "Similarly, suppose $f_{x\\cup y} = \\bot(x, y)$. In fuzzy logic, \\bot\nis a valid UNION function if:\n$\\bot(x, 0) = x$ (boundary condition)\n$\\bot(x, y) \u2264 \\bot(x, z), if y \u2264 z$ (monotonicity)\n$\\bot(x, y) = \\bot(y, x)$ (commutativity)\n$\\bot(x, \\bot(y, z)) = \\bot(\\bot(x, y), z)$ (associativity)\nThe functions that satisfy these axioms are known as t-conorms \\bot. Common t-conorms include G\u00f6del's [1932] maximum \\bot(x, y) =max(x, y), probabilistic sum \\bot(x, y) = x + y \u2212 x y, bounded sum\\bot(x, y) = min(x + y, 1), and Yager [1980] \\bot(x,y) = min((xP +yP)^{1/P}, 1)."}, {"title": "Fuzzy Complement", "content": "The set of axioms for defining a valid COMPLE-MENT function $f_{\\neg x} = C(x)$ are\n$C(0) = 1, C(1) = 0$ (boundary condition)\nif x \u2264 y, then $C (x) < C(y)$ (monotonicity)\nValid complement functions include cosine $C(x) = \\frac{1+cos(\\pi x)}{2}$,Sugeno $C(x) = \\frac{1-x}{1+\\lambda x}$ with \u03bb\u2208 (-1,0\u221e), and Yager [1980] $C(x) =$(1 \u2212 x^\u03bb)^{1/\u03bb}. The widely used complement $C (x) = 1 \u2212 x$, is the Yagercomplement with \u03bb = 1."}, {"title": "Fuzzy Difference", "content": "In fuzzy logic,the DIFFERENCE Operator \\ is usu-ally derived from the De Mor-gan's laws (see inset), whichstate the relationship betweenthe UNION, INTERSECTION, andCOMPLEMENT operators,\n$\\neg(X\\cup Y) = \\neg X \\cap \\neg Y,$(5)\nand the relationship between DIFFERENCE and the other operators\n$X \\setminus Y = X \\cap \\neg Y.$ (6)\nFor the De Morgan's law to hold, one has to jointly define theINTERSECTION, UNION, and COMPLEMENT Operators so that theysatisfy Eq. 5. Then a valid DIFFERENCE operator \\ can be derivedfrom INTERSECTION and COMPLEMENT using Eq. 6 as\n$f_{x\\setminus y} = T(x, C(y)).$ (7)"}, {"title": "4 A UNIFIED DIFFERENTIABLE BOOLEAN OPERATOR", "content": "To apply fuzzy logic to CSG modeling, we interpret a solid shape,represented by a soft occupancy function, as a fuzzy set X = {P, fx}.Here, P = {p} denotes the universe of points p\u2208 Rd and the mem-bership function fx : P\u2192 [0, 1] is the soft occupancy functionrepresenting the probability of a point lying inside the shape. Thenwe can directly apply the fuzzy boolean operations presented inSec. 3. However, we must choose INTERSECTION, UNION, and COM-PLEMENT appropriate to our task. We first present our choice foreach of these functions (Sec. 4.1) and then describe how to combinethem into a unified boolean operator (Sec. 4.2)."}, {"title": "4.1 Product Fuzzy Logic", "content": "Motivated by our goal of continuous optimization, we would likeeach of our individual fuzzy boolean operations INTERSECTION T,UNION \\bot and COMPLEMENT C to be differentiable and have non-vanishing (i.e. non-zero) gradients with respect to their inputs. Van-ishing gradients can result in plateaus in the energy landscape making gradient-based optimization difficult.\nBoolean operators as defined by the product fuzzy logic meetthese criteria. Specifically they are defined as\n$f_{x\\cap y} = T(x, y) = \u0445\u0443$ (8)\n$f_{x\\cup y} = \\bot(x, y) = x + y \u2013 xy$ (9)\n$f_{\\neg x} = C(x) = 1-x$ (10)\nwhere X and Y are two solid shapes and x = fx (p), y = fy (p) \u2208[0, 1] are their soft occupancy values at a generic point p. Thesedefinitions satisfy the axioms of valid boolean operators (see Sec. 3).They correspond to valid t-norm T, t-conorm \\bot, and complement Cfunctions, respectively, in fuzzy logic. They also satisfy De Morgan's law Eq. 5, allowing us to compute DIFFERENCE as\n$f_{x\\setminus x} = x-xy, \\qquad f_{y\\setminus x} = y - xy$ (11)"}, {"title": "4.2 Unifying Boolean Operations", "content": "To create a unified fuzzy boolean operator that is differentiable withrespect to the type of boolean operation (INTERSECTION, UNION,DIFFERENCE), our approach is to interpolate their respective mem-bership functions using a set of interpolation control parameters c.Our goal is to design an interpolation scheme that is continuous andmonotonic in the parameters c so that the interpolation functionavoids unnecessary local minima.\nA naive solution is to use bilinear interpolation between the fourboolean operations fxnY, fxUY, fx\\Y, fy\\x. While such interpola-tion can look smooth, bilinear interpolation exhibits non-monotonicchanges and creates local minima in the interpolated occupancy (seeFig. 5). This is because bilinear interpolation implicitly forces the"}, {"title": "5 RESULTS", "content": "Building on top of fuzzy logic, we first demonstrate our choice of individual operators from Eq. 8 leads to a natural generalization"}, {"title": "5.1 Fuzzy CSG System", "content": "Using fuzzy boolean operators in CSG gives the ability to modelboth mechanical objects with crisp edges and smooth organic shapeswith the same framework. Specifically, if the underlying implicitshapes are crisp binary occupancy functions, our method producesthe same sharp results as the traditional CSG. If the input shapesare soft occupancy functions, our method outputs smooth shapesbased on the \"softness\" present in the input shape.\nThis capability allows us to obtain visually indistinguishable re-sults compared to the popular smoothed min/max [Quilez 2013]operations on the signed distance function (Fig. 7). Moreover, ourapproach is free from artifacts caused by discrepancy between theinput and the output (see Fig. 8). This is because our method is closed:both the input and the output are guaranteed to be soft occupancyfunctions. This is different from the previous method by Quilez[2013] such that their outputs are not signed distance functions[Marschner et al. 2023], even though the input is.\nAs the smoothness is controlled at the primitive level, we caneasily have adaptive smoothness across the shape by simply changingthe softness of each primitive occupancy (see Fig. 9). Specifically,we consider primitive shapes represented as the signed distancefunction s, and we convert it to occupancy with the sigmoid func-tion sigmoid(ts) with different softnesses by adjusting the positivetemperature parameter t."}, {"title": "5.2 Single Shape Inverse CSG with Gradient Descent", "content": "Our approach enables us to simply use gradient descent to optimize a CSG tree that outputs a given shape (see Fig. 10), even for smooth organic objects (see inset). Our method starts with a full binary CSG tree (each boolean node has exactly two children, each primitive node is a leaf node) with randomly initialized (unified) boolean operators Bc and primitive parameters (see Fig. 1).Given a ground truth occupancy function, we minimize the meansquare error between the output occupancy from the CSG tree andthe ground truth with the ADAM optimizer [Kingma and Ba 2015].To enforce our unified boolean operators converge to one of the boolean operations, we use a temperetured softmax function (see App. A for implementation details). At the end of the optimization,"}, {"title": "5.3 CSG Generative Models", "content": "We demonstrate how our method can improve existing methods forfitting a shape dataset and generating CSG trees. Specifically, we"}, {"title": "6 LIMITATIONS & FUTURE WORK", "content": "We introduce a unified differentiable boolean operator for solidshapes with soft occupancy. Our approach enables optimization ofboth the primitives and the boolean operations with continuousoptimization techniques, such as gradient descent. As a preliminaryinvestigation, the efforts described here open a cast of new directionsfor future work as well as room for improvement. We describe nexta set of the limitations and opportunities for additional next stepsand research directions.\nOptimizing Tree Structures. Although we have enabled differentiation through boolean and primitive nodes, currently, the structureof our tree is held fixed during optimization. Despite fitting theshape well, our approach often leads to complicated CSG trees as aresult, even after pruning. We believe future research in optimizingamong tree structures and identifying when to grow/prune/rotatethe tree nodes would be beneficial to reduce tree complexity.\nTree Properties. The ability to optimize the tree structure couldunlock optimizing the tree to have certain properties, such as com-pactness or editability. A well-known challenge of inverse CSG isthat a shape can be constructed by an infinite number of differentCSG trees. We suffer from the same issue that our approach onlyfinds one of the trees, but there is no guarantee that the tree weobtain is, for instance, the most compact option.\nExtended Fuzzy CSG System. In our work, we explore how fuzzylogic may be applied to CSG modeling. We evaluate the fuzzy coun-terparts of existing CSG operations (UNION, INTERSECTION, DIFFER-ENCE), but there are more fuzzy logic operators that do not exist inCSG traditionally. For instance, the fuzzy aggregation operator [Klirand Yuan 1995] can be perceived as a generalization of UNION orINTERSECTION on a collection of primitive shapes, instead of two.Adding such operators could enable new possibilities in tree struc-ture optimization by, for instance, selecting which primitives to usewhen performing boolean operations.\nHardware Acceleration. Our current fuzzy CSG system is basedon an un-optimized implementation of fuzzy logic operators. How-ever, as shown in several other fields, fuzzy logic operators can begreatly accelerated with parallel hardware implementations (e.g.,[Ontiveros-Robles et al. 2016]). A hardware-accelerated version ofour CSG system based on fuzzy logic could accelerate our methodto run in real time.\nCSG Generative Models. Making CSG systems differentiable couldbe beneficial for future exploration on (black boxed) neural symbolicgenerative models [Ritchie et al. 2023] that output (white boxed)CSG tree parameters. As this is orthogonal to our contributions, wesimply evaluate our method based on the off-the-shelf architecturein Sec. 5.3. Future work on better neural network architectures fortree generation would be beneficial to empower CSG generation.\nCSG modeling with optimization offers alternatives to mesh-basedgeometry representations that can be compact and less resolutiondependent. Our exploration of the fuzzy boolean operator bringsthe automatic production of CSG models one step closer and opensavenues for further advances including speed-ups and relaxed con-straints on CSG hierarchies. Inspired by the connections betweenfuzzy logic and other graphics applications (e.g., image/volumetriccompositing), exploring applications of fuzzy logic beyond CSGcould be an interesting future direction."}, {"title": "A IMPLEMENTATION DETAILS FOR INVERSE CSG", "content": "Initialization. Our method starts with a randomly initialized fullbinary CSG tree that consists of our fuzzy boolean nodes Eq. 12and primitive shape represented as soft occupancy functions. Weinitialize the parameters of the boolean and primitive nodes witha uniform distribution between -0.5 and 0.5. As the required treecomplexity is unknown, we initialize a \"big\" CSG tree (e.g., 1024primitive shapes) to reduce the chance of having an insufficientnumber of primitives.\nPrimitive Choices. In terms of the choice of primitives, except theone in Fig. 11, we use quadric surfaces q\n$q(x, y, z) = q_0x^2 + q_1y^2 + q_2z^2$ (18)\n$+ q_3xy + q_4yz + q_5zx + q_6x + q_7y + q_8z + q_9$ (19)\nin all our experiments partly due to its popularity in industry [Samuelet al. 1976]. More crucially, we believe using a less expressive primi-tive (compared to MLPs) give us a clearer signal on the performanceof our proposed boolean operator. This is because an expressiveprimitive family, such as a big neural network, is able to fit a shapeeven without using any boolean operations. Then we convert thequadric function into a soft occupancy function with the sigmoidfunction\n$o(x, y, z) = sigmoid(s \\times q(x, y, z))$ (20)\nwhere s is a trainable \"sharpness\" parameter to uniformly scale thequadric function to make it sharper or smoother. This allows themodel to change the sharpness of quadric surface without changingthe shape. Empirically, we notice a better convergence rate with atrainable sharpness.\nBoolean Parameterization. The side effect of having a unifiedboolean operator in is the possibility of not converging the oneof the boolean operations. We alleviate this issue by parameterizingc with \u010d\u2208 R4 as\n$c = softmax(sin(\\omega \\check{c}) t)$ (21)\nwhere t \u2208 R is the temperature. We leverage the softmax function toensure the resulting c is always a valid barycentric coordinate. Weset the temperature t to a high value (e.g., t = 10\u00b3) to encourage c tobe numerically close to a one-hot vector for most parameter choicesof \u010d. The sin(w) (with w = 10) function is to ensure boolean operatortype can still be changed easily in the later stage of the optimization.Without it, changing c will require many iterations when \u010d has alarge magnitude because each gradient update only updates \u010d a little.We observe that this parameterization of c converges to a one-hotvector in all our experiments, even though we only softly encouragemost parameter choices of \u010d to be one-hot vectors. We suspect thisis because any in-between operations will have occupancy valuesaway from 0 or 1, whereas the target shape has binary occupancyvalues, converging to in-between operations can still occur whenimperfect fitting happens.\nOptimization. We define the loss function as the mean squareerror between the output occupancy from the CSG tree and theground truth occupancy, evaluated on some sampled 3D points.We sample the points with approximately 40% on the surface, 40%"}]}