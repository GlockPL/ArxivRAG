{"title": "TALKING LIKE PIPING AND INSTRUMENTATION DIAGRAMS\n(P&IDS)", "authors": ["Achmad Anggawirya Alimin", "Lukas Schulze Balhorn", "Dominik P. Goldstein", "Artur M. Schweidtmann"], "abstract": "We propose a methodology that allows communication with Piping and Instrumentation Diagrams\n(P&IDs) using natural language. In particular, we represent P&IDs through the DEXPI data model\nas labeled property graphs and integrate them with Large Language Models (LLMs). The approach\nconsists of three main parts: 1) P&IDs are cast into a graph representation from the DEXPI format\nusing our pyDEXPI Python package. 2) A tool for generating P&ID knowledge graphs from pyDEXPI.\n3) Integration of the P&ID knowledge graph to LLMs using graph-based retrieval augmented\ngeneration (graph-RAG). This approach allows users to communicate with P&IDs using natural\nlanguage. It extends LLM's ability to retrieve contextual data from P&IDs and mitigate hallucinations.\nLeveraging the LLM's large corpus, the model is also able to interpret process information in P&IDs,\nwhich could help engineers in their daily tasks. In the future, this work will also open up opportunities\nin the context of other generative Artificial Intelligence (genAI) solutions on P&IDs, and AI-assisted\nHAZOP studies.", "sections": [{"title": "1 Introduction", "content": "Piping and Instrumentation Diagrams (P&IDs) are pivotal in process engineering, serving as comprehensive references\nacross multiple disciplines (Toghraei, 2019). For process engineers, daily tasks rely on accurate information retrieved\nfrom P&IDs. For example, engineers require accurate information and interpretation of P&IDs during design, HAZOP\nstudies, and operation. However, the intricate nature of P&IDs and the system's complexity pose challenges to extracting\ninformation accurately and efficiently. The current approach mainly relies on manually tracing processing lines on PDF\nor Computer Aided Engineering (CAE) documents, which is time-consuming and prone to errors, leading to loss of\nproduction time and potentially hazardous situations.\nRecent digitalization efforts in process engineering have brought a more data-centric approach to P&ID development.\nThis advancement, often referred to as \"smart\" or \"intelligent\" P&ID, overlays a database on top of process diagrams.\nAlso, recent works proposed the digitization of paper-based P&IDs into smart P&IDs (Theisen et al., 2023). While each\nCAE software may use distinct formats, initiatives to improve interoperability are underway. For instance, the Data"}, {"title": "2 Method", "content": "This section discusses each of the steps in this methodology, including graph representation, knowledge graph generation,\nand retrieval method as depicted in Figure 1. A DEXPI P&ID sample [3] is used as a case study to demonstrate our\napproach."}, {"title": "2.1 P&ID graph representation", "content": "A graph is an index-free adjacency database consisting of nodes and edges. Nodes represent entities within the dataset,\nwhile edges define the relationships between these entities. Due to its flexible structure and intuitive expression,"}, {"title": "2.2 P&ID knowledge graph generation", "content": "While the graph captures the structure of the flowsheet, it lacks meaningful semantic context in its raw form. As\nsuch, the initial graph representation, comprising Python class instances and their connections, remains abstract and\nunreadable to LLMs. Semantic information is added to the graph to transform this structure into a readable and\nfunctional knowledge graph. This work utilizes a type of knowledge graph called Label Property Graph (LPG) using\nthe Neo4j framework. The LPG graph classifies nodes using the labels and adds key-value pairs as the node properties.\nThis feature is essential to denote different types of components and accommodate the details from the flowsheet. LPG\nuses labels as an attribute to distinguish nodes. In our case, multiple labels are employed to classify P&ID components.\nNode labels are inherited from the pyDEXPI class name and its parent class, which aligns with DEXPI specification.\nFor example, at a higher level, nodes are assigned labels based on their pyDEXPI package, i.e., equipment, piping,\nor instrumentation. At a more granular level, additional labels are applied according to each component's specific\nclassification, i.e., reciprocatingPump and centrifugalPump. Meanwhile, detailed design information, such as size,\noperating conditions, tag number, and other specifications, is stored as node properties in key-value pairs.\n\nThe relationship labels in the knowledge graph are also specified following the relationship in pyDEXPI P&ID. Domain\nrelationship labels are remarked as \"has_[componentType]\" or \"is_located_in,\" depending on the direction of the\nrelationship. Meanwhile, the lexical relationship is much more specialized. Material flows were labeled with \"send_to\";\nthe control structure relationship is represented using words such as \"control,\" \"send_signal_to,\" \"is_logical_end_of,\"\nand \"measured_by\"."}, {"title": "3 Graph-based retrieval method", "content": ""}, {"title": "3.1 High-level graph context generation", "content": "While the P&ID knowledge graph can be directly used as context for LLMs, extracting information becomes increasingly\ndifficult as the graph's context length and complexity grow. For instance, the illustrative DEXPI flowsheet sample\nwhich represents a single page of P&ID with only one tank, two pumps, and two heat exchangers, consists of 212 nodes\nand 405 relationships. This translates to approximately 67,000 tokens in LLMs, which is inefficient in terms of token\nusage. The information density in the knowledge graph must be increased to improve efficiency, making the graph\nmore compact and readable for LLMs. The objective is to create high-level graph representations to allow LLMs to\nfocus on the essential structure. This is similar to how engineers read the flowsheet, which develops understanding from\na high-level overview of the flowsheet before jumping into details. Three steps were implemented to create a high-level\ngraph representation:\n1. Pruning domain information and connection nodes\n2. Condensing low-information nodes\n3. Removing non-process-related node properties\nThese steps reduce the overall complexity while preserving key relationships and concepts. The high-level graph\nreduces the knowledge graph size from 212 to 53 nodes, 405 to 57 relationships, and tokens usage from approximately\n67,000 to 9,000 tokens. The performance of this high-level graph as context will later be compared to the initial\ncomplete knowledge graph."}, {"title": "3.2 Chain and retrieval", "content": "The LLM agent was created using the Langchain library. In the chain, the LLM is called using the API key or via\na local machine. To enhance the interaction, a memory module is added to allow chat history to become context in\nLLM's response. As LLM may take time to give a complete response, the stream method is used to show the generated\ntoken directly as it is available. For retrieval, the high-level knowledge graph from Neo4j is exported into a graphml\nfile containing information about nodes, relationships, and properties. This file content is then added as context to the\nengineered system prompt in the chain. In the LLMs, the string from the graphml file is tokenized together with the\nchat history and user question and passed to the LLM model to generate a history-aware and contextual response."}, {"title": "4 Result and discussion", "content": "In this section, we evaluate our approach's ability to retrieve information from the flowsheet. The model responses are\nassessed from a series of questions at various configurations of LLM and knowledge graph. The LLMs are varied to\ndetermine pipeline performance across different model scales. Additionally, to test our graph condensing method's\nability to represent the flowsheet, the model responses from the completed and high-level graphs are also compared.\nWe designed a series of questions to evaluate distinct aspects, including pattern recognition ability, search completeness,\nand knowledge inference. The questions are asked sequentially, with each response integrated into the context of the\nsubsequent query to assess how well the model maintains continuity in its analysis. The questions are as follows:\n1. \"Describe the process from inlet to outlet.\u201d This question evaluates the model's pattern recognition ability to\nextract and infer information from the flowsheet.\n2. \"List all valves and their specifications.\" This question tests the model's capacity for information retrieval and\nits completeness, specifically its ability to identify and list all valves along with their relevant specifications\nfrom the flowsheet.\n3. \"Analyze the flowsheet and give recommendations regarding process safety.\u201d This question assesses the model's\nknowledge inference capability, determining whether it can provide insightful process safety recommendations\nby leveraging its large corpus of information exposed to LLM during training and information from the\nflowsheet details.\nAs provided in Table 1, the results showed promising potential for this approach to read, search, and infer information\nfrom P&ID. In general, larger LLMs generate more complete and accurate responses. Meanwhile, smaller LLMs have\ndifficulties reading the graph. Besides the current performance, we also see the potential for smaller LLMs, as they\nare computationally light and relatively affordable to run on local machines and fine-tune for this specific task. For"}, {"title": "1. Pressure Safety:", "content": "Current Status:\nOne spring-loaded safety valve (SV 104.01) with set pressure of 6.0 bar\nDesign pressures vary from 1 to 60 bar across equipment\nRecommendations:\nAdd additional pressure safety valves, especially around:\n* The centrifugal pump P4711 discharge (60 kW pump)\n* The reciprocating pump P4712 discharge (84 kW pump)\nreciprocating pumps are prone to pressure pulsations\n* Heat exchangers H1007 and H1008 to protect against thermal expansion\nInstall pulsation dampeners around the reciprocating pump P4712\nAdd pressure indicators and transmitters at more critical points\nThe results indicate that the Anthropic Sonnet 3.5 is capable of retrieving information on existing safety devices and\nthe design pressure range within the system to formulate relevant recommendations. The recommendations included\nadding several pressure transmitters at critical locations (though the exact locations were not specified) and installing a\npressure safety valve (PSV) on the pump outlet. While the model suggested a PSV, a rupture disc can also be a choice,\ndepending on the fluid, but the recommendation remains relevant as both devices act as pressure protection devices. In\naddition, the LLMs also highlighted the importance of addressing pressure pulsation in reciprocating pumps, which is\nhighly pertinent (Vetter and Schweinfurther, 1987). In the end, the LLMs suggested adding a pressure indicator and\ntransmitter at more critical points. We found this response correct but imprecise; therefore, it's not particularly useful.\nOther LLMs like GPT-40 and Anthropic Haiku 3 also give process-specific recommendations in their responses but\nfewer than Anthropic Sonnet 3.5."}, {"title": "5 Conclusion", "content": "We introduced a methodology for intuitive information retrieval and analysis in P&IDs. The methodology encompasses\nthree steps: 1) graph representation of flowsheets using pyDEXPI, 2) knowledge graph generation, and 3) condensing\ninformation to a high-level knowledge graph and retrieval using LLMs. We evaluated the model responses across three\ndifferent metrics: pattern recognition, search completeness, and knowledge inference. The results demonstrated that\nthis approach enables intuitive information retrieval from P&ID using LLMs. The LLMs also showed the potential\nto read, infer, and generate coherent, contextually accurate information from flowsheets. Additionally, the high-level\ngraph condensing method improved the LLM's ability to retrieve the information from P&ID diagrams. While the\ncurrent result showed a potential for LLMs to recognize the pattern and infer information from the flowsheet, significant\nchallenges remain to improve the accuracy and reliability in the light of hallucinations of LLMs."}]}