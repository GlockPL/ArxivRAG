{"title": "PyTSC: A Unified Platform for Multi-Agent Reinforcement Learning in Traffic Signal Control", "authors": ["Rohit Bokade", "Xiaoning Jin"], "abstract": "Multi-Agent Reinforcement Learning (MARL) presents a promising approach for addressing the com- plexity of Traffic Signal Control (TSC) in urban environments. However, existing platforms for MARL- based TSC research face challenges such as slow simulation speeds and convoluted, difficult-to-maintain codebases. To address these limitations, we introduce PyTSC, a robust and flexible simulation environ- ment that facilitates the training and evaluation of MARL algorithms for TSC. PyTSC integrates multiple simulators, such as SUMO and CityFlow, and offers a streamlined API, empowering researchers to explore a broad spectrum of MARL approaches efficiently. PyTSC accelerates experimentation and provides new opportunities for advancing intelligent traffic management systems in real-world applications.", "sections": [{"title": "Introduction", "content": "Effective Traffic Signal Control (TSC) is fundamental to urban traffic management, responsible for guiding the movement of vehicles through intersections by controlling traffic lights. The primary goals of TSC are to minimize traffic congestion, enhance traffic flow, and improve safety for both vehicles and pedestrians. Poor TSC optimization leads to increased congestion, fuel consumption, and pollution. Longer wait times at signals lead to increased fuel consumption, which not only exacerbates environmental issues through higher emissions but also results in economic losses due to delays. Moreover, inefficient TSC negatively impacts the quality of life in urban areas, contributing to increased noise and air pollution.\nMulti-Agent Reinforcement Learning (MARL) offers a promising approach to tackling these TSC chal- lenges by allowing multiple agents to collaborate within a shared environment. In fully cooperative set- tings, agents work toward a common goal by interacting with their environment and with one another and refine their actions based on the feedback from the environment. MARL's versatility is demonstrated by its successful application in various domains [1]. For instance, in robotics, MARL has been used to coordinate multiple robots in tasks such as search and rescue operations [2, 3]. These successes highlight MARL's potential to solve complex, multi-faceted problems, making it an ideal candidate for optimizing TSC in dynamic and unpredictable urban environments."}, {"title": "Challenges in Current MARL Research for TSC", "content": "The application of MARL to TSC has seen notable advancements [4, 5, 6, 7]. Two simulators, SUMO [8] and CityFlow [9], are widely recognized in this domain, and several open-source tools have been developed to leverage these platforms [10, 11, 12]. Recent efforts have aimed at merging the TSC environments of both simulators and unifying domain metrics, standardizing evaluation criteria and providing a consistent framework for problem formulation in TSC research [12]. Benchmarks tailored for specific datasets in SUMO have also been developed, supporting a diverse range of MARL algorithms [11]."}, {"title": "Contributions", "content": "This work introduces PyTSC, a flexible and efficient simulation environment designed to address these challenges in the MARL-TSC research domain. PyTSC fills a crucial gap in the TSC research ecosystem by providing a platform that simplifies integration, supports cross-simulator comparisons, and offers a clean interface for deploying advanced MARL methods like CTDE. The key contributions of this research are:\n1. Compatibility with Multiple Simulators: PyTSC supports both SUMO and CityFlow simulators, offering a consistent API. This design facilitates the integration of additional simulators in the future.\n2. Optimized for Speed: The Retriever module in PyTSC efficiently gathers required information from the simulator after each time step, minimizing simulator queries and enhancing simulation speeds\u00b9.\n3. Leveraging Graphical MARL Techniques: The NetworkParser module processes network files, ex- tracting data crucial for graphical methods MARL algorithm development (e.g. adjacency matrix, centrality measures, etc.), facilitating the use of advanced graph neural networks in TSC.\n4. Dataset Aggregation: PyTSC aggregates commonly used datasets in MARL-TSC. The environment also features modules like GridGenerator and TripGenerator for synthetic network testing and trip generation, respectively.\n5. Unified MARL Formulation for TSC: While we recognize that we did not develop the Dec-POMDP and Networked MMDP formulations, we advocate for their use in TSC research. These formulations, which allow for decentralized control schemes, are comprehensive and well-suited for deep MARL techniques in TSC. By promoting these formulations, we aim to standardize nomenclature and prob- lem formulations in the TSC field, facilitating clearer communication and collaboration among re- searchers.\n6. Experiments with CTDE MARL Frameworks: As demo, we present a experiments with several of state-of-the-art MARL techniques, which follow Centralized Training and Decentralized Execution (CTDE) paradigm, using the EPymarl library[13]."}, {"title": "The PyTSC Framework", "content": "The PyTSC Framework stands as a meticulously designed structure, bridging the gap between traffic simulations and Multi-Agent Reinforcement Learning (MARL). The library is available at https://github. com/rbokade/pytsc.This strategic design ensures that researchers can delve into algorithmic intricacies without the overhead of integration complexities. The framework's key attributes include:\nSupport for Diverse Simulator Backends: PyTSC integrates a consistent API for two renowned simulator backends: SUMO [8] and CityFlow [9]. Simulator specific classes like ConfigParser, Retriever, Simula- tor, TrafficSignal allow for processing the input from the simulators into a common format which can then be used in the TrafficSignalNetwork environment class. This uniform interface not only maintains consistency across simulators but also offers a foundation for researchers to incorporate additional simula- tor backends as needed.\nCustomizable: The modular framework of PyTSC serves as a comprehensive testbed for experimenting. Researchers can experiment with various traffic signal network settings by choosing from existing modules or extend them to suit their own needs. For example, the TLSFreePhaseSelectLogic and TLSRoundRobin- PhaseSelectLogic allow users to select either adaptive phase selection or fix it to a round robin strategy."}, {"title": "Experiments", "content": "We have curated 10 open source scenarios most commonly used by researchers while applying MARL techniques to TSC. These scenarios, widely adopted by researchers in the field, encompass both synthetic and real-world traffic networks and are compatible with both CityFlow and SUMO simulators. A detailed overview of these scenarios is presented in Table 1.\nThe scenarios in Table 1 offer a mix of synthetic grid networks and real-world traffic settings. Synthetic grids, from 2 \u00d7 2 to 3 \u00d7 3, provide a controlled environment with homogeneous agents for testing MARL techniques. In contrast, real-world scenarios from cities like Cologne, Ingolstadt, and Monaco present ur- ban complexities with heterogeneous agents, ranging from 3 to 16. This diversity ensures thorough testing of MARL across various scales. Additionally, the scenarios' compatibility with both SUMO and CityFlow allows researchers flexibility in simulation choices. Overall, these scenarios form a robust benchmarking platform for MARL in TSC, covering diverse network types and complexities."}, {"title": "Traffic Signals as Agents", "content": "In MARL under fully-cooperative settings, agents learn to achieve a common goal or maximize their indi- vidual rewards through interaction with the environment and each other. In the context of TSC, MARL provides a framework for developing traffic signal control strategies that can adapt to changing traffic pat- terns and optimize flow. Traffic signals are modeled as agents whose goal is to choose control the traffic lights to minimize congestion throughout the traffic signal network."}, {"title": "Decentralized Partially Observable Markov Decision Processes (Dec-POMDPs)", "content": "Dec-POMDPs model multi-agent systems [17] where agents interact in a decentralized way under limited visibility. This is pertinent for analyzing traffic signal control."}, {"title": "Observation representation", "content": "Each traffic signal has a limited range of vision of 50 meters, within which it can obtain information related to the traffic flow. This is equivalent to the sensory information that can be obtained from practical common sensors. The observation for each traffic signal consists of: the number of vehicles {\\(m_{i}\\)}_{l \\in L_{i}}, the average normalized speed of the vehicles {\\(v_{i}\\)}_{l \\in L_{i}}, the number of halted vehicles (queue lengths) {\\(q_{i}\\)}_{l \\in L_{i}}, and the current phase ID of the traffic signal, where \\(L_{i} \\in L\\) are the incoming lanes for a traffic signal i and L is a set of all the lanes in the network."}, {"title": "Action Representation", "content": "For each traffic signal i, we define its action \\(a_{i}\\) as choosing one green phase from a list of available phases. A traffic signal can select any green phase from its list or keep its current one, but it must then follow the next yellow phase, which is enforced by the environment. The action selection interval and the yellow phases are fixed for a duration of 5 simulation seconds."}, {"title": "Reward", "content": "Various metrics are used for rewards in traffic signal control settings. In our study, we chose queue length \\(q_{1}\\) as the performance metric of the traffic signal controller due to its simplistic nature and its property of representing an instantaneous feedback signal. We define the objective function as minimizing the number of vehicles stopped throughout the network\nwhere \\(r_{i} \\in R\\) is the global reward and \\(l \\in L\\) represents the lanes in the network."}, {"title": "MARL Frameworks", "content": "For benchmarking CTDE algorithms in TSC, we employ EPymarl, an extension of the widely recognized Pymarl library. EPymarl encompasses a broad spectrum of algorithms under the reinforcement learning paradigms of Q-learning, actor-critic, and policy gradient methods. Our selection focuses on the most prevalent MARL frameworks, as detailed in Table 2."}, {"title": "Evaluation Protocols", "content": "The performance of the Multi-Agent Reinforcement Learning (MARL) algorithms was evaluated through a carefully designed training and testing process. Each episode during training was constrained to 360 simulation seconds, which corresponds to 72 time steps. This time frame was selected to ensure a balance between simulation length and computational efficiency. Therefore, one simulation hour consisted of 10 episodes, which allowed the MARL algorithms to interact with the environment multiple times within a relatively short period (see Table 3 for a detailed breakdown of time steps and simulation periods)."}, {"title": "Results", "content": "The performance of various MARL algorithms was evaluated across different environments using SUMO and CityFlow simulators. These environments ranged from simple synthetic grid networks to more com- plex real-world networks, such as Jinan, Hangzhou, Pasubio, and Cologne. The results highlight several key factors that affect algorithmic performance, including network topology and the simulation platform."}, {"title": "Performance on Synthetic Grid Networks", "content": "In synthetic grid networks (2x2 and 3x3), centralized algorithms like QMIX and MAA2C outperform de- centralized approaches, particularly in the SUMO environment. As shown in Figure 4, MAA2C and QMIX exhibit higher rewards over time, indicating their ability to effectively manage traffic in complex scenarios"}, {"title": "Impact of Real-World Topology on Algorithm Performance", "content": "The evaluation on real-world networks reveals important insights into how network topology influences algorithm performance.\nJinan and Hangzhou: In these larger, more congested networks, centralized algorithms like QMIX and MAA2C outperform decentralized approaches such as IQL and IA2C. The results highlight the importance of centralized training across traffic signals is critical for managing complex flows of vehicles in dense urban environments. The superior performance of centralized methods in these scenarios reflects their ability to adapt traffic signals in a coordinated manner, optimizing routes and reducing overall delay."}, {"title": "Insights from Performance Metrics", "content": "Table 7 summarizes key performance metrics, such as queue lengths, delays, and travel times, across the evaluated networks. The results reveal several key trends:\n\u2022 Queue Length: Centralized algorithms generally achieve shorter queue lengths, particularly in more complex networks like Pasubio and Cologne 8, where coordination across intersections is critical for maintaining traffic flow.\n\u2022 Delays: Across all scenarios, centralized approaches reduce delays more effectively than decentral- ized ones. The difference is especially notable in SUMO environments, where dynamic routing allows centralized algorithms to adapt to real-time traffic conditions more effectively.\n\u2022 Travel Time: In networks with higher complexity, such as Jinan and Hangzhou, centralized ap- proaches minimize travel time more effectively than decentralized methods. However, in simpler networks like CityFlow's 2x2 grid, the travel times across all algorithms are comparable, suggesting that centralized coordination offers diminishing returns in less complex environments."}, {"title": "Topology-Dependent Performance", "content": "The topology of the traffic network plays a crucial role in determining the success of different MARL al- gorithms. In simpler, grid-like networks, such as the 3-signal Cologne setup, decentralized algorithms can perform on par with centralized methods. However, as network complexity increases, the advantages of centralized coordination become more pronounced. In networks like Pasubio and Ingolstadt, which feature irregular layouts and complex traffic flows, centralized approaches like QMIX and MAA2C outperform de- centralized methods by a significant margin.\nThis suggests that the choice of algorithm should be informed by the specific characteristics of the traffic network. Centralized algorithms are more suitable for complex, irregular networks with high traffic density, while decentralized approaches may suffice in simpler, more uniform networks."}, {"title": "Conclusion", "content": "In this work, we introduced PyTSC, a versatile and extensible library designed to address the significant gaps in MARL-based Traffic Signal Control (TSC) research. By enabling compatibility with multiple simu-"}, {"title": "Future Work", "content": "Looking ahead, PyTSC opens several avenues for future development and exploration:\n\u2022 Incorporation of Additional MARL Algorithms: Future iterations of PyTSC will include policy- based MARL algorithms such as MADDPG, IPPO, and MAPPO, expanding its capabilities for more complex traffic control strategies.\n\u2022 Diverse Traffic Flow Generation: We aim to introduce more diverse traffic flow generation models, including both synthetic and real-world flow patterns, to better simulate the variety of traffic scenar- ios seen in urban environments.\n\u2022 Synthetic Network Generation Modules: Expanding the tools for generating synthetic traffic sig- nal networks will enable researchers to test MARL algorithms in even more controlled and complex environments, beyond the existing benchmarks.\n\u2022 Tailored Neural Network Architectures: While the current version of PyTSC relies on out-of-the-box neural architectures, future updates will explore the integration of specialized models, such as Graph Neural Networks (GNNs), that can leverage the graphical structure of traffic networks to optimize decision-making.\n\u2022 Extending Simulator Compatibility: We also plan to integrate additional traffic simulators into the PyTSC framework, ensuring that the platform remains adaptable to emerging technologies and re- search needs in the field of intelligent transportation systems.\nBy continuously evolving PyTSC, we aim to provide a robust and dynamic platform that will foster in- novation in MARL-based traffic signal control and further enhance the real-world applicability of these technologies."}]}