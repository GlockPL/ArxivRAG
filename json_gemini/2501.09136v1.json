{"title": "AGENTIC RETRIEVAL-AUGMENTED GENERATION: A SURVEY ON AGENTIC RAG", "authors": ["Aditi Singh", "Abul Ehtesham", "Saket Kumar", "Tala Talaei Khoei"], "abstract": "Large Language Models (LLMs) have revolutionized artificial intelligence (AI) by enabling human-\nlike text generation and natural language understanding. However, their reliance on static training\ndata limits their ability to respond to dynamic, real-time queries, resulting in outdated or inaccurate\noutputs. Retrieval-Augmented Generation (RAG) has emerged as a solution, enhancing LLMs by\nintegrating real-time data retrieval to provide contextually relevant and up-to-date responses. Despite\nits promise, traditional RAG systems are constrained by static workflows and lack the adaptability\nrequired for multi-step reasoning and complex task management.\nAgentic Retrieval-Augmented Generation (Agentic RAG) transcends these limitations by embed-\nding autonomous AI agents into the RAG pipeline. These agents leverage agentic design pat-\nterns-reflection, planning, tool use, and multi-agent collaboration-to dynamically manage retrieval\nstrategies, iteratively refine contextual understanding, and adapt workflows to meet complex task\nrequirements. This integration enables Agentic RAG systems to deliver unparalleled flexibility,\nscalability, and context-awareness across diverse applications.\nThis survey provides a comprehensive exploration of Agentic RAG, beginning with its foundational\nprinciples and the evolution of RAG paradigms. It presents a detailed taxonomy of Agentic RAG\narchitectures, highlights key applications in industries such as healthcare, finance, and education, and\nexamines practical implementation strategies. Additionally, it addresses challenges in scaling these\nsystems, ensuring ethical decision-making, and optimizing performance for real-world applications,\nwhile providing detailed insights into frameworks and tools for implementing Agentic RAG.", "sections": [{"title": "1 Introduction", "content": "Large Language Models (LLMs) [1, 2] [3], such as OpenAI's GPT-4, Google's PaLM, and Meta's LLaMA, have signifi-cantly transformed artificial intelligence (AI) with their ability to generate human-like text and perform complex natural"}, {"title": "2 Foundations of Retrieval-Augmented Generation", "content": ""}, {"title": "2.1 Overview of Retrieval-Augmented Generation (RAG)", "content": "Retrieval-Augmented Generation (RAG) represents a significant advancement in the field of artificial intelligence,\ncombining the generative capabilities of Large Language Models (LLMs) with real-time data retrieval. While LLMs\nhave demonstrated remarkable capabilities in natural language processing, their reliance on static pre-trained data\noften results in outdated or incomplete responses. RAG addresses this limitation by dynamically retrieving relevant\ninformation from external sources and incorporating it into the generative process, enabling contextually accurate and\nup-to-date outputs."}, {"title": "2.2 Core Components of RAG", "content": "The architecture of RAG systems integrates three primary components:\n\u2022 Retrieveal: Responsible for querying external data sources such as knowledge bases, APIs, or vector databases.\nAdvanced retrievers leverage dense vector search and transformer-based models to improve retrieval precision\nand semantic relevance.\n\u2022 Augmentation: Processes retrieved data, extracting and summarizing the most relevant information to align\nwith the query context."}, {"title": "2.3 Evolution of RAG Paradigms", "content": "The field of Retrieval-Augmented Generation (RAG) has evolved significantly to address the increasing complexity of\nreal-world applications, where contextual accuracy, scalability, and multi-step reasoning are critical. What began as\nsimple keyword-based retrieval has transitioned into sophisticated, modular, and adaptive systems capable of integrating\ndiverse data sources and autonomous decision-making processes. This evolution underscores the growing need for\nRAG systems to handle complex queries efficiently and effectively.\nThis section examines the progression of RAG paradigms, presenting key stages of development-Na\u00efve RAG,\nAdvanced RAG, Modular RAG, Graph RAG, and Agentic RAG alongside their defining characteristics, strengths, and\nlimitations. By understanding the evolution of these paradigms, readers can appreciate the advancements made in\nretrieval and generative capabilities and their application in various domains"}, {"title": "2.3.1 Na\u00efve RAG", "content": "Na\u00efve RAG [23] represents the foundational implementation of retrieval-augmented generation.  These systems\nrely on simple keyword-based retrieval techniques, such as TF-IDF and BM25, to fetch documents from static datasets.\nThe retrieved documents are then used to augment the language model's generative capabilities.\nNa\u00efve RAG is characterized by its simplicity and ease of implementation, making it suitable for tasks involving\nfact-based queries with minimal contextual complexity. However, it suffers from several limitations:\n\u2022 Lack of Contextual Awareness: Retrieved documents often fail to capture the semantic nuances of the query\ndue to reliance on lexical matching rather than semantic understanding.\n\u2022 Fragmented Outputs: The absence of advanced preprocessing or contextual integration often leads to\ndisjointed or overly generic responses.\n\u2022 Scalability Issues: Keyword-based retrieval techniques struggle with large datasets, often failing to identify\nthe most relevant information."}, {"title": "2.3.2 Advanced RAG", "content": "Advanced RAG [23] systems build upon the limitations of Na\u00efve RAG by incorporating semantic understanding and\nenhanced retrieval techniques.  These systems leverage dense retrieval models, such as Dense Passage Retrieval\n(DPR), and neural ranking algorithms to improve retrieval precision.\nKey features of Advanced RAG include:\n\u2022 Dense Vector Search: Queries and documents are represented in high-dimensional vector spaces, enabling\nbetter semantic alignment between the user query and retrieved documents.\n\u2022 Contextual Re-Ranking: Neural models re-rank retrieved documents to prioritize the most contextually\nrelevant information.\n\u2022 Iterative Retrieval: Advanced RAG introduces multi-hop retrieval mechanisms, enabling reasoning across\nmultiple documents for complex queries.\nThese advancements make Advanced RAG suitable for applications requiring high precision and nuanced understanding,\nsuch as research synthesis and personalized recommendations. However, challenges such as computational overhead\nand limited scalability persist, particularly when dealing with large datasets or multi-step queries."}, {"title": "2.3.3 Modular RAG", "content": "Modular RAG [23] represents the latest evolution in RAG paradigms, emphasizing flexibility and customization.\nThese systems decompose the retrieval and generation pipeline into independent, reusable components, enabling\ndomain-specific optimization and task adaptability.  Key innovations in Modular RAG include:\n\u2022 Hybrid Retrieval Strategies: Combining sparse retrieval methods (e.g., a sparse encoder-BM25) with dense\nretrieval techniques [24] (e.g., DPR - Dense Passage Retrieval ) to maximize accuracy across diverse query\ntypes.\n\u2022 Tool Integration: Incorporating external APIs, databases, or computational tools to handle specialized tasks,\nsuch as real-time data analysis or domain-specific computations."}, {"title": "2.3.4 Graph RAG", "content": "Graph RAG [19] extends traditional Retrieval-Augmented Generation systems by integrating graph-based data structures\nas illustrated in Figure 5. These systems leverage the relationships and hierarchies within graph data to enhance multi-hop reasoning and contextual enrichment. By incorporating graph-based retrieval, Graph RAG enables richer and moreaccurate generative outputs, particularly for tasks requiring relational understanding.\nGraph RAG is characterized by its ability to:\n\u2022 Node Connectivity: Captures and reasons over relationships between entities.\n\u2022 Hierarchical Knowledge Management: Handles structured and unstructured data through graph-basedhierarchies.\n\u2022 Context Enrichment: Adds relational understanding by leveraging graph-based pathways.\nHowever, Graph RAG has some limitations:\n\u2022 Limited Scalability: The reliance on graph structures can restrict scalability, especially with extensive datasources.\n\u2022 Data Dependency: High-quality graph data is essential for meaningful outputs, limiting its applicability inunstructured or poorly annotated datasets.\n\u2022 Complexity of Integration: Integrating graph data with unstructured retrieval systems increases design andimplementation complexity.\nGraph RAG is well-suited for applications such as healthcare diagnostics, legal research, and other domains wheredreasoning over structured relationships is crucial."}, {"title": "2.3.5 Agentic RAG", "content": "Agentic RAG represents a paradigm shift by introducing autonomous agents capable of dynamic decision-making\nand workflow optimization. Unlike static systems, Agentic RAG employs iterative refinement and adaptive retrieval\nstrategies to address complex, real-time, and multi-domain queries. This paradigm leverages the modularity of retrieval\nand generation processes while introducing agent-based autonomy.\nKey characteristics of Agentic RAG include:\n\u2022 Autonomous Decision-Making: Agents independently evaluate and manage retrieval strategies based onquery complexity.\n\u2022 Iterative Refinement: Incorporates feedback loops to improve retrieval accuracy and response relevance.\n\u2022 Workflow Optimization: Dynamically orchestrates tasks, enabling efficiency in real-time applications.\nDespite its advancements, Agentic RAG faces some challenges:\n\u2022 Coordination Complexity: Managing interactions between agents requires sophisticated orchestrationmechanisms.\n\u2022 Computational Overhead: The use of multiple agents increases resource requirements for complex work-flows.\n\u2022 Scalability Limitations: While scalable, the dynamic nature of the system can strain computational resourcesfor high query volumes.\nAgentic RAG excels in domains like customer support, financial analytics, and adaptive learning platforms, where\ndynamic adaptability and contextual precision are paramount."}, {"title": "2.4 Challenges and Limitations of Traditional RAG Systems", "content": "Traditional Retrieval-Augmented Generation (RAG) systems have significantly expanded the capabilities of Large\nLanguage Models (LLMs) by integrating real-time data retrieval. However, these systems still face critical challenges\nthat hinder their effectiveness in complex, real-world applications. The most notable limitations revolve around\ncontextual integration, multi-step reasoning, and scalability and latency issues."}, {"title": "2.4.1 Contextual Integration", "content": "Even when RAG systems successfully retrieve relevant information, they often struggle to seamlessly incorporate it\ninto generated responses. The static nature of retrieval pipelines and limited contextual awareness lead to fragmented,\ninconsistent, or overly generic outputs.\nExample: A query such as, \"What are the latest advancements in Alzheimer's research and their implications for\nearly-stage treatment?\" might yield relevant research papers and medical guidelines. However, traditional RAG"}, {"title": "2.4.2 Multi-Step Reasoning", "content": "Many real-world queries require iterative or multi-hop reasoning-retrieving and synthesizing information across\nmultiple steps. Traditional RAG systems are often ill-equipped to refine retrieval based on intermediate insights or user\nfeedback, resulting in incomplete or disjointed responses.\nExample: A complex query like, \"What lessons from renewable energy policies in Europe can be applied to developing\nnations, and what are the potential economic impacts?\" demands the orchestration of multiple types of information,\nincluding policy data, contextualization for developing regions, and economic analysis. Traditional RAG systems\ntypically fail to connect these disparate elements into a cohesive response."}, {"title": "2.4.3 Scalability and Latency Issues", "content": "As the volume of external data sources grows, querying and ranking large datasets becomes increasingly computationally\nintensive. This results in significant latency, which undermines the system's ability to provide timely responses in\nreal-time applications.\nExample: In time-sensitive settings such as financial analytics or live customer support, delays caused by querying\nmultiple databases or processing large document sets can hinder the system's overall utility. For example, a delay in\nretrieving market trends during high-frequency trading could result in missed opportunities."}, {"title": "2.5 Agentic RAG: A Paradigm Shift", "content": "Traditional RAG systems, with their static workflows and limited adaptability, often struggle to handle dynamic, multi-step reasoning and complex real-world tasks. These limitations have spurred the integration of agentic intelligence,resulting in Agentic RAG. By incorporating autonomous agents capable of dynamic decision-making, iterative reasoning,and adaptive retrieval strategies, Agentic RAG builds on the modularity of earlier paradigms while overcoming theirinherent constraints. This evolution enables more complex, multi-domain tasks to be addressed with enhanced precisionand contextual understanding, positioning Agentic RAG as a cornerstone for next-generation AI applications. Inparticular, Agentic RAG systems reduce latency through optimized workflows and refine outputs iteratively, tacklingthe very challenges that have historically hindered traditional RAG's scalability and effectiveness."}, {"title": "3 Core Principles and Background of Agentic Intelligence", "content": "Agentic Intelligence forms the foundation of Agentic Retrieval-Augmented Generation (RAG) systems, enabling them\nto transcend the static and reactive nature of traditional RAG. By integrating autonomous agents capable of dynamic\ndecision-making, iterative reasoning, and collaborative workflows, Agentic RAG systems exhibit enhanced adaptability\nand precision. This section explores the core principles underpinning agentic intelligence."}, {"title": "Components of an AI Agent", "content": "In essence, an AI agent comprises:\n\u2022 LLM (with defined Role and Task): Serves as the agent's primary reasoning engine and dialogue interface.It interprets user queries, generates responses, and maintains coherence.\n\u2022 Memory (Short-Term and Long-Term): Captures context and relevant data across interactions. Short-termmemory [25] tracks immediate conversation state, while long-term memory [25]stores accumulated knowledgeand agent experiences.\n\u2022 Planning (Reflection & Self-Critique): Guides the agent's iterative reasoning process through reflection,query routing, or self-critique[26], ensuring that complex tasks are broken down effectively [15].\n\u2022 Tools Vector Search, Web Search, APIs, etc.): Expands the agent's capabilities beyond text generation,enabling access to external resources, real-time data, or specialized computations."}, {"title": "3.1 Agentic Patterns", "content": "Agentic Patterns [27, 28] provide structured methodologies that guide the behavior of agents in Agentic Retrieval-Augmented Generation (RAG) systems. These patterns enable agents to dynamically adapt, plan, and collaborate,ensuring that the system can handle complex, real-world tasks with precision and scalability. Four key patterns underpinagentic workflows:"}, {"title": "3.1.1 Reflection", "content": "Reflection is a foundational design pattern in agentic workflows, enabling agents to iteratively evaluate and refine theiroutputs. By incorporating self-feedback mechanisms, agents can identify and address errors, inconsistencies, and areasfor improvement, enhancing performance across tasks like code generation, text production, and question answering (as shown in Figure 7). In practical use, Reflection involves prompting an agent to critique its outputs for correctness,style, and efficiency, then incorporating this feedback into subsequent iterations. External tools, such as unit tests orweb searches, can further enhance this process by validating results and highlighting gaps.\nIn multi-agent systems, Reflection can involve distinct roles, such as one agent generating outputs while anothercritiques them, fostering collaborative improvement. For instance, in legal research, agents can iteratively refineresponses by re-evaluating retrieved case law, ensuring accuracy and comprehensiveness. Reflection has demonstratedsignificant performance improvements in studies like Self-Refine [29], Reflexion [30], and CRITIC [26]."}, {"title": "3.1.2 Planning", "content": "Planning [15] is a key design pattern in agentic workflows that enables agents to autonomously decompose complex tasksinto smaller, manageable subtasks. This capability is essential for multi-hop reasoning and iterative problem-solving indynamic and uncertain scenarios as shown in Figure 8.\nBy leveraging planning, agents can dynamically determine the sequence of steps needed to accomplish a larger objective.This adaptability allows agents to handle tasks that cannot be predefined, ensuring flexibility in decision-making.While powerful, Planning can produce less predictable outcomes compared to deterministic workflows like Reflection.Planning is particularly suited for tasks that require dynamic adaptation, where predefined workflows are insufficient.As the technology matures, its potential to drive innovative applications across domains will continue to grow."}, {"title": "3.1.3 Tool Use", "content": "Tool Use enables agents to extend their capabilities by interacting with external tools, APIs, or computational resourcesas illustrated in 9. This pattern allows agents to gather information, perform computations, and manipulate data beyondtheir pre-trained knowledge. By dynamically integrating tools into workflows, agents can adapt to complex tasks andprovide more accurate and contextually relevant outputs.\nModern agentic workflows incorporate tool use for a variety of applications, including information retrieval, computa-tional reasoning, and interfacing with external systems. The implementation of this pattern has evolved significantlywith advancements like GPT-4's function calling capabilities and systems capable of managing access to numerousools. These developments facilitate sophisticated workflows where agents autonomously select and execute the mostrelevant tools for a given task.\nWhile tool use significantly enhances agentic workflows, challenges remain in optimizing the selection of tools,particularly in contexts with a large number of available options. Techniques inspired by retrieval-augmented generation(RAG), such as heuristic-based selection, have been proposed to address this issue."}, {"title": "3.1.4 Multi-Agent", "content": "Multi-agent collaboration [16] is a key design pattern in agentic workflows that enables task specialization and parallelprocessing. Agents communicate and share intermediate results, ensuring the overall workflow remains efficient andcoherent. By distributing subtasks among specialized agents, this pattern improves the scalability and adaptabilityof complex workflows. Multi-agent systems allow developers to decompose intricate tasks into smaller, manageableubtasks assigned to different agents. This approach not only enhances task performance but also provides a robustramework for managing complex interactions. Each agent operates with its own memory and workflow, which caninclude the use of tools, reflection, or planning, enabling dynamic and collaborative problem-solving (see Figure 10).\nWhile multi-agent collaboration offers significant potential, it is a less predictable design pattern compared to moremature workflows like Reflection and Tool Use. Nevertheless, emerging frameworks such as AutoGen, Crew AI, andLangGraph are providing new avenues for implementing effective multi-agent solutions."}, {"title": "4 Taxonomy of Agentic RAG Systems", "content": "Agentic Retrieval-Augmented Generation (RAG) systems can be categorized into distinct architectural frameworksbased on their complexity and design principles. These include single-agent architectures, multi-agent systems, and hi-erarchical agentic architectures. Each framework is tailored to address specific challenges and optimize performance fordiverse applications. This section provides a detailed taxonomy of these architectures, highlighting their characteristics,strengths, and limitations."}, {"title": "4.1 Single-Agent Agentic RAG: Router", "content": "A Single-Agent Agentic RAG: [31] serves as a centralized decision-making system where a single agent manages theretrieval, routing, and integration of information (as shown in Figure. 11). This architecture simplifies the system byconsolidating these tasks into one unified agent, making it particularly effective for setups with a limited number ofools or data sources."}, {"title": "Workflow", "content": "1. Query Submission and Evaluation: The process begins when a user submits a query. A coordinatingagent (or master retrieval agent) receives the query and analyzes it to determine the most suitable sources ofinformation.\n2. Knowledge Source Selection: Based on the query's type, the coordinating agent chooses from a variety ofretrieval options:\n\u2022 Structured Databases: For queries requiring tabular data access, the system may use a Text-to-SQLengine that interacts with databases like PostgreSQL or MySQL.\n\u2022 Semantic Search: When dealing with unstructured information, it retrieves relevant documents (e.g.,PDFs, books, organizational records) using vector-based retrieval.\n\u2022 Web Search: For real-time or broad contextual information, the system leverages a web search tool toaccess the latest online data.\n\u2022 Recommendation Systems: For personalized or contextual queries, the system taps into recommendationengines that provide tailored suggestions.\n3. Data Integration and LLM Synthesis: Once the relevant data is retrieved from the chosen sources, it ispassed to a Large Language Model (LLM). The LLM synthesizes the gathered information, integrating insightsfrom multiple sources into a coherent and contextually relevant response.\n4. Output Generation: Finally, the system delivers a comprehensive, user-facing answer that addresses theoriginal query. This response is presented in an actionable, concise format and may optionally includereferences or citations to the sources used."}, {"title": "Key Features and Advantages", "content": "\u2022 Centralized Simplicity: A single agent handles all retrieval and routing tasks, making the architecturestraightforward to design, implement, and maintain.\n\u2022 Efficiency & Resource Optimization: With fewer agents and simpler coordination, the system demandsfewer computational resources and can handle queries more quickly.\n\u2022 Dynamic Routing: The agent evaluates each query in real-time, selecting the most appropriate knowledgeource (e.g., structured DB, semantic search, web search).\n\u2022 Versatility Across Tools: Supports a variety of data sources and external APIs, enabling both structured andunstructured workflows.\n\u2022 Ideal for Simpler Systems: Suited for applications with well-defined tasks or limited integration requirementse.g., document retrieval, SQL-based workflows)."}, {"title": "4.2 Multi-Agent Agentic RAG Systems", "content": "Multi-Agent RAG [31] represents a modular and scalable evolution of single-agent architectures, designed to handlecomplex workflows and diverse query types by leveraging multiple specialized agents (as shown in Figure 12). Insteadof relying on a single agent to manage all tasks reasoning, retrieval, and response generation-this system distributesesponsibilities across multiple agents, each optimized for a specific role or data source."}, {"title": "Workflow", "content": "1. Query Submission: The process begins with a user query, which is received by a coordinator agent or masterretrieval agent. This agent acts as the central orchestrator, delegating the query to specialized retrieval agentsased on the query's requirements.\n2. Specialized Retrieval Agents: The query is distributed among multiple retrieval agents, each focusing on apecific type of data source or task. Examples include:\n\u2022 Agent 1: Handles structured queries, such as interacting with SQL-based databases like PostgreSQL orMySQL.\n\u2022 Agent 2: Manages semantic searches for retrieving unstructured data from sources like PDFs, books, orinternal records.\n\u2022 Agent 3: Focuses on retrieving real-time public information from web searches or APIs.\n\u2022 Agent 4: Specializes in recommendation systems, delivering context-aware suggestions based on userbehavior or profiles.\n3. Tool Access and Data Retrieval: Each agent routes the query to the appropriate tools or data sources withints domain, such as:\n\u2022 Vector Search: For semantic relevance.\n\u2022 Text-to-SQL: For structured data.\n\u2022 Web Search: For real-time public information.\n\u2022 APIs: For accessing external services or proprietary systems.\nThe retrieval process is executed in parallel, allowing for efficient processing of diverse query types.\n4. Data Integration and LLM Synthesis: Once retrieval is complete, the data from all agents is passed to aLarge Language Model (LLM). The LLM synthesizes the retrieved information into a coherent and contextuallyelevant response, integrating insights from multiple sources seamlessly.\n5. Output Generation: The system generates a comprehensive response, which is delivered back to the user inan actionable and concise format."}, {"title": "Key Features and Advantages", "content": "\u2022 Modularity: Each agent operates independently, allowing for seamless addition or removal of agents based onsystem requirements.\n\u2022 Scalability: Parallel processing by multiple agents enables the system to handle high query volumes efficiently.\n\u2022 Task Specialization: Each agent is optimized for a specific type of query or data source, improving accuracynd retrieval relevance."}, {"title": "Challenges", "content": "\u2022 Coordination Complexity: Managing inter-agent communication and task delegation requires sophisticatedorchestration mechanisms.\n\u2022 Computational Overhead: Parallel processing of multiple agents can increase resource usage.\n\u2022 Data Integration: Synthesizing outputs from diverse sources into a cohesive response is non-trivial andequires advanced LLM capabilities."}, {"title": "4.3 Hierarchical Agentic RAG Systems", "content": "Hierarchical Agentic RAG: [17] systems employ a structured, multi-tiered approach to information retrieval androcessing, enhancing both efficiency and strategic decision-making as shown in Figure 13. Agents are organized ina hierarchy, with higher-level agents overseeing and directing lower-level agents. This structure enables multi-leveldecision-making, ensuring that queries are handled by the most appropriate resources."}, {"title": "Workflow", "content": "1. Query Reception: A user submits a query, received by a top-tier agent responsible for initial assessment anddelegation.\n2. Strategic Decision-Making: The top-tier agent evaluates the query's complexity and decides which subor-dinate agents or data sources to prioritize. Certain databases, APIs, or retrieval tools may be deemed morereliable or relevant based on the query's domain.\n3. Delegation to Subordinate Agents: The top-tier agent assigns tasks to lower-level agents specialized inarticular retrieval methods (e.g., SQL databases, web search, or proprietary systems). These agents executetheir assigned tasks independently.\n4. Aggregation and Synthesis: The results from subordinate agents are collected and integrated by the higher-evel agent, which synthesizes the information into a coherent response.\n5. Response Delivery: The final, synthesized answer is returned to the user, ensuring that the response is bothomprehensive and contextually relevant."}, {"title": "Key Features and Advantages", "content": "\u2022 Strategic Prioritization: Top-tier agents can prioritize data sources or tasks based on query complexity,reliability, or context."}, {"title": "Challenges", "content": "\u2022 Coordination Complexity: Maintaining robust inter-agent communication across multiple levels can increaseorchestration overhead.\n\u2022 Resource Allocation: Efficiently distributing tasks among tiers to avoid bottlenecks is non-trivial."}, {"title": "4.4 Agentic Corrective RAG", "content": "Corrective RAG: introduces mechanisms to self-correct retrieval results, enhancing document utilization and improvingesponse generation quality as demonstrated in Figure 14. By embedding intelligent agents into the workflow, Corrective"}, {"title": "Key Idea of Corrective RAG", "content": "The core principle of Corrective RAG lies in its ability to evaluateretrieved documentsdynamically, perform corrective actions, and refine queries to enhance the quality of generated responses. CorrectiveRAG adjusts its approach as follows:\n\u2022 Document Relevance Evaluation: Retrieved documents are assessed for relevance by the Relevance Evalua-tion Agent. Documents below the relevance threshold trigger corrective steps.\n\u2022 Query Refinement and Augmentation: Queries are refined by the Query Refinement Agent, which leveragessemantic understanding to optimize retrieval for better results.\n\u2022 Dynamic Retrieval from External Sources: When context is insufficient, the External Knowledge RetrievalAgent performs web searches or accesses alternative data sources to supplement the retrieved documents.\n\u2022 Response Synthesis: All validated and refined information is passed to the Response Synthesis Agent for finalresponse generation."}, {"title": "Workflow", "content": "The Corrective RAG system is built on five key agents:\n1. Context Retrieval Agent: Responsible for retrieving initial context documents from a vector database.\n2. Relevance Evaluation Agent: Assesses the retrieved documents for relevance and flags any irrelevant orambiguous documents for corrective actions.\n3. Query Refinement Agent: Rewrites queries to improve retrieval, leveraging semantic understanding tooptimize results.\n4. External Knowledge Retrieval Agent: Performs web searches or accesses alternative data sources when thecontext documents are insufficient.\n5. Response Synthesis Agent: Synthesizes all validated information into a coherent and accurate response."}, {"title": "Key Features and Advantages", "content": "\u2022 Iterative Correction: Ensures high response accuracy by dynamically identifying and correcting irrelevant orambiguous retrieval results.\n\u2022 Dynamic Adaptability: Incorporates real-time web searches and query refinement for enhanced retrievalprecision.\n\u2022 Agentic Modularity: Each agent performs specialized tasks, ensuring efficient and scalable operation."}, {"title": "4.5 Adaptive Agentic RAG", "content": "Adaptive Retrieval-Augmented Generation (Adaptive RAG) [34] enhances the flexibility and efficiency of largeanguage models (LLMs) by dynamically adjusting query handling strategies based on the complexity of the incomingquery. Unlike static retrieval workflows, Adaptive RAG [35] employs a classifier to assess query complexity anddetermine the most appropriate approach, ranging from single-step retrieval to multi-step reasoning, or even bypassingetrieval altogether for straightforward queries as illustrated in Figure 15."}, {"title": "Key Idea of Adaptive RAG", "content": "The core principle of Adaptive RAG lies in its ability to dynamically tailoretrievalstrategies based on the complexity of the query. Adaptive RAG adjusts its approach as follows:\n\u2022 Straightforward Queries: For fact-based questions that require no additional retrieval (e.g., \"What is theboiling point of water?\"), the system directly generates an answer using pre-existing knowledge.\n\u2022 Simple Queries: For moderately complex tasks requiring minimal context (e.g., \"What is the status of mylatest electricity bill?\"), the system performs a single-step retrieval to fetch the relevant details.\n\u2022 Complex Queries: For multi-layered queries requiring iterative reasoning (e.g., \"How has the population ofCity X changed over the past decade, and what are the contributing factors?\"), the system employs multi-stepretrieval, progressively refining intermediate results to provide a comprehensive answer."}, {"title": "Workflow", "content": "The Adaptive RAG system is built on three primary components:\n1. Classifier Role:\n\u2022 A smaller language model analyzes the query to predict its complexity."}, {"title": "2. Dynamic Strategy Selection", "content": "\u2022 For straightforward queries, the system avoids unnecessary retrieval, directly leveraging the LLM forresponse generation.\n\u2022 For simple queries, it employs a single-step retrieval process to fetch relevant context.\n\u2022 For complex queries, it activates multi-step retrieval to ensure iterative refinement and enhanced reasoning."}, {"title": "3. LLM Integration", "content": "\u2022 The LLM synthesizes retrieved information into a coherent response.\n\u2022 Iterative interactions between the LLM and the classifier enable refinement for complex queries."}, {"title": "Key Features and Advantages", "content": "\u2022 Dynamic Adaptability: Adjusts retrieval strategies based on query complexity, optimizing both computationalefficiency and response accuracy.\n\u2022 Resource Efficiency: Minimizes unnecessary overhead for simple queries while ensuring thorough processingfor complex ones.\n\u2022 Enhanced Accuracy: Iterative refinement ensures that complex queries are resolved with high precision.\n\u2022 Flexibility: Can be extended to incorporate additional pathways, such as domain-specific tools or externalAPIs."}, {"title": "4.6 Graph-Based Agentic RAG", "content": ""}, {"title": "4.6.1 Agent-G: Agentic Framework for Graph RAG", "content": "Agent-G [8]: introduces a novel agentic architecture that integrates graph knowledge bases with unstructured documentretrieval. By combining structured and unstructured data sources, this framework enhances retrieval-augmentedgeneration (RAG) systems with improved reasoning and retrieval accuracy. It employs modular retriever banks,dynamic agent interaction, and feedback loops to ensure high-quality outputs as shown in Figure 16."}, {"title": "Key Idea of Agent-G", "content": "The core principle of Agent-G lies in its ability to dynamically assign retrieval tasks tospecialized agents, leveraging both graph knowledge bases and textual documents. Agent-G adjusts its retrieval strategyas follows:\n\u2022 Graph Knowledge Bases: Structured data is used to extract relationships, hierarchies, and connections (e.g.,disease-to-symptom mappings in healthcare).\n\u2022 Unstructured Documents: Traditional text retrieval systems provide contextual information to complementgraph data.\n\u2022 Critic Module: Evaluates the relevance and quality of retrieved information, ensuring alignment with thequery.\n\u2022 Feedback Loops: Refines retrieval and synthesis through iterative validation and re-querying."}, {"title": "Workflow", "content": "The Agent-G system is built on four primary components:\n1. Retriever Bank:\n\u2022 A modular set of agents specializes in retrieving graph-based or unstructured data.\n\u2022 Agents dynamically select relevant sources based on the query's requirements.\n2. Critic Module:\n\u2022 Validates retrieved data for relevance and quality.\n\u2022 Flags low-confidence results for re-retrieval or refinement.\n3. Dynamic Agent Interaction:\n\u2022 Task-specific agents collaborate to integrate diverse data types.\n\u2022 Ensures cohesive retrieval and synthesis across graph and text sources.\n4. LLM Integration:\n\u2022 Synthesizes validated data into a coherent response.\n\u2022 Iterative feedback from the critic ensures alignment with the query's intent."}, {"title": "Key Features and Advantages", "content": "\u2022 Enhanced Reasoning: Combines structured relationships from graphs with contextual information fromunstructured documents.\n\u2022 Dynamic Adaptability: Adjusts retrieval strategies dynamically based on query requirements.\n\u2022 Improved Accuracy: Critic module reduces the risk of irrelevant or low-quality data in responses.\n\u2022 Scalable Modularity: Supports the addition of new agents for specialized tasks, enhancing scalability."}, {"title": "4.6.2 GeAR: Graph-Enhanced Agent for Retrieval-Augmented Generation", "content": "GEAR [36]: introduces an agentic framework that enhances traditional Retrieval-Augmented Generation (RAG) systemsby incorporating graph-based retrieval mechanisms. By leveraging graph expansion techniques and an agent-basedarchitecture, GeAR addresses challenges in multi-hop retrieval scenarios, improving the system's ability to handleomplex queries as shown in Figure 17."}, {"title": "Key Idea of GeAR", "content": "GEAR advances RAG performance through two primary innovations:\n\u2022 Graph Expansion: Enhances conventional base retrievers (e.g., BM25) by expanding the retrieval process toinclude graph-structured data, enabling the system to capture complex relationships and dependencies betweenentities.\n\u2022 Agent Framework: Incorporates an agent-based architecture that utilizes graph expansion to manage retrievaltasks more effectively, allowing for dynamic and autonomous decision-making in the retrieval process."}, {"title": "Workflow", "content": "The GeAR system operates through the following components:\n1. Graph Expansion Module:\n\u2022 Integrates graph-based data into the retrieval process, allowing the system to consider relationshipsbetween entities during retrieval.\n\u2022 Enhances the base retriever's ability to handle multi-hop queries by expanding the search space to includeconnected entities.\n2. Agent-Based Retrieval:\n\u2022 Employs an agent framework to manage the retrieval process, enabling dynamic selection and combinationof retrieval strategies based on the query's complexity.\n\u2022 Agents can autonomously decide to utilize graph-expanded retrieval paths to improve the relevance andaccuracy of retrieved information."}, {"title": "3. LLM Integration", "content": "\u2022 Combines the retrieved information, enriched by graph expansion, with the capabilities of a LargeLanguage Model (LLM) to generate coherent and contextually relevant responses.\n\u2022 The integration ensures that the generative process is informed by both unstructured documents andstructured graph data."}, {"title": "Key Features and Advantages", "content": "\u2022 Enhanced Multi-Hop Retrieval: GeAR's graph expansion allows the system to handle complex queries thatrequire reasoning over multiple interconnected pieces of information.\n\u2022 Agentic Decision-Making: The agent framework enables dynamic and autonomous selection of retrievalstrategies", "Accuracy": "By incorporating structured graph data", "Scalability": "The modular nature of the agent framework allows for the integration of additional retrievalstrategies"}]}