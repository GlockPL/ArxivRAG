{"title": "Federated Learning for Anomaly Detection in Energy Consumption Data: Assessing the Vulnerability to Adversarial Attacks", "authors": ["Yohannis Kifle Telila", "Damitha Senevirathne", "Dumindu Tissera", "Apurva Narayan", "Miriam A.M. Capretz", "Katarina Grolinger"], "abstract": "Anomaly detection is crucial in the energy sector to identify irregular patterns indicating equipment failures, energy theft, or other issues. Machine learning techniques for anomaly detection have achieved great success, but are typically centralized, involving sharing local data with a central server which raises privacy and security concerns. Federated Learning (FL) has been gaining popularity as it enables distributed learning without sharing local data. However, FL depends on neural networks, which are vulnerable to adversarial attacks that manipulate data, leading models to make erroneous predictions. While adversarial attacks have been explored in the image domain, they remain largely unexplored in time series problems, especially in the energy domain. Moreover, the effect of adversarial attacks in the FL setting is also mostly unknown. This paper assesses the vulnerability of FL-based anomaly detection in energy data to adversarial attacks. Specifically, two state-of-the-art models, Long Short Term Memory (LSTM) and Transformers, are used to detect anomalies in an FL setting, and two white-box attack methods, Fast Gradient Sign Method (FGSM) and Projected Gradient Descent (PGD), are employed to perturb the data. The results show that FL is more sensitive to PGD attacks than to FGSM attacks, attributed to PGD's iterative nature, resulting in an accuracy drop of over 10% even with naive, weaker attacks. Moreover, FL is more affected by these attacks than centralized learning, highlighting the need for defense mechanisms in FL.", "sections": [{"title": "I. INTRODUCTION", "content": "In 2022, commercial and residential buildings accounted for approximately 34% of global energy consumption while contributing to 37% of energy and process-related carbon dioxide (CO2) emissions [1]. The United Nations' Net-zero emission goal aims to reduce the adverse effects of global warming by decreasing global net CO2 emissions to 55% of 2010 levels by 2030, with the target of achieving net zero by 2050 [2]. Therefore, identifying and mitigating energy waste is essential to align with the net-zero emissions goal. Anomaly detection, the process of identifying patterns that diverge from the established normal behavior [3], plays a crucial role in determining energy waste. Example causes of anomalies in energy consumption data include wasteful human usage [4], faulty control systems [5], and energy theft [6].\nEnergy distribution companies have been transitioning to smart meters, which measure and transmit energy consumption information for improved energy management and control [6]. The potential of smart meter data for anomaly detection has been widely recognized, and several techniques have been proposed, with Machine Learning (ML) approaches providing state-of-the-art solutions. Common approaches to training ML models involve transmitting data to a central server for model training on that server [7]. However, this centralized approach exposes data to privacy and security risks.\nFederated Learning (FL) [8] reduces these privacy and security risks by decentralizing the learning with multiple nodes collaboratively training a global model without sharing their local data. Upon receiving the global model weights from the server during an FL round, clients train independently on their local data for several iterations and subsequently send the updated model weights to the server. The server aggregates clients' weights to update the global model, which is then broadcast back to the clients for the next training round. By keeping data local, FL enhances privacy and security while facilitating compliance with regulatory requirements such as the EU/UK General Data Protection Regulation [9]. Recognizing these advantages, energy consumption studies have integrated FL to train neural networks and preserve data locality [10], [11]. Thus, our study focuses on FL-based anomaly detection in smart meter energy consumption data.\nWhile FL mitigates privacy and security risks associated with data sharing, it still raises other security concerns [12]-\n[14] such as the vulnerability to adversarial attacks from malicious clients [14]. Several studies [15], [16] in vision tasks showed that FL is vulnerable to white-box adversarial attacks targeting client neural networks (NNs), such as the Fast Gradient Sign Method (FGSM) [17] and Projected Gradient Descent (PGD) [18]. These attacks effectively degrade NN performance by exploiting the network's vulnerabilities through subtle perturbations of input data. Initially designed for the computer vision domain, these attacks have subsequently been adopted in time series tasks [19], [20], demonstrating their transferability. However, in the time series domain, these attacks still focus on centralized ML and do not examine the effect of attacks in the FL setting. As NNs are deployed on client nodes in FL, the attack surface expands, increasing the risk as individual compromised nodes can affect the complete federation. Therefore, it is crucial to understand how adversarial attacks affect the FL process.\nConsequently, this study assesses the vulnerability of FL-based anomaly detection in energy consumption to adversarial attacks. Specifically, the study examines how attacks on individual FL nodes affect the global model and impact overall FL-based anomaly detection performance, focusing on the effects of different adversarial attacks. We adopt state-of-the-art time series neural networks, Long-Short Term Memory (LSTM) and Transformer, given their proven effectiveness in the energy consumption domain [10], [21]\u2013[23]. The impact of attack magnitude in both non-iterative FGSM and iterative PGD attack methods within the FL setting is examined. Further, the FGSM and PGD attack methods are compared against simpler techniques: label flipping [24] and random perturbation. Finally, we evaluate the impact of the number of malicious clients in the FL environment. The results indicate the vulnerability of FL-based anomaly detection in energy consumption to adversarial attacks, regardless of the underlying model, highlighting the need for further research on resilient FL techniques.\nThe remainder of this paper is organized as follows: Section II discusses related work, Section III provides background, Section IV describes the methodology, and Section V presents the result and finding. Finally, Section VI concludes the paper."}, {"title": "II. RELATED WORK", "content": "This section reviews energy anomaly detection in FL and discussed adversarial attacks."}, {"title": "A. Energy Anomaly Detection and Federated Learning", "content": "Anomaly detection in energy has been an active research area due to its critical importance in detecting sub-optimal performance, device malfunction, and abnormal behavior, thereby contributing to energy efficiency. Several studies [25]\u2013[28] proposed anomaly detection based on Deep Neural Networks (DNN) due to their ability to model complex relationships. Recently, LSTMs have gained popularity in the energy domain due to their ability to capture temporal dependencies [26], [27]. In the Natural Language Processing (NLP) domain, Transformer has been renowned for its attention mechanism and the generative capabilities utilized in diverse applications such as ChatGPT [29]. Consequently, Transformer has been adapted in various energy data studies [23], [30]. Energy forecasting is commonly used with Transformers in self-supervised anomaly detection solutions. Such solutions examine the difference between the actual and predicted values: if this difference exceeds a threshold, the sample is deemed abnormal. Zhang et al. [23] combined Transformer and K-means clustering to forecast energy consumption and detect anomalies. Nazir et al. [30] also presented a Transformer-based solution focusing on energy forecasting. As LSTMs and Transformers have dominated energy anomaly detection and forecasting, our study considered these two architectures in the FL setting.\nThese energy forecasting/anomaly detection techniques typically train models centrally where the data sharing raises privacy and security risks. Due to its data privacy-enhancing capabilities and distributed nature, FL has been gaining popularity for various tasks in the energy domain. Fekri et al. [10] proposed a distributed load forecasting method based on FL which takes advantage of LSTM as the base learner. The same group further advanced FL-based forecasting to enable asynchronous learning in the presence of non-IDD data by introducing a novel aggregation technique [11]. Similarly, Sater et al. [31] also integrated LSTM but combined it with multi-task learning for anomaly detection in smart buildings. The approach proposed by Jithish et al. [7] for anomaly detection in smart grids is also based on FL. They considered the diversity of ML models as the base learning, including LSTM, Gated Recurrent Neural Networks (GRU), and Vanilla RNN.\nThe studies employing FL in the energy field made great strides in improving energy prediction and anomaly detection by enabling model training without sharing raw data. Nevertheless, they did not consider the possible presence of malicious clients in the federation. Consequently, we address this gap by examining the vulnerability of FL-based anomaly detection techniques to adversarial attacks."}, {"title": "B. Adversarial Attacks", "content": "Adversarial attacks are designed to deceive the ML model, leading to incorrect classifications. Often examined in computer vision, adversarial samples are created by altering the images so they still look normal to the human eye but lead the model to incorrect predictions. Goodfellow et al. [17] proposed the Fast Gradient Sign Method (FGSM) that utilizes the gradients of a neural network to craft adversarial input image samples. In the FGSM approach, the gradient is calculated only once. To extend this, Kurakin et al. [32] introduced the Basic Iterative Method (BIM), an iterative approach that adds perturbations to the input data. Similarly, Madry et al. [18] introduced another iterative attack named Projected Gradient Descent (PGD). PGD uses random initialization and a projection step which iteratively alters the input to improve the generated samples. However, these algorithms were designed for the computer vision domain, adding perturbations to images.\nConsidering the transferability of the mentioned attack models, Fawaz et al. [19] emphasized that adversarial attacks have not been thoroughly explored for time series classification. Thus, they perturbed time series data using FGSM and BIM and compared the effectiveness of the attack models. Mode et al. [20] also considered adversarial attacks on multivariate time-series data and adapted adversarial attacks from the image domain, such as FGSM and BIM, to deep learning regression models for multivariate time series forecasting. However, these studies [19], [20] only considered centralized ML.\nOverall, adversarial attacks were mostly considered in the vision domain, with a few works investigating time-series [19], [20] but in the centralized setting. Furthermore, Bondok et al. [33] studied attacks in an FL setting; however, they focused on theft detection while our study focuses on generic anomaly detection. Nevertheless, there is a need to understand how adversarial attacks affect anomaly detection in the FL setting. To address this gap, our work investigates the vulnerability of FL-based anomaly detection models, specifically LSTM and Transformer, to adversarial attacks of various strengths and compares their vulnerability to that of centralized training."}, {"title": "III. BACKGROUND", "content": "This section provides an overview of the two white-box attacks adopted in this paper. In white-box attacks, the adversaries have full access to the trained model, including the model structure, parameters, and training data. White-box attacks were selected over black-box attacks because access to the model's architecture and parameters enables more effective adversarial attacks. Specifically, the two white-box attacks considered, FGSM and PGD, perturb the input sample in the direction of the model's gradient with respect to the input.\nThe FGSM, as depicted in Algorithm 1, generates an adversarial sample by computing the gradient of the loss with respect to the input and adding a proportion of this gradient to the input as the perturbation. Given a model parameterized by \u03b8, an original input sample x, and its label y, the computation of the adversarial sample $x_{adv}$ by FGSM can be expressed as:\n$x_{adv} = x + \\epsilon \\cdot sign(\\nabla_x J(\\theta, x, y))$, (1)\nwhere $\\nabla_x J(\\theta, x, y)$ represents the gradient of the loss function J with respect to input x, and sign() function extracts the sign of each element in the gradient. A scalar $\\epsilon$ controls the magnitude of the perturbation.\nWhile FGSM is a one-step attack, the PGD is a multi-step variant of the FGSM, offering increased effectiveness over FGSM. As illustrated in Algorithm 2, the iterative loop of the PGD algorithm perturbs the input sample incrementally in multiple sequential steps. Given a model parameterized with \u03b8, an original input sample x and its label y, in the tth iteration, PGD updates the adversarial sample from previous step $x_{adv}^{t-1}$ to the new adversarial sample $x_{adv}^t$ as follows:\n$x_{adv}^t = (x_{adv}^{t-1} + \\epsilon \\cdot sign(\\nabla_x J(\\theta, x_{adv}^{t-1}, y)))$. (2)\nHere $\\nabla_x J(\\theta, x_{adv}^{t-1}, y)$ is the gradient of the loss function with respect to the adversarial sample from the previous step, sign(\u00b7) function extracts the signs of the gradient components, and $\\epsilon$ is the step size of the perturbation.\nBoth FGSM and PGD were initially proposed and subsequently examined using image data. Their consideration with time-series data has been limited [19]. In this study, we adapt them to generate attacks on anomaly detection in energy data."}, {"title": "IV. METHODOLOGY", "content": "This section outlines our methodology to assess the vulnerability of anomaly detection in energy data within the FL setting. First, the anomaly detection dataset generation is described, followed by the adaptation of the white-box attacks to perturb energy data. Then, the integration of adversarial attacks into the FL process by simulating adversarial clients is described."}, {"title": "A. Energy Anomaly Detection Data", "content": "The anomaly detection process requires transforming the energy data recorded by smart meters into a suitable input format for the anomaly detection model, in our case, LSTM or Transformer. The smart meter data, in the form of hourly energy consumption readings, are divided into segments representing 24-step daily load profiles. One input example for the anomaly detection model, thus, represents the daily energy consumption pattern over 24 hours. The resulting dataset of time-series energy consumption consists of the sets of inputs X and the corresponding labels y:\nX = {x\u2081, . . ., X\u1d62,...,X\u2099}, y = {y\u2081, \u2026\u2026\u2026, y\u1d62, \u2026\u2026\u2026, y\u2099}\nwhere $x_i = [x_{i1}\tx_{i2} ... x_{i24}]^T$ (3)\nHere, input x\u1d62 is a load profile vector of day i with 24 hourly readings, and y\u1d62 indicates whether x\u1d62 is anomalous or not.\nWhile energy consumption data are abundant, labeled data are not commonly available, and this is also true for the dataset used in our study. As the anomalies represent rare events, we can assume that most recorded data are non-anomalous. Thus, we label all original load profiles as normal data. Consequently, to address the lack of anomalous data, we generate synthetic anomalies that mimic irregularities in energy consumption patterns. To generate synthetic anomaly data samples, the historical 24-hour energy usage data is analyzed first to identify periods of high and low electricity consumption (Referred to as high/low energy usage periods).\nAligning with the energy consumption patterns, five distinct types of anomalies are introduced into the data. The first anomaly type is a drop, which simulates a sudden and unexpected decrease in energy usage to zero, potentially caused by factors such as power outages or equipment failures. Given an input sample xi, and a randomly selected step S from the high energy usage period, a length l drop anomaly is generated by modifying the time series entries xis to $x_{i(S+l-1)}$ to zero:\n$x_{ij}|_{j=S...S+l-1} = 0, l \\in \\{1,2\\}$. (4)\nAdditionally, positive spikes and negative spikes are introduced, representing increases or decreases in energy usage, respectively. These anomalies are introduced for a single time step (l = 1). Furthermore, segment positive spikes and segment negative spikes are introduced to represent deviations that persist for two timesteps (l = 2). These anomalies could be indicative of events such as appliance malfunctions, unusual weather conditions, or changes in usage patterns. While in our experiment, only duration of l = 2 was considered, longer anomalies could be simulated. To generate spike anomalies, a random variable r, sampled from the range [0.5, 1.5], determines the amplitude of each spike or dip. For positive spike and segment positive spike anomalies, the modified value is:\n$x_{ij}|_{j=S...S+l-1} = x_{ij} + r \\cdot x_{ij}, l \\in \\{1,2\\}$, (5)\nwhere S is from low energy usage period. For negative spike and segment negative spike anomalies, the modified value is:\n$x_{ij}|_{j=S...S+l-1} = x_{ij} - r\\cdot x_{ij}, l \\in \\{1,2\\}$, (6)\nwhere S is chosen from high energy usage period.\nThe resulting anomalous data points are combined with the original data to build the anomaly detection dataset. This study considers two models for anomaly detection: LSTM and Transformer. LSTM was selected for its effectiveness in capturing temporal patterns and its widespread use in energy modeling [10]. Transformer was chosen due to its success in sequential tasks like GPT [29] and energy forecasting [22]."}, {"title": "B. Time Series Adversarial Attacks", "content": "To create attacks on X, the input data $x_i$ needs to be perturbed to cause the model to misclassify it as $\u0177$ where $y_i \u2260 y_i$. The FGSM attack is performed as in Equation 1. While the input x in Equation 1 is an image in the image domain, in our case, it is the daily load profile x\u1d62.\nThe gradients $\u2207xJ(\u03b8, x, y))$ calculated in Equation 1 depend on the model parameters \u03b8. The LSTM and Transformer models used for the anomaly detection contain different parameters \u03b8. Since the perturbation depends on the gradient of the loss, it will differ for each of the two models, potentially resulting in varying vulnerability to attacks between the two models.\nAs for FGSM and PGD attacks, the gradients are calculated the same way. The difference, as illustrated in Algorithm 2, is that for PGD, the process is iterative. For both attacks, we examine the vulnerability of ML models under different attack strengths by varying parameter \u03f5."}, {"title": "C. Adversarial Attacks in FL Setting", "content": "Consider an FL environment as in Fig. 1a with a set C of clients, i.e., houses with their energy consumption. The FL process with the integrated attack simulation is presented in Algorithm 3. The highlighted lines 7 to 13 are added or modified to integrate the adversarial attacks into the FL process, while the remaining lines are traditional FL process. The training begins by randomly initiating global model weights, Line 1. The FL process iterates over T rounds, Line 2, where each round starts with the global weights being broadcasted to a randomly selected subset K of N clients, Lines 3 and 4. The selected clients participate in the training round where they learn in isolation with their respective local datasets for e number of epochs and update their local model weights $W_k$ without adversarial attacks, Line 12 in Algorithm 3. Afterward, each client sends the locally updated weights to the global server for weight aggregation, Line 16. We consider the Federated Averaging (FedAVG) algorithm [34] as a greatly popular aggregation technique. FedAVG averages client weights, Line 17, to compute the new global weights W as follows:\nW = $ \\frac{1}{k} \\sum_{k \\in K} W_k$ (7)\nThe process then continues to the next training round from Line 2 by selecting a new subset K of N clients to participate in training and broadcasting the new global weights W. The process repeats for T training rounds or until convergence.\nWith adversarial attacks, the set C of all clients now contains a subset A of adversarial clients whose training data are perturbed by adversarial attacks. As shown in Fig. 1b, if a particular adversarial client participates in the training round, its data is modified through FGSM/PGD attacks. Suppose adversarial clients are present among the selected subset K for a particular training round. In that case, their data is perturbed by performing FGSM/PGD attacks, Line 9, with gradients calculated on the local models obtained in Line 8. The FGSM and PGD attacks are described in Section III.\nThe malicious clients in set K train on perturbed data, Line 10, while non-malicious clients train on their original data, Line 12. Both types of clients send data to the server for aggregation, Lines 16 and 17. The presence of such perturbed local weights in the weight aggregation process results in subsequently broadcasting the effect of perturbed weights to all participating clients. Depending on the strength of the attack, modified weights $W_k$ can have a major impact on the global model aggregated by FedAVG. Therefore, malicious clients degrade the performance of the complete federation."}, {"title": "V. EVALUATION", "content": "This section describes the dataset and experimental setup, model training and evaluation metrics, followed by the effect of attacks during inference and training. Finally, the impact of the attack magnitude is examined."}, {"title": "A. Dataset and Experimental Setup", "content": "The empirical evaluation was conducted using a real-world residential energy consumption dataset provided by London Hydro, a local electricity distribution company serving the city of London, Ontario. The dataset comprises energy consumption data from 19 households, with each consumer's dataset containing hourly energy consumption readings for three years, resulting in 25,560 samples per household. The simulated FL setting treated each household with its associated energy consumption data as a distinct local node or client.\nThe data were first segmented into daily load profiles as described in Section IV-A and daily energy consumption patterns were analyzed. Fig. 2 represents the household-wise average 24-hour electricity usage pattern. The low energy usage occurs between 4 a.m. and 10 a.m., and the high energy usage from 6 p.m. to 1 a.m. These low and high periods were used to generate synthetic anomalous profiles and build the energy consumption anomaly detection dataset. The normal data were labeled 0, whereas synthetically generated anomalies were labeled 1.\nThe white box attacks on the prepared time series data were generated as described in Sections III and IV-B. Fig. 3 illustrates a time series sample from the dataset before attacks (clean sample), and samples after FGSM and PGD attacks with varying magnitudes of attack \u03f5. When e is set to a lower value, the perturbations introduced to the data are smaller, making the adversarial sample closer to the clean sample. As \u03f5 increases, the perturbations become larger, making the adversarial sample more distinct from the clean sample. The perturbed samples by the PGD attack are still visually similar to the clean sample, whereas the FGSM attack introduces more noticeable deviations from the clean sample. The iterative process, in our experiment 10 iterations, allows the PGD attack to carefully adjust the input data for a more effective attack than FGSM."}, {"title": "B. Model Training and Evaluation Metrics", "content": "This study examined two time series networks, LSTM and Transformer. The LSTM used in experiments comprises an LSTM layer containing 100 units, followed by a dense layer with a single unit and sigmoid activation to output the anomaly probability. Transformer consists of five transformer encoder blocks. Each block includes a multi-head attention layer with eight heads, each having a dimension of 160, followed by a feed-forward layer with a hidden dimension of 128. After passing through the Transformer blocks, the output across time steps is globally averaged and passed to a fully connected layer with a hidden dense layer of 256 units, followed by an output layer with a single unit. The models were trained for 100 epochs with a batch size of 32. The RMSprop optimizer was used with an initial learning rate of 0.01 multiplied by 0.1 at epochs 50, 70, and 90. Binary Focal Loss [35] was used to address the imbalance between normal and anomalous classes.\nThe accuracy, precision, recall, and F1 Score were used to measure the anomaly detection performance. Accuracy is the ratio of the number of correct classifications to the total number of predictions. The precision reflects the probability of a model-flagged anomaly being a ground truth anomaly, whereas the recall represents the probability of the model successfully flagging ground truth anomalies. The F1 Score is the harmonic mean of precision and recall. Measuring the success of the adversarial attacks involves comparing the model performance before and after the attack. We also calculated the Attack Success Rate (ASR), which quantifies the success probability of an adversarial attack. ASR is the ratio between the number of samples whose predicted labels are changed by the attack and the total number of samples. Higher ASR correlates with a greater degradation in model performance.\nASR = $ \\frac{\\sum_{i=1}^N \\delta (y_i \\neq y_i)}{N}$ (8)"}, {"title": "C. Effect of Adversarial Attacks during Inference", "content": "In our first experiment, both federated and centralized models were trained with clean data (non-perturbed) and evaluated on the test data that contained adversarial samples. All samples in the test set were perturbed with the considered attack: FGSM, PGD, or Additive White Gaussian Noise (AWGN). An attack strength of \u03f5 = 0.5 was used for FGSM and PGD, while a noise variance of \u03c3\u00b2 = 0.1 was used for AWGN. Table I illustrates the results of this experiment. The first row in each segment shows the model performance on the clean test set, and the subsequent rows show the model performance with perturbed test sets. The ASR measures the percentage of attacks in the test data that resulted in flipped predictions.\nBoth centrally and federated-trained models demonstrated strong baseline anomaly detection performance on the clean test set with centrally-trained models showing better performance. FGSM and PGD attacks during inference considerably reduced the model performance, whereas AWGN resulted in minor performance reduction. Both FGSM and PGD attacks led to a higher ASR for the FL model than for the central model. Overall, PGD posed a significant challenge for both federated and centrally trained models."}, {"title": "D. Effect of Adversarial Attacks during Federated Training", "content": "In the second experiment, the adversarial attacks were introduced during training, and the anomaly detection performance was evaluated on clean test data. Attacks in the FL setting were carried on as explained in Section IV-C where 9 out of the 19 clients were malicious, with 30% of their training data being perturbed. The tested attack techniques consist of sophisticated attacks, PGD and FGSM, as well as naive attacks, AWGN, and label flipping. The PGD and FGSM were conducted with \u03f5 = 0.5, whereas the AWGN used \u03c3\u00b2 = 0.1. The central training was similarly subjected to attacks, with 30% of the total data being perturbed by the corresponding attack during training. Table II shows the results of this study, where the first row in each segment shows the clean-trained model performance, and the subsequent rows show model performance after training under adversarial attacks. The ASR reflects the percentage of clean test data whose model predictions were flipped after training with attacks.\nWhen trained in the FL setting without adversarial attacks, LSTM achieved an accuracy of 91.6%, a precision of 90.3, a recall of 85.1, and an F1 score of 87.62 on the clean test set. Transformer, on the other hand, showed slightly lower performance with an accuracy of 86.7%, precision of 78.3, recall of 88.3, and an F1 score of 82.3. When attacked during training, both models experienced a considerable drop in clean test set performance. ASR was high for training under FGSM, PGD while caused an even larger performance decline. Random label flipping introduced a smaller drop in performance than FGSM and PGD, while AWGN had the smallest impact on the model performance. A large performance drop under PGD attacks compared to FGSM is expected, as the iterative nature of PGD makes it a more sophisticated attack. Nevertheless, both attacks were highly successful. This is consistent with the decline observed across all performance metrics.\nCentralized training showed better performance than federated learning in the absence of attacks, which is expected since the performance of federated learning is inherently bounded by that of a centrally trained model. However, central training showed similar performance drops with attacks during training. Both LSTM and Transformer experienced substantial drops in performance when subjected to FGSM and PGD during training, with lesser impact from label flipping and the least impact from AWGN. Central training generally showed lower attack success rates than their federated-trained counterparts. Overall, the FL setting was observed to be equally or more vulnerable to all attacks than the central setting.\nTransformer demonstrated better resilience against both attacks than the LSTM in central and federated settings. The FGSM attack on Transformer had a lower success rate than on the LSTM. Similarly, although the PGD attack had a higher success rate against Transformer compared to FGSM, it was still less effective than when applied to the LSTM. Transformer exhibited a similar phenomenon for label flipping while showing higher vulnerability to AWGN than LSTM.\nAdditional experiments were conducted on a larger residential dataset of 50 households, also provided by London Hydro. The results, presented in Table III, reinforce the findings from the first dataset, revealing performance degradation under attacks. Both LSTM and Transformer experienced notable performance degradation under FGSM and PGD attacks during training, with PGD causing a more substantial impact. Transformer again demonstrated slight resilience compared to the LSTM, though both models were highly vulnerable.\nOverall, the FL setting showed comparable vulnerability to the attacks as central learning. The FGSM and PGD attacks caused considerable performance degradation, with PGD causing the highest impact, followed by FSGM, label flipping, and random perturbations. In general, Transformer was less vulnerable to the considered attacks than the LSTM. The results emphasize the importance of considering adversarial attacks in FL, underscoring the necessity for a deeper understanding of these threats in the FL setting."}, {"title": "E. Impact of Attack Magnitude on Model Performance", "content": "This section investigates the effect of the magnitude of attacks on anomaly detection performance in the FL setting. We consider two approaches to vary the magnitude of the attack: changing the number of malicious clients in the FL setting and changing the attack strength \u03f5 of FGSM and PGD.\nFig. 4a illustrates the effect of the number of malicious clients performing PGD attacks on the anomaly detection performance of the LSTM in the FL setting. With 10% malicious clients, the accuracy drops to 72.5%. As the percentage of malicious clients increases to 20%, the accuracy further decreases to 49.2%. When 50% of the clients are malicious, the model's performance is substantially compromised, with the accuracy plummeting to 23.5%. As expected, the increasing number of malicious clients in FL results in performance degradation in terms of all considered metrics. Fig. 4b depicts the anomaly detection accuracy of LSTM trained in the FL setting with increasing attack strength \u03f5 for PGD and FGSM. The parameter \u03f5 controls the magnitude of the perturbations applied during the attacks, with higher values resulting in larger perturbations and typically more successful attacks. For both PGD and FGSM attacks, the model's accuracy remained relatively high (around 89%) at low \u03f5 values of 0.1 and 0.2, indicating that minor perturbations had minimal impact on the model's performance. However, as \u03f5 increased, the accuracy exhibited a large decline, with PGD causing more severe degradation than FGSM.\nThese findings indicate that both PGD and FGSM attacks become increasingly effective in degrading the model's performance as the \u03f5 value increases. The PGD attack, being an iterative and more powerful method, had a greater effect on reducing accuracy compared to the FGSM attack."}, {"title": "VI. CONCLUSION", "content": "This paper assessed the vulnerability of FL-based anomaly detection in energy data to adversarial attacks. Two state-of-the-art deep learning models, LSTM and Transformer, were examined for their sensitivity to attacks, FGSM, and PGD, where both attacks greatly degraded model performance compared to naive attacks. PGD, being an iterative attack, consistently had a larger effect than the FGSM attack. Comparing the effect of attacks on centralized training to that of FL, the experiments show that the FL models are more affected. Transformer was less sensitive to the attacks than the LSTM in general. The strength of the attack, as well as the number of malicious clients also had a large impact on the attack's success. Overall, the results highlighted the impact of adversarial attacks on FL and the need to design robust defense mechanisms to mitigate their impact. These vulnerabilities in the energy sector can have major real-world impacts as undetected anomalies can trigger financial and safety risks. Future work will design defense mechanisms to overcome these vulnerabilities and techniques for defending against malicious clients in the FL setting."}]}