{"title": "Exploring Flexible Scenario Generation in Godot Simulator", "authors": ["Daniel Peralta", "Xin Qin"], "abstract": "Cyber-physical systems (CPS) combine cyber and physical components engineered to make decisions and interact within dynamic environments. Ensuring the safety of CPS is of great importance, requiring extensive testing across diverse and complex scenarios. To generate as many testing scenarios as possible, previous efforts have focused on describing scenarios using formal languages to generate scenes. In this paper, we introduce an alternative approach: reconstructing scenes inside the open-source game engine, Godot. We have developed a pipeline that enables the reconstruction of testing scenes directly from provided images of scenarios. These reconstructed scenes can then be deployed within simulated environments to assess a CPS. This approach offers a scalable and flexible solution for testing CPS in realistic environments.", "sections": [{"title": "1 Introduction", "content": "The verification of cyber-physical system (CPS) safety is critical to ensuring the reliability and resilience of autonomous technologies. CPS often operates in safety-critical domains such as transportation, healthcare, and industrial automation [14], [21], [1], where rigorous and comprehensive verification methodologies are essential [20]. In autonomous driving, scenario description and enumeration have proven effective in capturing diverse driving conditions and detecting potential system bugs within simulation environments [8], [27]. Scenic [9], a widely used tool for scenario generation, facilitates the enumeration of varied driving scenarios, enabling extensive testing of autonomous systems under diverse conditions.\n\nA notable limitation arises, however, when trying to enumerate roads and the placement of buildings within simulators. Platforms such as CARLA [6] and AirSim [23], developed using the Unreal Engine, lack native support for flexible map customization, particularly for road networks. Map creation requires manual construction and compilation by developers for each iteration. Unlike agents that spawn in a map, map components (e.g., roads) present inherent complexity and variability, making exhaustive enumeration nontrivial. Additionally, the initial construction process is not easily described by current formal languages. This"}, {"title": "2 Preliminaries", "content": "2.1 Signal Temporal Logic\n\nSignal Temporal Logic (STL) [18] is a widely adopted formalism used to express safety specifications across various CPS applications [3]. STL defines the behavior of signals through logical formulas. These formulas are constructed over signal predicates of the form $f(\\xi) \\geq c$ or $f(\\xi) \\leq c$, where $\\xi$ represents a signal, $f: \\mathbb{R} \\rightarrow \\mathbb{R}$ is a real-valued function, and $c \\in \\mathbb{R}$. The syntax of STL is provided in Eq. (1). We assume that the interval $I = [a, b]$ satisfies $a, b \\in \\mathbb{R}^{\\geq 0}$ and $a < b$, with $\\sim \\in {<, >}$.\n\n$\\varphi, \\psi := \\text{true} | f(\\xi) \\sim c | \\neg\\varphi | \\varphi \\land \\psi | \\varphi \\lor \\psi | F_{I} \\varphi | G_{I} \\varphi | \\varphi U_{I} \\psi$ (1)\n\nIn the syntax described above, F (eventually), G (always), and U (until) are temporal operators. For any $t \\in \\mathbb{R}^{\\geq 0}$ and interval $I = [a, b]$, we denote $t + I$ as $[t+a, t + b]$. For a signal $\\xi$ at a specific time $t$, the notation $(\\xi, t) \\models \\varphi$ indicates that $\\xi$ satisfies $\\varphi$ at time $t$. We let $\\xi \\models \\varphi$ to represent $(\\xi, 0) \\models \\varphi$.\n\n2.2 Distance Metrics\n\nWe equip the set of splines $\\mathcal{Y}$ with a function $d : \\mathcal{Y} \\times \\mathcal{Y} \\rightarrow \\mathbb{R}$ that quantifies dis- tance between the splines. A natural choice of $d$ is a signal metric that results in a"}, {"title": "3 Flexible Scenario Generation in Godot", "content": "Godot allows for the generation of tiles and objects entirely through code. Given a list of coordinates, we can create the map purely programmatically.\n\n3.1 Extract the road\n\nThe initial stage of the pipeline follows common practices, applying robust image processing and computer vision techniques-adjusting brightness, contrast, and sharpness, applying Gaussian blur, and performing contour extraction and spline fitting to detect roads.\n\n3.2 Modifying the Road\n\nWe aim to generate variations of the road, but not all variations are feasible. Variability is introduced through sinusoidal perturbations of the spline. We use Signal Temporal Logic (STL) to constrain the modifications applied to the road, ensuring that the newly generated road remains meaningful for testing.\n\nThe following specifications define constraints on road perturbations and spline distances. Let $e_{1}$ represent the error added to the original spline, modeled as a random variable through a sampling-based method, and let $d_{1}$ denote the distance between generated splines.\n\nSpecification $\\varphi_{1}$ constrains road modifications to remain below a threshold of 10, written in $\\varphi_{1} := G(e_{1} < 10)$. Specification $\\varphi_{2}$ ensures that the distance between splines consistently stays below 10, written as $\\varphi_{2} := G(d_{1} < 10)$. Specification $\\varphi_{3}$ specifies that if the spline error perturbation exceeds the threshold, the distance must eventually reduce to below 10, and the error must also de- crease to under 10, with $\\varphi_{3} := G ((e_{1} > 10) \\Rightarrow F_{[t_{1},t_{2}]}G(d_{1} < 10 \\land e_{1} < 10))$. The time interval in STL can specify which segment of the spline should exhibit this behavior, allowing humans to write specifications that constrain the shape of the road. We can filter perturbations that meet design requirements by applying the monitoring algorithm of the STL formula."}, {"title": "4 Experiments and Results", "content": "We propose a pipeline consisting of two components. First, we analyze the input image to extract the desired information. Second, we pass this information to the simulator, which generates the corresponding environment. This approach allows us to fine-tune scenarios within the simulator with great flexibility. We can directly add controllers and various agents to enable interactions, and the design is adaptable for connecting multiple scenarios seamlessly in the future.\n\nScenario Reconstruction Using Image Godot is an open- source game engine [10] that offers exceptional flexibility for customized environment generation. Godot operates a UDP server on the back end, listening for incoming mes- sages via a socket. Data trans- mission to Godot is man- aged by Python scripts. To transform a given image of a road into data interpretable by Godot, we use Python in conjunction with OpenCV to compute and extract the road's contour from the im- age. The extracted contour is then pixelated and saved to disk.\n\nIn a subsequent Python script, we iterate over each pixel in the image. If a pixel is white-indicating it is part of the road-we examine its neighboring pixels to calculate a value that deter- mines the shape of the road segment to instantiate. This data is transmitted to Godot through a WebSocket. Upon receiving the data, Godot processes each value and instantiates the corresponding road shape within the scene. For de- termining which tile to use for the road, generation, we follow the instructions in [17].\n\nFigure 2a demonstrates that the vision detection system identifies the contour of the road. After fitting the contour to the road, we can reconstruct it in the simulator and position the target system, such as a car, for testing.\n\nUsing splines offers the advantage of modifying the road's shape under quantifiable constraints. For instance, the contour can be adjusted to ensure that the maximum deviation from the original road stays within a defined threshold. This method also enables the generation of various road variations."}, {"title": "5 Related Work", "content": "Scenario Reconstruction Using Synthetic Roads We evaluate our methods using roads described by human input. The first image on the left illustrates the image generated from our handwritten data, while the second image demonstrates the reconstruction within the simulator.\n\nFigure 3 shows that the computer vi- sion algorithm accurately detected the shape of the road, and the simulator success- fully generated the corresponding road.\n\nDiscussions The pri- mary limitation of the pipeline is the accuracy of contour detection in images. Various computer vi- sion algorithms pro- duce different levels of accuracy and each image may require a different threshold to accurately detect roads. Currently, we manually tune the threshold for each image, which may hinder scalability in future applications. Figure la shows how shadows from trees can affect the contour, causing occlu- sions along the edge of the road. In the future, we will explore integrating more learning-based methods for road detection [28] with our current pipeline. The ability to integrate depends on whether the representation of road locations can be interpreted as coordinates within the simulator.\n\n2D Image to 3D Photorealistic Scene Generation. 2D image to 3D photorealistic scene generation has seen several advancements in recent years [4], [12]. Tradi- tionally, photogrammetry has been a primary method for rendering 3D scenes through stitching collections of photographic images and utilizing the camera's spatial position to calculate measurements and locations of objects [11], [24]. While this method is effective and gives detailed results, it is limited to what the camera captured. Thus, it relies on high-quality input images, and any occlu- sions in captures result in incomplete models. Neural Radiance Fields (NeRFs) aimed to address the issues with photogrammetry. NeRFs use deep neural net- works to synthesize additional scene information in real-time [2]. The drawback"}, {"title": "6 Conclusion", "content": "We introduce a scenario generation pipeline that constructs road models in a simulator directly from images. The pipeline allows for road modifications, and we propose a design to use formal methods to filter roads that meet specified constraints. This approach is valuable for reconstructing diverse road infrastructure layouts within simulation environments. The pipeline can potentially be integrated with existing scenario generation methods to generate various relationships between vehicles and different maps simultaneously."}]}