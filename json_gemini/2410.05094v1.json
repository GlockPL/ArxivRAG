{"title": "On the Structure of Game Provenance and its Applications", "authors": ["Shawn Bowers", "Yilin Xia", "Bertram Lud\u00e4scher"], "abstract": "Provenance in databases has been thoroughly\nstudied for positive and for recursive queries, then for first-\norder (FO) queries, i.e., having negation but no recursion.\nQuery evaluation can be understood as a two-player game\nwhere the opponents argue whether or not a tuple is in\nthe query answer. This game-theoretic approach yields a\nnatural provenance model for FO queries, unifying how\nand why-not provenance. Here, we study the fine-grain\nstructure of game provenance. A game $G = (V, E)$ consists\nof positions $V$ and moves $E$ and can be solved by comput-\ning the well-founded model of a single, unstratifiable rule:\n`win(X):-move(X, Y), \u00ac win(Y)`. In the solved game $G_A$, the\nvalue of a position $x \\in V$ is either WON, LOST, or DRAWN.\nThis value is explained by the provenance $P(x)$, i.e., certain\n(annotated) edges reachable from $x$. We identify seven edge\ntypes that give rise to new kinds of provenance, i.e., potential,\nactual, and primary, and demonstrate that \"not all moves are\ncreated equal\". We describe the new provenance types, show\nhow they can be computed while solving games, and discuss\napplications, e.g., for abstract argumentation frameworks.", "sections": [{"title": "1. Introduction", "content": "Evaluating a query $Q$ on a database instance $D$ yields\nan answer $A=Q(D)$. The provenance of a tuple $t\\in A$\nreveals additional information about the output, e.g., on\nwhat input tuples $D_t \\subseteq D$ the output $t$ depends (lineage,\nwhy provenance [1], [2]), how $t$ was derived from those\ntuples $D_t$ (how provenance [3], [4]) or, in case $t \\notin A$, why\n$t$ is missing from $A$ (why-not provenance [5]\u2013[7]). The\nalgebraic provenance semiring framework [3] for positive\nrelational and for recursive queries brought order to the\nearlier approaches, and won a test-of-time award [8]. The\napproach has been extended to non-recursive queries with\nnegation [9]\u2013[12], but approaches that combine recursion\nwith negation remain underexplored.\nRecursion through Negation. We study the provenance\nof unstratified rules, in particular, the following query:\n$Q(X) :\u2013 E(X, Y), \u00ac Q(Y).$  (Q)\nNote that $Q$ is defined recursively through negation and\nthus cannot be stratified. Given a graph $G = (V, E)$,\n$Q$ allows different interpretations, each offering unique"}, {"title": "Games", "content": "To emphasize this game-theoretic view, we can\nrename input and output relations and write $Q$ as follows:\n`win(X):- move(X, Y), \u00acwin(Y)`  (QWM)\nWritten in $Q_{WM}$ (\u201cwin-move\") form, the rule has a natural\ninterpretation: Position $x$ is winning (short: a win) if there\nis a move to a position $y$ which is lost for the opponent.\u00b9 If\nthere are no moves left to play, $x$ is lost. The well-founded\nmodel (WFM) [13] of $Q_{W\u041c}$ captures the game semantics:\n`win(x)` is TRUE, FALSE, and UNDEF in the WFM iff $x$ is\nWON, LOST, and DRAWN in $G$, respectively."}, {"title": "Argumentation Frameworks", "content": "$Q$ also implements a meta-\ninterpreter for solving argumentation frameworks [14]:\n$V$ and $E$ now represent abstract arguments and attacks,\nrespectively. An argument $x$ is defeated if there is an\nattacking argument $y$ that is not defeated (i.e., accepted):\u00b2\n`defeated(X) :- attacks(Y, X), defeated(Y)`  (QAF)\nThe WFM of $Q_{AF}$ yields the grounded extension of a given\nargumentation framework (AF); the stable models [15] of\n$Q_{AF}$ yield all stable extensions of AF [14], [16]."}, {"title": "Motivation", "content": "The reasons for studying the (fine-grained)\nprovenance structure of $Q$ are as follows:\n(1) Explanatory Power. Roughly speaking, solved games\nexplain themselves: Viewing $Q$ as a game $Q_{WM}$ allows us\nto employ concepts from combinatorial game theory. The\nvalue of a position, e.g., is justified by concepts such as\nwinning strategies and the length of a position. These give\nrise to new provenance notions via different edge types. In\nother words, game-theoretic concepts provide additional\n\"provenance mileage\" and yield further insights into why\nand how (or why-not and how-not) a result is derived.\n(2) Queries as Games. Query evaluation can be viewed as\na game: e.g., all $n$-ary FIXPOINT queries can be brought\ninto a normal form with an $n$-ary $Q$ [17], [18]. A similar\nconstruction, when applied to FO queries, yields a unified\napproach for how and why-not provenance [10], [19],\nextending the semiring approach [3]. Thus, although we\nfocus on $Q$ (and its \"twins\" $Q_{WM}$, $Q_{AF}$), the concepts"}, {"title": "2. Background: Games on Directed Graphs", "content": "By a game we mean a finite, directed graph $G = (V, E)$.\nThe vertices $V$ are the positions, the edges $E \\subseteq V \u00d7 V$\nare the moves of $G$. After choosing a start position $x_o$,\nPlayer I and Player II take turns, moving the game pebble\nalong the edges $E$. A player who cannot move loses.\u00b3\nFigure 1 shows the game we use as our running example."}, {"title": "Definition 1", "content": "A play $\\pi_{x_o} = x_0 \\rightarrow x_1 \\rightarrow x_2 \\rightarrow ... \\rightarrow x_i \\rightarrow x_{i+1} \\rightarrow ...$\nof a\ngame $G = (V, E)$ is a sequence of moves $(x_i, x_{i+1}) \\in E$,\nstarting at $x_o$ with Player I, and then players taking turns.\nThe length $|\\pi|$ of a play is given by its number of moves.\n$\\pi$ is complete if it is of infinite length (repeating moves)\nor if it ends after $|\\pi|$ moves in a terminal (lost) position."}, {"title": "Example 1", "content": "Let's consider some plays starting at $x_o = d$\nin Figure 1: The best move for Player I from $d$ is to $f$,\nleaving Player II in a terminal node. Another winning play\nfor I is $d \\rightarrow i \\rightarrow j$. However, the move $d \\rightarrow e$ is a\nblunder as it leaves II in a winning position $e$. The win\ncan be forced by II via $e \\rightarrow h \\rightarrow i \\rightarrow j$: Game over for I!"}, {"title": "Definition 2 (Value of a Position)", "content": "A position $x$ is WON\nif a player can force a win from $x$, independent of the\nopponent's moves; $x$ is LOST if the opponent can force a\nwin; and $x$ is DRAWN if neither player can force a win.\nIf a position $x$ is won, this means that the player\nmoving from $x$ has a winning strategy; if $x$ is lost, the\nopponent has a winning strategy; otherwise both players\ncan delay a loss forever and force a draw by repetition."}, {"title": "Definition 3 (Solution of a Game)", "content": "The solution of a\ngame is indicated by labeling (or coloring) each position\nwith its true value: W (WON), L (LOST), or D (DRAWN)."}, {"title": "Solving Games with QWM", "content": "A game can be solved by\nevaluating $Q_{WM}$ under the well-founded semantics [13].\nIf this is implemented via the alternating fixpoint proce-\ndure (AFP) [21], one obtains an increasing sequence of\nunderestimates $U_1 \\subseteq U_3 \\subseteq U_5...$ converging to the set of\nTRUE atoms $U$ from below, and a decreasing sequence\nof overestimates $O_2 \\supseteq O_4 \\supseteq O_6...$ converging to $O_W$,\nthe TRUE or UNDEF (undefined) atoms from above. Thus,\nthe atoms in the \"gap\" $O_W \\backslash U$ have the third truth-value\nUNDEF, while atoms not in $O_W$ are FALSE.\nOn $Q_{WM}$, AFP performs a backward induction known\nfrom game theory. It also yields additional game-theoretic\ninformation, notably the length of a position (or remote-\nness function [22]). This in turn provides additional insight\ninto the provenance of the value of a position."}, {"title": "Definition 4 (Length of a Position)", "content": "For a position $x$,\n$len(x)$ denotes the length of $x$, i.e., the number of moves\nnecessary to force a win from $x$ (if $x$ is WON), and the\nnumber of moves one can delay losing (if $x$ is LOST). If\n$x$ is DRAWN, its length is $\\infty$. This assumes that players\ntry to win as quickly or to lose as slowly as possible.\nSummarizing, we view solved games as labeled graphs:"}, {"title": "Definition 5 (Solved Game with Length)", "content": "The solution\nof game $G$ with lengths is a labeled graph $G^\\lambda = (V, E, \\lambda)$\nwhere $\\lambda$ consists of two labeling functions $val_\\lambda$ and $len_\\lambda$:\n* $val_\\lambda : V \\rightarrow {W, L, D}$, returning position values; and\n* $len_\\lambda: V \\rightarrow \\mathbb{N} \\cup {\\infty}$, returning position lengths.\nWe often omit $\\lambda$ from the labeling functions val and len."}, {"title": "3. The Structure of Game Provenance", "content": "We introduce and study different kinds of provenance for\ngames and show how, using a variant of a simple backward\ninduction algorithm, the primary provenance of a game\ncan be computed \"on the fly\" while solving a game."}, {"title": "3.1. Solving Games Iteratively", "content": "A game can be solved by iterating two labeling rules:\n* $val(x) := L$ if $\\forall (x, y) \\in E: val(y) = W$  (RR)\n* $val(x) := W$ if $\\exists(x,y) \\in E \\text{ s.t. } val(y) = L$  (GR)\nRed Rule. (RR) states that a position $x$ is LOST (L) if all\nfollowers $y$ of $x$ have already been labeled WON (W): No\nmatter to which follower $y$ of $x$ a player moves to, the\nopponent can force a win from $y$.\nGreen Rule. (GR) states that a position $x$ is WON (W) if\nthere exists a follower $y$ of $x$ that has already been labeled\nLOST (L): A player can thus choose to move from $x$ to\nsuch a $y$, leaving the opponent in a lost position.\nInitially, only (RR) is applicable, and only to nodes\nwithout followers, i.e., terminal nodes (the $\\forall$-condition is\nvacuously satisfied). As soon as lost nodes are found, (GR)\nbecomes applicable, yielding new won nodes, after which\n(RR) may be triggered etc. until a fixpoint is reached.\nAny remaining unlabeled positions of the graph are then\nlabeled DRAWN (D). We refer to each complete application\nof one of the rules in this backward induction as a step."}, {"title": "3.2. Potential, Actual, and Primary Provenance", "content": "We consider the provenance $P$ of the value of a position\n$x\\in V$ in a game $G$ to be an explanation of why $x$\nhas a particular value. The explanation of the value of\na position $x$ is closely tied to the complete plays $\\pi_{x_0}$ that\ncan be started from $x$ and is represented by a labeled\nsubgraph rooted at $x$. Below we define three novel types of\nprovenance\u2014potential, actual, and primary provenance\u2014\neach providing more specific (i.e., often smaller) sub-\ngraphs explaining the value of $x$.\nAs described in Section 2, the value of a position $x$ is\nbased on the possible plays $\\pi_{x_0}$ starting at $x$.\u2074 Thus, the\nvalue of $x$ can only depend on the moves reachable from\n$x$ in the game. We refer to this notion of provenance as\npotential provenance.\nDefinition 6 (Potential Provenance). The potential pro-\nvenance $P_{pt}(x)$ of $x$ is the subgraph reachable from $x$.\nDefinition 7 (Followers). The followers of a position $x$\nare its immediate successors: $F(x) := {y | (x,y) \\in E}$.\nFor sets $S \\subseteq V$, define $F(S) := \\bigcup_{x \\in S} F(x)$. Now define\nthe closure as $F^*(x) := {x} \\cup F(x) \\cup F^2(x) \\cup F^3(x)...$\nThe potential provenance $P_{pt}(x)$ is thus the subgraph of $G$\nwith nodes $F^*(x)$ and edges ${(u, v) \\in E | u, v \\in F^*(x)}$.\nWhile potential provenance $P_{pt}$ captures the typical\nnotion of provenance as all dependencies of a node, it\ncan overestimate the justification for why a position has\na particular value in a game. For example, a position $x$ is\nwon if it has at least one move that forces the opponent to\nlose, regardless of the moves the opponent makes (GR).\nHowever, $x$ may still have outgoing moves that if followed\nwould be blunders for the player (e.g., by allowing the\nopponent to win or to draw). Similarly, a position that\nis a draw for a player may have an outgoing move\nthat relinquishes the draw by allowing their opponent to\nwin. While such moves can be contained in a position's\npotential provenance, they do not determine the value\nof the position. We refer to this notion of considering\nonly moves that can determine the value of a position as\nactual provenance. The actual provenance of a position is\nobtained directly from a solved (labeled) game extended\nwith additional move labels.\nDefinition 8 (Provenance Edges). We extend to edges\nthe labeling functions $\\lambda$ for solved games $G^\\lambda(V, E, \\lambda)$:\n* $val_\\lambda: E \\rightarrow {W, L, D}$ is a partial function:\n$val_\\lambda (x, y):= \\begin{cases}\nW & \\text{if } val_\\lambda (x) = W \\text{ and } val_\\lambda(y) = L \\\\\nL & \\text{if } val_\\lambda(x) = L \\text{ and } val_\\lambda(y) = W \\\\\nD & \\text{if } val_\\lambda (x) = D \\text{ and } val_\\lambda(y) = D\n\\end{cases}$\n* $len_\\lambda: E \\rightarrow \\mathbb{N} \\cup {\\infty}$ is a partial function:\n$len_\\lambda(x, y):= \\begin{cases}\n1 + len_\\lambda(y) & \\text{if } val_\\lambda(x, y) \\in {W, L} \\\\\n\\infty & \\text{if } val_\\lambda (x, y) = D\n\\end{cases}$"}, {"title": "Definition 9 (Actual Provenance)", "content": "$P_{ac}(x)$, the actual\nprovenance of a position $x$, is the subgraph reachable from\n$x$ by only following W-, L-, and D-labeled edges."}, {"title": "Definition 10 (Primary Provenance)", "content": "$P_{pr}(x)$, the pri-\nmary provenance of a position $x$, is the subgraph reachable\nfrom $x$ via L, D, and minimum-length W edges."}, {"title": "3.3. Computing Primary Provenance", "content": "Algorithm 1 extends the backward induction described in\nSection 3.1 by adding steps for labeling positions and\nmoves via val and len functions. The result is a labeled\ngraph $G^{pr} = (V, E, A_{pr})$ consisting of all W and L position\nvalues and lengths, and all L and all primary $W_{pr}$ edge\nvalues and lengths. The core of the algorithm repeatedly\napplies the Red Rule (RR) followed by the Green Rule\n(GR). The sets $V_{won}$ and $V_{lost}$ are used to track the won\nand lost positions, respectively:\n* Initially, no won positions are known (line 1). All\nterminal positions are lost (line 2). The length is set to\n0 and assigned to each terminal node (line 3).\n* The algorithm repeatedly applies the (GR) and (RR)\nrules (lines 5-16) until a fixpoint is reached, i.e.,\nwhen no additional won or lost nodes are found.\n* At each round, i.e., (GR) followed by (RR), only\npositions x that have not yet been assigned a value\n(line 5) are considered. $F_{lost}(x)$ and $F_{won}(x)$ are the\nfollowers of x that are known to be lost and won,\nrespectively (line 6).\n* Lines 7-11 implement (GR): If x has a lost follower\n(line 7), x is assigned W (line 8) and its length (line 9).\nThe moves $x \\rightarrow y$ for losing followers $y \\in F_{lost}$\nare assigned $W_{pr}$ (line 11). Since the winning moves\nwere just found, they have minimal length (assigned\nin line 11) and are part of the primary provenance.\n* Lines 12-16 implement (RR): If all followers of x\nare winning (line 12), x is assigned value L (line 13)"}, {"title": "4. Applications of Game Provenance", "content": "We consider two separate areas where game provenance\ncan be applied. We first discuss applications to abstract\nargumentation frameworks and then briefly discuss the\napplication to the provenance of queries.\nArgumentation through the Lens of Games. There is a\ndirect correspondence between game graphs $G = (V, E)$\nand abstract argumentation frameworks (AFs) [20]. In\nparticular, positions in an AF graph represent abstract\narguments and edges represent attack relationships: An\nedge $x \\rightarrow y$ in $E$ means that argument $x$ is attacked-by\nargument $y$. The typical convention in AFs is to read the\nattacked-by relation in the opposite direction, i.e., saying\nthat argument $y$ attacks $x$.\nGiven an argumentation framework, one of\nthe goals is to find sets of arguments that can be jointly\naccepted. An argument is accepted if it has no attackers, or\nif all of its attackers are attacked by at least one accepted\nargument. An argument is said to be defeated if it is\nattacked by at least one accepted argument.\u2075\nA set of accepted arguments is called an extension. An\nimportant class of extensions for skeptical (versus credu-\nlous) reasoning are the grounded extensions [14], which\ncorrespond exactly to the well-founded model of the query\n$Q_{AF}$. That is, $defeated(x)$ is TRUE, FALSE, and UNDEF in\nthe WFS iff argument $x$ is defeated (orange), accepted\n(blue), or neither, which is also referred to as undecided\n(yellow) in AFs. Thus, the algorithms in Section 3 can be\nused (after reversing edges and renaming relations) to find\nthe grounded extension of an AF. The labels generated\ncan then be used to explain why a given argument is\naccepted or defeated via the actual $P_{ac}(x)$ and primary\n$P_{pt}(x)$ provenance of a node $x$.\nQueries through the Lens of Games. In [10], FO (first-\norder) queries are translated into a game normal form for\nunifying how and why-not provenance. In particular, the\ngame $G_{Q(D)}$ of a first-order query $Q$ (expressed in non-\nrecursive Datalog syntax) simulates an SLDNF evaluation\nof $Q$ over an input database $D$. The positions of the query\nevaluation game $G_{Q(D)}$ correspond, e.g., to rule firings\nand ground literals. The game is constructed in such a way\nthat the position that encodes a possible query answer is\nwon iff it is an answer to $Q(D)$, and lost otherwise. Since\nFO queries are non-recursive, the resulting game graph is\nacyclic and thus contains no drawn positions.\nThe how and why-not provenance of a query answer\ncorresponds to our notion of actual provenance. Primary\nprovenance refines the work in [10], and can be used to\nfind more specific derivations of a query answer (or non-\nanswers in the case of why-not provenance). This in turn\nhas applications, e.g., for reducing the provenance of an\nanswer (when multiple derivations of increasing length are\npossible) as well as for query debugging."}, {"title": "3.4. The Regular Structure of Game Provenance", "content": "Looking at the solved game in Figure 1b, one notices that\ncertain types of edges are absent, e.g., there are no moves\nfrom a lost node to another node that is lost or drawn.\nSimilarly, there always is a move from a won node to a\nlost node and from a drawn node to another drawn node.\nThese are not accidents.\nThe type graph in Figure 5 summarizes the provenance\nstructure of solved games, i.e., of node values and edge\ntypes. The seven edge types can be split into provenance-\nrelevant moves (winning, delaying, drawing), with edge\nlabels W, L, and D, respectively, and provenance-irrelevant\nmoves (blunders of type-1, type-2, and type-3).\nThe winning moves can be further subdivided into fast-winning, which are part of the primary provenance, and\nslow-winning, which constitute secondary provenance.\nFigure 5 also shows that there are three types of \"ghost\nmoves\" that cannot exist in a solved game graph: e.g., a\nposition would not be lost if there were a move to a lost\nor to a drawn position. Similarly, a drawn x can never\nhave a move to a lost follower y, otherwise x would be\nwinning rather than being drawn.\nThe Structure of Game Provenance. In the following,\nwe sketch a simple pattern-based method that reveals the\nregular provenance structure of solved games. In\naddition to yielding insights into games in general (and into\nother formalisms that can be reduced to games), and explaining\nand justifying the values of positions in particular, we can\nalso use this pattern-based approach to explore and query\nprovenance.\nPProvenance Paths. Consider a game $G = (V, E)$. Its\nmove relation $E$ induces a function $M_R$ (for move paths\nmatching $R$). Here $R$ is a regular expression over an\nalphabet {$W_{pr}, W_{sc}, W, L, D$} of edge labels.\nDefinition 11. The expression $M_R(x)$ evaluates to the\nminimal subgraph $G' \\subset G$ rooted at $x$ such that all paths\n$x \\rightarrow x_1 \\rightarrow x_2 \\rightarrow ... \\rightarrow x_n$\nin $G$, whose concatenated labels $l_1l_2...l_n$ match the\nregular expression $R$, are also matched by $G'$.\nIn this way, the parameter $R$ specifies a regular path\nquery (RPQ) [24], but unlike an RPQ which returns a set\nof nodes, $M_R(x)$ returns a subgraph definable by an RPQ.\nActual Provenance via RPQs. The actual provenance\n$P_{ac}(x)$ of a position $x$ can be defined using $M_R$:\n$P_{ac}(x) := \\begin{cases}\nM_{W.(L.W)^*}(x) & \\text{if } val_\\lambda(x) = W \\\\\nM_{(L.W)^*}(x) & \\text{if } val_\\lambda(x) = L \\\\\nM_{D^+}(x) & \\text{if } val_\\lambda(x) = D\n\\end{cases}$\nHere, $W$ is defined as ($W_{pr} | W_{sc}$).\nPrimary Provenance via RPQs. The primary provenance\n$P_{pt}(x)$ of a position $x$ is defined by:\n$P_{pr}(x) := \\begin{cases}\nM_{W_{pr}.(L.W_{pr})^*}(x) & \\text{if } val_\\lambda(x) = W \\\\\nM_{(L.W_{pr})^*}(x) & \\text{if } val_\\lambda(x) = L \\\\\nM_{D^+}(x) & \\text{if } val_\\lambda(x) = D\n\\end{cases}$"}, {"title": "5. Discussion and Future Work", "content": "We have studied in detail the problem of explaining why a\nposition in a game is won, lost, or drawn, respectively, and\nrevealed the fine-grained, regular structure of provenance\nin solved games. This game provenance has immediate\napplications, e.g., for argumentation frameworks and for\nqueries expressed in a game normal form. Our approach\nconsiders the provenance of a game position x as the\n(relevant) moves and positions that are reachable from a\nstarting position x.\nBy considering the structure of game provenance that\nresults from solving a game, we extend prior work [10],\n[19], [20] and identify three increasingly more specific\nlevels of provenance: potential, actual, and primary pro-\nvenance of a node. We also show how the actual and\nfull provenance labelings of a game can be computed,\nand how the standard approach for solving games (via\nbackward induction) can be extended to capture primary\nprovenance. The latter provides a specific \"fastest\" justifi-\ncation for why a position is won or lost. An open source\nsoftware demonstration of our approach is available [25].\nIn future work, we plan to develop additional tools for\nanalyzing and visualizing the provenance of games and\nargumentation frameworks. We also plan to extend our\napproach for credulous reasoning, i.e., employing stable\nmodels [15] and stable AF extensions [14]."}]}