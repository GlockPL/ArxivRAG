{"title": "Generative Model for Synthesizing Ionizable Lipids: A\nMonte Carlo Tree Search Approach", "authors": ["Jingyi Zhao", "Yuxuan Ou", "Austin Tripp", "Morteza Rasoulianboroujeni", "Jos\u00e9 Miguel Hern\u00e1ndez-Lobato"], "abstract": "Ionizable lipids are essential in developing lipid nanoparticles (LNPs) for effec-\ntive messenger RNA (mRNA) delivery. While traditional methods for designing\nnew ionizable lipids are typically time-consuming, deep generative models have\nemerged as a powerful solution, significantly accelerating the molecular discovery\nprocess. However, a practical challenge arises as the molecular structures generated\ncan often be difficult or infeasible to synthesize. This project explores Monte Carlo\ntree search (MCTS)-based generative models for synthesizable ionizable lipids.\nLeveraging a synthetically accessible lipid building block dataset and two special-\nized predictors to guide the search through chemical space, we introduce a policy\nnetwork guided MCTS generative model capable of producing new ionizable lipids\nwith available synthesis pathways.", "sections": [{"title": "Introduction", "content": "The development of messenger RNA (mRNA)-based therapeutics marks a transformative advance\nin the treatment and prevention of a wide range of diseases, including genetic disorders, infectious\ndiseases, and cancer [Sahin et al., 2014, Kong et al., 2023]. Given the intrinsic instability of mRNA,\na robust delivery mechanism is crucial, with ionizable lipid nanoparticles (LNPs) emerging as the\nleading technology for this purpose [Mitchell et al., 2021, Kularatne et al., 2022]. These LNPs\ncomprise four distinct lipid types, among which the ionizable amine-containing lipids are pivotal.\nThey primarily facilitate the encapsulation of mRNA within LNPs and enhance its delivery into the\ncellular cytoplasm, where it can be translated into therapeutic proteins [Kim et al., 2021, Degors et al.,\n2019, Wittrup et al., 2015, Xu et al., 2021]. Notably, different LNPs often feature unique ionizable\nlipid structures, emphasizing the importance of developing a diverse array of ionizable lipids. This\ndiversity is crucial for effectively delivering mRNA to various target cells and tissues, highlighting the\nneed for continued innovation in the design of ionizable lipids to facilitate mRNA-based therapeutics.\nDesigning novel ionizable lipids is traditionally time-consuming and labor-intensive. However, recent\nadvancements in the integration of deep learning with combinatorial chemistry have shown great\npromise in accelerating this development [Xu et al., 2024]. One of the primary challenges in ionizable\nlipid generation is the effective exploration of a vast combinatorial chemical space. The SyntheMol\napproach has demonstrated considerable success in this area, utilizing Monte Carlo tree search"}, {"title": "Related Work", "content": "Deep generative models have emerged as a powerful solution to the inverse molecular design\nchallenge, enabling the translation of desired molecular properties into specific molecular structures\n[Kusner et al., 2017, G\u00f3mez-Bombarelli et al., 2018, Simonovsky and Komodakis, 2018, Assouel\net al., 2018, Bian et al., 2019, Shi et al., 2021, Luo et al., 2021]. A practical problem that obstructs the\nusefulness of these generative algorithms is that proposed molecular structures may be challenging\nor infeasible to synthesize [Gao and Coley, 2020]. While post-hoc synthesis planning for generated\nmolecules is feasible [Gao and Coley, 2020, Segler et al., 2017, 2018], a more effective approach\nis to incorporate synthesis instructions directly into the design phase. One effective solution is to\nadopt a bottom-up approach which begins with existing building blocks and strategically determines\npathways to synthesize product molecules possessing desired properties [Bradshaw et al., 2020,\nSwanson et al., 2024].\nIdentifying new ionizable lipids remains a bottleneck of LNP development. Current state-of-the-art\napproaches still primarily rely on combinatorial chemistry techniques. Even when synthesized, an\nionizable lipid often fails to exhibit transfection capabilities, with a low likelihood of achieving high\ntransfection efficiency [Xu et al., 2024, Li et al., 2024]. Despite the vast structural design space\nof ionizable lipids, small modifications in chemical structure can lead to substantial differences in\nbiological performance [Li et al., 2024]. Existing approaches that incorporate machine learning into\nionizable lipid development primarily focus on building transfection efficiency predictors to aid in\nlipid screening [Xu et al., 2024, Li et al., 2024, Ding et al., 2023, Moayedpour et al., 2024]. However,\nno current approaches directly utilize machine learning for the generative design of ionizable lipids."}, {"title": "Background", "content": "This section presents the theoretical background of this work."}, {"title": "Monte Carlo Tree Search in Molecular Generation", "content": "MCTS is a robust algorithm that integrates the stochastic nature of Monte Carlo simulations with the\nstructured decision-making processes inherent in tree searches [Kocsis and Szepesvari, 2006, Coulom,\n2006]. A recent study has shown that MCTS-based generative models can perform successfully\nin small-molecule antibiotic development [Swanson et al., 2024]. In the context of SyntheMol,\nthe algorithm iteratively builds a tree structure, where each node represents one or more potential\nmolecular structures, and branches represent possible synthesis steps using 13 well-validated chemical\nreactions [Swanson et al., 2024]. The application of SyntheMol to lipid generation is detailed in\nAppendix B."}, {"title": "Guided Monte Carlo Tree Search", "content": "The pioneering work that integrates neural networks with MCTS is AlphaGo [Silver et al., 2016].\nBuilding upon that, AlphaZero refined this approach by merging the policy and value networks into\na single, more efficient neural network [Silver et al., 2017]. What's more, AlphaZero was trained\nexclusively through self-play, enabling the system to adapt and optimize its game play without relying\non external data. AlphaZero provides a highly relevant framework for the application to molecular\ngeneration. Although our approach diverges from AlphaZero in that it does not integrate a value\nnetwork within the MCTS framework-instead relying on separate property predictors-the role of\nthe policy network remains pivotal in both contexts. In molecular generation, our policy network is\ninstrumental in selecting the next building block for synthesis, which directly influences the structure\nand properties of the resultant molecule, akin to how each move in Go influences the progression and\noutcome of the game."}, {"title": "Retrosynthesis Evaluation", "content": "While the ideal method to validate the synthesis pathway of our generated products would be\nthrough experimental testing in a laboratory, practical constraints currently prevent us from doing\nso. Consequently, we rely on in silico evaluations to estimate synthesizability. We first calculate\nthe synthetic accessibility score (SA score) to predict synthesizability in an automated manner [Ertl\nand Schuffenhauer, 2009]. Additionally, we seek to validate our proposed synthesis pathways using\nSyntheseus [Maziarz et al., 2023], a python package for retrosynthetic planning.\nThe SA score is calculated through a combination of fragment contributions and a complexity penalty\n[Ertl and Schuffenhauer, 2009]. The resulting SA score provides a metric for synthetic accessibility,\nranging from 1 (indicating easy synthesis) to 10 (indicating high difficulty). However, while the SA\nscore differentiates between feasible and infeasible molecules to some extent, it does not provide\nspecific insights into the actual synthesis pathways. Syntheseus operates by recursively decomposing\na target molecule into increasingly simpler molecules through a backward reaction prediction model,\ncontinuing until it identifies a set of synthetically accessible building blocks [Maziarz et al., 2023].\nIn our experiments, we employ the Molecule Edit Graph Attention Network (MEGAN) backward\nreaction prediction model [Sacha et al., 2020]."}, {"title": "Methodology", "content": "This section presents the lipid building block dataset construction, the lipid property predictors, the\nreaction prediction model, and the policy network guided MCTS approach for lipid generation."}, {"title": "Dataset Construction", "content": "An ionizable lipid consists of an ionizable lipid head and several lipid tails. Our building block\ndatasets contain synthetically accessible molecules that can act as lipid heads or lipid tails. We filter\nvalid lipid building blocks from the ZINC20 database [Irwin et al., 2020], a large-scale chemical\ndatabase designed for drug discovery and virtual screening.\nWe identify a lipid tail building block if the molecule is similar to an actual lipid tail (i.e., the tail\ncomponent of an existing lipid). Taking advantage of the Lipid Analyzer\u00b9, an implemented toolkit for\nlipid tail extraction, we extract lipid tails from a lipid dataset sourced from [Sud et al., 2007, Aimo\net al., 2015]. We then conduct a similarity comparison to filter those molecules from the ZINC20\ndataset that are similar to a real lipid tail. The resulting molecules make up our lipid tail building"}, {"title": "Lipid Property Prediction", "content": "Our generative approach relies on molecular property predictors to evaluate the potential of generated\nmolecules to be an ionizable lipid. We employ a lipid classifier for binary assessment of lipid-likeness\nand an ionizability predictor to evaluate whether the generated product is ionizable.\nUtilizing the Chemprop graph neural network framework [Yang et al., 2019], our\nlipid classifier features three message passing layers that integrate molecular features, complemented\nby two feed-forward layers dedicated to predicting molecular properties. The dataset we use to train\nthe lipid classifier contains 180000 lipid samples and 180000 non-lipid samples. The non-lipid\nsamples are small molecules from the PubChem database [Kim et al., 2016]. Part of the lipid samples\ncome from publicly accessible lipid dataset LipidMaps and SwissLipids [Sud et al., 2007, Aimo et al.,\n2015]. The rest of the lipid samples are generated using a hierarchical graph encoder-decoder that\nemploys significantly large and flexible graph motifs as basic building blocks [Jin et al., 2020].\nAn ionizable molecule has neutral charge in physiological pH and becomes\npositively charged in acidic environments [Carrasco et al., 2021, Stern and McNeil, 2007]. For\nsimpler filtering purpose, we only consider the net charge under pH = 7.4 (i.e., represents the\nphysiological pH) and pH = 5 (i.e., represents the acidic environment). We utilize the MolGpKa\nmodule to determine acidic and basic groups within a given molecule and to estimate their respective\npKa values [Pan et al., 2021]. The net charge of each molecule under a given pH value can then be\ncalculated using the Henderson-Hasselbalch equation [Petrucci et al., 2002]."}, {"title": "Reaction Prediction", "content": "We employ a template-based reaction prediction model which applies predefined reaction tem-\nplates-derived from known chemical reaction mechanisms-to reactants. The advantages of this\napproach include faster computation, adherence to established chemical rules, and higher synthesis\nsuccess potential. We adopt the same reaction templates as SyntheMol, our baseline model. The\ncombinatorial chemical space explored by SyntheMol was the Enamine REadily AccessibLe (REAL)\nSpace [Grygorenko et al., 2020]. SyntheMol employs 13 reactions that account for 93.9% of the\nREAL Space [Swanson et al., 2024]. Although our lipid building block dataset differs from the REAL\nspace, the selected reactions are widely applicable across a broad range of chemicals, making them\nsuitable for our project as well."}, {"title": "Guided Monte Carlo Tree Search for Lipid Generation", "content": "Building upon the SyntheMol and inspired by AlphaZero [Swanson et al., 2024, Silver et al., 2017],\nwe apply the policy network guided MCTS to ionizable lipid generation. The integration of a policy\nnetwork with MCTS forms the cornerstone of our approach, enabling a strategic exploration of"}, {"title": "Experiments", "content": "Our experimental investigation focuses on comparing the performance of the SyntheMol approach,\nserved as the baseline, with our proposed policy network guided MCTS approach. We demonstrate\nthe enhanced efficiency of the guided MCTS approach in identifying and synthesizing high-potential\nionizable lipids."}, {"title": "Experimental Setups", "content": "Following the procedure described in Section 4.1, we construct a\nlipid building block dataset consisting of over 2.7 million lipid head building blocks and 5310 lipid\ntail building blocks. While directly incorporating such huge dataset into the MCTS would result in a\npredominantly exploratory behavior akin to random selections, we extract a subset of approximately\n12000 head building blocks to define our actual head search space. The entire tail building block\ndataset is utilized in subsequent levels of the search. For the evaluation of the policy network in the\nguided MCTS approach, an additional set of 200 testing head building blocks is employed.\nWe constrain the maximum number of child node expansions to be 2000,\nmeaning that each MCTS explores a head search space of this size. The MCTS is executed over\n10000 simulations to ensure comprehensive analysis of the generated lipid products. Additionally,\nthe exploration weight c used in the UCB score calculation, as detailed in Equation 5, is set at 10.\nWe operate the guided MCTS across 10 iterations. For every iteration,\nthe MCTS is executed 10 times, each exploring a head space of 200. This setup allows the 10 runs of\nMCTS collectively to explore a total head search space size of 2000, aligning with the head search\nspace used in the SyntheMol approach. Each MCTS runs 10000 simulations to gather substantial\nsearch data. The data from these 10 MCTS runs are pooled to train the policy network, and the\naccumulated generated products are analyzed as the iteration's output. The policy network undergoes\n20 epochs of training in each iteration. The exploration weight c used in the UCB score calculation,\nas outlined in Equation 2, is set at 20.\nThe policy network processes state-action pairs, where each state\nis the current molecule and the action is the next building block molecule selected. Each molecule\nis represented using a Morgan fingerprint with 1024-bit binary digit and radius 2 [Schneider et al.,"}, {"title": "Results and Discussions", "content": "We first present the performance of our lipid property predictors and then compare the generative\nresults of the SyntheMol approach with our proposed policy network guided MCTS approach."}, {"title": "Lipid Property Prediction", "content": "As previously mentioned, we utilize a Chemprop based binary lipid classifier to determine whether\na candidate molecule is lipid-like [Yang et al., 2019]. After training for a single epoch, our model\ndemonstrates exceptional performance, achieving both Receiver Operating Characteristic Area Under\nthe Curve (ROC-AUC) and Precision-Recall Area Under the Curve (PR-AUC) scores above 0.9999.\nTogether, these metrics, along with a test accuracy of 99.89%, underscore the robustness and predictive\naccuracy of our lipid classifier.\nIn terms of ionizability, we utilize the MolGpKa module to identify ionizable groups within a target\nmolecule and calculates their corresponding pKa values. We then determine the net charge of the\ntarget molecule at specific pH levels and conduct the ionizability filtering. According to [Pan et al.,\n2021], the MolGpKa predictor has undergone rigorous testing, thus justifying the credibility of our\nionizability predictions.\nTo better validate our lipid property predictors, we curated an ionizable lipid dataset with more than\n2 500 ionizable lipids that have been experimentally synthesized from published works [Xu et al.,\n2024, Li et al., 2023, He et al., 2023, Liu et al., 2021, Abd Elwakil et al., 2023, Yu et al., 2020, Wei\net al., 2023]. We evaluated our predictors on this dataset, achieving an accuracy of 98.32% for our\nlipid classifier. Notably, all ionizable lipids were correctly classified by the ionizability predictor."}, {"title": "Generative Results", "content": "Our primary objective is to generate products that are potent candidates for ionizable lipids, meaning\nwe aim for molecules with high property scores. We begin by examining the products generated via\nthe SyntheMol approach, which serves as a baseline for comparing the performance enhancements\nachieved with the guided MCTS approach.\nThe property score combines a lipid classifier score, which typically hovers near 0 or 1, and a\nbinary ionizability score. A property score approaching 2 typically identifies the molecule as a likely\nionizable lipid. After conducting 10000 simulations, a total of 16477 two-tail lipids were generated.\nWe observe that only 4513 of the 16477 generated products are predicted to be ionizable lipids,\nproviding an ionizable lipid rate at 0.2739. To evaluate the effectiveness of MCTS, we conducted\nexperiments with random generation. Specifically, we generated 10000 unique two-tail lipids through\nrandom combinations using the same lipid head and tail building block subsets, achieving an ionizable\nlipid rate of 0.1547. This result justifies the effectiveness of MCTS in guiding the generation of\nionizable lipids.\nWe now turn our attention to the outcomes of the policy network guided MCTS approach. By\ncomparing these results with those from the SyntheMol approach, we seek to illustrate the enhanced\neffectiveness of the policy network guided MCTS in producing ionizable lipids. We analyze the\nunique generated products from both training and testing simulations. The primary distinction\nbetween these simulations lies in their respective head building block search spaces. However, it\nis important to note that the selection of head molecules significantly influences the quality of the\ngenerated products. Nonetheless, observing the trend in quality changes within a specific head set, as"}, {"title": "Retrosynthesis Evaluation", "content": "Table 1 presents the evaluation results of our generated ionizable lipids and their corresponding\nsynthesis pathways. We consider all unique products generated during both training and testing\nphases across all iterations of the guided MCTS approach. For better comparison, we also include\nthe generated products from random combinations and the dataset of published ionizable lipids\nsynthesized in previous works [Xu et al., 2024, Huayamares et al., 2023, Ly et al., 2022].\nThe SA score, which ranges from 1 to 10 with lower values indicating easier synthesis [Ertl and\nSchuffenhauer, 2009], reveals similar results for both the SyntheMol and guided MCTS approaches.\nNotably, there is no significant difference between the SA scores of our generated products and those\nof the published ionizable lipids. While the SA score justifies the synthesizability of the generate\nproducts to some extent, it does not offer any insights into their specific synthesis pathways.\nUsing Syntheseus, we aim to identify synthesis pathways for the generated products using a backward\nreaction prediction model. Given that a single generated product may have multiple possible synthesis\npathways, we do not strictly adhere to those suggested by the generative model. Instead, we focus\non identifying reactants for the generated products and checking whether these reactants are present\nin our lipid building block dataset. We record the proportion of generated products that can be\nsynthesized using molecules from the building block dataset.\nWe observe that the retrosynthesis rate validated by Syntheseus is not high, with none of the cases\nexceeding 50%. The low rate may result from the unique characteristics of the lipid building block\ndataset and the reaction templates we adopted. For retrosynthesis planning, we utilize the MEGAN\nbackward reaction prediction model trained on the USPTO-50k dataset [Sacha et al., 2020]. Our lipid"}, {"title": "Conclusion", "content": "In this work, we have explored the Monte Carlo tree search (MCTS)-based generative models for\nionizable lipid generation. We constructed a lipid building block dataset, featuring synthetically\naccessible ionizable lipid heads and tails, which is well-suited for future lipid generation tasks.\nWe developed two lipid property predictors: a lipid classifier and an ionizability predictor, both\ndesigned to accurately assess whether a candidate molecule is lipid-like or ionizable. Adapting the\nSyntheMol approach, originally utilized for antibiotic discovery, we tailored this method for lipid\ngeneration to serve as our baseline model. We further innovated by developing a policy network\nguided MCTS-based generative model which is capable of producing high-quality ionizable lipids\nwith available synthesis paths, outperforming our baseline. Our achievements indicate that this project\noffers a promising direction for ionizable lipid generation, also contributing to the broader field of\ndrug delivery.\nNonetheless, it is important to acknowledge that the work has its limitations. If condition allowed, we\nmay conduct experimental validations of the existing reaction templates with lipid building blocks to\nensure their applicability and efficiency in lipid synthesis. It will be helpful to develop and integrate\nadditional reaction templates that are specific to lipid chemistry. To address the limitation of not\nhaving practical synthesis validations, future research should prioritize establishing collaborations\nwith chemical laboratories. This will enable empirical testing and validation of the synthesized\nmolecules, providing a direct assessment of their practical viability and safety. Develop or customize\ncomputer-aided retrosynthesis tools specifically for ionizable lipid generation can also be helpful."}, {"title": "Algorithm of Guided Monte Carlo Tree Search for Lipid Generation", "content": "We define a Node class to represent the nodes appeared in the tree search. The Node class has the\nfollowing attributes:\n\u2022 state: Stores the SMILES representation of the molecule represented by this node.\n\u2022 N: A visit count of the node, initialized to zero.\n\u2022 P: The prior probability assigned based on predictions from a policy network.\n\u2022 W: The cumulative value sum, representing the total assessed value of this node's state.\n\u2022 children: A dictionary to hold child nodes, with the keys of the dictionary to be actions\n(i.e., the next building blcoks to select) and the values to be corresponding child nodes."}, {"title": "Policy Network Training", "content": "As is mentioned before, the visit counts of all state-action pairs that appear in the tree search are\nrecorded to be the training data of the policy network. However, the search data we collect are highly\nimbalanced in the sense that there will be a lot more state-action pairs in later levels. The number of\nstate-action pairs from the first level (i.e., when state is the empty state and actions are the chosen\nhead building blocks) is very limited, being the number of different head building blocks that are\nexpanded by the root node. Meanwhile, search data from later levels will be very sparse in the sense\nthat the majority of the state-action pairs will have zero visit count. In order to better utilize our\nlimited data, we propose a customized method for training the policy network.\nLet f(s, a) denote the naive policy network output (before softmax) for the state-action pair (s, a),\np(s, a) denote the corresponding predicted prior (which will be used in the UCB score calculation),\nand \u03c0(s, a) be the search probability. We here adopt the search probability definition as proposed in\nthe AlphaZero algorithm [Silver et al., 2017].\n\u03c0(s, \u03b1\u2081) =\n$\\frac{e^{f (s, a_1)}}{\\sum_a e^{f(s, a)}}$ (6)\n\u03c0(\u03b5, \u03b11) =\n$\\frac{N(s, a_1)}{\\sum_a N(s, a)}$ (7)\nwhere \\( \\tau \\) is a temperature parameter controlling the level of exploration. When \\( \\tau \\) tends to infinity, the\nsearch probability is the same as random selections. When \\( \\tau \\) is small, say, when \\( \\tau \\)= 1, the search\nprobability strictly follows the actual visit count distribution. The objective of the policy network\ntraining is to maximize the similarity of p(s, a) and \u03c0(\u03c2, \u03b1).\nNow, suppose we take two state-action pairs, (s, a\u2081) and (s, a2), at a time. We apply the log-ratio\nand get:\nlog $\\frac{p(s, a_1)}{p(s, a_2)}$ = f(s, a\u2081) - f(s, a2) (8)\nlog $\\frac{\\pi(\\varepsilon, \\alpha_1)}{\\pi(\\varepsilon, \\alpha_2)}$ = $\\frac{1}{\\tau}$ log N(s, a\u2081) - $\\frac{1}{\\tau}$ log N(s, a\u2082) (9)\nThe previous objective is equivalent to maximize the similarity of f(s, a\u2081) - f(s,a2) and\n$\\frac{1}{\\tau}$ log N(s, a\u2081) - $\\frac{1}{\\tau}$ log N(s, a\u2082).\nWe therefore customize the loss function to be the error between f(s,a\u2081) \u2212 f(s, a2) and their\ncorresponding $\\frac{1}{\\tau}$ log N(s, a\u2081) - $\\frac{1}{\\tau}$ log N(s, a2), for any two state-action pairs, (s, a\u2081) and (s, a2).\nThis can be considered as a regression problem, MAE or MSE loss may be applied."}]}