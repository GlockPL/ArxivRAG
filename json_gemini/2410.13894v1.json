{"title": "Deep Learning Based XIoT Malware Analysis: A Comprehensive Survey, Taxonomy, and Research Challenges", "authors": ["Rami Darwish", "Mahmoud Abdelsalam", "Sajad Khorsandroo"], "abstract": "The Internet of Things (IoT) is one of the fastest-growing computing industries. By the end of 2027, more than 29 billion devices are expected to be connected. These smart devices can communicate with each other with and without human intervention. This rapid growth has led to the emergence of new types of malware. However, traditional malware detection methods, such as signature-based and heuristic-based techniques, are becoming increasingly ineffective against these new types of malware. Therefore, it has become indispensable to find practical solutions for detecting IoT malware. Machine Learning (ML) and Deep Learning (DL) approaches have proven effective in dealing with these new IoT malware variants, exhibiting high detection rates. In this paper, we bridge the gap in research between the IoT malware analysis and the wide adoption of deep learning in tackling the problems in this domain. As such, we provide a comprehensive review on deep learning based malware analysis across various categories of the IoT domain (i.e. Extended Internet of Things (XIoT)), including Industrial IoT (IIoT), Internet of Medical Things (IoMT), Internet of Vehicles (IoV), and Internet of Battlefield Things (IoBT).", "sections": [{"title": "I. INTRODUCTION", "content": "In the era of ubiquitous computing and IoT, the broad concept of 'XIoT' encompasses specialized domains-each tailored to specific operational needs and technological environments. XIoT includes familiar domains such as IoT, IIoT, IoMT, IoV, and IoBT. Together, these form the backbone of what is now known as the Extended Internet of Things (XIoT). The XIoT domain primarily enhances consumer usability and lifestyle through smart devices in personal and home environments, setting the stage for more sophisticated applications across its other specialized counterparts. For instance, the IIoT builds upon essential IoT technologies to optimize industrial processes through advanced automation and real-time data analytics [1]. Similarly, the IoMT is transforming healthcare by integrating intelligent medical devices that improve diagnostic accuracy and patient care [2]. Furthermore, the IoV enhances transportation systems by enabling vehicle-to-vehicle (V2V) and vehicle-to-infrastructure (V2I) communication, thereby increasing road safety and improving traffic management [3]. On the military front, the IoBT incorporates IoT technologies to enhance tactical operations through better situational awareness and automated battlefield support [4]. All of such have particular integration that facilitates seamless connectivity and enables more intelligent interactions between devices.\nDespite the advancements in these domains, they also introduce significant security vulnerabilities, evidenced by the rise in malware attacks such as Mirai and Gafgyt [5]. These attacks have notably devastated the XIoT domain, leading to extensive service disruptions and financial losses, with the global impact quantified in the billions [5]. Traditional malware detection methods have struggled to tackle sophisticated threats effectively. Conventional defenses, often reliant on outdated signature-based detection, are increasingly bypassed by attackers [6]. In contrast, machine learning techniques have shown promise in identifying malware through pattern recognition, although they require significant data analysis and reverse engineering efforts.\nThe 2018 WannaCry ransomware attack on Taiwan Semiconductor Manufacturing Company (TSMC), the world's largest semiconductor manufacturer, underscores the critical vulnerabilities inherent in IIoT environments. This attack, which led to a significant production shutdown, was initiated through a USB device infected with a variant of the WannaCry ransomware. The incident highlights the severe risks posed by physical attack vectors, such as USB devices, within IIoT settings\u2014where the convergence of digital and physical systems can result in extensive operational disruptions [7].\nSimilarly, IoMT domain faces unique cybersecurity challenges due to the sensitive nature of healthcare data and the critical importance of medical device functionality. Cyberattacks on IoMT systems often involve data breaches, man-in-the-middle assaults, probe attacks, decryption of network communications, and DoS attacks, all of which can lead to significant privacy and security issues. Notably, an IBM survey reveals that healthcare organizations have incurred the largest financial losses due to data theft, further emphasizing the vulnerability of IoMT environments. A striking example of this is the recent infiltration of Singapore's health system, where hackers accessed the personal information of 1.5 million patients, including the outpatient prescription data of 160,000 individuals, among whom was Singapore's Prime Minister [8].\nThese examples from the IIoT and IoMT domains illustrate the broader risks facing the entire XIoT. As these domains become more interconnected and integral to critical infrastructure, the consequences of security breaches become increasingly severe. This underscores the urgent need for advanced, domain-specific defenses capable of addressing the unique threats posed to each area of the XIoT.\nIn light of these issues, this survey aims to complement existing works and provide insights into the critical deep learning-based techniques used to analyze malware in XIoT, covering the latest developments. Deep learning significantly reduces manual labor and improves detection accuracy by automatically extracting complex patterns and learning from vast datasets."}, {"title": "A. Prior Surveys and Limitations", "content": "In this subsection, we provide a concise overview of research surveys that analyze malware in XIoT domains using deep learning methods. The comparisons of these studies are illustrated in Table I.\nSeveral surveys [9], [11] has focused on the utilization of ML in the IoT domain. Madan et al. [9] provides a comprehensive review of the methods and tools used for analyzing malware that targets Linux-based IoT devices. It covers both static and dynamic analysis techniques and emphasizes the role of ML in classifying and detecting IoT malware. Additionally, it discusses various data collection methods for threat analysis, including the use of IoT honeypots, and explores the application of machine learning techniques to categorize and identify malware based on specific features. Similarly, Gaurav et al. [11] explores the use of machine learning techniques for detecting malware in IoT devices within enterprise systems. It comprehensively reviews various detection approaches, including static, dynamic, and hybrid methods. Notable limitations of these works are that (1) most of them lack an in-depth discussion of deep learning techniques for IoT malware analysis, and (2) they lack addressing malware across various XIoT domains, such as Android, IIoT, IoMT, and IoV.\nAnother surveys [10], [14] focus on deep learning-based methods to enhance security within the IoT domain, particularly for detecting malware across various platforms such as IoT, mobile, and Windows environments. [10] traces the evolution of malware detection techniques from traditional methods to advanced deep learning approaches, providing an in-depth analysis of various models and techniques. The study also discusses different types of malware, including ransomware, Advanced Persistent Threats (APTs), and mobile malware. Similarly, Al-Garadi et al. [14] explore the application of machine learning and deep learning techniques to enhance security in the IoT domain. Their work addresses a range of cyber and physical security threats to IoT, including those targeting physical components, networks, cloud infrastructures, web services, and applications, as well as emerging attack vectors. Additionally, the paper reviews how machine learning and deep learning methods can be employed to strengthen security measures against potential attacks. However, both surveys have notable limitations: (1) insufficient coverage of deep learning-based methods for detecting malware in the IoMT and IoV domains, and (2) a lack of citations related to the use of deep learning techniques for malware detection.\nNgo et al. [12] focuses on static feature analysis for detecting IoT malware. The paper reviews various static methods used in identifying malware across IoT devices such as OpCodes, file headers, and grayscale images and evaluates their effectiveness\u2014besides a comparison of non-graph-based and graph-based detection methods. However, the paper has limitations in different places, such as static analysis, which might be less effective against sophisticated or newly emerging malware that can evade static detection.\nAslan et al. [13] discuss various malware detection methods, including signature-based, heuristic, behavior-based, cloud-based, and deep learning approaches. They provide detailed explanations of the underlying technology, applications, advantages, and weaknesses of each approach. However, the paper has some limitations; notably, the flow chart of the malware detection process is confusing and not well-explained, and it improperly groups deep learning-based, signature-based, behavior-based, IoT-based, cloud-based, and mobile-based methods into a single category for feature extraction.\nRaju et al. [15] focuses on malware threat detection across various CPU architectures and operating systems. It presents a taxonomy of malware detection techniques, particularly emphasizing static and dynamic analysis methods tailored for multi-architecture environments. For static analysis, malware detection is categorized into metric-based, graph/tree-based, sequence-based, and interdependence approaches; for dynamic analysis, it is based on trace and usage features. However, the paper has limitations; notably, the paper does not cover all the taxonomy fields mentioned in the figure, and it does not discuss deep learning-based methods in XIoT domains.\nWazid et al. [16] address the challenges posed by diverse CPU architectures and operating systems in IoT environments, complicating the implementation of threat detection and mitigation strategies. They discuss different malware types and the corresponding symptoms indicating their presence and also cover the architecture of the IoT communication environment. Although the paper title is supposed to focus more on the IoMT domain, it does not cover any IoMT research involving deep learning methods for malware analysis and does not discuss the potential challenges of implementing deep learning techniques, which require extensive data. Additionally, the taxonomy outlined in the paper, which includes key management, access/user control, intrusion detection, and user/device authentication, is generic and applicable to various XIoT domains, not specifically tailored to IoMT or IoT. The paper also lacks in-depth analysis specific to the IoMT domain."}, {"title": "B. Taxonomy of DL-based XIoT Malware Analysis", "content": "Within the vast domain of the XIoT, malware poses a significant threat, demanding advanced big data analysis tools as well as effective mitigation strategies. Deep learning has emerged as a powerful tool for identifying these threats, thanks to its sophisticated pattern recognition capabilities. This subsection presents the taxonomy of DL methodologies adopted for malware analysis across various XIoT domains. Fig.1 illustrates the central component of deep learning-Based XIoT Malware Analysis, influenced by four key elements. The \"Operating System\" block indicates the role of the domain in which the malware operates and is analyzed. \"Extracted Features\" refers to the specific characteristics or data points derived from malware samples, serving as critical inputs for deep learning models. The \"Deep Learning Techniques\" block emphasizes the use of advanced deep learning models to analyze and detect malware within the XIoT domain. Lastly, the \"XIoT Domain\" highlights the specific context, focusing on a wide range of connected devices. Fig.2 provides the taxonomy of our research, categorizing the XIoT domains into IoT, IIoT, IoMT, IoV, and IoBT. Each of these domains may operate under specific operating systems, which in turn influence the process of feature extraction. For instance, both Linux and Android operating systems might utilize similar feature extraction techniques, such as extracting Opcodes and Network Traffic. However, certain features are unique to specific operating systems; for example, the extraction of Permissions is specific to the Android operating system. Once the features are extracted, the choice of deep learning-based techniques for malware detection is made based on the nature of the extracted features and the corresponding XIoT domain. These techniques are tailored to enhance the accuracy and efficiency of malware detection across different XIoT domains."}, {"title": "C. Our Contribution", "content": "The main contributions of the paper are three-fold:\n\u2022 We focus research studies on malware analysis across various sectors of the XIoT, including IoT, IIoT, IoMT, IoBT, and IoV.\n\u2022 We provide a taxonomy based on four critical attributes shared between all XIoT domains, namely domain, operating system, extracted features and DL techniques.\n\u2022 We particularly focus on research studies that employ deep learning techniques for malware detection in XIoT domains, aiming to consolidate all related DL-based research within a single comprehensive survey."}, {"title": "D. Survey Methodology", "content": "We collected relevant studies on DL-based malware analysis on multiple XIoT domains from various databases, including Google Scholar, IEEE Xplore, ACM Digital Library, ScienceDirect, and SpringerLink. The keywords used in our search, identified by quotation marks, include \"malware detection\", \"malware classification\", \"malware analysis\", combined with keywords such as \"deep learning\u201d, \u201cInternet of Things (IoT)\", \"Industrial Internet of Things (IIoT)\u201d, \u201cInternet of Battlefield Things (IoBT)\u201d, \u201cInternet of Medical Things (IoMT)\", and \"Internet of Vehicles (IoV)\". Our survey covers publications from the years 2017 to 2024.\""}, {"title": "E. Organization of the Survey", "content": "The rest of this survey is organized as follows. Section II introduces the fundamental concepts of the XIoT domain, which includes the IoT, IIoT, IoMT, IoV, IoBT, and Android platforms. Additionally, it discusses various deep learning techniques used in malware analysis, along with malware analysis approaches. Section III discusses the factors that directly influence malware analysis in the XIoT domain, including ELF and PE file formats, CPU architecture, and operating systems. Section IV presents a comprehensive review of research studies that utilize deep learning techniques for analyzing malware within the XIoT domain. Finally, Section VI summarizes and concludes the work."}, {"title": "II. BACKGROUND", "content": "This section provides a background on three key areas: the XIoT, deep learning techniques, and malware analysis approaches."}, {"title": "A. Extended Internet of Things (XIoT)", "content": "The various applications of XIoT span across multiple domains, including IoT, IIoT, IoMT, IoV, and IoBT, as illustrated in Fig. 3. These applications include diverse sectors, from healthcare and industrial automation to vehicular technology and battlefield operations.\n1) Internet of Things (IoT): IoT is an expansive network of interconnected devices that enhance everyday life by seamlessly integrating digital intelligence into the physical world. From home automation systems that allow for remote control of household appliances-improving energy efficiency and security-to wearable technologies that monitor health metrics like heart rate and activity levels to provide insights into personal wellness, IoT is revolutionizing how we interact with our environment. In consumer electronics, IoT-enabled devices such as smart TVs and intelligent refrigerators not only offer unprecedented convenience but also adapt to user behaviors to optimize functionality and enhance user experience. These IoT systems communicate through the Internet, exchanging data to automate, optimize, and make more intelligent decisions, which significantly contributes to a more connected and efficient world.\n2) Industrial Internet of Things (IIoT): IoT technologies in industrial settings, known as the IIoT, have significantly altered the architecture of Industrial Automation and Control Systems (IACS). Historically, IACS were largely isolated from mainstream digital networks, utilizing firewalls and demilitarized zones for security when connectivity was necessary [17]. However, the emergence of IIoT has led to increased connectivity and inherent architectural changes within these systems, facilitating a closer interaction between industrial systems and cyber-physical systems under the broader umbrella of Industry 4.0 [17]. IIoT's role in smart manufacturing, energy management, quality control, and remote operation is crucial for advancing industrial efficiency and safety.\n3) Internet of Medical Things (IoMT): IoMT is an innovative development that merges telehealth technologies with IoT, significantly enhancing medical care efficiency and patient comfort. IoMT incorporates advanced IoT frameworks with medical devices to facilitate healthcare delivery through faster, cost-effective, and more personalized solutions. An elaborate architecture supports IoMT operations, consisting of cloud, fog, and end-user layers that support real-time health data processing and analysis. This structure harnesses emerging technologies such as Physically Unclonable Functions (PUF), Blockchain, Artificial Intelligence, and Software-Defined Networking to enhance security, privacy, and performance efficiency [18]. IoMT applications like remote medical assistance, smart and connected hospitals, and robotics for healthcare are vital components of the XIoT landscape.\n4) Internet of Battlefield Things (IoBT): IoBT represents a pivotal evolution in cyber-physical systems, aiming to enhance battlefield resilience through advanced connectivity and automation. Central to the IoBT is its ability to resist and adapt to a diverse array of threats, significantly more varied than those faced by its civilian counterparts. This robustness is achieved by integrating heterogeneous devices including sensors, actuators, and intelligent algorithms all designed to function under the extreme conditions of warfare [19]. Wearable sensors for soldiers, logistics, and autonomous drones are among the critical applications of IoBT in enhancing battlefield capabilities.\n5) Internet of Vehicles (IoV): IoV focuses on enhancing vehicular communication and integrates various data-driven services to support safer and more efficient roadways [20]. However, IoV is characterized by a dynamic and automated interplay between vehicles, infrastructure, and users, facilitated through sophisticated sensory and networking technologies. IoV's pivotal role in modern transportation is the ability to allow vehicles to interact with their environment and with each other in real-time. This interaction is supported by a multi-layered architecture comprising sensory, network, and application layers, each playing a crucial role in data collection, processing, and application, respectively. Such comprehensive connectivity is aimed at improving traffic management, minimizing the risks of accidents, and optimizing logistics and vehicle maintenance through predictive analytics."}, {"title": "B. Deep Learning Techniques", "content": "1) Multi-Layer Perceptron: The Multi-Layer Perceptron (MLP) or Deep Neural Network (DNN) is a fundamental type of feedforward artificial neural network crucial to the architecture of deep learning systems. As a supervised learning model, the MLP comprises multiple layers including an input layer, one or more hidden layers, and an output layer, forming a fully connected network. This connectivity means that each neuron in a given layer links directly to every neuron in the following layer. The primary role of the input layer is to receive and normalize input data, while the hidden layers focus on processing these inputs through a series of computational steps. The output layer is responsible for making predictions or decisions based on the aggregated and processed information from the hidden layers [21].\n2) Convolutional Neural Networks: Convolutional Neural Networks (CNNs) are a sophisticated class of feedforward neural networks that have revolutionized various fields by enabling automatic feature extraction without manual intervention, a significant advance over traditional methods. Primarily inspired by the human visual perception system, CNNs are particularly powerful in image classification, object detection, speech recognition, and even bioinformatics and time series prediction. The architecture of a CNN typically involves several layers, including convolutional layers, pooling layers, and fully connected layers. In the convolutional layer, learnable filters extract different levels of features from the input, for instance, simple textures and patterns in earlier layers and more complex details in deeper layers. Following this, the pooling layer helps reduce dimensionality and computational load while maintaining the robustness of the features extracted. This layer also aids in making the detection process stable to minor changes in the position and orientation of recognized objects. The CNN usually ends with a fully connected layer that acts like a classifier, integrating learned features into final predictions [21].\n3) Spatial Pyramid Pooling Networks: Spatial Pyramid Pooling Networks (SPP-net) introduce the spatial pyramid pooling layer into a CNN architecture to remove the requirement for a fixed-size input image. This layer performs a pooling operation that can accept inputs of any size and produce outputs of a fixed size so that they can be fed into the fully connected layers downstream without needing to resize or crop the input images first. By employing multi-level pooling from the entire image, the network retains the ability to recognize objects across various scales and deformations. SPP allows the network to be more versatile in handling images of different dimensions, enhancing its usability in practical applications where input sizes vary significantly. The SPP layer is implemented by dividing the feature map that comes from the last convolutional layer into spatial bins at multiple levels of resolution, which correspond to the layers of the pyramid. These bins are then pooled (typically using max pooling) to generate a fixed-length output vector for each level of the pyramid, which is concatenated to form the final output of the SPP layer. [22].\n4) Recurrent Neural Networks: Recurrent Neural Networks (RNNs) are a sophisticated class of deep learning models designed to process sequential data using internal memory to capture temporal dependencies. Unlike conventional neural networks, which perceive each input as independent, RNNs can consider the order of inputs, which is essential for tasks involving sequential information such as natural language processing, speech recognition, and video classification. The core feature of RNNs is the loop mechanism that allows them to perform the same operation on every sequence element, with the output of each step being dependent on the previous outputs. This is achieved through a memory state or hidden layer, which integrates the current input with the previous state using an activation function such as the hyperbolic tangent. Although traditional RNNs are limited by their short-term memory, leading to challenges in learning from long input sequences [21].\n5) Long Short-Term Memory: Long Short-Term Memory (LSTM) networks, a specialized form of RNNs, were introduced to overcome the challenge of capturing long-term dependencies in sequence data, a limitation faced by traditional RNNs. LSTMs have significantly shaped the landscape of deep learning through their unique architecture, designed to enhance memory retention over extended periods. Central to the LSTM model are three distinct gates: the input gate, the forget gate, and the output gate, which collaboratively manage the flow of information within the unit. These gates control the updating of the internal state, the extent to which previous states are retained or discarded, and the influence of the internal state on the output. This configuration allows LSTMs to maintain a durable link to past information, facilitating more effective learning and prediction in tasks involving long sequence data. Moreover, the architecture typically includes a series of these units through which both the current input and the output from the previous timestep are processed sequentially, ensuring dynamic updating of states throughout the network [21].\n6) Bidirectional Long Short-Term Memory: Bidirectional Long Short-Term Memory (Bi-LSTM) enhances the traditional LSTM architecture that enhances sequence modeling by considering past and future contexts. Standard LSTMs process inputs in a forward direction only; Bi-LSTMs address this limitation by incorporating a backward direction, allowing for a comprehensive understanding of temporal dependencies. Specifically, a Bi-LSTM consists of two parallel LSTM layers: one processes the input sequence from left to right (forward LSTM layer) and the other from right to left (backward LSTM layer). This setup enables the model to gather information from both directions simultaneously. During the training phase, the forward and backward LSTM layers independently extract features and update their internal states based on the sequence inputs. Each layer outputs a prediction score at every time step, which is then combined using a weighted sum to produce the final result [21].\n7) Gated Recurrent Unit: The Gated Recurrent Unit (GRU) is another variant of the RNN architecture designed to address the short-term memory issue while offering a simpler structure compared to the LSTM. By combining the input and forget gates into a single update gate, the GRU provides a more streamlined design without a separate cell state. It consists of three main components: the update gate, the reset gate, and the current memory content. These components enable the GRU to selectively update and utilize information from previous time steps, thus capturing long-term dependencies effectively. The update gate controls how much past information is retained and combined with current input, while the reset gate determines how much past information should be forgotten. The current memory content, influenced by the reset gate, contributes to the candidate activation for updating the final memory state. Although GRU simplifies the number of tensor operations, thus potentially allowing for faster training, the choice between GRU and LSTM depends on the specific use case and the nature of the task at hand [21].\n8) Generative Adversarial Networks: Generative Adversarial Networks (GANs) are a powerful class of neural network architectures designed for generative modeling. These networks facilitate the generation of realistic and novel samples by leveraging a dual-model structure that includes a generative and discriminative models. The generative model produces images that mimic real-life examples, whereas the discriminative model evaluates these images to distinguish between genuine and synthetic outputs. This setup enables a dynamic, adversarial interaction where the generator and discriminator iteratively improve through a competitive game-like scenario. In practice, GANs first employ the generator to create content that emulates the real data distribution, then train the discriminator better to identify the differences between real and generated images. This training process involves backpropagation and repeated presentation of datasets to enhance the discriminator's accuracy and the generator's ability to deceive. Typically, the discriminator is constituted by CNNs, while deconvolutional networks are used for the generator, refining their capability to produce increasingly sophisticated and indistinguishable images from real ones [21]."}, {"title": "C. Malware Analysis Approaches", "content": "In this subsection, we explore the four fundamental techniques for malware analysis: static, dynamic, hybrid, and online approaches. These methods range from analyzing malware code without execution to monitoring its behavior in real-time environments.\n1) Static Analysis: static malware detection involves using techniques that analyze the characteristics and behavior of malware without executing the code. There are different types of static detection methods, including CFG analysis, opcode-based techniques, and analysis of byte sequences from executable files [23] [24] [25]. However, the use of static analysis in IoT malware detection is significant due to IoT devices' limited resources and processing power, as well as the diversity of device types and operating systems [26]. Furthermore, static analysis is crucial for understanding the behavior of IoT malware without adding more effort to run the code. Moreover, the static analysis techniques in IoT malware detection can be implemented through machine learning and deep learning techniques, as they provide valuable information about the behavior and characteristics of malware without executing the code. Integrating modern ML and DL techniques with static analysis methods provides practical solutions to the new IoT malware variants [27].\n2) Dynamic Analysis: The dynamic malware detection approach is characterized by identifying malware in IoT devices through the execution of malware samples and monitoring their behavior. This approach is particularly essential for detecting new and unrecognized malware types, which traditional signature-based detection methods often fail to recognize [13], [28]. Conducted within a controlled, isolated environment like a sandbox, dynamic analysis allows for the comprehensive extraction of key behavioral features such as file interactions, process behaviors, and network communications [29]. Furthermore, machine learning and deep learning techniques play an important role by facilitating the extraction and analysis of features during code execution, which provides a deeper understanding of the malware's true behavior [30]. These methods have been tested using both actual malware samples and benign programs within a controlled environment to monitor and assess malware activities [31]. Additionally, the behavioral patterns derived from dynamic analysis are essential in detecting and categorizing unknown malware into known groups [32].\n3) Hybrid Analysis: The hybrid analysis approach combines static and dynamic analysis to enhance detection accuracy. This method leverages the strengths of both: analyzing malware code without execution (static analysis) and observing malware behavior during execution in a controlled environment (dynamic analysis). For instance, research [33] has demonstrated the efficiency of this approach by collecting execution data from malware and benign applications to distinguish patterns related to system calls for file and network access. By doing so, they establish distinct sets of malicious and normal behaviors that differentiate these patterns. Afterward, when examining new applications, dynamic analysis is utilized to gather system call data, which is then compared with these predefined pattern sets to determine the application's nature. Similarly, [34] integrates static and dynamic analyses; the static part involves reverse engineering to understand the malware structure and potential impact, while the dynamic part observes its behavior upon execution.\n4) Online Analysis: The online malware detection approach is characterized by continuous system monitoring to preemptively identify and mitigate malware. This approach is different from both static and dynamic analysis approaches. Specifically, static analysis examines executable code to create malware signatures, while dynamic analysis involves the execution of programs within controlled settings to monitor their behavior. In online malware detection, despite preventative strategies, malware may penetrate systems, which requires continuous attention [35]. However, various advanced techniques focus on online malware detection, including deep learning and ensemble methods. However, these methods typically merge elements from both static and dynamic analysis to develop efficient and scalable models capable of accurately identifying malware [36] [37] [38]. Furthermore, online malware detection employs techniques such as virtual machines, dynamic binary instrumentation, information flow tracking, and software anomaly detection to continuously monitor and identify potential security threats [39]. Other efforts in online malware detection [40] [41] incorporate performance metrics and process-level data, alongside behavioral analyses including examining CPU, memory, and disk usage to determine the existence of malware."}, {"title": "III. OVERVIEW OF XIOT MALWARE", "content": "This section provides an overview of malware within domain of the XIoT, covering widely used file format to various CPU architectures and operating systems integral to XIoT devices. Additionally, we present the main features that are essential for effective malware analysis."}, {"title": "A. Executable File Formats", "content": "1) ELF File Format: The Executable and Linkable Format (ELF) is a standard file format that is notable for its flexibility in supporting a wide range of CPU architectures, including x86, ARM, and RISC-V [42] [43]. ELF files incorporate various types, such as executable files, relocatable files, shared object files, core dump files, and specific processor supplement files. Each type contains crucial data, including the program header table, which contains entries describing the segments used for loading the file into memory, and the section header table, which defines the sections within the file, such as code, data, and symbol tables [44].\nAs shown in Fig. 4, the ELF format is divided into two main stages: the Linking Stage and the Executing Stage. During the linking stage, the ELF file is organized into sections, each serving a specific purpose. These sections include the Code (executable instructions), Data (initialized variables), Symbol Table (linking references such as function names and variable locations), and Section Header Table (which lists all sections within the file). This structure ensures that the linker can correctly combine multiple object files into a single executable or shared object. In contrast, the executing stage focuses on Segments, which are derived from the sections during the linking process and are loaded into memory when the program runs. These segments typically include the executable code, data, and other essential runtime information. The ELF header and program header table play a critical role in mapping these segments into memory, ensuring that the operating system can correctly execute the program.\nIn the XIoT malware domain, the ELF file format is essential due to the widespread use of Unix-based systems in IoT devices, which primarily use ELF as their standard format for binary files [45], making ELF the default executable file format. Additionally, the importance of ELF files is highlighted in the dynamic analysis of IoT malware, since behaviors linked to memory, network, virtual file systems, processes, and system calls are derived from ELF files for effective malware detection [46]. The classification of IoT malware often involves techniques such as analyzing OpCode sequences extracted from disassembled ELF files or evaluating features in the Control Flow Graph (CFG) generated from these sequences.\n2) PE File Format: The Portable Executable (PE) file format, as illustrated in Fig. 5, is essential for executables, object code, DLLs, FON Font files, and other types used in 32-bit and 64-bit versions of Windows operating systems [47]. This format includes a data structure crucial for the Windows OS loader to manage the wrapped executable code. It includes several key components: the MZ header, which ensures compatibility with MS-DOS systems and determines the offset for the start of the COFF Header; the COFF Header, which contains information about the architecture the executable is designed to run on, including support for a randomized base address; the Optional Header, which follows the COFF Header and provides detailed information such as the preferred base address of the executable and memory allocation specifics; the Data Directories within the Optional Header, detailing specific data structures used by the executable like import and export tables; and the Section Table, which defines various sections of the executable, such as code and data sections, crucial for the organization and execution of the binary. PE files are significant in malware analysis because they encapsulate executable code and metadata necessary for the Windows loader. Malware can be detected by analyzing the dynamic behavior of these files [48]. Furthermore, analyzing static features extracted from the PE file headers, which include metadata about the executable code, such as machine architecture, code size, and system resources, provides a solid foundation for effective malware detection strategies [49]."}, {"title": "B. XIoT CPU Architectures", "content": "The selection of CPU architectures in XIoT devices, which include IoT as a sub-domain, is crucial, impacting various aspects such as resource allocation, task offloading, and botnet detection. XIoT devices often incorporate open-source code and employ a range of CPU architectures, including MIPS, MIPSEL, PPC, SPARC, ARM, MIPS64, sh4, and X86. Understanding how different CPU architectures influence XIoT systems is important because XIoT botnet samples are designed to operate across multiple CPU architectures, with some explicitly targeting specific types [50].\nThe commercial market continuously upgrades XIoT architectures, including IoT, to reduce data transmission costs, latency, and bandwidth usage for diverse application requirements [51]. Moreover, the security challenges posed by the diversity of CPU architectures in XIoT devices cannot be ignored, as vulnerabilities in these architectures can be exploited by malware, making XIoT devices, including IoT, susceptible to significant security issues [52]. However, choosing a lightweight CPU architecture is essential for optimizing XIoT device performance, resource utilization, and energy efficiency. Lightweight architectures, such as the ARM Cortex-M series, are specifically designed to meet the low-power and resource-constrained requirements of XIoT applications. These architectures balance performance and power consumption, making them ideal for XIoT deployments, including IoT-specific use cases [53]."}, {"title": "C. XIoT Operating System Platforms", "content": "The selection of an operating system for IoT devices is based on multiple considerations, including the specific use cases of the device, its resource constraints, security requirements, and the imperative for energy efficiency [54]. As illustrated in Fig. 6, devices at the higher end of the IoT spectrum may employ conventional operating systems such as Linux [55], whereas devices at the lower end, characterized by stringent resource limitations, are often equipped with operating systems explicitly engineered for embedded IoT applications, including RIOT, Contiki, FreeRTOS, and ARM Mbed [56]. These lightweight operating systems are designed to address resource constraints and ensure real-time operation effectively. However, the operating system selection must meet the security paradigm within IoT frameworks, ensuring that the chosen operating system does not degrade the security integrity of IoT platforms and minimizes energy consumption while maximizing performance [57]."}, {"title": "D. Data Representations for Malware Analysis", "content": "In this subsection", "Code": "An Operation Code (OpCode) is a part of a machine language instruction that specifies the operation to be performed [58", "ADD\", \"SUB\", or \"MOV\") play a crucial role, with each OpCode corresponding to a specific operation, such as adding two numbers, moving data from one location to another, or comparing two values.\nThe OpCode sequences are utilized in malware detection methods, underscoring their importance in static analysis. Several research studies employ OpCodes in various ways to detect IoT malware. Some approches [59": [60], "61": "addresses the issue of identical OpCode sequences within function call graphs (FCGs) by employing hash functions to efficiently merge nodes with identical OpCodes", "62": "estimates the frequency of occurrences of OpCodes in OpCode sequences by applying the Term Frequency-Inverse Document Frequency (TF-IDF) model", "Strings": "Strings are sequences of characters, texts, or commands within malware executables that can be analyzed to identify malicious behavior [63", "63": "characterizes IoT malware by identifying obfuscated samples and extracting meaningful strings, including commands and adversarial IP addresses. This technique is essential in revealing groups of IoT malware sharing same characteristics which helps in classifying malware families. Another approach [64", "65": "converts strings into a visual format through vectorization; Mal3S applies a SPP-net model to analyze feature images derived from strings. Furthermore, [66"}]}