{"title": "Synthetic Datasets for Machine Learning on Spatio-Temporal Graphs using PDEs", "authors": ["Jost Arndt", "Utku Isil", "Michael Detzel", "Wojciech Samek", "Jackie Ma"], "abstract": "Many physical processes can be expressed through partial differential equations (PDEs). Real-world measurements of such processes are often collected at irregularly distributed points in space, which can be effectively represented as graphs; however, there are currently only a few existing datasets. Our work aims to make advancements in the field of PDE-modeling accessible to the temporal graph machine learning community, while addressing the data scarcity problem, by creating and utilizing datasets based on PDEs. In this work, we create and use synthetic datasets based on PDEs to support spatio-temporal graph modeling in machine learning for different applications. More precisely, we showcase three equations to model different types of disasters and hazards in the fields of epidemiology, atmospheric particles, and tsunami waves. Further, we show how such created datasets can be used by benchmarking several machine learning models on the epidemiological dataset. Additionally, we show how pre-training on this dataset can improve model performance on real-world epidemiological data. The presented methods enable others to create datasets and benchmarks customized to individual requirements. The source code for our methodology and the three created datasets can be found on github.com/github-usr-ano/Temporal_Graph_Data_PDEs.", "sections": [{"title": "1 Introduction", "content": "Partial differential equations (PDEs) describe numerous scientific processes, and many of these processes are of spatio-temporal nature, for instance fluid dynamics, chemical diffusion, financial mathematics, climate modeling, biomechanics, or seismology. Over the past centuries, considerable research efforts have been dedicated to advancing mathematical modeling with PDEs. Although there exists a significant amount of work on PDEs and their solutions (Evans, 2022), the practical implementation of a PDE solver remains a demanding task. Prominent ML research focuses on the study of PDEs itself, such as Raissi et al. (2019); Li et al. (2021). To support this research, some public datasets for machine learning (ML) on PDE-generate data already exists (Takamoto et al., 2022), although they have some limitations that we will address later.\nGraphs are a powerful tool for describing complex geometric structures in real-world scenarios, such as surfaces, volumes, or sensor networks. Recently, there have been notable developments in specifically spatio-temporal graph modeling within the field of machine learning (Chen and Eldardiry, 2024). One big obstacle for benchmarking, comparing, and for further developments, is the availability of spatio-temporal data. Only few datasets for spatio-temporal graph machine learning can be found in literature, such as traffic data from the California PeMS system (Li et al., 2018; Yu et al., 2018; Cini et al., 2023) in different settings, or COVID-19 data Gao and Ribeiro (2022). For some benchmarking applications Huang et al. (2023); Gastinger et al. (2024) offer different datasets of interest. Although the existent datasets are valuable for specific tasks, they have limitations in quality (high noise), scope (few samples), application (topic), accessibility (unpublished), and adaptability (high individual pre-processing effort). Thus, we identify a lack of larger high-quality datasets for different tasks. These limitations hinder the development and comprehensive benchmarking of spatio-temporal graph architectures for specific applications and diverse tasks. Therefore, large and more diverse high-quality datasets that are freely accessible are crucial.\nTo overcome these limitations, synthetic data is a promising ressource. The utilization of synthetic data allows the fast creation and adaption of datasets, while avoiding barriers regarding privacy or data availability. Furthermore, synthetic data is less error-prone regarding measurement flaws and easier to control, as all involved dynamics are known in contrast to real-world data. Some examples of (partially) synthetic datasets that find application in machine learning are extensively used weather datasets (Mu\u00f1oz Sabater et al., 2021), turbulence data (Li et al., 2008), PDE data (Takamoto et al., 2022) or ground motion data (Lehmann et al., 2024).\nThis paper builds on the idea to utilize synthetic data and makes the significant developments from past PDE research accessible to the spatio-temporal graph learning community. We outline a method for generating synthetic datasets based on PDEs, and provide three spatio-temporal datasets ready to use, alongside with code. To this end, we solve three exemplary PDEs related to different types of disaster, each describing the movement of entities over space and time. We solve these PDEs on an irregular domain, and evaluate them on irregularly distributed points on this domain, as this is the realistic scenario for the presented applications. Subsequently, we form time-dependent graphs from the obtained values in combination with the underlying spatial structure, to which we grant researchers"}, {"title": "2 Temporal PDEs to Simulate Spatio-Temporal Movement", "content": "To simulate propagations through space and time through three exemplary PDEs, we first generally outline the numerical approximation of the solution. In Section 3, we describe the generations of the datasets more explicitly.\nOverview of Our PDEs The first equation we employ is inspired by the structure of real-world epidemiological data (e.g. COVID-19 incidences), which suggests the use of spatio-temporal graph machine learning (Nguyen et al., 2023; Gao and Ribeiro, 2022). We create a comparably large graph dataset containing long records of infectious data with different epidemiological settings but consistent measurements over time, absence of noise, and unconstrained accessibility to all determining information. This or any similar epidemiological PDE, based on the SIR-ODE (Kermack and McKendrick, 1991), has never been solved numerically. Especially, there are no accessible simulations for other practitioners. Furthermore, we want to enable epidemiological researchers, to use individual spatial domains (e.g. country) by adapting our published code to specifically train and test models on other geometries. Additionally, a broad collection of similar PDEs with slight adaptations can easily extend the modeling by features such as vaccination status (Schlickeiser and Kr\u00f6ger, 2021), exposed (He et al., 2020), or disease vectors (Collins and Duffy, 2022). Naturally, similar adaptations can also be applied to the following two equations.\nThe second equation, an advection-diffusion (or convection-diffusion) equation, models the movement of particles (e.g. dust, nuclear fallout, smoke) or other quantities in the atmosphere. The arrangement as a spatio-temporal graph as the underlying datatype is canonical, as real-life measurements of those quantities with a sensor network likewise have an irregular geometry. Besides a further benchmarking of temporal graphs, the creation of such a dataset could be used to pre-train either risk-prediction models or to pre-train or test specific parts of ML-based weather models such as ClimODE (Verma et al., 2024).\nAs a third PDE, we choose the wave equation, which is very common in physics and describes, for example, water, sound, or electromagnetism. In our case, we model a tsunami wave approaching some coastline, where an interesting task could be to predict the next few steps of the wave.\nGeneral setting We solve the PDEs on (different) 2D-domains $$\\Omega \\subset \\mathbb{R}^2$$ for the three proposed scenarios. The PDEs are time-dependent on an interval [0, T], and their solutions vare of dimension $$d\\in \\{1,2\\}$$, depending on the equation. Generally, our PDEs have the form $$\\frac{\\partial \\nu}{\\partial t} = F(\\nu,\\nabla\\nu, \\Delta \\nu)$$, with some additional boundary conditions. F is some (general) functional which will be specified later, $$\\Delta$$ the Laplace operator and $$\\nabla$$ the Gradient, both only along the spatial dimensions.\nThe solution $$v : [0, T] \\times \\Omega \\rightarrow \\mathbb{R}^d$$ will be evaluated on a set of points within the domain $$\\Omega$$. These points mimic geographical regions and their administrative units, or any unevenly distributed network of sensors. We equip this set of points with adjacencies and inverse distances to create a spatio-temporal graph dataset.\nOur method is applicable to an even broader class of PDEs than those described here (e.g., for d > 2). It not only facilitates the exchange and extension of the domain or parameters, but can also be seamlessly extended to PDEs for which the FEM is effective, such as elasticity-, (Navier-)Stokes-, Euler-, Schr\u00f6dinger-, and Burgers equations, for which numerous implementations are available.\nNumerical solution sketch In the following paragraphs, we describe the numerical approximation of different time-dependent PDEs. This part can be skipped by a reader looking for a spatio-temporal graph dataset but does not want to bother with the details of its generation. However, to understand and adapt the published code and the data generation process, a short sketch of the methods is inevitable to us and important to a reader looking to expand our set of equations and parameters. Note, that although the outlined methodology can be applied to countless processes and PDEs, the complexity of the synthesized data is limited by the amount and complexity of given dynamics."}, {"title": null, "content": "We solve the equations iteratively in the time domain and solve the occurring PDE for each time-step with the FEM, this order is called Rothe method. We therefore first discretize alongside the temporal dimension with an Euler scheme, i.e. approximate the time-derivative with a difference quotient. We use the Crank-Nicolson method, which is a mixture of the implicit and explicit Euler scheme for time-stepping. With $$\\theta = 0.5$$, a small temporal Euler stepsize h, and $$v = v(x,t)$$ and $$v^+ = v(x, t + h)$$ the approximation has the form\n$$\\frac{\\nu^+ - \\nu}{h} = \\theta F(\\nu,\\nabla\\nu, \\Delta \\nu) + (1 - \\theta)F(\\nu^+, \\nabla\\nu^+, \\Delta \\nu^+).$$\nSince for the timestept the solution vis known, we thereby obtain a PDE that is not time-dependent anymore. We solve this PDE for $$v^+$$ with the FEM, which is the most flexible, reliable, and therefore standard numerical approach on PDEs. We only give a sketch of the FEM here, as details can be found in numerical textbooks for PDEs. The FEM discretizes the domain into a mesh, on which a set of test functions as well as trial functions (approximation of the solution v) are defined. Throughout this work, we use first-order (linear) Lagrange Elements as test and trial functions. To obtain the so-called weak formulation, we rearrange the PDE into an implicit and an explicit part, then multiply it from the left with the test functions and integrate over the full domain. This forms an inner product, which allows an underlying Sobolev space to have the structure of a Hilbert space. We will not dive deeper into this, but use the notation of an inner product $$(\\varphi,\\nu) = \\int_{\\Omega} \\varphi\\nu \\, d\\vec{x}$$ for a better readability.\nReplacing additionally v, $$v^+$$ with the corresponding trial functions $$\\tilde{\\nu}, \\tilde{\\nu}^+$$, we obtain the formulation:\n$$(\\varphi, \\tilde{\\nu}^+) - h(1 - \\theta)(\\varphi, F(\\tilde{\\nu}^+,\\nabla\\tilde{\\nu}^+, \\Delta \\tilde{\\nu}^+)) = (\\varphi,\\tilde{\\nu}) + h\\theta(\\varphi, F(\\tilde{\\nu},\\nabla\\tilde{\\nu}, \\Delta \\tilde{\\nu})).$$The left-hand-side (implicit side) can be written as $$A(\\tilde{\\nu}^+)$$, the right hand (explicit side) as b. We then seek to solve $$A(\\tilde{\\nu}^+) = b$$ for (the parameters of) $$\\tilde{\\nu}^+$$. Note, that technically o is a vector of test functions, but we wanted to keep the notation simple.\nOne often employed identity for compact $$\\Omega$$ is $$(\\varphi, \\Delta \\nu\\rangle = -\\langle\\nabla\\varphi, \\nabla\\nu\\rangle$$ due to integration by parts, which we apply when Dirichlet or zero-flow Neumann boundary values are imposed. Note that we omit plenty of information on which space this inner product is defined and details of such transformations for the sake of simplicity, but again refer to any textbook covering the FEM."}, {"title": "2.1 SI-Diffusion Equation", "content": "To model the spatio-temporal spread of infectious diseases, we consider the following PDE from Murray (2003)\n$$\\frac{\\partial S}{\\partial t} = -rIS + D\\Delta S, \\\\ \\frac{\\partial I}{\\partial t} = rIS - \\alpha I + D \\Delta I,$$\nwhere $$\\Delta$$ denotes the Laplace operator and the functions S(x, t), I(x, t) describe the densities of the susceptible and infected population over space and time.\nThe functions a(x,t), r(x, t), and D(x, t) in the equation represent dynamics rising from pathogens and the population. More precisely, r describes the transmission rate of the disease, a describes the duration of the disease, and D describes the speed of the diffusion, i.e. movement of the population. Note that by setting D = 0 one receives the underlying SI compartment ODE, while setting r = a = 0 leads to two time-dependent heat equations. Many adaptions of the underlying SI compartment ODE (He et al., 2020; Collins and Duffy, 2022) can easily be integrated into our framework.\nAs boundary condition, we chose mixed boundary conditions: usually, we impose zero-flow Neumann boundary conditions. However, to start a wave of infections, we impose small positive Dirichlet boundary conditions for a small part of the boundary for a limited time. Since this PDE is a system of two equations, the weak formulation utilizes two test functions $$\\varphi_1, \\varphi_2$$ from the same set of functions. The left-hand-side of the weak formulation, named A above, here takes the form\n$$A(S^+, I^+) = (\\varphi_1, S^+) + (1 - \\theta)h(\\varphi_1,rS^+I^+) + (1 - \\theta)h(\\nabla\\varphi_1, D\\nabla S^+) + (\\varphi_2, I^+) - (1 - \\theta)h(\\varphi_2, rS^+I^+ - \\alpha I^+) + (1 - \\theta)h(\\nabla\\varphi_2, D\\nabla I^+)$$\nwhile the right-hand-side b is defined by the following\n$$b = (\\varphi_1, S) - \\theta h(\\varphi_1, rSI) - \\theta h(\\nabla\\varphi_1, D\\nabla S) + (\\varphi_2, I) + \\theta h(\\varphi_2, rSI - \\alpha I) - \\theta h(\\nabla\\varphi_2, D\\nabla I).$$Due to the product $$S^+, I^+$$, the equation $$A(S^+, I^+) = b$$ depends nonlinearly on (the parameters of) the trial functions $$S^+, I^+$$. To solve this equation for (the parameters of) $$S^+, I^+$$, the Newton method is a standard choice, which we used. The Newton method solves this system iteratively, i.e. starts with $$S^+,i, I^+,i$$ and calculates $$S^+,{i+1}, I^+,{i+1}$$ until a convergence criterion is reached. The updates $$\\delta_S, \\delta_I$$ to $$S^+,i, I^+,i$$ are calculated as the solution of the linear system $$J_A(\\delta_S, \\delta_I) = -A(S^+,i, I^+,i)+b$$, where $$J_A$$ is the Jacobian matrix of $$A(S^+,i, I^+,i)$$. The differentiation to set up $$J_A$$ is handled automatically."}, {"title": "2.2 Advection-Diffusion Equation", "content": "The Advection-diffusion equation takes the form\n$$\\frac{\\partial u}{\\partial t} = -\\beta \\cdot \\nabla u + \\alpha \\Delta u + s,$$\nwith $$u = u(x,t) \\in \\mathbb{R}$$ being a measurement of the quantities density and the vector field $$\\beta = \\beta(x,t) \\in \\mathbb{R}^2$$ being the velocity field of e.g. wind over our domain. The diffusion coefficient $$\\alpha = \\alpha(x,t)$$ controls the diffusive spread of u and s = s(x,t) is a source term, with $$s^+ = s(x, t + h)$$.\nAs boundary condition, we assume Dirichlet boundary conditions $$u|_{_{\\partial \\Omega}} = 0$$.\nThe explicit part, using integration by parts, takes the form:\n$$b = (\\varphi,\\tilde{u}) + h\\theta(\\varphi, \\beta \\cdot \\nabla\\tilde{u}) + h\\theta\\alpha\\langle\\nabla\\varphi,\\nabla\\tilde{u}\\rangle - h\\theta(\\varphi, s) - h(1 - \\theta)(\\varphi, s^+)$$\nand the implicit part\n$$A(\\tilde{u}^+) = (\\varphi, \\tilde{u}^+) - h(1 - \\theta)(\\varphi, \\beta \\cdot \\nabla\\tilde{u}^+) - h(1 - \\theta)\\alpha\\langle\\nabla\\varphi, \\nabla\\tilde{u}^+)\\qquad$$that is linear in (the parameters of) $$\\tilde{u}^+$$, such that we can solve a linear system\n$$A\\tilde{u}^+ = b.$$"}, {"title": "2.3 Wave Equation", "content": "The wave equation is a prototype time-dependent PDE, in which we added a damping term to damp simulated waves over time. The wave equation we will use takes the following form\n$$\\frac{\\partial^2 u}{\\partial t^2} + b\\frac{\\partial u}{\\partial t} = \\Delta u, \\quad u(x, 0) = 0.$$\nOn the boundary of the domain we impose Robin boundary conditions $$\\alpha u + \\beta \\eta \\cdot \\nabla u = 0$$, but with a local initial disturbance to start a wave that mimics an initial tsunami-wave. Due to the second derivative in the time domain, the equation doesn't suit our opening definition, but can easily be extended into a suitable system of PDEs:\n$$\\frac{\\partial u}{\\partial t} = v, \\\\ \\frac{\\partial v}{\\partial t} + b\\frac{\\partial u}{\\partial t} = \\Delta u.$$\nBy replacing the time-derivatives, using the trial functions $$\\tilde{u}, \\tilde{v}$$ in the first equation, we obtain an implicit and explicit side again\n$$(1 - (1 - \\theta)^2h^2\\Delta + h(1 - \\theta)b)\\tilde{u}_+ = (1 + (1 - \\Theta)hb + \\theta(1 - \\theta)h^2\\Delta\\tilde{u} + h\\tilde{v}$$\\tilde{v}_+ = h\\Delta((1 - \\theta)\\tilde{u}_+ + \\theta\\tilde{u}) + b\\tilde{u} - b\\tilde{u}_+ + \\tilde{v},$$\nfrom which the weak formulation can be derived easily. We solve the first equation (linear) for (the parameters of) $$\\tilde{u}_+$$, and receive (the parameters of) $$\\tilde{v}_+$$ straightforward from the second equation."}, {"title": "3 Dataset Creation", "content": "To compute the solutions of the three presented PDEs, we generate a mesh of the domain $$\\Omega$$ with the meshing software gmsh (Geuzaine and Remacle, 2009). The implementation of the FEM is done with deal.ii (Arndt et al., 2023), which is written in C++ and abstracted the full implementation around the FEM, but this can be done with any other FEM library.\nAs an underlying domain for both the epidemiological PDE and the advection-diffusion PDE, we use the shape of Germany. We evaluate the solutions of the PDEs on a set of points that have the coordinates of administrative regions in Germany: 400 NUTS-3 regions. The intuition is the reporting of COVID-19 cases in the same spatial granularity. We additionally manually create an adjacency list of neighboring regions and weight them with the inverse of the distance of the centers of the regions, More details on this can be found in the appendix A. We ultimately have created a graph\n$$G = \\langle\\langle V, E, X_i\\rangle\\rangle_{i=1,...,N}$$"}, {"title": "4 Application of Synthetic Data", "content": "To showcase the utility of our created datasets, we conduct several machine learning experiments in this section. We first define several interesting (spatio-) temporal machine learning architectures in section 4.1. In section 4.2 we define three different benchmarking scenarios, to compare the performance of the previously defined machine learning models. To demonstrate that the usage of our data exceeds pure theoretical studies, we additionally perform experiments of transfer-learning from our synthetic data onto three real-world datasets from epidemiology in section 4.3."}, {"title": "4.1 (Spatio-) Temporal Models", "content": "We want to test solely data-centric models and do not take any knowledge of the underlying PDE into account, such as its structure or parameters, as done by machine learning-based approaches to solve PDEs (Li et al., 2021; Raissi et al., 2019).\nWe test both temporal and spatio-temporal models. More specific details can be found in the supplementary material B and the published material online. The presented examples naturally do not take all possible models into account, but offer a good overview. In particular models specialized for traffic data such as GraphWaveNet (Wu et al., 2019) or STG-ODE (Fang et al., 2021) are not taken into account. Besides their specialization in traffic data, they have another drawback as they only operate on a single predefined graph, embedded in the architecture of the models. This makes transfer-learning or generalization onto unseen graphs (or domains) impossible, which will be carried out in section 4.3.\nRepetition The repetition model is a naive baseline that simply repeats the last given value.\nRNN Recurrent-Neural Networks based on GRUs (Cho et al., 2014) have proven to be successful for sequence prediction. During training, teacher forcing is applied. During validation forecasts are produced autoregressively.\nTST Time Series Transformer (TST) is a Transformer-based (Vaswani et al., 2023) architecture designed for temporal forecasting. It utilizes encoder and decoder layers to capture temporal dependencies, and a positional encoding depending purely on the time-step. During training, teacher forcing is applied. During validation forecasts are produced autoregressively.\nMP-PDE Given that the underlying data is based on solutions of a PDE, we also test a model based on a Message-Passing PDE-solver (MP-PDE) from Brandstetter et al. (2022), but will not pass any information of the underlying PDE to our model. The model consists of an encoder, a processor, and a decoder. The encoder creates node-wise embeddings of the context data. The processor consists of an MP-GNN, operating on a single graph with embedded features. The decoder is a 1D convolution applied node-wise, and a special update rule, that propagates the last value through the next time-step.\nRNN-GNN-Fusion Motivated by the PDE itself, we aimed to separate the time from the space dimensions by building an RNN (analogously to the abovementioned model) to encode the underlying ODE and an MP-GNN to emulate the diffusion. RNN and GNN run parallel, their outputs are combined in a convex combination. During training, teacher-forcing is applied. During validation forecasts are produced autoregressively. In the classification of Gao and Ribeiro (2022) this would be classified as time-and-graph.\nGraphEncoding We recreated a model from a recent contribution from the field of ML-based epidemiological forecasting (Nguyen et al., 2023). This model encodes the contextual time-steps separately in a shared GNN. The encoded graphs are then propagated through an LSTM (Hochreiter and Schmidhuber, 1997) network. To achieve a forecast for multiple days, this network is applied autoregressively. In the classification of Gao and Ribeiro (2022) this would be classified as graph-then-time."}, {"title": "4.2 Epidemiological Benchmarking", "content": "To benchmark the presented architectures from section 4.1, we define three tasks on the synthetic epidemiological dataset, created from the SI Eq. 2, that are motivated by forecasting tasks with real-world data. While we wanted to present thorough experiments on this dataset, results with a similar experimental setup, but on the other two datasets from Eq. 3 and Eq. 4, can be found in the appendix D.1.\nWe will proceed with the epidemiological dataset which we split 80/20 along the time axis into a train and a test dataset, and omit any information about the Susceptible S, as this reflects real-world data. On this data, we define the following tasks for machine learning models.\nForecasting on clean data The most straightforward task is a simple forecast of the next n timesteps, based on the last m timesteps of inputs. We set m = n = 14. The input data into the models therefore are 14 consecutive graphs, sharing the same adjacency, or one graph with 14 node features: (V, E, Xi,..,i+13). The targets are simply Xi+14,..,i+27. As a test- and training loss we use the RMSE over all samples, nodes in V, and forecasted timesteps m.\nStability: Noise on test data Since usually there is heavy noise on real-world input data, it is a highly relevant and interesting scenario to test the robustness of the tested machine learning models. We adopt the experimental setting from the previous forecasting benchmarking, but add noise on the node features Xi,...,i+13 of the test dataset, but not onto training data. This enables us to study some aspects of the models' robustness in a controlled setting. Further, this reflects real-world data, on which noise exists but is variable due to changed measurements, or delayed reporting. We studied two different types of noise:\n\u2022 We found the Gaussian noise with distribution N(0, 0.01) to be an interesting setting for the normalized dataset. A plot of the noisy data can be found in the appendix C Fig 9.\n\u2022 We also studied noise which reflects the failure of sensors/reports and therefore the occurrence of reported zeros instead of real values. Guided by this scenario, we replace 10% of the test data with zeros to further study the models' robustness.\nDenoising: noise on context data We seek to study the abilities of different models to implicitly denoise input data, by both training and testing on noisy context data. We use the same Gaussian noise and dropout noise as in the previous experiments.\nWe executed the benchmarking experiments each three times with different random initializations and trained all models until convergence. Details on the setup and computational aspects can be found in supplementary material B or on our given GitHub. The resulting RMSEs over all samples from the test datasets for the different tasks can be found in Table 1. A visual display of the results can also be found in Fig 10, Fig 11 and Fig 12."}, {"title": "4.3 Transfer Learning to Real-World Data", "content": "While the benchmarking of different model architectures already provides valuable insights, we aim to further illustrate the utility of synthetic data in developing foundational forecasting models for epidemiology or pre-training models on tasks on which data is sparse.\nWe, therefore, seek to demonstrate whether pre-training on our provided synthetic data can lead to improved performance on real-world tasks. To carry out this experiment we train and evaluate the models from the previous section on real-world epidemiological data from respectively German COVID-19, German Influenza, and Brazilian COVID-19. The prediction task is again a 14-day forecast based on 14 days of input. Simultaneously, we pre-train the same models first on the synthetic dataset based on the SI-diffusion equation, and only then shortly retrain (fine-tune) them on the respective real-world data. We then compare the difference in performance. Note, that the Brazilian data requires an additional knowledge transfer onto an unseen domain (i.e. Graph). Details on the real-world datasets can be found in section A.4.\nThe outcomes of the transfer-learning experiments were highly favorable for pre-training on our dataset, underscoring the effectiveness and possible impact of our proposed method of data synthetization on real-world data and problems. The results can be found in Table 2. A graphic representation, containing the actual RMSEs and comparing the models against each other can be found in the appendix, see fig. 13."}, {"title": "5 Conclusions", "content": "We demonstrated how time-dependent PDEs can be used to create synthetic data for machine learning on graphs. In particular, we have created and published three exemplary datasets that can directly be used by other researchers for further research questions and benchmarking. The described method and code enables researchers to create synthetic temporal graph datasets for individual use cases to support the development of new machine learning methods, in particular, for use cases where data is scarce.\nWe demonstrate through transfer-learning experiments that pre-training on our synthetic datasets can lead to drastic improvements in real-world data performance. Despite the underlying PDE being relatively limited in flexibility and parameters, these experiments showed a significantly increased performance for some models in our experimental setup. Additionally, as an application of our datasets, we have demonstrated a benchmarking of various models, showcasing that rigorous testing of common architectures was a substantial research gap due to a lack of sufficient data.\nOur datasets enables others to build, test, and compare new models for three different applications on large amounts high-quality data, stemming from a fully controllable simulation. A comparable epidemiological benchmarking with publicly accessible data is unknown to the authors, and especially conducting such a benchmarking with a comparable amount of data was not possible prior to our contribution. We also strongly encourage others to adapt the code and methodology, such as geometry, parameters, scenarios, or PDEs. This not only enables researchers to fulfill individual needs, but also enables others to explore the capacity of machine learning models to simulate specific behaviors of PDEs.\nIn Summary this paper presents a method for generating individual PDE-based graph datasets, offers three readily available synthetic datasets, provides a benchmarking, and highlights significance through drastic improvements of performance on real-world data in exemplary applications. This work lays the foundation for the development of further datasets and research problems, inviting others to build upon our findings.\nLimitations The adaptations of our code can become quite complex and more advanced changes can require considerable coding effort and expertise. While exchanging the domain, parameters, sampling rates, or graph structure can be done with little effort, extending or even replacing the PDE can be a very demanding task, requiring a deeper in-depth understanding of the PDE, the FEM, and the employed FEM software. Also our method is constrained to PDEs that can be solved through the FEM, which reaches its computational limits in high-dimensional problems quickly. While our epidemiological experiments demonstrates significant success on real-world data, other applications may need a much greater number of parameters to derive insights for machine learning models, which could also be limited by computational aspects."}, {"title": "Broader Impact Statement", "content": "Spatio-temporal machine learning models and PDEs have diverse applications, including epidemiology, weather forecasting, traffic prediction, and more. Our contribution could be used both for foundational research, as well as pre-training models in domains in which data is sparse.\nOur datasets and the creation method leverage PDEs, which are controllable and well-structured. While our work has the potential to enhance data-driven methods for real-world applications and contribute to foundational research, we believe the societal implications are minimal. We aim for a significant improvement in prediction systems, and the authors do not anticipate any negative societal impacts. Our PDEs explicitly do not discriminate against different groups of society or individuals, thus we also see no potential of biased assumptions.\nGiven the absence of identified drawbacks in our datasets and methodology, we primarily see opportunities for other researchers to expand our datasets, further enhancing their detail and the performance of our PDEs."}]}