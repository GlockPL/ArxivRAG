{"title": "A Unified Modeling Framework for Automated Penetration Testing", "authors": ["Yunfei Wang", "Shixuan Liu", "Wenhao Wang", "Changling Zhou", "Chao Zhang", "Jiandong Jin", "Cheng Zhu"], "abstract": "The integration of artificial intelligence into automated penetration testing (AutoPT) has highlighted the necessity of simulation modeling for the training of intelligent agents, due to its cost-efficiency and swift feedback capabilities. Despite the proliferation of AutoPT research, there is a recognized gap in the availability of a unified framework for simulation modeling methods. This paper presents a systematic review and synthesis of existing techniques, introducing MDCPM to categorize studies based on literature objectives, network simulation complexity, dependency of technical and tactical operations, and scenario feedback and variation. To bridge the gap in unified method for multi-dimensional and multi-level simulation modeling, dynamic environment modeling, and the scarcity of public datasets, we introduce AutoPT-Sim, a novel modeling framework that based on policy automation and encompasses the combination of all sub dimensions. AutoPT-Sim offers a comprehensive approach to modeling network environments, attackers, and defenders, transcending the constraints of static modeling and accommodating networks of diverse scales. We publicly release a generated standard network environment dataset and the code of Network Generator. By integrating publicly available datasets flexibly, support is offered for various simulation modeling levels focused on policy automation in MDCPM and the network generator help researchers output customized target network data by adjusting parameters or fine-tuning the network generator.", "sections": [{"title": "I. INTRODUCTION", "content": "The Internet is crucial for modern life and social advancement, significantly impacting government, finance, energy, and military sectors, yet cybersecurity remains a critical concern despite enhanced convenience and services [1, 2, 3]. Penetration testing, which simulates hacker attacks to assess vulnerabilities and overall security [4, 5], is vital for improving cybersecurity, but is complex and time consuming, relying on the expertise of the tester [6]. As a solution, automated penetration testing (AutoPT) has emerged to replace human efforts and accelerate evaluations [7].\nAutoPT involves two main processes: intelligent decision-making and automatic execution. The intelligent decision-making phase is critical, encompassing target identification, attack path selection, and method determination, effectively replacing manual judgments. Current approaches to intelligent decision-making can be classified into three categories:\n1) Fixed Script Execution Methods employs predetermined rules, which limits adaptability and flexibility when working with other penetration tools [8].\n2) PDDL with Planner Methods leverage the PDDL language to define penetration actions, with classical planners facilitating the process [9, 10]. While PDDL enables detailed definition of penetration parameters and easy integration with tools, manually crafting these definitions is labor-intensive, requiring diverse approaches for various tools and tactics.\n3) Artificial Intelligence Methods adopt attack trees [5], attack graphs [11], reinforcement learning [12, 13], and large language models [14, 15] to guide decision-making in penetration testing, representing a leading trend in current research.\nFor all of the above categories, it is important to model target scenarios, technical and tactical elements, and decision parameters. Al methods, in particular, require extensive training in diverse scenarios to reveal hidden patterns and improve generalizability.\nOn the other hand, the automatic execution phase utilizes various penetration tools to implement predetermined actions, automating tasks typically performed by human experts. Integrating intelligent decision-making with automatic execution seeks to help experts in network penetration, improve efficiency, reduce costs, and improve security outcomes [16].\nAs shown in Figure 1, training within real network environments or cyber ranges demands significant resources, making it impractical due to high time and financial costs, as well as the complexities involved. The inherent unpredictability and lack of reproducibility of real-world scenarios pose significant challenges for agents to in conducting repetitive training and recognizing patterns. By contrast, simulation environments provide a cost-effective and straightforward solution, with flexibility that allows for diverse scenarios and rapid feedback-key to improving the AutoPT decision-making process.\nThe quality and fidelity of simulation modeling is crucial for effective algorithm training in AutoPT. Real-world application demands algorithms that are both capable of learning and refining their performance from data and reflective of essential real-world features. Despite advances in AutoPT research,"}, {"title": "II. THEORETICAL FOUNDATIONS OF AUTOPT SIMULATION MODELING", "content": "In AutoPT, simulation modeling not only involves the abstraction and modeling of the target cyberspace but also encompasses the modeling of interactive entities within the network-attackers and defenders. We draw upon nonlinear system theory from Modern Control Theory to understand and categorize simulation modeling in AutoPT.\nModern control theory represents a significant domain within automatic control, dedicated to the analysis and design of complex systems, encompassing multiple-input-multiple-output, nonlinear, and time-varying configurations. This theoretical framework utilizes state variables and state space equations to depict the dynamic behavior of systems, thereby elucidating their internal states. Such an approach conceptualizes a system as a unified entity, highlighting the interdependence of its components, feedback mechanisms, hierarchical structures, and open systems characteristics. In the context of AutoPT, this perspective facilitates a thorough understanding"}, {"title": "A. Control Theory Perspective", "content": "and simulation of cybersecurity dynamics by conceptualizing the target network, attackers, and defenders as an integrated system. Control theory quantifies the status of the system through assignment of a state and formally describe the progression of AutoPT. It adopts a state-based approach to define cost structures that balance security and availability. The information state in control theory compresses attacker-defender information to a level sufficient for optimal decision-making, converting determining the optimal defense policy into a sequential optimization problem [17].\nThe complexity and variability of network activities, coupled with the multifactorial nature of penetration and defense strategies, means that identical actions on the same system can yield divergent outcomes, indicating that the penetration testing system is inherently dynamic. It implies that the same action combinations may produce different outputs, rendering linear differential equations inadequate for describing the system's behavior. The superposition principle is inapplicable, thus classifying such systems as a dynamic nonlinear system. Traditional research often models penetration testing as a discrete system based on the actions of attackers and defenders, treating these actions as discrete events. The system's output is influenced not only by its structural parameters but also by the inputs and initial conditions."}, {"title": "B. AutoPT as a Dynamic Nonlinear System", "content": "1) System Components: The modeling framework in AutoPT incorporates both the abstract representation of network environments and the simulation of adversarial interactions between attackers and defenders. Environmental modeling directly shapes the objectives, action spaces, and strategic decision-making processes of both agents. Concurrently, their adversarial interactions induce environmental modifications, establishing a dynamic feedback loop that subsequently shapes their adaptive strategic responses."}, {"title": "Input-Output.", "content": "Attacker and defender actions exhibit bidirectional coupling: their interdependent decisions act as both system inputs and state-dependent outputs, driving iterative state evolution."}, {"title": "State Transitions.", "content": "The state $S(t+1)$ evolves stochastically based on $S(t)$, concurrent actions $A_A(t)$ (attacker) and $A_D(t)$ (defender), and exogenous stochastic events $W(t)$."}, {"title": "Feedback Mechanisms.", "content": "The utility function $U(t) = (U_A(t), U_D (t))$ critically shapes system dynamics by providing post-action feedback to both agents. This function serves dual roles: predefined reward signals or emergent behavioral outputs."}, {"title": "Formal expression:", "content": "As illustrated in Figure 2, the AutoPT system comprises a target network environment, adversarial agents (attackers/defenders), and a state vector $S(t) = [S_E (t), S_A(t), S_D (t)]$, where $S_E (t)$, $S_A(t)$ and $S_D (t)$ denote the network, attacker, and defender states, respectively. Stochastic disturbances $W(t)$, representing exogenous factors (e.g., hardware failures, user errors, or action success probabilities), introduce uncertainty into state transitions. These disturbances induce non-deterministic critical outputs even under identical inputs. For $t > t_0$, the system's trajectory depends on the initial state $S(t_0)$, input vector $A(t)$, and the probabilistic disturbance terms $W(t)$.\nAttacker and defender actions exhibit dual input-output roles within the system. At time t, the input $A(t) = [A_A(t), A_D (t)]$ comprises the attacker's action vector $A^A (t) = [a_1, a_2,..., a_p]$ and the defender's action vector $A^D (t) = [a_1, a_2,..., a_q]$. The system output $Y(t) = [Y_A(t), Y_D(t)]$ mirrors this structure, with $Y^A(t) = [y_1, y_2,..., y_p]$ and $Y^D(t) = [y_1, y_2, \u2026\u2026\u2026, y_q]$. While $p\u2260q$ (distinct input-output dimensions for attackers and defenders), these can be standardized via zero-padding to a unified dimension $p'$, where $p' = max(p,q)$, without loss of generality. We therefore understand the AutoPT simulation system as a discrete-time system, and its state equation can be represented as a stochastic difference equation:\n$S(t_{k+1}) =f [S(t_k), A(t_k), W(t_k), t_k] =f [S_E (t_k), S_A (t_k), S_D (t_k)], [A^A (t_k), A_D (t_k)], W(t_k), t_k]$\nThe system's output equation is given as follows:\n$Y(t_k) =g [X(t_k), A(t_k), W(t_k), t_k] =g [[S_E (t_k), S_A (t_k), S_D (t_k)], [A^A(t_k), A_D (t_k)], W(t_k), t_k$]"}, {"title": "C. Core Modeling Elements", "content": "In this section, we will introduce every core element in detail.\n1) Network Architecture and Target Assets: The target network environment involves both the network architecture and target assets. Primarily, network architecture refers to the structural design and configuration of an organization's network systems, which are fundamental in shaping the design of attack vectors and defense strategies during penetration testing. This architecture can be delineated into two levels:"}, {"title": "Physical Connections:", "content": "Physical media, comprising guided media such as cables and optical fibers, and unguided media like wireless signals, facilitate data transmission between network devices. These connections are supported by infrastructure components such as routers, switches, fiber optic systems, network cables, and Bluetooth technology."}, {"title": "Logical Topology:", "content": "Logical topology describes the structural relationships and data flow between network devices, such as routers and switches, irrespective of their physical locations or connection methods. It focuses on the interactions and communication pathways within the network, illustrating the interconnection patterns of network assets. Configurations may include star, ring, tree, or hybrid topologies [21]."}, {"title": "Physical Resources:", "content": "Servers, workstations, desktops, laptops, mobile devices, external storage, network infrastructure, and security appliances."}, {"title": "Virtual Resources:", "content": "Operating systems, software applications, open services, databases, and account credentials."}, {"title": "Identity:", "content": "The identity of an attacker may vary from an individual, such as a script kiddie, to a collective, such as a state-sponsored hacking group. This identity could render varying attack methods and available resources. However, in practical testing scenarios, specifying this characteristic is often optional."}, {"title": "Objectives:", "content": "An attacker's objectives, influenced by their identity and the specific testing requirements, shape their actions within the network. Rapid access to sensitive areas prompts the use of direct paths and potent techniques [12]. If the objective is to achieve rapid access to sensitive areas, the attacker must employ the shortest attack path and most effective techniques to minimize the steps required. In contrast, if the objective is to identify numerous hidden security vulnerabilities within the network, the attacker should utilize diverse attack methods and carry out a broad spectrum of attacks. If the objective is to maintain a prolonged covert presence, the attacker must implement high-concealment strategies, such as Advanced Persistent Threat, advancing stealthily"}, {"title": "Actions:", "content": "Attacker could exploit vulnerabilities, escalate privileges, conduct scans, and facilitate lateral movement. The Cyber Kill Chain model, developed by Lockheed Martin, offers a systematic approach to penetration testing [25]. Meanwhile, the MITRE ATT&CK framework [26] catalogs relevant TTPs (Techniques, Tactics, and Procedures) for AutoPT research. Due to the impracticality of incorporating all TTPs, researchers typically abstract an attack action library based on network architecture, target assets, and attacker-defender models. Each action is defined with specific preconditions, execution steps, and outcomes to optimize the penetration process."}, {"title": "Network Visibility:", "content": "The type of penetration testing-black box, grey box, and white box-influences network visibility. During white box testing, the tester has full visibility and comprehensive knowledge of the system, including access to source code, architectural designs, and network topologies, enabling an in-depth evaluation of internal security measures [27, 28, 29, 30]. Grey box testing involves partial knowledge and access to internal data structures, log files, and application APIs, enhancing testing effectiveness [29, 31, 32]. Conversely, black box testing restricts testers to external observations, simulating real-world attack scenarios [27, 28, 29, 31, 33]."}, {"title": "Static Defense:", "content": "Static defense is a predefined cybersecurity strategy that operates without adapting to evolving attack policy. This approach is characterized by its fixed nature, activating automatically under specific conditions in response to detected attacker activity or changes in network status. Examples include implementing firewall rules via established logical connections between devices [37] and ensuring intrusion detection mechanisms via periodic reconnaissance. Within static defense, the success rates of attacker actions can represent defender ability. Despite its limitations in immediate response capabilities to new threats and attack techniques, static defense is considered an important auxiliary security measure. Its simplicity and reliability make it a popular choice for AutoPT, as much of the research in this area does not account for defender dynamics."}, {"title": "Dynamic Defense:", "content": "Dynamic defense involves the definition of defense agents and an action library, encompassing preconditions, actions, and expected outcomes to enable real-time adjustments to defensive measures based on network conditions. This proactive strategy enhances security by disrupting communications and modifying network information to simulate an active defense [38, 39]. Furthermore, it complements active defense through methodologies such as Zero Trust Networks, Moving Target Defense, and honeypots. The flexibility inherent in dynamic defense modeling is essential for addressing the evolving landscape of cyber threats, ensuring effective protection by considering both attacker behavior and changes in network environments."}, {"title": "III. THE MULTI-DIMENSIONAL CLASSIFICATION SYSTEM FOR PENETRATION TESTING MODELING: MDCPM", "content": "In this section, we present the Multi-Dimensional Classification System for Penetration Testing Modeling (MD-CPM), an innovative approach for classifying target network scenarios modeling method in penetration testing. This system categorizes scenario modeling based on four principal dimensions: (1) Literature Objectives, (2) Network Simulation Complexity, (3) Dependency of Technical and Tactical Operations, and (4) Scenario Feedback and Variation. Each dimension comprises sub-dimensions for a nuanced classification of attack scenarios, as illustrated in Figure 3. This paper begins with an explanation of our classification criteria, followed by illustrative examples, and concludes with an analysis of the reviewed literature."}, {"title": "A. Dimensionality of MDCPM", "content": "In this section, we define and introduce the four primary dimensions characterizing the MDCPM, along with their associated sub-dimensions.\n1) Literature Objectives: The Literature Objectives analyze the aims and outcomes of various AutoPT studies, including tool development, policy proposals, and platform introductions. Based on the two phases of AutoPT\u2014intelligent decision-making and automatic execution\u2014we categorize this dimension into three sub-dimensions: . Specifically, technical automation pertains to automatic execution, while policy automation refers to intelligent decision-making; when a study simultaneously addresses both aspects, we classify it as complete automation. By organizing the research background, objectives, and significance of each study, we identify the literature's goals and gain insights into each paper's contributions, innovations, and applications."}, {"title": "Technical Automation:", "content": "This dimension emphasizes the direct implementation of specific technical and tactical procedures without strategic planning. It represents the earliest stage of automation, characterized by a lower level of intelligence in AutoPt. It automates predefined testing technicals such as identifying live hosts, open ports, services, and conducting vulnerability scans. Tools are central to this process. Nmap [40], Fscan [41], and Webshell [42] facilitate the identification of live hosts and services. Nessus and AWVS conduct automated vulnerability scans. Metasploit automates vulnerability verification and exploitation. These tools are essential for the autonomous execution phase of AutoPT, enabling the efficient performance of repetitive tasks and minimizing manual errors and time expenditure."}, {"title": "Policy Automation:", "content": "This aspect focuses on automated generation of attack policy without real-world execution, crucial for intelligent decision-making in AutoPT. It involves the automated planning of attack paths and technical actions, representing a key focus in contemporary Al research for AutoPT [43, 44, 45]. For instance, Hu et al. use Multi-host Multi-stage Vulnerability Analysis to construct an attack tree for network topologies, applying Deep Q-Networks (DQN) to identify the most exploitable attack paths [12]. Zhou et al. [46] frame penetration testing as a Markov Decision Process and used an improved deep q-network to decouple actions and learn attack strategies. However, their methodologies remain limited to policy generation in theoretical network environments, lacking integration with actual penetration tools or execution of attack payloads in real-world scenarios."}, {"title": "Complete Automation:", "content": "While the two aforementioned aspects are crucial, they both represent only singular aspects of penetration testing. A comprehensive security assessment requires the integration of automatic execution and intelligent decision-making to effectively identify and mitigate potential security threats. Complete automation encompasses automation of the entire attack lifecycle, from decision-making to execution. This includes the automatic planning of attack paths and the integration of execution tools with actual payloads to perform real-world penetration tests in either simulated or live network environments, entirely without human intervention [5, 47, 48]."}, {"title": "Hypothetical Attributes:", "content": "Numerous studies utilize numerical, rule-based, or conceptual methods to abstractly model assets and architectures. For instance, Hammar et al. utilize numerical attributes to characterize nodes in a four-node network, with each node represented by multidimensional metrics of defensive and detection capabilities [20]."}, {"title": "Authentic Attributes:", "content": "Certain studies employ real-world systems, software, services, account passwords, vulnerabilities, and other real information to model target assets and attributes. These works utilize complex network topologies to accurately replicate real-life environments, reflecting both node attributes and their interrelationships. For example, Microsoft's CyberBattleSim defines the operating systems, software, vulnerabilities, and node reward for each node while establishing diverse connection relationships across multiple small scenarios involving fewer than 20 nodes [49]."}, {"title": "Isolated Technical and Tactical Actions:", "content": "Many technical and tactical actions are independent, lacking defined prerequisites. This category includes executing single tactics, such as using Nmap for scanning, or multiple unrestricted actions. For example, Sarraute et al. [50] defined only scanning and vulnerability exploitation actions in a penetration scenario. Although agents may implicitly learn that scanning before exploitation improves the success rate of vulnerability selection, the action definitions do not specify prerequisites, allowing actions to be performed independently."}, {"title": "Coordinated Technical and Tactical Actions:", "content": "Many technical and tactical actions are interdependent, forming an integrated kill chain. This coordination is evident in stages such as privilege escalation and lateral movement, where initial actions like vulnerability exploitation or phishing attacks precede subsequent activities such as credential theft and malware implantation. Defining the preconditions and post-effects of actions is essential. For example, Filiol et al. [29] modeled attacker behavior by specifying logical relationships among actions, including domain name acquisition, IP scanning, service version collection, attack list generation, and attack configuration."}, {"title": "Completely Static Scenario:", "content": "A scenario with no passive modifications from attack-defense interactions and no active alterations to the target environment."}, {"title": "Semi-Dynamic Scenario:", "content": "A scenario that incorporates passive changes resulting from attack-defense interactions but does not include active modifications to the target environment."}, {"title": "Completely Dynamic Scenario:", "content": "A scenario that encompasses both passive changes from attack-defense interactions and active alterations to the target environment."}, {"title": "IV. AUTOPT-SIM: A UNIFIED SIMULATION MODELING FRAMEWORK FOR AUTOMATED PENETRATION TESTING", "content": "Current scenario modeling methods are often incomplete, exhibit low variability, lack fully dynamic capabilities, and are hindered by the absence of public datasets. To address these limitations, we introduce the AutoPT Simulation Modeling Framework (AutoPT-Sim), which leverages policy automation to integrate all sub-dimensions of the MDCPM framework across its three primary dimensions. Additionally, we provide a comprehensive and publicly accessible dataset on GitHub\u00b9 to support future research endeavors. We welcome constructive feedback to refine our standards and dataset further. Furthermore, we have developed a suite of interfaces to underpin future extensions in tactical and full-process automation."}, {"title": "A. AutoPT Simulation Modeling Framework", "content": "Our model enables AutoPT research within internal networks by automating policy scenarios and simulating all penetration testing phases, including information gathering, foothold establishment, privilege escalation, lateral movement, and persistence. We provide diverse network architectures and asset modeling techniques to support dynamic network construction. Additionally, attacker and defender actions are comprehensively modeled, allowing for customizable configurations."}, {"title": "IP (ip):", "content": "The IP address of the node."}, {"title": "Node Type (type):", "content": "Nodes are classified as either switch for data transmission or server for processing and storage. Customizable types are supported."}, {"title": "Local Area Network ID (lan_id):", "content": "Identifies the node's LAN, reflecting our partitioned network design. Nodes in the same LAN are assumed connected, despite possible internal firewalls."}, {"title": "Operating System (system):", "content": "Categorized as windows, linux, or other."}, {"title": "1) DMZ connects the external internet to the general business area.", "content": "It features interconnected nodes with minimal defenses, lenient firewall rules, and lower account privileges, making it a potential entry point but less likely to contain sensitive information."}, {"title": "2) General Business Area acts as a bridge between the DMZ and the sensitive business area.", "content": "It includes multiple subnets with enhanced defenses, some sensitive data, and high-level accounts. Connections between subnets are managed by devices like firewalls and routers."}, {"title": "3) Sensitive Business Area connects only to the general business area and consists of 1-3 subnets with the strongest defenses and strict access controls.", "content": "It has fewer nodes but is more likely to contain sensitive information, with connectivity managed similarly to the general business area."}, {"title": "State Transitions", "content": ""}]}