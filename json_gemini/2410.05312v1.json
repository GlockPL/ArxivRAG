{"title": "An Intelligent Native Network Slicing Security Architecture Empowered by Federated Learning", "authors": ["Rodrigo Moreira", "Rodolfo S. Villa\u00e7a", "Mois\u00e9s R. N. Ribeiro", "Joberto S. B. Martins", "Jo\u00e3o Henrique Corr\u00eaa", "Tereza C. Carvalho", "Fl\u00e1vio de Oliveira Silva"], "abstract": "Network Slicing (NS) has transformed the landscape of resource sharing in networks, offering flexibility to support services and applications with highly variable requirements in areas such as the next-generation 5G/6G mobile networks (NGMN), vehicular networks, industrial Internet of Things (IoT), and verticals. Although significant research and experimentation have driven the development of network slicing, existing architectures often fall short in intrinsic architectural intelligent security capabilities. This paper proposes an architecture-intelligent security mechanism to improve the NS solutions. We idealized a security-native architecture that deploys intelligent microservices as federated agents based on machine learning, providing intra-slice and architectural operation security for the Slicing Future Internet Infrastructures (SFI2) reference architecture. It is noteworthy that federated-learning approaches match the highly distributed modern microservice-based architectures, thus providing a unifying and scalable design choice for NS platforms addressing both service and security. Using ML-Agents and Security Agents, our approach identified Distributed Denial-of-Service (DDoS) and intrusion attacks within the slice using generic and non-intrusive telemetry records, achieving an average accuracy of approximately 95.60% in the network slicing architecture and 99.99% for the deployed slice intra-slice. This result demonstrates the potential for leveraging architectural operational security and introduces a promising new research direction for network slicing architectures.", "sections": [{"title": "1. Introduction", "content": "Over the last 40 years, mobile networks have evolved and benefited our society, changing the way we perform daily tasks with applications that are now indispensable, smarter, and more useful than before. This impact is measured when we look at the forecast of having 3.5 billion users consuming connectivity and supporting use cases with more than 70 different industrial segments [1, 2]. The evolution of mobile networks has been marked by a paradigm shift from conventional networks to software-defined intelligent networks facilitated by softwarization, cloudification, and Network Slicing (NS) paradigms [3, 4]. These advancements have been made to meet the needs of users and modern applications.\nApplications such as Virtual Reality (VR), Internet of Everything (IoE), and Autonomous Vehicles are evolving, requir-ing, rather than network connectivity, a portion of network resources to cope with specific requirements [5, 6]. Network Slicing (NS) involves tailoring a physical network to specific applications and services using three primary baselines: isolation, end-to-end connectivity, and application-driven requirements [7, 8]. In this context, challenges arise from intelligent and secure network slicing, such as high automation, programmability, interoperability, data orchestration, and zero-touch management [9, 10]. Disruptive paradigms, such as Artificial Intelligence as a Service (AIaaS) [11] or Machine Learning as a Service (MLaaS) [12], can evolve network slicing architectures that provide security skills, not as a feature to be developed apart from slicing architecture, but rather as native-aware security defenses for network slicing, particularly in architectural core operations and transactions [13, 3, 14]. These technologies and findings are essential for realizing network slicing. The evolution of mobile networks is envisioned to integrate land, sky, and sea connectivity [15] because of the heterogeneity of technologies and domains conducive to security issues [16].\nIn the literature, we found the use of large-scale testbeds to build and validate network slicing architectures, algorithms, and methods. Additionally, advanced testbeds serve as testing"}, {"title": "2. Background", "content": "Network slicing. Resource sharing enabled by computing virtualization has influenced mobile networks, particularly in 5th Generation Mobile Network (5G) development mainstream. This has resulted in numerous initiatives from industry, Standards Development Organizations (SDOs), and academia to share network resources, known as Network Slicing (NS) [29, 7]. Network slicing is defined by different standard bodies, such as Next Generation Mobile Networks (NGMN), as a division of a physical network into multiple networks with capabilities and characteristics oriented to a use case [30]. 3rd Generation Partnership Project (3GPP) defines network slicing as a technology that allows the operator to create and customize the network to meet different market demands [31]. Based on these pillars, the state of the art has been building and evolving solutions, architectures, and management approaches to offer tailored network resources to users despite the challenges of seamless isolation, performance, and security [32].\nNS Arquitectures. A plethora of network slicing architectures for specific domains, industry verticals, and connectivity requirements have emerged [33, 34, 35, 36, 4]. While each architecture has its features, they share common aspects, such as the management and lifecycle control loop for network slicing. These architectures provide entities for network slices' preparation, commissioning, operation, and decommissioning phases."}, {"title": "3. Related Work", "content": "Previous studies have explored various network-slicing approaches, each tailored to specific requirements and applications [3], including aspects such as security or profit-based resource allocation [41, 42]. Moreover, federated learning has been applied to different network challenges, especially those focused on privacy [43, 44, 45]. Many of these architectures incorporate Artificial Intelligence (AI) capabilities, whereas others employ Al for orchestration and other purposes in network slices [46]. This section presents research on applying computational intelligence techniques in network experimental testbeds and using machine learning algorithms to enhance security in network-slicing architectures.\n3.1. Federated Learning for Testbeds\nWijethilaka et al. [37] developed a federated learning strategy to enhance network slicing security, a technology that allocates dedicated logical networks to diverse applications. This manuscript introduces a framework called FLeSO, which utilizes federated learning to train machine learning models to detect anomalies and cyber-attacks in the control plane of sliced networks. The FLESO framework was tested using an experimental testbed of sliced networks built with open-source tools and an NSL-KDD intrusion dataset. The study indicates that FLESO is good at identifying attacks, keeping data private, and enabling proactive security measures.\nBoualouache et al. [47] presented a solution for detecting inter-slice attacks in Vehicle-to-Everything (V2X) 5G networks, which pose a significant threat to the isolation and privacy of network slices. The proposed approach utilizes federated and deep learning to deploy virtual security functions within network slices, which cooperate to train and refine attack detection models. The effectiveness of this method was validated through extensive experimentation conducted on a testbed consisting of sliced networks and the CSE-CIC-IDS2018 intrusion dataset [48]. Our process results in high accuracy in detecting attacks in network slicing management transactions while ensuring data privacy.\nSaad et al. [49] presents a timely contribution to the field of federated learning in Beyond Fifth Generation (B5G) networks with zero-touch management, focusing on the pressing issue of poisoning attacks that can prevent the optimal functioning and security of deep learning models utilized in the automated management and orchestration of network slices. To address this challenge, the authors introduce a novel framework called Trust Deep Q-learning Federated Learning (TQFL), which employs deep reinforcement learning to select a trusted participant in the federated learning process responsible for detecting and mitigating poisoning attacks using unsupervised learning and dimensionality reduction. The performance of TQFL was evaluated through an exhaustive experimentation campaign using the OpenAirInterface platform and a realistic dataset on the latency of the Access and Mobility Management Function (AMF) function. The results show the effectiveness of TQFL in mitigating poisoning attacks while preserving the accuracy and privacy of federated learning models.\n3.2. Sliced Testbeds and Security\nWichary et al. [50] presented a solution to safeguarding and isolating 5G network slices across multiple layers and domains. The proposed approach uses a security attribute model, which associates security controls with the specific requirements of each slice. The study assessed the effectiveness and practicality of various security measures, categorizing them into eight domains and six isolation classes.\nJiang et al. [56] proposed a DeepAR-based probabilistic forecasting model for admission control in network slicing within"}, {"title": "4. Federated Learning Empowering Sliced Testbeds Security", "content": "Network slicing architectures are designed to meet a specific set of connectivity requirements, based mainly on reference models such as 3GPP and ETSI, among others. In previous work, we presented and validated a reference model for network slicing architectures that addressed aspects not fully covered in the state-of-the-art, such as intrinsic security in the functional blocks of architecture and slicing energy efficiency [23, 24, 57].\nIn the literature, there are security approaches for network slices from a connectivity or service perspective, with a predominantly DoS family of attacks [13, 27, 25]. Furthermore, existing security approaches for network slicing focus on a single type of attack owing to the coupled nature of the slicing architecture design. In this paper, we addressed the operational security of slicing architecture. Our approach allows a slice service provider to handle multiple attacks if the trained ML model is embedded in the Security Agents. We applied intrinsic security to slicing architecture through self-adaptive learning techniques in microservices to provide security for architecture operations regarding slicing life-cycle management.\nFig. 2 shows the functional blocks of the SFI2 reference architecture. This architecture envisioned the implementation of network slices considering energy-efficient slicing and integrating experimental networks and testbeds while providing slicing-tailored security functionalities. The functional blocks on the left (Identity And Access Management (IAM), Database, AI Management, Monitoring, Slice Preparation, Slice Instantiator, Slice Operation & Management) cooperate at different stages of the life cycle of a network slice to operationalize the connectivity service. The blocks on the right (Control/Actuation and Instantiation Manager) refer to the different target domains where the SFI2 architecture can deploy network slices in the B5G domains, Future Internet Brazilian Environment for Experimentation (FIBRE) new generation domains [58], well-known experimental testbeds, and others.\nThe Marketplace maintains and aggregates different target domains and their resources to enable the deployment of network slices during the slice commissioning phase. In all functional layers of the SFI2 architecture, there is provision for the coexistence of two daemon agents, the Security-Agent and the ML-Agent. These agents act independently and with other functional blocks of the architecture using a microservices approach.\nAs mentioned, each functional block of the SIF2 architecture has two complementary services: the ML-Agent and the Security Agent, which work asynchronously with the slicing architecture. The ML-Agent performs passive and active functions in the functional block. The passive role involves the prompt and local response to requests for information from AI or analytics associated with the network traffic of the functional block. On the other hand, the active role involves the distributed processing and training of AI models on data common to the functional block it serves, with the ML-Agent periodically reporting the performance of the local model to the SFI2 AI Management for aggregation. In line with [59] findings, to avoid malicious manipulation of system behavior, our approach assumes that all entities in the SFI2 Architecture that support the operation of the network slice life-cycle management have zero trust.\nThe Security Agent is a critical component of the SFI2 architecture, working as a composite service that operates in parallel with slicing architecture entities. Its main responsibility is actively or passively monitoring the functional block for any security threats, including intrusion and DDoS attacks. The Security Agent works in close collaboration with the ML-Agent microservice (which embeds trained AI models into the Security Agent) to detect and prevent malicious traffic patterns in architecture entities, ensuring the overall security and integrity of the SFI2 Architecture. For our implementation, we used the NetData monitoring platform (in Monitoring Agent), which can monitor the statistics of both computational"}, {"title": "5. Experimental Evaluation", "content": "This paper examines the potential for collaboration between the ML-Agent, Security Agent, and Monitoring Agent to improve the functionality and operational security of network slicing architectures and intra-slice. To achieve this goal, we assessed two (2) experimental perspectives. The first involved evaluating the ML-Agent's ability to recognize reconnaissance and DoS attacks in a sliced 5G core network, using generic non-intrusive monitoring metrics provided by the Monitoring Agent feeding the ML-Agent to identify those threats. The second perspective focuses on detecting anomalies within network slicing architectures' operational components (building blocks), spanning slice preparation, slice implementation, and slice operation and management entities using federated learning.\nWe have developed a progressive experimental framework, beginning with centralized and classical algorithms to address intra-slice security threats in instantiated and active services. Subsequently, we elevate the analysis of defense mechanisms against security threats by leveraging the unprecedented generalization capabilities of FL. This approach enables the construction and validation of slice architectures capable of addressing threats from two perspectives: (1) within the deployed service (intra-slice); and (2) from the operational standpoint of the control plane empowered by FL.\n5.1. Intra-Slice Anomaly Detection\nIn this first experiment, we validate the ability of our architecture to deal with threats involving the running service or deployed network slice. In state-of-the-art, network-slicing architectures, security solutions deal predominantly with the operational security of the architecture, striving to maintain the confidentiality, availability, and integrity of operational components. On the other hand, our proposal sheds light on the security improvement for the service in operation, or intra-slice, byguaranteeing the security aspects for the running network slices on the tenant.\nThis experiment is based on monitoring a network slice during its operation. We built a Monitoring Agent to collect metrics from the network slice and feed the ML-Agent and the Security Agent. Among the advances in this study, when monitoring the running network slice, we protect it from privacy when the Monitoring Agent inspects the packets' contents, only volumetric and statistical aspects [60]. We collected metrics such as network consumption, Central Processing Unit (CPU), and memory of running network slice.\n5.1.1. Description of Test\nWe validated the feasibility of using generic non-intrusive metrics to assess anomaly detection using basic ML algorithms. We employed K-Nearest Neighbors (KNN), Decision Tree (DT), and Random Forest (RF) to handle the resource consumption dataset to predict anomalies in a running network slice containing a 5G core. Our test aimed to validate the performance of these algorithms for anomaly detection in a 5G core. In contrast, validate the collaboration of Security Agent, ML-Agent, and Monitoring Agent."}, {"title": "5.1.2. Dataset", "content": "The 5G Attack Detection (5GAD-2022) dataset consists of intercepted 5G network data, including both normal and malicious traffic in Packet Capture (PCAP) files. The normal data was generated by simulating typical user activities like streaming videos, making web requests, and joining video conferences. The malicious data includes ten types of attacks categorized into reconnaissance, DoS, and network reconfiguration. These attacks exploit vulnerabilities in the 5G Core network [62].\nThe dataset was collected in a simulated environment using open-source software free5GC and User Equipment (UE) simulator [63]. Network traffic was captured using Wireshark, focusing on the application layer to ensure that attack packets were fully included. Each packet was truncated or padded to 1,024 bytes to standardize the data for the machine learning model training [62]. In our experiment, the PCAPs were previously processed by changing the source and destination Internet Protocol (IP) to enable correct forwarding to core entities.\nThe dataset consists of CPU, memory, and network metrics of all free5GC core entities. Here, AMF, Authentication Server Function (AUSF), Charging Function (CHF), Non-3GPP Interworking Function (N3IWF), N3 Interface for Untrusted non-3GPP User Equipment (N3IWUE), Network Repository Function (NRF), Network Slice Selection Function (NSSF), Policy Control Function (PCF), Session Management Function (SMF), Unified Data Management (UDM), Unified Data Repository (UDR), UE and User Plane Function (UPF).\nThis PCAP dataset was reinforced in our experimental testbed, leading the Monitoring Agent to record new behavioral resource consumption. We labeled our slice resource consumption dataset according to the original PCAP dataset. Empirically, we have established a new dataset derived from 5GAD with a proportion of 90% benign instances and 10% malignant instances with precision of one second. This was done to simulate a real-world scenario where benign traffic is more prevalent than malignant traffic.\n5.1.3. Evaluation\nFor our evaluation, we used the Fabric testbed, a nationwide testbed on which we deployed a virtual machine with 32GB of memory and 16 cores with an Ubuntu 20.04 operating system, containing scikit-learn, Docker 27.1 and Python 3.11. We started the architecture containers (available here https://github.com/romoreira/SFI2_B5G_Security), instantiated the \"Attacker\" node and the sliced 5G core based on free5GC. We performed 10-fold cross-validation on the dataset to ensure that all training data were used as test instances to avoid overfitting. As shown in Table 3, the classical ML models embedded in the Security Agent can identify anomalies in the running network slice (intra-slice). In Table 3, we compare the performance of the algorithms according to different metrics such as accuracy, F1-Score, recall, and precision.\nAccuracy is the proportion of correctly classified instances: $Accuracy = \\frac{TP+TN}{TP+TN+FP+FN}$. Precision measures true positives among predicted positives: $Precision = \\frac{TP}{TP+FP}$ Recall, or Sensitivity, measures true positives among actual positives: $Recall = \\frac{TP}{TP+FN}$. The F1-score, the harmonic mean of precision and recall, is given by $F1-Score = \\frac{2 \\times Precision \\times Recall}{Precision+Recall}$. These metrics offer a comprehensive view of model performance, with F1-score being especially useful for imbalanced datasets. Our results is presented in Table 3.\nIn this experiment, we reinjected packets into a sliced 5G"}, {"title": "5.2. Anomaly Detection in Architecture Building Blocks", "content": "In this second experiment, we propose a formal evaluation of security-native new advances, showcasing it on the SFI2 Architecture through experiments in which each federated client processes a local dataset [48] consisting of network flows generated by FlowMeter [71]. This tool creates tuples of network flows based on the statistical grouping of network packets. Once the packet capture file is generated (PCAP), it is converted into a CSV containing 78 features for each network flow. In this experiment, we validated the \"Security Level\" feature (Table 1) of our architecture based on its ability to handle security threats from an architectural perspective. We have advanced the SFI2 Architecture by empowering each functional entity to manage security threats in the lifecycle control flow on the fly.\nWe assume that all SFI2 Architecture microservices are ready to handle the network slice lifecycle. In our experimental evaluation, we used SFI2 AI Management to trigger a federated learning scenario using non-Informally, Identically Distributed (IID) data. Each federated client (see Fig. 2 as ML-Agent and associated with microservices as a daemon set) had access to a dataset of a specific type of intrusion and DDoS attack. The data in each ML-Agent may not follow the same distribution nor may have the same characteristics as the data on other devices or the overall population, referred to as non-IID data. This presents challenges for federated learning, such as slow convergence, poor accuracy, and model divergence.\nWe analyzed the optimal hyperparameters for each participant, considering their respective local training sets. In addition, we used the Bayesian approach with the help of the Optuna hyperparameter optimization framework [72]. As depicted"}, {"title": "6. Concluding Remarks", "content": "In this paper, we presented a microservice-based approach to enhance the intelligence and security of network-slicing architectures. Our research reveals that several network slicing architectures lack the necessary intelligence and security features to effectively operate and protect network slices. To address this shortcoming, we propose using ML-Agents and Security Agents, which collaborate to provide intelligent and secure management and orchestration for network slice core entities.\nOur research demonstrated that federated learning, when associated with microservice architectures, can enhance network-slicing architectures, improve their resilience to various security attacks, and build robust AI models for attack prediction for architecture blocks and intra-slices. We conclude that federated learning can make an architecture more resilient to threats, mainly by providing on-demand adjustments and adapting to changing data. In addition, we evaluated the behavior of training rounds in federated learning. We determined that the number of training rounds was insignificant for constructing these Al models.\nThe results of this study offer new insights into the evolution of architectures and frameworks for network slicing, allowing their extension to the design of architectures adapted to security"}]}