{"title": "Speech Enhancement Using Continuous Embeddings of Neural Audio Codec", "authors": ["Haoyang Li", "Jia Qi Yip", "Tianyu Fan", "Eng Siong Chng"], "abstract": "Recent advancements in Neural Audio Codec (NAC) models have inspired their use in various speech processing tasks, including speech enhancement (SE). In this work, we propose a novel, efficient SE approach by leveraging the pre-quantization output of a pretrained NAC encoder. Unlike prior NAC-based SE methods, which process discrete speech tokens using Language Models (LMs), we perform SE within the continuous embedding space of the pretrained NAC, which is highly compressed along the time dimension for efficient representation. Our lightweight SE model, optimized through an embedding-level loss, delivers results comparable to SE baselines trained on larger datasets, with a significantly lower real-time factor of 0.005. Additionally, our method achieves a low GMAC of 3.94, reducing complexity 18-fold compared to Sepformer in a simulated cloud-based audio transmission environment. This work highlights a new, efficient NAC-based SE solution, particularly suitable for cloud applications where NAC is used to compress audio before transmission.", "sections": [{"title": "I. INTRODUCTION", "content": "Speech enhancement (SE) is the process of improving the quality and intelligibility of speech signals by reducing noise and distortion, benefiting applications in telecommunications, hearing aids and speech recognition. Deep learning-based speech enhancement (SE) methods, which aim to estimate clean speech from noisy speech, utilize architectures such as convolutional neural networks [1] [2], recurrent neural networks [3] and Transformers [4] [5] to learn complex pat- terns and adapt to various noise environments, outperforming traditional techniques.\nDeep learning SE methods can be broadly separated into discriminative methods and generative methods. Discrimina- tive methods aim to learn a mapping between noisy and clean speech through methods such as time frequency masking [6] and complex spectral mapping [7]. However, these supervised approaches cannot ensure generalization to all acoustic scenar- ios due to the restricted diversity of the training data, and can even introduce undesirable speech distortions [8]. On the other hand, generative methods capture the underlying distribution of clean speech, using it as a prior to guide the enhancement process. These methods utilize techniques such as flow [9], variational autoencoders [10] and diffusion [11] [12], and have shown to generalize better to out-of-domain noise than discriminative methods [10] [12].\nThe goal of a Neural Audio Codec (NAC) is to compress a segment of audio using codebooks to allow for memory- efficient transmission of the audio signal, typically between a local and remote or cloud device. Recent advancements in NAC models [13] [14] [15] have used large amounts of data to pre-train models that can retain high fidelity despite very significant compression. This has inspired the use of these NACs for downstream tasks such as text-to-speech [16], speech separation [17] and generative SE [18] [19]. Current NAC-based SE methods utilize the speech tokens from the NAC models' codebooks to formulate SE as token prediction tasks where the objective is to predict the NAC tokens of target clean speech through Language Models (LM). While LM-based SE methods have shown promising enhancement results, they can be computationally expensive depending on the LM used. For example, Uniaudio [19] predicts clean speech tokens through autoregressive LM and is known to have a slow Real-Time Factor (RTF) of around 10 on an A100 GPU [20]. In contrast with autoregressive LM-based SE methods [18] [19], MaskGit style LM-based SE [20] [21] are recently introduced which speeds up inference by predicting multiple tokens concurrently.\nIn this work, we propose a novel NAC-based solution for SE without utilizing LM, by performing SE directly using the pre-quantization output of a NAC encoder with a light- weighted SE model. Secondly, we propose an embedding- level loss function to train this NAC-based SE model. Due to the high compression ratio in the time dimension, the loss function requires less computation, allowing for faster training. Our method is also highly efficient over non-NAC based SE models in cloud applications where audio codec is typically used to compress audio signal before transmission [14] [22]"}, {"title": "II. METHODOLOGY", "content": "As illustrated in figure 2a, our SE architecture consists of a pretrained codec encoder, a light-weighted SE module, and a pretrained codec quantizer and decoder. Noisy speech $y_{in}$ first undergoes encoding through the DAC encoder to obtain a continuous representation $y_e$. SE is then performed directly on the encoded representation $y_e$ to obtain $y_h$, the predicted continuous embedding of the target clean speech. The enhanced representation is then fed into the codec's quantizer module to obtain the quantized representation $y$, which can be fed into the codec decoder to generate the enhanced speech $y_{out}$. More concretely,\n$y_e = DACEncoder(y_{in})$\n$y_h = SEModel(y_e)$\n$y = Quantizer(y_h)$\n$y_{out} = DACDecoder(y)$\n(1)\nfor $y_{in}, y_{out} \\in R^L$ and $y_e, y_h, y \\in R^{D \\times T}$ where L is the waveform length, D is size of the DAC embedding dimension and T is the time dimension after compression by DAC."}, {"title": "B. Neural Audio Codec", "content": "The neural audio codec used in this work is the Descript Audio Codec (DAC) [15], a high fidelity universal codec for speech, music and environmental sounds. To match the 16kHz audio used in our SE experiments, we use the 16kHz version of the codec with pretrained weights provided by the original authors\u00b9. During training, the codec is kept frozen. The codec's encoder compresses input audio by 320 times along the time dimension (i.e. $T = \\frac{L}{320}$) while having a channel size of 1024 (i.e. D = 1024). The encoding significantly improves the computational efficiency for the downstream SE task by reducing sequential operations along the time dimension while leveraging parallel processing across the channel dimension."}, {"title": "C. SE Module", "content": "As illustrated in figure 2b, the SE module is located between the DAC encoder and the DAC quantizer, and is trained to perform enhancement on the encoded noisy speech $y_e$. Similar to [17], the bulk of the SE module consists of a series of transformer layers. The Modulation Block consists of two parallel Conv1D pathways: one applies a sigmoid activation to act as a gating mechanism, while the other uses a Snake1D activation [23] to introduce non-linear feature transformations. The output of both branches are multiplied and passed through another Snake1D activation, enabling dynamic modulation of feature representations for enhanced refinement. For speech enhancement, we modified the output layers to produce only a single set of enhanced output embeddings."}, {"title": "D. Loss Functions", "content": "To guide the learning of the SE model in the latent space of the codec, we introduce an embedding loss (2) between the enhanced latent representation $y_h$ and the clean latent representation $x_e$.\n$x_e = DACEncoder(x_{in})$\n$L_{emb} = E_{x_e, y_h} ||x_e - y_h||_1$\n(2)\nwhere $x_{in} \\in R^L$ is the clean speech and $x_e \\in R^{D \\times T}$.\nTo further improve the perceptual quality of the enhanced speech, we utilize a time-domain loss (4) and frequency-domain loss (5) between the enhanced speech $x_{out}$ and the clean speech after transmitting through the DAC codec $x_{out}$.\n$x = Quantizer(x_e)$\n$x_{out} = DACDecoder(x2)$\n$L_{Time} = E_{x_{out}, y_{out}} ||x_{out} - y_{out}||_1$\n(4)\n$L_{Freq} = E_{x_{out}, y_{out}} ||Mel(x_{out}) \u2013 Mel(y_{out})||_2$\n(5)\nwhere Mel represents the audio to MelSpectrogram transfor-mation, $x_{out} \\in R^L$ and $x_l \\in R^{D \\times T}$.\nThe overall loss function (6) is the sum of the individual losses, where \u03b1, \u03b2 and \u03b3 are used to balance the impact factor of each loss, and are set to 1, 500 and $\\frac{1}{20}$ respectively in our experiments.\n$L_{Overall} = a \\times L_{Emb} + B \\times L_{Time} + \\gamma \\times L_{Freq}$ (6)"}, {"title": "III. EXPERIMENTS", "content": "Following previous NAC [20] and LM-based [24] SE works, we gathered clean speech and noise clips to generate noisy speech on the fly during training with signal-to-noise ratio (SNR) in [-5, 20] dB. Specifically, our train set consists of 40 hours of clean speech and 15 hours of noise clips from the 2022 DNS Challenge [25], where the clean speech comes from the read speech and the VCTK [26] partition, and the noise clips comes from the audioset and freesound partition. Our validation set is gathered in an identical manner with 4 hours of clean speech and 1.5 hours of noise.\nFollowing previous works [20] [24], we use the 2020 DNS Challenge test sets [27], which include 2 synthetic testsets with and without reverb respectively as well as a testset of real recordings.\nWe follow previous works [20] [24] to evaluate speech quality using the publicly available DNSMOS [28], a robust neural network-based perceptual quality esti- mator. Unlike the reference-based PESQ [29] metric which cannot reliably measure speech quality when misalignment between reference and target speech occurs [30] [24] [20], DNSMOS is a learned, reference-free metric which can predict the quality ratings regardless of any potential misalignments. Additionally, we measure the speaker similarity between the enhanced speech and the target clean speech through cosine similarity calculated by x-vector embeddings [31]. Finally, we also estimate the speech intelligibility of the enhanced speech through word error rate (WER) calculated by an ASR model."}, {"title": "B. Experimental Setup and Baselines", "content": "All experiments are performed on a single A100 GPU with RAM size of 40GB. We trained all of our models at 16k sampling rate and learning rate of 1.5 \u00d7 10\u22124 for 70 epochs using the Adam optimizer. Only the parameters of the SE module are updated during training. For the SE module, we set the number of the transformer blocks to 8 and the embedding size to 256. Training was done with batch size of 4.\nWe also trained a Sepformer model [32] as baseline using the default recipe from Speechbrain [33] on our training set. Sepformer is a transformer-based model used for speech separation [32] and enhancement [34]. It is similar to our transformer model and serves as a suitable candidate for comparison. The main difference between our model and Sepformer is the use of DAC as the encoder and decoder, as well as the use of only a single stack of transformers, compared to Sepformer's dual-path architecture.\nIn Table I we compare both systems under a practical online audio transmission scenario, where the audio signal is processed on the cloud and sent to a local device (see figure 1(a) and (c) for illustration). To investigate whether the codec transmission degrades the performance of the Sepformer model, we also report the Sepformer model's performance without undergoing transmission through the DAC codec.\nIn addition, we use the results from [24] for CDiffuSE [12], SGMSE [35], StoRM [36] and SELM [24] to compare with our work. These methods are generative SE methods, where the first 3 are diffusion-based methods and the last is a LM-based method. These baselines are trained by [24] using clean speech and noisy speech generated on the fly similar to our approach. It should be noted that their training dataset is gathered from more diverse sources including the DNS challenge, LibriMix, WHAM! and DEMAND, and is significantly larger than ours."}, {"title": "IV. RESULTS AND DISCUSSIONS", "content": "Table I compares the efficiency of our method against Sepformer (Cloud) during training and inference. Our SE model reduces training time by 4x. This is largely be- cause the SE module operates on the latent space of the frozen DAC model, which significantly reduces the temporal dimension of the input to the SE model in comparison with Sepformer. Similarly, we notice about 18 times reduction in MAC (Multiple and Accumulate operations) during inference. The MAC results are calculated using PyTorch-OpCounter2 on a 10 seconds long utterance. The MAC for audio compres- sion and decompression are omitted since they are used by both the speech enhancement models during the online audio transmission scenario as shown in Figure 1.\nIn Table II, we compare the speech quality of our method against both Sepformer in the online transmission scenario (Sepformer Cloud) where the output of Sepformer is trans- mitted through the DAC codec as well as the raw out- put of Sepformer (Sepformer Oracle). While our method achieves performance slightly below Sepformer, it offers a substantial advantage in terms of computational efficiency, sig- nificantly reducing resource requirements while maintaining good-quality results. We also find that Sepformer (Cloud) out- performs Sepformer (Oracle) slightly in most metrics except for WER, suggesting that the transmission through the DAC codec does not degrade speech quality.\nTable III compares our work against several generative SE methods trained by [24]. Despite being trained on a smaller dataset, our model achieves comparable results to most of the reported SE methods. Our method, including the DAC com- ponents, achieves a Real-Time-Factor (RTF) of 0.005, which is lower than all reported baselines. For all RTF calculations, we obtained the results by performing inference on the DNS Challenge Test Set (Without Reverb) for 5 times on a single A100 GPU and averaging the results. The RTF for SELM is omitted since its implementation is not publicly available."}, {"title": "B. Investigation on loss functions", "content": "We also investigate the impact of different loss functions. In table IV, we show that the SE module fails to learn without the proposed embedding loss $L_{emb}$, indicating that $L_{emb}$ is crucial in guiding the learning of the SE module in the embedding space of the DAC model. We also observe that adding $L_{Time}$ and $L_{Freq}$ to $L_{Emb}$ improves speech quality, indicating that direct optimization on the generated speech is useful for refining speech quality."}, {"title": "V. CONCLUSION", "content": "In this work, we proposed a novel and efficient approach to speech enhancement by leveraging the pre-quantization output of a neural audio codec. Our method achieves comparable speech quality to previous works while significantly reducing computational complexity, with a 18x reduction in GMACS compared to Sepformer (Cloud) and a real-time factor of 0.005. We introduced an embedding-level loss function to train the SE model and demonstrated its effectiveness through ablation studies. Our approach is particularly well-suited for cloud applications where audio compression is typically used before transmission. Future work could explore the potential of this approach with larger datasets and more complex model architectures to further improve enhancement quality while maintaining computational efficiency. We encourage readers to listen to our demo samples\u00b3, which showcase the performance of our proposed method."}, {"title": "VI. ACKNOWLEDGEMENT", "content": "The research is supported by the National Research Founda- tion, Singapore (AISG Award No: AISG2-GC-2022-005), and the computational work was partially performed on resources of the National Supercomputing Centre, Singapore. Any opin- ion and findings in the work are solely those of the authors."}]}