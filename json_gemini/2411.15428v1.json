{"title": "GeoAI-Enhanced Community Detection on Spatial Networks with Graph\nDeep Learning", "authors": ["Yunlei Liang", "Jiawei Zhu", "Wen Ye", "Song Gao"], "abstract": "Spatial networks are useful for modeling geographic phenomena where spatial interaction plays\nan important role. To analyze the spatial networks and their internal structures, graph-based\nmethods such as community detection have been widely used. Community detection aims to\nextract strongly connected components from the network and reveal the hidden relationships\nbetween nodes, but they usually do not involve the attribute information. To consider edge-\nbased interactions and node attributes together, this study proposed a family of GeoAI-enhanced\nunsupervised community detection methods called region2vec based on Graph Attention Networks\n(GAT) and Graph Convolutional Networks (GCN). The region2vec methods generate node neural\nembeddings based on attribute similarity, geographic adjacency and spatial interactions, and then\nextract network communities based on node embeddings using agglomerative clustering. The\nproposed GeoAI-based methods are compared with multiple baselines and perform the best when\none wants to maximize node attribute similarity and spatial interaction intensity simultaneously\nwithin the spatial network communities. It is further applied in the shortage area delineation\nproblem in public health and demonstrates its promise in regionalization problems.", "sections": [{"title": "1. Introduction", "content": "Networks or graphs are often used to model many phenomena and relationships in the real world.\nFor example, traffic moves along the transportation networks in geographic space, people connect\nthrough social networks, and academic scholars reference each other in the citation network. A\nnetwork or graph usually consists of nodes and edges. The nodes can represent real-world entities\nand the edges are the connections between entities. In a spatial network, nodes can be geographic\nentities such as locations, road intersections or segments, and administrative areas (Zhu et al.,\n2020), and edges can represent the spatial interactions among nodes (Barth\u00e9lemy, 2011, Gao et al.,\n2013, Liu et al., 2016, 2019, Ye and Andris, 2021). The spatial interaction intensity can be used as\nthe edge weights. Such spatial networks contain rich information and can be used to understand\nmany geographic phenomena, for example, regionalization.\nIn the domain of geography, regionalization has always been of central importance. \u201cUnder-\nstanding the idea of region and the process of regionalization is fundamental to being geographically\ninformed\" (Geography Education Standards Project, 1994, p.70). The process of regionalization\nhelps geographers and urban planners understand the complexity of many ongoing phenomena and\ngain insights into human behaviors and societies. In urban science, there is an increasing trend\nto study the functional cities in terms of location and spatial interactions with emerging big data\nand AI technologies (Batty, 2021). Depending on the specific goals, the criteria used to divide\nregions can be multifaceted, including geographical, cultural, economic, political, etc. In the real\nworld, many domains, such as health care, economics, or urban planning, require regions to be\nthe basic unit for conducting further analyses, organizing and summarizing patterns. For example,\ncomparing hospital visit statistics at the regional level can help policy-makers discover potential\nresource disparity in cities, make reasonable decisions, and propose strategies for future directions.\nCentral to regionalization is the concept of spatial networks, which are structures that represent\nthe complex relationships and interactions among different locations and regions. Spatial networks\nprovide valuable insights into how different areas are interconnected and influence one another.\nHowever, they are always in a complex structure with many interrelated components that are hard\nto model and analyze.\nCommunity detection algorithms have been widely used to extract information from complex\nnetworks and detect densely connected nodes in a network. Through the detected communities,\nstudies can further identify the hidden relationship among network components and reveal the\nunderlying network structures (Su et al., 2021, He et al., 2021, Expert et al., 2011). The two major\nsources of information in a network (or a graph) used in community detection are the topological\ninformation represented by edges and the attribute information of nodes. Most of the traditional\ncommunity detection algorithms partition the networks primarily based on topological structures.\nFor example, the minimum-cut method partitions the graph by minimizing the number of edges\nbetween communities, the hierarchical clustering method uses the topological type of similarity\nbetween node pairs to group nodes, and the modularity maximization considers the concentration\nof edges within communities (Flake et al., 2004, Johnson, 1967, Newman, 2006).\nHowever, the node attributes can also represent crucial characteristics such as people's demo-\ngraphic information or the region's economic status and should be incorporated into the region-\nalization process. How to better integrate both node attributes and network topology remains\na challenge for traditional methods. In addition, another limitation of traditional community\ndetection algorithms is that the computational cost increases dramatically with the expansion of\nnetworks (Su et al., 2021). Real-world networks may contain millions of nodes and edges with\ncomplex information and high-dimensional attributes.\nThe past few years have witnessed significant developments in the adoption of deep learning\nmethods to solve the community detection problem. Deep learning offers the following advan-\ntages compared with traditional methods: (1) it can convert the high-dimensional input into\nlow-dimensional representations while maintaining the important structure information (Hinton and\nSalakhutdinov, 2006, Hamilton et al., 2017) or convert low-dimensional input into high-dimensional\nrepresentation to generate learning-friendly location encodings (Mai et al., 2022); (2) it can integrate\nmultiple types of information in various formats. Therefore, it has shown powerful performance on\ncommunity detection tasks (Su et al., 2021).\nThe integration of multiple information sources in deep learning is especially helpful for spatial\nnetworks. While other networks may only have one type of edge connection, nodes in spatial\nnetworks can have an additional relationship related to their geographic proximity. In many cases,\nthe geographic places or regions may be spatially adjacent to each other. For example, if a study area\nis divided into grids, each grid can have multiple neighboring grids surrounding it. Therefore, given\na spatial network, two graphs can be constructed: a graph for the spatial interactions among nodes\nwhere edges can be quantified using flow connections, and a graph for the geographic adjacency\nwhere edges can represent the binary relationship of whether two nodes are adjacent by sharing"}, {"title": "boundary or vertices.", "content": "According to the first law of geography, \"near things are more related than\ndistant things\" (Tobler, 1970), which means that the nodes in spatial networks are naturally affected\nby their geographic neighbors, and such effects decay as two nodes become further away (Liu et al.,\n2012). The relationship can also be interpreted as a similarity measure, where nodes that are closer\nin geographic spaces tend to be more similar.\nThe convolutional graph-based models are great candidates to model such relationships. Con-\nvolutional Neural Networks (CNNs) were first proposed for image analysis and can consider input\ntopology by updating each input based on its surrounding inputs in a filter (LeCun et al., 1995).\nGraph Convolutional Networks (GCNs) were further proposed for graph-structured data to apply\nCNN directly on graphs. Instead of using a fixed filter, the surrounding relationship is determined\nby the edge connections. In fact, GCN has gained great attention due to its good performance\non node classification for graph-structured data (He et al., 2021, Kipf and Welling, 2017). GCN\nleverages the inherent structure of the data and aggregates neighbor nodes' information when\nupdating the central node's representation (Kipf and Welling, 2017). Later on, Graph Attention\nNetworks (GATs) were proposed to improve the neighborhood aggregation function in GCN, where\na self-attention mechanism is used to learn the neighborhood importance for each pair of nodes\n(Velickovic et al., 2017). Compared with GCN, which usually uses a fixed rule to aggregate\nneighborhood information, GAT uses the implicit attention coefficients to reflect that neighbors\ncan have different importance to the central nodes. The advantages of GCN and GAT in modeling\ngraph-structured data make them very useful for community detection on spatial networks and\ngeographic contexts learning in GeoAI, especially for incorporating spatial concepts and structures\nsuch as spatial dependence, geo-semantics, and neighborhoods (Zhu et al., 2020, De Sabbata and\nLiu, 2023, Janowicz et al., 2020, Hu et al., 2024).\nHowever, there are limited studies on applying convolutional-based neural networks to commu-\nnity detection tasks in spatial networks due to a few challenges. The lack of labels in community\ndetection tasks makes it hard to train GCN or GAT models directly, as they are usually supervised\nor semi-supervised. How to solve the unsupervised learning problem using supervised models re-\nmains a challenge (Xiao et al., 2022). Second, although GCN and GAT are used to understand graph\nstructures and generate latent representations for nodes, their goal is not community detection or\nregionalization-oriented (Jin et al., 2019, Liang et al., 2022). The learning objective for GCN and\nGAT needs to be re-designed to meet the requirements of community detection tasks.\nWith the consideration of those problems, the following research question (RQ) is asked:\nRQ. How can node attributes and edge connections in spatial networks be combined simultane-\nously to identify regions using GeoAI methods?\nTo answer the research question, we designed a novel GAT-based unsupervised learning method\nfor community detection and regionalization in this research, which extended the previous GCN-\nbased learning method (Liang et al., 2022) to build a family of GeoAI-enhanced unsupervised\nlearning methods that are guided by a community detection-oriented loss. The GeoAI-enhanced\nmethods consider two types of edge relationships in the spatial network: spatial interactions and\ngeographic adjacency, and combine multi-attribute information using the GCN and GAT models to\nlearn node representations.The communities (i.e., geographic regions) are further identified through\nan additional clustering step. The proposed GeoAI-enhanced community detection methods are\ncalled region2vec; the name was firstly used by Liang et al. (2022) to indicate a general type of\nmethods that can extract latent representations (i.e., embeddings) based on regions' characteristics\nand spatial interactions. The used GCN and GAT models may be replaced with other graph neural\nnetwork models based on different use cases. This study will focus on understanding the efficacy\nof the proposed methods in spatial network community detection.\nThe major contributions of this research are summarized as follows:"}, {"title": null, "content": "(1). We propose a family of GeoAI-based community detection algorithms that simultaneously\nconsider both node attributes and edge connections using graph deep learning with geographic\ndomain knowledge, i.e., the spatial dependence in Tobler's First Law of Geography (Tobler, 1970)\nand the similarity configuration in the Third Law of Geography (Zhu and Turner, 2022), and\novercomes the limitations of traditional community detection methods and clustering methods.\n(2). We design a community-oriented loss that fills the gap in solving unsupervised learning\ntasks using (semi-)supervised models (GCNs and GATs) in geospatial regionalization tasks. The\nflexibility of inserting desirable node attributes and adopting available spatial interaction networks\nallows the broad applications of the proposed method.\nThe remainder of the sections are organized as follows: we first summarize the related literature\non communication detection and graph embedding in Section 2, and we introduce the proposed\ncommunity detection models in Section 3 and followed by the introduction to data and case study\nbackground in Section 4. We then present comparative analyses of the proposed method against\nother baselines and results in one public health application in Section 5. Finally, we conclude our\nresearch and share some directions for future work in Section 6."}, {"title": "2. Related Work", "content": null}, {"title": "2.1. Community Detection Algorithms on Spatial Networks", "content": "As mentioned above, most of the traditional community detection algorithms are based on\ntopological structures. Among them, the modularity-based maximization methods have particularly\nperformed well on spatial networks (Gao et al., 2013, Expert et al., 2011). The modularity proposed\nby Newman (2006) is a measure of how good a graph partition is. It compares the number of\nedges that fall within the communities to a null network with edges placed randomly (Newman,\n2006). A large modularity value indicates a robust community structure and dense connections\namong nodes within communities (Newman, 2006, Hu et al., 2018). One of the most popular\nmodularity maximization methods is Louvain (Blondel et al., 2008). The Louvain method achieves\nthe maximum modularity through two stages: (1) in a local network, move individual nodes to\nthe community that maximizes the modularity gain, (2) aggregate the updated local networks\nand treat them as nodes recursively (Blondel et al., 2008). The two stages are repeated until no\nimprovement can be made. However, it has been found that the Louvain method tends to generate\npoorly-connected communities in some cases (Wang et al., 2021). The Leiden method was recently\nproposed to improve the Louvain method and guaranteed to generate well-connected communities\n(Traag et al., 2019).\nThe Louvain and Leiden methods have been applied to the public health domain to identify\nhealth service areas and spatially connected communities (Hu et al., 2018, Wang et al., 2021,\nPinheiro et al., 2020, Wang and Wang, 2022). The Louvain method was first applied to identify\nthe hospital service areas based on the patient-to-hospital flows in Florida (Hu et al., 2018).\nLater on, Wang et al. (2021) proposed spatially constrained Louvain and Leiden algorithms to\nidentify health service areas. The algorithms have shown great performance in delineating health\nservice areas with a goal of maximizing flows within communities and minimizing flows between\ncommunities (Hu et al., 2018, Wang et al., 2021). They are effective and efficient for capturing\nthe natural structure of the health visit patterns. In addition, traditional community detection\nmethods have also been widely used in identifying spatial interaction communities using human\nmobility data, social media check-ins, cellphone call data, and community travel surveys (Ratti\net al., 2010, Liu et al., 2014, Nelson and Rae, 2016, Hou et al., 2021). Besides the edge connections,\nthe node attributes are also crucial to affecting community structures, such as people's demographic"}, {"title": null, "content": "information and socioeconomic status, but they are not considered in those traditional edge-based\ncommunity detection methods.\nLiang et al. (2022) proposed a GCN-based unsupervised community detection method that\nconsiders both node attributes' similarity and edge connections. The algorithm demonstrates the\npotential of graph embedding in community detection tasks, but it cannot outperform the best\nbaseline in every metric used. The effects of the spatial interaction are only used in the loss\nfunction, but they are not directly included in the GCN layers, which may also be one reason that\nthe model does not perform the best. There are possibilities to improve the method and explore its\napplications in real-world examples of regionalization and community detection on spatial networks."}, {"title": "2.2. Graph Embedding", "content": "Graph embedding is a powerful representation learning technique that reduces the dimension-\nality of data by incorporating both node attributes and topological graph structures into vectors\n(Goyal and Ferrara, 2018). With the information captured in vectors, node clustering is naturally\nextended from it. It has been shown in various scenarios that leveraging attribute information in\naddition to the graph structure yields better results for node clustering (Cui et al., 2020). Deep\nlearning algorithms, including random walk-based algorithms and GCN-based algorithms, have\nboth shown promising performance in graph embedding tasks (Goyal and Ferrara, 2018).\nLarge-scale Information Network Embedding (LINE) was among the first graph embedding\nmethods that scaled well with large networks (Grover and Leskovec, 2016, Tang et al., 2015). LINE\nproposed to sample edges with probabilities based on weights and treat them as unweighted edges\nto solve the gradient explosion problem in stochastic gradient descent (Tang et al., 2015). Random\nwalk-based algorithms such as DeepWalk and Node2vec, both inspired by the skip-gram models\nin natural language processing, aim to preserve high-order proximity between nodes in a graph by\nsampling fixed-length random walks and maximizing the probability of its neighbors in the walk\n(Perozzi et al., 2014, Grover and Leskovec, 2016). Node2vec improves on DeepWalk by having a\nmore flexible sampling strategy that balances between breadth-first-search and depth-first-search\ntraversal, which allows it to learn a mixture of homophily and structural equivalence in a graph\n(Grover and Leskovec, 2016). Another method called SDNE (Structural Deep Network Embedding)\nis also one of the earliest methods for graph embedding tasks (Wang et al., 2016). It jointly optimizes\nfor first-order and second-order proximities to preserve both the local and global structure of the\ngraph (Wang et al., 2016). This semi-supervised method is also robust to sparse networks (Wang\net al., 2016). The GraphSAGE framework later leveraged node features and aggregated attribute\ninformation in neighborhoods of the graph to improve node embeddings (Hamilton et al., 2017).\nIn recent years, Graph Convolutional Networks (GCN) have gained tremendous attention for\ntheir strong capability in graph embedding and node representation learning, which are highly\nbeneficial for further downstream prediction and clustering tasks (Zeng et al., 2019, Molokwu\net al., 2020). Some of the latest GCN methods like GALA (Graph convolutional Autoencoder using\nLAplacian smoothing and sharpening), MAGNN (Metapath Aggregated Graph Neural Network),\nand AGE (Adaptive Graph Encoder) have all shown superior behaviors in popular node clustering\ndatasets like Cora, IMDB, Wiki etc.(Fu et al., 2020, Cui et al., 2020, Park et al., 2019). Both\nGALA and AGE utilize graph encoder while MAGNN utilizes node attributes transformation and\nmetapath aggregation (Fu et al., 2020, Cui et al., 2020, Park et al., 2019). Metapath is defined\nas \"an ordered sequence of node types and edge types defined on the network schema, which\ndescribes a composite relation between the node types involved\" (Fu et al., 2020, p.2). MAGNN\ncaptures both semantic attributes and topological structures from neighboring nodes and metapath\ncontext in between (Fu et al., 2020). CommDGI (Community Deep Graph Infomax) developed a\nmore specific GCN for community detection given the inherent unsupervised nature of community"}, {"title": null, "content": "detection tasks compared to the other general-purpose graph representation learning problems by\nadding a clustering layer with community-oriented objectives like modularity (Zhang et al., 2020).\nGraph Attention Networks (GATs) were further proposed to improve the neighborhood aggre-\ngation in GCN. In GCN, the weights between the neighbor nodes and the central node are usually\nexplicitly defined, either through the structural properties of the graph or a learnable weight, and\nthis can affect the generalization power of GCN. GAT defines the one-hop neighborhood weights\nimplicitly through a self-attention mechanism (Velickovic et al., 2017). The key idea is that different\nnodes in a neighborhood can have different importance to the central node. GAT has been proven\nto achieve or match state-of-the-art results and allows more interpretability through the learned\nattentional weights. Although GCN and GAT methods have been very successfully used in many\ntasks, their potential for community detection on spatial networks is still under-examined."}, {"title": "3. Method", "content": "We first introduce some definitions for the spatial network-based community detection problem\nwith all the notations used in the following sections and briefly introduce the data sources used in\nthe model. Then, the proposed region2vec graph embedding algorithms and the clustering method\nfor community detection are presented."}, {"title": "3.1. Notations and Problem Definitions", "content": "Graph G = (V, E) is defined via a set of nodes V = (v1, ..., Un) (e.g., locations and regions),\n|V| = n and edges E with eij = (Vi, vj). A = [aij]non is an adjacency matrix representing\ngeographic adjacency, where aij = 1 if eij \u2208 E, otherwise aij = 0. S = [Sij]nxn is a spatial\ninteraction weight matrix, where sij represents the flow intensity between node vi and vj. An\nnxm attribute matrix X is used to denote the node attributes.\nThe community detection groups the n nodes into K communities {C1, C2, ..., CK} and each\nnode will be assigned with a label ci indicating its community membership, ci \u2208 {1,2, ..., K}."}, {"title": "3.2. Algorithm", "content": "Based on the proposed method, the identified communities should contain nodes (i.e., geographic\nregions) that satisfy the following three aspects: 1) share similar attributes, 2) have strong spatial\ninteractions, and 3) are geographically adjacent. A two-stage community detection algorithm is\nproposed to fulfill the three requirements by considering node attributes and edge connections\n(spatial interactions and geographic adjacency) together. As shown in Figure 1, stage one focuses\non generating node representations encoded with the attribute, adjacency, and flow information,\nwhich enables the partition of network communities in the embedding space; Stage two focuses on\nclustering nodes into communities based on their similarities in the embedding space."}, {"title": "3.2.1. Stage One: Node Representation Learning", "content": "Based on the first law of geography, nearby things are more related to distant things (Tobler,\n1970). Applying that to any node in a spatial network, its neighborhood nodes should have larger\neffects than distant nodes. Therefore, graph convolution becomes a natural tool that can aggregate\nneighbor information when updating the central node representation (Kipf and Welling, 2017).\nTwo models are used respectively in the study to learn node embedding.\nThe first model used in the study is a GCN model with two convolutional layers. It was proposed\nby Liang et al. (2022) and details about the model structure can be found in the original paper.\nZ(1) and Z(2) are the outputs of the first and second graph convolutional layers, and W(0) \u2208\nRm\u00d7nhidden and W(1) \u2208 Rnhidden\u00d7noutput as the weights of two layers, the forward propagation model\ncan be formalized as Equation 1:\nZ(1) = ReLU(\\bar{D}^{\\frac{-1}{2}}\\bar{A}\\bar{D}^{\\frac{-1}{2}}XW^{(0)}),\nZ(2) = \\bar{D}^{\\frac{-1}{2}}\\bar{A}\\bar{D}^{\\frac{-1}{2}} Z^{(1)} W^{(1)},\nwhere A and I are the spatial adjacency and identity matrices, \\bar{A} = A + I, and D is the degree\nmatrix of A.\nThe second model is the GAT model. It aggregates the neighborhood nodes with a self-attention\nmechanism. We followed the original GAT model proposed by Velickovic et al. (2017). The input is\na set of node features, z = {z1, z2, ..., zn}, zi \u2208 Rm, where n is the number of nodes, m is the number\nof features in each node. The layer generates a new set of node representations, z' = {z'1, z'2, ..., z'n},\nz'i \u2208 Rm' (the new node representations may have a different cardinality m').\nA shared linear transformation weight matrix W \u2208 Rm'xm is applied to every node. The\nself-attention mechanism a : Rm' x Rm' \u2192 R then computes attention coefficients:\neij = a(Wzi, Wzj)\nFor each node i, we only compute eij for nodes j\u2208 Ni, where Ni is the neighborhood of node i.\nThe softmax function is used to normalize the attention coefficients:\nAij = softmaxj (eij) = \\frac{exp(eij)}{\\Sigma_{k \\in N_i} exp(eik)}\nThe final output representation for every node is a linear combination of the features weighted by\nthe normalized attention coefficients:\nzi' = \\sigma(\\Sigma_{j\\in N_i} a_{ij}Wz_j)"}, {"title": null, "content": "However, the attention coefficients are learned only from the node features in the original model\nbased on a binary adjacency matrix. But GAT can not consider the case when there is a weighted\ninput matrix that may contain different types of edges (Velickovic et al., 2017). We added an\nadditional weight s'ij (a normalized flow intensity coefficient, s'ij \u2208 [0,1]) to the attention coefficient\nto adjust the effects of spatial interaction on neighborhood node importance. The additional weight\nmatrix S' is generated with a threshold t' to remove small-value flows, then the spatial flows are\nre-scaled and normalized to make sure the coefficients are comparable with the attention coefficients.\nWe call this model the weighted GAT model:\nzi' = \\sigma(\\Sigma_{j\\in N_i} s_{ij}'a_{ij}Wz_j)\nBoth the traditional GAT following the equation 4 and the weighted GAT model using equation\n5 are adopted in the study. The input for GAT is the geographic adjacency matrix and the spatial\npositive flow matrix with a threshold t as shown in Equation 6.\nAGAT = A + Spt\nHowever, GCN and GAT are not community detection-oriented models. We proposed a new\nloss function to guide the learning process. The loss function contains two constraints. The spatial\ninteraction flow constraint will draw nodes with spatial interactions (positive pairs) closer and\npush nodes without spatial interactions (negative pairs) further in the embedding space. The\nspatial distance constraint uses a hop-distance threshold to discourage distant nodes from having\nsimilar embedding. The loss function is shown in Equation 7:\nLhops = \\Sigma_{i=1}^{N_{pos}} \\frac{I(hop_{ij} > \\epsilon)d_{ij}}{log(hop_{ij})},\nL = \\frac{\\Sigma_{p=1}^{N_{pos}} log(sp)d_{pos_p}/N_{pos}}{\\Sigma_{q=1}^{N_{neg}} d_{neg_q}/N_{neg} + L_{hops}}\nwhere hopij is the number of hops of the shortest path between vi and vj in the graph, and dij is\nthe euclidean distance between the node embedding. I(\u00b7) is set to 1 if hopij > \u0454, or 0 otherwise.\nposp, p\u2208 [0, Npos] and negq, q \u2208 [0, Nneg] represent the positive and negative pairs based on spatial\ninteractions, where Npos and Nneg are numbers of positive and negative pairs. The pseudocode of\nregion2vec using the GCN model is shown in Algorithm 1 (Liang et al., 2022) and the pseudocode\nof region2vec using the weighted GAT model is shown in Algorithm 2."}, {"title": "3.2.2. Stage two: Agglomerative Clustering", "content": "The second stage is conducting clustering to obtain the final community memberships based\non the node neural embeddings from the first stage. We used an agglomerative clustering method\nto aggregate similar nodes (i.e., regions) into larger groups. As a bottom-up approach, each node\nis an independent cluster at first and is grouped successively to form the final clusters (Pedregosa\net al., 2011). We also enforce the connectivity constraint in the clustering algorithm to allow only\nclusters that are geographically adjacent to be merged together. Many regionalization problems\nusing spatial networks might have an inherent spatial contiguity requirement to support further\ninterpretation and analysis of the obtained regions. Therefore, it is necessary to have this spatial\ncontiguity setting in the algorithm."}, {"title": "3.3. Baseline Algorithms", "content": "The following community detection algorithms are included in this study as baselines to compare\nwith our proposed GeoAI-enhanced region2vec models."}, {"title": "3.3.1. Louvain community detection", "content": "The Louvain algorithm (Blondel et al., 2008) first generates small communities through local\nmodularity gain maximization, then the identified communities are treated as nodes and recursively\naggregated again. The input of the Louvain method is the spatial flow network and it is used to\ndetect communities using only human mobility flow connections in this study."}, {"title": "3.3.2. Leiden community detection", "content": "The Leiden algorithm is a recent improvement on the Louvain algorithm. The Louvain algorithm\nhas been found to generate arbitrarily badly connected communities (Traag et al., 2019). The Leiden\nadded an additional partition refinement stage to ensure that communities are guaranteed to be\nwell connected. The input of the Leiden method is also the spatial flow network."}, {"title": "3.3.3. Random walk based model", "content": "Two random walk based graph embedding models, Deepwalk (Perozzi et al., 2014) and Node2vec\n(Grover and Leskovec, 2016) are used as baselines. Deepwalk uses short walks to generate random\npaths of connected nodes (Perozzi et al., 2014). The Node2vec algorithm further develops a biased\nrandom walk procedure to control different node neighborhood exploration strategies (Grover and\nLeskovec, 2016). The input of the two methods is the spatial adjacency matrix. After obtaining\nthe node embedding, the same agglomerative clustering algorithm is applied to generate the final\ncommunities."}, {"title": "3.3.4. LINE", "content": "Large-scale Information Network Embedding (LINE) proposed by Tang et al. (2015) is a network\nembedding method. It specifically preserves the local and global network structure through a\ncarefully designed objective function that considers both first-order and second-order proximities.\nThe input of LINE is the spatial adjacency matrix."}, {"title": "3.3.5. K-Means", "content": "The K-Means clustering algorithm can group nodes with similar attributes and assign each node\nto the cluster that is the nearest by measuring feature space distance (MacQueen et al., 1967). The\nK-Means clustering algorithm takes the node attributes as the only input and cannot consider the\nedge connections."}, {"title": "3.4. Evaluation Metrics", "content": "Four individual metrics and one synthetic metric are used to compare the community detection\nmethods' performance from different perspectives."}, {"title": "3.4.1. Intra-Flow Ratio", "content": "The intra-flow ratio is used to measure the ability to group nodes with strong flow connections.\nLiang et al. (2022) proposed a similar metric called the intra-inter flow ratio. The intra-flow ratio\nused in this paper is a more robust metric with a fixed range of [0,1] that supports comparison\nacross different scenarios. It divides the sum of edge weights within each community (intra-flow\nweights) by the sum of intra-flow and inter-flow edge weights in the whole spatial network. The\nequation for computing this ratio is shown in Equation 8, where sij represents the flow intensity"}, {"title": null, "content": "between nodes i and j. This ratio ranges from 0 to 1, with a higher value indicating a better\nperformance to group nodes with strong connections together.\nRIntraFlow = \\frac{\\Sigma_{c_i=c_j} s_{ij}}{\\Sigma_{ij} s_{ij}};\nCi, Cj \u2208 1, 2, \u2026\u2026\u2026, K (K is the number of communities)"}, {"title": "3.4.2. Inequality", "content": "The inequality metric was initially designed to reflect the infrastructure inequality (Pandey\net al., 2022). The inequality reflects the heterogeneity of all the samples and how it varies with\nthe average value. It is calculated using Equation 9 where o is the standard deviation and u is the\nmean. In this study, the inequality is measured using all the node features. For each feature, the\ninequality in each community is calculated and the median inequality in all communities is selected\nas a representation for that feature dimension. The final score is the product of all inequality scores\n(Equation 10) where m is the number of features. The inequality is then converted into a range of\n0 to 1 using the min-max normalization (Equation 11). A value of 1 means maximum inequality\nand a value of 0 means minimum inequality (i.e., a better performance).s\nI_i = \\frac{\\sigma_i}{\\sqrt{\\mu_i(1 - \\mu_i)}} < a_i < 1\nI = \\prod_{i=1}^{m} I_i\nInorm = \\frac{I - Imin}{Imax - Imin}"}, {"title": "3.4.3. Cosine Similarity", "content": "We use cosine similarity to measure the ability of grouping nodes when they share similar\nattributes. Cosine similarity calculates the L2-normalized dot product of vectors (Pedregosa et al.,\n2011), which is the cosine of the angle between the two vectors, and therefore, is not dependent on\nthe magnitudes of the vectors (Manning et al., 2010). The cosine similarity for all pairwise nodes\nin each community and the median values in all communities are calculated."}, {"title": "3.4.4. Synthetic Score", "content": "The previous three metrics are measured along different dimensions of the community detection\nresult. To summarize all the different aspects, a synthetic score S is calculated as the product of\nthe three metrics. To make it comparable, we need"}]}