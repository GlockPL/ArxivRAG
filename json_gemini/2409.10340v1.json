{"title": "Hyperedge Modeling in Hypergraph Neural Networks by using Densest Overlapping Subgraphs", "authors": ["Mehrad Soltani", "Luis Rueda"], "abstract": "Hypergraphs tackle the limitations of traditional graphs by introducing hyperedges. While graph edges connect only two nodes, hyperedges connect an arbitrary number of nodes along their edges. Also, the underlying message-passing mechanisms in Hypergraph Neural Networks (HGNNs) are in the form of vertex-hyperedge-vertex, which let HGNNs capture and utilize richer and more complex structural information than traditional Graph Neural Networks (GNNs). More recently, the idea of overlapping subgraphs has emerged. These subgraphs can capture more information about subgroups of vertices without limiting one vertex belonging to just one group, allowing vertices to belong to multiple groups or subgraphs. In addition, one of the most important problems in graph clustering is to find densest overlapping subgraphs (DOS). In this paper, we propose a solution to the DOS problem via Agglomerative Greedy Enumeration (DOSAGE) algorithm as a novel approach to enhance the process of generating the densest overlapping subgraphs and, hence, a robust construction of the hypergraphs. Experiments on standard benchmarks show that the DOSAGE algorithm significantly outperforms the HGNNs and six other methods on the node classification task.", "sections": [{"title": "I. INTRODUCTION", "content": "While Graph Neural Networks (GNNs) have attracted in-creasing attention in the past few years, they suffer from the limitation in the assumption of pairwise connections between nodes, which cannot capture the complex relationships be-tween neighbor nodes and limits the capability of high-order correlation modeling. Even message-passing mechanisms en-able GNNs to capture even beyond pairwise connections among vertices, they still suffer from the ability to capture indirect relationships [1]. In this regard, Hypergraph Neural Networks (HGNN) have been proposed to address the chal-lenges of representation learning using high-order correlations [2]. HGNNs represent data in the hypergraph structure [3]. Graphs become hypergraphs when additional information in a graph groups entity nodes together into sets [4]. Also, the message passing in the HGNNs is a two-step process. In this first step, information from vertices is aggregated into the hyperedges to which they belong. In the second step, the aggregated information in each hyperedge is then propagated back to the vertices. Each vertex updates its representation by aggregating information from all its hyperedges. This step effectively allows the sharing of information among all vertices that are connected both directly and indirectly via common hyperedges [2].\nThere is no explicit hypergraph structure in most cases [5]. As such, it is necessary to generate a good hypergraph structure to make the most of the high-order correlation among the data. Generally speaking, a hypergraph is created based on two different data structures when the data correlation is without graph structure and when the data correlation is with graph structure. Since most of the data that we have available are in the form of a graph or can be converted into a graph, we target this area for our work. There have been many attempts to identify important subsets of vertices within a graph, and these subsets can be identified in various forms that can either be overlapping [6] subgraphs, unlike cuts in graphs that partition the vertices of a graph into two disjoint subsets.\nIn this paper, we introduce a novel approach to HGNNs, which considers the densest overlapping subgraphs [6] in the hypergraph modeling step. To identify the top-K densest subgraphs, we consider a constrained version of the prob-lem, which we call constrained top-k-overlapping densest subgraphs (CTODS). This problem, which is shown to be NP-complete, is solved via a new algorithm, which we call densest overlapping subgraphs via agglomerative greedy enumeration (DOSAGE). Our method is not only able to identify the high-correlated subgraphs but also uses the objective function, which takes into account both the density of the subgraphs and the distance between subgraphs in a constrained form that limits the size of each subgraph, as well as the density while ensuring full coverage of the entire graph.\nThe paper is organized as follows. First, we discuss existing methods for hypergraph modeling and where they fall short. Secondly, we will discuss the top-K densest subgraphs and how, by refining them, we created our DOSAGE algorithm. In the experiment section, we discuss the result of our method in comparison with other hypergraph modeling methods and GNNs. Finally, conclusions and future works are discussed in the last section. The main contributions of this paper are summarized as follows: (i) enhance HGNN accuracy with a new hypergraph modeling method based on the densest overlapping subgraphs; (ii) design a new algorithm for finding the densest overlapping subgraphs; (iii) define a new problem: the constrained overlapping subgraphs with full coverage,"}, {"title": "II. RELATED WORK", "content": "Hypergraphs were first introduced in [3] by defining hyper-graph as a generalization of a graph in which edges, known as hyperedges, can connect any number of vertices, not just two. This allows for more complex relationships among the objects of interest than simple graphs.\nThe authors of [7] used hypergraph to distinguish the dynamics within an m-clique, where each of the m indi-viduals interacts separately in pairs with each of the other m-1 individuals, from the dynamics where the m individuals interact all together as a group. It does not provide the necessary isometric properties required for faithful hypergraph representation. This transformation does not capture the full complexity of hypergraph structures, leading to a loss of critical relational information.\nMethods that generalize graph edit distance to hypergraphs, such as those proposed in [8], face significant computational challenges. The graph edit distance problem has been found to be NP-hard to compute and APX-hard to approximate, making it impractical for large-scale hypergraph applications. Also, other distance based methods performance that have been proposed in [5], rely heavily on the accuracy of the distance measurement between vertices.\nIn [5], representation-based methods have been proposed, which construct hyperedges by using feature reconstruction techniques. This method should solve optimization problems to determine reconstruction coefficients, which is computation-ally expensive, especially when we deal with large datasets.\nSome frameworks, such as the one described in [9], con-struct hypergraphs with a fixed size for each hyperedge. This approach is unsuitable for scenarios where the input data consists of arbitrary hypergraphs with varying hyperedge sizes."}, {"title": "III. PRELIMINARIES OF HYPERGRAPHS", "content": "Before diving into what a hypergraph is and how we can generate hypergraphs, let us first discuss and define graphs and hypergraphs.\nFirst, we review the basic concepts of graphs and hyper-graphs. Then, we summarize this paper's important notations and definitions in Table I.\nLet V be a (typically finite) set of elements, nodes, or objects, which we formally call \"vertices\u201d, and \u0190' be a set of pairs of vertices. Given that, then for two vertices $u, v \\in V$, an edge is a set {u, v} \u2208 E', indicating that there is a connection between u and v. It is then common to represent E' as either a boolean adjacency matrix A where $A \\in {0,1}^{|V| \\times |V|}$, where an entry $A_{ij}$ is 1 if $v_i$ and $v_j$ are connected in E'; or as an incidence matrix H', where now also $H' \\in {0,1}^{|V| \\times |E'|}$, and an entry $H_{ij}$ is now 1 if the vertex $v_i$ is in edge e';.\nLet V denote a finite set of elements, nodes, or objects, which we formally call \"vertices\u201d. Let & be a family of subsets e of V such that $\\bigcup_{e\\in \\varepsilon} e = V$. Then we call $G_h = (V, \\varepsilon)$ a"}, {"title": "A. Graphs and Hypergraphs", "content": "First, we review the basic concepts of graphs and hyper-graphs. Then, we summarize this paper's important notations and definitions in Table I.\nLet V be a (typically finite) set of elements, nodes, or objects, which we formally call \"vertices\u201d, and \u0190' be a set of pairs of vertices. Given that, then for two vertices $u, v \\in V$, an edge is a set {u, v} \u2208 E', indicating that there is a connection between u and v. It is then common to represent E' as either a boolean adjacency matrix A where $A \\in {0,1}^{|V| \\times |V|}$, where an entry $A_{ij}$ is 1 if $v_i$ and $v_j$ are connected in E'; or as an incidence matrix H', where now also $H' \\in {0,1}^{|V| \\times |E'|}$, and an entry $H_{ij}$ is now 1 if the vertex $v_i$ is in edge e';.\nLet V denote a finite set of elements, nodes, or objects, which we formally call \"vertices\u201d. Let & be a family of subsets e of V such that $\\bigcup_{e\\in \\varepsilon} e = V$. Then we call $G_h = (V, \\varepsilon)$ a hypergraph with the vertex set V and the hyperedge set E. A hyperedge containing just two vertices is a simple graph edge. A weighted hypergraph is a hypergraph that has a positive number w(e) associated with each hyperedge e, showing the importance of the connections inside a hyperedge, called the weight of hyperedge e. Denote a weighted hypergraph by $G_h = (V, \\varepsilon, W)$ in which W denote the diagonal matrix containing the weights of hyperedges. Furthermore, we intro-duce a hypergraph with constraints on the hyperedge sizes as follows:\n$\\varsigma^{(\\alpha,\\beta)} = (\\nu,\\varepsilon)$ where each hyperedge $e \\in \\varepsilon$ satisfies the constraint $\\alpha \\le |e| \\le \\beta$, where e denotes the number of vertices in hyperedge e. Later in this paper, we will show why we need constraints on"}, {"title": "B. Top-k-Overlapping Densest Subgraphs", "content": "[6] Given a graph $G = (V, E')$, and a subset $S \\subseteq V$, we denote by G[S] the subgraph of G induced by S, formally G[S] = (S, E'(S)), where E'(S) is defined as follows:\n$E'(S) = {{u, v} : {u, v} \\in E' \\text{ and } u, v \\in S}$.\nAs we discussed in the literature review section, many approaches tried to use subgraphs as hyperedges. [3] define a hyperedge as a clique that is a fully connected subgraph. Although this definition is good for understanding what a hyperedge is, there are some problems with cliques as hyper-edges. The main problem is that the impact of small variations in the topology of the graph has a huge impact on the cliques, which means they are sensitive to small changes. For instance, in the figure 1, the number of cliques would break down in half by removing one edge from our subgraph. Because of that, we lose vital relationships among data when trying to form a hyperedge based on a clique. That is why we need a more powerful way of defining and creating hyperedges based on a subgraph.\nThe density of a subgraph based on measures other than cliques could be a good option. The Densest Subgraph prob-lem aims at finding a single densest subgraph in a graph. Gold-berg's algorithm [11] was the first one to propose a method for finding the densest subgraph, and other methods have been using this method as a groundwork for their algorithm. However, in many applications like hypergraph modeling, it is of interest finding a collection of dense subgraphs of a given graph. Also, dense subgraphs are related to non-disjoint communities in many real-world cases [6]. One example could be hubs, which are vertices that are part of several communities [12]. Hence, we need a method that, instead of giving the densest subgraph, finds a collection of subgraphs having maximum density in a given graph. We define the density of subgraphs in the graph as follows:"}, {"title": null, "content": "$\\text{dens}(G[S]) = \\frac{|E'(S)|}{|S|}$"}, {"title": null, "content": "Thus, the density is the ratio of the total number of edges to the total number of vertices in the subgraph.\nGiven the fact that some hyperedges might share some vertices too, the subgraphs we are trying to find to form our hyperedges must share some vertices too, and hence, we should do that by letting our subgraphs overlap with each other [6]. It is important to control the amount of overlapping between subgraphs since allowing overlaps leads to a solution that may contain k copies of the same subgraph. To ensure distinctness between the subgraphs, we define a distance function [6] between two subgraphs as:\n$d(G[U], G[Z]) = 2 - \\begin{cases} \\frac{|U \\cap Z|^2}{|U||Z|} & \\text{if } U \\ne Z, \\\\ 0 & \\text{else}. \\end{cases}$"}, {"title": null, "content": "where G[U] and G[Z] denote the subgraphs induce by the vertex subsets U and Z, respectively. Also, $|U \\cap Z|^2$ is the number of vertices in the intersection of subsets U and Z. It penalizes subgraphs with a high degree of overlap, which helps ensure that the selected subgraphs are sufficiently distinct from each other. The term $\\frac{|U \\cap Z|^2}{|U||Z|}$ makes sure that the distance is minimal when the overlap is maximal and vice versa, and it is encouraging subgraphs to be more distinct. When subgraphs share a large number of vertices, the overlap term $\\frac{|U \\cap Z|^2}{|U||Z|}$ becomes significant, hence reducing the distance and contribution of such subgraphs to the objective function. The distance is bounded between 0 and 2, which makes the distance measure consistent.\nOur Top-K overlapping subgraphs algorithm looks for a collection of K subgraphs that maximize an objective function that takes into account both the density of the subgraphs and the distance between the subgraphs of the solution, thus allowing overlap between the subgraphs, which depends on a parameter, \u03bb.\n$r(W) = \\text{dens}(W) + \\lambda \\sum_{i=1}^{k-1} \\sum_{j=i+1}^{k} d(G[W_i], G[W_j])$"}, {"title": null, "content": "where $W = {G[W_1], G[W_2], ..., G[W_k]}$ is the set of top-k subgraphs, k is less than the number of vertices in the graph, dens(W) is the sum of the densities of the subgraphs in W, and $ \\lambda > 0$ is a parameter that controls the trade-off between density and diversity of the subgraphs. When \u03bb is small, then the density plays a dominant role in the objective function, so the output subgraphs can share a significant part of vertices. On the other hand, if \u03bb is large, then the subgraphs share few or no vertices, so that the subgraphs may be disjoint [6].\nThis feature makes the top-K overlapping subgraphs a great approach for our method. However, we discuss in the methodology section that finding the overlapping densest subgraphs problem is NP-complete. As such, we provide an efficient yet sub-optimal algorithm that reduces its complexity"}, {"title": "IV. PROBLEM DEFINITION", "content": "We address the problem of hyperedge generation in hyper-graphs by utilizing the concept of top-K densest subgraphs [6]. The goal is to create hyperedges that capture indirect relationships in the data, which is not possible with simple pairwise connections in traditional graph structures. Also, we will show in the next section that finding the densest overlapping subgraphs is np-complete, and because of that, we define constrained overlapping subgraphs as a new problem and propose DOSAGE algorithm for finding them.\nGiven a simple graph G = (V, E'), where V is the set of vertices and E' is the set of edges, we aim to identify and utilize densest overlapping subgraphs to form hyperedges in a hypergraph $G_h^{(\\alpha,\\beta)} = (\\nu,\\varepsilon)$, where each hyperedge $e \\in \\varepsilon$ satisfies the constraint $\\alpha \\le |e| \\le \\beta$.\nThe problem can be formulated as follows:\nIdentify the top-k subsets $S_1, S_2, ..., S_k \\subseteq V$ such that the density of each subset is maximized while also ensuring that the size of each subgraph $S_i$ is between \u03b1 and \u03b2. More formally, this can be expressed as follows:\n$S_i = \\text{arg } \\underset{\\substack{S \\subseteq V \\\\ \\alpha \\le |S| \\le \\beta}}{\\text{max }} \\text{dens} (G[S]) = \\text{arg } \\underset{\\substack{S \\subseteq V \\\\ \\alpha \\le |S| \\le \\beta}}{\\text{max }} \\frac{|E'(S)|}{|S|}$ for i = 1, 2, ..., k.\nMoreover, the objective function also considers the distance between these subgraphs, ensuring that the overlap between the subgraphs is controlled by a parameter \u03bb. This means that the selected subgraphs $S_1, S_2,..., S_k$ should not only be dense but also satisfy the distance constraints. Additionally, if a vertex belongs to a subgraph, it should also belong to the corresponding hyperedge. This ensures that the vertices included in the densest subgraphs are accurately represented in the hypergraph, maintaining the integrity of the high-order correlations:\n$\\forall v \\in S_i \\Rightarrow v \\in e_i $ for all $v \\in V, i = 1,2,...,k$."}, {"title": "V. METHODOLOGY", "content": "Our DOSAGE algorithm creates hyperedges based on the overlapping densest subgraphs in a graph based on three parameters that are K, which is the total number of sub-graphs and hence a number of hyperedges, the minimum and maximum size that is the minimum and maximum number of vertices in one hyperedge. Full coverage of the graph should also be taken into account since we want all the vertices to be represented by the hypergraph and also to make sure that we not only obtain the densest regions but also fully cover the whole graph so that we do not miss any important piece of information during the construction process."}, {"title": "A. Complexity of the DOSAGE Algorithm", "content": "In this part, we prove the NP-completeness of the con-strained Top-k-Overlapping Densest Subgraphs problem by demonstrating a polynomial-time bidirectional reduction to and from known NP-complete problems. Specifically, we show that the problem can be reduced to and from the k-Clique or 3-Clique problems.\nLemma 1. Given an instance G = (V, E') of the 3-Clique Par-tition problem, we can construct an instance of the constrained Top-k-Overlapping Densest Subgraphs problem such that if G can be partitioned into three cliques, we can compute a set $W = {G[S_1], G[S_2], G[S_3]}$ where $r(W) \\ge 3 + \\frac{18|V|^3}{2^{|V|-3}}$.\nProof. We take the input graph G = (V,E') from the 3-Clique Partition problem and use it as the input graph for the constrained Top-k-Overlapping Densest Subgraphs problem. If G can be partitioned into three cliques $V_1, V_2$, and $V_3$, then the corresponding subgraphs $G[V_1], G[V_2]$, and $G[V_3]$ are used to construct the solution $W = {G[S_1], G[S_2], G[S_3]}$. The value r(W) is calculated based on the densities of these subgraphs and the distances between them. The result is that $r(W) > 3 + \\frac{18|V|^3}{2^{|V|-3}}$.\nLemma 2. Given a solution $W = {G[S_1], G[S_2], G[S_3]}$ for the constrained Top-k-Overlapping Densest Subgraphs problem with $r(W) > \\frac{18|V|^3}{2^{|V|-3}}$, we can find a partition of G = (V, E') into three cliques.\nProof. We take the solution W from the constrained Top-k-Overlapping Densest Subgraphs problem and use the sub-graphs $G[S_1], G[S_2]$, and $G[S_3]$ to construct three cliques $V_1, V_2$, and $V_3$ in the original graph G = (V, E'). These cliques $V_1, V_2$, and $V_3$ must form a valid partition of V.\nTheorem 1. The constrained Top-k-Overlapping Densest Sub-graphs problem is NP-complete.\nProof. We first formally define the decision problems, show-ing that the problem is in NP, and then provide polynomial-time reductions in both directions.\nConstrained Top-k-Overlapping Densest Subgraphs (CTODS):\nGiven: A graph $G_h = (V, E)$, positive integers k, \u03b1, \u03b2, and a real number r.\nQuestion: Do there exist k subgraphs $S_1, S_2,..., S_k \\subseteq V$ such that: (a)\n1) \u03b1 \u2264 i \u2264 \u03b2 for all i = 1, ..., k,\n2) The density of each $S_i$ is at least r,\n3) The subgraphs satisfy the overlap constraint as defined by the distance function $d(G[U], G[Z])$.\n3-Clique:\nGiven: A graph G = (V, E') and a positive integer k.\nQuestion: Does G contain a clique of size 3?\n2. CTODS is in NP:\nTo show CTODS is in NP, we prove that a solution can be verified in polynomial time. Given a set of k subgraphs, we can: (a)"}, {"title": null, "content": "1) Verify the size constraints in O(k) time,\n2) Calculate the density of each subgraph in O(|V| + |E|) time,\n3) Verify the overlap constraints in O(k\u00b2 \u00b7 |V|) time.\nThus, the verification can be done in polynomial time, so CTODS is in NP.\n3. Reduction from CTODS to 3-Clique:\nWe construct a graph $G_p = (V_P, E_P)$ as follows:\n\u2022 Each vertex v \u2208 $V_P$ represents a potential subgraph $S_i$ in $G_h$ that satisfies the size and density constraints.\n\u2022 Add an edge between vertices u, v \u2208 $V_P$ if the corre-sponding subgraphs in $G_h$ can form a valid pair (i.e., they satisfy the overlap constraints).\nThis construction can be done in polynomial time:\n\u2022 We can enumerate all subgraphs of size \u03b1 to \u03b2 in $O(|V|^\u03b2)$ time.\n\u2022 For each subgraph, we can check its density in O(|V| + E) time.\n\u2022 We can check the overlap constraints for each pair of subgraphs in $O(|V|^2)$ time.\nNow, finding k overlapping dense subgraphs in $G_h$ is equivalent to finding a k-clique in $G_p$. In particular, a 3-clique in $G_p$ corresponds to a solution for CTODS with k = 3.\n4. Reduction from 3-Clique to CTODS:\nGiven an instance of 3-Clique on graph G = (V, E'), we construct an instance of CTODS as follows:\n\u2022 Use the same graph G,\n\u2022 Set k = 3, \u03b1 = 3, \u03b2 = 3, and r = 1,\n\u2022 Define the distance function d(G[U], G[Z]) to return 0 if U = Z and 2 otherwise.\nThis construction ensures that:\n\u2022 We are looking for exactly three subgraphs (k = 3),\n\u2022 Each subgraph must have exactly 3 vertices (\u03b1 = \u03b2 = 3),\n\u2022 Each subgraph must be fully connected (r = 1 requires maximum density),\n\u2022 The subgraphs must be identical (distance function).\nA solution to this CTODS instance exists if and only if G contains a 3-clique.\n5. Additional Cases:\nWhile the general problem is NP-complete, there are cases that can be solvable in polynomial time:\n\u2022 Case 1: when \u03b1 = \u03b2 = 1, we simply select individual vertices; this step requires O(|V|) time.\n\u2022 When the hop size constraint is 1, we only consider direct neighbors; this step requires O(|V| + |E|) time.\n\u2022 For specific density values that correspond to well-known structures (e.g., triangles in simple graphs), we might have polynomial-time algorithms.\n\u2022 Case 2: when \u03b1 = \u03b2 = 2, the problem reduces to finding dense edges. This could lead to a polynomial-time solvable problem in bipartite graphs, as many graph problems become tractable on bipartite graphs.\n\u2022 Case 3: when \u03b1 and especially \u03b2 are close to or equal to |V|, the problem may become polynomial-time solv-able. In this case, we are essentially looking for dense"}, {"title": null, "content": "subgraphs that include most or all vertices of the original graph. This significantly reduces the search space and may allow for efficient algorithms.\nThese cases highlight that the hardness of the problem can vary significantly depending on specific constraints and graph structure. For instance, in bipartite graphs or when the subgraph size constraints approach the size of the entire graph, the problem can become polynomially-solvable.\nHowever, it is important to note that these special cases do not contradict the NP-completeness of the general problem. The general case, where \u03b1 and \u03b2 allow for a wide range of subgraph sizes and the graph structure is unrestricted, remains NP-complete.\nBy demonstrating that CTODS is in NP, providing polynomial-time reductions in both directions and considering both the trivial and these additional cases, we conclude that the general Constrained Top-k-Overlapping Densest Subgraphs problem is NP-complete while acknowledging that specific instances or constraints may lead to polynomial-time solvable variants."}, {"title": "B. Algorithm", "content": "As we understood the reason for setting constraints to the CTODS problem, we now present the pseudo-code of the DOSAGE algorithm. First, we discuss the DOSAGE algo-rithm, followed by the supporting functions as needed, and the hypegraph construction algorithm. Since we understood the reason for setting constraints to our algorithm, for a better understanding of the DOSAGE algorithm, we present the pseudo-code of this algorithm first, and then we will walk through each step of our algorithm. First, we start with our DOSAGE algorithm, which is the most critical aspect of our code. Since we have already talked about the density, distance, and objective function in the previous sections, we provided the code for them in the second algorithm as supporting functions.\nThe DensestSubgraph function finds the subgraph that has the maximum density based on Goldberg's algorithm [13], constrained by minimum and maximum subgraph sizes (\u03b1, \u03b2) and the diameter, \u03b4. The function repeatedly checks the density and diameter of the current subgraph. If size and diameter conditions are met, then the density of that subgraph is calculated.\nThe output of the function is the densest subgraph found in our graph. The IsDistinct function helps the DensestDistinctSubgraph function to check whether a given subgraph G[S] is distinct from all the subgraphs already stored in W. The DensestDistinctSubgraph considers all possible subgraphs in the range of \u03b1 to \u03b2 and checks if the diameter condition is met and is distinct from those already found. Finally, it calculates the objective function for that subgraph, and if the value is higher than the maximum, the subgraph is stored as the best."}, {"title": "VI. EXPERIMENTS", "content": "In this section, we compare the performance of our hy-pergraph and other methods on node classification tasks. We experimented with DOSAGE on two datasets, the Cora and Cooking-200 datasets [16]."}, {"title": "A. Results and Discussion", "content": "The experimental results for the Cora dataset are presented in Table I, while Table II shows the results for the Cooking-200 dataset. We compare the accuracy and F1-score of different models, including Graph Convolutional Network (GCN) [17], Graph Attention Network (GAT) [18], Graph Sample and Aggregation (GraphSAGE) [19], Graph Isomorphism Network (GIN) [20], Graph Convolution (GraphConv) [21], Hypergraph Convolutional Network (HyperGCN) [22], Hypergraph Atten-tion Network (Hyper-Atten) [23], Hypergraph Neural Network (HGNN) [2], Hypergraph Neural Network+ (HGNN+) [2], and our proposed DOSAGE method.\nTable I shows that the DOSAGE algorithm signifi-cantly outperforms traditional GNN models, including GCN, GAT, and GraphSAGE, as well as hypergraph-based models, namely HyperGCN, HGNN, and Hyper-Atten. The proposed DOSAGE model achieves the highest accuracy of 71.03% and an F1-score of 70.67%. These results demonstrate that DOSAGE, by effectively generating hyperedges using the densest overlapping subgraphs, captures complex relationships"}, {"title": null, "content": "relations in the data, providing a more expressive and infor-mative representation than traditional graph structures [14]. This is particularly useful in applications such as community detection in social networks and motif discovery in biological networks, where overlapping dense regions are of interest [15]."}, {"title": "VII. FUTURE WORK", "content": "One of the key areas for future development is optimizing the computational efficiency of the DOSAGE algorithm. Currently, the process of identifying and generating the dens-est overlapping subgraphs can be computationally expensive, particularly for large-scale datasets with high node and edge counts. Notably, the DOSAGE model took approximately three minutes longer to execute than HGNN+. While this increase in time is not substantial, it highlights the need for further optimization.\nAnother promising direction for future work is developing a dynamic mechanism for hyperedge construction. In the current implementation of DOSAGE, the hyperedges formed from subgraphs are static, meaning they do not change in the HGNN training phase once they are created. As such, we"}, {"title": "A. Conclusion", "content": "In this paper, we introduced the DOSAGE algorithm, a novel approach to hypergraph construction that leverages dens-est overlapping subgraphs to improve node classification tasks. Unlike traditional graph neural networks (GNNs) and existing hypergraph neural networks (HGNNs), DOSAGE focuses on capturing complex relationships within data by constructing hyperedges that reflect more intricate and overlapping struc-tures.\nThe key contributions of our work include the development of the DOSAGE algorithm, which provides a robust method for generating hyperedges that enhance the expressiveness of hypergraph models. We demonstrated that this approach not only addresses the limitations of existing hyperedge construc-tion techniques but also significantly improves classification accuracy across different datasets.\nThe numerical results presented in this paper underscore the advantages of the DOSAGE algorithm. On the Cora dataset, DOSAGE achieved the highest accuracy of 71.03% and an F1-score of 70.67%, outperforming several baseline models, including GCN, GAT, GraphSAGE, and other hypergraph-based methods like HyperGCN and Hyper-Atten. Similarly, in the Cooking-200 dataset, DOSAGE continued to show superior performance with an accuracy of 45.72% and an F1-score of 40.19%, demonstrating its effectiveness even in more challenging, sparsely connected datasets.\nOverall, DOSAGE offers a powerful tool for hypergraph-based learning, providing a more nuanced understanding of data relationships and leading to improved outcomes in node classification tasks. The contributions and results presented in this paper pave the way for future research and applications in hypergraph neural networks, with the potential to extend these methods to even more complex and large-scale problems."}]}