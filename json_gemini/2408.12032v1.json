{"title": "A Constraint Programming Approach to Fair High School Course Scheduling", "authors": ["Mitsuka Kiyohara", "Masakazu Ishihata"], "abstract": "Issues of inequity in U.S. high schools' course scheduling did not previously exist. However, in recent years, with the increase in student population and course variety, students perceive that the course scheduling method is unfair. Current integer programming (IP) methods for the high school scheduling problem (HSSP) fall short of addressing these fairness concerns. The purpose of this research is to develop a solution methodology that generates feasible and fair course schedules using student preferences. Utilizing principles of fairness, which have been well studied in market design, we define the fair high school scheduling problem (FHSSP), a novel extension to the HSSP, and devise a corresponding algorithm based on integer programming to solve the FHSSP. We test our approach on a real course request dataset from a high school in California, USA. Results show that our algorithm can generate schedules that are both feasible and fair. In this paper, we demonstrate that our IP algorithm not only solves the HSSP and FHSSP in the United States but has the potential to be applied to various real-world scheduling problems. Additionally, we show the feasibility of integrating human emotions into mathematical modeling.", "sections": [{"title": "Introduction", "content": "In today's landscape of high school education in the United States, schools face challenges in scheduling due to the increase in student population and the wide variety of course offerings. More than a decade ago, there were a total of 16,040 public and private high schools with 16 million students. Today, this number has increased with the addition of 912 schools and 1 million students [1]. As a result, ensuring efficient scheduling in high schools has become increasingly difficult to maintain. At the same time, the recog-nition of existing inequity in course schedules among students has come forward.\nThe specifications of high school scheduling vary significantly across different countries due to diverse cultural and educational settings, making it difficult to develop a generalized solution. For instance, the United States adopts a decentralized education system, where each state has its own set of educational standards and curriculum guidelines. This decentral-ization makes the problem complex, as it leads to a wide range of course offerings, course requests, and constraints from both students and the school.\nCourse schedules for high schools are commonly generated using a constraint programming (CP) solver. However, solvers in current use do not consider fair-ness as a constraint; therefore, this method is effi-cient but lack fairness. Another approach to solve the HSSP is to use an existing solver and then manu-ally modify the schedule to ensure fairness. However, this method is inefficient and is prone to human er-ror. Hence, we conclude that an efficient and fair CP solver is needed.\nA rich literature exists in the field of market design regarding matching with fairness constraints, such as the daycare matching problem, course allocation prob-"}, {"title": "Related Work", "content": "The formulation of the high school scheduling problem using IP has been explored in the literature, notably by [2] and [3]. These studies, however, do not include fairness constraints, a crucial aspect of our research. In contrast, the use of IP methods for course schedul-ing in universities, along with real-life data implemen-tation, has been addressed by [4] and [5], although their focus differs from our high school-centered ap-proach.\nIn the field of market design, fairness, particularly stability in allocation, has been extensively studied with a focus on various matching markets. Algorithms aiming to compute stable matchings based on agents' preferences have been developed, as seen in the work of [6], [7], and [8]. However, these have not been di-"}, {"title": "High School Scheduling Problem (HSSP)", "content": "In this section, we formulate the high school schedul-ing problem (HSSP) as a constraint satisfaction prob-lem (CSP) to assign students appropriately to each course. We first introduce the input and decision variables of this problem and then define a feasible schedule using the introduced variables."}, {"title": "Notation", "content": "There are a set of courses C, a set of instructors I, and a set of students S. A lecture is an ordered pair of a course $c \\in C$ and instructor $i \\in I$. Note that students are assigned to lectures, not directly to courses. For instance, when a student s is enrolled in lecture 1 = (c, i), we say s takes course c taught by instructor i.\nLet W, P, and R be a set of weekdays (Monday, , Friday), school periods per day (1,...,|P|), and rooms, respectively. A time slot is an ordered pair consisting of a weekday $d\\in W$ and school period $p\\in P$. A unit is a tuple consisting of a time slot $t\\in T \\subseteq W \\times P$, room $r \\in R$, and lecture l, where l is scheduled inratt.\nEach instructor i, students, and room r have as-sociated sets of eligible courses, denoted as $E_i$, $E_s$, and $E_r$, respectively. $E_i$ represents the set of courses that instructor i is certified to teach, $E_s$ represents the set of courses that student s is qualified to take, and $E_r$ represents the set of courses that can be hosted in room r, considering the room's facilities.\nFor any $x \\in \\{i,s,r\\}$, $N_x$ (resp. $N_x^+$) is the mini-mum (resp. maximum) number of units i is required to teach per week, the number of courses student s can enroll this semester, and the number of students who can attend room r at any given unit, respectively. We define lecture frequency for a given lecture $l = (c, i)$ as the total number of units u = (c, i, r, t) scheduled for 1, and $N_c$ indicates the lecture frequency for a course c. All the aforementioned variables are inputs to the HSSP.\nWe then introduce three decision variables L, A, and U to construct a solution to this problem (i.e., a"}, {"title": "Feasible Schedules", "content": "To define the feasibility of schedules, we establish three constraints. The goal of the HSSP is to find fea-sible schedule S satisfying the following constraints.\nTime slot conflicts of instructors, students, and rooms Any instructor i, student s, and room r can-not be assigned two or more units in the same time slot. We introduce $U_s$, $U_i$, and $U_r$ as follows:\n1. $U_s \\equiv \\{u \\in U | \\exists l \\in L, (l, s) \\in A \\land l \\in u\\}$: all units student s partakes in\n2. $U_i \\equiv \\{u \\in U | \\exists l \\in L, i \\in l \\land l \\in u\\}$: all units instructor i teaches\n3. $U_r \\equiv \\{u \\in U | r \\in u\\}$: all units offered in room r\nThen, $U_x$ ($x \\in \\{s,i,r\\}$), which is the set of units assigned to x, must satisfy the following equation for any time slot t:\n$\\forall\\{u, u'\\} \\subseteq U_x, \\neg(t \\in u \\land t \\in u')$\nEligibility of instructors, students, and rooms\nThe appropriate instructors, students, and rooms must be assigned for all courses C. For any instructor i, student s, and room r, $C_x$ ($x \\in \\{s, i, r\\}$) is defined as follows:\n1. $C_s \\subseteq \\{c \\in C | \\exists l \\in L, (l,s) \\in A \\land c \\in l\\}$: all courses student s takes\n2. $C_i \\subseteq \\{c \\in C | (c, i) \\in L\\}$: all courses instructor i teaches\n3. $C_r \\subseteq \\{c \\in C | \\exists u \\in U_r,\\exists l \\in L,l \\in u \\land c \\in l\\}$: all courses offered in room r\nThen, $C_r$, which is the set of courses assigned to x, must satisfy the following constraint:\n$C_x \\subseteq E_x$\nNumerical Constraints Each instructor i, student s, and room r is given the appropriate range of the number of units i teaches per week, the number of courses s takes this semester, and the number of stu-dents who may attend a unit at r, respectively. Let $U_{i,d} \\equiv \\{u \\in U_i | \\exists t \\in T,d \\in t\\}$ be the set of units on d that instructor i teaches and $S_u \\equiv \\{s \\in S |$"}, {"title": "Fair High School Scheduling Problem (FHSSP)", "content": "In this section, we formulate the fair high school schedul-ing problem (FHSSP), an extension to the HSSP which contains fairness constraints. We define two key quan-tities, the degree of interest and priority for each student-course pair, and subsequently formulate the fairness constraint using the introduced quantities.\nDegree of interest Let $d_{s,c}$ be the degree of inter-est of students for course c. Here, we assume $d_{s,c}$ is normalized. Namely, for any student $s \\in S$:\n$0 \\leq d_{s,c} \\leq 1 \\land \\sum_{c \\in C} d_{s,c} = 1$\nIn other words, \\{$d_{s,c}$\\} represents the student prefer-ence.\nPriority order For any students and course c, let $p_{s,c}$ be the priority for s to take c, which is a pre-determined value based on student s's past academic achievement and preference. If c has one or more pre-requisites, $p_{s,c}$ is determined by s's average grade for those prerequisites. The higher the grade s has, the higher priority s receives for c. If c does not require a prerequisite, then we resort to student s's degree of interest. The higher the degree of interests has for c, the higher priority s receives for c. Note that a student's priority order depends on the student's eli-gibility for a course (i.e., $e_{s,c} \\rightarrow p_{s,c}$). We calculate $p_{s,c}$ as follows:\n$p_{s,c} = \\begin{cases}\nC_p & \\text{if c has prerequisite(s) } C_p\\\\\nd_{s,c} & \\text{if c has no prerequisite}\\\\\n\\end{cases}$\nwhere $C_p$ represents the set of prerequisite courses for c and $g_{s,c'}$ as the grade of s for c'."}, {"title": "Fair Schedules", "content": "The challenge of this problem is the potential for stu-dent envy, which can be formally defined by a list of constraints. We propose this concept in the definition below.\nDefinition 1. Consider two students s and s' and their respective course assignments $C_s$ and $C_{s'}$. Stu-dent s is said to experience envy towards s' if the fol-lowing four conditions are true:\n(i) $c \\in C_{s'}\\backslash C_s$, (ii) $p_{s,c} > p_{s',c}$, (iii) $d_{s,c} > d_{s',c}$, and (iv) $|C_s| < |C_{s'}|$.\nDefinition 1 describes two students s and s' and a course c. Condition (i) states that c is assigned to s' but not to s. Condition (ii) states that s's priority for c is higher than that of s'. Similarly, condition (iii) states that s's degree of interest for c is greater than that of s'. Lastly, condition (iv) states that the number of courses assigned to s is fewer than those assigned to s'.\nRecall that for the HSSP to return a feasible out-come, Constraints (1) to (6) must hold. If the HSSP returns a feasible outcome, the FHSSP evaluates whether an optimal outcome that upholds fairness under the same problem setting exists. In other words, in addi-tion to Constraints (1) to (6), the following fairness constraints must also hold:\n$(c \\in C \\backslash C_s) \\land (p_{s,c} > p_{s',c}) \\land (d_{s,c} > d_{s',c}) \\land (|C_s| < |C_{s'}|)$"}, {"title": "Proposed method", "content": "In this section, we present an algorithm based on inte-ger programming (IP) to solve the HSSP and FHSSP."}, {"title": "Binary variables", "content": "First, we introduce three types of variables that are encoded into binary variables, starting with the de-cision variables (L, A, U). For every course \u0441\u2208 C and instructor i \u2208 I, create a variable $l_{c,i}$ indicating whether instructor i is teaching course c as follows:\n$l_{c,i} = \\begin{cases}\n1 & \\text{i is teaching c}\\\\\n0 & \\text{otherwise}\\\\\n\\end{cases}$\nFor every students \u2208 S and lecture 1 = (c,i) \u2208 L, create a variable $a_{c,i,s}$ indicating whether student s is enrolled to lecture (c, i).\n$a_{c,i,s} = \\begin{cases}\n1 & \\text{s is enrolled in (c, i)}\\\\\n0 & \\text{otherwise}\\\\\n\\end{cases}$\nFor every lecture (c, i) \u2208 L, room r\u2208 R, and time slot t \u2208 T, create a variable $u_{c,i,r,t}$ indicating whether lecture l is being offered in room r on time slot t.\n$U_{c,i,r,t} = \\begin{cases}\n1 & \\text{(c, i) is offered in r at time slot t}\\\\\n0 & \\text{otherwise}\\\\\n\\end{cases}$\nWe also introduce auxiliary binary variables, which are later used to encode the constraints in this prob-lem. For each student s \u2208 S, instructor i \u2208 I, and room r \u2208 R, create a variable $C_{x,u}$ (where x \u2208 \\{s,i,r\\}) indicating the participation of x in course c. The vari-able is defined as:\n$C_{x,c} = \\begin{cases}\n1 & \\text{x is involved in c}\\\\\n0 & \\text{otherwise}\\\\\n\\end{cases}$\nFor each student s \u2208 S, instructor i \u2208 I, and room r\u2208 R, create a variable $u_{x,u}$ (where x \u2208 \\{s,i,r\\}) indicating the assignment of x in unit u. The variable is defined as:\n$U_{x,u} = \\begin{cases}\n1 & \\text{x partakes in u}\\\\\n0 & \\text{otherwise}\\\\\n\\end{cases}$\nFor each student s\u2208 S, instructor i \u2208 I, and room r\u2208 R, create a variable $e_{x,c}$ (where x \u2208 \\{s,i,r\\}) indicating the eligibility related to course c\u2208 C:\n$e_{x,c} = \\begin{cases}\n1 & \\text{x is eligible to take c}\\\\\n0 & \\text{otherwise}\\\\\n\\end{cases}$\nFor every student s \u2208 S, create a variable $a_{s,s'}$, indicat-ing that student s feels envy towards another student s'.\n$a_{s,s'} = \\begin{cases}\n1 & \\text{s experiences envy towards s'}\\\\\n0 & \\text{otherwise}\\\\\n\\end{cases}$"}, {"title": "Constraints", "content": "Given the binary variables encoded in the previous section, we first show the encoding of the original problem constraints. For Constraint (1), we can cap-ture the requirement by the following:\n$\\sum_{UEU} \\sum_{teu} 4_{x,t} \\leq 1 \\forall x \\in \\{s,i,r\\}$\nConstraint (2) corresponds to the set of eligible courses for each respective student, instructor, and room. The following must hold for all:\n$\\sum_{CEC \\atop c\\in E_x}C_{x,c} \\leq e_{x,c} \\forall x \\in \\{s,i,r\\}$\nRecall Constraint (3), (4) and (5), which represent the range on the number of units an instructor is allowed to teach per day, the number of courses a student can enroll in, and the number of students who may attend a unit for every room, respectively. For all $u \\in U$ and $c \\in C$,\n$N_i^- \\leq \\sum_{iEI} \\frac{W_{iu}}{iEI} \\leq N_i^+$\n$N^- \\leq \\sum_{CEC} C_{s,c} \\leq N^+$\n$N^- \\leq \\sum_{SES} U_{s,u} \\leq N^+$\nConstraint (6) represents the predefined frequency Nc lecture (c, i) must meet per week. Then, for all (c, i) \u2208 L,\n$\\sum_{\\forall r \\in R \\forall t \\in T} U_{c,i,r,t} = N_c$\nRecall that a student s experiences envy towards another student s' if (i) c is assigned to s' but not to s; (ii) the priority for s to take c is higher than s'; (iii) s's degree of interest to take c is greater than s'; and (iv) the number of courses assigned to s is fewer than s' (see Definition 1). For all students s, s' \u2208 S where s\u2260s', there exists a course c\u2208 C such that:\n$C_{s',c}- (1 - C_{s,c}) \\geq a_{s,s'}$\n$p_{s,c} > p_{s',c}$\n$d_{s,c} > d_{s',c}$\n$a_{s,s'} \\leq \\sum_{c \\in C} C_{s',c} < \\sum_{c \\in C} C_{s,c}$\nNote that each condition of the fairness constraint is written separately, whereas, in Section 6, we test each condition of the fairness to ensure its feasibility.\nWe encode new constraints outside of the origi-nal problem to adjust to the introduction of binary variables. To ensure that the IP algorithm does not create conflicting schedules, we define the following constraints for feasibility.\nFirst, we ensure that a single assignment is made per course per student (i.e., a student is enrolled in one instructor's lecture section).\n$\\sum_{CEE_i}a_{c,i,s} \\leq 1 \\forall i \\in I,\\forall s \\in S$"}, {"title": "Constraints", "content": "Next, all units u \u2208 U should have a corresponding instructor i and room r assigned to this unit. Ad-ditionally, no student should be assigned to a unit that does not exist. If a student is assigned to a unit for course c and instructor i, then all corresponding assignments and enrollment values for lecture (c, i) should reflect that as well.\n$U_{c,i,r,t} \\geq U_{i,u}$\n$U_{c,i,r,t} = U_{r,u}$\n$(1 - U_{c,i,r,t}) \\leq (1 - U_{s,u})$\n$U_{s,u} \\leq a_{c,i,s} \\forall s \\in S$\n$U_{s,u} \\leq C_{s,c} \\forall s \\in S$\nWe also ensure that every lecture (c, i) \u2208 Lmeets once per day on separate days. In other words, we make sure that a lecture does not meet only on one day of the week. Additionally, we ensure the number of lectures taught in a period does not exceed the total number of available rooms to encourage lectures to occur concurrently.\n$\\sum_{rERT} \\sum_{ETd} U_{c,i,r,t} \\leq 1 \\forall d \\in D$\n$\\sum_{UEU} U_{c,i,r,t} \\leq |R| \\forall t \\in T$\nFeasibility is ensured by making sure each unit has a corresponding assignment and lecture and the relationship between all three decision variables is es-tablished.\n$U_{c,i,r,t} < l_{c,i}$\n$a_{c,i,s} < l_{c,i}$\nFor all lectures (c, i) \u2208 L, every assignment $a_{c,i,s} \\in A$ should have at least more than one unit.\n$a_{c,i,s} \\rightarrow \\sum_{\\forall r \\in R \\forall t \\in T} U_{c,i,r,t} \\geq 1 \\forall s \\in S$\nFinally, every student s\u2208 S should be enrolled in a course if and only if an assignment and lecture exist.\n$C_{s,c} \\geq a_{c,i,s}$\n$C_{s,c} \\geq l_{c,i}$\n$a_{c,i,s} + l_{c,i} - 1 < C_{s,c}$\nWe have two objective functions, each used sepa-rately for the two problem formulations we introduced in section 3. For the HSSP, we define the objective as the maximization of assignments:\n$max \\sum_{\u03b1 \\in A} A_{c,i,s}$\nRecall the objective of the FHSSP is to minimize the number of assignments that cause student envy. We can describe the objective function below:\n$min \\sum_{s,s' \\in S} a_{s,s'} \\text{ if s}\u2260 s'$"}, {"title": "Experiment", "content": "In this section, we evaluated the performance of our algorithm by running experiments on a real-life data set provided by a private high school located in the San Francisco Bay Area, California. The data set contained course requests by a total of 295 students over 121 courses.\nAll experiments were conducted on a laptop with an Apple M2-Max processor and 32 GB of memory. Our IP model was implemented using Google OR-Tools' CP-SAT solver 1 and was written in Python.\nDue to the large problem size, we tested the algo-rithm on six roughly equal distinct subsets of students to test whether an optimal solution exists. We sum-marized the basic information of each problem setting we tested in Table 1. Because we were only provided data on the student's course requests, we generated synthetic data for the instructors and rooms. We as-sumed that i) each course has its own room, and ii) each instructor is eligible to teach a fixed number of courses. We also assume that iii) there are 6 periods per school day; iv) each course must meet more than once on separate days of the week; and v) students may take at most 6 courses.\nOther input values used in the algorithm were pre-calculated or randomized due to the lack of informa-tion. The course priority order was generated by ran-domly assigning the grade for its prerequisite to each student eligible to take that course. The student's preference order was generated by utilizing the stu-dent's first and second-choice requests from the data set and assigning degree of interest values of 1 and 0.5, respectively. The remaining courses not requested by the student were randomly assigned degree of inter-est values using a normal distribution within a range between 0 to 0.5. The maximum number of units an instructor teaches per week is the course frequency per week x number of courses that the instructor is eligible to teach.\nFor each subset of students, the experiments were organized as the following below:"}, {"title": "Experimental Results", "content": "Our experiments showed that, across all problem set-tings, our algorithm consistently produced a feasible"}, {"title": "Conclusion", "content": "In conclusion, we successfully developed an integer programming (IP) model that incorporates fairness constraints (such as envy-freeness) into the course schedul-ing method of American high schools. The intro-duction of fairness constraints into the high school scheduling problem (HSSP) has shown that this is-sue can be resolved. By incorporating the concept of fairness from market design into traditional combina-torial optimization problems, the fairness of the high school course scheduling process has been improved. However, as the problem size increases, such as the number of students and courses, it becomes more dif-ficult to obtain an optimal solution. Therefore, we look forward to improvements to shorten CPU time and reduce the number of variables in our model. We believe that this research can be applied not only in educational settings but also in other fields. This re-search shows that it is possible to improve problems caused by luck, disparity, and lack of transparency. Finally, we stress the necessity to incorporate human emotions (such as envy and unfairness) into mathe-matical modeling based on real-life social problems and achieve fair matching in the future."}]}