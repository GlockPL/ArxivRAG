{"title": "Proceedings of the XCSP3 Competition 2024", "authors": ["Gilles Audemard", "Christophe Lecoutre", "Emmanuel Lonca"], "abstract": "This document represents the proceedings of the XCSP3 Competition 2024, following those published in 2022 [1] and 2023 [2].", "sections": [{"title": "1 About the Selection of Problems in 2024", "content": "Remember that the complete description, Version 3.2, of the format (XCSP\u00b3) used to represent combinatorial constrained problems can be found in [5]. As usual for XCSP3 competitions, we have limited XCSP\u00b3 to its kernel, called XCSP3-core [6]. This means that the scope of the XCSP3 competition is restricted to:\n\u2022 integer variables,\n\u2022 CSP (Constraint Satisfaction Problem) and COP (Constraint Optimization Problem),\n\u2022 a set of 24 popular (global) constraints for main tracks:\ngeneric constraints: intension and extension (also called table)\nlanguage-based constraints: regular and mdd\ncomparison constraints: allDifferent, allDifferentList, allEqual, ordered,\nlex and precedence\ncounting/summing constraints: sum, count, nValues and cardinality\nconnection constraints: maximum, minimum, element and channel\npacking/scheduling constraints: nooverlap, cumulative, binPacking and knapsack\ncircuit, instantiation and slide\nand a smaller set of constraints for mini tracks.\nFor the 2024 competition, 34 problems have been selected. They are succinctly presented. For each problem, the type of optimization is indicated (if any), as well as the involved constraints. At this point, do note that making a good selection of problems/instances is a difficult task. In our opinion, important criteria for a good selection are:\n\u2022 the novelty of problems, avoiding constraint solvers to overfit already published problems;\n\u2022 the diversity of constraints, trying to represent all of the most popular constraints (those from XCSP3-core) while paying attention to not over-representing some of them;\n\u2022 the scaling up of problems."}, {"title": "2 Problems and Models", "content": "In the next sections, you will find all models used for generating the XCSP3 instances of the 2024 competition (for main CSP and COP tracks). Almost all models are written in PyCSP3 [15], Version 2.4 (officially released in August 28, 2024); see https://pycsp.org."}, {"title": "2.1 CSP", "content": ""}, {"title": "2.1.1 Average Avoiding", "content": "Description. Arrange an array such that the average of 2 numbers does not lie between them in the array. It seems that it was a Facebook interview question, and a question on StackOverflow.\nData. Because, here, we consider to find an array with all values ranging (in some order) from 0 to a specified limit, only one integer is required to specify a specific instance: the order n of the array. The values of n used for generating the 2024 competition instances are:\n20, 25, 30, 35, 40, 45, 50, 55, 60, 65\nModel. The PyCSP3 model, in a file 'AverageAvoiding.py', used for the competition is:"}, {"title": "2.1.2 Fast Matrix Multiplication", "content": "Description. Taken from [7]: \"The multiplication of two matrices A and B of sizes n \u00d7 m and m \u00d7 p results in a product matrix C of size n x p. This operation can be represented by a binary third-order tensor T. An entry Ti,j,k of this tensor is equal to 1 if and only if the kth entry in the output matrix C uses the scalar product of the ith entry of A and the jth entry of B. The FMM (Fast Matrix Multiplication) problem for a given tensor T, rank R, and field F (e.g., F = {-1,0,+1}) asks: can each entry Ti,j,k of T be expressed as the sum of exactly R trilinear terms involving the factor matrices U, V, and W, as follows:\nTi,j,k = \\sum_{R=1} Ui,r \u00d7 Vj,r \u00d7 Wk,r, \\forall i \u2208 {1, ..., n \u00d7 m}, j \u2208 {1, ..., m \u00d7 p}, k \u2208 {1, . . ., n \u00d7 p}\"\nData. Four integers are required to specify a specific instance. Values of (n, m, p, R) used for the instances in the competition are:\n(2,2,2,3), (2,2,2,4), (2,2,2,5), (2,2,2,6), (2,2,2,7), (1,3,3,9), (3,1,3,9), (2,2,3,11), (2,3,2,11)\nModel. The PyCSP\u00b3 model, in 'FastMatrixMultiplication.py', used for the competition is:"}, {"title": "2.1.3 Fillomino", "content": "Description. From Wikipedia: \u201cFillomino is played on a rectangular grid. Some cells of the grid start containing numbers. The goal is to divide the grid into regions called polyominoes (by filling in their boundaries) such that each given number n in the grid satisfies the following constraints: i) each clue n is part of a polyomino of size n; ii) no two polyominoes of matching size (number of cells) are orthogonally adjacent (share a side).\"\nData. As an illustration of data specifying an instance of this problem, we have:\n{\n\"puzzle\": [\n[4,0,0,3,0],\n[0,5,4,0,2],\n[0, 6, 1, 0, 1],\n[0,0,0,6,0],\n[5,0,0,3,0]\n]\n}\nModel. The PyCSP\u00b3 model, in a file 'Fillomino.py', used for the competition is:"}, {"title": "2.1.4 FRB", "content": "This problem has already been selected in previous XCSP competitions. This satisfaction problem only involves (ordinary) table constraints. A series of 12 instances has been selected for the competition. These instances were randomly generated using Model RB [20], while guaranteeing satisfiability."}, {"title": "2.1.5 Hamming", "content": "Description. Given four integers n, m, d and k, the goal is to find n vectors of size m where each value lies between 0 and d (exclusive), and every two vectors have a Hamming distance at most equal to k. See Wikipedia.\nData. Four integers are required to specify a specific instance. Values of (n, m, d, k) used for the instances in the competition are:\n(20,10,3,5), (20,10,3,6), (20,10,3,7), (20,10,3,8), (20,10,5,7), (20,10,5,8), (20,10,5,9),\n(20,10,5,10), (30,15,7,12), (30,15,7,13), (30,15,7,14), (30,15,7,15)\nModel. The PyCSP\u00b3 model, in a file 'Hamming.py', used for the competition is:"}, {"title": "2.1.6 Hyper Sudoku", "content": "Description. Hyper Sudoku differs from Sudoku by having additional constraints. When the base of the grid is 3 (as usually for Sudoku) there are four 3-by-3 blocks in addition to the major 3-by-3 blocks that also require exactly one entry of each numeral from 1 through 9.\nData. In our model, only one integer is required to specify a specific instance: the base of the grid. The values used for generating the 2024 competition instances are:\n3, 4, 5, 6, 7, 8, 9, 10\nModel. The PyCSP\u00b3 model, in a file 'HyperSudoku.py', used for the competition is:"}, {"title": "2.1.7 Mistery Shopper", "content": "This is Problem 004 on CSPLib.\nDescription. From Jim Ho Man Lee: \"A well-known cosmetic company wants to evaluate the performance of their sales people, who are stationed at the company's counters at various department stores in different geographical locations. For this purpose, the company has hired some secret agents to disguise themselves as shoppers to visit the sales people. The visits must be scheduled in such a way that each sales person must be visited by shoppers of different varieties and that the visits should be spaced out roughly evenly. Also, shoppers should visit sales people in different geographic locations.\" The complete description can be found at CSPLib.\nData. Five integers are required to specify a specific random instance, generated with the help of the file 'MisteryShopper_Random.py'. Values of (g, n, kr, ke, s) used for generating the instances in the competition are:\n(4,6,1,6,0), (4,6,2,6,0), (5,8,1,6,0), (5,8,2,6,0), (5,10,0,6,0), (5,10,1,6,0), (5,10,2,6,0),\n(5,10,3,6,0), (6,12,0,6,0), (6,12,1,6,0), (6,12,2,6,0), (6,12,3,6,0)\nModel. The PyCSP3 model, in a file 'MisteryShopper.py', used for the competition is:"}, {"title": "2.1.8 Pentominoes", "content": "Description. Here, the goal is to fill a grid of size n by m with different pentominoes. See Wikipedia.\nData. Two integers are required to specify a specific instance. Values of (n,m) used for generating the instances in the competition are:\n(3,20), (4,15), (5,12), (6,10), (3,30), (5,18), (6,15), (9,10), (3,40), (4,30), (5,24),\n(6,20), (8,15), (10,12)\nModel. The PyCSP3 model, in a file 'Pentominoes.py', used for the competition is:"}, {"title": "2.1.9 PoolBall Triangle", "content": "Description. From Martin Gardner: \u201cGiven n*(n+1) / 2 numbered pool balls in a triangle, is it possible to place them so that the number of each ball below two balls is the difference of (the number of) those two balls?\"\nData. In our model, only one integer is required to specify a specific instance: the value of n. The values used for generating the 2024 competition instances are:\n5, 7, 10, 11, 12, 13, 14, 15, 16, 18, 20\nModel. The PyCSP\u00b3 model, in a file \u2018PoolBallTriangle.py', used for the competition is:"}, {"title": "2.1.10 Rotating Workforce", "content": "Description. From [17]: \u201cRotating workforce scheduling is a specific personnel scheduling problem arising in many spheres of life such as, e.g., industrial plants, hospitals, public in-stitutions, and airline companies. A schedule must meet many constraints such as workforce requirements for shifts and days, minimal and maximal length of shifts, and shift transition constraints.\"\nData. Two integers are required to specify a specific random instance, generated with the help of the file 'RotatingWorkforce_Random.py'. Values of n, s) used for generating the instances in the competition are:\n(25,0), (25,1), (25,2), (40,0), (40,1), (40,2), (60,0), (60,1), (60,2), (80,0), (80,1),\n(80,2), (100,0), (100,1), (100,2)\nModel. The PyCSP3 model, in a file 'RotatingWorkforce2.py', used for the competition is:"}, {"title": "2.1.11 Soccer", "content": "Description. From [8]: \"A soccer competition consists of n teams playing against each other in a single or double round-robin schedule. The elimination problem is well-known in sports competitions and consists in determining whether at some stage of the competition a given team still has the opportunity to be within the top teams to qualify for playoffs or become the"}, {"title": "2.1.12 Social Golfers", "content": "This is Problem 010 on CSPLib, and called the Social Golfers Problem."}, {"title": "2.1.13 Solitaire Pattern", "content": "Description. This is a variant of Peg Solitaire [12] where a goal state (configuration) with a number of pegs in some specific arrangement must be reached. The initial state is the same as that of central Solitaire (i.e., missing peg in the middle of the board).\nData. Three integers are required to specify a specific instance: the position (ox,oy) of the mising peg, here, always (3,3), and the pattern number k. Values of (ox, oy, k) used for generating the instances in the competition are:\n(3,3,0), (3,3,1), (3,3,2), (3,3,3), (3,3,4), (3,3,5), (3,3,6), (3,3,7), (3,3,8), (3,3,9)\nModel. The PyCSP\u00b3 model, in 'SolitairePattern.py', used for the XCSP\u00b3 competition is:"}, {"title": "2.1.14 Subisomorphism", "content": "This problem has already been selected in previous XCSP competitions. This satisfaction problem only involves (ordinary) table constraints and the global constraint AllDifferent. A series of 11 instances has been selected for the competition."}, {"title": "2.1.15 Takuzu", "content": "Description. From Wikipedia: \"Takuzu, also known as Binairo, is a logic puzzle involving placement of two symbols, often 1s and Os, on a rectangular grid. The objective is to fill the grid with 1s and Os, where there is an equal number of 1s and Os in each row and column and no more than two of either number adjacent to each other. Additionally, there can be no identical rows or columns.\"\nData. In our model, only one integer is required to specify a specific instance: the value of n (order of the grid). In the model, it is possible to specify some clues (but, in our case, we don't have any, and we indicate this with value 'None'). The values used for generating the 2024 competition instances are:\n30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 150 200\nModel. The PyCSP3 model, in a file 'Takuzu.py', used for the competition is:"}, {"title": "2.1.16 WordSquare", "content": "Description. From Wikipedia: \"A word square is a type of acrostic. It consists of a set of words written out in a square grid, such that the same words can be read both horizontally and vertically. The number of words, which is equal to the number of letters in each word, is known as the order of the square.\"\nData. In our model, one integer n (order of the square) as well a dictionary file are required to specify a specific instance. The values of n used for generating the 2024 competition instances are:\n7, 8, 9, 10, 11"}, {"title": "2.1.17 Wordpress", "content": "http://pycsp.org/."}, {"title": "2.2 COP", "content": ""}, {"title": "2.2.1 Aircraft Assembly Line", "content": "Description. This problem has been proposed by St\u00e9phanie Roussel from ONERA (Toulouse), and comes from an aircraft manufacturer. The objective is to schedule tasks on an aircraft as-sembly line in order to minimize the overall number of operators required on the line. The schedule must satisfy several operational constraints, the main ones being:\n\u2022 tasks are assigned on a unique workstation (on which specific machines are available);\n\u2022 the takt-time, i.e., the duration during which the aircraft stays on each workstation, must be respected;\n\u2022 capacity of aircraft zones in which operators perform the tasks must never be exceeded;\n\u2022 zones can be neutralized by some tasks, i.e., it is not possible to work in those zones during the tasks execution.\nNote that similar problems have been studied in [18], where the authors are interested in the design of assembly lines (with similar instances).\nData. As an illustration of data specifying an instance of this problem, we have:\n{\n\"takt\": 1440,\n\"nTasks\": 199,\n\"nMachines\": 5,\n\"nAreas\": 48,\n\"areasCapacities\" : [1,1,..,1],\n\"tasksPerMachine\": [\n[49,50,51,52,53],\n[197]\n],\n\"nMaxOpsPerStation\": 10,10,10,10],\n\"neutralizedAreas\": [\n[12,15,24,28,31,37,39,46],\n[]\n],\n\"operators\": [0,1,...,1],\n\"tasksPerAreas\": [\n[2,5,11,13],\n[6,7,165,166,167]\n],\n\"usedAreas\":[\n[0,0,...,0],"}, {"title": "2.2.2 AztecDiamondSym", "content": "Description. This is a variant of Aztec Diamond, turned into an optimization problem. See Wikipedia.\nData. The values of n used for generating the 2024 competition instances are:\n3, 4 5, 6, 7, 8, 9, 10, 12, 15\nModel. The PyCSP\u00b3 model, in a file 'AztecDimaondSym.py', used for the competition is:"}, {"title": "2.2.3 Bin Packing", "content": "Description. The bin packing problem (BPP) can be informally defined in a very simple way. We are given n items, each having an integer weight wj (j = 1,...,n), and an unlimited number of identical bins of integer capacity c. The objective is to pack all the items into the minimum number of bins so that the total weight packed in any bin does not exceed the capacity c. Note that many resources can be found at BPPLIB \u2013 A Bin Packing Problem Library.\nData. As an illustration of data specifying an instance of this problem, we have:\n{\n\"binCapacity\": 100,\n\"itemWeights\": [30, 31, ..., 99]\n}\nModel. Two variants (a main one, and a second one called \"table\") of a first PyCSP\u00b3 model, in a file 'BinPacking.py', have been used for the competition:"}, {"title": "2.2.4 Cargo", "content": "Description. This problem is described in [19, 3]. This is a real-world cargo assembly plan-ning problem arising in a coal supply chain. The cargoes are built on the stockyard at a port terminal from coal delivered by trains. Then the cargoes are loaded onto vessels. Only a limited number of arriving vessels is known in advance. The goal is to minimize the average delay time of the vessels over a long planning period.\nData. As an illustration of data specifying an instance of this problem, we have:\n{\n\"H\": 1700,\n\"T\": 42000,\n\"stackBefore\": 30,\n\"limits\": {\n\"dailyStacking\": 950,\n\"nReclaimers\": 2,"}, {"title": "2.2.5 Charlotte", "content": "Description. Charlotte is a freelance nurse who works in shifts with two colleagues. Together, they work shifts which they share out over long periods (several weeks).\nData. Two integers are required to specify a specific instance: the number of weeks (n) and a seed (s) for generating randomly unwished work days. Values of (n,s) used for generating the instances in the competition are:\n(6,0), (6,1), (6,2), (12,0), (12,1), (12,2), (18,0), (18,1), (18,2), (24,0), (24,1), (24,2)\nModel. The PyCSP\u00b3 model, in a file 'Charlotte.py', used for the XCSP\u00b3 competition is:"}, {"title": "2.2.6 Drinking", "content": "Description. From Page 184 in [16]: \"In the drinking game, one must drink one glass ev-erytime a number is reached which is divisible by 7 or divisible by 5, unless the previous drink was taken less than 8 numbers ago.\" Here, we add an objective function.\nData. In our model, only one integer is required to specify a specific instance: the number of minutes n. The values used for generating the 2024 competition instances are:\n50, 100, 200, 400, 700, 10000, 20000, 50000, 100000, 200000\nModel. The PyCSP3 model, in a file 'Drinking.py', used for the competition is:"}, {"title": "2.2.7 Fool Solitaire", "content": "Description. From [12]: \"An optimisation variation of Peg Solitaire (named Fool's Solitaire by Berlekamp, Conway and Guy [4]) is to reach a position where no further moves are possible in the shortest sequence of moves.\"\nData. Two integers are required to specify a specific instance: the position (ox,oy) of the mising peg. Values of (ox, oy) used for generating the instances in the competition are:\n(0,2), (0,3), (0,4), (1,2), (1,3), (1,4), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (3,0),\n(3,1), (3,2), (3,3)\nModel. The PyCSP3 model, in a file 'FoolSolitaire.py', used for the XCSP3 competition is:"}, {"title": "2.2.8 Lit Puzzle", "content": "Description. Five puzzle, by Martin Chlond (and mentioned by H\u00e5kan Kjellerstrand on his website). Each of the squares in the grid, below, can be in one of two states, lit (white) or unlit (red):\nABCDE\nFGHIJ\nKLMNO\nQRST\nUVWXY"}, {"title": "2.2.9 Maximum Density Oscillating Life", "content": "Description. From [11]: \u201cConway's Game of Life was invented by John Horton Conway. The game is played on a square grid. Each cell in the grid is in one of two states (alive or dead). The state of the board evolves over time: for each cell, its new state is determined by its previous state and the previous state of its eight neighbours (including diagonal neighbours). Oscillators are patterns that return to their original state after a number of steps (referred to as the period). A period 1 oscillator is named a still life. Here we consider the problem of finding oscillators of various periods.\"\nData. Two integers are required to specify a specific instance: the order n of the board and the horizon h allowed for solving the problem. Values of (n, h) used for generating the instances in the competition are:\n(5,2), (5,3), (5,4), (5,5), (5,6), (6,2), (6,3), (6,4), (6,5), (6,6), (7,2), (7,3), (7,4), (7,5),\n(7,6)\nModel. The PyCSP\u00b3 model, in a file 'MaximumDensityOscillatingLife.py', used for the XCSP3 competition is:"}, {"title": "2.2.10 Pyramid", "content": "Description. Build a pyramid such as each brick of the pyramid is the sum of the two bricks situated below it. Minimize the root value (0 not permitted) while using different values."}, {"title": "2.2.11 Rubiks Cube", "content": "Description. The 1D Rubik's Cube is a vector composed of 6 number, which can be rotated in 3 different ways in groups of four:\n(1) 123456\n(2) 123456\n(3) 123456\n432156\n154326\n126543\nThe problem associated with the 1D Rubik's Cube can be defined in general terms: given a scrambled vector V of size n, the objective is to return the shortest sequence of rotations (of length g) so as to restore the original ordered vector. Above, we haven = 6 and g = 4, and the possible rotations are 1, 2, and 3 (as well as 0 for indicating that no rotation is performed). The number r of possible rotations is equal ton-g+ 1. A CP model for this problem has"}, {"title": "2.2.12 SameQueensKnights", "content": "Description. From archive.vector.org: \u201cIn 1850, Carl Friedrich Gauss and Franz Nauck showed that it is possible to place eight queens on a chessboard such that no queen attacks any other queen. Now consider a variant of this problem: you must place a maximal number of knights and queens on a board of size n \u00d7 n such that no piece attacks any other piece.\"\nData. The values of n used for generating the 2024 competition instances are:\n5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75\nModel. The PyCSP\u00b3 model, in a file 'SameQueensKnights.py', used for the competition is:"}, {"title": "2.2.13 Still Life", "content": "This is Problem 032 at CSPLib.\nDescription. From CSPLib (by Barbara Smith): \"This problem arises from the Game of Life, invented by John Horton Conway in the 1960s and popularized by Martin Gardner in his Scientific American columns. Life is played on a squared board, considered to extend to infinity in all directions. Each square of the board is a cell, which at any time during the game is either alive or dead. A cell has eight neighbours. The configuration of live and dead cells at time t leads to a new configuration at time t+1 according to the rules of the game:\n\u2022 if a cell has exactly three living neighbours at time t, it is alive at time t+1\n\u2022 if a cell has exactly two living neighbours at time t it is in the same state at time t+1 as it was at time t\n\u2022 otherwise, the cell is dead at time t+1\nA stable pattern, or still-life, is not changed by these rules. Hence, every cell that has exactly three live neighbours is alive, and every cell that has fewer than two or more than three live neighbours is dead.\"\nTher exists a variant 'wastage'.\nData. Two integers are required to specify a specific instance: the number of rows n and the number of columns m of the board. Values of (n, m) used for generating the instances in the competition are:"}, {"title": "2.2.14 Test Scheduling", "content": "This is Problem 073 on CSPLib.\nDescription. The problem was presented as the Industrial Modelling Challenge at the con-fernce CP'2015.\nFrom CSPLib (by Morten Mossige): \"The problem arises in the context of a testing facility. A number of tests have to be performed in minimal time. Each test has a given duration and needs to run on one machine. While the test is running on a machine, no other test can use that machine. Some tests can only be assigned to a subset of the machines, for others you can use any available machine. For some tests, additional, possibly more than one, global resources"}, {"title": "2.2.15 Traveling Tournament", "content": "Description.\n\"The Traveling Tournament Problem (TTP) is defined as follows. A double round robin tournament is played by an even number of teams. Each team has its own venue at its home city. All teams are initially at their home cities, to where they return after their last away game. The distance from the home city of a team to that of another team is known beforehand. Whenever a team plays two consecutive away games, it travels directly from the venue of the first opponent to that of the second. The problem calls for a schedule such that no team plays more than (two or) three consecutive home games or more than (two or) three consecutive away games, there are no consecutive games involving the same pair of teams, and the total distance traveled by the teams during the tournament is minimized.\"\nData. As an illustration of data specifying an instance of this problem, we have:\n{\n\"distances\": [\n[0, 10, 15, 34],\n[10, 0, 22, 32],\n[15, 22, 0,47],\n[34, 32, 47, 0]\n]\n}\nModel. The PyCSP\u00b3 model, in a file 'TravelingTournament.py' used for the XCSP\u00b3 compe-tition is:"}, {"title": "2.2.16 Vehicle Routing Problem with Location Congestion", "content": "Description. From [13]: \u201cA Vehicle Routing Problem (VRP) is a combinatorial optimization problem that aims to construct routes for a fleet of vehicles that service customer requests while minimizing some cost function. The family of VRPs is extensive and includes variants that specify additional side constraints, such as time window constraints that restrict the time at which service of a request can commence, and precedence constraints that require one request to be serviced before another. The variant named the Vehicle Routing Problem with Pickup and Delivery, Time Windows, and Location Congestion (VRP-PDTWLC, or VRPLC for short), is motivated by applications in humanitarian and military logistics, where Air Force bases have limited parking spots, fuel reserve, and landing and takeoff times for airplane operations.\"\nData. As an illustration of data specifying an instance of this problem, we have:\n{\n\"T\": 150,\n\"V\": 10,\n\"Q\": 15,\n\"L\": 5,\n\"C\": 1,\n\"P\": 10,\n\"times\": [\n[0, 4, ..., 18],\n[4,0, ..., 17],\n[18, 17, 0]\n],\n\"requests\": [\n{\"l\": 0, \"a\": 18, \"b\": 52, \"s\": 14, \"q\": 1},\n{\"l\": 2, \"a\": 24, \"b\": 46, \"s\": 13, \"q\": 3},\n{\"l\": 1, \"a\": 64, \"b\": 119, \"s\": 15, \"q\": -1}\n]\n}\nModel. An original model was proposed by Edward Lam, and described in [13]. The PyCSP\u00b3 model, in a file 'VRP_LC.py', used for the XCSP3 competition is close to (can be seen as the close translation of) the one submitted to the 2018 Minizinc challenge."}, {"title": "2.2.17 Word Golf", "content": "Description. From Wikipedia: \u201cWord ladder (also known as Doublets, word-links, change-the-word puzzles, paragrams, laddergrams, or word golf) is a word game invented by Lewis Carroll. A word ladder puzzle begins with two words, and to solve the puzzle one must find a chain of other words to link the two, in which two adjacent words (that is, words in successive steps) differ by one letter.\"\nData. In addition to the name of a dictionary file, three integers are required to specify a specific instance: the size of the words m, the number of allowed steps h and the seed s. Values of (n, h, s) used for generating the instances in the competition are:\n(4,50,0), (4,50,1), (4,50,2), (4,50,3), (5,50,0), (5,50,1), (5,50,2), (5,50,3), (6,50,0),\n(6,50,1), (6,50,2), (6,50,3), (7,50,0), (7,50,1), (7,50,2), (7,50,3)\nModel. The PyCSP\u00b3 model, in a file 'WordGolf.py', used for the XCSP\u00b3 competition is:"}, {"title": "2.2.18 Wordpress", "content": "Description. From"}]}