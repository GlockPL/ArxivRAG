{"title": "TableTalk: Scaffolding Spreadsheet Development with a Language Agent", "authors": ["JENNY T. LIANG", "AAYUSH KUMAR", "YASHARTH BAJPAI", "SUMIT GULWANI", "VU LE", "CHRIS PARNIN", "ARJUN RADHAKRISHNA", "ASHISH TIWARI", "EMERSON MURPHY-HILL", "GUSTAVO SOARES"], "abstract": "Despite spreadsheet programming being an ubiquitous activity in the modern workforce, creating spreadsheets remains challenging. This is in part due to two reasons: first, programmers must have spreadsheet programming knowledge (e.g., API understanding) to perform fundamental actions like writing formulas, and second, they must develop problem-solving knowledge to compose these actions together to achieve complex tasks. Given these challenges, approaches that automate aspects of the spreadsheet development process, such as large language models (LLMs), show promise in alleviating the challenges these programmers face. Recent advances in planning and reasoning in LLMs have enabled a more advanced approach known as language agents to solve spreadsheet programming tasks. Compared to traditional LLMs that generate text, language agent-based (i.e., agentic) approaches emphasize dynamic planning, tool use, and iterative action-taking to complete complex tasks in interactive environments. Agents achieve a specific goal by observing the environment and planning and proactively performing predefined actions on the environment. Thus, we reason that language agents can scaffold programmers through creating spreadsheets by following expert processes.\nWe present TableTalk, a language agent that allows spreadsheet programmers to build spreadsheets in a conversational manner. TableTalk's design reifies three design principles for tools to support spreadsheet programming--which we derive from two formative studies of 7 spreadsheet programmers and 62 Excel spreadsheet templates. TableTalk enables the creation of spreadsheet programs by guiding programmers through a structured plan to develop spreadsheets, based on expert processes. During each interaction with TableTalk, the tool generates three potential next steps the user can select to adapt the plan to their context. In addition, TableTalk has access to tools that produce atomic spreadsheet features so that TableTalk can develop spreadsheets incrementally with the programmer. Based on a user study with 20 spreadsheet programmers, we find that our approach produces higher quality spreadsheets", "sections": [{"title": "1 Introduction", "content": "Alma is creating a spreadsheet to track expenses to understand the spending trends of her business with her co-owner. Alma is unsure on how to solve this problem, so she begins by defining a table whose schema represents the information she wants to track. This includes columns for the transaction date, cost, and spending category. Then, she manually tabulates the data from various sources, such as bank statements or receipts. Alma now wants to understand her top spending categories, which requires completing multiple steps. First, Alma must produce a second table by filtering rows from the past month, aggregating the rows by spending category, summing their costs, and saving the results in a second table. She then must sort the second table by the total cost column. However, Alma does not know how to decompose the problem into these steps. She also struggles to implement the formula due to having difficulty understanding complex spreadsheet programming APIs, and eventually gives up on implementing the spreadsheet."}, {"title": "TableTalk: Scaffolding Spreadsheet Development with a Language Agent", "content": "Like Alma, many professionals develop spreadsheet programs [5, 38, 66], from administrators and retail managers [1] to teachers and analysts [38]. We refer to these professionals as spreadsheet programmers. Spreadsheet programming is an important skill in the modern workforce [1, 65, 66]. Based on a 2023 longitudinal analysis of millions of job postings, spreadsheet programming remains a significant and enduring skill [1]. Despite the prevalence of spreadsheet programs, creating these programs is challenging. As illustrated by Alma's experience, what makes spreadsheet programming challenging is two-fold. Firstly, spreadsheet programmers must have a background in programming [56] and prerequisite understanding of APIs [38] to perform actions. Secondly, spreadsheet programmers must have problem-solving knowledge to understand how to approach the problem and decompose the task into individual actions that achieve the intended goal. Programmers often achieve this by developing and following systematic processes [14, 41, 60]. Without adequate support for these kinds of knowledge, spreadsheet programmers struggle to understand and manage spreadsheets [62] and introduce errors into the program [5].\nThe emergence of large language models (LLMs), such as GPT-4 [10], offer a promising avenue to assist spreadsheet programmers as they address both of the aforementioned challenges. These models have sufficient spreadsheet program-ming knowledge to complete individual spreadsheet programming tasks (e.g., formula prediction [25, 36]). Further, LLMs can solve complex tasks via strong planning capabilities developed through advanced reasoning techniques [69, 79], which have enabled LLM-based language agents to become effective planners and problem solvers for spreadsheet programming [43]. Compared to traditional LLMs, which focus on generating text, language agents can also collect observations of the environment and plan and perform actions to update their environment [13, 75, 77].\nHumans and language agents assume complementary roles in completing tasks. Language agents can scaffold and guide humans through complex tasks by following expert processes [16, 72]. At the same time, research shows that language agents benefit from human intelligence, such as learning from human problem-solving processes [16, 75]. Therefore, humans could benefit language agents by improving the agent's planning and task performance via human expertise, while language agents could guide humans through expert processes to complete complex tasks the individual would struggle with on their own. This motivates the need to study human-agent interaction from a planning and problem-solving perspective, which remains understudied. Better understanding how humans and language agents interact could improve their alignment and could also inform our understanding of usable agent systems, which is vital for useful and practical tools [55]. This becomes increasingly important given the growing capabilities of agents to complete a wider range of tasks (e.g., software engineering [43, 78] or real-life scenarios [77]) and the adoption of agents in programming systems like Devin [3].\nIn this work, we explore the potential for collaboration between language agents and humans to plan and solve complex tasks together. We use spreadsheet programming as a domain to study human-agent collaboration, given the ability of language agents to perform the task [43]; the semi-structured nature of the task [60], indicating the need for planning and problem solving by spreadsheet programmers; and the difficulty of the task for humans [38]. We explore this idea with our tool, TableTalk (see Figure 1). TableTalk implements three design principles for tools to support spreadsheet programming-scaffolding, flexibility, and incrementality. We derive these principles by understanding the design space of scaffolding tools and how developers use them through a study of 62 spreadsheet templates and a user study with 7 spreadsheet programmers respectively. TableTalk supports the creation of spreadsheet programs by having the programmer participate in the planning process and provide feedback on potential table schema through a chat interface. TableTalk is implemented as a language agent that 1) follows a plan for effective spreadsheet creation identified by Pirolli and Card [60] and 2) has access to tools to implement atomic spreadsheet features, enabling the incremental development of spreadsheets. In each interaction with TableTalk, the tool generates three potential next"}, {"title": "2 Related Work", "content": "Below, we discuss prior work on human factors of spreadsheet programming (Section 2.1), scaffolding tools for programming tasks (Section 2.2), and AI for spreasheet programming (Section 2.3). Given the rapid advances in LLMs, our discussions offer a snapshot of the field as of December 2024."}, {"title": "2.1 Human Factors of Spreadsheet Programming", "content": "Prior work has investigated the process that spreadsheet programmers follow to create spreadsheets, revealing its complex and iterative nature. In a field study of 11 spreadsheet programmers, Nardi and Miller [56] found that spreadsheet development was collaborative by nature and required both programming and domain expertise. This expertise was often distributed among multiple individuals who had different specialties. Closely related is Pirolli and Card [60]'s cognitive task analysis, which found that professionals who developed knowledge products from data like spreadsheets followed a defined process. This involved gathering information, developing a schema for analysis, generating insights by manipulating the schema, and creating some knowledge product or action. Further, the authors found that the expert process involved a foraging loop (i.e., finding, searching, filtering, and extracting information) and a sense making loop (i.e., developing a mental model for a schema).\nOther studies have revealed the challenges associated with spreadsheet development. Spreadsheet programmers often struggle to find the correct abstractions to use and to know how to reuse existing code to accomplish a task [38]. In addition, spreadsheet programs can be difficult to understand, extend, and manage [62]. As a result, they can be riddled with errors, including mechanical and logic errors [5]. Although automating aspects of spreadsheet programming could be helpful [62], it can also come at a cost to the programmer. Pandita et al. [57] found that there was no clear benefit in using tools in spreadsheet programming: while tool usage could increase task correctness, it could also result in longer task completion times.\nThe prior literature on human factors of spreadsheet programming reveals rich insights on how programmers develop spreadsheets. However, these works do not study how spreadsheet programmers use scaffolding tools like spreadsheet templates, which is vital to understanding how AI can guide spreadsheet development. We corroborate and extend the findings of these studies by examining the benefits and challenges of using scaffolding tools in spreadsheet"}, {"title": "2.2 Scaffolding Tools for Programming", "content": "Scaffolding tools help users complete complex tasks by structuring tasks in a way such that they can accomplish tasks that they struggle to attain on their own [61]. Examples of scaffolding tools include templates, examples of other work, hints, or links to resources [64], as well as step-by-step instructions to complete a task [41]. In programming, scaffolding tools can help programmers with problem solving and planning. They have been applied to a variety of complex programming tasks, such as decision making [48], debugging [16, 41], software architecture, and testing [15]. However, scaffolding tools struggle to offer the right level of support by being too general or too specific [61]. For example, when a programmer follows expert-defined instructions to solve programming problems-known as programming strategies [41]-it can be difficult to apply the strategy because it may not consider the programmer's unique context or be written too abstractly [14].\nLLMs have shown promise in alleviating these challenges by imbuing additional flexibility and user context into scaffolding tools for complex tasks, such as for the academic peer review process [72] and information sense making [50, 71]. In programming, LLM-based scaffolding approaches have shown promise in helping programmers. The most closely related tool to TableTalk is ROBIN [16], a tool that guides programmers through a predefined debugging programming strategy. ROBIN is implemented with four main LLM-based components, including one for generating follow-ups in the conversation. With this approach, ROBIN led to a 150% increase in defect localization rates and a 250% increase in defect resolution rates compared to the baseline.\nOverall, this body of literature points to the promise of scaffolding tools assisting spreadsheet programmers in creating spreadsheets. However, to the best of our knowledge, scaffolding tools for spreadsheet development remain understudied. This is because, rather than guiding programmers through complex tasks, many intelligent spreadsheet tools have focused on developing improved interfaces, algorithms, or machine learning techniques for a range of spreadsheet development tasks. This includes writing formulas [70], prototyping tables [35], debugging [8, 54] as well as defining test cases [23], assertions [22], and constraints [54]. Of these tools, perhaps the most related to TableTalk is Table Illustrator [35] and GridBook [70]. Table Illustrator [35] is an interactive system that facilitates the rapid prototyping of different table layouts by allowing programmers to arrange puzzle pieces as a metaphor for table construction. In the Table Illustrator user study, Huang et al. [35] found that the tool performed similarly to Excel, while decreasing cognitive load and task completion time. Meanwhile, GridBook [70] is an interactive system that allows programmers to provide input in natural language within a spreadsheet cell and uses deep learning techniques to generate formulas. In the GridBook user study, Srinivasa Ragavan et al. [70] found that the tool performed comparably to Excel, but reduced task completion time compared to Jupyter notebooks.\nHowever, some work has studied scaffolding spreadsheet programming, namely, detecting and producing spreadsheet templates [6, 7, 9, 27]. ViTSL [9] is a visual programming language that defines abstractions for the spreadsheet structure to reduce spreadsheet programming errors. It offers abstractions on cells, references, vertical groups, and horizontal groups. Gencel [27], an Excel add-on, then generates and edits tables that conform to the ViSTL template structure. In Gencel's user study, Erwig et al. [27] found that the participants wanted more flexibility in ViSTL templates and expressed concern in being able to adapt ViSTL templates due to the required programming knowledge."}, {"title": "2.3 Al for Spreadsheet Programming", "content": "Prior work has investigated multiple approaches for LLMs to solve spreadsheet programming tasks. Previously, LLMs solved a range of self-contained spreasheet programming tasks through pre-training and fine-tuning, such as formula prediction [25, 36] and cell role prediction [26]. Recently, a budding approach has allowed LLMs to complete more complex tasks and increase task performance in spreadsheet programming: language agents, also known as agents. Agents achieve a specific goal by observing the environment, performing actions, generating utterances, modeling internal state, and inferring intentions from others [13, 75, 77]. Compared to traditional LLMs, which focus on generating text autoregressively (i.e., from left to right) given the previous text, agents put special emphasis on dynamic planning and proactive action-taking within an environment to complete tasks. Following the trend of using language agents to achieve state-of-the-art performance in software development tasks (e.g., closing issues [78] and generating code and tests [73]), Li et al. [43] developed an agent to manipulate spreadsheets called SheetCopilot. SheetCopilot can understand spreadsheet manipulation requests in natural language and construct and execute plans to achieve the request. Based on a benchmark of 221 spreadsheet programming tasks, SheetCopilot completed 44.3% of the tasks in a single generation.\nAlthough these advances have enabled state-of-the-art performance, agentic systems do not typically consider the role of human interaction, as they restrict human involvement to providing annotations on agent actions [77] or limiting interactions to the beginning of the task rather than throughout the task (e.g., [43, 78]). This reduces the usability of agent-based systems, as these approaches violate long-established principles in human-AI collaboration that underscored the importance of granular user feedback [12] and the refinement of AI output [34]. Thus, compared to other agentic approaches, TableTalk explores human-agent collaboration by being designed to work interactively with spreadsheet programmers to perform their tasks. Rather than trying to complete a task in a single user interaction as in previous work [43, 73, 78], TableTalk scaffolds the spreadsheet creation process and allows programmers-rather than models-to provide feedback on intermediate states and evaluate multiple next steps for planning."}, {"title": "3 Spreadsheet Template Study", "content": "To better understand existing scaffolding tools in spreadsheet programming, we analyzed 62 Excel spreadsheet templates. We studied spreadsheet templates because they are tools to scaffold the spreadsheet creation process for programmers. Therefore, to understand spreadsheet templates analytically, our research question in this study is:\nRQ1 What is the design space of Excel spreadsheet templates?"}, {"title": "3.1 Data", "content": "For this study, we analyzed Excel templates since they are widely accessible scaffolding tools for spreadsheet pro-grammers and are a sample of spreadsheets of higher quality and intended for public use. These spreadsheets were representative of what we wanted TableTalk to produce. The budget domain was selected as the study domain as it was a prominent predefined category of spreadsheet templates in the Excel application.\nTo obtain the Excel template data set, we used the Excel template library from Excel version 2409 and selected the templates under the \"Budget\" filter. This yielded 91 templates. Because this set included spreadsheets that were not purely budgets (e.g., planners), we further filtered this set down by only looking at templates that contained the keyword \"budget\". This produced the final dataset of 62 spreadsheets, which were then manually extracted for analysis. The dataset is available in the supplemental materials [45]."}, {"title": "3.2 Analysis", "content": "To analyze the Excel template dataset, two authors performed open coding on the dataset. The authors independently coded 15 spreadsheets (approximately 25% of the samples) for common atomic spreadsheet features and inductively generated codes in an individual codebook. The authors then gathered to merge their individual codebooks. Codes with similar themes were first merged. Each of the remaining codes were added or removed based on unanimous agreement. The authors then grouped the codes into similar themes in a round of axial coding. Each category was created only by unanimous agreement.\nTo validate the codebook, one author coded an additional spreadsheet by selecting areas within the spreadsheet and applying a code from the shared codebook. The codes were then masked, with the original highlighted areas corresponding to the code remaining intact. The other author then recoded the same spreadsheets by applying the shared codebook. We then computed an inter-rater reliability (IRR) score using Cohen's K, which yielded a score of 0.87-near perfect agreement [40]. After the codebook was validated, the first author coded the remaining spreadsheets. No new codes were discovered in this process. The codebook is available in the supplemental materials [45]."}, {"title": "3.3 Results", "content": "Based on the qualitative analysis, we extracted 21 codes on common atomic features from Excel spreadsheet templates that were grouped into 7 different themes. We provide an overview in Figure 2. The themes covered three topics: requirements, structure, and usability. The spreadsheet := requirements shaped the physical structure of the table as the requirements would inform the table schema. Similar to Huang et al. [35]'s study, we found the structure of the"}, {"title": "3.3.1 Ease of Use.", "content": "The Excel templates included features to make them usable by other programmers. This included documentation, such as notes, tool tips, or guides on how to use the spreadsheet. Written guides were commonly included as a separate sheet within the Excel workbook. Templates were often explicitly denoted as simple by including terms such as \"basic\" or \"simple\" in the title."}, {"title": "3.3.2 Presentation.", "content": "As noted in prior literature [35], we identified a theme related to the presentation of the template. This included the theme of the template and conditional formatting of the cell data. We also noted interactive elements of the spreadsheets, such as navigation elements."}, {"title": "3.3.3 Requirements.", "content": "One theme was the requirements for the spreadsheet, which was not discussed in prior work. The templates differed according to audience (e.g., for personal use versus business use) and timescale (e.g., budgets on a monthly versus a yearly basis). The templates also varied by additional context about the purpose of the spreadsheet (e.g., a budget for a wedding, marketing team, family meal plan, or landscaping project). The requirements influenced the spreadsheet table schema. For example, a spreadsheet for a gardening project could require columns for the name, type, and quantity of each plant, while a spreadsheet for a yearly business budget could require columns for each month of the year."}, {"title": "3.3.4 Spreadsheet Level.", "content": "Template features occurred at the spreadsheet level, such as each sheet having a unique spreadsheet name. There were also differences in the overall architecture of the spreadsheet. Some spreadsheets put all the tables on a single sheet (e.g., in Figure 3), while others separated the data and insight tables in different sheets."}, {"title": "3.3.5 Table Level.", "content": "Template features also occurred at the table level. Each table was given a table name and a schema of its underlying data. Example rows and data were often provided to illustrate the schema and to show how the formulas worked. For example, in Figure 3, there are example data in the data tables and the insight table that demonstrate the behavior of the aggregation in the last row, as well as the conditions under which an up or down arrow appears. In addition, tables often included transforms, which were cells that had formulas that encoded computational relationships between multiple columns in the schema. For example, Figure 3 includes the \"Over / Under\" column that takes the difference between the estimated and actual costs."}, {"title": "3.3.6 Data Tables.", "content": "Data tables, which represented the underlying data for the spreadsheet, had unique features. Two data tables are included in the example template in Figure 3. Data within the data tables were either categorical values (i.e., represented by categorical data) or literals (i.e., plain values). As noted in Huang et al. [35]'s study, at the bottom of the data tables, there were often aggregation cells that aggregated raw data (e.g., total cost for column A) to summarize the information in the table. Finally, these tables had parameter cells that contained related information that was not incorporated into the schema (e.g., a checkbox to track whether the data corresponding to a table were paid)."}, {"title": "3.3.7 Insight Tables.", "content": "Insight tables, designed to transform data tables into actionable insights, featured distinct elements from the data tables themselves. An example of an insight table can be found in the template shown in Figure 3. Complex spreadsheets with multiple tables often included an aggregation reference cell, which directly linked to an aggregation cell within a data table. These could be further aggregated using a table aggregation cell to provide an overall summary of the spreadsheet. For instance, in Figure 3, the insight table connects the cost of each category through aggregate reference cells, which are then summarized in the bottom row via a table aggregation cell. Additionally, insight tables were often enhanced with charts to visually represent the data."}, {"title": "4 Formative User Study", "content": "While Erwig et al. [27]'s user study of Gencel provided some insights on scaffolding support through spreadsheet templates, it is unclear what the benefits and drawbacks of scaffolding tools are compared to having no guidance. To support programmers in creating spreadsheets through scaffolding, we conducted a formative user study to understand current practices in using scaffolding tools in spreadsheet programming. In particular, we wanted to understand programmers' experiences of using existing scaffolding tools (i.e., spreadsheet templates) and how this compared to not receiving any scaffolding assistance. We also wanted to understand spreadsheet programmers' needs for how an AI could assist them in creating a spreadsheet. Therefore, the research questions in this study were:\nRQ2 What is the experience of spreadsheet programmers while developing spreadsheets from scratch?\nRQ3 What is the experience of spreadsheet programmers while developing spreadsheets from a template?\nRQ4 What do spreadsheet programmers want from an AI that assists with creating spreadsheets?"}, {"title": "4.1 Participants", "content": "We recruited 7 active spreadsheet programmers through an online user study platform. This ensured participants were familiar with spreadsheet software, as the study focused on usage rather than learning barriers. Therefore, the inclusion criteria were Excel users who were working professionals from English-speaking countries and used Excel for at least 5 days in the previous month. Our participants were men (N = 3) and women (N = 4) aged 26 to 49 (\u03bc = 35) located in the United Kingdom (N = 2), United States (N = 2), and Canada (N = 3). Participants used Excel for 11-20 days (N = 4) and 21+ days (N = 3) in the previous month."}, {"title": "4.2 Task", "content": "We developed the user study task so that it included elements of the process that professionals follow to create knowledge products such as spreadsheets [60]: gathering information about the task, schematizing the task data, and developing insights based on the schema.\nTask Description. The user study task was in the domain of task tracking. We selected this domain because similar to the budget domain in the spreadsheet template study (see Section 3), it was a predefined category of templates in the Excel application. The user study task presented participants with a list of food drive tasks and asked them to determine who was doing the most work. Tasks varied by frequency (e.g., twice a week versus once a quarter) and duration."}, {"title": "4.3 Protocol", "content": "The user study was conducted remotely on a teleconferencing platform, where the participant's screen was recorded. During the user study, the participants created spreadsheets to complete the task twice: once from scratch and once from a template retrieved from the task tracking template category in Excel version 2409. This is because we wanted to observe participants creating spreadsheets with and without the assistance of scaffolding tools. To reduce learning effects, the order of the conditions was roughly counterbalanced.\nOverview. To begin the study, the interviewer introduced the user study task. The participant then completed the task either by creating a table from scratch or from a template in Excel. Participants were allowed to access the Internet or use any Excel feature to replicate a typical work environment. Participants were initially given 15 minutes to complete the task and were provided extra time to edit the spreadsheet if needed.\nParticipants who created a spreadsheet from scratch were given a blank Excel workbook, while those who used a template received a copy of the task planning template. After completing the first task, participants repeated it under"}, {"title": "4.4 Analysis", "content": "After the interviews, one author performed transcription and two authors qualitatively analyzed the interviews, following the same qualitative analysis process in Section 3.2. The authors developed an initial codebook on 2 transcripts (25% of the samples) and after validation obtained a Cohen k score of 0.84-near perfect agreement [40]. No new codes were discovered while applying the codes to the remaining data.\nWe also performed an analysis of the participants' development activities to study their development process. The second author reviewed footage of the spreadsheet development process and applied a codebook on programmer implementation actions from Liang et al. [44] at the category level. Each action was labeled with a start time, a stop time, and a code label, resulting in a dataset of 217 actions. To understand the effect of the task on the amount of time spent on each action, we aggregated the time each participant spent on every action. We then ran a mixed-effects model that modeled participants as a random effect, with an interaction term between the conditions and actions:\nTotal Action Time ~ Condition + Action + Condition \u00d7 Action + (1 | Participant)"}, {"title": "4.5 Results", "content": "An overview of the activities of the participants is in Figure 4. We find that creating spreadsheets from scratch and from templates both have benefits and drawbacks. Creating from scratch affords flexibility and customization of the spreadsheets, but can reduce the overall quality of the final spreadsheet due to minimal guidance on performing Excel actions (e.g., writing formulas). Meanwhile, starting from a template provides structure to the problem solving process and produces more polished spreadsheets. However, using a template requires significant adaptation that can interfere with the programmer's ability to complete the task. We now discuss the results in further detail."}, {"title": "4.5.1 From Scratch.", "content": "While creating spreadsheets from scratch, we found that 4 of the 7 participants completed the task in the 15 minutes allotted. 2 participants completed the task given extra time; only P5 did not complete the task. The study participants spent most of their time on implementation. Each participant followed their own unique process to implement a spreadsheet (see Figure 4), which aligns with traditional software engineering [44]. All participants completed multiple rounds of prototyping and implementation, supporting previous findings that the spreadsheet creation process is highly iterative [35, 60]. In addition, we noted that P2-the only participant who created a polished spreadsheet with formulas and themes-modeled a professional's process of first prototyping the table schema and then implementing the rest of the spreadsheet [60].\nCreating spreadsheets from scratch enabled customized (N = 5) spreadsheets that fit the programmer's context, as it was not constrained by a predefined structure. This allowed the spreadsheet to be \"[designed] in a way that naturally makes sense to me\" (P7), making it \"quite easy...to move stuff around\" (P6). However, the resulting sheets were quick-and-dirty (N = 3) that were not well-designed: \"The table is not structured. It's more like a note thing rather than a table\" (P1). Participants (N = 5) did not include any formatting elements (e.g., table themes or borders) in their spreadsheets. Furthermore, starting from scratch provided limited support on structuring problems (N = 7). Participants noted difficulties knowing \"how...to present [information] in the most natural way\" (P7) and \"putting my thought process into the spreadsheets\" (P4). This echos previous work that indicates that knowing how to schematize data is a skill to develop spreadsheets [24, 38, 60] and that problem-solving knowledge is an important skill in programming [17, 47]. Finally, participants had minimal guidance on using advanced Excel features (N = 5), especially formulas: \"I'm not too familiar with the formulas... That's why it took me a bit longer to get the calculations\" (P3). Rather than writing Excel formulas, P1 resorted to using their computer's calculator, while P3 performed arithmetic mentally. This corroborates prior findings that programmers struggle with understanding spreadsheet programming APIs [38, 56]."}, {"title": "4.5.2 From a Template.", "content": "Only a single participant (P7) completed the task in the 15 minutes allotted when using an Excel template to create a spreadsheet. Although 4 of the 7 participants required additional time, these participants were still unable to complete the task. This suggests that the usage of templates hindered the completion of the task compared to creating from scratch. This aligns with previous work, which finds that the use of programming tools can increase task completion time [57] and increase task failure rates [74]."}, {"title": "4.5.3 Spreadsheet Programmer Needs for Al.", "content": "The majority of the participants preferred the chat bot (N = 6) compared to the setup wizard (N = 1) and the in-canvas formula (N = 0), since the chat bot was more flexible (N = 7) and could be used to \"update and rectify [outputs]\" (P1) via natural language. The participants felt that the setup wizard interface was \"too structured and too limited\" (P2) since a programmer would be dependent on \"how extensive the options are\" (P5), whereas for the in-canvas interface, there was no \"interaction capability\" (P1).\nThe participants wanted to describe tasks and goals (N = 5) to the AI, since their \"concerns are always more related to the high level\" (P7): \"You don't want to say, 'I want cell A1 + B12... You want to explain the scenario'\" (P1). Next, participants said the AI should have understandable outputs (N = 3) for easy modification: \"If [the AI] was not transparent about what it created, I'd have a hard time...making little tweaks\" (P5). Further, participants said the tool should be usable (N = 6) and not require technical knowledge: \"I have a decent base of coding, but I want to explain what I want without using any technical terms\" (P1). Participants also noted the tool should provide suggestions on insights (N = 5) in the data, like specific analyses, \"graphs\" (P3), or \"ways to summarize the data\" (P5)."}, {"title": "5 Design Principles", "content": "Based on the findings from the spreadsheet template study (Section 3) and the formative user study (Section 4), we reason that an effective tool for developing spreadsheets should follow these design principles (labeled \"DP\"):\nDP1: Scaffolding. Tools that support spreadsheet programming should guide users through the process of cre-ating spreadsheets. Spreadsheet programmers struggle with limited support on structuring problems and having minimal guidance on using advanced Excel features (e.g., writing formulas) while creating spreadsheets from scratch, which results in quick-and-dirty spreadsheets. In contrast, templates offer welcome structure.\nBecause prior literature shows that scaffolding tools can improve programmer task performance in a variety of activities [14, 16, 41], we infer that guiding spreadsheet programmers through established processes can achieve their goals more effectively, especially since professional spreadsheet programmers follow a defined process of gathering information, representing information in a schema, developing insight on the data, and creating a knowledge product [60]. For spreadsheet programming, whereby the process inherently creates a knowledge product (i.e., a spreadsheet), spreadsheet programming tools should guide users through the process of: 1) gathering requirements about the spreadsheet table, 2) defining the data schema in data tables, and 3) extracting insights by creating insight tables. For gathering requirements, the tool should elicit the audience and additional context of the spreadsheet such as timescale. To create data tables, the tool should create a schema with the given requirements and generate example rows. To develop insight tables, the tool should suggest and generate analyses to obtain insights from the data.\nDP2: Flexibility. Tools supporting spreadsheet programming should imbue flexibility within the structured process. They should have flexible interactions because spreadsheet development is a highly iterative and nonlinear process. However, spreadsheet programming scaffolding tools are inflexible and require adaptation to become customized to fit the requirements of the programmer. Therefore, we reason that it is important for tools that support spreadsheet programming to provide flexibility to perform actions that fit a programmer's specific context for better task performance.\nDP3: Incrementality. Tools that support spreadsheet programming should build spreadsheets iteratively and incrementally. A drawback to creating spreadsheets from a template is that templates are hard to understand due to their complexity, requiring programmers to spend more time understanding the template. Therefore, tools that support spreadsheet programming should produce understandable outputs that are simple. We infer that incrementally building spreadsheets with programmers in smaller units can result in less manual adaptation of the generated spreadsheets and make the spreadsheet creation easier for the programmer."}, {"title": "6 TableTalk System", "content": "We implement TableTalk, a tool that assists programmers in creating spreadsheet programs in Excel (see Figure 5). We compare TableTalk with other state-of-the-art spreadsheet programming tools in research (i.e., SheetCopilot [43]) and practice (i.e., Excel Copilot, spreadsheet templates) based on the design principles (labeled \"DP\") and features (labeled"}, {"title": "6.2 Design", "content": "To reify the design principles in TableTalk, we leverage language agents since they can achieve the design goals of scaffolding, flexibility, and incrementality. This is because LLMs can autonomously reason through complex tasks and can adapt to feedback in their environment [31, 52, 58, 69], which can provide both scaffolding and flexibility. By leveraging tools (i.e., external modules that complete specific actions) to build atomic components of spreadsheets,"}, {"title": "6.2.1 DP1: Scaffolding.", "content": "We designed TableTalk to scaffold programmers through the structured process that profes-sionals follow to develop knowledge products from data", "F1).\nF1": "Following a plan based on the process of experts. Following prior LLM tools that guide users through expert processes [16, 72"}]}