{"title": "On the Foundations of Conflict-Driven Solving for Hybrid MKNF Knowledge Bases", "authors": ["RILEY KINAHAN", "SPENCER KILLEN", "KEVIN WAN", "JIA-HUAI YOU"], "abstract": "Hybrid MKNF Knowledge Bases (HMKNF-KBs) constitute a formalism for tightly integrated reasoning over closed-world rules and open-world ontologies. This approach allows for accurate modeling of real-world systems, which often rely on both categorical and normative reasoning. Conflict-driven solving is the leading approach for computationally hard problems, such as satisfiability (SAT) and answer set programming (ASP), in which MKNF is rooted. This paper investigates the theoretical underpinnings required for a conflict-driven solver of HMKNF-KBs. The approach defines a set of completion and loop formulas, whose satisfaction characterizes MKNF models. This forms the basis for a set of nogoods, which in turn can be used as the backbone for a conflict-driven solver.", "sections": [{"title": "1 Introduction", "content": "Real-world problems often require integrated reasoning of both rules-based and on-tological knowledge, spanning domains such as customs, healthcare, and penal systems (Knorr 2021; Alberti et al. 2012). For example, in customs, ontological reasoning aids in categorizing imported goods, while rule-based reasoning determines inspection procedures (Knorr 2021). The prevalence of such applications has led to the development of frameworks for reconciling ontologies with rules, including Hybrid MKNF Knowledge Bases (Motik and Rosati 2010). A Hybrid MKNF Knowledge Base (HMKNF-KB) consists of two components: a logic program of rules, such as in answer set programming (ASP), and an ontology representable in a decidable fragment of first-order logic, most often under a description logic. The main feature of HMKNF-KBs, compared to other approaches that combine ASP with description logics, is the tight integration between their two components. Here, tightness refers to the ability of an integration to allow for derivation within one component based on conclusions from the other. For certain applications, a one-way flow of information is sufficient. However, greater tightness results in a richer interplay between two knowledge sources. Some integrations have partial tightness, such as dl-programs (Eiter et al. 2005). While these allow for back-and-forth derivation between two components, it must be localized to"}, {"title": "2 Preliminaries", "content": ""}, {"title": "Minimal Knowledge and Negation as Failure (MKNF):", "content": "MKNF is a nonmonotonic logic formulated by Lifschitz (1991). MKNF formulas extend first-order formulas with two modal operators, K for minimal knowledge, and not for negation as failure. We define a first-order interpretation I as usual and denote the universe of I by |I|. An MKNF structure is a triple (I, M, N), where M and N are sets of first-order interpretations within the universe |I|. The language of MKNF formulas contains a constant for each element of |I|, which we call a name. We define the satisfaction relation between an MKNF structure (I, M, N) and an MKNF formula as follows: \n(I, M, N) \\models \\phi ($\\phi$ is a first-order atom) if $\\phi$ is true in I,\n(I, M, N) \\models \\neg \\phi if (I, M, N) \\nvDash \\phi,\n(I, M, N) \\models \\phi_1 \\land \\phi_2 if (I, M, N) \\models \\phi_1 and (I, M, N) \\models \\phi_2,\n(I, M, N) \\models \\exists x\\phi if (I, M, N) \\models \\phi[a \\ x] for some a,\n(I, M, N) \\models K\\phi if (J, M, N) \\models \\phi for all J $\\in$ M,\n(I, M, N) \\models not \\phi if (J, M, N) \\nvDash $\\phi$ for some J $\\in$ N.\nThe symbols $\\top, \\bot, \\lor, \\forall$, and $\\supset$ are interpreted as usual.\nAn MKNF interpretation M is a nonempty set of first-order interpretations. Throughout this work, we employ the standard name assumption to avoid unintended behaviors (Motik and Rosati 2010). This assumes all interpretations are Herbrand interpretations with a countably infinite number of additional constants, and that the predicate $\\approx$ is a congruence relation. Thus, we do not explicitly mention the universe associated with interpretations.\nAn MKNF interpretation M satisfies an MKNF formula $\\phi$, written M$\\models_{MKNF} \\phi$, if (I, M, M) \\models $\\phi$ for each I$\\in$ M."}, {"title": "Definition 1", "content": "An MKNF interpretation M is an MKNF model of an MKNF formula $\\phi$, if M$\\models_{MKNF} \\phi$, and for all MKNF interpretations M' s.t. M' $\\supset$ M, we have $\\forall$I'$\\in$ M, (I', M', M) \\nvDash $\\phi$."}, {"title": "Hybrid MKNF Knowledge Bases (HMKNF-KBs):", "content": "Motik and Rosati (2010) identify a subset of MKNF formulas as Hybrid MKNF. In this new language, an HMKNF-KB K = (P,O) consists of a finite set of rules termed a rule base P, and an ontology O translatable to first-order logic as $\\pi$(O). A rule r is of the form\n$h_0,..., h_m \\leftarrow p_0,...,p_j, \\neg n_0,...,\\neg n_k$\nwhere $h_i, p_i,$ and $n_i$ are function-free first-order atoms. We denote body+(r) = {$p_0,...,p_j$}, body\u00af(r) = {$n_0,...,n_k$}, Body(r) = $\\bigwedge$body+(r) $\\land \\neg \\bigvee$ body\u00af(r), and head(r) = {$h_0,..., h_m$}. A rule r's semantics is governed by the following MKNF formula.\n$\\pi$(r) = $\\forall$x : (K$h_0$ $\\lor$ ... $\\lor$ K$h_m$) $\\subset$ (K$p_0$$\\land$...$\\land$K$p_j$ $\\land$ not $n_0$$\\land$...$\\land$ not $n_k$)\nwhere is the vector of free variables in r. Naturally, a rule base P translates to an MKNF formula as $\\pi$(P) = Urep$\\pi$(r). We say that an MKNF interpretation M is an"}, {"title": "Definition 2", "content": "A K-interpretation is any set of atoms \u00ce $\\subseteq$ KA(K). An MKNF interpretation M induces a K-interpretation \u00ce, if \u00ce = {a $\\in$ \u039a\u0391(K) | M$\\models_{MKNF}$ Ka}. Whereas, a K-interpretation \u00ce extends to an MKNF interpretation M if M = {I | I $\\models$ OBO,\u00ee}.\nAbove, we use the notation \u00ce to express that as an interpretation in an entailment relation, \u00ce $\\models$ $\\phi$, any atom a $\\in$ KA(K) but not in \u00ce is assigned to false."}, {"title": "Assignments and Nogoods:", "content": "Nogoods (Gebser et al. 2012) act as canonical representations of Boolean constraints, reflecting partial assignments, which cannot be extended to a solution. A nogood {$0_1,...,0_n$}, is a set of literals $o_i$, of the form $T_{v_i}$ or $F_{v_i}$ for 1 $\\leq$ i $\\leq$ n, where $v_i$ is a propositional variable. The complement of a literal, is referred to by $\\overline{T_v} = F_v$ and $\\overline{F_v} = T_v$. For any set \u03b4 of literals, $\u03b4_T$ = {v | Tv $\\in$ \u03b4} and $\u03b4_F$ = {v | Fv $\\in$ \u03b4}. The set of variables occurring within a set of nogoods \u2206, is denoted var(A) = $\\bigcup_{\\delta \\in \\Delta}$ (ST USF). An assignment A for A is any subset of {$T_v, F_v$ | v$\\in$ var(\u0394)} such that $A_T \\cap A_F = 0$. A solution for \u2206 is an assignment A for \u2206, such that $A_T \\cup A_F$ = var(\u25b3) and \u03b4 $\\pounds$ A for all \u03b4\u03b5 \u0394. A nogood d is unit-resulting for an assignment A if |\u03b4 \\ A| = 1. For a literal \u03a4\u03c3 in an assignment, \u03c3 is true within the assignment, whereas for F\u03c3, \u03c3 is false."}, {"title": "3 Dependency Graph", "content": "A guiding principle behind the dependency graph of a logic program is to provide a syntactic overapproximation of the true semantic dependency between atoms within the"}, {"title": "Definition 3", "content": "An ontology dependency graph G(O) for an HMKNF-KB K = (P,O), contains vertices for each atom in KA(O). There is an edge from vertex a to vertex b in G(O) if for some SC KA(O), where a \\notin S and b $\\in$ S, we have\nOBO,S$\\models$a,\nOBO,S$\\nvDash$ \\bot and,\nOBO,S\\{b} \\models a.\n(contributes to derivation)\n(is consistent)\n(is minimal)\nIt is not difficult to see that the ontology dependency graph defined here is an over-approximation of true semantic dependencies based on entailment relation. In addition, there is a unique minimal version of G(O) containing only those edges that are strictly required by its definition. However we do not expect to tractably generate such a dependency graph in general. This is because the ontology of an HMKNF-KB is allowed to take a variety of forms, so dependency graph generation for any particular ontology requires separate study. As such, to keep our apporach general we assume some version of G(O) is provided. To ensure correctness (of overapproximation) the assumed dependency graph must simply contain every edge within the minimal version, in accordance with Definition 3. A similar approach of leveraging externally provided information for dependency pruning is explored within (Eiter and Kaminski 2021), to enhance minimality checking. Similar to (Clark 1977), we call K tight if G(K) is acyclic. We denote by Loops(K) the set of loops of the dependency graph G(K)."}, {"title": "4 Completion and Loop Formulas", "content": "In this section we characterize models of HMKNF-KBs through logical formulas. Our approach follows that of Lee and Lifschitz (2003) who defined completion and loop formulas to capture the answer sets of disjunctive logic programs. While this work is self-contained, we draw frequent comparison to their seminal work to ease understanding."}, {"title": "4.1 Completion", "content": "Lee and Lifschitz (2003) show that an interpretation of a tight disjunctive logic program is an answer set if and only if it satisfies a set of formulas termed the completion. A program's completion is composed of a rule completion, clauses that ensure atoms whose truth is implied must be included in an answer set, and a support completion, clauses that ensure true atoms within an interpretation are supported by some rule.\nThe rule completion of (Lee and Lifschitz 2003) can be easily adopted as follows."}, {"title": "Definition 4", "content": "The rule completion of a rule base P is $P_{rule}$ = {Body(r) $\\supset \\bigvee$ head(r) | r $\\in$ P}.\nThe formula $P_{rule}$ guarantees that for any satisfying K-interpretation \u00ce, atoms implied by the rules of P under \u00ce are contained in \u00ce. We can construct an analogous formula for an ontology O that requires all atoms entailed by O given \u00ce to be within \u00ce. We define this notion as saturation and formulate what we call saturation completion."}, {"title": "Definition 5", "content": "Given an HMKNF-KB K = (P, O), a K-interpretation \u00ce of K is saturated if OBO,\u00ee$\\models$ \u22a5, and Va $\\in$ KA(K) such that OBO,\u00ee$\\models$ a, a$\\in$ \u00ce."}, {"title": "Definition 6", "content": "Let K = (P,O) be an HMKNF-KB. The saturation completion of K, with respect to a K-interpretation \u00ce, is the set Osatr(\u00ce) = {a $\\in$ KA(K) $\\cup$ {\u22a5} | OB0,\u00ee $\\models$ a}."}, {"title": "Lemma 1", "content": "The following are equivalent for a K-interpretation \u00ce.\n\u00ce is saturated.\n\u00ce extends to an MKNF interpretation M which induces \u00ce.\n\u00ce is induced by some MKNF interpretation M such that M$\\models_{MKNF}$ \u039a\u03c0(O).\n\u00ce$\\models$ Osatr (\u00ce).\nOBO,\u00ee$\\nvDash$ a for every atom a$\\in$ (KA(K) $\\cup$ {\u22a5}) \\ \u00ce.\nThe relationship between saturated K-interpretations which satisfy the rule completion and MKNF interpretations is described by the following proposition."}, {"title": "Proposition 1", "content": "For any K-interpretation \u00ce of an HMKNF-KB K = (P, O), \u00ce$\\models$ $P_{rule} \\land Osatr (\u00ce)$, if and only if, there exists an MKNF interpretation M such that M induces \u00ce and M$\\models_{MKNF}$ $\\pi$(\u039a).\nUnlike the rule completion, the support completion of (Lee and Lifschitz 2003) is not immediately adaptable to HMKNF-KBs. This is because their notion of support is based on the idea that atoms must be implied by rules, but applying this idea directly to HMKNF-KBS would be misguided as they combine both rules based and ontological reasoning. We instead define two different notions of support for an atom a occurring within a K-interpretation \u00ce of an HMKNF-KB K = (P, O). Firstly, a is supported by a rule r $\\in$ P, if \u00ce \\models r while \u00ce \\ {a} \\nvDash r. Secondly, a is supported via the ontology O if OBO,\u00ce\\{a} $\\models$ a.\nWe can now specify a formula which ensures that all atoms within a satisfying K-interpretation are supported by either a rule or the ontology."}, {"title": "Definition 7", "content": "The support completion of an HMKNF-KB K = (P,O), w.r.t. a K-interpretation \u00ce, is the set of formulas $K_{sup}$(\u00ce) = {$(\u03b1)$ | a$\\in$ \u039a\u0391(K), OBO,\u00ce\\{a} $\\models$a}, where\n$(\u03b1)$ = a$\\supset$ $\\bigvee_{\\substack{rEP \\ a \\in head(r)}}$ (Body(r) $\\land \\bigwedge_{p\\in head(r)\\{a}}$ p).\nWhen we combine the rule completion, saturation completion, and support completion, we obtain a formula which determines whether a K-interpretation of a tight HMKNF-KB is induced by some MKNF model."}, {"title": "Definition 8", "content": "The completion of an HMKNF-KB K = (P, O) with respect to a K-interpretation \u00ce, is $K_{comp}$(\u00ce) = $P_{rule} \\land Osatr (\u00ce) \\land K_{sup}$(\u00ce)."}, {"title": "Theorem 1", "content": "For any K-interpretation \u00ce of a tight HMKNF-KB K = (P,O), \u00ce $\\models$ $K_{comp}$(\u00ce), if and only if, K has an MKNF model M such that M induces \u00ce."}, {"title": "4.2 Loop Formulas", "content": "The loop formulas of (Lee and Lifschitz 2003) generalize the support completion and allow for the assumption of tightness to be dropped by ensuring that each set of atoms forming a loop has support. We generalize our earlier notion of support to any subset L, of a K-interpretation \u00ce for an HMKNF-KB K = (P, O) as follows. A ruler \u2208 P supports L if \u00ce \\models r but \u00ce \\ L \\nvDash r, whereas L is supported by the ontology O if OBO,\u00ce\\L \\models V L.\nThus, the conversion of loop formulas to the case of HMKNF-KBs, is similar to that for the support completion, instead of requiring that each atom within a K-interpretation is supported, we require that each subset forming a loop within G(K) is supported by either a rule or the ontology."}, {"title": "Definition 9", "content": "The loop formulas of an HMKNF-KB K = (P, O) with respect to a K-interpretation \u00ce, is the set of formulas $K_{loop}$(\u00ce) = {$(L)$ | L$\\in$ Loops(K), OBO,\u00ce\\L \\nvDash\\bigvee L}, where\n$\\psi$(L) = \\bigvee L \\lor (\\bigvee_{\\substack{rEP \\ head(r) \\cap L \\neq 0}}$ (Body(r) $\\land \\bigwedge_{a\\in head(r)\\L}$$\\neg a)).\nWe combine the completion and loop formulas to determine whether a K-interpretation of an arbitrary HMKNF-KB is induced by any MKNF model."}, {"title": "Theorem 2", "content": "For any K-interpretation \u00ce, of an HMKNF-KB K = (P, O), \u00ce $\\models$ $K_{comp}$(\u00ce) $\\land$ $K_{loop}$(\u00ce), if and only if, K has an MKNF model M such that M induces \u00ce."}, {"title": "Proof Sketch", "content": "(\\rightarrow) It can be shown that whenever \u00ce$\\models$ $P_{rule} \\land Osatr (\u00ce)$, it extends to an MKNF interpretation M such that M$\\models_{MKNF}$ $\\pi$(K). Note that M also induces \u00ce in this case."}, {"title": "Example 1", "content": "Consider the following HMKNF-KB K = (P, O), representing whether a person p, is a good candidate for a blood-pressure medication:\nP = $\\{\nr_1 = goodCand(p) \\leftarrow (cand(p), \\neg highRisk(p)).\\nr_3 = highRisk(p) \\leftarrow (riskFactor(p), \\neg risksTreated(p)).\\nr_2 = highBP(p). \\}\nand $\\pi$(0) = {$\\forall$x (highBP(x) \\supset cand(x)) $\\land$ (highRisk(x) \\supset riskFactor(x))}.\nThe ontology states that any person with high blood-pressure is a candidate, and that anyone who is high-risk for the drug has a risk factor. The rule base states that p is a good candidate for the drug if they are a non high risk candidate, that they are high risk if they have a risk factor they have not been treated for, and that they have high blood-pressure."}, {"title": "5 Nogoods", "content": "In what follows, we present sets of nogoods indirectly capturing the constraints induced by the completion and loop formulas of the previous section. Total assignments of these nogoods directly correspond with K-interpretations, and their solutions to those induced by MKNF models. True atoms within an assignment reflect those evaluated as true under the corresponding K-interpretation, and similarly for false atoms. Through this relationship the nogoods characterize MKNF models. As such, conflict-driven approaches can be built on generating a subset of these nogoods.\nIn all definitions of this section, we assume a given HMKNF-KB K = (P, O)."}, {"title": "5.1 Completion Nogoods", "content": "For expressing that the body of a ruler is satisfied, Gebser et al. (2013) use sets of literals of the form \u03b2(r) = {Tp | p $\\in$ body+(r)} $\\cup$ {Fp | p $\\in$ body\u00af(r)}. These are treated as composite variables with an intrinsic meaning. The literal T\u03b2(r) represents Body(r) being satisfied whereas F\u03b2(r) represents its unsatisfaction. This meaning is enforced within solutions by a set of conjunction nogoods to be introduced shortly.\nDirectly following (Gebser et al. 2013), we define a set of rule nogoods corresponding to the rule completion, which in our case ensures that the rule base is satisfied."}, {"title": "Definition 10", "content": "The rule nogood for any r $\\in$ P, is defined as: $\u03c6_P(r)$ = {F$p_1$,..., F$p_t$, T\u03b2(r) | head(r) = {$p_1$,...,$p_t$}}. The rule nogoods of K are \u0424p = {$\u03c6_p$(r) | r $\\in$ P}."}, {"title": "Saturation Nogoods:", "content": "To represent whether an atom p is supported by the ontology, we use the variable Bo(p). Within an assignment, TBo (p) represents that p is supported via O, and FBo(p) represents that it is not. This is enforced within solutions by a set of entailment nogoods to be introduced shortly.\nTo express that a solution must be reflective of a saturated K-interpretation, we introduce a novel set of saturation nogoods corresponding to the saturation completion."}, {"title": "Definition 11", "content": "The saturation nogood for any atom p$\\in$ KA(0) $\\cup$ {\u22a5}, is defined as: $\u03c6_0(p)$ = {Fp, TBo(p)}. The saturation nogoods of K are \u0424\u043e = {$\u03c6_0$(p) | p$\\in$ KA(0) $\\cup$ {\u22a5}}."}, {"title": "Support Nogoods:", "content": "To reflect whether an atom p is supported by a rule r, we use literal sets of the form \u03b2p(r,p) = {T\u03b2(r)} $\\cup$ {Fq | q $\\in$ head(r) \\ {p}}, as is done in (Gebser et al. 2013).\nThe truth of literals based on these sets are also enforced by conjunction nogoods.\nWe introduce a novel set of support nogoods corresponding to the support completion, to prevent cases where there is no support from a rule or the ontology for some true atom within an assignment."}, {"title": "Definition 12", "content": "The support nogood for any atom p$\\in$ \u039a\u0391(K), is defined as\n\u03c8\u03ba(p) = {Tp} $\\cup$ {F\u03b2p(r, p) | r $\\in$ P,p $\\in$ head(r)} $\\cup$ {FB0(p) | if p$\\in$ KA(O)}.\nThe support nogoods of K, are \u03a8\u03ba = {\u03c8\u03ba(p) | p$\\in$ KA(K)}."}, {"title": "Conjunction Nogoods:", "content": "As aforementioned, conjunction nogoods are required to ensure that composite variables consisting of other literals are assigned correctly within solutions. Here, we directly follow (Gebser et al. 2013)."}, {"title": "Definition 13", "content": "The conjunction nogoods for a set of literals \u03b2 are $\u03b3_\u03c1(\u03b2)$ = {{FB}UB}\u222a{{TB,\u03c3}|\u03c3$\\in$\u03b2}.\nThe conjunction nogoods of K are Fp = $\\bigcup_{\\beta \\in {\\beta(r)\r\\in P} \\cup {\\beta_p(r,p)|r \\in P, p\\in head(r)}}$ $Y_\u03c1(\u03b2)$."}, {"title": "Entailment Nogoods:", "content": "To ensure the literals of the form TBo (p) or FBo (p) appear within assignments in accordance with whether p is supported via the ontology, we introduce entailment nogoods."}, {"title": "Definition 14", "content": "Let Bo(p) be a variable associated with an atom p $\\in$ KA(O). A positive entailment nogood, of an atom p $\\in$ KA(O) and set S$\\subseteq$ KA(O), is defined as $\u03b3_0^+(p, S)$ = {FBo(p)}U {Ts | s$\\in$ S}, whereas a negative entailment nogood, is defined as $\u03b3_0^-(p, S)$ = {TBo(p)}U {Fs | s $\\in$ S}. The entailment nogoods of K are\nU\n\u0413\u043e ={$\u03b3_0^+(p, S)$ | p$\\in$ KA(O) $\\cup$ {\u22a5}, S$\\subseteq$ KA(O), OBO,S\\{p} \\models p}\nU {$\u03b3_0^-(p, S)$ | p$\\in$ KA(O), S$\\subseteq$ \u039a\u0391(\u039f), \u039f\u0392\u039f,\u039a\u0391(0)\\(SU{p}) \\nvDash p}.\nFor some atom p$\\in$ KA(O) and set of atoms S $\\subseteq$ KA(O), the purpose of a positive entailment nogood yo(p, S) is to indicate that p is supported via O by true atoms within an assignment, given it has all atoms in S as true. Conversely, the purpose of a negative entailment nogood $\u03b3_0^-(p, S)$ is to indicate that p has no way of being supported via O by true atoms within an assignment, given it has all atoms in S as false."}, {"title": "Relation to MKNF Models:", "content": "So far we have discussed the relationship between assignments and K-interpretations using general language. The exact correspondance is given by the following definition."}, {"title": "Definition 15", "content": "Let \u00ce a K-interpretation for K. The induced assignment of \u00ce for Kis\nA = {Tp | p$\\in$ \u00ce} $\\cup$ {Fp | p$\\in$ KA(K) \\ \u00ce} $\\cup$ {FI}\nU {T\u03b2(r) | r$\\in$ P, \u00ce \\models Body(r)} $\\cup$ {F\u03b2(r) | r$\\in$ P, \u00ce \\nvDash Body(r)}\nU {T\u03b2p(r,p) | r$\\in$ P, \u00ce \\models Body(r), head(r) $\\cap$ (\u00ce $\\cup$ {p}) = {p}}\nU {F\u03b2p(r,p) | r$\\in$ P, \u00ce \\nvDash Body(r), p $\\in$ head(r)}\nU {F\u03b2p(r, p) | r$\\in$ P, p $\\in$ head(r), head(r) $\\cap$ \u00ce \\pounds {p}}\nU {TBo(p) | p$\\in$ \u039aA(0) $\\cup$ {\u22a5}, OB0,\u00ce\\{p} \\models p}\nU {F\u03b2o(p) | p$\\in$ KA(0) $\\cup$ {\u22a5}, OB0,\u00ce\\{p} \\nvDash p}."}, {"title": "Definition 16", "content": "The completion nogoods of $\\pi$(K) are\n\u0394\u03ba = \u03a6\u03a1\u222a\u03a6\u039f U \u03a8 \u03ba U \u0393\u03c1\u222a\u0413\u041e."}, {"title": "Theorem 3", "content": "Let \u00ce be a K-interpretation for an HMKNF-KB K = (P,O), then we have that \u00ce \\ Kcomp(\u00ce) if and only if Al is a solution to \u2206x \u222a {T\u22a5}."}, {"title": "5.2 Loop Nogoods", "content": "Loop nogoods are intended to parallel the loop formulas of Section 4.2 in ensuring non-circular support. Directly following (Gebser et al. 2013), we denote the external program supports of a set of atoms L, by Ep(L) = {r $\\in$ P | head(r) $\\cap$ L = (\u00d8), body+(r) $\\cap$ L \\neq 0}.\nMoreover, p(r, L) = {FB(r)} $\\cup$ {Tp | p$\\in$ head(r) \\ L}, collects all literals satisfying a rule r, regardless of whether any atom from L is true."}, {"title": "Definition 17", "content": "The loop nogoods for any L$\\subseteq$ KA(K) and S $\\subseteq$ KA(O) are defined as\n$\u03bb_\u039a$(L, S) = {{Tp, \u03c31,..., \u03c3k, F$s_1$,...,F$s_n$}| p$\\in$ L, Ep(L) = {$r_1$,...,$r_k$},\n$\u03c3_1$ $\\in$ $\u03c1(r_1, L)$, ..., $\u03c3_k$ $\\in$ $\u03c1(r_k, L)$, S = {$s_1$,..., $s_n$}}.\nThe loop nogoods of K are\n$\u0391_\u039a$ =  $\\bigcup_{\\substack{L\\in Loops(K), S\\subseteq KA(O), \\ LN S=0, OBO,KA(O)\\(SUL) \\nvDash\\bigvee L}} \u03bb_\u03ba(L, S)$.\nAbove, Ak includes a nogood for each loop, L, and subset of KA(O), S, for which L cannot be supported via O whenever all atoms in S are false. Each nogood (L, S) requires that the loop L must be supported by a rule if all atoms in S are false. We can show that loop nogoods occur only within assignments induced by K-interpretations which do not satisfy their loop formulas, to obtain the following result."}, {"title": "Theorem 4", "content": "Let \u00ce be a K-interpretation for an HMKNF-KB K = (P,O), then we have that \u00ce \\ $K_{comp}$(\u00ce) $\\land K_{loop}$(\u00ce) if and only if Al is a solution to $\u0391_K \\cup AK \\cup$ {T\u22a5}."}, {"title": "Proof Sketch", "content": "(\\rightarrow) It can be shown relatively easily that Ak, the assignment \u00ce induces, is a total assignment for the nogoods \u0394\u0136U AKU {\u22a5}.\nThe other condition which must be shown is that no nogood from \u0394\u0136U AKU {\u22a5} occurs within A. This is done by considering each of \u0424\u0440, \u0424\u043e, \u03a8\u043a, \u0413\u043e, \u0413\u0440, and \u0410\u043a individually. For each of nogood set \u2207 we make the assumption that d$\\in$ \u2207 is a subset of A, then show that the restrictions this imposes on \u00ce also imply that for some literal \u03c3\u03b5 \u03b4, \u03c3\u03b5 A\u0390. This contradicts that Al A is a total assignment and in doing so proves no such nogood can exist.\nFor example: Assume there is a nogood yo(p, S) $\\in$ \u0393\u03bf for p $\\in$ \u039aA(O) U {\u22a5}, S C \u039a\u0391(0) such that yo(p, S) \\subseteq A. Then by the fact that yo(p, S) $\\in$ \u0393o, OBO,S\\{p} $\\models$ p, moreover since (p, S) = {FB0(p)} $\\cup$ {Ts | s $\\in$ S} and yo(p, S) \\subseteq A, S C Ak. Therefore OBO,\u00ce\\{p} $\\models$ p as well, so TBo(p) $\\in$ A. This contradicts the fact that Al is a total assignment proving that no such yo(p, S) exists. The inverse logic can be applied to show that no nogood \u03b3\u03bf (p, S) $\\in$ \u0393\u03bf for p $\\in$ \u039a\u0391(O), S C KA(O) can occur in Af.\n(\\leftarrow) We wish to show that I must satisfy all of $P_{rule}, Osatr (\u00ce), K_{sup}(\u00ce)$, and $K_{loop}(\u00ce)$. To do so we consider the case where \u00ce fails to satisfy each of them individually, and show that it would require a nogood to exist within Ak, violating the inital assumptions.\nFor example: Assume that \u00ce \\neq Ksup(\u00ce). Clearly there is some atom p$\\in$ \u00ce such that OBO,\u00ce\\{p} $\\models$ p for which for all r$\\in$ P where p$\\in$ head(r) \u00ce \\nvDash Body(r) or \u2203a$\\in$ head(r) \\ {p} such that a$\\in$ \u00ce. From p$\\in$ \u00ce, Tp$\\in$ A. From OBO,\u00ce\\{p} $\\models$ p, either \u0440$\\in$ (\u039a\u0391(\u039a) \\ \u039a\u0391(O)) or F\u03b2\u03bf$\\in$ A. Finally, since for all r$\\in$ P where p$\\in$ head(r), \u00ce \\nvDash Body(r) or \u2203a$\\in$ head(r) \\ {p} such that a$\\in$ \u00ce, F\u03b2p(r,p) $\\in$ A. It follows that \u03c8\u03ba(p) \\subseteq Ak, since \u03c8\u03ba(p) $\\in$ \u03a8\u03ba this violates the assumption that Ar Ark is a solution for \u0394\u03ba. Therefore \u00ce \\ Ksup(\u00ce)."}, {"title": "Example 2", "content": "Consider the following HMKNF-KB K = (P,O) where only the K-interpretation \u00ce = {a,b} is induced by any MKNF model.\nP =\\{\nr\u2081 = a.\\nr\u2082 = a V d.\\nr\u2083 = f \u2190 d. \\nr\u2084 = e \u2190 f.\\}\nand $\\pi$(0) = {($\\neg$a$\\lor$b)$\\land$($\\neg$c$\\lor$d) $\\land$ (c$\\supset$e) $\\land$ (e$\\supset$f)}."}, {"title": "6 Conflict-Driven Solving", "content": "A conflict-driven solver which determines K-interpretations induced by MKNF"}]}