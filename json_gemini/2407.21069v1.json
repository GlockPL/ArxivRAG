{"title": "High-Dimensional Fault Tolerance Testing of Highly Automated Vehicles Based on Low-Rank Models", "authors": ["Yuewen Mei", "Tong Nie", "Jian Sun", "Ye Tian"], "abstract": "Ensuring fault tolerance of Highly Automated Vehicles (HAVs) is crucial for their safety due to the presence of potentially severe faults. Hence, Fault Injection (FI) testing is conducted by practitioners to evaluate the safety level of HAVs. To fully cover test cases, various driving scenarios and fault settings should be considered. However, due to numerous combinations of test scenarios and fault settings, the testing space can be complex and high-dimensional. In addition, evaluating performance in all newly added scenarios is resource-consuming. The rarity of critical faults that can cause security problems further strengthens the challenge. To address these challenges, we propose to accelerate FI testing under the low-rank Smoothness Regularized Matrix Factorization (SRMF) framework. We first organize the sparse evaluated data into a structured matrix based on its safety values. Then the untested values are estimated by the correlation captured by the matrix structure. To address high dimensionality, a low-rank constraint is imposed on the testing space. To exploit the relationships between existing scenarios and new scenarios and capture the local regularity of critical faults, three types of smoothness regularization are further designed as a complement. We conduct experiments on car following and cut in scenarios. The results indicate that SRMF has the lowest prediction error in various scenarios and is capable of predicting rare critical faults compared to other machine learning models. In addition, SRMF can achieve 1171 acceleration rate, 99.3% precision and 91.1% F1 score in identifying critical faults. To the best of our knowledge, this is the first work to introduce low-rank models to FI testing of HAVs.", "sections": [{"title": "I. INTRODUCTION", "content": "Highly Automated Vehicles (HAVs) can greatly improve the safety, mobility, and efficiency of transportation [1]. However, ensuring the safety performance and resilience of HAVs has been a long-standing concern due to fatal accidents caused by HAVs. HAVs can be vulnerable and dangerous when exposed to faults caused by malicious attackers [2] or system malfunctions [3]. Malicious attackers are interested in creating a potential accident by tampering with the data in HAVs without authorization. For example, corrupting the hardware or software to force the HAVs to deviate from the lane [4]. Meanwhile, system malfunctions are frequently posed in complex HAVs. These minor faults can lead to severe consequences, such as collisions with obstacles. Hence, Fault Injection (FI) testing becomes a necessary verification and validation methods for HAVs [5]."}, {"title": "II. RELATED WORKS", "content": "Safety testing is crucial for HAVs before large-scale deployment. There are three verification and validation methods for HAV safety testing: scenario-based testing, formal verification, and FI testing [5]. However, testing scenarios and faults consist of a high-dimensional space and randomly selecting scenarios or faults for testing is inefficient [12]. Accordingly, to accelerate the HAVs safety testing process, surrogate models have been widely used.\nSurrogate models can approximate the testing results, thus saving tremendous testing resources, such as searching for critical faults [7], [13], finding faulty behavior from the parameter space [14], identifying high-risk scenarios [8], and discovering safety performance boundaries [15], [16]. Based on the summary of the machine learning methods commonly used as surrogate models, [17] compares the strengths and weaknesses of various surrogate models. However, the comparison clearly shows that Decision Trees, Random Forrest, Gradient Boosted Trees (such as Extreme Gradient Boosting), and Neural Networks are prone to overfitting. This leads to the surrogate models performing poorly in new scenarios that have not been tested before.\nLow-rank models are widely adopted to reconstruct high-dimensional data with low-dimensional structures. This kind of model assumes the algebraic structures of the observations and can reconstruct the unobserved data in a self-supervised way, without the need to collect a large amount of labeled training data. For example, visual data can be organized into a three-dimensional tensor, and missing pixels can be recovered with a low-rank solution. [9]. In the field of spatiotemporal traffic data, low-rank models garnered great interest in missing data imputation problems. Representative methods include tensor factorization [18], nuclear norm minimization [19], and matrix factorization [20]. In addition, they can be integrated with advanced machine learning frameworks to tackle more challenging tasks, such as deep learning architectures [21]\u2013[23] and surrogate modeling [24]."}, {"title": "III. PROBLEM FORMULATION", "content": "This paper considers three types of scenarios: functional scenario, logical scenario, concrete scenario in the scenario-based testing [25]. The functional scenario describes the participants and their behaviors within the scenario. The logical scenario parameterizes the scenario, by giving the definition, distribution, and range of the parameters. Then, in the concrete scenario, these parameters are precisely defined.\nWe denote k types of functional scenarios as \\(P_1, P_2, ..., P_k\\) and each functional scenario \\(P_i\\) has a parameter space containing \\(n_i\\) parameters, which correspond to \\(n_i\\) types of concrete scenarios denoted as \\(p_{i,n}\\). Then we have:\n\\(|P_i| = n_i, \\forall i = 1, 2, ..., k\\)\n\\(P_i = \\{p_{i,1}, p_{i,2},..., p_{i,n_i} \\}\\) \nTherefore, there are K concrete scenarios to be tested under fault injection in total.\n\\(K = \\sum_i^k n_i\\)\nThe fault space in a concrete scenario can consist of the fault value, the injection time, the duration and the location of the fault [7], [26], [27]. In this work, two fault parameters are considered: fault value and fault injection time, because their values are more diverse and form a higher-dimensional fault space denoted by a matrix F. The number of types of fault value and fault injection time is denoted as I, J respectively.\n\\(F =\n\\begin{bmatrix}\nf_{00} & f_{01} & ... & f_{0J} \\\\\nf_{10} & f_{11} & ... & f_{1J} \\\\\n... & ... & ... & ...\\\\\nf_{I0} & f_{I1} & ... & f_{IJ}\n\\end{bmatrix}\\)\nCritical faults are defined as faults that result in severe consequences, such as a collision with other vehicles. The safety impact of the fault \\(f_{ij}\\) is marked as the safety indicator \\(x_{ij}\\). \\(x_{ij}\\) equals to the negative value of Time To Collision (TTC) when no collision occurs and the severity of the collision when a collision occurs [7]. Therefore, all critical faults \\(F_{critical}\\) can be marked as the set of all faults with a safety indicator larger than 0.\n\\(F_{critical} = \\{f_{ij}|x_{ij} > 0\\}\\)\nTo thoroughly test the fault tolerance of HAVs, it is important to find \\(F_{critical}\\) in the K scenarios."}, {"title": "IV. METHODOLOGY", "content": "The K scenarios can be divided into partially tested scenarios (existing scenarios) and completely new scenarios. In the concrete scenarios of functional scenario \\(P_i\\), suppose that the proportion of faults that have been tested to the entire fault space is \\(r_i\\). Meanwhile, only part of the concrete scenarios in \\(P_i\\) are tested, and others are not tested at all. The existing concrete scenarios are distributed at equal intervals. For example, with an interval of 3, the proportion of tested faults in different concrete scenarios is:\n\\((r_{i,1}, r_{i,2}, r_{i,3}, r_{i,4}, r_{i,5}, ...) = (r_i, 0, 0, r_i, 0, ...)\\)\nTo capture the relationship between existing scenarios and new scenarios from the two fault dimensions, the IJ faults injected into the K scenarios are folded as illustrated in Fig. 2. The scenarios are arranged by one fault parameter: fault injection time. For example, in the first part of the folded matrix, the fault injection time is the same while there are K types of scenarios with I types of fault value. Therefore, the safety indicators of different scenarios and faults can be formed as a matrix \\(X \\in R^{I \\times (JK)}\\). The rows correspond to the I types of fault value, and the columns correspond to K scenarios with J types of injection time.\nThe index set of the scenarios and faults that have been tested in X is denoted as \u03a9. Therefore, the observed values in the matrix can be represent by a sampling operator: \\(P_\\Omega(X)\\):\n\\([P_\\Omega(X)]_{i,m} =\n\\begin{cases}\nY_{i,m}, & \\text{if } (i, m) \\in \\Omega, \\\\\n0, & \\text{otherwise},\n\\end{cases}\\)\nwhere \\(i = 1,..., I\\) and \\(m = 1,..., JK\\).\nIn standard Low-Rank Matrix Factorization (MF) method, X is calculated by factorizing it into two low-rank factor matrices: \\(W \\in R^{R \\times I}\\) for rows and \\(H \\in R^{R \\times M}\\) for columns, where \\(M = JK\\), \\(R \\leq \\text{min}(I, M)\\). Then, we can estimate the complete matrix X from the low-rank matrix \\(W^TH\\) with a reconstruction loss on the observed points:\n\\(\\underset{W,H}{\\text{min}} \\frac{1}{2}||P_\\Omega(X - WH^T)||^2_F + \\frac{\\rho}{2} (||W||^2_F + ||H||^2_F)\\)\nwhere \u03c1 is the weight parameters for regularization terms.\nThe rationale for low-rank models is to reconstruct the dominating features of the space. Both the scenario parameters and the fault parameters change successively. The safety indicators obtained by simulation testing with adjacent parameters are similar to each other. Then, the correlation in the high-dimensional testing space is significant. Therefore, low-rank assumptions can encourage the estimation of dominating patterns of fauthuse, thereby predicting the safety values of untested faults.\nThe MF model can capture the global pattern of the whole fault matrix. However, the local correlation within fault values (between adjacent rows) and fault injection time, scenarios (between adjacent columns) are neglected. To describe the local correlation, we add smoothness regularization and auto-regression in MF.\nThe fault injection time ranges from the beginning to the end of the scenario at a fixed time step, and the scenario parameters is similar in adjacent scenarios. The safety indicators are smoothly varied from one parameter to another. Therefore, in the columns representing scenarios and fault injection times, two smoothness regularization are designed to preserve the continuity between adjacent scenarios and adjacent fault injection time separately. We first formulate two difference operators as follows:\n\\(\\Psi_{r1} = [0_{(M-1)\\times 1}I_{M-1}] - [I_{M-1}0_{(M-1)\\times 1}]\\)\n\\(\\Psi_{r2} = [0_{(M-K)\\times K}I_{M-K}] - [I_{M-K}0_{(M-K)\\times K}]\\)\nwhere \\(\\Psi_{r1}\\) represents the index of two adjacent scenarios with the same fault injection time. \\(\\Psi_{r2}\\) signifies the index of two adjacent fault injection times of a single scenario.\nAccordingly, the difference of safety values in H can be formed as:\n\\(H\\Psi_{r1} = [h_2 - h_1 | ... | h_M - h_{M-1}]\\)\n\\(\nH\\Psi_{r2} = [h_{K+1} - h_1 | ... | h_M - h_{M-K}]\\)\nIn the rows representing fault values, the auto-regression is applied to consider the index-lagged correlation between fault values in W:\n\\(w_i = \\sum_{u=1}^l T_u w_{i-u} + \\epsilon_i, i = l + 1, l + 2, ..., I\\)\nwhere \\(w_i\\) is the i-th vector in W, \\(T_u\\) is the coefficient matrix of auto-regression, l is the order of auto-regression, \\(\\epsilon_i\\) is the residual vector.\n\\(\\Psi_u = [0_{(I-l)\\times (l-u)}I_{I-l}0_{(I-l)\\times u}]\\)\nThen, the auto-regression between variates can be formulated as:\n\\(W^T W \\approx \\sum_{u=1}^l W^T \\Psi_u T_u W\\)\nTherefore, the row- and column-wise smoothness regularization is added to Eq. 7:\n\\(\\underset{W,H,T_u}{\\text{min}} \\frac{1}{2}||P_\\Omega(X - WH^T)||^2_F + \\frac{\\rho}{2} (||W||^2_F + ||H||^2_F)\n+ \\frac{\\lambda_1}{2} ||H \\Psi_{r1}||^2_F + \\frac{\\lambda_2}{2} ||H \\Psi_{r2}||^2_F\n+ \\frac{\\lambda_3}{2} \\sum_{u=1}^l ||W^T \\Psi_u T_u W||\\)\nwhere \\(\\lambda_1, \\lambda_2, \\lambda_3\\) are the coefficients of the row and column smoothness regularization respectively.\n addresses the newly added scenario problem and the rare critical fault problem.\nThe convex optimization problem in Eq. (15) can be solved by the alternating minimization algorithm [28], [29]. Then, the complete fault matrix X can be obtained to estimate the safety indicator of the untested scenarios and faults, thus saving the time cost of conducting the simulation."}, {"title": "V. CASE STUDY", "content": "To verify the effectiveness of SRMF, two functional scenarios are tested: cut in (denoted as \\(P_1\\)) and car following (denoted as \\(P_2\\)) in our experiment, as shown in Fig. 3. In the car following scenario, the blue vehicle 1 behind controlled by HAV follows the leading vehicle 2. While in the cut in scenario, vehicle 2 controlled by HAV in the left lane preparing to change lanes in front of vehicle 1.\nThe HAVs are controlled with the Intelligent Driver Model (IDM) and the IDM parameter is the same as that calibrated and defined in [8].\nThe fault space and the concrete scenario space are shown in TABLE I, that is, I = 50, J = 50, \\(n_1\\) = 9, \\(n_2\\) = 10, K = 19. The initial distance is the longitudinal distance between vehicle 1 and vehicle 2. Other scenario parameters are set to fixed values in this experiment. The interval of existing concrete scenarios is 2 in cut in scenario and 3 in car\nfollowing scenario. Meanwhile, the tested faults proportion is set as: \\(r_1\\) = 0.2,\\(r_2\\) = 0.1. The simulation testing results of the entire testing space, the sparse simulation testing results with a few tested faults are depicted in the left side of Fig. 4. Scenario from # 0 to # 8 are cut in scenario and scenario from # 9 to # 18 are car following scenario. Scenario # 1, 3, 5, 7, 10, 11, 13, 14, 16, 17 are newly added scenarios without any simulations. Scenarios # 0,2,4,6,8 are the tested cut in scenarios with 20% faults tested and scenarios # 9, 12, 15, 18 are the tested car following scenarios with 10% faults tested.\nThe hyper parameters in SRMF are specified as follows. \\(\\lambda_1\\) is set to 1, \\(\\lambda_2\\) is set to 1, and \\(\\lambda_3\\) is set to 10. \u03c1 is set to 0.01 and the rank of the matrix is 10. We set the maximum number of iterations as 150.\nWe take other surrogate models used in HAVs safety testing [7], [8], [16], including Multi-layer Perception (MLP), Extreme Gradient Boosting (XGB), K-Nearest Neighbor Regression (KNN), Radial Basis Functions (RBF), Support Vector Regression (SVR) as the baseline models. The structure and hyper parameters of MLP is the same as that in [16]. The hyper parameters of XGB, KNN, SVR, RBF are adjusted according to [8]. The prediction error, including the Mean Absolute Error (MAE), the Weighted Mean Absolute Percentage Error (WMAPE), of safety indicator X and precision, F1 score of critical faults \\(F_{critical}\\) are used as evaluation metrics.\nThe time cost to simulate the untested car following and cut in testing space (44,462 types of scenarios and faults combinations) is 1875 s. In comparison, it only takes 1.6 s for SRMF to calculate these results. The acceleration rate of SRMF can reach 1171 times.\nSRMF outperforms other surrogate models in all scenarios. It can be observed from Fig. 4 and TABLE II: 1) the prediction results of KNN, RBF and SVR are obviously different with the simulation results, with the largest prediction error. 2) SRMF, MLP and XGB can predict the feature of each scenarios basically, which is similar to simulation results in both the existing and new scenarios, the cut in and car following scenarios. 3) in the evaluation metrics of all scenarios, SRMF having the smallest MAE and WMAPE, the highest precision and F1 score. The precision can achieve 99.3% and the F1 score is 91.1%.\nIn new scenarios, SRMF has the best generalization ability. To clearly compare the performance of these models in new scenarios, the prediction errors of existing and new scenarios are also shown in TABLE II. The detailed metrics in each scenario of SRMF, MLP and XGB are displayed in Fig. 5. It can be seen from Fig. 5 that SRMF, MLP and XGB perform better in existing scenarios than in new scenarios. However, MLP and XGB changes more dramatically and SRMF is more stable. The MAE of XGB in new scenarios increases by more than 103% over the MAE in existing scenarios, which echo the shortcoming we conclude previously in the Introduction section that the prevailing methods overfit in the existing scenario but their generalizability is relatively low. Moreover, the precision and F1 score of SRMF can still achieve 100% and 86.3% in new scenarios.\nThe critical fault rate is calculated by dividing the number of critical faults by the total number of fault types in this concrete scenario. As shown in Fig. 5, the critical fault rate decreases as the initial distance increases. Here, we take 10% as the threshold to define rare critical faults.\nTaking scenario # 6 as an example, the simulation and prediction results are shown in Fig. 6. There are critical faults in the upper left (colored dark blue). SRMF also predicts these areas as critical faults with 80.0% F1 score, while MLP with 66.67% F1 score and XGB does not predict any critical faults.\nTABLE III and Fig. 5 demonstrate the precision and F1 score of rare critical faults. In the cut in scenario, XGB fails to search for critical faults and the F1 score equals to 0. MLP fails in scenario # 7,8. However, SRMF still finds critical faults with 100% precision and the F1 score can achieve 80.0% in the two tested scenarios. In the car following scenario, XGB fails in scenario # 17, 18, but SRMF also succeeds in finding some rare critical faults."}, {"title": "VI. CONCLUSIONS", "content": "Fault tolerance testing of HAVs is important and should be accelerated for the rapid development of HAVs due to the high-dimensional problem caused by numerous scenarios and faults. Surrogate models commonly employed to accelerate testing are prone to overfit in existing scenarios and might not detect rare critical faults. To overcome these problems, a new accelerated FI testing method based on SRMF is proposed. SRMF solves the high-dimensional problem by imposing the low-rank constraint and uses correlation between faults and scenarios to tackle the newly added scenario and the rare critical fault problem. It turns out that SRMF can perform well in new scenarios and is capable of identifying rare critical faults. The precision of SRMF is higher than 99% and the acceleration rate can reach 1171 times.\nThere are also several directions to explore in future research. First, the details of SRMF can be improved to tackle larger dimensions with more types of scenarios and faults. Second, SRMF, which acts as a surrogate model, can be combined with other existing method in HAVs safety acceleration testing to find more rare critical faults."}]}