{"title": "F\u00c6RDXEL: An Expert System for Danish Traffic Law", "authors": ["Lu\u00eds Cruz-Filipe", "Jonas Vistrup"], "abstract": "We present F\u00c6RDXEL, a tool for symbolic reasoning in the domain of Danish traffic law. F\u00c6RDXEL combines techniques from logic programming with a novel interface that allows users to navigate through its reasoning process, thereby ensuring the system's trustworthiness. A preliminary empirical evaluation indicates that this work is seen as very promising, and has the potential to become a foundation for real-world AI tools supporting professionals in the Danish legal sector.", "sections": [{"title": "Introduction", "content": "The release of ChatGPT in late 2022 sparked a global desire to integrate data-driven Artificial Intelligence (AI), based on sophisticated modern machine-learning techniques, into as many do-mains as possible. However, some domains seem resistant to integrating this type of AI into their workflow. For some domains, machine learning is not a suitable approach, and for others, there is an established skepticism to the technology.\nThe domain of law exhibits both types of resistance. Firstly, in many legal systems, there is a requirement for an explanation of judgments [2], and it is not clear from precedent whether the explanation has to be the specific reason for the judgments or just a possible reason behind the judgment. It can be argued that machine learning techniques, in their current form of generative and deep neural networks, can only to provide the latter. Secondly, legal systems are traditionally based on discussion and argumentation, which clashes with AI systems that can only provide definitive answers without any form of justification.\nOne possible approach to overcome these issues is to revert to more traditional forms of AI, in the form of expert systems. Expert system provide symbolic reasoning using theoretically understood, sound inference algorithms and a knowledge base. They also can provide a trace of their inference process, allowing us to scrutinize the reasoning behind its answers and even in some sense argue with the system. However, the knowledge base must typically be tailored for the specific application in mind, so that the system can reason within the domain of that application in a similar to how an expert might reason. This makes building expert systems very time-consuming. Another known limitation is that expert systems typically suffer from an interface problem, and using them often requires dedicated training - severely limiting their widespread usage.\nThis work. We present F\u00c6RDXEL,\u00b9 an expert system designed to assist legal experts working with cases regarding possible violations of Danish traffic law. Specifically, F\u00c6RDXEL looks for arguments supporting that a defendant has broken specific paragraphs of the Danish traffic law, both taking into account the law itself and similar cases that may be relevant. The goal of F\u00c6RDXEL is not to make any decisions, but rather to provide meaningful and extensive input to those agents who will actually make the decisions in the same way that a legal aid would."}, {"title": "Related Work", "content": "Research into expert systems and applications flourished in the 1980s, and this effort included also applications to the legal domain. However, this direction of research started to slow down in the 2000s, and since 2010, to the best of our knowledge, there have only been few publications in the domain if expert systems for law [6]. An interesting exception, dating from 2016, is an article on an expert system for Islam inheritance law [1].\nDevelop of expert system applications for the legal domain go as far back to 1977, with the creation of TAXMAN [12], an expert system for answering questions about US taxation for cor-porate reorganization. This work paved the way for several subsequent expert system, such as: CHIRON [17], for planning actions that could decrease income tax according to US law.; Split up [19], which dealt with Australian law on property division after divorce; and ASHSD-II [14], focusing on US law on property division after divorce.\nAll of these applications focus on very specific subdomains within already specific legal domains: TAXMAN on the subdomain of corporate reorganization within US taxation, CHIRON on the subdomain of income tax within US tax codes, and both Split up and ASHSD-II on the subdomain of property division (although in different overarching domains, as Split up deals with Australian divorce law and ASHSD-II with US divorce law). In contrast, F\u00c6RDXEL reasons on the whole of Danish traffic law, instead of being restricted to a subdomain like parking laws or driving laws. The tool is also designed such that additional laws can be added to the scope of the tool's knowledge.\nOther applications have aimed at a broader approach by allowing for reasoning within arbitrary legal domains. SHYSTER [15] is an expert system for providing and arguing similarities and differences between cases. It provided a framework for inputting knowledge about any legal case in any domain. In contrast to our work, however, SHYSTER did not contain knowledge about laws and was unable to reason about legal consequence. This was rectified in SHYSTER-MYCIN [13], which combined SHYSTER with a knowledge base. The resulting system SHYSTER-MYCIN is"}, {"title": "Background", "content": "This section covers the necessary knowledge needed to understand the remainder of our work. We discuss the logical language Datalog, which we use to represent the knowledge inherent in Danish traffic law, and briefly summarize the key concepts of SLD-resolution, which we use to deduce answers to queries on the knowledge base. Lastly, we provide a brief description of the Danish court system."}, {"title": "Datalog", "content": "Datalog is the negation-free and function-free fragment of Prolog. The basic formulas of Datalog are called atoms. Each atom describes a relation between objects. All atoms are on the form of $P(t_1, t_2,...,t_n)$ where $P$ is a predicate describing the type of relation and $t_1$ through $t_n$ are all terms given as an argument for the predicate $P$. A term can either be a constant or a variable. A constant denotes a specific known object, and a variable denotes some unknown object. A substitution is a function mapping variables to terms, and the result of applying a substitution to a formula is computed by simultaneously replacing each variable by its value according to the substitution. The result of applying a substitution $\\theta$ to a formula $\\alpha$ is written $\\alpha\\theta$.\nExample 1. Consider trying to describe the information that \"Steven Spielberg was driving his Aston Martin this morning at a quarter past 10\". To encode this knowledge in Datalog, we first need to specify the predicate and its format. We can call the predicate specifying the relation Driving as the relation is between a person, the car they are driving and at what time. Next we need to select a representation of the objects in the relation, for example, denoting \"Steven Spielberg\" by the object steven, his car by aston martin, and \"this morning at a quarter past 10\" by 10:15. Using this notation we can represent \"Steven Spielberg driving his Aston Martin this morning at a quarter past 10\" as Driving(steven, aston martin, 10:15).\nA Datalog program is a set of rules (also called clauses). Each rule is in the format\n$\\alpha \\leftarrow \\beta_1, \\beta_2, ..., \\beta_n$\nwhere $\\alpha$ and $\\beta_1$ through $\\beta_n$ are atoms. The semantic understanding of the statement is if $\\beta_1$ through $\\beta_n$ (the premises) holds then $\\alpha$ (the conclusion) holds. If $n = 0$ then the rule simply states that $\\alpha$ holds, and is called a fact."}, {"title": "SLD-resolution", "content": "SLD-resolution is an algorithm to compute answers to queries over Datalog programs. A query is a set of atoms, and an answer is a substitution of the variables in the query which makes the query a logical consequence of the program."}, {"title": "Specifics of the Danish court system", "content": "In the Danish court system, defendants are only allowed to present their case in front of a jury in extreme criminal scenarios where the prosecution is demanding a prison sentence of more than 6 years. These cases typically involve either murder, rape, brutal robbery or extensive arson.\nInstead, the vast majority of cases in the Danish court system is settled directly by sitting judges. Since the judges are the arbitrators, court cases typically take on a procedural tone, and are usually predominantly technical. Therefore, an expert system designed to be used in this setting should focus on the technical aspects of the law - both what legislation says, and what can be inferred from similar cases. This is also where many resources in the system are used: both judges and lawyers are assisted by teams who gather information about relevant laws and cases, and help developing possible argumentations."}, {"title": "Translation from Law to Rules", "content": "Reasoning systems are usually built from two components: a knowledge base, containing informa-tion about the reasoning domain, and a reasoning engine that can derive conclusions from the knowledge base. In this section we focus on how F\u00c6RDXEL'S knowledge base was constructed.\nOur goal was that this knowledge base should not only have internal consistency, but it should also be updateable in the future. Therefore, we start by presenting the overarching structure of the translation from natural knowledge to expert system knowledge.\nThere is a distinction between the way that the law is formulated and the way in which it is usually applied, which has to be taken into account when designing the knowledge base. Laws are typically formulated in the form of some rules that must be upheld; however, legal argumentation is more often focused on whether someone has broken the law - this is also the task that F\u00c6RDXEL is expected to address. Therefore, for each paragraph of the Danish traffic law we make an analysis of the situation that the law is specifying, to understand what is being prohibited in that situation.\nWe illustrate this process with the following running example.\nExample 2. \u00a74.1 of the Danish traffic law requires drivers to follow indications on the roads. We consider the following English translation of this rule."}, {"title": "Inference System and Explainability", "content": "We now discuss the reasoning engine of F\u00c6RDXEL and how SLD-derivations are compactly stored to provide explanations for the system's conclusions.\nIn this section we again use a running example, this time a real case from traffic law related to the paragraph discussed in the previous section. The case in question regards a woman tailgating a patrol officer, then overtaking the patrol officer on a road where overtaking is not allowed, and refusing the patrol officer's request to pull over [4]. The overtaking occurs at 15:15, and there are both a sign and road markings stating that overtaking is not allowed. For privacy reasons, certain details of the case are anonymized, so the woman is referred to as the defendant, her car as car1, and the road as road1. For the sake of simplicity we focus only on the illegal overtaking.\nThe facts of the cases can be encoded as:"}, {"title": "Interface", "content": "We now showcase the interface of F\u00c6RDXEL step by step from the perspective of a user. Our focus is on displaying explanations in an understandable way and allowing users to navigate them, and our prototype has only a minimalistic interface providing these capabilities.\nWe do not include actual screenshots, but redrawings of the actual interface. This is done for two reasons. First, the actual displayed window is relatively large, making the text unreadable after scaling; by redrawing we can exacerbate details, enhancing the descriptions of the interface. Secondly, the actual interface is in Danish, and thus largely unintelligible to someone without knowledge of the Danish language.\nTo illustrate our interface, we will be using the case presented in the previous section. On system startup, F\u00c6RDXEL displays the interface shown in Figure 4(a). The left side of the interface displays the facts entered for the case, and the right side shows answers and explanations to queries. The user can enter facts about a traffic law case in the red box under \"Insert Facts\" in the top left corner. Figure 4(b) shows the fact Road(road1) being entered into the system.\nFacts are written in Datalog using predefined predicates. Entered facts are stored in the system and shown in the blue box on the left side. Figure 5(a) shows the fact Road(road1) already has been entered into the system and the fact Sign(sign) is currently being entered.\nFigure 5(b) shows both the fact Road(road1) and the fact Sign(sign) in the blue box on the left side. This shows the user that both facts have been entered into the system.\nFigure 6(a) shows the interface after all facts about a traffic law case have been entered into the system. Tests using public traffic law cases have shown that the number of facts in a traffic law case often exceeds the number of lines in the blue box, in which case the blue box becomes scrollable. A fact can be removed by clicking on it.\nPushing the dark blue \"Query\" button at the bottom will run the reasoning algorithm, after which the answers that have been found are shown in the green box on the right side (Figure 6(b)). Clicking on an answer will select it, and replace the right side of the window with a list of immediate explanations (the child nodes of the root in the tree generated by the query, Figure 7(a)). At this point the yellow \"Back\" button in the top right corner becomes active, allowing the user to reverse the last selection performed in the green box."}, {"title": "Evaluation and Target Users", "content": "F\u00c6RDXEL has been shown to a group of legal experts. Initially these experts were skeptical, stating fears of bias in data, incorrect explanations and incorrect conclusions, but after getting to understood the mechanisms of the system better, they showed excitement for the project. They believed that F\u00c6RDXEL and similar tools could provide great help in a number of areas. They also provided needed improvements for usability, mainly that inputting facts in Datalog would be too difficult - a well-known general issue with expert systems [7]. In the areas that the tool could help, they identified four possible end-users, who would benefit from F\u00c6RDXEL, together\nwith needed improvements for each of those four groups. The findings are summarized in Table 1.\nAs an early proof of concept, F\u00c6RDXEL has been used in a court case, with consultancy from the sitting judge, where it reached the same conclusions as the judge about what laws the defendant had broken. However, during the court case it became clear that most of the discussion in a trial is focused on what facts have enough evidence to be established and which do not. F\u00c6RDXEL cannot help with this. However, it allows for quick addition and removal of facts in the system, showing the updated arguments and conclusions. This illustrates an alternative potential application of the tool, where a user can test multiple different versions of a case and see how certain facts affect the outcome."}, {"title": "Conclusions and Future Work", "content": "The entire Danish traffic law has been encoded into F\u00c6RDXEL, allowing it to answer queries regarding legal cases using SLD-resolution and provide explanations behind its answers. The early evaluations from legal expert suggest multiple suitable application.\nThe next step of the project is an empirical evaluation of the soundness of F\u00c6RDXEL's answers by applying the program on ongoing court cases and evaluating whether the tool and the judges reach the same verdicts.\nSimultaneously, we are exploring how to improve the ability of F\u00c6RDXEL to argue punishment. Danish traffic law only states a range of punishment for a given crime and provides conditions for\nwhen the punishment should be 'Harsh' and 'Soft', with most cases fulfilling multiple conditions for both a 'Harsh' and a 'Soft' punishment. To solve this problem, we are exploring the application of Fuzzy Logic, viewing 'Harsh' and 'Soft' as Fuzzy terms in the domain of possible punishments. A similar approach, from which we draw inspiration, has been applied to Polish punishment law [11].\nLastly, to improve the usability of F\u00c6RDXEL, we are exploring using Large Language Models to convert natural written language about a case into the Datalog format that the tool requires as input."}]}