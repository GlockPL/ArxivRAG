{"title": "Single-tap Latency Reduction with Single- or Double- tap Prediction", "authors": ["NAOTO NISHIDA", "KAORI IKEMATSU", "JUNICHI SATO", "SHOTA YAMANAKA", "KOTA TSUBOUCHI"], "abstract": "Touch surfaces are widely utilized for smartphones, tablet PCs, and laptops (touchpad), and single and double taps are the most basic and common operations on them. The detection of single or double taps causes the single-tap latency problem, which creates a bottleneck in terms of the sensitivity of touch inputs. To reduce the single-tap latency, we propose a novel machine-learning-based tap prediction method called PredicTaps. Our method predicts whether a detected tap is a single tap or the first contact of a double tap without having to wait for the hundreds of milliseconds conventionally required. We present three evaluations and one user evaluation that demonstrate its broad applicability and usability for various tap situations on two form factors (touchpad and smartphone). The results showed PredicTaps reduces the single-tap latency from 150\u2013500 ms to 12 ms on laptops and to 17.6 ms on smartphones without reducing usability.", "sections": [{"title": "1 INTRODUCTION", "content": "Touch surfaces, such as touchpads, smartphones, and tablets, rely heavily on single and double tap inputs. Graphical user interface (GUI) apps on touch surfaces (e.g., e-book, map, painting, image viewers, and web browsers apps) generally have components that accept both tap types; single tap in a browser app is commonly used for selection, while double tap is used for zooming or displaying submenus. Since touch surfaces typically have a limited space, To expand input options, multiple taps (i.e., double, triple, or more taps in a limited time) can be used, and touch prediction improvements are sought through hardware [38, 49] and OS [52] research."}, {"title": "2 RELATED WORK", "content": "The end-to-end latency inherent to tapping is defined as the time from when a user touches a surface to when the display changes accordingly. This latency affects the perception and performance in both direct (e.g., smartphone) and indirect (e.g., touchpad) touch interaction. According to Ng et al. [45], the latency mainly arises from three components: (1) the physical sensors that capture touch input, (2) the software that processes touch events and generates output for the display, and (3) the display itself. With commercial touch screens, this latency ranges from 50 to 200 ms and is perceptible to their users [10, 45].\nPrevious works have investigated end-to-end latency perception in different form factors (i.e., direct touch input on a smartphone or indirect touch input on a touchpad) and tasks (i.e., tapping or dragging) [11, 27, 45, 46]. Regarding indirect touch interaction, Deber et al. showed that the noticeable difference (JND, the minimum time difference between a pair of stimuli that are detectable by a person and measurable for any perceptual stimuli) with a touchpad is 55 ms for dragging and 96 ms for tapping [11]. They found that a latency improvement as small as 8.3 ms is noticeable for a wide range of baseline latencies. They also showed that direct touch interaction is more affected by end-to-end latency, as a user can easily notice the physical distance between his or her finger and the system's output, particularly when dragging. The JND with a touchscreen in their study was 11 ms for dragging and 69 ms for tapping [11]. Jota et al. showed that performance is negatively affected when the latency is above 25 ms for dragging tasks [27]. Overall, all modern touch surfaces suffer single-tap latency, meaning that latency reduction is a highly relevant goal.\nFurthermore, the end-to-end latency in tapping (single taps) on a double-tappable component increases because of the additional single-tap latency. In general, the double-tap threshold at the OS level can be configured by the user from the accessibility settings. Specifically, the default settings are 250 ms (in the range from 200 to 500 ms) for iOS [24] and 500 ms (from 100 to 900 ms) for Windows [8].\nIn macOS, the default threshold is estimated at to be more than 150 ms, and it can be configured through the accessibility settings. In contrast, an application-level threshold is often set separately, e.g., 350 ms for WebKit on iOS [20] and 300-500 ms for Safari [17, 25]. As with single-finger taps, there is a similar delay for multi-finger taps (e.g., Smart Zoom on macOS)\u00b9. In addition to the major OSs mentioned already, many other systems have introduced processing using the double-tap threshold [6, 29]. Although the threshold varies depending on the OSs, applications, and form factors, in most cases it is a few hundred milliseconds. Since single taps are one of the most frequently used operations, even such a small latency can lead to significant time loss over a long period of time."}, {"title": "2.2 Latency Reduction for Touch Interactions", "content": "Previous works have also investigated how to reduce end-to-end latency with touch surfaces. One approach utilizes hardware, such as combining high-speed cameras with high-speed projectors to visualize finger inputs [33, 45]; achieving the latency of 1 ms. Another approach is based on predicting user actions, such as next-points of a finger, to reduce the latency. According to Nancel et al. [43, 44], existing research on next-point prediction techniques can be classified into five main types: using neural networks [14, 15, 37], Taylor series [3, 5], Kalman filtering [39, 54], curve fitting [41], and heuristic approaches [4]. These approaches have mainly focused on latency reduction for dragging tasks; for example, zero-latency tapping [56] was intended to eliminate touch-down latency by using a 3D motion capture technique. In this paper, we focus on reducing the single-tap latency by applying machine learning to predict single or double taps without additional hardware."}, {"title": "2.3 Prediction-based Touch Interactions", "content": "Researchers have proposed prediction-based techniques to augment touch interactions on touch surfaces. Various methods have been proposed: a posture estimation using IMU sensors [40], and a vision-based hand shape recognitions [42]. Since the majority of modern touch surfaces utilize capacitive touch sensing, recent research has focused on the raw touch data from the touch driver (generally called capacitive raw image [13, 19]). For example, various interaction techniques have been proposed using features of body parts: biometric authentication [13, 19], touch gestures [53], detecting finger proximity [18], detecting the force of a touch [2], differentiating between finger and palm touches [35], identifying individual fingers [36], and estimating finger pitch and yaw [57]. It is a promising means of capturing detailed touch event data such as finger contact size and shape. However, accessing the capacitive raw image data requires kernel modification and is not widely available to developers. In contrast, our technique uses only the touch events commonly provided by major OSs."}, {"title": "3 METHODOLOGY", "content": "Performing a double tap involves tapping a surface twice within a certain period. In general, the minimum amount of time between a visual stimulus and movement is estimated to be 260-290 ms [28, 48]. Since a double tap must be completed within 200\u2013300 ms [17], a user wanting to perform a double tap has to consciously decide to make two consecutive taps before making the first tap. This means that the double-tap motion can be described as a predetermined action. A double tap is thus likely to be a faster motion than a single tap. Thus, the differences between single- and double-tap actions should influence the touch event-related data (e.g., tiny finger movements on the touchpad, touch-down to touch-up, or a finger's contact area). PredicTaps uses this touch event-related data to predict whether a detected tap is a single tap or the first tap of a double tap (see Section 3.2). This allows the apps to decide whether to execute a single tap event immediately or wait for a subsequent second tap, reducing single-tap latency.\nThe above is the basic processing of PredicTaps, but in the system design, we also need to consider the occurrence of erroneous prediction, since PredicTaps bases its processing on prediction by machine learning. Table 2 lists the processing for each combination of the prediction and actual input in PredicTaps. In the case of a false-positive double tap (b), the processing is the same as in the conventional method with single-tap latency, so there is no degradation in terms of latency. In contrast, a false-positive single tap (c) causes an unintentional single-tap execution, leading to usability reduction. Therefore, we concluded that PredicTaps should be activated only when the prediction is highly probable."}, {"title": "3.2 Data Collection for PredicTaps", "content": "The PredicTaps system recorded the touch events while participants operated touch surfaces. The sampling rate was 90 Hz on a laptop touchpad and 60 Hz on an iPhone touchscreen due to the libraries. We adopted the M5MultiTouchSupport\u00b2 of macOS and the JavaScript Web API\u00b3 to access finger inputs. The details of the collected data are listed in Table 3.\nWe assumed that performing a double tap is likely to be faster than a single tap because a double tap is a predetermined action. As such, we expected the completion time for a double tap to be shorter than that for a single tap, and ergo, that quick finger movements would lead to touching with a stronger force. We, therefore, expected that the maximum contact size (a value correlated to the major radius of an ellipsoidal contact point), the mean finger velocity from touch-down to touch-up (i.e., the distance between the touch-up and touch-down locations divided by the completion time), and the distance between the touch-down and touch-up locations (in percentages of the XY coordinates) would all be greater than those for a single tap. Moreover, we expected that the touch-down and up locations would probably differ between single tap and double tap, so we collected the touch locations at touch-down and touch-up (in percentages of the XY coordinates, with the touchpad's upper-left corner as the origin). In addition to the touch-event data, in the case of the laptop touchpad, PredicTaps recorded whether the laptop was connected to an AC adapter or running on battery power. This is because the touch sensitivity is slightly affected by the power source [12, 21].\nFor the smartphone conditions, smartphone touchscreens feature direct input, and touch coordinates are affected by the position of the interactive elements on the screen. Therefore, we did not use touch coordinates in the model implementation.\nIn the training model phase, the PredicTaps system also collected the ground truth labels, i.e., data on whether a tap was single tap or double tap. The threshold to distinguish a single tap from a double tap was set to 500 ms, as this is the time used in popular OSs for laptops [9]."}, {"title": "3.3 Learning Model for PredicTaps (Training Phase)", "content": "For the machine-learning technique utilized to determine whether an initial tap is a single tap or the first tap of a double tap, we used 90 % of the data for training (10 % of which was for cross-validation) and the remaining 10% for testing different classifiers. Tables 3 list the features used for machine learning. For the non-time-series data, after standardization, we balanced the positive and negative samples in the training dataset, and then trained the models by using random sampling. Note that we balanced just the training data, not the number of records in the test dataset. To handle sampling randomness, we used the average value obtained from ten rounds of classification after"}, {"title": "3.4 Score-Based Prediction from Learned PredicTaps Model (Prediction Phase)", "content": "In the prediction phase, PredicTaps instantly determines whether a tap is a single tap or the first tap of a double tap by retrieving the touch-event data and calculating a score. To reduce false-positive single taps, we set an additional threshold (called the PredicTaps activation threshold (PAT)) based on the confidence scores \u2074(hereafter score). In logistic regression, this score is utilized for estimating the certainty that a tap is a single tap, and it is calculated according to the feature weights of a detected tap [32]. In our system, if the calculated score of a tap $0 \\leq s \\leq 1$ is close to 1, it means a high possibility of a single tap, while an s close to 0 means a high possibility of a double tap. In normal logistic regression, when $0.5 \\leq s \\leq 1$, the detected tap is recognized as a single tap. However, for good usability, the false-positive rate should be as low as possible, and the true-positive rate should be as high as possible. Defining the threshold as a hyperparameter, not a constant value 0.5, would result in models more tailored to individual users. Therefore, we apply a threshold variable called the PredicTaps activation threshold (PAT). Then PredicTaps' prediction algorithm is calculated as follows:\nPredicTaps'prediction = $\\begin{cases}SingleTap & \\text{if } PAT < s < 1,\\\\DoubleTap & \\text{if } 0 < s < PAT\\end{cases}$       (1)\nA higher PAT reduces the number of false-positive single taps; that is, PredicTaps only accepts a tap as a single tap when the detected tap is highly likely to be a single tap (Fig. 3 (B)). In contrast, when the score is below the PAT\u2014that is, when the reliability of the prediction is low, or when the detected tap is highly likely to be a double tap\u2014the system waits for a subsequent second tap, the same as in the conventional approach (C).\nIn PredicTaps, it triggers single-tap event only for taps with a high score, whereas it dismisses ambiguous taps or double-likely taps. Although not all single-tap latency can be reduced by the above processing, the operability degradation due to misprediction of single and double taps can be prevented. We examined the effect of inconsistent latency reduction in a user study as well. In this evaluation, we examined PredicTaps accuracy using \u201cdata with the top n % of the scores (0 \u2264 n \u2264 100)\u201d. For example, the accuracy with data of the top 50 % of the scores means that the accuracy is calculated using data with which PredicTaps is more confident than average about its decision. This accuracy was calculated as follows (see Appendix A for the corresponding pseudocode).\nStep 1: Calculate the absolute distance between s and 0.5, as the s's distance from 0.5 means greater confidence in the prediction of taps.\nStep 2: Sort the distance and the relevant data in descending order.\nStep 3: Extract data from one with the maximum distance until it fills n% of the all data.\nIn the following sections, we examine the robustness of PredicTaps in various conditions and form factors. We also evaluate the user experience of PredicTaps on smartphones."}, {"title": "4 PREDICTAPS ON DAILY LAPTOP USE", "content": "In the previous work by Ikematsu et al. [22], they did not evaluate the performance of PredicTaps with data obtained in daily laptop uses; weakening the reliability of robustness of the system. In order to evaluate the robustness of PredicTaps in daily use, we conducted an experiment to develop PredicTaps models and assess their accuracy on laptops."}, {"title": "4.1 Participants and Apparatus", "content": "We recruited seventeen participants (twelve women, five men, sixteen right-handed, one left-handed, average age 25.16 with SD = 7.1). The participant used a MacBook Air, MacBook Pro, or MacBook model released in 2016, 2018, 2019, 2020, or 2021 with a screen size of either 13 or 14 inches, running macOS 10\u201313. The laptops were equipped with an integrated touchpad and a logger app for data collection. We informed the participants that this experiment was to log the operation of the touchpad and obtained their consent to participate. Because touch sensitivity is slightly affected by the power source [12, 21] and the computer was connected to the AC adapter at some times and was running on battery power at others, we, therefore, included the AC or battery-power condition in the features used for machine learning, with a value of 0 for AC and 1 for battery power."}, {"title": "4.2 Task Procedure and Data Collection", "content": "To collect data on tapping during daily use of the touchpad, we developed a logging app that detects one-finger touch events. The participants installed the app and ran it while performing daily work on their laptops for four days. The threshold to distinguish a single tap from a double tap was set to 500 ms. The participants were told not to use click and double-click actions and instead to use single- and double-tap actions. Even so, the participants were likely to sometimes click unintentionally, so we programmed the logging app to detect only tapping. We collected data"}, {"title": "4.3 Results", "content": "We conducted the data processing in the same manner as discussed in Sec. 3.3. Figure 4(A) shows the prediction accuracy and (B) shows the receiver operating characteristic (ROC) curves for the developed model. In (A), the vertical axis represents the accuracy in predicting whether an initial tap was a single tap or the first tap of a double tap. The horizontal axis represents the amount of testing data obtaining high scores that were used for prediction. For example, the accuracy for a value of 10% on the horizontal axis represents the prediction accuracy when only data in the top 10% of scores were used. Note that, in logistic regression, the relationship between the accuracy and the score differs for each model. Although the accuracy (in %) can be compared and discussed directly, the score itself cannot be compared between models. In addition, the distribution of the scores was not uniform; thus, we show how much accuracy could be obtained with respect to the data amount being used.\nThe colored dots and red line in Fig. 4(A) indicate the within-user accuracy and the general accuracy, respectively. The within-user accuracy means the prediction accuracy when the training and test data were from the same participant, and the general accuracy means the prediction accuracy when the training and test data were from all the participants. The PAT was applied to limit the data being used to high scores. As we can see, the accuracy gradually improved, reaching 95% for the average of within-user cases when we limited the data to the top 50%, and 95% in the general case when we limited the data to the top 30%.\nTable 4 lists the features used for machine learning along with their weights. The completion time was ranked as the top and bottom features for prediction. This means that an event with a longer completion time was more likely to be identified as a single tap. Likewise, the maximum contact size was more likely to be identified as a double tap. This result matches our expectation that a double tap is a predetermined action. Besides, the touch-down location (X-axis) contributed to double-tap prediction. In contrast to the previous result, the velocity (XY-axis) contributed to single-tap prediction. Some features that were not selected by L1 regulation in the controlled experiment were used here for prediction."}, {"title": "5 USABILITY OF PREDICTAPS ON SMARTPHONES", "content": "In the previous work by Ikematsu et al. [22], they only researched laptops. To evaluate the robustness of PredicTaps by form factors, we conducted two experiments to assess PredicTaps user experience and smartphone performance. In this section, we conducted a user study to examine how PredicTaps on smartphones affect usability because users easily notice the latency on direct touch screens, causing bad usability [11, 27]. We made two task applications for two distinct occasions: an Annotation Task for when users need to think before tapping, and a Pointing Task for when users can tap intuitively without thinking. We collected training data and validation data on two days separately to evaluate if the system is robust under different conditions, and also conducted a user study on the second day."}, {"title": "5.1 Participants and Apparatus", "content": "Through SNS recruitment, we recruited 17 participants (eight women, nine men, 14 right-handed, two left-handed, one ambidextrous, average age 30.05 with SD = 8.069). We recruited participants from a broad range of ages and sex to ensure the system's generalizability and investigate the age-specific or sex-specific features. The average hours per day the participants used their smartphones was 4.41 (SD = 3.20). The average number of years the participants had owned their own smartphones was 9.118 (SD = 3.833). 16 participants used iPhone 13 (iOS 15.6.1) and one participant used iPhone 11 Pro (iOS 15.6.1) for this experiment."}, {"title": "5.2 Task Procedure", "content": "On the first day, we collected training data of the tap input via two game apps: Annotation Task and Pointing Task. In the Annotation Task, participants are required to pick the correct option according to the picture on the screen (Figure 5(A)). In the Pointing Task, participants tap the rectangles (size: 1.6 cm \u00d7 1.6 cm) on the screen as quickly as possible (Fig. 5(B)). They choose the answer or tap the rectangle by performing a single or double tap according to the instructions. There are 400 questions and rectangles in both tasks (200 single taps, 200 double taps for each task). The task order of tasks performed is randomized, and the order of single- or double-tap specification is randomized. In the instructions, the participants are told to"}, {"title": "5.2.2 Day 2: Validation Data Collection and User Study", "content": "On the second day, we conducted a user study to examine if PredicTaps on smartphones affects the users' impressions or usability via two game apps that participants had already played on Day 1. We implemented PredicTaps for each individuals, whose PAT wase set ranged from 0.6 to 0.7 depending on the occurance of false-positives of test data from Day 1. Half of the subjects participated approximately one month after the training data collection and the other half participated approximately one week later. The process of the experiment is illustrated in Fig. 6 and the questionnaire items for the user study are shown in Table 5. We segmented every pattern into four task groups: Single Tap / Annotation Task, Single Tap / Pointing Task, Double Tap / Annotation Task, and Double Tap / Pointing Task. The order of the task groups and whether the PredicTaps activation was in the first or second half of a section were randomized. We instructed participants to hold, tap, and maintain their posture, the same as in Sec. 5.2.1. We also instructed them to tap without a break in the specified task for 40 times per section. For example, in the Single Tap / Annotation Task group, participants performed the Annotation Task with single-tap only and did not stop until they finished 40 taps. Before the experiment, we explained how a touch surface detects a tap as either a single or double tap and briefly went over the PredicTaps mechanism. Specifically, we made sure they understood the following four points.\n(1) PredicTaps predicts if the user's tap is likely to be a single tap or the first tap of a double tap.\n(2) PredicTaps can sometimes reduce the single-tap latency.\n(3) PredicTaps may sometimes mistakenly judge a double tap to be a single tap.\n(4) PredicTaps is activated in either the first or second half of a section.\nAfter performing a task, participants were instructed to answer Q1 \u2013 Q3 (in Single Tap groups) or Q4 \u2013 Q5 (in Double Tap groups) questions and NASA\u2013TLX for the first and the second halves, respectively. We processed this in the other task groups repetitively. The average total time for the experiment was 52 minutes (SD = 4.6). After the participants completed four task groups, the participants are instructed to answer Q6 \u2013 Q8. We collected data of 2,720 taps in total (80 single taps and 80 double taps; and 17 participants took part in this experiment)."}, {"title": "5.3 Results", "content": "5.3.1 Model Performance. Figure 7(A) and (B) show the prediction accuracy using the data from the Annotation Task and Pointing Task, respectively. The red line indicates the general accuracy, and the other lines are the within-user accuracy. We again applied the PAT to limit the data to high confidence scores. The accuracy here improved more rapidly than with the models of data from the laptop touchpad: it reached 100 % for every within-user case when we limited the data to the top 60%, and 100% in general when we limited the data to the top 50%, as did the Precision and Recall. Moreover, in the within-user case, all individual models could achieve more than 98.75%"}, {"title": "6 PREDICTAPS ON DAILY SMARTPHONE USE", "content": "In addition to the user experience of PredicTaps, in order to evaluate the robustness of PredicTaps by form factors, we conducted an experiment to assess PredicTaps performance on smartphones under various conditions."}, {"title": "6.1 Participants and Apparatus", "content": "We recruited 17 participants from a broad range of ages and sex (seven women, nine men, 14 right-handed, two left-handed, and one ambidextrous, average age 34.12 with SD = 16.31) and let them use their own smartphones. Our objectives here were to ensure the generalizability of the system and to investigate age-specific or sex-specific features. The participants used iPhone SE, iPhone 8, iPhone XR, iPhone12 mini, iPhone pro max 12, iPhone 13 Pro, and iPad, running iOS 15-16. The average number of years the participants had used smartphones was 8.562 with SD = 2.312). The average number of hours the participants used smartphones per day was 5.500 with"}, {"title": "6.2 Task Procedure and Data Collection", "content": "Although it is essential to investigate the performance of PredicTaps on any occasion, it is difficult to have smartphone users utilize daemon apps to retrieve daily tap data because it can invade their sense of privacy and security. For example, we might be able to calculate passwords or text messages that users type from the locations of tap data. Therefore, we designed the setting of this data collection to be as close to an in-the-wild condition as possible. To assess the robustness of PredicTaps under in-the-wild conditions, we changed the following conditions from the usability experiment in the lab:\n\u2022 We did not limit the participants' postures, such as the hand holding the smartphone, or the finger tapping the screen.\n\u2022 The participants performed tasks randomly during the daytime for various experimental occasions (e.g., while walking, sitting, and in cars).\nWe developed an iOS app to encourage participants to perform the task applications (Annotation Task / Pointing Task), which sends users notifications via Lock Screen, Notification Center, and Banners. We used the same task applications as in the user study in Sec. 5 (Fig. 5). Participants installed the app and ran it while performing daily work on their smartphones for six days. The app prompted the participants to perform the task applications every hour, and the participants were required to perform the task applications five times a day. In each game, participants were required to tap ten times. The threshold to distinguish a single tap from a double tap was set to 500 ms. We collected data for a total of 600 taps (single tap: ten taps for each participant \u00d7 five games \u00d7 six days; double tap: ten taps for each participant \u00d7 five games \u00d7 six days). None of the participants used triple taps for operations."}, {"title": "6.3 Results", "content": "We conducted the data processing in the same manner as discussed in Sec. 3.3 and Sec. 4. Figure 10(A) and (B) show the prediction accuracy using the data from the Annotation Task and from the Pointing Task, as in Sec 5. The within-user accuracy and the general accuracy are as same as described in Sec. 4. The PAT was applied to limit the data being used to high scores. Same as in Sec. 4 and Sec. 5, the accuracy gradually improved, reaching 95% for the average of within-user cases when we limited the data to the top 50% to 60%, though the accuracy is worse than the previous models in Sec. 4 and Sec. 5.\nWe also analyzed the difference coming from age and sex on tap features. Therefore, we divided the data into two groups (age: age above median and age below median, sex: men and women). Then, we conducted the Mann-Whitney U test on the group because none of the groups showed normality from the Kolmogorov-Smirnov test. Table 11 shows the results of the U tests on Accuracy divided by gender or age and the average accuracies of each group. All accuracy did not show differences (p>0.05). However, the p-values of the U test between elderly and young people were relatively low, and one showed a significant difference. Therefore, we looked into the features of elderly people and young people like in the user study in Sec. 5.3.1. Therefore, we concluded that individual difference is a more important factor in tapping features."}, {"title": "7 DISCUSSION", "content": "We conducted three experiments on touchpad and smartphone, including daily laptop use (Sec. 4), the Annotation Task, and the Pointing Task.Despite our assumption that a model's performance would be worse if it is trained with quick tapping data because there would be less difference between single- and double-taps in terms of the completion time of the tap and maximum tap size. However, all models recognize the difference between single- and double-taps under varying tap frequencies (low: Annotation Task, high: Pointing Task).\nMoreover, PredicTaps performed well on the touchpad and smartphone experiments, showing applicability to different form factors. The basic features for training were consistent, while other features varied depending on the hardware of the touch surfaces (e.g., AC adopter or battery condition on laptop touchpad)."}, {"title": "7.2 PredicTaps Models' Performance", "content": "As for smartphone models, We found that the performance of PredicTaps was not significantly different compared to touchpads. However, smartphones have a greater variety of sensors than laptops (e.g., nine DoF sensors). In fact, we engineered this feature as well, but since we extracted only 400 taps per user, the overfitting of the models occurred, leading to bad usability overall. Therefore, further evaluations are necessary for smartphone models to examine conditions such as participants walking, in a car, or tapping their smartphones with their thumb, to extract non-biased nine DoF sensor data.\nAlso, we could potentially improve the smartphone PredicTaps performance by utilizing a model that can process time-series data for processing nine DoF sensors of smartphones. Combining it with a logistic regression model may improve the PredicTaps performance."}, {"title": "7.3 Amount of Training Data", "content": "The amount of required training data is one of the problems of status quo PredicTaps. During the data collection experiment on smartphones (Sec. 5), some participants mentioned the burden of tapping 400 times in total. Previous work has demonstrated that fatigue affects the time for tapping [1]. In addition, the weights are very different in magnitude (e.g., 0.03793 vs. 0.4985), which indicates a possible dependence of the model on the application and the user, meaning that fine-tuning data should be collected from each user individually. Therefore, we should devise solutions to alleviate the user's workload when collecting the data. Implementing an interesting game application(e.g., the one used in [16]) would be one option to ease the mental burden on users. Also, we assume that few-shot learning can reduce the required training data: architectures that have fundamental models pretrained with massive data are put in place beforehand, and when it comes to actual implementation, they are fine-tuned with smaller in situ data to optimize for individuals [31, 55, 58]. In practical terms, integrating tabular data (e.g., the maximum contact size and the completion time) into a few-shot learning model would be one way to provide this kind of architecture. Moreover, if we input a short amount of user-specific tap data into fundamental models trained on a specific application (e.g., chat keyboard, clicking buttons), we can generate a user- and application-specific PredicTaps model that enables users to operate PredicTaps with less amount of data (i.e., fewer taps)."}, {"title": "7.4 User Perception of Latency Inconsistency", "content": "The smartphone user study in Sec.5.3.2 revealed that latency inconsistency confused some users, possibly due to model accuracy. We obtained a comment that \u201cIronically, it sometimes felt like the system reaction slowed down when the system was not activated, and I noticed that in sections without PredicTaps it was not sometimes slow, rather it was fast.\u201d The overall evaluation of PredicTaps was positive, so the system's benefits outweigh the confusion. However, further evaluation is needed to assess the correlation between inconsistency and confusion, and its effect on usability."}, {"title": "7.5 Latency Reduction by PredicTaps", "content": "We ran PredicTaps model on iPhone (13 and 11 pro max) and confirmed that data processing to determine single- or double-tap had an average latency of 1.38 ms \u00b1 18.1 \u00b5s (mean \u00b1 std. dev. of 7 runs, average of 1000 trials). Therefore, the reduced latency for a single tap can be calculated as a double-tap threshold (500 ms) \u2013 processing time (1 ms for prediction and 11 ms for sensing on touchpad, 16.6 ms on smartphone; in total: 12 ms on touchpad and 17.6 ms on smartphone). This confirms the practicality of the logistic model used. More complex models may improve accuracy but at the cost of increased processing time.\nIn the user evaluation of smartphone PredicTaps, Latency reduction of 1.5 s on Annotation Task and 4.3 s on Pointing Task per 20 taps were observed. Thus, we can infer that PredicTaps' small latency reduction in frequently used operations, such as single tap, is beneficial in the long run."}, {"title": "7.6 Implementation Layer", "content": "PredicTaps is a high-level optimization approach that operates distinctly from middleware-level optimizations, such as those associated with the kernel, driver, or operating system layers. The efficacy of PredicTaps as a higher-level implementation lies in its capacity to leverage information derived from high-level application programming interfaces (APIs) which have proven to be useful in previous works [14"}]}