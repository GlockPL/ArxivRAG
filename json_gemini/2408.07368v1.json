{"title": "The Complexity of Manipulation of k-Coalitional Games on Graphs", "authors": ["Hodaya Barr", "Yohai Trabelsi", "Sarit Kraus", "Liam Roditty", "Noam Hazon"], "abstract": "In many settings, there is an organizer who would like to divide a set of agents into k coalitions, and cares about the friendships within each coalition. Specifically, the organizer might want to maximize utilitarian social welfare, maximize egalitarian social welfare, or simply guarantee that every agent will have at least one friend within his coalition. However, in many situations, the organizer is not familiar with the friendship connections, and he needs to obtain them from the agents. In this setting, a manipulative agent may falsely report friendship connections in order to increase his utility. In this paper, we analyze the complexity of finding manipulation in such k-coalitional games on graphs. We also introduce a new type of manipulation, socially-aware manipulation, in which the manipulator would like to increase his utility without decreasing the social welfare. We then study the complexity of finding socially-aware manipulation in our setting. Finally, we examine the frequency of socially-aware manipulation and the running time of our algorithms via simulation results.", "sections": [{"title": "1 Introduction", "content": "In many situations, there is an organizer who would like to divide a group of agents into k non-empty coalitions. For example, consider a manager who would like to divide his employees into k teams in order to execute k tasks. The interpersonal friendship connections between potential team members play an important role in such a setting. Indeed, different managers may treat friendship differently. One manager may be interested in maximizing the number of friendship connections within all of the coalitions. Another manager may consider the welfare of an employee who is worse off than the others, and thus be interested in maximizing the minimum number of friendship connections that this employee has within his coalition. It is also possible that a manager would simply require that every employee have at least one friend within his coalition.\n\nThe organizer may be familiar with all of the friendships among the agents. However, in some real-world scenarios, the organizer is unfamiliar with the friendships and thus needs to elicit them from the agents. For example, when dividing students into classes, it is common practice to ask them about their social relationships [1]. In such situations, a manipulative agent, who is familiar with all the friendships among the agents, might have an incentive to misreport his friendship connections. Indeed, it is possible that such manipulation cannot be found efficiently.\n\nIn this paper, we analyze the complexity of finding manipulation in k-coalitional games 6, with fixed k. We assume that the agents' utilities depend on the friendship connections. Specifically, the friendship connections are represented by an unweighted graph, where the vertices are agents, and the edges represent the friendships among the agents. The utility of an agent is the number of friends he has within his coalition. There is an organizer who would like to divide the agents into exactly k coalitions, but he builds the graph from the agents' reports. We analyze the settings where one manipulative agent would like to misreport his friendship connections by hiding some or reporting fake connections.\n\nWe study the objective of maximizing the egalitarian social welfare (Max-Egal), and show that finding an optimal manipulation is computationally hard. Moreover, even deciding if a given report is beneficial for the manipulator is a hard problem. We then study a less demanding objective, in which the organizer requires that every agent has at least one friend within his coalition (At-Least-1). Indeed, finding an optimal manipulation or deciding if a given report is beneficial are still computationally hard problems. Arguably, the most natural organizer's objective is to maximize the utilitarian social welfare (Max-Util), and deciding if a given report is beneficial in this setting can be done efficiently. The complexity of finding an optimal manipulation with Max-Util remains open, but we provide an XP algorithm for this problem.\n\nIn addition, we introduce a new type of manipulation for coalitional games, socially-aware manipulation (SAM), in which the manipulator would like to increase his utility without decreasing the social welfare. This manipulation models social situations in which a manipulator interested in his own welfare will not want to harm the welfare of society. For example, consider an employee in a company or a player in a sports team. In these settings, the manipulator would like to maximize his utility without decreasing the social welfare, since it reduces the overall productivity or the teams' performance. Before analyzing the complexity of finding an SAM, we show that for every objective (Max-Util, Max-Egal, and At-Least-1), there are scenarios in which SAM is possible. We then show that finding an optimal SAM or deciding if a given report is an SAM are still compu-"}, {"title": "2 Preliminaries", "content": "Let $G = (A, E)$ be a directed graph representing a social network, where the vertex set $A$ represents a set of agents and the edge set $E$ represents friendship connections between the agents. The graph is directed since friendship connections are not necessarily symmetric, and an edge $(a, a') \\in E$ represents that $a$ considers $a'$ as his friend. We denote by $E(a)$ the set of edges from $a$, and the set of neighbors of $a \\in A$ by $N(a) = {a' \\in A|(a, a') \\in E(a)}$. For a subset $S \\subseteq A$, we denote the set of neighbors of $a$ from the subset $S$ by $N(a, S) = N(a) \\cap S$. In our setting, there is an organizer who would like to divide the agents into exactly $k$ coalitions. Formally, the organizer seeks a partition $P$ of $G$, which is a partition of the set $A$ into $k$ disjoint and non-empty sets $C_1, C_2,..., C_k$; we refer to these sets as coalitions. Since $k$ is small in many settings, we further assume that $k$ is fixed. Let $\\Pi_k$ be the set of all partitions of size $k$. We denote by $u(a, P)$ the number of friends that agent $a$ has within his coalition in partition $P$, i.e, if $a \\in C_i$ then $u(a, P)$ is $|N(a, C_i)|$. When the organizer partitions the agents into coalitions, he may want to maximize a certain objective. In this paper, we examine three types of objectives:\n\nDefinition 1 (Max-Egal). The organizer wants to find a partition $P^*$ that maximizes the minimum number of connections that an agent has within his coalition. That is, $P^* = arg \\max_{P \\in \\Pi_k} \\min_{a \\in A} u(a, P)$.\n\nDefinition 2 (At-Least-1). The organizer wants to find a partition $P^*$ such that every agent has at least one connection within his coalition. That is, $P^*$ such that $\\forall a \\in A\\ u(a, P^*) > 0$.\n\nDefinition 3 (Max-Util). The organizer wants to find a partition $P^*$ that maximizes the total number of connections within the same coalition. That is, $P^* = arg \\max_{P \\in \\Pi_k} \\Sigma_{a \\in A} u(a, P)$.\n\nLet $O_{obj}(G)$ be the set of all partitions that satisfy the objective of the organizer. For $a \\in A$, let $LB_{obj}(G,a) = \\min_{P \\in O_{obj}(G)} u(a, P)$, and let $UB_{obj}(G,a) = \\max_{P \\in O_{obj}(G)} u(a, P)$. That is, $LB_{obj}(G, a)$ and $UB_{obj}(G, a)$ are lower and upper bounds (respectively) on the number of friends that an agent $a$ can have in a partition satisfying the objective $obj$.\n\nNote that when the objective of the organizer is At-Least-1 it is possible that there is no feasible partition in $G$, i.e., $O_{At-Least-1}(G) = \\O$. In such a case, we define the utility of all the agents to be 0.\n\nEach agent $a \\in A$ reports to the organizer a set of friendship connections, $E_R(a)$, which is not necessarily equal to $E(a)$. That is, the organizer learns about the graph structure solely from the reports of the agents, and if all of the agents are truthful then this graph is equal to $G$. 7 A manipulator agent $m \\in A$ reports a set of friendship connections $E_R(m) \\neq E(m)$, so that the organizer will choose a partition that is better for $m$ than the partition that would have been chosen with $m$'s truthful report. In this case, we refer to $E_R(m)$ as the manipulation of $m$. We assume that there is a single manipulator,"}, {"title": "3 Background", "content": "Our setting, in which the utility of an agent is the number of neighbors that he has within his coalition to which he is assigned [22], is a special case of Additively Separable Hedonic Games (ASHGs), which have been extensively studied [8, 15, 2, 3]. However, very few papers consider the problem of manipulation in ASHGs. Indeed, Dimitrov and Sung [10] analyzed ASHGs where agents have both positive and negative edges, and provided a strategyproof algorithm for finding stable outcomes. Rodr\u00edguez-\u00c1lvarez [21] discussed strategyproof core stable solutions' properties. They proved that single lapping rules are necessary and sufficient for the existence of a unique core-stable partition. Aziz et al. [4] proved that, with appropriate restrictions over the agents' preferences, the serial dictatorship mechanism is strategyproof. Flammini et al. [12] studied the utilitarian social welfare in ASHGs and fractional hedonic games, and they proposed strategyproof mechanisms at the cost of non-optimal social welfare. They extended their analysis to friends and enemies games in a subsequent work [13]. Wright and Vorobeychik [24] considered a model of ASHG that is very similar to ours, but they restricted the size of each coalition instead of restricting the number of coalitions. In their work, they proposed a strategyproof mechanism that achieves good and fair experimental performance, but with no theoretical guarantee. All of these works focused on developing strategyproof mechanisms, while we study the computational complexity of finding manipulation.\n\nThe work that is closest to ours is by Waxman et al. [23]. They provided an extensive set of results specifying for each objective whether or not it is susceptible to manipulation. Specifically, they show that Max-Egal is susceptible to SIM by removing edges (and thus, obviously, it is also susceptible to LBM, UBM, and WIM),"}, {"title": "4 The Complexity of the Manipulation and the Improvement Problems", "content": "We begin with the Max-Egal objective. Recall that manipulation is possible only by removing edges. Indeed, finding any type of optimal manipulation is computationally hard. Moreover, we show that even deciding whether a SIM exists for a given instance is computationally hard.\n\nTheorem 1. Given a graph G, and a manipulator $m^- \\in A$, deciding whether any type of manipulation exists when the objective is Max-Egal is co-NP-hard.\n\nThe reduction is from the complementary problem of the NP-complete 3-SAT problem.\n\nDefinition 12 (3-SAT problem). Let F be a Boolean CNF formula, such that each clause has three literals. We are asked whether there exists a truth assignment that satisfies F.\n\nOur gadget for the hardness proof is a ring graph, which represents a CNF Boolean formula, as was introduced by [7].\n\nTheorem 2. Given a graph G, a manipulator $m^- \\in A$, a manipulation type type, and a report $E_R(m)$, deciding whether $I_{type}(E_R(m)) > 0$, when the objective is Max-Egal is co-NP-hard.\n\nThe At-Least-1 objective is less demanding than the Max-Egal objective. In addition, it is susceptible only to LBM by removing edges. However, finding an optimal LBM is computationally hard.\n\nTheorem 3. Unless P = NP, there is no polynomial time algorithm for finding an optimal LBM for a manipulator m when the objective is At-Least-1.\n\nThe reduction is from a variant of the 3-SAT problem, in which each variable appears in at most 3 clauses, each literal appears in at most 2 clauses, and each clause has 2 or 3 literals. The improvement problem is also computationally hard.\n\nTheorem 4. Given a graph G, a manipulator $m^- \\in A$, and a report $E_R(m)$, deciding whether $I_{LBM}(E_R(m)) > 0$ when the objective is At-Least-1 is NP-hard.\n\nThe reduction is from the same variant of 3-SAT that is used in the proof of Theorem 3.\n\nThe Max-Util objective is susceptible to all types of manipulations, with either $m^+$ or $m^-$. For the analysis of the Max-Util objective, we use the following definitions.\n\nGiven a directed graph $G = (A, E)$, we can naively convert $G$ to a weighted undirected graph $G_U = (A, E_U)$ by creating an edge $(u, v)$ whenever either $(u, v)$ or $(v, u)$ exists in $G$. If both $(u, v)$ and $(v, u)$ exist in $G$, then the edge weight is set to 2. Otherwise, the edge weight is set to 1. Given an undirected graph $G_U = (A, E_U)$, a set of edges $Y \\subseteq E_U$ is a k-cut of $G_U$ if $G' = (A, E_U \\backslash Y)$ is a graph that contains at least $k$ connected components. We refer to 2-cut simply as cut. A k-cut $Y^*$ is a min-k-cut if $\\Sigma_{y \\in Y^*} w(y)$ is minimal amongst all possible k-cuts of $G_U$. We denote $Y^*$ by min-k-cut(G). Note that any partition has a corresponding k-cut, and a Max-Util partition of $G$ has a corresponding min-k-cut in $G_U$ (Based on Lemma 1 from [9]). For simplicity, we will refer to the cuts in $G_U$ as cuts of $G$.\n\nUnlike with the Max-Egal and At-Least-1 objectives, we show a polynomial time algorithm for solving the improvement problem with the Max-Util objective.\n\nTheorem 5. The improvement problem can be solved in polynomial time when the objective is Max-Util, with any type of manipulator, and any manipulation type.\n\nProof. The number of min-k-cuts of any graph is $O(n^{2(k-1)})$ [17], and the set of all the min-k-cuts can be computed in polynomial time for a fixed k (e.g., using the algorithm of [14]). Since we assume that k is fixed, the set $O_{Max-Util}(G)$, which contains the corresponding partitions for every min-k-cut of $G$, can be computed in polynomial time. Similarly, the set $O_{Max-Util}(G(m))$, which contains the corresponding partitions for every min-k-cut of $G(m)$, can be computed in polynomial time. Clearly, given $O_{Max-Util}(G)$ and $O_{Max-Util}(G(m))$, we can compute $LB(G, m), LB(G(m), m), UB(G, m)$, and $UB(G(m), m)$. Therefore, for any manipulation type, the improvement problem can be solved in polynomial time.\n\nAs a consequence, given two reports, $E_f(m)$ and $E_r(m)$, we can decide whether $E_f(m)$ is better than $E_r(m)$ in polynomial time."}, {"title": "5 Socially-aware Manipulation", "content": "We now introduce a new type of manipulation, which we call Socially-aware Manipulation (SAM). In SAM, the manipulator m would like to increase his utility without decreasing the social welfare. That is, $O_{obj}(G(m)) \\subseteq O_{obj}(G)$, and thus SAM is necessarily an LBM.\n\nDefinition 15 (Socially-Aware Manipulation (SAM)). A manipulation $E_R(m)$ is SAM if $O_{obj}(G(m)) \\subseteq O_{obj}(G)$ and $LB_{obj}(G(m), m) > LB_{obj}(G, m)$.\n\nNote that term SAM may remind the concept of Pareto optimality. However, in SAM, the manipulator aims to increase his utility without decreasing the social welfare. That is, the manipulator would not want to harm the organizer's objective, but his manipulation may decrease the utility of one of the agents, unlike the notion of Parteo optimality.\n\nTheorem 9. The susceptibility of SAM is equivalent to the susceptibility of LBM. Specifically, Max-Util is susceptible to SAM by adding or removing edges, but Max-Egal and At-Least-1 are susceptible to SAM only by removing edges.\n\nProof. Consider the graph as depicted in Figure4a. Assume that k = 2, the organizer's objective is Max-Util, and m = $m^+$. Note that |min-cut(G)| = 2. In addition, $P_1 = {{m}, {a,b,c,d}} \\in O_{Max-Util}(G)$, and u(m, $P_1$) = 0. Thus, $LB_{Max-Util}(G, m) = 0$. By adding the dashed edge (from m to a), the size of |min-cut(G(m))| is still 2. That is, for each $P \\in O_{Max-Util}(G(m))$ the size of the corresponding cut in G(m) is 2. Since m does not remove any edge, the size of P's corresponding cut in G is 2, and thus $P \\in O_{Max-Util}(G)$."}, {"title": "5.2 The Complexity of the Manipulation and Improvement Problems for SAM", "content": "We begin with the Max-Egal objective. Similar to LBM, deciding whether an SAM exists (and thus also finding an optimal SAM) is computationally hard.\n\nTheorem 10. Given a graph G, and a manipulator $m^- \\in A$, deciding whether an SAM exists when the objective is Max-Egal is co-NP-hard.\n\nThe improvement problem is also hard.\n\nTheorem 11. Given a graph G, a manipulator $m^- \\in A$, and a report $E_R(m)$, deciding whether $I_{SAM}(E_R(m)) > 0$ when the objective is Max-Egal is co-NP-hard.\n\nWith the At-Least-1 objective, we show that every LBM is also an SAM, and thus the manipulation and improvement problems for SAM are computationally hard.\n\nTheorem 12. For At-Least-1, every LBM by removing edges is also SAM by removing edges.\n\nProof. Assume by contradiction that there exists a graph $G = (A, E)$, and a manipulator $m \\in A$, such that exists an LBM, $E(m)$ that is not SAM. i.e., $LB(G(m), m) > LB(G, m)$ but $O_{At-Least-1}(G(m)) \\nsubseteq O_{At-Least-1}(G)$. Let P be a partition such that $P \\in O_{At-Least-1}(G(m))$ but $P \\notin O_{At-Least-1}(G)$. Therefore, there is a vertex $a \\in A$ such that $u(a, P) = 0$ in $G$. However, m can only remove outgoing edges, and thus $u(a, P) = 0$ in $G(m)$ too. That is, $P \\notin O_{At-Least-1}(G(m))$. A contradiction.\n\nNow, with the Max-Util objective, the improvement problem for SAM can be solved in polynomial time.\n\nTheorem 13. The improvement problem for SAM can be solved in polynomial time when the objective is Max-Util.\n\nProof. As in the proof of Theorem 5, $O_{Max-Util}(G)$ and $O_{Max-Util}(G(m))$ can be computed in polynomial time. We also need to check whether $O_{Max-Util}(G(m)) \\subseteq O_{Max-Util}(G)$, which takes at most $|O_{Max-Util}(G(m))|\\cdot|O_{Max-Util}(G)|\\cdot n)$ steps.\n\nInterestingly, the manipulation problem for SAM with the Max-Util objective can also be solved in polynomial time. Indeed, we only need to change line 1 in Algorithm 2, so that $P \\leftarrow Max-Util(G)$. To prove the correctness, we first show an essential property of every report that respects a Max-Util partition.\n\nLemma 14. If $E_R(m)$ is a report that respects $P \\in O_{Max-Util}(G)$ then $O_{Max-Util}(G(m)) \\subseteq Max-Util (G)$.\n\nProof. Let $P \\in O_{Max-Util}(G)$, and let $E_R(m)$ be the report that respects $P$. Let Y be the min-k-cut that corresponds to $P$ in $G$. Given $P' \\notin O_{Max-Util}(G)$ let Y' be its corresponding k-cut in $G$. Since Y is a min-k-cut and Y' is not a min-k-cut, we have that $|Y| < |Y'|$. Let $Y_1$ be the k-cut that corresponds to $P$ in $G(m)$ and $Y_1'$ be the k-cut that corresponds to $P'$ in $G(m)$.\n\n*   If $m = m^-$, since $E_R(m)$ respects $P$, $E^-(m) \\subseteq Y$. Therefore, $|E^-(m) \\cap Y| = |E^-(m)| > |Y' \\cap E^-(m)|$. Thus, $|Y_1| = |Y| - |E^-(m) \\cap Y| < |Y'| - |Y' \\cap E^-(m)| = |Y_1'|$. That is, $P' \\notin O_{Max-Util}(G(m))$.\n\n*   If $m = m^+$, since $E_R(m)$ respects $P$, $E^+(m) \\cap Y_1 = \\O$. Therefore, $|Y_1| = |Y| + |E^+(m) \\cap Y_1| = |Y| < |Y'| < |Y'| + |E^+(m) \\cap Y_1| = |Y'|$. That is, $P' \\notin O_{Max-Util}(G(m))$.\n\nWe now show that if there is an SAM $E_R(m)$, then there exists a partition $P \\in P$ such that the report that respects $P$, $E_R(m)$, is an SAM, and $E_R(m)$ is not better than $E_R(m)$. We provide the proof for m. The proof for $m^+$ is a straightforward adaptation.\n\nLemma 15. If $E_f(m^-)$ is an SAM in which $LB_{Max-Util}(G_1(m^-), m^-) = x$, then there is an LBM $E(m^-)$ such that (i) $E(m^-)$ respects a partition $P \\in P$ and (ii) $LB_{Max-Util}(G_2(m^-), m^-) = x$.\n\nProof. We use the same definitions and claims as in the proof of Lemma 7 Indeed, here P is $O_{max-Util(G)}$, but since $E_f(m^-)$ is SAM then P is in $O_{Max-Util(G)}$, as required.\n\nTheorem 16. Algorithm 2, in which line 1 is $P \\leftarrow O_{Max-Util(G)}$, solves the manipulation problem for SAM with the Max-Util objective in time $O(n^{2(2k-1)})$.\n\nProof. The correctness of the algorithm follows directly from Lemmas 14 and 15. As for the running time, we use the same analysis as in the proof of Theorem 8, but now $|P|$ is $O(n^{2(k-1)})$. Thus, the running time is $O(n^{2(2k-1)})$."}, {"title": "6 Experiments", "content": "In order to examine the frequency of SAM and the effectiveness of our XP algorithm with the Max-Util objective, we ran some simulations 8 on graphs that are based on the Twitter followers dataset [19]. Since it was too large, we sampled 150 subgraphs of the network. Specifically, we sampled subgraphs of sizes 5, 10, 15, 20, and 25. For each graph size, we first sampled at least 9 graphs: we randomly chose a vertex and ran BFS where in each iteration we added only 2 of the neighbors to the queue. The search was terminated when it reached the desired graph size. In order to vary the number of edges we repeated this process once when we added 4 neighbors to the queue, and then when we added 6 neighbors. If we did not reach the desired graph size, we sampled again an initial vertex (up to 100 times).\n\nWe set k = 2 and m = $m^+$. Note that we concentrated on manipulation by adding edges, since it was quite common; e.g., we found an LBM in around a third of the instances. In contrast, manipulation by removing edges was much less common (e.g., we found an LBM in 0.5% of the instances). We also concentrated on the Max-Util objective, since we do not have efficient algorithms for finding manipulations with Max-Egal and At-Least-1. For each graph, we considered every vertex that has the potential to be a manipulator. Specifically, we computed all the min-cuts, and considered only the vertices that have an edge in a min-cut as potential manipulators. Overall, we had 368 instances. For each instance, we ran our XP algorithm (that finds LBM, UBM, WIM, and SIM) and the algorithm that finds an SAM. We also ran a brute-force algorithm, which iterates over all subsets of edges that the manipulator can possibly add. We set a timeout of one hour and terminated each algorithm that did not finish till the timeout."}, {"title": "7 Conclusions and Future Work", "content": "In this paper, we initiate the study on the complexity of finding manipulation in k-coalitional games. We also introduce a new type of manipulation, the socially-aware manipulation. We showed that both the manipulation and improvement problems are computationally hard with Max-Egal and At-Least-1, even for SAM. With Max-Util, we provide a general algorithm that finds an optimal manipulation. The algorithm is XP for LBM, UBM, WIM, and SIM, and it runs in polynomial time for SAM. Our experiments show that SAM is quite frequent, and demonstrate the effectiveness of our algorithm.\n\nThe main problem that is still open is classifying the complexity of the manipulation problem for LBM, UBM, WIM, and SIM with Max-Util. In addition, we showed that the manipulation problem for SAM with Max-Util can be solved efficiently when k is fixed. If k is a parameter, our polynomial-time result becomes an XP-membership result, which naturally leads to the question of whether one can do better (i.e., provide an FPT result). Finally, it will be interesting to extend our model to the case of multiple manipulators."}, {"title": "Appendix", "content": "Reminder of Theorem 1. Given a graph G, and a manipulator $m\\in A$, deciding whether any type of manipulation exists when the objective is Max-Egal is co-NP-hard.\n\nAs mention in the paper, for the reduction, we use the complementary problem of the NP-complete 3-SAT problem. And our gadget for the hardness proof is a ring graph, which represents a CNF Boolean formula. It was introduced by [7].\n\nProof. Given a formula F, we construct a graph G = (A, E) with a manipulator $m^-$.\n\nThe construction of G: We start by adding a ring graph to G based on F, where T represents the set of ring vertices. For each t$\\in$T, we add to G a clique of 9 vertices, denoted as $Q_t$. Each vertex t$\\in$T has the following outgoing edges:\n\n*   5 outgoing edges to $Q_t$\n\n*   outgoing edges to the next vertex on the ring (or 2 next vertices if it is an $a_{i,j}$ vertex that has two next vertices in the ring), following from the ring's definition.\n\n*   2 outgoing edges to vertices within the clique of the next vertex. (or 4 outgoing edges, if it is an $a_{i,j}$ vertex)\n\nIn addition to the previous construction, we add a vertex $c_i$ for each clause $C_i \\in F$, which we refer to as clause vertices. If $x_j \\in C_i$, we add an outgoing edge from $c_i$ to one of the occurrences of $x_j$ in the positive path between $s_j$ and $s_{j+1}$, and another edge to one vertex in the corresponding clique of $x_j$. If $\\bar{x}_j \\in C_i$, we add an outgoing edge from $c_i$ to one of the occurrences of $\\bar{x}_j$ in the negative path between $s_j$ and $s_{j+1}$ (see Figure 3a).\n\nWe also add an additional clique with 9 vertices, denoted as $Q_r$. Each vertex $c_i$ corresponding to clause $C_i$, has 6 outgoing edges to vertices of $Q_r$. Let G' be the subgraph of G containing all the vertices and edges defined up to this point. To complete the construction, we add to G a clique with 9 vertices, denoted as $Q_m$. Additionally, we add one more vertex, m, which is defined as the manipulator. m has 7 outgoing edges to vertices of $Q_m$. We also connect $m$ to one vertex of $Q_r$ with an outgoing edge. See Figure 7 for illustration of the structure of G for F = $(x_1 \\vee x_2) \\wedge (\\bar{x_1}\\vee\\bar{x_2})$.\n\nProperties of partitions of G'. First, we show that the graph G' has a partition to two coalitions, such that each vertex has at least 8 neighbors if F is satisfiable. Conversely, if F is not satisfiable then every partition of G' has at least one vertex that gets only 6 neighbors in his coalition.\n\n1.  Vertices of the cliques: To attain a minimum degree of at least 7, each vertex must be kept in the same coalition as the other vertices in the clique to which it belongs, as they have no other outgoing edges. Notice that if all vertices of a clique is in the same coalition then the utility of each vertex in this clique is 8.\n\n2.  Vertices of the ring: These vertices have 5 outgoing edges to vertices of their clique, 1 or 2 outgoing edges to the next vertices of the ring, and 2 or 4 outgoing edges to vertices of the clique of the next vertices of the ring. Therefore, to attain at least 7 neighbors, every vertex on the ring must be in the same coalition as his corresponding clique, and with at least one of the next vertices. This implies that in order to achieve at least 7 neighbors, the ring graph can only be partitioned into 2 cycles, or alternatively, all vertices of the ring can be kept in the same coalition. Notice that if a complete cycle is in a coalition, the utility of each vertex in the cycle is at least 8.\n\n3.  Vertices of the clauses: These vertices have 6 outgoing edges to vertices of $Q_r$ and additional 6 outgoing edges to vertices of the ring. To attain a minimum degree of at least 7 every vertex $c_i$ must be in the same coalition as $Q_r$, and with at least one of his neighbors from the ring, i.e., a vertex that satisfies this clause. Note that if a clause vertex is in the same coalition with both $Q_r$ and at least one of his neighbors from the ring, denoted by t, and t also has a degree of at least 7, then it implies that the clause vertex has a degree of at least 8 since it has an edge also to the clique corresponding to t.\n\nHence, if F is satisfiable it is possible to achieve a minimum degree of 8 or more in the partition of G', otherwise, F is not satisfiable and the maximum that can be achieved is 6 in any partition of G'.\n\nAdding it all together. Based on this, we will prove that if F is satisfiable, then there is no manipulation. Conversely, if F is unsatisfiable then there is manipulation.\n\nFirst, we show that if there is a satisfying truth assignment of F then there is no manipulation. This is because there exists a partition of G where each vertex has at least 8 neighbors (the maximum possible since some vertices have exactly 8 friends), the manipulator has only 8 neighbors and hence in such a partition, it is necessary that m gets all of his neighbors in his coalition. The organizer can partition G into two coalitions using as follows: The first coalition includes all the vertices in the cycle that corresponds to $\\tau$ as well as all clauses vertices $c_i$. It also includes the clique $Q_m$ and the manipulator. The second coalition includes all the vertices in the cycle"}]}