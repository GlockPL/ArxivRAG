{"title": "MORPHAGENT: EMPOWERING AGENTS THROUGH SELF-\nEVOLVING PROFILES AND DECENTRALIZED COLLABORATION", "authors": ["Siyuan Lu", "Jiaqi Shao", "Bing Luo", "Tao Lin"], "abstract": "Large Language Model (LLM) based multi-agent systems (MAS) have shown promise in tack-\nling complex tasks, but often rely on predefined roles and centralized coordination, limiting their\nadaptability to evolving challenges. This paper introduces MORPHAGENT, a novel framework for\ndecentralized multi-agent collaboration that enables agents to dynamically evolve their roles and\ncapabilities. Our approach employs self-evolving agent profiles, optimized through three key met-\nrics, guiding agents in refining their individual expertise while maintaining complementary team\ndynamics. MORPHAGENT implements a two-phase process: a warm-up phase for initial profile\noptimization, followed by a task execution phase where agents continuously adapt their roles based on\ntask feedback. Our experimental results show that MORPHAGENT outperforms traditional static-role\nMAS in terms of task performance and adaptability to changing requirements, paving the way for\nmore robust and versatile multi-agent collaborative systems. Our code will be publicly available at\nhttps://github.com/LINs-lab/learn2collaborate.", "sections": [{"title": "Introduction", "content": "The rapid advancement of Large Language Models (LLMs) (Achiam et al., 2023; Touvron et al., 2023b) has ushered\nin a new era of artificial intelligence, enabling the creation of sophisticated AI agents capable of tackling complex\ntasks across various domains (Nakajima, 2023; Torantulino, 2023). As these AI systems become more intricate, there is\na growing need for effective collaboration mechanisms that allow multiple agents to work together. This collaborative\napproach, known as Multi-Agent Systems (MAS) (Han et al., 2024), has shown great promise in addressing challenges\nthat are too complex or diverse for single-agent systems (Hong et al., 2024; Liu et al., 2023).\nWhile existing MAS implementations have shown promising results, they often rely on predefined roles (Li et al., 2023),\ncentralized coordination (Guo et al., 2024; Chen et al., 2024), or rigid organizational structures (Wang et al., 2024b;\nHong et al., 2024). These approaches limit cooperative resilience within MAS (Chacon-Chamorro et al., 2024), which\nfocuses on robustness and adaptability in dynamic, unpredictable environments. Figure 1 presents two examples to\nillustrate the real-world challenges with details elaborated below:\nExample 1.1 (Domain shift). Domain shift refers to a change in the characteristics or requirements of a task as it\nprogresses through different phases or contexts, presenting new challenges and requiring different skill sets. For\ninstance, a scientific research project could begin with literature review, move to experiment design, and conclude\nwith result analysis and paper writing. These transitions demand a flexible and adaptive multi-agent system that can\nseamlessly adjust its collaborative strategies and agent roles as the task progresses.\nExample 1.2 (Node Failure). In real-world applications, the reliance on centralized coordination in many existing\nMAS approaches (Chen et al., 2024; Hong et al., 2024) introduces a potential single point of failure. Consequently, the\nsingle point of failure can lead to cascading failures in MAS, where the entire system collapses if the central coordinator"}, {"title": "Related Work", "content": "The emergence of Large Language Models (LLMs) (Achiam et al., 2023; Touvron et al., 2023a) has led to LLM-\nbased autonomous agents capable of tackling complex tasks similar to humans, like BabyAGI (Nakajima, 2023) and\nAutoGPT (Torantulino, 2023). However, single LLM agents often struggle with cooperative work, such as software\nengineering (Jimenez et al., 2024). To address these limitations, recent study have proposed LLM-based multi-agent\nsystems (MAS) (Han et al., 2024; Zhou et al.), where multiple AI agents collaborate on complex tasks.\nHowever, current approaches often rely on predefined roles, centralized coordination, or rigid organizational structures,\nwhich may limit their flexibility and adaptability. For instance, CAMEL (Li et al., 2023) and ChatEval (Chan et al.,\n2023) employ agents with predefined roles through role-playing to effectively complete different tasks and achieve\ncommon goals. While this approach shows effective cooperation, it can struggle to adapt to tasks that require\nunforeseen skills. MegaAgent (Wang et al., 2024b) introduces autonomous task splitting and execution in centralized\ncoordination, demonstrating how multi-agent systems can outperform single agents by leveraging collective capabilities.\nNevertheless, this centralized approach can create bottlenecks in large-scale systems and be damaged by single points\nof failure in real-world environments. Recent works like MetaGPT (Hong et al., 2024) introduce human workflow\nin rigid organizational structures, organizing agents in a manner similar to a software company showing significant\nimprovements in code-generation benchmarks but such rigid structures cannot generalize effectively to other domains.\nOur work addresses these limitations by focusing on a more general setting, where all agents are initialized homo-\ngeneously without predefined roles or organizational structures. This approach aims to examine how agents learn to\ncooperate and specialize over time through interaction and experience to tackle diverse and evolving challenges."}, {"title": "Organization Optimization for MAS", "content": "Recent research in LLM-based Multi-Agent Systems (MAS) has focused on optimizing organizational structures (Guo\net al., 2024; Zhuge et al., 2024) and enhancing agent performance (Zhang et al., 2024) to reduce communication costs\nand increase team efficiency. Approaches like AgentVerse (Chen et al., 2024), Criticize-Reflect (Guo et al., 2024) and\nMegaAgent (Wang et al., 2024b) rely on centralized mechanisms, where a single role or a subset of agents monitor\nand evaluate the system's overall trajectory. While effective in certain scenarios, these centralized methods may face\nscalability issues and potential bottlenecks in large-scale MAS.\nOur research proposes a paradigm shift towards a fully decentralized approach, leveraging the inherent capabilities\nof LLM-based agents for self-reflection and self-correction (Madaan et al., 2023; Shinn et al., 2023; Renze & Guven,\n2024). In this decentralized framework, agents can dynamically adjust their responsibilities (profile) based on the\ncurrent context and their evolving understanding of the task environment. As agents learn to specialize and collaborate\nwithout central coordination, the system can scale more effectively to handle increasingly complex tasks and larger\nagent populations, mitigating the risk of context overload for central coordinating agents."}, {"title": "Standard Operating Procedure based MAS", "content": "Another significant strand of research has explored more structured and controlled methodologies in LLM-based\nmulti-agent systems. Among these, Standard Operating Procedure (SOP) based approaches like AgentCoder (Huang\net al., 2023) and MetaGPT (Hong et al., 2024), have demonstrated considerable performance gains. These works\ndefine a standardized pipeline for agents, which provides a determined framework for task execution and inter-agent\ncommunication. GPTSwarm (Zhuge et al., 2024) further extends this concept by conceptualizing each agent as a subnet\ncomposed of action nodes, framing agent collaboration as a graph of action nodes. This approach enables efficient\ntask-solving for specific and well-defined task by identifying the optimal action sequence for information flow and task\nexecution.\nWhile SOP-based approaches provide an efficient method for coordinating complex tasks by following predefined\nprocedures in specific scenarios, they lack flexibility. When the established pipeline does not fit the current task, the\nsystem is unable to adjust. Consequently, such rigid frameworks cannot adapt effectively to dynamic environments.\nIn our work, we propose a more flexible framework that combines the strengths of multi-agent collaboration with the\nautonomous planning capabilities of advanced agents. Instead of enforcing rigid SOPs, our framework dynamically"}, {"title": "Autonomous Collaboration for Fully Decentralized MAS", "content": "In this section, we present a novel decentralized multi-agent system which incorporated with a dynamic profile-based\ncollaboration mechanism. Our key innovation lies in a two-phase process, as detailed in Appendix A, Algorithm 1:\n(1) a warm-up phase that optimizes agent profiles, and (2) a task execution phase where agents iteratively observe the\nenvironment, take actions, and update their profiles based on results and changes in the task state. To begin, we provide\nan overview of our multi-agent cooperation process in Section 3.1, followed by a detailed description of our dynamic\nprofile-based collaboration mechanism in Section 3.2. Finally, we present the collaborative problem-solving process of\nour MAS in Section 3.3."}, {"title": "System Overview", "content": "Complex tasks require adaptive problem-solving approaches that go beyond traditional centralized systems, which are\nvulnerable to bottlenecks and failure points. In centralized systems, a single coordinator is responsible for breaking\ndown tasks and assigning them to individual agents. However, if the coordinator fails or communication is disrupted, the\nentire system risks collapsing. Additionally, fixed roles within such systems prevent agents from adjusting to shifting\ntask requirements, resulting in inefficiencies.\nTo develop a novel decentralized system, where multiple autonomous agents collaborate on complex tasks without\npredefined roles or centralized coordination, we introduce a fully decentralized multi-agent system, MORPHAGENT\ncomprising three key components\u2014namely, (i) Autonomous Agent, (ii) Auxiliary Agent, and (iii) Environment-each\nplaying a crucial role in enabling autonomous, decentralized collaboration, as detailed in the following subsections."}, {"title": "Autonomous Agent", "content": "The autonomous agent is built upon a LLM, e.g., GPT-4 (Achiam et al., 2023), which\nprovides it with advanced reasoning and language understanding capabilities. It is primarily composed of a dynamic\nprofile and utilizes the ReAct framework (Yao et al., 2022) combined with Reflexion (Shinn et al., 2023) to guide its\nbehavior. The dynamic profile, which defines each agent's roles and responsibilities, is central to how agents update and\nadapt, and will be discussed in detail in Section 3.2. Here, we focus on the operational mechanics of the agent.\nEach agent follows the OBSERVE-THINK-ACT cycle, where it first gathers information from the environment and\nother agents in the OBSERVE phase. In the THINK phase, it uses its reasoning abilities to process the information\nand plan its next move as presented in Algorithm 1's Line 13. Finally, in the ACT phase, the agent decides to either\nEXECUTE or SKIP a task based on its current capabilities and the task's requirements. After executing a task, the\nagent reflects on the outcomes, incorporating feedback into its memory for future decisions. This process is detailed\nin Algorithm 1's Line 18. The continuous cycle enables agents to adapt over time, refine their strategies based on\nfeedback, and collaborate more effectively to address the specific problem at hand."}, {"title": "Auxiliary Agent", "content": "The auxiliary agent serves as a middleware component that facilitates interaction between\nautonomous agents and the environment, without directly contributing to problem-solving. This design allows for\nefficient management of agent interactions and environmental feedback while maintaining the decentralized nature of\nour system. By handling technical details, the auxiliary agent allows the autonomous agents to focus on high-level\nproblem-solving strategies.\nThe main function of the auxiliary agent is to translate agent decisions into environmental operations and relays feedback\nfrom the environment back to the agents. For example, when an agent decides to execute Python code, the auxiliary\nagent runs the code in the environment, captures the output or errors from the environmental feedback, and provides\nthis feedback to the multi-agent system. Thus the auxiliary agent ensures that autonomous agents can concentrate on\nstrategic problem-solving while it manages execution and feedback processes."}, {"title": "Environment", "content": "The environment receives the instructions from users, processes them into messages, and the\nauxiliary agent is responsible for collecting and forwarding these messages within the environment to autonomous\nagents. Additionally, the environment is equipped with a mechanism to evaluate agent profiles, providing feedback that\nagents can use to refine and adjust their roles and strategies. This process ensures that agents continuously improve\ntheir task alignment and specialization, leading to more efficient collaboration and better overall system performance as\ntask conditions evolve."}, {"title": "Dynamic Profile-Based Collaboration Mechanism", "content": "Traditional multi-agent systems (MAS) (Hong et al., 2024; Li et al., 2023) with predefined roles and static structures\nstruggle to adapt to domain shift, leading to suboptimal performance when faced with unexpected changes or new\nchallenges. To address this, we introduce a dynamic profile mechanism, as prensented in Algorithm 1's Line 4 and 22,\nenabling agents to continuously adjust their roles and skills based on interaction and task requirements. We begin with\nthe concept of agent profiles, followed by the key metrics used to evaluate and optimize these profiles.\nProfile. The concept of agent profiles encapsulates an agent's evolving role, capabilities, and expertise, serving as a\ndynamic representation of the agent's identity within the multi-agent system (Wang et al., 2024a). Profiles play a crucial\nrole in MAS by facilitating effective task allocation, fostering collaboration, and enabling adaptive behavior (Sun et al.,\n2024). Unlike static role assignments, dynamic profiles allow agents to continuously refine their capabilities, leading to\nmore flexible collaboration and efficient problem-solving.\nMetrics for Profile Evaluation and Optimization. In dynamic and complex environments, role ambiguity often\nsignificantly impair an agenet's effectiveness and efficiency, as agents struggle to understand their responsibilities and\nhow they contribute to the overall task. Simultaneously, a lack of diversity may limit the system's ability to tackle\nmultifaceted problems. For example, in a software development MAS, having too many agents specialized in front-end\ndevelopment but none in back-end or security could lead to an imbalanced and ineffective team. Furthermore, misalign-\nment between agent capabilities and current task requirements can potentially result in ineffectiveness, especially when\nfacing domain shift.\nTo address these issues and foster effective collaborationm, we propose three key metrics to assess and dynamically\noptimize each agent's profile: Role Clarity Score (RCS), Role Differentiation Score (RDS), and Task-Role Alignment\nScore (TRAS) as following definitions. These metrics guide the optimization process, ensuring that each profile\naccurately reflects the agent's role and capabilities (RCS), promotes diversity in the team (RDS), and aligns with the\ntask requirements (TRAS)."}, {"title": "Role Clarity Score (RCS)", "content": "For an agent $a \\in A$ with profile $p \\in S$, where S is the set of all possible\nprofile strings, RCS considers the syntactic structure, lexical diversity, and skill relevance of the profile, which can be\ndefined as:\n$RCS(a) = \\beta_{1} \\cdot DEP(p) + \\beta_{2} \\cdot ENT(p) + \\beta_{3} \\cdot SKILL(p)$,\nwhere $ \\beta_{1} + \\beta_{2} + \\beta_{3} = 1$, and\n$DEP : S\\rightarrow [0, 1]$ is the dependency score, measuring the complexity of syntactic structures, defined as: $DEP(p) = \\frac{1}{h_{1}} (\\sum_{t \\in D(p)} \\frac{|ST(t)|}{|t|})$ where D(p) is the set of tokens in p with specific dependency relations (e.g., subject,\nobject), ST(t) is the subtree of token t, and $h_{1} : \\mathbb{R^{+}} \\rightarrow [0, 1]$ is a normalizing function.\n$ENT : S\\rightarrow [0,1]$ is the entropy score, quantifying lexical diversity, defined as: $ENT(p) = \\frac{1}{h_{2}} (- \\sum_{w \\in W(p)} \\frac{f(w)}{\\|W(p)\\|} \\log_{2} (\\frac{f(w)}{\\|W(p)\\|}))$ , where W(p) is the set of unique words in p, f(w) is the frequency\nof word w in p, and $h_{2} : \\mathbb{R^{+}} \\rightarrow [0, 1]$ is a normalizing function.\n$SKILL : S\\rightarrow [0,1]$ is the skill score, measuring relevance to skill-related concepts, computed as:\n$SKILL(p) = \\frac{|PS(p)|}{\\|T(p)\\|} (\\sum_{s \\in T(p)} e(s) \\cdot e(p) + (1 - \\gamma))$ , where s is the skill prototype, $e(\\cdot)$ is a word\nembedding; T(p) is the set of tokens in p, PS(p) is the set of potential skill tokens in p."}, {"title": "Role Differentiation Score (RDS)", "content": "Let $A = {a_{1},..., a_{n}}$ be a set of n agents, with profiles $P = {P_{1},..., P_{n}}$. The RDS of A measures the average dissimilarity between agent profiles, which can be defined as:\n$RDS = h_{3} (\\frac{2}{n(n-1)} \\sum_{1<i<j<n} d(a_{i}, a_{j}))$ ,\nwhere $d(a_{i}, a_{j}) = 1 - \\frac{e(p_{i}) \\cdot e(p_{j})}{\\|e(p_{i})\\| \\|e(p_{j})\\|}$ is the dissimilarity between agents $a_{i}$ and $a_{j}$ measured by the embeddings of their\nprofiles $p_{i}$ and $p_{j}$, and $h_{3}$ is a sigmoid function to normalize the score."}, {"title": "Task-Role Alignment Score (TRAS)", "content": "Given a task $T\\in T$ and a set of agent profiles $P = {p_{1}, ..., p_{n}}$,\nTRAS investigates how well the agents' roles align with the task requirements, which is defined as:\n$TRAS = \\alpha \\cdot S_{sim}(T, P) + (1 - \\alpha) \\cdot S_{cap}(T, P)$,\nwhere:\n$S_{sim} (T, P)$ evaluates the semantic similarity between the task description and agent profiles, which can be calculated\nas: $S_{sim}(T, P) = \\frac{1}{n} \\sum_{i=1}^{n} \\frac{e(T) \\cdot e(p_{i})}{\\|e(T)\\| \\|e(p_{i})\\|}$\n$S_{cap} (T, P)$ is a measure of how well the agents' capabilities match the task complexity, via:\n$S_{cap} (T, P) = 1 - \\frac{|C_{T}(T) - \\sum_{i=1}^{n}C_{A}(P_{i})|}{\\|C_{T}(T)\\|}$. $C_{T} : T \\rightarrow [0,1]$ assesses the complexity of the task\nby $C_{T}(T) = \\frac{1}{2}(1 + \\frac{cos(\\mathbf{v}_{T}, \\mathbf{v}_{complex}) - cos(\\mathbf{v}_{T}, \\mathbf{v}_{simple})}{2})$, and $C_{A} : S \\rightarrow [0,1]$ assesses the ca-\npability level of an agent's profile by $C_{A}(P_{i}) = \\frac{1}{2}(1 + \\frac{cos(\\mathbf{v}_{p_{i}}, \\mathbf{v}_{capable}) - cos(\\mathbf{v}_{p_{i}}, \\mathbf{v}_{limited})}{2})$,where\n$\\mathbf{v}_{T}, \\mathbf{v}_{p_{i}}, \\mathbf{v}_{complex}, \\mathbf{v}_{simple}, \\mathbf{v}_{capable},$ and $\\mathbf{v}_{limited}$ are vector representations of the respective texts."}, {"title": "Collaborative Problem-Solving Process", "content": "The core of our approach, illustrated in Figure 2, lies in a two-phase process: a warm-up phase for optimizing agent\nprofiles, followed by an iterative task execution phase (as detailed in Appendix A, Algorithm 1):\nWarm-up Phase: Profile Initialization and Iterative Optimization. In the warm-up phase, each agent's profile\nis initialized and then iteratively optimized. Key metrics introduced in Section 3.2 are calculated for each profile.\nThese metrics help define the roles clearly, ensure a diverse skill set across agents, and align the agents' capabilities\nwith task requirements. The optimization process iterates until a predefined convergence threshold is met, or the\nwarm-up iterations are completed.\nTask Execution Phase: Observation, Action Decision, and Profile Updates. After profile optimization, the system\nmoves to the task execution phase. In this phase, agents observe the environment and task state, make decisions\nbased on their current profiles, and either execute or skip tasks. If an agent chooses to execute, the results are\nrecorded and logged. This phase is also iterative, allowing profiles to be updated based on the execution outcomes\nand the current state of the task. The agents continuously adapt to changing conditions and refine their profiles,\nensuring that actions remain aligned with both individual and collaborative goals."}, {"title": "Experiment", "content": "In this section, we evaluated our proposed multi-agent collaboration framework on standard benchmark tasks including\ncode generation, general reasoning, and mathematical reasoning in Section 4.1. To further assess the the adaptability\nof our approach in dynamic environments compared with predefined SOP-based MAS, we construct cross-domain\ndatasets to analyze the performance of our framework in Section 4.2. Furthermore, we investigate the robustness of our\ndecentralized approach compared to MAS with central coordinators using failure node analysis in Section 4.3. We also\nconduct a comprehensive ablation study in Section 4.4 to analyze the contributions of each individual metric in our\nframework and assess its scalability with increasing agent numbers."}, {"title": "Comparison among Baselines", "content": "We compare our method with two state-of-the-art decentralized MAS methods: GPTSwarm (Zhuge et al., 2024), and\nCriticize-Reflect based organization optimization (Guo et al., 2024). We also include a Naive solution in the comparison,\nwhich operates without a warm-up phase and designs the profile update as an optional action (without optimizing\nmetrics) in the execution phase.\nWe evaluate the performance on the following benchmark tasks: Code Generation (BigCodeBench (Zhuo et al., 2024)),\nGeneral Reasoning (BigBenchHard (Suzgun et al., 2022)), Mathematical Reasoning (MATH (Hendrycks et al., 2021)).\nFor each benchmark task, we use a set of N = 3 agents, with each agent initialized as the same LLM model including\ngpt-40-mini and gpt-3.5-turbo-0125.\nAs shown in Figure 3, MORPHAGENT consistently outperforms the baseline methods across all three benchmark tasks.\nNotably, our fully decentralized approach achieves comparable or superior performance to other methods without\nrelying on Standard Operating Procedures (SOPs) as used in GPTSwarm or a centralized evaluator as employed in\nCritic-Reflect methods. MORPHAGENT demonstrates its effectiveness on self-evolving profiles and decentralized\ncollaboration strategy."}, {"title": "Flexibility to Domain Shift", "content": "To evaluate our framework's adaptability to changing task requirements, we construct two distinct cross-domain\nevaluation datasets by the complexity of the target tasks:\nLEVEL-1: This dataset involves a domain shfit from BigCodeBench to BigBenchHard, representing a moderate\ndomain shift.\nLEVEL-2: This dataset involves a domain shift from BigCodeBench to more challenging MATH that require precise\nsymbolic reasoning and step-by-step logical deductions."}, {"title": "Robustness to Node Failure", "content": "To evaluate the robustness of our decentralized approach compared to centralized methods, we conducted experiments\nsimulating potential node failures. We compared our method with AgentVerse (Chen et al., 2024), a centralized\napproach that relies on a central evaluator. For this experiment, we used the gpt-40-mini model and varied the\nfailure probability of each agent from 0.3 to 0.7, simulating environments with different levels of risk.\nAs shown in Figure 4, our decentralized approach demonstrates superior robustness compared to AgentVerse across all\nfailure probabilities, providing the following insights:\nFault Tolerance: Our method maintains relatively stable performance across different failure probabilities. Even at a\nhigh failure probability of 0.7, our method maintains competitive performance, with accuracies of 63.81%, 47.37%,\nand 53.00% for code generation, general reasoning, and mathematical reasoning tasks respectively.\nDecentralized Architecture: Our method's distributed nature allows it to continue functioning even when individual\nagents fail, unlike centralized approaches that may collapse entirely if the central node fails.\nAdaptive Role Adjustment: The dynamic profile updating and role differentiation in our method enable the system\nto reassign tasks and responsibilities when certain agents fail, maintaining overall system robustness.\nThese insights underscore the importance of fully decentralized, adaptive approaches in creating robust multi-agent\nsystems, particularly in high-risk environments or for critical applications where node failures are a significant concern."}, {"title": "Ablation study", "content": "To better understand the contributions of each metric in our framework and assess its scalability, we conducted a\ntwo-part ablation study. First, we evaluated the model's performance by using only one metric at a time in the profile\noptimization process-either Role Clarity Score (RCS), Role Differentiation Score (RDS), or Task-Role Alignment\nScore (TRAS)\u2014and compare the results to the full implementation, which utilizes all three metrics together. Second,\nwe examined the framework's scalability by varying the number of agents in the multi-agent system (MAS) using the\nMATH dataset.\nMetric Analysis. As shown in Table 2, utilizing a single metric results in a performance decline compared to the\nfull implementation that incorporates all three metrics. Employing only the RCS yields an accuracy of 50.00%,\nunderscoring the importance of clearly defined agent roles in collaborative tasks. The isolated use of RDS leads\nto the performance of 41.66%, suggesting the current task may not require the role diversity becuase the task\nis not complex enough. To further investigate the impact of RDS, we conducted a separate experiment with a\nmore complex task, detailed in Appendix D. Similarly, incorporating only the TRAS produces an accuracy of\n49.6%, demonstrating the importance of aligning agent roles with task requirements to achieve better performance.\nNotably, our profile update mechanism that integrates all\nthree metrics achieves the highest performance, highlighting\nthe complementary nature of these metrics. The combination\nof clear role definition, role diversity, and task alignment\nenables the agents to collaborate more effectively and adapt\nto varying task demands, leading to improved performance\noverall.\nScalability Analysis. To evaluate the scalability of our\nmethod, we examine our method as the number of agents\nincreases, with 3, 5, and 10 agents in MAS. Specifically, we\nmeasure the accuracy of problem-solving using the MATH\ndataset and the average number of interaction rounds required to reach a solution, as shown in Table 3.\nFirstly, we observe our method maintains relatively stable performance even with a larger number of agents. More\ninterestingly, the average number of interaction rounds increases as more agents are added to the system, as more agents\nrequire more communication and coordination. We note that the increase is not linear, indicating that our method's\nscalability even with larger agent groups."}, {"title": "Limitation, Future Work, and Conclusion", "content": "In this work, we have presented a novel decentralized multi-agent system that\nleverages dynamic profile-based collaboration to enhance problem-solving capabilities in complex tasks. While our\napproach demonstrates promising results across various benchmarks, there are some opportunities for future work.\nOur method utilizes continuously updating and evaluating agent profiles, which may incur computational overhead.\nFuture work could explore efficient decentralized mechanisms to reduce computational costs. Besides, future work\nshould explore more efficient, peer-to-peer communication strategies that maintain the benefits of our approach while\nreducing computational costs."}, {"title": "Conclusion", "content": "In this paper, we introduced MORPHAGENT, a decentralized multi-agent system that employs dynamic,\nprofile-based collaboration to improve problem-solving in complex tasks. By incorporating profile evaluation and\noptimization, we present a flexible approach to role adaptation, addressing the limitations of predefined roles in\ntraditional MAS and the vulnerability of centralized systems to node failures. MORPHAGENT offers a promising\nfoundation for developing resilient, self-organizing multi-agent systems capable of responding to unforeseen challenges."}]}