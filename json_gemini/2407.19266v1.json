{"title": "Interactive Learning in Computer Science Education Supported by a Discord Chatbot", "authors": ["Santiago Berrezueta-Guzman", "Ivan Parmacli", "Stephan Krusche", "Stefan Wagner"], "abstract": "Enhancing interaction and feedback collection in a first-semester computer science course poses a significant challenge due to students' diverse needs and engagement levels. To address this issue, we created and integrated a command-based chatbot on the course communication server on Discord. The DiscordBot enables students to provide feedback on course activities through short surveys, such as exercises, quizzes, and lectures, facilitating stress-free communication with instructors. It also supports attendance tracking and introduces lectures before they start.\nThe research demonstrates the effectiveness of the DiscordBot as a communication tool. The ongoing feedback allowed course instructors to dynamically adjust and improve the difficulty level of upcoming activities and promote discussion in subsequent tutor sessions. The data collected reveal that students can accurately perceive the activities' difficulty and expected results, providing insights not possible through traditional end-of-semester surveys. Students reported that interaction with the DiscordBot was easy and expressed a desire to continue using it in future semesters. This responsive approach ensures the course meets the evolving needs of students, thereby enhancing their overall learning experience.", "sections": [{"title": "I. INTRODUCTION", "content": "Continuous feedback from students in introductory com-puter science courses (CS1) is vital for the development and effectiveness of education in this area. It allows educators to adjust teaching methods and course activities to match the rapidly changing demands of the field, thus enhancing student learning outcomes [1]. This feedback is crucial for promptly identifying first-year students' challenges, reducing their frustration and likelihood of dropping out [2]. Additionally, students' feedback promotes a learner-centered approach, increasing engagement and motivation, and contributes to a more inclusive and adaptable educational environment [3].\nOn the other hand, Chatbots are transforming educational procedures by offering interactive and personalized learning experiences. These bots are tools powered or operated by"}, {"title": "II. RELATED WORK", "content": "In education, chatbots have emerged as innovative tools for learning support, offering personalized assistance and interactive communication to foster a more engaging and practical educational experience. They can be used in various educational settings, from traditional classrooms to online courses. They can assist with a wide range of tasks, such as answering student queries, providing feedback on assignments, and facilitating group discussions.\nPrevious research has shown that Discord significantly en-hances engagement and community building in online higher education, critical during the COVID-19 pandemic when stu-dent engagement was crucial [8]\u2013[11]."}, {"title": "III. METHODOLOGY", "content": "We chose an introductory programming course for the first semester of a computer science bachelor's program based on interactive learning [14], [15]. In this course, 137 students were registered, and the primary communication tool between fellow students and instructors is Discord. The course inte-grates onsite lectures, onsite tutorial sessions, quizzes at the beginning of each lecture [16], weekly exercises on Artemis [17], and computer-based exams [18]. The course undergoes an end-semester evaluation that assesses the curriculum. How-ever, it is not focused on collecting students' perceptions of individual course activities. Therefore, we considered it necessary to obtain continuous feedback from students to understand their perception of the difficulty of course activities such as exercises, quizzes, and evaluations and adapt them according to this feedback and the student's performance.\nThe proposed DiscordBot asks students for detailed feed-back after each activity to address this gap, enabling instructors to make timely adjustments to these course activities and enhancing the learning experience. Its functionality not only fosters continuous and specific feedback but also aids in track-ing and encouraging active student engagement throughout the course. With this study, we plan to address two important research questions:\n\u2022 RQ1: Is the difficulty level perceived by the students about the activities (lectures and evaluations) related to the performance of the students?\n\u2022 RQ2: Is the difficulty level perceived by the students about the lecture content related to the difficulty level of the corresponding quiz?"}, {"title": "B. DiscordBot - Architecture", "content": "The DiscordBot is hosted on a Raspberry Pi model 4 in the university facility, running on the Debian operative system, and the course instructors maintain it. Figure 1 presents the main components of the DiscordBot. Its architecture is composed of three significant components: Discord, Data Manager, and DiscordBot.\nDiscord forwards the user's messages and commands to the DiscordBot for processing and receives a response from it, which is reflected in the appropriate guild.\nThe Data Manager allows course instructors to upload data to be processed, categorized, and saved in comma-separated value (CSV) or JavaScript Object Notation (JSON) files.\nThe DiscordBot uses the data by the Command Processor and Automated Processes components through the Data Pro-cessor component, which puts the data into a usable form to generate a response or perform a specific action. The Command Processor component generates a response based on a command or user message, and the Automated Processes component automatically performs specific actions at various times, which may be triggered by particular events in the guild or predetermined by data from instructors or developer instructions."}, {"title": "C. Materials", "content": "We used the Discord APIs that is based on two core layers, a REST API that works around HTTP requests for general operations, and persistent secure Web-Socket based connection for sending and subscribing to real-time events. To authenticate a bot on Discord, the API provides a service or access to a platform through the OAuth2 API.\nThe Rate Limits feature is integral to all Discord APIs and is designed to safeguard the platform from spam, abuse, and potential service overloads. These limits are meticulously enforced for each bot and user, with a dual-layered approach encompassing individual route-specific constraints and over-arching global restrictions. Per-route rate limits are metic-ulously established for each route, encompassing numerous distinct endpoints. Additionally, these limits may pertain to various HTTP methods, including GET, POST, PUT,and DELETE. In certain instances, rate limits are collectively imposed on endpoints with analogous functionalities, ensuring a harmonized operational flow. While these mechanisms are pivotal in maintaining the integrity and reliability of the API, they can inadvertently impede the API's full utility. Although essential for preventing misuse, the imposition of rate limits requires a careful balance to allow legitimate and efficient use of the API's capabilities.\nTherefore, we used the Pycord API to wrap the Discord API. This is a modern Pythonic API using the async/await syn-tax. It implements the exact rate limit handling that prevents 429 HTTP status code problems and is easy to use with object-oriented programming designs. Pycord's commands extension simplifies bot creation to a few lines of code and makes registering new commands and events easy in Discord guilds.\nAfter defining and implementing the command and event functions, the next critical step involves acquiring the Au-thentication Token to initiate the bot. This token is a unique identifier essential for the bot's operation. To generate this token, the 'Bot' section within the Discord application on the Discord Developer Portal presents the 'Reset' button. This button will create a new token that will be used to launch the bot."}, {"title": "D. Student-DiscordBot Interactions", "content": "The introductory programming course features several ac-tivities throughout the week. Classes are held on Tuesdays and commence with a quiz exercise. Tutorial sessions take place from Wednesday to Thursday. Simultaneously, exercises are assigned for completion at home from Wednesday to Monday. Figure 2 illustrates the process model of the course during the week and the precise moment when interaction with the DiscordBot occurs, facilitating information collection, notifications, or attendance checks."}, {"title": "E. Data Processing", "content": "The Matplotlib library (version 3.9.0) is used for data processing, and each interaction with the DiscordBot can be stored and categorized as needed. The records of students' attendance and feedback are preserved to assess student en-gagement and tutorial session performance. This data is saved in designated folders based on the activity. The DiscordBot stores the information in a CSV file, and instructors analyze it using a provided Python script that visualizes the data in charts. This data is only accessible to the course lecturer and instructors through direct access to the host machine, so students cannot access the data through interaction with the DiscordBot."}, {"title": "F. Usability and user satisfaction", "content": "At the conclusion of the course, we administered a com-prehensive paper-based survey to the 116 students registered for the final exam. This survey was designed to evaluate the usability of DiscordBot, the frequency and quality of student interactions with the bot, the perceived usability of both Discord and the chatbot, and the accuracy of students' expected grades in each activity compared to their actual grades. Additionally, the survey gauged the students' intention to use DiscordBot in future courses."}, {"title": "IV. RESULTS", "content": "This research aimed to determine whether using a Dis-cord chatbot could positively impact students' enthusiasm for the subject and the development of the course as a whole. Throughout the course, we conducted a series of surveys using different versions of DiscordBot. These surveys covered various aspects of the course, including lectures, quizzes, exercises, exams, and study guides. The insights gathered from these surveys significantly influenced the course's direction and development. One of the most important outcomes was"}, {"title": "V. DISCUSSION", "content": "The results of this study underscore the significant role that chatbots, specifically DiscordBot, can play in enhancing the experience in computing education with first-year students. The ability of DiscordBot to facilitate real-time feedback and interactive communication has increased student engagement and allowed instructors to tailor educational content dynami-cally in response to student needs. This adaptability is crucial in computing education, where technological advancement must be incorporated continuously. The findings indicate that DiscordBot has been particularly effective in managing course logistics and providing immediate support, which reduces administrative burdens and enhances the overall efficiency of the course management process.\nDespite these positive outcomes, several challenges remain. The reliance on manual data processing and the need for continuous monitoring of DiscordBot's performance highlights the importance of developing more autonomous and user-friendly systems. The collected feedback has also raised the question of how to effectively balance incorporating student inputs without compromising the structured progression of the course curriculum. Ensuring data privacy and preventing over-reliance are crucial ethical considerations when deploying and using chatbots."}, {"title": "VI. CONCLUSION", "content": "This study demonstrated that integrating a command-based chatbot into an introductory programming course on the Dis-cord platform benefits students and instructors considerably. The DiscordBot helped to create a more responsive and engaging learning environment by facilitating continuous, real-time interactions and feedback. It has enabled instructors to swiftly adapt course content and tutorial methods to better suit the student's needs, thereby increasing the overall effectiveness of the educational process.\nDue to the utility of this DiscordBot, we intend to develop a graphical user interface (GUI) to eliminate the need for direct interaction with Python scripts for data processing. Integrating the GUI into the learning management system will prevent media breaks and simplify its use. This will enable instructors to modify bot configurations without manual edits. The main objective is to create a user-friendly chatbot that schools and universities can universally adopt to improve the learning process and student experience. This will help instructors to determine the acceptance level and incorporate new features based on student feedback."}]}