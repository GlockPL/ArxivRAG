{"title": "Robust Stochastic Shortest-Path Planning via Risk-Sensitive Incremental Sampling", "authors": ["Clinton Enwerem", "Erfaun Noorani", "John S. Baras", "Brian M. Sadler"], "abstract": "With the pervasiveness of Stochastic Shortest-Path (SSP) problems in high-risk industries, such as last-mile autonomous delivery and supply chain management, robust planning algorithms are crucial for ensuring successful task completion while mitigating hazardous outcomes. Mainstream chance-constrained incremental sampling techniques for solving SSP problems tend to be overly conservative and typically do not consider the likelihood of undesirable tail events. We propose an alternative risk-aware approach inspired by the asymptotically-optimal Rapidly-Exploring Random Trees (RRT*) planning algorithm, which selects nodes along path segments with minimal Conditional Value-at-Risk (CVaR). Our motivation rests on the step-wise coherence of the CVaR risk measure and the optimal substructure of the SSP problem. Thus, optimizing with respect to the CVaR at each sampling iteration necessarily leads to an optimal path in the limit of the sample size. We validate our approach via numerical path planning experiments in a two-dimensional grid world with obstacles and stochastic path-segment lengths. Our simulation results show that incorporating risk into the tree growth process yields paths with lengths that are significantly less sensitive to variations in the noise parameter, or equivalently, paths that are more robust to environmental uncertainty. Algorithmic analyses reveal similar query time and memory space complexity to the baseline RRT* procedure, with only a marginal increase in processing time. This increase is offset by significantly lower noise sensitivity and reduced planner failure rates.", "sections": [{"title": "I. INTRODUCTION", "content": "Many practical robot motion planning tasks can be recast as shortest-path optimization problems, ranging from problems in autonomous drone delivery [1] to search and rescue [2]. In the basic setting, the Stochastic Shortest-Path (SSP) planning problem involves finding a path of minimum expected length that connects two obstacle-free robot configurations in a planning environment with obstacles and some notion of uncertainty. Such uncertainty may arise from the robot's sensing [3], [4], decision-making, or actuation modules [5], [6]. Furthermore, many established techniques for finding shortest paths such as graph search via Dijkstra's or the A* algorithm or sampling-based algorithms like the Rapidly-Exploring Random Trees (RRT) algorithm [7] and probabilistic roadmaps [8] are fundamentally non-robust. The foregoing challenges thus provide motivation for an inquiry into the design of robust shortest-path planning algorithms that consider some form of uncertainty in the planning procedure and return adequately-adjusted plans.\nIn the deterministic path planning setting, the shortest- path problem can be solved efficiently, for instance, via graph-search or sampling-based algorithms, such as the asymptotically-optimal RRT (RRT*) algorithm [9]. In the stochastic case [10], [11], however, the (now) SSP problem becomes possibly intractable, so that probabilistic completeness is inevitably lost, motivating probabilistically-constrained sampling algorithms. One such class of probabilistic methods proceeds by formulating the problem as a mathematical program subject to chance constraints [3], [12], where the obstacles, the robot's states, or both are represented by variables with noise-perturbed parameters. Convex relaxations of the chance constraints generally follow such formulations to make the problem tractable. Unfortunately, such relaxations have been reported to be conservative [13], [10]. To avoid such conservatism, some studies adopt risk-sensitive methods [14], [15] that introduce risk awareness by computing paths via risk-constrained optimization, where risk is quantified by some measure, e.g., the Conditional Value-at-Risk (CVaR).\nRisk-aware techniques take into account highly-unlikely yet probable worst-case events, and, as a consequence, hedge against these tail outcomes to an extent proportional to their probabilities. Robustness to stochasticity naturally emerges from such methods, as demonstrated in the risk-sensitive optimization literature [16], [17]. In more related work [10], the authors reformulate the SSP problem as Difference Convex Programs (DCPs) with the decision variable set as a dynamic risk functional and for Markov state transitions. Similar to our work, the authors adopt the CVaR (along with other risk measures); their method, however, relies on a convex reformulation of the SSP, a sound but needless step in our approach. Moreover, from a practical standpoint, DCPs may be challenging to implement owing to the many intricate details involved in their construction and their reliance on sophisticated optimization tools. In contrast, the modular nature of our Risk-Aware RRT* (RA-RRT*) algorithm makes it amenable to applications. Finally, unique to our work is also a discussion on the computational implications of considering risk in SSP planning as quantified by algorithmic complexity in processing time, query time, and memory space, a fundamental but mostly neglected consideration in studies focused on risk-aware SSP planning [18], [19]."}, {"title": "A. Contributions & Organization", "content": "i. Robust SSP Planning via Risk-Sensitive RRT* (Sec- tion III): We introduce the RA-RRT* algorithm for solving the SSP problem set forth in Section II. Our algorithm is a risk-sensitive adaptation of the RRT* algorithm to the stochastic setting that expands the search tree by selecting nodes at each sampling iteration to min- imize an empirically-computed CVaR\u00b9.\nii. Probabilistic Guarantee on the Optimal Worst-Case Path Length (Section III-B): We derive an upper bound on the probability of the optimal worst-case path length exceeding a prescribed threshold for a given confidence level, which provides a formal confirmation of the probabilistic robustness of our risk-sensitive approach.\niii. Simulation Results (Section V): Finally, we present re- sults from comprehensive simulation studies (Section IV) that demonstrate the utility of our risk-sensitive approach to incremental sampling-based path planning. These results form the basis of attendant elaborate discussions that further validate the theoretical (Section III-B) and computational complexity (Section III-D) results.\nNotation: The symbol $[x]_i$ denotes the $i$th element of the vector, $x \\in \\mathbb{R}^d$, with transpose, $x^\\top$, while $[A]_{ij}$ denotes the element in the $i$th row and $j$th column of the $m \\times n$ matrix, $A \\in \\mathbb{R}^{m \\times n}$, with $1 \\leq i \\leq m$, $1 \\leq j \\leq n$, and where $m$ and $n$ are both integers greater than 1. The symbol $|\\cdot||$ will denote the Euclidean norm, and we will denote the expectation and variance of a random variable, $Y$, with realization $y$, by $\\mathbb{E}[Y]$ and $\\text{Var}[Y]$, respectively. Lastly, $\\mathbb{R}_{a,b}$ and $\\mathbb{Z}_{a,b}$ respectively denote the set of real numbers and the integers on $[a, b]$, $A[i]$ is the $i$th element of the set $A$, with cardinality, $|A|$, and $P(E)$ denotes the probability of event $E$."}, {"title": "II. BACKGROUND & PROBLEM FORMULATION", "content": "We begin by stating the problem of finding shortest paths in $\\mathbb{R}^2$ with convex obstacles. Useful background material follows that characterizes the configuration space and defines relevant path-related objects.\nDefinition 1 (Free Space Representation & SSP Problem Particulars): Let $X \\subset \\mathbb{R}^2$ denote the non-empty compact set representing the configuration space (C-space) of the robot and denote its obstacle-free subset as $X_{\\text{free}} := \\{x \\in X \\\\ x \\notin \\mathcal{X}\\}$, where $\\mathcal{X}$ is the set of all (convex) C-space obstacles. We will take $X_{\\text{free}}$ to be represented by a tree, $T$, given by the tuple $(V_T, E_T)$, with $V_T$ and $E_T := \\{(.,*) \\\\ . , * \\in V_T\\}$ respectively denoting the tree's node and edge sets.\nDefinition 2 (Path): Let $x_{\\text{start}} \\in V_T$ and $x_{\\text{goal}} \\in V_T$ respectively denote the prescribed start and target (goal) nodes. We define a path, $p \\in \\mathcal{P}$, as a finite sequence of $N$ edges in $E_T$ (hereafter, path segment) connecting $x_{\\text{start}}$ and $x_{\\text{goal}}$, i.e.,"}, {"title": "A. Finding Shortest Paths in Planar Regions with Obstacles", "content": "$\\mathbb{R}_{0,\\infty}$ (see Section II-B for the definition of $\\ell$).\nThe following assumption on finite-time goal reachability is required to ensure that the SSP problem is well-posed and also serves as a terminating condition for our algorithm.\nAssumption 1 (Finite-Time Goal Reachability): There exists a finite integer, $N_{\\text{max}}$, such that the goal can be reached from any initial node in $X_{\\text{free}}$ in at most $N_{\\text{max}}$ time steps.\nTo impose Assumption 1, we require that the iteration step, $N$, at which the goal is reached be bounded above by $N_{\\text{max}}$. We can now state the SSP problem formally.\nProblem 1 (SSP Problem): Assume the setting in Definitions 1 and 2 and Assumption 1. Suppose also that $L_k$ is unknown but follows a known probability distribution denoted by $\\mathbb{P}_{\\theta}$, with parameter $\\theta$. Find a path, $p$, of minimum expected length such that $x_0 = x_{\\text{start}}$ and $x_N = x_{\\text{goal}}$.\nFormally, we can express Problem 1 as the following mathematical program\n$\\begin{aligned} \\underset{p \\in \\mathcal{P}}{\\text{min }} & \\quad \\mathbb{E} [L] & \\text{(1a)} \\\\ \\text{s.t.:} & \\quad x_0 = x_{\\text{start}}, x_N = x_{\\text{goal}}, N \\leq N_{\\text{max}}, & \\text{(1b)} \\\\ & \\quad x_k \\in X_{\\text{free}}, L_k = \\ell(p[k]), \\forall k \\in \\mathbb{Z}_{0, N_{\\text{max}}-1}, & \\text{(1c)} \\end{aligned}$\nwith $L := \\sum_{k=0}^{N-1} L_k$ denoting the total path length (i.e., the cost) and where the expectation is computed with respect to the underlying uncertainty distribution."}, {"title": "B. Uncertainty Quantification & Risk Notion", "content": "As remarked in Section I, the inherent stochasticity in the SSP problem stems from varied sources that typically influence the uncertainty model. For instance, localization inaccuracy may be captured via belief- based probability density functions [4] and dynamic obstacles via ambiguity sets [20]. A canonical direction is typically to assume partial or noise-corrupted environmental information [12], [3], [13], [21]. Such characterizations of uncertainty besides enabling mathematical precision are also of immediate practical relevance due to their ease of implementation. These reasons motivate our adoption of this particular uncertainty class. Specifically, we take the length of the $k$th path segment to be given by the following expression\n$L_k = c + \\epsilon_k, \\quad \\epsilon_k \\sim \\mathcal{N}(0, \\sigma_{\\epsilon_k}^2),$ (2)"}, {"title": "Risk Notion:", "content": "To assess the robot's risk at each stage of Problem 1, we adopt the $\\alpha$-level CVaR (CVaR$\\mathbb{\\alpha}$) of $L_k$, which quantifies the expected worst-case realization of $L_k$, with $0 < \\alpha < 1$. The CVaR$\\mathbb{\\alpha}$ risk assessment tool possesses certain useful mathematical properties (see [22] and attendant references), including convexity and monotonicity, which make it amenable to dynamic programming problems (such as the SSP problem) with optimal substructure. Intuitively, and in the path planning context, CVaR$\\mathbb{\\alpha}(L_k)$ is the average of all realizations of $L_k$ that exceed the $\\alpha$ quantile, i.e., the $\\alpha$-level Value-at-Risk (VaR$\\mathbb{\\alpha}$), which characterizes some threshold on $L_k$. Furthermore, the CVaR provides probabilistic guarantees on the best (optimal) path length that can be attained under the prescribed maximum noise variance. Moreover, as set forth in the risk optimization literature [23] and, more recently, in results from risk-sensitive reinforcement learning [24], by optimizing with respect to a risk-constrained objective function, one can establish a probabilistic guarantee on the upper bound of the (cumulative) cost tail probability (for bounded stage costs). These results motivate and lend credence to our risk-sensitive SSP planning approach."}, {"title": "C. Computing CVaR$\\mathbb{\\alpha}(L_k)$", "content": "We will now segue to deriving an expression for CVaR$\\mathbb{\\alpha}(L_k)$ given the foregoing background. Formally, the CVaR$\\mathbb{\\alpha}$ of a random variable $Y$ represents the expected value of the distribution of $Y$ conditioned on the event that $Y$ is above the VaR$\\mathbb{\\alpha}$ threshold. Mathematically, it is defined as\n$\\begin{aligned} \\text{CVaR}_{\\alpha}(Y) &= \\mathbb{E}[Y \\\\ Y > \\text{VaR}_{\\alpha}(Y)] \\\\ &= \\underset{z}{\\text{inf}} \\left\\{z + \\frac{1}{1 - \\alpha} \\mathbb{E}[Y - z]_+\\right\\} \\\\ &= \\underset{z}{\\text{inf}} \\left\\{z + \\frac{1}{1 - \\alpha} \\int_{y} (y - z)^+ d \\mathbb{P}_Y\\right\\}, \\end{aligned}$ (4)\nwhere $[*]^+ := \\text{max}(*, 0)$, and $z = \\text{VaR}_{\\alpha}(Y)$ is the $\\alpha$-quantile of $Y$'s distribution, given by\n$\\text{VaR}_{\\alpha}(Y) = \\underset{z}{\\text{inf}} \\{z \\in \\mathbb{R} \\\\ \\mathbb{P}(Y < z) \\geq \\alpha\\}.$ (5)\nIn our current setting where the random variable of interest ($L_k$) is normally distributed, the VaR$\\mathbb{\\alpha}$ is given as\n$\\text{VaR}_{\\alpha}(L_k) = F_{L_k}^{-1}(\\alpha).$ (6)"}, {"title": "III. ROBUST SSP PLANNING VIA RISK-SENSITIVE RRT*", "content": "Having discussed the calculation of the CVaR, we will now state a modified version of Problem 1, with the objective defined in terms of the CVaR. We first define the worst-case path length, which we will invoke in the modified problem.\nDefinition 3 (Worst-Case Path Length): We define the worst- case path length (denoted as $L_{\\text{worst}}$) as the expected sum of the lengths of all path segments in $p$ under the maximum noise variance. Formally, we can define $L_{\\text{worst}}$ as $\\underset{\\theta}{\\text{sup}} \\mathbb{E} [L]$.\nTo re-express $L_{\\text{worst}}$ in terms of the CVaR, we apply the following dual representation of the CVaR (see [25])\n$\\text{CVaR}(Y) = \\underset{P_Y \\in \\Pi_Y}{\\text{sup }} \\mathbb{E} [Y],$ (9)\nwhere the supremum is taken over the set, $\\Pi_Y$, of all admissible probability distributions, $P_Y$ of $Y$. With (9), we can thus rewrite $L_{\\text{worst}}$ as\n$L_{\\text{worst}} = \\underset{P_L \\in \\Pi_L}{\\text{sup }} \\mathbb{E} [L] = \\text{CVaR}_{\\alpha}(L),$ (10)\nwhere $P_L$ is the probability distribution of the resulting path length, and $\\Pi_L$ denotes the family of all such distributions, i.e., each member of $\\Pi_L$ characterizes an instance of $P_L$ defined by a unique noise variance. Thus, from the linearity of (conditional) expectation, under the assumption that the segment lengths are independent, and by the one-step coherence of the CVaR [10], we can write\n$L_{\\text{worst}} = \\text{CVaR}(L) = \\sum_{k=0}^{N-1} \\text{CVaR}_{\\alpha}(L_k).$ (11)\nWe can now state the modified SSP problem.\nProblem 2 (Modified SSP Problem with CVaR Criterion): Assume the setting in Definitions 1 to 3. Find a path, $p$, that minimizes $L_{\\text{worst}}$ such that $x_0 = x_{\\text{start}}$ and $x_N = x_{\\text{goal}}$.\nAccordingly, the solution to Problem 2 is the path $p$ that solves the following mathematical program\n$\\begin{aligned} &\\underset{p \\in \\mathcal{P}}{\\text{min }} J_{\\text{CVaR}} (x_{\\text{start}}, \\alpha) := \\sum_{k=0}^{N-1} \\text{CVaR}_{\\alpha} (L_k) & \\text{(12a)} \\\\ & \\text{s.t.:} \\quad x_0 = x_{\\text{start}}, x_N = x_{\\text{goal}}, N \\leq N_{\\text{max}}, & \\text{(12b)} \\\\ & \\quad x_k \\in X_{\\text{free}}, L_k = \\ell(p[k]), \\forall k \\in \\mathbb{Z}_{0, N_{\\text{max}}-1}. & \\text{(12c)} \\end{aligned}$"}, {"title": "A. SSP Planning with CVaR Criteria", "content": "In Proposition 1, we derive a probabilistic bound on the optimal worst-case path length, motivated by the proof of Theorem 2 in [24]. We begin by deriving an expression for the Kullback-Leibler (KL) divergence in our present context via the following lemma. As we will show, the KL divergence allows us to reason about the expected optimal worst-case path length through appropriate concentration inequalities\u2074.\nLemma 1: Let $L_{\\text{worst}}^*$ denote the optimal value of $L_{\\text{worst}}$, i.e., the length of the path, $\\underset{p \\in p}{\\text{argmin}} J_{\\text{CVaR}} (x_{\\text{start}}, \\alpha)$, returned by the mathematical program in Problem 2, and suppose that $\\mathbb{P}_{L_{\\text{worst}}^*}$ is its associated probability distribution, with mean, $\\mu_{L_{\\text{worst}}^*}$, and variance, $\\sigma^2_{L_{\\text{worst}}^*}$. Let $L_{\\text{max}}$ denote some designer-prescribed path length threshold, with associated distribution, $\\mathbb{P}_{L_{\\text{max}}} := \\mathcal{N}(L_{\\text{max}}, \\delta^2)$, where $\\delta > 0$ is a toler- ance on $L_{\\text{max}}$\u2075. Denote the KL divergence of $\\mathbb{P}_{L_{\\text{worst}}^*}$ from $\\mathbb{P}_{L_{\\text{max}}}$ as $D_{\\text{KL}} (\\mathbb{P}_{L_{\\text{worst}}^*}\\|| \\mathbb{P}_{L_{\\text{max}}})$, and suppose there exists a sufficiently small $\\epsilon > 0$ such that $D_{\\text{KL}} (\\mathbb{P}_{L_{\\text{worst}}^*}\\|| \\mathbb{P}_{L_{\\text{max}}}) \\leq \\epsilon$. Then the following inequality holds:\n$\\text{log} \\frac{\\sigma_{L_{\\text{worst}}}}{\\sigma_{\\delta} \\sqrt{N}} + \\frac{N\\delta^2 + (\\sum_{k=0}^{N-1} c - \\mu_{L_{\\text{worst}}^*})^2}{2\\sigma^2_{L_{\\text{worst}}^*}} - \\frac{1}{2} < \\epsilon.$ (13)\nProof. By the central limit theorem for sums, we know that in the limit as $N$ increases, $\\mathbb{P}_{L_{\\text{worst}}^*}$ will converge in probability to a normal distribution given by $\\mathbb{P}_L = \\mathcal{N}(\\mu_l, \\sigma^2_l)$, where $\\mu_l := \\sum_{k=0}^{N-1} c$ and $\\sigma_l := \\sigma_{\\delta} \\sqrt{N}$. By the definition of the KL divergence between two univariate Gaussians, we can write $D_{\\text{KL}} (\\mathbb{P}_{L_{\\text{worst}}^*}\\|| \\mathbb{P}_{L_{\\text{max}}})$ as\n$\\begin{aligned} &\\text{log} \\frac{\\sigma_{L_{\\text{worst}}}}{\\sigma_l} + \\frac{\\sigma_l^2 + (\\mu_L - \\mu_{L_{\\text{worst}}^*})^2}{2\\sigma^2_{L_{\\text{worst}}}} - \\frac{1}{2} \\\\ \\Rightarrow & \\text{log} \\frac{\\sigma_{L_{\\text{worst}}}}{\\sigma_{\\delta} \\sqrt{N}} + \\frac{N\\delta^2 + (\\sum_{k=0}^{N-1} c - \\mu_{L_{\\text{worst}}^*})^2}{2\\sigma^2_{L_{\\text{worst}}^*}} - \\frac{1}{2} \\leq \\epsilon. \\end{aligned}$ (14)\n$\\begin{aligned} \\mathbb{P}_{L_{\\text{worst}} \\sim \\mathbb{P}_{L_{\\text{worst}}^*}} [L_{\\text{worst}} \\geq L_{\\text{max}}] &< \\frac{\\frac{1}{\\alpha} \\left(\\sum_{k=0}^{p-1} \\ell \\left(\\text{J}_{\\text{CVaR}}[k]\\right) + \\frac{1}{1 - \\alpha} \\epsilon\\right)}{L_{\\text{max}}}, & \\quad 0 < \\alpha < 1. \\end{aligned}$"}, {"title": "B. Probabilistic Guarantee on the Optimal Lworst Value", "content": "Proof. Invoking Markov's inequality, we can write\n$\\mathbb{P}_{L_{\\text{worst}} \\sim \\mathbb{P}_{L_{\\text{worst}}^*}} [L_{\\text{worst}} \\geq L_{\\text{max}}] < \\frac{\\mathbb{E}[L_{\\text{worst}}]}{L_{\\text{max}}} \\\\ < \\frac{\\frac{1}{\\alpha} \\left(\\sum_{k=0}^{p-1} \\ell \\left(\\text{J}_{\\text{CVaR}}[k]\\right) + \\frac{1}{1 - \\alpha} D_{\\text{KL}} (\\mathbb{P}_{L_{\\text{worst}}}\\|| \\mathbb{P}_{L_{\\text{max}}})\\right)}{L_{\\text{max}}}.$ (16)\nFrom (16) and by Lemma 1, we can thus write:\n$\\begin{aligned} &\\mathbb{P}_{L_{\\text{worst}} \\sim \\mathbb{P}_{L_{\\text{worst}}^*}} [L_{\\text{worst}} \\geq L_{\\text{max}}] \\\\ &< \\frac{1}{L_{\\text{max}}} \\sum_{k=0}^{p-1} \\ell \\left(\\text{J}_{\\text{CVaR}}[k]\\right) + \\frac{1}{1 - \\alpha} \\epsilon, \\text{ so that} & \\text{(17)} \\\\ & \\mathbb{E}[L_{\\text{worst}}] \\leq \\sum_{k=0}^{p-1} \\ell \\left(\\text{J}_{\\text{CVaR}}[k]\\right) + \\frac{1}{1 - \\alpha} \\epsilon. & \\text{(18)} \\end{aligned}$"}, {"title": "C. The RA-RRT* Planning Algorithm", "content": "In this section, we will discuss the components of our RA- RRT* algorithm for solving Problem 2. Fig. 1 highlights relevant running components that will be referenced in this section. In what follows, we will assume the tree-based representation of $X_{\\text{free}}$ set forth in Definition 1."}, {"title": "D. Algorithmic Complexity of the RA-RRT* Algorithm", "content": "In this section, we present the computational complexity of our RA-RRT* algorithm. As established in the path planning literature ([27], [9]), it is well known that the RRT* algorithm is linear in query time ($O(n)$) and log-linear in processing time ($O(n \\text{log} n)$), while its (memory) space complexity is linear ($O(n)$), where $n$ is the sample size. Our algorithm differs from the RRT* algorithm in two ways. First, in the generation of the set of nearby nodes (line 11), connections to $k_n$ nearest neighbors are sought. The other difference is in the RA-RRT* algorithm's node selection process that introduces VaR$\\mathbb{\\alpha}$ and CVaR$\\mathbb{\\alpha}$ computation steps (lines 15 and 16 of Algorithm 1) prior to the COLLISIONFREE sub-procedure. With this background and assuming the sorting algorithm for each sorting-dependent quantity (e.g., VaR$\\mathbb{\\alpha}$, CVaR$\\mathbb{\\alpha}$, min, etc.) is the merge sort algorithm, we can affirm the following:\ni. The RA-RRT* algorithm is linear in query time, since it is a single-query algorithm like the RRT*.\nii. The RA-RRT* algorithm has a space complexity of $O(n)$, i.e., it is linear-space, since only the path is saved in memory for single-query access.\niii. From lines 15 and 16 of Algorithm 1, with $n_{\\epsilon}$ corre- sponding to the number of samples of $\\epsilon_k$ drawn at the $k$th sampling iteration and for $k_n$ neighbors ($\\forall k$), the processing time complexity of the RA-RRT* algorithm can be calculated as $O(n \\text{log}(n \\cdot N_{\\text{RA}}))$, where $N_{\\text{RA}}$ is the number determined by the following expression\n$N_{\\text{RA}} \\triangleq \\underset{k}{\\text{max}} (n_{\\epsilon} k_n).$ (19)\nThus, the RA-RRT* algorithm is also log-linear in processing time."}, {"title": "IV. NUMERICAL SIMULATIONS", "content": "We represent the planning environment by a (planar) grid of finite area and sufficient discretization, where each grid point corresponds to a unique (robot) configuration in X. Configurations belonging to C-space obstacles within the grid are known and assumed to be dilated by the prescribed robot radius, $R_{\\text{rb}}$, so that a point-robot assumption makes sense geometrically. To each new node in the tree, we associate a $k_n$-connected neighborhood, that is, from each grid point, the robot can attempt to steer towards the uniformly-sampled node from one of $k_n$ nearby configurations. Transitions in any given direction are permissible as long as the Euclidean distance to be traversed is under the prescribed threshold, $\\rho \\sqrt{(dx^2 + dy^2)}$, where $\\rho$ is the rewiring radius (see the discussion immediately preceding Section III-D). It is straightforward to verify that such motion constraints can be represented by the single-integrator model\n$x_{k+1} = x_k + u_k,$ (22)\nwhere $u_k$ is in the set\n$\\begin{Bmatrix} \\begin{bmatrix} \\pm dx[\\kappa]_1 \\\\ 0 \\end{bmatrix}, \\begin{bmatrix} 0 \\\\ \\pm dy[\\kappa]_2 \\end{bmatrix}, \\begin{bmatrix} -dx[\\kappa]_1 \\\\ dy[\\kappa]_2 \\end{bmatrix}, \\begin{bmatrix} dx[\\kappa]_1 \\\\ -dy[\\kappa]_2 \\end{bmatrix} \\end{Bmatrix}$\nand $\\kappa = \\text{abs}(x_{k+1} - x_k)$, with abs denoting the (element- wise) absolute value. For each value of $\\alpha \\in \\{0.1, 0.5, 0.9\\}$, we conducted 50 independent runs of the RRT* and RA- RRT* algorithms with five (circular) convex obstacles and a sixth non-convex obstacle formed by joining three circles of different radii. In addition, we performed simulation runs for $\\sigma_{\\epsilon_k} \\in \\{0.01, 0.05, 0.1, 0.5\\}$. We selected these noise variance values using heuristics, along with the SSP problem's partic- ulars, to capture a sufficiently-varied uncertainty spectrum. We also found that, for $\\sigma_{\\epsilon_k} << 0.01$, the noise becomes too imperceptible to be relevant in our analysis, and, conversely, for high noise variance (i.e., for values of $\\sigma_{\\epsilon_k} >> 0.5$), the problem becomes increasingly intractable."}, {"title": "V. RESULTS & DISCUSSIONS", "content": "In this section, we discuss results recorded from our numerical experiments under representative subheadings that come next. In Table I, we provide a comprehensive (quantitative) summary of our results. There, the FAILURE RATE column header records the percentage of planner failure measured by how many times (in 50 runs) the planner failed to return a path within the maximum number of sampling iterations."}, {"title": "A. Worst-Case SSP Planning Performance", "content": "On Table I, we compare the mean and variance of the worst- case path lengths (i.e., path lengths corresponding to $\\sigma_{\\epsilon_k} = 0.5$) over 50 runs. From here, for the RA-RRT* algorithm, we notice a smaller variability in the mean path length as well as reduced variance, as opposed to the RRT* baseline. In addition, by comparing the trees and paths generated by both algorithms (see Fig. 2) with increasing noise variance and for a fixed confidence level ($\\alpha = 0.9$), we notice a decrease in the connectivity of the generated nodes that ultimately leads to prolonged processing times and longer paths for the baseline. In contrast, for the RA-RRT* algorithm, we observe longer computation times but (shorter) gracefully-degraded path lengths. Lastly, by examining the failure rate column, we can infer that the RA-RRT* fails significantly less, even under increasing noise, unlike the RRT*. Finally, by inspecting the final column of Table I, we also notice reduced worst-case path lengths for the RA-RRT* algorithm than the baseline."}, {"title": "B. Assessing the Cost of Risk-Sensitive SSP Planning", "content": "Furthermore, from Fig. 2 and Table I, we notice that, although the RA-RRT* algorithm takes slightly more computation time (in the order of 16.7, 16.8, and 16.8 for $\\alpha = 0.1, 0.5$, and 0.9, respectively), it is markedly less sensitive to variations in the noise parameter, evidenced by its shorter path lengths and reduced percentage of failure with increasing noise. We also observe from Fig. 3, that, under the RA-RRT* algorithm, the variance in the path length is equal or lower than that of the RRT*, for increasing stochasticity and for all three $\\alpha$ values. Lastly, by examining the entries of Table II, it becomes evident that, true to our article's overarching problem, the RA- RRT* indeed minimizes the path length's CVaR$\\mathbb{\\alpha}$, evidenced by its smaller values across the board compared to the standard RRT* algorithm. Consequently, the expectation is also minimized (see the penultimate column of Table II), which provides evidence for the optimality of our approach."}, {"title": "C. A Note On Performance at the Extremities of Uncertainty", "content": "We conclude this section with a discussion on the planner performance at the extremities of uncertainty, i.e., for $\\sigma_{\\epsilon_k} = 0$ and $\\sigma_{\\epsilon_k} >> 0.5$. In the former case and for the same planning environment and problem setup, we expect the performance of the RA-RRT* algorithm to coincide with the baseline RRT*, since the VaR and CVaR become equal (see Eqs. (6) to (8)). This is most likely to be the case, since in the noise-free case, our algorithm is essentially the $k_n$-RRT* algorithm which has been shown to have comparable computational efficiency with the RRT* algorithm (see [9], Table 1). In the latter case, however, we anticipate a significantly-degraded performance for both algorithms, since finitude of the path segment lengths is assumed for tractability. Still, we expect a possibly less severe performance degradation for the RA-RRT* algorithm than the baseline."}, {"title": "VI. CONCLUDING REMARKS", "content": "In this article, we developed a probabilistically-robust sampling-based algorithm for solving SSP problems by adapt- ing the RRT* algorithm to handle uncertainty in path-segment lengths through risk-sensitive optimization. Using formal arguments, algorithmic analyses, and results from exhaustive simulations of a grid-world path planning experiment, we demonstrated the utility of adopting risk in incremental sampling-based planning algorithms. We also presented a comprehensive computational complexity analysis of our RA-RRT* algorithm, which demonstrated that despite a slight increase in processing time, our approach maintains comparable query time and memory space complexity to the baseline RRT* algorithm, while significantly reducing planner failure rates and providing robustness to environmental uncertainty. In future work, we hope to adapt the foregoing ideas to the setting of stochastic environments with dynamic and possibly noisy obstacles. Other valid extensions entail developing similar ideas for non-Gaussian and non-additive noise or for the case where the CVaR cannot be computed precisely."}]}