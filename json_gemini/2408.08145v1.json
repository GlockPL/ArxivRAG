{"title": "Model-based Workflow for the Automated Generation of PDDL Descriptions", "authors": ["Hamied Nabizada", "Tom Jeleniewski", "Felix Gehlhoff", "Alexander Fay"], "abstract": "Abstract-Manually creating Planning Domain Definition Language (PDDL) descriptions is difficult, error-prone, and requires extensive expert knowledge. However, this knowledge is already embedded in engineering models and can be reused. Therefore, this contribution presents a comprehensive workflow for the automated generation of PDDL descriptions from integrated system and product models.\nThe proposed workflow leverages Model-Based Systems Engineering (MBSE) to organize and manage system and product information, translating it automatically into PDDL syntax for planning purposes. By connecting system and product models with planning aspects, it ensures that changes in these models are quickly reflected in updated PDDL descriptions, facilitating efficient and adaptable planning processes. The workflow is validated within a use case from aircraft assembly.", "sections": [{"title": "I. INTRODUCTION", "content": "The rapid advancement of technology in recent years has led to increasingly complex production systems and products. Model-Based Systems Engineering (MBSE) has emerged as a powerful approach for addressing these challenges by providing a structured methodology for modeling, analyzing, and managing complex systems [1]. MBSE promotes the use of models to provide detailed and consistent descriptions of production systems, facilitating efficient collaboration among the various disciplines involved in the development process [2].\nMethods of MBSE, such as the Systems Modeling Language (SysML)-based modeling approach described by [3], offer structured methodologies for creating system models. These structured approaches reduce the heterogeneity of the contents and representations of individual system submodels, thereby promoting the reusability and comparability of the created models [4]. However, these methods often require numerous manual steps, such as assigning numerous individual process steps to potential technical resources that can execute these processes, which demands a high level of expert knowledge. This is particularly true when comparing different system variants to determine the ideal configuration for specific optimization goals.\nIn system development, it is crucial to determine which system variant is best suited to efficiently perform a given set of processes under specific conditions [5]. To facilitate this determination, process plans are required that define the sequence of actions to be executed and assign these actions to the corresponding subsystems. Automating this process planning is desirable to reduce the time required to evaluate different system variants. This automation requires the integration of specific planning aspects into system modeling. Planning aspects refer to the definition of actions necessary to achieve specific goals within the modeled system. These aspects are central to the field of AI planning, which focuses on the development of algorithms and languages for solving planning problems [6].\nThe Planning Domain Definition Language (PDDL) has emerged as the de facto standard for describing planning problems [7]. PDDL consists of two main components: i) the domain, which defines the types, predicates, and actions available, and ii) the problem, which specifies the initial state, goals, and constraints of the planning task. However, the modeling of PDDL domain descriptions is often considered particularly challenging, time-consuming, and error-prone [8]. Similarly, the modeling of PDDL problem instances presents challenges, such as data inconsistency issues [9]. This paper presents a comprehensive workflow for the automated generation of PDDL descriptions from system and product models, leveraging MBSE to enhance the planning process. The workflow consists of four phases: (I) Analysis and Preparation of the System Model, (II) Enrichment of the System Model, (III) Provision of the Product Model, and (IV) Generation of PDDL Descriptions. By connecting the system and product models with the planning aspects, the workflow ensures that changes in these models are reflected in updated PDDL descriptions.\nThe remainder of this paper is structured as follows. Section II provides an overview of related work. Section III presents the proposed workflow. Section IV applies the workflow to an application case in aircraft assembly. Finally, Section V concludes the paper and outlines future research."}, {"title": "II. RELATED WORK", "content": "Huckaby et al. [10] introduce a SysML taxonomy for assembly tasks to describe system capabilities, which form the basis for deriving PDDL actions. However, the PDDL descriptions are created manually and are limited to the taxonomy.\nVieira da Silva et al. [11] present an ontology-based approach to automatically generate PDDL descriptions by matching required and offered capabilities. This approach requires a specific capability model and does not use existing models.\nRimani et al. [12] simplifies planning problems in Hierarchical Domain Definition Language (HDDL), a PDDL dialect, by comparing HDDL and SysML elements and proposing a conceptual workflow for modeling HDDL. However, the transformation must be done manually.\nWally et al. [13] describe an approach that converts ISA-95 manufacturing system models into PDDL descriptions for production planning. This approach is limited to ISA-95 systems and does not integrate with other models.\nKonidaris et al. [14] present a method for developing abstract symbolic representations to aid high-level planning in robotics, focussing on how robots can utilize these representations derived from sensorimotor data. This approach prioritizes learning from direct interactions over using existing models.\nStoev et al. [15] present a tool for automating the generation of domain-specific symbolic models from texts. This tool streamlines the process by extracting domain knowledge from instructional texts, like cooking recipes, and automatically generating PDDL descriptions. Similar to the approach described in [14], this tool also does not use existing models.\nNabizada et al. [16] introduce a dedicated SysML profile that embeds PDDL constructs directly into SysML models. This approach facilitates automated planning by creating an interface between system modeling and planning algorithms.\nWhile these approaches contribute valuable methods for generating PDDL descriptions, they often require manual intervention, lack integration with existing models, or are limited to specific frameworks. Therefore, there is a need for a comprehensive workflow that leverages existing system and product models, integrating them seamlessly to generate automatically PDDL descriptions. The following section introduces such a workflow designed to address these gaps."}, {"title": "III. WORKFLOW FOR AUTOMATED GENERATION OF PDDL DESCRIPTIONS", "content": "The proposed workflow model facilitates the automated generation of PDDL descriptions by systematically analyzing and enriching existing system and product models. It consists of four phases: Analysis and Preparation of the System Model, Enrichment of the System Model, Provision of the Product Model, and Generation of PDDL Descriptions. The entire workflow is depicted in Fig. 1 and is explained in detail below.\n\nA. Phase I: Analysis and Preparation of the System Model\n\nThe workflow requires a system model as a starting point, typically modeled using the SysML. A system model offers a comprehensive representation of a system encompassing structural, behavioral, functional, and operational information, as well as constraints, requirements, and quality attributes. The use of SysML is a prerequisite for the proposed workflow, as it allows for a structured and consistent representation of the system components and their interactions.\nSince it cannot be assumed that users of the proposed workflow were involved in developing the system model, the first step is to analyze and understand the existing system model (Analyze System Model). This analysis provides an understanding of the system's architecture and context, ensuring that all relevant components and relations are recognized.\nAfterward, it is essential to define which parts of the system model will be the scope of observation (Define Scope of Observation). For instance, a system model may describe an entire production plant, but only a specific submodule is relevant for the current planning problem. This scope must be clearly defined in advance to ensure that subsequent steps focus only on relevant parts of the system. By doing so, the planning process avoids unnecessary complexity.\nThe next step is to identify which elements within the system model's scope are relevant for the current planning problem (Identify Relevant Elements). This involves selecting components, interfaces, and relations that play a critical role in the planning problem. Identifying these relevant elements establishes a clear mapping between the system model and the planning domain, which helps accurately translate the system's structure into a PDDL description.\nWith a well-defined scope and a clear understanding of the relevant system elements, the next phase focuses on enriching the system model by incorporating annotations and actions required for the PDDL domain.\n\nB. Phase II: Enrichment of the System Model\n\nIn Phase II, the goal is to enrich the system model with planning-specific aspects. This requires the SysML Profile for PDDL [16] which allows the embedding of PDDL constructs directly into SysML models.\nTherefore, the first step of this phase is the creation of the PDDL domain by defining the static parts of the domain (Create PDDL Domain (excl. Actions)). This involves specifying objects, predicates, and types that represent the system's components and their properties.\nStarting with the static parts of the domain is crucial because it establishes the foundational elements and structure of the system. Objects and predicates define the components and their relations. These static elements are essential because they are reused in the dynamic parts of the domain. For example, predicates defined in this step will be used as preconditions and effects in the actions. By thoroughly understanding and specifying static elements first, the actions that operate upon these elements can be defined more accurately and effectively.\nFollowing the definition of static parts, dynamic aspects of the domain are addressed by defining actions that can be performed within the system (Define Actions of Domain). Actions include preconditions and effects. The preconditions outline the conditions under which actions can be executed, and the effects describe the resulting changes in the system's state. These preconditions and effects are directly based on objects and predicates defined earlier, ensuring consistency, correctness, and reusability in the planning domain.\nThese steps lead to an Extended System Model from which targeted information for the PDDL domain description can be queried and extracted."}, {"title": "C. Phase III: Provision of the Product Model", "content": "While the system model provides a wealth of information necessary for creating the PDDL domain, the product model supplies essential information for defining the PDDL problem. The PDDL problem describes the specific instance of the planning task, including the initial state and the goal state, which are often closely related to the product's current state and desired outcomes. For example, in a manufacturing context, the system model might define the machinery and processes available (PDDL domain), whereas the product model specifies the current configuration of a product and the desired final configuration (PDDL problem).\nTherefore, in Phase III, the focus shifts to integrating product-specific information into the planning domain. The process begins with identifying relevant product information from the existing product model (Identify Product Information), such as the positions of rivets of an aircraft fuselage.\nAfter identifying the relevant information, the next step is to extract this information from the product model (Extract Relevant Information) and transfer it to the MBSE environment (Transfer to MBSE Environment). In the MBSE environment, the extracted product information is annotated according to the PDDL domain (Annotate according to PDDL Domain). This annotation reuses the previously defined objects, predicates, and types from the PDDL domain, ensuring that the product model is aligned with the planning domain. These steps result in an Extended Product Model, enriched with the necessary annotations required for planning.\n\nD. Phase IV: Generation of PDDL Descriptions\n\nIn Phase IV, the focus is on automatically generating a problem description. This description can then be submitted to a solver to create a feasible plan based on the integrated system and product models. At this point, the generation of PDDL descriptions, which include both the PDDL domain and the PDDL problem file, occurs (Generate PDDL Descriptions). Since the required information has already been prepared in previous phases, an algorithm can directly query this information and translate it into PDDL syntax.\nBecause the system model and the product model are directly associated with planning aspects, generating new PDDL files can be accomplished with minimal manual effort when changes occur in these models. This ensures that the planning problem remains up-to-date and accurately reflects the current state and goals of the system.\nFinally, these generated PDDL files can be fed into a PDDL solver, such as those available by the implementation presented in [17], to solve the planning problem (Solve Problem Description). The solver processes PDDL descriptions to generate a sequence of actions (a plan) that transitions the system from an initial state to a goal state, adhering to all specified constraints and requirements.\nOnce the plan is generated, it can be used for further analysis to optimize the system. This includes evaluating different scenarios, identifying potential bottlenecks, and exploring alternative strategies to improve efficiency. These analyses help in making decisions and ensuring that the system operates at its optimal performance level under specific constraints.\nThese steps complete the workflow, resulting in a comprehensive process for generating PDDL planning problems based on system and product models."}, {"title": "IV. APPLICATION EXAMPLE", "content": "To validate the developed workflow, a use case from aircraft structure assembly was utilized, featuring a UR10 robotic arm within the fuselage for screwing collars onto rivets, each requiring specific end-effectors. The workflow leveraged existing system and product models, developed in Magic Systems of Systems Architect (MSoSA) and 3DExperience respectively, to optimize process flow and reduce throughput times. Detailed modeling techniques from [18] and the application of the PDDL Profile on the system model, as demonstrated in [16], facilitated this integration. The process involved extracting rivet information from the 3D product model, which was necessary to define the PDDL problem description.\nFor the generation of the PDDL files, Velocity Template Language (VTL) templates were utilized. These templates structure the output of planning information into the standardized PDDL format. By using placeholders dynamically filled by the Velocity Engine integrated within MSOSA, VTL templates systematically transform domain-specific data extracted from system and product models into valid PDDL files. This automation ensures that the planning documents align precisely with the specified planning requirements.\nThe application of this workflow successfully demonstrated the capability to generate correct PDDL descriptions from the system and product models and solve them by a PDDL solver. The resulting plan was compared against the expected assembly process to ensure correctness. Actions generated by the solver were checked for logical consistency and alignment with the system and product specifications. This validation confirms the workflow's efficacy in automating complex planning tasks, thereby streamlining the production process while ensuring accurate alignment with the objectives of the planning problem. This workflow establishes a tight connection between engineering models and the planning problem, allowing for quick adaptation to changes. For instance, when a product is modified, new PDDL files can be generated with minimal effort, ensuring that planning remains aligned with current product specifications."}, {"title": "V. CONCLUSION AND FUTURE WORK", "content": "This contribution outlines a model-based workflow for generating PDDL descriptions that integrates system and product models. This workflow consists of four phases, detailing the steps required to enhance existing system and product models, and automate the generation of PDDL files. Integrating this approach facilitates efficient and flexible planning processes, improving decision-making in complex systems engineering by providing a robust plan that supports engineering decisions and adapts to changes in the models. By utilizing SysML for system modeling, the approach ensures a structured representation of system components. To validate the workflow, a use case from aircraft structure assembly was utilized.\nUnlike the approach by Wally et al. [13], which is limited to ISA-95 systems and does not integrate with other models, this workflow is designed to be flexible and applicable across various modeling standards. This flexibility allows for the integration of different system and product models, making it more adaptable to diverse industrial applications.\nHowever, the workflow faces challenges due to the heterogeneity of models, since modeling standards vary significantly among modelers. This is why there are manual efforts in applying this workflow. Standardizing the MBSE modeling workflow could automate these currently manual steps.\nWhile initial applications of the workflow have shown promise in generating correct PDDL descriptions from system and product models, the improvement in terms of reducing complexity and errors still needs to be thoroughly evaluated.\nFuture work will also focus on further refining this workflow and applying it to more complex systems to ensure its applicability in industrial use cases. Additionally, the underlying algorithm will be thoroughly documented and published, providing detailed insights into its functionality and implementation. This will enable broader application of the workflow across various tools beyond MSOSA, facilitating its use in a wide range of engineering and planning contexts."}]}