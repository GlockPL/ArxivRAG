{"title": "Model-based Workflow for the Automated Generation of PDDL Descriptions", "authors": ["Hamied Nabizada", "Tom Jeleniewski", "Felix Gehlhoff", "Alexander Fay"], "abstract": "Abstract-Manually creating Planning Domain Definition Language (PDDL) descriptions is difficult, error-prone, and requires extensive expert knowledge. However, this knowledge is already embedded in engineering models and can be reused. Therefore, this contribution presents a comprehensive workflow for the automated generation of PDDL descriptions from integrated system and product models.\n\nThe proposed workflow leverages Model-Based Systems Engineering (MBSE) to organize and manage system and product information, translating it automatically into PDDL syntax for planning purposes. By connecting system and product models with planning aspects, it ensures that changes in these models are quickly reflected in updated PDDL descriptions, facilitating efficient and adaptable planning processes. The workflow is validated within a use case from aircraft assembly.", "sections": [{"title": "I. INTRODUCTION", "content": "The rapid advancement of technology in recent years has\nled to increasingly complex production systems and products.\nModel-Based Systems Engineering (MBSE) has emerged as\na powerful approach for addressing these challenges by pro-\nviding a structured methodology for modeling, analyzing, and\nmanaging complex systems [1]. MBSE promotes the use of\nmodels to provide detailed and consistent descriptions of pro-\nduction systems, facilitating efficient collaboration among the\nvarious disciplines involved in the development process [2].\nMethods of MBSE, such as the Systems Modeling Lan-\nguage (SysML)-based modeling approach described by [3],\noffer structured methodologies for creating system models.\nThese structured approaches reduce the heterogeneity of the\ncontents and representations of individual system submodels,\nthereby promoting the reusability and comparability of the\ncreated models [4]. However, these methods often require\nnumerous manual steps, such as assigning numerous indi-\nvidual process steps to potential technical resources that can\nexecute these processes, which demands a high level of\nexpert knowledge. This is particularly true when comparing\ndifferent system variants to determine the ideal configuration\nfor specific optimization goals.\nIn system development, it is crucial to determine which\nsystem variant is best suited to efficiently perform a given\nset of processes under specific conditions [5]. To facilitate\nthis determination, process plans are required that define the\nsequence of actions to be executed and assign these actions\nto the corresponding subsystems. Automating this process\nplanning is desirable to reduce the time required to evaluate\ndifferent system variants. This automation requires the inte-\ngration of specific planning aspects into system modeling.\nPlanning aspects refer to the definition of actions necessary\nto achieve specific goals within the modeled system. These\naspects are central to the field of AI planning, which focuses\non the development of algorithms and languages for solving\nplanning problems [6].\nThe Planning Domain Definition Language (PDDL) has\nemerged as the de facto standard for describing planning\nproblems [7]. PDDL consists of two main components: i) the\ndomain, which defines the types, predicates, and actions avail-\nable, and ii) the problem, which specifies the initial state,\ngoals, and constraints of the planning task. However, the\nmodeling of PDDL domain descriptions is often considered\nparticularly challenging, time-consuming, and error-prone [8].\nSimilarly, the modeling of PDDL problem instances presents\nchallenges, such as data inconsistency issues [9]. This paper\npresents a comprehensive workflow for the automated gener-\nation of PDDL descriptions from system and product models,\nleveraging MBSE to enhance the planning process. The work-\nflow consists of four phases: (I) Analysis and Preparation of\nthe System Model, (II) Enrichment of the System Model, (III)\nProvision of the Product Model, and (IV) Generation of PDDL\nDescriptions. By connecting the system and product models\nwith the planning aspects, the workflow ensures that changes\nin these models are reflected in updated PDDL descriptions.\nThe remainder of this paper is structured as follows. Sec-\ntion II provides an overview of related work. Section III\npresents the proposed workflow. Section IV applies the work-\nflow to an application case in aircraft assembly. Finally,\nSection V concludes the paper and outlines future research."}, {"title": "II. RELATED WORK", "content": "Huckaby et al. [10] introduce a SysML taxonomy for assem-\nbly tasks to describe system capabilities, which form the basis\nfor deriving PDDL actions. However, the PDDL descriptions\nare created manually and are limited to the taxonomy.\nVieira da Silva et al. [11] present an ontology-based ap-"}, {"title": "III. WORKFLOW FOR AUTOMATED GENERATION OF PDDL DESCRIPTIONS", "content": "The proposed workflow model facilitates the automated\ngeneration of PDDL descriptions by systematically analyzing\nand enriching existing system and product models. It consists\nof four phases: Analysis and Preparation of the System Model,\nEnrichment of the System Model, Provision of the Product\nModel, and Generation of PDDL Descriptions. The entire\nworkflow is depicted in Fig. 1 and is explained in detail below."}, {"title": "A. Phase I: Analysis and Preparation of the System Model", "content": "The workflow requires a system model as a starting point,\ntypically modeled using the SysML. A system model offers\na comprehensive representation of a system encompassing\nstructural, behavioral, functional, and operational information,\nas well as constraints, requirements, and quality attributes. The\nuse of SysML is a prerequisite for the proposed workflow, as\nit allows for a structured and consistent representation of the\nsystem components and their interactions.\nSince it cannot be assumed that users of the proposed\nworkflow were involved in developing the system model, the\nfirst step is to analyze and understand the existing system\nmodel (Analyze System Model). This analysis provides an un-\nderstanding of the system's architecture and context, ensuring\nthat all relevant components and relations are recognized.\nAfterward, it is essential to define which parts of the system\nmodel will be the scope of observation (Define Scope of\nObservation). For instance, a system model may describe\nan entire production plant, but only a specific submodule is\nrelevant for the current planning problem. This scope must\nbe clearly defined in advance to ensure that subsequent steps\nfocus only on relevant parts of the system. By doing so, the\nplanning process avoids unnecessary complexity.\nThe next step is to identify which elements within the\nsystem model's scope are relevant for the current planning\nproblem (Identify Relevant Elements). This involves selecting\ncomponents, interfaces, and relations that play a critical role\nin the planning problem. Identifying these relevant elements\nestablishes a clear mapping between the system model and the\nplanning domain, which helps accurately translate the system's\nstructure into a PDDL description.\nWith a well-defined scope and a clear understanding of the\nrelevant system elements, the next phase focuses on enriching\nthe system model by incorporating annotations and actions\nrequired for the PDDL domain."}, {"title": "B. Phase II: Enrichment of the System Model", "content": "In Phase II, the goal is to enrich the system model with\nplanning-specific aspects. This requires the SysML Profile for\nPDDL [16] which allows the embedding of PDDL constructs\ndirectly into SysML models.\nTherefore, the first step of this phase is the creation of\nthe PDDL domain by defining the static parts of the do-\nmain (Create PDDL Domain (excl. Actions)). This involves\nspecifying objects, predicates, and types that represent the\nsystem's components and their properties.\nStarting with the static parts of the domain is crucial because\nit establishes the foundational elements and structure of the\nsystem. Objects and predicates define the components and\ntheir relations. These static elements are essential because they\nare reused in the dynamic parts of the domain. For example,\npredicates defined in this step will be used as preconditions\nand effects in the actions. By thoroughly understanding and\nspecifying static elements first, the actions that operate upon\nthese elements can be defined more accurately and effectively.\nFollowing the definition of static parts, dynamic aspects\nof the domain are addressed by defining actions that can\nbe performed within the system (Define Actions of Domain).\nActions include preconditions and effects. The preconditions\noutline the conditions under which actions can be executed,\nand the effects describe the resulting changes in the system's\nstate. These preconditions and effects are directly based on\nobjects and predicates defined earlier, ensuring consistency,\ncorrectness, and reusability in the planning domain.\nThese steps lead to an Extended System Model from which\ntargeted information for the PDDL domain description can be\nqueried and extracted."}, {"title": "C. Phase III: Provision of the Product Model", "content": "While the system model provides a wealth of information\nnecessary for creating the PDDL domain, the product model\nsupplies essential information for defining the PDDL problem.\nThe PDDL problem describes the specific instance of the plan-\nning task, including the initial state and the goal state, which\nare often closely related to the product's current state and\ndesired outcomes. For example, in a manufacturing context,\nthe system model might define the machinery and processes\navailable (PDDL domain), whereas the product model specifies\nthe current configuration of a product and the desired final\nconfiguration (PDDL problem).\nTherefore, in Phase III, the focus shifts to integrating\nproduct-specific information into the planning domain. The\nprocess begins with identifying relevant product information\nfrom the existing product model (Identify Product Informa-\ntion), such as the positions of rivets of an aircraft fuselage.\nAfter identifying the relevant information, the next step\nis to extract this information from the product model (Ex-\ntract Relevant Information) and transfer it to the MBSE\nenvironment (Transfer to MBSE Environment). In the MBSE\nenvironment, the extracted product information is annotated\naccording to the PDDL domain (Annotate according to PDDL\nDomain). This annotation reuses the previously defined ob-\njects, predicates, and types from the PDDL domain, ensuring\nthat the product model is aligned with the planning domain.\nThese steps result in an Extended Product Model, enriched\nwith the necessary annotations required for planning."}, {"title": "D. Phase IV: Generation of PDDL Descriptions", "content": "In Phase IV, the focus is on automatically generating a\nproblem description. This description can then be submitted to\na solver to create a feasible plan based on the integrated system\nand product models. At this point, the generation of PDDL\ndescriptions, which include both the PDDL domain and the\nPDDL problem file, occurs (Generate PDDL Descriptions).\nSince the required information has already been prepared in\nprevious phases, an algorithm can directly query this informa-\ntion and translate it into PDDL syntax.\nBecause the system model and the product model are di-\nrectly associated with planning aspects, generating new PDDL\nfiles can be accomplished with minimal manual effort when\nchanges occur in these models. This ensures that the planning\nproblem remains up-to-date and accurately reflects the current\nstate and goals of the system.\nFinally, these generated PDDL files can be fed into a PDDL\nsolver, such as those available by the implementation presented\nin [17], to solve the planning problem (Solve Problem Descrip-\ntion). The solver processes PDDL descriptions to generate a\nsequence of actions (a plan) that transitions the system from an\ninitial state to a goal state, adhering to all specified constraints\nand requirements.\nOnce the plan is generated, it can be used for further anal-\nysis to optimize the system. This includes evaluating different\nscenarios, identifying potential bottlenecks, and exploring al-\nternative strategies to improve efficiency. These analyses help\nin making decisions and ensuring that the system operates at\nits optimal performance level under specific constraints.\nThese steps complete the workflow, resulting in a compre-\nhensive process for generating PDDL planning problems based\non system and product models."}, {"title": "IV. APPLICATION EXAMPLE", "content": "To validate the developed workflow, a use case from aircraft\nstructure assembly was utilized, featuring a UR10 robotic arm\nwithin the fuselage for screwing collars onto rivets, each re-\nquiring specific end-effectors. The workflow leveraged existing\nsystem and product models, developed in Magic Systems of\nSystems Architect (MSoSA) and 3DExperience respectively, to\noptimize process flow and reduce throughput times. Detailed\nmodeling techniques from [18] and the application of the\nPDDL Profile on the system model, as demonstrated in [16],\nfacilitated this integration. The process involved extracting\nrivet information from the 3D product model, which was\nnecessary to define the PDDL problem description.\nFor the generation of the PDDL files, Velocity Template\nLanguage (VTL) templates were utilized. These templates\nstructure the output of planning information into the stan-"}, {"title": "V. CONCLUSION AND FUTURE WORK", "content": "This contribution outlines a model-based workflow for gen-\nerating PDDL descriptions that integrates system and product\nmodels. This workflow consists of four phases, detailing the\nsteps required to enhance existing system and product models,\nand automate the generation of PDDL files. Integrating this\napproach facilitates efficient and flexible planning processes,\nimproving decision-making in complex systems engineering\nby providing a robust plan that supports engineering decisions\nand adapts to changes in the models. By utilizing SysML for\nsystem modeling, the approach ensures a structured represen-\ntation of system components. To validate the workflow, a use\ncase from aircraft structure assembly was utilized.\nUnlike the approach by Wally et al. [13], which is limited\nto ISA-95 systems and does not integrate with other models,\nthis workflow is designed to be flexible and applicable across\nvarious modeling standards. This flexibility allows for the\nintegration of different system and product models, making\nit more adaptable to diverse industrial applications.\nHowever, the workflow faces challenges due to the hetero-\ngeneity of models, since modeling standards vary significantly\namong modelers. This is why there are manual efforts in\napplying this workflow. Standardizing the MBSE modeling\nworkflow could automate these currently manual steps.\nWhile initial applications of the workflow have shown\npromise in generating correct PDDL descriptions from system\nand product models, the improvement in terms of reducing\ncomplexity and errors still needs to be thoroughly evaluated.\nFuture work will also focus on further refining this workflow\nand applying it to more complex systems to ensure its applica-\nbility in industrial use cases. Additionally, the underlying algo-\nrithm will be thoroughly documented and published, providing\ndetailed insights into its functionality and implementation.\nThis will enable broader application of the workflow across\nvarious tools beyond MSOSA, facilitating its use in a wide\nrange of engineering and planning contexts."}]}