{"title": "DBHP: Trajectory Imputation in Multi-Agent Sports\nUsing Derivative-Based Hybrid Prediction", "authors": ["Hanjun Choi", "Hyunsung Kim", "Minho Lee", "Chang-Jo Kim", "Jinsung Yoon", "Sang-Ki Ko"], "abstract": "Many spatiotemporal domains handle multi-agent trajectory\ndata, but in real-world scenarios, collected trajectory data are\noften partially missing due to various reasons. While exist-\ning approaches demonstrate good performance in trajectory\nimputation, they face challenges in capturing the complex\ndynamics and interactions between agents due to a lack of\nphysical constraints that govern realistic trajectories, leading\nto suboptimal results. To address this issue, the paper pro-\nposes a Derivative-Based Hybrid Prediction (DBHP) frame-\nwork that can effectively impute multiple agents' missing tra-\njectories. First, a neural network equipped with Set Trans-\nformers produces a naive prediction of missing trajectories\nwhile satisfying the permutation-equivariance in terms of the\norder of input agents. Then, the framework makes alternative\npredictions leveraging velocity and acceleration information\nand combines all the predictions with properly determined\nweights to provide final imputed trajectories. In this way, our\nproposed framework not only accurately predicts position,\nvelocity, and acceleration values but also enforces the physi-\ncal relationship between them, eventually improving both the\naccuracy and naturalness of the predicted trajectories. Ac-\ncordingly, the experiment results about imputing player tra-\njectories in team sports show that our framework significantly\noutperforms existing imputation baselines.", "sections": [{"title": "1 Introduction", "content": "Various spatiotemporal domains such as transportation,\nrobotics, surveillance, and sports handle multi-agent trajec-\ntory data. In particular, with the recent advancement of com-\nputer vision and sensing technologies, a growing number\nof groups are collecting these types of data for various use\ncases. However, acquiring a complete set of trajectory data is\nstill very challenging as there are many practical possibilities\nof missing partial trajectories. Wearable devices such as GPS\ntrackers or motion sensors may experience temporary signal\nloss or malfunction, obstructing the collection of complete\ntrajectory data. Similarly, computer vision systems often fail\nto detect agents in occluded regions or in low-lighting con-\nditions. In particular, some domains pose unique challenges\nfor trajectory data collection, such as sports games with\nbroadcasting camera view where players can disappear from\nthe view depending on their relative positions to the ball.\nThe prevalence of missing values in multi-agent trajectory\ndata calls for developing effective imputation techniques.\nOne of the simple yet powerful solutions is to employ naive\nrule-based imputation methods such as forward/backward\nfill or linear interpolation. However, they cannot capture the\ncomplex dynamics and interactions between agents, result-\ning in suboptimal performance. On this account, many stud-\nies have proposed deep learning-based imputation methods\nthat consider the spatiotemporal dependencies of the multi-\nagent movements. Though they aimed to improve accuracy\nby modeling such dependencies, most of them failed to sig-\nnificantly outperform the aforementioned naive baselines.\nTo address this issue, this paper proposes a framework\nnamed Derivative-Based Hybrid Prediction (DBHP) that\nimputes missing values in multi-agent trajectory data with\nhigh accuracy by enforcing the physical restrictions that re-\nalistic trajectories should satisfy. First, a deep neural net-\nwork equipped with Set Transformers (Lee et al. 2019) and\nagent-wise bidirectional LSTMs (Hochreiter and Schmid-\nhuber 1997) produces a series of predictions for missing\nvalues. In addition to this direct prediction of players' po-\nsitions, the framework makes alternative predictions named\nDerivative-Accumulating Predictions (DAPs) by accumulat-\ning the predicted velocity and acceleration on the nearest\nobserved positions for each missing segment in either di-\nrection. Then, the framework compromises by properly de-\ntermining weights between the three types of predictions,\ni.e., neural network output, forward and backward DAPs, to\nmake the best final prediction.\nIn the experiments, we evaluated the performance of our\nproposed framework on the three benchmark datasets col-\nlected from popular team sports: soccer, basketball, and\nAmerican football. The experimental results demonstrate\nthat our framework significantly outperforms existing base-\nlines for multi-agent trajectory imputation in terms of ac-\ncuracy. In particular, leveraging the derivative information\nwas found to be effective in improving the physical plau-\nsibility of the imputed trajectories. Lastly, we present the\nadditional possibility of utilizing our framework for other"}, {"title": "2 Related Work", "content": "Though many studies have proposed methods for imputing\ntime series data, not all of them have addressed the specific\nchallenges of multi-agent trajectories with complex interac-\ntions and dynamics. To name a few, TimesNet (Wu et al.\n2023) and TIDER (Liu et al. 2023a) were designed to im-\npute multivariate time series by modeling their temporal pat-\nterns such as multi-periodicity, seasonality, or local biases,\nbut they are inappropriate for multi-agent spatiotemporal do-\nmains such as team sports since the behaviors of agents are\nhighly uncertain without repeating patterns. SPIN (Marisca,\nCini, and Alippi 2022) regarded the interaction between data\nacquired from multiple sensors, but it assumed that the sen-\nsors' locations are fixed and thus is not applicable to our case\nof moving agents. Other studies have also addressed multi-\nagent trajectory imputation (Liu et al. 2023b; Choi and Lee\n2023; Fang et al. 2024); however, they are limited to sce-\nnarios where agents' positions remain fixed, making them\nunsuitable for our research involving moving agents.\nOn the other hand, recent studies designed to impute\nmulti-agent trajectories focus on modeling agents' complex\ninteractions and dynamics. BRITS (Cao et al. 2018) pro-\nposed an RNN-based multi-agent imputation model that in-\ncorporates the observed features at missing time steps and\npast information, but it is prone to compounding errors\ncaused by an incorrect prediction at an early stage. To ad-\ndress this issue, non-autoregressive imputation frameworks\nsuch as NAOMI (Liu et al. 2019) and NRTSI (Shan, Li, and\nOliva 2023) were proposed, but they can only handle the\ncase when all agents have the same missing period. Omid-\nshafiei et al. Omidshafiei et al. (2022) recently proposed\nGraph Imputer that is applicable to practical scenarios such\nas missing player trajectories out of the camera view in team\nsports. Note that many studies have proposed frameworks for multi-agent trajectory predic-,\ntion, but they are designed to forecast future trajectories in a"}, {"title": "3 Proposed Framework", "content": "Our study about multi-agent trajectory imputation assumes\na scenario where the missing time intervals of each agent\ncould differ from those of others. To elaborate, let the tra-\njectories of K players be \\(X_{1:T} = \\{x_{1:T}^k\\}_{k=1}^K\\), where each\nagent k's input features \\(x_t^k\\) at each time t consist of their\n(x, y) position \\(p_t^k = (p_{t,x}^k, p_{t,y}^k)\\), velocity \\(v_t^k = (v_{t,x}^k, v_{t,y}^k)\\),\nand acceleration \\(a_t^k = (a_{t,x}^k, a_{t,y}^k)\\). Here, the velocity and\nacceleration are calculated from the position values by the\nfollowing approximations:\n\\(v_t^k \\approx \\frac{p_t^k - p_{t-1}^k}{\\Delta t}\\), \\(a_t^k \\approx \\frac{v_{t+1}^k - v_t^k}{\\Delta t}\\)\n(1)\nwhere \\(\\Delta t\\) is the difference between adjacent time steps.\nIn our scenario, each \\(X_{1:T}^k\\) has missing parts identified by\na masking sequence \\(m_{1:T}^k = (m_1^k,..., m_T^k)\\) where \\(m_t^k = 1\\)\nif \\(x_t^k\\) is observed and 0 if it is missing. Note that the model\nmay improperly exploit the information at the endpoints of\nmasked segments in this setting since Eq. (1) uses the posi-\ntional information at adjacent time steps when approximat-\ning the derivatives. To prevent this, we also mask the two\nframes adjacent to each missing segment to simulate a real\nsituation where the model could not know the velocity and\nacceleration at those points.\nGiven this setting, an imputation model aims to take the\nincomplete data \\(\\langle m_{1:T}^k, x_{1:T}^k\\rangle_{k=1}^K\\) as input and produce\nimputed trajectories \\(\\langle \\hat{x}_{1:T}^k \\rangle_{k=1}^K\\). Combining these imputed\ntrajectories with the observed fragments results in complete\ntrajectories \\(\\langle \\tilde{x}_{1:T}^k \\rangle_{k=1}^K\\), i.e.,\n\\(\\tilde{x}_t^k = m_t^k x_t^k + (1 - m_t^k) \\hat{x}_t^k,\\)\n(2)\nfor k = 1,..., K.\nThe novelty of the proposed framework lies in the mech-\nanism of enhancing the model performance by integrating\npositions directly predicted by a neural network and those\nresulting from accumulating predicted derivatives (i.e., ve-\nlocity and acceleration values). See Figure 1 illustrating the\noverall architecture of our framework.\nNeural Network-Based Direct Prediction This section\ndescribes the neural network architecture producing naive\npredictions of imputed trajectories. It takes partially ob-\nserved trajectories \\(\\langle m_{1:T}^k, x_{1:T}^k \\rangle_{k=1}^K\\) as an input and pre-\ndicts each agent k's full trajectory\n\\(\\hat{X}_{1:T}^k = \\{ \\hat{x}_t^k \\}_{t=1}^T = \\{ (\\hat{p}_{t,x}^k, \\hat{p}_{t,y}^k, \\hat{v}_{t,x}^k, \\hat{v}_{t,y}^k, \\hat{a}_{t,x}^k, \\hat{a}_{t,y}^k) \\}_{t=1}^T\\),\n(3)\nwhere the superscript d stands for \u201cdirect prediction\u201d.\nTo build an effective neural architecture for modeling\nmultiple trajectories, we should enforce a strong induc-\ntive bias called the permutation-equivariance. Since there\nis no semantic order of agents in our multi-agent systems,\na permutation in the order of input agents should not af-\nfect the output value for each agent and only change the\noutput order by the same permutation. We utilize the en-\ncoder module of the Set Transformer (Lee et al. 2019) to en-\nsure the permutation-equivariance of outputs. A Set Trans-\nformer consists of an encoder that produces permutation-\nequivariant representations of multi-agent inputs and a de-\ncoder that produces a single permutation-invariant output\nshared for all agents. It is natural to only employ its encoder\npart for our permutation-equivariant task, but to improve\nthe model performance, we also attach the permutation-\ninvariant embedding that results from a full Set Transformer\narchitecture, including the encoder and decoder parts.\nTo be specific, we obtain permutation-equivariant agent-\nwise embeddings \\(\\langle z_t^k \\rangle_{k=1}^K\\) from the encoder of a Set Trans-\nformer and a single permutation-invariant embedding \\(z_t\\)\nfrom a full Set Transformer for each time step t:\n\\((z_t^1, ..., z_t^K) = ST-Encoder(m_t^1 x_t^1,..., m_t^K x_t^K),\\)\n\\(z_t = SetTransformer(m_t^1 x_t^1,..., x_t^K).\\)\n(4)\nFrame-by-frame application of the Set Transformer to the\ninput features yields embeddings \\(\\{(z_t^1, ..., z_t^K, z_t) \\}_{t=1}^T\\).\nThen, bidirectional LSTMs (Hochreiter and Schmidhu-\nber 1997) sharing weights across agents extract the\nsequential information from the concatenated sequence\n\\(\\{(x_t^k, z_t^k, z_t) \\}_{t=1}^T\\) per agent k by updating joint hidden\nstates:\n\\(h_t^{k,f} = LSTM(x_t^k, z_t^k, z_t; h_{t-1}^{k,f}),\\)\n\\(h_t^{k,b} = LSTM(x_t^k, z_t^k, z_t; h_{t+1}^{k,b}).\\)\n(5)\n(6)\nLastly, a fully-connected layer decodes the joint hidden state\nto output a prediction \\(\\hat{x}_t^{k,d}\\) at each time t:\n\\(\\hat{x}_t^{k,d} = FC(h_t^{k,f}, h_t^{k,b}).\\)\n(7)\nWe call the prediction obtained in this phase the direct pre-\ndiction (DP) and combine it with the other predictions from\nlater phases to get more accurate final prediction.\nDerivative-Accumulating Prediction We start from the\nfollowing relationships between the position, velocity, and\nacceleration derived from Eq. (1):\n\\(p_{t+1}^k \\approx p_t^k + v_{t+1}^k \\Delta t\\), \\(v_{t+1}^k \\approx v_t^k + a_t^k \\Delta t,\\)\n(8)\nTaking this into account, we compute Derivative-\nAccumulating Prediction (DAP) with improved stability by\nenforcing the physical relationships in Eq. (8), as an alterna-\ntive to the direct imputation result. To elaborate, let \\((t_s, t_e)\\)\nbe an arbitrary missing segment for a player k. Then, we\nrecursively predict positions inside the segment by accumu-\nlating velocities and accelerations in either direction. Along\nthe forward direction, we start from the observed position\n\\(p_{t_s-1}^k\\) and recursively add predicted velocities and accelera-\ntions to obtain predictions \\(\\hat{p}_t^{k,f}\\) based on Eq. (8):\n\\(\\hat{p}_{t_s}^k = p_{t_s-1}^k,\\)\n(9)\n\\(\\hat{v}_{t}^k = \\hat{v}_{t-1}^{k,d},\\)\n(10)\n\\(\\hat{p}_{t}^k \\approx \\hat{p}_{t-1}^k + (\\hat{v}_{t-1}^{k,d} + \\frac{1}{2} \\hat{a}_{t-1}^{k,d} \\Delta t) \\Delta t, t_s < t < t_e.\\)\n(11)\nLikewise, we start from the observed position \\(p_{t_e+1}^k\\) at the\nopposite endpoint and recursively subtract the predicted\nderivatives to obtain backward predictions \\(\\hat{p}_t^{k,b}\\).\nAdopting DAPs instead of direct predictions carries sev-\neral advantages. First, since the loss between these DAPs\nand the ground truth more penalizes unstable predictions of\nthe velocity and acceleration, minimizing it improves the\nsmoothness of the predicted derivatives. Considering that\nexisting position-oriented imputation models suffer from\nfluctuating trajectories, these smooth derivatives have a clear\nadvantage in that they result in more plausible positional\npredictions. Furthermore, enforcing the relationships be-\ntween the physical quantities imposes an additional induc-\ntive bias to the model, which makes it more data-efficient.\nDynamic Hybrid Prediction Though DAP has a clear ad-\nvantage over direct prediction, it also has a potential draw-\nback called the error compounding problem. Namely, since\nwe only rely on the observation at an endpoint as an anchor\nand the predicted derivatives that are accumulated on the an-\nchor, the prediction error tends to grow as the number of\niterations in Eq. (11) or its backward counterpart increases.\nOn the contrary, the direct predictions resulting from Eq. (7)\nare robust against this problem since they do not strictly de-\npend on predictions at other time steps.\nTo address this trade-off, we take a hybrid approach\nnamed Derivative-Based Hybrid Prediction (DBHP) to\nleverage the advantages of DP and DAP. That is, instead\nof solely relying on one of the aforementioned predictions\n\\((\\{\\hat{p}_t^{k,d}, \\hat{p}_t^{k,f}, \\hat{p}_t^{k,b}\\}_{t=1}^T)\\), we compromise between them by"}, {"title": "4 Main Experiments", "content": "One of the most challenging domains for multi-agent trajec-\ntory prediction is team sports since the movements and inter-\nactions of players are highly dynamic and complex Thus, we conduct experi-\nments on team sports data to evaluate the imputation perfor-\nmance of our proposed framework on this challenging do-"}, {"title": "4.1 Experimental Settings", "content": "In the experiments, we independently\ntrain models and evaluate the performance on three public\ndatasets collected from three popular team sports: soccer\nbasketball, and American football. The soccer dataset is pro-\nvided by Metrica Sports and contains tracking data of 22"}, {"title": "4.2 Experimental Results", "content": "Table 1 exhibits the trajectory imputation performance of\nthe aforementioned models on different datasets and miss-\ning scenarios. Experimental results show that our proposed\nframework significantly outperforms other baselines. Since\nthe lack of permutation equivalence is considered as one of\nthe main limitations of baselines, we attach the Set Trans-\nformer encoder to NAOMI which is a competitive baseline\nmodel and report the result with the name NAOMI-ST. The\ncomparison between NAOMI and NAOMI-ST shows that\nthe permutation equivariance is indeed an important cause.\nWe also replace Bi-LSTM from DBHP which is employed\nfor sequential modeling by a transformer module and re-\nport the result with the name DBHP-TF. The comparison\nbetween DBHP-TF and DBHP validates our choice of Bi-\nLSTM for sequential modeling as DBHP performs slightly\nbetter than DBHP-TF.\nAnother observed advantage of our proposed framework\nis data efficiency. For the soccer dataset with only two\nmatches of training data, other neural network baselines are\neven worse than the linear interpolation. Given that baselines\nsuch as NAOMI and NRTSI outperform the linear interpola-\ntion on both basketball and American football datasets with\nsufficient training data, the main reason for their poor per-\nformance on the soccer dataset appears to be the shortage of\ntraining data. On the other hand, our framework exhibits way\nbetter performance than all baselines including the linear in-\nterpolation on the soccer dataset as well as the basketball\nand American football datasets. Considering the difficulty\nin acquiring complete trajectory data in many domains, we\nbelieve that our framework can be efficiently applied to var-"}, {"title": "4.3 Ablation Studies", "content": "In addition to the main experiments, we have carried out ab-\nlation studies to explore the impacts of each component in-\nintroduced in DBHP framework. We also conduct comparative\nanalyses on different window sizes and missing rates for our\nproposed model. For simplicity, both experiments were con-\nducted only on the soccer dataset.\nImpact of the derivative information as input To empir-\nically justify the use of derivative features in DP and DAP,\nwe compared the performance of our dynamic DBHP on the\nbroadcasting camera scenario with those trained without ac-\ncelerations (i.e., using positions and velocities) and even ve-\nlocities (i.e., only using positions) of observed trajectories.\nFurthermore, we made DP only predict positions and veloc-\nities, and DAP estimate positions only based on predicted\nvelocities. We trained the models with these \"velocity-only\"\nDAP and compared the performance with their counterparts\nthat exploited predicted acceleration values."}, {"title": "5 Applications", "content": "In this section, we explore the possibility of leveraging our\nframework for practical tasks. As examples, we present two\npromising applications in soccer domain: pitch control anal-\nsis (Spearman et al. 2017) and approximating match statis-\ntics from incomplete tracking data.\nPitch control analysis We show that our framework can\nbe used to perform pitch control (Spearman et al. 2017) anal-\nsis, which is a well-established technique in soccer ana-\nlytics, in partially-observable settings. Pitch control can be\nused to quantify how soccer players control regions on the\npitch at each time step by relying on physics-based mod-\neling. In Figure 5, the pitch image corresponding to each\nmodel represents the difference between pitch control results\nwhere one from the ground-truth trajectory and the other\nfrom the partial observations where the missing trajectory\nis imputed by the model. If a specific area of the pitch is\nshaded with a darker color, it indicates a greater difference. Figure 5 shows that DBHP achieves the most similar result\ncompared to other baselines.\nApproximation of match statistics In this section, we ex-\nplore how accurately our method can estimate statistics for\nthe entire match when imputed trajectories are merged with\nknown observations. To elaborate, we compare the total dis-"}, {"title": "6 Conclusions", "content": "This paper proposes DBHP, a trajectory imputation frame-\nwork that imputes missing values of multiple agents with\nimproved quality. It consists of a neural network that makes\nan initial prediction in a permutation-equivariant manner\nand an additional scheme for incorporating derivatives to re-\nfine the imputation results. The experiments conducted on\nthe sports datasets with various missing scenarios demon-\nstrate the effectiveness of our approach in imputing multi-\nagent trajectories with not only higher accuracy but also\nimproved reality. Though our study focused on the perfor-\nmance of our framework on team sports data, we believe it\ncan also be applied to other spatiotemporal domains. Future\nwork will further investigate its application to practical tasks\nin team sports and other domains that require complete tra-\njectories of multiple agents."}, {"title": "A Appendix / Supplemental Material", "content": "Table 5 provides details on each dataset, including the number of matches, episodes, and frames. The term episode is defined\nas a time interval during which the game was in play without any pauses or missing frames. For the soccer dataset, matches are\ndivided into episodes based on the times at which the game was paused and resumed. In contrast, for the basketball dataset, since\nmost out-of-play situations have already been excluded, an episode is defined as the time interval that contains all consecutive\ntime points. When training models with either the soccer or basketball datasets, we select episodes that are at least 200 frames\nin length and create a PyTorch Dataset by sliding a 200-frame window (equivalent to 20 seconds) across each episode with a\n5-frame (0.5 seconds) overlap, resulting in adjoining windows that share 195 frames. For the American football dataset, we\nfollow the NRTSI setting, treating each preprocessed 5-second window as an episode."}, {"title": "A.2 Hybrid with static or Dynamic Weights", "content": "In this section, we conduct additional experiments to validate the necessity of dynamic hybrid prediction in the multi-agent\ntrajectory imputation task. Accordingly, we introduce another two different hybrid schemes, DBHP-S and DBHP-S2, which\nuse predefined static weights instead of learnable weights.\nAs defined in the Derivative-Accumulating Prediction in Section 3, let (ts, te) be an arbitrary missing segment for player\nk. The DBHP-S and DBHP-S2 are based on the assumption that DAPs become less accurate as they correspond to time steps\nfurther away from the observed anchors (i.e., or). For DBHP-S, we assign large weights to forward DAPs near the left\nendpoint, to DP in the middle, and to backward DAPs near the right endpoint, respectively. Then, we combine the DP and\nbidirectional DAPs in either direction by predetermined weights as follows:\n\\hat{p}_t^{k,s} = \\begin{cases}\n\\frac{t-t_s}{t_m-t_s} \\hat{p}_t^{k,f} + \\frac{t_m-t}{t_m-t_s} \\hat{p}_t^{k,d} \\text{ if } t_s < t < t_m,\n\\\\\\\\\\\\\\\\\n\\frac{t_e-t}{t_e-t_m} \\hat{p}_t^{k,b} + \\frac{t-t_m}{t_e-t_m} \\hat{p}_t^{k,d} \\text{ if } t_m < t < t_e.\n\\end{cases}\n(18)\nwhere \\(t_m = (t_s + t_e)/2\\) is the midpoint of the segment. For DBHP-S2, we assign large weights to forward DAP near the left\nendpoint and to backward DAP near the right endpoint. For a player k's missing segment (ts te), we combine DAPs in either\ndirection using predetermined weights as follows:\n\\hat{p}_t^{k,s2} = \\frac{t_e-t}{t_e-t_s} \\hat{p}_t^{k,f} + \\frac{t-t_s}{t_e-t_s} \\hat{p}_t^{k,b}.\n(19)"}, {"title": "A.4 Adaptation to Trajectory Forecasting", "content": "Forecasting future trajectories of multiple agents is another important task for various applications such as crowd navigation, autonomous driving, and behavior analysis . Especially, in team sports we are dealing with, predicting players' future trajectories can serve as a tool for counterfactual analysis to evaluate players' actual movements compared to the \u201caverage\u201d movements for a given situation Thus, we investigate our framework's ability to adapt to the trajectory forecasting task. Since we cannot access the future\ninformation in the forecasting task, we deploy unidirectional LSTMs in DP and DBHP instead of the bidirectional ones. Also,\nwe make DBHP obtain final predictions only based on DP and DAP-F, i.e.,\n\\hat{p}_t^k = \\lambda^d \\hat{p}_t^{k,d} + \\lambda^f \\hat{p}_t^{k,f}.\n(20)\nTo evaluate this DBHP forecaster, we compared its performance with that of some baselines (forward fills and BRITS) which\nare applicable to the forecasting task. Specifically, for the soccer dataset with window sizes 50, 100, and 200, we made the\nmodels observe the first half of the trajectories and predict the remaining half, respectively. For reference, we also measured the\nperformance of the trajectory imputation models trained for the uniform missing scenario with a missing rate of 0.5.\nAccording to Table 8, our framework consistently outperforms other forecasting baselines, but the performance is worse\nthan the imputation task with the same setting. In particular, the DBHP forecaster does not improve that much from DAP-\nF's performance as its imputation counterpart does. This is because it cannot leverage information from the future with the\nassistance of DAP-B. On the other hand, it seems that DAP-F forecasts trajectories more accurately than DP, demonstrating the\neffectiveness of using derivative information for trajectory forecasting.\nOne thing that we want to point out is that predicting players' future trajectories is a stochastic task since there is great\nuncertainty in the dynamic nature of sports games. This implies that the predicted trajectories can be realistic even if they are\nvery different from true trajectories in terms of position error. On this account, most studies  for trajectory forecasting employ architectures based on Variational Autoencoder (VAE)  and make the model generate multiple outputs for the same input to encourage diversity. These are the key differences\nfrom our trajectory imputation task, which is rather deterministic in that the missing movement is somewhat determined given\nits start/end points and other players' movements. We leave further fine-tuning our derivative-based framework and comparing"}]}