{"title": "Graph Neural Networks for Virtual Sensing in Complex Systems: Addressing Heterogeneous Temporal Dynamics", "authors": ["Mengjie Zhao", "Cees Taal", "Stephan Baggerohr", "Olga Fink"], "abstract": "Real-time condition monitoring is crucial for the reliable and efficient oper- ation of complex systems. However, relying solely on physical sensors can be limited due to their cost, placement constraints, or inability to directly measure certain critical parameters. Virtual sensing addresses these limita- tions by leveraging readily available sensor data and system knowledge to estimate inaccessible parameters or infer system states. The increasing com- plexity of industrial systems necessitates deployments of sensors with diverse modalities to provide a comprehensive understanding of system states. These sensors capture data at varying frequencies to monitor both rapid and slowly varying system dynamics, as well as local and global state evolutions of the systems. However, this leads to heterogeneous temporal dynamics, which, particularly under varying operating conditions, pose a significant challenge for accurate virtual sensing. To address these challenges, we propose a novel Heterogeneous Temporal Graph Neural Network (HTGNN) framework for virtual sensing. HTGNN explicitly models signals from diverse sensors as distinct node types within a graph structure, enabling the capture of com- plex relationships between sensors. Additionally, HTGNN integrates context from operating conditions, derived from exogenous variables such as con- trol settings and external environmental factors into the model architecture. This integration allows HTGNN to adapt to diverse operating and environ- mental conditions, ensuring accurate and robust virtual sensing. We evalu- ate the effectiveness of HTGNN using two newly released, publicly available datasets: a test-rig bearing dataset with diverse load conditions for bearing load prediction and a comprehensive year-long simulated dataset for train- bridge-track interaction, aimed at predicting bridge live loads. Our extensive experiments demonstrate that HTGNN significantly outperforms established baseline methods in both bearing and bridge load prediction tasks, partic- ularly under highly varying operating conditions. These results highlight HTGNN's potential as a robust and accurate virtual sensing approach for complex systems, paving the way for improved monitoring, predictive main- tenance, and enhanced system performance.", "sections": [{"title": "1. Introduction", "content": "Real-time condition monitoring is crucial for ensuring the smooth, ef- ficient, and safe operation of critical industrial and infrastructure systems across diverse sectors [1]. The information gathered from monitoring sys- tem states can be used to optimize operational performance, proactively detect faults to prevent costly failures, and extend the lifetime of industrial and infrastructure assets [2]. However, conventional physical sensors have several limitations, including power supply, connectivity, durability and re- liability, as well as coverage and resolution [3]. Some critical parameters, such as internal stresses within components, are often inaccessible without intrusive or destructive testing. Harsh environmental conditions, including extreme temperatures, vibrations, or corrosive chemicals, can significantly reduce sensor accuracy and lifespan, introducing noise and drift into the mea- surements [4]. Additionally, although application-specific sensors have been developed to meet specific monitoring needs, their high cost often restricts their widespread deployment. Furthermore, achieving comprehensive cover- age and scalability with physical sensors is challenging due to the expense and logistical complexities associated with installing sensors in all required locations, which can be prohibitive. This can result in potential blind spots in the monitoring system, undermining its effectiveness."}, {"title": "2. Related Works", "content": "In this section, we review state-of-the-art virtual sensing methods, cov- ering both model-based and data-driven approaches, and explore advance- ments in graph neural networks for time series modeling and their emerging applications in virtual sensing.\nModel-based virtual sensing approaches leverage well-established phys- ical laws, often formulated as first-principle models, to model system be- havior and estimate unmeasured quantities. However, due to challenges in fully capturing real-world complexities and handling noisy sensor data, these models are rarely employed in isolation [9]. Instead, they are frequently in- tegrated with data-driven methods like Kalman filtering and Gaussian pro- cesses. Kalman filtering, an approach that dynamically updates system states in real-time based on noisy sensor measurements, has found diverse appli- cations. For instance, variants of Kalman filtering have been employed for bearing load estimation [22], actuator health monitoring [23], vehicle sideslip angle estimation [24] and wind turbine load prediction [25]. Additionally, Gaussian processes, a probabilistic modeling technique, have been utilized to infer unknown load dynamics from latent force models [26]. Despite their effectiveness, these methods rely on extensive prior knowledge of the un- derlying physics, which can be challenging or infeasible to obtain in many real-world scenarios [9, 12].\nData-driven virtual sensing methods learn complex relationships di- rectly from sensor data, bypassing the need for explicit physical models [12]. Autoencoders (AEs), for example, have been applied due to their ability to learn latent representations of input data. Since AEs are traditionally unsupervised, they are often modified for supervised learning tasks in vir- tual sensing by incorporating labeled data or modifying their architecture. For instance, Shen et al. [27] developed a semi-supervised probabilistic la- tent variable regression model using stacked Variational AE (VAE). Notably, VAEs perform well in learning data distribution and data imputation, making them valuable tools for addressing the challenge of missing data in virtual sensing [28]. Moreover, Recurrent Neural Networks (RNNs), particularly Long Short-Term Memory (LSTM) networks, have shown effectiveness in estimating variables with dynamic characteristics. Examples include wind turbine blade root bending moments [29], hydrocracking processes [30], and indoor air quality [31, 32]. Convolutional Neural Networks (CNNs) have also been applied in virtual sensing, particularly for data with diverse temporal patterns. This architecture has been utilized in various applications, such as mapping partial vibration measurements to structural responses [33], and chemical process quality prediction from process variables [34].\nGraph neural networks (GNNs), originating in computational chem- istry [35] and social networks [36, 37], have rapidly expanded into the Indus- trial Internet of Things (IIoT) [38]. Their ability to capture spatial-temporal dependencies within sensor networks [19, 39] makes them particularly effec- tive in anomaly and fault detection. For example, a GNN-based model lever- aging graph attention mechanisms has shown promise in identifying anoma- lies within multivariate time series [40]. Another approach employed sen- sor embeddings for graph construction and prediction-based anomaly detec- tion [41]. Recently, a GNN model incorporating dynamic edges has further improved fault detection by capturing evolving relationships between time series, while also considering operating conditions [42]. However, a persis- tent challenge remains in addressing heterogeneous temporal dynamics often present in sensor data. Beyond anomaly detection, the inherent ability of GNNS to model interactions within sensor networks has shown promise in a board range of applications. These include predicting remaining useful life of bearing [43], forecasting air quality [44], estimating states in hydro power plants [45], and calibrating ozone sensors using low-cost sensor networks [46].\nGNN-based virtual sensing. Despite their demonstrated potential in modeling complex systems for time series analysis, their application in virtual sensing, particularly for predicting unmeasured quantities from avail- able sensor data, is still in its early stages. Recent studies have leveraged GNNs for tasks like estimating values at unmeasured locations. For example, Niresi et al. [21] utilized physics-enhanced virtual nodes in GNNs for virtual sensing in district heating networks. Moreover, Felice et al. [20] introduced graph structures to reconstruct missing sensor measurements in both weather and photovoltaic systems. However, these approaches often rely on simplify- ing assumptions that limit their applicability to complex, real-world systems. For example, they may assume homogeneous signal attributes (e.g., sampling rates and temporal dynamics) across all sensors or consider only systems with homogeneous sensor setups. Additionally, current state-of-the-art approaches often struggle to account for the diverse influence of exogenous variables on different sensor modalities. These limitations hinder the ability of existing GNN-based methods to accurately capture heterogeneous temporal dynamics and predict system behavior under varying operating conditions, especially in complex systems where direct measurement of certain quantities is infeasible or impractical."}, {"title": "3. Proposed Framework", "content": "In this paper, we establish the notation where bold uppercase letters (e.g., X), bold lowercase letters (e.g., x), and calligraphic letters (e.g., V) denote matrices, vectors, and sets, respectively. Time steps are indicated by superscripts (e.g., \\(X^t\\) is the matrix X at time t), while subscripts identify specific nodes (e.g., \\(x_i\\) is the vector for node i).\n3.1. Problem Statement\nWe address the challenge of virtual sensing in complex systems equipped with heterogeneous sensor networks. Heterogeneity arises from the diverse nature of sensor modalities. This diversity is characterized by differences in the underlying physical phenomena they capture, resulting in variations in their operated frequencies (sampling rates), temporal dynamics (gradual vs. abrupt changes), and the scope of information they provide about the system (local vs. global aspects). Specifically, our dataset consists of N sensor signals sampled at discrete time intervals. Based on their dominant frequency characteristics, these signals naturally fall into two primary types: low-frequency signals \\(X_L\\) and high-frequency signals \\(X_H\\). At a specific time instance t, the low-frequency and high-frequency data are represented as:\n\n\\(X_L^t = [x_{L1}^t, x_{L2}^t, ..., x_{L N_L}^t]^T \u2208 \u211d^{N_L}\\),\n\n\\(X_H^t = [x_{H1}^t, x_{H2}^t, ..., x_{H N_H}^t]^T \u2208 \u211d^{N_H}\\),\n\nwhere \\(N_L\\) and \\(N_H\\) are the number of each sample of data type, and \\(x_{Li}^t\\) and \\(x_{Hi}^t\\) denote the measurements at time t from the ith sensor for low-frequency and high-frequency signals, respectively. To align the data for analysis de- spite varying sampling frequencies, common strategies include upsampling the low-frequency using interpolation techniques or downsampling the high-frequency data using aggregation techniques. This allows for a unified tem- poral representation of the heterogeneous sensor signals. Although this pa- per presents our methodology based on this upsampling/downsampling ap- proach, it is worth noting that the framework could also be readily extended to incorporate the alternative strategy of employing a longer observation win- dow for the low-frequency data to capture its slower dynamics while main- taining its original sampling rate.\nAdditionally, we incorporate a set of \\(N_W\\) exogenous variables \\(w^t \u2208 \u211d^{N_W}\\), which can represent control inputs or external factors influencing the system's behavior and its internal states. However, the exogenous variables are not affected by the system's internal states. Assuming the low-frequency data has been upsampled to match the higher sampling rate of the high-frequency data, we construct time-series samples for each sensor modality using a sliding window of length L, resulting in the following representations:\n\n\\(X_L^{t_i:t} = [X_L^{t_i}, ..., X_L^{t-1}, X_L^{t}] \u2208 \u211d^{N_L\u00d7L}\\),\n\n\\(X_H^{t_i:t} = [X_H^{t_i}, ..., X_H^{t-1}, X_H^{t}] \u2208 \u211d^{N_H\u00d7L}\\),\n\n\\(W^{t_i:t} = [W^{t_i}, ..., W^{t-1}, W^{t}] \u2208 \u211d^{L}\\),\n\nwhere \\(t_i = t - L + 1 > 0\\) is the the starting point of the observation window. Our objective is to develop a virtual sensor, represented by a function\n\n\\(f(X_L^{t_i:t}, X_H^{t_i:t}, W^{t_i:t}) = y^t\\),\n\nthat accurately estimates the target variable \\(y^t \u2208 \u211d^d\\) at time t, given the het- erogeneous sensor data \\(X_L^{t_i:t}\\), \\(X_H^{t_i:t}\\), and \\(W^{t_i:t}\\). This task is challenging due to the inherent differences between low-frequency and high-frequency signals, which capture distinct aspects of the system's state. Low-frequency signals"}, {"title": "3.2. Framework Overview", "content": "We propose a novel Heterogeneous Temporal Graph Neural Network (HT- GNN) for real-time virtual sensing of load in complex systems. Our proposed algorithm learns a virtual sensing function, \\(f(X_L^{t_i:t}, X_H^{t_i:t}, W^{t_i:t}) = y^t\\), which maps low-frequency signals \\(X_L^{t_i:t}\\), high-frequency signals \\(X_H^{t_i:t}\\), and exogenous variables \\(W^{t_i:t}\\) within a time window \\([t_i,t]\\) to the corresponding load \\(y^t\\) at time t. Although we primarily distinguish between low- and high-frequency signals in this function, it is important to note that the hetero-geneity extends beyond mere frequency differences, encompassing variations in temporal dynamics and spatial scales as well. High-frequency signals of- ten capture instantaneous changes and global information about the system,"}, {"title": "3.3. Heterogeneous Temporal Graph Construction", "content": "Heterogeneous Static Graph. As outlined by [47], a Heterogeneous Static Graph (HSG) is defined as \\(G = (V, E)\\), comprising a set of nodes V and a set of edges E. Both nodes and edges in this graph can belong to various types. The graph features a node-type mapping function \\(\u03d5: V \u2192 A\\) and an edge-type mapping function \\(\u03c8 : E \u2192 R\\), where A and R represent the respective sets of node and edge types. This setup ensures a diverse graph structure, with the combined variety of node and edge types exceeding two, i.e., \\(|A| + |R| > 2\\).\nHeterogeneous Temporal Graph. Building upon the Heterogeneous Static Graph (HSG), a Heterogeneous Temporal Graph (HTG) is defined as a sequence of HSGs across T time steps, represented as \\(G^T = {G^{t_1},...,G^{t_T}}\\). Each graph within this series, \\(G^t = (V^t, E^t)\\), captures the state of the graph at a specific time t. Both the node and edge type mapping functions, \u03d5 and \u03c8, are maintained consistently across these time steps. The HTG is aggregated into a unified form as follows:\n\n\\(G^T = \\bigcup_{t=t_1}^{t_T} V^t, \\bigcup_{t=t_1}^{t_T} E^t\\),\n\nwhich integrates nodes \\(V^t\\) and edges \\(E^t\\) from all time steps, thereby preserving the heterogeneity defined by \u03d5 and \u03c8. This structure allows for the analysis of dynamic interactions and changes over time while maintaining the diverse characteristics of the nodes and edges.\nHeterogeneous sensor graph construction. To effectively model the heterogeneous sensor signals from a heterogeneous sensor network, we con- struct an HTG. This graph consists of two types of nodes: low-frequency (L) nodes characterized by attributes \\(X_L^{t_i:t}\\), and high-frequency (H) nodes characterized by attributes \\(X_H^{t_i:t}\\). The edges in the graph are defined by the relationships between these node types, specifically L-L, H-H, L-H, and H-L, and are assumed to be consistent over time. This framework enables the HTG to capture and analyze the interactions and temporal evolution between low-frequency and high-frequency signals effectively. A detailed visualization of the HTG is provided in Fig. 1, illustrating the dynamic interplay of sensor types within the network."}, {"title": "3.4. Context-aware Node Dynamics Extraction", "content": "In complex systems, the behavior of individual sensor nodes is signif- icantly influenced by the global operating context, which includes various exogenous variables. Changes in these variables, such as control inputs and environmental conditions, can significantly impact both the magnitude and the frequency characteristics of the sensor signals. For instance, for low- frequency signals, shifts in exogenous variables may alter signal magnitude, such as increased deformation due to higher temperatures. Conversely, high- frequency signals may experience changes in both magnitude and frequency content, such as increased vibration amplitude and frequency associated with higher rotational speed in bearings.\nTo account for these important influences, our HTGNN model leverages context-aware dynamics extraction for each node. This approach extends the strategy proposed in [42] to explicitly model shifts in both magnitude and frequency. We extract contextual information from exogenous variables and integrate it into the dynamics modeling of both low-frequency and high- frequency sensor modalities using specialized techniques. This enables the HTGNN to effectively capture how the operating context influences the tem- poral behavior of each sensor, ultimately leading to more accurate and reli- able virtual sensing.\n3.4.1. Encoding Exogenous Variable.\nTo extract a meaningful representation of the operating context from the exogenous variables (e.g., rotational speed, ambient temperature), we employ a Multi-Layer Perceptron (MLP). Assuming that these variables ex- hibit relatively minor fluctuations within a specific observation window, we first calculate the average value \\(\\overline{w^{t_i:t}} = \\frac{1}{L} \\sum_{i=t_i}^t w^i \u2208 \u211d\\) over the selected time window \\([t_i:t]\\). The MLP then processes this average value to generate a hid- den representation \\(h_w \u2208 \u211d^{d_w}\\) of the operating context. This representation is used to augment the dynamics extraction from other sensor modalities. Formally, the process can be expressed as:\n\n\\(h_w = MLP(\\overline{w^{t_i:t}})\\).\n\nThis approach ensures that the model captures the essential contextual infor-mation, enhancing the accuracy and reliability of the virtual sensing system.\n3.4.2. Encoding Low-Frequency Signals.\nIn complex systems, the magnitude of low-frequency signals is often di- rectly influenced by operating conditions. For instance, higher temperatures may induce increased thermal expansion, resulting in more significant defor- mation of structures such as bridges. This deformation is then manifested as higher values in measurements on strain gauges. Such inherent correla- tions between low-frequency signals and operating conditions underscore the"}, {"title": "3.4.3. Encoding High-Frequency Signals.", "content": "Changes in operating conditions can significantly affect both the magni- tude and frequency characteristics of high-frequency signals in complex sys- tems. For instance, an increase in rotational speed within a bearing can cause the dominant frequencies in the vibration signal to shift towards higher mag- nitudes and frequencies. To address these shifts in high-frequency signals, we use one-dimensional Convolutional Neural Networks (1D-CNNs), which are effective in capturing patterns within time-series data [48]. However, stan- dard 1D-CNNs may struggle to adapt to changes in signal frequency caused\nby varying operating conditions. To overcome this limitation, we propose a 1D Gated Convolutional Neural Network (1D-GCNN). This model integrates a gating mechanism into the traditional 1D-CNN architecture, enabling dy- namic adjustment of its frequency focus based on the operating context. This gating mechanism allows the model to identify and prioritize the frequency components most relevant under varying conditions, resulting in more robust feature extraction.\n1D Gated Convolutional Layer (GCL). The core component of our 1D-GCNN is the Gated Convolutional Layer (GCL). It operates on an input sequence \\(x_i \u2208 \u211d^{d_x}\\) and the exogenous variable encoding \\(h_w\\), functioning as follows:\n\n\\(z^t = Conv1D(x_i^t, W_z)\\),\n\n\\(g^t = \u03c3(W_g h_w + b_g)\\),\n\n\\(o^t = z^t \u2297 g^t\\)\n\nIn this framework, the gating signal \\(g^t \u2208 \u211d^{d_g}\\) functions as a dynamic filter, modulating the importance of different frequency components in the convo- lution output \\(z^t \u2208 \u211d^{d_z}\\). This modulation is achieved through element-wise multiplication, which applies the gating effect independently to each feature, allowing for tailored frequency responses based on the current operating con- text. The learnable parameters in this model include the weight matrices \\(W_z \u2208 \u211d^{d_x\u00d7d_z}\\), \\(W_g \u2208 \u211d^{d_w\u00d7d_g}\\), and the bias \\(b_g \u2208 \u211d^{d_g}\\), enabling adaptability and fine-tuning of the gating mechanism."}, {"title": "3.5. Heterogeneous Interaction Modelling", "content": "To effectively capture the complex relationships between sensor nodes and explicitly account for the influence of operating conditions on these inter- actions, our HTGNN model strategically models heterogeneous interactions within the temporal graph. We address two distinct types of interactions: ho- mogeneous interactions among nodes with similar signal characteristics (e.g., low-frequency to low-frequency, high-frequency to high-frequency) and het- erogeneous interactions across nodes with different signal characteristics (e.g., low-frequency to high-frequency). This approach to interaction modeling leverages the node dynamics previously extracted in Sec. 3.4 (low-frequency nodes from Eq. 9, high-frequency nodes from Eq. 14). This method ensures that our model comprehensively integrates both intra- and inter-modality dynamics, enhancing the accuracy and relevance of the sensor data analysis while respecting the signal characteristics.\nIntra-modality interactions. To effectively capture the interdependen- cies among sensors with similar frequency characteristics, we employ Graph Convolutional Networks (GCNs) [36]. This methodology enhances node rep- resentations by aggregating information from neighboring nodes that display correlated behaviors. For instance, temperature sensors in close proximity often exhibit synchronized patterns, and using a GCN allows us to exploit these correlations to refine each sensor's node representation. The interaction between nodes is quantified through messages passed from node j to node i, specifically within each relationship type \\(r_s\\) from the set \\(\u2208 R_s\\) that connects nodes of the same type. The message passing formula is given by:\n\n\\(m_{ji}^{(l,r_s)} = \\frac{1}{\\sqrt{d_i d_j}} W^{(l)} h_{\\phi(j)}, \u2200r_s \u2208 R_s, \u03d5(j) = \u03d5(i)\\),\n\nwhere \\(d_i\\) and \\(d_j\\) represent normalized node degrees, ensuring that the message weighting considers the local topology of each node, thereby stabilizing the learning process across different node densities. \\(R_s\\) is the set of edge types connecting nodes of the same type.\nInter-modality interactions. To capture the influence of one signal type on another within the sensor network (e.g., the impact of low-frequency signals on high-frequency signals), we employ Graph Attention Networks v2 (GATv2) [49]. This approach enables dynamic computation of attention- weighted messages, allowing the model to dynamically assess the relevance of neighboring nodes based on their interactions. The attention coefficients \\(\\alpha_{ji}^{(l,r_a)}\\) for a target node i receiving a message from node j under relation \\(r_d \u2208 R_d\\) are calculated as follows:\n\n\\(\\alpha_{ji}^{(l,r_a)} = softmax_i\\Big(a_r^T LeakyReLU(W^{(l)} . [h_{\\phi(i)}^{(l)} || h_{\\phi(j)}^{(l)}])\\Big)\\),\n\nwhere \\(r_d \u2208 R_d\\) represents the set of edge types that connect nodes of different types. The messages are then computed as:\n\n\\(m_{ji}^{(l,r_a)} = \u03b1_{ji}^{(l,r_a)} W^{(l)} h_{\\phi(j)}, \u2200r_d \u2208 R_d, \u03d5(j) \u2260 \u03d5(i)\\),\n\nAggregation and update: After aggregating messages from both same- type and different-type connections, the node representations are updated in the following manner:\n\nh_{\\phi(i)}^{(l+1)} = SiLU\\Big(\\sum_{r\u2208R_s\u222aR_d} \\sum_{j\u2208N_r(i)} m_{ji}^{(l,r)}\\Big)\\,\n\nThe updated node state contains incoming messages across all relationships, effectively updating node representations to reflect both homogeneous and heterogeneous influences. This enhances the model's ability to interpret com- plex sensor network dynamics, providing a comprehensive understanding of the system's behavior under varying operating conditions."}, {"title": "3.6. Target Variable Inference", "content": "After extracting the context-aware dynamics from each node, we proceed to integrate these heterogeneous node representations to infer the target vari- able. First, we flatten the final node representations of both low-frequency and high-frequency nodes into a single input vector. This vector is subse- quently processed by a Bidirectional Long Short-Term Memory (BiLSTM) network. This novel application of a BiLSTM to fuse diverse node repre- sentations into a sequential format constitutes a unique approach for inte- grating heterogeneous sensor information in virtual sensing. The BiLSTM leverages flattened node embeddings to capture dependencies and relation- ships between nodes and their attributes in both forward and reverse tem- poral directions. This bidirectional processing enables the model to gather comprehensive information across the entire graph. Unlike simpler aggrega- tion methods such as mean or max pooling, which only capture basic global statistics, the BiLSTM is capable of selectively attending to and weighing information from various nodes and features. This selective attention signif- icantly enhances the model's ability to learn complex relationships between sensor signals and the target variable. The final output of the BiLSTM is then passed through an MLP to generate the final prediction for the target variable \u0177."}, {"title": "4. Case Studies", "content": "To demonstrate the effectiveness of our HTGNN model in addressing the challenges posed by heterogeneous temporal dynamics and varying operat- ing conditions, we conducted two case studies focusing on real-world systems: bearing load prediction and bridge live load prediction. In both cases, the systems are monitored by heterogeneous sensors, but the nature of the chal- lenges they present differs significantly. The bearing case study highlights the impact of varying control inputs, specifically rotational speed, on the tempo- ral dynamics of temperature and vibration sensor signals. In contrast, the bridge case study focuses on the influence of an environmental factor, tem- perature, on displacement and acceleration sensor readings. By evaluating these distinct scenarios, we aim to demonstrate the versatility of the HT- GNN framework in handling diverse sensor modalities, adapting to dynamic environments, and accurately estimating critical parameters under both con- trolled and uncontrolled conditions. These case studies also underscore the generalizability of our approach across different industrial and infrastructure systems, showcasing its potential for broad applicability in real-world virtual sensing applications.\n4.1. Case Study 1: Bearing\nIn our initial case study, we assess the applicability of the proposed HT- GNN model for estimating bearing loads under various operating conditions, using data from temperature and vibration sensors. These sensor modalities provide complementary information: vibration is indicative of the magni- tude of the load, while temperature reveals the spatial distribution of the load within the bearing. Accurate load estimation is valuable for implement- ing predictive maintenance strategies in industrial applications, as it enables operation optimization, misalignment detections [5], faults diagnosis, as well as lifespan and damage propagation prediction [6, 7]. Directly measuring bearing loads during operation can be intrusive, expensive, or impractical due to battery limitations [50]. Therefore, our approach focuses on inferring load values from readily available sensor signals, making the process more feasible and cost-effective.\n4.1.1. Bearing Test Rig Data Acquisition\nThe data used in this study was collected at the SKF Sven Wingquist Test Centre (SWTC) using a face-to-face test rig with two identical single- row tapered roller bearings (TRBs). The TRBs feature a rotating inner ring, an outer diameter of 2,000 mm, an inner diameter of 1,500 mm, and a width\nof 220 mm, each incorporating 50 rollers. This setup aims to assess load conditions under various operational scenarios. Fig. 4 illustrates the sensor positioning on both identical TRBs. Ten temperature sensors are positioned on each bearing, with eight uniformly distributed on the outer ring (OR), and two on the inner ring (IR). Additionally, six vibration sensors on the outer ring measure both axial (AX) and radial (RA) vibrations, with sensors placed at the top and bottom of the bearing housing for the radial direction. Temperature is recorded at a 1 Hz sampling rate with a precision of 0.05\u00b0C. Vibration data is aggregated to 1 Hz using Root Mean Square (RMS) aggregations. Axial and radial forces are measured and controlled by several load cells, with aggregated load values in both directions used as ground truth for this study (note that the radial load cells are not shown in the figure).\n4.1.2. Data Preprocessing\nTo prepare the data for virtual sensor emulation, we first filtered the raw sensor data, retaining only cases with at least 20 minutes and up to 1 hour of continuous, stationary operation. This resulted in a final dataset com- prising 164,948 samples. To reduce noise and transient fluctuations in the temperature data, we apply a moving average filter with a 1-minute window. We focus on the rate of temperature change because the bearing tempera- ture responds gradually to changes in load and speed. We calculated this rate over 5-minute periods to align with typical operational changes. This approach allows our model to identify the immediate impact of load changes on temperature, rather than the cumulative effects of historical variations. After preprocessing, we split both temperature and vibration signals using a sliding window, with a length of 30 and a stride of 1.\nTo emulate the deployment and validation of a virtual sensor, the dataset was split by time while maintaining a representation of all 55 unique oper- ating conditions (defined by axial load (Fx), radial load (Fy), and rotational speed), which are detailed in Appendix A.1. Within each operating con- dition, the initial 50% of the sequential data was allocated to the training and validation sets, with a random 80/20 split. The remaining 50% of the sequential data formed the test set, representing the period when the vir- tual sensor would be actively predicting bearing load. This temporal split mirrors the real-world scenario where a physical sensor might have a limited lifespan due to factors such as battery drain or wear and tear. The virtual sensor is trained and validated on data collected during the physical sensor's operational life, and then used to predict future load conditions.\n4.1.3. Heterogeneous Bearing Graph Construction\nWe construct a heterogeneous graph with nodes representing sensors (temperature (T) and vibration (V)). Temperature nodes are further clas- sified into inner ring (T IR) or outer ring (T OR) nodes. V nodes, which are installed on the outer ring, are distinguished by their load direction: radial (V RA) or axial (V AX). We model four types of relationships: T-T, V-V, T-V, and V-T. Here, T-T and V-V represent intra-modality interactions, while V-T and T-V represent inter-modality interactions. Node positions re- flect physical sensor placement. Fig. 5(a) and (b) illustrate the connectivity within a single bearing based on physical proximity. Additionally, IR nodes are connected due to relatively uniform temperatures across the inner ring. Given that the test rig consists of two bearings, we connect them based on proximity, as illustrated in Fig. 5(e) for V nodes. We assume symmetrical (undirected) relationships within the same sensor type and model heteroge- neous T-V and V-T relationships with directed edges, as demonstrated in Fig. 5(c) and (d).\n4.2. Case Study 2: Bridge\nIn this case study, we evaluate our proposed HTGNN model for bridge health monitoring, specifically focusing on estimating live load on the bridge deck from displacement and acceleration signals. Live load refers to the dy- namic forces exerted on the bridge by due to traffic, such as the weight of vehicles passing over it. Accurate and timely estimation of live load is essen- tial for assessing a bridge's structural integrity, identifying potential overloads\nor fatigue damage, and making informed decisions about maintenance and repair [51]. This capability is essential for ensuring the safety and longevity of bridge structures.\n4.2.1. Train-Track-Bridge Simulator and Data Acquisition\nReal-world bridge health monitoring data that captures the combined ef- fects of train loads, speeds, and temperature variations is often scarce and not publicly available, especially data that includes both displacement and acceleration measurements. To address this, we leveraged the Train-Track- Bridge (TTB) simulator [52], a recent finite element method-based tool offer- ing highly realistic simulations of train, track, and bridge interactions under varying conditions, including the influence of track irregularities, a significant source of excitation for bridges.\nFollowing the approach in Sarwar et al. [53], we simulated an ICE3 Ve- laro train with eight wagons on a bridge with a length of L = 50m, a second moment of area I = 51.3m\u00b2, a mass per unit length \u03c1 = 69000kg/m, and a modulus of elasticity E = 3.5 \u00d7 101\u00b0N/m. To simulate realistic tempera- ture fluctuations, hourly temperature data (0.1\u00b0C precision) from the Zurich Fluntern weather station was incorporated. This data was sourced from Vi-sual Crossing. To estimate train loads, we utilized SBB passenger traffic statistics [54], which detail the percentage of long-distance trains at Zurich's main station per hour for 2023, differentiated by weekdays and weekends. Daily load factors (standard deviation 0.1) were randomly drawn from this distribution and applied to a base load of 42100 kg. Wagon-to-wagon load variations were modeled using a normal distribution (standard deviation 500 kg) around this final load, resulting in loads ranging from 42100 kg to 53500 kg. Nine train runs were simulated per day, starting at 6:00 AM with two- hour intervals until 10:00 PM. To capture representative load patterns and comprehensive temperature variations, we simulated the first week of each month over an entire year, resulting in 756 unique train runs with diverse load, speed, and temperature conditions.\n4.2.2. Data Preprocessing\nRaw simulation data was first cropped to focus on the period when the train was fully on the bridge based on the magnitude of the displacement sensors, excluding the entry and exit phases. To simulate realistic sensor noise, additive white Gaussian noise with a signal-to-noise ratio (SNR) of 35 dB was introduced. The data, originally sampled at 1000 Hz, was then downsampled to 100 Hz using an 8th-order Chebyshev Type I filter. Finally, the dataset was divided into windows with a length of 60 samples (0.6 sec- onds at 100 Hz) and a stride of 5. We construct a heterogeneous graph for the bridge sensor network, following the same principles established for the bearing graph, see details in Appendix A.2.\n4.3. Train-Validation-Test Split\nTo emulate the real-world deployment of a virtual sensor, the preprocessed dataset (490,398 samples) was split temporally by day. All odd-numbered days (48 days total) were allocated to the training and validation sets, with an 80/20 split, simulating the data collection phase under various weather and load conditions. Even-numbered days (36 days total) were used to form the test set, representing the period during which the virtual sensor would actively predict future loads based on the trained model."}, {"title": "5. Evaluation Setup", "content": "This section details the experimental design employed to evaluate the effectiveness of HTGNN in load prediction within a heterogeneous sensor network setting. Specifically"}, {"title": "Graph Neural Networks for Virtual Sensing in Complex Systems: Addressing Heterogeneous Temporal Dynamics", "authors": ["Mengjie Zhao", "Cees Taal", "Stephan Baggerohr", "Olga Fink"], "abstract": "Real-time condition monitoring is crucial for the reliable and efficient oper- ation of complex systems. However, relying solely on physical sensors can be limited due to their cost, placement constraints, or inability to directly measure certain critical parameters. Virtual sensing addresses these limita- tions by leveraging readily available sensor data and system knowledge to estimate inaccessible parameters or infer system states. The increasing com- plexity of industrial systems necessitates deployments of sensors with diverse modalities to provide a comprehensive understanding of system states. These sensors capture data at varying frequencies to monitor both rapid and slowly varying system dynamics, as well as local and global state evolutions of the systems. However, this leads to heterogeneous temporal dynamics, which, particularly under varying operating conditions, pose a significant challenge for accurate virtual sensing. To address these challenges, we propose a novel Heterogeneous Temporal Graph Neural Network (HTGNN) framework for virtual sensing. HTGNN explicitly models signals from diverse sensors as distinct node types within a graph structure, enabling the capture of com- plex relationships between sensors. Additionally, HTGNN integrates context from operating conditions, derived from exogenous variables such as con- trol settings and external environmental factors into the model architecture. This integration allows HTGNN to adapt to diverse operating and environ- mental conditions, ensuring accurate and robust virtual sensing. We evalu- ate the effectiveness of HTGNN using two newly released, publicly available datasets: a test-rig bearing dataset with diverse load conditions for bearing load prediction and a comprehensive year-long simulated dataset for train- bridge-track interaction, aimed at predicting bridge live loads. Our extensive experiments demonstrate that HTGNN significantly outperforms established baseline methods in both bearing and bridge load prediction tasks, partic- ularly under highly varying operating conditions. These results highlight HTGNN's potential as a robust and accurate virtual sensing approach for complex systems, paving the way for improved monitoring, predictive main- tenance, and enhanced system performance.", "sections": [{"title": "1. Introduction", "content": "Real-time condition monitoring is crucial for ensuring the smooth, ef- ficient, and safe operation of critical industrial and infrastructure systems across diverse sectors [1]. The information gathered from monitoring sys- tem states can be used to optimize operational performance, proactively detect faults to prevent costly failures, and extend the lifetime of industrial and infrastructure assets [2]. However, conventional physical sensors have several limitations, including power supply, connectivity, durability and re- liability, as well as coverage and resolution [3]. Some critical parameters, such as internal stresses within components, are often inaccessible without intrusive or destructive testing. Harsh environmental conditions, including extreme temperatures, vibrations, or corrosive chemicals, can significantly reduce sensor accuracy and lifespan, introducing noise and drift into the mea- surements [4]. Additionally, although application-specific sensors have been developed to meet specific monitoring needs, their high cost often restricts their widespread deployment. Furthermore, achieving comprehensive cover- age and scalability with physical sensors is challenging due to the expense and logistical complexities associated with installing sensors in all required locations, which can be prohibitive. This can result in potential blind spots in the monitoring system, undermining its effectiveness."}, {"title": "2. Related Works", "content": "In this section, we review state-of-the-art virtual sensing methods, cov- ering both model-based and data-driven approaches, and explore advance- ments in graph neural networks for time series modeling and their emerging applications in virtual sensing.\nModel-based virtual sensing approaches leverage well-established phys- ical laws, often formulated as first-principle models, to model system be- havior and estimate unmeasured quantities. However, due to challenges in fully capturing real-world complexities and handling noisy sensor data, these models are rarely employed in isolation [9]. Instead, they are frequently in- tegrated with data-driven methods like Kalman filtering and Gaussian pro- cesses. Kalman filtering, an approach that dynamically updates system states in real-time based on noisy sensor measurements, has found diverse appli- cations. For instance, variants of Kalman filtering have been employed for bearing load estimation [22], actuator health monitoring [23], vehicle sideslip angle estimation [24] and wind turbine load prediction [25]. Additionally, Gaussian processes, a probabilistic modeling technique, have been utilized to infer unknown load dynamics from latent force models [26]. Despite their effectiveness, these methods rely on extensive prior knowledge of the un- derlying physics, which can be challenging or infeasible to obtain in many real-world scenarios [9, 12].\nData-driven virtual sensing methods learn complex relationships di- rectly from sensor data, bypassing the need for explicit physical models [12]. Autoencoders (AEs), for example, have been applied due to their ability to learn latent representations of input data. Since AEs are traditionally unsupervised, they are often modified for supervised learning tasks in vir- tual sensing by incorporating labeled data or modifying their architecture. For instance, Shen et al. [27] developed a semi-supervised probabilistic la- tent variable regression model using stacked Variational AE (VAE). Notably, VAEs perform well in learning data distribution and data imputation, making them valuable tools for addressing the challenge of missing data in virtual sensing [28]. Moreover, Recurrent Neural Networks (RNNs), particularly Long Short-Term Memory (LSTM) networks, have shown effectiveness in estimating variables with dynamic characteristics. Examples include wind turbine blade root bending moments [29], hydrocracking processes [30], and indoor air quality [31, 32]. Convolutional Neural Networks (CNNs) have also been applied in virtual sensing, particularly for data with diverse temporal patterns. This architecture has been utilized in various applications, such as mapping partial vibration measurements to structural responses [33], and chemical process quality prediction from process variables [34].\nGraph neural networks (GNNs), originating in computational chem- istry [35] and social networks [36, 37], have rapidly expanded into the Indus- trial Internet of Things (IIoT) [38]. Their ability to capture spatial-temporal dependencies within sensor networks [19, 39] makes them particularly effec- tive in anomaly and fault detection. For example, a GNN-based model lever- aging graph attention mechanisms has shown promise in identifying anoma- lies within multivariate time series [40]. Another approach employed sen- sor embeddings for graph construction and prediction-based anomaly detec- tion [41]. Recently, a GNN model incorporating dynamic edges has further improved fault detection by capturing evolving relationships between time series, while also considering operating conditions [42]. However, a persis- tent challenge remains in addressing heterogeneous temporal dynamics often present in sensor data. Beyond anomaly detection, the inherent ability of GNNS to model interactions within sensor networks has shown promise in a board range of applications. These include predicting remaining useful life of bearing [43], forecasting air quality [44], estimating states in hydro power plants [45], and calibrating ozone sensors using low-cost sensor networks [46].\nGNN-based virtual sensing. Despite their demonstrated potential in modeling complex systems for time series analysis, their application in virtual sensing, particularly for predicting unmeasured quantities from avail- able sensor data, is still in its early stages. Recent studies have leveraged GNNs for tasks like estimating values at unmeasured locations. For example, Niresi et al. [21] utilized physics-enhanced virtual nodes in GNNs for virtual sensing in district heating networks. Moreover, Felice et al. [20] introduced graph structures to reconstruct missing sensor measurements in both weather and photovoltaic systems. However, these approaches often rely on simplify- ing assumptions that limit their applicability to complex, real-world systems. For example, they may assume homogeneous signal attributes (e.g., sampling rates and temporal dynamics) across all sensors or consider only systems with homogeneous sensor setups. Additionally, current state-of-the-art approaches often struggle to account for the diverse influence of exogenous variables on different sensor modalities. These limitations hinder the ability of existing GNN-based methods to accurately capture heterogeneous temporal dynamics and predict system behavior under varying operating conditions, especially in complex systems where direct measurement of certain quantities is infeasible or impractical."}, {"title": "3. Proposed Framework", "content": "In this paper, we establish the notation where bold uppercase letters (e.g., X), bold lowercase letters (e.g., x), and calligraphic letters (e.g., V) denote matrices, vectors, and sets, respectively. Time steps are indicated by superscripts (e.g., \\(X^t\\) is the matrix X at time t), while subscripts identify specific nodes (e.g., \\(x_i\\) is the vector for node i).\n3.1. Problem Statement\nWe address the challenge of virtual sensing in complex systems equipped with heterogeneous sensor networks. Heterogeneity arises from the diverse nature of sensor modalities. This diversity is characterized by differences in the underlying physical phenomena they capture, resulting in variations in their operated frequencies (sampling rates), temporal dynamics (gradual vs. abrupt changes), and the scope of information they provide about the system (local vs. global aspects). Specifically, our dataset consists of N sensor signals sampled at discrete time intervals. Based on their dominant frequency characteristics, these signals naturally fall into two primary types: low-frequency signals \\(X_L\\) and high-frequency signals \\(X_H\\). At a specific time instance t, the low-frequency and high-frequency data are represented as:\n\n\\(X_L^t = [x_{L1}^t, x_{L2}^t, ..., x_{L N_L}^t]^T \\in \\mathbb{R}^{N_L}\\),\n\n\\(X_H^t = [x_{H1}^t, x_{H2}^t, ..., x_{H N_H}^t]^T \\in \\mathbb{R}^{N_H}\\),\n\nwhere \\(N_L\\) and \\(N_H\\) are the number of each sample of data type, and \\(x_{Li}^t\\) and \\(x_{Hi}^t\\) denote the measurements at time t from the ith sensor for low-frequency and high-frequency signals, respectively. To align the data for analysis de- spite varying sampling frequencies, common strategies include upsampling the low-frequency using interpolation techniques or downsampling the high-frequency data using aggregation techniques. This allows for a unified tem- poral representation of the heterogeneous sensor signals. Although this pa- per presents our methodology based on this upsampling/downsampling ap- proach, it is worth noting that the framework could also be readily extended to incorporate the alternative strategy of employing a longer observation win- dow for the low-frequency data to capture its slower dynamics while main- taining its original sampling rate.\nAdditionally, we incorporate a set of \\(N_W\\) exogenous variables \\(w^t \\in \\mathbb{R}^{N_W}\\), which can represent control inputs or external factors influencing the system's behavior and its internal states. However, the exogenous variables are not affected by the system's internal states. Assuming the low-frequency data has been upsampled to match the higher sampling rate of the high-frequency data, we construct time-series samples for each sensor modality using a sliding window of length L, resulting in the following representations:\n\n\\(X_L^{t_i:t} = [X_L^{t_i}, ..., X_L^{t-1}, X_L^{t}] \\in \\mathbb{R}^{N_L\\times L}\\),\n\n\\(X_H^{t_i:t} = [X_H^{t_i}, ..., X_H^{t-1}, X_H^{t}] \\in \\mathbb{R}^{N_H\\times L}\\),\n\n\\(W^{t_i:t} = [W^{t_i}, ..., W^{t-1}, W^{t}] \\in \\mathbb{R}^{L}\\),\n\nwhere \\(t_i = t - L + 1 > 0\\) is the the starting point of the observation window. Our objective is to develop a virtual sensor, represented by a function\n\n\\(f(X_L^{t_i:t}, X_H^{t_i:t}, W^{t_i:t}) = y^t\\),\n\nthat accurately estimates the target variable \\(y^t \\in \\mathbb{R}^d\\) at time t, given the het- erogeneous sensor data \\(X_L^{t_i:t}\\), \\(X_H^{t_i:t}\\), and \\(W^{t_i:t}\\). This task is challenging due to the inherent differences between low-frequency and high-frequency signals, which capture distinct aspects of the system's state. Low-frequency signals"}, {"title": "3.2. Framework Overview", "content": "We propose a novel Heterogeneous Temporal Graph Neural Network (HT- GNN) for real-time virtual sensing of load in complex systems. Our proposed algorithm learns a virtual sensing function, \\(f(X_L^{t_i:t}, X_H^{t_i:t}, W^{t_i:t}) = y^t\\), which maps low-frequency signals \\(X_L^{t_i:t}\\), high-frequency signals \\(X_H^{t_i:t}\\), and exogenous variables \\(W^{t_i:t}\\) within a time window \\([t_i,t]\\) to the corresponding load \\(y^t\\) at time t. Although we primarily distinguish between low- and high-frequency signals in this function, it is important to note that the hetero-geneity extends beyond mere frequency differences, encompassing variations in temporal dynamics and spatial scales as well. High-frequency signals of- ten capture instantaneous changes and global information about the system,"}, {"title": "3.3. Heterogeneous Temporal Graph Construction", "content": "Heterogeneous Static Graph. As outlined by [47], a Heterogeneous Static Graph (HSG) is defined as \\(G = (V, E)\\), comprising a set of nodes V and a set of edges E. Both nodes and edges in this graph can belong to various types. The graph features a node-type mapping function \\(\\phi: V \\rightarrow A\\) and an edge-type mapping function \\(\\psi : E \\rightarrow R\\), where A and R represent the respective sets of node and edge types. This setup ensures a diverse graph structure, with the combined variety of node and edge types exceeding two, i.e., \\(|A| + |R| > 2\\).\nHeterogeneous Temporal Graph. Building upon the Heterogeneous Static Graph (HSG), a Heterogeneous Temporal Graph (HTG) is defined as a sequence of HSGs across T time steps, represented as \\(G^T = {G^{t_1},...,G^{t_T}}\\). Each graph within this series, \\(G^t = (V^t, E^t)\\), captures the state of the graph at a specific time t. Both the node and edge type mapping functions, \\(\\phi\\) and \\(\\psi\\), are maintained consistently across these time steps. The HTG is aggregated into a unified form as follows:\n\n\\(G^T = \\bigcup_{t=t_1}^{t_T} V^t, \\bigcup_{t=t_1}^{t_T} E^t\\),\n\nwhich integrates nodes \\(V^t\\) and edges \\(E^t\\) from all time steps, thereby preserving the heterogeneity defined by \\(\\phi\\) and \\(\\psi\\). This structure allows for the analysis of dynamic interactions and changes over time while maintaining the diverse characteristics of the nodes and edges.\nHeterogeneous sensor graph construction. To effectively model the heterogeneous sensor signals from a heterogeneous sensor network, we con- struct an HTG. This graph consists of two types of nodes: low-frequency (L) nodes characterized by attributes \\(X_L^{t_i:t}\\), and high-frequency (H) nodes characterized by attributes \\(X_H^{t_i:t}\\). The edges in the graph are defined by the relationships between these node types, specifically L-L, H-H, L-H, and H-L, and are assumed to be consistent over time. This framework enables the HTG to capture and analyze the interactions and temporal evolution between low-frequency and high-frequency signals effectively. A detailed visualization of the HTG is provided in Fig. 1, illustrating the dynamic interplay of sensor types within the network."}, {"title": "3.4. Context-aware Node Dynamics Extraction", "content": "In complex systems, the behavior of individual sensor nodes is signif- icantly influenced by the global operating context, which includes various exogenous variables. Changes in these variables, such as control inputs and environmental conditions, can significantly impact both the magnitude and the frequency characteristics of the sensor signals. For instance, for low- frequency signals, shifts in exogenous variables may alter signal magnitude, such as increased deformation due to higher temperatures. Conversely, high- frequency signals may experience changes in both magnitude and frequency content, such as increased vibration amplitude and frequency associated with higher rotational speed in bearings.\nTo account for these important influences, our HTGNN model leverages context-aware dynamics extraction for each node. This approach extends the strategy proposed in [42] to explicitly model shifts in both magnitude and frequency. We extract contextual information from exogenous variables and integrate it into the dynamics modeling of both low-frequency and high- frequency sensor modalities using specialized techniques. This enables the HTGNN to effectively capture how the operating context influences the tem- poral behavior of each sensor, ultimately leading to more accurate and reli- able virtual sensing.\n3.4.1. Encoding Exogenous Variable.\nTo extract a meaningful representation of the operating context from the exogenous variables (e.g., rotational speed, ambient temperature), we employ a Multi-Layer Perceptron (MLP). Assuming that these variables ex- hibit relatively minor fluctuations within a specific observation window, we first calculate the average value \\(\\overline{w^{t_i:t}} = \\frac{1}{L} \\sum_{i=t_i}^t w^i \\in \\mathbb{R}\\) over the selected time window \\([t_i:t]\\). The MLP then processes this average value to generate a hid- den representation \\(h_w \\in \\mathbb{R}^{d_w}\\) of the operating context. This representation is used to augment the dynamics extraction from other sensor modalities. Formally, the process can be expressed as:\n\n\\(h_w = MLP(\\overline{w^{t_i:t}})\\).\n\nThis approach ensures that the model captures the essential contextual infor-mation, enhancing the accuracy and reliability of the virtual sensing system.\n3.4.2. Encoding Low-Frequency Signals.\nIn complex systems, the magnitude of low-frequency signals is often di- rectly influenced by operating conditions. For instance, higher temperatures may induce increased thermal expansion, resulting in more significant defor- mation of structures such as bridges. This deformation is then manifested as higher values in measurements on strain gauges. Such inherent correla- tions between low-frequency signals and operating conditions underscore the"}, {"title": "3.4.3. Encoding High-Frequency Signals.", "content": "Changes in operating conditions can significantly affect both the magni- tude and frequency characteristics of high-frequency signals in complex sys- tems. For instance, an increase in rotational speed within a bearing can cause the dominant frequencies in the vibration signal to shift towards higher mag- nitudes and frequencies. To address these shifts in high-frequency signals, we use one-dimensional Convolutional Neural Networks (1D-CNNs), which are effective in capturing patterns within time-series data [48]. However, stan- dard 1D-CNNs may struggle to adapt to changes in signal frequency caused\nby varying operating conditions. To overcome this limitation, we propose a 1D Gated Convolutional Neural Network (1D-GCNN). This model integrates a gating mechanism into the traditional 1D-CNN architecture, enabling dy- namic adjustment of its frequency focus based on the operating context. This gating mechanism allows the model to identify and prioritize the frequency components most relevant under varying conditions, resulting in more robust feature extraction.\n1D Gated Convolutional Layer (GCL). The core component of our 1D-GCNN is the Gated Convolutional Layer (GCL). It operates on an input sequence \\(x_i \\in \\mathbb{R}^{d_x}\\) and the exogenous variable encoding \\(h_w\\), functioning as follows:\n\n\\(z^t = Conv1D(x_i^t, W_z)\\),\n\n\\(g^t = \\sigma(W_g h_w + b_g)\\),\n\n\\(o^t = z^t \\otimes g^t\\)\n\nIn this framework, the gating signal \\(g^t \\in \\mathbb{R}^{d_g}\\) functions as a dynamic filter, modulating the importance of different frequency components in the convo- lution output \\(z^t \\in \\mathbb{R}^{d_z}\\). This modulation is achieved through element-wise multiplication, which applies the gating effect independently to each feature, allowing for tailored frequency responses based on the current operating con- text. The learnable parameters in this model include the weight matrices \\(W_z \\in \\mathbb{R}^{d_x\\times d_z}\\), \\(W_g \\in \\mathbb{R}^{d_w\\times d_g}\\), and the bias \\(b_g \\in \\mathbb{R}^{d_g}\\), enabling adaptability and fine-tuning of the gating mechanism."}, {"title": "3.5. Heterogeneous Interaction Modelling", "content": "To effectively capture the complex relationships between sensor nodes and explicitly account for the influence of operating conditions on these inter- actions, our HTGNN model strategically models heterogeneous interactions within the temporal graph. We address two distinct types of interactions: ho- mogeneous interactions among nodes with similar signal characteristics (e.g., low-frequency to low-frequency, high-frequency to high-frequency) and het- erogeneous interactions across nodes with different signal characteristics (e.g., low-frequency to high-frequency). This approach to interaction modeling leverages the node dynamics previously extracted in Sec. 3.4 (low-frequency nodes from Eq. 9, high-frequency nodes from Eq. 14). This method ensures that our model comprehensively integrates both intra- and inter-modality dynamics, enhancing the accuracy and relevance of the sensor data analysis while respecting the signal characteristics.\nIntra-modality interactions. To effectively capture the interdependen- cies among sensors with similar frequency characteristics, we employ Graph Convolutional Networks (GCNs) [36]. This methodology enhances node rep- resentations by aggregating information from neighboring nodes that display correlated behaviors. For instance, temperature sensors in close proximity often exhibit synchronized patterns, and using a GCN allows us to exploit these correlations to refine each sensor's node representation. The interaction between nodes is quantified through messages passed from node j to node i, specifically within each relationship type \\(r_s\\) from the set \\(\\in R_s\\) that connects nodes of the same type. The message passing formula is given by:\n\n\\(m_{ji}^{(l,r_s)} = \\frac{1}{\\sqrt{d_i d_j}} W^{(l)} h_{\\phi(j)}, \\forall r_s \\in R_s, \\phi(j) = \\phi(i)\\),\n\nwhere \\(d_i\\) and \\(d_j\\) represent normalized node degrees, ensuring that the message weighting considers the local topology of each node, thereby stabilizing the learning process across different node densities. \\(R_s\\) is the set of edge types connecting nodes of the same type.\nInter-modality interactions. To capture the influence of one signal type on another within the sensor network (e.g., the impact of low-frequency signals on high-frequency signals), we employ Graph Attention Networks v2 (GATv2) [49]. This approach enables dynamic computation of attention- weighted messages, allowing the model to dynamically assess the relevance of neighboring nodes based on their interactions. The attention coefficients \\(\\alpha_{ji}^{(l,r_a)}\\) for a target node i receiving a message from node j under relation \\(r_d \\in R_d\\) are calculated as follows:\n\n\\(\\alpha_{ji}^{(l,r_a)} = softmax_i\\Big(a_r^T LeakyReLU(W^{(l)} . [h_{\\phi(i)}^{(l)} || h_{\\phi(j)}^{(l)}])\\Big)\\),\n\nwhere \\(r_d \\in R_d\\) represents the set of edge types that connect nodes of different types. The messages are then computed as:\n\n\\(m_{ji}^{(l,r_a)} = \\alpha_{ji}^{(l,r_a)} W^{(l)} h_{\\phi(j)}, \\forall r_d \\in R_d, \\phi(j) \\neq \\phi(i)\\),\n\nAggregation and update: After aggregating messages from both same- type and different-type connections, the node representations are updated in the following manner:\n\nh_{\\phi(i)}^{(l+1)} = SiLU\\Big(\\sum_{r\\in R_s\\cup R_d} \\sum_{j\\in N_r(i)} m_{ji}^{(l,r)}\\Big)\\,\n\nThe updated node state contains incoming messages across all relationships, effectively updating node representations to reflect both homogeneous and heterogeneous influences. This enhances the model's ability to interpret com- plex sensor network dynamics, providing a comprehensive understanding of the system's behavior under varying operating conditions."}, {"title": "3.6. Target Variable Inference", "content": "After extracting the context-aware dynamics from each node, we proceed to integrate these heterogeneous node representations to infer the target vari- able. First, we flatten the final node representations of both low-frequency and high-frequency nodes into a single input vector. This vector is subse- quently processed by a Bidirectional Long Short-Term Memory (BiLSTM) network. This novel application of a BiLSTM to fuse diverse node repre- sentations into a sequential format constitutes a unique approach for inte- grating heterogeneous sensor information in virtual sensing. The BiLSTM leverages flattened node embeddings to capture dependencies and relation- ships between nodes and their attributes in both forward and reverse tem- poral directions. This bidirectional processing enables the model to gather comprehensive information across the entire graph. Unlike simpler aggrega- tion methods such as mean or max pooling, which only capture basic global statistics, the BiLSTM is capable of selectively attending to and weighing information from various nodes and features. This selective attention signif- icantly enhances the model's ability to learn complex relationships between sensor signals and the target variable. The final output of the BiLSTM is then passed through an MLP to generate the final prediction for the target variable \u0177."}, {"title": "4. Case Studies", "content": "To demonstrate the effectiveness of our HTGNN model in addressing the challenges posed by heterogeneous temporal dynamics and varying operat- ing conditions, we conducted two case studies focusing on real-world systems: bearing load prediction and bridge live load prediction. In both cases, the systems are monitored by heterogeneous sensors, but the nature of the chal- lenges they present differs significantly. The bearing case study highlights the impact of varying control inputs, specifically rotational speed, on the tempo- ral dynamics of temperature and vibration sensor signals. In contrast, the bridge case study focuses on the influence of an environmental factor, tem- perature, on displacement and acceleration sensor readings. By evaluating these distinct scenarios, we aim to demonstrate the versatility of the HT- GNN framework in handling diverse sensor modalities, adapting to dynamic environments, and accurately estimating critical parameters under both con- trolled and uncontrolled conditions. These case studies also underscore the generalizability of our approach across different industrial and infrastructure systems, showcasing its potential for broad applicability in real-world virtual sensing applications.\n4.1. Case Study 1: Bearing\nIn our initial case study, we assess the applicability of the proposed HT- GNN model for estimating bearing loads under various operating conditions, using data from temperature and vibration sensors. These sensor modalities provide complementary information: vibration is indicative of the magni- tude of the load, while temperature reveals the spatial distribution of the load within the bearing. Accurate load estimation is valuable for implement- ing predictive maintenance strategies in industrial applications, as it enables operation optimization, misalignment detections [5], faults diagnosis, as well as lifespan and damage propagation prediction [6, 7]. Directly measuring bearing loads during operation can be intrusive, expensive, or impractical due to battery limitations [50]. Therefore, our approach focuses on inferring load values from readily available sensor signals, making the process more feasible and cost-effective.\n4.1.1. Bearing Test Rig Data Acquisition\nThe data used in this study was collected at the SKF Sven Wingquist Test Centre (SWTC) using a face-to-face test rig with two identical single- row tapered roller bearings (TRBs). The TRBs feature a rotating inner ring, an outer diameter of 2,000 mm, an inner diameter of 1,500 mm, and a width\nof 220 mm, each incorporating 50 rollers. This setup aims to assess load conditions under various operational scenarios. Fig. 4 illustrates the sensor positioning on both identical TRBs. Ten temperature sensors are positioned on each bearing, with eight uniformly distributed on the outer ring (OR), and two on the inner ring (IR). Additionally, six vibration sensors on the outer ring measure both axial (AX) and radial (RA) vibrations, with sensors placed at the top and bottom of the bearing housing for the radial direction. Temperature is recorded at a 1 Hz sampling rate with a precision of 0.05\u00b0C. Vibration data is aggregated to 1 Hz using Root Mean Square (RMS) aggregations. Axial and radial forces are measured and controlled by several load cells, with aggregated load values in both directions used as ground truth for this study (note that the radial load cells are not shown in the figure).\n4.1.2. Data Preprocessing\nTo prepare the data for virtual sensor emulation, we first filtered the raw sensor data, retaining only cases with at least 20 minutes and up to 1 hour of continuous, stationary operation. This resulted in a final dataset com- prising 164,948 samples. To reduce noise and transient fluctuations in the temperature data, we apply a moving average filter with a 1-minute window. We focus on the rate of temperature change because the bearing tempera- ture responds gradually to changes in load and speed. We calculated this rate over 5-minute periods to align with typical operational changes. This approach allows our model to identify the immediate impact of load changes on temperature, rather than the cumulative effects of historical variations. After preprocessing, we split both temperature and vibration signals using a sliding window, with a length of 30 and a stride of 1.\nTo emulate the deployment and validation of a virtual sensor, the dataset was split by time while maintaining a representation of all 55 unique oper- ating conditions (defined by axial load (Fx), radial load (Fy), and rotational speed), which are detailed in Appendix A.1. Within each operating con- dition, the initial 50% of the sequential data was allocated to the training and validation sets, with a random 80/20 split. The remaining 50% of the sequential data formed the test set, representing the period when the vir- tual sensor would be actively predicting bearing load. This temporal split mirrors the real-world scenario where a physical sensor might have a limited lifespan due to factors such as battery drain or wear and tear. The virtual sensor is trained and validated on data collected during the physical sensor's operational life, and then used to predict future load conditions.\n4.1.3. Heterogeneous Bearing Graph Construction\nWe construct a heterogeneous graph with nodes representing sensors (temperature (T) and vibration (V)). Temperature nodes are further clas- sified into inner ring (T IR) or outer ring (T OR) nodes. V nodes, which are installed on the outer ring, are distinguished by their load direction: radial (V RA) or axial (V AX). We model four types of relationships: T-T, V-V, T-V, and V-T. Here, T-T and V-V represent intra-modality interactions, while V-T and T-V represent inter-modality interactions. Node positions re- flect physical sensor placement. Fig. 5(a) and (b) illustrate the connectivity within a single bearing based on physical proximity. Additionally, IR nodes are connected due to relatively uniform temperatures across the inner ring. Given that the test rig consists of two bearings, we connect them based on proximity, as illustrated in Fig. 5(e) for V nodes. We assume symmetrical (undirected) relationships within the same sensor type and model heteroge- neous T-V and V-T relationships with directed edges, as demonstrated in Fig. 5(c) and (d).\n4.2. Case Study 2: Bridge\nIn this case study, we evaluate our proposed HTGNN model for bridge health monitoring, specifically focusing on estimating live load on the bridge deck from displacement and acceleration signals. Live load refers to the dy- namic forces exerted on the bridge by due to traffic, such as the weight of vehicles passing over it. Accurate and timely estimation of live load is essen- tial for assessing a bridge's structural integrity, identifying potential overloads\nor fatigue damage, and making informed decisions about maintenance and repair [51]. This capability is essential for ensuring the safety and longevity of bridge structures.\n4.2.1. Train-Track-Bridge Simulator and Data Acquisition\nReal-world bridge health monitoring data that captures the combined ef- fects of train loads, speeds, and temperature variations is often scarce and not publicly available, especially data that includes both displacement and acceleration measurements. To address this, we leveraged the Train-Track- Bridge (TTB) simulator [52], a recent finite element method-based tool offer- ing highly realistic simulations of train, track, and bridge interactions under varying conditions, including the influence of track irregularities, a significant source of excitation for bridges.\nFollowing the approach in Sarwar et al. [53], we simulated an ICE3 Ve- laro train with eight wagons on a bridge with a length of L = 50m, a second moment of area I = 51.3m\u00b2, a mass per unit length \u03c1 = 69000kg/m, and a modulus of elasticity E = 3.5 \u00d7 101\u00b0N/m. To simulate realistic tempera- ture fluctuations, hourly temperature data (0.1\u00b0C precision) from the Zurich Fluntern weather station was incorporated. This data was sourced from Vi-sual Crossing. To estimate train loads, we utilized SBB passenger traffic statistics [54], which detail the percentage of long-distance trains at Zurich's main station per hour for 2023, differentiated by weekdays and weekends. Daily load factors (standard deviation 0.1) were randomly drawn from this distribution and applied to a base load of 42100 kg. Wagon-to-wagon load variations were modeled using a normal distribution (standard deviation 500 kg) around this final load, resulting in loads ranging from 42100 kg to 53500 kg. Nine train runs were simulated per day, starting at 6:00 AM with two- hour intervals until 10:00 PM. To capture representative load patterns and comprehensive temperature variations, we simulated the first week of each month over an entire year, resulting in 756 unique train runs with diverse load, speed, and temperature conditions.\n4.2.2. Data Preprocessing\nRaw simulation data was first cropped to focus on the period when the train was fully on the bridge based on the magnitude of the displacement sensors, excluding the entry and exit phases. To simulate realistic sensor noise, additive white Gaussian noise with a signal-to-noise ratio (SNR) of 35 dB was introduced. The data, originally sampled at 1000 Hz, was then"}, {"title": "5. Evaluation Setup", "content": "This section details the experimental design employed to evaluate the effectiveness of HTGNN in load prediction within a heterogeneous sensor network setting. Specifically, we introduce the baseline methods and their configurations in Sec. 5.1, evaluation metrics in Sec. 5.2, training setups in"}]}]}