{"title": "Artificial Intelligence Based Navigation in Quasi Structured Environment", "authors": ["Hariram Sampath Kumar", "Archana Singh", "Manish Kumar Ojha"], "abstract": "Abstract-The proper planning of different types of public\ntransportation such as metro, highway, waterways, and so on,\ncan increase the efficiency, reduce the congestion and improve\nthe safety of the country. There are certain challenges associated\nwith route planning, such as high cost of implementation, need for\nadequate resource & infrastructure and resistance to change. The\ngoal of this research is to examine the working, applications, com-\nplexity factors, advantages & disadvantages of Floyed-Warshall,\nBellman-Ford, Johnson, Ant Colony Optimization (ACO), Parti-\ncle Swarm Optimization (PSO), & Grey Wolf Optimizer (GWO),\nto find the best choice for the above application. In this paper,\ncomparative analysis of above-mentioned algorithms is presented.\nThe Floyd- Warshall method and ACO algorithm are chosen\nbased on the comparisons. Also, a combination of modified\nFloyd-Warshall with ACO algorithm is proposed. The proposed\nalgorithm showed better results with less time complexity, when\napplied on randomly structured points within a boundary called\nquasi-structured points. In addition, this paper also discusses the\nfuture works of integrating Floyd-Warshall with ACO to develop\na real-time model for overcoming above mentioned-challenges\nduring transportation route planning.\nIndex Terms-ACO, Bellman-Ford, Floyd-Warshall, GWO,\nJohnson, PSO, Public Transportation, Route Planning", "sections": [{"title": "I. INTRODUCTION", "content": "Based on the literature survey, a research gap was found\nfor application of Artificial Intelligence (AI) in Transportation\nRoute Planning. In this research, a detailed study is done\nto find the optimal algorithm for the application and also,\ndeveloped a new modified algorithm for establishing a research\npathway to develop an AI model in different stages for the\nmentioned application.\nThe proposed algorithm focuses on initial stage of im-\nplementation for transportation route planning. The current\nimplementation stage is split up as follows:\n1) Based on comparative analysis choose the best algorithm\nsuitable for the application.\n2) Develop a modified Floyd-Warshall with ACO algorithm\nand apply on quasi-structured points.\n3) Recorded the results and compared with general Floyd-\nWarshall algorithm.\nFurther in this section, we will see about different path-\ngeneration algorithms & nature-inspired optimization algo-\nrithms, and comparative analysis of ACO, PSO, GWO,\nBellman-Ford, Johnson, Floyd-Warshall. In the upcoming sec-\ntions, a detailed review of various research & survey papers\nhas been included. In section 3, a detailed methodology of\nthe research and process of building modified Floyd- Warshall\nwith ACO algorithm has been discussed. In section 4, the\nresults acquired using the proposed algorithm and the classic\nalgorithm is presented and the betterment is discussed. Fol-\nlowed by in the final section, a short brief about the objectives\nachieved & the future works has been discussed."}, {"title": "A. Overview of Path Generation Algorithms", "content": "Path generation algorithms are computational methods used\nto find all the paths in a network between two or more points,\ntaking into account constraints such as node weights and edge\nweights. This algorithm plays a role in various disciplines,\nsuch as transportation, logistics, & network routing, among\nothers [17].\nThe Bellman-Ford methodology is a known method for\nfiguring out the shortest route between the origin node and\nan adjacent node in a network with negative edge weights.\nIt operates by iterating over all graph nodes and relaxing the\nedges, thereby updating each corresponding node with com-\nputed shortest possible route until convergence. This algorithm\ncan manage networks with adverse edge weights, but as a\ntime complexity of O(|V||E|), making it less effective for vast\ngraphs [15].\nThe Floyd-Warshall's algorithm is another classic algorithm\nto determine the all-possible shortest path between any numebr\nof points in a graph with positive or negative edge weights.\nIt operates by constructing a table of shortest path estimates\nbetween all pairs of graphical points by taking intermediate\nnodes into account. This algorithm's time issues are O(|V|3),\nmaking it inefficient for vast graphs [13], [15].\nThe Johnson algorithm is a more recent algorithm for\nlocating the fastest route between every pair of a graph's nodes\nwith either positive or adverse edge weights on their edges. It\noperates by first transforming the graph by adding fresh node\nand edges without any weight, then applying the Bellman-Ford\nalgorithm on transformed chart to determine the node's size,\nand finally using Dijkstra's technique, you can figure out the\nshortest route between any two nodes. The time complex of\nthe algorithm is O (|V| 2log|V| + |V||E|), which makes it\nmore efficient for large graphs [5].\nIn a network with positive edge weights, the Dijkstra's\nalgorithm is a well-known method for figuring out the distance\nbetween any two source nodes and all other nodes. It operates\nby maintaining a queue of nodes and their shortest path"}, {"title": "B. Overview of Nature-Inspired Optimization Algorithms", "content": "A class of optimisation algorithms, swarm intelligence algo-\nrithms are modelled after how social organisms act in groups\nsuch as insects, bees, and birds. These algorithms utilise\nan abundance of simple agents, known as particles, ants, or\nwolves, that interact with one another and their surroundings to\ndiscover the ideal response to a specific issue. The application\nof swarm intelligence algorithms to a variety of optimisation\nproblems, including path planning, scheduling, and machine\nlearning, has been fruitful [7].\nA prominent algorithm for swarm intelligence is ACO. The\nconduct of genuine ants is the basis for ACO, which leave\npheromone traces to indicate the fastest way to get from their\ncolonies to a source of food. ACO begins with a collection\nof artificial ants that investigate the search space and leave\npheromone traces to indicate the quality of solutions. The\ninsects then follow the pheromone traces, with a higher prob-\nability of following the pheromone-richer trail. As the insects\ncontinue to investigate, the pheromone traces are updated in\naccordance with the quality of the solutions discovered. The\npheromone traces converge over time on the optimal solution\n[7].\nPSO is based on the actions of avian colonies, which\ncoordinate their movements in order to locate sustenance and\navoid predators. Each particle in PSO represents a potential\noptimisation solution and traverses the search space based\non its location and speed at the moment. The particles are\naffected by the most successful outcome that any particle has\nyet found, known as global best, as well as the optimal solution\ndiscovered by each element, known as individual best. As\nparticles move through the search space, their positions and\nvelocities are updated based on global and individual bests [7].\nAnother more modern swarm intelligence method is called\nGrey Wolf Optimizer (GWO). GWO is founded on grey\nwolves' coordinated hunting techniques, which are used to\ncapture prey. Each wolf in GWO represents a potential optimi-\nsation solution and is categorised as beta, delta, or alpha based\non performance value. Other wolves modify their positions and\nmovements based on the beta, delta, and alpha wolves, with\nalpha wolf providing the most effective solution thus far. The\nsearch continues until either the optimal solution is located or\na predetermined halting criterion is met [7]."}, {"title": "C. Comparative Analysis of Algorithms", "content": "Floyd-Warshall, Dijkstra's, Bellman-Ford, and Johnson al-\ngorithms have the following time, storage, and computation\ncomplexity characteristics,\nDijkstra's Method:\n\u2022 With a binary heap implementation, the time complexity\nis O((|V| + |E|)log|V|), whereas O(|V|2) for simple array\nimplementation.\n\u2022 O(|V| + |E|) is storage complexity.\n\u2022 Complexity of computation: it requires a priority, which\ncan be implemented using a binary heap or Fibonacci heap\n[15].\nBellman-Ford Methodology:\n\u2022 Time complication: O(|V||E|)\n\u2022 Storage difficulty: O(V)\n\u2022 Computational complexity: it requires a single array to\nstore the minimum distances from the origin node to other\nnodes in graph [15].\nFloyd-Warshall Method:\n\u2022 Duration complexity: O(|V|3)\n\u2022 Storage constraint: O(|V|2)\n\u2022 Computational complexity: storing the shortest distances\nbetween all pairs of nodes in the graph necessitates a two-\ndimensional array [15].\nJohnson's Method:\n\u2022 O(|V| 2log|V| + |V||E|) is the time complexity.\n\u2022 O(|V| + |E|) is storage complication.\n\u2022 Computational complexity: It requires the Bellman-Ford\nalgorithm to reweight the vertices and then Dijkstra's algo-\nrithm to determine the shortest path for each node [5].\nWhen combined with a binary heap or a Fibonacci heap,\nDijkstra's has the most effective temporal complexity, whereas\nthe Bellman-Ford is the one with the greatest time complex-\nity. Floyd-Warshall and Johnson algorithms have comparable\ntime complexity, but Floyd-Warshall algorithm requires more\nstorage space than Johnson algorithm [15].\nIn terms of storage complexity, the Bellman-Ford algorithm\nrequires the least storage space, whereas the Floyd-Warshall\nalgorithm requires the most [15].\nIn terms of computational complexity, Dijkstra's and John-\nson's algorithms require a priority queue to store the vertices,\nwhereas the Bellman-Ford and Floyd-Warshall algorithms\nrequire only a single array and a two-dimensional array,\nrespectively [15].\nBased on only the complexity factor, the required algorithm\ncannot be chosen."}, {"title": "II. LITERATURE REVIEW", "content": "The Preferred Reporting Items for Systematic Reviews and\nMeta-Analyses (PRISMA) methodology is done to select the\nimportant research and review articles based on the scope of\nthe work using predefined criteria. It is for faster and in-depth\nanalysis of articles as per the need. A total of 71 articles is\nreviewed as part of the research and considered 30 articles\nspecifically for the review by using the PRISMA. It is suggested that a modified ant algorithm be used as\na quick and efficient way to plan UCAV paths. The planned\nroute can ensure that the UCAV travels along the best route,\nwith the least chance of getting lost and the least amount of\nenergy expended, to its destination. The original ant algorithm\ncan easily converge to local optimal solutions since the search\nspace is large, but the search performance is slow. The speed\nof the selection process can be increased while the likelihood\nof local optimal solutions is decreased using the modified\nant algorithm. The simulation results demonstrate that the\nproposed path-planning scheme can obtain an optimisation\npath that can be re-optimized when unanticipated hazards\nemerge [1].\nThe creation of the origin-destination (OD) matrix, a key\npiece of information in vehicle routing or TSP, is discussed.\nTo create an OD matrix, the shortest pathways between various\nnodes must be determined. Candidate techniques include the\nrepetitive application of Floyd-Warshall method, Dijkstra's\nmethod, and other algorithms created specifically for this use.\nOD matrices can be computed on actual road networks using\na variety of shortest path algorithms. Dijkstra's method with\na rough container data structure fared well in the majority of\nthe tested networks [2].\nA straightforward and widely used approach for finding\nthe shortest paths between any pair of edges in an edge-\nweighted oriented graph is the Floyd-Warshall algorithm [3].\nThe single objective shortest path problem is extended to\nthe multi-objective shortest path problem, which looks for\neffective connections between two pieces of a network while\nalso resolving several competing objectives. MOSP is one\nof the most significant network optimisation problems, with\nwidespread applications in the telecommunications, transporta-\ntion, and project management industries. This work provides\na multi-objective ACO-based approach for resolving the bi-\nobjective short path issue. The results of the set of example\nproblems indicate that the proposed algorithm yields non-\ndominated solutions of high quality and saves computation\ntime [4].\nOne of the most well-known techniques for finding the\ncheapest route between any pair of nodes in a network with at\nleast one cycle is Floyd-Warshall. Additionally, we show that\nour algorithm's base is much easier to understand, which could\nbe useful for instructional reasons. A brief example validates\nand demonstrates the implementation of our algorithm [5]. A\ncomparison between the rectangular algorithm and the Floyd\nWarshall methodology is done. The Floyd Warshall algorithm\nperforms marginally better for dense graphs, whereas the\nrectangular algorithm is more effective for sparse graphs\n[6]. Numerous swarm optimisation algorithms, from Adaptive\nComputation to the most recent, Grey Wolf Optimisation,\nhave been developed since the early 1960s. In experiments,\n30 well-known test functions are used to compare algorithms\nto one another and to provide a concise explanation of each\nalgorithm. The results indicate that Differential Evolution (DE)\nand Particle Swarm Optimisation (PSO) are superior to all\nother approaches considered [7].\nMost analysts predict that demand for electric and plug-\nin electric vehicles will increase. This need is fuelled by en-\nergy dependence, environmental concerns, and fluctuating fuel\nprices. These algorithms seek to reduce the distance or travel\ntime between two locations. To overcome these optimisation\ndifficulties, Dijkstra or Dijkstra-like algorithms are frequently\nemployed. This problem necessitates alternative approaches.\nEnergy-efficient navigation for EVs is a challenging challenge\ndue to negative path costs produced by regenerative slowing,\nbattery power and energy constraints, and vehicle parameters"}, {"title": "V. RESULT AND DISCUSSION", "content": "Based on the review and complexity factors, pros, cons\nof each algorithm. Floyd -Warshall algorithm & Ant Colony\nOptimization (ACO) algorithm is considered over other algo-\nrithms for planning of above-mentioned transportation modes.\nThe actual benefit of Integrating Floyd-Warshall algorithm\nwith Ant Colony Optimization (ACO) helps in considering\nphysical, social, economic, technical, and time constraints\ninvolved as part of various kinds of transportation planning.\nThe model's effectiveness would be improved when compared\nto traditional ACO, by optimizing the paths generated under\nthe afore-mentioned constraints.\nIt implies that integration of these two algorithms leads to\nproper planning of route between two destinations. By im-\nplementing the modified Floyd-Warshall with ACO algorithm\non quasi structured points, the first stage of implementation\nis completed. From the results observed, when compared to\ngeneral Floyd-Warshall algorithm, the proposed method is\neffective and less complex. Implementation is divided into\ndifferent parts and the results of all these parts are presented\nand explained below:"}, {"title": "V. CONCLUSION", "content": "The initial model for planning various modes of trans-\nportation is developed using the Floyd-Warshall method and\nACO. The first stage of implementation is completed using the"}]}