{"title": "A Graph-Enhanced Deep-Reinforcement Learning Framework for the Aircraft Landing Problem", "authors": ["Vatsal K. Maru"], "abstract": "The Aircraft Landing Problem (ALP) is one of the challenging problems in aircraft transportation and management. The challenge is to schedule the arriving aircraft in a sequence so that the cost and delays are optimized. There are various solution approaches to solving this problem, most of which are based on operations research algorithms and meta-heuristics. Although traditional methods perform better on one or the other factors, there remains a problem of solving real-time rescheduling and computational scalability altogether. This paper presents a novel deep reinforcement learning (DRL) framework that combines graph neural networks with actor-critic architectures to address the ALP. This paper introduces three key contributions: A graph-based state representation that efficiently captures temporal and spatial relationships between aircraft, a specialized actor-critic architecture designed to handle multiple competing objectives in landing scheduling, and a runway balance strategy that ensures efficient resource utilization while maintaining safety constraints. The results show that the trained algorithm can be tested on different problem sets and the results are competitive to operation research algorithms. The experimental results on standard benchmark data sets demonstrate a 99.95% reduction in computational time compared to Mixed Integer Programming (MIP) and 38% higher runway throughput over First Come First Serve (FCFS) approaches. Therefore, the proposed solution is competitive to traditional approaches and achieves substantial advancements. Notably, it does not require retraining, making it particularly suitable for industrial deployment. The framework's capability to generate solutions within <1 second enables real-time rescheduling, addressing critical requirements of air traffic management.", "sections": [{"title": "1. Introduction", "content": "The aircraft landing problem (ALP) is one of the scheduling problems in the sequencing of aircraft on runways. The ALP focuses primarily on arriving aircraft. With global air traffic projected to exceed 9 billion passengers by 2025 [1], and major hubs like Hartsfield-Jackson Atlanta International Airport handling nearly 96 million passengers annually [2], efficient runway utilization has become essential to maintain operational safety and minimize delays. The resulting air traffic on runways [3] leaves airports with two possible options: expanding the infrastructure or optimizing the existing infrastructure to meet the growing demand. Even if airports expand the infrastructure, it is not a quick process to build runways, which leaves airport authorities and Air Traffic Control (ATC) with optimization problems. A frequent scheduling technique the ATC uses is First Come First Serve (FCFS) [4, 5]. FCFS technique sequences the aircraft for arrival based on the arrival aircraft's entry to the radar range. As the aircraft enters the predetermined radar window, the ATC allocates a scheduled time window for an aircraft to land.\nThe problem's complexity stems from multiple interacting constraints and objectives: wake vortex separation requirements, time window restrictions, and the need to minimize both delay costs and fuel consumption [6]. Given the size and complexity of the problem that requires computing a schedule of arriving aircraft on runways, researchers have tried to optimize delays and costs by implementing different solution approaches. [7] proposed a Mixed-Integer Programming (MIP) approach for the ALP and included different penalties for early and late landings of the aircraft than the scheduled landing time. They have managed a standardized OR-Library of the problem set at http://people.brunel.ac.uk/~mastjjb/jeb/orlib/airlandinfo.html. Improving upon the static case, the authors further expanded the MIP formulation to include a dynamic case where they incorporated displacement constraints [8]. [9] developed a simplex-based solution approach for the ALP. part from the MIP solution approach, there are other operations research-based solutions, heuristics and meta-heuristics solutions, and ensemble approaches consisting of different combinations of the above methods. Literature also consists of dynamic programming and learning-based algorithms for the ALP. An overview of these methods is provided in the section 2. In the ALP, various formulations consist of a few common constraints across the literature. Some of those constraints are time window constraints, and separation constraints given the category of an aircraft. The International Civil Aviation Organization (ICAO) has defined the vertical and longitudinal separation constraints [10]. These constraints help maintain the aircraft's aerodynamic stability and enhance the overall safety of the operation. There is a Wake Vortex (WV) separation that clarifies the separation of different aircraft based on the categorical classification: Super Heavy (S), Heavy (H), Medium (M), and Light (L). S category is only for the Aircraft - Airbus A380-800. There are further suggestions and improvements over this existing classification by the Federal Aviation Administration (FAA) as there are multiple factors that account for separation requirements, e.g., weather conditions. The time window includes the earliest possible time and the latest possible time. Depending on the aircraft's actual landing time and its difference from the scheduled landing time, the penalties are calculated [7].\nHeuristic and metaheuristic algorithms often do not provide results as optimal as those produced by operations research methods. However, their computational efficiency can be competitive, making them attractive for real-world applications. This paper aims to address the shortcomings of certain traditional approaches, such as scalability issues and the lack of generalization and consistency in solutions. Due to these limitations, many methods in the literature face challenges in modern industrial environments. For example, given the dynamic nature of aircraft arrivals, real-time rescheduling is essential. If an algorithm requires significant computational time to update the schedule even if it produces optimal results its practical usefulness may be limited. This concern may explain why the FCFS approach is still in use today.\nThe important contribution of this paper is a new way of approaching the ALP using Deep Reinforcement Learning (DRL). Given the recent successes of DRL in DeepMind's AlphaGo, AlphaZero, AlphaStar, and OpenAI's O1 model, there is an increased interest in assessing and"}, {"title": "2. Background and Problem Definition", "content": "This section will address the ALP problem definition, data instances, and existing approaches from various fields."}, {"title": "2.1. Problem Definition", "content": "The Aircraft Landing Problem (ALP) represents a critical operational challenge in air traffic management. At its core, ALP involves determining optimal landing times for arriving aircraft while satisfying multiple operational constraints and minimizing various cost factors [11]. Consider a set of aircraft A = {1, 2, ..., n} to be scheduled for landing on a runway. For each aircraft i \u2208 A:\n\u2022 Ti: Target landing time\n\u2022 Ei: Earliest possible landing time\n\u2022 Li: Latest possible landing time\n\u2022: Penalty cost per unit time for landing after Ti\n\u2022: Penalty cost per unit time for landing before Ti\n\u2022wi: Wake turbulence category (Heavy/Medium/Light)\nFor any pair of aircraft (i, j) landing consecutively:\n\u2022Sij: Minimum separation time based on wake vortex categories\n\u2022 dij: Binary variable indicating if i lands before j\n\u2022ai: Time units landed before target time\n\u2022 Bi: Time units landed after target time\nThe primary decision variable for each aircraft i is:\n\u2022xi: Actual landing time xi \u2208 [Ei, Li]"}, {"title": "2.1.1. Objective Function", "content": "Minimize the total weighted deviation from target times:\nmin \u2211_{i=1}^{n} (c_i \u03b1_i + c_i^\u03b2 \u03b2_i) \n(1)"}, {"title": "2.1.2. Constraints", "content": "Ei \u2264 Xi \u2264 Li, \u2200i\u2208 A (2)\ndij + dji = 1, \u2200i, j\u2208 A, i \u2260 j (3)\nX j - Xi\u2265 Sijdij, \u2200i, j\u2208 A, i \u2260 j (4)\nXi - Ti = Bi - ai, \u2200i \u2208 A (5)\n0 \u2264 a \u2264 Ti - Ei, \u2200i \u2208 A (6)\n0 \u2264 \u1e9ei \u2264 Li - Ti, \u2200i\u2208 A (7)\ndij = 1, \u2200(i, j) \u2208 P (8)\nXj - Xi \u2265 Sij + b, \u2200i, j \u2208 A, i \u2260 \u0458, \u0431\u0456\u0458 = 1 (9)\nxi \u2265 0, \u2200i\u2208 A (10)\nai, \u1e9ei \u2265 0, \u2200i\u2208 A (11)\ndij \u2208 {0,1}, \u2200i, j\u2208 A, i \u2260 j (12)\nThe separation times sij are defined according to ICAO standards based on the wake turbulence categories of the leading and following aircraft. Table 2 shows different combinations of separation times between leading and following aircraft provided in [11]. For example, if aircraft i is Heavy and aircraft j is Light, then sij = 240 seconds. For any pair of aircraft (i, j) landing consecu-tively, a minimum separation time sij must be maintained based on aircraft weight categories (Heavy/Medium/Light) and landing sequence (leading vs following aircraft). The primary decision variable for each aircraft i is actual landing time ti \u2208 [Ei, Li]. The objective is to minimize the total cost of deviations from target times as provided in the objective function.\nObjetive funciton is constrained to certain operational requirements and safety consideration. The time window constraint (2) ensures each aircraft lands within its operational limits. The landing sequence constraints (3) establish the binary relationship between any pair of aircraft. For each pair (i, j), either aircraft i lands before j (dij = 1) or j lands before i (dji = 1). This constraint creates a"}, {"title": "2.2. Standardized Data and Instances", "content": "This subsection discusses standardized datasets in the ALP, emphasizing their evolution in capturing operational complexity. This dataset standardization provides researchers with a robust foundation by enabling objective comparisons of algorithmic performance a crucial step toward real-world implementation. This comparison is useful for series of downstream decisions in aircraft operations, such as the required memory space, expected runway throughput, etc. The OR-Library [7] dominated early ALP research with synthetic instances featuring homogeneous aircraft distributions (3 wake turbulence categories), static separation matrices independent of ICAO regulations, linear penalty structures for time deviations, fixed 30-minute time windows ([T; \u221215, T\u00bf + 15]), and scalability up to 500 aircraft for theoretical analysis. OR-Library instances of the ALP can be found here https://people.brunel.ac.uk/~mastjjb/jeb/orlib/airlandinfo.html.\nOR-Library instances provided a standardized test for ALP algorithms for a considerable time. However, while enabling foundational algorithmic comparisons, OR-Library instances exhibit critical operational shortcomings. Some of those limitations include cost models lacking tiered delay penalties, absence of real-world traffic patterns, separation time inconsistencies involving ICAO/EUROCONTROL standards, etc. Addressing these limitations, [11] introduced a dataset derived from Paris-Orly Airport (LFPO) operations, featuring tiered delay penalties 1, and ICAO-compliant separations 2. Their data includes certain patterns of peak traffic hours at the Paris-Orly airport (LFPO). Data can be found at https://data.recherche.enac.fr/ikli-alp/. The dataset incorporates ICAO wake turbulence categories with realistic distributions (2, in their paper [11], they provide detailed calculations of separation times between the leading and following aircraft."}, {"title": "2.3. Existing Solution Approaches and Research Landscape", "content": "The aircraft landing problem has attracted significant research attention across multiple disci-plines, resulting in diverse methodological approaches. This section provides a critical analysis of four major research directions, examining their technical contributions and operational limitations."}, {"title": "2.3.1. Operations Research Approaches", "content": "The foundational work by [7] established the modern formulation of ALP through mixed-integer programming (MIP), introducing distinct early/late penalty costs and creating the OR-Library benchmark dataset. Their static formulation considered single-runway scenarios with fixed separation matrices, demonstrating optimal solutions for instances up to 50 aircraft using branch-and-bound methods. The authors later extended this to dynamic scenarios [8] through displacement constraints that allowed limited schedule adjustments, though at the cost of quadratic growth in binary variables. [9] developed a simplex-based solution approach that laid groundwork for linear programming relaxations in ALP.\nSubsequent noteworthy operations research solutions addressed specific operational constraints. For example, [14] developed time-indexed formulations with valid inequalities that improved solution quality for medium-sized instances. [15] proposed column generation techniques for multi-runway systems, demonstrating improved computational efficiency. Furthermore, [16] introduced symmetry-breaking constraints that enhanced the performance of CPLEX for larger instances. While these exact methods guarantee optimality, their computational complexity limits practical application to real-time scenarios. Recent benchmarks show CPLEX requires significant time for large instances, making pure MIP approaches unsuitable for dynamic environments and real-time use cases."}, {"title": "2.3.2. Heuristic and Metaheuristic Innovations", "content": "Metaheuristic approaches emerged to address scalability challenges, particularly for large-scale instances. [13] pioneered a hybrid Simulated Annealing-MIP approach combining local search with exact neighborhood evaluation. Their variable neighborhood descent mechanism showed improvements in solution quality while maintaining computational efficiency compared to pure MIP. [6] later enhanced this approach with iterated local search components. [17] developed a population-based scatter search method with adaptive reference sets, which incorporates path relinking to maintain solution diversity. Their bionomic algorithm variant introduced ecological selection pressures, showing promise for larger instances. [18] proposed novel hybrid heuristics specifically for single-runway scenarios. Using iterated local search [19] achieved promising results through dynamic perturbation strength adaptation. Their self-tuning mechanism alternated between insertion and swap operators based on solution landscape characteristics, demonstrating improvements over static ILS implementations. [20] developed a tabu search methodology with multiple runway constraints, demonstrating effective prevention of cycling through memory structures while achieving competitive solution quality for instances up to 25 aircraft. Despite these advances, metaheuristics face reproducibility challenges - [6] showed solution quality variance across random seeds for identical instances. This stochasticity complicates deployment in safety-critical aviation systems."}, {"title": "2.3.3. Dynamic and Constraint Programming Approaches", "content": "Real-time scheduling requirements motivated temporal decomposition strategies in the ALP. [21] implemented a sliding window approach with look-ahead horizons in their rolling horizon optimization. Their aircraft grouping strategy showed potential for reducing problem dimensionality while maintaining constraint satisfaction rates. [22] extended this work with adaptive horizon adjustments. [23] approached ALP with Constrained Position Shifting (CPS). They developed dynamic programming with CPS \u2264 3, enabling polynomial-time solutions for FAA-compliant scenarios. Later extensions [24] incorporated aircraft class-specific shifting limits, showing potential for improved runway utilization. [25] formulated runway sequencing as a cumulative scheduling problem with holding pattern constraints. Their edge-finding propagators showed promise for separation compliance but required airport-specific tuning of search strategies. [26] proposed constraint relaxation techniques that improved computational efficiency for large instances. These methods excel in specific operational contexts but struggle with generalizability across different airport configurations and traffic patterns."}, {"title": "2.3.4. Machine Learning Methodologies", "content": "As the aircraft planning involves varieties of problems at different levels (strategic, tactical, and operational) [27], certain noteworthy machine learning approaches are discussed here. Recent machine learning approaches attempt to balance optimality with computational efficiency. [28] used Q-Learning for Departure Management, and demonstrated potential for reducing taxi times using discrete state-action spaces. However, their tabular representation faced scalability challenges for larger scenarios. [29] pioneered Deep Reinforcement Learning (DRL) for aircraft sequencing using convolutional networks on spatial-temporal grids. Their approach showed promise in decision times but faced challenges in constraint satisfaction. [30] combined particle swarm optimization with neural cost predictors in their hybrid neuro-symbolic methods, showing potential for reducing fuel consumption through aerodynamic wake modeling. [31] developed specialized genetic operators for runway configuration optimization. [32] introduced preference models balancing airline costs and ATC workload in their multi-stakeholder optimization, while [33] addressed winter operations through integrated de-icing scheduling. While promising, these early learning approaches either sacrificed constraint guarantees or required extensive manual engineering for state representation. Recent advances in neural architectures have shown promise for complex air traffic control tasks. [34] demonstrated transformer networks' effectiveness in interpreting spoken ATC instructions for flight trajectory prediction, achieving 92.3% accuracy in instruction parsing through their dual-encoder architecture. Their work establishes transformers' ability to process sequential ATC communications while maintaining temporal relationships in aircraft trajectories, a critical requirement for landing scheduling system. GNNs have emerged as powerful tools for industrial scheduling challenges. [35] recently applied GNNs to semiconductor manufacturing scheduling, achieving 18.7% cycle time reduction through their hierarchical message passing architecture. Their work confirms GNNs' ability to capture complex resource allocation patterns that are useful in solving the ALP."}, {"title": "3. Methodology", "content": "The proposed methodology addresses the aircraft landing problem through a novel combination of deep reinforcement learning and graph neural networks. This integration allows us to capture both the temporal aspects of aircraft scheduling and the complex relationships between aircraft characteristics, separation requirements, and runway constraints. The approach differs from traditional optimization methods by learning scheduling policies that can adapt to varying conditions while maintaining computational efficiency."}, {"title": "3.1. Deep Reinforcement Learning Framework", "content": "This paper proposes an ALP solution as a Markov Decision Process (MDP) that is solved using a graph-enhanced deep reinforcement learning approach. The framework combines graph neural networks with actor-critic architecture. The effectiveness of reinforcement learning depends heavily on how we represent the problem state and possible actions. In this formulation, spaces are carefully designed to capture all relevant operational factors while maintaining tractability. The state space incorporates both static aircraft characteristics and dynamic scheduling conditions, while the action space is structured to ensure feasible landing time assignments."}, {"title": "3.1.1. State Space", "content": "The state space st at time t comprises a set of features for each aircraft i \u2208 A:\n\u2022 Normalized scheduled arrival time t \u2208 [0,1]\n\u2022 Aircraft category encoding ci \u2208 {0,1,2} for Heavy/Medium/Light\n\u2022 Normalized urgency level \u016bi derived from cost coefficients\n\u2022 Normalized landing time window [Ei, Li]\n\u2022 Priority score pi computed as:\npi = w\u2081\u016bi + W2Ti + W3Ki + W4Ci\n(13)\nwhere:\nTi is time window criticality\nki is category-based priority\n\u010di is normalized cost factor\nW1,..., W4 are weighting coefficients"}, {"title": "3.1.2. Action Space", "content": "For each aircraft i, the action space defines:\nAi = ti \u2208 [Ei, Li]\n(14)\nwhere ti represents the assigned landing time within the feasible time window."}, {"title": "3.1.3. Reward Function Design", "content": "The reward function incorporates multiple components to guide learning toward optimal scheduling:\nR(s, a) W1Rdelay + W2Rseparation + W3Rthroughput + W4Rsmoothness\n(15)\nwhere:\n\u2022 Rdelay penalizes deviations from target times using the tiered cost structure\n\u2022 Rseparation provides positive rewards for maintaining required separation\n\u2022 Rthroughput encourages high runway utilization\n\u2022 Rsmoothness penalizes rapid changes in landing intervals\nThe weights W\u2081, ..., w4 are tuned to balance these objectives, with values:\n[W1, W2, W3, W4] = [1.0, 2.0, 0.5, 0.3]\n(16)"}, {"title": "3.2. Main Algorithm", "content": "The overall learning procedure is outlined in Algorithm 1, which coordinates the interaction between the actor-critic network and the environment:"}, {"title": "3.3. Graph Construction and Priority Rules", "content": "Graph representation provides an intuitive and powerful way to model relationships between aircraft in the landing sequence. By representing each aircraft as a node and their scheduling dependencies as edges, we can leverage graph neural networks to learn complex patterns in aircraft sequencing. This graph-based approach naturally captures separation requirements and allows the model to reason about global scheduling constraints."}, {"title": "3.3.1. Graph Structure", "content": "For each state st, a fully connected directed graph G = (V, E) where:\n\u2022 Vertices V represent aircraft, with |V| = n for n aircraft\n\u2022 Edges E represent potential landing sequence dependencies\n\u2022 Node features matrix X \u2208 R|V|\u00d7d where d is feature dimension\n\u2022 Adjacency matrix A \u2208 R|V|\u00d7|V| representing landing sequence relationships"}, {"title": "3.3.2. Node Feature Construction", "content": "Each node i \u2208 V contains the following features:\nXi = [ti, ci, \u016bi, Ei, Li, pi, li]\n(17)\nwhere:\n\u2022: Normalized scheduled time \u2208 [0, 1]\n\u2022ci: One-hot encoded aircraft category\n\u2022\u016bi: Normalized urgency\n\u2022[Ei, Li]: Normalized time window\n\u2022pi: Priority score\n\u2022li: Normalized current landing time (if assigned)"}, {"title": "3.3.3. Priority Score Calculation", "content": "The priority calculation procedure is outlined in Algorithm 3:"}, {"title": "3.3.4. Edge Weight Assignment", "content": "For each edge (i, j) \u2208 E, a weight wij representing the feasibility of aircraft j following aircraft 2:\nwij f(sij, \u2206tij, Pi, Pj)\n(22)\nwhere:\n\u2022Sij: Required separation time\n\u2022Atij: Time difference between target times\n\u2022f(\u00b7): Weighting function combining separation and priority factors"}, {"title": "3.4. Graph Neural Network Architecture", "content": ""}, {"title": "3.4.1. Message Passing Layers", "content": "The graph neural network processes node features through message passing operations:\nm_i = \u2211_{j\u2208N(i)} MLP_\u03b8(h_i^l || h_j^l || e_{ij})\n(23)\nh_i^l = GRU(h_i^{l-1}, m_i^l)\n(24)\nwhere || denotes feature concatenation, eij represents edge features, and MLP\u0473 is a multi-layer perceptron with parameters 0. The GRU update mechanism helps maintain temporal dependencies. The attention mechanism employs scaled dot-product attention:\n\u03b1_{ij} = \\frac{exp(e_{ij} / \u221a{d_k})}{\u2211_{k\u2208N(i)} exp(e_{ik} / \u221a{d_k})}\n(25)\nThese operations are implemented in two successive layers:\nH1 = \u03c3(AXW1), H2 = \u03c3(AH\u00b9W2)\n(26)\nwhere is the ReLU activation function and W\u00b9, W2 are learnable weight matrices."}, {"title": "3.4.2. Graph Attention Mechanism", "content": "Approach proposes a multi-head attention mechanism:\n\u03b1_{ij}^k \\frac{exp(e_{ij}^k)}{\u2211_{l\u2208V_i} exp(e_{il}^k)}\n(27)\nwhere e is the attention coefficient for head k between nodes i and j. The graph neural network architecture enables message passing between aircraft nodes, allowing the model to learn implicit relationships between aircraft characteristics, separation requirements, and runway constraints. This learned representation captures complex scheduling patterns that would be difficult to express in traditional optimization formulations."}, {"title": "3.5. Actor-Critic Network", "content": "The actor-critic architecture combines the advantages of both policy-based and value-based learning. The actor network learns to propose landing times that satisfy operational constraints, while the critic network evaluates these decisions to guide policy improvement. This dual network structure helps balance exploration of new scheduling strategies with exploitation of known good solutions."}, {"title": "3.5.1. Actor Network", "content": "The actor network outputs landing time distribution parameters:\n[\u03bc, log \u03c3] = fe(Z)\n(28)\nLanding time prediction is computed as:\nti = Ei + \u03c3(\u03bc\u03b5)(Li - Ei)\n(29)"}, {"title": "3.5.2. Critic Network", "content": "State value estimation:\nV(s) = g$(Z)\n(31)\nThe architecture of both networks consists of fully connected layers with ReLU activations:\n\u2022 Actor: Input \u2192 FC(256) \u2192 ReLU \u2192 FC(128) \u2192 [\u03bc, log \u03c3]\n\u2022 Critic: Input \u2192 FC(256) \u2192 ReLU \u2192 FC(128) \u2192 V(s)"}, {"title": "3.6. Policy Learning and Optimization", "content": "The policy learning process involves iterative optimization of both actor and critic networks through carefully structured loss functions and gradient updates. The policy gradient is computed using the advantage function:"}, {"title": "A(s, a) = Q(s, a) \u2013 V\u2084(s)\n(32)", "content": "where Q(s, a) represents the state-action value and V\u2081(s) is the critic's value estimate.\nThe actor's loss function incorporates both the policy gradient and an entropy term to encourage exploration:\nLactor = -E[log \u03c0\u03c1(a|s)A(s, a)] \u2013 \u03bb\u0397(\u03c0\u03bf)\n(33)\nwhere X is the entropy coefficient (set to 0.02 in implementation) and H(\u03c0\u03b8) is the policy entropy.\nThe critic is trained to minimize the temporal difference error:\nLcritic = E[(rt + V\u00f8(St+1) \u2013 V\u00a2(st))2]\n(34)\nThe implementation uses a time-varying learning rate schedule:\nAt = &end + (Astart - end)e-t/\nwhere astart = 1e-4, aend = 1e-5, and 7 controls the decay rate based on training progress."}, {"title": "3.6.1. Optimization Process", "content": "The network parameters are updated using Adam optimizer with gradient clipping:\n0t+1 = 0\u03c4 - atclip(\u2207eLtotal, -C, C)\n(35)\n(36)\nwhere Ltotal = Lactor + Lcritic and c = 10.0 is the gradient clipping threshold. The learning rate at follows an exponential decay schedule to promote convergence while maintaining exploration capability in early training stages."}, {"title": "3.7. Training Procedure", "content": "The training process is designed to gradually improve scheduling performance while maintaining safety constraints. Through careful balancing of exploration and exploitation, the model learns to generate efficient schedules while respecting operational requirements. The time-varying exploration rate helps the model discover diverse scheduling strategies early in training while focusing on refinement in later stages."}, {"title": "3.7.1. Loss Functions", "content": "Actor and Critic losses are defined as:\nLactor = -E[log \u03c0\u03c1(a|s)A(s, a)] \u2013 \u03bb\u0397(\u03c0\u03bf)\n(37)\nLcritic = E[(R+yVp(s') \u2013 V\u2084(s))\u00b2]\n(38)\nwhere:\n\u2022 A(s, a) is the advantage function: A(s, a) = Q(s, a) \u2013 V\u2084(s)\n\u2022 \u0397(\u03c0\u03bf) is the policy entropy"}, {"title": "\u2022 X = 0.02 is the entropy coefficient", "content": "\u2022 y = 0.99 is the discount factor"}, {"title": "3.8. Adaptive Exploration Strategy", "content": "The framework employs a sophisticated exploration mechanism that combines e-greedy explo-ration with parameter noise. The exploration rate et follows a time-varying schedule:\nEt = Eend + (Estart - Eend)e-t/\n(39)\nwhere Estart = 0.9 and Eend 0.3. Additionally, Gaussian noise is added to the actor's parameters during exploration:\nOnoisy = 0 + \u03c3\u03c4\u039d (0, \u0399)\n(40)\nThe noise scale ot is adaptively adjusted based on the desired level of action perturbation:\n\u03c3\u03c4 = Ot-1.Qsign(dtarget-dt)\n(41)\nwhere dt is the mean distance between perturbed and original actions, dtarget is the target distance, and a is the adaptation rate."}, {"title": "3.9. Safety-Aware Sequential Assignment", "content": "While deep learning provides powerful optimization capabilities, ensuring strict adherence to safety constraints is paramount in aviation applications. Proposed solution's safety-aware assignment process acts as a bridge between learned policies and operational requirements, guaranteeing that all proposed schedules maintain mandatory separation times and time window constraints. This hybrid approach combines the flexibility of learning-based methods with the reliability of rule-based systems."}, {"title": "3.9.1. Assignment Algorithm", "content": "The safety-aware sequential assignment process ensures constraint satisfaction:"}, {"title": "3.9.2. Separation Validation", "content": "The separation validation ensures safety constraints:"}, {"title": "The separation validation process includes a buffer time b for enhanced safety:", "content": "Atij \u2265 Sij + b, \u2200i, j\u2208 A, i \u2260j\n(42)\nWhen violations occur, the algorithm iteratively adjusts within [Ei, Li] and attempts 7 times per aircraft (this number can be modified to satisfy computational efficiency) to find a suitable arrival time. In given attempts, if there is no feasible arrival time satisfying all the constraints, the model backtracks to the last feasible state. For enhanced security and weather-affected airports, the proposed solution can include buffer time as shown in the above equation, e.g., where b is typically set to 30 seconds in implementation (on top of the separation time). These changes can be instantaneous. This methodology combines the representation power of graph neural networks with"}, {"title": "4. Experimental Results and Analysis", "content": "The proposed solution is tested on the Paris-Orly Airport dataset introduced by [11]. The dataset encompasses four distinct time periods representing different traffic patterns throughout the day: morning peak (07:00-11:00), mid-day (11:00-15:00), afternoon peak (15:00-19:00), and evening (19:00-23:00). This diversity in problem instances allows to evaluate this approach under varying operational conditions and traffic intensities. All experiments were performed on a single machine (M3 max processor). The implementation was done in Python."}, {"title": "4.1. Training Convergence Analysis", "content": "The training process evaluates the model across different scenario sizes, with systematic progres-sion from smaller to larger aircraft sets. Scenario sizes were configured beginning with 5 aircraft first, and then progressing with 10 aircraft data size. Third and fourth scenarios had 20, and 30 aircraft, respectively. The training process systematically evaluates the model across increasing scenario complexities, progressing from 5 aircraft to 30 aircraft, with 4 meta-iterations (scenarios) and 10,000 episodes per scenario. At each stage, the learning process begins by initializing the actor-critic networks and environment with the corresponding scenario data. The exploration strategy employs a time-varying epsilon parameter, starting at 0.9 and decaying to 0.3, which controls the balance between exploring new solutions and exploiting learned policies. During each episode, the environment is reset and the network processes the current state through a graph-based representation capturing aircraft relationships and constraints. For action selection, the model either explores random feasible landing times or exploits the current policy based on the epsilon value. A safety-aware landing assignment mechanism validates all scheduling decisions against operational constraints, including separation requirements and time windows. The network parameters are updated using the Adam optimizer with a learning rate of 1e-4 and gradient clipping at 10.0 to ensure stable training. The model learns a complex scheduling pattern through progressive training and enforcing safety constraints."}, {"title": "4.2. Comparative Analysis", "content": "To establish the effectiveness of the proposed approach, the results are compared with well-known methods from the industry and literature. These include an exact CPLEX implementation of the MIP formulation, a Tabu search metaheuristics approach [20], and the industry standard First-Come-First-Served (FCFS). Given the computational complexities and time requirements of the MIP implementation, the method uses various approaches of MIP including constraint positioning shifting (CPS 2 and 3) and relaxations to find feasible solutions. To create a contextual evaluation metric apart from computational time, cost, and delay metrics, the paper also uses runway throughput analysis. Runway throughput resembles the [11] approach of finding the aircraft per hour metric to assess the runway efficiency. Details are provided below."}, {"title": "4.2.1. Runway Throughput Analysis", "content": "The runway throughput (RT), a primary efficiency metric, is calculated as:"}, {"title": "RT = max{N(t, t +3600)}\nteT\n(43)", "content": "where N(t1, t2) represents the number of aircraft landing between times t\u2081 and t2. This metric captures the maximum number of aircraft that can be safely accommodated within any one-hour window. The total operational cost (TC) is computed using a tiered delay structure:\nTC = \u2211_{i=1}^{n}(C_{300, i}\u03b4_{300,i} + C_{900,i}\u03b4_{900,\u0456} + C_{1800,i}\u03b4_{1800,i} + C_{3600,i}\u03b4_{3600,i})\n(44)\nwhere cu,i represents the cost coefficient for time tier u for aircraft i, and du,i represents the delay falling within that tier.\nThe proposed approach achieves close to optimal throughput, representing considerable im-provements over FCFS. At the same time, the method is able to provide solutions in significantly less time compared to MIP and Tabu search solutions."}, {"title": "5. Conclusion and Industrial Implications", "content": "This research demonstrates that deep reinforcement learning can be effectively deployed to address the complex challenges of the ALP. The proposed graph-enhanced framework achieves superior performance on large-scale instances while maintaining computational efficiency suitable for real-time applications. Experimental results reveal that the framework consistently generates near-optimal solutions within seconds, a significant improvement over traditional operations research methods that often require hours of computations. The learning capabilities of the agentic framework enable robust performance in varying traffic patterns and operational scenarios, while maintaining required constraints.\nThe practical implications of this research for airport operations are substantial. The framework's ability to deal with dynamic problems in real-time makes it particularly valuable for industrial deployment. The experimental results demonstrate reduction in operational costs through optimized arrivals, alongside a significant improvement in runway utilization compared to current FCFS approaches. The delay distribution analysis reveals that 95% of aircraft land within \u00b15 minutes of their target times, significantly outperforming the baseline methods. This improvement is attributed to the time-varying exploration strategy and the effective constraint handling mechanisms of the framework.\nThe framework's ability to generate solutions in under 1 second for most practical instances makes it particularly suitable for dynamic rescheduling scenarios. This real-time capability, combined with the model's generalizability across different airport configurations without retraining, addresses a critical need in modern air traffic management. The impact extends beyond individual airports, as improved scheduling efficiency can help address growing air traffic demands without requiring extensive infrastructure expansion. That could translate to considerable annual cost savings for medium-sized airports and significantly larger cost savings for large-sized airports. In addition, improved runway utilization enables the handling of additional traffic without infrastructure expansion.\nSeveral promising avenues for future research emerge from this work. Integration with weather prediction models could enhance the framework's robustness under varying environmental conditions. Extension to multi-airport"}]}