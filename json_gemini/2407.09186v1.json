{"title": "Variational Inference via Smoothed Particle Hydrodynamics", "authors": ["Yongchao Huang"], "abstract": "A new variational inference method, SPH-ParVI, based on smoothed particle hydrodynamics (SPH), is proposed for sampling partially known densities (e.g. up to a constant) or sampling using gradients. SPH-ParVI simulates the flow of a fluid under external effects driven by the target density; transient or steady state of the fluid approximates the target density. The continuum fluid is modelled as an interacting particle system (IPS) via SPH, where each particle carries smoothed properties, interacts and evolves as per the Navier-Stokes equations. This mesh-free, Lagrangian simulation method offers fast, flexible, scalable and deterministic sampling and inference for a class of probabilistic models such as those encountered in Bayesian inference and generative modelling.", "sections": [{"title": "1 Introduction", "content": "Particle-based simulations are a type of discretization methods which are used in modelling fluids, solids and their interactions. They iteratively track particle motions via Navier-Stokes approximations, and offer approximate, interactive simulations with fast speed, which prevails in computer graphics, computer games and interactive applications. Smoothed-particle hydrodynamics (SPH), a computational method which employs particles to simulate fluid flows, falls under this category. It emerges in recent years as a popular numerical technique for simulating a variety of problems arising in fluid dynamics (e.g. modeling incompressible and compressible flows), gas and fire dynamics, astrophysics (e.g. simulating star formation and galaxy collisions), and engineering (e.g. simulating fluid-structure interactions, and modeling breaking waves and dam breaks). It divides a fluid into a set of discrete, moving particles; each particle carries physical properties such as mass, position, velocity and density. These properties are smoothed by a kernel function, which approximately restores the continuum fluid.\nSPH is a Lagrangian scheme for computing smooth field variables such as density, pressure, velocity and forces. SPH simulation starts by distributing particles across the fluid domain. Each particle is assigned initial properties based on the initial conditions (ICs) of the problem. At a given point, to estimate field quantities, SPH uses properties of nearby particles, weighted by a smoothing kernel which measures their influences. Particles flow under forces (accelerations) induced by, e.g. pressure gradient, viscosity or external forces such as gravity or other body forces, following Newton mechanics. Under certain conditions, e.g. presence of external and internal forces such as viscous friction, they may reach an equilibrium state. The computational cost of SPH, as well as the accuracy, primarily depends on the number of particles used.\nSPH therefore provides a principled framework for modelling interacting particle systems (IPS) as Newtonian fluids, which motivates its application for probability density sampling and inference: if an external pressure or force filed is applied, particles will move to distribute as per the geometry of this external field. Inspired by this, we apply the SPH principles and devise a particle-based variational inference method, SPH-ParVI, which employs a target distribution or its gradient as external pressure/force field and produces particle distribution conforming to the target. These samples, as represented by a transient or converged particle configuration, can then used for tasks such as inferring statistics of the target quantity and making predictions with uncertainties."}, {"title": "2 Related work", "content": "SPH SPH falls into the mesh-free, Lagrangian methods which are developed in late 1970s and 1980s. Gingold and Monaghan developed the SPH method, which is applicable to a space of an arbitrary number of dimensions, and applied it to a variety of polytropic stellar models. Monaghan extended SPH to deal with free surface incompressible flows. Stam and Fiume first applied SPH to simulate gas and fire phenomena. Desbrun and Cani developed an elastic SPH approach for deformable solids. M\u00fcller et al. applied SPH to simulate fluids with free surfaces, Keiser et al. applied SPH for animating both solids and fluids. Some variants of SPH, e.g. the corrective Smoothed-Particle Method (CSPM) and modified CSPM method, have been proposed, particularly to address the issue of particle inconsistency which impacts SPH accuracy. A kernel gradient free (KGF) SPH method was proposed by Huang et al. A comprehensive introduction of the SPH method can be found in; insightful summaries of its applications can be found in e.g.\nSampling methods Sampling from a prescribed distribution, either fully or partially known, is not easy. If we know the full pdf, many statistical sampling methods can be used to generate (quasi) samples. For example, inverse transform sampling"}, {"title": "3 SPH-based sampling: methodology", "content": "The SPH fluid model In SPH, particles interpolate a continuous function $f(r)$, where $r$ is the position, via a smoothing kernel:\n\\[f(r) = \\sum_{j=1}^M \\frac{m_j}{P_j} f(r)K(|r - r_j|, h)\\]\nwhere $M$ is the total number of particles used, $m_j$ and $p_j$ are the mass and density of the particle $j$, respectively. The smoothing kernel $K(r_{ij}, h)$, as shown in Fig.1, accepts the distance $r_{ij} = |r_i-r_j|$ as input and computes the weight of influence of the contributing particle $j$ on particle $i$, $h$ is a smoothing length parameter which roughly defines the radius of influence, see Appendix.D for some examples. The function $f(r)$ being smoothed can be physical quantities such as density, pressure, force, etc. The SPH formulation in cc. Eq.19 will be used to approximate these quantities in the Navier-Stokes equations governing fluid motion."}, {"title": "SPH formulation of the Navier-Stokes equations", "content": "Here we present the SPH description of the interactive particle system for weakly compressible fluids. More details, as well as the SPH formulation for incompressible fluids, can be found in Appendix.C. The Navier-Stokes equations for weakly compressible fluids can be expressed in Lagrangian form as:\n\\[\\frac{d\\rho}{dt} = -\\rho \\cdot v\\]\n\\[\\frac{dv}{dt} = -\\frac{1}{\\rho} \\nabla P + f^{vis} + f^{ext}\\]\nwhere $v$ is the velocity, $p$ the density, $P$ the pressure, $f^{vis}$ the viscous force, and $f^{ext}$ external body forces (e.g. gravitational acceleration ). $\u2207$ denotes derivative, $V$ denotes divergence - both with respect to the coordinates (i.e. spatial derivatives).\nThe first equation in cc. Eq.24 is termed continuity equation which represents conversation of mass, the second is the momentum equation which describes the motion of a fluid. Intuition behind the continuity equation is the continuous mass flow (a strong, local representation of the conservation law); the intuition for the second being, changes in velocity (i.e. the acceleration) of a fluid element is induced by pressure gradient, internal friction (i.e. the resistance force induced by viscosity), and body forces. It essentially echoes the Newton's second law.\ncc.Eq.24 give the governing equations for a continuum fluid; with many benefits, here we use the SPH method which divides the fluid into particles, and applies the SPH smoothing principle to spatially smooth the physical quantities such as density $p$, pressure $P$, and forces $f^{vis}$ and $f^{ext}$ at any transient time:"}, {"title": "SPH for sampling", "content": "The above SPH procedure simulates the fluid flow with an interacting particle system (IPS) . This idea can be adapted to produce (quasi) samples from a target density: the particles can be conceived as samples at a transient or steady state achieved under external conditions (e.g. applied external pressure or force fields, boundary conditions, etc). To realise this, we can apply a target time-invariant, external pressure (scalar) or force (vector) field in the space, i.e. adding $P^{ext} (r) \\propto 1/p(r)$ or $f^{ext}(r) \\propto \\nabla p(r)$ to the momentum equation , and use SPH dynamics to evolve a set of particles toward a transient or equilibrium distribution which approximates the desired, target distribution $p(r)$. We expect that, the clustering of particles, as measured by their densities, would distribute proportional to the external field applied. Physically, starting from any initial configuration, particles, if dominantly driven by external pressure or forces, shall move towards the high-probability regions of the target distribution by design. As such, we provide the two formulations of the proposed SPH-ParVI method in the following.\nRepresenting target density as external pressure field The first design is applying an time-invariant, external scalar-valued pressure field $P^{ext}(r) := 1/p(r)$ or $P^{ext} (r) := - log p(r)$, where $p(r)$ is our target density (known up to a constant ), to the fluid particle system, and set $f^{ext} = 0$ (or one can conveniently leave $f^{ext}=g$). We therefore re-write the momentum equation as:\n\\[\\frac{dv_i}{dt} = - \\sum_{j=1}^M m_j \\left( \\frac{P_i}{\\rho_i^2} + \\frac{P_j}{\\rho_j^2} \\right) \\nabla K_{ij} + f^{vis}\\]\nwhere the overall point pressure (scalar-valued, as a function of coordinates) acting at particle $i$ becomes $P_i = P^{int} + P^{ext}$, which is the sum of the internal point pressure $P^{int} = c_0\\rho_0 [(\\frac{\\rho_i}{\\rho_0}) - 1]$ and external point pressure $P^{ext} = 1/p(r_i)$ or $- log p(r_i)$.\nWe are thus simulating a viscous fluid flowing in an unbounded space with free boundary condition, driven dominantly by an external pressure field equaling the the reciprocal of the target distribution (possibly partially known). No other external force presents. Equating the pressure to the inverse (or negative) density is based on the intuition that, small pressure regions shall attract more particles. This design is particularly useful for sampling from a partially known density such as intractable Bayesian posterior. Note that, the internal pressure, resulted from cc. Eq.25, serves as a repulsive force which is necessary when modelling IPS (e.g. for maintaining particle diversity and avoiding mode collapse); it also results in higher pressure in higher particle density regions, and yields bigger repulsive force, which may be undesirable for inferring the target.\nRepresenting gradient of target density as external force field The second design is to apply an time-invariant, external vector-valued body force field $f^{ext} := \\nabla r p(r)|_{r=r_i}$ or $f^{ext} := \\nabla r logp(r)|_{r=r_i}$ acting on each particle , which revises the momentum equation as:"}, {"title": "SPH for sampling", "content": "Here we present the SPH description of the interactive particle system for weakly compressible fluids. More details, as well as the SPH formulation for incompressible fluids, can be found in Appendix.C. The Navier-Stokes equations for weakly compressible fluids can be expressed in Lagrangian form as:\n\\[\\frac{d\\rho}{dt} = -\\rho \\cdot v\\]\n\\[\\frac{dv}{dt} = -\\frac{1}{\\rho} \\nabla P + f^{vis} + f^{ext}\\]\nwhere $v$ is the velocity, $p$ the density, $P$ the pressure, $f^{vis}$ the viscous force, and $f^{ext}$ external body forces (e.g. gravitational acceleration ). $\u2207$ denotes derivative, $V$ denotes divergence - both with respect to the coordinates (i.e. spatial derivatives).\nThe first equation in cc. Eq.24 is termed continuity equation which represents conversation of mass, the second is the momentum equation which describes the motion of a fluid. Intuition behind the continuity equation is the continuous mass flow (a strong, local representation of the conservation law); the intuition for the second being, changes in velocity (i.e. the acceleration) of a fluid element is induced by pressure gradient, internal friction (i.e. the resistance force induced by viscosity), and body forces. It essentially echoes the Newton's second law.\ncc.Eq.24 give the governing equations for a continuum fluid; with many benefits, here we use the SPH method which divides the fluid into particles, and applies the SPH smoothing principle to spatially smooth the physical quantities such as density $p$, pressure $P$, and forces $f^{vis}$ and $f^{ext}$ at any transient time:"}, {"title": "Practical considerations", "content": "Viscous force Viscosity is a measure of the fluid's resistance to deformation or flow. In simpler terms, it quantifies how 'sticky' a fluid is. Higher viscosity means the fluid flows less easily. Viscosity is essential for simulating realistic fluid behavior, such as smoothing out velocity gradients and preventing excessive turbulence. Viscous force represents fluid's internal friction which results in resistance of relative motion between particles and slows down particles (so that the simulation can evolve to a steady state). Artificial viscosity can also be introduced to improve the numerical stability and to allow for shock phenomena.\nWhen a solid or fluid is subject to shear force, the shear stress Tis proportional to the spatial gradient of velocity:\n\\[\\tau \\propto \\frac{dv}{dr}\\]\ndv\nthe ratio is the dynamic viscosity or absolute viscosity \u00b5, i.e. \u03c4 = \u00b5dv. \u00b5 negligibly depends on pressure, but may have different formulations for liquids it decreases with temperature, for gases it increases with temperature. For fluids, the kinematic viscosity or momentum diffusivity is often used:\n\\[\\nu = \\frac{\\mu}{\\rho}\\]"}, {"title": "Kinematic viscosity is a measure of a fluid's resistance to flow and deformation due to internal friction. Again, for gases it increases with temperature, for liquids it decreases with temperature. The viscous force f", "content": "uis can be calculated as:\n\\[f^{vis} = v\\nabla^2 v + \\frac{1}{3} \\nabla(\\nabla \\cdot v) = \\frac{\\mu}{\\rho} \\nabla^2 v + \\nabla(\\nabla \\cdot v)\\]\nwhere \u22072v is the Laplacian of the velocity vector. The term $f^{vis} = v\\nabla^2 v$ represents the diffusion of momentum due to viscosity, which smooths out velocity gradients within the fluid. It is essential for modeling the dissipative effects of viscosity in fluid flow simulations, ensuring that the simulation accounts for the internal friction that resists the motion of fluid layers relative to each other. The second term $\u2207v$ is the divergence of the velocity field which describes the rate at which the fluid is expanding or contracting. There are also linear form of the viscous force, see e.g. Eq.6, assuming the viscosity coefficient v doesn't change with temperature. Also, unless for strongly compressible fluids in which the bulk viscosity term\u2207\u2207v) is needed, one can safely ignore the last term\u25bd(\u2207\u00b7v), which gives fuis = v\u22072v = \u00a32v. Assuming constant v, and apply the SPH smoothing principle, which gives [22]:\n\\[f^{vis} = v\\nabla^2 v(r_i) = v \\sum_{j=1}^M m_i \\frac{\u017b}{v_j}\\nabla^2 K(|r_i \u2013 r_j|, h)\\]"}, {"title": "or its symmetric variant", "content": "\n\\[f^{vis} = v \\sum_{j=1}^M \\frac{m_j}{P_j}(v_j - v_i)\\nabla^2 K(|r_i \u2013 r_j|, h)\\]\nAlternatively, [51, 3] used the following linear viscous force:\n\\[f^{vis} = \\left\\{\n\\begin{array}{ll}\n\\sum_j m \\frac{m_ij}{\\rho_i+\\rho_j}(v_i-v_j) \\frac{(v_i-v_j)^T.(r_i-r_j)}{|r_i-r_j|^2+\\epsilon.h^2} K(r_i - r_j, h) & \\text{if } v_{rij} < 0 \\\\\n0 & \\text{if } v_{rij} \\ge 0\n\\end{array}\n\\right.\\]\nwhere $v_{ij} = v_i - v_j$, with $v_{ij}r_{ij} > 0$ being equivalent to V.v > 0. The viscous coefficient nij is:\n\\[N_{ij} = \\frac{2ahc_s}{\\rho_i + \\rho_j}\\]\nin which the viscosity constant $a$ is between 0.08 and 0.5 as used in [3]. The term $eh^2$ is introduced to avoid singularities for $r_{ij} = 0$, with $e = 0.01$. cs denotes the speed of sound in the fluid. To be consistent with [39] and [3], the author suggests cs = Co where co is the reference speed of sound in the fluid in Eq.25.\nSurface tension Surface tension plays an important role in realistic fluid anima-tions [3], particularly for large curvature geometries (which mapping to our inference problem refers to complex density shape). The main issue is due to the fact that, molecules in a fluid experience intramolecular attraction forces, and molecules in these regions have too few neighbours. For internal particles, the attraction forces are bal-anced, resulting no net acceleration; for particles on the edge, it is unbalanced and non-negligible. There are several surface tension models to handle surface tension in SPH [52, 3]. For example, one of these, which requires calculating the second derivative of a color field, estimates the surface tension force as [22]:"}, {"title": "Regularisation", "content": "To prevent mode collapse, i.e. local particles collapsing into a single mode point, and encourage particle diversity, one can add a density-based reg-ularization (repulsive) force to the RHS of the momentum equation:\n\\[f^{reg} = \\sum_{j=1}^M m_j \\frac{\\nabla K(r_i - r_j, h)}{\\rho_i + \\epsilon}\\]\nwhere e is a small number to prevent division by zero.\nSmoothing length The smoothing length h balances local and global smoothness. The power of SPH lies in its adaptive property, i.e. the resolution of a SPH simulation can be adjusted based on local conditions such as density. We can assign time-variant, particle-bespoke (location adaptive) smoothing lengths, allowing particles to adapt itself based on local conditions: (1) Time-varying annealing scheme. In a preliminary experiments, we find that if a constant h is used, however, the overall particle shape expands and contracts cyclically over time. This oscillating behaviour, which is not computationally efficient, can be alleviated by using a time-varying h. (2) Spatially-varying h. In a dense region where particles are close to each other, h can be made small, which gives high spatial resolution; in low-density regions where particles are far apart, h can be increased so that particles won't get trapped. This also optimises the computational efforts.\nStep size of time Choosing an appropriate time step is critical for numerical stability and convergence [3]. The following step size, derived based on the Courant-Friedrichs-Lewy(CFL) condition, is suggested [3]:\n\\[\\Delta t \\leq min \\left(0.25\\sqrt{\\frac{h}{|f_{ext}|}}, \\frac{0.4.h}{c_s(1+0.6\\alpha)}\\right)\\]\nwhere fin is the minimum external forces among all particles, h the smoothing length, and a the viscosity constant (0.08 ~ 0.5 as used in [3]). cs denotes the speed of sound in the fluid.\nBoundary conditions For the inference problem, we simulate particle movement in a free-boundary space, no boundary conditions (BCs) are considered to constrain particle movements. Realistically, boundaries exert a force on particles colliding with a boundary; appropriate boundary conditions, if desired by the inference problem (e.g. inference over a manifold), can be inserted to ensure that the particles behave correctly at the edges of the simulation domain. These might involve reflecting particles at solid boundaries or allowing them to interact with boundaries representing inflow/outflow conditions [51, 3]. BCs, as well as initial conditions (ICs), can be accounted for by e.g. applying a constant or time-varying external pressure or force field."}, {"title": "Operational state", "content": "Due to the oscillating behaviour, the optimal state, which is ex-pected to match the target distribution, doesn't necessarily need to be the steady state. We need some notion of dispersion measure which helps define the optimal configuration, ideally we would like particles to cluster around multiple modes, and the optimal configuration may correspond to the step at which the within-mode dis-tances are small while between-mode distances are large (which is similar to optimal clustering criteria). In experiments, one can track the average density (as a simple measure of particle dispersion), and consider the particle configuration at maximum average density to give optimal approximation.\nComputational complexity As noted in Algo.1 (also Algo.2), the computa-tional complexity per iteration is O(M\u00b2) where M is the number of particles used, and total effort over T steps is O(M\u00b2T). The complexity increases linearly with extra force terms added (e.g. regularisation). As pairwise distances are used in calculat-ing the kernel and its gradient values, they can be cached. For example, in each step, we can pre-compute pairwise distances and the gradient of the kernel once, and then reuse these values for smoothing densities, pressures, and forces. These efforts, as described in the practical implementation section following the algorithm, avoid redundant calculations and improve efficiency."}, {"title": "5 Discussions", "content": "As accuracy and efficiency of the SPH-ParVI method relies on the SPH technique, here we touch some of the topics related to SPH and beyond.\nAdvantages of SPH-ParVI We identify following advantages of using SPH for sampling: (1) Advantages of SPH. This mesh-free particle method enjoys some nice properties of both continuum and fragmentation. Due to its Lagrangian nature, SPH has many advantages over traditional mesh-dependent Eulerian methods [72]. For example, mesh-based methods may suffer from mesh distortions which affect the numerical accuracy when simulating large material deformations. Also, advection is performed exactly and therefore material history information can be tracked free of numerical diffusion. Further, the mesh-free characteristic significantly simplifies model implementation and its parallelization. (2) Physics-based, flexible and expres-sive interaction modelling. SPH-ParVI models an interacting particle system (IPS) based on fluid mechanics that preserve mass, momentum and energy. Different types of interactions can be accounted by flexibly introducing corresponding force/pressure terms. (3) Computationally efficient. SPH works independently of any grid (e.g. finite-difference methods), the Lagrangian formulation is more efficient than mesh-based, Eulerian methods interactions and derivatives are all evaluated in a coordi-nate system attached to a moving fluid element (i.e. the particle) [49]. Efficiency is also improved via evaluating nearby physical quantities through the smoothing ker-nel: unlike finite element method which solves systems of equations, SPH computes continuum physics (e.g. density, pressure) from weighted contributions of neighbour-ing particles. The kernel weighted contrition from each particle saves computational effort by excluding the relatively minor contributions from distant particles. (4) De-terministic. SPH-ParVI employs deterministic physical laws to generate samples, the results are trackable and reproducible. (5) Flexible and adaptive. It is flex-ible to devise location and time dependent resolution in particle methods. SPH's particle-centric approach ensures that computational resources are concentrated in re-gions where the fluid is present: it automatically adapts the resolution based on the particle distribution, providing higher resolution in regions with more particles (e.g. regions of higher density). One can also design an adaptive (e.g. annealing) smoothing length h to improve sampling quality. Besides, the two formulations of SPH-ParVI provides the flexibility for sampling from partially known densities or from gradients. (6) Handling complex geometries. Mesh-free ParVI methods, e.g. SVGD [43, 29], can handle complex (e.g. large curvature, multi-modal) geometries; for physics-based ParVI methods such as EParVI [30] and SPH-ParVI, this can be enhanced by intro-ducing boundary conditions. (7) Scalable. SPH method can easily be extended to deal with a large variety of complex physical models [49]. Unlike mesh-based, Eulerian methods (e.g. EParVI [30]), this Lagrangian method suffers less from curse of dimen-sionality. The flexibility, computability, speed and expressiveness enable SPH-ParVI scalable to complex geometries and large data sets.\nDisadvantages of SPH-ParVI We identify following disadvantages of using SPH for sampling: (1) Disadvantages of SPH . The vanilla SPH method can suffer from slow numerical convergence due to loss of particle consistency [72]. Mathematically, consistency refers to how well the discretized equations approximate the exact differential equations. Particle inconsistency [72] arises due to two types of approximations (discretizations) in standard SPH formulation: kernel approxima-tion and particle approximation. Corrective strategies and improved SPH schemes [38, 44, 5, 42, 41, 82, 16, 15, 65] to restore particle consistency, e.g. the corrective smoothed particle method (CSPM) [8, 7], have been proposed. Also, setting boundary conditions (BCs) in SPH is more difficult than grid-based methods, as near-boundary particles change over time [69]. Further, inaccuracies can be induced due to e.g. loss of symmetry and constant density [22]. (2) Tuing hyper-parameters. Key hyper-parameters used in SPH-ParVI are the smoothing length h, the target amplification constant a, and the discretization time step At. h balances local and global smooth-ness, while a and At can affect convergence speed and accuracy. Both have impact on the evolution behaviour of the IPS: in preliminary experiments, we find that group of particles can exhibit contraction and expansion and oscillating behaviours accord-ing to different values of h, a and At. Therefore, one may need a smart design (e.g. an adaptive annealing scheme) of the hyper-parameters when inferring complex, e.g. multi-modal, densities to achieve good performance.\nMesh-based vs meshless There are two approaches for specifying a flow field: Lagrangian and Eulerian. Both approaches have been long used in computer graphics [3]. Mesh-based approaches such as mass-spring systems, finite element, finite differ-ence, finite volume methods are most widespread. Mesh-free methods, particularly particle systems, are increasingly popular for modelling elasto-plastic materials and fluids [34]."}, {"title": "Eulerian specification", "content": "focuses on specific locations in the space through which the fluid flows as time passes. Eulerian simulations use a fixed mesh and computations are performed on a stationary grid - each cell must be computed regardless of it contains significant fluid properties or not, and the cost is therefore linked to the total number of cells. Eulerian approaches can handle inflow and outflow easily by setting boundary conditions [3].\nThe Lagrangian specification looks at fluid motion by following an individual fluid parcel as it moves through space and time. Lagrangian simulations are in general mesh-free and focus on simulation nodes that may move following the velocity field. Lagrangian approaches are more flexible for time-varying simulations and are easy to implement. They are more efficient than grid-based simulation methods, in terms of memory and computation time [3]. Also, mesh-free methods can handle topological changes (e.g. splashes [59]) for fluid-like materials, without the need of re-meshing. However, mesh-free methods require the definition of an implicit or explicit surface, and fluid surfaces are smooth due to surface tension. Also, Lagrangian approaches generally require search for neighbours.\nSPH is a particle-based, mesh-free Lagrangian approach. In SPH, particles cluster in regions of high fluid density, and yield high resolution in these regions; while in low density regions, the distribution of particles is more sparse. It allocates more particles to focus on areas of interest (i.e. where the fluid is denser), while the resolution of grid-based methods is uniform across the entire grid. Further, it is straightforward for SPH to calculate density-related metrics, as each particle directly represents a portion of the fluid mass and its density; grid-based approaches, however, may require additional efforts, e.g. interpolation, to estimate the density within a cell, which is less efficient and accurate, especially in regions with low fluid content.\nCompressible vs incompressible fluids Some substances such as gas and soft materials (e.g. elastomers, biological tissues) are compressible or partially compress-ible. For example, the volume of gas can change under pressure due to the usually large empty space between gas particles; liquids are generally incompressible as their molecular structure is compact. Implausible SPH simulations due to compressibility can be resulted [34, 6, 3]. Enforcing incompressibility for particle methods is a chal-lenging problem [3]; it can be achieved, at the cost of solving the Poisson equation, by projection approaches [61] which are based on pressure correction.\nThe Navier-Stokes equations for an incompressible fluid (e.g. water) require the density to be constant, which for SPH maintaining a constant density is difficult [22]. The non-constant density makes the SPH method less accurate in modelling incom-pressible fluids. While SPH provides speedy and realistic-looking fluid simulation, the density problem may block it from scenarios which require precision or accuracy [22]. This, however, can be compensated by using a strong density restoring force (i.e. pressure) [22] or using an adaptive smoothing length h to enforce constant density [3]. Alternatively, weakly compressible formulation with very low density fluctuations, as used in this context, has been developed [3] based on the Tait equation.\nInference by physical simulation This SPH-based inference method falls into a class of physics-inspired, approximate inference methods which use physical process to generate samples, e.g. Hamiltonian Monte Carlo (HMC), Langevin dynamics [66], electrostatics-based ParVI [30], etc. This opens a new door for variational inference (VI): parameters are traced though a principled physical simulation whose intermedi"}, {"title": "Convergence and potentially", "content": "ate or terminal state gives the target distribution. It is different from simulation-based inference (SBI) in that, inference by simulation (IBS) performs physical simulations over the inference parameters, while SBI (e.g. ABC) performs statistical simulations over a quantity given the parameters.\nError sources The are two types of approximation errors in SPH [72]: kernel approximation error and particle (discretization) approximation error. The former is independent of particle distribution and replies on the smoothing length h; the later originates from the discretization procedure and is a function of the number of neighbours within the kernel support which depends on the actual distribution of particles. [84] suggests that using small h and large number of neighbors [71, 18, 62] at the same time can reduce the overall error, improve SPH accuracy and convergence, and achieve full particle consistency in the limit [64], at the cost of increasing computational burden.\n6 Conclusion and future work\nConclusion This paper presents the theoretical framework of a new physics-based sampling and variational inference method, SPH-ParVI. This method formulates a sampling problem as a physical simulation process which configures a fluid from an initial shape (prior distribution) to a geometry that approximates the target distribu-tion. The fluid is discretized as an interacting particle system (IPS) via the powerful SPH method: particles carry interactive, smoothed properties and their movements are dominantly driven by external effects. Two formulations of the SPH-ParVI method are proposed: incorporating the target density (if density is partially known) or gradi-ent (if only gradient information are available) into the SPH simulation as an external pressure or force field. This modified SPH method, with governing physics inheriting the Navier-Stokes equations, provides fast, flexible, scalable and deterministic sam-pling and inference for complex (e.g. multi-modal) and high-dimensional densities.\nFuture work Rather than re-inventing the physics, this preliminary work focuses on building a framework for applying the SPH method to the statistical regime; experi-mental validations are to be included in a future version. Convergence and potentially uniqueness of the steady state geometry after introducing external effects demand rigorous mathematical treatment. Approximation errors, e.g. hypothetical and nu-merical errors resulted from assumptions (e.g. linear viscosity) and discretization, require formal analysis. Constrained inference, e.g. inference on a manifold, can be realised by imposing boundary conditions. Probabilistic move can be inserted as an Metropolis-Hastings step. Other SPH variants can be explored. Efficiency may be improved by using Koopman operator for approximating the dynamics."}, {"title": "A Mathematical notations", "content": "For clarity, we present some of the (common) mathematical notations used in this context.\nGradient Gradient is a collection of derivatives along each coordinate. For a real-valued function f(x, y, z) on R\u00b3, the gradient \u2207 f(x, y, z) is a vector-valued function on R\u00b3:\n\\[\u2207f(x, y, z) = \\left(\\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y}, \\frac{\\partial f}{\\partial z}\\right) = \\frac{\\partial f}{\\partial x} i + \\frac{\\partial f}{\\partial y} j + \\frac{\\partial f}{\\partial z} k\\]\nDivergence The divergence divf is the dot product of f with \u2207 (the gradient operator can be regarded as a vector):\n\\[divf = \\left(\\frac{\\partial}{\\partial x}i + \\frac{\\partial}{\\partial y}j + \\frac{\\partial}{\\partial z}k\\right) \\cdot [f_1(x, y, z)i + f_2(x, y, z)j + f_3(x, y, z)k]\\]\n\\[= \\left(\\frac{\\partial}{\\partial x}\\right)(f_1) + \\left(\\frac{\\partial}{\\partial y}\\right)(f_2) + \\left(\\frac{\\partial}{\\partial z}\\right)(f_3) = \\frac{\\partial f_1}{\\partial x} + \\frac{\\partial f_2}{\\partial y} + \\frac{\\partial f_3}{\\partial z}\\]\nOften, it is convenient to write the divergence div f as V. f.\nLaplacian For a real-valued function f(x, y, z), the Laplacian of f, denoted by Af, is:\n\\[\\triangle f(x, y, z) = \\nabla \\cdot \\nabla f = \\frac{\\partial^2 f}{\\partial x^2} + \\frac{\\partial^2 f}{\\partial y^2} + \\frac{\\partial^2 f}{\\partial z^2}\\]\nOften, instead of using Af, the notation \u22072f is used for the Laplacian, with the convention \u22072 = V. V.\nIn this context, derivative(s) in \u2207, V. and \u22072 all refer to spatial derivative(s), i.e. w.r.t the coordinates. Kij, for example, is an abbreviation for ViKij = VrK(|r - rj, h) r=ri"}, {"title": "B Computational fluid dynamics: basics", "content": "Fluid dynamics is a sub-field of fluid mechanics which concerns about the flow of fluids such as liquids (e.g. hydrodynamics) and gases (e.g. aerodynamics). There are typically two classes of methods used in computational fluid dynamics (CFD): discretization models and turbulence models```json\n    "}, {"title": "B Computational fluid dynamics: basics", "content": "Fluid dynamics is a sub-field of fluid mechanics which concerns about the flow of fluids such as liquids (e.g. hydrodynamics) and gases (e.g. aerodynamics). There are typically two classes of methods used in computational fluid dynamics (CFD): discretization models and turbulence models"}]}