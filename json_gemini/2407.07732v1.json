{"title": "Text2VP: Generative AI for Visual Programming and Parametric Modeling", "authors": ["Guangxi Feng", "Wei Yan"], "abstract": "The integration of generative artificial intelligence (AI) into architectural design has witnessed a significant evolution, marked by the recent advancements in AI to generate text, images, and 3D models. However, no models exist for text-to-parametric models that are used in architectural design for generating various design options, including free-form designs, and optimizing the design options. This study creates and investigates an innovative application of generative Al in parametric modeling by leveraging a customized Text-to-Visual Programming (Text2VP) GPT derived from GPT-4. The primary focus is on automating the generation of graph-based visual programming workflows, including parameters and the links among the parameters, through AI- generated scripts, accurately reflecting users' design intentions and allowing the users to change the parameter values interactively. The Text2VP GPT customization process utilizes detailed and complete documentation of the visual programming language components, example-driven few- shot learning, and specific instructional guides. Our testing demonstrates Text2VP's capability to generate working parametric models. The paper also discusses the limitations of Text2VP; for example, more complex parametric model generation introduces higher error rates. This research highlights the potential of generative AI in visual programming and parametric modeling and sets a foundation for future enhancements to handle more sophisticated and intricate modeling tasks effectively. The study aims to allow designers to create and change design models without significant effort in learning a specific programming language such as Grasshopper.", "sections": [{"title": "1. Introduction", "content": "As reviewed (Castro Pena et al. 2021), Gero completed the first published approach to applying artificial intelligence (AI) in architectural design in 1995, utilizing genetic algorithms to generate floor plans (Gero and Schnier 1995). With the recent surge in generative artificial intelligence, notably marked by the public release of Generative Pre-trained Transformer 3.5 (GPT-3.5) in March 2022, the broader application of generative AI has been catalyzed across many aspects of the architecture, engineering, and construction (AEC) industry (Rudolph, Tan, and Tan 2023; Saka et al. 2023; Castro Pena et al. 2021). One of the most recognized advantages of generative AI is its capability to assist in computer programming with languages such as Python and C# to achieve desired functions (Ebert and Louridas 2023; Russo 2024).\nIn architectural design, although programming languages have not been widely and directly applied in practice, visual programming tools like Grasshopper and Dynamo have gained popularity due to their visually intuitive nature (Wortmann 2018; Asl et al. 2015; Tagashira, Kawashima, and Yasuda 2019). These tools are especially powerful in parametric modeling. However, the steep learning curve of these visual programming tools limits their broader application despite their significant advantages in design, modeling, simulation, and optimization.\nThis study explores an innovative approach to the application of generative AI in architectural design. It leverages generative Al's capabilities in coding scripts (such as C#) to create modeling workflows in Grasshopper (Rutten 2024) that accurately and parametrically represent the user's intentions.\nTo achieve this, the research has produced Text-to-Visual Programming (Text2VP) by customizing the Text2VP GPT model from the standard GPT-4 model (OpenAI 2024) to understand the user's modeling intentions, and to code the C# scripts following Grasshopper documentation that generates a Grasshopper workflow, which further generates geometric 2D or 3D models in NURBS modeling tool Rhinoceros (Robert McNeel & Associates (TLM, Inc.) 2023)."}, {"title": "2. Methodology", "content": "The research can be divided into two main sections: customizing the Text2VP GPT model and testing. To customize the Text2VP GPT model, three types of materials are prepared and utilized:\n\u2022 A detailed manual documenting all Grasshopper components.\n\u2022 Two examples illustrate user modeling intentions along with the corresponding desired C# script responses for few-shot learning.\n\u2022 A descriptive document as an instruction outlining the specific tasks for the Text2VP, including explanations of the other two customizing materials.\nThese materials collectively form the basis for the customization process, ensuring Text2VP can accurately generate the necessary C# scripts for parametric modeling in Grasshopper. As shown"}, {"title": "2.1. Documentation of Grasshopper Components", "content": "Preliminary tests indicate that the standard GPT-4 model has a basic understanding of parametric modeling and visual programming in Grasshopper, sufficient to assist with general questions. However, to accomplish the tasks of this research-specifically coding C# scripts to generate a complete, user-intentioned parametric modeling workflow automatically-Text2VP requires more detailed information on each Grasshopper component. In visual programming, components serve as the basic units of a workflow, enabling functions such as modeling, transforming, and data processing. By connecting the inputs and outputs of components in a certain order on the canvas, a workflow for specific parametric modeling functions is achieved. The lack of complete"}, {"title": "2.1.1. Metadata", "content": "The metadata of each component includes basic information such as \u201cName\u201d, \u201cNickname\u201d, and \u201cCategory\u201d, which is usually directly displayed on the Grasshopper canvas. This bridges Text2VP to connect detailed information with its pre-trained knowledge of Grasshopper visual programming. Following this is the \"Description,\" which briefly outlines the function of each component, aiding Text2VP in understanding the component's capabilities. The subsequent lines reveal essential C# coding knowledge in the Grasshopper environment, specifically \u201cAttributes\" and \"Namespace\u201d. Correctly using the namespace is crucial to activating the intended Grasshopper components. The final line of general information, \u201cDefault Preview Display\u201d, indicates the default display status of the components. Displaying certain modeling results, such as a clear and accurate output for the user, is important in a visual programming parametric workflow. This knowledge enables the Text2VP to control the display mode of each Grasshopper component efficiently and accurately."}, {"title": "2.1.2. Parameters", "content": "Understanding the parameters of each Grasshopper component is crucial for connecting them to form a complete parametric modeling workflow. The research gathers detailed information on each component's inputs and outputs. For both inputs and outputs, basic information includes the index for accurately referencing specific parameters; \u201cName\u201d and \u201cDescription\", providing an overview of each parameter; and \"Type\", indicating the designated data type for the parameter, as Grasshopper components only function correctly when inputs are of the proper type. For inputs, additional information includes \"If optional\" indicating the necessity of each input for the component to run properly. This knowledge is needed for the Text2VP to ensure all necessary inputs are provided with proper data when creating a parametric modeling workflow in Grasshopper. The \u201cDefault value\u201d reveals the default setting for each input parameter, which can be used without further action if it meets the requirements, enabling Text2VP to compose the workflow in an efficient manner. For outputs, information on \u201cData structure\u201d is specifically included, as variations in data structures can significantly impact the function of Grasshopper components, even if the data content remains the same.\""}, {"title": "2.2. Examples for Few-shot Learning", "content": "As demonstrated (Brown et al. 2020), GPT achieves robust performance in a few-shot setting by significantly improving the efficiency of large AI models using in-context information, thereby enhancing the accuracy of generated results. This research adopts the in-context approach to efficiently customize the GPT model for the specific task of assisting in generating parametric modeling workflows in the visual programming environment. This is done by preparing two examples of parametric modeling needs and the corresponding C# scripts that can generate Grasshopper workflows to fulfill these needs.\nThe two examples for few-shot learning in this research respectively focus on 2D and 3D parametric modeling. In preparing these examples, we ensure the inclusion of Grasshopper components from all fundamental function categories. These categories include parameter and input components like \u201cNumber Slider,\u201d geometry drawing components like \u201cPolygon,\u201d geometry transformation components like \u201cMove,\u201d algebraic data generating components like \u201cSeries,\u201d spatial data generating components like \u201cUnit Z Vector,\u201d mathematical calculation components like \"Power,\u201d spatial analysis components like \"Area,\u201d and data structure processing components like \u201cFlatten Tree.\u201d This comprehensive inclusion exposes Text2VP to a wide range of Grasshopper functions and datatypes.\nIn the example C# scripts, we demonstrate the general structure of C# coding syntax in the Grasshopper environment for generating workflows. This includes the syntax for activating Grasshopper components by their namespaces, generating Grasshopper components on the canvas with designated spatial coordinates, directly assigning new numeric values for inputs without connecting to another Grasshopper component, establishing connections between the parameters of two Grasshopper components, and controlling the display status of Grasshopper components. Additionally, we draft comments for every line of code in the example scripts to assist Text2VP in understanding and learning.\nThese examples for few-shot learning are specifically prepared to present Text2VP with the conceptual framework of how the parametric modeling needs can be fulfilled using Grasshopper components from each function category. Additionally, they demonstrate the specific C# syntax required to automatically generate such workflows on the Grasshopper canvas."}, {"title": "2.3. Descriptive Instructions", "content": "The final section of material used to customize the Text2VP GPT model in this research is a specifically drafted descriptive instruction. This instruction outlines the goals and tasks of Text2VP and further explains the other materials discussed earlier. It also fills out the \u201cInstruction\" section on the interface for customizing a GPT model. The general framework of this text incorporates ideas from the course (Zhang 2024)."}, {"title": "2.3.1. Persona", "content": "The first section describes the personality of Text2VP for this research. It outlines the overarching goal of Text2VP as assisting users in fulfilling parametric modeling needs by composing a Grasshopper visual programming workflow through C# codes. This section also briefly summarizes the specific information and knowledge that Text2VP can use, in addition to its pre- trained knowledge, to complete the specific task better. It defines the specific role of Text2VP and provides clues about the information that should be used to establish this role."}, {"title": "2.3.2. Task", "content": "The next section guides the Text2VP through the specific steps it needs to follow to generate the final C# scripts that automatically create a Grasshopper workflow to fulfill the parametric modeling needs (Figure 3). The process begins with Text2VP introducing itself to the user and explaining how it can assist with parametric modeling, then asking the user for input on their modeling needs. Once the user's modeling intention is gathered, the Text2VP's task is to analyze and ensure its accuracy and completeness, then summarize the user's modeling intentions with an emphasis on interactable parameters that the user can use as the media interactively change their values to control the parametric model. Text2VP then seeks confirmation from the user before composing the Grasshopper workflow. After user confirmation, Text2VP's final task is to compose the Grasshopper visual programming workflow and code it in C#, responding with the scripts that the user can use to generate the parametric modeling workflow on the Grasshopper canvas automatically. This series of step-by-step tasks not only makes it straightforward for the Text2VP to understand and complete but also sets the framework for user-AI communication, ensuring a focus on assisting in parametric modeling and accurately gathering necessary information and user intentions. These deconstructed tasks are also valuable for researchers in evaluating Text2VP results."}, {"title": "2.3.3. Output", "content": "The next section, \u201cOutput,\u201d defines the overarching goal of Text2VP: to provide a C# script that can automatically generate the parametric modeling visual programming workflow on Grasshopper to meet the user's modeling needs. This helps guide Text2VP's conversations with users strictly toward this goal."}, {"title": "2.3.4. Constraint", "content": "The main section, \u201cConstraint,\u201d lists specific key points Text2VP should and should not do. This includes using only the provided documentation of Grasshopper components documentation to learn about the function and method of use rather than relying on pre-trained but potentially inaccurate knowledge. It also specifies how Text2VP should use the example codes to customize its knowledge base about C# syntax in the Grasshopper environment. Additionally, due to findings from preliminary tests indicating that the Text2VP cannot accurately learn coding syntax solely from few-shot examples, further explanations are provided. These explanations cover key_C# syntax in Grasshopper, such as activating a Grasshopper component with its namespace (as revealed in the Grasshopper components Information document), generating Grasshopper components on the canvas with location coordinates that reflect their logical function in the visual programming workflow, and controlling the display status of components to clearly display necessary modeling results while eliminating disruptions from intermediate steps. The end of this section describes forbidden actions in the Text2VP GPT customization process to suppress unwanted responses from its pre-trained knowledge, such as using the \u201cRhino function\u201d in C# coding, as this research focuses solely on parametric modeling in the Grasshopper environment. All content in this section aims to detail and deeply customize the Text2VP GPT model to best complete the task of assisting users with a Grasshopper visual programming workflow generated automatically by the AI-coded C# scripts."}, {"title": "2.3.5. Examples", "content": "The last section of the descriptive instruction covers examples for few-shot learning. It includes guidelines on how the two examples should be used in customizing the Text2VP GPT and, most importantly, provides the prompts for each example, describing the needs of parametric modeling. The prompts, together with the example result code, form the material for in-context few-shot learning examples discussed earlier in this paper (Section 2.2)."}, {"title": "3. Testing", "content": "This paper presents two testing samples for demonstrating 2D and 3D parametric modeling needs; they are simple yet representative for Text2VP to successfully produce the desired C# scripts, which can automatically generate the intended parametric modeling workflow on the Grasshopper canvas while utilizing most of the Grasshopper component function categories with proper coding syntax including those provided in the few-shot learning examples.\nThe two testing samples encompass various geometry modeling tasks, including 2D simple curve modeling and more complex 3D Boundary Representations (breps). Additionally, the samples include multiple data types connected and transformed between Grasshopper components through the visual programming workflow.\nThe testing samples are designed to gradually increase parametric modeling complexity. This progression is demonstrated by the transition from 2D to 3D modeling, the increasing number of interactable parameters, and the additional complexity of the logical structure of the visual program. This design allows us to test and evaluate Text2VP's ability to handle the increasing complexity of parametric modeling tasks."}, {"title": "3.1. 2D Modeling Test Sample", "content": "The first sample is a simple 2D modeling task: drawing and moving a circle with controls for radius and Z-axis location. The prompt is as follows:\nI need a Grasshopper workflow with grasshopper components, which: draw a circle and create a slider to control the radius of the circle (from 2 to 20, with the default of 20); create some grasshopper components with a slider that can move the circle in the z-axis (from -10 to 10, with the default of 0)."}, {"title": "3.2. 3D Modeling Test Sample", "content": "The second sample is a more complex 3D modeling task: creating a solid, top-flat cone with controls for top and bottom radii and height. The prompt is as follows:\nI need a grasshopper workflow with grasshopper components that draw a circle and create a slider to control its radius (from 2 to 20, with the default of 20, in the accuracy of thousands); then draw another circle right on the top (z-axis) of the first circle and create a slider to control its radius (from 1 to 10, with the default of 10, in the accuracy of thousands), create another slider to control it's the distance between the two circles (from 5 to 10, with the default of 5, in the accuracy of integer);. Lastly, create a closed flat-topped cone in the guide of two circles. Only have the final 3D cone geometry display the preview.\n(Note that some language issues exist in the prompt, e.g., \u201cgrasshopper\u201d (lower case), \u201cit's the distance\" (should be \u201cits distance\"). However, as shown later in the Results (Section 4.2), Text2VP can still understand the modeling intention well, showing its tolerance. In this research, users can use natural, non-error-free language to chat with Text2VP.)\""}, {"title": "4. Results and Discussion", "content": "In both testing samples, Text2VP adheres to the designed pathway to analyze and summarize the parametric modeling needs, awaiting the user's confirmation before composing the visual programming workflow and coding. Although Text2VP does not produce perfect C# scripts to generate the workflows on the Grasshopper canvas automatically on the first attempt, it successfully corrects its mistakes after further interactions. By indicating errors in the initial codes, Text2VP can provide complete scripts that successfully generate the visual programming workflows in Grasshopper without errors, fulfilling the intended parametric modeling tasks."}, {"title": "4.1. 2D Modeling Test Sample", "content": "In the first step of the 2D modeling test, Text2VP successfully understands the parametric modeling intention and summarizes it into two sections with two interactable parameters: drawing a circle with a radius control and moving the circle along the Z-axis with a coordinates control. In the beginning, Text2VP could generate a C# script that serves as Alpha Code, containing the basic structure, variables, and functions for generating a visual programming workflow of the parametric model in Grasshopper based on the design intent (prompt). However, there are errors in the C# coding syntax despite generally following the scripting syntax illustrated in the customization materials.\nThe major error involves a mistake in the workflow logic and data type that is unmatched due to misfeeding data for the \"Move\" component. Specifically, the Text2VP mistakenly connects both the \"Slider\u201d and \u201cUnit Z\u201d components to the second input parameter of the \u201cMove\u201d component, which requires a vector data type. Since \u201cSlider\u201d is already connected to the \u201cUnit Z\u201d component, it should not have been connected directly to the \u201cMove\u201d component again. Text2VP corrects this mistake after it is pointed out.\nA frequent mistake in the initial scripts is the misspelling of Grasshopper components' namespaces. Text2VP does not always use the exact spelling provided in the customization materials, often shortening or hallucinating namespaces. For example, it shortens the namespace for the \"Unit Z\u201d component from\n\u201cVectorComponents.VectorComponents.Component_UnitVectorZ\u201d\nto\n\u201cVectorComponents.Component_UnitZ;\u201d\nand incorrectly spell the \"Circle\" component's namespace by hallucinating it as\n\u201cGrasshopper.Kernel.GeometryComponents.CircleComponente\u201d\ninstead of the correct\n\u201cCurveComponents.Component_Circle.\u201d\nText2VP can fix these mistakes independently after we identify them.\nAnother issue in the initial scripts is the improper placement of components on the canvas, which should reflect the logical sequence of the workflow. Initially, Text2VP misplaces the \u201cMove\u201d component to the left of the \u201cUnit Z\u201d component. However, after generally pointing out the error regarding component location, Text2VP successfully corrects the placement without specific guidance on individual components.\nAdditional minor mistakes are noticed when setting up the display status for Grasshopper components. Text2VP correctly sets the preview display status (whether to draw the corresponding but intermediate model in Rhino) for most components except for the \u201cCircle\u201d component. After pointing out this error, Text2VP can use the correct syntax to properly turn off the preview display for the \"Circle\u201d component, as its role is an intermediate step.\nAfter correcting these errors in the Alpha Code, the final Text2VP-coded C# scripts successfully generate the visual programming workflow on the Grasshopper canvas, perfectly fulfilling the parametric modeling intention (Figures 4 &5).\nAdditionally, Text2VP successfully understands further requirements about smoothing the changes in the model when operating the parameter slider. It fulfills this need by increasing the decimal points for the slider with proper coding syntax."}, {"title": "4.2. 3D Modeling Test Sample", "content": "In the second test sample for the 3D parametric modeling task, we observe more significant errors in the Text2VP's responses as the complexity of the modeling task increased compared to the first 2D modeling testing sample. Despite that, in the pre-coding steps, Text2VP accurately summarizes the parametric modeling intentions and lists the three interactable parameters from the prompt.\nIn this test, Text2VP fails to compose a perfect Grasshopper visual programming workflow that can accurately model the intentions. In the initial result, Text2VP mistakenly uses the \u201cCone\u201d component, which models a regular conical surface instead of the requested closed flat-topped cone Brep. After the first communication pointing out this mistake, Text2VP can only partially fix the problem by using the \u201cLoft\u201d components to model an open flat-topped conical surface. It requires the second round of communication, pointing out not modeling a requested closed geometry, to finally compose the Grasshopper visual programming workflow idea that fulfills the modeling intentions.\nIn addition, in the second test sample, Text2VP makes similar mistakes as in the first test, such as misfeeding data types for the components' input parameters and misspelling the namespaces when trying to activate the Grasshopper components. Hallucinations regarding the namespaces are also observed. At the same time, having Text2VP correct its mistakes in this more complex test becomes more difficult. Even in some cases, direct instruction on how to correct specific errors is required, as Text2VP fails to correct the mistakes by itself after only pointing out the existence of the errors, unlike in the simpler first test sample.\nDuring the second test, Text2VP also makes minor mistakes, such as incorrectly setting the preview display status for Grasshopper components and misplacing Grasshopper components on the canvas in a way that does not logically correspond to their functions in the workflow. These minor mistakes require additional effort to correct before Text2VP can produce the final scripts that successfully generate an error-free visual programming workflow on the Grasshopper canvas, accurately fulfilling the parametric modeling intentions (Figures 6 & 7)."}, {"title": "5. Conclusions and Future Work", "content": "Despite this research producing limited testing samples, we can confidently conclude that this study is a success in customizing the Text2VP GPT model from the standard pre-trained GPT-4.0 model, using our specifically prepared knowledge base and instructional documentation. The presented testing samples demonstrate that Text2VP adopts the knowledge from these materials, such as the functions of specific Grasshopper components and the syntax of C# coding in the Grasshopper environment. Additionally, Text2VP's ability to fix some errors on its own in simpler cases further supports this conclusion. In all tests, Text2VP eventually produced fully working C# scripts that could be used in the Grasshopper environment to automatically generate visual programming workflows to accurately fulfill the user's parametric modeling intentions.\nIn summary, this research successfully introduces an innovative approach to applying generative Al to assist parametric modeling by automatically generating visual programming workflows that meet the user's modeling intent with prompts in natural human language. Rather than generating a fixed 3D model (e.g., a specific mesh model) from user prompts as the state-of-the-art (Tsalicoglou et al. 2023; H\u00f6llein et al. 2023; Guillard et al. 2021), this research advanced generative Al by automatically generating a parametric model with interactable parameters that control the parametric model, capable of generating multiple (e.g., millions) of models and design options for further simulation and optimization work. Additionally, for the first time, this research demonstrates the potential of generative AI in automating visual programming (which can be beyond Grasshopper, including Dynamo, LabView, Houdini, etc., visual programming languages), leveraging the widely recognized capabilities of generative AI in assisting coding tasks. This research also showcases how to teach the domain knowledge of visual programming to AI so that it can generate visual programs for parametric modeling or other applications.\nHowever, we must acknowledge that this research is a preliminary exploration. The test results indicate that errors exist in the Text2VP's responses, and these errors increase as the tasks become more complex. Additionally, during the testing process, there is no clear indication that Text2VP learns from their interactions with users regarding the errors in their responses, memorizes the corrections, and carries them over tasks. However, this could be attributed to this research's very small testing sample size (2) during the testing process; further testing may yield different conclusions. This highlights the need for more robust improvements and specific fine-tuning of generative AI in future work, including more testing samples, to empower Text2VP to learn from its mistakes across tasks, thus reducing errors and eventually handling complex parametric modeling tasks accurately and effectively."}]}