{"title": "AI MULTI-AGENT INTEROPERABILITY\nEXTENSION FOR MANAGING MULTIPARTY CONVERSATIONS", "authors": ["Diego Gosmar", "Emmett Coin", "Deborah A. Dahl", "David Attwater"], "abstract": "This paper presents a novel extension to the existing Multi-Agent Interoperability specifications of the\nOpen Voice Interoperability Initiative (originally also known as OVON from the Open Voice Network).\nThis extension enables AI agents developed with different technologies to communicate using a\nuniversal, natural language-based API or NLP-based standard APIs. Focusing on the management\nof multiparty AI conversations, this work introduces new concepts such as the Convener Agent,\nFloor-Shared Conversational Space, Floor Manager, Multi-Conversant Support, and mechanisms\nfor handling Interruptions and Uninvited Agents. Additionally, it explores the Convener's role as\na message relay and controller of participant interactions, enhancing both scalability and security.\nThese advancements are crucial for ensuring smooth, efficient, and secure interactions in scenarios\nwhere multiple AI agents need to collaborate, debate, or contribute to a discussion. The paper\nelaborates on these concepts and provides practical examples, illustrating their implementation within\nthe conversation envelope structure.", "sections": [{"title": "Introduction", "content": "There is increasing recognition that many applications of conversational systems can be addressed more successfully\nif the expertise required to perform the application is not expected to reside in one agent, but is allocated among\nindependent agents with their own capabilities. In this approach, these independent agents contribute their individual\nknowledge to address specific aspects of the problem and communicate to provide their input toward achieving the\noverall goal. It is clear that this perspective broadly resembles the traditional and very successful object-oriented\nprogramming paradigm and shares similar advantages, such as encapsulation, maintainability, and scalability.\nThe integration of multiple agents has been addressed in many approaches, which vary in the degree of autonomy of\neach agent, the degree of architectural similarity expected of the agents, and whether or not the agents have to be known"}, {"title": "1.1 Previous work", "content": "ahead of time when the system is developed. We believe that the most useful systems will be those that maximally\nencapsulate the agents' functionality, limit dependencies on specific semantic formats, and which can be configured\ndynamically at runtime. In addition, multi-agent systems that are based on proprietary frameworks are, by definition,\nconstrained to coordinating agents that are based on those frameworks, automatically ruling out the possibility for the\nthousands of existing legacy conversational systems to participate.\nWe focus here on previous work aimed at coordinating full agents as opposed to work aimed at coordinating specific\nmodality components, such as the W3C Multimodal Architecture [12] and the Galaxy Communicator Software\nInfrastructure [8]."}, {"title": "1.1.1 Early systems", "content": "Knowledge Query Manipulation Language (KQML) [13] was an early system that focused on knowledge sharing\nand communication among intelligent agents. While it supported cooperation among intelligent agents in multi-agent\nsystems, it relied on shared ontological assumptions among agents, which created a barrier to deployment. In addition,\nKQML did not specifically address conversational interactions and was more focused on sharing knowledge among\nagents. VoiceXML [11] was another early approach to collaboration among agents. It allowed conversations to be passed\nto other Voice-XML based agents through the <transfer> element. However, VoiceXML required agents to be based on\nVoiceXML, conversations could only be transferred to a single receiving agent, and no previous conversational context\ncould be passed to the receiving agent. Systems like the Open Agent Architecture [6] used Inter-Agent Communication\nLanguages to facilitate collaboration among independent agents. While this reduced dependencies on specific internal\narchitectures, it required agents to interpret highly structured semantic representations rather than natural language,\nwhich constrained the flexibility and scalability of the system."}, {"title": "1.1.2 Recent systems", "content": "The emergence of very capable LLMs has led to a dramatic increase in both research and deployed conversational\nsystems. Along with this increase, the value of multi-agent systems is becoming more apparent, and a number of new\nmulti-agent frameworks have recently become available. Some examples include the following:\n\u2022 OpenAI Swarm [20]: A framework designed to orchestrate multiple AI agents collaboratively to accomplish\ncomplex tasks. Released with Open Source MIT License, it is currently considered to be an experimental\nsystem that is not ready for deployment. In particular, Swarm is currently an experimental sample framework\nintended to explore ergonomic interfaces for multi-agent systems. It is not intended to be used in production,\nand therefore has no official support.\n\u2022 Microsoft Autogen: An Open-Source Programming Framework for Agentic AI. AutoGen is powered by\ncollaborative research studies from Microsoft, Penn State University, and University of Washington and\nlicensed under the Creative Commons Attribution 4.0 International [3].\n\u2022 CrewAI: A platform that orchestrates multiple AI models and services to perform cohesive workflows. It\nemphasizes flexibility in integrating diverse AI technologies and managing complex task sequences. [7].\n\u2022 Multi-Agent Orchestrator framework: a tool by Amazon AWS Labs for implementing sophisticated AI\nsystems comprising multiple specialized agents. Its primary purpose is to intelligently route user queries to the\nmost appropriate agents while maintaining contextual awareness throughout interactions [5]. The project is\nOpen Source and provides optimal integration and performance combined with the Amazon AWS Bedrock\nfully managed service [4].\n\u2022 Mixture of Experts (MoE) Paradigm [22]: While not an architecture for multi-agent systems per se, the\nMixture of Experts paradigm represents another example of an architecture where a larger system relies on\nencapsulated individual components that supply complementary expertise with respect to an overall problem.\nWe will see in the following sections that, in fact, these multi-agent frameworks could be compatible with the framework\npresented in this paper. By providing any of them with an OVON wrapper, they could become interoperable with other\nOVON-compatible systems. For instance, an Amazon Bedrock service with multiple internal agents could externally\npresent itself as a black box, communicating with other multi-agent frameworks (e.g., Microsoft Autogen, CrewAI, or\nother platforms not listed here) by leveraging the OVON Universal API specifications."}, {"title": "1.2 The Initial OVON Framework", "content": "In contrast to other approaches, the OVON (Open Voice Network) framework introduced in our previous work[2]\nsought to overcome some interoperability limitations by establishing a highly scalable and flexible method for AI"}, {"title": "1.3 Enhancements to the OVON Framework", "content": "However, this initial work covers only conversations between one user and one assistant at a time. That is, if the user\nwants to get information from more than one assistant, they have to access multiple assistants in sequence. This most\nlikely will have two less-than-optimal consequences. In the first place, any information from the conversation with the\nfirst assistant that is required by the second assistant will have to be explicitly transferred to the second assistant when\nthe second assistant is invited to the conversation. The second and more significant drawback is that any higher-level\nconclusions resulting from the various conversations will have to be determined by the user. That is, since the assistants\ndon't know about the other tasks, they won't be able to make suggestions that combine information gathered from other\nassistants with their own information."}, {"title": "1.4 Use Cases", "content": "Let's look at an example use case for managing multi-party conversations via a multi-agent AI. Suppose a user is\nplanning a trip that involves booking a flight, a rental car, and a hotel, and also involves looking for interesting things to\ndo in the destination city. This planning could involve conversations with four or more assistants at different travel\nservices. The travel dates, which all of these assistants need, have to be passed to each assistant in turn to avoid making\nthe user repeat them. In addition, if the assistants are talking together, the tourist information assistant could point out\nthat there is a music festival that the user would enjoy, but attending it would require extending the trip by one day. If\nthe tourist assistant is involved in the flight booking conversation, it could tell the user about the festival before the user\nbooks their flight. This could save the user a lot of time."}, {"title": "1.5 Requirements and proposed extensions", "content": "For these reasons, we propose to extend the earlier two-party conversational specifications[2] to handle requirements\nfor conversations involving multiple assistants. Multi-party dialog systems have been discussed in the literature, for\nexample [9][18] among others. [18] describes a multi-agent system with user-initiative, where several agents can be\npresent but the agents don't collaborate \u2013 they simply respond individually to user questions. [9] describes a system for\ncollaborative problem-solving among agents, but it is restricted to one domain in that all of the agents are experts in\ndifferent aspects of a larger problem. Our goal is to be able to support mixed-initiative applications with multiple agents\nthat collaborate across domains. These are the requirements that we propose for support of multi-party conversations:\n1. It must be possible to hold a conversation among more than two conversants.\n2. Conversants must be able to come and go during a conversation.\n3. It should be possible for a subset of conversants to be able to hold private conversations among themselves.\n4. There should be no fixed limit on the number of conversants.\n5. There should be a way to control possible unruly conversants through techniques like muting or ejecting."}, {"title": "2 Extensions to the Conversation Envelope", "content": "The concept of Multi-Agent Interoperability revolves around creating a shared protocol, based on standard universal APIs\nusing NLP, that allows heterogeneous AI agents to communicate effectively. This is achieved through a standardized\nconversation envelope API, as detailed in previous research[2], which defines the message structure and communication\nprotocols. In multiparty scenarios, such as AI-driven conferences or collaborative tasks, the existing framework needs to\nbe enhanced to manage the flow of conversation among multiple agents, handle interruptions, and secure the conversation\nfrom uninvited agents. These scenarios require additional layers of management that were not addressed in the initial\nframework. To address these complex interactions, this paper introduces several key extensions to the conversation\nenvelope framework, specifically designed to enhance the coordination and management of multiparty conversations.\nThe next sections will dive into these extensions, including the introduction of a Floor Manager to transmit inter-agent\nmessages, Multi-Conversant Support to enable collaboration among multiple agents via Natural language, the Convener\nAgent as a conversational coordinator, and mechanisms to handle interruptions and manage unwanted agents, ensuring\nthat all interactions remain orderly and productive. Note that these extensions are backward-compatible with the basic\nconversation envelope messages[2] and it is not necessary for systems to support them if the application doesn't require\nmultiple agents."}, {"title": "2.1 The Floor Shared Conversational Space", "content": "In addition to the Convener, this paper introduces the concept of the \"Floor\", which can be thought of as a combination\nof a message router and a Blackboard, as described in [10]. The Floor serves as the Shared Conversational Space where\nall participating agents convene and gather to exchange information, share context, and collaborate on tasks. The Floor\nprovides the environment in which the conversation occurs, facilitating the distribution of messages, and optionally\nmaintaining a unified context for all participants. Under the control of the Floor Manager the Floor enforces decisions\nmade by the Convener regarding who has the Floor at any given time."}, {"title": "2.1.1 Definition and Purpose", "content": "Floor: a virtual space that acts as the common ground for all agents involved in a multiparty conversation. It can hold\nthe shared context, conversation history, and provides mechanisms for agents to access and contribute to the collective\nknowledge base."}, {"title": "2.1.2 Centralized Context Management as an Optional Feature", "content": "The primary role of the Floor is to provide a shared conversational space. With the help of the 'Floor Manager', it can\nalso maintain a unified context. This centralized approach to context management is not mandatory. Agencies can\nchoose to adopt this model or rely on existing mechanisms where individual agents autonomously manage and exchange\ntheir contextual information (i.e. via the whisper events in [2]). This includes maintaining their own participant lists and"}, {"title": "2.1.3 Goals", "content": "In future developments, the Floor is intended to achieve advanced unified context management by maintaining a\ncoherent and accessible context for all agents. This will ensure that every participant can access the same information\nand reference shared knowledge without redundancy. Additionally, the Floor aims to enhance collaboration by providing\na shared space that fosters an environment where agents can build upon each other's contributions, leading to more\nintegrated and comprehensive interactions. Furthermore, the Floor is designed to support scalability, allowing the\naddition of new agents without disrupting the existing conversation flow, as all agents will be able to access the shared\nconversational context seamlessly."}, {"title": "2.1.4 Example of Floor Utilization", "content": "Consider the earlier trip planning scenario. As the user interacts with multiple assistants (e.g., flight booking, hotel\nreservation, rental car), the Floor gets each assistant updates with relevant information such as travel dates, destinations,\nand preferences. This shared information may be condensed into a unified context that allows any assistant to access\nnecessary details without the user having to repeat them, streamlining the overall interaction."}, {"title": "2.2 Floor Manager and Convener", "content": "Floor Manager and Convener are integral components within the multi-agent system that manage and coordinate\nthe flow of conversation. Note that this section describes the roles and responsibilities of the Floor Manager and\nConvener. It doesn't define the internal mechanisms by which the roles and responsibilities are executed. These are\nimplementation-dependent and outside of the scope of this specification."}, {"title": "2.2.1 Floor Manager", "content": "The Floor Manager controls the Floor. It does not present itself as a direct actor in the conversation and restricts its\nagency to facilitating communication. It is a trusted neutral actor. It operates at a very low level within the system\narchitecture. Its primary responsibilities include:\n\u2022 Communication Management: The Floor Manager determines which messages are sent to which participants.\nFor example, it enforces the policies regarding who has the Floor when and forwards all messages to the\nConvener.\n\u2022 Implementation Flexibility: It might not be an agent itself and can lack any agency, meaning it doesn't\nmake autonomous decisions beyond message routing. In some implementations, the Floor Manager could be\nhardcoded within the Floor, providing a fixed routing mechanism without dynamic behavior.\n\u2022 Context Management: The Floor manager manages the contextual information maintained by the Floor.\nDepending on the implementation this might be simple conversational histories or it could involve sophisticated\nsummarization and decision support capability."}, {"title": "2.2.2 Convener", "content": "In the Multiparty Conversation scenario, the Convener serves as the central coordinator that manages conversational\ndynamics by:\n\u2022 Regulating the Conversational Floor: It determines which conversants have the Floor at any given time,\nensuring orderly communication by:\nProcessing Floor Requests: Agents submit requests to take the Floor, specifying the reason and urgency\nof their contribution. The Convener evaluates these requests based on predefined rules and the current\nstate of the conversation.\nGranting or Revoking Floor Access: It grants the Floor to agents, defining the extent and context of\ntheir contributions, and can revoke Floor privileges if necessary to maintain conversational integrity.\nHandling Multiple Requests: When multiple agents request to speak simultaneously, the Convener\ndecides which agent is granted the Floor, prioritizing based on the conversation's needs and goals."}, {"title": "2.2.3 Benefits", "content": "\u2022 Orderly Management: By managing which agent has the Floor, the system prevents multiple agents from\nspeaking simultaneously, ensuring a coherent conversation flow.\n\u2022 Fair Distribution: The Floor Manager and Convener work together to ensure that all agents have the\nopportunity to contribute according to their roles and the context of the discussion.\n\u2022 Automated Coordination: The Convener can specify prioritization policies to the Floor Manager policies to\nprioritize Floor requests based on the conversation's needs using predefined rules."}, {"title": "2.2.4 Examples of Possible Messages", "content": "\u2022 Floor Request: An agent submits a request to the Convener to take the Floor, optionally specifying the reason\nand urgency of their contribution.\n\u2022 Floor Grant: The Convener grants the Floor to an agent, defining the extent and context for their contribution.\n\u2022 Floor Revoke: The Convener revokes an agent's Floor privileges if the conversation's rules or the situation\ndemands it."}, {"title": "2.3 Multi-Conversant Support", "content": "This extension enables multiple agents and users to participate in a conversation, supporting complex discussions\nwhere various perspectives need to be considered. The conversation envelope is designed to manage contributions from\nmultiple conversants simultaneously. The array in the \u201cto\u201d parameter in the next example indicates that the message is\nbeing sent to two different agents."}, {"title": "2.3.1 Benefits", "content": "\u2022 Enhanced Collaboration: Facilitates complex interactions where multiple agents need to contribute simulta-\nneously.\n\u2022 Scalability: Efficiently manages conversations with a large number of participants.\n\u2022 Context Management: Ensures that the conversation stays on track, with each agent's contributions appropri-\nately contextualized."}, {"title": "2.4 Convener Agent and Invitation Mechanism", "content": "As previously mentioned, in the context of multi-agent conversations, a 'Convener' agent is introduced. This agent\nis responsible for initiating and managing the participation of other agents in the conversation. The Convener sends\nindividual \"invite\" messages to each participating agent. This approach ensures clarity and retains compatibility with\nthe existing OVON \"invite\" message structures[2]. By avoiding a broadcast invitation, we reduce the number of events\nthat must be handled intelligently, and maintain compatibility with the existing protocol."}, {"title": "2.4.1 Queue Management and Priority Handling", "content": "The Convener Agent maintains a queue to manage simultaneous requests from multiple assistants wanting to contribute\nto the conversation. It prioritizes these requests based on predefined criteria, ensuring that high-priority messages are\naddressed promptly while maintaining an orderly flow of dialogue. The Floor Manager enforces this policy for the\nConvener Agent."}, {"title": "2.4.2 Invitation Control and Security", "content": "Only the Convener Agent is authorized to send invitations to join a conversation. This ensures that only trusted and\nnecessary participants are involved in the conversation."}, {"title": "2.4.3 Variants of Invitation Mechanisms", "content": "There are multiple ways to initiate invitations:\n\u2022 Convener-Initiated Invites: The Convener sends individual invites to each assistant, maintaining control over\nwho joins the conversation.\n\u2022 User-Initiated Conversations: The user can start a conversation, prompting their personal Convener Agent to\nmanage the interaction, including asking the Convener agent to invite other conversants to the conversation.\n\u2022 Conference: Users can request a conference, allowing the Convener to invite multiple conversants simultane-\nously based on the context of the meeting.\n\u2022 Agent Initiated Invites: agents can initiate invites; however, they must do it via the Convener."}, {"title": "2.5 Interruptions and Uninvited Agents", "content": "Managing interruptions and uninvited agents is crucial in dynamic multi-agent environments. The conversation envelope\nsupports controlled interruptions and prevents unauthorized agents from disrupting the conversation."}, {"title": "2.5.1 Benefits", "content": "\u2022 Controlled Interruptions: Enables essential interjections without disrupting the conversation.\n\u2022 Security: Protects the conversation from uninvited or unauthorized agents.\n\u2022 Focus Maintenance: Helps maintain the integrity and focus of the discussion."}, {"title": "2.6 Public and Private Utterances in Multi-Agent Conversations", "content": "By default, if a conversant is given the Floor then utterances from that conversant are delivered to all participants on the\nFloor. Utterances can be specifically addressed to specific conversants but this does not stop other conversants from\n'hearing' it. We propose a new 'private' feature on utterances to inform the Floor Manager that utterances should only\nbe delivered to the named recipients. Other conversants are made aware that an utterance has occurred but are not given\nthe contents of the utterance."}, {"title": "2.6.1 Who Receives Utterances?", "content": "By default, if a conversant is given the Floor then utterances from that conversant are delivered to all participants on the\nFloor. Utterances can be specifically addressed to specific conversants but this does not stop other conversants from\n'hearing' it. We propose a new 'private' feature on utterances to inform the Floor Manager that utterances should only\nbe delivered to the named recipients. Other conversants are made aware that an utterance has occurred but are not given\nthe contents of the utterance."}, {"title": "2.6.2 Whisper and Context Features", "content": "In previous specifications [2], the \"whisper\" was defined as an additional un-vocalizedutterance that allows a private\nutterance between conversants which can be used to provide supplementary information. When used in conjunction\nwith another message such as a request for the Floor or an invitation this can include context or background information.\nThis allows agents to receive necessary context without broadcasting it to all participants. In order to enhance the\nflexibility and detail of context sharing without compromising interoperability, we propose a new \"context\" field within\nthe whisper event, which can contain either a string or a nested dialogEvent [1]"}, {"title": "2.6.3 Handling Private Conversations", "content": "Private conversations between a sub-set of conversants can be supported in this framework by three distinct mechanisms.\nFirstly conversants can open up a separate conversation on a separate Floor. This separate conversation may or may\nnot have a Convener. This is clearly a separate conversation and will not share context with the main conversation.\nSecondly, agents can send whisper utterances to each other even if they have not been granted the Floor. Thirdly, agents\nthat have been granted the Floor can converse with each other using 'private' utterances as described above. Direct\nprivate conversations between assistants allow for autonomous communication without user interference from other\nconversants, maintaining confidentiality and promoting efficient collaboration without disturbing the flow of the dialog."}, {"title": "2.6.4 Invitation and Context Initialization", "content": "When a new participant is invited, the Convener Agent can provide a summary, or context, of the relevant parts of\nthe conversation thus far, ensuring that the new assistant can quickly integrate without requiring the user to repeat\ninformation. This summary includes the main points and agreed-upon context, allowing for smooth transitions and\nmaintaining the flow of conversation."}, {"title": "2.7 Delegation and Context Handling", "content": "Delegation allows for tasks to be assigned to specific assistants without requiring user intervention. For example, during\nan insurance call, if the user wishes to disengage, they can request another agent to represent them for the transition,\nensuring that it listens and manages subsequent interactions seamlessly."}, {"title": "2.7.1 Delegation Mechanisms", "content": "Delegation allows for tasks to be assigned to specific assistants without requiring user intervention. For example, during\nan insurance call, if the user wishes to disengage, they can request another agent to represent them for the transition,\nensuring that it listens and manages subsequent interactions seamlessly."}, {"title": "2.7.2 Context Versus History", "content": "The history of a conversation in this framework refers to a transcript of the full dialog up to the current point. In\ncontrast, the context refers to whatever additional information the receiving agent needs to carry out the task of\nconducting its conversation with the user. Some information from the history might be relevant to the context, but\nnot necessarily all of it. In addition, some information in the context, such as the user's location, might not have ever\nbeen part of the conversation. Emphasizing context over history facilitates more efficient communication. Context may\ninclude summarized, relevant information that assists agents in understanding ongoing tasks without needing a detailed\ntranscript. This approach reduces redundancy and enhances the fluidity of multi-agent interactions."}, {"title": "2.8 Floor Manager vs Convener Agent", "content": "Both the Floor Manager and the Convener Agent are crucial for effective multiparty conversations, they serve distinct\nroles. The Floor Manager focuses on sharing a conversational space among existing participants (similar to a Conference\nBridge). In contrast, the Convener Agent is responsible for managing participation by inviting agents, controlling\naccess, relaying messages, and providing necessary context to participants."}, {"title": "3 Example", "content": "In implementing the proposed extensions, the JSON message envelopes provided in this paper, such as those used for\nthe Floor Manager, the Convener, Multi-Conversant Support, and new event categories, serve as draft illustrations2.\nLet's refer to the use case already described in the previous paper[16]. In the first scenario, Emmett, a human, seeks\nassistance from Cassandra, his general AI assistant, to manage and streamline his possible errands efficiently. The AI\nassistants at various service points - Pat at Blooming Town Florist, Andrew at the Post Office, Charles at the hardware\nstore, and Sukanya the Host at Thai Palace - facilitate the transactions. Emmett, a human, has the following goals:\n\u2022 Order some flowers for his wife's birthday.\n\u2022 Check on the repair of the chainsaw he left at the hardware store.\n\u2022 Order some carryout Thai food for lunch.\n\u2022 Find the cost of mailing a 2 pound package to California."}, {"title": "Characters", "content": "\u2022 Emmett: The Human\n\u2022 Cassandra: Emmett's general AI assistant (Convener)\n\u2022 Pat: AI Assistant for his local florist\n\u2022 Andrew: AI Assistant at the post office\n\u2022 Charles: AI Assistant at Emmett's local hardware store\n\u2022 Sukanya: AI Assistant at the local restaurant, \"Thai Palace\"\n\u2022 Hermes: AI Assistant for Credit Card Transations"}, {"title": "Conversations", "content": "Emmett: Hi Cassandra.\nCassandra: Hi Emmett! How can I assist you today?\nEmmett: I need to order some flowers for my wife's birthday.\nCassandra: Sure thing, Emmett! I'll connect you with the local florist shop.\n[invites Blooming Town Florist to this conversation via Convener Agent]\nPat: Hi Emmett!\nI'm Pat, your friendly florist.\nHow can I help you with your flower selection today?\nAre you looking for something specific or need suggestions?\nEmmett: Do you have any red Proteas?\nPat: Hi Emmett! Yes, we do have red Proteas.\nThey're stunning and make a bold statement.\nWould you like to include them in your arrangement?\nEmmett: Yes and add some eucalyptus in a clear vase, please.\nPat: Great choice, Emmett! Shall I use the credit card on file for this order?\nEmmett: Yes please, use the card on file.\nPat: OK, Let me please include Hermes the AI assistant who is going to help us\nin performing your card secure transaction."}, {"title": "Illustration", "content": "In this example the Floor Manager operates as a centralized message relay, managing participant lists and controlling\nthe flow of messages. The use of private utterances and whispersensures that sensitive information, such as credit card\ndetails, is securely handled by authorized assistants only. The Convener Agent acts as a trusted entity, maintaining\nconversation context and preventing unauthorized access. Context is managed through summarized information at the\nFloor Level, avoiding the need to share full conversation histories and enhancing both efficiency and security."}, {"title": "4 Future Directions and Potential Improvements", "content": "While the extensions introduced in this paper significantly enhance the Multi-Agent Interoperability framework, there\nare several areas where further improvements can be made to advance the capabilities and scalability of AI-driven\nmultiparty conversations."}, {"title": "4.1 Enhanced Context Management", "content": "As the number of agents and the complexity of conversations increase, maintaining a coherent context across multiple\nagents becomes increasingly challenging. Future work could focus on developing more sophisticated mechanisms for\ncontext management, enabling agents to better understand and track the nuances of ongoing discussions, especially in\nlong-running or highly dynamic conversations. This could involve integrating advanced context-awareness specifications\nthat allow agents to retain and reference past interactions more effectively."}, {"title": "4.2 Improved Security and Privacy Protocols", "content": "As AI-driven conversations become more prevalent, ensuring the security and privacy of the interactions becomes\nincreasingly important. Future work could involve enhancing the specifications to facilitate the framework's security\nprotocols to better protect against unauthorized access and ensure that sensitive information is handled appropriately.\nThis could include implementing advanced encryption methods, robust authentication processes, and more sophisticated\nmechanisms for managing uninvited agents."}, {"title": "4.3 Observability", "content": "Another crucial area for future improvement is enhancing the observability of multi-agent interactions. As AI-driven\nconversations grow in complexity, the ability to perform comprehensive log retrievals, generate summaries, provide\ndetailed reports, and debug issues becomes increasingly important. Future enhancements to the specifications could\ninclude robust observability features that allow for real-time monitoring and control of multi-agent conversations. This\nwould enable developers and operators to gain deeper insights into the behavior of the agents, troubleshoot issues more\neffectively, and ensure that the system operates within expected parameters. Enhancing observability is also vital for\naddressing the explainability and transparency of Conversational AI models, which are increasing both in numbers and\nin difficulty to distinguish between human and artificial agents, as discussed in [15]."}, {"title": "4.4 Delegation and Context Versus History", "content": "Future improvements could explore more nuanced delegation mechanisms, allowing for dynamic task assignments\namong assistants based on real-time conversation context and agent capabilities. This would enhance the system's\nflexibility and responsiveness to user needs."}, {"title": "4.4.1 Delegation Mechanisms", "content": "Future improvements could explore more nuanced delegation mechanisms, allowing for dynamic task assignments\namong assistants based on real-time conversation context and agent capabilities. This would enhance the system's\nflexibility and responsiveness to user needs."}, {"title": "4.4.2 Context Over History", "content": "Prioritizing context over detailed conversation history can streamline interactions and improve efficiency. Future\nresearch should investigate optimal methods for context summarization and sharing to support effective multi-agent\ncollaboration without overwhelming the communication protocol with unnecessary data."}, {"title": "4.5 Hallucination mitigation", "content": "Hallucinations, or incorrect information provided by LLMs pretending they are correct, is a well-known and serious\nproblem with LLMs, which we believe can be mitigated to some extent when several agents collaborate in a conversation.\nAddressing hallucinations in LLM-based modules within the context of multiparty agent conversations involves several\nstrategic advantages. By having multiple specialized agents capable of interoperating with each other, the system could\nleverage the strengths and specialized knowledge of each agent to mitigate the effects of incorrect or hallucinated\ninformation. This approach has much in common with the classic ROVER technique in speech recognition, where the"}, {"title": "4.5.1 Cross-Verification", "content": "When multiple agents are involved in a conversation, they can perform real-time cross-verification of facts and data\npresented by other agents. For example, if one agent provides a factual claim, another agent with specialized knowledge\nin that area could confirm or refute the claim based on its own data sources or expertise. This built-in redundancy helps\nensure the accuracy of the information exchanged and reduces the likelihood of misleading outcomes."}, {"title": "4.5.2 Specialization of Agents", "content": "Each agent in a multiparty system can be highly specialized in a specific domain, such as finance, healthcare, or travel.\nThis specialization allows the agents to operate within their areas of strength, where they are less likely to generate\nhallucinations because they are trained on domain-specific datasets and models. When an agent steps outside its\nexpertise, other domain-specific agents can step in, thus maintaining the reliability of the conversation."}, {"title": "4.5.3 Contextual Awareness and Adjustment", "content": "Agents could utilize contextual cues from the conversation to adjust their responses accordingly. In a multiparty setup,\nthe presence of multiple inputs and feedback mechanisms can help an agent correct itself or refine its output in real-time.\nFor example, if an agent notices discrepancies in its outputs compared to others, it can reevaluate its response based on\nthe collective input from other agents, leading to more accurate and contextually appropriate outputs."}, {"title": "4.5.4 Error Propagation Control", "content": "In a multiparty environment, the influence of any single agent's erroneous output could be diluted or corrected by the\ncontributions of others. This distributed approach to information handling and decision-making ensures that no single\npoint of failure (such as a hallucinating agent) can dominate the conversation or lead to significant errors in judgment or\naction."}, {"title": "4.5.5 Consensus and Decision-Making", "content": "The system could be designed to require consensus among agents before certain types of information are accepted or\ncertain actions are taken. This requirement means that an individual agent's hallucinated response would need to be\ncorroborated by other agents, which inherently demands higher scrutiny and verification."}, {"title": "4.5.6\nLearning from Interactions", "content": "In advanced implementations, agents could learn from previous interactions-both their own and those of other agents.\nThis learning could involve identifying patterns of hallucination or frequent errors, which can then be used to refine\nthe models further. The interoperability and communication among agents facilitate a feedback loop that improves\nindividual and collective performance over time. Incorporating these strategies into the design of a multiparty AI system\nnot only could address the reliability concerns posed by hallucinations but also enhance the overall robustness and\nadaptability of the system. This approach leverages the collective capabilities and knowledge of multiple agents, thus\nproviding a more resilient framework for managing complex, dynamic conversational environments."}, {"title": "5 Conclusion", "content": "This paper introduces novel critical extensions to the Multi-Agent Interoperability framework, addressing the challenges\nposed by multiparty conversations. This collaborative framework, powered by natural language via standard NLP-\nbased APIs, allows agents to work together efficiently without requiring specialized protocols or technical interfaces.\\"}]}