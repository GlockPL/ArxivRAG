{"title": "Cost-Based Semantics for Querying Inconsistent Weighted Knowledge Bases", "authors": ["Meghyn Bienvenu", "Camille Bourgaux", "Robin Jean"], "abstract": "In this paper, we explore a quantitative approach to querying inconsistent description logic knowledge bases. We consider weighted knowledge bases in which both axioms and assertions have (possibly infinite) weights, which are used to assign a cost to each interpretation based upon the axioms and assertions it violates. Two notions of certain and possible answer are defined by either considering interpretations whose cost does not exceed a given bound or restricting attention to optimal-cost interpretations. Our main contribution is a comprehensive analysis of the combined and data complexity of bounded cost satisfiability and certain and possible answer recognition, for description logics between EL\u2081 and ALCO.", "sections": [{"title": "Introduction", "content": "Ontology-mediated query answering (OMQA) is a framework for improving data access through the use of an ontology, which has been extensively studied by the KR and database communities (Poggi et al. 2008; Bienvenu and Ortiz 2015; Xiao et al. 2018). Much of the work on OMQA considers ontologies formulated in description logics (DLs) (Baader et al. 2017). In the DL setting, OMQA consists in finding the answers that are logically entailed from the knowledge base (KB), consisting of the ABox (data) and TBox (ontology). Due to the use of classical first-order semantics, whereby everything is entailed from a contradiction, classical OMQA semantics fails to provide informative answers when the KB is inconsistent.\nThe issue of handling inconsistencies, or more generally unwanted consequences, in DL KBs has been explored from many angles. One solution is to modify the KB in order to render it consistent, and there has been significant research on how to aid users in the debugging process, e.g. by generating justifications that pinpoint the sources of the inconsistency (Parsia, Sirin, and Kalyanpur 2005; Pe\u00f1aloza 2020). This line of work mostly focuses on helping knowledge engineers to debug the TBox before deployment in applications, but some recent work specifically target ABoxes (Baader and Kriegel 2022). However, in an OMQA setting, where the ABox can be very large and subject to frequent updates, it is unrealistic to assume that we can always restore consistency. This has motivated a substantial line of research on inconsistency-tolerant semantics to obtain meaningful answers from inconsistent KBs, surveyed in (Bienvenu and Bourgaux 2016; Bienvenu 2020). Many of these semantics are based upon repairs, defined as inclusion-maximal subsets of the ABox that are consistent w.r.t. the TBox. Two of the most commonly considered repair semantics are the AR semantics (Lembo et al. 2010), which asks for those answers that hold in every repair, and the brave semantics (Bienvenu and Rosati 2013), which considers those answers that hold in at least one repair. Note that the work on repair-based semantics typically assumes that the TBox is reliable, which is why repairs are subsets of the ABox, with the TBox left untouched. A notable exception is the work of Eiter, Lukasiewicz, and Predoiu (2016), which considers generalized notions of repair for existential rule ontologies composed of hard and soft rules, in which contradictions may be resolved by removing or minimally violating soft rules.\nIn this paper, we explore a novel quantitative approach to querying inconsistent description logic KBs, which combines the idea of soft ontology axioms from (Eiter, Lukasiewicz, and Predoiu 2016) with a recent cost-based approach to repairing databases w.r.t. soft constraints (Carmeli et al. 2021). The idea is to associate with every TBox axiom and ABox assertion a (possibly infinite) weight. 'Hard' axioms and assertions, which must be satisfied, are assigned a weight of \u221e, and the remaining 'soft' axioms and assertions are assigned weights based upon their reliability, with higher weights indicating greater trust. The cost of an interpretation is defined by taking into account the number of violations of an axiom (assertions can be violated at most once) and the weights of the violated axioms and assertions. When determining the query answers, we shall use the cost to select a set of interpretations, either by considering all interpretations whose cost is below a given threshold, or considering only those interpretations having an optimal (i.e. minimum) cost. We shall then consider both the certain answers, which hold in all of the selected interpretations, and the possible answers, which hold w.r.t. at least one selected interpretation. When restricted to consistent KBs, the optimal-cost certain and possible semantics coincide with the classical certain and possible answer semantics, cf. (Andolfi et al. 2024). By varying the cost bounds, we can identify answers that are robust (i.e. hold not only in all optimal-cost interpretations but also 'close-to-optimal' ones) or rank candidate answers based upon their incompatibility with the KB."}, {"title": "Preliminaries", "content": "We briefly recall the syntax and semantics of DL.\nSyntax A DL knowledge base (KB) $\\mathcal{K} = (\\mathcal{T}, \\mathcal{A})$ consists of an ABox $\\mathcal{A}$ and a TBox $\\mathcal{T}$, both of which are constructed from three mutually disjoint countable sets $\\mathcal{N}_C$ of concept names (unary predicates), $\\mathcal{N}_R$ of role names (binary predicates), and $\\mathcal{N}_I$ of individual names (constants). The ABox is a finite set of concept assertions of the form $A(a)$ with $A \\in \\mathcal{N}_C, a \\in \\mathcal{N}_I$, and role assertions of the form $R(a, b)$ with $R \\in \\mathcal{N}_R, a, b \\in \\mathcal{N}_I$. The TBox is a finite set of axioms whose form depends on the DL in question. In $\\mathcal{ALCOQ_{U}}$ TBox axioms are concept inclusions $C \\sqsubseteq D$ where $C$ and $D$ are complex concepts formed using the following syntax:\n$C:=A | \\{a\\} | \\top | \\bot | C\\sqcap C | C\\sqcup C | \\neg C \\ |\n \\exists R.C | \\forall R.C |\\leq n R.C |\\geq n R.C$\nwhere $A \\in \\mathcal{N}_C, a \\in \\mathcal{N}_I, R \\in \\mathcal{N}_R\\cup \\{U\\}$, with $U$ the special universal role.\u00b2\nThe DL $\\mathcal{ALCO}$ is the restriction of $\\mathcal{ALCOQ_{U}}$ disallowing the use of qualified number restrictions $(\\leq n R.C$ or $\\geq n R.C)$ and of the universal role $U$. The DL $\\mathcal{EL_{\\bot}}$ further disallows the use of universal restrictions $(\\forall R.C)$, negations $(\\neg C)$, unions $(C\\sqcup C)$ and nominals $(\\{a\\})$.\nWe denote by Ind($\\mathcal{A}$) (resp. Ind($\\mathcal{K}$)) the set of individuals that occur in $\\mathcal{A}$ (resp. in $\\mathcal{K}$), and by sig($\\mathcal{T}$) (resp. sig($\\mathcal{K}$)) the set of concept and role names that occur in $\\mathcal{T}$ (resp. in $\\mathcal{K}$).\nSemantics An interpretation has the form $\\mathcal{I} = (\\Delta^{\\mathcal{I}},.\\^{\\mathcal{I}})$, where the domain $\\Delta^{\\mathcal{I}}$ is a non-empty set and .$\\^{\\mathcal{I}}$ maps each $a\\in \\mathcal{N}_I$ to $a^{\\mathcal{I}} \\in \\Delta^{\\mathcal{I}}$, each $A \\in \\mathcal{N}_C$ to $A^{\\mathcal{I}} \\subseteq \\Delta^{\\mathcal{I}}$, each $R \\in \\mathcal{N}_R$ to $R^{\\mathcal{I}} \\subseteq \\Delta^{\\mathcal{I}} \\times \\Delta^{\\mathcal{I}}$ and interprets the universal role $U$ by $U^{\\mathcal{I}} = \\Delta^{\\mathcal{I}} \\times \\Delta^{\\mathcal{I}}$. The function .$\\^{\\mathcal{I}}$ is extended to general concepts, e.g., $(\\exists R.D)^{\\mathcal{I}} = \\{c | \\exists d \\in D^{\\mathcal{I}} : (c, d) \\in R^{\\mathcal{I}}\\}$, $\\{a\\}^{\\mathcal{I}} = \\{a^{\\mathcal{I}}\\}$, $\\top^{\\mathcal{I}} = \\Delta^{\\mathcal{I}}$, $\\bot^{\\mathcal{I}} = \\emptyset$, $(\\leq nR.C)^{\\mathcal{I}} = \\{c | \\#\\{d \\in C^{\\mathcal{I}} | (c,d) \\in R^{\\mathcal{I}}\\} < n\\}$ and $(\\geq nR.C)^{\\mathcal{I}} = \\{c | \\#\\{d \\in C^{\\mathcal{I}} | (c,d) \\in R^{\\mathcal{I}}\\} \\geq n\\}$. An interpretation $\\mathcal{I}$ satisfies an assertion $A(a)$ (resp. $R(a, b)$) if $a^{\\mathcal{I}} \\in A^{\\mathcal{I}}$ (resp. $(a^{\\mathcal{I}}, b^{\\mathcal{I}}) \\in R^{\\mathcal{I}}$); we thus make a weak version of the standard names assumption (SNA).\u00b3 $\\mathcal{I}$ satisfies an inclusion $C \\sqsubseteq D$ if $C^{\\mathcal{I}} \\subseteq D^{\\mathcal{I}}$ and $\\{a\\}^{\\mathcal{I}} = \\{a^{\\mathcal{I}}\\}$ for every nominal occurring in $C$ or $D$. We write $\\mathcal{I} \\models \\tau$ (resp. $\\mathcal{I} \\models a$) to indicate that $\\mathcal{I}$ satisfies an axiom $\\tau$ (resp. assertion $a$). An interpretation $\\mathcal{I}$ is a model of $\\mathcal{K} = (\\mathcal{T}, \\mathcal{A})$, denoted $\\mathcal{I} \\models \\mathcal{K}$, if $\\mathcal{I}$ satisfies all inclusions in $\\mathcal{T}$ ($\\mathcal{I} \\models \\mathcal{T}$) and all assertions in $\\mathcal{A}$ ($\\mathcal{I} \\models \\mathcal{A}$). A KB $\\mathcal{K}$ is consistent if it has a model.\nQueries We consider conjunctive queries (CQs) which take the form $\\exists \\vec{y} \\psi$, where $\\psi$ is a conjunction of atoms of the forms $A(t)$ or $R(t,t')$, where $t,t'$ are variables or individuals, and $\\vec{y}$ is a tuple of variables from $\\psi$. A CQ is called Boolean (BCQ) if all of its variables are existentially quantified; a CQ consisting of a single atom is an instance query (IQ). When we use the generic term query, we mean a CQ. For a BCQ $q$ and an interpretation $\\mathcal{I}$, we denote by $\\mathcal{I} \\models q$ the fact that $\\mathcal{I}$ satisfies $q$. A BCQ $q$ is entailed from $\\mathcal{K}$, written $\\mathcal{K} \\models q$, if $\\mathcal{I} \\models q$ for every model $\\mathcal{I}$ of $\\mathcal{K}$. A BCQ $q$ is satisfiable w.r.t. $\\mathcal{K}$ if there exists a model $\\mathcal{I}$ of $\\mathcal{K}$ such that $\\mathcal{I} \\models q$. For a non-Boolean CQ $q[\\vec{x}]$ with free variables $\\vec{x} = (x_1,...,x_k)$, a tuple of individuals $\\vec{a} = (a_1,..., a_k)$ is a certain answer for $q[\\vec{x}]$ w.r.t. $\\mathcal{K}$ just in the case that $\\mathcal{K} \\models q[\\vec{a}]$, where $q[\\vec{a}]$ is the BCQ obtained by replacing each $x_i$ by $a_i$. Tuple $\\vec{a}$ is said to be a possible answer for $q[\\vec{x}]$ w.r.t. $\\mathcal{K}$ if the BCQ $q[\\vec{a}]$ is satisfiable w.r.t. $\\mathcal{K}$. Observe that certain and possible answer recognition corresponds to BCQ entailment and satisfiability respectively.\nTo simplify the presentation, we shall focus on BCQs. However, all definitions and results are straightforwardly extended to non-Boolean queries, and we shall thus sometimes speak of 'query answers' when providing intuitions."}, {"title": "Weighted Knowledge Bases", "content": "We consider a quantitative way of integrating the notion of soft constraints by giving weights to axioms and assertions. Intuitively, these weights represent penalties associated to each violation of the axioms or assertions. They will allow us to assign a cost to interpretations based upon the axioms and assertions they violate, and use this cost to select which interpretations to consider when answering queries.\nDefinition 1. A weighted knowledge base (WKB) $\\mathcal{K}_{\\omega} = ((\\mathcal{T}, \\mathcal{A}), \\omega)$ consists of a knowledge base $(\\mathcal{T}, \\mathcal{A})$ and a cost function $\\omega: \\mathcal{T} \\cup \\mathcal{A} \\rightarrow \\mathbb{N}_{>0}\\cup \\{+\\infty\\}$. We denote by $\\mathcal{T}_{\\infty}$"}, {"title": "Combined Complexity", "content": "In this section we study the combined complexity of bounded cost satisfiability and certain and possible answer recognition, for DLs between $\\mathcal{EL_{\\bot}}$ and $\\mathcal{ALCO}$. The first line of Table 1 gives an overview of the results.\nUpper Bounds\nTo characterize the cost of interpretations, we define the notion of k-configuration. Intuitively, a k-configuration specifies how to allocate a cost of k between possible violations.\nDefinition 5 (k-configuration). Let $\\mathcal{K}_{\\omega} = ((\\mathcal{T}, \\mathcal{A}), \\omega)$ be a WKB and k be an integer. A k-configuration for $\\mathcal{K}_{\\omega}$ is a function $\\gamma: \\mathcal{T}\\cup \\mathcal{A} \\rightarrow \\mathbb{N}$ such that:\n$\\cdot$ $\\gamma(\\tau) \\in \\mathbb{N}$ for every $\\tau \\in \\mathcal{T}$,\n$\\cdot$ $\\gamma(a) \\in \\{0,1\\}$ for every $a \\in \\mathcal{A}$,\n$\\cdot$ $\\sum_{x \\in \\mathcal{T}\\cup \\mathcal{A}}\\gamma(x)\\cdot\\omega_x \\leq k$.\nAn interpretation $\\mathcal{I}$ satisfies the k-configuration $\\gamma$ if $|vio_{\\mathcal{I}}(\\tau)| \\leq \\gamma(\\tau)$ for every $\\tau\\in \\mathcal{T}$ and $\\mathcal{I} \\models a$ for every $a \\in \\mathcal{A}$ such that $\\gamma(a) = 0$.\nThe definition of k-configurations implies in particular that $\\gamma(x) = 0$ for every $x \\in \\mathcal{T}_{\\infty} \\cup \\mathcal{A}_{\\infty}$.\nLemma 1. Let $\\mathcal{K}_{\\omega}$ be a WKB and $\\mathcal{I}$ be an interpretation.\ncost$\\_{\\mathcal{K}_{\\omega}}(\\mathcal{I}) = min\\{k | \\exists \\gamma  k\\text{-configuration s.t. } \\mathcal{I} \\text{ satisfies } \\gamma\\}$\nProof. If $\\mathcal{I}$ satisfies a k-configuration $\\gamma$, cost$\\_{\\mathcal{K}_{\\omega}}(\\mathcal{I}) \\leq k$. Indeed, for every $\\tau\\in\\mathcal{T}$, $|vio_{\\mathcal{I}}(\\tau)| \\leq \\gamma(\\tau)$, and for every $a \\in vio_{\\mathcal{I}}(\\mathcal{A})$, $\\gamma(a) = 1$ because $\\gamma(a) = 0$ implies $\\mathcal{I} \\models a$. Thus cost($\\mathcal{I}$) $\\leq \\sum_{\\tau\\in\\mathcal{T}}\\gamma(\\tau)\\omega_{\\tau} + \\sum_{a\\in\\mathcal{A}}\\gamma(a)\\omega_{a} \\leq k$. Moreover, if cost($\\mathcal{I}$) = k, we can define a k-configuration $\\gamma$ such that $\\mathcal{I}$ satisfies $\\gamma$ by setting $\\gamma(\\tau) = |vio_{\\mathcal{I}}(\\tau)|$ for every $\\tau\\in \\mathcal{T}$, and $\\gamma(a) = 0$ if $\\mathcal{I} \\models a$, $\\gamma(a) = 1$ otherwise for every $a \\in \\mathcal{A}$.\nWe now define a new KB in a more expressive DL in such a way that the models of the new KB will be interpretations that satisfy a given k-configuration.\nGiven a concept inclusion $\\tau = B \\sqsubseteq C$ we define the violation concept $V_{\\tau} := B \\sqcap \\neg C$ such that for every interpretation $\\mathcal{I}$, it holds that $vio_{\\tau}(\\mathcal{I}) = V_{\\tau}^{\\mathcal{I}}$.\nDefinition 6. Let $\\mathcal{K}_{\\omega} = ((\\mathcal{T}, \\mathcal{A}), \\omega)$ be an $\\mathcal{ALCO}$ WKB, k an integer and $\\gamma$ a k-configuration for $\\mathcal{K}_{\\omega}$. We define the $\\mathcal{ALCOQ_{U}}$ KB $\\mathcal{K}_{\\gamma} = <\\mathcal{T}_\\gamma, \\mathcal{A}_\\gamma>$ associated to $\\mathcal{K}_{\\omega}$ and $\\gamma$ as:\n$\\mathcal{T}_\\gamma = \\mathcal{T}\\cup \\{\\top\\sqsubseteq \\leq \\gamma(\\tau) U.V_{\\tau} |\\tau\\in\\mathcal{T}\\backslash \\mathcal{T}_{\\infty}\\}$\n$\\mathcal{A}_\\gamma = \\{a \\in \\mathcal{A} : \\gamma(a) = 0\\}$.\nProposition 4. Let $\\mathcal{K}_{\\omega}$ be a WKB and $\\gamma$ be a k-configuration for $\\mathcal{K}_{\\omega}$. For every interpretation $\\mathcal{I}$, $\\mathcal{I} \\models \\mathcal{K}_\\gamma$ iff $\\mathcal{I}$ satisfies $\\gamma$.\nProof. Suppose $\\mathcal{I} \\models \\mathcal{K}_\\gamma$. For every $\\tau\\in\\mathcal{T} \\backslash \\mathcal{T}_{\\infty}$, since $\\mathcal{I} \\models \\top\\sqsubseteq \\leq \\gamma(\\tau) U.V_{\\tau}$, then $|vio_{\\tau}(\\mathcal{I})| = |V^{\\mathcal{I}}_\\tau| \\leq \\gamma(\\tau)$. For every $\\tau\\in \\mathcal{T}_{\\infty}$, since $\\mathcal{I} \\models \\mathcal{T}_{\\infty}$, $|vio_{\\tau}(\\mathcal{I})| = 0 = \\gamma(\\tau)$. Finally, as $\\mathcal{I} \\models \\mathcal{A}$, $\\mathcal{I}$ satisfies all $a \\in \\mathcal{A}$ such that $\\gamma(a) = 0$.\nConversely, suppose that $\\mathcal{I}$ satisfies $\\gamma$. For every $\\tau\\in\\mathcal{T} \\backslash \\mathcal{T}_{\\infty}$, $|V^{\\mathcal{I}}_\\tau| = |vio_{\\tau}(\\mathcal{I})| \\leq \\gamma(\\tau)$ thus $\\mathcal{I} \\models \\top\\sqsubseteq \\leq \\gamma(\\tau) U.V_{\\tau}$. For every $\\tau\\in \\mathcal{T}_{\\infty}$, $|vio_{\\tau}(\\mathcal{I})| \\leq \\gamma(\\tau) = 0$ thus $\\mathcal{I} \\models \\tau$. Therefore $\\mathcal{I} \\models \\mathcal{T}_\\gamma$. As $\\mathcal{I}$ satisfies all $a \\in \\mathcal{A}$ such that $\\gamma(a) = 0$, we also have $\\mathcal{I} \\models \\mathcal{A}_\\gamma$, so $\\mathcal{I} \\models \\mathcal{K}_\\gamma$.\nThis construction allows us to decide bounded cost satisfiability via $\\mathcal{ALCOQ_{U}}$ satisfiability.\nTheorem 1. BCS for $\\mathcal{ALCO}$ is in EXPTIME in combined complexity (even if the bound k and the weights are encoded in binary).\nProof. Let $\\mathcal{K}_{\\omega} = ((\\mathcal{T}, \\mathcal{A}), \\omega)$ be a WKB and k be an integer. By Lemma 1 and Proposition 4, $\\mathcal{K}_{\\omega}$ is k-satisfiable iff there exists a k-configuration $\\gamma$ such that $\\mathcal{K}_\\gamma$ is satisfiable. The number of k-configurations $\\gamma$ is bounded by $(k + 1)^{|\\mathcal{T}|}2^{|\\mathcal{A}|}$ (hence by $2^{|k+1||\\mathcal{T}|+|\\mathcal{A}|}$ if k is encoded in binary and $|k + 1|$ is the length of the encoding of k + 1) as there are at most k + 1 possibilities for the value of $\\gamma(\\tau)$ for $\\tau\\in\\mathcal{T}$and 2 possibilities for the value of $\\gamma(a)$ for $a \\in \\mathcal{A}$. Moreover, for a given $\\gamma$, $\\mathcal{K}_\\gamma$ is of polynomial size and can be constructed in polynomial time w.r.t. $|\\mathcal{K}_{\\omega}|$ and $|k|$ by encoding the number restrictions in binary (since the numbers occurring in such restrictions are bounded by k). Therefore, as satisfiability in $\\mathcal{Z OQ}$ (which extends $\\mathcal{ALCOQ_{U}}$) is in EXPTIME even with binary encoding in number restrictions (Calvanese, Eiter, and Ortiz 2009), checking for every k-configuration $\\gamma$ whether $\\mathcal{K}_\\gamma$ is satisfiable is a decision procedure for BCS that runs in exponential time w.r.t. combined complexity. Note that the complexity results for $\\mathcal{ALCOQ_{U}}$ apply even if they are shown without the standard name assumption because $\\mathcal{K}_\\gamma$ is satisfiable under our weak SNA iff $\\mathcal{K}_\\gamma \\cup \\{\\{a\\} \\sqcap \\{b\\} \\sqsubseteq \\bot |a, b \\in \\text{Ind}(\\mathcal{K}), a \\neq b\\}$ is satisfiable without any assumption on the interpretation of individuals.\nTo prove the upper bounds on query entailment, we need to first show some results on the computation of the optimal cost of an $\\mathcal{ALCO}$ WKB. Since the number of violations of a concept inclusion in an interpretation $\\mathcal{I}$ is bounded by the cardinality of its domain $\\Delta^{\\mathcal{I}}$, the following proposition is useful to bound the optimal cost of a WKB.\nProposition 5. Let $\\mathcal{K}$ be an $\\mathcal{ALCO}$ KB. If $\\mathcal{K}$ is satisfiable, then it has a model $\\mathcal{I}$ such that $|\\Delta^{\\mathcal{I}}| \\leq |\\text{Ind}(\\mathcal{K})| + 2|\\mathcal{T}|$.\nThe upper data complexity bound for bounded cost satisfiability follows directly.\nTheorem 8. BCS for $\\mathcal{ALCO}$ is in NP in data complexity (even with a binary encoding of weights)."}, {"title": "Data Complexity", "content": "We now turn our attention to the data complexity of the decision problems we consider. The second line of Table 1 gives an overview of the results. Recall that data complexity takes only into account the size of the weighted ABox $|\\mathcal{A}_\\omega|$. In particular, for problems that have an integer k as part of their input, we consider that k is fixed. We will discuss the complexity w.r.t. $|\\mathcal{A}|$ and k at the end of the section.\nUpper Bounds\nTo obtain the data complexity upper bounds, our general approach is to guess a 'small' interpretation of bounded or optimal cost, that satisfies or does not satisfy the query. Proposition 5 told us that satisfiable $\\mathcal{ALCO}$ KBs have models with a domain cardinality linearly bounded in $\\mathcal{A}$ but does not guarantee anything on the cost of such models. The following proposition shows that there is always such interpretation which is also of optimal cost.\nProposition 6. Let $\\mathcal{K}_{\\omega} = ((\\mathcal{T}, \\mathcal{A}), \\omega)$ be an $\\mathcal{ALCO}$ WKB and k an integer. If there exists an interpretation $\\mathcal{I}$ with cost($\\mathcal{I}$) $\\leq k$, then there is $\\mathcal{I}'$ with cost($\\mathcal{I}'$) $\\leq k$ and $|\\Delta^{\\mathcal{I}'}| \\leq |\\text{Ind}(\\mathcal{K})| + 2|\\mathcal{T}|$.\nThe upper data complexity bound for bounded cost satisfiability follows directly."}, {"title": "Related Work", "content": "Our cost-based framework for reasoning on inconsistent KBs shares features with a number of existing formalisms. Our axioms with finite weights can be seen as quantitative versions of the soft rules considered in (Eiter, Lukasiewicz, and Predoiu 2016). More generally, the idea of allowing TBox axioms to be (exceptionally) violated shares high-level similarities with defeasible axioms, minimized concepts, and typicality operators considered in non-monotonic"}, {"title": "Conclusion", "content": "We have introduced a new cost-based framework to querying inconsistent DL KBs, in which both TBox axioms and ABox assertions may be violated and notions of possible and certain query answers are defined w.r.t. the bounded or minimal-cost interpretations. By exploiting connections to other DL reasoning tasks, we were able to establish an almost complete picture of the complexity of query answering in our framework, for DLs between EL\u2081 and ALCO.\nThe main aim of future work will be to extend our results to cover DLs involving other common constructs, like inverse roles (I), role inclusions (H), functional roles (F), and number restrictions (Q). We will focus first on the DL-Lite family due to its widespread use in OMQA. While it is not difficult to adapt the definitions of violations and WKBS to other DLs, the techniques underlying our upper bounds do not readily transfer. For example, violations of role inclusions cannot be encoded as concepts (at least in standard DLs), and adding functionality or number restrictions may lead to every optimal-cost interpretation having an infinite domain. Inverse roles (present in even the simplest DL-Lite logics) are also non-trivial to handle, though we expect that the techniques employed for our data complexity upper bounds can be suitably adapted. Finally, another important but challenging direction is to devise practical algorithms that are amenable to implementation."}]}