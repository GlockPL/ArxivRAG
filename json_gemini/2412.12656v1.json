{"title": "DriveTester: A Unified Platform for Simulation-Based Autonomous Driving Testing", "authors": ["Mingfei Cheng", "Yuan Zhou", "Xiaofei Xie"], "abstract": "Simulation-based testing plays a critical role in evaluating the safety and reliability of autonomous driving systems (ADSs). However, one of the key challenges in ADS testing is the complexity of preparing and configuring simulation environments, particularly in terms of compatibility and stability between the simulator and the ADS. This complexity often results in researchers dedicating significant effort to customize their own environments, leading to disparities in development platforms and underlying systems. Consequently, reproducing and comparing these methodologies on a unified ADS testing platform becomes difficult. To address these challenges, we introduce DriveTester, a unified simulation-based testing platform built on Apollo, one of the most widely used open-source, industrial-level ADS platforms. DriveTester provides a consistent and reliable environment, integrates a lightweight traffic simulator, and incorporates various state-of-the-art ADS testing techniques. This enables researchers to efficiently develop, test, and compare their methods within a standardized platform, fostering reproducibility and comparison across different ADS testing approaches.", "sections": [{"title": "I. INTRODUCTION", "content": "Autonomous Driving Systems (ADS) are a groundbreaking technology that enables vehicles to operate without human intervention. They rely on a combination of sensors and artificial intelligence algorithms to perceive the environment, make decisions, and navigate safely. Ensuring the safety and reliability of ADS before deployment is critical, making thorough testing an essential part of their development.\nA significant body of work has been conducted on ADS testing, with many approaches relying on simulation due to the high costs and risks associated with real-world vehicle testing. However, one of the key challenges in simulation-based ADS testing is the preparation and configuration of simulation environments, which is often time-consuming, complex, and highly dependent on specific platforms. The frequent updates to simulators, ADS software, and testing methods make it difficult to maintain a reliable testing platform, limiting existing ADS testing tools to be easily reproduced and compared on a unified platform. For instance, Baidu Apollo [1], one of the most widely studied open-source industrial-level ADS platforms, has traditionally been tested using the LGSVL simulator [2]. However, since LGSVL was sunsetted in 2022 [3], compatibility issues between Apollo and alternative simulators, such as CARLA [4],"}, {"title": "II. RELATED WORK", "content": "Autonomous Driving Systems. Existing Autonomous Driving Systems (ADSs), including End-to-End (E2E) systems [7] and module-based ADSs [1], have shown effectiveness in recent studies. In comparison to E2E systems, module-based ADSs, such as Apollo [1], consist of complex components like localization, perception, prediction, planning, and control, along with sophisticated communication mechanisms. While these components enhance real-time performance, they also complicate deployment. In this paper, we focus on Apollo, an open-source, industrial-level ADS. More importantly, it faces significant challenges in compatibility and usability during ADS testing, which must be addressed by the software engineering research community.\nSimulation-based ADS Testing. Many simulation-based testing approaches have been proposed to evaluate the performance (i.e., safety) of ADSs. These approaches mainly design various algorithms [6], [8]\u2013[31]. such as guided fuzzing, to explore the scenario space and identify scenarios that violate testing requirements (e.g., reach destination safely). However, one of the biggest challenges for researchers is the lack of a unified platform for comparing different algorithms across existing methods. For instance, AVFuzzer was developed on LGSVL+Apollo, while SAMOTA was developed on CARLA+Pylot, making direct comparisons difficult. In DriveTester, we invested significant effort to migrate existing ADS testing algorithms into a unified platform, simplifying the process for researchers to use and facilitating their onboarding into the ADS testing domain.\nSimulation Environment. The simulator is a crucial component of simulation-based ADS testing, as it provides the environment to deploy ADSs on virtual vehicles. The dominant simulators used in existing ADS testing studies are LGSVL [2] and CARLA [4]. However, CARLA does not yet provide a stable bridge for Apollo [32], and the sunset of LGSVL [3] presents challenges for continuing to use existing testing techniques on Apollo. Although recent studies [8], [10], [13] have employed simControl [1] as an alternative, its lack of a dynamic vehicle model makes the testing system incomplete, and it sometimes suffers from unstable motion issues. Furthermore, most existing ADS testing techniques overlook the perception module due to the latency between"}, {"title": "III. ARCHITECTURE OF DriveTester", "content": "DriveTester is designed to be modular, extensible, and to automate all key steps in ADS testing, allowing researchers to easily run different testing algorithms or develop new ones to generate desired scenarios. As shown in Fig. 1, users need to provide a simple Test Configuration file, then DriveTester will deliver the testing results. Specifically, the Test Configuration defines the Testing Algorithm and its parameters. The Testing Engine module configures the selected testing tool based on this input file and iteratively generates Scenario Configurations for evaluating the ADS. The Scenario Runner module then parses the Scenario Configuration and prepares the simulation environment for scenario execution. Once the environment is set up, with all necessary NPC actors and Apollo instances in place, the Traffic simulator dynamically updates the states (e.g., location, speed, and acceleration) of all participants according to the behaviors defined in the scenario. During execution, the Test Recorder monitors Apollo's behavior against predefined oracles and logs all traffic data for future analysis. Each module will be explained in the subsequent subsections."}, {"title": "A. Test Configuration", "content": "The core idea of ADS testing is to automatically generate scenarios by designing various algorithms within a defined scenario space. To achieve this, DriveTester models ADS testing with specific configurations and employs a YAML structure to describe the test.\n1) System Setting: This setting defines the parameters and configuration files required for DriveTester to initialize, including the root paths for both DriveTester and Apollo.\n2) Scenario Setting: This setting defines the scenario space for running ADS tests, including details such as the map name and the initial scenario configuration (e.g., the start position and the destination of the ADS under test).\n3) Scenario Runner Setting: This section focuses on configuring the simulator parameters, such as the simulator platform and saving simulation recordings or not. We designed this part to enable the future integration of various scenario runners across different simulators, such as CARLA.\n4) Testing Engine Setting: This section specifies the testing algorithm to be used (e.g., AVFuzzer) along with the necessary parameters for the selected algorithm. Users can also configure the testing oracles in this section (e.g., collision oracle)."}, {"title": "B. Testing Engine", "content": "One of the most challenging aspects of configuring and utilizing existing ADS testing techniques is managing compatibility issues. To overcome this, as shown in Fig. 2, we developed two"}, {"title": "C. Scenario Runner", "content": "Fig. 3 shows the workflow of Scenario Runner to execute a scenario, which takes the Scenario Configuration as input and outputs a Scenario Recording.\n1) Scenario Configuration: This configuration defines the positions and behaviors of traffic participants, including vehicles, pedestrians, and static obstacles, within the simulation. For instance, vehicles are expected to follow predefined waypoints as specified in the configuration. The configuration is stored in JSON format for improved reusability and flexibility.\n2) Manager: This module parses the scenario configuration and creates all necessary actors within the simulator. For autonomous vehicles (e.g., actors controlled by Apollo), it equips a real-time monitor that includes testing oracles to track the state of the vehicles. The simulation automatically terminates when an oracle is violated, enabling efficient time management during testing.\n3) Recorder: This module automatically starts when the simulation begins and is designed to record the states of all traffic actors at each timestamp. The recorded data is then available for offline analysis, allowing researchers to perform in-depth post-simulation evaluations.\n4) Traffic Simulator: We designed a real-time simulator that generates traffic behavior satisfying motion constraints. At each timestamp, an actor receives a control command from its policy (e.g., Apollo and PID controllers) and updates its state (i.e., location, heading, speed, and acceleration) based on a rule-based dynamic model, e.g., kinematic equations.\n5) Apollo-Traffic Bridge: This module establishes a real-time communication bridge between the simulator and Apollo. The bridge converts traffic observations into perception messages, which are transmitted to Apollo's perception message channel. It listens for control messages from Apollo, extracts the control commands, and transmits them to the simulator. These commands are then used to update the states of the actors controlled by Apollo within the simulation.\nDiscussion. DriveTester currently provides a complete testing pipeline for Apollo. Our platform is extendable to support new testing algorithms, integrate with different simulators by developing corresponding scenario runners, and accommodate additional ADSs by building the necessary communication bridges. We will continue to maintain the DriveTester repository and plan to support more simulators, ADSs, and testing algorithms."}, {"title": "IV. USAGE OF DriveTester", "content": "Command Line Interface. Currently, DriveTester is built for Baidu Apollo, which requires Apollo to be installed first. Additionally, DriveTester is developed entirely in Python, so proper setup and configuration of the Python environment are required. We provide quick installation steps as outlined below:\nOnce the environment and dependencies are set up, users can test Apollo by selecting and configuring the Test Configuration. A sample YAML file is provided below to demonstrate how to test Apollo using AVFuzzer:"}, {"title": "V. EVALUATION", "content": "We evaluate DriveTester in two ways: (1) Usability. We aimed to ensure that DriveTester can be easily used on a non-GUI Linux server. To evaluate this, we first confirmed that the system could be installed and run successfully on a non-GUI Linux server. Specifically, we tested it on a Linux server with an AMD EPYC 7543P 32-Core Processor (256GB RAM) and an NVIDIA A5000 GPU. Additionally, we verified that the simulator could accurately simulate vehicle motion states, particularly the motion of Apollo. Fig. 4 demonstrates a U-turn scenario used to test the dynamic model in DriveTester. As the ego vehicle approached the intersection, the control module applied the brakes and turned the steering wheel left to execute the U-turn. The planned speed and curvature (green lines), along with the simulated vehicle states (blue lines), are displayed in the lower sections of Fig. 4. (2) Effectiveness. We aimed to ensure that the migrated ADS testing tools can still effectively identify violations when using DriveTester. To verify this, we simply ran each tool for 2 hours on two widely used scenarios, Turning Lleft and Crossing Junction, and analyzed the results. From the results in TABLE I, we observe that using DriveTester maintains the performance of existing testing tools in identifying violations."}, {"title": "VI. CONCLUSION", "content": "In this paper, we introduce DriveTester, a unified simulation-based platform for ADS testing, aiming to address the challenges of compatibility and environment configuration. Built for the Apollo platform, DriveTester integrates state-of-the-art ADS testing techniques and simplifies the process of developing and executing tests. By offering modular and extensible components, DriveTester facilitates seamless migration of existing testing techniques and supports the development of new ones. Our evaluation demonstrates the high usability of DriveTester and its effectiveness in discovering critical violations."}]}