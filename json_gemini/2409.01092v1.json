{"title": "Two-Timescale Synchronization and Migration for Digital Twin Networks: A Multi-Agent Deep Reinforcement Learning Approach", "authors": ["Wenshuai Liu", "Yaru Fu", "Yongna Guo", "Fu Lee Wang", "Wen Sun", "Yan Zhang"], "abstract": "Digital twins (DTs) have emerged as a promising enabler for representing the real-time states of physical worlds and realizing self-sustaining systems. In practice, DTs of physical devices, such as mobile users (MUs), are commonly deployed in multi-access edge computing (MEC) networks for the sake of reducing latency. To ensure the accuracy and fidelity of DTs, it is essential for MUs to regularly synchronize their status with their DTs. However, MU mobility introduces significant chal-lenges to DT synchronization. Firstly, MU mobility triggers DT migration which could cause synchronization failures. Secondly, MUs require frequent synchronization with their DTs to ensure DT fidelity. Nonetheless, DT migration among MEC servers, caused by MU mobility, may occur infrequently. Accordingly, we propose a two-timescale DT synchronization and migration framework with reliability consideration by establishing a non-convex stochastic problem to minimize the long-term average energy consumption of MUs. We use Lyapunov theory to convert the reliability constraints and reformulate the new problem as a partially observable Markov decision-making process (POMDP). Furthermore, we develop a heterogeneous agent proximal policy optimization with Beta distribution (Beta-HAPPO) method to solve it. Numerical results show that our proposed Beta-HAPPO method achieves significant improvements in energy savings when compared with other benchmarks.", "sections": [{"title": "I. INTRODUCTION", "content": "The rapid development of the Internet of Things (IoT) and wireless communication technologies has spurred the emergence of numerous new applications and services, such as smart cities, multidimensional sensing, and ubiquitous intelli-gence [1]-[3]. However, these new applications and services pose new demands and challenges on the network, which may include ubiquitous connectivity, ultra-reliable and low-latency communications, and massive device connectivity. To address these challenges, it is essential to develop a self-sustaining paradigm and a proactive, online learning-based wireless networks [4], [5]. Wireless digital twin networks (WDTNs) are designed to effectively address these challenges. WDTN is defined as digital frameworks based on digital twin (DT) technology, creating high-fidelity virtual models of physical wireless net-work. This allows for real-time monitoring, simulation, and analysis to enhance connectivity and performance across vari-ous applications and services. This innovation is anticipated to be a driving force in the digitalization of the physical world, facilitating seamless communication and integration between the physical and virtual domains [6]\u2013[8]. As a high-fidelity digital replica of the physical network throughout its lifecycle, WDTN plays a crucial role in ensuring network performance and reliability. DT-driven networks continuously monitor, simulate, and analyze the physical world, allowing for ongoing assessment and adjustment of the efficiency and effectiveness of quality of service policies. By leveraging these capabilities, WDTN can optimize and predict the behavior of physical systems, ensuring optimal performance and promot-ing proactive decision-making within the network ecosystem. This predictive and optimization capability provides network operators with unprecedented management and maintenance capabilities, significantly enhancing network operational ef-ficiency and user satisfaction [9], [10]. Moreover, the ap-plication of advanced machine learning (ML) techniques in analyzing digital networks empowers DTs to significantly en-hance optimization and decision-making processes in physical networks [11], [12]. WDTN is a system composed of three layers, namely, the physical layer, digital twin layer, and application layer. The physical layer typically consists of terminal devices and communication infrastructure. The DT layer is responsible for creating and maintaining virtual replicas of the physical layer's components to enable real-time monitoring and analysis. The application layer handles the implementation of advanced functions and services, such as data analysis and decision support. This three-layer architecture allows the WDTN to efficiently integrate and coordinate interactions between the physical and digital worlds [13]. To establish WDTN, it is crucial to carefully plan the deployment of DTs within the network infrastructure. While deploying DTs in remote clouds is possible, it can introduce significant communication delays and compromise fidelity. The emergence of multi-access edge computing (MEC) networks, which leverage multiple edge servers for communication and computation with end devices, offers a realistic solution. Deploying DTs in MEC networks helps alleviate communication delays [6], [13], [14]. Moreover, DT in MEC networks can also facilitate decision-making processes related to computation offloading and re-source allocation through real-time interaction between the digital world and the physical space, giving rise to DT-assisted MEC [15], [16]. Several notable research studies have explored the role of DTs in optimizing different aspects of MEC networks [17]\u2013[22]. Specifically, the work [17] applied ML techniques in DT to enhance the design of the edge computing networks. By mirroring the dynamic network in DT, ML is applied to make decision on real-time resource allocation, which effectively improve energy efficiency and data processing efficiency. In [18], an adaptive aerial edge computing network utilizing DT was proposed, wherein the real-time environmental predictions were leveraged through DT to introduce intelligent offloading strategies for network resource allocation, leading to a significantly reduced network energy consumption. In [19] and [20], the authors explored ultra-reliable and low-latency communications (URLLC) sce-narios within DT-assisted MEC networks. By modeling the edge network with DT, they effectively achieved the goal of minimizing delays under the stringent transmission require-ments of URLLC. In [21], a DT-driven edge-collaborative scheduling algorithm was proposed for delay-sensitive tasks in MEC networks. By effectively coordinating computation and communication resources, the devised method can signif-icantly reduce task completion times. Additionally, in [22], the authors integrated DT with blockchain to improve MEC network security. They proposed an intelligent task offloading algorithm to reduce delay and energy consumption while ensuring data security. DTs are complete replicas of physical devices in the digital space, including hardware configurations, historical running data, and real-time status information [9]. To ensure that DTs accurately reflect the current state of their physical coun-terparts, a synchronization process is essential. For effective synchronization, DTs require real-time data exchange. The types of data involved typically include observed data such as signal strength, network load, and device status, user data like service usage patterns and preferences, and environmental data that encompasses factors such as geographic location and local interference sources. The quantity of data required for synchronization can be substantial, as it needs to capture the comprehensive state of the network and each connected device at any given moment [23]\u2013[25]. Moreover, the process of collecting a large amount of data to maintain synchro-nization between the DT and its physical object is consid-ered both compute-intensive and data-intensive. Maintaining synchronization of the DT consumes a significant amount of computation resources. Therefore, effective resource allocation is crucial to achieve efficient synchronization between the DT and its physical object [12]. Furthermore, it is crucial to carefully consider the deploy-ment of DTs among the edge servers and ensure real-time synchronization between the physical devices and their corre-sponding DTs. This attention to detail is essential to guarantee the reliability and accuracy of DT networks. The work [9], [12], [26]\u2013[28] examined the DT deployment problems to satisfy different requirements. Specifically, in [26], the authors devised a model for DT synchronization that addresses the DT deployment problem, to minimize the age of information associated with DT data. The authors in [12] proposed a DT synchronization model based on continual learning. This model optimizes computation resources to maximize the total utility gain of the DT network, thereby enhancing the accuracy of digital models. The aforementioned studies [12], [26] have not considered user mobility and networks dynamics, which may significantly impact the synchronization of DTs. To address this challenge, the authors in [27] investigated DT synchronization problem in vehicular networks, which analyzed the association between DT and wireless access points to ensure low-latency synchronization. Furthermore, in [28], the authors took into consideration social characteristics, computation resources, and mobile user (MU) mobility when analyzing DT deployment. They proposed an approximation algorithm to minimize the synchronization delay. Moreover, it is noteworthy that to meet the stringent requirements for reliability and low latency, DT migration can be triggered due to MU mobility. To address this issue, the authors in [9] investigated DT deployment and migration using ML techniques. They aimed to maximize MU utility by achieving a balance between latency and energy costs. While previous studies have explored DT synchronization and migration resulting from MU mobility, the issue of DT synchronization failure caused by DT migration has not been taken into account. We acknowledge the importance of MU mobility and its potential impact on DT migration and subsequent synchronization failures, which calls for fur-ther research. Additionally, to ensure the accuracy of DTs, physical devices must frequently synchronize data with their corresponding DTs, necessitating synchronization on a small timescale. However, when operating on the same timescale, MUs located at the network edge may frequently enter and exit the network, which can increase the volatility of the network and potentially lead to frequent migrations of the DTs. Additionally, the migration of the DT requires transferring all the data contained within the DT and reconfiguration after the migration. Such frequent migrations not only consume sub-stantial resources but also cause frequent service interruptions, thereby hindering the effective synchronization of DTs. Therefore, to minimize network overhead and reduce the likelihood of synchronization failures, it is of high necessity to plan and execute DT migrations on a larger timescale. By planning and executing DTs migration on a larger timescale, resources can be managed more effectively, interruptions can be reduced, thereby enhancing the reliability of the network. Hence, this paper aims to tackle the challenges associated with synchro-"}, {"title": "II. SYSTEM MODEL AND PROBLEM FORMULATION", "content": "We consider a DT-empowered MEC network as shown in Fig. 1, which consists of a control center, M single-antenna base stations (BSs) and K single-antenna MUs. The control center is used to maintain the model training and the deploy-ment decision of DTs. Moreover, each BS is equipped with an MEC server to assist MUs in constructing and synchronizing their DTs, and DTs of MUs have been initialized in MEC servers. We define the MU set as K = {1, 2, ..., K} and the set of BSs as M = {1, 2, . . ., M}. The network functions by dividing time into slots, where each time slot has length $\\delta_{\\tau}$ that is equal to the coherent time of the wireless channel. The set of time slots is represented by N = {0,1, 2, . . ., n, . . . }. The position of MU k during time slot n within the Cartesian plane is expressed as $\\mathbf{u}_{k}[n]=[x_{u,k}[n], y_{u,k}[n]]^T$, and BS m is fixed at location $\\mathbf{q}_{m} = [x_{b,m}, y_{b,m}]^T$. In this paper BS m and MEC server m are used substitutively for each other. Consider that the movement of MUs typically exhibits temporal dependency, namely, their current position and speed are dependent on their previous states. The Gaussian-Markov model, a stochastic process with memory, effectively captures this time-related dependency and is straightforward to imple-ment. Therefore, we employ the Gaussian-Markov model to characterize the mobility of MUs [29]\u2013[31]. Within time slot n, the velocity $v_{k}[n]$ and the movement direction $\\theta_{k}[n]$ of MU k are determined by the subsequent equations:\n$v_{k}[n]=\\mu_{1}v_{k}[n-1]+(1-\\mu_{1})\\bar{\\xi}+\\sqrt{1-\\mu_{1}^{2}}\\Phi_{k}$, (1)\n$\\theta_{k}[n]=\\mu_{2}\\theta_{k}[n-1]+(1-\\mu_{2})\\bar{\\theta}+\\sqrt{1-\\mu_{2}^{2}}\\Psi_{k}$, (2)\nwhere $\\bar{\\xi}$ is the average speed of MU, $\\bar{\\theta}$ is the average moving direction of MU, $0 \\leq \\mu_{1}, \\mu_{2} \\leq 1$ is the influence of MUs' previous state on the current state, $\\Phi_{k}$ and $\\Psi_{k}$ follow the Gaussian distribution satisfying the mean and variance of $(\\xi_{v_{k}}, \\xi_{v_{k}})$ and $(\\xi_{\\theta_{k}}, \\xi_{\\theta_{k}})$, respectively. Therefore, MU k\u2019location is updated as follows:\nx_{u,k}[n]=x_{u,k}[n-1]+v_{k}[n-1]cos(\\theta_{k}[n-1])\\delta_{t}, (3)\ny_{u,k}[n]=y_{u,k}[n-1]+v_{k}[n-1]sin(\\theta_{k}[n-1])\\delta_{t}. (4)\nA. Two-Timescale Operation Model\nTo ensure the real-time performance of the DT, the MEC servers in BSs require frequent synchronization of information from the MUs. Furthermore, the MUs may switch their BS association after moving for a period of time, making it necessary to migrate the DT. Meanwhile, to avoid dense network overhead, we consider DT migration over a large timescale. Thus, we adopt a two-timescale operation model to represent the different frequencies of DT synchronization and DT migration."}, {"title": "B. Communications Model", "content": "1) MU-to-BS transmission model: For the uplink trans-mission, MU k is associated with one BS. The association between MU k and BS m during time slot n is indicated by $a_{k,m}[n]$. The transmission link quality directly correlates with the proximity between the MU and the BS, incentivizing MU k to link with the nearest BS for optimal transmission quality. Therefore, if MU k is closest to BS m, we have $a_{k,m}[n] = 1$, otherwise $a_{k,m}[n] = 0$. The transmit power of MU k at time slot n is represented by $p_{k}[n]$. In practical implementation, the channel that exists between the MU and the BS is typically modeled by a Rician fading channel, which is characterized as follows [32]:\n$h_{k,m}[n]=\\sqrt{\\frac{p_{0}}{d_{k,m}[n]}}\\left(\\sqrt{\\frac{\\kappa}{\\kappa+1}}h_{k,m}[n]+\\sqrt{\\frac{1}{\\kappa+1}}h_{k,m}[n]\\right)$, (5)\nwhere $p_{0}$ is indicative of the channel power gain at a bench-mark distance of 1 meter. The path loss exponent is given by $\\gamma \\geq 2$. We define $d_{k,m}[n]=||q_{m}[n]-u_{k}[n]||^{2}$ as the Euclidean distance between MU k and BS m. $\\kappa$ reflects the Rician factor that indicates the ratio of power between the direct and indirect signal components. $h_{k,m}[n]\\in\\mathbb{C}$ corresponds to the line-of-sight (LoS) channel component, where $h_{k,m}[n]=1$. $h_{k,m}[n]\\in\\mathbb{C}$ pertains to the non-line-of-sight (NLOS) channel component and follows a complex Gaussian distribution with a mean of zero and a variance of one, denoted by $h_{k,m}[n] \\sim \\mathcal{CN}(0,1)$. Let the transmit signal symbol of MU k be $x_{k}[n] \\sim \\mathcal{CN}(0, 1)$, the signal received at BS m from MU k is expressed as\nY_{k,m}[n]=a_{k,m}[n]\\sqrt{p_{k}[n]}h_{k,m}[n]x_{k}[n]+\\sum_{i=1,i\\neq k}^{K}\\sum_{m=1}^{M}a_{i,m}[n]h_{i,m}[n]\\sqrt{p_{i}[n]}x_{i}[n]+n_{0}[n], (6)\nwhere $n_{0}[n] \\in \\mathbb{C}$ is the additive white Gaussian noise, with $n_{0}[n] \\sim \\mathcal{CN}(0,\\sigma^{2})$. The signal-to-interference-plus-noise ratio (SINR) received at BS m is obtained as\n\\gamma_{k,m}[n]=\\frac{p_{k}[n]|h_{k,m}[n]|^{2}}{\\sum_{i=1,i\\neq k}^{K}\\sum_{m=1}^{M}a_{i,m}[n]|h_{i,m}[n]|^{2}p_{i}[n]+\\sigma^{2}}. (7)\nAccordingly, the transmission rate of MU k is represented as\nR_{k}[n]=\\sum_{m=1}^{M}a_{k,m}[n]B\\log_{2}(1+\\gamma_{k,m}[n]), (8)\nwhere B is the communication bandwidth.\n2) BS-to-BS transmission model: In the scenario where the DT of MU k is deployed on MEC server j, and the MU's associated BS i satisfies $i \\neq j$, the BS i must facilitate the transfer of the DT synchronization data for MU k to BS j. We introduce a binary variable $\\varsigma_{k,i,j}[n]$ to represent the relationship between the BS i associated with MU k and the BS j where the DT of MU k is deployed. When $\\varsigma_{k,i,j}[n] = 1$ and $i \\neq j$, it means that MU k is associated with BS i, and the DT of MU k is deployed at BS j. This implies that wired communication resources are allocated from BS i to BS j for MU k. Otherwise, $\\varsigma_{k,i,j}[n] = 0$. The wired link connection is established between servers at BS i and BS j, and $w_{i,j}$ represents the total transmission rate from BS i to BS j. $w_{i,j,k}[n]$ is defined as the allo-cated transmission rate to transmit MU k's data from BS i to BS j. This allocation complies to the constraint that $0 \\leq \\sum_{k=1}^{K} (\\varsigma_{k,i,j}[n] w_{i,j,k}[n] \\leq w_{i,j}$. For simplicity, the wired transmission rate to transfer the data of MU k between BSs is given by $w_{k}[n] = \\sum_{i=1}^{M}\\sum_{j=1}^{M}(\\varsigma_{k,i,j}[n] w_{i,j,k}[n]$."}, {"title": "C. DT Synchronization Model", "content": "Denote $\\beta_{k}(q) \\in M$ as the MEC server where the DT of MU k is deployed. Each MU may request to synchronize its information with the DT during each time slot, and the generation of requests of each MU follows the Bernoulli distribution with success probability $\\lambda_{k}$, which represents the request generation rate of MU k. Define $\\alpha_{k}[n]$ as a binary indicator, such that $\\alpha_{k}[n] = 1$ signifies that MU k initiates a request during time slot n, while $\\alpha_{k}[n] = 0$ indicates no request is made. Consequently, the probability that MU k makes a request is denoted by $\\Pr(\\alpha_{k}[n] = 1) = \\lambda_{k}$, and the probability of not making a request is $\\Pr(\\alpha_{k}[n] = 0) = 1 - \\lambda_{k}$. Specifically, the DT synchronization information of MU k's request at each time slot n can be described as $\\Omega_{k}[n] = (D_{k}[n], C_{k}[n], \\mathcal{T}_{k}[n])$, where $\\mathcal{T}_{k}[n]$ denotes the latency constraint that needs to be met at the start of the time slot. To maintain prompt synchronization of DTs, it is stipulated that the synchronization delay must not surpass the duration of a single time slot, i.e. $\\mathcal{T}_{k}[n] < \\delta t$. $D_{k}[n]$ and $C_{k}[n]$ denote the size of DT synchronized data and the average count of central process unit (CPU) cycles needed to process one bit of data for MU k, respectively. When MU k is associated with BS m', i.e., $a_{k,m'}[n] = 1$, the DT synchronization delay for MU k is determined by the following calculation:\n\\tau_{k}[n] =\\begin{cases}\\frac{D_{k}[n]}{R_{k}[n]}+\\frac{D_{k}[n]C_{k}[n]}{f_{k,\\beta_{k}(q)}[n]}, & a_{k,m'}[n] = a_{k,\\beta_{k}(q)}[n],\\\\\\frac{D_{k}[n]}{w_{k}[n]}+\\frac{D_{k}[n]C_{k}[n]}{\\sum_{k=1}^{K} \\sum_{i=1}^{M} \\sum_{j=1}^{M} \\varsigma_{k,i,j}[n] w_{i,j,k}[n]}, & a_{k,m'}[n] \\neq a_{k,\\beta_{k}(q)}[n],\\end{cases} (9)\nwhere $f_{k,\\beta_{k}(q)}[n]$ is the computing frequency allocated to MU k by MEC server $\\beta_{k}(q)$. (9) indicates that when the BS associated by MU k is the same as the MEC server where the DT of MU is deployed, i.e., $a_{k,m'}[n] = a_{k,\\beta_{k}(q)}[n]$, the DT synchronization delay $\\tau_{k}[n]$ for consists only of MU k's transmission delay and the processing delay at MEC server $\\beta_{k}(q)$, otherwise the transmission delay between BSs for the MU's data needs to be considered, i.e., $\\frac{D_{k}[n]}{w_{k}[n]}$. Considering the limited computing capability per MEC server, we have the following constraints\n0 \\leq f_{k,\\beta_{k}(q)}[n] \\leq f_{k,\\beta_{k}(q)}^{max}, (10)\n0 < f_{k,m}[n] \\leq f_{m}^{max}, (11)\nwhere $f_{m}^{max}$ is the maximum computing frequency of the MEC server m."}, {"title": "D. DT Migration Model", "content": "The DT migration may occur when $\\beta_{k}(q) \\neq \\beta_{k}(q-1)$. If the DT migration of MU k is decided, $G_{k}$ consecutive time slots will be utilized for DT migration, where $0 < G_{k} < T$, and the collection of time slots allocated for DT migration is defined as $\\mathcal{T}_{G_{k}} \\overset{\\triangle}{=} {qT, qT + 1, ..., qT + G_{k} - 1}$. Corresponding to this, we have $\\mathcal{T}_{G_{k}} = {\\emptyset}$ when the DT migration of the MU is not triggered. Note that the synchronization of MU is not allowed during the migration of the MU's DT. However, the occurrence of synchronization failure cannot be entirely prevented due to migration delay of DT and wireless channel fluctuations. More specifically, when a MU initiates a synchronization request, it may encounter failure un-der two conditions. Firstly, if its DT is undergoing migration, it may be unable to establish synchronization successfully. Secondly, if the synchronization time required exceeds the specified latency requirement, the synchronization request is deemed unsuccessful. To quantify this variable, we establish the DT synchronization failure factor $X_{k}[n]$, which takes a value from the set {0,1} for each time interval n. If $X_{k}[n]$ is assigned a value of 1, it signifies that a synchronization attempt has failed at time slot n. Conversely, a value of 0 indicates a successful synchronization. The synchronization failure factor $X_{k}[n]$ is mathematically articulated as follows:\nX_{k}[n] = \\begin{cases}I(\\alpha_{k}[n] = 1), & \\text{if } n \\in \\mathcal{T}_{G_{k}},\\\\I(\\alpha_{k}[n] = 1, \\tau_{k}[n] > \\mathcal{T}_{k}[n]), & \\text{if } n \\in \\mathcal{T}_{q}\\backslash \\mathcal{T}_{G_{k}},\\end{cases} (12)"}, {"title": "E. Problem Formulation", "content": "where I(\u00b7) = 1 if DT synchronization fails, and I(\u00b7) = 0 otherwise.\nConsidering that the MUs usually have limited energy resources that are difficult to replenish, it is advantageous to maintain the DTs at the BS, which have abundant power supply. In addition, the main energy consumption of MU is caused by transmission power, and optimizing transmission energy consumption is beneficial for maintaining DT synchro-nization for long time. The energy consumption of MU k can be quantified using the following expression:\nE_{k}[n] = p_{k}[n]\\frac{D_{k}[n]}{R_{k}[n]} (13)\nParticularly, we aim at minimizing the long-term energy con-sumption of the MUs by jointly optimizing the transmission power of MUs $\\mathbf{p} \\overset{\\triangle}{=} {p_{k}[n], k \\in \\mathcal{K}, n \\in \\mathcal{N}}$, the transmission rate between BSs $\\mathbf{w} \\overset{\\triangle}{=} {w_{i,j,k}[n], i \\neq j, i,j \\in \\mathcal{M},k \\in \\mathcal{K}, n \\in \\mathcal{N}}$, the DT deployment $\\boldsymbol{\\beta} \\overset{\\triangle}{=} {\\beta_{k}(q), k \\in \\mathcal{K},q\\in\\mathcal{Q}}$, and the computation resource allocation at MEC servers $\\mathbf{f} \\overset{\\triangle}{=} {f_{k,m}[n], k \\in \\mathcal{K},m \\in \\mathcal{M},n \\in \\mathcal{N}}$. Building upon the previously stated definitions, the formulation of the optimiza-tion problem is as follows:\n\\min_{\\boldsymbol{\\beta},\\mathbf{p},\\mathbf{w},\\mathbf{f}}\\underset{Q \\rightarrow \\infty}{\\lim} \\frac{1}{QKT}\\sum_{q=0}^{Q-1}\\sum_{n \\in \\mathcal{T}_{q}}\\sum_{k=1}^{K}E{E_{k}[n]} (14a)\ns.t.\\underset{Q \\rightarrow \\infty}{\\lim} \\frac{1}{QT}\\sum_{q=0}^{Q-1}\\sum_{n \\in \\mathcal{T}_{q}} E{X_{k}[n]} \\leq \\epsilon, k \\in \\mathcal{K}, (14b)\n\\beta_{k}(q) \\in \\mathcal{M}, k \\in \\mathcal{K}, q \\in \\mathcal{Q}, (14c)\n0 \\leq p_{k}[n] < P_{max}, k \\in \\mathcal{K}, n \\in \\mathcal{N}, (14d)\nw_{i,j,k}[n] > 0, \\qquad i \\neq j, i, j \\in \\mathcal{M}, k \\in \\mathcal{K}, n \\in \\mathcal{N}, (14e)\n0 \\leq w_{i,j,k}[n] \\leq w_{i,j}, (14f)\n0 \\leq \\sum_{k=1}^{K} (\\varsigma_{k,i,j}[n] w_{i,j,k}[n] \\leq w_{i,j}, \\qquad i \\neq j, i, j \\in \\mathcal{M}, n \\in \\mathcal{N}, (14g)\n0 \\leq f_{k,\\beta_{k}(q)}[n] \\leq f_{\\beta_{k}(q)}^{max}, k \\in \\mathcal{K}, q \\in \\mathcal{Q}, n \\in \\mathcal{N}, (14h)\n0 \\leq \\sum_{k=1}^{K} f_{k,m}[n] \\leq f_{m}^{max}, m \\in \\mathcal{M}, n \\in \\mathcal{N}, (14i)\nwhere E{} represents the expectation, which is taken over the MU mobility, DT synchronization request, and channel randomness. $\\epsilon$ is the threshold cap of the DT synchronization failure ratio. $P_{max}$ is the maximum transmission power of the MU k. (14b) limits the long-term failure ratio of DT synchro-nization. (14c) is the association factor between the MU k and the MEC server m. (14d) limits the transmission power of the MU k. (14e) and (14f) limit the wired transmission rate from BS i to BS j. (14g) and (14h) are the allocation of computation resources for the MEC server. That problem (14) is a nonlinear integer programming problem due to the nonconvexity of objective function and the existence of integer variables. This problem becomes even more complex to capture the real-time decision-making mechanism since it involves the mobility of MUs, DT syn-chronization requests, and channel randomness. Specifically, in the absence of prior knowledge about the dynamic channel conditions and the network environment, traditional offline algorithms struggle with rendering real-time decisions to arrive at a solution for the problem. This is because the typical offline optimization algorithm needs to know all the state informa-tion of the network before solving the optimization problem. Therefore, traditional iterative offline algorithms make it hard to solve the problem timely. As an ML method, MADRL is capable of interacting and learning from the environment and finally obtains a policy model that can be deployed on the devices, thereby facilitating real-time decisions and meeting long-term benefits according to the current state."}, {"title": "III. PROBLEM TRANSFORMATION AND POMDP FORMULATION", "content": "To address the long-term reliability constraint present in problem (14), we will first reformulate it utilizing the Lya-punov optimization theory. Next, we formulate the problem as a POMDP with multiple agents to make it suitable for MADRL.\nA. Problem Transformation\nImplementing conventional MADRL techniques to the prob-lem presented is complex due to the complications involved in addressing the long-term reliability constraint (14b) high-lighted in [33], [34]. Therefore, we utilize the virtual queue method combined with Lyapunov optimization theory to refor-mulate our problem [35]. Therefore, to satisfy the reliability constraint (14b), we create a virtual queue vector $\\mathbf{Y}[n] = [Y_{1}[n], Y_{2}[n], ..., Y_{k}[n]]^{T}$ that models the DT synchronization reliability conditions for each MU. The variable $Y_{k}[n]$ changes according to the following rule:\nY_{k}[n+1] = [Y_{k}[n] + X_{k}[n] - \\varepsilon]^{+}, (15)\nwhere $[.]+ = max{,0}$. $Y_{k}[n]$ refers to the queue length at the time slot n, initialized as $Y_{k}[0] = 0$, which measures the extent by which the current backlog of synchronization failures surpasses the threshold $\\varepsilon$. Utilizing Lyapunov optimization theory, the reliability constraint (14b) can be transformed into a mean-rate stability condition for the virtual queue, such that $\\underset{n \\rightarrow \\infty}{lim} E{Y[n]}/n = 0$. Then, we define the Lyapunov function $L(\\mathbf{Y}[n]) = \\mathbf{Y}^{T}[n]\\mathbf{Y}[n]$ to assess how well the system adheres to the reliability constraints. A low value of this function indicates a reliable and stable system, while a high value suggests potential reliability issues, requiring corrective measures for improved performance. Moreover, the conditional Lyapunov drift over a T-slot duration, also referred to as a frame, is denoted by $\\Delta L[n] = E {L(\\mathbf{Y}[n + T]) - L(\\mathbf{Y}[n])|\\mathbf{Y}[n]}$, and the upper bounds for this are provided by the two lemmas presented below."}, {"title": "Lemma 1:", "content": "Define $\\Delta L_{k}[n] = E{L(Y_{k}[n + T]) - L(Y_{k}[n])|Y_{k}[n]}$, then $\\Delta L_{k}[n]$ can be upper bounded by\n$\\Delta L_{k}[n]<B_{k,1}T+E\\sum_{n \\in T_{q}}(Y_{k}[n])[X_{k}[n]-\\varepsilon] | Y_{q T} (16)\nwhere $B_{k,1} \\overset{\\triangle}{=} (k + \\varepsilon^{2})$ is a constant."}, {"title": "Lemma 2:", "content": "$\\Delta L_{k}[n] \\leq B_{k, 2} T+E\\sum_{n \\in T_{q}}(Y_{k}[n])[X_{k}[n]-\\varepsilon] | Y_{q T} (17)\nwhere $B_{k, 2} \\overset{\\triangle}{=} B_{k,1} + (T-1)[(1-\\varepsilon)\\lambda_{\\mu}+\\varepsilon^{2}]/2$ is a constant. Hence, Lemma 2 provides an upper bound for the drift-plus-penalty function $\\Delta L_{k}[n]$, eliminating the requirement of predicting the future value of $Y_{k}[n]$ within each time frame. This upper bound significantly reduces the complexity of the problem and makes it well-suited for the two-timescale model. Based on the Lyapunov optimization theory, the objective function of the original problem (14), which aims to minimize the long-term average energy consumption while ensuring the DT synchronization reliability constraints, can be reformulated as the minimization of the drift-minus-bounds function, ex-pressed as follows:\n\\underset{\\mathbf{p}, \\boldsymbol{\\beta}, \\mathbf{w}, \\mathbf{f}}{min} \\quad \\eta \\Delta L[n]+\\frac{1}{Q K T} \\sum_{q=0}^{Q-1} \\sum_{n \\in \\mathcal{T}_{q}} \\sum_{k=1}^{K} E\\left{E_{k}[n]\\right}+ \\frac{1}{Q K} \\sum_{q=0}^{Q-1} \\sum_{n \\in \\mathcal{T}_{q}} \\sum_{k=1}^{K} B_{k, 2} T+E\\left{Y_{k}[q T]\\left[Y_{k}[q T] \\sum_{n \\in \\mathcal{T}_{q}}\\left[X_{k}[n]-\\varepsilon\\right]\\right]\\right} (18)\nwhere $\\eta$ denotes the control factor that governs the tradeoff between energy consumption and DT synchronization relia-bility. By disregarding terms in the objective function that are"}, {"title": "B. Modeling of the POMDP", "content": "unrelated to the optimization variables", "follows": "n\\underset{\\boldsymbol{\\beta},\\mathbf{p},\\mathbf{w},\\mathbf{f}}{min}\\underset{Q \\rightarrow \\infty}{\\lim} \\sum_{q=0}^{Q-1} \\sum_{n \\in \\mathcal{T}_{q}} \\sum_{k=1}^{K} E\\left{\\Xi_{k}[n", "Xi_{k}[n": "overset{\\triangle}{=} \\frac{E_{k}[n", "Y_{k}[qT": "left[X_{k}[n", "varepsilon\\right": "."}]}