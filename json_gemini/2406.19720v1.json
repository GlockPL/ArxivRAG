{"title": "CUPID: Improving Battle Fairness and Position Satisfaction in Online MOBA Games with a Re-matchmaking System", "authors": ["Ge Fan", "Chaoyun Zhang", "Kai Wang", "Yingjie Li", "Junyang Chen", "Zenglin Xu"], "abstract": "The multiplayer online battle arena (MOBA) genre has gained significant popularity and economic success, attracting considerable research interest within the Human-Computer Interaction community. Enhancing the gaming experience requires a deep understanding of player behavior, and a crucial aspect of MOBA games is matchmaking, which aims to assemble teams of comparable skill levels. However, existing matchmaking systems often neglect important factors such as players' position preferences and team assignment, resulting in imbalanced matches and reduced player satisfaction. To address these limitations, this paper proposes a novel framework called CUPID, which introduces a novel process called \u201cre-matchmaking\" to optimize team and position assignments to improve both fairness and player satisfaction. CUPID incorporates a pre-filtering step to ensure a minimum level of matchmaking quality, followed by a pre-match win-rate prediction model that evaluates the fairness of potential assignments. By simultaneously considering players' position satisfaction and game fairness, CUPID aims to provide an enhanced matchmaking experience.\nExtensive experiments were conducted on two large-scale, real-world MOBA datasets to validate the effectiveness of CUPID. The results surpass all existing state-of-the-art baselines, with an average relative improvement of 7.18% in terms of win prediction accuracy. Furthermore, CUPID has been successfully deployed in a popular online mobile MOBA game. The deployment resulted in significant improvements in match fairness and player satisfaction, as evidenced by critical Human-Computer Interaction (HCI) metrics covering usability, accessibility, and engagement, observed through A/B testing. To the best of our knowledge, CUPID is the first re-matchmaking system designed specifically for large-scale MOBA games.", "sections": [{"title": "1 INTRODUCTION", "content": "Online multiplayer games offer a wealth of data and scenarios that can be leveraged to study user behavior, making them an interactive medium for research. Through the observation and analysis of players' actions, decisions, and reactions, researchers can gain profound insights into user needs, psychology, and behavioral patterns. These insights are highly valuable for the design and evaluation of Human-Computer Interaction (HCI) systems [1-6]. Among these game, Multi-Player Online Battle Arena (MOBA) games have garnered substantial attention in the Computer Supported Cooperative Work (CSCW) community due to their high level of competitiveness and appeal to spectators. They have attracted a large player base and have become a significant source of economic benefits, particularly through events such as E-Sports tournaments that draw substantial audiences. For example, the immensely popular MOBA game League of Legends (LoL) boasts a registered player base of 150 million, with over 117 million active players on a monthly basis [7]. Similarly, Dota 2 as another renowned MOBA game, hosts The International (TI), an annual E-Sports tournament that consistently offers prize pools exceeding tens of millions of dollars to participating teams for several consecutive years [8]. Given the immense popularity and economic significance of MOBA games, understanding players' behaviors within these games has become crucial to enhance their gaming experience. Consequently, substantial attention has been directed towards studying these behaviors and their underlying factors [9-12].\nMOBA games usually involve two teams of players compete against each other with the goal of destroying the opposing team's core structure. They are renowned for their amalgamation of real-time strategy, role-playing, and action game elements [13]. Its team-up mechanism relies on the matchmaking system to construct balanced and competitive matches by pairing players of comparable skill levels by searching for suitable teammates and opponents. This aspect is crucial for ensuring a fair, competitive and enjoyable gaming experience. To this end, two key objectives must be fulfilled: (i) allowing each player to select their preferred position and character within the game, and (ii) maintaining overall game fairness and avoiding overwhelming gameplay\u00b9 [11], wherein a significant skill discrepancy within teams leads to an unsatisfactory experience. The achievement of these objectives is intricately tied to the efficacy of matchmaking systems, as their quality directly impacts players' satisfaction [14, 15], retention [16], and the game's lifecycle [17]. As such, the matchmaking system stands as a pivotal component within the MOBA game.\nExisting matchmaking systems in the MOBA games commonly utilize Matchmaking Ratings (MMR) [11, 18-22]. MMR serves as a quantitative measure to assess the skill levels of players, condensing this information into a single-dimensional value. The system calculates the MMR for each player by considering their historical game outcomes and performances. However, the MMR often fail to consider the crucial aspect of team assignment in online matchmaking. In MOBA games, the collective MMR of a team is greatly influenced by the specific assignment of its individual members. Even if players possess the same overall MMR rating, the actual performance of a team can significantly differ due to variations in individual players' proficiency across different positions, roles, or champions. Consequently, there exists a notable disparity between the team's actual skill level and the skill level estimated solely based on MMR. The left section of Figure 1 (subplots (a)(b)(d)) shows a common limitation of conventional MMR-based matchmaking systems. Despite matching players with similar MMR and ensuring that the red and blue teams have equal overall MMR, the absence of a skilled player in the Jungle position on the blue team and wrongly position assignment for player 5 leads to two main issues: (i) an imbalanced team assignment, as players are assigned to unfamiliar positions to compensate for the absence, and (ii) player dissatisfaction due to being assigned to an undesired position. Consequently, the blue team becomes more vulnerable to defeat against the red team. Moreover, the intricate dynamics between different team assignments introduce coordination and counterplay relationships that further exacerbate this phenomenon.\nFurthermore, players in MOBA games often exhibit distinct preferences for different positions, as evident from their pre-selected positions and historical selection frequencies. These position preferences play a vital role in determining the appropriateness of position assignments, individual"}, {"title": "3 PRELIMINARY", "content": "This section presents an overview of Multiplayer Online Battle Arena (MOBA) games and their matchmaking systems. We also discuss the primary objective and function of the re-matchmaking system."}, {"title": "3.1 Background", "content": ""}, {"title": "3.1.1 MOBA Game", "content": "The Multiplayer Online Battle Arena (MOBA) [13] genre has witnessed a significant surge in popularity within the competitive video game landscape. We first explain the common terms used in MOBA games in Table 1. In a typical MOBA game, two teams, commonly known as the blue team and the red team, engage in virtual battles within an arena setting. Within the classical MOBA game setup, players are matched with teammates and opponents via a matchmaking system. This process results in the formation of teams comprising five players, each controlling a unique game character, who then compete against another team. The primary objective of the matchmaking system is to establish equitable matches by pairing players with comparable gaming abilities. Throughout gameplay, each player selects a champion and collaborates closely with their team to achieve victory. This involves the strategic elimination of enemy characters, destruction of their structures, and ultimately, the annihilation of the opposing team's core structure, often referred to as the \u201cNexus\u201d or \u201cAncient\u201d. Figure 2(a) showcases a screenshot example of a game in the popular multiplayer online battle arena game League of Legends (LoL). The screenshot captures an intense battle between a player-controlled champion and an enemy champion in the bottom lane. This depiction exemplifies the dynamic and action-packed nature of battles that occur within the game.\nTo facilitate efficient collaboration, players in MOBA games are typically assigned specific positions within their teams. These positions, often referred to as lanetypes or roles, define the distinct responsibilities and tasks that players undertake during gameplay. While position assignment methods may vary across different MOBA games, positions tend to remain relatively stable within a specific game duration. For example, in LoL, positions are categorized as Top, Jungle, Mid, Bottom, and Support. Figure 2(b) illustrates the different lanes on a mini-map in the game, representing the assigned positions for players. The mini-map provides a visual representation of the game map, highlighting specific areas where players fulfill their roles and engage in gameplay activities. Throughout this research, we adopt this standardized naming convention to maintain clarity and consistency."}, {"title": "3.1.2 Matchmaking systems in MOBA games", "content": "Matchmaking systems play a crucial role in MOBA games by uniting players of similar skill levels, creating balanced teams, and ensuring fairness and competitiveness. MMR-based matchmaking systems have been widely implemented in the industry for most MOBA games, where each player is assigned a numerical MMR score representing their skill level. This score is determined based on factors such as game outcomes and prior performance. Winning increases MMR, while losing decreases it. During the match creation process, the matchmaking system considers the MMR scores of players to form teams with comparable total MMR, aiming for well-balanced matchups.\nIn addition to skill-based matchmaking, the allocation of players' positions has gained recognition in recent advancements of industrial game matchmaking systems. These systems enforce players to select pre-defined positions before the game starts. Figure 3 provides an illustrative example of the matchmaking process in LoL from a player's perspective. Positions in a MOBA game correspond to distinct lanes on the game map and determine a player's role (e.g., Mid, Support). The matchmaking system takes into account players' position preferences to avoid conflicts and pairs them accordingly. However, this approach imposes rigid position constraints, reducing the"}, {"title": "3.2 Re-matchmaking Process Formulation", "content": "The objective of the proposed re-matchmaking process in this paper is to optimize player position satisfaction and game fairness by allocating players to teams and positions. This process is illustrated in Figure 1. Initially, the MMR-based matchmaking system gathers 10 players using a MMR-based matchmaking algorithm to form a match. The system then generates multiple sets of position assignments based on satisfaction and fairness metrics. From these assignments, an optimal assignment is selected that maximizes overall position satisfaction and game fairness."}, {"title": "3.2.1 Team and Position Assignment", "content": "The re-matchmaking process in CUPID aims to achieve the desired outcome by assigning each player to a specific team and position within the game. We represent the assignment of player n to team tn and position in as An. The primary objective of the team and position assignment is to identify the optimal assignment A for all players, denoted as A = {A1, A2,..., AIN,N}, that maximizes position satisfaction and game fairness. This assignment process forms the fundamental basis of the re-matchmaking process as well as the CUPID framework."}, {"title": "3.2.2 Position Satisfaction", "content": "Enabling players to select their desired positions is a primary objective of MOBA matchmaking systems. The preference information regarding player positions is explicit and valuable, and it holds significance throughout the entire matchmaking process. This information is scarce and precious, and when a player is unable to obtain their preferred position, it can negatively impact the gaming experience for all participants in the match.\nWe employ a modeling approach that utilizes the user's historical information and pre-selected position data to determine a position satisfaction score ranging from 0 to 1. This score represents the likelihood of the user being satisfied with a particular position. Higher satisfaction scores indicate a greater level of contentment with the corresponding positions. We assume that the satisfaction probabilities for each user and position are independent. Denoting the satisfaction score of player n for his assigned position in as pn, the total satisfaction probability PA of all players for this assignment A is obtained by the product of individual satisfaction probabilities, i.e.,"}, {"title": "3.2.3 Win Rate Prediction", "content": "Win rate prediction is a crucial task in assessing match fairness, as it provides an estimation of the probability that one team will win against another for a specific assignment A prior to the battle. The predicted win rate serves as a valuable metric for evaluating the fairness of a match. The closer the win rate is to 50%, the higher the level of fairness. To quantify match fairness for a specific assignment A, we utilize the win rate prediction model to transform the win rate prediction results for the assignment A, denoted as \u0177A, into match fairness scores, denoted as sA. The match fairness score is calculated using the following formula:"}, {"title": "4 THE DESIGN OF CUPID", "content": "In Section 4.1, we present an overview of the overall architecture of CUPID, highlighting its key components and their interactions. In the following subsections, we delve into the details of each selected component, providing a comprehensive understanding of their functionalities and contributions to the overall system."}, {"title": "4.1 CUPID in a Nutshell", "content": "The overall architecture of CUPID is depicted in Figure 4. It comprises five essential components that collectively support the re-matchmaking process and ensure high-quality matchmaking. These components are the game backend server, policy server, model server, online/offline database systems, and offline training pipeline.\nTo recap the re-matchmaking process illustrated in Figure 1, when a matchmaking request is received, the game backend server quickly assembles 10 players with similar MMRs using a matchmaking algorithm and collects their corresponding features. These features are then sent to the policy server and stored in an online Redis database for backup. Concurrently, the policy server queries the online database for historical features of the players and filters out assignments that do not meet the satisfaction constraint, generating a set of candidate assignments.\nAfter performing feature engineering, the processed features are sent to the model server, where the OmniNet within OmniNet (OwO) model is employed for win rate prediction. The predicted results are translated into fairness scores, as defined in Section 3.2.3, and sent back to the policy server. The policy server then ranks the assignments based on their predicted fairness scores and recommends the best assignment to the game backend server as the final matchmaking result."}, {"title": "4.2 Feature Collection", "content": "Numerous prior studies have established a positive correlation between model performance and data quality [80, 84, 85]. To accurately characterize MOBA game players, the game backend sever collects a diverse and comprehensive set of features from multiple sources, categorized into different feature groups. These feature groups enable us to comprehensively profile the skill, preferences, behaviors, and habits of the players [86]. The feature groups include:\n\u2022 Short-term Features. These features encapsulate the detailed game performance of the player in the last K games. They include metrics such as the number of kills, deaths, assists, selected positions, and champions. The aim of these features is to capture the player's recent performance and preferences, which reflect their behavioral trends.\n\u2022 Long-term Features. These features encompass the overall statistics of the player in the last 30 games. They include metrics such as the average number of kills and deaths, the number of selections for each position, and the corresponding performance, as well as the most frequently selected champions. The purpose of these features is to provide a high-level overview of the player's performance and preferences.\n\u2022 Real-time Features. These features include the instantaneous MMR scores of the player across different versions of the game, the player's pre-selected position, and their instantaneous position satisfaction. These features capture the player's real-time game skill and preferences.\n\u2022 Team-term Features. These features provide aggregated summaries of both teams in the game, such as the average MMR of each team. These features offer an evaluation at the team level, enabling a broader perspective on the game dynamics.\nTable 2 provides examples and statistics of the feature sets utilized in the MOBA game prediction model. The features cover a range of information, including team-related metrics (e.g., Team_MMR_Mean), champion usage (e.g., Championid_Top_1), and player preferences (e.g., Available_position_1). These features capture various aspects of the game and the player's behavior. The original data from the game consists of different types, such as categorical and numerical features. To enhance the model's robustness, we apply feature engineering techniques, such as bucketing, to transform the original features into one-hot encoded representations before feeding them into the model [47, 87]. The \u201cDimensionality\u201d column in the table indicates the size of the one-hot encoded features, which serve as inputs to the model. By utilizing these diverse features, CUPID is able to comprehensively profile players from different perspectives, surpassing the limitations of MMR-based models that rely solely on a single score. This approach enables a more nuanced understanding of players' characteristics and preferences, leading to more accurate matchmaking and improved gaming experience."}, {"title": "4.3 Candidate Assignments Generation and Filtering", "content": "Candidate assignment generation and filtering are essential functions performed by the policy server to ensure players' position satisfaction and eliminate redundant assignment candidates. As depicted in Figure 3(a), players have the option to pre-select one or more preferred positions before the match begins, enabling them to showcase their abilities and make a valuable contribution to the team. Pre-selected positions serve as explicit signals, aiming to prevent internal disputes and promote team harmony once the game starts. The satisfaction score for player n in position i is denoted as pni. For the player's pre-selected position, the satisfaction score is set to the maximum value. For other positions, the satisfaction score is determined based on the player's historical selection frequency. Positions that have been frequently chosen in the past receive higher satisfaction scores, indicating a stronger preference for those positions. This scoring mechanism ensures that players are assigned to positions that align with their preferences, promoting a higher level of satisfaction and a more enjoyable gaming experience.\nIn a standard MOBA game with 10 players, 2 teams, and 5 positions, the total number of possible assignments A, considering all combinations without any constraints, amounts to A10 = 3,628, 800 assignments. However, it is impractical to handle such an enormous number of model queries online within the time constraints of a matchmaking request. Therefore, a pre-filtering process is necessary to eliminate redundant assignments that do not align with the objectives of the CUPID framework. To perform this pre-filtering, we leverage the overall satisfaction score PA as a filtering criterion. This score serves as one of the key objectives of the re-matchmaking process and can be computed efficiently even with a large number of requests. The satisfaction-based filtering process is both simple and effective. If the overall satisfaction score of an assignment A falls below a predetermined threshold Pt, i.e., PA < Pt, that assignment is removed from the candidate set. The specific value of Pt is determined by the game designers. Note that in real-world MOBA games, it is common for multiple players to form a group and express a preference to play on the"}, {"title": "4.4 Fairness Assessment", "content": "After the satisfaction-based filtering process, the number of candidate assignments is substantially reduced. The remaining assignments are then fed into the win rate prediction model, OmniNet within OmniNet (OwO), which is specifically designed to predict win rates in MOBA games. The goal is to evaluate the fairness of these assignments using the fairness score sA defined in Section 3.2.3. Among the remaining assignments, CUPID selects the one with the highest predicted fairness as the final matchmaking outcome. Next, we will delve into the design of OwO and explain how we enhance its training using a normalized economy difference loss function. This approach allows us to further optimize the prediction accuracy of win rates, contributing to the overall effectiveness of the re-matchmaking process."}, {"title": "4.4.1 OmniNet within OmniNet", "content": "In the OwO model, the primary objective is to predict the win rate of a team based on a given assignment A. The predicted win rate is then translated into a fairness score sA for further evaluation. Figure 5 (a) provides an overview of the overall architecture of OwO, which consists of several key components, each serving a specific functionality. These components include:\nThe OwO model plays a pivotal role in the CUPID framework by predicting the win rate of a team based on a given assignment A. The predicted win rate is then translated into a fairness score sA, which serves as a fundamental criterion for evaluating the fairness of different assignments. Figure 5 (a) provides an in-depth view of the overall architecture of OwO, which encompasses three key components, each serving a distinct purpose:\n\u2022 Temporal OmniNet Encoder (TOE): TOE is responsible for modeling the short-term feature groups of individual players in the last K games. These features capture the recent game performance and preferences of players, enabling the model to incorporate temporal information into the win rate prediction process.\n\u2022 Spatial OmniNet Encoder (SOE): The SOE component focuses on embedding the long-term, real-time, and team feature groups for each player. By incorporating high-level statistics and information about player behavior and team dynamics, the SOE component provides valuable spatial information that enhances the win rate prediction accuracy.\n\u2022 Permutation OmniNet Encoder (POE): The POE component aggregates all the processed embeddings from the TOE and SOE components. Its primary role is to capture the win rate differences resulting from the various permutations of the assignment. By considering the different possible combinations of players in a team, the POE ensures that the model accurately predicts the win rate for each assignment.\nThe output of the POE is subsequently fed into a Multilayer Perceptron (MLP) [88] to perform the final win rate prediction. In our OwO model, we employ individual Temporal OmniNet Encoders (TOEs) to embed the short-term features for each player. These short-term features capture the detailed performance and preferences of a player in the last K games, forming a multivariate sequence. To reduce the overall model complexity, the parameters of the TOEs are shared at the player dimension. This allows us to leverage the collective information from all players while avoiding redundant computations.\nFurthermore, in Figure 5 (a), we observe that the input order of the features is fixed at the player level, corresponding to their assigned position and team. For example, the features of the first player input to the OwO model are those of the player assigned to the Bottom position of the blue team. By maintaining this fixed input order, any changes in the assignment, such as a different player being assigned to the Bottom position or a different team composition, will result in a corresponding change in the team features and the input order at the player level. This permutation change is effectively captured by the POE, which is sensitive to variations in the assignment. This ensures that the model is able to accurately predict the win rate for each assignment and account for the impact of player positions and team compositions on game outcomes.\nThe integration of these three components within the OwO model enables a comprehensive analysis of the assignment, facilitating the generation of accurate win rate predictions. These predictions, in turn, serve as a crucial factor in evaluating the fairness of potential assignments in the re-matchmaking process."}, {"title": "4.4.2 OmniNet Encoder", "content": "The OmniNet encoder is a crucial component of the OwO model, consisting of the TOE, SOE, and POE [89]. These encoders build upon the traditional Transformer model [90] and enable the effective encoding of all relevant information pertaining to MOBA players.\nWe show the structure of the OmniNet Encoder in Figure 5 (b). The Transformer model is widely used for sequential learning tasks, using its multi-head self-attention mechanism [91\u201396]. OmniNet introduces an additional omnidirectional attention mechanism that enhances the learning capabilities of the model [89]. This attention mechanism connects hidden representations across all layers of the model and automatically weighs their importance. The operation of the omnidirectional attention is defined as follows:\n$\\O_{attention}$ = Attention($\\X_1$,$\\X_2$,...,$\\X_{N-1}$),"}, {"title": "4.4.3 Normalized Economy Difference based Optimization", "content": "The win prediction task in the context of MOBA games can be framed as a binary classification problem. To optimize this task, we can utilize the standard binary cross-entropy (BCE) loss function:\n$L = \u2212(y \u00b7 log(\u0177) + (1 \u2212 y) \u00b7 log(1 \u2013 \u0177)).$\nHere, y represents the game outcome, and \u0177 denotes the model's prediction of the win rate. In MOBA games, the final game outcome is closely associated with the economy difference between teams [12]. A larger positive difference indicates a greater advantage for winning the game, while a negative difference suggests that the team is an underdog and more likely to lose the match [98]. By considering the economy difference as a key factor, the model can effectively predict the win rate and contribute to the overall fairness evaluation of potential assignment.\nBased on the aforementioned observation, we enhance the win prediction task by incorporating information about the normalized economy difference (NED) into the loss function. The modified loss function is defined as follows:\n$L_{NED} = \u2212(\u03b1 \u00b7 y \u00b7 log(\u0177) + (1 \u2212 \u03b1) \u00b7 (1 \u2212 y) \u00b7 log(1 \u2013 \u0177)).$\nHere, \u03b1 represents the proportion of the team's economic difference, calculated as \u03b1 = max(T E1,T E2) . The purpose of incorporating \u03b1 is to introduce dynamic label smoothing based on the specific battle context, improving the generalization ability of the proposed model. A positive value of \u03b1 indicates that the blue team has an advantage, leading to a higher weight assigned to the blue team in the loss function. Conversely, a negative value of \u03b1 suggests that the red team is favored, resulting in a higher weight assigned to the red team. By incorporating this economic information, we anticipate that the model will be better equipped to accurately predict battle outcomes and provide deeper insights into the dynamics of team performance in MOBA games."}, {"title": "5 OFFLINE EXPERIMENTS", "content": "In the offline experiment, our primary focus is to evaluate the performance of the win rate prediction model in assessing the ability of OwO to accurately predict game results, which serve as an indicator of fairness in player assignments. To this end, we aim to address the following research questions (RQs):\n\u2022 RQ1: How does OwO perform compare to state-of-the-art methods in MOBA game win rate prediction?\n\u2022 RQ2: How effective are each specific design of feature group and model component in OwO?\n\u2022 RQ3: What impact does the NED loss make to the final win rate prediction?\nWe provide answers to these RQs in the following subsections."}, {"title": "5.1 Experiment Settings", "content": ""}, {"title": "5.1.1 Baseline Methods", "content": "In the offline experiments, we conducted a thorough evaluation of our proposed method by comparing it against 11 baseline models. Namely:\n\u2022 TrueSkill [19]. This probabilistic MMR model updates a player's rating solely based on the game outcome (win/lose). TrueSkill is widely utilized in online multiplayer games and serves as one of the most popular MMR algorithms.\n\u2022 TrueSkill2 [21]. TrueSkill2 builds upon its predecessor by incorporating additional features into the model, such as player experience and skill in other game modes. It typically converges faster and achieves higher accuracy compared to TrueSkill.\n\u2022 QuickSkill [11]. QuickSkill is a deep learning-based model for skill estimation that employs the MMR-Net to learn underlying patterns in player behavior and predict their skill scores in a given game. In this work, we utilized the TrueSkill2-based MMR-Net as the baseline method, as it exhibited superior performance in the original paper.\n\u2022 Logistic regression (LR) [99]. LR is a commonly used shallow model for binary prediction. Many previous works, such as [73, 100], have applied it to predict the final outcome in game battles.\n\u2022 EXtreme Gradient Boosting (XGboost) [72]. XGBoost is an implementation of gradient-boosted decision trees renowned for its speed, performance, and ability to handle large datasets. It has gained popularity in win prediction in games due to its high accuracy and support for parallel processing.\n\u2022 BalanceNet [61]. BalanceNet is a state-of-the-art network-based method used to predict which team will emerge victorious in online games. In line with the original paper, we employed an element-wise tanh activation function in the hidden vectors.\n\u2022 XGBoost with Stacking (XGBStack) [80]. XGBStack demonstrates that incorporating meticulous cross-features can provide additional relevant information to the classifier. As a baseline for comparison, we selected XGBStack, which is a meta-model that achieved the best performance in the original paper.\n\u2022 Multilayer Perceptron (MLP) [101]. MLP is a simple neural network architecture widely employed for various purposes. It consists of multiple layers of nodes, each connected to the next layer, and uses a feed-forward mechanism to propagate information through the network.\n\u2022 Long Short-Term Memory (LSTM) [102]. LSTM is a classical variant of recurrent neural network (RNN) that employs a gating mechanism to capture long-term sequence dependencies.\n\u2022 Transformer [90]. Transformers have gained prominence for their ability to model long-range dependencies in sequential data. Transformers utilize multi-head self-attention mechanisms to replace traditional RNN structures.\n\u2022 OmniNet [89]. OmniNet is a state-of-the-art variant of the transformer architecture that employs omnidirectional attention to connect all tokens across the entire network via self-attention. In this implementation of the proposed method, omnidirectional attention-based structures are utilized. It is also a subcomponent of the proposed OwO."}, {"title": "5.1.2 Datasets", "content": "Due to the limited availability of game features in publicly accessible datasets, we collected extensive industrial datasets from a popular MOBA game encompassing different game modes, including ranking and normal modes 3. To ensure the reliability and accuracy of our analysis, we adopted a standard approach by randomly dividing the samples into a training"}, {"title": "5.1.3 Implementation Details and Evaluation Metrics", "content": "The proposed model was implemented using TensorFlow [103], a widely used open-source machine learning platform. The offline experiments were conducted on a server equipped with 4 Tesla A100 GPUs. For the OmniNet component used in the TOE, SOE, and POE of our proposed method, we configured the hidden layer to have 3 layers, each with 256 units, and 10 attention heads. The final MLP in our model consisted of three hidden layers with hidden units of (256, 128). We experimented with learning rates in the range of 1e-3 to 1e-6 using the Adam optimizer [104].\nGiven that the win rate prediction problem can be framed as a binary classification task and the distribution of labels (i.e., game outcomes) is balanced in both the normal and ranking datasets, we have opted to utilize the widely employed metric of Accuracy [79, 80, 105\u2013107] for evaluating our proposed methods and baselines in the offline experiments. This metric is sufficient to provide an assessment of the models' ability to correctly predict the outcome of games."}, {"title": "5.2 Results Compared with Baselines (RQ1)", "content": "The accuracy of pre-match win rate prediction serves as a crucial indicator for assessing the fairness of performance in matchmaking. In Figure 6, we present the prediction accuracy of all models considered in this study on the test dataset. Observe that our OwO model consistently outperforms all other baseline models in both playing modes, affirming the effectiveness of its design. Specifically, OwO achieves a relative improvement of 2.57% to 18.45% (average 7.18%) on the ranking dataset and a relative improvement of 1.96% to 12.58% (average 6.24%) on the normal dataset. Specifically, the OwO model demonstrates a relative improvement ranging from 2.57% to 18.45% (with an average improvement of 7.18%) on the ranking dataset. Similarly, on the normal dataset, OwO achieves a relative improvement ranging from 1.96% to 12.58% (with an average improvement of 6.24%). The inclusion of dedicated components in OwO allows for the capture of cross-information from diverse features within large datasets. This approach surpasses the conventional feature engineering-based cross-feature design and enables the learning of more effective representations for outcome prediction. The higher prediction accuracy achieved by OwO translates to a higher precision in fairness assessment. These results highlight the potential of using OwO as a win rate prediction model to rank fairness effectively. By enhancing the matchmaking quality, OwO contributes to an improved player experience, ultimately benefiting the overall game ecosystem.\nFurthermore, the model-based approaches outperform the MMR-based methods (TrueSkill and TrueSkill2) in terms of accuracy. This finding supports the idea that relying solely on MMR for matchmaking is insufficient in accurately capturing the relationships between players, potentially leading to unfair match outcomes. Model-based methods, which incorporate additional dimensions of player features, demonstrate a clear advantage in this regard.\nTo assess the effectiveness of the proposed OwO in capturing subtle differences between different team sides, we conducted an experiment using manually generated samples. Specifically, we randomly selected 5,000 examples from the validation set and grouped all users on the blue team. For the opposing side, we constructed users with identical features to those of the blue team, resulting in equal inputs for both teams in each sample. We then generated a histogram of the predicted win rates, as depicted in Figure 7. The results indicate that the model's output is concentrated within a narrow range around 50%, with a mean of 50.5% (ranging from 44.5% to 56.6%,"}, {"title": "5.3 Ablation Studies (RQ2)", "content": "Next, we perform a thorough ablation analysis to assess the impact of each feature group and model component design in CUPID. This analysis provides valuable insights into the contribution of these design choices towards improving the win rate prediction performance."}, {"title": "5.3.1 Performance w.r.t. Model Structures", "content": "To evaluate the individual effectiveness of the three OmniNet-based structures in our proposed OwO model, namely TOE, SOE, and POE, we conducted an ablation study using the ranking dataset. This study aimed to investigate how the accuracy performance changes when one of these components is removed. We replaced each OmniNet-based structure with a Multi-Layer Perceptron (MLP) to create modified versions of the OwO model. For example, OwO w/o TOE indicates the OwO model with TOE replaced by an MLP.\nThe results of the ablation study are presented in Table 4, which show the accuracy and relative improvement achieved by different models. Notably, the OwO model demonstrated the best performance, confirming the effectiveness of our purpose-built design. Specifically, when comparing OwO with and without TOE, OwO exhibited a significant relative improvement ranging from 3.0% to 3.2%. This highlights the power of omnidirectional attention-based structures in extracting high-level information from sequential data. In contrast, when comparing OwO without SOE, the relative improvements were smaller, ranging from 0.6% to 0.8%. This can be attributed to the fact that the input spatial features were processed through feature engineering and transformed into one-hot representations, making it easier for even a simple MLP model to learn good representations. This finding aligns with previous research findings. Furthermore, even in comparison to OwO without POE, OwO still achieved a decent relative improvement ranging from 2.0% to 2.2%. This suggests that OmniNet can effectively learn cross-domain knowledge between different users' embeddings through globally-perceptive attention."}, {"title": "5.3.2 Feature groups comparision", "content": "The experimental results using different combinations of feature groups on the ranking dataset are presented in Table 5. It is evident that the complete OwO model achieved significantly better performance compared to the results obtained with incomplete feature sets. This observation indicates that our proposed model is effective in integrating diverse feature data, extracting advanced representations, and improving prediction accuracy."}, {"title": "5.3.3 One-step vs. two-step matchmaking", "content": "To further demonstrate the superiority of the two-step matchmaking approach, we conducted an offline analysis of the prediction accuracy for both MMR-based and OwO-based methods using the online dataset. The results, presented in Table 6, reveal that in one-step matchmaking, OwO significantly outperforms MMR-based methods that use TrueSkill, indicating a substantial improvement in match fairness. In two-step matchmaking, the MMR-based method is nearly ineffective, with an accuracy below 50% (equivalent to random guessing accuracy)."}]}