{"title": "Custom Non-Linear Model Predictive Control for Obstacle Avoidance in Indoor and Outdoor Environments", "authors": ["Lara Laban", "Mariusz Wzorek", "Piotr Rudol", "Tommy Persson"], "abstract": "Navigating complex environments requires Unmanned Aerial Vehicles (UAVs) and autonomous systems to perform trajectory tracking and obstacle avoidance in real-time. While many control strategies have effectively utilized linear approximations, addressing the non-linear dynamics of UAV, especially in obstacle-dense environments, remains a key challenge that requires further research. This paper introduces a Non-linear Model Predictive Control (NMPC) framework for the DJI Matrice 100, addressing these challenges by using a dynamic model and B-spline interpolation for smooth reference trajectories, ensuring minimal deviation while respecting safety constraints. The framework supports various trajectory types and employs a penalty-based cost function for control accuracy in tight maneuvers. The framework utilizes CasADi for efficient real-time optimization, enabling the UAV to maintain robust operation even under tight computational constraints. Simulation and real-world indoor and outdoor experiments demonstrated the NMPC ability to adapt to disturbances, resulting in smooth, collision-free navigation.", "sections": [{"title": "I. INTRODUCTION", "content": "In recent years, Unmanned Aerial Vehicle (UAV) usage has surged, fueled by advances in control systems and computational power. A major challenge in autonomous UAV operations is implementing strategies such as Non-linear Model Predictive Control (NMPC) [1], which solves an optimization problem to find control inputs in complex environments. Various NMPC frameworks have been proposed, including one that combines linear MPC with nonlinear feedback to achieve agile maneuvers in dynamic, multi-vehicle scenarios without pre-planned paths [2]. Another framework, using Bayesian Policy Optimization efficiently handles dynamic obstacles, combining stochastic optimization and MPC to enable real-time collision avoidance in unpredictable environments [3]. Additionally, deep learning-based approaches have improved real-time control, achieving faster and safer navigation through risk-aware active learning, with up to 50 times faster computation [4]. Another approach integrates sensor constraints and actuator limitations to improve control in complex environments, showcasing NMPC adaptability to multi-rotor systems [5]. Further, NMPC frameworks have been designed for specific applications, such as stabilizing UAVs near barriers while reducing power consumption by up to 12.5% [6], optimizing path-following in wind-disturbed conditions, and improving urban target tracking accuracy with a gimbaled camera for small fixed-wing aircrafts [7], [8]. For example, NMPC has been used in tracking and releasing a cable-suspended load, showing effectiveness in real-time [9]. To ensure safe operations in cluttered environments, another NMPC framework has integrated a deep neural network for collision avoidance using depth images [10]. This approach allows autonomous systems to anticipate and avoid obstacles effectively, increasing safety and reliability. In multi-vehicle formations, NMPC frameworks maintain spatial geometries even with communication delays, ensuring reliability [11].\nHowever, while these frameworks provide valuable solutions, many are tailored for smaller UAVs or specific applications, leaving gaps in general obstacle avoidance and scalability for larger UAVs. In other related work, NMPC frameworks for smaller Micro Aerial Vehicles (MAVs) have been shown to handle full system dynamics well under disturbances [12], but these approaches can face limitations in larger UAVs because of computational demands and more complex dynamics. Similarly, obstacle prediction methods, such as those using the PANOC solver [13], are effective in real-time environments with moving obstacles, but their scalability is limited, especially on platforms with constrained onboard processing power. Additionally, while NMPC combined with visual servoing has been effective in specialized tasks like photovoltaic array inspection [14], such frameworks are narrowly focused and do not necessarily address the broader challenges of general obstacle avoidance in dynamical, real-world conditions. This paper extends these previous efforts by focusing on general obstacle avoidance for large UAVs while focusing on computational efficiency."}, {"title": "A. Problem Statement and Paper Contributions", "content": "Here, we address the problem of obstacle avoidance in UAV flight control by means of model predictive control. NMPC maintains system nonlinearity, enabling the UAV to handle large deviations effectively. Building on [12], we validated an NMPC framework tailored to the DJI Matrice 100, with offloading used to manage computational demands. We applied Python CasADi [15] for optimization and integrated it with Robot Operating System (ROS) [16], providing an open-source code repository for UAV path planning in simulations and real-world tests [17]."}, {"title": "II. METHODS", "content": "This section defines the control framework, including the quadrotor model [18] and customized NMPC algorithms [12] for obstacle avoidance and B-spline trajectory tracking."}, {"title": "A. Quadrotor Dynamics", "content": "The quadrotor is modeled as a rigid body with six degrees of freedom: three translational and three rotational. The state vector x includes the UAV position, orientation angles, and velocities, while the control input vector u consists of thrust T generated by the rotors and the reference angular rates for roll $\\phi_r$, pitch $\\theta_r$, and yaw rate $\\Psi_r$ [19].\n1) Translational Dynamics: The UAV motion in x, y, and z directions is influenced by thrust, gravity, and aerodynamic drag, and is described by the following equation [18],\n$\\frac{F}{m} = -R \\frac{T}{m} + g - D$\n(1)\nwhere R is the rotation matrix from body frame to inertial frame, T = [0,0,T]$^T$ is the thrust vector in the body frame, g = [0,0,-g]$^T$ and D = \u2212[$bx\\dot{x}$,$by\\dot{y}$, $bz\\dot{z}$]$^T$, are the gravity vector and drag forces in the inertial frame, respectively. In other works, such as [19], translational dynamics are often linearized around a hover point to simplify computation, though this may reduce accuracy during fast maneuvers. Keeping Eq. (1) nonlinear ensures the UAV full translational dynamic response is captured, enabling NMPC to handle large deviations and complex trajectories [20], [21]."}, {"title": "2) Rotational Dynamics", "content": "The UAV orientation is parameterized by the Euler angles $\\phi$, $\\theta$, $\\psi$ [22] with angular acceleration determined by inputs, moments, and inertia,\n$\\tau = I \\cdot \\dot{\\omega} + \\omega \\times (I \\cdot \\omega)$\n(2)\nwhere $\\tau$ denotes the total applied torques, I is the inertia matrix, $\\omega$ is the angular velocity, and $\\dot{\\omega}$ is the angular acceleration. In the cascaded system, the DJI Matrice 100's internal controllers operate in a closed-loop configuration, stabilizing the UAV pitch, roll, and yaw. At the higher level, the NMPC computes the optimal control inputs for following a desired trajectory, handling the more complex, slower dynamics of translational movement [13], [19], [23]. Eq. (3a) provides a linear approximation of the closed-loop rotational dynamics, enabling real-time NMPC computation. The model structure was chosen based on the approach from [12], but the step response experiments were conducted on the DJI Matrice 100 in this work. NMPC dynamically optimizes inputs over a prediction horizon for robust performance [1]. The closed-loop dynamics of roll, pitch, and yaw are approximated by first-order systems with time constants and gains determined by the internal controllers (adapted based on the model in [12]),\n$\\dot{\\phi} = \\frac{1}{T_\\phi} k_\\phi (\\phi_r - \\phi)$\n(3a)\n$\\dot{\\theta} = \\frac{1}{T_\\theta} k_\\theta (\\theta_r - \\theta)$\n(3b)\n$\\dot{\\psi} = \\frac{1}{T_\\psi} k_\\psi (\\psi_r - \\psi)$\n(3c)\nwhere $T_\\phi$, $T_\\theta$ are the time constants for roll and pitch, $k_\\phi$, $k_\\theta$ are the proportional gains for roll and pitch, $T_\\psi$ is the time constant, and $k_\\psi$ is the gain for the yaw rate."}, {"title": "3) Custom NMPC Development for UAV", "content": "The quadrotor dynamics are described by differential equations describing the system motion, with the state vector x reduced to 10 states as a result of the closed-loop dynamics of the UAV,\nx = [x, y, z, $\\phi$, $\\theta$, $\\psi$, $\\dot{x}$, $\\dot{y}$, $\\dot{z}$, $\\dot{\\psi}$]$^T$\n(4a)\nu = [T, $\\phi_r$, $\\theta_r$, $\\psi_r$]$^T$\n(4b)\nwhere, x, y, z are positions, $\\phi$, $\\theta$, $\\psi$ are roll, pitch, and yaw angles, $\\dot{x}$, $\\dot{y}$, $\\dot{z}$ are the linear velocities, and $\\dot{\\psi}$ is the yaw rate. The control input vector is given in Eq. (4b) where T is the total thrust, $\\Phi_r$, $\\theta_r$ are roll and pitch reference angles and $\\Psi_r$ is the yaw rate reference."}, {"title": "B. Optimization Problem", "content": "The optimization problem in the NMPC is solved at each sampling time, and only the first control input $u_0$ is applied to the system. The horizon shifts forward, the state is updated, and the optimization repeats. The cost function J, designed to minimize deviations from the reference trajectory and control inputs while penalizing excessive control rates, is defined as,\n$J = \\sum_{k=0}^{N-1} ||x_k - x_{r,k}||^2_Q + ||u_k - u_{r,k}||^2_R + ||\\Delta u_k||^2_R + ||x_N - x_{r,N}||^2_{Qf}$\n(5)\nwhere $x_k$ and $u_k$ are the state and control input, indexed by the time step k, with $x_{r,k}$ and $u_{r,k}$ as their respective references. Here, Q, R, and $Q_f$ are the weighting matrices for state, control input, and final state deviation, respectively, while $R$ weights the rate of change of control inputs and $\\Delta u_k = u_k - u_{k-1}$ encourages smooth control actions. The following equation and inequality represent both the state update dynamics and the control input constraints,\n$x_{k+1} = x_k + f(x_k, u_k) dt, u_{min} < u_k < u_{max}$\n(6)\nwhere $f(x_k, u_k)$ is the system dynamics function, and dt is the discretization time step."}, {"title": "C. Obstacle Incorporation in NMPC", "content": "Obstacle penalty is added to the cost function for computational efficiency with a safety distance incorporated to reduce collision risks [25], acknowledging that avoidance may not always be achieved, further discussed in Sec. IV-B. Obstacles are represented as spheres with a safety volume. The penalty term for each obstacle i is expressed as:\n$d(x_k, c_i) \\geq r_i + d_s, \\forall k \\in \\{0, ..., N\\}$\n(7)\nwhere d($x_k$, c_i) is the Euclidean distance between the UAV position at time step k and the center of obstacle i, $r_i$ represents the radius of the obstacle and $d_i$ is the safety distance around the obstacle. To achieve obstacle avoidance within the NMPC framework, a penalty term is added to the objective function, which increases as the UAV nears an obstacle. This penalty is formulated using a repulsive potential field approach [26], introducing a strong repulsive force when the UAV gets too close. The repulsive potential $U_i$ for obstacle i is defined as,\n$U_i(x_k) = \\begin{cases} \\frac{1}{2} \\eta (\\frac{1}{d(x_k, c_i)} - \\frac{1}{r_i + d_s})^2 & \\text{if } d(x_k, c_i) < r_i + d_s \\\\ 0 & \\text{otherwise} \\end{cases}$\n(8)\nwhere $\\eta$ is a scaling factor determining the strength of the repulsive force. The total repulsive potential U(x) from all obstacles is added to the NMPC objective function,\n$J_{total}(x, u) = J + \\sum_i U(x_k)$\n(9)"}, {"title": "D. Path Representation with B-splines", "content": "B-splines were chosen for path representation because they generated smooth, adaptable paths based on provided waypoints, forming a trajectory that does not necessarily pass through each waypoint but still follows the overall intended path [28]. The B-spline curve is defined by control points and constructed using basis functions $N_{i,p}(t)$ over a knot vector T [27]. For degree p = 0, $N_{i,0}(t)$ is 1 if $t_i < t < t_{i+1}$ and 0 otherwise. For higher degrees, $N_{i,p}(t)$ is a weighted combination of the previous degree's basis functions. The curve representing the reference path is a smooth, flexible path formed by a linear combination of these basis functions weighted by the control points."}, {"title": "III. EXPERIMENTAL SETUP", "content": "1) Technical Specifications: The NMPC algorithm was evaluated on a DJI Matrice 100 UAV equipped with an Intel NUC computer (Intel\u00ae Core\u2122 i7-7567U CPU at 3.50GHz, 16GB RAM, 500GB SSD storage) ensuring high-performance computation essential for real-time control tasks. The onboard NUC runs Ubuntu 20.04.6 LTS, integrating ROS, which serves as the basis for managing all UAV operations, including communication, control, and data processing."}, {"title": "IV. EXPERIMENTS AND RESULTS", "content": "1) Closed-Loop Simulation and Analysis: Closed-loop simulations were conducted to evaluate the NMPC controller performance."}, {"title": "2) Indoor Experimental Configuration", "content": "Indoor experiments were conducted in a controlled environment using the Vicon Motion Capture System [30] for real-time precise UAV tracking. The controller was tested under various scenarios to assess its adaptability and robustness, including low-speed precise movements and higher-speed operations. The NMPC controller was tuned with a weight matrix R diag([0.2, 0.5, 0.5, 0.1]), which provided the best performance during the tuning process."}, {"title": "3) Outdoor Experimental Configuration", "content": "Outdoor experiments challenged the NMPC controller with wind disturbances and unstructured environments. The UAV navigated an obstacle course, requiring real-time adjustments to avoid collisions. After the indoor tests, 3 outdoor tests were conducted, tuning R = diag([0.3, 0.6,0.6,0.2]) to reduce oscillations and in order to compensate for the wind. Tuning was guided by error analysis and real-time RViz plots to ensure smoother responses in dynamic outdoor conditions."}, {"title": "A. Open Source Code and Video Documentation", "content": "The open-source code, along with a user manual, can be found in the GitHub repository [17]. In addition, videos from Gr\u00e4ns\u00f6 Testings 2024 are provided [31]."}, {"title": "A. Simulation Results", "content": "1) Closed-Loop Simulation and Analysis: Closed-loop simulations were conducted to evaluate the NMPC controller performance."}, {"title": "2) Simulated Flight Experiment with Hardware-in-the-Loop (HIL)", "content": "To evaluate the NMPC controller performance in more realistic conditions, simulated HIL flight tests were conducted using the DJI Matrice 100 software. This approach involved connecting the UAV to a computer program that simulated the UAV dynamics based on the input commands and generates a full state, including GPS signals, enabling the UAV to react as though in flight despite remaining stationary on the desk. The controller was adaptable to different priorities. The control loop update times ranged from 0.0547 s to 0.0207 s, indicating the system capability when it comes to real-time performance. The simulated HIL flight tests depicted in Figs. 4 and 5, compared with the initial simulations in Sec. IV-A1 provided a more realistic UAV evaluation, revealing less precise path following because of real-world uncertainties like communication delays and sensor noise. Additionally, more iterations and adjustments were required for effective obstacle avoidance compared to simulations."}, {"title": "B. Real-World Performance: Outdoor Experimental Results", "content": "In Fig. 6, the UAV initially followed a B-spline path using NMPC. At 890 s, it switched to manual control for precise positioning near obstacles, then back to NMPC with obstacle avoidance."}, {"title": "V. DISCUSSION", "content": "If the gain factor $\\eta$ from Eq. (8), which was chosen empirically, was not appropriately set, instability could occur in the control system, as discussed in the literature [32]. This sensitivity to $\\eta$ remains a limitation, as its manual tuning can result in sub-optimal performance in various environments.\nDuring the HIL testing described in Sec. IV-A2, the controller was adaptable to different priorities. When velocity was heavily penalized, the UAV maintained precise positions with slow, steady movement, resulting in accurate tracking of the hexagonal path. However, at higher speeds, where position control was less stringent, the path resembled a circle, Fig. 4. Shifting the focus to velocity control allowed the UAV to avoid obstacles more quickly, with effective path guidance even at higher speeds. Despite variability in the control loop update times (as noted in Sec. IV-A2), the system maintained an update rate well above 0.1 s, which was sufficient for stable UAV performance. Using control actions from the previously computed horizon as initial guess in the NMPC optimization ensured continuous trajectory tracking, even under higher computational loads, mitigating the potential impact of slower update rates. To improve computational efficiency, as described in Sec. IV-B, obstacles were included in the cost function rather than as constraints, where they originally showed lower sampling rate performance. Additionally, faster sampling was achieved using a forward Euler method instead of the CasADi CVODES integrator or Runge-Kutta [33].\nSafety distances were added, as shown in Figs. 5 and 7, to minimize the risk of collisions. While the NMPC framework incorporates obstacle proximity directly into the cost function, ensuring effective collision avoidance, the safety distances serve as an additional precautionary measure to account for real-world uncertainties and sensor noise. Even if the UAV enters the safety margin, it has sufficient time to trigger corrective actions and avoid a collision. A longer prediction horizon increased the UAV ability to anticipate and navigate around obstacles, as seen in the improved path accuracy in Figs. 6 and 7, highlights that GPS inaccuracies caused minor deviations during obstacle avoidance. Despite these deviations, the UAV had effectively navigated the obstacles, validating the robustness of the NMPC approach under various conditions. A feature of our work is using the B-spline path representation, whereas previous works, such as [13], focused on simpler indoor spline trajectories using a smaller UAV. In controlled indoor environments, our approach outperformed [13] by achieving smoother trajectory tracking with a deviation of 0.21 m compared to their reported deviations of 0.4 \u2013 0.6 m. In outdoor environments, the larger deviations observed in our experiments are because of the increased complexity of testing in real-world conditions, which were not addressed by [13], as their work was restricted to indoor experiments.\nFurthermore, [12] performed all computations on the onboard NUC, while our framework uses offloading to an external workstation, while the onboard computer handled essential control tasks. In comparison to [12], we integrated the yaw rate into the NMPC, unlike their approach, which separated yaw rate control via a Proportional-Integral-Derivative (PID) controller. Additionally, our method offers a more generalized solution compared to the image-based obstacle avoidance of [14], as we directly incorporate UAV dynamics for obstacle avoidance, which improves robustness in varied environmental conditions."}, {"title": "VI. CONCLUSION AND FUTURE WORK", "content": "The results validate the NMPC method's ability to handle nonlinear dynamics, enforce constraints, and achieve accurate trajectory tracking across various scenarios, with the CasADi library supporting real-time optimization and ROS facilitating operational integration. While the system is well-suited for applications like precision agriculture, disaster response, and logistics, scaling it to environments with larger areas, more dynamic obstacles, and higher computational demands remains a challenge. The open-source code provided aims to support ongoing research and further development in UAV control. The code is designed to handle dynamic obstacles via ROS topics [34], with real-time trajectory adjustments, and while not yet implemented, it allows for easy integration. Further refinements, including advanced prediction and obstacle handling algorithms in the control loop, would reduce latency and improve obstacle avoidance, particularly through better parameterization of the repulsive potential field constant."}]}