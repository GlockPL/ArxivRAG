{"title": "PalimpChat: Declarative and Interactive Al analytics", "authors": ["Chunwei Liu", "Gerardo Vitagliano", "Brandon Rose", "Matt Prinz", "David Andrew Samson", "Michael Cafarella"], "abstract": "Thanks to the advances in generative architectures and large language models, data scientists can now code pipelines of AI operations to process large collections of unstructured data. Recent progress has seen the rise of declarative AI frameworks (e.g., PALIMPZEST, LOTUS, and DocETL) to build optimized and increasingly complex pipelines, but these systems often remain accessible only to expert programmers. In this demonstration, we present PALIMPCHAT, a chat-based interface to PALIMPZEST that bridges this gap by letting users create and run sophisticated Al pipelines through natural language alone. By integrating ARCHYTAS, a ReAct-based reasoning agent, and PALIMPZEST's suite of relational and LLM-based operators, PALIMPCHAT provides a practical illustration of how a chat interface can make declarative Al frameworks truly accessible to non-experts.\nOur demo system is publicly available online. At SIGMOD'25, participants can explore three real-world scenarios-scientific discovery, legal discovery, and real estate search-or apply PALIMPCHAT to their own datasets. In this paper, we focus on how PALIMPCHAT, supported by the PALIMPZEST Optimizer, simplifies complex Al workflows such as extracting and analyzing biomedical data. A companion video is also available at https://people.csail.mit.edu/chunwei/demo/palimpchat.mp4.", "sections": [{"title": "1 Introduction", "content": "Generative Al has transformed our interactions with data and computing by introducing Large Language Models (LLMs) capable of complex tasks such as multimodal extraction, reasoning, and code synthesis [2, 9]. Yet, implementing such functionality often requires coordinating multiple software stacks-vector databases [4], relational operators [5], and novel programming practices like prompt engineering [3]. As these AI systems grow in scope, users face major challenges around runtime cost, resource consumption, and the coordination of diverse tools.\nPALIMPZEST is one of several new declarative Al systems (e.g., LOTUS [6], DOCETL [7], CAESURA [8]) that adopt a declarative approach for building AI pipelines over unstructured datasets. These systems greatly simplify this task for proficient programmers by allowing them to write high-level logical specifications - and let automated optimization produce efficient physical implementations of these pipelines [5]. However, this programming model remains inaccessible to less technical users. To bridge that gap, we propose PALIMPCHAT, a chat-based interface that integrates PALIMPZEST with ARCHYTAS, a framework to design reasoning agents. Our system lets users specify data processing pipelines in natural language, while still benefiting from the underlying automated optimization provided by declarative AI frameworks.\nIn this demonstration, we showcase how both developers and non-experts can collaboratively harness our system. All users, regardless of their coding expertise, can design and execute pipelines entirely through PALIMPCHAT. Furthermore, expert users can either further iterate on the code produced using the chat interface, or program their pipelines directly within PALIMPZEST. To illustrate the versatility of this approach, we present a real-world use case"}, {"title": "2 System Architecture", "content": "The PALIMPCHAT system is composed of two interconnected systems: the PALIMPZEST framework, a declarative system to build and automatically optimize data processing pipelines; and the ARCHYTAS framework, a system to code reasoning agents with access to external tools. We briefly describe both individually, and then detail how they integrate to form PALIMPCHAT."}, {"title": "2.1 PALIMPZEST", "content": "PALIMPZEST is a declarative system designed to build and optimize pipelines for unstructured data processing, harnessing both LLM-based and conventional operations. At its core, PALIMPZEST programs can be viewed as collections of relational operators. First, users must specify one or more input datasets and their corresponding \"Schema.\u201d A schema consists of the attribute names, types, and descriptions used to process the dataset. Given that a dataset can contain unstructured data, PALIMPZEST automatically extracts attribute values from each data record using either LLM-based or conventional methods. Subsequently, users specify a series of transformations over these data records to form the final output.\nAlthough PALIMPZEST implements most relational algebra operators, our demo emphasizes two special operators: (1) Convert, which transforms an object of schema A into an object of schema B by computing the fields in B that do not explicitly exist in A, and (2) Filter, which applies a natural language predicate or UDF on a dataset's records and returns the subset that satisfies the predicate. All other operations (e.g., Aggregation) follow conventional database semantics.\nA PALIMPZEST plan is a sequence of these operators over a dataset. By design, users write logical plans only; the choice of the physical implementation is deferred until runtime. For each logical operator, multiple equivalent physical implementations may be available. For instance, a filter operation might be performed via different LLM models, each representing a distinct physical method. More details about logical and physical implementations are available in [5].\nAfter the user specifies their pipelines, PALIMPZEST creates a search space of all possible physical plans that implement such plan,"}, {"title": "2.2 ARCHYTAS", "content": "Archytas is a toolbox for enabling LLM agents to interact with various tools in order to solve tasks more effectively, following the ReAct (Reason & Action) paradigm [9]. It is similar in functionality to existing solutions like LangChain [1], but focuses on providing a streamlined interface for tools. By implementing ReAct, an agent can decompose a user request into smaller steps, decide which tools to invoke for each step, provide corresponding input to those tools, and iterate until the task is complete. This flexible interface is well-suited for both purely textual tasks and more complex operations (e.g., looking up a dataset, calling AI-based filtering routines, etc.)."}, {"title": "2.3 PALIMPCHAT", "content": "The PALIMPCHAT interface integrates with PALIMPZEST with ARCHYTAS by exposing a series of tools that the LLM-based agent can leverage. Essentially, these tools correspond to templated code snippets that can 1. perform fundamental PALIMPZEST operations (e.g., registering a dataset, generating schemas, filtering records) and 2. orchestrate entire pipelines of transformations. Figure 2 provides an example of a tool implementation.\nThe Archytas agent will read tool code as natural language, and consider its doc-string and input/output parameters in order"}, {"title": "3 Demonstration", "content": "In this demonstration scenario, we will present a real-world use case leveraging PALIMPCHAT to build an end-to-end pipeline for scientific discovery.\nUse case: Consider medical researchers interested in performing a literature survey on colorectal cancer. They are interested in finding studies that report on the correlation between gene mutation"}, {"title": "4 Conclusion", "content": "We demonstrate the PALIMPCHAT system to interactively build AI pipelines using PALIMPZEST and ARCHYTAS. Although our demo did not extensively cover physical optimization aspects, more details can be found in [5]. The PALIMPCHAT interface offers a convenient tool for data practitioners to build complex data processing pipelines with little effort and a soft learning curve. Our vision is that on the one hand, the future of data engineering will include more and more sophisticated frameworks to build complex applications that mix LLMs and traditional data processing. On the other hand, tools like PALIMPCHAT will assist developers and make it easier to adopt new technologies and programming paradigms."}]}