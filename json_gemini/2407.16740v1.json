{"title": "PLM-Net: Perception Latency Mitigation Network for Vision-Based Lateral Control of Autonomous Vehicles", "authors": ["Aws Khalil", "Jaerock Kwon"], "abstract": "This study introduces the Perception Latency Mitigation Network (PLM-Net), a novel deep learning approach for addressing perception latency in vision-based Autonomous Vehicle (AV) lateral control systems. Perception latency is the delay between capturing the environment through vision sensors (e.g., cameras) and applying an action (e.g., steering). This issue is understudied in both classical and neural-network-based control methods. Reducing this latency with powerful GPUs and FPGAs is possible but impractical for automotive platforms. PLM-Net consists of two models: the Base Model (BM) and the Timed Action Prediction Model (TAPM). BM represents the original Lane Keeping Assist (LKA) system, while TAPM predicts future actions for different latency values. By integrating these models, PLM-Net mitigates perception latency. The final output is determined through linear interpolation of BM and TAPM outputs based on real-time latency. This design addresses both constant and varying latency, improving driving trajectories and steering control. Experimental results validate the efficacy of PLM-Net across various latency conditions. Source code: https://github.com/AwsKhalil/oscar/tree/devel-plm-net.", "sections": [{"title": "I. INTRODUCTION", "content": "Vision-based Autonomous Vehicle (AV) control functions in a similar way to how the human brain interprets and responds to visual information. Both share the same perception-planning-control (sense-think-act) cycle. In this cycle, there is a latency between sensing the environment and applying a corresponding action, which makes the human reaction time always higher than zero [1]. Similarly, it is challenging to completely eliminate this latency in AV control [2], and reducing it through powerful GPUs and FPGAs is impractical in automotive platforms. This latency, if not properly mitigated, can result in a number of issues, ranging from trivial ones like uncomfortable rides to serious ones like endangering the safety of the passengers. Therefore, the ability of an AV driving system to effectively mitigate latency is crucial for ensuring safety. We hypothesize that the human brain have internal mechanisms such as anticipating or predicting future actions to mitigate the latency [3]. Inspired by this, we propose a deep neural network architecture with similar predictive capabilities.\nIn this paper, we refer to this latency as the perception latency \\(\\delta\\), as shown in Fig.1. When vehicle state is \\(x_t\\) and we have observation \\(o_t\\), the corresponding action \\(a_t\\) is applied at time \\(t + \\delta\\) rather than at time t (\\(o_t \\rightarrow a_{t+\\delta}\\)). By the time this action is applied, the vehicle state has changed and we have a new observation. The perception latency has two components: the algorithmic latency, which is the time required for the algorithm to infer an action from an observation, and the actuator latency, which is the time required to apply the inferred action. The actuator latency, known as steering lag in lateral control [4], can be considered constant [4]. However, as mentioned in [5], the high processing cost of visual algorithms leads to uneven time delays based on the driving scenario, which leads to an overall perception latency that is time-varying.\nTo address both constant and time-varying perception latency encountered during lane keeping, we propose a deep-learning-based approach, focusing primarily on vision-based AV lateral control. The contribution of this paper will be discussed after explaining the effect of the perception latency on AV lateral control."}, {"title": "B. Latency Effect on AV Lateral Control", "content": "Vision-based AV lateral control for lane keeping can be achieved using various methods. The traditional approach involves incorporating a computer vision module for lane-marking detection alongside a classical control module for path planning and control. Alternatively, a deep-learning-based approach, such as imitation learning [6], directly maps visual input to control actions, like steering angle. This paper adopts the latter method.\nThe effect of perception latency on AV lateral control during lane keeping is highly dependent on vehicle speed. At low speeds, the scene does not change significantly between the time the vehicle receives the observation at time t and the time it applies the action at time \\(t + \\delta\\), because the traveled distance during the latency period is minimal (\\(d = \\delta v\\)). In this scenario, it is reasonable to assume that \\(a_t \\approx a_{t+\\delta}\\), making the effect of \\(\\delta\\) negligible. Thus, at low speeds, we can consider that at time t, the action \\(a_t\\) corresponding to observation \\(o_t\\) is applied immediately (\\(o_t \\rightarrow a_t\\)).\nThe effect of latency on AV control during lane keeping is illustrated in Fig.2. Two vehicles drive at a constant low speed: the green vehicle uses the normal real-time observation, assuming zero latency, while the red vehicle uses the delayed observation, mimicking the perception latency effect. Both vehicles start from position A and move towards position D. If we timestamp each position, then \\(t_A < t_B < t_C < t_D\\). For the green vehicle at position B, the available observation is \\(O_{t_B}\\) and the corresponding action is \\(a_{t_B}\\). For the red vehicle at the same position, the available observation is \\(O_{t_B-\\delta}\\) and the corresponding action is \\(a_{t_B-\\delta}\\). This pattern continues for the other positions. Both vehicles remain in their lanes at positions A and B, before encountering any curves, because they started within the lane and continued straight where the steering angle is zero. Thus, at positions A and B, the actions \\(a_t\\) and \\(a_{t-\\delta}\\) are effectively the same. At position C, the first curve is encountered. The green vehicle successfully turns left to stay in the lane, but the red vehicle continues straight. This deviation occurs because the red vehicle's input observation at position C is \\(o_{t_C-\\delta}\\), not \\(o_{t_C}\\), leading it to apply the action \\(a_{t_C-\\delta}\\) at position C. After this first curve, the red vehicle's zigzag trajectory becomes difficult to correct, even on a straight road, due to the incorrect action taken at position C, which causes subsequent incorrect observations.\nIn this approach, to mitigate the perception latency and avoid this unstable driving behavior, the main objective would be to predict the correct action from the delayed observation input."}, {"title": "C. Contribution", "content": "We introduce the Perception Latency Mitigation Network (PLM-Net), outlined in Fig. 3. This novel deep learning approach is intended to work easily and without requiring any changes to the original vision-based LKA system of the AV. As depicted in Fig. 3, PLM-Net leverages a Timed Action Prediction Model (TAPM) alongside the Base Model (BM), where the latter represents the preexisting vision-based LKA system. The design of the TAPM is inspired by our prior work, ANEC [7], and the Branched Conditional Imitation Learning model (BCIL) proposed by Codevilla et al. [8]. It combines the concept of a predictive model capable of forecasting future action from current visual observation, akin to ANEC [7] (originally inspired by the human driver capability of dealing with the perception latency [9]), with the notion of employing multiple sub-models within the BCIL framework [8] to provide different predictive action values corresponding to different latency levels. Additionally, similar to the 'command' input used in BCIL to select a submodel, the real-time perception latency \\(\\delta_t\\) is used to determine the final action value. The final action value \\(\\tilde{a}^{PLM}_t\\) is determined through the function \\(f(\\tilde{a}_t, \\delta_t)\\) where it performs linear interpolation based on the real-time latency value \\(\\delta_t\\) given all the predictive action values provided by the TAPM (\\(\\tilde{a}^{TAPM}_t\\)) and the current action value provided by the BM (\\(\\tilde{a}^{BM}_t\\)). A comprehensive explanation of our proposed method is provided in Section III.\nThe structure of this paper proceeds as follows: Section II presents an overview of related research, while Section III outlines the proposed methodology. Following this, Section IV and Section V present the experimental setup and the experimental findings within the simulation environment, accompanied by a comprehensive analysis. Finally, Section VI summarizes the core findings of the study and provides valuable insights into potential avenues for future research."}, {"title": "II. RELATED WORK", "content": "In the domain of vision-based control, the issue of perception latency remains significantly understudied across both classical control models, and neural-network-based control models. In classical control methods, discussions surrounding latency in autonomous driving have largely revolved around computational delays associated with hardware deployment [10]\u2013[13] and communication delays related to network performance [14]\u2013[19]. To the best of our knowledge, only two studies within the classical control domain have attempted to address aspects of perception latency, such as time-variant latency, input delay, or steering lag [4], [5]. However, these discussions primarily centered on classical-control-based solutions. On the other hand, within vision-based neural network control models, research efforts have primarily concentrated on model development, largely neglecting the perception latency issue [6], [20]\u2013[26]. Only few studies have discussed the perception latency [2], [7], [27]\u2013[29].\nLi et al. [2] underscored the significance of addressing latency in online vision-based perception systems. To tackle this issue, they introduced a methodology for assessing the real-time performance of perception systems, effectively balancing accuracy and latency. However, it is important to note that the paper primarily focuses on proposing a metric and benchmark for evaluating the real-time performance of perception systems, rather than offering a direct solution for vehicle control. While their approach provides valuable insights into quantifying the trade-off between accuracy and latency in perception systems, it does not directly address the challenges associated with mitigating latency in autonomous driving scenarios. Our previous work [7], addressed the perception latency issue by proposing the Adaptive Neural Ensemble Controller (ANEC). However, ANEC assumed perception latency to be constant and did not address time-varying latency. Weighted sum was used to combine the output from the two driving models, but the weight function parameters had to be carefully chosen and adjusted by hand. This makes it hard to replicate in different environments as you need to optimize these parameters for each new environment. Mao et al. [27] explored latency in the context of video object detection by analyzing the detection latency of various video object detectors. While they introduced a metric to quantify latency, their study focused on measurement rather than proposing solutions to mitigate latency. Kocic et al. [28] tried to decrease the latency in driving by altering the neural network architecture. Although this approach could potentially diminish latency, preserving the original accuracy poses a significant challenge. Wu et al. [29] emphasized that control-based driving models, which convert images into control signals, inherently exhibit perception latency and are susceptible to failure due to their focus on the current time step. In response, they developed Trajectory-guided Control Prediction (TCP), a multi-task learning system integrating a control prediction model with a trajectory planning model. However, this approach necessitates the extraction of precise trajectories, presenting a notable challenge.\nIn our approach, we acknowledge the inevitability of latency and strive to minimize its impact by intelligently integrating predicted future actions with the current action based on the real-time latency value. This combination mechanism allows our proposed method to effectively mitigate the latency, ensuring better performance in vision-based autonomous vehicle lateral control systems."}, {"title": "III. METHOD", "content": "This section outlines the comprehensive approach undertaken to develop and evaluate the Perception Latency Mitigation Network (PLM-Net). The section is divided into four key subsections. First, we introduce the proposed PLM-Net, detailing the conceptual framework and the rationale behind its design. Second, we delve into the architecture of the PLM-Net models, providing an in-depth analysis of the structural components and their interconnections. Third, we describe the training process of the PLM-Net models. Finally, we present the performance metrics used to evaluate the efficacy of the PLM-Net, highlighting the criteria and benchmarks for assessing its ability to mitigate perception latency in vision-based autonomous vehicle control systems."}, {"title": "A. Proposed Network PLM-Net", "content": "As shown in Fig.3, the PLM-Net has two major components, Base Model (BM) and Timed Action Prediction Model (TAPM). This novel deep learning approach smoothly integrates the TAPM with the original vision-based LKA system of the AV, represented by the BM. Fig.4 shows how these two models mitigate the perception latency where \\(\\pi^{BM}\\) is the BM policy and \\(\\pi^{TAPM}\\) is the TAPM policy. As explained in (1), given the vehicle state \\(s_t\\) at time t, \\(\\pi^{BM}\\) takes the input \\(i_t = \\{o_t, v_t\\}\\) where \\(o_t\\) is the visual observation and \\(v_t\\) is the vehicle speed at time t and provides the action \\(\\tilde{a}^{BM}_t\\).\n\\begin{equation}\n\\tilde{a}^{BM}_t = \\pi^{BM}(i_t) = \\pi^{BM}(o_t, v_t).\n\\end{equation}\nThe TAPM is a predictive model, meaning it can estimate the future state \\(s_{t+\\delta}\\) of the vehicle. The policy \\(\\pi^{TAPM}\\) generates a set of predictive action values \\(\\tilde{a}^{TAPM}_t\\), where each action corresponds to a future state at a specific latency value in \\(\\delta^{TAPM}\\).\nThe number of predictive actions in the vector \\(\\tilde{a}^{TAPM}_t\\) depends on the number of submodels in TAPM. If there are N submodels, then \\(\\delta^{TAPM} = [\\delta_1, \\delta_2, ..., \\delta_N]\\). For example, if \\(\\delta_1 = 0.15\\) seconds, then the action \\(\\tilde{a}_{t+0.15}\\) represents the action that the BM would take if the vehicle was in the state \\(s_{t+0.15}\\). The process of obtaining the vector \\(\\tilde{a}^{TAPM}_t\\) is described by (2), where the inputs to \\(\\pi^{TAPM}\\) are the output of the BM (i.e., the action \\(\\tilde{a}^{BM}_t\\)) along with two feature vectors; the image feature vector \\(z_i^o\\) and the vehicle velocity vector \\(z_i^v\\), both derived from \\(\\pi^{BM}\\).\n\\begin{equation}\n\\tilde{a}^{TAPM}_t = [\\tilde{a}_{t+\\delta_1}, \\tilde{a}_{t+\\delta_2}, ..., \\tilde{a}_{t+\\delta_N}] = \\pi^{TAPM}(\\tilde{a}^{BM}_t, z_i^o, z_i^v).\n\\end{equation}\nThe final action of the PLM-Net \\(\\tilde{a}^{PLM}_t\\) is obtained through linear interpolation, as explained in Algorithm 1. This interpolation uses the output of both \\(\\pi^{BM}\\) and \\(\\pi^{TAPM}\\) based on the real-time perception latency value \\(\\delta\\). Since \\(\\tilde{a}^{BM}_t\\) represents the current action value without latency mitigation, it is equivalent to \\(\\tilde{a}_{t+0.0}\\), so we add the value 0.0 to \\(\\delta^{TAPM}\\) and the action \\(\\tilde{a}^{BM}_t\\) to \\(\\tilde{a}^{TAPM}_t\\) to form \\(\\delta^{ref}\\) and \\(\\tilde{a}^{ref}\\), respectively, as shown in (3).\n\\begin{equation}\n\\begin{aligned}\n\\delta^{ref} &= [0.0, \\delta^{TAPM}] = [0.0, \\delta_1, \\delta_2, ..., \\delta_N], \\\\\n\\tilde{a}^{ref} &= [\\tilde{a}^{BM}_t, \\tilde{a}^{TAPM}_t] = [\\tilde{a}_{t+0.0}, \\tilde{a}_{t+\\delta_1}, \\tilde{a}_{t+\\delta_2}, ..., \\tilde{a}_{t+\\delta_N}].\n\\end{aligned}\n\\end{equation}\nThis makes the PLM-Net capable of mitigating both constant and time-variant perception latency \\(\\delta\\)."}, {"title": "B. PLM-Net Models Architecture", "content": "The architecture of PLM-Net models is illustrated in Fig. 5. The network design of BM is presented in Fig. 5(a), and the network design of TAPM is presented in Fig. 5(b).\nThe BM network design is inspired by the NVIDIA PilotNet structure [30] with modifications tailored to our requirements. Specifically, we adapt the network to accept visual observations (\\(o_t\\)) and vehicle speed (\\(v_t\\)) as inputs and to predict steering angle (action \\(\\tilde{a}^{BM}_t\\)) as output, and we add dropout layers to improve generalization and avoid overfitting. The BM features two primary inputs: the visual observation \\(o_t\\) and the vehicle speed \\(v_t\\). The visual observation undergoes processing through five convolutional layers, then a flatten layer to obtain the image feature vector \\(z_i^o\\). Simultaneously, the vehicle speed input is directed through a fully-connected layer that has 144 neurons, resulting in the formation of the vehicle speed vector \\(z_i^v\\). Subsequently, the image feature vector \\(z_i^o\\) and the vehicle speed vector \\(z_i^v\\) are concatenated and forwarded to a multi-layer perceptron (MLP) network. This MLP configuration consists of four fully-connected layers interspersed with three dropout layers. The fully-connected layers contain 512, 100, 50, and 10 neurons, respectively. The dropout layers maintains a dropout rate of 0.3. The final output of the BM \\(\\tilde{a}^{BM}_t\\), the image feature vector \\(z_i^o\\), and the vehicle speed vector \\(z_i^v\\), are forwarded to the TAPM network.\nThe TAPM network design is the result of fusing two key ideas. Firstly, it incorporates a predictive model, similar to ANEC [7], which was inspired by human drivers' ability to mitigate perception latency. Secondly, it utilizes the BCIL framework [8], employing multiple sub-models to provide a range of predictive action values that align with different latency levels, and adding a 'command' input, representing the perception latency \\(\\delta\\), to influence the final action value. The TAPM network inputs are \\(\\tilde{a}^{BM}_t\\), \\(z_i^o\\), and \\(z_i^v\\), forwarded from the BM. These three inputs goes to a 100-neuron, 500-neuron, and 100-neuron fully-connected layers, respectively. The outputs of these three layers are then concatenated to be forwarded to all sub-models. Each sub-model consist of three fully connected layers, with 200, 100, and 50 neurons, interspersed with two dropout layers with a dropout rate of 0.3. The sub-models outputs will result in \\(\\tilde{a}^{TAPM}_t\\) shown in (2)."}, {"title": "C. PLM-Net Models Training", "content": "The functionality of a vision-based LKA system, can be achieved through imitation learning where we directly map the steering angle (i.e., action \\(a_t\\)) to the input \\(i_t = \\{O_t, v_t\\}\\) where \\(O_t\\) is the visual observation and \\(v_t\\) is the vehicle speed at time t. The training dataset collected by an expert driver can defined as \\(D = \\{i_t, a_t\\}_{t=1}^{M}\\), where M is the total time-steps. Fig.6, explains the training process of the PLM-Net models. Learning the BM policy \\(\\pi^{BM}\\) is a supervised learning problem. The parameters \\(\\phi\\) of the policy is optimized by minimizing the prediction error of \\(a_t\\) given the input \\(i_t\\), as shown in (4), where we use the Mean Squared Error (MSE) to calculate the loss per sample. Once optimized, the BM can predict the action \\(\\tilde{a}^{BM}_t\\) given the input \\(i_t = \\{o_t, v_t\\}\\) at time t as shown in (1).\n\\begin{equation}\n\\mathop{\\arg \\min}\\limits_{\\phi} \\sum_{t=1}^{M} (\\pi^{BM}_t - a_t)^2\n\\end{equation}\nTo learn the TAPM policy \\(\\pi^{TAPM}\\), we generate a new dataset \\(D^{TAPM}\\) from the original dataset D, mapping the input \\(i_t = \\{o_t,v_t\\}\\) to a N distinct future actions \\(a^{TAPM}_t\\) corresponding to N distinct latency values \\(\\delta^{TAPM}\\) (2), where\n\\begin{equation}\nD^{TAPM} = \\{i_t,a^{TAPM}_t\\}_{t=1}^{M} = \\{i_t, [a_{t+\\delta_1}, ..., a_{t+\\delta_N}]\\}_{t=1}^{M}\n\\end{equation}\nThe optimization of the parameters \\(\\theta\\) of the TAPM policy \\(\\pi^{TAPM}\\), is explained in (5). We minimize the prediction error of \\(a^{TAPM}_t\\) given the input \\(i_t\\), where \\(a^{TAPM}_{t+\\delta_j}\\) is the ground truth values of \\(a^{TAPM}\\). We use MSE to calculate the loss per sample.\n\\begin{equation}\n\\mathop{\\arg \\min}\\limits_{\\theta} \\sum_{t=1}^{M} \\sum_{j=1}^{N} (a_{t+\\delta_j} - a_{t+\\delta_j})^2\n\\end{equation}"}, {"title": "IV. EXPERIMENTAL SETUP", "content": "This section outlines the experimental setup for validating the Perception Latency Mitigation Network (PLM-Net). We begin by describing the simulator used for creating a controlled testing environment. Next, we detail the dataset for training and evaluation. We then discuss the methods for measuring driving performance, followed by the parameter tuning process. After that, an ablation study is presented to highlight key development decisions. Finally, we specify the computational environment and machine learning framework, including hardware and software configurations."}, {"title": "A. Simulator", "content": "Our experiments were carried out using the OSCAR simulator [31], renowned for its user-friendly interface and customizable features. OSCAR operates on ROS (Robotic Operating System) [32], seamlessly integrated with the Gazebo multi-robot 3D simulator [33]. Specifically, we utilized ROS Melodic and Gazebo 9 for our experiments."}, {"title": "B. Dataset", "content": "a) Training and Test Tracks: The track used to train the PLM-Net is the same training track used in our prior work [7]. To evaluate the PLM-Net ability to mitigate the perception latency, we designed a new three-lane test track that has several turns in left and right directions and straight road segments, as shown in Fig. 7.\nb) Data Collection: Our training dataset, denoted as D, was collected by a human driver navigating the training track using OSCAR simulator. This simulator captures visual observations via a mounted camera on the vehicle, alongside critical control values such as steering angle, throttle position, braking pressure, time, velocity, acceleration, and position. High-quality data was collected using the Logitech G920 dual-motor feedback driving force racing wheel with pedals and a gear shifter, resulting in approximately 115,000 clean training samples. Table I provides detailed statistics on the steering and velocity data.\nThe steering angle for the vehicle is represented on a scale from -1 to 1, where 0 denotes the center position. According to the right-hand rule, positive steering angles (0 to 1) correspond to rotations to the left, and negative steering angles (0 to -1) correspond to rotations to the right. The steering wheel has a maximum rotation angle of \u00b1450\u00b0. This mapping implies that a steering angle of 1 corresponds to a 450\u00b0 rotation to the left, while a steering angle of -1 corresponds to a 450\u00b0 rotation to the right. Thus, the steering angle range is scaled such that 0 to 1 maps to 0\u00b0 to 450\u00b0 and 0 to -1 maps to 0\u00b0 to -450\u00b0.\nc) Data Balancing: As shown in Table I, around 50% of the steering values in our dataset approximately equates to 0.0, indicating the vehicle traveling on a straight road segment. Training a driving model solely on this dataset would introduce bias. To address this, we conducted histogram-based data balancing to reduce the skew towards zero steering values. Fig. 8 illustrates the steering angle histogram before (left) and after (right) the balancing process. Post-balancing, our dataset comprised approximately 67,000 data samples.\nd) Data Augmentation: To improve the model's generalization capabilities and augment dataset diversity during training, we implemented data augmentation techniques. Each image presented to the network undergoes a random subset of transformations, including horizontal flipping, where the steering value is negated, and random changes in brightness, while preserving the original steering angle. These augmentation techniques have proven effective in enhancing the robustness of our model during training."}, {"title": "C. Driving Performance Evaluation", "content": "While Section III-D explained the rationale behind choosing the performance metrics and their importance, this section discusses the adopted methods to measure them in our experiments.\na) Steering Angle Accuracy: We analyzed the steering angle values under different conditions: BM driving without latency, BM driving with latency but without TAPM, and BM driving with latency and TAPM (utilizing PLM-Net). This analysis is conducted both qualitatively, through visual inspection, and quantitatively, by calculating metrics such as Mean Absolute Error (MAE), Mean Squared Error (MSE), and Root Mean Squared Error (RMSE).\nb) Trajectory Similarity: The performance metrics used to compare the driving trajectories were adopted from [34] and [35]. We measure the similarity between driving trajectories based on lane center positioning. We use partial curve mapping, Frechet distance, area between curves, curve length, and dynamic time warping from [34], and the Driving Trajectory Stability Index (DTSI) from [35]."}, {"title": "D. Parameter Tuning", "content": "For the TAPM, we used N = 5 submodels, meaning the TAPM predicts five future actions for five different latency values in \\(\\delta^{TAPM}\\). Specifically, the latency values starts with \\(\\delta_1 = 0.15\\) seconds, with increments of 0.05 seconds, resulting in \\(\\delta^{TAPM} \\epsilon [0.15, 0.20, 0.25, 0.30, 0.35]\\) seconds. Consequently, the predictive action vector \\(a^{TAPM}_t\\) in (2) becomes:\n\\begin{equation}\na^{TAPM}_t = [a_{t+0.15}, \\tilde{a}_{t+0.20}, \\tilde{a}_{t+0.25}, \\tilde{a}_{t+0.30}, \\tilde{a}_{t+0.35}]\n\\end{equation}\nAs detailed in (3), the reference latency vector \\(\\delta^{ref}\\) and the corresponding action vector \\(a^{ref}\\) are formed by including the BM action for zero latency. Thus, \\(\\delta^{ref}\\) and \\(a^{ref}\\) become:\n\\begin{equation}\n\\begin{aligned}\n\\delta^{ref} &= [0.0, 0.15, 0.20, 0.25, 0.30, 0.35], \\\\\na^{ref} &= [a_{t+0.0}, \\tilde{a}_{t+0.15}, \\tilde{a}_{t+0.20}, \\tilde{a}_{t+0.25}, \\tilde{a}_{t+0.30}, \\tilde{a}_{t+0.35}]\n\\end{aligned}\n\\end{equation}\nThese configurations enable the PLM-Net to handle both constant and time-varying perception latency within the range [0 -0.35] seconds.\nBoth models, BM and TAPM, were trained using the Adam optimizer [36] with a batch size of 32 and a learning rate of 0.001. Table II, shows the number of trainable and non-trainable parameters for the BM and the TAPM. The BM has 6,006,191 parameters, in which all of them are trainable. The TAPM has 12, 256, 396 total parameters, where 6,250, 205 are trainable and 6,006,191 are non-trainable since the BM layers are set to be not trainable when training the TAPM. For the performance metric DTSI, we used the default parameters recommended in [35]."}, {"title": "E. Ablation Study", "content": "In our exploration of different model architectures for the TAPM network, we experimented with various configurations to optimize performance. Initially, we introduced an additional fully-connected layer with 500 neurons after the concatenation layer preceding the five sub-models. However, this adjustment overly complicated the learning process for the predictive action values. Since this layer was shared among all sub-models, it hindered their individual learning capacities, resulting in subpar outcomes. Further experimentation involved modifying the number of layers within the sub-models. Reducing the layers to two, with 100 and 50 neurons respectively, led to the model's inability to effectively learn predictive actions. Similarly, adding an extra fully-connected layer to each sub-model with 300 neurons yielded comparable (if not slightly inferior) results to the existing architecture, thus introducing unnecessary complexity without significant improvement. Additionally, we explored the integration of Long Short-Term Memory (LSTM) [37] layers into the sub-models to capture temporal information. However, this approach encountered substantial challenges. Firstly, the model's complexity increased significantly, impeding computational efficiency. Secondly, the nature of capturing temporal information hindered conventional data balancing techniques and random data sampling from the dataset to enhance batch diversity."}, {"title": "V. EXPERIMENTAL RESULTS", "content": "Our experimental design aimed to investigate the impact of perception latency on driving and assess the efficacy of our proposed solution, PLM-Net, in mitigating this effect (as detailed in Section I-B). To simulate latency, we introduced delays in the input data and apply closed-loop velocity control to make the vehicle drive at a constant speed (around 60 km/h), mimicking real-world scenarios where perception and decision-making processes are delayed. For instance, with a 0.2-second latency, the available visual observation at time t becomes \\(O_{t-0.2}\\) instead of \\(O_t\\), causing the baseline model (BM) to generate delayed actions \\(a^{BM}_{t-0.2}\\), which PLM-Net aims to correct to \\(a_t\\).\nWe assess the impact of perception latency through a comparison of driving behaviors: BM without latency, BM with latency, and PLM-Net with latency. Successful mitigation by PLM-Net is indicated when its driving performance closely resembles that of the latency-free BM. Our evaluation involves analyzing steering angle accuracy and driving trajectory similarity, as detailed in Section IV-C, for both constant and time-variant perception latency."}, {"title": "A. Constant Perception Latency Mitigation", "content": "In evaluating PLM-Net under constant perception latency, we focus on a latency of 0.2 seconds, with similar trends observed for other constant latency values, as illustrated in Appendix A. Fig.9 provides a qualitative comparison of steering angles over time between BM with and without latency and PLM-Net with the same latency. In this figure, the blue line represents BM driving without latency, the green line represents BM driving with 0.2 seconds latency, and the red line represents PLM-Net driving with 0.2 seconds latency. Additionally, Fig.10 provides a visual representation of vehicle trajectories on the test track, colored based on steering angle, to further elucidate the comparative performance. Table III quantifies steering angle errors, demonstrating PLM-Net's superior performance in reducing errors compared to BM under identical latency conditions. Under a constant perception latency of 0.2 seconds, the performance of the BM significantly decreased. The Mean Absolute Error (MAE) between the BM without latency and the BM with latency is 0.1915, indicating a substantial degradation in steering angle accuracy. However, when using PLM-Net, the performance decline was mitigated, with the MAE reduced to 0.0726. This represents a 62.1% improvement in MAE compared to the BM under the same latency condition. Additionally, the Mean Squared Error (MSE) and Root Mean Squared Error (RMSE) were similarly improved with PLM-Net, showing reductions of 82.5% and 58.2%, respectively.\nFurthermore, Fig.11 presents trajectory comparisons qualitatively, while Table IV presents trajectory comparisons quantitatively, showing PLM-Net's ability to maintain accurate driving trajectories despite latency-induced challenges. Each color-coded trajectory corresponds to a different driving condition: blue for BM driving without latency, green for BM driving with 0.2 seconds latency, and red for PLM-Net driving with 0.2 seconds latency. Examining the deviation from the lane center on the full track, the Partial Curve Mapping metric for BM with 0.2 seconds latency increased by 238.7%, while PLM-Net maintained a much smaller increase of only 11.1%. Similarly, improvements in Frechet distance, area between curves, curve length, and DTSI demonstrate that PLM-Net significantly reduces the trajectory deviation caused by latency. The additional segments of Fig.11 and Table IV, specifically parts (b), (c), and (d), which depict the trajectories on a straight road, right turn, and left turn, respectively, also demonstrate that PLM-Net effectively mitigates latency, similar to the results observed on the full track."}, {"title": "B. Time-variant Perception Latency Mitigation", "content": "For time-variant perception latency, we evaluate PLM-Net against varying latency levels ([0.0 \u2013 0.35", "0.35": "seconds, the performance of the Base Model (BM) significantly decreased. The Mean Absolute Error (MAE) between the BM without latency and the BM with latency is 0.3336, indicating a substantial degradation in steering angle accuracy. However, when using PLM-Net, the performance decline was mitigated, with the MAE reduced to 0.0710. This represents a"}]}