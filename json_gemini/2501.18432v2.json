{"title": "Solving Drone Routing Problems with Quantum Computing: A Hybrid Approach Combining Quantum Annealing and Gate-Based Paradigms", "authors": ["Eneko Osaba", "Pablo Miranda-Rodriguez", "Andreas Oikonomakis", "Matic Petri\u010d", "Alejandra Ruiz", "Sebastian Bock", "Michail-Alexandros Kourtis"], "abstract": "This paper presents a novel hybrid approach to solving real-world drone routing problems by leveraging the capabilities of quantum computing. The proposed method, coined Quantum for Drone Routing (Q4DR), integrates the two most prominent paradigms in the field: quantum gate-based computing, through the Eclipse Qrisp programming language; and quantum annealers, by means of D-Wave System's devices. The algorithm is divided into two different phases: an initial clustering phase executed using a Quantum Approximate Optimization Algorithm (QAOA), and a routing phase employing quantum annealers. The efficacy of Q4DR is demonstrated through three use cases of increasing complexity, each incorporating real-world constraints such as asymmetric costs, forbidden paths, and itinerant charging points. This research contributes to the growing body of work in quantum optimization, showcasing the practical applications of quantum computing in logistics and route planning.", "sections": [{"title": "I. INTRODUCTION", "content": "Quantum Computing (QC) represents a revolutionary leap in the field of computation, taking advantage of concepts from quantum physics to process information in fundamentally novel ways [1]. Today, there are high expectations for this field, mainly due to its theoretical potential to solve problems that are currently intractable for classical devices in areas such as cryptography [2], drug discovery [3], and optimization [4]. This paper is focused on the last of these areas.\nThe community is exploring a number of methods in the field of quantum optimization, with Quantum Annealing (QA, [5]) and variational quantum algorithms such as the Quantum Approximate Optimization Algorithm (QAOA, [6]) probably\nbeing the most prominent. When combined with appropriate hardware, these methods could offer near- to mid-term advantages, including significant computational speedups, improved solution quality, and reduced energy consumption. Consequently, significant investments and research initiatives are being channeled into developing practical and scalable quantum devices, with the anticipation that they will revolutionize scientific research and industries. In this work, we will explore the use of the two methods mentioned above.\nAnyway, despite significant advancements in the field, quantum computers remain in their infancy compared to classical computers. Currently, quantum computers struggle to efficiently solve problems due to the limited number of qubits and their inherent instability. Issues such as decoherence, noise, and information loss, especially in the absence of error correction mechanisms, adversely affect computational performance. Additionally, challenges like quantum gate fidelity and gate noise further impede progress. Consequently, we are currently in an era coined noisy intermediate-scale quantum (NISQ, [7]), which is marked by devices' limitations in effectively handling complex problems.\nIn spite of this seemingly adverse situation, an increasing number of studies are being published in last years around the solving of real-world problems through QC. This growing number of publications certifies that the community is increasingly focusing on exploring the applications of quantum computers. There are several reasons that have contributed to reaching this interesting situation:\n\u2022 The advances made in the democratization of QC, understood as the process of making the technology more accessible to a broader spectrum of researchers [8]. This has greatly facilitated the arrival of newcomers to the field, encouraging them to explore the potential of both quantum gate-based computers and quantum annealers.\n\u2022 The development of increasingly larger and better-connected devices. Despite being in the NISQ era, systems as D-Wave's Advantage_System, made up of 5616 qubits organized in a Pegasus topology [9], have contributed to tackling larger and more complex problems.\n\u2022 The publication and improvement of frameworks and languages specifically created to facilitate the design, implementation, and execution of quantum algorithms, with notable examples such as Eclipse Qrisp\u00b9, Qiskit\u00b2, NVIDIA's CUDA-Q\u00b3, or Google's Cirq\u2074. The existence of this kind of languages contributes to the building of a multidisciplinary community around QC, facilitating the entry of practitioners from fields such as artificial intelligence or optimization [10], who may not have extensive knowledge in areas like physics or quantum mechanics [11]. In this article, we make use of the Eclipse Qrisp framework.\n\u2022 The implementation of ready-to-use hybrid methods that lighten the method-development phase. A paradigmatic example of this is the D-Wave's portfolio of techniques coined Hybrid Solver Service (HSS, [12]), which consists of four techniques that target different categories of inputs and problems types. We will provide more details about this portfolio in upcoming sections, as we use three of its methods in this research.\nWith all this, several fields have already benefited from quantum optimization, highlighting cases such as finance [13], and logistics [14]. In this work, we focus on the latter field. More specifically, in this paper we present a hybrid method, coined Quantum for Drone Routing (Q4DR), for solving a real-world drone routing problem. The method's main innovation is the use of the two prominent QC paradigms: quantum gate-based computing, through the Eclipse Qrisp programming language; and quantum annealers, through D-Wave's devices. In addition to describing the system developed, we also demonstrate its utility through three use cases, each with different characteristics and increasing complexity.\nThe remainder of the paper is structured as follows: the next section provides background information on drone route planning and quantum computing programming frameworks. Following this, Section III details the characteristics of the implemented method. In Section IV, we demonstrate the applicability of the implemented system. Finally, Section V concludes the paper by summarizing the main findings from the experiments and outlining future work."}, {"title": "II. BACKGROUND", "content": "This section addresses two pivotal concepts to contextualize the current research. Firstly, in Section II-A, we will provide a concise overview of the state of the art in the intersection of drone routing and QC, emphasizing the unique aspects of our paper. Secondly, in section II-B, we will discuss programming languages and frameworks within the field of QC, with a particular focus on the language utilized in our research, Eclipse Qrisp, and we will underscore its distinctive features."}, {"title": "A. Quantum Computing for the drone mission planning", "content": "As mentioned above, recent years have witnessed a substantial increase in research dedicated to addressing industrial problems through quantum optimization. One specific type of problem that has garnered particular attention is route planning [15]. Within this subfield, the planning of drone missions has also been a focal point of study.\nIn [16], for example, the authors address a problem coined as the Drone Delivery Packing Problem (DDPP) using the 2000Q Quantum Processing Unit (QPU) of D-Wave. More concretely, the DDPP aims to optimally assign a set of identical available drones to complete a specified set of customer delivery requests. Considering a battery budget for each drone, the planning must be done while adhering to constraints related to time consistency. The maximum size of the problems addressed in that paper does not exceed 12 visiting points.\nThe authors in [17] propose using a QAOA and a Variational Quantum Eigensolver (VQE, [18]) to solve a drone collision avoidance problem. Beginning with a set of drones and a number of predefined possible routes, this problem entails optimally selecting the paths for each vehicle to minimize the risk of collision. Factors such as preparation time and early take-off time are considered in this process. Due to the immaturity of the hardware, the tests conducted in this study are executed on very small instances.\nIn [19], a study is presented with a focus on solving a real-world problem. More specifically, that work introduces a QUBO formulation that accounts for various constraints, such as the battery consumption of drones and the transportation of goods along the routes. However, due to hardware limitations, the authors only test their proposal with a toy example consisting of four nodes and a single drone. Consequently, the full potential of that work remains to be demonstrated.\nFinally, [20] presents a hybrid quantum-inspired metaheuristic for the optimum mission allocation of unmanned vehicles. The main innovation of that paper lies in the planning of three types of unmanned vehicles (aerial, marine, and ground). The maximum number of vehicles considered by instance in the proposed experimentation is six, while the number of missions to be accomplished (points to visit) is 12. Anyway, this work falls outside the scope of our research as it presents a method designed to be executed solely on classical computers.\nWith all this, the work presented in this article introduces the following innovations:\n\u2022 Inspired by studies such as [21], Q4DR divides the problem-solving process into two steps: an initial clustering phase where the nodes to be visited are divided into two groups, and a routing phase where the path taken by each of the drones is calculated. This two-step resolution allows us to tackle problems of a significantly larger size than those described in the aforementioned studies.\n\u2022 Our research stands out by combining both computational paradigms, utilizing a QAOA in the initial clustering phase"}, {"title": "B. Eclipse Qrisp programming language", "content": "Quantum software connects quantum hardware and provides means to utilize it for real-world applications. The majority of current frameworks such as Qiskit, Cirq, Pennylane, TKET, among others, are strongly based on the assembler-like quantum circuit model. In this model, the focus is on the manual construction of quantum circuits by adding quantum gates to the corresponding qubits. This is a feasible approach for small qubit scales; however, for the state-of-the-art systems with more than 100 qubits, the writing of complex algorithms proves to be challenging.\nEclipse Qrisp is a Python-based open-source framework designed to allow high-level programming of quantum computers [22]. Its distinctive characteristic compared to the frameworks mentioned above is that it steps away from the conventional assembler-like circuit constructing approaches, and instead introduces Quantum Variables, which simplify many programming tasks. This design decision also makes programming in Eclipse Qrisp more familiar to classical programmers by focusing on algorithm development in terms of variables and functions rather than constructing circuits on the lower level. Using the paradigm of Quantum Variables hides the qubit management from the user and results in a scalable and modular development process of quantum programs. Another standout feature of Eclipse Qrisp is also its efficient resource management; it provides tools for tracking and optimizing the number of ancilla qubits while also allowing users to benefit other implemented feature like automatic uncomputation [23].\nFinally, installing Eclipse Qrisp provides a collection of pre-implemented algorithms and algorithmic primitives such as, but not limited to, Shor's algorithm, quantum backtracking algorithm, VQE, and QAOA. A comparison in [24] showed that Eclipse Qrisp's QAOA module outperforms two other Qiskit QAOA implementations both in the metric of circuit depth, as well as in the metric of approximation ratio, which justifies the use of this programming language in this research."}, {"title": "III. METHOD", "content": "The hybrid system proposed in this paper, Q4DR, aims to solve a real-world oriented drone routing problem. As previously explained, Q4DR will be tested through three use cases of increasing complexity, coined UC1, UC2 and UC3. In a nutshell, the problem consists of a set of N visiting points, each of which must be visited exactly once by any of the drones in the fleet, with the objective of minimizing the total cost of the paths built. Furthermore, the drone fleet consists of two vehicles, which must be used mandatorily, meaning that the number of routes to be calculated is two. The costs $C_{ij}$ associated with traveling from one point i to another point j\nare asymmetric, i.e., $C_{ij} \\neq C_{ji}$. Additionally, certain paths are prohibited, such that $C_{ij} = \\infty$ or $C_{ji} = \\infty$.\nIn UC1, both routes must start and end at a single depot, while in UC2 and UC3, the drones start from depots located at different points on the map. Additionally, in UC2, each route must also end at the same point where it started, completing a Hamiltonian cycle. Finally, in UC3, there is a set of charging points scattered across the map, so each route must end at one of these points. It is important to highlight that each drone is required to visit exactly one of these charging points, which should be selected in a manner that minimizes the total distance of the route.\nThe workflow of Q4DR is shown in Fig. 1. This figure illustrates the resolution of the problem in two distinct phases:\n\u2022 Clustering phase, which involves solving the Maximum Cut problem (MaxCut) and is managed by the QAOA module of Eclipse Qrisp.\n\u2022 Routing phase, which utilizes the Asymmetric Traveling Salesman Problem (ATSP) as the basis for the calculations, and employs D-Wave's quantum annealers.\nThe subsequent subsections provide a detailed description of the inner workings of each phase."}, {"title": "A. Clustering phase", "content": "The main goal of this phase is to partition the entire graph into two clusters using the MaxCut formulation. This partitioning divides the graph into two regions such that the distances (weights of the edges) between them are maximized. Each node of the graph represents a visiting point on a map, consisting of latitude and longitude coordinates, with the distances represented as the weights of the edges.\nBefore presenting the details on how Eclipse Qrisp facilitates the implementation of a QAOA algorithm, a brief introduction on how MaxCut can be formulated in QAOA terms follows. In a nutshell, MaxCut is a combinatorial optimization problem where the goal is to partition the vertices\nof a graph $G = (V, E)$ into two subsets such that the total weight of edges between the subsets is maximized. The MaxCut problem is typically expressed as the following cost function that needs to be maximized\n$f(x) = \\sum_{(u,v) \\in E} \\frac{(1-x_u x_v)}{2} w_{uv}$ where:\n\u2022 $x_u, x_v \\in \\{-1,1\\}$ represent the subset assignments of vertices u and v ($x_u = 1$ for one subset, $x_u = -1$ for the other),\n\u2022 $w_{uv}$ is the weight of the edge between vertices u and v.\nThe following components are the fundamental elements of any QAOA implementation, with specific applications to the MaxCut problem:\n\u2022 Classical cost function: the function f(x), where the weight $w_{uv}$ of the edge between the vertices u and v contributes to the overall cost if it belongs to the same partition for a given cut. The cost hamiltonian can be constructed as follows:\n$H_C = \\sum_{(i,j) \\in E} w_{ij} \\frac{1}{2}(1 - Z_i Z_j)$\n\u2022 Cost operator or phase separator: it applies a phase to each computational basis state based on its cost function value:\n$U_C(\\gamma) = e^{-i\\gamma H_c}, \\gamma \\in \\{0,2\\pi\\}$\n\u2022 Mixer operator: which drives transitions between different states\n$U_M(\\beta) = e^{-i\\beta H_M}, \\beta \\in \\{0, \\pi\\}$\n\u2022 Initial state: which usually is a uniform superposition:\n$|\\psi_o\\rangle = \\frac{1}{\\sqrt{2^n}} \\sum_{z \\in \\{0,1\\}^n} |z\\rangle$\nUsing all these fundamentals, a quantum circuit is constructed where the pair of $U_C$ and $U_M$ operators form a QAOA layer. After the application of a layer, an angle-dependent state can be defined:\n$|\\psi_p\\rangle = |\\gamma, \\beta\\rangle = U_M(\\beta_p) U_C(\\gamma_p) ... U_M(\\beta_1) U_C(\\gamma_1) |\\psi_o\\rangle$.\nFinally the main objective of the QAOA is to find the optimal $\\gamma_p, \\beta_p$ that minimizes the expected value of the cost function using classical optimizers [25].\nImplementing a QAOA requires several essential steps and components. Eclipse Qrisp provides a user-friendly and feature-rich interface that streamlines this process, enabling the implementation of QAOA with just a few lines of Python code. Additional libraries, such as networkx for graph processing and geopy for calculating distances between nodes, can be easily integrated to enhance functionality.\nAs explained before, this clustering phase expects a set of latitude and longitude coordinates as input, constructing a weighted graph based on the distances between all nodes. QAOA is then applied to this graph using Eclipse Qrisp, simplifying every component of the implementation while maintaining efficiency and adaptability. Below, we present the key aspects of the implementation, supported by various excerpts from the developed code."}, {"title": "B. Routing Phase", "content": "As seen in Fig. 1, the routing phase is executed two times after the results of the clustering phase are calculated and processed. This is due to the fact that the drone fleet in this research consists of two units. Additionally, since the vehicles have the same characteristics, both routes are independently calculated following the same process.\nOn one hand, in the case of UC1 and UC2, the routes are calculated using implementations of the ATSP. On the other hand, for UC3, a specific mathematical formulation has been designed for this research, with the intention of appropriately considering open routes with charging points. Further details will be given in the upcoming Section IV-C. Finally, it is worth noting that in all use cases, prohibited paths are considered, which is implemented by raising the cost associated with traveling from point i to point j to infinity ($C_{ij} = \\infty$).\nFocusing our attention on UC1 and UC2, and for research purposes, four different solvers have been implemented to solve the ATSP. While the first method is a purely quantum approach that utilizes the QPU of D-Wave, the remaining three approaches are hybrid algorithms from D-Wave's HSS portfolio.\nWith regard to the QPU, the Advantage_system6.4 device has been employed, which is the latest from D-Wave at the time of writing. This computer boasts 5,616 qubits and over 35,000 couplers arranged in a Pegasus topology [9]. Similar to the hybrid solvers described later, the QPU has been accessed via the Leap cloud service, and the standard forward annealing procedure has been run. This process comprises the following main steps: i) converting QUBO into a graph, ii) minor graph embedding, iii) QPU initialization, iv) annealing, v) readout, and vi) postprocessing. Further details on this process can be found in [26].\nRegarding HSS, it comprises a portfolio of hybrid heuristics that effectively combine quantum and classical computation to tackle large optimization problems as well as real-world industrial cases. At the time of writing, the HSS includes four approaches. In this article, we focus on three of them, each designed to address specific problem types: the binary quadratic model (BQM) algorithm, BQM-Hybrid, for problems expressed on binary values; the constrained quadratic model (CQM) technique, CQM-Hybrid, which can handle problems defined on binary, integer, and even real values; and the Nonlinear-Program Hybrid Solver, NL-Hybrid, which excels at natively permitting nonlinear (linear, quadratic, and higher-order) inequality and equality restrictions, even when expressed arithmetically.\nAll solvers in HSS share the same structure, as illustrated in Fig. 2. In a nutshell, these algorithms are divided into two phases. First, the input problem is read and a group of parallel hybrid threads is created. Every thread includes a Classical Heuristic Module (CM), responsible for exploring the entire solution space, and a Quantum Module (QM), which, according to D-Wave \"formulates quantum queries that are sent to a back-end Advantage QPU. Replies from the QPU are used to guide the heuristic module toward more promising areas of the search space or to find improvements to existing solutions\" [27]. Then, all branches are independently executed and the best solution identified from the pool of threads is returned to the user.\nFollowing extensive laboratory research, partially described in [28], it has been concluded that the method yielding the best results among the four implemented for UC1 and UC2 is the NL-hybrid. Therefore, the results presented for these cases have been obtained using the NL-hybrid. Nevertheless, for readers interested in the development aspects, we have publicly shared all the codes implemented for this research in [29].\nLastly, due to the intrinsic complexity of the mathematical formulation of UC3, the method employed for its implementation and resolution is the CQM-Hybrid,"}, {"title": "IV. DEMONSTRATION", "content": "This section is dedicated to demonstrating the applicability of the developed system across the three use cases examined. Each case has been tested on three distinct instances, consisting of 12, 16, and 22 visiting points, respectively. Each instance was generated specifically for this research, employing the nomenclature UCX_Y for its designation, where X represents the use case number and Y denotes the problem size. For the sake of transparency and replicability, the created benchmark and the obtained results are openly accessible in [29]."}, {"title": "A. UC1: Two drones and a single depot", "content": "In Fig. 3, we present the results obtained by Q4RD for the instances corresponding to UC1, where both drones commence and conclude their routes at the same depot. Notably, for comparative purposes, the quality of each route calculated by Q4RD has been assessed against a solution calculated by Google OR-Tools. For this purpose, an implementation openly shared has been used. In all examined cases, both methods yielded identical results, thereby demonstrating the reliability of the system developed in this paper."}, {"title": "B. UC2: Two drones and two depots", "content": "The primary distinction between UC2 and UC1 is the presence of two depots, each geographically situated at different locations. This configuration results in the creation of two completely independent routes, as the drones start and conclude their route in separate depots. That is, a drone is not permitted to begin its route at one depot and finish it at the other.\nConsequently, once the Clustering phase is completed and the points that will constitute each route are established, the subsequent step is to assign a depot to each route. This assignment is carried out as follows: first, the geometric center is computed for each subgraph:\n$X_c = \\frac{1}{n} \\sum_{i=1}^{n} X_i, Y_c = \\frac{1}{n} \\sum_{i=1}^{n} Y_i$  (1)\nAfter that, the distances from each depot to the centroid of each cluster are measured. The final assignment is the one that results in the shortest total distance, ensuring the depots are assigned in a way that minimizes the overall travel distance to the subgraphs. We depict in Fig. 4 the results obtained by Q4RD for the instances corresponding to UC2."}, {"title": "C. UC3: Two drones, two depots and itinerant charging stations", "content": "The main goal of the routing problem addressed in this UC3 is to design an open route that minimizes the total cost. This route must start from one of the depots, visit each mandatory point, and conclude at one of the multiple charging points distributed across the scenario. It is important to emphasize that the number M of charging stations utilized in each instance is equal to N/3, where N represents the number of the visiting points, as previously mentioned. These stations have been randomly distributed in what could be considered the periphery of the mandatory visiting nodes. This aspect becomes much clearer upon a brief examination of Fig. 5. Furthermore, it should be clarified that these charging stations are not considered in the first step of the solving process, that is, the Clustering phase.\nGiven the necessity of considering charging stations and concluding the route at just one of them (discarding the rest), we have crafted an optimization problem tailored to this specific use case. Thus, we have developed a mathematical formulation suitable on D-Wave's CQM model, enabling the problem to be solved using the above mentioned CQM-Hybrid approach. For this paper to be self-contained, we proceed now with the mathematical description of the problem designed.\nCodification and variables: A binary encoding referred to as node-based [30], has been employed to represent both the depot and the mandatory visiting points. Consequently, a\nset X = {$X_0,..., X_n$} of lists has been established, where each $X_i$ corresponds to a single node i, with n being the total number of visiting nodes and 0 denoting the depot. Moreover, $X_i = \\{x_{i,0},..., x_{i,n}\\}$, where $x_{i,p}$ is a binary variable indicating the position of node i along the route. Specifically, $x_{i,p}$ is 1 if node i is visited in position p of the route, and 0 otherwise.\nAdditionally, a set of binary variables Y = {$Y_1,...,Y_m$} is introduced, where m denotes the total number of charging points. In this set, $y_i$ is 1 if the route ends at the charging point i, and 0 otherwise.\nObjective: The problem has a single objective, which is to minimize the total cost of the constructed route.\n$f(x) = \\sum_{i=1}^{n} C_{0i} x_{i1} + \\sum_{p=1}^{n-1} \\sum_{i,j=1, i \\neq j}^{n} C_{ij} x_{ip} x_{j p+1} + \\sum_{i=1}^{n} \\sum_{j=1}^{m} C_{i j+n} x_{i n} y_j$  (2)\nProblem constraints: The aforementioned objective is constrained by three distinct restrictions, which are:\n\u2022 Visiting Nodes consistency: a visiting node i must be visited exactly once.\n$\\sum_{p=1}^{n} x_{i p} = 1,  \\forall i \\in \\{1,..., n\\}$   (3)\n\u2022 Location consistency: Only one visiting node i can be assigned to each position p in the route. In other words, two nodes cannot be visited at the same time.\n$\\sum_{i=1}^{n} x_{i p} = 1,  \\forall p \\in \\{1,..., n\\}$  (4)\n\u2022 Charging point consistency: The number of charging points to visit must be exactly one\n$\\sum_{i=1}^{m} y_i = 1$  (5)\nFinally, to ensure that every route starts from the depot, we establish $x_{0,0} = 1$. We show in Fig. 5 the solutions got by Q4RD for the instances corresponding to UC3. Due to the unique characteristics of this use case, it has not been possible to conduct a comparison with a classical method, as done for the previous use cases. This task is designated as future work."}, {"title": "V. CONCLUSIONS & FURTHER WORK", "content": "In this paper, we have presented a hybrid approach, coined Q4DR, to solving drone routing problems by leveraging the capabilities of quantum computing. Being one of its main contributions, our approach combines quantum annealing and gate-based quantum computing techniques, employing D-Wave's hardware and the Eclipse Qrisp programming language. The proposed system effectively addresses designed drone routing problems, demonstrating its utility through three use cases of increasing complexity.\nDespite the encouraging results, several challenges persist. The current constraints of quantum hardware, including the limited number of qubits and issues related to decoherence and noise, limit the size and complexity of problems that can be efficiently addressed. Furthermore, the integration of classical and quantum computing paradigms (including the combination of annealing and gate-based computing) needs further refinement to fully leverage the strengths of hybrid methods.\nNumerous exciting challenges and opportunities have been identified for future endeavors:\n\u2022 With respect to the problem definition:\nAn extension of Q4DR to deal with a broader range of restrictions and objectives, making it applicable to a wider variety of scenarios. Potential new features might include priority nodes or accounting for drone capacities. Consider other types of unmanned vehicles in order to have an heterogeneous fleet of units.\n\u2022 Regarding technology and the solving approach:\nEmploy complexity reduction mechanisms to efficiently manage larger scenarios by minimizing the problem's size while preserving all constraints.\nExplore the use of more advanced quantum algorithms and hybrid techniques to improve solution quality and scalability.\nInvestigate the potential of emerging quantum hardware technologies to overcome current limitations and enable the solving of larger and more complex problems.\nConduct an extensive benchmarking using classical optimization methods to further validate Q4DR.\nBy tackling these challenges and exploring new paths for enhancement, we aim to advance the field of quantum optimization and contribute to the practical application of quantum computing in logistics and route planning."}]}