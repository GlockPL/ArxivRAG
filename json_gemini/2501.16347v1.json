{"title": "Identification of Hardware Trojan Locations in Gate-Level Netlist using Nearest Neighbour Approach integrated with Machine Learning Technique", "authors": ["Anindita Chattopadhyay", "Siddharth Bisariya", "Vijay Kumar Sutrakar"], "abstract": "In the evolving landscape of integrated circuit design, detecting Hardware Trojans (HTs) within a multi-entity-based design cycle presents significant challenges. This research proposes an innovative machine learning-based methodology for identifying malicious logic gates in gate-level netlists. By focusing on path retrace algorithms. The methodology is validated across three distinct cases, each employing different machine learning models to classify HTs. Case I utilizes a decision tree algorithm for node-to-node comparisons, significantly improving detection accuracy through the integration of Principal Component Analysis (PCA). Case II introduces a graph-to-graph classification using a Graph Neural Network (GNN) model, enabling the differentiation between normal and Trojan-infected circuit designs. Case III applies GNN-based node classification to identify individual compromised nodes and its location. Additionally, nearest neighbor (NN) method has been combined with GNN graph-to-graph (Case \u2013 II) and GNN node-to-node (Case - III). Despite the potential of GNN model graph- to-graph classification, NN approach demonstrated superior performance, with the first nearest neighbor (1st NN) achieving 73.2% accuracy and the second nearest neighbor (2nd NN) method reaching 97.7%. In comparison, the GNN model achieved an accuracy of 62.8%. Similarly, GNN model node-to-node classification, NN approach demonstrated superior performance, with the 1st NN achieving 93% accuracy and the 2nd NN method reaching 97.7%. In comparison, the GNN model achieved an accuracy of 79.8%. However, higher and higher NN will lead to large code coverage for the identification of HTs.", "sections": [{"title": "I. INTRODUCTION", "content": "Globalization has brought significant transformations in the entire supply chain of integrated circuits (ICs). In the contemporary landscape of computer systems, chips may undergo manufacturing processes including fabrication and assembly in various locations around the world. This imposed the challenge for tracing the origin of these com- ponents [1]. Moreover, the heavy reliance on overseas foundries for IC fabrication, coupled with the growing awareness of the vulnerability of chips to HT insertion in these foundries, has intensified security concerns. In the recent past, several methods have been proposed for HT detections for ensuring the trustworthiness of the fabricated chips [2-4]. However, the primary obstacle encountered in previously developed non- destructive approaches is the accuracy of detection.\nConsequently, chip-level reverse engineering becomes a necessary albeit costly recourse to address the Trojan detection challenge. Now a days advanced imaging-based techniques are promising option for driving the complete netlist from a fabricated chip [5]. This will also help the designers for comparing the changes with their original de- sign and identify any changes, if any, incorporated during the chip fabrication process. However, such techniques are not applicable to Commercial-Off-The-Shelf (COTS) ICs and System-on-Chips (SoCs) incorporating third-party Intellectual Properties (IPs) due to the absence of golden models. COTS ICs and SoCs requires more sophisticated design analysis tool. Recent developments in this area have seen the emergence of various tools [6]. However, these tools consider all the internal registers uniformly and attempt to recognize functional logic through pattern matching, resulting in a mixture of control logic and data path within the identified functional components. This complicates the task for testers in fully recovering the design's functionality. Hence, identification and pin-point the exact locations of functional Trojans inside ICs are still an area of concern.\nIn this paper, an attempt has been made for identifying functional Trojans (especially, their exact locations inside the circuits) that are inserted maliciously during the fabrication process. In this paper, an offline technique for HT detections utilizing gate level netlist is proposed, as shown in Figure 1. Figure 1 outlines a comprehensive methodology for detecting HTs in digital circuits, leveraging graph-based representation and machine learning techniques. The process begins with a gate-level netlist, which contains the digital circuit in terms of logic gates and their interconnections. This netlist is then flattened to remove any hierarchical structures, simplifying the design into a single level of logic gates and connections. The flattened netlist is subsequently transformed into a graph representation. This graph representation facilitates the application of GNNs and other machine learning models to detect anomalies indicative of hardware Trojans. The output from the proposed model identifies nodes and subgraphs that are potentially infected with hardware Trojans. Finally, the process involves locating the exact positions of these infected nodes within the original gate-level netlist, enabling precise identification of compromised parts of the circuit and facilitating subsequent corrective actions. The design netlist of"}, {"title": "II. RELATED WORK", "content": "The design of digital circuits commonly occurs at the Register Transfer Level (RTL). RTL provides the details of signal flow among various registers. RTL descriptions are then transformed into gate-level netlists utilizing logic synthesis tools, outlining gates and their interconnections. Subsequently, place and route algorithms are used for the placement of gates and routing of interconnections. However, this translation incurs information loss from a reverse engineering standpoint (from netlist to RTL), particularly in terms of module boundary and hierarchy information [7][8]. Moreover, various optimizations are implemented to achieve predefined goals like improved area or timing. Consequently, reverse engineers target their data to recover essential high-level design information [9-14].\nA comprehensive case study is presented provide an exhaustive review of the intersection between machine learning (ML) techniques and hardware security, specifically focusing on the detection and mitigation of hardware Trojan attacks using supervised learning techniques have been prominently discussed for their high accuracy in classifying known Trojan signatures [9]. A novel technique that enhances the efficiency of extracting FSMs is also proposed in the past that is very helpful in understanding the behavior of digital circuits [10]. Building upon previous work, the research work delves into the extraction of functional modules from flattened gate-level netlists. The research expands understanding of identifying and categorizing functional components within digital circuits, offering valuable insights for reverse engineering practitioners [11]. Behavioral pattern mining based reverse engineering circuits technique is also explored. It provides the application of pattern mining in reconstructing circuit behaviors, contributing to the advancement of effective reverse engineering methodologies [12] [13]. A template- based solution is also proposed to the challenges posed by circuit complexity, contributing to the arsenal of tools available for reverse engineers [14]."}, {"title": "III. METHODOLOGY", "content": "In recent past, machine learning techniques have been used extensively for HT detections. Among these, GNNs have shown promising results due to its ability to effectively model the complex interconnections within a circuit represented as a netlist [15]. By treating the circuit as a graph, where nodes represent individual components (gates) and edges (signals) represent their connections, GNNs can capture intricate relationships and patterns indicative of Trojan behaviour.\nIn general, HT detection in netlists using GNNs follows the following approaches. At first the netlist data is pre-processed to extract relevant features and construct the graph representation. Next, designed a GNN architecture tailored to capture the unique characteristics of netlist graphs while mitigating issues such as overfitting and computational complexity. Subsequently, the model is trained using labelled datasets containing both Trojan free and Trojan infected netlists. Finally, the performance is evaluated of the trained model. Matrices such as accuracy, precision, recall, and F1- score are generally used for assessing the efficiency of machine learning models in Trojan detections. The GNN methodology holds the potential to complement existing detection techniques and pave the way for more robust and scalable solutions in safeguarding electronic systems against hardware-level threats."}, {"title": "A. Key challenges addressed using GNN approach", "content": "1) Circuit Representation: Traditional machine learning models which are typically employed for image like data (for example, Convolutional Neural Networks (CNNs)), are ill-suited for directly processing netlists due to their non 2D structure. Since netlists do not confirm to the matrix based organization of pixels or other input data, there arises a necessity for developing a specialized encoding method tailored to circuit data to facilitate Trojan detection.\nii) The analysis of reverse engineered netlists can reveal a complex maze of gates, largely stemming from the 'flattening' technique utilized in computer aided design tools. This flattening procedure merges various sub-circuits, eroding hierarchical design details and heightening the difficulty of isolating individual components.\niii) Training Dataset Requirement: The effectiveness of Trojan detection models heavily relies on the accessibility of a meticulously curated training dataset. These datasets must also be complete with correct labels delineating the association of gates with specific sub-circuits. Also, the machine learning model requires significant amount of diverse dataset to prove it robustness and efficacy across a broad spectrum of Trojan implementations."}, {"title": "B. Proposed Methodology", "content": "To tackle the above mentioned key challenges, a new technique based on GNN approach is proposed. It is based on a machine learning driven framework designed to autonomously and precisely identify and categorize Trojans inside the circuits within a flattened netlist. The core concept revolves around utilizing GNNs capabilities for un-derstanding and analyzing both the structural and functional attributes of different circuits. This initiative stems from the recognition that a gate-level netlist can be depicted as a graph, where individual sub-circuits or sub-graphs typically display unique functionalities and configurations. Machine learning driven HT detection techniques categorize Trojan circuits based on features. To gather features, extraction on established HT benchmarks obtained from Trust-hub [16]. The netlist is generated using Yosys [17].\nThe implementation of the proposed strategy involves several key steps. Initially, the gate-level netlist data, representing the structural elements of the integrated circuit design, is collected and preprocessed to extract relevant features. These features may include connectivity patterns, gate types, and other attributes indicative of potential Trojan activity. Subsequently, a ML algorithm, such as a decision tree or neural network, is trained on labeled data to learn patterns associated with both normal circuits and circuits with Trojan insertions. During the training phase, emphasis is placed on incorporating techniques to handle class imbalance and optimize model performance. Once the model is trained and validated, it is deployed to analyze new gate-level netlists, where it identifies suspicious patterns indicative of Trojan presence. The proposed strategy enables automated and efficient detection of HTs and its locations inside the gate-level netlist, offering a proactive defense mechanism against malicious modifications in integrated circuit designs. Through continuous refinement and validation, this approach holds promise for bolstering the security of hardware systems against emerging threats in the semiconductor industry."}, {"title": "IV. DATASET AND MODEL", "content": "The proposed model employs a set of benchmarks comprising gate-level netlists taken from Trust-Hub [16]. In order to make datasets more generalized, additional netlists of new data are also generated. These netlists contain a variety of HTs, including combinational and sequential logic [15-19]. The devised HT feature extraction approach was implemented using Python. This model is employed for training and testing with the extracted features derived from HT benchmarks sourced from (a) Trust-hub [16] and (b) the netlist generation platform in Yosys [17]. The dataset used for hardware Trojan detection was sourced primarily from the Trust-Hub platform, specifically from the chip and netlist sections. It includes a variety of circuit designs that encompass a range of complexities and potential vulnerabilities. The dataset is composed of 1200 circuits, with a mixture of both standard designs and those intentionally embedded with hardware Trojans. This comprehensive collection of circuit netlists provided a solid foundation for developing and evaluating machine learning models, particularly in detecting hardware Trojans across different circuit architectures."}, {"title": "A. CASE I: HT DETECTION USING MACHINE LEARNING", "content": "The proposed model in case I presents a structured workflow for detecting HTs in digital circuits using ML technique, specifically focusing on a decision tree algorithm (refer Figure 2 for further details). The process begins with an RTL dataset representing the design's Register Transfer Level (RTL) description. This dataset is processed using Yosys, a tool for synthesis and optimization, resulting in a gate-level netlist that provides a detailed description of the circuit in terms of logic gates and their connections. This netlist is then converted into a graph, where nodes represent logic gates and edges represent interconnections.\nThe next step involves preparing the data for machine learning. Each node and edge in the graph is encoded with labels to facilitate further analysis. The encoded data undergoes vectorization and transforming it into a numerical format suitable for machine learning models. The core of the process employs a decision tree algorithm. It is used for analysing the vectorized data and recognize patterns or anomalies suggestive of HTs."}, {"title": "", "content": "The objective of the proposed technique is to improve the accuracy and efficiency of Trojan detection by analysing the internode relationships within the circuit netlist. Mathematically, it can be expressed as:\n$\\hat{y}(x) = \\text{Decision Tree} (x, \\text{NearestNeighbor} (x, D))$\nwhere $\\hat{y} (x)$ represents the predicted label for a given node x, Decision Tree denotes the decision tree algorithm, NearestNeighbour signifies the nearest neighbour search- function, and D is the dataset containing labelled nodes used for training and validation. By iteratively comparing nodes and leveraging decision tree based classification, this approach facilitates the identification of potential HTs within the circuitry. This methodology integrates traditional electronic design automation (EDA) tools with advanced machine learning techniques to enhance the detection of malicious hardware modifications, ensuring the security and integrity of digital systems. By leveraging the decision tree algorithm, the approach provides a robust framework for identifying hardware Trojans, contributing to the field of hardware security."}, {"title": "B. CASE II: GRAPH TO GRAPH COMPARISON", "content": "To address these limitations of case I, case II introduces a graph-to-graph classification approach using a Graph Neural Network (GNN) model. This method enables differentiation between normal and Trojan-infected circuit designs by leveraging the structural properties of graphs. The GNN model can effectively capture complex patterns and relationships within circuit designs, making it well-suited for detecting sophisticated Trojans.\nCase II illustrates a workflow for generating graph data from RTL datasets using Neural GNN model (refer Figure 2 for further details). Initially, RTL datasets are synthesized and optimized using Yosys, producing a gate-level netlist. This netlist undergoes graph generation to form a complete graph, including infected graph data, which represents potential errors or modifications. The GNN model then processes the graph through three main stages, i.e. (a) graph convolution, (b) graph pooling, and (c) graph readout. Graph convolution extracts feature from the graph, graph pooling reduces the graph's complexity while preserving essential information, and graph readout generates the final graph data output. These labeled graphs are passed through a Graph Convolutional Network (GCN) with a Softmax activation function to extract features and perform node classification. The foundation of methodology lies in formulating the HT detection problem as a binary classification task, where each circuit instance is classified as either benign or Trojan-infected. Mathematically, this can be represented as y=fo (x), where \u0177 denotes the predicted output label, fo represents the deep learning model parameterized by 0, and x signifies the input feature vector extracted from the netlist. A comprehensive dataset comprising both benign and Trojan-infected circuits is constructed, ensuring a diverse and representative training corpus.\nThe resulting graph data, comprising nodes, edges, and their labels, is then utilized to train machine learning model. This trained ML model is subsequently used to identify HT-infected nodes, yielding detection results that differentiate between normal and HT-infected nodes. This approach leverages the graph's structural information and the ML models' learning capabilities to efficiently detect and classify potential hardware Trojans within the dataset. Thus the model demonstrates the efficacy of the deep learning-based approach in accurately detecting HTs. Hence, surpassing traditional methods in terms of both detection accuracy and computational efficiency, thus safeguarding electronic systems against potential threats posed by malicious hardware modifications. Further details are provided in Algorithm 2.\nThe model also incorporates nearest neighbour (NN) techniques, examining both the 1st and 2nd nearest neighbours during the classification process. By taking into account each node's immediate neighbour, i.e. 1st nearest and the next closest to 1st nearest neighbour, i.e. 2nd nearest, the model enhances its capacity to detect Hardware Trojans. This layered neighbour analysis provides additional context, enabling more accurate identification of Trojan related irregularities. Graph based methods capture the structural relationships between nodes and edges, offering efficient contextual information that would help in accurate classification. The GCN is the backbone of GNN model, allowing the node embedding to be learned through the propagation and aggression of information across neighboring nodes. This together with softmax layer applied, classifies nodes as HT infected or normal. The incorporation of these techniques serves to point out the importance of GNN based technique in strengthening the reliability and robustness of HT based detection methods in hardware security applications."}, {"title": "C. CASE III: GNN MODEL USING NODE CLASSIFICATION", "content": "To overcome the limitations of Case I and Case II, Case III applies GNN-based node classification to identify individual compromised nodes and their locations. This ap-proach leverages the graph structure of a circuit design to predict node labels (normal or infected). By applying this method at the node level, we can gain insights into the extent and location of compromise within a circuit design.\nCase III presents a detailed workflow for detecting HT in RTL datasets using a com- bination of graph-based methods and machine learning techniques. The process begins with the RTL dataset, which is synthesized and optimized using Yosys, resulting in a gate-level netlist. This netlist is then converted into a graph structure during the graph generation phase. The next step involves node labeling, where each node, edge, and node label within the graph is identified and annotated. These labeled graphs are pro- cessed through a GCN followed by a Softmax activation function to extract features and classify the nodes. The processed graph data, including nodes, edges, and their labels, is then used for training a ML model. The trained ML model is subsequently employed to detect HT-infected nodes, providing detection results that distinguish between normal and HT-infected nodes. This method leverages the structural information of the graph and the learning capability of ML models to effectively identify and classify potential hardware Trojans in the dataset."}, {"title": "VI. CONCLUSION", "content": "In this research, a machine learning-based methodology to tackle the challenge of detecting Hardware Trojans (HTs) in gate-level netlists within the multi-entity design process of integrated circuits is proposed. By leveraging path retrace algorithms, the approach successfully identifies malicious nets introduced by adversaries, pinpointing their locations within the circuit. Through validation across three distinct cases, each employing different machine learning models, we demonstrated the effectiveness of the proposed method. Case I showed that integrating PCA with decision tree algorithms improves the detection accuracy for node-to-node comparisons. Case II and Case III employed GNNs for graph-to-graph and node-to-node classifications, respectively, to detect HTs. The nearest neighbour method, when combined with GNN-based models, further enhanced the detection performance. Notably, the second nearest neighbour method achieved the highest accuracy, outperforming GNN models with 97.7% accuracy in both graph-to-graph and node-to-node classifications. In future the plan is to enhance the proposed feature extraction strategy and the machine learning model to attain improved detection outcomes, particularly for Trojans with fewer structural features."}]}