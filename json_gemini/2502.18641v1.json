{"title": "WhatELSE: Shaping Narrative Spaces at Configurable Level of Abstraction for AI-bridged Interactive Storytelling", "authors": ["Zhuoran Lu", "Qian Zhou", "Yi Wang"], "abstract": "Generative AI significantly enhances player agency in interactive narratives (IN) by enabling just-in-time content generation that adapts to player actions. While delegating generation to AI makes IN more interactive, it becomes challenging for authors to control the space of possible narratives - within which the final story experienced by the player emerges from their interaction with AI. In this paper, we present WhatELSE, an AI-bridged IN authoring system that creates narrative possibility spaces from example stories. WhatELSE provides three views (narrative pivot, outline, and variants) to help authors understand the narrative space and corresponding tools leveraging linguistic abstraction to control the boundaries of the narrative space. Taking innovative LLM-based narrative planning approaches, WhatELSE further unfolds the narrative space into executable game events. Through a user study (N=12) and technical evaluations, we found that WhatELSE enables authors to perceive and edit the narrative space and generates engaging interactive narratives at play-time.", "sections": [{"title": "1 Introduction", "content": "Interactive Narrative (IN) is a form of digital storytelling experience where the player can influence a dramatic storyline through their actions [27, 63]. IN takes various forms in entertainment and education applications, with the most prominent one being branching storylines in role-playing games [61], where the author predefines the range of player actions and creates multiple storylines reflecting the consequences of different player choices. Instead of one single narrative, the author creates a narrative space consisting of all possible storylines a player can experience.\nThe advancement of Large Language Models (LLMs) has the potential to revolutionize IN by enabling the automatic generation of content based on the user's specifications [42, 44, 89]. This enables just-in-time generation of narrative content to adapt to different game world states. Instead of enumerating all possible storylines, authors can convey their broad narrative intent to the LLM as prompts, and let the model render concrete narrative instances customized by the player's in-game context [10, 36, 57, 79]. For example, Inworld Origin [2] is a narrative-driven adventure game"}, {"title": "2 Related Work", "content": "2.1 Authoring Interactive Narratives\nVarious tools have been proposed to support authoring Interactive Narratives (IN) in the past decades [25, 26, 67]. Many of these tools are designed to give better control and management over branching storylines, enabling rich player actions while maintaining authorial control [22]. IN Authoring tools usually organize the narrative space in explicit branching structure [13] to enable intuitive understanding, including flowchart-like structures [22], state machines [24, 80], and collections of modular story chunks conditioned on game world states (\"storylet\") [38]. Every possible narrative instance is manually authored, which ensures that the author's intent is precisely preserved [63]. Much of the prior work seeks to make the authoring process more efficient through more compact representations of storylines [69]. However, despite these efforts, the complexity of defining all possible plot progressions remains a significant challenge [63]. IN authoring continues to be a time-intensive and engineering-heavy process, often falling short of expectations [26, 71].\nRecent efforts have moved towards play-time narrative generation, reducing the need for extensive manual authoring [21, 23]. Authors set high-level narrative requirements, allowing for automated procedural story generation that responds to player actions [64]. While this approach saves manual effort, authors need to express their authorial intent through means other than high-level specifications. To address this challenge, our system proposes various levels of abstraction grounded in the theory of narrative structure [50], allowing authors to express design requirements from beat-level concrete details to story-level flexible goals.\n2.2 Narrative Generation\nA prominent approach to generating plots is through symbolic narrative planning [4, 41, 51, 66, 87, 96], which explicitly models the story domain and simulates the causal dynamics of possible plot events to guarantee the causal soundness of generated plots in the simulated context. The author describes a desired world state at the end of plot execution as a \"narrative goal\", and the narrative planning algorithm needs to generate a sequence of state\n2.3 Narrative Space\nThe concept of narrative space refers to the range of stories that a system can generate [65], possibly conditioned by constraints or requirements from the author. A narrative space can be characterized in different ways. For example, traditional interactive fiction defines its narrative space with explicit branching storylines. The symbolic narrative planning system usually defines its narrative space based on the story domain [58], i.e., the possible events that can happen in a story world derived from the characters, locations, objects, and character action schema.\nThe narrative space of a generative system based on LLMs is characterized by the LLM model itself and the prompt creation mechanism. Unlike narrative spaces defined by formal representations like branching diagrams and state machines [63], narrative spaces based on natural language have soft boundaries due to the inherent fuzziness of natural language semantics. The open-endedness of LLMs makes such narrative spaces more difficult for the author to perceive. Existing work has explored semantic abstraction of sentences called \"events\" [4] and \"loglines\" [53], as a unit of a story that"}, {"title": "3 Challenges of AI-Bridged Interactive Narrative Authoring", "content": "Interactive Narrative allows players to influence storylines through their actions, with authors creating a narrative space of possible storylines. During the authoring process, authors predefine the range of player actions and creates multiple storylines reflecting the consequences of different player choices. AI-bridged IN generates just-in-time narrative content that adapts to different game world states, freeing authors from enumerating storylines. However, shifting from traditional IN to AI-bridged IN presents challenges for authors in expressing, perceiving, and controlling the narrative space. Authors often struggle to articulate their implicit narrative intents in high-level prompts [53] and may underexpress their intent to Al systems [37]. While novice authors might start with a concrete example [52, 81], a single narrative instance can be both overly detailed and insufficient, as it includes unnecessary specifics and lacks broader context [37]. Therefore, neither concrete instances nor abstract specifications alone are ideal for defining a narrative space. Instead, the ability to configure the level of abstraction is necessary to support AI-bridged IN authoring.\nOn the other hand, once a narrative space is defined via prompts, the author has limited insight into the player experience, as players are responded with unscripted character actions and dialogs generated by LLMs at play-time. It is difficult to identify and prevent the deviations beyond the the author's narrative intent. Therefore, it is important to provide valuable information on how different types of player could react to instances, through which authors could preview the narrative instances as they get unfolded in the"}, {"title": "4 WhatELSE: System Design and Implementation", "content": "In this section, we present the interface and features of WHATELSE, describe its technical pipeline to facilitate the transformation between narrative instances and narrative outlines, and demonstrate its workflow with an example user story.\n4.1 Narrative Space Editor Interface\nWHATELSE system assists the user in creating a narrative space. The user can upload narrative examples in text file(s). In addition, the user uses a sentence to describe a story's moral (e.g., \"kindness is never wasted\"). The system uses the story input to construct an initial version of the narrative space. The user can edit this narrative space using the interface. WHATELSE features three views for the user to perceive the narrative space: Pivot View, Outline View, and Variants View (Figure 2).\nPivot View The pivot view shows a pivot narrative instance. A pivot (narrative instance) is a user-defined narrative instance, considered as a representative instance in the narrative space. By default, the user's input is automatically marked as the pivot. The pivot serves as a point of reference as the user edits the narrative space.\nOutline View An outline is an abstract specification of a sequence of events defining the narrative space. Similarly to \"loglines\" [53], it specifically describes the general structure of the narrative with a sequence of high-level events - e.g., \"A small creature runs into an accident. It was then saved by another creature\". The outline describes\nthe narrative space from a broader perspective by capturing the commonality across all the narrative instances in the narrative space. It represents the most abstract manifestation of the author's narrative intent, thus defining the boundary of the narrative space.\nVariants View A variant (narrative instance) is a narrative instance residing in the current narrative space. A variant instantiates the outline with a sequence of concrete events - e.g., \"An ant fell into water. A dove dropped a leaf next to the ant. The ant climbed on the leaf. The ant was saved.\" Each abstract event in the outline is expanded to multiple concrete events in a variant.\nThe variants are displayed in an interactive scatter plot along two dimensions to help users understand the shape of the narrative space: 1) the authorial intent dimension, measured by the distance between the moral expressed by the variant and by the pivot (ranging from 0 to 1)\u00b9, and 2) the emergence dimension, measured by how much the plot progress in the variant deviates from the pivot (ranging from 0 to 1). These two dimensions are inspired by the \"authorial intent\" dimension in Riedl's taxonomy of IN approaches [62, 63], as well as the notion of \"emergence\" [83] and \"interactivity\" [72] from prior IN research. Users can configure the number of variants to be generated for visualization. Users can click on any variant in the visualization to display its detailed content, allowing them to compare it with the pivot. Users can also use a scroll bar to visualize the plot progression as they develop across different stages, allowing them to perceive how the narrative variants evolve over time and deviate from the pivot.\nThese three views provide different perspectives for users to inspect the narrative space. We also provide editing tools at each view to support shaping the narrative space in different ways.\n4.  1.1 Support Editing the Narrative Space. The system provides editing tools at outline and instance level.\nOutline Editing Users can constrain or relax the boundary of the narrative space by adjusting the outline's level of abstraction. The more abstract the outline is, the less constrained the narrative space is. For example, \"a small creature got into an accident\" is more abstract than \"the ant fell into water\", enabling more possible narrative instances to be generated. The former removes the constraint on \"the small creature\" being \u201cthe ant\", and the \"accident\" being \"falling into water\". A less constrained narrative space allows stronger player agency but follows a looser authorial structure. Outline editing allows the user to tune the narrative space to reach a desired balance between authorial structure and player agency. The system provides two tools to support the abstraction editing.\n\u2022 Abstraction Ladder (Figure. 2.A) The abstraction ladder helps the user to shift the global level of abstraction across the events in the outline. Inspired by theories of narrative structure [50, 74], this ladder covers a spectrum of abstraction levels (beat, scene, sequence, act, and story level). An outline at the beat level is similar to a narrative instance, while an outline at the story level summarizes the plot into a one-line overview. Between the two ends, each level of abstraction is progressively more abstract than the previous level. For instance, a scene-level outline provides detailed descriptions of specific scenes, including characters, actions,\n1This distance is evaluated by prompting the LLM to assess how well the moral is conveyed\n objects, etc: \"The kind dove takes a leaf to reach the ant and drags it out of a water bubble.\" An act-level outline offers a highly summarized view of the narrative, focusing on the turning points: \u201cA character saves their friend from danger.\u201d\n\u2022 Abstraction Tooltip (Figure. 2.B) The abstraction tooltip allows the user to adjust the sentence, phrase, or word-level abstraction in a more fine-grained manner. Practically, when users select a text snippet in their outline plots, the tooltip appears, offering two options: \u201cMore Abstract\" and \"More Concrete\". By clicking the button, users receive suggested edits that replace the selected content with a more abstract or more concrete phrase. While the abstraction ladder provides global control over the entire outline, the tooltip enables more fine-grained adjustments at the word or phrase level. The suggestion of making the selected content more abstract or more concrete is based on the taxonomy in linguistics [30]. For example, \"character-animal-small animal-cat-tabby cat\" constructs a linguistic hierarchy. Given a selected text snippet \"cat\", requesting a more abstract suggestion would yield its superordinate term \u201csmall animal\" or \u201canimal\", while a more concrete suggestion would provide its subordinate \"tabby cat\".\nOnce the user is satisfied with the outline, they can click the \"Generate Variants\" button to generate narrative variants in the Variant View. Section 4.2.2 describes the technical pipeline for generating narrative instances from outline.\nInstance Editing Users can fine-tune the narrative space by editing the instance-level content in Pivot and Variant View. They can select a variant to set or unset it as the pivot. They can also remove a variant from the narrative space or add it back. Finally, they can directly edit the text in the instances. They can click the \"Generate Outline\" button to update the outline based on their edited variants. For example, a user who does not want to include certain player type may choose to remove all variants by that player type and update the outline. Section 4.2.2 describes different player types in the player proxy model.\n4.2 Technical Pipeline\nThis section describes our technical pipeline supporting the features described in the above section, focusing on the transformation between narrative outline and narrative instances. Specifically, we employ the GPT-40 [55] for the implementation of our system."}, {"title": "4.  2.1 Transforming Narrative Instances to Outline", "content": "We use an LLM prompting pipeline to generate outlines from narrative instances (Figure 3.1). This pipeline first prompts the LLM with domain knowledge in drama writing, providing the context of the story domain and the narrative instances. The pipeline then prompts the LLM to summarize the commonalities across these narrative instances, generating outlines at different abstraction levels based on story structure principles [50]. Finally, the system selects an outline according to the user's chosen level of abstraction.\n4.  2.2 Transforming Outline to Narrative Instances. To generate meaningful events that can react to player actions (DG3), we go beyond text generation and integrate an LLM-based narrative planning approach with character simulation and player proxy models. Our method extends StoryVerse [85] with player interactivity and behavior modeling. Generating narrative instances from outline is essentially simulating an interactive story generation process, where player actions may be generated by computational proxies of players, and the story generated grounded in the causal changes of game world states in accordance with the game mechanism.\nTo explain this process, we assume a Game Environment (Figure 3.4) is given, which contains the Story Domain and maintains the World State. The World State consists of a collection of variables that hold relevant values for the game mechanics, such as the characters' attributes (e.g., health points), current locations, and relationship scores, as well as their memories from the simulation. The Story Domain contains a set of characters, locations, and an action schema that specifies executable actions in the game system. These actions are implemented as executable function calls that modify the variables of World State accordingly. For example, executing the action kill(X) will result in character X's state to become dead.\nThe main game loop starts by sending an event from the outline to the Interactive Narrative Compiler (Figure 3.2) to instantiate a sequence of character actions (Figure 3.3). The Game Environment (Figure 3.4) executes the actions and updates the world states resulting from the generated character actions. Once the Game Environment executes the actions, the player (or a simulated player) can interfere with the game by changing the world states, such as saving a character (Figure 3.5). Finally, the Game Environment sends the updated world states and outline back to IN Compiler for the next iteration. The process loops over the events in the outline plot, and stops when it exhausts all the events.\nPlot Generator Given an event in the outline, the system generates a sequence of character actions that act out the event. It takes into account the current game world state as a result of all previous plot executions and player actions. An LLM is prompted to generate a sequence of character actions that act out the event. The prompt includes the following information from the game environment:\n\u2022 the list of characters and their descriptions;\n\u2022 the action schema;\n\u2022 current world state (including character's memory).\nThis process is very similar to narrative planning which generates a sequence of state transitions that leads to a narrative goal. Compared to classic symbolic narrative planning, our narrative goal may be fuzzier - sometimes it may not be rigidly characterizable"}, {"title": "4.  2.1 Player Proxy Model", "content": "by world states. For example, the narrative goal could be \"everyone likes Bob\", which corresponds to world states semantically in a fuzzy way. This narrative goal can also be any arbitrary statements describing the desired outcome, constraining not only the endings but also the transitions, for example, \"someone was careless and got into an accident\". Therefore, we use an LLM-based method instead of existing symbolic narrative planning methods for transforming outlines into concrete plots.\nPlot Reviewer Similar to symbolic planning problems, the plot generation requires causal soundness. This means the character actions must be valid state transitions according to the game's causal rules. We thus adopt an LLM-based planning method following the LLM-Modulo framework [33], with a game environment simulating plans generated by LLMs and providing external critiques. To review the generated plan, an LLM is prompted to provide feedback regarding the quality and feasibility of the action sequence to improve it:\n\u2022 Overall Coherency Evaluation Feedback is obtained by prompting an LLM to comment on the overall coherency of the generated plot and make suggestions for improvement.\n\u2022 Character Simulation Evaluation For every action in the sequence, we prompt an LLM to play the role of the subject of the action. Given the current world state including the character's memory, we ask the LLM if the motivation for the character to perform the action has been established. We include the explanation to this question in the feedback if the motivation has not been established.\nIn addition, we leverage a simulated Game Environment for external evaluation. The system evaluates the Causal soundness of the generated action sequence and reports the observations on the success/failure of the execution. The combined feedback is added to the prompt for the next round of generation.\nFor example, the event \"a small creature gets into an accident\" could be turned into a sequence of character actions shown in Figure 3.3. Note that the events in the outline plot are at a higher abstraction level. This means the same event can be transformed into multiple character action sequences, leaving room for the exact plot to adapt to different world states \u00b2. Once the final sequence of character actions is generated, it will be executed by the Game Environment to update the world state.\nThe Plot Generator and Reviewer create a sequence of character actions to act out the event. In between these events, the player or NPCs take free actions. These actions are driven by the LLM. The player actions are determined either by a real player's input or a simulated Player Proxy Model (Figure 3.5).\nWhen generating narrative variants, player actions are provided by an LLM-based player proxy model which operates based on player behavior classification derived from previous studies in digital games [92, 94]. Our player simulation incorporates three key player behavior models:\n2In the above example, if the dove is dead at the time of plot execution, then a different character action sequence will be generated - one possibility is that the ant fell into the water."}, {"title": "3 Non-Player Character Simulation", "content": "\u2022 Positive Players in digital games contribute positively by following the intended game objectives and exhibit helping behaviors [11, 82].\n\u2022 Negative Players are the killers identified in classic player modeling [28, 47]. They often exhibit aggressive behavior that disrupts the experience of others, particularly when they seek to dominate or harm others destructively.\n\u2022 Role Players prioritize narrative immersion and character development by mimicking the actions their character would take in the gaming world [59].\nUsing these player models, we simulate a potential plot that could emerge from the interaction between game characters and simulated players within the narrative space defined by the outline. In this way, the system generates a diverse set of narrative instances in the variants view.\nNon-Player Character Simulation An LLM is prompted to role-play as each of the NPCs and generate an action for this character. The prompt includes the following information:\n\u2022 the action schema;\n\u2022 the list of characters and their descriptions;\n\u2022 current world state (including character's memory);\nNote that the character actions are not directly determined by the outline. However, it is affected by the current world state and, therefore, indirectly influenced by the executed events in the outline.\nUsing this pipeline, WHATELSE creates a gameplay experience by unfolding the outline into narrative instances. The system generates the game plot for each event in the outline as a series of character actions. The player then inputs actions within the action schema, which influence the progression of the subsequent plot. The system runs executable actions to update the world state. After each round of player action, the system unfolds the next events until exhausting all the events in the outline, in this way, creating an interactive narrative experience."}, {"title": "1 Example Workflow", "content": "4.3\nBelow we present an example workflow to demonstrate some of the features described above. Alice, a novice text-adventure game designer, wants to create a game based on the setting of a novel she enjoys. Alice opens WHATELSE, along with a game engine preloaded with a story domain based on the novel.\n4.  3.1 Encode Authorial Intent in Narrative Space. Alice starts with a rough draft of the story and a moral she wants to convey: \"Kindness is never wasted\u201d. Using WHATELSE, she uploads her initial story into the system (Figure 4.a). The story is displayed in the pivot view, showing a sequence of events; while an initial outline appears on the right, summarizing the key turning points (Figure 4.b). Alice adds details to the pivot to refine her story. Once satisfied, she clicks the Generate Outline button to update the outline based on her edits. She chooses the \"act level\" and specifies, \"The hunter has to appear in every act\". Alice hovers to see how each event in the outline is mapped to the entries in the pivot plot. She continues exploring different levels to find the ideal level of abstraction.\nAlice finds one of the events (\"The peaceful life is threatened by an unexpected danger from the hunter) to be too restrictive for the hunter to cause the danger. She uses the abstraction tooltip to\n2 Unfold the Narrative Space For interactivity\n4.  3.2\nWith the narrative space defined by the outline, Alice can experience the narrative instances unfolding in a turn-based text adventure game. She goes to the interactivity page. The system loads the story domain that includes a set of characters, locations, and action schema (Figure 4.d). The first sequence of the game plot is generated: a hunter is looking for food and finds a deer to hunt (Figure 4.c).\nAlice, playing as the dove, chooses her next moves from a pin pad (Figure 4.f). She can bravely stop the hunter by giving out her food (Figure 4.e1). Alternatively, she could ask other characters for help (Figure 4.e2). The system compares the player's action with the narrative outline. If the player chooses to save the deer on their own (Figure 4.e1), the event of \"brave assistance\" is fulfilled by the player action. If the player chooses other actions, the system will create an event where another character demonstrates \"brave assistance\" (the witch in Figure 4) to fulfill the event. The system generates subsequent character behaviors based on the player action.\nThis turn-based interaction continues, with Alice alternating between reviewing generated game plots, observing character simulations, and experiencing the generated game play as a player. Since she wrote a total of five events in her outline, the game play proceeds for five rounds, until all the events she planned have been played out. Since the game plots generated are fully structured, Alice can directly export the output of the narrative compiler as a finite state machine into the game engine where she can visualize the characters and locations.\nAdditional Use Cases\n4.  3.3\nIn addition to Alice's case as a text-adventure game designer, WHATELSE can also serve as a powerful tool for a wide range of users. Game masters, mod developers, and"}, {"title": "5 User Study", "content": "We conducted a user study with 12 participants to evaluate WHATELSE. The goals of the study were to (1) understand their usage and perception of the Narrative Space Editor, (2) validate the effectiveness of Interactive Narrative Compiler in preserving authorial intent, and (3) explore the benefits and drawbacks of the AI-bridged IN creation workflow.\n5.1 Participants\nWe recruited 12 participants (6 male, 6 female, between 20 to 34 years old, average 27 years) from within our institution by posting on an internal network channel. The demographic information of the participants was provided in the supplementary material. Participants were asked to self-report their experience in using generative AI (e.g., ChatGPT), digital games, and interactive narratives. Each was compensated with a $75 gift card. All participants reported at least moderate experience in using generative AI. More than half of the participants used to experience interactive narratives. Five participants reported spending more than two hours a week playing digital games. Nine participants reported having no experience creating interactive narratives, while the other three reported having very limited experience.\n5.2 Task\nThe task is to create a playable game plot using the systems provided. Given a story domain and a narrative example with a story moral, participants were asked to generate an outline to guide the creation of a game plot that expresses the same moral as the given narrative instance. The task uses the \"Fairytale Forest\" story domain (Figure 5.3). It contains six characters (ant, dove, hunter, witch, cat, and deer), five locations (mountain, forest, village, brook, and witch house), and an action schema with six actions (\"move to\", \"speak to\", \"kill\", \"attack\", \"think\", \"save\") that defines what characters can perform. Based on the story domain, we adapted two stories widely used in previous studies as narrative examples [1, 78]. These stories feature clear plots centered on emerging danger and the characters' decisions to help each other. The two narratives convey two distinct morals: \"Kindness is never wasted\" and \"Kindness is not always re-warded\". Details of story domain and examples can be found in the supplementary material. We chose this story domain and narrative examples because they are simple and easy to follow, making it suitable for novice users with limited experience in IN. We used the pre-defined story moral as a representation of the authorial intent."}, {"title": "3 Procedure", "content": "5.4\nAll 12 studies were hosted in person. After obtaining consent, an experimenter introduced the background of IN, including the concepts of narrative instance, narrative space, and playable game plots. Participants were oriented to complete the task by the experimenter, who provided instructions, answered questions, and offered help throughout the study. They were informed of two systems. Each system has two stages: creating an outline and playing the game plot generated from it.\nIn each condition, participants had five minutes to prepare a narrative instance with a story moral. An example was provided as a starting point. To prime them for a creator's mindset, participants were encouraged to edit the given story by highlighting interesting scenes or adding details, ensuring their edits still aligned with the story moral. Upon editing the story, participants received a walk-through tutorial on the assigned system's features. Then, they had five minutes to practice and familiarize themselves with the tool. After the tutorial, participants used the assigned system to\n5.5 Measurement and Analysis\nWe collected answers from a semi-structured interview and two questionnaires (narrative editing and game plot questionnaire). We also recorded their interaction activity in the interface. The narrative editing questionnaire focused on assessing the authoring experience. It has 11 questions, including 7 questions rating the controllability, expressivity, and perceived overall experience of the system, as well as 4 questions from the NASA Task Load Index (TLX) [29] which measured participants' perceived workload while using the system. The game plot questionnaire focused on evaluating the player experience and their perceived quality of the generated game plots. This questionnaire included 9 questions rating controllability, expressivity, and the overall quality of the game plots. To examine the potential differences between conditions, we conducted the Wilcoxon signed rank test on the questionnaire results. For the qualitative data collected in the interview, we transcribed audio from the interview and analyzed the results using thematic clustering [8].\n5.6 Results\nWe present questionnaire results (Figure 6), observation of participants' interactions\u00b3 (Figure 7), and their interview responses to understand how WHATELSE helps people shape the narrative space and further unfold it into executable game events. Numbers in brackets indicate Median (Med).\nWHATELSE supports the creation of a narrative outline through authorial controls. Participants reported to have more control in generating the outline using WHATELSE (Med: 7) than baseline (Med: 5, p = 0.048). They also reported that they were less re-strained in creation using WHATELSE (Med: 7) than the baseline (Med: 6, p = 0.049). In the interview, most participants (9 out of 12) commented that the abstraction tools were helpful. As P4 noted, the ability to select the level of abstraction \"allows users to have more control via clicking buttons.\u201d Similarly, P7 highlighted that the Abstraction Tooltip enhanced the creation process by providing \"an easier interface to change anything you got.\u201d Overall, participants were more satisfied with the outline generated using WHATELSE (Med: 7) compared to the baseline (Med: 6, p = 0.047). They felt more successful in completing the task of creating outlines with WHATELSE (Med: 6) compared to the baseline (Med: 5, p = 0.025).\nWHATELSE helps participants perceive the Narrative Space. We found participants alternated between the narrative outline and narrative instance to perceive the narrative space. Nine participants alternated between Variant and Outline View to edit the narrative space, and two participants alternated between Pivot and Outline View (Figure 7). While the Outline View gives a rough idea of the narrative space, participants found the Variant View offered more detailed information. For example, P2 found the Outline View useful but also commented it \"very summarized though\u201d. They then switched to the Variant View for concrete examples, which provided them with \"interesting variations\" (P2) that they found \"very\n3A recording error resulted in the loss of two participant's interaction recordings."}, {"title": "6 Technical Evaluation", "content": "The user study shows that WHATELSE effectively helps users create engaging interactive narratives by enhancing both authorial control and player engagement through efficient narrative space editing. To validate the technical pipeline driving the transformation between narrative outline and instances, we conducted technical evaluations focusing on effectiveness in 1) generating the outline from instances and 2) generating instances from an outline.\n6.1 From Narrative Instances to Narrative Outline\nWHATELSE provides an abstraction ladder with different levels of abstraction to generate an outline from instances using a prompting pipeline. To examine the effectiveness of the pipeline, we employ two lexical-level measures, concreteness rate, and imageability score. Both measures are adapted from large-scale crowdsourced annotations in previous studies that have been widely used in linguistic evaluations [12, 91]. Both scores are lexicon-based, with each word assigned an averaged score from a batch of crowdsourced annotations; for each outline, we calculate the average score across all words in this outline, excluding stop words. Intuitively, a higher\n6.2 From Narrative Outline to Narrative Instances\nWe compared the plot quality generated using our approach with the baseline prompting-based approach (Figure 5) from two aspects: plot diversity and player impact.\nPlot Diversity Plot diversity refers to the ability to generate a wide range of different plots within the narrative space. It indicates the level of interactivity and player agency supported by the plot generation method, as it showcases the system's ability to offer varied storylines within the narrative space described by the outline.\nTo quantitatively assess diversity among a set of N plots generated within the narrative space, we calculate the averaged distance between each plot and the other N - 1 plots in the set. We then compute the average distance for each plot relative to the others. For distance calculation, we use the ROUGE score [45], a reference-based evaluation metric that measures text similarity. Adapting from the ROUGE-1 score r\u2081 targeting word level and macro averaged ROUGE score rmacro measures similarity across multiple levels of wording, we compute the word-level distance $d_1 = 1 - r_1$ and the macro distance $dmacro = (1 - r_{macro})$ between plots, respectively. As the ROUGE score indicates similarity between text, a higher averaged distance indicates the greater diversity of plots.\nFor comparison, we first collected two sets of outlines based on the \"Fairytale Forest\" story domain (Figure 5). The first set, consisting of 12 outlines, was generated by participants in the user study, each tied to one of two specific morals. Additionally, we developed a set of 50 outlines by prompting an LLM, focusing on various morals within the story domain. We simplify each outline"}, {"title": "7 Discussion", "content": "The rise of generative models and prompt engineering has significantly impacted various fields and domains. Our user study results suggest that even laypeople can effectively use LLMs to create executable game plots for interactive narratives with appropriate interactive support. Therefore", "systems.\nDG1": "Enable users to perceive the narrative space WHATELSE provides three views for the user to perceive the narrative space: pivot", "inspiration\u201d (P2) or surprising instances, indicating people may underestimate the size of narrative space when authoring IN. Participants also used variant views to prevent instances from deviating from their authorial intent. The variants view shows the distance of each variant to the pivot, allowing users like P1 to quickly identify outliers and remove unexpected instances in their narrative space. Currently, the variants view displays variants based on authorial intent distance and emergent behavior distance from the pivot. It would be interesting to let users customize these dimensions and dynamically visualize the narrative space, similar to Luminate [76": ".", "nDG2": "Support configurable level of abstraction in editing narrative space Our tools give users the flexibility to adjust the level of detail in their authoring of the narrative space. With the abstraction ladder", "story beats\" (P2). Other participants needed more exploration to find their desired level of abstraction. While the abstraction ladder is designed based on narrative structure, future work should explore making the levels more intuitive for people unfamiliar with narrative writing.\nDG3": "Generate meaningful game events that react to player actions at play-time We adopted an LLM-based narrative planning method that generates causally sound character actions that act out the event defined in the outline. In the study, participants were more satisfied with the game events generated by WHATELSE compared to the baseline (Figure 6.c). They found that the choices they made in the game had a more realistic impact on the characters. Furthermore, the results of the technical evaluation in Table 3 demonstrate that WHATELSE can generate diverse plots that respond to the player's contrasting actions. Like other LLM-based narrative generation, the quality of generated plots is limited by the challenge of preserving long-term dependency and coherence [53"}]}