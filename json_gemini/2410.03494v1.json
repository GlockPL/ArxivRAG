{"title": "GENERATIVE ARTIFICIAL INTELLIGENCE FOR\nNAVIGATING SYNTHESIZABLE CHEMICAL SPACE", "authors": ["Wenhao Gao", "Shitong Luo", "Connor W. Coley"], "abstract": "We introduce SynFormer, a generative modeling framework designed to efficiently explore and navi-\ngate synthesizable chemical space. Unlike traditional molecular generation approaches, we generate\nsynthetic pathways for molecules to ensure that designs are synthetically tractable. By incorporating\na scalable transformer architecture and a diffusion module for building block selection, SynFormer\nsurpasses existing models in synthesizable molecular design. We demonstrate SynFormer's effec-\ntiveness in two key applications: (1) local chemical space exploration, where the model generates\nsynthesizable analogs of a reference molecule, and (2) global chemical space exploration, where\nthe model aims to identify optimal molecules according to a black-box property prediction oracle.\nAdditionally, we demonstrate the scalability of our approach via the improvement in performance as\nmore computational resources become available. With our code and trained models openly available,\nwe hope that SynFormer will find use across applications in drug discovery and materials science.", "sections": [{"title": "Introduction", "content": "The discovery of novel functional molecules is a central challenge in chemical science and engineering and is crucial\nfor addressing key societal and technological challenges, including those related to healthcare [1, 2, 3], energy [4, 5],\nand sustainability [6, 7, 8]. However, the process of discovery is often risky, complex, time-consuming, and resource-\nintensive [9, 10, 11]. Recent advances in artificial intelligence (AI) [12], particularly in generative modeling [13, 14, 15],\nhave opened up new avenues for generative molecular design [16, 17, 18, 19, 20, 21, 22, 23]. The expressivity of deep\nlearning models, coupled with automatic differentiation [24] and increasingly affordable computational resources, have\nmade it possible to model the complex distribution of molecular structures directly. This capability allows for efficient\nexploration of broader virtual chemical space than traditional virtual screening approaches [25, 26, 27], with more\nfine-grained and controllable navigation compared to conventional combinatorial fragment-based methods [28, 29].\nDespite the promise of generative design methods, their adoption has remained somewhat limited. One major challenge\nis that most generative models often produce synthetically intractable molecular structures when targeting specific\ndesign goals, such as optimizing property scores [30, 31, 32, 33]. When designed molecules cannot be synthesized and\nvalidated in the lab at a reasonable cost, their practical value is limited. In addition, the actionability of computer-aided\nmolecular design is crucial for achieving rapid design cycles in early-stage drug discovery [34, 35] and for enabling"}, {"title": "SynFormer: a generative framework for synthesizable molecular design", "content": "SynFormer is a generative framework designed for modeling synthesizable chemical spaces, as schematically illustrated\nin Figure 1. Although it is challenging to predict which molecules can be synthesized without experimental validation,\nthe progress of make-on-demand libraries such as Enamine REAL Space [50], GalaXi [51], and eXplore [52] has"}, {"title": "Results", "content": ""}, {"title": "Molecule reconstruction and chemical space coverage", "content": "An important factor that affects a model's performance in molecular design applications is its coverage of chemical\nspace [72]. Even though the theoretical synthesizable chemical space constructed from reaction templates and building\nblocks is vast, previous models have shown that a trained model can struggle to generate molecules that are known to\nbe synthesizable [64, 65, 57, 67]. This limitation can hinder the model's effectiveness in molecular design if it cannot\naccess the chemical space where the optimal design resides. To assess the coverage of chemical space, we tested the\nSynFormer-ED model on molecule reconstruction: how often SynFormer-ED can reconstruct a viable synthetic path\ngiven a large set of potential molecules of interest.\nWe evaluated reconstruction on a randomly selected subset of 1,000 molecules from ChEMBL Database and Enamine's\nREAL Diversity Set (Figure 2A and B). SynFormer-ED successfully recovers 66% of molecules from REAL, notably\nhigher than that achieved by ChemProjector [67] and SynNet [30]. ChEMBL, by comparison, is a curated database of\nbioactive molecules with drug-like properties, which includes molecules whose syntheses may require building blocks\nor reactions beyond SynFormer's training set. This results in a reconstruction rate of 20%-lower than in REAL Space\nbut still an improvement over previous models.\nWe further demonstrate that the model's performance, as measured by the binary cross-entropy (BCE) of the molecular\nfingerprints (FPs) [69], improves with increasing model size and training data (Figure 2C). Notably, we also observed\nthat the performance of the largest model did not outperform the second-largest model when insufficient data was\navailable. This finding suggests that estimating training performance based on early epochs may not be an effective"}, {"title": "Local chemical space exploration with SynFormer", "content": "In this section, we present the application of SynFormer-ED in exploring the local chemical space around a given\nreference molecule, projecting it into a synthesizable chemical space. We demonstrate two use cases of our model\nin molecular design: (1) generating synthesizable analogs for unsynthesizable designs and (2) hit expansion within\nsynthesizable chemical space."}, {"title": "Synthesizable analog generation", "content": "In molecule reconstruction experiments, we observed that SynFormer-ED is able to generate structurally similar\noutputs even when provided with unsynthesizable (according to its building blocks and reactions) molecules. This\ncapability allows SynFormer-ED to be applied to generate synthesizable structural analogs of unsynthesizable designs,\nas illustrated in Figure 3A. The implicit goal is to preserve as much of the overall structure and key pharmacophores as\npossible, effectively transforming non-feasible molecules into synthesizable compounds, akin to \u201cprojecting\u201d the input\nmolecule onto the synthesizable space.\nTo evaluate the impact of synthesizable projection, we first followed the experimental setup of Luo et al. [67] and used\nSynFormer-ED to generate synthesizable analogs for molecules identified as unsynthesizable by ASKCOS [75] in [30].\nThe original molecules were optimized using de novo design methods targeting ten multi-objective scores, each ranging\nfrom 0 to 1, where higher values are preferable. These scores encompass structural features, physicochemical properties,\nand metrics related to similarity or dissimilarity to known drugs, as well as the presence of specific substructures\n[76]. After the generation of analogs, we evaluated them using the same objective scores that the original designs\nwere optimized for. As shown in Figure 3B, the synthesizable projection effectively eliminated the peak in synthetic\naccessibility (SA) scores [42] at around 6-7 observed in the original designs, shifting the distribution toward more\neasily synthesizable molecules. Additionally, a significant fraction of the generated analogs exhibited objective scores\ncomparable to those of the original molecules (Figure 3C and Figure S2 in the Supporting Information). We demonstrate\ntwo examples in Figure 3D. Starting with high-scoring but seemingly-unsynthesizable molecules, SynFormer-ED\ngenerated analogs that preserved key structural features while correcting the unsynthesizable fragments. The generated\nanalogs retained objective scores comparable to those of the original molecules and are inherently synthesizable (Figure\nS4 in Supporting Information), demonstrating SynFormer-ED's ability to transform an unsynthesizable molecule into a\nsynthesizable analog while maintaining structural integrity.\nTo further validate the utility of SynFormer-ED in realistic drug discovery scenarios, we explored its application\nin structure-based drug design (SBDD) [77, 78, 79]. While numerous SBDD algorithms can generate ligands with\npromising predicted binding affinities (e.g., via 3D pocket-conditioned generation), these methods are often criticized\nfor overlooking synthetic accessibility [80, 81]. SynFormer-ED addresses this gap by projecting the outputs of such"}, {"title": "Hit expansion within synthesizable chemical space", "content": "Building on SynFormer-ED's ability to explore local synthesizable chemical space around reference molecules, we\napplied it to hit expansion within synthesizable chemical space. By allowing the model to select sub-optimal intermediate\nchoices of building blocks or reactions via a beam search, SynFormer-ED can generate sets of close analogs around\nknown hits, as illustrated in 4A. This approach aims to produce additional molecules that preserve the core motifs and\noverall structural integrity, potentially enhancing design objectives and expanding the pool of candidates for downstream\nprocesses, such as hit-to-lead optimization.\nFollowing the setup in [85], we screened ZINC250k [86], a subset of ZINC database [87], using a predictive model\nfor inhibition activity against c-Jun NH2-terminal kinase 3 (JNK3) [88, 89, 90]. The top 10 scoring molecules, with\nscores ranging from 0.49 to 0.68 (the higher, the better), were selected as hits and input into SynFormer-ED to generate\nanalogs, which were then evaluated with the JNK3 inhibition predictor. As a baseline, a nearest neighbor search within\nEnamine REAL (approximately 7 billion molecules) was performed for the hits, retrieving approximately 100 of the\nmost similar molecules for each hit and evaluating them for JNK3 inhibition. While both SynFormer-ED and the nearest\nneighbor search identified additional molecules with scores higher than those from a simple screening of ZINC250k,\nSynFormer-generated analogs exhibited a larger enrichment in the high-scoring region (Figure 4B). We present two sets\nof examples in Figure 4C. Though both methods produced analogs retaining the overall structure with higher predicted\ninhibition than the original hits, the SynFormer-ED analogs consistently achieved higher scores compared to those from\nthe nearest neighbor search.\nTo further validate SynFormer-ED's capability in a more realistic hit expansion scenario, we used experimentally\nverified ligands for Human Pyruvate Kinase M2 (PKM2, PDB ID: 3ME3) [91] and Lysine Acetyltransferase 2A\n(KAT2A, PDB ID: 5MLJ) [92] as reference molecules and evaluated their Vina docking scores. SynFormer-ED was\nused to expand the reported ligands, generating 191 analogs for PKM2, with 179 of them with Tanimoto similarities\ngreater than 0.5 and Vina score changes lower than 1 kcal/mol. For KAT2A, SynFormer-ED generated 200 analogs,\n111 of which met the criteria of Tanimoto similarity above 0.5 and Vina score changes lower than 1 kcal/mol. Figure\n4D and E present three generated analogs for ligands targeting PKM2 and KAT2A, respectively, showing competitive\nVina scores while preserving the overall structure, along with their synthetic pathways (see Figure S11 and 12 in the\nSupporting Information for more examples). Notably, in the case of KAT2A, the synthetic pathways of the generated\nanalogs are diverse despite the structural similarity of the final analogs, highlighting that the SynFormer-based approach\nis not limited by the synthetic pathways of the input hits. This flexibility allows the generation of analogs with\ndistinct synthetic routes, which traditional path-based enumeration strategies [93, 85] cannot achieve. Combined with\nthese results, SynFormer-ED demonstrates significant potential in hit expansion, enabling the generation of practical,\nsynthesizable analogs suitable for further drug development stages."}, {"title": "Global chemical space navigation with SynFormer", "content": "In this section, we demonstrate the application of SynFormer to global chemical space navigation, enabling the opti-\nmization of molecular properties treated as a black-box function across broad chemical spaces [45]. This process, also\nknown as de novo molecular optimization, is key to exploring novel molecular designs. We first show that SynFormer-D\ncan be fine-tuned using reinforcement learning to generate high-scoring molecules (Figure 5A). Furthermore, we\ndemonstrate how SynFormer-ED can be integrated as a mutation step within an evolutionary algorithm (Figure 5C),\nachieving state-of-the-art sample efficiency while constraining the design space to synthesizable chemical space."}, {"title": "Molecular optimization by fine-tuning SynFormer-D with reinforcement learning", "content": "We fine-tuned SynFormer-D using reinforcement learning (RL) to guide its generation toward high-scoring molecules.\nSpecifically, we adopted a variant of the REINFORCE algorithm [94], which iteratively generates a batch of molecules,\nevaluates their properties, and fine-tunes the model parameters with the goal of maximizing the desired properties\n(detailed methods can be found in the Methods section). In our experiments, we optimized predicted binding affinity"}, {"title": "Molecular optimization by using SynFormer-ED as a mutation operator within a genetic algorithm", "content": "Lastly, we demonstrate a genetic algorithm framework incorporating SynFormer-ED projection as a mutation step.\nAfter the standard processes of crossover and mutation to diversify the candidate pool, SynFormer-ED projects all\ncandidates into synthesizable chemical space. This step not only corrects unsynthesizable fragments and linkages,\nensuring synthetic accessibility, but also introduces additional diversity into the candidate pool. Generated molecules\nare then scored and ranked, with the top-performing ones selected for further iterations (Figure 5C). For crossover and\nmutation rules, we follow the GraphGA algorithm [29], a well-established molecular optimization method that regularly\nperforms well in molecular optimization benchmarks [45, 98] and real-world applications [41].\nWe evaluated the performance of this genetic algorithm, denoted as GraphGA-SF, across four tasks from the GuacaMol\nbenchmark [76]: Sitagliptin MPO, Scaffold Hop, Perindopril MPO, and Ranolazine MPO. As shown in Figure 5D,\nGraphGA-SF demonstrated optimization efficiency comparable to the original GraphGA and the state-of-the-art RL\nmethod, Augmented Memory (denoted as AugMem) [97], while significantly outperforming previous methods for\nsynthesizable molecular optimization. Notably, in the Sitagliptin MPO task, where the primary objective score often"}, {"title": "Discussion", "content": "In this paper, we introduced SynFormer, a generative modeling framework designed to efficiently explore and navigate\nsynthesizable chemical space. We curated a set of reaction rules that allow the model to construct a synthesizable\nchemical space beyond Enamine REAL Space, ensuring that the designed molecules are feasible for synthesis subject to\nthe reliability of such rules. By integrating transformer architectures with a diffusion module, SynFormer enhances the\nability to make beneficial choices of building blocks and reactions during autoregressive bottom-up pathway generation,\nsurpassing previous models for synthesizable molecular design. We demonstrated two key applications of SynFormer:\nlocal chemical space exploration and global optimization within synthesizable chemical space, both of which yielded\nsuccessful results. Additionally, we showed that SynFormer is a scalable architecture, with the potential for further\nperformance improvements with increased resources. While our focus was on applications in drug discovery, the models\nare readily applicable to other domains of small organic molecule design [4, 7].\nThere are several areas where we expect further improvements can be made. First, the reconstruction rate of SynFormer-\nED is not perfect, suggesting that certain regions of synthesizable chemical space may remain inaccessible, even\nthough the model possess the reaction templates and building blocks that should make it possible to reach them.\nAdditionally, RL-based fine-tuning in SynFormer-D currently requires a relatively large number of oracle calls to\nachieve competitive results. Another limitation lies in the quality and coverage of reaction templates and building\nblocks. These templates do not account for stereochemistry, meaning that chiral centers can only be inherited from\nbuilding blocks, not installed during synthesis. Furthermore, the Enamine building blocks we choose are designed\nfor combinatorial library construction and do not comprehensively cover commercially available materials. These\nconstraints may limit the model's applicability to somewhat flat, linearly-constructed sp\u00b2-rich structures and restrict\nits use for more complex molecules like natural products [99]. Expanding the SynFormer framework to include more\nsophisticated reactions and a broader range of building blocks is possible, but will require further validation."}, {"title": "Methods", "content": ""}, {"title": "Synthesizable Chemical Space Construction", "content": "A synthesizable chemical space is defined as a set of molecules that can be accessed from purchasable starting materials\n(building blocks) through a series of reliable chemical transformations. One well-known example of such a chemical\nspace is Enamine REAL Space (REadily AccessibLe) [50], which consists of 48 billion molecules. These molecules\ncan be synthesized by applying 1-3-step synthetic transformations derived from approximately 170 well-validated\nparallel synthesis protocols to over 143,000 qualified building blocks. The synthesis and delivery of molecules within\nthe REAL Space typically takes 3-4 weeks, with an average synthesis success rate of 80%, which attests to the validity\nof the way of constructing synthesizable chemical space. In this work, we aim to cover the REAL Space and extend it\nfurther by incorporating additional reactions and a greater number of reaction steps to mimic a general organic synthesis\nendeavor."}, {"title": "Reaction templates", "content": "Reaction rules are encoded as strings using the SMARTS grammar [100], known as reaction templates. We created a\nset of 86 reaction templates, which directly implement the 169 reactions used in the January 2022 version of the REAL"}, {"title": "Additional method details", "content": ""}, {"title": "Model architectures", "content": ""}, {"title": "Transformer decoder", "content": "SynFormer adopts the standard Transformer decoder architecture [14] to generate postfix notation of synthesis in an\nauto-regressive manner. A postfix notation of synthesis may contain four types of tokens: a [START] token, [END]\ntoken, reaction token, and building block token. Each token, regardless of its type, is represented as a 768-dimensional\nembedding vector that is differentiable during training. Specifically, the embedding vectors of start token, end token,\nand reaction tokens are stored in a look-up table implemented by PyTorch's nn . Embedding layer. Note that, as we use\na fixed set of reactions consisting of only 169 reaction templates, it is practical to store the embedding vectors for each\nof them. However, the building block database, containing more than 200k molecules, is too large to assign embedding\nvectors to each building block separately. Thus, we use a multi-layer perceptron (MLP), to convert 2048-bit Morgan\nfingerprints of building blocks into 768-dimensional continuous vectors. This MLP consists of three layers, with hidden\ndimensions of 1,536 and ReLU activation.\nTo inform the model with the location of each token, we add sinusoidal positional encoding [14] to embedding vectors:\n\\(P_{i} = \\begin{cases} \\sin(\\frac{j}{10000^{\\frac{2i}{d}}}), & i=0, 2, ..., 766 \\\\ \\cos(\\frac{j}{10000^{\\frac{2i}{d}}}), & i=1, 3, ..., 767 \\end{cases}\\)\nwhere i denotes the dimension index, d = 768 denotes the embedding dimension, and j denotes the token position\nwithin the sequence.\nThe Transformer decoder network operates on the token embedding vectors. It consists of 10 attention layers with\nresidual connection and layer normalization in between. In SynFormer-ED, the attention layer contains both self-\nattention and cross-attention that gathers information from the encoder, while in SynFormer-D, only self-attention is\nused. Each attention layer contains 16 attention heads. Each head projects the feature vectors into 256-dimensional\nquery, key, and value vectors, which are then transformed into output vectors via the attention mechanism. Output\nvectors from different attention heads are concatenated into a 2,048-dimensional vector, which is then mapped into a\n768-dimensional vector used to update the token embedding via residual connection and layer normalization."}, {"title": "Transformer encoder", "content": "SynFormer-ED contains a Transformer-based encoder network that conditions the decoder with a given SMILES string.\nThe input SMILES string is split in to a list of tokens according to the following vocabulary:\nH, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn,\nFe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag,\nCd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm,\nYb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn, Fr, Ra, Ac, Th, Pa, U,\nNp, Pu, Am, Cm, Bk, Cf, Es, Fm, Md, No, Lr, Rf, Db, Sg, Bh, Hs, Mt, Ds, Rg, Cn, Nh, Fl,\nMc, Lv, Ts, Og, b, c, n, o, s, p, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, [, ], (,), =, #, -,+, \\, /,:, @, ?, >, *, $, %, .,\nEach token in the list is represented by a 768-dimensional embedding vector, and position encodings (Eq. 5) are\nadded to the embedding vector. The Transformer encoder contains 6 layers, each of which has 16 attention heads with\n256-dimensional query, key, and value vectors."}, {"title": "Scaling of model size", "content": "Table 1 below shows the hyper-parameters for SynFormer-ED of different sizes measured by the number of trainable\nparameters. These hyper-parameter sets are used to investigate the scaling of model performance. For the remaining\nexperiments, we use the model with 229M parameters."}, {"title": "Diffusion fingerprint head", "content": "The fingerprint of a building block token are modeled by an n-dimensional Bernoulli distribution. We use the denoising\ndiffusion probabilistic model [15, 114] to model this distribution. The denoising diffusion probabilistic model generates\ndata by iterative denoising an initial sample drawn from a simple prior distribution. To train a neural network capable of\ndenoising, noisy samples based on ground truth data must be constructed via the forward diffusion process."}, {"title": "Training details", "content": ""}, {"title": "Training data generation", "content": "We generate random postfix notations of synthesis using the building blocks and reaction templates from the database\nto train SynFormer. To ensure the validity of generated postfix notations, we leverage the synthesis stack data\nstructure introduced in our previous model [67] to store intermediate reaction products during synthesis. When training\nSynFormer-ED, the generated postfix notation is used to supervised the decoder part and the SMILES string of the final\nproduct is used as the input to the encoder part. For SynFormer-D, only postfix notations are used to train the model.\nThe detail of this data generation procedure is described in Algorithm 1."}, {"title": "Hyper-parameters", "content": "The SynFormer models are trained using the AdamW optimizer with a learning rate of 3 \u00d7 10\u207b\u2074 and a batch size of\n1,024. The training process spans approximately 730,000 steps, equivalent to a total of 742M data points. Validation is\nperformed every 5,000 steps. A ReduceLROnPlateau scheduler is applied, reducing the learning rate by 20% if the\nvalidation loss does not improve over the last 10 validation runs. The models are trained on 8 A100 GPUs, and the total\ntraining time is about 6 days and 1 hours."}, {"title": "Inference details", "content": ""}, {"title": "Sampling algorithm", "content": "The sampling process starts with an empty stack and an empty postfix notation. The stack and the postfix notation are\nupdated iteratively as described in Algorithm 2. Specifically, the SynFormer decoder first outputs the embedding vector\nand predicts the type for the next token based on the current postfix notation.\nIf the next token is predicted to be a building block, the diffusion module will generate a set of \\(k_{fingerprint}\\) fingerprints.\nFor each fingerprint, the building block molecule with the most similar fingerprint measured by L2 distance is retrieved\nfrom the database. \\(k_{fingerprint}\\) copies of the previous stack and postfix notation are made and each building block is added\nto the stack and the notation of each copy, leading to \\(k_{fingerprint}\\) different next states.\nIf the next token is predicted to be a reaction, \\(k_{reaction}\\) reactions with the highest probability are selected. For each\nselected reaction, the required number of reactants are popped out of the stack. If there are too few molecules in the\nstack, the reaction is considered inapplicable. Then, the reactants are input to the reaction template to predict the\nproduct. If the reaction runs successfully, the reaction product will be pushed onto the stack and the reaction itself will\nbe appended to the postfix notation to form a next state. Otherwise, the reaction will be ignored and no next state for\nthis reaction is produced.\nFinally, if the next token is an [END] token, we will check if the stack contains exactly one molecule. If it does, the\nsampling process is considered successful and the only molecule on the stack is the final product. Otherwise, more than\none molecule in the stack means the synthesis process is incomplete and thus is considered failed."}, {"title": "Branched sampling", "content": "The sampling algorithm can lead to branched synthesis pathways at each building block and reaction step. This capability\nis particularly useful when a specific objective, for example similarity to a given molecule in analog generation, is set.\nWe leverage this capability by formulating a beam-search-like algorithm as described in Algorithm 3. Specifically, we\nmaintain a pool of states and each state is a tuple of synthesis stack and postfix notation. In the beginning, the pool\ncontains only one empty state. At each state, we run the sampling step (Algorithm 2) for each state in the pool, remove\nthe existing state, and add the set of next generated states back to the pool. If the pool size exceeds the limit, we sort the\nstate according to the some given metric and then keep only the top-ranked states. If a state is marked successful, it will\nbe moved out of the pool and added to the result buffer."}, {"title": "Additional results", "content": ""}, {"title": "Impact of enlarged fingerprint length on performance", "content": "The length of Morgan fingerprints is a critical parameter that determines the resolution of molecular fingerprinting.\nShorter fingerprint lengths can lead to bit collisions, where two similar molecules become indistinguishable due to the\nlimited bit space [115]. However, directly predicting larger fingerprint lengths has proven challenging to scale (see\nFigure 14 in the SI of [65]), often necessitating a compromise at shorter lengths, such as 256 bits."}, {"title": "Synthesizable analog generation", "content": "This section provides additional results for synthesizable analog generation, focusing on two sets of experiments: (1)\nfinding synthesizable analogs for de novo design efforts using the GuacaMol benchmark [76] (where scores range\nfrom 0 to 1, with higher scores indicating better performance), and (2) generating molecules with Pocket2Mol [82], a\nstructure-based design algorithm.\nFigure 7 presents the density plot of all molecules generated for unsynthesizable designs within the GuacaMol\nbenchmark, plotted along the similarity to the target axis and the change in the main objective score axis. The results\nindicate that a substantial fraction of generated molecules exhibit relatively neutral changes in the main objective\nscore, suggesting that the primary design objectives are largely preserved during analog generation. This is particularly\nevident for molecules with higher similarity to the target, which are clustered around zero change in the objective value,\ndemonstrating that structurally similar analogs tend to retain their original objective scores.\nHowever, the distribution also reveals a region characterized by low similarity and significant negative changes in\nobjective scores, indicating instances where the model fails to generate meaningful analogs. These cases often result\nin outputs resembling random generation, highlighting the model's limitations in some regions of the chemical space.\nThis failure is partly due to the limited coverage of the explored chemical space compared to the theoretical coverage\nand partly due to the unsynthesizable input molecule being too distant from the synthesizable chemical space, making\nthe \"projection\" unrealistic or irrelevant.\nFigure 8 illustrates the distribution of Synthetic Accessibility (SA) Scores for molecules designed using Pocket2Mol\n(labeled as Target) and their corresponding generated analogs (labeled as Analog). The plot reveals a noticeable shift in\nthe Analog distribution towards lower SA Scores, suggesting that the analog molecules are generally easier to synthesize\ncompared to the original Pocket2Mol designs."}, {"title": "Hit expansion", "content": "This section provides additional results for hit expansion experiments, including (1) expanding hits from screening\nZINC250k with activity predictors and (2) expanding from experimentally verified binders of disease targets.\nIn addition to JNK3, which is discussed in the main text, we also evaluated SynFormer on GSK3\u00df. Figure 11 displays\ncontour plots comparing the density of molecules generated by SynFormer with those identified by the nearest neighbor\napproach for both JNK3 and GSK3\u00df. These plots illustrate the performance differences between the two methods in\nlead expansion. Additionally, Figure 12 presents the top-10 molecules identified from screening the ZINC250k database\nusing each activity predictor."}, {"title": "Global chemical space exploration by de novo molecular optimization", "content": ""}, {"title": "Molecular optimization using reinforcement learning", "content": "This section describes additional results for using reinforcement learning to bias the generation of SynFormer-D toward\nhigh-scored molecules.\nFigure 18a presents the score distribution of molecules generated by the SynFormer model after exposure to 5,000,\n10,000, 15,000, 20,000, 25,000, and 30,000 labeled molecules and their corresponding scores. As the model processes\nmore score-labeled data, the generation progressively shifts toward higher-scoring regions, demonstrating the effective-\nness of the reinforcement learning (RL) algorithm in guiding the model toward optimized outputs. Figure 18b shows\nthe accumulation of the top-100 molecules throughout the optimization process. The results indicate that the model's\nperformance saturates at the maximum score of around 1.0 after approximately 18,000 oracle evaluations, confirming\nthe RL approach's ability to consistently identify top-performing molecules."}, {"title": "Molecular optimization using genetic algorithm", "content": "This section describes additional results for using a genetic algorithm with SynFormer-ED as a mutation.\nFigure 19, 20, and 21 display the distribution of SA Scores [42] for the top 25 molecules at various optimization steps\nduring the optimization of Perindopril MPO, Ranolazine MPO, and Scaffold Hop, respectively. In these tasks, since the\nmain objective functions do not penalize synthetic accessibility, the differences between the standard GraphGA and\nGraphGA-SF are less pronounced compared to those observed in the Sitagliptin MPO task discussed in the main text."}]}