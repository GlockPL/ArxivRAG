{"title": "Class Order Disorder in Wikidata and First Fixes", "authors": ["Peter F. Patel-Schneider", "Ege Atacan Do\u011fan"], "abstract": "Wikidata has a large ontology with classes at several orders. The Wikidata ontology has long been known to have violations of class order and information related to class order that appears suspect. SPARQL queries were evaluated against Wikidata to determine the prevalence of several kinds of violations and suspect information and the results analyzed. Some changes were manually made to Wikidata to remove some of these results and the queries rerun, showing the effect of the changes. Suggestions are provided on how the problems uncovered might be addressed, either though better tooling or involvement of the Wikidata community.\nThis is an extended version of a paper submitted to AAAI 2025.", "sections": [{"title": "Introduction", "content": "Wikidata (Vrande\u010di\u0107 and Kr\u00f6tzsch 2014) is a large-110 million items as of July 2024-general-purpose, widely used \"free and open knowledge base\" that \"anyone can edit\". Wikidata is more than a knowledge graph as it contains a large class-based ontology (of between 115 thousand and 17 million classes depending on how one counts) with instance and subclass of (generalization) links. The Wikidata ontology covers a wide variety of domains, with large sections devoted to the person, places, life sciences (Waagmeester et al. 2020), medical (Turki et al. 2019), biological taxonomy, and genomics domains. Wikidata is similar to other large knowledge graphs such as the Google Knowledge Graph.\nWikidata's construction by a large open community has resulted in quite a lot of incorrect information being added to it. As Wikidata has only limited facilities for finding and fixing incorrect information and does not prioritize fixing incorrect information over adding new information these errors accumulate over time. Some of the errors in Wikidata affect the Wikidata ontology. Although these problems are well known (Abdulai and Lacroix 2023) insufficient effort has been made to improve the ontology so these problems continue and accumulate as well. In 2024 there was an effort (www.wikidata.org/wiki/Wikidata: WikiProject_Ontology/Cleaning_Task_Force) started to find and fix incorrect information in the Wikidata ontology involving not just this work but also work on disjointness in Wikidata and links between the Wikidata ontology and other ontologies.\nOne kind of problem that affects the Wikidata ontology is related to class order and related structural problems like instance and subclass loops in the ontology. A technical definition of class order is given later in this paper but the intuition is that a class has a fixed order if all of its instances have a fixed order one lower (where non-classes, also known as individuals, have fixed order zero). One would expect that most classes in Wikidata, like human (Q5) has a fixed order of one, as most large domains in Wikidata are about individuals in the world (e.g., humans, animals, structures, land-forms, constructed objects). But, for example, human (Q5) was as of June 2024 not a first-order class in Wikidata because, among other reasons, several humans were instances of themselves. Another class order problem that affects the Wikidata ontology is classes that are stated to have more than one fixed order, which is not possible for a non-empty class. For example, combat vehicle family (Q100709275) was stated to be both a second-order and a third-order class.\nDuring June 2024 queries were constructed and run against the RDF dump of Wikidata to retrieve problems related to class order including classes that are stated to belong to multiple fixed orders, classes that are stated to belong to a fixed order but have instances with incorrect orders, instance and subclass loops in the ontology, and classes that are both a subclass and an instance of another class. These queries identified many potential problems.\nSometimes the results of the queries are unequivocally errors but often the results only provide strong evidence that there is a problem and have to be further analyzed. In a few cases where there are actual problems an update to Wikidata can be automatically constructed to fix the problem but in most cases further analysis is needed to find the correct fix. When there are many results this further analysis can be very time consuming.\nFor some cases where fixes can be easily identified updates were made to Wikidata and the effects of these results are shown. For other cases suggestions are made on how they might be alleviated by either upgrading the system running Wikidata or incentivizing Wikidata communities to identify and fix problems."}, {"title": "Wikidata", "content": "Most of the information in Wikidata is about items, an example for an item being Douglas Adams. Each item in Wikidata"}, {"title": "Related Work", "content": "This work came out of a long-term desire to use Wikidata as a general-purpose source of information, requiring the ability to navigate the Wikidata ontology to find relevant information. Because of the problems in the ontology actual efforts had to be limited to particular domains in Wikidata where the ontology was determined to be of sufficient quality or the problems could be overcome.\nThe problems in the Wikidata ontology are well known (Abdulai and Lacroix 2023), including not just problems related to class order but general problems with incorrect subclass and instance links in the ontology. Several analyses of problems (Shimizu et al. 2024; Patel-Schneider 2019; Westerinen and Pintscher 2023) mostly present examples of different types of problems in the Wikidata ontology, such"}, {"title": "Classes and Class Order", "content": "One can think of a class in Wikidata as an item that has an instance, as an item that has a subclass or a superclass, or as an instance of class (Q16889133), the class of all classes. As Wikidata is incomplete, these three conditions do not necessarily correspond in Wikidata. In fact, none of them dominate any of the others.\nClass order is a useful way of naturally categorizing classes and is used in many places, including (Brasileiro et al. 2016; Dadalto et al. 2021). The definition of class order depends on what is a class and in several places in this paper several of the above conditions will be used.\nA first-order class has no classes as instances. A second-order class has only first-order classes as instances. An nth-order class has only n-1th-order classes as instances. Any non-empty class can have at most one (fixed) order. A variable-order class has as instances classes of different orders or both non-classes and classes Most classes should have a fixed order, but a few, like entity (Q3150) the universal class, will be variable-order classes.\nHere are some classes that should have fixed order:\nFirst order\nhuman (Q5), ship (Q11446),\niPad Air (5th generation) (Q111154825)\nSecond order\nwatercraft type (Q16335899),\nwatercraft class (Q18758641), iPad (Q2796)4\nThird order\nmodel series (Q811701)"}, {"title": "Direct Determination of Class Order", "content": "Wikidata has several built-in classes whose intended meaning is the class of all classes with a certain fixed order. These are first-order class (Q104086571), second-order class (Q24017414), third-order class (Q24017465), fourth-order class (Q24027474), and fifth-order class (Q24027515). Each of these classes have fixed class order one higher than the order of their instances, i.e., second-order class (Q24017414) is a third-order class, and has an instance of (P31) link to the next-higher-order universal class.\nFrom these five universal fixed-order classes it is possible to determine Wikidata classes that are required to have a fixed order using the following rules:\n\u2022 If a class is an instance of a class of fixed order n+1 then it has fixed order n.\n\u2022 If a class is a subclass of a class of fixed order n then it has fixed order n.\nIt is thus possible to determine the first order of many classes in Wikidata by appropriate queries using one or more of these classes.\nIt turns out that there were no subclasses of fifth-order class (Q24027515) and its only instance was fourth-order class (Q24027474). Further there were no subclasses of fourth-order class (Q24027474) and its only instance was third-order class (Q24017465). Finally there were no subclasses of third-order class (Q24017465). As a result there"}, {"title": "Bounding of Class Order", "content": "The above investigation ignores information about the instances of a class in Wikidata. This information can be used to bound the order of a class, if it has one.\nAn instance chain is a sequence of items where each item is an instance of the previous one. If there is an instance chain of length n in Wikidata starting at an item, then the class order of that item, if it has one, is at least n, independent of any other information about the item. (Because of the interaction between instance of and subclass of determining instance chains in Wikidata is not just looking for chains of instance of (P31) links.)\nIt is possible to use instance chains to produce tighter bounds on class order by examining the item at the end of the chain. For example, if there is an instance chain of length n in Wikidata starting at an item and ending at a class, then the class order of that item, if it has one, is at least n + 1. (If the class at the end of the chain is a second-order class then the order is at least n + 2, and so on, but this additional tightening has not been pursued.)\nSPARQL is not suitable for directly determining the longest instance chains in Wikidata for each class. It is, however, possible to create SPARQL queries that return classes with instance chains of length n that start at the class and end at a class and thus the class has fixed order at least n +1"}, {"title": "Classes That Cannot Have Fixed Order", "content": "A split-order class (S) is a class where there is an item A such that A is both a subclass of S and a subclass of an instance of S. Both of the subclass relationships can be indirect or trivial. A split-order class (S) cannot have a fixed order because if S had a fixed order the order would have to be both the same as and one more than the order of A, if A even had a fixed order. For example, personalization (Q1000371) is a subclass of knowledge system (Q105948247) and also an instance of specialty (Q1047113) which is a subclass of knowledge system (Q105948247), so knowledge system (Q105948247) is a split-order class. This criterion generalizes the anti-patterns of (Dadalto et al. 2021)."}, {"title": "Other Ways to Determine Class Order", "content": "There are several other, minor ways to determine class order. The two described here could have been used to find more potential problems but the above results indicate the presence of many problems so that it didn't seem to be helpful to include these minor additions.\nThe description for metasubclass of (P2445) says that it is a \"relation between two metaclasses: instances of this metaclass are likely to be subclasses of classes that are instances of the target metaclass\". The slightly unusual wording of this description appears to be to allow for the possibility that no appropriate instance of the target metaclass has been added to Wikidata, even though it does exist. From this description the subject metaclass should have the same class order of the object (target) metaclass, if it has one.\nThere were only 64 statements for this property. Upon investigating them all at most 10 are valid, with most of the problems being related to class order. After publicizing the problematic statements to the Wikidata community they were removed using QuickStatements (QuickStatments), a change tool for Wikidata, on 23 July 2024.\nThe description for is metaclass for (P8225) says that \"all instances of the subject are subclasses of the object\". As a result, the subject should have class order one greater than the order of the object metaclass, if it has one.\nThere were 787 statements for this property. Most of them appear to be correct on a quick inspection but class orders"}, {"title": "Analysis and First Fixes", "content": "Many of the problematic results above are too large to be investigated and fixed by hand by a small team of people. Worse, the probable unreliability of all of the results means that one result cannot be taken as ground truth to help fix other results. For example, a first-order class cannot have classes as instances but both of these results appear problematic so one cannot be used to help improve the other. There will have to be deeper investigation to find root causes of the problems or find parts of the large results that can be trusted.\nBut there are a few results, or parts of results, that are small enough that manual fixing can be done in a reasonable amount of time and the effects of these changes determined to see whether small changes can produce dramatic improvements. Several of these small results were examined and changes were made to fix or partially fix them. Because edits were made to Wikidata itself rerunning queries also incorporated all the edits made to Wikidata over the intervening time and thus their results cannot be directly compared to the previous results. Large effects, however, are very likely to be the result of the edits performed in this work."}, {"title": "Direct Class-Order Conflicts", "content": "There were 3,238 third-order classes with 3,158 of them also being second-order classes. Although this is not a trivial group it is small enough that it could be tackled by hand but it is more efficient to consider these classes starting with the most general. There are only 51 roots (instances of third-order class (Q24017465)) of the third-order classes but 19 of them are also second-order classes.\nMany of these were in the chemistry domain, with a few in the manufactured objects domain. Each were investigated, along with the other roots that might not be third-order, and the following changes made on 23 July 2024."}, {"title": "Instance Loops", "content": "An instance loop is a item that is an instance of itself and is a special case of split-order classes. There were 120 items in instance loops, each of them was analyzed and 113 were found to be incorrect, for example Fabio Valentini (Q94440081), with only seven very general classes, such as entity (Q35120), correctly being instances of themselves. These 113 items, however, make 1,171 classes not be of fixed order because the class has an infinite descending chain of instances. These classes all also show up in each of the minimum-order levels. Breaking these loops could reduce the number of classes with minimum order 4 or more dramatically and have a large effect on class order errors.\nAll 113 incorrect instance loops were broken by removing an incorrect instance or subclass link on 19 July 2024. For the 86 loops that involved a single link, that link was removed. The other loops were examined and either an instance or subclass link in the loop was removed. The changes were put into a single QuickStatements batch and performed on 19 July 2024.\nA first analysis showed reduction of around one-half in the number of high-minimum-order classes but many remained. The problem is that there where instance loops that were not detected in the initial queries.\nSome of these were caused by instance loops with two instance links, for example where an item is an instance of another item which is in turn an instance of the first, as in legal abuse (Q6517445) was an instance of abuse of rights (Q12586068) which was, in turn, an instance of legal abuse (Q6517445). All of these loops were investigated. Some of these were correct but many were incorrect and were fixed on 29 July 2024.\nSome of the remaining too-high minimum-order classes were also caused by incorrect statements that did not involve loops. For example, there were 591 non-looping direct instances of instances of human (Q5) such as Bennifer (Q108419447) being an instance of Jennifer Lopez (Q40715). Of these, 538 were caused by Ogham Person Concept (Q110897921) incorrectly being an instance of human (Q5) instead of a subconcept. Of the remainder, most were items, like books, that were incorrectly instances of actual humans. Fifty-five changes were made on 29 July 2024 to fix these problems."}, {"title": "Split-Order Classes", "content": "There are 6,379 split-order classes, which cannot have a fixed order. Of these, 3,037 are split-order because of only one item, and 5,346 because of ten or fewer. Most of these are probably an error and should be fixed but examining all these items would be a lengthy task.\nNevertheless, several single-item split-order classes were investigated and the items adjusted to make the class no longer split-order using a QuickStatements batch on 22 July 2024. A few prominent split-order classes with few items-human (QA5), mammal (Q110551885), animal (Q279), mountain (Q8502), lake (Q23397)-were also investigated and their items adjusted as well. In most cases determination of what change could easily be made by looking at the item or looking at the statements involving the split-order class. These spot fixes will not make major changes to the number of split-order classes so the queries were not rerun. There are some classes that have many items causing their split order. Here are the classes with the highest numbers:"}, {"title": "Large Number of Classes", "content": "Although not exactly a class order problems, the very large number (17,652,566) of instances of class (Q16889133) suggests the presence of incorrect information.\nThe major direct subclasses of class (Q16889133) and their number of instances are:"}, {"title": "Resulting Counts", "content": "After the above changes all showed up in a Wikidata dump and were available in QLever, the queries for order conflicts and minimum order were rerun.\nThe class order counts and conflicts changed as follows:\nGiven that a source of conflict was removed for over 3,000 third-order classes in the chemical domain by separating them from a class in the physical domain, these results are disappointing. Looking closer into these classes uncovers several class-order conflicts within biochemistry. In particular, protein family (Q417841) is directly a second-order class but also a third-order class via group or class of proteins (Q84467700). Further investigation into this domain is needed to eliminate the conflicts either by manually going through all the classes or by writing new queries to find sources for conflicts.\nThe minimum-order counts changed as follows:\nThe minimim-order counts reduced significantly for orders four and above, indicating that many class order issues were caused by instance loops. But many high-mimimum-order classes remain, indicating that further exploration is needed."}, {"title": "Suggestions", "content": "One driver of class order problems is that editors never have to confirm their edit if it causes a problem, problems are often not shown at all to editors at edit time, and for many problems there are not even reports generated to show the problem. This is partly due to hostility to anything that\nmakes it harder to edit Wikidata, even if the edits violate community norms or intended meaning of Wikidata constructs, and partly due to a lack of tools that can compute class order problems. As a result new problems are continually introduced, often inadvertently. But, for example, if users were shown a caution when they create an instance loop this simple source of problems could be considerably reduced.\nOne way of generating better reports would be to move the Wikidata Query Service from the very slow Blazegraph to the much faster QLever. This requires enhancements to QLever, as QLever has not had a way of removing triples from the graph it is querying. Providing more information to editors requires changes to tools that are used to edit Wikidata, so that class order and more other problems are found and shown prominently, ideally requiring confirmation when an edit causes a problem. A bigger change would be to have a larger portion of the Wikidata community emphasizing improvements to Wikidata over additions, making it more like English Wikipedia in this respect.\nAnother social change for Wikidata would be to put more effort into the Wikidata ontology community, particularly to investigate how the Wikidata ontology is used in the other parts of the Wikidata community and educate these sub-communities on how best to use the Wikidata ontology. Some of the major improvements here were the result of fixing misalignments between how different communities use the Wikidata ontology, for example class order misalignments between chemistry and physical object and between combat vehicles and vehicles in general.\nFixing existing class order problems might be best done by creating an interface where users are shown problem instances and asked to determine a change to fix the problem. The interface would have to be carefully constructed so that users understand what the problem is and what kinds of fixes are appropriate. Incentives could be set up to turn this activity into a kind of game, as has been done in other crowdsourced areas (Oceja and Sierra 2018; Kristen 2020)."}, {"title": "Summary and Future Work", "content": "This paper shows that it is possible using current tools (QLever) to completely enumerate certain kinds of problems related to class order in Wikidata A small number of edits to Wikidata can fix large fractions of some of these problems.\nOther problems appear to require very many edits to fix.\nThe effort to improve the Wikidata ontology continues, with fixing class order problems a major part. A next step is to continue the analysis of the results of the first set of fixes and create queries that show more problems. If the fixes make some of the results trustworthy they can be used to help fix other problems, such as using the directly-determined first-order classes to drive changes to items that make them be split-order. The queries used so far were almost all agnostic with respect to the meaning of classes (although the fixes did take class meanings into account). Another next step is to take class meaning more into account, for example by noting that concrete object (Q4406616) is a first-order class so instances of instances of the class signal a problem that needs to be addressed."}, {"title": "Technical Appendix", "content": "The queries here were first run using the QLever Wikidata SPARQL service at qlever.cs.uni-freiburg. de/wikidata around 20 June 2024 over an RDF graph containing the full Wikidata RDF dump files 20240617/wikidata-20240617-all-BETA.ttl.bz2 and 20240621/wikidata-20240621-lexemes-BETA.ttl.bz2 from dumps.wikimedia.org/wikidatawiki/entities/. Many of the queries were also run on 3 August 2024 over an RDF graph containing the full Wikidata RDF dump files 20240729/wikidata-20240729-all-BETA.ttl.bz2 and 20240802/wikidata-20240802-lexemes-BETA.ttl.bz2. The dump files are only available for a few months after first availability. Archived copies will be available by contacting the first author. Some queries had to be run using a different QLever server that had a longer timeout for downloads.\nA machine comparable to a Ryzen 9 7900X with 128GB of memory is adequate to run the queries. The results of many of the queries are much too long to be included in an appendix, as some of them are over 2GB in size, but will be available by contacting the first author.\nAll queries use prefixes standard when querying Wikidata, namely\nwd\nhttp://www.wikidata.org/entity/\nwdt\nhttp://www.wikidata.org/prop/direct/\nrdfs\nhttp://www.w3.org/2000/01/rdf-schema#\nAll queries also return item labels, using variations of\nOPTIONAL { ?c rdfs:label ?c\nFILTER (lang(?c) = 'en') }\nThese parts of the queries are not shown here."}, {"title": "Classes and Class Order", "content": "Class Counts for \u201cHas an instance\":\nSELECT DISTINCT ? first WHERE {\n{SELECT DISTINCT ?c WHERE {?i wdt: P31 ?c.}}\n?c wdt:P279* ? first.\n}\nClass Counts for \"Has a sub- or superclass\":\nSELECT DISTINCT ? first WHERE {\n{ ?sub wdt: P279 ? first } UNION\n{ ?first wdt: P279 ? super }\n}\nClass Counts for \"Instance of class\":\nSELECT DISTINCT ? first WHERE {\n?first wdt: P31/wdt: P279* wd: Q16889133\n}\nClass Counts for \"Any of these\":\nSELECT DISTINCT ? first WHERE {\n{ ?i wdt: P31 ? first. } UNION\n{ ?sub wdt: P279 ?first . } UNION\n{ ?first wdt: P279 ?super } UNION\n{ ?first wdt: P31/wdt: P279 wd: 016889133 }\n}"}, {"title": "Direct Determination of Class Order", "content": "Because there are no fourth-order or fifth-order classes except for universal fixed-order classes and because each universal fixed-order class is an instance of the next-higher universal fixed-order classes simpler queries can be used to return the third-order, second-order, and first-order classes.\nThird-order classes:\nSELECT DISTINCT third WHERE {\n?third wdt:P279*/wdt: P31 wd:Q24017465\n}\nSecond-order classes:\nSELECT DISTINCT ? second WHERE {\n?second wdt: P279 /wdt:P31/wdt:P279 /wdt:P31\nwd:Q24017465.\n}\nFirst-order classes:\nSELECT DISTINCT ? first WHERE {\n{ SELECT DISTINCT ? WHERE {\n?c wdt:P31/wdt:P279 /wdt:P31/\nwdt:P279 /wdt:P31 wd:Q24017465\n}}\n?first wdt: P279 ?c\n}\nThe last query was modified to reduce memory consumption in QLever. The commonalities between the results were computed using the Linux command comm after removal of lines that do not contain results and then sorting."}, {"title": "Bounding of Class Order", "content": "Some of the queries here use subqueries to reduce memory consumption in QLever.\nOrder 1: See \"Queries for Classes\" above.\nOrder 6 instance-only:\nSELECT DISTINCT ? sixth WHERE {\n{ SELECT DISTINCT ? fifth WHERE {\n{ SELECT DISTINCT ? fourth WHERE {\n{ SELECT DISTINCT third WHERE {\n{ SELECT DISTINCT ? second WHERE {\n{ SELECT DISTINCT ?first WHERE {\n{ SELECT DISTINCT ? WHERE {\n?zero wdt: P31 ?c . } }\n?c wdt:P279 ? first\n}}\n?first wdt: P31/wdt: P279 ?second\n}}\n?second wdt: P31/wdt:P279 ?third\n}}\n?third wdt: P31/wdt: P279 ? fourth\n}}\n?fourth wdt: P31/wdt:P279 ? fifth\n}}\n?fifth wdt: P31/wdt: P279 ? sixth\n}\nOrder 6 full:\nSELECT DISTINCT ? sixth WHERE {\n{ SELECT DISTINCT ?fifth WHERE {\n{ SELECT DISTINCT ? fourth WHERE {\n{ SELECT DISTINCT third WHERE {\n{ SELECT DISTINCT ? second WHERE {"}, {"title": "Classes That Cannot Have Fixed Order", "content": "The query that would compute all pairs of split-order classes ($s) and items that make them split-order ($c) is\nSELECT DISTINCT ?c ?s WHERE {\n?c wdt:P279* ?s\n?c wdt:P279 /wdt:P31/wdt: P279 ?s\n}\nThis query cannot be evaluated in QLever due to a possibly-empty path so it was split into caes and queries were constructed for each case. The results of these queries were combined using the Linux command comm, after removal of the first lines and then sorting, to combine the results. For each of these queries, exclusion queries were constructed and subtracted using comm.\nIn the cases below \u2192 is instance of (P31) and \u21d2 is subclass of (P279).\nCASE self: C is the same as S, so C wdt:P31/wdt:P279 C\nThis query uses a FILTER to get around a bug in QLever.\nSELECT DISTINCT ? WHERE {\n{ ?c wdt:P31 ?c } UNION\n{ ?c wdt: P31/wdt:P279+ ?s\nFILTER ( ?c = ?s ) }\n}\nThe query separates out two subcases of this case to get around a bug in QLever.\nCASE other: C is a proper subclass of S\nThe straightforward query runs out of memory in QLever so it was split into subcases using the fact that transitive-reflexive closure is the union of transitive closure and identity.\nSubcase AB: C wdt:P279 /wdt:P31 S\nSELECT DISTINCT ?c ?s {\n?c wdt:P279+?s\n?c wdt:P279 /wdt:P31 ?s\n}\nSubcase C: C wdt:P31/wdt:P279+ S"}, {"title": "Subcase AB exclusion", "content": "SELECT DISTINCT ?c ?s WHERE {\n?c wdt:P279 ?cx\n?cx wdt: P279+?s\n?cx wdt:P279 /wdt: P31 ?s\n}\nSubcase C exclusion 1:\nSELECT DISTINCT ?c ?s WHERE {\n{ SELECT DISTINCT ?c ?s WHERE {\n{ SELECT DISTINCT ?c ?sx WHERE {\n?c wdt:P279+ ?sX\n?c wdt:P31/wdt:P279+ ?sx }}\n?sx wdt: P279 ?s\n}}\nSubcase C exclusion 2:\nSELECT DISTINCT ?c ?s WHERE {\n{ SELECT DISTINCT ?c ?s WHERE {\n{ SELECT DISTINCT ?c ?sx WHERE {\n?c wdt:P279+ ?sx\n?c wdt:P31 ?sx }}\n?sx wdt: P279 ?s.\n}}\nCase D exclusion 1:\nSELECT DISTINCT ?c ?s WHERE {\n{ SELECT DISTINCT ?c ?sx WHERE {\n{ SELECT DISTINCT ?c ?sx WHERE {\n?c wdt:P279+?sx }}\n{ SELECT DISTINCT ?c ?sx WHERE {\n?c wdt:P279 /wdt:P31/wdt:P279+ ?sx. }}\n}}\n?sx wdt: P279 ?s\nCase D exclusion 2:"}, {"title": "Instance Loops", "content": "SELECT DISTINCT ? WHERE {\nFILTER(?c = ?s) }\nUNION { ?c wdt: P31 ?c }\n{ ?c wdt: P31/wdt:P279+ ?s\n}\nThe ancestors of the incorrect instance loops were found by looking for instance chains of length n until a fixed point was reached, with the following query reaching the fixed point:\nSELECT DISTINCT ? WHERE {\nVALUES ?x { (ids for the 113 bad loops] }\n?x wdt:P31/wdt:P279 ?b\n?b wdt:P31/wdt:P279 ?a\n?a wdt:P31/wdt:P279 ?c\n}\nAfter eliminating the first group of incorrect instance loops the minimum order counts were as follows:\nThe incorrect double instance loops were eliminated by removing instance of (P31) links from the following classes: Ignyte Awards (Q108782497), Conjunto Hidr\u00e1ulico del Ruedo Y La Laguna (Q126205248), Norwegian People's Aid (Q2371236), Digital sequence"}, {"title": "Large Number of Classes", "content": "Count by direct subclass of class:\nSELECT DISTINCT (COUNT (DISTINCT ?f) AS\n?count) ?sub WHERE {\n{ SELECT DISTINCT ? sub ?f WHERE {\n?sub wdt: P279 wd: Q16889133.\n?f wdt:P31/wdt:P279 ?sub\n}}\n} GROUP BY ? sub ? subLabel"}]}