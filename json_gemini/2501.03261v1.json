{"title": "Navigation Variable-based Multi-objective Particle Swarm Optimization for UAV Path Planning with Kinematic Constraints", "authors": ["Thi Thuy Ngan Duong", "Duy-Nam Bui", "Manh Duong Phung"], "abstract": "Path planning is essential for unmanned aerial vehicles (UAVs) as it determines the path that the UAV needs to follow to complete a task. This work addresses this problem by introducing a new algorithm called navigation variable-based multi-objective particle swarm optimization (NMOPSO). It first models path planning as an optimization problem via the definition of a set of objective functions that include optimality and safety requirements for UAV operation. The NMOPSO is then used to minimize those functions through Pareto optimal solutions. The algorithm features a new path representation based on navigation variables to include kinematic constraints and exploit the maneuverable characteristics of the UAV. It also includes an adaptive mutation mechanism to enhance the diversity of the swarm for better solutions. Comparisons with various algorithms have been carried out to benchmark the proposed approach. The results indicate that the NMOPSO performs better than not only other particle swarm optimization variants but also other state-of-the-art multi-objective and metaheuristic optimization algorithms. Experiments have also been conducted with real UAVs to confirm the validity of the approach for practical flights. The source code of the algorithm is available at https://github.com/ngandng/NMOPSO.", "sections": [{"title": "1 Introduction", "content": "Path planning is an essential problem for unmanned aerial vehicle (UAV) applications because it determines the flight path from the starting position to the destination that a UAV needs to follow to complete its mission [1, 2]. The path should be optimal in certain criteria such as shortest length or minimal energy consumption. It also needs to meet constraints imposed by the kinematic model and safe operation of the UAV [3]. Some objectives and constraints, however, may contradict leading to the non-existence"}, {"title": "2 Problem Formulation", "content": "This section presents the kinematic model of the UAV and objective functions defined for the path planning problem."}, {"title": "2.1 Kinematic model and constraints", "content": "Consider the UAV as a point moving in the environment. According to [34], its kinematic equations are described as follows:\n\n$\\begin{cases} \n\\dot{x} = V \\cos a \\cos \\beta \\\\\n\\dot{y} = V \\cos a \\sin\\beta,\\\\\n\\dot{z} = V \\sin a\n\\end{cases}$   (1)\n\nwhere $[x, y, z]^T$ represents the position of the UAV; $V$ is the linear velocity; $a$ and $\\beta$ are respectively the climbing and turning angle. Due to physical limits, the velocity and angles of the UAV are subject to the following constraints:\n\n$\\begin{aligned}\nV_{min} \\leq V \\leq V_{max} \\\\\n|\\Delta \\alpha| = |\\theta| \\leq \\theta_{max}\\\\\n|\\Delta \\beta| = |\\psi| \\leq \\psi_{max}\n\\end{aligned}$   (2)\n\nwhere $V_{min}$ and $V_{max}$ are respectively the minimum and maximum linear velocities and $\\theta_{max}$ and $\\psi_{max}$ are respectively the maximum variations of turning and climbing angles. It is important to incorporate those constraints into the path planning algorithm so that feasible paths are generated for the UAV to follow."}, {"title": "2.2 Objective functions for path planning", "content": "Requirements for the path are formulated via the definition of objective functions. The functions are inspired by our previous work [22] but have been modified and normalized to the range [0, 1] to suit the multi-objective approach."}, {"title": "2.2.1 Path length", "content": "In autonomous flights, a UAV is pre-loaded with a list of waypoints it needs to travel through. A flight path $p_i$ thus can be described by a set of $n$ waypoints, $p_i = {P_{i1}, ..., P_{in}}$, each includes three components, $P_{ij} = (X_{ij}, Y_{ij}, Z_{ij})$, as shown in Figure 1. Denote $\\overline{P_{ij} P_{ij+1}}$ as the Euclidean distance between two"}, {"title": "2.2.2 Collision avoidance", "content": "A flyable path should guide the UAV to avoid obstacles. In this work, an obstacle $k$ is modeled as a cylinder with center $C_k$ and radius $R_k$, as shown in Figure 2. Let $d_k$ be the distance from the center of obstacle $k$ to path segment $\\overline{P_{ij} P_{ij+1}}$, $D$ be the UAV size, and $S$ be the safe distance from the UAV to the obstacle. The objective function for safe operation of the UAV is expressed as follows:\n\n$F_2 = \\frac{1}{K(n-1)} \\sum_{j=1}^{n-1} \\sum_{k=1}^K T_k(\\overline{P_{ij} P_{ij+1}})$   (4)\n\nwhere $K$ is the number of obstacles in the working area and $T_k$ is calculated as:\n\n$T_k (\\overline{P_{ij} P_{ij+1}}) = \\begin{cases}\n0, & \\text{if } d_k > D + R_k + S \\\\\n1-\\frac{d_k - D - R_k}{S} & \\text{if } D + R_k < d_k < D + R_k + S \\\\\n1 & \\text{otherwise}\n\\end{cases}$    (5)\n\nEquation (5) implies that if a path segment is outside the danger zone (see Figure 2), it incurs no additional cost to the objective function. However, if a path segment falls within the danger zone, its cost"}, {"title": "2.2.3 Flight altitude", "content": "During operation, it is preferable that the UAV flies at a stable altitude to minimize its energy consumption. Let $h_{max}$ and $h_{min}$ respectively be the maximum and minimum relative flight altitudes and $h_{ij}$ be the present altitude of the UAV. Let $h_{mean} = \\frac{h_{max} + h_{min}}{2}$ be the preferable relative altitude for the flight. The objective function for the flight altitude is defined as:\n\n$F_3 = \\frac{1}{n} \\sum_{j=1}^{n} H_{ij}$ (6)\n\nwhere\n\n$H_{ij} = \\begin{cases}\n\\frac{2 |h_{ij} - h_{mean}|}{h_{max} - h_{min}} & \\text{if } h_{min} \\leq h_{ij} \\leq h_{max} \\\\\n1 & \\text{otherwise}\n\\end{cases}$   (7)"}, {"title": "2.2.4 Smoothness", "content": "Apart from maintaining the altitude, a flight path should also minimize variations in the turning angle of the UAV as they are directly proportional to energy consumption. As illustrated in Figure 1, the turning angle $\\Omega_{ij}$ is the angle between two consecutive path segments, $\\overline{P_{ij} P_{i,j+1}}$ and $\\overline{P_{i,j+1} P_{i,j+2}}$, and is computed as:\n\n$\\Omega_{ij} = arctan(\\frac{|\\overrightarrow{P_{ij} P_{i,j+1}} \\times \\overrightarrow{P_{i,j+1} P_{i,j+2}}|}{\\overrightarrow{P_{ij} P_{i,j+1}} \\cdot \\overrightarrow{P_{i,j+1} P_{i,j+2}}})$    (8)\n\nSince this angle represents changes in the direction of the UAV along the flight path, the smooth cost $F_4$ is defined as:\n\n$F_4 = \\frac{1}{n-2} \\sum_{j=1}^{n-2} \\frac{\\Omega_{ij}}{\\pi}$ (9)\n\nwhere $\\pi$ is the maximum turning angle used for the normalization."}, {"title": "3 Multi-objective optimization approach", "content": "Given objective functions $F_1$ to $F_4$, an optimal path would simultaneously minimize all of them. Such a path, however, does not exist since those functions do not minimize at the same point. Some functions are even contradicting such that the decrease of one function leads to the increase of another. To overcome it, most studies combine those functions into a single objective function using a weighted sum [22, 27]. While that approach is simple to implement, it is difficult to choose the right weight for each function and maintain the optimality of the obtained solution. In this work, we propose to use multi-objective optimization."}, {"title": "3.1 Pareto-optimal solution", "content": "Let X be a path generated for the UAV. The path planning algorithm needs to find path X that simultaneously minimizes all cost functions $F_i$ defined in Section 2.2,\n\n$X = arg \\min [F_1, F_2, F_3, F_4] .$ (10)\n\nAccording to the multi-objective optimization theory, there may not exist the optimal solution X, but only the solution $X^*$ that is the best fit for all $F_i$. That solution is called the Pareto-optimal solution defined as follows:"}, {"title": "3.2 Muli-objective particle swarm optimization", "content": "Particle swarm optimization (PSO) is a popular technique that was originally developed to solve single objective optimization problems using swarm intelligence. In PSO, a swarm of particles is first initialized so that the position of each particle represents a candidate solution. A cost function is then used to evaluate the fitness of those particles. Each particle of the swarm then moves in accordance to its best position and the best position of the swarm to improve its fitness until an optimal solution is obtained or the maximum number of iterations is reached.\nLet $x_i^t$ and $v_i^t$ be the position and velocity of particle i at iteration t, respectively. Denote $x_{pbest,i}$ as the best position of particle i and $x_{gbest}$ as the best position of the swarm at iteration t. The movement of particle i is described by the following equations:\n\n$\\begin{aligned}\nv_i^{t+1} &= w v_i^t + c_1 r_1(x_{pbest,i} - x_i^t) + c_2 r_2(x_{gbest} - x_i^t), \\\\\nx_i^{t+1} &= x_i^t + v_i^{t+1}\n\\end{aligned}$   (11)\n\nwhere $w$ is the inertial weight, $c_1$ and $c_2$ are respectively the cognitive and social coefficients, and $r_1$ and $r_2$ are random numbers drawn from the uniform distribution in the range of [0, 1].\nWhen using PSO for multi-objective optimization, it is important to control the particles' distribution so that they can find non-dominated solutions. The particles should evolve under the guidance of non-dominated particles called leaders to spread across multiple potential regions. A popular approach is to define a repository to store non-dominated solutions and then use them as leaders [38]. Each particle then selects a leader from the repository based on a crowd measure as follows.\nLet P be the set of non-dominated solutions in the repository. A hypergrid is first established to allocate each particle in P to a hypercube as shown in Figure 3. The coordinate of each particle is determined by their objective value [39]. Specifically, the lower bound, $G_i^l$, and upper bound, $G_i^u$, of the hypergrid in the dimension representing $F_i$ is determined as:\n\n$G_i^l = \\min_{x \\in P} F_i(x)$   (12)\n\n$G_i^u = \\max_{x \\in P} F_i(x) + \\epsilon_i$   (13)\n\nwhere $\\epsilon_i$ is the padded grid length computed based on the number of grid divisions, $M$, as:\n\n$\\epsilon_i = \\frac{1}{2(M-1)} (\\max_{x \\in P} F_i(x) - \\min_{x \\in P} F_i(x))$   (14)\n\nThe coordinate of the hypercube containing particle x in dimension $F_i$ is then computed by:\n\n$c_i = M \\frac{F_i(x)-G_i^l}{G_i^u - G_i^l}$ (15)"}, {"title": "3.3 Navigation variables for particle position representation", "content": "When using PSO for path planning, the position of each particle represents a candidate solution, which is a flight path. For path pi with n waypoints $P_{ij} = [X_{ij}, Y_{ij}, Z_{ij}]^T$, position $X_i$ representing that path is expressed as:\n\n$X_i = (X_{i1}, Y_{i1}, Z_{i1}, X_{i2}, Y_{i2}, Z_{i2}, ..., X_{in}, Y_{in}, Z_{in})$.  (19)\n\nThe use of Cartesian coordinates as in (19), however, does not incorporate maneuverable properties of the UAV into the path. It is therefore not efficient in finding non-dominated solutions or suitable to include kinematic constraints for feasible flight paths.\nInspired by the operation of robot manipulators, we address this issue by considering a flight path as an articulated chain consisting of n path segments. Each segment is described by a set of parameters"}, {"title": "3.4 Region-based mutation", "content": "When searching non-dominated solutions, certain particles of the swarm can be trapped in local optima, which affects the swarm's performance. For MOPSO, the chance of particles being trapped is higher due to their spread across multiple regions of the search space [38]. We overcome this problem by introducing an adaptive mutation mechanism so that the level of mutation is proportional to the crowding distance of particles. For a random particle $x_i$ at iteration t, the mutation is conducted as follows:\n\n$x_{ij}^t = x_{ij}^t + \\eta_{ij} G_t x_{pbest, i}$   (25)\n\nwhere j is a randomly selected component of $x_i$, $\\eta_{ij}$ is a random variable having the Gaussian distribution with zero mean and unit variance, and G is a mutation gain.\nTo better fit the multi-objective optimization problem, G is adjusted based on the distribution of non-dominated solutions in the Pareto optimal set. Since the spread of those solutions is proportional to the number of occupied hypercubes in the hypergrid, it can be used as a parameter to adjust G. When the number of occupied hypercubes is small, they indicate the dense concentration of particles over those regions. A large gain value is therefore needed to drive the particles to new regions. In contrast, when the particles are widely distributed, a small gain value will help to better explore those regions. Denote $N_t$ as the number of occupied hypercubes at iteration t. The mutation gain is determined as follows:\n\n$G_t = tanh(\\Delta \\frac{N_t}{N_c})$  (26)\n\nwhere tanh (.) represents the hyperbolic tangent and \u2206 is a pre-defined constant. This constant is set equal to the number of hypercubes occupied when the swarm is initialized."}, {"title": "3.5 Implementation of the NMOPSO for UAV path planning", "content": "The implementation of the NMOPSO is presented in Algorithm 1 together with the equations used. Compared to the original PSO, additional steps related to the hypergrid, leader selection, navigation variables, and mutation are added to find Pareto-optimal solutions. The algorithm stops when the maximum number of iterations is reached."}, {"title": "4 Results", "content": "To evaluate the performance of the proposed algorithm, a number of comparisons and experiments have been conducted with details below."}, {"title": "4.1 Scenario setup", "content": "Evaluations are conducted using real digital elevation model (DEM) maps of two areas on Christmas Island, Australia, each with distinct terrain structures [41], as shown in Figures 7 and 8. Each map is then augmented with obstacles to form four scenarios of different levels of complexity as shown in Figure 8."}, {"title": "4.2 Path planning results", "content": "Figures 5 and 6 show the paths generated for scenarios 1 and 4. It can be seen that all paths are collision-free and successfully reach the goal positions. The side view of those paths shows that they adapt to the terrain structure but sharp changes in altitude are suppressed due to kinematic and smoothness constraints. The paths thus are feasible for the UAV to follow. Note that the paths shown in Figures 5 and 6 are just some among many non-dominated solutions in the Pareto Front obtained by the algorithm. Each solution dominates in certain objectives. Therefore, some non-dominated solutions may be preferred over others depending on the application."}, {"title": "4.3 Comparison with other PSO variants", "content": "In this evaluation, the NMOPSO is compared with other single-objective PSO variants including the original PSO, quantum-behaved PSO (QPSO) [42], and angle-encoded PSO (0-PSO) [43]. Their parameters are chosen to be the same as the NMOPSO. However, the cost function is a weighted sum of the objectives as follows:\n\n$F = \\sum_{i=1}^4 W_i F_i$, (27)\n\nwhere $w_i$ is a weighting coefficient. In our implementation, $w_i$ = 1 since the objective functions are already normalized to [0, 1].\nFigures 7 and 8 show the paths generated by the algorithms. It can be seen that all algorithms are able to generate collision-free paths to the goal. The NMOPSO, however, produces the shortest and smoothest paths in all scenarios. This result can be further confirmed in Table 1, which shows the values of the objective functions corresponding to the generated paths. It can be seen that the NMOPSO generates multiple Pareto optimal solutions. Some of them dominate certain objectives, while others have reasonable values across all objectives. They together outperform other PSO variants in most objectives."}, {"title": "4.4 Comparison with other metaheuristic algorithms", "content": "Comparisons with other popular metaheuristic algorithms, including the differential evolution (DE), genetic algorithm (GA), and artificial bee colony (ABC), have been conducted to further evaluate the performance of the NMOPSO. Those algorithms are implemented based on [44], [45], and [46], respectively. The generated paths are shown in Figure 9 and 10. It can be seen that all algorithms are able to generate feasible paths. The NMOPSO, however, introduces the shortest paths with small turning angles. Table 1 shows the values of the objective functions corresponding to the paths generated by those algorithms. It can be seen that the ABC gives average results across all objectives. The DE produces good results for F2 and F3, but the path length is not optimized. The GA produces poor results in complex scenarios due to its node reduction mechanism. The NMOPSO introduces the best overall performance reflected via its lowest cost for $F_1$ and $F_4$ in most scenarios. The cost associated with the flight altitude is not as good as the DE due to kinematic constraints. However, it ensures the paths generated are feasible for the UAV to follow. In addition, the generation of multiple non-dominated solutions gives the NMOPSO capabilities to fulfill different needs of applications."}, {"title": "4.5 Comparison with other multi-objective optimization algorithms", "content": "Comparisons with other multi-objective optimization algorithms, including the original multi-objective particle swarm optimization (MOPSO) algorithm [38], non-dominated sorting genetic algorithm (NSGA-II) [31], and Pareto envelope-based selection algorithm II (PESA-II) [47], have been conducted to evaluate the non-dominated solutions generated by the NMOPSO. Metrics used for comparisons include the"}, {"title": "4.6 Experimental validation", "content": "To verify the validity of the proposed algorithm in generating paths for practical flights, experiments have been carried out with a real UAV named 3DR Solo. This UAV can be programmed to fly automatically via a ground control station software called Mission Planner, as depicted in Figure 11b. The experimental area is located on a flat terrain at the latitude and longitude of (-33.876399, 151.192293). It has the size of 100 \u00d7 100 m\u00b2 and is augmented with four obstacles, as shown in Figure 11a. This information, along with the UAV's starting and goal locations, is input into the NMOPSO algorithm implemented in MATLAB to generate a planned path comprising a list of waypoints, as shown in Figure 12a. Those waypoints are then converted to geographic coordinates and uploaded to the 3DR Solo drone via Mission Planner to fly.\nFigure 12b shows the flight result in which the yellow line represents the planned path and the purple line represents the actual flight path. Their overlap implies that the path generated by NMOPSO is feasible for the drone to follow. Since the flight path does not intersect the threat circles, the path is safe for drone operation. The results thus demonstrate the validity of NMOPSO for practical flights."}, {"title": "4.7 Discussion", "content": "Using a multi-objective approach, the NMOPSO generates a set of non-dominated solutions that can meet various application requirements. For example, the third solution for Scenario 2 in Table 1 minimizes the energy consumption as it represents a short and smooth path, while the first and second solutions prioritize safety. The NMOPSO also allows new objectives to be added as additional dimensions of its hypercube. The algorithm is, therefore, scalable and suitable for complex tasks. Besides, the inclusion of kinematic constraints to the problem helps narrow down the solution space. The NMOPSO takes advantage of this by utilizing navigation variables to speed up the process of finding non-dominated solutions. The multi-objective approach, however, faces the challenge of finding a large number of non-dominated solutions, which requires a balance between exploration and exploitation. Some of our enhancements to the NMOPSO, such as utilizing a repository to store non-dominated solutions and implementing a region-based mutation mechanism, can address this issue, but at the cost of adding additional computation requirements."}, {"title": "5 Conclusion", "content": "In this work, a new path-planning algorithm, NMOPSO, has been introduced to generate Pareto optimal paths for UAVs considering their kinematic constraints. Several mechanisms such as navigation variables, fitness evaluation, and adaptive mutation have been integrated into the algorithm to better explore the solution space for non-dominated solutions. Comparison results show that the NMOPSO outperforms other PSO variants and state-of-the-art metaheuristic optimization algorithms in most criteria including path length, safety and smoothness. In addition, experiments with paths generated for real flights have been conducted. The overlap between the planned and actual flight paths confirms the validity of our approach for practical UAV operations."}, {"title": "Conflict of interest", "content": "On behalf of all authors, the corresponding author states that there is no conflict of interest."}, {"title": "Data availability statement", "content": "The data generated in this study is available from the authors on reasonable request."}, {"title": "Financial interests", "content": "The authors have no relevant financial or non-financial interests to disclose."}]}