{"title": "Eliza: A Web3 friendly AI Agent Operating System", "authors": ["Shaw Walters", "Sam Gao", "Shakker Nerd", "Feng Da", "Warren Williams", "Ting-Chien Meng", "Hunter Han", "Frank He", "Allen Zhang", "Ming Wu", "Timothy Shen", "Maxwell Hu", "Jerry Yan"], "abstract": "AI Agent, powered by large language models (LLMs) as its cognitive core, is an intelligent agentic system capable of autonomously controlling and determining the execution paths under user's instructions. With the burst of capabilities of LLMs and various plugins: i.e. RAG, text-to-image/video/3D and etc, the potential of AI Agents has been vastly expanded, with their capabilities growing stronger by the day. However, at the intersection between AI and web3, there is currently no ideal agentic framework that can seamlessly integrate web3 applications into AI agent functionalities. In this paper, we propose Eliza, the first open-source web3-friendly Agentic frameworks that make the deployment of web3 applications effortless. We emphasize that every aspect of Eliza is a regular Typescript program under the full control of its user, and it seamlessly integrates with web3 (i.e. reading and writing blockchain data, interacting with smart contracts and etc). Furthermore, we show how stable performance is achieved through the pragmatic implementation of the key components of Eliza's runtime. Our code is publicly available at eliza0S/eliza.", "sections": [{"title": "Introduction", "content": "In the rapidly evolving landscape of AI, the advent of AI Agent, a system driven by large language models (LLMs) [2, 5, 3, 26, 13] as its cognitive foundation, marks a significant milestone. This intelligent agentic system is not only capable of autonomously controlling and determining the execution paths under user instructions but also possesses the adaptability to navigate complex tasks with ease. The surge in capabilities of LLMs, coupled with the integration of diverse plugins such as RAG [8, 15], text-to-image/video/3D [22, 18, 25] tools, and more, has exponentially expanded the potential of AI Agents (i.e. AutoGPT [29], LangGraph [7], Camel [16], OpenAI Swarm [6] and MiniChain [24]). Their capabilities are advancing at a pace that is nothing short of remarkable, with new functionalities being added and refined on a daily basis.\nHowever, despite the significant advancements in AI technology, a conspicuous gap persists at the confluence of AI and web3. The web3 domain is notably lacking an ideal agentic framework capable of seamlessly integrating web3 applications into its ecosystem, thereby fully unleashing the transformative potential of decentralized AI. This represents a critical void, as the successful integration of AI Agents with web3 technologies has the potential to revolutionize our engagement"}, {"title": "Background", "content": "Decentralized Trading Bots: At the heart of the crypto or web3 world lies the functionality of trading, such as transferring tokens and participating in Token Generation Events (TGEs), minting NFTs, and swapping tokens through decentralized exchanges (DEXs). With the proliferation of blockchain public chains like ETH, SOL, BASE and others, managing and operating one's investment portfolio over fragmented blockchains has become increasingly challenging. Individual investors are in dire need of a system to help manage their portfolios and conduct intelligent operations and trades. Platforms like GMGN, Dexscreener, and Bull X have filled this gap to a great extent, but for intermediate to advanced users with customized needs, the basic functionalities of these platforms may fall short.\nBusiness Insights: Secondly, blockchain data itself contains a wealth of crucial information for traders to make decisions. From simple metrics like changes in token holder counts, token prices, market capitalization, and Total Value Locked (TVL), to more advanced indicators such as the proportion of whale accounts, market-maker styles, and candlestick patterns, all can provide effective assistance to different types of cryptocurrency investors. The emergence of AI agents has brought hope for structuring the complex data on blockchains into high-quality insights to aid investors in making wiser decisions. However, extracting data intelligence is a challenging task, and using a general AI Agent framework for this purpose demands a high level of expertise from users. Therefore, there is an urgent need for a Web3-native AI Agent framework to achieve this.\nInteraction: Finally, for the Web3 industry, social media platforms like Twitter, Discord, and Farcaster are essential for connecting with users, obtaining cutting-edge information, and making trading decisions. As an increasing number of Key Opinion Leaders (KOLs) flock to these platforms, the information they disseminate becomes more complex and fragmented. Navigating this landscape to acquire organic insights and critically assess the credibility of KOLs is a universal challenge for traders. An exemplary Agent would enable users to sift through the vast information pool, distilling valuable intelligence without succumbing to information overload, and serving as a genuine intermediary in social media interactions with other users or agents.\nIn consideration of the needs above, Eliza emerges as the premier open-source, web3-friendly AI Agent Operating System, boasting a modular design that empowers developers and users to tailor solutions to their specific requirements. By harnessing the robust capabilities of AI models and a variety of add-ons, Eliza democratizes access to advanced AI functionalities, significantly reducing the barrier to entry for the general public without the need for extensive coding expertise."}, {"title": "Design Principles", "content": "Eliza is a powerful multi-agent simulation framework designed for creating, deploying, and managing autonomous Al agents. It is built using TypeScript and is capable of interacting across multiple platforms. Numerous projects have been developed based on our framework.\nEliza's success is attributed to its integration of the strong demands of web3 into a design that balances utility and ease of use. There are three main principles behind our choices:\nPut Web3 Developers First Since web3 primarily utilizes JavaScript/TypeScript, which is the dominant language for web development, Eliza allows developers to easily integrate blockchain functionality into existing web applications and build decentralized applications (dApps) by leveraging familiar tools and frameworks. Eliza should be a first-class member of that ecosystem. It adheres to the commonly established design goals of keeping interfaces simple and consistent, ideally with one idiomatic way of doing things.\nPluggable Modular Design Eliza decouples its structure into a core Runtime along with four key components: Adapter (data), Character (agent personality), Client (message interaction), and Plugin (universal functionality). This design allows developers or users to freely add their own plugins, clients, characters, and adapters as they wish, without worrying about the details within the core Runtime. It makes extension incredibly easy and paves the way for Eliza to support the most model providers (i.e. OpenAI, Llama, Qwen and etc.), platform integrations (i.e. Twitter, Discord, Telegram and etc.), chain compatibilities (i.e. Solana, Ethereum, Ton and etc.), and highly equipped functions (i.e. Text2Image/Video/3D, Web Search, TEE and etc.).\nRoughness is better Given a fixed amount of engineering resources, and all else being equal, the time saved by keeping the internal implementation of Eliza simple can be used to implement additional features, adapt to new situations, and keep up with the fast pace of progress in the field"}, {"title": "Related Works", "content": "As an AI Agent operating system focusing on web3 and social media, we aim to define our position and differentiate ourselves from both industrial AI Agent frameworks (i.e. Bedrock (AWS), Swarm (OpenAI), and smolagent (Huggingface) [23]]) and academic-oriented projects [12, 27, 31, 16]. Specifically, we will mainly discuss plugins and frameworks below."}, {"title": "Plugins", "content": "Along with the rapid growth of off-the-shelf plugins, the agent's enhancement can be categoried into two principle forms: Internal and External. Internally, the core principle is to tap into the full potential of the LLM itself, yielding more organized and logical answers and alleviating the long-standing issue of hallucination. Representative works within this paradigm include Chain-of-Thoughts (CoT) [28], along with its successful descendants: Zero-shot CoT [14], Tree-of-Thoughts (ToT) [32], Graph-of-Thoughts (GoT) [4], and Layer-of-Thoughts (LoT) [9]. CoT introduced step-by-step explanations, ToT allowed branching to explore multiple solutions, and GoT connected reasoning pathways in a network. LoT, released in October 2024, is a hierarchical reasoning AI that organizes thoughts into layers for structured problem-solving. It filters information through layers of constraints to efficiently and transparently find the most relevant solutions.\nWhile \"X-of-T\" techniques have significantly enhanced the problem-solving prowess of LLMs, paving the way for more intelligent and insightful AI systems, the role of external information is also crucial. Externally, integrating knowledge from various sources greatly enhances an AI agent's ability to solve real-world practical problems. This includes Retrieval Augmented Generations (RAGs) [15, 8], vector databases [11], and web searches [1]. Furthermore, as AI-Generated Content (AIGC) matures, the ability to convert text into images [22, 21], videos [30, 10], and 3D models [20, 25] opens up new possibilities for AI agents, adding a fresh dimension to the capabilities of LLMs.\nAs shown in Fig. 1, Eliza offers robust support for a variety of blockchain plugins, encompassing ev-erything from on-chain transactions to Trusted Execution Environments (TEEs). The comprehensive web3 toolkit is designed to be user-friendly and easily extensible, even for junior developers, thus achieving a balance between simplicity and efficiency. Additionally, the integration of social media support broadens the range of application scenarios, which constitutes the primary arena where these web3-oriented agents can actively participate and demonstrate their value."}, {"title": "Frameworks", "content": "AI agent frameworks flourished at the emergence of ChatGPT, has rallied in 2023, where AutoGPT, LangGraph (LangChain) and Camel released their first version on. People from all walks of life have find the potential and benefit in leveraging AI Agent or Workflow to promote their efficiencies in coping with tedious routine jobs.\nFor web3 industry, due to its highly time-sensitive property and complexity within blockchain interactions, a series of web3-oriented AI Agent frameworks start to emerge:\n\u2022 open source: RIG, G.A.M.E, ZerePy, Heurist, REI.\n\u2022 close source: Virtual.\nAs an open source framework, Eliza should be compared with its rivals of the same kind: including RIG, G.A.M.E, ZerePy, Heurist, REI. As shown in Fig. 2, we collect the feedbacks from over 50+ AI researchers and senior blockchain developers to acquire their subjective assessment toward current trending web3 AI agent frameworks, it can be easily observed that Eliza outperforms other frameworks in terms of key indictors: model providers, chain compatibility, functionality and social media."}, {"title": "ElizaOS", "content": "As general frameworks often limited to its highly abstract low-level details and use cases, the direction moving from generic to specialize becomes evident as time goes on. Plus, it is well-known that AI and LLMs are fields that evolve rapidly, with new concepts and ideas emerging every week. Abstractions like LangChain or AutoGPT, which are built around a variety of emerging technologies, find it difficult to withstand the test of time with their framework design.\nIn the highly time-sensitive web3 industry, developers often need to interact with blockchains for various activities such as transferring tokens, deploying and interacting with smart contracts, and staying updated with the latest information, including cryptocurrency prices, recent statements from Key Opinion Leaders (KoLs), and the holdings of major investors, often referred to as \"whales\". Almost all of these tasks can be automated through rule-based systems. Prior to the advent of AI Agents, it was challenging to account for all these details and create a comprehensive automated process.\nBased on the philosophy derived from previous AI Agent frameworks, we build a highly controllable and well-orchestrated framework that primarily focus on the web3 industry, serves for a simple expression: sweeping away the hurdles for developers in turning the mighty AI Agents into life."}, {"title": "Core Concepts", "content": "Agents are the core carriers of Eliza that handle autonomous interactions. Each agent runs in a runtime and can interact through various clients (Discord, Twitter, etc.) while maintaining consistent behavior and memory.\nFrom an implementation perspective, AgentRuntime class is the primary implementation of the IAgentRuntime interface, which manages the agent's core functions, including:\n\u2022 Message and Memory Processing: Storing, retrieving, and managing conversation data and contextual memory.\n\u2022 State Management: Composing and updating the agent's state for a coherent, ongoing interaction.\n\u2022 Action Execution: Handling behaviors such as transcribing media, generating images, and following rooms.\n\u2022 Evaluation and Response: Assessing responses, managing goals, and extracting relevant information.\nEliza provides fully functional but not over-designed agent runtime with corresponding state man-agement, memory system and message processing, makes runtime serviced to function in a sound operating state. Here is the minimal code snippet to instantiate a runtime:"}, {"title": "Character Files", "content": "Character files are JSON-formatted configurations that define an Al agent's personality, knowledge, and behavior within Eliza. Specifically, Eliza convert a Zod schema (CharacterSchema) into a TypeScript type (CharacterConfig). The basic attributes to define a character are:\n\u2022 Core identity and behavior: Character background, backstory elements and unique character traits.\n\u2022 Model provider configuration: Include but not limited to OpenAI, Anthropic, Llama.\n\u2022 Client settings and capabilities: Blockchain transaction, NFT minting, smart contract deployment.\n\u2022 Interaction and style guidelines: Conversational style, social media post style, knowledge (RAG).\nBy meticulously crafting the character file, users can create an exclusive AI Agent that possesses unique skills and personalities. This process is akin to creating J.A.R.V.I.S. in Iron Man, laying down the most crucial foundation for an autonomous agent."}, {"title": "Providers", "content": "Providers are essential components that infuse agent interactions with dynamic context and real-time data. Acting as intermediaries, they link the agent to a plethora of external systems, facilitating access to a range of critical information including market data, wallet details, sentiment analysis, and temporal context.\nTo draw an analogy, providers can be likened to the human perceptual system, with their primary function being to:\n\u2022 Obtain dynamic contextual information\n\u2022 Integrate with the agent runtime\n\u2022 Format information for conversation templates\n\u2022 Maintain consistent data access\nIn Eliza, we have three basic built-in providers: Time Provider (provide temporal context for agent interactions), Facts Provider (maintain conversation facts) and a degen Boredom Provider (manage conversation dynamics and engagement by calculating the boredom level of an agent based on recent messages). Moreover, with built-in registration system, we can mount provider with an instantiated runtime with only one line of code:"}, {"title": "Actions", "content": "Actions serve as the foundational elements within Eliza, dictating the agents' responses and interac-tions with messages. They empower agents to engage with external systems, adjust their behavior, and execute complex tasks that extend beyond straightforward message exchanges.\nAn Action encompasses a wealth of functionalities, including but not limited to:\n\u2022 Placing Buy & Sell Orders\n\u2022 Analyzing PDF documents\n\u2022 Transcribing audio files\n\u2022 Generating NFTs (Non-Fungible Tokens)\nIt's crucial to recognize that the execution of Actions is often pivotal, with financial implications at stake. Each Action must be meticulously designed with a clear and defined purpose. To safeguard against any potential issues, incorporating robust validation mechanisms and comprehensive error handling is not just advisable but essential. These measures are indispensable when configuring user-defined Actions, ensuring the integrity and reliability of the agent's operations in the web3 domain, can be registered through:"}, {"title": "Evaluators", "content": "Evaluators represent the final core component of Eliza, tasked with assessing and extracting valuable information from conversations and integrating seamlessly into the AgentRuntime's evaluation system. Much like Providers, the integration of Evaluators is streamlined and can be executed with a single line of code:\nIn practice, Evaluators empower agents with the ability to:\n\u2022 Build long-term memory\n\u2022 Track goal progress\n\u2022 Extract facts and insights\n\u2022 Maintain contextual awareness\nIn service, Evaluators are dispensible and commonest find under such scenarios: fact extraction to identify key information, goal tracking to monitor progress, and verifying agent functionality under edge cases."}, {"title": "Intent Recognition", "content": "Intent Recognition is the ability of an AI assistant or an AI system, to understand the purpose or goal of a user's request. As shown in Fig. 3, Eliza employs a multi-layered approach to intent recognition, combining symbolic action definitions with contextual understanding and memory-augmented processing. At its core, the system utilizes a hierarchical action structure, where each intent is defined by a primary identifier accompanied by a collection of semantic similes. This allows for flexible recognition of user intentions across varying linguistic expressions. The primary mechanism is further enhanced by a context-aware evaluation system, which leverages both the immediate conversational state and long-term memory through vector-based retrieval mechanisms.\nThe framework's intent processing pipeline integrates template-driven context building with platform-specific interaction managers. This enables consistent intent recognition across diverse commu-nication channels while maintaining platform-specific optimizations. The architecture is further augmented by a sophisticated memory system that maintains conversational history, knowledge bases, and relationship tracking. This allows the system to perform contextually relevant intent recognition, adapting to both the immediate conversation flow and the broader interaction history.\nThe combination of these components results in a robust intent recognition system that can effectively process and respond to user intentions while maintaining contextual awareness and conversational coherence."}, {"title": "Plugins", "content": "The Eliza framework implements a flexible plugin architecture that enables modular extension of AI agent capabilities while maintaining system stability and coherence. The plugin system provides a well-defined interface for extending agent functionality through various components:\n\u2192 Media Generation Plugins Plugins that enable AI-driven content creation:\n\u2022 Image/Video/3D Generation Plugin\nCreates images/videos/3D based on input prompts.\nSupports multiple providers (Anthropic, Together and etc).\nImage captioning.\n\u2022 NFT Generation Plugin\nGenerates NFT collections.\nSupports various collection attributes.\nIntegrates with blockchain deployment.\nWeb3 Integration Plugins Extensive blockchain support through specialized plugins:\n\u2022 Coinbase Plugin Suite:\nAdvanced Trading - Complex trading strategies\nCommerce Integration - Payment processing\nMass Payments - Bulk transaction handling\nToken Contract Management - ERC20/ERC721 deployment\nWebhook Integration - Event handling\n\u2022 Multi-Chain Support:\nEVM compatibility for Ethereum ecosystem\nSolana with trust scoring and wallet management\nAdditional chains: Aptos, Conflux, Flow, MultiversX, Near, Sui, TON, ICP, zkSync Era\nGOAT (Great Onchain Agent Toolkit) integration for cross-chain operations"}, {"title": "Core Infrastructure Plugins", "content": "Essential services and capabilities:\n\u2022 Node Plugin Services:\nBrowserService - Web browsing capabilities\nImageDescriptionService - Image analysis\nLlamaService - LLM integration\nPdfService - Document processing\nSpeechService - Text-to-speech\nTranscriptionService - Speech-to-text\nVideoService - Video processing\n\u2022 TEE (Trusted Execution Environment) Plugin for secure operations\nThe plugin architecture enables:\n\u2022 Independent Development - Through clear component interfaces\n\u2022 Maintenance Simplification - Through modular package organization\n\u2022 Core System Stability - By isolating extensions from core functionality\n\u2022 Community Engagement - Through npm package distribution\n\u2022 Knowledge Sharing - Via documented examples and TypeScript types\nThis modular architecture allows Eliza to be extended with new capabilities while maintaining a consistent interface and reliable operation across all components. The plugin system's flexibility is particularly evident in its support for both basic utilities like image generation and complex blockchain integrations, making it suitable for a wide range of applications from content creation to decentralized finance."}, {"title": "Core Architecture", "content": "The plugin components interact through clearly defined interfaces:"}, {"title": "Implementation Patterns", "content": "A minimal plugin implementation follows this pattern:"}, {"title": "Key Benefits", "content": "The plugin architecture offers several key advantages:\n1. Modularity Plugins encapsulate related functionality through a simple, clear interface as shown in the code snippet above.\n2. Extensibility New capabilities can be added through standardized component types:"}, {"title": "Community Development", "content": "The architecture promotes collaborative development through user-friendly package management, enabling:\n\u2022 Independent Development: Well-defined component interfaces (actions, providers, evalua-tors, services)\n\u2022 Simplified Maintenance: Modular package organization\n\u2022 Core System Stability: Through isolation of extensions from core functionality\n\u2022 Community Engagement: NPM package distribution\n\u2022 Knowledge Sharing: Documented examples and TypeScript type definitions"}, {"title": "Benchmarks", "content": ""}, {"title": "General AI Agent Benchmark", "content": "GAIA [17] is a benchmark specifically designed to evaluate the general capabilities of AI agents in solving real-world problems. Successfully answering GAIA questions requires multiple skills, including logical reasoning, multi-modal processing, web browsing, and tool utilization. While these questions are conceptually straightforward for humans, they present significant challenges for current AI systems. We evaluate Eliza's general applicability using this benchmark. In our implementation, we construct swarms of multiple homogeneous agents and employ self-consistency (a prompt-based majority voting mechanism) for final decision-making [33]."}, {"title": "Web3 Benchmark", "content": "Given that current web3-oriented AI systems are not yet perfected, quantitative results through transplanting Eliza's features on those frameworks are time-consuming and complicated. We hereby establish a foundational standard for existing and forthcoming frameworks, outlining what an AI agent with comprehensive capabilities should encompass. As detailed in Fig. 4, we outline the requirements for testing a web3 AI agent.\nFor a web3 AI agent, the fundamental requirements must encompass core web3 operations such as creating wallets, transferring and receiving tokens, interacting with smart contracts, and engaging with mainstream social media platforms. Additionally, the agent should support basic trading APIs. Paramount to these functionalities is the thorough red teaming conducted by the AI agent's developers. This exercise is crucial for ensuring the agent's safety and preventing any hazardous behavior that could potentially cause damage to property.\nThe next phase for AI Agents involves rapidly integrating the latest advancements in AI into the agentic framework. This includes leveraging cutting-edge technologies such as text-to-video/3D, RAG (Retrieval-Augmented Generation) support, and audio-to-text transcription. It is also crucial that this stage addresses web3-validated privacy and safety-related plugins and practices effectively.\nThe ultimate goal for a fully realized and advanced AI agent is to be capable of autonomous planning and reasoning based on user instructions. Such an agent should be able to automatically devise a suitable execution pipeline without human intervention, drawing from a pool of unorganized APIs. This capability is the key metric for evaluating the intelligence of an AI Agent, mark the agent is already reached its climax.\nAt present, Eliza is in the midst of transitioning from the primary to the intermediate phase of development. Our team is steadfast in our conviction that we are progressing towards the realization of AI models capable of autonomous action within both digital and physical environments, with the ability to execute complex plans across long-term horizons. We project that this capability will be achieved within the forthcoming years.\nUpon the successful operationalization of these \"agentic\" AI systems, we intend to instantiate multiple units, facilitating their collaborative efforts. This approach aligns with the concept articulated by Dario Amodei, CEO of Anthropic, who envisions a \"datacenter of geniuses.\" The implementation of such a system would represent a paradigm shift in AI capabilities, marking a significant leap forward in the field."}, {"title": "Use Cases", "content": ""}, {"title": "Solana Plugin Example", "content": "The Solana plugin provides functionality for interacting with the Solana blockchain, including token management, swapping, and trust score evaluation, serve as a good example for developer to onboard their blockchain interface with Eliza."}, {"title": "Core Features", "content": "\u2022 Token Management (TokenProvider)\n\u2022 Wallet Integration (WalletProvider)\n\u2022 Trust Score Evaluation (TrustScoreManager)\n\u2022 Token Swapping\n\u2022 FOMO and PumpFun Integration"}, {"title": "Key Components", "content": "Token Provider Handles token-related operations:"}, {"title": "Actions", "content": "The plugin provides several key actions:"}, {"title": "Example Action", "content": "Token Swap (where similes denote alternative names, variations, or synonyms that can trigger the defined Action following intent recognition):"}, {"title": "Configuration", "content": "The plugin requires specific environment configuration:"}, {"title": "Advanced Implementation Example", "content": "Image Generation"}, {"title": "Core Action Definition", "content": "The plugin defines an image generation action with extensive recognition patterns:"}, {"title": "Provider Validation", "content": "The system implements robust provider validation:"}, {"title": "File Management System", "content": "The plugin includes robust file handling capabilities:"}, {"title": "Image Generation Options", "content": "The system supports comprehensive image generation configuration:"}, {"title": "Response Handling", "content": "The plugin implements a callback system for handling generated images:"}, {"title": "Massive Adoption", "content": "Evaluating the success of ElizaOS's design philosophy and market penetration presents unique challenges in the rapidly evolving web3 AI agent ecosystem. To address this, we adopted a straight-forward data-driven approach centered on strategic partnership analytics. Our methodology examined verified partnership announcements and collaborations since ElizaOS's July 2024 launch, comparing its adoption rate against leading web3 AI agent frameworks such as Myshell, Virtuals, and Swarm. Fig. 5 illustrates the ecosystem growth through a selection of web3 projects that leverage ElizaOS to construct their AI agent systems, with the cumulative market capitalization of ecosystem partners"}, {"title": "Limitation", "content": "Although Eliza offers significant advantages, it still has areas for improvement. The current limitations of Eliza can be categorized into three main areas: First, the absence of an explicit workflow system creates barriers for developers seeking to implement routine processes (e.g., periodic data summarization from multiple sources) within Eliza. For such requirements, GUI-enhanced workflow systems like Dify and Coze may be more suitable. Secondly, the Runtime design requires further refinement to balance the computational overhead of multiple agents-particularly as context and memory requirements scale exponentially with runtime efficiency, especially in IO-intensive tasks. Thirdly, expanding multi-language support, particularly for languages such as Python and Rust, is essential for Eliza's future growth, as this would broaden its appeal to developers across different technological domains."}, {"title": "Conclusion", "content": "This paper introduces Eliza, a pioneering open-source Web3-friendly AI agent operating system designed to bridge the gap between AI technology and Web3 applications. By offering a platform that not only makes the deployment of Web3 applications possible but also effortless, Eliza stands out. We emphasize that every aspect of Eliza is crafted as a regular TypeScript program, ensuring it remains fully under user control while also providing seamless integration with Web3 functionalities, including but not limited to, reading and writing blockchain data and interacting with smart contracts.\nThe success of Eliza is attributed to its integration of strong Web3 demands into a design that balances utility and ease of use. We adhere to three main design principles: prioritizing Web3 developers, a pluggable modular design, and maintaining system simplicity while ensuring functionality. These principles have guided the development of Eliza, making it a powerful multi-agent system capable of interacting across multiple platforms.\nThe core concepts of ElizaOS, including Agents, Character Files, Providers, Actions, and Evaluators, together form a highly controllable and orchestrated framework focused on the Web3 industry, offering developers the tools to bring powerful AI agents to life. Our plugin architecture achieves modularity and extensibility while fostering community development and knowledge sharing.\nAlthough Eliza offers significant advantages, we recognize areas for improvement. Current limitations include the absence of an explicit workflow system, the need for further refinement of the runtime design, and the necessity to expand multi-language support.\nIn summary, Eliza represents the forefront of a new era in technology, with possibilities limited only by the imagination of its users. As the fields of AI and Web3 continue to evolve rapidly, Eliza will continue to evolve to meet changing demands and pave the way for the future development of decentralized AI."}]}