{"title": "Towards Geometry-Preserving Reductions Between Constraint Satisfaction Problems (and other problems in NP)", "authors": ["Gabriel Istrate"], "abstract": "We define two kinds of geometry-preserving reductions between constraint satisfaction problems and other NP-search problems. We give a couple of examples and counterexamples for these reductions.", "sections": [{"title": "Introduction", "content": "Reductions are the fundamental tool of computational complexity. They allow classification of computational problems into families (somewhat resembling those in biology), with problems in the same class sharing common features (in particular NP-complete problems being isomorphic versions of a single problem, if we believe that the Berman-Hartmanis conjecture [6] holds).\nA significant concern in the literature on complexity-theoretic reductions is to make the theory of reductions more predictive. This means that we should aim to better connect the structural properties of the two problems that the given reduction is connecting. For instance the notion of pasimonious reduction attempts to preserve the total number of solutions between instances. Various attempts (e.g. [12, 5]) have proposed restricting the computational power allowed for computing reductions. (Strongly) local reductions [23, 22] provide a principled approach that simultaneously relates the complexity of various versions (decision, counting,etc) of the two problems in the reduction. In another direction, several logic-based approaches to the complexity of reductions were considered [47, 13]. Finally, motivated by the connection with local search, a line of research [17], [18] has investigated reductions that attempt to preserve the structure of solution spaces, by not only translating the instances of the two decision problems but also the set of solutions.\nThe geometric structure of solution spaces of combinatorial problems has been brought to attention by an entirely different field of research: that of phase transitions in combinatorial optimization [44, 38]. It was shown that the predictions of the so-called one-level replica symmetry breaking in Statistical Physics applies to (and offer predictions for) the complexity of many constraint satisfaction problems. It is believed [32] that the set of solutions of a constraint satisfaction problem such as k-SAT undergoes a sequence of phase transitions, culminating in the SAT/UNSAT transition. The first transition is a clustering transition where the set of satisfying assignments of a typical random formula changes from a single, connected cluster to an exponential number of clusters that are far apart from eachother. Some aspects of this solution clustering have been confirmed rigorously (solution clustering [3, 39, 14, 28, 30, 4]). The 1-RSB prediction motivated the development of the celebrated survey propagation (SP) algorithm [7] that predicts (for large enough k) the location of the phase transition of the random k-SAT problem [15]. This breakthrough has inspired significant recent progress [10, 19, 20, 8].\nIn this paper we propose connecting these two directions by the definition of reductions that take into account the geometric structure of solution spaces. We put forward two such notions:\n- the first type of reductions extends the witness-isomorphic reductions of [18] by requiring that the solution overlap of the target (harder) problem depends predictably on the overlap of the source (easier) problem. In other words, the cluster structure of the harder problem is essentially the same as the one of the easier problem.\n- for a subclass of NP-search problems, that of constraint satisfaction problems, we define a type of witness-preserving reductions based on the notion of covers. Covers [35, 31] were defined in the course of analyzing the seminal survey propagation algorithm of Zecchina et al. [7]. They are generalizations of (sets of) satisfying assignments for the problem, and allow a geometric interpretation of this algorithm. Specifically, survey propagation is just belief propagation applied to the set of covers [35]. Our reduction extend the usual notion of reductions by requiring that not only solutions of one problem are mapped to solutions, but this is true for covers as well.\nThe outline of the paper is as follows: in Section 2 we subject the reader to a (rather heavy) barrage of definitions and concepts. The two kinds of reductions we propose are given in Definitions 12 and 13. In Section 3 we give four examples of problem reductions (of various naturalness and difficulty) that belong to at least one of the two classes of reductions that we put forward. The first two are classic examples from the literature on NP-completeness. The next two are slightly less trivial examples, and are constructed to be appropriate for one of the two types of reductions (one for each type). Correspondingly, in Section 4 we point out that the natural reduction from 4-SAT to 3-SAT belongs to neither class. An algebraic perspective on the theory of reductions is called for in Section 5. We end (Section 6) with a number of musings concerning the merits and pitfalls of our approach, and the road ahead.\nWe stress the fact that this is primarily a conceptual paper: its added value consists primarily, we believe, in pointing to the right direction in a problem where nailing the correct concepts is tricky, thus stimulating further discussion, rather than in coming up with completely appropriate concepts and proving things about them. Our main goal is to understand and model, not to prove. However, if \"right\" definitions exist, they should be compatible with our results."}, {"title": "Preliminaries", "content": "We review some notions that we will need in the sequel:\nDefinition 1. An NP-search problem is specified by\n\u2022 a polynomial time computable predicate A \u2286 \u03a3*. A specifies the set of well-formed instances.\n\u2022 a polynomial time computable relation R \u2286 A \u00d7 \u03a3* with the property that there exists a polynomial-time computable (polynomially bounded) function q(\u00b7) such that for all pairs (x,y) \u2208 A \u00d7 \u03a3* such that R(x,y) (y is called a witness for x, and x is called a positive instance), we have |y| = q(|x|)1.\n\u2022 a polynomial time computable relation N C A \u00d7 \u03a3* \u00d7 \u03a3* such that if N(x,y1,y2) then |y1| = |y2|= q(|x|). Intuitively, N encodes the fact that y1,y2 are \"neighbors\u201d. Note that it is not required that R(x,y1), R(x,y2), i.e. that y1,y2 are witnesses for x. Instead, y1,y2 are \"candidate witnesses\u201d.\nWe abuse language and write R instead of (A,R,N). We denote by NPs the class of NP-search problems. A problem R in NPs belongs to the class Ps iff there exists a polynomial time algorithm W s.t.\n\u2022 For all x \u2208 A, if W(x) = \"NO\" then for all y \u2208 \u03a3*, (x,y) \u00a3 R.\n\u2022 For all x \u2208 A, if W (x) = y \u2260 \"NO\" then R(x,y).\nDefinition 2. Given NP-search problem R and positive instance x, define the overlap of two witnesses y1, y2 for x as\noverlap(y1, y2) = \\frac{d_H(y_1, y_2)}{q(|x|)} (1)\nIn the previous equation d\u04a3 denotes, of course, the Hamming distance of two strings.\nWe will employ a particular kind of NP-search problem that arises from optimization. The particular class of interest consists of those optimization problems for which determining if a candidate witness is a local optimum, and finding a better candidate witness otherwise, is tractable:\nDefinition 3. An NP-search problem R belongs to the class PLS (polynomial local search, see e.g. [52]) if there exist three polynomial time algorithms A, B, C such that\n\u2022 Given x \u2208 \u03a3*, A determines if x is a legal instance (as in Definition 1), and, additionally, if this is indeed the case, it produces some candidate witness so \u2208 \u03a39(|x|).\n\u2022 Given x \u2208 A and string s, B computes a cost f(x,s) \u2208 N\u222a {\u221e}2. s is called a local minimum if f(x,s) \u2264 f(x,s') for all s' such that N(x,s,s'). Local maxima are defined similarly.\n\u2022 Given x \u2208 A and string s, C determines whether s is a local optimum and, if it not, it outputs a string s' with N(x,s,s') such that f(x,s') < f(x,s) (if R is a minimization problem; the relation is reversed if R is a maximization problem).\nIn addition we require that R(x,s) (i.e. s is a witness for x) if and only if s is a local optimum for x. That is, witnesses for an instance x are local optima.\nObservation 1. It is known (see e.g. [52]) that Ps \u2286 PLS \u2286 NPs."}, {"title": "Geometry-preserving reductions via local constructions", "content": "Our first example of a geometry-preserving reduction is the classical reduction from k-coloring to k-SAT. The reduction is the usual one: to each vertex we associate three logical variables Xi,1,Xi,2,Xi,3. To each edge e = (vi,vj) we associate a formula Fe = Fe(xi,1,Xi,2, Xi,3, Xj,1,Xj,2, Xj,3). The formula Fe codifies three types of constraints: each vertex is given at least one color; no vertex is given more than one color; finally adjacent vertices cannot get the same color. That is\nFe = G(x_{i,1}, X_{i,2}, X_{i,3}) \\wedge G(x_{j,1}, x_{j,2}, x_{j,3}))^(\\bigwedge_{k \\neq l \\in \\{1,2,3\\}}H (x_{i,1}, x_{i,2}) \\wedge H(x_{j,k}, x_{j,l})) (2)\nTheorem 1. The natural reduction from k-COL to k-SAT is cover-preserving and overlap-preserving.\nProof. Let G be an instance of k-COL and PG the instance of k-SAT that is the image of G under the natural reduction. Let c\u2208 [k]|V(G)| be a coloring of G and w be a generalized assignment (a.k.a. list coloring) compatible with c. Under the natural transformation each vertex v is represented by k logical variables, Xv,1,Xv,2,...,Xv,k, and the constructed formula ensures that only one of them can be true. In particular one can define f(c) to be the satisfying assignment naturally corresponding to the coloring c.\nNow transform a general assignment w of colors to the graph G to a generalized assignment g(G, w) for the formula by the following rules:\n1. if 0 \u2260 C, C {1,2,...,k} is a set of allowed colors for vertex v then we set all variables xv,i, i \u2209 Cv, to zero.\n2. if |C| = 1 then we set the remaining variable xvi to 1. If, on the other hand, |C,| \u2265 2, then we set all variables xv,i, i \u2208 Cv to *.\nIt is easy to see that w is a cover compatible with c if and only if g(< G, w >) is a cover compatible with g(<G, c >).\nTheorem 2. The natural reduction from 1-in-k SAT to k-SAT, k \u2265 3 is overlap preserving and cover preserving.\nProof. Remember, clause 1-in-3(x,y,z) is translated as x\u2228y V z,\\bar{x}\\bar{y}\\bar{z}. Since the reduction does not add any new variables, the set of satisfying assignments is the same, hence the overlap of the translated solutions does not change. Similarly, covers correspond naturally (via identity) to covers."}, {"title": "An(other) example of an overlap-preserving reduction", "content": "The purpose of this section is to give an example of a somewhat less trivial witness-isomorphic reduction that is overlap-preserving. The reduction is one that was already proved to be witness-isomorphic in the literature. Specifically, Fischer [17] has proved that problem MAX-SAT* (see Definition 4) is NP-complete. Subsequently Fischer, Hemaspaandra and Torenvliet [18] have shown that the reduction between SAT and MAX \u2013 SAT* is witness isomorphic.\nTheorem 3. One can encode MAX \u2013 SAT* as a NP-search problem such that the witness-isomorphic reduction from (SAT,RSAT) to (MAX-SAT*,RMAX-SAT*) [18] is overlap-preserving.\nProof. First let's recall the reduction from [18]: let \u03a6 be a propositional formula in CNF with n variables X1,...,xn and m clauses C1, ..., Cm. Define\n\u03a8 = \\bigwedge_{i=1}^{m} (x_i \\vee b_i)^{m+1} \\wedge (C_1 \\vee a) \\wedge ... \\wedge (C_m \\vee a)"}, {"title": "An(other) example of a cover-preserving reduction", "content": "Whereas in the previous section we gave a slightly less trivial reduction that was overlap-preserving, the goal of this subsection is to give a slightly less trivial example of a cover-preserving reduction. The problem we are dealing with will not fall in the framework of Definition 6 (and subsequent Definitions 6-12) since it also includes a \u201cglobal\u201d constraint. Rather than attempting to rewrite many of the previous definitions in order to construct a more general framework, appropriate to our example, we will be content to keep things at an intuitive level, adapting the definitions on the spot as needed. We trace the idea of the construction below to an unpublished, unfinished manuscript [45] that has no realistic chances of ever being completed, as a (different) analysis of the belief propagation algorithm for graph bisection using methods from Statistical Physics has been published in the meantime [48]. The adaptation of the construction to our (rather different) purposes and the statement/proof of the theorem below is, however, entirely ours.\nDefinition 14. The Perfect graph bisection (PGB) problem is specified as a search problem as follows:\n\u2022 Input: A graph G = (V,E).\n\u2022 Witnesses: A function f :V \u2192 {\u22121,1} such that for all vertices v, w \u2208 V, (v, w) \u2208 E\u21d2 f(v) = f(w) and \\sum_{v \\in V} f (v) = 0.\nWe identify solutions f,g such that f(v) = \u2212g(v) for all v \u2208 V."}, {"title": "Reductions that are not geometry-preserving", "content": "A basic sanity check is to verify that there are natural reductions between versions of satisfiability that are not geometry preserving. In this section we give two examples:\nTheorem 5. The classical reduction from 4-SAT to 3-SAT is neither cover preserving nor overlap pre-serving.\nProof. Remember, the idea of simulating a 4-clause x Vy V z Vt by a 3-CNF formula is to add an extra variable a and simulate the clause above by the formula x V y\u2228a,\\bar{a}\u2228zVt.\nTo show that the reduction is not cover preserving it is enough to create a formula such that by the reduction we create more covers.\nWe accomplish this as follows: we add to the formula clause C\u2081 = x\u2228yVzVt. Then, informally, we enforce constraints x\u2228y and z Vt using 4-clauses. Let us accomplish this for the first one (the second case is entirely analogous) as follows: we add clauses x\u2228y Vx1 VX2, \\bar{x}\u2228\\bar{y}V\\bar{x_1}V\\bar{x_2},x\\bar{y} VX_1\\bar{X_2},\\bar{x}\\bar{y}V\\bar{X_1}\\bar{X_2}. Let P\u2081 be the resulting formula and 2 be its 3-CNF reduction.\nThe set of solutions of \u00de\u2081 is basically {(x,y) \u2208 {(0,1), (1,0), (1,1)}} \u00d7 {(z,t) \u2208 {(0, 1), (1,0), (1,1)}}.\nNone of the variables x,y,z,t can be given a 0/1 value in a cover since they are not supported in clause C\u2081 (as there are at least two true literals in that clause). So the set of covers of P\u2081 coincides with the set of satisfying assignments of \u0424, together with the trivial cover ***...**.\nOn the other hand, in \u04242 auxiliary variable a can be given value *. In particular x = 1,z = 1, a = * and all other variables given value * is a nontrivial cover. As all values for a are good, the reduction is also not witness isomorphic, hence not overlap preserving."}, {"title": "Geometry-preserving reductions: an Algebraic Perspective", "content": "In this section we advocate for the development of an algebraic approach to reductions, perhaps based on category theory [34]. The motivations for advocating such an approach are simple:\n- One can view each constraint satisfaction problem CSP(S) as a category: its objects are S-formulas. Given two objects (formulas) \u03a6\u2081 and \u04242, a morphism is a mapping between variables of P\u2081 and variables of 2 that maps clauses of P\u2081 to clauses of \u04242.\n- CSP's, together with polynomial time reductions form a category CS P.\nWe can view our constructions in Section 3, however simple, in a categorical fashion. The proof of Theorem 1 shows that the reduction \u201clocalizes\": we can interpret the usual gadget-based reduction (and in particular our cover reduction) as \u201cgluing\" local morphisms. Then it is possible to construct cover-preserving reductions by:\n1. Adequately constructing them \"locally\".\n2. \"Gluing\" them in a way that preserves covers.\nThe following result shows that cover-preserving reductions also can act as morphisms:\nTheorem 6. The following (simple) properties are true:\n1. For any CSP A the identity map is a cover-preserving reduction of A to itself.\n2. Cover-preserving reductions compose: if A,B,C are CSP and ,  are cover-preserving reductions of A to B and B to C, respectively, then ,:= \u00b0  is a cover-preserving reduction of A to C."}, {"title": "Conclusions", "content": "Our research clearly has a preliminary character: we see our contribution as a conceptual one, pointing in the right direction rather than having provided the definitive definitions for structure-preserving reductions. Specifically, we believe that one needs to be serious about connecting phase transitions in Combinatorial Optimization to Computational Complexity Theory, however weak the resulting notions may turn out to be. ([16] seems to be an intriguing approach in this direction).\nIt may be that the results in this paper can be redone using a more restrictive notion of reductions that turns out to be better suited. Whether different variations on the concepts are more appropriate is left for future research. Also left for further research is the issue of classifying the natural encodings of constraint satisfaction problems (particularly for NP-complete problems) under these definitions. This might be difficult, though: our result only shows, for instance, that the natural reduction from 4-SAT to 3-SAT does not have the desired properties, not that there is no such reduction !. Also, one cannot solve this problem, in principle without understanding the nature of the phase transition in 3-SAT: the 1-RSB approach predicts the phase transition of k-SAT only for large enough values of k, and it is not clear that it does for k = 3.\nIn any case we expect that NP-complete problems split in multiple degrees under (variants of) our reductions. Reasons for this belief are twofold:\n- First, it is actually known that not all NP-complete problems are witness isomorphic. So we cannot expect to have a single degree under cover-preserving reductions.\n- Second of all, we expect that 1-in-k SAT and k-SAT are not equivalent under overlap preserving reductions, simply because k-SAT displays clustering below the phase transition, whereas we expect 1-in-k SAT, k \u2265 3, not to. Whether our notions of reductions are appropriate enough to capture this difference is an open problem.\nThe main weakness of any attempt of connecting the geometry of instances of two problems by reductions is the asymptotic nature of the predictions provided by methods from Statistical Physics. Specifically, such predictions (the existence of a sharp SAT/UNSAT threshold, the existence of one/multiple clusters of solutions, etc.) refer to properties that are true for almost all (rather than all) instances at a given density. In contrast classical reductions (as well as the ones we give) provide guarantees for all instances.\nSecondly, our definitions have not attempted to map (via the reduction) the precise location of the two phase transitions, and there is no reasonable expectation that ordinary reductions preserve this location. A reason is that, for instance, (2+p)-SAT [41] is NP-complete for p > 0, but the location of the phase transition in (2+ p)-SAT is determined [41, 2] by the \"easy part\u201d, at least for p < 0.4. So, unless the reduction classifies such problems as \"easy\" (\"reducing\u201d an instance \u03a6 of (2+p)-SAT to its 2-SAT component via a notion of reduction that may sometimes err, but is otherwise rather trivial) one cannot simply use ordinary notions of reductions, even restricted as the ones put forward in this paper\u00b3.\nTo conclude: to get the notion of reduction appropriate for dealing with phase transitions we might need a notion of reduction that is only correct on one class of instances (and errs on a negligible set of instances at each density). We don't claim that our reductions accomplish this, and only hope that they can function as useful guidelines towards the development of this \"correct\" notions of reductions. How to do this (and whether it can be done at all) is intriguing. And open."}]}