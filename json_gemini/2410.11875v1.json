{"title": "A Framework for SLO, Carbon, and Wastewater-Aware Sustainable FaaS Cloud Platform Management", "authors": ["Sirui Qi", "Hayden Moore", "Ninad Hogade", "Dejan Milojicic", "Cullen Bash", "Sudeep Pasricha"], "abstract": "Function-as-a-Service (FaaS) is a growing cloud computing paradigm that is expected to reduce the user cost of service over traditional serverful approaches. However, the environmental impact of FaaS has not received much attention. We investigate FaaS scheduling and scaling from a sustainability perspective in this work. We find that the service-level objectives (SLOs) of FaaS and carbon emissions conflict with each other. We also find that SLO-focused FaaS scheduling can exacerbate water use in a datacenter. We propose a novel sustainability-focused FaaS scheduling and scaling framework to co-optimize SLO performance, carbon emissions, and wastewater generation.", "sections": [{"title": "I. INTRODUCTION", "content": "Function-as-a-Service (FaaS) is a fast growing model of cloud computing with many benefits over traditional serverful approaches. In FaaS, developers create applications as a set of functions that are packaged in containers for deployment in cloud platforms. FaaS relieves developers from the burden of managing servers, scaling, logging and fault handling, which are now handled by the cloud provider. Several commercial FaaS services have emerged, including AWS Lambda and Google Cloud Functions. The fine granularity of function execution enables lower costs for developers who only pay when a function is executed. But unlike virtual machines (VMs) in serverful approaches, cloud providers now need to more carefully schedule many more finer granularity containers to execute functions while meeting their service level objectives (SLOs) and scale up containers to meet request spikes. However, current estimates indicate that in cloud datacenters, about 50% of energy is used by idle resources, highlighting the inadequate management of these platforms [1].\nBeyond improving SLO performance guarantees, there is also concern about the environmental impact of cloud datacenters. Currently datacenters consume approximately 1-2% of global electricity demand [2]. By 2030, this is projected to increase to between 3-13% [3]. Such a massive increase in electricity usage will proportionally increase the carbon footprint of these datacenters, as fossil fuels are still widely used for energy production. Moreover, cloud datacenters also consume significant water for cooling and as part of their energy generation footprint. Currently datacenters consume 626 billion liters of water a year in the United States [4] and water scarcity is becoming an increasing concern globally (about 30% of cities globally with a population above a million experience yearly water scarcity [5]). As FaaS grows in popularity, there is an urgent need to focus on making FaaS cloud datacenter platforms more carbon and water efficient.\nSeveral efforts in recent years have focused on improving the energy efficiency of FaaS. Much of the focus has been on reducing the energy usage of FaaS cloud platforms [6]. But energy usage does not directly correlate to carbon or water emissions [2]. A recent approach proposed a carbon-aware FaaS scheduler [1], which exploits geo-spatial differences in carbon intensity to migrate FaaS requests to greener locations. However, significant SLO violations can occur due to the high latency associated with moving functions between datacenters.\nIn this paper, we present the first framework that simultaneously co- optimizes function SLOs, operational carbon, and wastewater generation in FaaS cloud datacenter environments. We propose a novel multi-objective optimization framework and demonstrate improvements over the state-of-the-art FaaS scheduling frameworks."}, {"title": "II. SUSTAINABLE FAAS MANAGEMENT FRAMEWORK OVERVIEW", "content": "We focus on the problem of making scheduling (mapping containers to compute nodes) and autoscaling (provisioning compute cores and memory to each container) decisions for containers that execute incoming functions at a FaaS cloud datacenter facility. The decisions are made at the start of a developer defined epoch, based on the currently pending functions and predictions of functions projected to arrive during the epoch. The functions can have different execution times and diverse (SLO-based) deadlines. The goal of our framework is to co-optimize function execution in this FaaS cloud, minimizing SLO violations, carbon emissions, and wastewater generation at the same time."}, {"title": "III. FAAS WORKLOAD AND MODELING ASSUMPTIONS", "content": "To evaluate our framework, we consider a two-week serverless function production trace from Microsoft's Azure service [7]. Based on their sanitized original traces, we derived our serverless function traces with 424 unique serverless function IDs, each of which represents a unique execution functionality and runtime. A container can process multiple requests from the same function ID in parallel but may require larger CPU resource allocations. Meanwhile, when a container starts up, shuts down, or stays idle, it always introduces resource usage and delays in the cluster, which are modeled as configurable variables in the experiment, derived from a real FaaS cluster system. The number of function IDs in each epoch varies from 13 to 62, with a runtime distribution where nearly 90% of functions execute for less than 30 seconds. Each function has an SLO-based deadline, which if missed, results in an SLO violation.\nWe carefully model the carbon emissions and wastewater generation based on the models in [8], for our FaaS cloud datacenter cluster. The carbon emissions of a cluster are based on the total energy consumption and water usage. This is because during the processes of 1) electricity generation, 2) potable water production, and 3) wastewater treatment, \"dirty\" energy sources are utilized and carbon dioxide is released into the atmosphere. The carbon emissions of a cluster are also impacted by real-time factors such as cooling efficiency, carbon intensity of electricity, etc. Meanwhile, a large amount of water is consumed in the cooling units of datacenters to transfer the heat from a compute room to open space through water cycling and evaporation. Cycling water needs to be replaced regularly and evaporated water is directly released into the air. If there are thermal hotspots in the datacenter, more cooling energy is expended. We consider all of these effects when modeling carbon emissions and wastewater generation in our FaaS cloud cluster."}, {"title": "IV. EXPERIMENTAL RESULTS", "content": "We consider a 50 node FaaS cluster, with each node consisting of 128 cores (2 EPYC 7713 CPUs with 64-cores each) and 256 GB RAM. We select two state-of-the-art FaaS management frameworks to compare with our proposed (SFCM) framework. The first work (SCORE) utilizes a scoring system to schedule and scale containers and improves on the default Kubernetes scheduling algorithm [9]. The second work (HYBRID) proposes a hybrid method which utilizes both non-stopping virtual machines for long-running functions and short- lived containers for short-running functions [10]. All three frameworks are adapted to make decisions every 15 minutes (epoch length) for different request intensity and functions IDs from the Azure function trace, discussed in the previous section. Both the container locations and sizing (scaling) decisions are determined by frameworks for each function ID in each epoch.\nLastly, Fig. 3 shows results aggregated over an 8-hour interval. We show results for four variants of our SFCM framework, where we pick solutions that optimize SLO (SFCM-SLO), carbon (SFCM-Carbon), water (SCFM-Water), and a weighted sum of the 3 metrics (SFCM- Balance). It can be observed that SFCM-SLO, SFCM-Carbon, and SFCM-Water provide up to 22%, 35%, and 37% reduction in corresponding objectives compared to the best state-of-the-art framework (SCORE). SFCM-Balance attempts to co-optimize across all three objectives. It dominates the HYBRID framework, with 45%, 25%, and 26% lower SLO violation rate, carbon emissions, and water usage. Compared with SCORE, SFCM-Balance is able to reduce carbon and water use by 14% and 20% respectively, while only compromising <1% SLO violation rate."}, {"title": "V. CONCLUSION", "content": "In this paper, we studied the problem of sustainable FaaS container scheduling and autoscaling in a single cloud datacenter to simultaneously minimize SLO violation rate, carbon emissions, and wastewater generation. We developed a novel multi-objective optimization framework (SFCM) for this problem. Our experimental results show that SFCM provides a diverse set of solutions, many of which dominate the solutions produced by state-of-the-art FaaS scheduling frameworks. In an 8-hour cumulative test on a FaaS cloud cluster, our framework reduces SLO violation rate, carbon emissions, and water usage by up to 45%, 25%, and 26% correspondingly compared to state-of-the-art FaaS scheduling frameworks."}]}