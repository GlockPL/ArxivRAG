{"title": "Real-Time Energy-Optimal Path Planning for Electric Vehicles", "authors": ["Saman Ahmadi", "Guido Tack", "Daniel Harabor", "Philip Kilby", "Mahdi Jalili"], "abstract": "The rapid adoption of electric vehicles (EVs) in modern transport systems has made energy-aware routing a critical task in their successful integration, especially within large-scale networks. In cases where an EV's remaining energy is limited and charging locations are not easily accessible, some destinations may only be reachable through an energy-optimal path: a route that consumes less energy than all other alternatives. The feasibility of such energy-efficient paths depends heavily on the accuracy of the energy model used for planning, and thus failing to account for vehicle dynamics can lead to inaccurate energy estimates, rendering some planned routes infeasible in reality. This paper explores the impact of vehicle dynamics on energy-optimal path planning for EVs. We develop an accurate energy model that incorporates key vehicle dynamics parameters into energy calculations, thereby reducing the risk of planning infeasible paths under battery constraints. The paper also introduces two novel online reweighting functions that allow for a faster, pre-processing free, pathfinding in the presence of negative energy costs resulting from regenerative braking, making them ideal for real-time applications. Through extensive experimentation on real-world transport networks, we demonstrate that our approach considerably enhances energy-optimal pathfinding for EVs in both computational efficiency and energy estimation accuracy.", "sections": [{"title": "I. INTRODUCTION", "content": "The rapid advancements in automotive and renewable energy technologies over the past decade have driven the widespread adoption of electric vehicles (EVs), solidifying their role in modern transport systems. Today, EVs are integrated into nearly all forms of transport, serving diverse purposes such as public transit with electric buses [1], daily commute with battery-powered public bikes [2], and warehouse automation with smart electric robots [3]. Although technically superior to conventional vehicles in many aspects, such as powertrain system efficiency, EVs face some challenges related to their battery capacity, slow charging process and unavailability of charging infrastructure. In scenarios where battery State of Charge (SoC) is low and charging locations are not in proximity, distant locations may only be reachable via an energy-optimum path, meaning a path from origin to destination that minimises energy consumption compared to all other possible paths. It is therefore crucial to have planning algorithms that can reason about energy-optimum paths, either to calculate them directly such as in an application for satellite navigation, or as a sub-task in a bigger system such as a tool for complex vehicle routing. In transport networks, energy-optimal pathfinding is a practical real-world application of the classic shortest path problem, aiming to find the least-cost path between two locations in a network.\nThe quality of the energy-efficient paths critically depends on the accuracy of the energy model used to estimate the energy requirement of each road segment (link) in the underlying network. In the case of EVs, energy models must account for factors such as terrain, speed, traffic, and load to provide realistic and reliable energy predictions. While each type of EV exhibits distinct energy consumption characteristics [4], existing research often relies on energy models built based on generic vehicle categories (e.g., vehicle categories in HBEFA\u00b9) [5], [6], or simplified assumptions that do not account for system dynamics, such as focusing solely on average energy efficiency and road gradients [7], [8], [9], or assuming constant speed across road segments [10], [11], [12]. A main drawback with such simplified models is that they do not fully take vehicle dynamics into account, and thus the projected energy requirements may not reflect the actual energy required to traverse specific links in the road network. As we will see shortly, path planning with basic energy models can produce infeasible paths, where the vehicle exhausts its available energy before reaching the designated target."}, {"title": "A. Case Study and Motivation", "content": "To illustrate the importance of vehicle dynamics, consider an example in Calgary, Canada, where the energy-optimal path for a round trip is planned using a basic energy model for an EV with the specifications of the Peugeot iOn (a sample vehicle with a 16 kWh battery capacity). We suppose there are four passengers on board and 60% initial SoC. Figure 1 shows the planned round-trip on the right, and changes in elevation and the aggregated energy consumption on the left. In this figure, we compare a conventional (basic) energy model which considers average energy consumption adjusted with road gradients (dashed red curve) with a more accurate energy model which adds vehicle load and driving patterns to the basic model (dashed green curve). The difference between the two models is 1kWh or 6.3% of the battery capacity at the end of the trip, which is clearly not negligible. More importantly, the path computed with the simpler model is most likely infeasible in reality, leaving the vehicle and its passengers stranded. As we will study in the experiment section, such cases are not pathological: depending on the SoC, vehicle dynamics and the length of the trip, such infeasible paths can arise in a majority of cases. We will also show that a well-designed and realistic energy model can not only improve the quality of energy estimates, but reduce the risk of producing infeasible routes, and can even yield improvements in algorithmic efficiency."}, {"title": "B. Energy-optimal Pathfinding", "content": "The energy-optimal pathfinding problem aims to minimise energy consumption while ensuring route feasibility, constrained by the limited available energy. For conventional vehicles, where energy (fuel) consumption is non-negative, the problem can be efficiently solved using dynamic programming solutions such as Dijkstra's algorithm [13]. Nonetheless, many EVs feature energy recuperation via braking, which may result in negative energy costs on some negative slopes. Baseline approaches, such as the Bellman-Ford algorithm [14], [15] are capable of solving pathfinding problems on graphs with negative weights, as in [16], [17]. However, their computational complexity is higher compared to algorithms designed for non-negative cost graphs. More recent approaches leverage the reweighting technique of Johnson's algorithm [18] to enable more efficient pathfinding, provided the graph contains no negative cycles, a condition that is inherently satisfied in our problem due to the law of conservation of energy. In real world applications, however, we may face frequent changes either in the graphs (such as changes in the driving pattern in different traffic conditions) or in the vehicle specification (such as changes in energy consumption via varying load or number of passengers). As we will see, the overall system complexity means that without a suitable energy model and pathfinding algorithm, planned routes may indeed be infeasible in practice."}, {"title": "II. PROBLEM FORMULATION AND BACKGROUND", "content": "Let us consider a road network modelled as a directed graph G = (V, E) with a finite set of vertices V and a set of edges E \u2286 V \u00d7 V. Each vertex u \u2208 V corresponds to a location (intersection) and each edge e \u2208 E corresponds to a link (road segment). A path is then defined as a sequence of vertices $u_i \\in V$ with $i \\in \\{1, ..., n\\}$ such that $(u_i, u_{i+1}) \\in E$ for $i \\in \\{1,...,n \u2013 1\\}$. Furthermore, the height function $h : V \\rightarrow R^+$ returns the elevation of locations. In our notation, expanding a typical vertex u generates a set of successor vertices, each denoted Succ(u) and we always have (u, Succ(u)) \u2208 E. Thus, we always have (u, Succ(u)) \u2208 E. Each edge is associated with a real-valued weight $cost_e \\in R$, which represents the amount of energy required to traverse the link. The edge costs can be retrieved via the function cost: E\u2192 R. For realistic path planning, these costs need to accurately reflect the actual energy requirement of the vehicle over the edge, and can be negative due to energy recuperation.\nAssume an EV with an initial energy level of $E_{init} \\in R^+$ at the origin u \u2208 V and with the maximum energy level of $E_{max} \\in R^+$ (the battery capacity). Our objective is to find an energy minimum path \u03c0* from u to destination $u_d \\in V$ subject to the constraint that all locations on \u03c0* are reached with a valid energy level in the [0, $E_{max}$] range."}, {"title": "A. Energy Constraints and Adjustments", "content": "If standard pathfinding algorithms are used to compute minimum-energy paths without considering energy constraints, the resulting paths may consume more energy than the vehicle's battery capacity. Let $E(u) \\in R^+$ be the (optimal) energy level of the EV at vertex u. To ensure u's expansion yields valid energy levels, the energy requirement of each edge $e : (u, v)$ should be checked against two conditions during the expansion [9]. In the first case, given $cost_e$ as the link's energy requirement, vertex v can be reached if the EV's energy level at vertex u is at least $cost_e$, i.e., $E(u) \\geq cost_e$. This relation ensures feasibility via $E(v) \\geq 0$ where E(v) is the energy level at the end point v after traversing the edge (u, v). The second case deals with negative cost links, and check the energy level at the end point v against the battery capacity $E_{max}$ to avoid overcharging (in the planner). If $E(v) > E_{max}$, the corresponding cost needs to be (temporarily) adjusted to limit the v's energy level at $E_{max}$, i.e., we set $cost_e \\leftarrow E(u)-E_{max}$ to have $E(v) = E_{max}$. This ensures the energy level in the planner is always capped at the maximum possible level $E_{max}$."}, {"title": "B. Negative Weights and Graph Reweighting", "content": "In cases where the EV's energy model is not known, or so complex that it cannot be represented as a generic function, we can preprocess edge costs and convert them into non-negative values. Johnson's algorithm [18] is one such shifting method that can solve the all-pairs shortest path problem in graphs with negative costs but without negative cycles. A negative weight cycle is a cycle in which the sum of the edge costs is negative. In our application, having negative cycles means that there exists at least one cycle in our road network in which our EVs can run forever, which is not possible given the law of conservation of energy. Note that we assume no external charging happens while the EV traverses the links. Therefore, our underlying graphs contain no negative cycle, and thus the Johnson's technique [18] can be applied.\nThe main idea in the Johnson's method is establishing a shifting function $\\mu : V \\rightarrow R$ that satisfies $cost(u, v) + \\mu(u) - \\mu(v) \\geq 0$ for a typical edge (u, v) \u2208 E while guaranteeing the optimality of all shortest paths when using shifted weights. It can be shown that a shifting function \u03bc exists if and only if the graph has no negative cycle [18]. One such shifting function \u03bc can be obtained by using the Bellman-Ford [14], [15] algorithm in three simple steps: (1) add a new dummy vertex to the graph and connect it to each vertex in G with a zero-cost edge; (2) compute the shortest paths from the newly added vertex to all other vertices using the Bellman-Ford algorithm; (3) store for every vertex u \u2208 V its optimal cost obtained during the previous step in \u03bc(u), then remove the added vertex. Now, with the shifting function \u03bc established, one can reweight cost(u, v) to a non-negative value via cost(u, v)+\u03bc(u)-\u03bc(\u03bd), called reduced cost function, and optimise paths for their reduced costs using the Dijkstra's algorithm, as in [7]."}, {"title": "C. Related Work and Existing Solutions", "content": "Considering the state-of-the-art solutions in the literature, we can categorise the existing energy-optimal pathfinding algorithms in two approaches: (i) algorithms that traditionally establish a shifting function based on an attribute of vertices in the underlying graph, such as shifting techniques in [19] and [8]; (ii) algorithms that use a shifting function directly derived from a generic cost function, such as solutions in [10] and [12]. The former (approach i) relies on empirical costs but uses nodes' elevation to apply proper shifting, and the latter (approach ii) uses a basic energy model normally obtained by simplifying EVs' energy equations. We investigate both approaches from two aspects: their applicability to dynamic settings and the reliability of planned routes. Approach (i) is able to work with empirical energy costs or complex models, but keeping the reduced cost updated in this approach can potentially be costly in the dynamic setting as the algorithm needs to check the validity of the shifting function upon every graph change (usually in a form of preprocessing in the static mode). Therefore, this approach can offer more reliable routes, but it may not be fast enough for dynamic applications. On the other hand, approach (ii) can be adapted to be used in dynamic settings as any changes in the input parameters (and consequently output via the cost function) would simply be reflected in the shifted costs. However, the cost function is already oversimplified and does not take all the actual and realistic energy components into account. Therefore, this approach offers fast solutions to dynamic energy-optimal pathfinding, at the risk of producing infeasible routes.\nWe now recapitulate the state-of-the-art shifting function of [19], which works with energy and elevation data (approach i). Their height-induced potential function $\u00b5_h : V \\rightarrow R$ is defined by $\u00b5_h = \u03b1h$ where h is the elevation function and \u03b1 is a constant factor. The value of \u03b1 is determined in a way that all edge costs can be safely shifted to non-negative values by ensuring $cost(u, v) + \u00b5_h(u) \u2013 \u00b5_h(v) \\geq 0$ for every edge $(u, v) \\in E$. This is done by a linear scan of all the edges in the network during the prepossessing phase using the following strategy. For every edge e \u2208 E with the energy requirement $cost_e$, we first set $\u03b1_e \\leftarrow cost_e/\u2206h$ where \u2206h is the elevation difference between the link's end points. Then, if \u2206h > 0 we must always have \u03b1 \u2264 $\u03b1_e$, otherwise, if \u2206h < 0 the relation \u03b1 \u2265 $\u03b1_e$ must hold. These conditions yield lower ($\\underline{\u03b1}$) and upper ($\\bar{\u03b1}$) bounds on the coefficient \u03b1, which is non-negative in practice. Finally, we can choose any value for \u03b1 in"}, {"title": "III. VEHICLE DYNAMICS AND ENERGY EFFICIENCY", "content": "Energy-aware pathfinding for EVs requires system models that can estimate the electric energy required to traverse each road segment. In this section, we develop a novel technique that can integrate the essence of an EV's longitudinal dynamic into a cost function for energy-optimal path planning.\nThe energy consumption of an EV can be accurately modelled based on a so-called longitudinal vehicle dynamics, which essentially establishes a nonlinear relationship between the vehicle speed, mass, road gradient and the required power. Typically, the electric power drawn from the EV's energy storage system can be calculated by the following equation in a stop-and-go pattern on a non-flat road [20]:\n$P = \\frac{V}{\u03b7} (Mgf_r cos\u03b8 + \\frac{1}{2} \u03c1C_DA V^2 + Mg sin \u03b8 + M\u03b4\\frac{dV}{dt})$  (1)\nwhere \u03b7 is the transmission efficiency, $f_r$ is the tire rolling resistance coefficient, \u03c1 is the air density, $C_D$ is the aerodynamic drag coefficient, A is the frontal area of the vehicle and \u03b4 is the coefficient of rotary elements in the vehicle. Each of these parameters can be determined empirically for any given EV, and can be considered constant in the so-called longitudinal vehicle dynamics. The remaining and interesting variables in the equation are vehicle speed V, acceleration $dV/dt$, mass M and the ground slope angle \u03b8. The values for speed and acceleration are both highly dependent on the driving pattern. One may simplify the model by assuming fixed (constant) speeds [10], [12], but, as we observed earlier in Section I, ignoring acceleration will result in inaccurate energy predictions in reality. Since the driving pattern changes with the road conditions (such as traffic congestion), predicting energy flows over trips is a difficult task. The industry-standard approach for addressing these uncertainties involves using drive cycle tests to evaluate the vehicle's energy efficiency under various driving patterns.\nWhile several drive cycles exist for specific scenarios, we are interested in those that encompass the most prevalent driving patterns in urban transport. In this study, we utilise the WLTP\u00b2 cycle, a realistic drive cycle developed from real-world driving data. Many automotive manufacturers now report their vehicles' energy efficiency based on this standardised cycle [21]. The speed profile of WLTP and its speed categories (Slow, Medium, High, Extra-High) are depicted in Figure 2.\nData-driven energy model: While existing studies often rely on simplified longitudinal equations to estimate energy consumption, this research adopts a more robust, data-driven approach that integrates vehicle dynamics and road conditions, providing improved accuracy for real-world driving scenarios. Specifically, we use energy data, derived either synthetically or from real-world measurements, to build a model that maps the key vehicle dynamics variables to energy efficiency. The model development employs classic mathematical learning methods to build an explainable, high precision energy model. As we demonstrate in Section V, our experiments show that the system can be effectively represented as a quadratic cost function with high precision. Consequently, the core of our approach is an energy function that measures the energy efficiency $cost_{ef}$ of a particular EV (usually reported in Wh/100m) under a specific driving pattern in the generic form of:\n$cost_{ef} = (ma_2 + b_2)s^2 + (ma_1 + b_1)s + (ma_0 + b_0)$  (2)\nHere, s is the road angle (sin \u03b8) and m is the extra mass (load/passengers' weight in kg). The coefficients $a_i$ and $b_i$, i \u2208 {0, 1, 2}, are also non-negative parameters, determined by the mathematical learning method. See Table I in Section V for the range of $a_i$ and $b_i$ parameters for studied EVs in this paper under the speed profiles of WLTP. For synthetic data, any mathematical formulation or powertrain simulator can be employed to produce the necessary energy data for learning the energy model, provided that vehicle mass, road gradient and driving pattern can be adjusted. Our approach is versatile, allowing the model to be computed for different driving patterns. This means that the coefficients of the quadratic function above can be obtained under any driving patterns, such as the speed profiles in the WLTP cycle."}, {"title": "IV. PATHFINDING WITH ONLINE REDUCED COSTS", "content": "This section introduces two novel online reweighting functions that allow standard energy-optimal pathfinding algorithms to establish a valid shifting function without graph reformulation. We first present our model-based approach, followed by a model-independent method."}, {"title": "A. Model-based Reduced Cost", "content": "Given the energy model of the EV provided in the form of Eq. (2), we can calculate the energy cost of edge e \u2208 E as:\n$cost(e) = m(a_2s^2 + a_1s + a_0)l + (b_2s^2 + b_1s + b_0)l$  (3)\nwhere l is the length of the edge e (in units of 100m). We can then develop a formula for energy consumption along path \u03c0 with n edges. Each edge j \u2208 {1, ..., n} is characterised by its length $l_j$ and road elevation angle $s_j$. The energy consumption along the path can thus be formulated as\n$cost(\u03c0) = m\\sum_{j=1}^{n} \\sum_{i=0}^{2} (a_{ij}s_j)^i + \\sum_{j=1}^{n} \\sum_{i=0}^{2} (b_{ij}s_j)^i$ (4)\nSince each link of the path may be traversed with a different driving pattern, the parameters ai and bi are now also indexed by j. We observe that, since the cost function is naturally convex and all the coefficients are non-negative, the only terms that can produce negative costs are a1,jsj and b\u2081,jsj for the links with negative ground slope, i.e., sj < 0. Thus, we can define the potentially negative component of the cost as:\n$cost_{neg}(\u03c0) = m\\sum_{j=1}^{n} a_{1,j}s_jl_j + \\sum_{j=1}^{n} b_{1,j}s_jl_j$  (5)\nLet us analyse this potentially negative component further. In [8], the authors show that when the underlying system is known, the reduced cost function can be obtained using the elevation difference if the energy function is linear. Having a nonlinear and more realistic system model, we extend that idea to find a suitable reduced cost function that fits our elevation-dependent energy model, while taking driving patterns into account. Our first observation is that $s_j = sin \u03b8_j = \u2206h_j/l_j$, with $\u2206h_j$ denoting the elevation difference over link j. Additionally, we can approximate the a1 and b\u2081 coefficients using the average values of $\\bar{a_1}$ and $\\bar{b_1}$ (computed over patterns) to simplify the potentially negative portion of the path cost to\n$cost_{neg}(\u03c0) \u2248 (m\\bar{a_1} + \\bar{b_1})\\sum_{j=1}^{n} \u2206h_j = (m\\bar{a_1} + \\bar{b_1})\u2206H$  (6)\nwhere \u0394H = $\\sum_{j=1}^{n} \u2206h_j$. We can observe that the approximated energy here only depends on the elevation difference between the end points of the path, that is, \u0394H. Hence, we refer to this term as the path-independent component of the energy cost or $cost_{pi}$, which can be computed for any pair of locations as a deterministic cost. Based on this important observation, we can remove the main part of possibly negative"}, {"title": "B. Model-independent Reduced Cost", "content": "When detailed energy data is unavailable to derive an energy model in the form of Eq. (2), the shifting approach of [19] can still be applied to reweight the graph. This shifting function requires O(E) time to compute an appropriate \u03b1-value. This may be prohibitive when the network changes dynamically (e.g. when the EV specification changes), which would require \u03b1 to be re-calculated. To eliminate this overhead, we borrow a basic law from physics and present our model-independent reduced cost as $cost \u2013 cost_{pot}$ with $cost_{pot}$ denoting the change in the gravitational potential energy obtained by its classic definition in physics as\n$cost_{pot} = (M+m)g\u2206H$  (7)\nwhere M + m is the total mass of the EV (vehicle kerb mass M and additional load m), g is the acceleration of gravity (9.8 N/kg) and \u0394\u0397 represents the height difference. Therefore, this reduced cost can be utilised in online settings, as its required parameters (elevation data and vehicle mass) are generally known or can be reasonably estimated. Since the energy requirement for each link is calculated independently, we can assert that using the potential cost function described above always results in non-negative reduced energy costs (see Appendix A for the proof).\nThe potential function $cost_{pot}$ helps us to map energy costs to non-negative values without any overhead. Note that this shifting function can also be used with basic (less accurate) models where the energy cost function is established based on the aggregation of penitential and kinetic energies (ignoring driving patterns), such as models in [10] and [22]. In this case, the reduced cost only contains the kinetic part of the energy, which is assumed to be non-negative."}, {"title": "C. Energy-optimal Search with Reduced Costs", "content": "We now explain how our reduced cost functions can be incorporated into classic pathfinding algorithms, such as Dijkstra's algorithm, to identify energy-efficient paths. We present a pseudocode of our energy-optimal Dijkstra search with energy constraints in Algorithm 1. The algorithm starts with initialising the priority queue Q, the parent array P, and the arrays C and E, which keep track of the smallest reduced cost and available energy at each vertex, respectively. Given $E_{init}$ as the initial energy, the algorithm then sets the reduced cost and energy at the origin location and inserts $u_0$ into the queue to commence the search. In every iteration of the search, the algorithm extracts from Q a vertex with the smallest C-value among all vertices present in the queue (line 6). Let this extracted vertex be u. If u is the destination location $u_d$ (line 7), we can terminate the search and return $E_{init} \u2013 E(u_d)$ as the energy cost of the optimum path. Otherwise, the search use u's successors to extend the partial path. Let v be one such successor vertex. During this extension, the algorithm checks $cost_e$ (energy requirement of the edge) against the E(u) (available energy at u) to make sure the EV has enough energy to reach the adjacent vertex (line 10), or to check whether the link's energy needs to be adjusted (line 11). The energy adjustment is only done when the EV's battery cannot fully capture the recuperated energy in some negative slopes. Then, the (always non-negative) reduced energy $cost_{red}$ is calculated via Eq. (7) or Eq. (6) depending on the reweighting approach (line 12). Finally, if extending the current partial path via link (u, v) reaches v with a reduced cost smaller than C(v), we can update this reduced cost and insert v into the queue for further extensions (if it is not already present in Q). Note that, since traversing the link (u,v) with E(u) is feasible, the available energy at the successor vertex v will be E(u) \u2013 coste."}, {"title": "V. EXPERIMENTAL ANALYSIS", "content": "This section studies the performance of our energy-optimal path planner with the proposed online reduced costs, and also investigates the impact of vehicle dynamics on the quality of energy-optimal paths planned for EVs. To evaluate our contributions within a real-world transport context, we consider road networks of six different cities with various road categories: Munich, Milan, Calgary, Canberra, Vancouver, and San Francisco. The map data was sourced from OpenStreetMap contributors 3 using the Python package OSMnx [23], focusing on the central area of each city. We enriched each map with elevation and real travel time data using the Bing, Mapbox and Here APIs4. Average gradients are given in Table IV while network sizes can be found in Table III.\nEV simulator: This research utilises the powertrain simulator ADVISOR (ADvance VehIcle SimulatOR)5 to generate realistic energy data. ADVISOR uses the MATLAB engine to simulate the vehicle's powertrain using both backward (solving dynamic equations from the driving cycle to the energy source) and forward (analysing energy flow from the energy source to wheels) simulations, based on mathematical models of all components of the EV and detailed dynamic equations such as Eq. (1). Vehicle models in ADVISOR represent actual interactions between components based on input/output relationships. Blocks in ADVISOR include, but are not limited to, equations in vehicle dynamics, system efficiencies, thermal properties and extra features such as auxiliary electricity loads [24]. Therefore, it provides more accurate estimates on EVs' energy efficiency under realistic scenarios, such as driving a non-empty vehicle with the stop-and-go pattern on road segments with a positive/negative slope.\nFigure 4 shows ADVISOR's high-level block diagram for EVs including the main components in the EV powertrain. The backward simulation (left-right arrows \u2192) calculates the required energy to meet the given speed in the driving cycle, while the power delivered to the wheels is measured through the forward simulation (right-left arrows \u2190) which is more realistic when the speed is continuously changing in different traffic conditions. More accurately, the forward simulation is a response to the backward simulation and calculates the actual amount of energy the EV's battery can supply during the provided driving cycle.\nSystem models and selected EVs: We now explain how advanced engineering simulations with realistic driving can be utilised to extract accurate models in the generic form of Eq. (2). We first used the driving patterns of the WLTP cycle to generate energy efficiency data under different driving conditions (varying load and gradient) for three selected EVs: the Nissan Leaf (one of the best-selling EVs [25]), the Peugeot iOn (used in the literature, [5], [16]) and the General Motors EVI, a generic EV model predefined in our simulator. For each vehicle and driving pattern, we then applied the standard polynomial regression technique to learn an energy model in the form of Eq. (2) using the synthesised energy data. We obtained high precision in all the models (R2 = 0.99), and the coefficients of higher orders were found nearly zero. Table II presents the coefficients of the energy models learned for the selected EVs of this study under the WLTP's speed profiles.\nGraph energy costs: Following [5], we carefully match the realistic (average) speed of every link in our road graph with one of the driving patterns in the WLTP cycle to later select a set of coefficients that best describes the energy consumption profile of our selected EV for that link. To this end, we first retrieve the average speed of the links through several online sources. Then, we compare each link's speed with the average speed of every driving pattern and choose the closest pattern"}, {"title": "A. Parametric Comparison of Approaches", "content": "Table II provides the practical range of the parameters for each pathfinding technique described in this article, including edge shifting using Johnson's algorithm $\u00b5_h$, shifting with potential energy $cost_{pot}$ and shifting with path-independent energy $cost_{pi}$. The coefficients associated with $cost_{pot}$ and $cost_{pi}$ are vehicle-specific and fixed among networks, but the bounds on the coefficient \u03b1 are calculated based on the energy requirements in road networks and vary in each graph. As an example, the range of \u03b1 in Table II has been calculated for the given EVs operating in Calgary without any passenger or extra load. A quick look over the values in this table shows that, for every vehicle type, the coefficients Mg and b\u2081 are within the bounds of \u03b1. Therefore, our reduced cost functions would not incur any kind of energy error. We will further investigate this in detail for different maps with varying loads."}, {"title": "B. Algorithmic Performance", "content": "Our first set of experiments evaluates the impacts of the presented reduced cost functions on the performance of energy-optimum pathfinding. For this experiment, our energy coefficients are characteristic for the Nissan Leaf (with details shown in Table I). We assume an initial battery SoC of 70% and with three on-board passengers6. All the energy weights are obtained using our realistic energy model in Eq. (2) and we run all the algorithms on the same graph.\nWe compare our online reduced-cost approaches, which use Dijkstra's algorithm, with the Bellman-Ford and Johnson (edge shifting with potential functions) algorithms. For the case of shifting with \u00b5h, we set \u03b1 to be the average of its lower and upper bounds. All algorithms were implemented in Python 3.6 using the NetworkX 2.3 package [26]. Timings are based on the average of five individual runs reported in seconds, running on a single core of an Intel Core i7-6700 with 3.4GHz and 16GB of RAM. Table III presents the network sizes and results for around 1,000 random (origin, destination) pairs as point-to-point trips using the Nissan Leaf. The results of the extended experiments for the other EVs of this study with different number of passengers can be found in Appendix B.\nTable III gives Bellman-Ford times as a baseline. This table reports the values of parameters used in each algorithm and the runtime and pre-processing time (in seconds) separately for each algorithm. Moreover, all of the queries were solved to optimality, and we verified that all algorithms found identical solutions. Table III also shows the lower and upper bounds on the coefficient \u03b1 in all instances. Since the range of the graph-specific coefficient \u03b1 in every road network of the experiment fully covers our vehicle-specific coefficients for both $cost_{pi}$ and $cost_{pot}$ functions, i.e., we have (m + M)g \u2208 [\u03b1,\u0101] and (m\u0101 + b) \u2208 [a,a], we can ensure that there is no error associated with our reduced costs and thus the shifting process.\nAccording to the results in Table III, the reweighting-based algorithms can significantly improve the overall run time compared to Bellman-Ford. We can see that edge sifting with \u00b5h offers smaller pre-processing times to compute potentials compared to the traditional approach in the Johnson's technique. Meanwhile, our implementation of Dijkstra's algorithm using $cost_{pi}$ and $cost_{pot}$ eliminates the preprocessing phase of Johnson's and presents slightly faster execution times. It is therefore particularly useful in situations where graphs need to be updated frequently (e.g., due to changing traffic conditions)."}, {"title": "C. Energy-Optimum Path Analysis", "content": "Our next set of experiments investigates how vehicle dynamics affects energy-optimum paths. Here, we investigate the importance of vehicle dynamics in energy-efficient pathfinding for EVs by comparing the planned paths of different energy models. For the experimental comparison, we used three different energy models, which take vehicle dynamics into account to varying degrees. The base case in this experiment is an energy model that uses road gradients and the EV average energy efficiency, i.e., $costs = b_2s^2 + b_1s + b_0$. The second case adds mass as an extra parameter via $cost_m = (ma_2 + b_2)s^2 + (ma_1 + b_1)s + (ma_0 + b_0)$. The third case incorporates driving patterns only as $cost_a = b_2s^2 + b_1s + b_0$ with coefficients now being link specific. The energy coefficients in these two cases are average among the patterns. Finally, the last case considers our detailed model with both mass and driving patterns, as in Eq. (2). The EV-based implementation of the Bellman-Ford algorithm was used to find energy-optimum paths for the same graphs and node pairs as in our first experiment.\nTable IV shows the result of incorporating vehicle dynamics into energy-optimal pathfinding. Extra mass (vehicle load) and driving pattern (speed profiles) are the parameters for which we study the length and the required energy of the resulting optimal paths. Column \u0394p shows the percentage of paths that are different compared to when neither vehicle load nor speed profiles of roads is taken into account. Similarly, \u0394l is the difference in path length, \u0394cost is the difference in energy consumption and $\u0394cost_{ef}$ denotes the difference in the energy efficiency compared to the base case (costs).\nThe results indicate that both mass and driving pattern can significantly affect energy estimates. Even when taking mass or driving pattern into account, planned routes can be up to 66% different. When adding both mass and driving patterns, the differences become larger. Interestingly, the average path length is not affected very much by solely considering vehicle load. When considering both parameters, the path length can be up to 355m longer on average (Calgary map), but for individual paths, the difference can be substantial. Figure 5 depicts two energy-optimum paths for a single (origin, destination) pair in each city of this experiment, where the energy-optimum path using the more accurate energy model (right) is significantly longer than the one using the basic model (left). When considering changes in energy requirements, we find maximum differences of up to 469Wh compared to the base case (Milan map). Looking at the average energy consumption values, we observe that the base model underestimates energy requirements by up to 316Wh on average (Munich map). Neglecting mass and driving patterns can also affect the estimated energy efficiency, where it can be miscalculated by up to 6.9Wh/100m (San Francisco map). This amount"}]}