{"title": "Learning Aggregation Rules in Participatory Budgeting: A Data-Driven Approach", "authors": ["Roy Fairstein", "Dan Vilenchik", "Kobi Gal"], "abstract": "Participatory Budgeting (PB) offers a democratic process\nfor communities to allocate public funds across various projects through\nvoting. In practice, PB organizers face challenges in selecting aggregation\nrules either because they are not familiar with the literature and the ex-\nact details of every existing rule or because no existing rule echoes their\nexpectations. This paper presents a novel data-driven approach utilizing\nmachine learning to address this challenge. By training neural networks\non PB instances, our approach learns aggregation rules that balance so-\ncial welfare, representation, and other societal beneficial goals. It is able\nto generalize from small-scale synthetic PB examples to large, real-world\nPB instances. It is able to learn existing aggregation rules but also gener-\nate new rules that adapt to diverse objectives, providing a more nuanced,\ncompromise-driven solution for PB processes. The effectiveness of our\napproach is demonstrated through extensive experiments with synthetic\nand real-world PB data, and can expand the use and deployment of PB\nsolutions.", "sections": [{"title": "Introduction", "content": "Participatory budgeting (PB) is a democratic process in which participants de-\ncide how public funds should be allocated to different projects [2]. In PB, partic-\nipants vote on the projects they would like to see carried out, and an aggregation\nmechanism selects which projects to fund under known budget constraints. PB\nwas first implemented in Porto Alegre, Brazil [4], and its use has spread rapidly\nto locations such as Germany [37], Chicago [29], New York [31] and many more.\nWhile PB is most commonly associated with municipal budget allocations,\nit can be applied to a wide variety of contexts. For example, a company's human\nresources department might use PB to organize employee activities within a\nlimited budget; a group of friends could use PB to decide which movies to watch\nor which dishes to order from takeout; or a community center might need to\nallocate funds to offer different activities. In each case, the desired outcome may\ndiffer: the group of friends may prioritize choosing movies that match everyone's\npreferences, the community center may focus on offering activities that ensure\nbroad participation, and the HR team may aim to strike a balance between\npopular choices and providing something for everyone. This \"desired outcome\""}, {"title": "Related Work", "content": "Within the PB literature, our results relate to work on aggregating voters' pref-\nerences. Prior work focused on algorithms for aggregating voters' preferences to\nguarantee some desirable social criteria. Those guarantees can be divided into\nthree main categories: social welfare and representation, fairness and proportion-\nality, and a variety of axioms.\nConcerning social welfare and representation (which are our primary mea-\nsures of evaluation), previous works studied the bounds of existing aggregation\nmethods and how to optimize these objectives. Fairstein et al. [11] examined\nthe trade-off between social welfare and representation of several aggregation\nmethods, while Jain et al. [15] focused on the complexity of optimizing social\nwelfare. Those metrics will also help us in this work for evaluation.\nAnother approach for aggregation rule evaluation consists of axioms such as\nguaranteeing that a project is funded by the rule even if lowering its cost [32]. In\naddition, much attention was given to the notion of proportionality, guaranteeing\nthat a big group of voters who vote similarly should be guaranteed some minimal\nwelfare. For more detail on evaluation and PB in general, we refer the reader to\nthe comprehensive survey by Rey and Maly [25].\nWhile there is a rich literature on analyzing existing aggregation rules, rela-\ntively little work has been dedicated to the creation of new aggregation rules. A\nrelatively new aggregation method that received a lot of attention is the Method\nof Equal Shares [22] (ES), which is known to guarantee proportional outcomes\nwhile running in polynomial time. Many works that suggest new rules are vari-\nations of ES that are applied to different PB settings, for example, when there\nis a mix of divisible and indivisible projects [20], or when there exists substitute\nprojects [10]. Our approach directly addresses the challenge of creating new PB\naggregation rules by learning rules from data.\nOn the connection between voting rules and ML, Procaccia et al. [24] study\nthe PAC-learnability of single-winner voting rules, and Caragiannis and Fehrs\n[5] study the PAC-learnability in the multi-winner settings. These works demon-\nstrated that learning aggregation rules from examples is computationally hard.\nThey show that while learning is feasible in the PAC learning framework, it is\nfeasible in the worst case only in computationally inefficient ways.\nRecent work has shown the potential to learn aggregation rules using machine\nlearning, particularly in the single-winner domain, where voters rank candidates\nor projects, and only one is selected without budget constraints. For instance,\nDoucette et al. [7] predicts outcomes from partial preferences, Kujawska et al.\n[18] mimics various voting rules, and Firebanks-Quevedo [13] creates a framework\nfor planners to define voting rules based on constraints. However, these methods\nrely on fixed-size inputs, requiring separate networks for different problem sizes.\nTo address this, Anil and Bao [1] used flexible architectures like Deep-sets [36],\nGraph Neural Networks [27; 35], and Set Transformers [19], enabling training\non small problems and generalizing to larger ones.\nWe extend the Set Transformer architecture of Anil and Bao [1] to the partici-\npatory budgeting domain, which differs from the single-winner domain in three"}, {"title": "Motivation", "content": "In this paper, we address the challenge of developing new aggregation rules\ntailored to specific objectives. A key consideration is enabling individuals to\nreceive a personalized aggregation rule without requiring a deep understanding\nof the theoretical aspects of PB. We use an example from the work by Faliszewski\net al. [12] to demonstrate the limitations of that approach and the solution we\noffer.\nFaliszewski et al. [12] focus on the Euclidean domain where voters and\nprojects are objects in a d-dimensional vector space. Voters' preferences are usu-\nally a decreasing function of the distance between voters and projects. Motivated\nby an assumption that more people live in the city center, MW designers can\ndefine an optimal distribution whose support lies entirely on the city's center.\nTo realize this plan, the aggregation rule should choose projects as close to the\ncenter as possible. Faliszewski et al. [12] do this by manually crafting a scoring\nrule, using an optimization program to compute the optimal scoring weights that\nminimize the objective.\nAnother example is a target distribution that for some pre-defined fixed $x \\in$\nR, splits the support evenly between the points x and -x in the 1-dimensional\nEuclidean domain. The objective is still simple enough, requiring to minimize\nthe distance from those two points.\nNow consider a 2-dimensional geographical area. In this case, it becomes\nunclear how to extend the \"twin peaks\" distribution to 2D. Should it consists of\nfour points at x and -x in each dimension? Or should be represented by a circle\nwith a radius of x. At any case, the 1D scoring rule does not generalize easily to\n2D, and coming up with a new scoring rule is challenging.\nFinally, let us mention an additional complication when using the Euclidean\ndomain in the PB domain, where project costs are introduced. Going back to the\ncity-center rule, a single expensive project might be preferred over many cheaper\nprojects because it is slightly closer to the center. Thus the ranking rule should\nnow take into account not only distances but also costs, making the entire task\neven more unfeasible."}, {"title": "Methodology", "content": "In this section we show how the downsides of the hand-crafted approach can\nbe ameliorated using the ML approach. The ML approach contains two key"}, {"title": "Concrete target objectives", "content": "Three popular aggregation rules from the literature\nwill be used in this paper: Approval Voting (AV), Chamberlin-Courant (CC)\n[6], and Proportional Approval Voting (PAV) [21]. AV selects a feasible bundle\n$B \\subset P$ that maximizes the social welfare (SW). The SW score of an approval\nprofile A with respect to a bundle B is $SW(A, B) = \\sum_{i \\in V} |A_i \\cap B|$.\nCC selects a feasible bundle $B \\subset P$ that maximizes the representation score\nwhere the representation score of an approval profile A with respect to a bundle\nB is $REP(A, B) = \\sum_{i \\in V} min(1, |A_i \\cap B|)$\nFinally, PAV selects a feasible bundle $B \\subset P$ that maximizes the following\nscore:\n$SC_{PAV}(A, B) = \\sum_{i \\in V} \\sum_{k=1}^{|A \\cap B|} \\frac{1}{k}$\nThe PAV score compromises between social welfare and representation by\ngradually decreasing the added value that each voter gets for each additional\nfunded project.\nTo illustrate these objectives think of a simple example with three projects\n{p1,p2,p3} each cost 1 dollar, with a budget of 2 dollars. There are three voters\nsuch that the first approves all three projects, the second {p1,p2}, and the third\nonly p1. If we fund {p2,p3}, we will have social welfare of 2 + 1 = 3 (two want\np2 and only one wants p3) and representation of 1 + 1 = 2 as the last voter does\nnot get any of his approved projects."}, {"title": "Learning method", "content": "While using scoring rules to learn new rules has the advantage\nof simplicity, it is limited to learning more complex rules. For this reason, we\nwould like to use neural networks (NN), which are known for their ability to\nsolve complex tasks."}, {"title": "Set Transformers (ST) Architecture", "content": "The ST network was suggested as a permutation-invariant network, i.e., the\nnetwork outputs the same no matter the input order. This property is important\nfor our scenario as we would like the outcome to be independent of the order\nof the voters and projects. For this purpose, the network combines attention\nblocks and linear layers to create an encoder and decoder pair; see Figure 1a.\nThe encoder comprises a chain of self-attention blocks (SAB), each followed by\nresidual feed-forward layers (rFF).\nThe decoder begins with a \"Pooling by Multihead Attention\" (PMA) [19],\nfollowed by SAB and an rFF. The PMA has a similar purpose as any pooling\nlayer - dimension reduction. This is done by using the attention layer, where we\nalso learn the queries in addition to the regular weights. As the dimension of the\noutcome is defined according to the dimension of the queries, we can control the\noutput dimension."}, {"title": "Training the NN", "content": "We propose two modes of training the NN to learn an aggregation rule R: implicit\nand explicit. In the implicit mode, pairs (X, Bopt) are fed to the NN (X is a PB\ninstance, and Bopt is an optimal bundle according to the rule R). The network\ncomputes a bundle B given X at the input layer (in the manner described at"}, {"title": "Datasets", "content": "In this section, we describe the datasets that were used to train and test the\nnetworks ST and ST+PMA. The training datasets consist of synthetically gen-\nerated PB instances, similar to datasets used in the literature as benchmarks\nfor PB and multi-winner settings. The test datasets includes in addition to syn-\nthetically generated datasets, real-world PB instances. \nTraining Datasets In what follows we use the notation $X \\sim [a, b]$ to refer to a\nrandom variable X that is uniformly distributed over the interval [a, b].\nEuclidean (EUC) [9; 28; 8; 32]. This dataset consists of PB instances\ngenerated according to the 2-dimensional Euclidean model. Each instance is\ngenerated by sampling locations for each of the voters and projects in the [0, 1] $\\times$\n[0,1] square; then, each voter v approves k projects that are closest to his\nlocation. There are various ways to randomize the number of voters, projects, and\nthe ku's. For the sake of fluent reading, we put all the details in Appendix 1.A.\nOne vs. Many (OVM) [26] The instances in this set test the capacity of\nthe network to decide between two cases, a single project vs multiple projects.\nThe optimal choice depends on the aggregation rules and the parameters that\nwe'll describe now. Each PB instance consists of p$\\in$ [2,5] projects, all with the\nsame cost and together consume the entire budget; each project is approved by"}, {"title": "Dealing with Ties", "content": "One aspect widely recognized in the field of PB and voting, in general, pertains\nto the occurrence of ties (the existence of multiple optimal solutions) [16; 34"}]}