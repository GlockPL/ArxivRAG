{"title": "MalLight: Influence-Aware Coordinated Traffic Signal Control for Traffic Signal Malfunctions", "authors": ["Qinchen Yang", "Zejun Xie", "Hua Wei", "Desheng Zhang", "Yu Yang"], "abstract": "Urban traffic is subject to disruptions that cause extended waiting time and safety issues at signalized intersections. While numerous studies have addressed the issue of intelligent traffic systems in the context of various disturbances, traffic signal malfunction, a common real-world occurrence with significant repercussions, has received comparatively limited attention. The primary objective of this research is to mitigate the adverse effects of traffic signal malfunction, such as traffic congestion and collision, by optimizing the control of neighboring functioning signals. To achieve this goal, this paper presents a novel traffic signal control framework (MalLight), which leverages an Influence-aware State Aggregation Module (ISAM) and an Influence-aware Reward Aggregation Module (IRAM) to achieve coordinated control of surrounding traffic signals. To the best of our knowledge, this study pioneers the application of a Reinforcement Learning(RL)-based approach to address the challenges posed by traffic signal malfunction. Empirical investigations conducted on real-world datasets substantiate the superior performance of our proposed methodology over conventional and deep learning-based alternatives in the presence of signal malfunction, with reduction of throughput alleviated by as much as 48.6%.", "sections": [{"title": "1 Introduction", "content": "Traffic signal malfunction refers to a situation when a traffic signal, also known as a traffic light, fails to function properly. One of the typical situations is that traffic lights are blackout caused by various reasons, such as flood [37, 56], hurricane [48], equipment aging [15], or human-made events, such as cyber-attacks [25, 36], traffic accidents and mismanagement [14]. When the traffic signal malfunction happens, it causes confusion and chaos on the road, leading to increased risk of accidents, traffic delay,s and traffic congestion. More importantly, these malfunctions occur more frequently than one might expect. For example, as shown in Figure 2, citizens from the City of Newark in New Jersey reported 94 complaints about traffic signal malfunctions at 67 different intersections between August 2020 and May 2022 on the Newark Connect platform [1] (i.e., a 311-like platform for citizens to report city issues), leading to three issues per month on average. Consequently, it is necessary to find a way that can mitigate the negative impacts (e.g., congestion) when traffic signal malfunctions occur."}, {"title": "2 Preliminaries", "content": "In this section, we introduce the preliminaries of the traffic signal control problem [62, 63] and extend it to our scenario considering traffic signal malfunction. In our setting, each intersection is controlled by one agent, which has its own local observations of its intersection as the state. An agent controls the traffic signal in its own intersection by deciding the signal phase at the next time interval to optimize the local traffic, such as maximizing the throughput. We use centralized learning with a decentralized execution manner to reduce the computational complexity of traditional centralized methods [64]. Specifically, we formulate our problem as a Markov Decision Process(MDP) with the following components < S, O, M, A, r, \u03c0, \u03b3 >.\n\u2022 Set of malfunctioning signals M: M is a set of intersections with malfunctioning traffic signals.\n\u2022 State space S and observation space O: Assuming there are N intersections in our road network and N corresponding agents that control the traffic signals located at the intersections. All possible traffic states from N intersections form the state space S and each agent has access to partial state s\u2208S, which forms the agent's own observation o\u2208O. The state s of each intersection includes current phase p (one of the 8 total phases illustrated in Figure 4) and the number of vehicles in each lane (i.e., a 12-element vector with each element representing a number of vehicles in lanes illustrated in Figure 3). In MalLight, observations from all intersections in the road network are fed into a state module, which outputs a global state. The global state is combined with local state s to form observation o for each agent.\n\u2022 Action space A: In the traffic signal control task, the ith agent generates an action a as the signal phase at time point t from its action space Ai for the following At period. Eight signal phases"}, {"title": "3 Method", "content": "We introduce MalLight, a RL-based traffic signal control model built upon a general RL framework, incorporating new modules: an Influence-aware State Aggregation Module (ISAM) and an Influence-aware Reward Aggregation Module (IRAM). These modules enhance the model's resistance to signal malfunctions. In the following sections, we first introduce the overview of our model and then describe the detailed design of ISAM and IRAM."}, {"title": "3.1 Overview", "content": "To alleviate congestion in malfunctioning intersections through coordinated management with neighboring intersections (intersections can be multi-hop away), each agent should possess two key abilities. Firstly, each agent should have the ability to \"care\" about malfunctioning intersections. In previous works [12, 62, 63, 71], the reward for each RL agent was solely dependent on its own traffic conditions, which meant that each agent would only benefit from its own actions. In our setting, intercepting some vehicles at a well-functioning intersection to prevent excessive traffic from entering malfunctioning intersections would lead to a reduction in the"}, {"title": "3.2 Influence-aware State Aggregation Module", "content": "The Influence-aware State Aggregation Module (ISAM) is designed to ensure that each agent's observation includes global states from malfunctioning intersections while taking into account its influence on these malfunctioning intersections. Higher influence corresponds to greater weight assigned to other intersections' states, and vice versa. ISAM takes road network static information and intersection-specific local states as input. For each agent, it generates an aggregated state that encompasses observations from malfunctioning intersections and their corresponding local states. This state information is subsequently fed into the RL model and serves as the agent's final environmental observation.\nInspired by the graph diffusion convolutional recurrent neural network (DCRNN) [38], which has achieved promising results in automatically modeling complex spatial dependencies on road networks, we design masked diffusion convolution and adapt it to multi-agent scheme, to capture influence among intersections, particularly the influence from well-functioning intersections to malfunctioning intersections. In the diffusion convolution operation, an influence vector is extracted for each agent. These vectors are used as weights to perform a weighted sum of states from other intersections. Additionally, before the weighted sum is calculated, a Malfunction Mask is applied to filter out data from well-functioning intersections. This helps agents at well-functioning intersections focus on only themselves and the malfunctioning intersections. Details of ISAM are described below.\n\u2022 Diffusion Process. Diffusion convolution [38] is a variation of the diffusion process [59] that incorporates trainable parameters into transition matrix of each layer, offering enhanced representativeness and flexibility in modeling influence. According to [59], the stationary distribution of the diffusion process can be expressed as a weighted combination of random walks on the graph:\n$P = \\sum_{k=1}^{K} \\alpha(1 \u2212 a)*(D_{O}^{-1}W)^{k}$,\n, where k represents the diffusion step, W is the edge weight matrix, $D_{O}$ is the out-degree diagonal matrix of graph, a \u2208 [0, 1] denotes the restart probability, and $D_{O}^{-1}W$ serves as the state transition matrix. This Markov process converges to the distribution P\u2208 $\\mathbb{R}^{N\u00d7N}$, where each i-th row Pi, : represents the likelihood of diffusion from node $v_{i}$ \u2208 V, where V represents the set of nodes in the graph, and N denotes the total number of nodes.\nThe edge weight matrix W is constructed based on the road distance between each pair of intersections. For normalization, we use a thresholded Gaussian kernel [53], defined as follows:\n$W_{i,j} = exp(-\\frac{dist(i,j)}{\\sigma^2})$\nIn this formula, $W_{i,j}$ represents the edge weight between node $v_{i}$ and node $v_{j}$, o is the deviation of distances, and dist($v_{i}, v_{j}$) is 0 if nodes $v_{i}$ and $v_{j}$ are not connected by a road. Otherwise, it represents the distance between $v_{i}$ and $v_{j}$.\n\u2022 Masked Diffusion Convolution. Building upon the diffusion process described above, diffusion convolution introduces a trainable filter for each diffusion step k. Additionally, to ensure that agents do not concentrate their efforts on other functioning intersections, which do not require assistance, we apply the Malfunction Mask. The Malfunction Mask vector, denoted as Mask \u2208 {0, 1}$^{N}$, where N represents the number of intersections in the road network. The element in the Malfunction Mask is set to 1 if the corresponding intersection is experiencing a malfunction, and 0 otherwise. The formulation of masked diffusion convolution is as follows:\n$S_{P} = \\sum_{k=1}^{K}(\\theta_{k} (D_{O}^{-1}W)^{k}) \\copyright Mask \\odot S_{i,p}, p \\epsilon \\{1, 2, 3, ..., P\\}$\nHere, $\\odot$ indicates Hadamard product, S \u2208 $\\mathbb{R}^{N\u00d7P}$ represents the matrix of features in the graph (each agent's local state), P is the length of input features, p\u2208 [1, P] is an index of an element in input feature, \u03b8k represents the trainable filter for diffusion step k, and K is the number of diffusion steps. The masked diffusion convolution process involves random walks on the road network for each element of the input features. S. indicates the information i-th agent needs considering its influence to other nodes(intersections). Masked diffusion convolution provides a more explainable method for making the model aware of the influence.\n\u2022 State Aggregation. This step combines the local state of the target intersection with the global state S' originating from malfunctioning intersections. For the i-th agent operating at the i-th intersection, its corresponding global state is $S_{i,:}$ \u2208 $\\mathbb{R}^P$ and its local state is $S_{i,:}$ \u2208 $\\mathbb{R}^P$. Finally, for the i-th agent, we obtain the state as:\n$S = S_{i,:}' + S_{i,:}, i \\epsilon \\{1, 2, 3, ..., N\\}$"}, {"title": "3.3 Influence-aware Reward Aggregation Module", "content": "The Influence-aware Reward Aggregation Module (IRAM) is designed to ensure that each agent \"cares\" about the benefits of malfunctioning intersections and is \"willing\" to assist these intersections. IRAM takes road network static information and intersection rewards as input, and for each agent, generate aggregated reward containing rewards of malfunctioning intersections and corresponding local rewards. The reward information then serve as direction to optimize the RL model.\nReward Shaping [46] is a technique, where additional rewards are utilized to represent domain knowledge and guide the training of RL models using expert knowledge. In our context, we aggregate the rewards from malfunctioning intersections to each working agent, with different weights, representing influences between malfunctioning and working agents. The additional reward guides working agents in earning benefits for malfunctioning intersections. We employ a diffusion process without trainable parameters to perform a weighted sum of rewards. The formulation is as follows:\n$R' = \\sum_{k=1}^{K}(D_{O}^{-1}W)^{k} (D_{O}^{-1}W)^{k} \\odot Mask R$\nwhere R\u2208 $\\mathbb{R}^{N}$ is the vector of rewards of all intersections, k is the diffusion step, $D_{O}^{-1}W$ is the state transition matrix. Similar to the state aggregation method described above, for i-th agent, we add the global reward $R_{i}'$ and the local reward Ri to obtain the final reward, denoted as R':\n$R' = R_{i} + R_{i}, i \\epsilon \\{1, 2, 3, ..., N\\}$"}, {"title": "3.4 Training", "content": "MalLight is updated using the Bellman Equation[22]:\n$Q(S_{t}, a) = R'_{t} + \\gamma max Q(S_{t+1}, a_{t+1})$\nIn this equation, $R'_{t}$ represents the reward that i-th agent can obtain by taking action a based on the state St, at decision time t. y is discount factor. We employ the Mean Squared Error (MSE) as the loss function to measure the disparity between the current action-value estimation and the desired action-value estimation provided by the Bellman Equation. The RL model is optimized using the RMSprop[27] algorithm."}, {"title": "4 Experiments", "content": "In this section, we conduct experiments to answer the following research questions:\n\u2022 RQ1: Does MalLight outperform other SoTA methods on the malfunctioning signal scenario?\n\u2022 RQ2: Does MalLight perform well on the normal traffic signal control scenario?"}, {"title": "4.1 Experiment Setting", "content": "Environment setting: The experiments were conducted on a server with two Intel Xeon E5-2650 processors, 252GB of main memory, and two GeForce GTX 2080ti GPUs. We conducted experiments based on the LibSignal framework [43], which is a traffic signal simulation toolkit developed on top of simulator engines SUMO [39] and CityFlow [16, 70]. We used SUMO for our experiments due to its flexibility in simulating intersection malfunction. The SUMO settings are provided in Table 1. We generated vehicle trajectories by running the Dijkstra algorithm on each origin-destination pair in our datasets (introduced later). After feeding the traffic flow data into the simulator, each vehicle moves toward its destination following the predefined trajectory.\nTo better simulate traffic congestion and potential traffic accidents, we employ the FoeIgnore strategy [23]. This mechanism enables each vehicle to ignore vehicles already within the intersection and potentially collide with them based on a predetermined probability. By simulating collisions at intersections, it mimics the congestion and chaos resulting from signal malfunctions.\nModel Setting: For the traffic control module, which makes decisions based on local and global information, we use a deep Q-learning model with a Multi-Layer Perceptron (MLP) model as the backbone. Details of MLP are shown in Table 2. The training algorithm is described in Section 3.4. Our model is trained for 200 episodes with a replay buffer size of 5000. For each episode, we run SUMO over the training dataset, with the signal phase determined by the current model. The model is updated with 10 iterations over all MDP samples in a replay buffer at the end of each episode. The learning rate is set to 0.001. The diffusion step K is 10. Discount factor y is set to 0.95."}, {"title": "4.2 Datasets", "content": "We use two real-world and one synthetic traffic flow data in our experiments. The road networks for real-world datasets were imported from OpenStreetMap [3], as shown in Figure 6. The data statistics are listed in Table 3. The road network of the synthetic Grid4*4 dataset is the same as that of Hangzhou dataset, and the only difference between them is the traffic flow pattern. In datasets, a vehicle is described as (o, d, t), where o denotes the origin location, d denotes the destination location, t represents the departure time. Both origin (o) and destination (d) locations are within the road network.\n\u2022 Hangzhou Dataset [6]: This is a widely used real-world dataset in prior works [44, 63, 66]. We selected 16 intersections in the Gudang Sub-district of Hangzhou and the signal at one of these intersections is set to be malfunctioning. Vehicle information was collected from roadside surveillance cameras. Each record in the camera data includes time, camera ID, and vehicle details. The camera ID indicates the vehicle's location. Through the analysis of these records, we generated vehicle trajectories as they passed through the selected intersections.\n\u2022 New York Dataset [2]: This is also a well-known real-world dataset used in prior works [12, 44, 62, 63]. We take 49 intersections in the Upper East Side of Manhattan as a demonstration. In this setting, the traffic signals on four intersections are set to be malfunctioning. Vehicle information was generated using open-source taxi trip data [2]. This taxi trip data includes the geo-locations of the origin and destination for each trip. We initially mapped these geo-locations to the nearest intersections and then retained the trips that fell within the selected area. Because taxi trips can be seen as a sample from real-world trip distributions, we empirically scaled up the number of trips by 4.5 to consider the impacts of personal and commercial vehicles. We made the simulation traffic volume roughly aligned with the real-world traffic volume indicated by New York Traffic Data Viewer [5].\n\u2022 Grid4*4 Dataset: A synthetic dataset. The road network of Grid4*4 is the same as that of the Hangzhou dataset. We generate vehicles with a steady arrival rate and random origin and destination locations. Table 3 shows details of generated traffic flow.\nEach dataset comprises 2 hours of traffic flow data, of which we utilize 1 hour for training purposes and the remaining hour for testing."}, {"title": "4.3 Evaluation Metrics", "content": "Following existing studies [64], we mainly use throughput to evaluate the performance of different models for traffic signal control. In addition, we simulate the number of accidents to evaluate the impacts of our model on reducing accidental risk. The detailed descriptions are as follows:\n\u2022 Network Throughput: It represents the number of vehicles that have completed their trip in the road network during the one-hour testing period.\n\u2022 Intersection Throughput: It represents the (average) number of vehicles that pass through malfunctioning intersection(s) during the one-hour testing period. We introduced this intersection-level metric to better compare the performance of models on malfunctioning intersections.\n\u2022 Number of Accidents: It represents the number of traffic collisions simulated by SUMO in malfunctioning intersections. This is an additional metric. We do not calculate collisions at the road network level considering traffic collisions rarely occur in signalized intersections on SUMO."}, {"title": "4.4 Compared Methods", "content": "\u2022 FixedTime [34]: A policy with predefined fixed phase length and phase splits, which is commonly used in practice. The offset is randomly set in our experiments.\n\u2022 SOTL [15]: A rule-based method based on the request from current phase and competing phases.\n\u2022 MaxPressure [60]: A state-of-the-art (SoTA) optimization-based algorithm that minimizes pressure at each intersection. It reduces over-saturation by balancing queue lengths between each pair of neighboring intersections.\n\u2022 IDQN [65]: A deep RL method in which information is not shared among agents. Each intersection is controlled by one agent, and these agents do not share model parameters.\n\u2022 CoLight [63]: A deep RL method based on Graph Attention Network.\n\u2022 Advanced-CoLight [71]: A SOTA RL algorithm template that incorporates advanced traffic state (ATS) into the RL model. It uses CoLight as a backbone network.\n\u2022 Advanced-PressLight [71]: Similar to Advanced-CoLight, it uses PressLight [62] as the backbone network. PressLight is a deep RL method that coordinates traffic signals by minimizing the Pressure [60] at each intersection to maximize the throughput of the road network.\n\u2022 PRLight [26]: A SOTA RL method that integrates a dynamic graph representation module and a traffic prediction module to effectively control traffic signals and mitigate action hysteresis in real-time traffic management."}, {"title": "4.5 Experiment Result", "content": "4.5.1 Overall Performance. Our experimental results using Hangzhou dataset and New York dataset are shown in Table 4. By analyzing the results, we have the following findings:\n\u2022 RQ1: By analyzing the Reduction Ratio (RR) columns in Table 4, we can conclude that our model, MalLight, performs better in malfunctioning scenarios. When a malfunction occurs, the throughput reduction ratios, both at the intersection level and network level, are lower than those of other models. This suggests that our proposed state and reward modules genuinely enhance the resilience of the RL model to intersection malfunctions. By reducing the traffic demand in malfunctioning intersections, congestion is alleviated, and malfunctioning intersections experience a lower throughput reduction. Specifically, on Hangzhou dataset, compared with the second-best model Advanced-PressLight, our model alleviates throughput reduction by as much as 48.6%.\n\u2022 RQ2: By analyzing the throughput when no malfunction, we can conclude that MalLight performs well in normal (without malfunction) scenarios. The throughputs at both the intersection and network level when no malfunction are very close to the highest throughputs of other models. In addition, traditional Methods (FixedTime, SOTL, MaxPressure) perform poorly in both intersection and network levels. This is because traffic flow in our datasets is highly dynamic. These traditional methods rely heavily on human-defined assumptions of the environment, which may not be true under some circumstances.\n\u2022 An interesting finding is that the throughput reduction of the whole road network can be greatly higher than the throughput reduction of malfunctioning intersections, which means that congestion in malfunctioning intersections affects other well-functioning intersections. This occurs because when congestion arises in malfunctioning intersections, waiting vehicles can spill over into neighboring intersections, leading to congestion in those neighboring intersections and a subsequent reduction in their throughput. For example, in the case of SOTL under the New York dataset, the total throughput reduction of malfunctioning intersections is 348, while the throughput reduction for the entire road network is 578, which is 66.1% higher than that of the malfunctioning intersections."}, {"title": "4.5.2 Ablation Study", "content": "We consider several variations of MalLight:\n\u2022 MalLight-S: For state aggregation, instead of using diffusion convolution which contains trainable parameters, MalLight-S uses a diffusion process without any trainable parameter. This variant is to show the benefits of the flexible state aggregation in our model.\n\u2022 MalLight-R: We remove reward aggregation in MalLight-R. This means that each agent exclusively concentrates on its own reward and disregards the benefits of malfunctioning intersections.\n\u2022 MalLight-M We remove Malfunction Mask from MalLight. MalLight-M allows each agent to observe and care about the entire road network."}, {"title": "4.5.3 Accident Risk (RQ4)", "content": ": We analyze the relationship between accident risk and throughput reduction. The number of accidents serves as an additional metric for our model. When an accident occurs at an intersection, the victims can block following vehicles, leading to congestion. By examining the column labeled #Acc, we can observe that a higher level of Reduction Ratio typically corresponds to a higher number of accidents."}, {"title": "4.5.4 Weight Distribution from Diffusion Process (RQ5)", "content": "We select the upper-left intersection in Hangzhou road network as an example and calculate the influence weights generated by a diffusion process. Figure 7 demonstrates the influence (weights) from this node to other nodes at distances of 1 to 4 hops away. Because the road network is a bidirectional graph, with two edges connecting a pair of nodes and sharing the same initial weight (determined by road distance processed through a thresholded Gaussian kernel), this figure can also be viewed as representing the influence from this specific node to other nodes at varying distances (hops) in the graph. We can observe that as the distance (number of hops in the graph) increases, the influence between two nodes tends to decrease."}, {"title": "4.5.5 Parameter Sensitivity (RQ6)", "content": "We set different K values and observe the throughput reduction metric. The parameter K in the"}, {"title": "5 Discussion", "content": "Lessons Learned: We summarize key lessons learned from work:\n\u2022 We design our malfunction-resistant approach based on inter-intersection cooperation, as manifested in the design of state and reward modules. In contrast to alternative methods that neglect the advantageous potential of well-functioning intersections in alleviating the plight of malfunctioning counterparts, our approach stands out by affording a notably reduced reduction in throughput.\n\u2022 The integration of state and reward aggregation mechanisms, while taking into consideration the influences among agents, is of great importance in coordinating intersections and enhancing"}, {"title": "6 Related Work", "content": "6.1 Traffic Signal Malfunction\nThe time series of traffic signal malfunctions and the subsequent actions are as follows: malfunction occurs, detection, and response. Methods designed to address malfunctioning traffic signals can be categorized into two groups: detection and response methods.\nDetection methods: As stated in [13], malfunction detection typically relies on manual reports. Several resources [7] are available for reporting signal problems, including 24-hour hotlines and 911 calls. Manual detection, based on road user reports, often results in delays. Remote monitoring techniques may be employed in some areas when crew time and workload allow, but they are seldom effective due to the expensive human resources required. Furthermore, some automatic detection systems have been developed. Purba et al [49] develop a self-diagnosis system to detect traffic signal malfunction immediately. Soh et al [54] design a monitoring system based on fuzzy technology for malfunction detection. In our work, we assume malfunctioning signals are detected by existing work.\nResponse methods: The response to put malfunctioning traffic signals back to fully functional relies heavily on manual repair or replacement actions taken by contractors or authorities [13]. In addition to manual response, some automatic response methods are also designed. Malfunction flash [10] is designed to prevent safety issues from traffic signal malfunction. When an error is detected, the signal is automatically placed into flash mode as a safety precaution (if the signal is still accessible). However, malfunction flash only serves as a warning to road users. However, some decisions, such as whether to cross or wait, and whether to stop before crossing, are left to drivers, based on their observation of traffic conditions. Hunter et al [31] studied the driver behaviors under malfunction flash and revealed that malfunction flash cannot eliminate the safety issue of traffic signal malfunctions, not to mention other impacts such as congestion. In addition, our method is applicable in situations where the traffic signal is in a blackout, where the traffic signal cannot even work as a flashing warning to drivers.\nSome methods are designed for efficient human resources distribution. For example, Mathibela [42] designs a RUSBoost-based framework to predict the best distribution of human resources at critical intersections in the presence of malfunctioning traffic lights."}, {"title": "6.2 Traffic Signal Control", "content": "Traffic Signal Control is an important sub-domain of smart city [11, 21, 28-30, 67-69, 73]. Methods for controlling traffic signals can be divided into classic optimization-based methods [15, 55, 60] and RL-based methods [26, 62, 63, 65, 71]. Among these techniques, RL is most popular these years because of its ability to learn directly from complex conditions without assumptions about the environment [18, 32, 33, 40, 41, 52, 58, 61]. Thus, RL-based methods and Deep Learning based methods usually outperform classic optimization-based methods. However, current RL-based methods exhibit suboptimal performance under scenarios involving signal malfunctions due to the isolation of reward mechanisms. Specifically, each agent operates with a focus exclusively on optimizing the traffic flow at its own intersection, neglecting the potential benefits of adjacent intersections. While this approach is effective in standard conditions, where each intersection is regulated by a functioning agent, it falters in the event of a signal malfunction. In such cases, the affected intersection lacks the capability to leverage support from nearby intersections, causing increased congestion.\nRecently, a number of works have focused on traffic disruptions, such as missing data [44], incidents [23, 50], or weather changes [17, 19, 20]. Traffic signal malfunction is different from these disruptions in that: Firstly, these disruptions affect the RL model's input, while signal malfunction disables the RL agent from interacting with the environment, i.e. affects the output. Secondly, these disruptions test a single model's robustness, while signal malfunction tests the coordination ability of the whole system. Because a malfunctioning signal loses the ability to control traffic flow, it is naturally in need of help from other well-functioning signals, which makes cooperation an important factor in this context. In conclusion, traffic signal malfunction is a unique scenario that has not been considered in previous traffic disruption and robustness works."}, {"title": "7 Conclusion", "content": "In this paper, we study the problem of intelligent traffic signal control in the presence of traffic signal malfunction. We design MalLight, an traffic signal control model founded on RL principles. In the MalLight framework, we introduce two pioneering components, namely the Influence-aware State Aggregation Module and the Influence-aware Reward Aggregation Module, which are seamlessly integrated into the RL architecture. We subsequently conduct a comprehensive array of empirical investigations on two real-world datasets. Our empirical findings demonstrate that MalLight surpasses the performance of extant methods in both normal conditions and scenarios characterized by signal malfunctions. Notably, our results reveal a substantial improvement in the reduction of intersection throughput, with a remarkable mitigation rate of up to 48.6%."}]}