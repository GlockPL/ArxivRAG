[{"title": "VI. CONCLUSION AND OUTLOOK", "authors": ["Rohan Sinha", "Amine Elhafsi", "Christopher Agia", "Matthew Foutter", "Edward Schmerling", "Marco Pavone"], "abstract": "Foundation models, e.g., large language models (LLMs), trained on internet-scale data possess zero-shot generalization capabilities that make them a promising technology towards detecting and mitigating out-of-distribution failure modes of robotic systems. Fully realizing this promise, however, poses two challenges: (i) mitigating the considerable computational expense of these models such that they may be applied online, and (ii) incorporating their judgement regarding potential anomalies into a safe control framework. In this work, we present a two-stage reasoning framework: First is a fast binary anomaly classifier that analyzes observations in an LLM embedding space, which may trigger a slower fallback selection stage that utilizes the reasoning capabilities of generative LLMs. These stages correspond to branch points in a model predictive control strategy that maintains the joint feasibility of continuing along various fallback plans to account for the slow reasoner's latency as soon as an anomaly is detected, thus ensuring safety. We show that our fast anomaly classifier outperforms autoregressive reasoning with state-of-the-art GPT models, even when instantiated with relatively small language models. This enables our runtime monitor to improve the trustworthiness of dynamic robotic systems, such as quadrotors or autonomous vehicles, under resource and time constraints.", "sections": [{"title": "I. INTRODUCTION", "content": "Autonomous robotic systems are rapidly advancing in capabilities, seemingly on the cusp of widespread deployment in the real world. However, a persistent challenge is that the finite datasets used to develop these systems are unlikely to capture the limitless variety of the real world, leading to unexpected failure modes when conditions deviate from training data, or when the robot encounters rare situations that were not well-represented at design time. To mitigate the resulting safety implications, we require methods that can 1) assess the reliability of a machine learning (ML) enabled system at runtime and 2) judiciously enact safety-preserving interventions if necessary.\nIn this work, we investigate the utility of foundation models (FMs), specifically, large language models (LLMs), towards these two objectives by employing LLMs as runtime monitors tasked with 1) detecting anomalous conditions and 2) reasoning about the appropriate safety-preserving course of action. We do so because recent work has shown that the internet-scale pretraining data provides FMs with strong zero-shot reasoning capabilities, which has enabled robots to perform complex tasks [5], identify and correct failures [18], and reason about potential safety hazards in their surroundings [12] without explicit training to do so.\nHowever, the adoption of FMs in-the-loop of safety-critical robotic systems is immediately met with two challenges. First, the ever growing scale of FMs poses a major obstacle towards enabling real-time, reactive reasoning about unexpected safety-critical events, especially on agile robotic systems with limited compute. Hence, existing work that applies FMs to robotics has focused on quasi-static (e.g., manipulation) or offline settings that afford large times delays while the LLM completes its reasoning. Second, the application of FMs as runtime monitors requires that they are grounded with respect to the task and capabilities of the system. However, the community has not converged on rigorous methods for grounding FMs without compromising on their generalist zero-shot reasoning abilities (e.g., fine-tuning [24] or linear probing [54] often underperform OOD); prompt design remains a standard practice."}, {"title": "II. RELATED WORK", "content": "Out-of-Distribution Robustness: The fact that learning-based systems often behave unreliably on data that is dissimilar from their training data has been extensively documented in both the machine learning and robotics literature [14, 37, 33, 45]. Approaches to address the subsequent challenges broadly fall into two categories [45]: First are methods that strengthen a model's performance in the face of distributional shift. For example, through robust training (e.g., [41]) or by adapting the model to changing conditions (e.g., [16, 8]). Second are so called out-of-distribution detection algorithms [42, 40], that aim to detect when a given model is unreliable, e.g., by computing the variance of an ensemble [25] or computing energy scores [29]. Recent work has shown the merits of generalist FMs like LLMs in both domains: Studies have shown that zero-shot application of a FM (e.g., in [54], the authors apply CLIP zero-shot on ImageNet), vastly improves OOD generalization over previous approaches, like distributionally robust training [31, 54, 6]. In addition, existing OOD detection methodologies and their application within robot autonomy stacks are tailored to detect conditions that compromise the reliability of individual components of an autonomy stack, like whether a perception system's detections are correct [39, 13, 36, 46]. Instead, recent work showed that LLMs may provide a more general mechanism to detect context dependent safety hazards, especially those that are hard to measure with predefined performance metrics [12]. For example, an autonomous EVTOL may monitor the quality of the vision system's landing pad location estimate, but even if the EVTOL has high confidence that it can land successfully, the outcome of landing on a building that is on fire can have profound negative consequences. However, despite the attractive properties of LLMs, these works do not propose practical strategies to integrate them in closed-loop. Therefore, we propose a closed-loop control framework that can both use the LLM to identify unseen anomalies and strengthen performance in the presence of rare failure modes.\nFoundation Models in Robotics: The integration of large lanugage models (LLMs) and, more broadly, foundation models (FMs) into robotics has sparked considerable interest due to their proficiency in managing complex, unstructured tasks that demand sophisticated reasoning skills. These models have been instrumental in bridging the gap between natural language instructions and the execution of physical actions in the real world. Various approaches utilizing these models have been developed for online use in applications in areas such as manipulation [19], navigation [43], drone flight [9], and long-horizon planning [5, 28]. FMs have also been used to define reinforcement learning reward functions [58], generate robot policy code [27], or create additional training data [56, 57, 2].\nHowever, the issue of response time associated with FMs has not been a focal point in these studies. The aforementioned online methods predominantly rely on a quasi-static assumption, implying that the timing of the robot's actions is not critical. This assumption allows the system the luxury of time to consult the LLMs and await their responses without urgency. Conversely, the latter methods either operate offline or utilize LLMs in manners that are similarly insensitive to response time.\nAs such, existing work demonstrates limited dynamic reactivity of the policy, which is essential for fast-moving, agile robots like quadrotors. These robots can quickly find themselves in situations where a delayed response can result in an unavoidable crash. To mitigate this issue, our approach specifically considers the delays introduced by the reasoning process. We enhance reactivity by implementing a more rapid anomaly detection system, thereby reducing the risk of crashes by allowing for timely corrective actions.\nAccelerating Inference: It is well-recognized that increasing FM capabilities are accompanied with increasing computational cost and inference latency. As such, substantial effort is being dedicated to the acceleration of these models, of which several popular strategies have emerged such as model distillation [15, 17], quantization [20, 55], and parameter sparsification [49, 34]. Ultimately, these approaches improve the cost of the forward pass through a transformer model, but do not address the fact that LLMs typically need to generate long sequences of outputs to reason towards the correct decision [53], a process unlikely to run in real-time for time-sensitive tasks. Querying remotely hosted models on large-scale hardware (e.g., GPT-4 [1]) is a potential solution if computation constraints become too stringent for a system to perform onboard FM inference, yet network conditions may incur inconsistent and potentially significant delays, and connectivity may be unreliable for in-the-wild deployments."}, {"title": "III. PROBLEM FORMULATION", "content": "In this work, we consider a robot with discrete time dynamics\n$$x_{t+1}= f(x_t,u_t),$$\nwhere $$x_t \\in \\mathbb{R}^n$$ represents the robot's state, and $$u_t \\in \\mathbb{R}^m$$ is the control input. Nominally, we aim to minimize some control objective $$C$$ that depends on the states and inputs, subject to safety constraints on the state $$x_t \\in X \\subseteq \\mathbb{R}^n$$ and input $$u_t \\in U \\subseteq \\mathbb{R}^m$$. For example, a quadrotor's state consists of its pose and velocity (estimated from e.g., GPS, visual-SLAM, and IMUs), and its objective may be to minimize distance to a landing zone subject to collision avoidance constraints.\nIn addition to the state variables tracked by the nominal control loop, the robot receives an observation $$o_t \\in O$$ at each timestep, which provides further contextual information about the robot's environment. Our goal is to design a runtime monitor that interferes with the nominal system to avoid system-level safety hazards, which may depend on environmental factors not represented in the robot's state $$x_t$$. For example, a quadrotor cannot safely land on a landing zone covered in burning debris even if the nominal control stack has the ability to do so. In the spirit of [12], we refer to such events as semantic failure modes, as they do not necessarily constitute violation of precise state constraints $$X$$, but instead depend on the qualitative context of the robot's task.\nFurther, we assume that we have access to a dataset $$D_{nom} = \\{o_i\\}_{i=1}^{N}$$ of nominal observations wherein the robot was safe and reliable. Conceptually, $$D_{nom}$$ corresponds to the operational data of a notionally mature system, and may consist of data used to train the system or of previously collected deployment data. This data will overwhelmingly contain mundane scenarios where the robot performs well; our monitoring framework is targeted instead at the challenging, extremely rare corner cases that are unlikely to have been recorded before and threaten the robot's reliability.\nIn the event that a failure mode of the nominal autonomy stack is imminent, we must select and engage a safety-preserving intervention. For example, we may choose to land the quadrotor in another open landing zone like a grassy field. To this end, we follow [46] and we assume that we are given a number of recovery regions $$X_1,X_2,...,X_d \\subseteq X$$, control invariant subsets of the state space that correspond to high-level safety interventions. For example, $$X_h$$ may represent the alternate landing zone. By planning a trajectory to the appropriate recovery set, potential safety hazards can be avoided. As shown in [46], such sets can both be hand defined up-front and identified using reachability analysis."}, {"title": "IV. PROPOSED APPROACH", "content": "It is virtually impossible to account for all the corner-cases and semantic failure modes that a system may experience through a standard engineering pipeline. Even if we train e.g.", "Monitor": "Fast and Slow Reasoning\nTo detect and avoid semantic failure modes", "Detection": "To detect anomalies", "cache,\n$$s(e_t;D_e)": "", "q\\in\\mathbb{R}": "frac{\\|\\{e_i \\in D_e: s(e_i;D_e\\backslash\\{e_i\\"}, "le q\\}\\|}{N} \\ge \\alpha\\},$$\ni.e., the smallest value of q that upper bounds at least $$\\alpha N$$ nominal samples. Note that for nominal embeddings, we must compute the anomaly score $$s$$ in a leave-one-out fashion, since $$s(e_i;D_e) = -1$$ for $$e_i \\in D_e$$. Determining the threshold T using empirical quantiles as in (2) is a standard approach [39], but could be extended in future work to make precise guarantees on false positive or negative rates using recent results in conformal prediction [3, 30].\nSlow Generative Reasoning: Once we detect an anomaly, we trigger the autoregressive generation of an LLM to generate a zero-shot assessment of whether we need to engage any of the interventions associated with the recovery sets $$X_1,...,X_d$$ (\u00a7III) to maintain the safety of the system. The value of this approach is that the LLM's internet-scale pretraining data allows it to generate outputs that resemble the generalist common sense reasoning that a human operator is likely to suggest, as a result, making superior decisions on OOD examples, on which existing task-specific learning algorithms are notoriously unreliable.\nTo do so, we follow [12] in using a VLM to convert the robot's current visual observation into a text description of the environment. We simply encode this scene description into a prompt that provides context on the monitoring task, as illustrated in Fig. 3. We then parse the resulting output string to yield a classification $$y \\in \\{0,1,...d\\}$$ on whether the anomaly does not present a hazard and the system can continue it's nominal operation (y=0), or whether we should engage intervention $$y \\in \\{1,...,d\\}$$ and steer the state into recovery set $$X_y$$. As we illustrate in our experiments, the recovery sets naturally correspond to high-level behaviors (e.g., landing in a field), which facilitates prompt design. We use the shorthand $$w(o_t,Y)$$ to denote the output of the slow reasoner when given observation $$o_t$$ and a (sub)set of intervention strategies $$Y \\subseteq\\{1,...,d\\}$$.\nWhether inference is run onboard or the model is queried remotely over unreliable networks in the cloud, we must account for the latency that autoregressive reasoning introduces. For example, a fast moving vehicle may collide with an anomalous obstacle if it's reaction time is too slow. Therefore, we account for the LLM's compute latency by assuming that it takes at most $$K\\in\\mathbb{N}_{>0}$$ timesteps to receive the output string from the slow reasoner. It is usually straightforward to identify the value of K in practice, since we prompt the model to adhere to a strict output template that tends to stabilize the length of the output generations. Alternatively, as we describe in \u00a7V-C and Appendix I, a simple field-test can be sufficient to identify an upper bound on typical network latency.\nB. Planning a Tree of Recovery Trajectories\nWe control the robot's dynamics (1) in state-feedback using a receding horizon control strategy that 1) minimizes the nominal control objective along a horizon of $$T>K$$ timesteps, while 2) maintaining a set of d recovery trajectories that each reach one of the respective recovery sets $$X_h$$ within the horizon T. The goal of this approach is to ensure that the high-level safety interventions provided to the slow reasoner can be executed. Additionally, it is essential that these options remain feasible throughout the K time steps it takes the monitor to decide on the most appropriate choice. Otherwise, a fast moving robot may, for example, no longer be able to stop in time to avoid a collision. To this end, we solve the following finite-time optimal control problem online, which maintains a consensus between the recovery trajectories for K timesteps:\n$$J_t(Y, K, T)= \\underset{\\{\\mathbf{x}_{t:t+T+1\\vert t}^i, \\mathbf{u}_{t:t+T\\vert t}^i\\}_{i\\in Y\\cup\\{0\\}\\}\\ min}C(\\mathbf{x}_{t:t+T+1\\vert t},\\mathbf{u}_{t:t+T\\vert t})$$\n$$s.t.\\ \\mathbf{x}_{t+k+1\\vert t}^i=f(\\mathbf{x}_{t+k\\vert t}^i,\\mathbf{u}_{t+k\\vert t}^i)$$\n$$\\mathbf{u}_{t+k\\vert t}\\in U \\ \\mathbf{x}_{t+k\\vert t}\\in X$$\n$$\\mathbf{x}_{t\\vert t}^i=x_t$$\n$$\\mathbf{x}_{t+T+1\\vert t}^i \\in X_i \\ \\forall i \\in Y$$\n$$\\mathbf{u}_{t:t+K\\vert t}^i=\\mathbf{u}_{t:t+K\\vert t}^j\\ \\forall i,j\\in Y,$$\n$$\\mathbf{u}_{t:t+K\\vert t}^i=\\mathbf{u}_{t:t+K\\vert t}^{0} \\ \\forall i\\in Y$$\nHere, the notation $$\\mathbf{x}_{t+k\\vert t}^i$$ indicates the predicted value of variable x at time t+k computed at time t for each trajectory i\u2208Y\u222a{0}. The MPC in (3) optimizes a set of |Y|+1 trajectories. The first corresponds to a nominal trajectory $$\\mathbf{x}_{t:t+T+1\\vert t}^{0}$$ plan that minimizes the control objective and a set of |Y| recovery trajectories that each reach their respective recovery set $$X_h$$ within T timesteps. In addition, the MPC problem (3) includes two consensus constraints, one associated with the fast anomaly detector and the other with the slow reasoner. First, by fixing\n    },\n    {\n      \"title\": \"V. EXPERIMENTS\",\n      \"content\":", "Having outlined our approach, we conduct a series of experiments to test the following five hypothesis:\nH1 By quantifying semantic differences of observations with respect to the prior experience of a system, our fast embedding-based anomaly detector performs favorably to generative reasoning-based approaches.\nH2 Embedding-based anomaly detection does not necessitate the use of high-capacity generative models; small models incurring marginal costs can be used.\nH3 Once an anomaly is detected, generative reasoning approaches can effectively deduce whether the anomaly warrants enacting safety-preserving interventions.\nH4 Our full approach, which unifies embedding-based anomaly detection and generative reasoning-based anomaly assessment, can be integrated in a broader robotics stack for real-time control of an agile system.\nH5 Additional forms of embeddings, including those from vision and multi-modal models, offer a promising future avenue for end-to-end anomaly detection.\nExperiment Rationale: We run four main experiments. The first experiment (\u00a7V-A) tests the performance of our fast anomaly detector in three synthetic (i.e., text-based) robotic environments. We then evaluate the slow generative reasoner for the assessment of detected anomalies on two of these environments. The second experiment (\u00a7V-B) evaluates our full approach (integrating the runtime monitor with the MPC fallback planner) in a simulation of real-time control of an agile drone system. The third is a full-stack experiment on real quadrotor hardware, including a timing breakdown for each component in our approach running on a Jetson AGX Orin module, thereby demonstrating viability for hardware deployment. The fourth experiment evaluates whether our runtime monitor transfers to a realistic, semantically rich self-driving environment, where we investigate the use of both language and multi-modal embeddings for anomaly detection."], "content": "In this paper, we presented a runtime monitoring framework utilizing generalist foundation models to facilitate safe and real-time control of agile robotic systems faced with real-world anomalies. This is enabled through a reasoning hierarchy: a fast anomaly classifier querying similarity with the robot's prior experiences in an LLM embedding space, and a slow generative reasoner assessing the safety implications of detected anomalies and selecting the appropriate mitigation strategy. These reasoners are interfaced with a new model predictive control strategy that maintains the feasibility of multiple safe recovery plans. In extensive experiments, we demonstrate that a) embedding-based anomaly detection performs favorably to zero-shot generative reasoning with high-capacity LLMs, thanks in part to the grounding afforded by the prior embedding experience of the robot; b) embedding-based anomaly detection attains strong performance even when instantiated with small language models, allowing our method to run onboard computationally constrained robotic systems; c) dual-stage reasoning enables LLMs to operate in the real-time reactive control loop of an agile robot; d) alternative forms of embeddings, such as those obtained from vision-based foundation models, can be used to efficiently detect anomalies in high-dimensional observation spaces.\nAs such, our work highlights the potential of LLMs and, more broadly, foundation models toward significant increases in the robustness of autonomous robots with respect to unpredictable and unusual out-of-distribution scenarios or tail events. Improving the performance and generality of our framework presents several promising avenues for future research. For example, the impact of LLM inference latencies could be reduced by devising methods to constrain generative reasoning to a fixed word budget, or by using intermediate generations to inform decision-making during the generation process. Further analysis is required on the correctness of fallback plans selected by the LLM, and whether fallbacks can be programmatically determined upon latency timeout. Finally, continual learning based on the delayed anomaly assessment of the generative reasoner could be used to avoid triggering the slow reasoner on non-safety-critical anomalies a second time."}, {"title": "APPENDIX", "content": "These appendices contain further details on the experiments in the main body of the paper, additional results and ablations supporting the main hypotheses of the paper, analysis of these supplementary results, and proofs of theoretical results. Besides the results within this document, we also refer the reader to videos of the quadrotor experiments in the quad_videos/ directory of the supplemental material. Furthermore, we include videos describing our approach, prompt templates, and further results on our project page: https://sites.google.com/view/ aesop-llm. These appendices are organized as follows:"}]