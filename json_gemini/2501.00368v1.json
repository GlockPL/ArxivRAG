{"title": "Design Optimizer for Soft Growing Robot Manipulators\nin Three-Dimensional Environments", "authors": ["Ahmet Astar", "Ozan Nurcan", "Erk Demirel", "Emir Ozen", "Ozan Kutlar", "Fabio Stroppa"], "abstract": "Soft growing robots are novel devices that mimic plant-like growth for navigation in cluttered or dangerous environments. Their\nability to adapt to surroundings, combined with advancements in actuation and manufacturing technologies, allows them to perform\nspecialized manipulation tasks. This work presents an approach for design optimization of soft growing robots; specifically, the\nthree-dimensional extension of the optimizer designed for planar manipulators. This tool is intended to be used by engineers and\nrobot enthusiasts before manufacturing their robot: it suggests the optimal size of the robot for solving a specific task. The design\nprocess models a multi-objective optimization problem to refine a soft manipulator's kinematic chain. Thanks to the novel Rank\nPartitioning algorithm integrated into Evolutionary Computation (EC) algorithms, this method achieves high precision in reaching\ntargets and is efficient in resource usage. Results show significantly high performance in solving three-dimensional tasks, whereas\ncomparative experiments indicate that the optimizer features robust output when tested with different EC algorithms, particularly\ngenetic algorithms.", "sections": [{"title": "1. Introduction", "content": "Soft robotics is a relatively new field of intelligent mechani-\ncal systems that aims at overcoming some of the biggest limita-\ntions of their rigid counterparts [1]. Rigid robots (i) may strug-\ngle to interact with fragile objects or delicate environments,\nsuch as human tissues, glassware, or sensitive components in\narchaeological sites; (ii) have intricate designs and their mate-\nrials often result in high costs; and (iii) due to their strength\nand stiffness, the safety of human operators can be a concern in\na human-machine interaction scenario [2]. On the other hand,\nsoft robots are inspired by living organisms, with designs ex-\nploiting the natural compliance of their materials to facilitate\nsmooth and intuitive physical interactions with the environ-\nment [3, 4, 1, 5]. Moreover, their materials and actuation meth-\nods are typically more affordable, safer, and simpler to manu-\nfacture or assemble compared to conventional rigid robots [6].\nAdditionally, soft robots have the ability to extend or retract\nthrough a process known as eversion \u2013 i.e., like a linear actuator,\nbut with the advantage of occupying no space when completely\nretracted because the soft material can be folded. This unique\ndegree of freedom (DoF) is directly inspired by the growth pat-\nterns of plants, leading to these robots often being referred to\nas vine robots [7, 8, 9] or more generically soft growing\nrobots. Several studies have demonstrated their effectiveness\nin manipulation tasks that require payload-handling capabili-\nties [10, 11, 12, 13]. A major innovation was the introduction\nof continuum links and discrete joints, which can be achieved\nusing layer jamming to dynamically adjust the robot's stiffness\nat the joint locations to independently steer different links in\ndifferent directions [14]. As illustrated in Fig. 1(a), this allows\nsoft growing robots to be modeled with the classic kinematic\nchain used for their rigid counterparts, with the substantial dif-\nference that each link also grows and retracts.\nSoft robots are considerably less costly than their rigid coun-\nterparts, and this makes them accessible to the general public,\nincluding non-professional robot designers. Virtually anyone"}, {"title": "2. Soft Growing Manipulator for the Proposed Scenario", "content": "The soft growing manipulator examined in this study is based\non the design introduced by Do et al. [14], which combines\ncharacteristics of both rigid and soft robots \u2013 Fig. 2 depicts a\nportion of the manipulator's model to show its DoFs. The ma-\nnipulator consists of links that can be individually adjusted to\nstiffen or stay flexible. When a link is not stiffened, it can be\ndeliberately steered and maneuvered using cables to function as\na revolute joint. When a link is stiffened, pulling its respective\ncable will not change its orientation; however, the following\nlink (if not stiffeners) will be steered in the desired direction.\nThanks to this technology, each link can steer independently\nby using only two cables for each direction (i.e., clockwise\nand anti-clockwise rotation around the x-axis, clockwise and\nanti-clockwise rotation around the y-axis). Lastly, growth and\nretraction (eversion) are made possible by the structure of the\nrobot's body, which is an inflatable beam composed of a thin-\nwalled, compliant material that everts pneumatically. Starting\nin a fully folded state, pressurizing the interior with air causes\nthe robot to unfold at its tip, pulling new material through its\nbody [8, 79, 80].\nThis type of manipulator can be used in manipulation\ntasks [17] when equipped with a gripper at its tip (i.e., the end\neffector). This is usually done with a magnetic tip mount that\nmoves as the robot grows, sliding on the body material, remain-\ning anchored to the tip [81, 82, 11, 12]. In the specific scenario\nanalyzed by this work, the robot is hanged on the ceiling and\ngrows in favor of gravity to reach items and targets placed in\nthe environment \u2013 much like a claw machine at the fair. Fig. 3\nshows a possible real-case example in which the robot assists\na human while unloading a dishwasher: the human selects the\nitem from the dishwasher, hands it to the robot, and the robot\nplaces it in the designated spot on a shelf - a classic example\nof human-machine interaction. In this scenario, a soft robot is\ninherently safer than a rigid robot due to its flexibility and com-\npliance [6]. Unlike rigid robots, which can exert high forces and\nhave hard surfaces, soft robots are made of materials that can\ndeform upon contact. This reduces the risk of injury if a colli-\nsion with a human occurs. Additionally, the adaptable nature of\nsoft robots allows them to handle objects of various shapes and\nfragilities with greater care, minimizing the chance of damag-\ning items while also making the interaction more intuitive and\nsafer for the user."}, {"title": "3. Optimization Problem and Proposed Solution", "content": "The problem requires us to find the best design for a soft\ngrowing robot manipulator to solve a specific task - i.e., the\nset of link lengths composing the body of the robot such that\nthe robot can easily reach every target in the environment. Our\noptimizer will retrieve the design automatically. This problem\ncan be defined in both 2D and 3D based on the effect of grav-\nity on the system: a robot exploring a tunnel or a pipe system\ncan be thought of as a 2D robot, but when the environment de-\nmands that the robot explore different levels (e.g., a multi-story\nbuilding), it must also navigate in the third dimension. The 2D\nscenario was tackled in our previous work [67], and the cur-\nrent work extends it to the third dimension. Fig. 4 shows a 3D\nrepresentation of the problem, where the robot is mounted on\nthe environment's ceiling and grows in favor of gravity\u00b9. To\nsimplify the problem, the model of our robot does not have\ngravity constraints on its orientation and can steer in any di-\nrection. Fig. 4(a) shows an example of a 3D task, in which the\nmanipulator needs to reach three targets with a specified reach-\ning orientation: this requires the robot to align its last link(s)\nto a specific straight line. Fig. 4(b) shows a possible solution\nto the problem, with three configurations (one for each target)\nsharing the same link lengths except for the last one.\nThe robot begins its extension from its container, known as\nthe home base. Based on the home base's pose (position and\norientation) and the set of targets to be reached, the optimizer\ndetermines an optimal robot design that allows it to reach all\ntargets while satisfying hardware constraints (see Section 3.5).\nThe design parameters include the number of joints and their\nplacement along the robot: these parameters must be deter-\nmined prior to the robot's manufacturing and assembly - specif-\nically, the lengths of the robot's links. However, the number of\njoints or links that a soft growing robot can utilize during a task\nmay change depending on the target it needs to reach. Addi-\ntionally, the length of the final link may vary, as it depends on", "subsections": []}, {"title": "3.1. Problem Formulation and Representation of the Decision\nVariables", "content": "The mathematical formulation of the problem defines the fol-\nlowing terms:\n\u2022 n, the maximum number of links;\n\u2022 $\\Theta^{(x)}$, joint rotation around x-axis;\n\u2022 $\\Theta^{(y)}$, joint rotation around y-axis; and\n\u2022 l, link length.\nAny start point of a link is defined as a node, which also corre-\nsponds to a set of two rotational joints (around x and y) and a\nlinear joint (for growth and retraction). Only the last endpoint\n(i.e., the end effector or the node at the end of the last link) is\nnot considered a joint set but simply the tip of the robot \u2013 i.e.,\nnot a node. Therefore, a robot will have at most n nodes plus\nthe end effector.\nThe user will set the bounds on these parameters based on the\nresources available for manufacturing \u2013 which might depend on\nbudget, material availability, time, or the size of the machinery\nused for production. The number of nodes n is defined in N+\nand depends on how many links the manufacturer is prepared\nto produce. Angles on x and y are constrained within a range\n$\\Delta_{\\Theta} \\in \\mathbb{R}$, which is determined by hardware limitations (e.g., each\nrotational joint cannot rotate more than \u03c0/4); this excludes the\nfirst joint at the base, where the robot extends orthogonally (i.e.,\neither fixed at zero or with an unrestricted range if the home\nbase is manually oriented for each target). Link lengths are\nconstrained within a range $\\Delta_{l} \\in \\mathbb{R}$ and are primarily influenced\nby manufacturing limitations (e.g., if the links are made from\npolyethylene plastic using a laser cutter, the maximum length\nis determined by the cutter's size). Additionally, they must ac-\ncommodate the gripping mechanism, meaning the link length\nmust be at least as long as the gripper.\nA specific task is defined with the following:\n\u2022 t, a set of targets, each represented by their pose in the\nspace (three coordinates for position and two angles for\ndesired reaching orientation);"}, {"title": "3.2. Search Space", "content": "A higher number of links enhances the robot's dexterity and\nexpands its workspace. Consequently, the optimization prob-\nlem must handle a large search space w, which grows linearly\nwith the number of targets |t|, as it needs to optimize a single\nset of links for all targets. The search space w is defined as\nin Eqn. (4) when the order of targets is predetermined, or if the\nrobot returns to its base after reaching each target (i.e., the order\nof targets is irrelevant).\n$\\omega = n^{\\N^{+}} + 2 \\cdot |t| n \\Delta_{\\Theta}$\nWhen the order of targets is unknown, and the solution must\nalso minimize the cost of transitioning between configurations,\nthen the search space grows factorially, as every possible per-\nmutation of target sequences must be considered. In this work,\nwe do not address the target order and focus solely on solving\nthe basic optimization problem. The order can be considered\nafter optimization with a proper motion planner like the one\nproposed by Altagiuri et al. [83] to determine the most efficient\ntarget-reaching sequence."}, {"title": "3.3. Fitness Evaluation from the Objective Functions", "content": "The optimization problem is composed of the following ob-\njectives:\n1. f\u2081(\u03c8, t, h, o): minimize the distance between the end effec-\ntor (which can be located anywhere along the body due to\neversion) and each target in the environment \u2013 solve the\ninverse kinematics;\n2. f2(\u03c8, t, h, o): minimize the difference between the orienta-\ntion of the robot's last link and the desired reaching orien-\ntation for each target in the environment \u2013 solve the inverse\nkinematics; and\n3. f3(\u03c8, t, h, o): minimize the robot's components (i.e., its\nlength, number of links), to promote quicker and more\ncost-effective production.\nIn multi-objective optimization problems (MOOPs), some or\nall of the objectives may conflict with each other, meaning that\noptimizing one objective can adversely affect another. As a re-\nsult, instead of finding a single solution, we typically obtain a\nset of trade-off solutions that represent the Pareto optimal front.\nSolutions on this front are non-dominated by any other solu-\ntion, meaning no other solution is better across all objectives.\nHowever, as trade-off solutions, they may be optimal for one\nobjective but not necessarily for others [77, 78]. In the con-\ntext of this work, treating all objectives as equally important\ncould result in trade-off solutions that are not desirable for our\nneeds. For instance, while the minimum number of links might\nbe a trivial single-link robot, it could be impractical if the robot\ncannot reach the target \u2013 i.e., a single-link robot cannot steer!\nConversely, a robot with an excessive number of useless links\n(e.g., a \"wavy\" robot as shown in Fig. 5(a)) is clearly not the\noptimal solution we seek. Clearly, we are not interested in a\nrobot that fails to reach the target, but we do need to balance\nthe properties defining the robot (e.g., number of links) with its\nability to achieve the desired orientation. Minimizing the num-\nber of links might compromise the ability to achieve the desired\norientation, whereas an additional link can help meet the orien-\ntation requirement"}, {"title": "3.3.1. Solving the Inverse Kinematics with the Desired Orien-\ntation", "content": "The first two objectives are to ensure that the end effector\nof each configuration reaches the respective target (f\u2081) with\nthe desired orientation (f2). This is a well-known problem of\ninverse kinematics [87], which can be solved by minimizing\nthe distance between the end effector and the target for each\nconfiguration. This is usually solved in task space (i.e., Carte-\nsian coordinates in the environment) rather than in joint space\n(i.e., polar coordinates defining the values of each robotic joint).\nTherefore, since the configurations in Eqn. (1) are defined in\npolar coordinates (SP), it is necessary to transform it into its cor-\nresponding configuration in Cartesian coordinates () through\nforward kinematics as in Eqn. (5) \u2013 details are reported in Sec-\ntion 1.1 of the supplementary material. The configuration \u00ba is\ncomposed of n + 1 points \u2013 i.e., all nodes plus the end effector.\n$P =\\begin{bmatrix}\n\\Theta^{(x)}\n\\Theta^{(y)}\nl\n\\end{bmatrix}\\underrightarrow{forward\\ kinematics} \\longrightarrow C =\\begin{bmatrix}\nX_{1}\nY_{1}\nZ_{1}\n\\\\\\\\\\\\\nX_{n+1}\nY_{n+1}\nZ_{n+1}\n\\end{bmatrix}$", "subsections": []}, {"title": "3.3.2. Optimizing the Kinematic Components of the Robot", "content": "This part is the same as the 2D case presented in the pre-\nvious work [67], except for having two rotational angles for\neach node; however, we report it fully for a comprehensive de-\nscription and reproducibility. The objective functions f\u2081 and f2\n(inverse kinematics) take precedence over f3 (optimal compo-\nnents). After combining the first two into a single fitness func-\ntion f1-2, the next step is penalizing excessively long solutions\nwith too many nodes. Ideally, we aim for a robot that gradually\naligns with the target's orientation segment, creating a smooth\ncurve. The robot depicted in the right-hand side of Fig. 5(b) is\na better solution compared to the one shown in Fig. 5(a): it not\nonly positions all nodes closer to the orientation segment but\nalso uses fewer nodes to reach the target.\nObjective f3 focuses on optimizing the robot's components\nto minimize manufacturing time and resources and cannot be\ncaptured by a single property. Thus, we treat it as a macro ob-\njective composed of the following:\n\u2022 f3.1: minimize the number of links of each configuration\nto reduce redundant DoFs, as in Eqn. (8);\n$f_{3.1} = \\sum_{i=1}^{t} n_i$\n\u2022 f3.2: minimize the overall length of the robot to promote\nshorter configurations, as in Eqn. (9); and\n$f_{3.2} = max_{i \\in t} \\left( \\sum_{j=1}^{n-1} l_j + l_{\\tilde{n}} \\right)$\n\u2022 f3.3: the change in direction between links in all config-\nurations, or undulation, to favor trajectories that are non-\nintersecting and not \"wavy\u201d, calculated as a percentage of\nthe total length of all configurations, as shown in Eqn. (10)\nnote that the formula checks the change in the angle be-\ntween the j-th and (j+1)-th link in both the xz and yz-plane\nprojections ($\\Delta \\Theta^{(xz)}$ and $\\Delta \\Theta^{(yz)}$, respectively).\n$f_{3.3} = \\frac{1}{t \\cdot \\sum_{i=1}^{k\\in[xz, yz]}} \\sum_{i=1}^{t} \\sum_{j=1}^{n} \\left(\\frac{\\left| \\Theta_j[sign(\\Theta_i)] - \\Theta_{j+1}[sign(\\Theta_{i})] \\right|}{\\cdot | \\Delta \\Theta_{j,e}|^2} \\right) \\cdot 100$\nThe priorities among these three sub-objectives can be adjusted\nto refine our preference-based method, potentially eliminating\nthe need for weight parameters. Although it might appear that\nthe number of links and the total length of the robot (f3.1 and\nf3.2, respectively) have a linear relationship (i.e., more links\nlead to a longer robot), this is not necessarily true. A robot\nwith many small links can be shorter than one with fewer, very\nlong links. We prefer robots with fewer links because the time\nrequired to manufacture a link is not affected by its length (f3.1"}, {"title": "3.4. Separation of the Objectives with Rank Partitioning", "content": "Based on the observations about objective priorities, we\nemploy a strategy that prioritizes solutions with fewer, well-\nstructured components, but only if they are sufficiently close to\nthe target's orientation segment. The Rank Partitioning algo-\nrithm was introduced in the previous work by Stroppa [67", "89": "."}]}