{"title": "Dancing to the State of the Art? How Candidate Lists Influence LKH for Solving the Traveling Salesperson Problem", "authors": ["Jonathan Heins", "Lennart Sch\u00e4permeier", "Pascal Kerschke", "Darrell Whitley"], "abstract": "Solving the Traveling Salesperson Problem (TSP) remains a persistent challenge, despite its fundamental role in numerous generalized applications in modern contexts. Heuristic solvers address the demand for finding high-quality solutions efficiently. Among these solvers, the Lin-Kernighan-Helsgaun (LKH) heuristic stands out, as it complements the performance of genetic algorithms across a diverse range of problem instances. However, frequent timeouts on challenging instances hinder the practical applicability of the solver.\nWithin this work, we investigate a previously overlooked factor contributing to many timeouts: The use of a fixed candidate set based on a tree structure. Our investigations reveal that candidate sets based on Hamiltonian circuits contain more optimal edges. We thus propose to integrate this promising initialization strategy, in the form of POPMUSIC, within an efficient restart version of LKH. As confirmed by our experimental studies, this refined TSP heuristic is much more efficient - causing fewer timeouts and improving the performance (in terms of penalized average runtime) by an order of magnitude - and thereby challenges the state of the art in TSP solving.", "sections": [{"title": "1 Introduction", "content": "The Traveling Salesperson Problem (TSP), also referred to as Traveling Sales-man Problem or Traveling Sales-rep Problem, is one of the most well-known combinatorial optimization problems and has thus been studied and researched in various domains for decades. While it often serves as a motivating example in"}, {"title": "2 Background", "content": "The Lin-Kernighan Heuristic [14] dates back to 1973 and is still a highly com-petitive algorithm in the form of LKH. The core concept introduced by Lin and Kernighan behind the heuristic has not changed and revolves around the construction of sequential k-opt moves, where k is unrestricted. If k equals the number of cities in a TSP instance, a k-opt move could potentially yield the optimal solution directly from any feasible solution. However, a sequential k-"}, {"title": "2.1 a-Candidate Set", "content": "In its original form, the Lin-Kernighan (LK) algorithm [14] constrained the search by considering only edges connecting each vertex to one of its five closest neighbors. However, Helsgaun [9] identified instances where the optimal edges did not emerge from this restricted set of candidates generated by the five-nearest-neighbor heuristic. Consequently, LKH incorporates a more sophisticated approach, leveraging minimum 1-trees to derive a more accurate approximation of edge proximity to the optimal tour. Additionally, it employs subgradient optimization techniques to further refine these estimations, enhancing the algorithm's effectiveness in finding high-quality solutions.\nA minimum 1-tree is related to, but distinct from, a spanning tree; it is formed by a minimum spanning tree encompassing all nodes except one, which is arbitrarily chosen. This remaining node is linked to the tree via two edges, connecting it with its closest two neighboring nodes, thus introducing a cycle (see Figure 1). If every vertex in this structure has a degree of two, the minimum 1-tree manifests as a Hamiltonian circuit, effectively resolving the TSP. Helsgaun's investigation revealed that a typical minimum 1-tree encompasses approximately 70% to 80% of the edges present in the optimal tour. Consequently, he introduced an a-nearness metric, which computes the cost associated with incorporating\nAdjusting the distance matrix by adding a constant to the distances to and from one node - i.e., updating the corresponding row and column in the distance matrix\ncan modify the minimum 1-tree while preserving the optimal tour. In the optimal tour, every node has to be connected with two edges, thus there cannot be any benefit in changing node permutation if all distances from or to one node are changed. In the case of a minimum 1-tree a node can be connected with up to six edges, see [5,6] a more detailed explanation with minimal span-ning trees. Increasing the distance from one node to its nearest neighbors will thus lead to fewer connections to this node in a minimum spanning tree. With this, a refinement through subgradient optimization can be applied such that the minimum 1-tree more closely resembles a tour, via weights per node added to the distances of all edges including the node [7,8,9]. Essentially, the subgradient algorithm iteratively increases the weights, i.e., the distance in the distance ma-trix, of nodes with a degree of 3 or more and decreases the weights of leaf nodes within the minimum 1-tree. When constructing a new minimum 1-tree with the altered distance matrix, the added or subtracted constants in tendency lead to previously higher degree nodes being connected with fewer other nodes and pre-vious nodes of degree one being connected with more nodes. This optimization process is integrated into LKH and terminates either upon finding the optimal tour or after not finding an improving minimum 1-tree for too many iterations. The resulting minimum 1-tree is reported to yield ranks in terms of smallest a values for the optimal edges that are on average 1.7, compared to 2.1 based on the non-transformed minimum 1-tree [9]. Note that a rank of 1.5 would be optimal as every node is part of two optimal edges which should in the optimal case have the two smallest a values."}, {"title": "2.2 2-opt Candidate Set", "content": "The use of minimum spanning trees is indeed likely to find edges with low cost that connect one vertex to another. But this strategy does not take into account that the edges must be part of a Hamiltonian circuit. By constructing locally optimal Hamiltonian circuits to sample edges, we improve the probability that the sampled edges can contribute to the globally optimal solution. Also, mini-mum spanning trees do not guarantee that there are at least two edges that are incident on every vertex. For example, in an asymmetric TSP, one directed edge must \"enter\" the city, and one directed edge must \"leave\" the city. This same idea generalizes to symmetric TSP instances. We thus argue that a more obvious and likely more productive way to initialize and populate the candidate set is to use edges that appear in some locally optimal Hamiltonian circuit.\nOne way to find useful edges is to sample them from local optima. A standard way to both define and discover local optima is to use the 2-opt operators. The 2-opt operator, when applied until no further improvement is possible, is guaranteed to generate locally optimal Hamiltonian circuits without any crossing\nedges [3]. This guarantee only holds, however, if the TSP instance uses a cost matrix that obeys the triangle inequality. The triangle inequality holds for all Euclidean TSP benchmark problems, which are the focus of this work.\nThe successful and effective EAX genetic algorithm [16] uses an efficient im-plementation of 2-opt. It has been shown to generate a set of locally optimal solutions that sample edges found in the global optimum at a very high rate. Usually, the edges found in these local optima are also found in the global opti-mum at a rate of approximately 70% [21]."}, {"title": "2.3 POPMUSIC Candidate Set", "content": "Another similar approach that has been directly implemented in LKH (since ver-sion 2.0.9) is Partial Optimization Metaheuristic Under Special Intensification\nConditions (POPMUSIC) for TSP [20]. In a nutshell, POPMUSIC optimizes an initial tour by optimizing sub-paths of consecutive cities on the current tour at each iteration. The initial tour is found by starting with an LK-optimized tour on a subsample of the cities. Then, it adds the out-of-tour nodes to the tour, which is/are located closest to the tour. For each of the cities added in this second step, it then optimizes the sub-path around it using 2-opt. Finally, sub-paths of consecutive cities are optimized until no further improvement can be found. For further details, we refer to the original paper [20].\nThis procedure was originally developed to efficiently generate edge candidate sets for large instances, where the a-set generation requires too much time. The authors of [20] note that, while the costs of tours generated by POPMUSIC are not particularly good, multiple runs tend to include (almost) all optimal edges, making it suited for candidate set generation.\nIn our preliminary experiments, the quality of edges produced by POPMU-SIC and 2-opt is similar between both approaches. Due to the better accessibility and scalability in a restart variant, we generally recommend using the built-in POPMUSIC technique rather than using custom 2-opt tours as the basis for Hamiltonian circuit-based candidates."}, {"title": "3 a-Candidate Set Pitfalls", "content": "Independent of the pruning strategy, LKH's ability to generate good solutions is limited when too many edges are removed from the search space. In fact, there are only three scenarios in which an edge, that is not part of the candidate set, can be introduced into the tour: (i) during the construction of the initial tour, (ii) to close a sequential k-opt move, and (iii) when kicking a local optimal tour. Kicking a tour refers to altering parts of a tour to escape local optima after no improving move can be found anymore. Helsgaun's strategy is to create a new random tour and disallow removing edges which are part of the current best solution [10]. An alternative strategy is a double bridge move, which combines two 2-opt moves that, if applied alone, would result in two separate circles.\nThe limitation to only three scenarios, which enable introducing edges that are not yet part of the candidate set, can even be seen for very small TSPinstances as depicted in Figure 3. Although this instance consists of only five nodes, LKH cannot solve it, if the following parameters are set: disabling the subgradient procedure (SUBGRADIENT = NO), allowing only one candidate per city (MAX_CANDIDATES = 1), changing the kick-strategy to a double bridge move (KICK_TYPE = 4), and using the initial tour shown in Figure 3. The tree-based candidate set as visible in Figure 3 lacks two edges crucial to the optimal tour, preventing their simultaneous introduction with scenario (ii). Additionally, since these edges are absent in the initial tour, and since a double bridge move changes four edges, they cannot be introduced during scenarios (i) and (iii). In this case of a very small search space with only five cities, LKH's kicking-strategy could by chance result in the optimal solution. This is not the case with the double bridge move employed here. When LKH attempts to replace a suboptimal edge, the only viable replacement is the middle vertical edge, which cannot be part of the optimal tour since it would require breaking either the left or right horizontal edge. Since the candidate set is based on a tree structure and not a Hamiltonian circuit, crucial edges can only be included if the number of candidates per point is increased. However, this increase can be counteracted by clustering many points near the existing ones.\nAlthough the subgradient algorithm may mitigate some of these issues, as long as the minimum 1-tree is not the solution to the TSP, it will contain tree-like structures leading to missing edges, as illustrated in Figure 3. An example of a larger instance where numerous optimal edges are absent in the a-candidate set is d2103, which poses a significant challenge for LKH. Figure 4 highlights the distinctions between an a- and a 2-opt-based candidate set. Notably, the latter candidate set exhibits increased diversity, especially in long-distance edges.\nIf missing edges can cause LKH to timeout even on a small five-city instance, it is likely that the frequency of optimal edges in the candidate sets for instances intentionally made challenging for LKH correlates with the algorithm's perfor-mance. Previous studies successfully evolved numerous TSP instances that aredifficult to solve for LKH but easy for EAX, and vice versa [2]. However, the authors lacked an explanation for the poor performance. To investigate our hy-pothesis, we illustrate the proportions of instances belonging to one of the evolved instance groups (grouped by the number of missing edges along the x-axis) in Figure 5. The evolved instance groups are distinguished into four categories, de-pending on whether they are easy for EAX and difficult for LKH (eax-1kh-*) or vice versa (lkh-eax-*), and whether they were generated using simple or sophis-ticated mutation operators. It is evident that instances without missing edges in the candidate set are predominantly the ones classified as LKH-friendly (i.e., lkh-eax-*). Additionally, if the amount of missing edges increases, the more likely it is that an instance belongs to the groups of instances that are chal-lenging for LKH (i.e., eax-lkh-*). Notably, in cases with many missing edges, the sophisticated evolution strategy dominates, indicating the higher flexibility of this approach. This trend remains consistent across all instance sizes, with a roughly linearly scaled increase in the maximal number of missing edges for this small set of sizes. In consequence, these findings highlight a significant factor contributing to LKH's poor performance on EAX-friendly instances.\nThe evolution process identified many scenarios particularly challenging for the minimum 1-tree based pruning strategy, rather than for the inner LKH search procedure. This suggests an unfair comparison of LKH in previous algo-rithm selection studies, based solely on the performance of the a-candidate set. Restarting EAX, as proposed by [4], involves reinitializing the evolutionary algo-rithm with a new population optimized by 2-opt that may introduce many new"}, {"title": "4 Experimental Setup", "content": "The experiments with new LKH configurations were conducted using Intel Xeon Platinum 8470 CPUs, each being repeated for ten folds using a different starting seed (1000000\u00d7 fold). For each restart, the seed was incremented by one. The cutoff time is set to one hour per run. In accordance with previous studies, we aggregate the run results per instance using the penalized average runtime (PAR10). In case of successful runs, this metric simply computes the average runtime needed to solve the instance. If an instance cannot be solved within the given budget, PAR10 penalizes the corresponding runtime by ten times the maximum runtime, i.e., 36000s, prior to aggregating the runtimes.\nWe maintain the standard settings of LKH except for the seed and the can-didate set. In our experiments, we create four distinct restart versions of LKH differentiated by the candidate set construction: LKH\u0105, LKH2-opt, LKHpop, fixed, and LKHpop, restart. LKH\u0251 corresponds to the vanilla restart version as described in [4], utilizing the a-candidate set. For LKH2-opt, we provide the 2-opt-based candidate set through a candidate set file. This set is generated from 1000 2-opt-optimized tours, from which all unique edges are symmetrically added to the candidate set and then ordered by their frequency. This process results in ap-proximately 5\u00d7 n unique edges for all instances, where n represents the instance size. Both LKHpop, fixed and LKHpop, restart are POPMUSIC-based variants. In both variants, we restart the algorithm every time a solution was not found within one run. However, for LKHpop, fixed, we reuse a prerecorded POPMUSIC candidate set, whereas for LKHpop, restart, the candidate set is reinitialized at every restart. Note that when referring to LKH and EAX, we reuse old per-formance data [5,6] recorded on other CPUs, which may portray them slightly less favorably. However, our focus is on the structural performance differences, specifically whether the algorithm times out on a given instance or not, hence small differences in runtime are negligible. Further, note that we do not account for the initialization costs for the same reason.\nAll tests were conducted on the 10000 evolved instances from [2]. These instances were chosen to reveal performance variations across different candidate set configurations, as they encompass both highly challenging and easily solvable instances for LKH when using an a-candidate set."}, {"title": "5 Experimental Results", "content": "The candidate sets constructed with the edge frequency information of the 2-opt-optimized Hamiltonian circuits reliably contains all optimal edges. Only 26of 10000 candidate sets have one missing edge, and only one has two missing edges. This leads to a significant performance improvement, with one order of magnitude fewer timeouts observed. Figure 6 shows detailed performance data of both algorithms, where every point corresponds to one TSP instance. Instances along the dashed line are solved approximately equally fast by both algorithms. Instances below this line are solved faster by LKH2-opt, while instances above are faster solved with LKHa. The most notable improvement of LKH2-opt over LKHa is seen in small-sized EAX-friendly instances, where the 2-opt-based vari-ant outperforms the original restart-version on nearly every instance. Interest-ingly, the performance on instances specifically designed to be easily solvable by LKH does not show bias towards one of the variants being faster, despite the changed candidate set. Furthermore, the data supports the observation that a single missing edge in the candidate set does not significantly impact LKH's per-formance, as the missing edge can be introduced when closing a sequential move. However, the instance with two missing edges (see red square in the scatterplot of EAX-friendly instances with 2000 cities), is notably more challenging.\nAlthough most candidate sets include all required edges and the search restarts with a new initial tour after an unsuccessful run, the candidate setitself may introduce a search bias due to edge ordering. To investigate this, we examine the two other new restart-variants based on POPMUSIC: LKHpop, fixed and LKHpop, restart. The performance comparison is shown in Figure 7. The data clearly indicates that the POPMUSIC-based candidate set misses more impor-tant edges (here: up to nine edges per instance). Comparing the results across Figure 6 and Figure 7, it becomes apparent that the LKH-variant based on the fixed POPMUSIC candidate set times out more often compared to LKH2-opt. However, including the candidate set in the restart process resolves this issue, and all instances with many missing edges are solved within the time limit. Note that most instances leading to timeouts have two or more missing edges. How-ever, there are a few instances with at most one missing edges that produced timeouts but could be solved by LKHpop, restart. This suggests that resetting the candidate set for every restart can mitigate biases beyond missing optimal edges.\nFigure 8 provides a summary of the PAR10-performance of all examined LKH-variants across different instance sizes and groups. Although the POPMU-SIC candidate set was initially designed for large instances, combining it with a restart mechanism yields a much more competitive algorithm compared to the original restart-variant of LKH, which was based on the a-candidate set."}, {"title": "6 Conclusion", "content": "In this study, we explored the impact of various options for the candidate edge set of LKH. Our findings reveal that even a small number of missing edges can frequently result in algorithm timeouts. Instances that were evolved to be challenging for LKH were found to be primarily difficult due to the absence of optimal edges in the a-candidate set and a lack of changes to the candidate set between restarts. This highlights a significant challenge in algorithm selection for the TSP, a topic not thoroughly addressed in prior works. Choosing the appropriate algorithm for a specific instance necessitates knowledge of whether optimal edges are absent in the candidate set, which, in turn, requires knowledge of the optimal tour. Yet, such information is obviously a priori not available.\nA candidate set generated from 2-opt tours typically includes all optimal edges in the vast majority of cases, leading to notably improved runtimes. How-ever, the most optimal performance is achieved with a lightweight restartable candidate set based on Hamiltonian circuits, such as POPMUSIC. Our newrestart variant, LKHpop, restart, outperforms all other LKH variants and, as shown in Figure 9, is a true contender to EAX as state-of-the-art TSP solver.\nThese findings open up numerous avenues for further research. Algorithm selectors can now benefit from true performance complementarity between EAX and our proposed solver, and thereby leverage the substantial performance im-provement without facing the challenge of (avoiding) excessive timeouts for LKH. Also, the candidate set creation with POPMUSIC can be further optimized, and the resulting performance differences can be examined depending on the under-lying instance types. New instances can be evolved to gain further insight into the complementary nature of EAX and LKH. Lastly, the impact of initial tours on EAX warrants investigation as well, considering the relatively long initial-ization time of the 2-opt population and the potential analogous enhancements with a different initial population type."}]}