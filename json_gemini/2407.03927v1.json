{"title": "Dancing to the State of the Art? How Candidate Lists Influence LKH for Solving the Traveling Salesperson Problem", "authors": ["Jonathan Heins", "Lennart Sch\u00e4permeier", "Pascal Kerschke", "Darrell Whitley"], "abstract": "Solving the Traveling Salesperson Problem (TSP) remains a persistent challenge, despite its fundamental role in numerous generalized applications in modern contexts. Heuristic solvers address the demand for finding high-quality solutions efficiently. Among these solvers, the Lin-Kernighan-Helsgaun (LKH) heuristic stands out, as it complements the performance of genetic algorithms across a diverse range of problem instances. However, frequent timeouts on challenging instances hinder the practical applicability of the solver.\nWithin this work, we investigate a previously overlooked factor contributing to many timeouts: The use of a fixed candidate set based on a tree structure. Our investigations reveal that candidate sets based on Hamiltonian circuits contain more optimal edges. We thus propose to integrate this promising initialization strategy, in the form of POPMUSIC, within an efficient restart version of LKH. As confirmed by our experimental studies, this refined TSP heuristic is much more efficient - causing fewer timeouts and improving the performance (in terms of penalized average runtime) by an order of magnitude - and thereby challenges the state of the art in TSP solving.", "sections": [{"title": "1 Introduction", "content": "The Traveling Salesperson Problem (TSP), also referred to as Traveling Sales-man Problem or Traveling Sales-rep Problem, is one of the most well-known combinatorial optimization problems and has thus been studied and researched in various domains for decades. While it often serves as a motivating example in"}, {"title": "2 Background", "content": "The Lin-Kernighan Heuristic [14] dates back to 1973 and is still a highly com-petitive algorithm in the form of LKH. The core concept introduced by Lin and Kernighan behind the heuristic has not changed and revolves around the construction of sequential k-opt moves, where k is unrestricted. If k equals the number of cities in a TSP instance, a k-opt move could potentially yield the optimal solution directly from any feasible solution. However, a sequential k-"}, {"title": "2.1 \u03b1-Candidate Set", "content": "In its original form, the Lin-Kernighan (LK) algorithm [14] constrained the search by considering only edges connecting each vertex to one of its five closest neighbors. However, Helsgaun [9] identified instances where the optimal edges did not emerge from this restricted set of candidates generated by the five-nearest-neighbor heuristic. Consequently, LKH incorporates a more sophisticated ap-proach, leveraging minimum 1-trees to derive a more accurate approximation of edge proximity to the optimal tour. Additionally, it employs subgradient op-timization techniques to further refine these estimations, enhancing the algo-rithm's effectiveness in finding high-quality solutions.\nA minimum 1-tree is related to, but distinct from, a spanning tree; it is formed by a minimum spanning tree encompassing all nodes except one, which is arbitrarily chosen. This remaining node is linked to the tree via two edges, connecting it with its closest two neighboring nodes, thus introducing a cycle."}, {"title": "2.2 2-opt Candidate Set", "content": "The use of minimum spanning trees is indeed likely to find edges with low cost that connect one vertex to another. But this strategy does not take into account that the edges must be part of a Hamiltonian circuit. By constructing locally optimal Hamiltonian circuits to sample edges, we improve the probability that the sampled edges can contribute to the globally optimal solution. Also, mini-mum spanning trees do not guarantee that there are at least two edges that are incident on every vertex. For example, in an asymmetric TSP, one directed edge must \"enter\" the city, and one directed edge must \"leave\" the city. This same idea generalizes to symmetric TSP instances. We thus argue that a more obvious and likely more productive way to initialize and populate the candidate set is to use edges that appear in some locally optimal Hamiltonian circuit.\nOne way to find useful edges is to sample them from local optima. A standard way to both define and discover local optima is to use the 2-opt operators. The 2-opt operator, when applied until no further improvement is possible, is guaranteed to generate locally optimal Hamiltonian circuits without any crossing"}, {"title": "2.3 POPMUSIC Candidate Set", "content": "Another similar approach that has been directly implemented in LKH (since ver-sion 2.0.9) is Partial Optimization Metaheuristic Under Special Intensification"}, {"title": "3 \u03b1-Candidate Set Pitfalls", "content": "Independent of the pruning strategy, LKH's ability to generate good solutions is limited when too many edges are removed from the search space. In fact, there are only three scenarios in which an edge, that is not part of the candidate set, can be introduced into the tour: (i) during the construction of the initial tour, (ii) to close a sequential k-opt move, and (iii) when kicking a local optimal tour. Kicking a tour refers to altering parts of a tour to escape local optima after no improving move can be found anymore. Helsgaun's strategy is to create a new random tour and disallow removing edges which are part of the current best solution [10]. An alternative strategy is a double bridge move, which combines two 2-opt moves that, if applied alone, would result in two separate circles.\nThe limitation to only three scenarios, which enable introducing edges that are not yet part of the candidate set, can even be seen for very small TSP"}, {"title": "4 Experimental Setup", "content": "The experiments with new LKH configurations were conducted using Intel Xeon Platinum 8470 CPUs, each being repeated for ten folds using a different starting seed (1000000 \u00d7 fold). For each restart, the seed was incremented by one. The cutoff time is set to one hour per run. In accordance with previous studies, we aggregate the run results per instance using the penalized average runtime (PAR10). In case of successful runs, this metric simply computes the average runtime needed to solve the instance. If an instance cannot be solved within the given budget, PAR10 penalizes the corresponding runtime by ten times the maximum runtime, i.e., 36000s, prior to aggregating the runtimes.\nWe maintain the standard settings of LKH except for the seed and the can-didate set. In our experiments, we create four distinct restart versions of LKH differentiated by the candidate set construction: LKH\u03b1, LKH2-opt, LKHpop, fixed, and LKHpop, restart. LKH\u03b1 corresponds to the vanilla restart version as described in [4], utilizing the \u03b1-candidate set. For LKH2-opt, we provide the 2-opt-based candidate set through a candidate set file. This set is generated from 1000 2-opt-optimized tours, from which all unique edges are symmetrically added to the candidate set and then ordered by their frequency. This process results in ap-proximately 5 \u00d7 n unique edges for all instances, where n represents the instance size. Both LKHpop, fixed and LKHpop, restart are POPMUSIC-based variants. In both variants, we restart the algorithm every time a solution was not found within one run. However, for LKHpop, fixed, we reuse a prerecorded POPMUSIC candidate set, whereas for LKHpop, restart, the candidate set is reinitialized at every restart. Note that when referring to LKH and EAX, we reuse old per-formance data [5,6] recorded on other CPUs, which may portray them slightly less favorably. However, our focus is on the structural performance differences, specifically whether the algorithm times out on a given instance or not, hence small differences in runtime are negligible. Further, note that we do not account for the initialization costs for the same reason.\nAll tests were conducted on the 10000 evolved instances from [2]. These instances were chosen to reveal performance variations across different candidate set configurations, as they encompass both highly challenging and easily solvable instances for LKH when using an \u03b1-candidate set."}, {"title": "5 Experimental Results", "content": "The candidate sets constructed with the edge frequency information of the 2-opt-optimized Hamiltonian circuits reliably contains all optimal edges. Only 26"}, {"title": "6 Conclusion", "content": "In this study, we explored the impact of various options for the candidate edge set of LKH. Our findings reveal that even a small number of missing edges can frequently result in algorithm timeouts. Instances that were evolved to be challenging for LKH were found to be primarily difficult due to the absence of optimal edges in the \u03b1-candidate set and a lack of changes to the candidate set between restarts. This highlights a significant challenge in algorithm selection for the TSP, a topic not thoroughly addressed in prior works. Choosing the appropriate algorithm for a specific instance necessitates knowledge of whether optimal edges are absent in the candidate set, which, in turn, requires knowledge of the optimal tour. Yet, such information is obviously a priori not available.\nA candidate set generated from 2-opt tours typically includes all optimal edges in the vast majority of cases, leading to notably improved runtimes. How-ever, the most optimal performance is achieved with a lightweight restartable candidate set based on Hamiltonian circuits, such as POPMUSIC. Our new"}]}