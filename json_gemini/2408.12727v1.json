{"title": "BankTweak: Adversarial Attack against Multi-Object Trackers by Manipulating\nFeature Banks", "authors": ["Woojin Shin", "Donghwa Kang", "Daejin Choi", "Brent Kang", "Jinkyu Lee", "Hyeongboo Baek"], "abstract": "Multi-object tracking (MOT) aims to construct moving tra-\njectories for objects, and modern multi-object trackers mainly\nutilize the tracking-by-detection methodology. Initial ap-\nproaches to MOT attacks primarily aimed to degrade the\ndetection quality of the frames under attack, thereby reduc-\ning accuracy only in those specific frames, highlighting a\nlack of efficiency. To improve efficiency, recent advance-\nments manipulate object positions to cause persistent iden-\ntity (ID) switches during the association phase, even after the\nattack ends within a few frames. However, these position-\nmanipulating attacks have inherent limitations, as they can\nbe easily counteracted by adjusting distance-related parame-\nters in the association phase, revealing a lack of robustness. In\nthis paper, we present BankTweak, a novel adversarial attack\ndesigned for MOT trackers, which features efficiency and ro-\nbustness. BankTweak focuses on the feature extractor in the\nassociation phase and reveals vulnerability in the Hungarian\nmatching method used by feature-based MOT systems. Ex-\nploiting the vulnerability, BankTweak induces persistent ID\nswitches (addressing efficiency) even after the attack ends by\nstrategically injecting altered features into the feature banks\nwithout modifying object positions (addressing robustness).\nTo demonstrate the applicability, we apply BankTweak to\nthree multi-object trackers (DeepSORT, StrongSORT, and\nMOTDT) with one-stage, two-stage, anchor-free, and trans-\nformer detectors. Extensive experiments on the MOT17 and\nMOT20 datasets show that our method substantially sur-\npasses existing attacks, exposing the vulnerability of the\ntracking-by-detection framework to BankTweak.", "sections": [{"title": "1 Introduction", "content": "Multi-object tracking (MOT) is a common perception\ntask aimed at constructing the motion trajectories of ob-\njects across consecutive frames. The modern DNN-based\ntracking-by-detection paradigm involves first identifying all\nobjects of interest in each frame (detection), then using ap-\npearance and motion cues to link these detections to exist-\ning trajectories (association). For association, a CNN-based\nmodel (e.g., OSNet (Zhou et al. 2019)) extracts features\nfrom each detected object, storing them in a feature bank\nif matched via feature-based matching or motion-based IoU\n(Intersection over Union) matching. Initially, feature-based\nmatching pairs objects with the highest feature similarity\nacross frames using the feature bank, followed by motion-\nbased IoU matching for unmatched objects."}, {"title": "2 Related work", "content": "Several adversarial attacks such as FGSM (Goodfellow,\nShlens, and Szegedy 2014) and PGD (Madry et al. 2017)\nwere proposed to efficiently address perturbations. Recently,\nextensive research has focused on adversarial attacks for\nvarious visual recognition tasks, including detection (Wang\net al. 2021; Xie et al. 2017), tracking (Yan et al. 2020; Jia\net al. 2020), and semantic segmentation (Xie et al. 2017).\nSome studies (Xu et al. 2020; Chen et al. 2019; Zhong et al.\n2022; Duan et al. 2021) have even brought adversarial at-\ntacks to the real world. In the realm of single object tracking,\nwhich is closely related to MOT, various attacks have been\nproposed based on different intuitions (Xu et al. 2020; Chen\net al. 2020). Additionally, detection attacks have induced\nvarious malfunctions, such as missed detections (Lu, Sibai,\nand Fabry 2017) or false alarms (Wang et al. 2021). How-\never, these methods have shown limited effectiveness in at-\ntacking multi-object trackers due to mission gaps. Recently,\nJia et al. (Jia et al. 2020) introduced MOT attacks focusing\non deceiving the Kalman filter (Kalman 1960) inside multi-\nobject trackers. To enhance effectiveness, they adopted an\niterative method for spreading perturbations to tackle dis-\nturbances. Concurrently, the F&F attack (Zhou et al. 2023)\nachieves ID switches in tracked objects by simultaneously\ntriggering missed detections and false alarms."}, {"title": "3 Method", "content": "We consider a tracking-by-detection MOT system, consist-\ning of detection and association phases, discussed in Sec. 1.\nBankTweak operates under the assumption of a white box\nattack, with the attacker knowing the detector and feature\nextractor models for the iterative execution of detection and\nfeature extraction across attack frames. BankTweak only\nneeds five frames for an attack without any false alarms\n(practicality), and does not necessitate motion prediction of\nobjects (generality).\nConsider an input video comprised of N sequential\nRGB frames \\(I \\in \\mathbb{R}^{W \\times H \\times 3}\\), represented as \\(V =\n\\{I_1, I_2,\\ldots, I_N\\}\\). We target a sequence of five consecutive\nframes starting from the \\((t + 1)\\)-th frame (for \\(1 < t\\)) for\nour attack, denoted by \\(S = \\{I_{t+1}, I_{t+2}, I_{t+3}, I_{t+4}, I_{t+5}\\}\\).\nLet \\(\\hat{I}_t\\) be a frame created by adding a perturbation \\(\\delta\\)\nto \\(I_t\\). By incorporating perturbations into every frame in\n\\(S\\), we generate \\(\\hat{S} = \\{\\hat{I}_{t+1}, \\hat{I}_{t+2}, \\hat{I}_{t+3}, \\hat{I}_{t+4}, \\hat{I}_{t+5}\\}\\) (for\n\\(t + 5 < N\\)). Substituting \\(\\hat{S}\\) in \\(V\\) with \\(\\hat{S}\\) yields \\(\\hat{V} =\n\\{I_1, I_2,..., I_t, \\hat{I}_{t+1}, \\hat{I}_{t+2},..., \\hat{I}_{t+5}, I_{t+6}, I_{t+7}..., I_N\\}\\).\nFor the given target input frame \\(I\\), the detector \\(D(\\cdot |\\theta_D)\\)\nparameterized by \\(\\theta_D\\), feature extractor \\(E(\\cdot,\\cdot |\\theta_E)\\) parameter-"}, {"title": "BankTweak mechanism", "content": "Fig. 2 presents the overall process to generate perturbations\nin BankTweak. To create perturbed features, BankTweak\nbegins with detecting objects in the input image \\(I_t\\) to iden-\ntify the object set (1). These objects are cropped and re-\nsized from the input image, aggregated into a batch, and then\nprocessed through the feature extractor to extract the feature\nset \\(F^*\\) (2). A comparison of the similarity between \\(F^*\\) and\nthe intended target feature set \\(F\\) is made, with the loss calcu-\nlated using the predefined loss function \\(L\\) (3). The loss de-\ntermined for each object is used to identify specific perturba-\ntions (4), which take into account the objects' coordinates\nand are then projected onto the input image (5), effectively\nintegrating these perturbations into the original image (6).\nThis procedure is iterated \\(R\\) times.\nThe primary objective of BankTweak is to switch the IDs\nof target objects \\(\\mathcal{A}\\) and \\(\\mathcal{B}\\), ensuring these changes remain\nconstant, even after the completion of the attack. This pro-\ncess unfolds in two steps. (i) Initially, BankTweak systemat-\nically injects perturbed features into the feature banks of \\(\\mathcal{A}\\)\nand \\(\\mathcal{B}\\), without initiating an ID switch. This preparatory ac-\ntion lays the groundwork for the next step. (ii) Subsequently,\nleveraging the altered feature banks established in (i), Bank-\nTweak executes the ID switch for \\(\\mathcal{A}\\) and \\(\\mathcal{B}\\), effectively\nachieving the intended consistent ID switch even after the\nattack. Fig. 3 presents the overall process by which Bank-\nTweak induces an ID switch between a pair of objects \\(\\mathcal{A}\\)\nand \\(\\mathcal{B}\\). For a clean frame \\(I_t\\), features \\(A\\) and \\(B\\) are extracted\nfrom objects \\(\\mathcal{A}\\) and \\(\\mathcal{B}\\), respectively, and are assigned ID 1\nand ID 2. These features are then stored in the feature banks\nof their corresponding objects. Consider \\(B|A\\) as feature \\(A\\)\ngenerated from \\(B\\) through an adversarial example mecha-\nnism (e.g., PGD (Madry et al. 2017)), which appears as \\(B\\)\nto humans but is identified as \\(A\\) by the deployed model. Bank-\nTweak selects the object pair \\(\\mathcal{A}\\) and \\(\\mathcal{B}\\) for an ID switch in\neach frame \\(I_t\\), fundamentally choosing \\(\\mathcal{A}\\) and \\(\\mathcal{B}\\) randomly\nwithout awareness of the Mahalanobis distance threshold,\nthereby satisfying generality.\nStep 1: Groundwork. It performs the following for the\nfirst three attacked frames:\n\\(\\hat{I}_{t+1}\\): Define \\(X\\) and \\(Y\\) as the dummy features that exhibit\na significantly large cosine distance from \\(A\\) and \\(B\\), ensur-\ning they are distinctly different. By definition, \\(X|A\\) and\n\\(Y|B\\) have a high cosine distance (e.g., 0.9) from \\(A\\) and\n\\(B\\), respectively, and are injected into the feature banks\nof \\(\\mathcal{A}\\) and \\(\\mathcal{B}\\) through IoU matching; it is assumed that"}, {"title": "3.3 Solving perturbations", "content": "BankTweak employs cosine distance to evaluate the sim-\nilarity between the features of two objects, facilitating the\ncreation of the target feature set \\(F\\) from an initial feature set\n\\(F^*\\), which is derived by\n\\begin{equation}\n\\begin{aligned}\nC(A, B) = 1 - \\frac{A \\cdot B}{\\|A\\| \\|B\\|},\n\\end{aligned}\n\\end{equation}\nwhere \\(A\\) and \\(B\\) are feature vectors of two distinct ob-\njects, each in \\(\\mathbb{R}^{1 \\times 512}\\). Eq. (3) produces values within the\n\\([0, 2]\\) range, with lower values denoting higher similarity\nand higher values indicating greater dissimilarity between\nthe features of two objects.\nFor a frame \\(I\\), which includes multiple objects, we define\nthe extracted feature set as \\(F^*\\) and its target feature set as \\(F\\).\nFor each feature \\(F^* \\in F^*\\), \\(F_i \\in F\\) represents its correspond-\ning target feature. BankTweak computes the loss for each\nfeature set \\(F^*\\), aggregates these losses, and applies the per-\nturbation collectively. This process employs a specific loss\nfunction formulated as\n\\begin{equation}\n\\begin{aligned}\n\\mathcal{L}(F^*, F) = \\sum_{F^* \\in F^*, F_i \\in F} C_d(F^*, F_i),\n\\end{aligned}\n\\end{equation}\n\\begin{equation}\n\\begin{aligned}\nC_d(F^*, F) = \\sum_{F^* \\in F^*, F_i \\in F} C(F^*, F_i).\n\\end{aligned}\n\\end{equation}\nFor each feature \\(F^* \\in F^*\\) and its target feature \\(F_i \\in F\\),\nthe loss \\(\\mathcal{L}^c\\) signifies that a lower value increases the similar-\nity between \\(F^*\\) and \\(F_i\\). Conversely, a higher value of \\(\\mathcal{L}^d\\) de-\ncreases the similarity between \\(F^*\\) and \\(F_i\\). For instance, the\ngoal for \\(\\hat{I}_{t+1}\\) is to generate \\(X|A\\) and \\(Y|B\\), thus the target\nfeature set \\(F = \\{F_1 = A, F_2 = B\\}\\), and \\(X|A\\) and \\(Y|B\\) are\ncreated to have the maximum possible cosine distance from\n\\(A\\) and \\(B\\), respectively, using Eq. (5). On the other hand, for\n\\(\\hat{I}_{t+2}\\), aiming to generate \\(B|A\\) and \\(Y|B|B\\), the target feature\nset \\(F = \\{F_1 = B, F_2 = Y|B\\}\\), and \\(B|A\\) and \\(Y|B|B\\) are\nproduced to be as close as possible to \\(A\\) and \\(B\\), respectively,\nusing Eq. (4). The feature sets \\(F^*\\), target feature set \\(F\\), and\nthe loss function for each attack frame are determined as fol-\nlows.\n\\(\\hat{I}_{t+1}\\): \\(F^* = \\{F_1^* = A, F_2^* = B\\}\\) and \\(F = \\{F_1 = A, F_2 = B\\}\\)\nwith \\(C_d (F^*, F)\\),\n\\(\\hat{I}_{t+2}\\): \\(F^* = \\{F_1^* = A, F_2^* = B\\}\\) and \\(F = \\{F_1 = B, F_2 = Y|B\\}\\)\nwith \\(\\mathcal{L}^c (F^*, F)\\),\n\\(\\hat{I}_{t+3}\\): \\(F^* = \\{F_1^* = A, F_2^* = B\\}\\) and \\(F = \\{F_1 = X|A, F_2 = A\\}\\)\nwith \\(\\mathcal{L}^c (F^*, F)\\),\n\\(\\hat{I}_{t+4}\\): \\(F^* = \\{F_1^* = A\\}\\) and \\(F = \\{F_1 = Y|B|B\\}\\)\nwith \\(C_d (F^*, F)\\), and\n\\(\\hat{I}_{t+5}\\): \\(F^* = \\{F_1^* = B\\}\\) and \\(F = \\{F_1 = X|A|A\\}\\)\nwith \\(\\mathcal{L}^c (F^*, F)\\)."}, {"title": "4 Evaluation", "content": "We compare the performance of the considered ap-\nproaches regarding efficiency, robustness, practicality, and\ngenerality. For efficiency, we utilize standard MOT accuracy\nmetrics such as IDF1 (Ristani et al. 2016) and HOTA (Luiten\net al. 2021). HOTA is the positive square root of the prod-\nuct of DetA and AssA, related to detection and association,\nrespectively. DetA is the proportion of accurately detected\nobjects, and AssA is the proportion of correctly tracked ob-\njects. We also evaluate the number of ID Switches denoted\nby IDsw. These metrics exclude attack frames for accuracy.\nFor robustness, we measure accuracy by varying the Ma-\nhalanobis distance threshold. For practicality, we measure\npDet and pID to assess the system's effectiveness in reduc-\ning new objects (mainly false alarms) during attack frames.\npDet is the ratio of the average increase in detections per at-\ntack frame to the ground truth GTt, and pID measures the\nincrease in ID counts. No metric is used for generality, as\nBank Tweak is designed to satisfy generality without requir-\ning prediction model information."}, {"title": "4.3 Ablation study", "content": "In feature-based\nmatching, trackers check if detected objects are within the\ntracked objects' matching boundary, set by a threshold \\(\\Lambda_m\\).\nThe Kalman filter models each tracked object's motion de-\ntails (e.g., center, width, and height) using a chi-square dis-\ntribution, represented by the probability density function\n\\(f(x)\\). The matching boundary is where 95% of position val-\nues are concentrated around the distribution's mean within\na \\(\\Lambda_m\\) distance. Figs. 5(a)\u2013(c) show IDF1 variations as \\(\\Lambda_m\\)\nincreases (e.g., \\(\\times 5\\) indicates \\(\\Lambda_m \\times 5\\)), noting that a higher\n\\(\\Lambda_m\\) expands the matching boundary, with \u201cMax\u201d occurring"}, {"title": "5 Conclusion", "content": "In this paper, we proposed a novel adversarial attack, Bank-\nTweak, designed to deceive multi-object trackers by attack-\ning feature extractors in the association phase to trigger per-\nsistent ID switches. Our method is robust against heightened\nMahalanobis distance thresholds and does not rely on false\nalarms or motion prediction for effectiveness. We demon-\nstrated our approach's versatility by applying it to three\npopular multi-object trackers, DeepSORT, StrongSORT, and\nMOTDT with one-stage, two-stage, anchor-free, and trans-\nformer detectors. Through comprehensive experiments on\npublic datasets, we explored a range of attacking tactics and\nestablished the effectiveness of Bank Tweak.\nto be proposed. Although BankTweak is also"}]}