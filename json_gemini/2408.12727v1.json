{"title": "BankTweak: Adversarial Attack against Multi-Object Trackers by Manipulating Feature Banks", "authors": ["Woojin Shin", "Donghwa Kang", "Daejin Choi", "Brent Kang", "Jinkyu Lee", "Hyeongboo Baek"], "abstract": "Multi-object tracking (MOT) aims to construct moving trajectories for objects, and modern multi-object trackers mainly utilize the tracking-by-detection methodology. Initial approaches to MOT attacks primarily aimed to degrade the detection quality of the frames under attack, thereby reducing accuracy only in those specific frames, highlighting a lack of efficiency. To improve efficiency, recent advancements manipulate object positions to cause persistent identity (ID) switches during the association phase, even after the attack ends within a few frames. However, these position-manipulating attacks have inherent limitations, as they can be easily counteracted by adjusting distance-related parameters in the association phase, revealing a lack of robustness. In this paper, we present BankTweak, a novel adversarial attack designed for MOT trackers, which features efficiency and robustness. BankTweak focuses on the feature extractor in the association phase and reveals vulnerability in the Hungarian matching method used by feature-based MOT systems. Exploiting the vulnerability, BankTweak induces persistent ID switches (addressing efficiency) even after the attack ends by strategically injecting altered features into the feature banks without modifying object positions (addressing robustness). To demonstrate the applicability, we apply BankTweak to three multi-object trackers (DeepSORT, StrongSORT, and MOTDT) with one-stage, two-stage, anchor-free, and transformer detectors. Extensive experiments on the MOT17 and MOT20 datasets show that our method substantially surpasses existing attacks, exposing the vulnerability of the tracking-by-detection framework to BankTweak.", "sections": [{"title": "1 Introduction", "content": "Multi-object tracking (MOT) is a common perception task aimed at constructing the motion trajectories of objects across consecutive frames. The modern DNN-based tracking-by-detection paradigm involves first identifying all objects of interest in each frame (detection), then using appearance and motion cues to link these detections to existing trajectories (association). For association, a CNN-based model (e.g., OSNet (Zhou et al. 2019)) extracts features from each detected object, storing them in a feature bank if matched via feature-based matching or motion-based IoU (Intersection over Union) matching. Initially, feature-based matching pairs objects with the highest feature similarity across frames using the feature bank, followed by motion-based IoU matching for unmatched objects."}, {"title": "2 Related work", "content": "Several adversarial attacks such as FGSM (Goodfellow, Shlens, and Szegedy 2014) and PGD (Madry et al. 2017) were proposed to efficiently address perturbations. Recently, extensive research has focused on adversarial attacks for various visual recognition tasks, including detection (Wang et al. 2021; Xie et al. 2017), tracking (Yan et al. 2020; Jia et al. 2020), and semantic segmentation (Xie et al. 2017). Some studies (Xu et al. 2020; Chen et al. 2019; Zhong et al. 2022; Duan et al. 2021) have even brought adversarial attacks to the real world. In the realm of single object tracking, which is closely related to MOT, various attacks have been proposed based on different intuitions (Xu et al. 2020; Chen et al. 2020). Additionally, detection attacks have induced various malfunctions, such as missed detections (Lu, Sibai, and Fabry 2017) or false alarms (Wang et al. 2021). However, these methods have shown limited effectiveness in attacking multi-object trackers due to mission gaps. Recently, Jia et al. (Jia et al. 2020) introduced MOT attacks focusing on deceiving the Kalman filter (Kalman 1960) inside multi-object trackers. To enhance effectiveness, they adopted an iterative method for spreading perturbations to tackle disturbances. Concurrently, the F&F attack (Zhou et al. 2023) achieves ID switches in tracked objects by simultaneously triggering missed detections and false alarms."}, {"title": "3 Method", "content": ""}, {"title": "3.1 Attack formulation", "content": "We consider a tracking-by-detection MOT system, consisting of detection and association phases, discussed in Sec. 1. BankTweak operates under the assumption of a white box attack, with the attacker knowing the detector and feature extractor models for the iterative execution of detection and feature extraction across attack frames. BankTweak only needs five frames for an attack without any false alarms (practicality), and does not necessitate motion prediction of objects (generality).\nConsider an input video comprised of N sequential RGB frames $I \\in R^{W\\times H\\times 3}$, represented as $V = {I_1, I_2,\\dots, I_N}$. We target a sequence of five consecutive frames starting from the $(t + 1)$-th frame (for 1 < t) for our attack, denoted by $S = {I_{t+1}, I_{t+2}, I_{t+3}, I_{t+4}, I_{t+5}}$.\nLet $I_t$ be a frame created by adding a perturbation $\\delta$ to $I_t$. By incorporating perturbations into every frame in S, we generate $\\widehat{S} = {\\widehat{I_{t+1}}, \\widehat{I_{t+2}}, \\widehat{I_{t+3}}, \\widehat{I_{t+4}}, \\widehat{I_{t+5}}}$ (for $t + 5 < N$). Substituting $\\widehat{S}$ in V with $\\widehat{S}$ yields $\\widehat{V} = {I_1, I_2,..., I_t, \\widehat{I_{t+1}}, \\widehat{I_{t+2}},..., \\widehat{I_{t+5}}, I_{t+6}, I_{t+7}\u00b7\u00b7\u00b7, I_N}$.\nFor the given target input frame I, the detector $D(\\cdot|\\theta_D)$ parameterized by $\\theta_D$, feature extractor $E(\\cdot,\\cdot|\\theta_E)$ parameter-"}, {"title": "3.2 BankTweak mechanism", "content": "Fig. 2 presents the overall process to generate perturbations in BankTweak. To create perturbed features, BankTweak begins with detecting objects in the input image It to identify the object set (1). These objects are cropped and resized from the input image, aggregated into a batch, and then processed through the feature extractor to extract the feature set F* (2). A comparison of the similarity between F* and the intended target feature set IF is made, with the loss calculated using the predefined loss function L (3). The loss determined for each object is used to identify specific perturbations (4), which take into account the objects' coordinates and are then projected onto the input image (5), effectively integrating these perturbations into the original image (6). This procedure is iterated R times.\nThe primary objective of BankTweak is to switch the IDs of target objects A and B, ensuring these changes remain constant, even after the completion of the attack. This process unfolds in two steps. (i) Initially, BankTweak systematically injects perturbed features into the feature banks of A and B, without initiating an ID switch. This preparatory action lays the groundwork for the next step. (ii) Subsequently, leveraging the altered feature banks established in (i), BankTweak executes the ID switch for A and B, effectively achieving the intended consistent ID switch even after the attack. Fig. 3 presents the overall process by which BankTweak induces an ID switch between a pair of objects A and B. For a clean frame It, features A and B are extracted from objects A and B, respectively, and are assigned ID 1 and ID 2. These features are then stored in the feature banks of their corresponding objects. Consider AB as feature A generated from B through an adversarial example mechanism (e.g., PGD (Madry et al. 2017)), which appears as B to humans but is identified as A by the deployed model. BankTweak selects the object pair A and B for an ID switch in each frame It, fundamentally choosing A and B randomly without awareness of the Mahalanobis distance threshold, thereby satisfying generality.\nStep 1: Groundwork. It performs the following for the first three attacked frames:\n\u00cet+1: Define X and Y as the dummy features that exhibit a significantly large cosine distance from A and B, ensuring they are distinctly different. By definition, XA and YB have a high cosine distance (e.g., 0.9) from A and B, respectively, and are injected into the feature banks of A and B through IoU matching; it is assumed that"}, {"title": "3.3 Solving perturbations", "content": "BankTweak employs cosine distance to evaluate the similarity between the features of two objects, facilitating the creation of the target feature set F from an initial feature set F*, which is derived by\n$C(A, B) = 1 - \\frac{A \\cdot B}{||A|| ||B||}$,\nwhere A and B are feature vectors of two distinct objects, each in $R^{1\\times512}$. Eq. (3) produces values within the [0, 2] range, with lower values denoting higher similarity and higher values indicating greater dissimilarity between the features of two objects.\nFor a frame I, which includes multiple objects, we define the extracted feature set as F* and its target feature set as F. For each feature $F^* \\in F^*$, $F_i \\in F$ represents its corresponding target feature. BankTweak computes the loss for each feature set F*, aggregates these losses, and applies the perturbation collectively. This process employs a specific loss function formulated as\n$\\mathcal{L}(F^*, F) = \\sum_{F^* \\in F^*, F_i \\in F} C_d(F^*, F_i)$,\n$C_d(F^*, F_i) = \\sum_{F^* \\in F^*, F_i \\in F} C(F^*, F_i)$.\nFor each feature $F^* \\in F^*$ and its target feature $F_i \\in F$, the loss $\\mathcal{L}^c$ signifies that a lower value increases the similarity between $F^*$ and $F_i$. Conversely, a higher value of $\\mathcal{L}^d$ decreases the similarity between $F^*$ and $F_i$. For instance, the goal for $\\widehat{I_{t+1}}$ is to generate X|A and Y|B, thus the target feature set $F = {F_1 = A, F_2 = B}$, and X|A and Y|B are created to have the maximum possible cosine distance from A and B, respectively, using Eq. (5). On the other hand, for $\\widehat{I_{t+2}}$, aiming to generate B|A and Y|B|B, the target feature set $F = {F_1 = B, F_2 = Y|B}$, and B|A and Y|B|B are produced to be as close as possible to A and B, respectively, using Eq. (4). The feature sets $F^*$, target feature set F, and the loss function for each attack frame are determined as follows.\n$\\widehat{I_{t+1}}$: $F^* = {F^*_1 = A, F^*_2 = B}$ and $F = {F_1 = A, F_2 = B}$ with $\\mathcal{L}^d(F^*, F)$,\n$\\widehat{I_{t+2}}$: $F^* = {F^*_1 = A, F^*_2 = B}$ and $F = {F_1 = B, F_2 = Y|B}$ with $\\mathcal{L}^c(F^*, F)$,\n$\\widehat{I_{t+3}}$: $F^* = {F^*_1 = A, F^*_2 = B}$ and $F = {F_1 = X|A, F_2 = A}$ with $\\mathcal{L}^c(F^*, F)$,\n$\\widehat{I_{t+4}}$: $F^* = {F^*_1 = A}$ and $F = {F_1 = Y|B|B}$ with $\\mathcal{L}^d(F^*, F)$, and\n$\\widehat{I_{t+5}}$: $F^* = {F^*_1 = B}$ and $F = {F_1 = X|A|A}$ with $\\mathcal{L}^c(F^*, F)$."}, {"title": "4 Evaluation", "content": ""}, {"title": "4.1 Experiment setting", "content": "Metrics. We compare the performance of the considered approaches regarding efficiency, robustness, practicality, and generality. For efficiency, we utilize standard MOT accuracy metrics such as IDF1 (Ristani et al. 2016) and HOTA (Luiten et al. 2021). HOTA is the positive square root of the product of DetA and AssA, related to detection and association, respectively. DetA is the proportion of accurately detected objects, and AssA is the proportion of correctly tracked objects. We also evaluate the number of ID Switches denoted by IDsw. These metrics exclude attack frames for accuracy. For robustness, we measure accuracy by varying the Mahalanobis distance threshold. For practicality, we measure pDet and pID to assess the system's effectiveness in reducing new objects (mainly false alarms) during attack frames. pDet is the ratio of the average increase in detections per attack frame to the ground truth GTt, and pID measures the increase in ID counts. No metric is used for generality, as Bank Tweak is designed to satisfy generality without requiring prediction model information.\nDataset. Experiments are conducted using the MOT17 and MOT20 pedestrian tracking datasets, with the experimental results for MOT20 provided in the supplementary material due to page limitations. Each dataset is split into two halves: one for training the considered detection model and the other for evaluation. The MOT17 and MOT20 datasets are further divided into 30-frame segments, yielding 83 and 148 segments, respectively. Experiments target each segment's (15\u201319)-th frames for attacks to accumulate features in the objects' feature banks over five frames, ensuring accurate evaluation of BankTweak's potential effects in practical tracking applications.\nImplementation details. To demonstrate the applicability, BankTweak is applied to three prominent multi-object trackers (DeepSORT, StrongSORT, and MOTDT denoted by DS, SS, and MD, respectively) with one-stage(YOLOX),"}, {"title": "4.2 Comparison to existing methods", "content": "We evaluate our approach against three principal baselines: (i) the FN attack (Lu, Sibai, and Fabry 2017), which reduces accuracy by removing objects' bounding boxes during attack frames, causing false negatives, (ii) Daedalus (Wang et al. 2021), which induces false positives by detecting multiple objects within attack frames, and (iii) the F&F attack (Zhou et al. 2023), which increases ID switches post-attack by creating false positives at detected object locations during attack frames. Hijacking (Jia et al. 2020) is excluded as it does not meet generality.\nEfficiency and robustness. Table 1 shows attack performance under the maximum Mahalanobis distance threshold, counteracting Hijacking and F&F attack with minimal accuracy drop (see Figs. 5(a)-(c)) on the MOT17 dataset. Table 1 (for YOLOX) demonstrates that BankTweak significantly decreases the IDF1 score across all trackers. For example, Bank Tweak lowers the IDF1 by 21.77 (i.e., 79.78 vs 58.01) for DS. It also increases the association metric IDsw while decreasing AssA, alongside a reduction in the detection metric DetA. These findings verify that BankTweak is capable of efficiently causing ID switches by creating perturbations via the feature extractor and interfering with the matching procedure. Unlike FN attack and Daedalus, BankTweak significantly affects performance by altering object IDs during attacks, with these changes persisting post-attack and resulting in a noticeable decline in IDF1 scores. The F&F attack shifts an object's position before the attack, creating a significant Mahalanobis distance from its original location after the attack, but increasing the Mahalanobis distance"}, {"title": "4.3 Ablation study", "content": "Varying Mahalanobis distance threshold. In feature-based matching, trackers check if detected objects are within the tracked objects' matching boundary, set by a threshold Am. The Kalman filter models each tracked object's motion details (e.g., center, width, and height) using a chi-square distribution, represented by the probability density function f(x). The matching boundary is where 95% of position values are concentrated around the distribution's mean within a Am distance. Figs. 5(a)\u2013(c) show IDF1 variations as Am increases (e.g., \u00d75 indicates Am \u00d7 5), noting that a higher Am expands the matching boundary, with \u201cMax\u201d occurring"}, {"title": "5 Conclusion", "content": "In this paper, we proposed a novel adversarial attack, BankTweak, designed to deceive multi-object trackers by attacking feature extractors in the association phase to trigger persistent ID switches. Our method is robust against heightened Mahalanobis distance thresholds and does not rely on false alarms or motion prediction for effectiveness. We demonstrated our approach's versatility by applying it to three popular multi-object trackers, DeepSORT, StrongSORT, and MOTDT with one-stage, two-stage, anchor-free, and transformer detectors. Through comprehensive experiments on public datasets, we explored a range of attacking tactics and established the effectiveness of BankTweak.\nLimitation. While there has been significant research on black box attacks in classification problems (Mi et al. 2023; Liang et al. 2022), there has been no remarkable progress in attacks in the domain of multi-object detection (and tracking) due to its inherent challenge (Ding et al. 2024). Consequently, an MOT attack based on black-box methodologies has yet to be proposed. Although BankTweak is also based on a white-box attack, as illustrated in Fig. 7(c), a transfer-based black-box attack on BankTweak can be feasible when object pairs (A and B) for an ID switch have similar features. This is because generating similar features for A from B (or vice versa) is easier, and creating untargeted features (e.g., X and Y) is simpler than targeting generation. Figs. 7(a) and (b) show that, while less effective than a white-box attack, this approach meets the necessary thresholds for BankTweak in a transfer-based attack. Thus, a black-box attack will work if it finds object pairs with similar features to those of the deployed detector. Research on attacking MOT, targeting multiple objects simultaneously, is still in its early stages. Notable studies include the F&F attack and Hijacking, both white-box attacks, while BankTweak significantly addresses their limitations. As BankTweak induces an ID switch between two target objects, it cannot switch its ID if there is only one object in the initial frame. However, Fig. 7(d) shows no frames with only one object; even the sparsest frames have at least two objects, which also holds for MOT20."}]}