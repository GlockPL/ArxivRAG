{"title": "DEFT: Differentiable Branched Discrete Elastic Rods for Modeling Furcated DLOs in Real-Time", "authors": ["Yizhou Chen", "Xiaoyue Wu", "Yeheng Zong", "Anran Li", "Yuzhen Chen", "Julie Wu", "Bohao Zhang", "Ram Vasudevan"], "abstract": "Autonomous wire harness assembly requires robots\nto manipulate complex branched cables with high precision\nand reliability. A key challenge in automating this process is\npredicting how these flexible and branched structures behave\nunder manipulation. Without accurate predictions, it is difficult\nfor robots to reliably plan or execute assembly operations.\nWhile existing research has made progress in modeling single-\nthreaded Deformable Linear Objects (DLOs), extending these\napproaches to Branched Deformable Linear Objects (BDLOS)\npresents fundamental challenges. The junction points in BDLOs\ncreate complex force interactions and strain propagation pat-\nterns that cannot be adequately captured by simply connecting\nmultiple single-DLO models. To address these challenges, this\npaper presents Differentiable discrete branched Elastic rods\nfor modeling Furcated DLOs in real-Time (DEFT), a novel\nframework that combines a differentiable physics-based model\nwith a learning framework to: 1) accurately model BDLO\ndynamics, including dynamic propagation at junction points\nand grasping in the middle of a BDLO, 2) achieve efficient\ncomputation for real-time inference, and 3) enable planning to\ndemonstrate dexterous BDLO manipulation. A comprehensive\nseries of real-world experiments demonstrates DEFT's efficacy\nin terms of accuracy, computational speed, and generalizability\ncompared to state-of-the-art alternatives.", "sections": [{"title": "I. INTRODUCTION", "content": "The automation of wire harness assembly represents a\ncritical challenge in manufacturing, particularly in the automo-\ntive and aerospace industries where complex, branched cable\nsystems are essential components. These assemblies require\nrobots to manipulate Branched Deformable Linear Objects\n(BDLOs) with precision over extended periods (\u22655s) [1, 2, 3],\na task that remains largely unautomated due to the objects'\ncomplex nonlinear dynamics. While accurate prediction of\nBDLO behavior is possible through computationally intensive\nmodels, real-time manipulation demands rapid computation.\nFurther complicating matters, practical assembly environments\noften involve occlusions that prevent perception systems from\nreliably estimating the full BDLO configuration.\nExisting approaches to modeling BDLOs [4, 5, 6, 7]\nhave focused primarily on computer graphics applications,\nprioritizing visual plausibility over physical accuracy. These\nmodels typically require extensive manual parameter tuning\nand make impractical assumptions about perfect state obser-\nvation-limitations that render them unsuitable for robotic\nmanipulation tasks. Recent advances in modeling single De-\nformable Linear Objects (DLOs) [8, 9, 10, 11, 12] have shown"}, {"title": "II. RELATED WORK", "content": "Effective BDLO modeling requires three critical capabili-\nties: real-time prediction, accurate 3D simulation, and efficient\nmodel parameter learning. Real-time prediction capability is\nessential for robotic manipulation tasks, where quick decision-\nmaking can mean the difference between successful and\nfailed object handling. Three-dimensional accuracy ensures\nthe model can capture the complex spatial deformations\nthat BDLOs undergo during manipulation, including twisting,\nbending, and branch interactions. Efficient parameter learning\nenables models to automatically adapt to different materials\nand configurations through data-driven optimization, reducing\nboth computational overhead and the need for extensive train-\ning data. This section reviews relevant approaches in modeling\nBDLOs and single DLOs while considering each of these\ncriteria."}, {"title": "A. DLOs Modeling", "content": "Approaches to modeling DLOs have evolved from purely\nphysics-based methods toward more sophisticated learning-\nbased frameworks that balance between the three aforemention\nkey capabilities.\nPhysics-based approaches implement different mathematical\nframeworks to model physical behavior. Mass-spring systems\nrepresent objects as networks of point masses connected by\nsprings, computing forces and accelerations to simulate move-\nment [13, 14, 15]. Position-Based Dynamics (PBD) directly\nmanipulates vertex positions to satisfy physical constraints,\navoiding expensive force calculations [10, 16, 9]. Finite Ele-\nment Methods (FEM) divide objects into discrete elements and\nsolve partial differential equations to compute deformations\n[17, 18, 19]. Discrete Elastic Rods (DER) models represent\nobjects as centerline curves with material frames, enabling\nexplicit modeling of bending and twisting [16, 20, 21, 22].\nUnfortunately each of these methods has limitations: mass-\nspring systems describe the rigidity of wires by introducing\nlarge spring stiffness which can make prediction numeri-\ncally unstable; PBD models struggle with parameter learning\nbecause they assume that the system is quasi-static; FEM\nmethods are computationally intensive; and DER models lack\ndifferentiable expressions for their model parameters, making\nefficient parameter optimization challenging.\nLearning-based modeling approaches use data-driven tech-\nniques to predict deformation behavior. Methods such as\nGraph Neural Networks (GNN) process vertex-level spatial\ninformation [12], while Bi-LSTM models capture temporal de-\npendencies in deformation sequences [11]. These approaches\nexcel at real-time prediction through efficient computation\nand support straightforward parameter learning through stan-\ndard optimization techniques. However, they struggle with\n3D accuracy, particularly in capturing the complex dynamic\ndeformations characteristic of real-world manipulation.\nRecent work has explored hybrid approaches that combine\nlearning with physics-based modeling. This is exemplified by\nDEFORM [8] which constructs a novel differentiable DER\nmodel and combines it with a neural network-based residual\nlearning approach to account for numerical integration errors\nduring prediction. This hybrid approach achieves both real-\ntime performance and 3D accuracy while enabling efficient\nparameter learning through end-to-end differentiability.\nDespite DEFORM's advances in DLO modeling, it faces\nthree significant limitations when extended to BDLO ap-\nplications. First, DEFORM's modeling framework does not\naddress the dynamics of branched structures, particularly the\npropagation of stretching, twisting, and bending forces at\njunction points. Second, DEFORM's manipulation framework\nassumes fixed clamping points at the object ends, following\nconventional DLO literature. This assumption restricts its\napplicability to more sophisticated manipulation tasks, such\nas thread insertion, which require grasping at multiple points"}, {"title": "B. BDLOs Modeling", "content": "Existing BDLO modeling approaches adapt various phys-\nical simulation frameworks to handle branched structures.\nFEM-based methods extend traditional finite element analy-\nsis by treating branches as connected elastic elements [23].\nWhile these methods excel in 3D accuracy and enable effi-\ncient parameter learning through gradient-based optimization,\ntheir computational requirements preclude real-time predic-\ntion. DER-based approaches introduce rigid-body constraints\nat junctions to ensure proper alignment of attached segments\n[4], achieving real-time performance and reasonable 3D ac-\ncuracy but struggling with parameter learning due to their\nfixed parameter structure. Quasi-static methods like ASMC en-\nforce geometric constraints while assuming static equilibrium\nconditions [5], offering real-time performance, but sacrificing\n3D accuracy by overlooking dynamic effects that can make\nparameter learning challenging.\nTo address these challenges, DEFT introduces a novel\ndifferentiable framework specifically designed for BDLOs.\nThrough a specialized GNN architecture for branched struc-\ntures, DEFT achieves all three critical capabilities: real-time\nperformance, 3D accuracy, and efficient parameter learning.\nThis enables DEFT to adapt to various materials and config-\nurations while maintaining the speed and accuracy necessary\nfor practical robotic manipulation tasks."}, {"title": "III. PRELIMINARIES", "content": "This section introduces the key components involved in\nmodeling DLOs. It then summarizes the primary contributions\nof DEFORM and describes the challenges of adapting it to\nBDLO modeling."}, {"title": "A. Deformable Linear Object (DLO) Model", "content": "To model a DLO, we represent it as an indexed set of n\nvertices at each time instance. The ground truth location of\nvertex i at time t is denoted by $x_i \\in \\mathbb{R}^3$, and the set of all n\nvertices is denoted by $X_t$. A segment, or edge, in the DLO is\nthe line between successive vertices, $e_i = x_{i+1} - x_i$. Let $E_t$\ncorrespond to the set of all edges at time t. Let $M_i \\in \\mathbb{R}^{3 \\times 3}$\ndenote the mass matrix of vertex i. The velocity of the vertices\nof the DLO is approximated by $V_t = (X_t - X_{t-1})/\\Delta t$,\nwhere $\\Delta t$ is the time step between frames. Note that $V_t$ is an\napproximation of the actual velocities. We distinguish between\nground truth elements and predicted elements by using the\ncircumflex symbol (e.g., $X_t$ is the ground truth set of vertices\nat time t, and $\\hat{X}_t$ is the predicted set of vertices at time t)."}, {"title": "B. Modeling DLOs with DEFORM", "content": "1) Discrete Elatic Rods (DER): DEFORM builds upon\nDER theory to model three distinct deformation modes of\nDLOs: bending, twisting, and stretching. DER theory models\nDLOs using two key families of coordinate frames. First, it\nintroduces Bishop Frames, which provide a twist-free ref-\nerence state along the centerline of the rod. The Bishop\nFrame only rotates to follow the curve's geometry, providing a\nrelaxed baseline configuration for the DLO. Second, the theory\nemploys Material Frames, which describe the actual physical\ndeformation of the rod. Material Frames can be expressed\nrelative to the Bishop Frames through a single angle whose\nrate of change represents the physical twist of the DLO. To\ndescribe the twist of the DLO, DER theory assumes that the\nangle of the Material Frame with respect to the Bishop Frame\nis one that minimizes the potential energy of the DLO. We\nbriefly summarize DER theory in this section, but a longer\nintroduction can be found here [24].\nBishop Frame: The Bishop Frame at edge i is made up of\nthree axes {$\\mathbf{t}^i, \\mathbf{b}^i_1, \\mathbf{b}^i_2$}. We next formally define each axis of\nthe Bishop Frame. First, $\\mathbf{t}^i \\in \\mathbb{R}^3$ is the unit tangent along edge\ni which is defined as $\\mathbf{t}^i = (\\mathbf{x}^i_{+1} - \\mathbf{x}^i)/||\\mathbf{x}^i_{+1} - \\mathbf{x}^i||_2$. The\nvector $\\mathbf{b}_1^i \\in \\mathbb{R}^3$ is defined iteratively by applying a rotation\nmatrix to the previous Bishop frame: $\\mathbf{b}_1^i = R^i \\cdot \\mathbf{b}^{i-1}$. The\nrotation matrix $R^i \\in \\mathbb{R}^{3 \\times 3}$ satisfies the following conditions\n$\\mathbf{t}^i = R^i \\mathbf{t}^{i-1}$ (1)\n$\\mathbf{t}^{i-1} \\times \\mathbf{t}^i = R^i \\cdot (\\mathbf{t}^{i-1} \\times \\mathbf{t}^i)$. (2)\nThe first condition ensures that the tangent vector of the DLO\nat each subsequent edge can be described using the rotation\nmatrix and the tangent vector at the previous edge. Though\nwe do not prove it here, the second condition ensures that the\nrotation between successive Bishop Frames is minimal while\nmoving along the DLO. In particular, this latter condition\nensures that there is no twist about the subsequent tangent\nvectors at each edge of the DLO. Finally, $\\mathbf{b}_2^i:= \\mathbf{t}^i \\times \\mathbf{b}_1^i$,\nwhich ensures that $\\mathbf{b}_2^i$ is orthogonal to $\\mathbf{t}^i$ and $\\mathbf{b}_1^i$.\nMaterial Frame: Subsequently, DER theory introduces\nMaterial Frames that are made up of three axes {$\\mathbf{t}^i, \\mathbf{m}^i_1, \\mathbf{m}^i_2$}.\nThese Material Frames are generated by rotating the Bishop\nframe about the tangent vector by a scalar $\\theta^i$, i.e., $\\mathbf{m}_1^i, \\mathbf{m}_2^i$ are\ndefined as\n$\\mathbf{m}_1^i = \\mathbf{b}_1^i \\cos \\theta^i + \\mathbf{b}_2^i \\sin \\theta^i$ (3)\n$\\mathbf{m}_2^i = -\\mathbf{b}_1^i \\sin \\theta^i + \\mathbf{b}_2^i \\cos \\theta^i$ (4)\nEquations of Motion: Let $\\Gamma(\\mathbf{X}_t, \\theta_t)$ denote the set of\nall n - 1 Material Frames at time t. Let $\\alpha$ represent the\nvector of material properties for each vertex of the DLO (i.e.,\nmass, bending modulus, and twisting modulus) [4, Section\n4.2]. Using these definitions, one can compute the potential\nenergy of the DLO arising from bending and twisting which\nwe denote by $P(\\Gamma(\\mathbf{X}_t, \\theta_t), \\alpha)$. DER theory assumes that the\nDLO reaches an equilibrium state between each simulation"}, {"title": "1) Discrete Elatic Rods (DER):", "content": "After numerical integration, the DLO length may deviate\nfrom its initial value due to numerical errors, making it difficult\nto accurately model inextensible DLOs. A common physics-\nbased approach [13, 14, 15] uses mass-spring systems to min-\nimize this deviation, but this can result in stiff simulations and\nnumerical instability. DEFORM addresses this by enforcing an\ninextensibility constraint while preserving momentum, leading\nto more accurate and stable simulation."}, {"title": "2) Differentiable Discrete Elastic Rods (DDER):", "content": "Tuning\nthe DER model parameters, $\\alpha$, to match real-world DLOS\nis non-trivial. To address this challenge, DEFORM intro-\nduces DDER, which enables the automatic tuning of DLO\nparameters using real-world data. Predicting $X_{t+1}$ with DDER\nthrough (7) and (8) involves solving an optimization problem\nas defined in (5). Consequently, minimizing the prediction loss\nrequires solving a bi-level optimization problem at each time\nstep t:\n$\\min_\\alpha ||X_{t+1} - \\hat{X}_{t+1}(\\theta)||^2$ (9)\n$\\theta = \\arg \\min_\\theta P(\\Gamma(X_t, \\theta_t), \\alpha)$ (10)\nNote $X_{t+1}$ depends on the previously computed $\\theta$ through\n(6), (7) and (8). To compute the gradient of (10) with respect\nto $\\alpha$, DEFORM employs solvers from Theseus [25], which\nuse PyTorch's automatic differentiation [26]. As we illustrate\nvia experiments in Section V, this can be a time-consuming\nprocess."}, {"title": "3) Challenges of Extending DEFORM to BDLOs:", "content": "Though\nDEFORM can accurately simulate single-thread DLOs, it is\nunsuitable for BDLOs for several reasons. First, the definitions\nof Bishop and Material Frames do not generalize to BDLOs.\nTo see why this is true, recall that at junctions in a BDLO\nthere are several tangent vectors because there are more than\ntwo edges. As a result, satisfying (1) and (2) results in an\noverdetermined system which makes it impossible to find a\nrotation matrix $R^i$ that satisfies all constraints. Consequently,\nthe Bishop and Material Frames cannot be defined at these\njunctions. An alternative to extend DEFORM to BDLOs is to\nsimulate each branch individually using DEFORM. However,\nthis requires repeatedly solving (5), which reduces compu-\ntational efficiency. This is further complicated when trying\nto enforce inextensibility using the momentum conservation\nconstraint. To address this, DEFT proposes a computational"}, {"title": "4) Integration Method with Residual Learning:", "content": "To compen-\nsate for numerical errors that arise during numerical integra-\ntion(8), DEFORM incorporates a learning-based framework\ninto the integration method:\n$\\hat{X}_{t+1} = X_t + \\Delta t(\\hat{V}_{t+1} + GNN(X_t, \\hat{V}_t, \\alpha))$ (11)\nThis structure builds on residual learning [27], grounding the\nneural network in physical laws while leveraging data-driven\ninsights."}, {"title": "IV. METHODOLOGY", "content": "Our objective is to model the dynamic behavior of a\nBDLO under robotic control. Traditional modeling approaches\nsimplify the problem by assuming that the DLO's endpoints\nare each held by separate robot end-effectors [8, 28, 16, 10, 29,\n30]. Although this assumption reduces complexity, it limits the\npotential for dexterous manipulation (e.g., inserting the middle\nof a BDLO into a plug). This work relaxes this assumption\nand considers scenarios where the BDLO is grasped at an\nintermediate point, rather than exclusively at its ends.\nThis section introduces the key components of BDLO mod-\neling and overviews the various components of DEFT. The key components of DEFT\nare: 1) analytical gradients to accelerate the optimization\nprocedure used to solve (5); 2) a GNN architecture tailored\nfor residual learning in BDLO simulations; 3) an inexten-\nsible constraint formulation that enables the propagation of\ndynamics at the junction between branches while conserving\nmomentum, which improves the numerical stability of the"}, {"title": "A. Branched Deformable Linear Object Model", "content": "To model a BDLO, we decompose its structure into a\nhierarchical arrangement of DLOs. The parent DLO is defined\nas the minimum-length path through the BDLO that connects\nthe two end-effectors (i.e., the points where the structure is\nmanipulated or anchored). All other branches diverging from\nthis primary path are modeled as children DLOs that maintain\ntheir physical connection to the parent DLO at their attachment\npoints, which we refer to as junction points. The parent and\nchildren DLOs are each modeled as DLOs and inherit all\npreviously introduced notation. For conciseness, we describe\nthe junction point using only three edges at each time instance:\ntwo from the parent DLO and one from a child DLO. In\nprinciple, the methods in DEFT can be extended to handle\njunctions with more than three edges.\nWe distinguish between the parent and child DLOs using\nsuperscripts p and c, respectively. For instance, if a junction is\nlocated at the i-th vertex, the associated edges are denoted by"}, {"title": "B. DEFT Overview", "content": "At each time t, DEFT simulates the behavior of a BDLO\nwhen given predictions of the vertices and their velocities\nunder a specified input as described in Algorithm 1. It begins\nby first associating the grasped vertices with the robot end ef-\nfector inputs $u_t$. DEFT then processes the parent and children\nDLOs in parallel to compute their respective material frames\nusing (3) (4), which are subsequently used to calculate each\nbranch's potential energy. DEFT then minimizes this potential\nenergy using analytical gradients to determine the optimal\nparameters and updates the potential energy accordingly\n(Line 2). These forces are integrated forward in time using a\nSemi-Implicit Euler method combined with residual learning\nto update the vertex velocities and positions (Lines 3 and 4).\nHowever, due to numerical integration errors, branch lengths\nmay change in length. In addition, up to this point, DEFT\ntreats each branch's internal dynamics in isolation, without\naccounting for junction interactions. This omission can hinder\nthe propagation of dynamics across junctions. For example,\nchildren DLOs may detach from their parent branches, or\ndeformation effects (e.g., bending and twisting) may not\npropagate through the junction. To address these issues, DEFT"}, {"title": "C. Analytical Gradient Derivation", "content": "The goal of this subsection is to present the analytical\ngradient of $P(\\Gamma(\\mathbf{X}_t, \\theta_t), \\alpha)$ with respect to $\\theta_t$. To improve the\npaper's readability, we summarize the result in the following\ntheorem whose proof can be found in Appendix A.\nTheorem 1. Let $\\Gamma(\\mathbf{X}_t, \\theta_t)$ be the Material Frame at time t,\nand let $\\alpha$ contain the bending stiffness $B \\in \\mathbb{R}^{3 \\times 3}$ and twisting\nstiffness $\\beta \\in \\mathbb{R}$. Suppose the total potential energy is the sum\nof bending and twisting potential energies:\n$P(\\Gamma(\\mathbf{X}_t,\\theta_t), \\alpha) = P_{bend}(\\Gamma(\\mathbf{X}_t, \\theta_t), B)+$\n$P_{twist} (\\Gamma(\\mathbf{X}_t, \\theta_t), \\beta)$. (12)\nThen the partial derivative of the bending and twisting poten-\ntial energies with respect to $\\theta^i$ are given by\n$\\frac{\\partial P_{bend} (\\Gamma(\\mathbf{X}_t, \\theta_t), \\alpha)}{\\partial \\theta^i} =$$\n$\\sum_{k=i}^{i+1} \\omega^{(k,i)},$ (13)\n$\\frac{\\partial P_{twist} (\\Gamma(\\mathbf{X}_t, \\theta_t), \\alpha)}{\\partial \\theta^i} = \\beta^i (\\theta^i - \\theta^{i-1}) -$$\n$\\beta^{i+1} (\\theta^{i+1} - \\theta^i),$ (14)\nrespectively, where the material curvature $\\epsilon^{(i,j)}$ is defined as\n$\\omega^{(i,j)} = (k b_1^m, k b_2^m)^T for j \\in {i-1, i},$ (15)\n$w^{(i,j)}$ denotes the undeformed material curvature, and the\ncurvature vector $k b_2$ in (15) is\n$k b^i =$$\n$\\frac{2 (e^{i-1} \\times e^i)}{||e^{i-1}||^2||e^i||^2 + e^{i-1} \\cdot e^i}.$ (16)"}, {"title": "D. Integration Method with Residual Learning", "content": "This subsection constructs the GNN for residual learning in\n(11). The motivation for employing a GNN lies in its ability"}, {"title": "Algorithm 1", "content": "(Xt+1, Vt+1) = DEFT(Xt, V\u2081, ut)\n1: Associate grasped vertices with ut\n2: Calculate Material Frames \u0393(\u03a7t, 0t)\n\u25b7 (3),(4)\n3:0 (Xt, a) = arg mino, P(\u0393(\u03a7t, \u03b8t), \u03b1) \u25b7 Section.IV-C\n4: Vt+1 = \u0176t \u2013 At\u039c-1 \u0398\u03a1 (\u0393(\u03a7\u03b5,\u03b8\u03b5 (\u03a7\u03b5,\u03b1)),\u03b1)\n\u25b7 (7)\nXt\n5: Xt+1 = Xt + \u2206t\u0176t+1 + GNN Section.IV-D\nJXt\n6: Constraints enforcement on Xt+1 \u25b7 Algorithm 2\n7: Vt+1 = (Xt+1 - Xt)/At\n\u25b7 Velocity Update\nreturn Xt+1, Vt+1"}, {"title": "E. Enforcing Constraints", "content": "After performing numerical integration, DEFT applies con-\nstraints to ensure branch inextensibility, ensure that branches\nare attached at the junctions, and ensure that deformations are\npropagated throughout the BDLO. To accomplish this, DEFT\nupdates the positions of each vertex using correction terms\n\u0394X. One could just update the positions of each vertex by\njust projecting directly onto the constraint set. However, this\ninduces highly nonlinear changes in momentum and can lead\nto simulation instability and unrealistic behavior.\nMotivated by the PDB method [36], DEFT enforces the\naforementioned constraints while trying to preserve momen-\ntum. DEFT does this by formulating the computation of the\ncorrection term as the solution to an optimization problem. As\nwe illustrate through our experimental evaluation in Section"}, {"title": "F. Parallel Programming", "content": "We implement DEFT using PyTorch [26], taking advantage\nof its batch operations to execute Algorithm 1. PyTorch's sup-\nport for batch-wise computations enables parallel processing\nof multiple parent and child branch instances, significantly\nenhancing computational efficiency as we illustrate empirically\nin Section V-D. Specifically, the first batch is dedicated to\nexecuting the parent branch's algorithm, while the remaining\nbatches handle executions for the children branches.\nOne challenge arises when the number of nodes in the parent\nbranch (np) differs from the number in a child branch (nc).\nThis dimensional mismatch prevents the direct construction of\nuniform matrices for batch operations. To overcome this, we\nassume np > n\u00ba and introduce padded matrices and vertices\nby appending zeros to the child branch's structure to match the\nparent branch's dimensions. This strategy ensures uniform ma-\ntrix construction across the batches, which facilitates seamless\nbatch-wise operations. During parameter updates, we mask\nout the gradients from padded elements to prevent them from\ninfluencing the learned parameters."}, {"title": "V. EXPERIMENTS AND RESULTS", "content": "This section presents the real-world evaluation of DEFT,\ncovering: 1) A quantitative accuracy comparison with state-\nof-the-art methods, including scenarios where grasping occurs\nat various points along the BDLO, such as parent-branch ends\nand midpoints; 2) An assessment of DEFT's inference speed;\n3) An ablation study exploring parameter auto-tuning, residual"}, {"title": "VI. LIMITATIONS", "content": "While DEFT shows promising results in modeling and\ncontrol of BDLOS, several limitations remain that could be\naddressed in future work. First, DEFT currently lacks a\ncontact model for accurately predicting interactions between\ndeformable components and their surroundings. Incorporating\na contact modeling framework, such as that proposed in\n[40], would enable more realistic simulations and more robust\nplanning in environments where collisions and frictional forces\nplay a significant role. Second, for the insertion tasks consid-\nered in this work, we assume that the location and geometry\nof the target hole are known in advance. In unstructured\nor partially observed environments, this assumption may not\nhold. Incorporating 3D scene understanding methods, such as\nGaussian Splatting [41], could help autonomously detect or\nrefine the location of target features and thereby increasing\nthe system's applicability to real-world scenarios. Lastly, this\nwork does not account for the orientation of the gripper\nduring BDLO manipulation, which can significantly affect\ndeformation behavior. As discussed in [16], gripper orientation\ncan influence the kinematics of deformable objects. Future\nextensions of DEFT should therefore incorporate a more\ncomprehensive treatment of gripper orientation to improve\naccuracy and expand the range of manipulable tasks."}, {"title": "VII. CONCLUSION", "content": "This paper introduces DEFT, a method that embeds residual\nlearning within a novel differentiable branched Deformable\nLinear Object (BDLO) simulator. DEFT enables accurate mod-\neling and real-time prediction of a BDLO's dynamic behavior\nover long time horizons under dynamic manipulation. To\ndemonstrate DEFT's efficacy, we conduct a comprehensive set\nof experiments evaluating its accuracy, computational speed,\nimpacts of its constribution and utility for manipulation tasks.\nCompared to the state of the art, DEFT achieves higher\naccuracy while remaining sample-efficient and without com-\npromising computational speed. This paper also illustrates how\nto integrate DEFT with a planning and control framework for\n3D shape matching and thread insertion of a BDLO in real-\nworld scenarios. DEFT successfully completes more complex,\nreal-world manipulation tasks than other tested baselines."}, {"title": "Algorithm 2", "content": "Momentum Preserving Constraint Enforcement\nRequire: Xt+1, K > 0\n1: while (i, j) such that C (Xt+1,0)\u00b2 > \u043a do\n2: for i = 1 to n - 1 do\n3: Xt+1 = Xt+1 + D\u2081(Xt+1) \u25b7 Theorem 2\n4: if ith segments is a junction then\n5: Xt+1 = Xt+1 + DA(Xt+1) \u25b7 Theorem 3\n6: Xt+1 = Xt+1 + Do(Xt+1) \u25b7 Theorem 4\n7: end if\n8: end for\n9: end while\n10: return : Xt\n\u25b7 Updated Vertices"}]}