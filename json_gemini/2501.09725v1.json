{"title": "Parallel multi-objective metaheuristics for smart communications in vehicular networks", "authors": ["Jamal Toutouh", "Enrique Alba"], "abstract": "This article analyzes the use of two parallel multi-objective soft computing algorithms to automatically search for high-quality settings of the Ad hoc On Demand Vector routing protocol for vehicular networks. These methods are based on an evolutionary algorithm and on a swarm intelligence approach. The experimental analysis demonstrates that the configurations computed by our optimization algorithms outperform other state-of-the-art optimized ones. In turn, the computational efficiency achieved by all the parallel versions is greater than 87%. Therefore, the line of work presented in this article represents an efficient framework to improve vehicular communications.", "sections": [{"title": "1 Introduction", "content": "Vehicular ad hoc networks (VANETs) are communication networks which use infrastructure-less wireless technology to create volatile networks that connect road user devices (e.g., vehicles on-board units) with each other and with road side infrastructure elements, as traffic lights or sensors (see Fig. 1). VANETs improve the safety and efficiency of the road traffic through powerful cooperative applications that gather and broadcast real-time road traffic information.\nRouting in VANETs is a critical issue in today's research due to the high speed of the nodes, rate of topology variability, and real-time restrictions of their applications. Hence, the research community is very active with hot topics, creating new VANET protocols and improving the existent ones (Lee et al. 2009).\nThe Ad hoc On Demand Vector (AODV) routing proto-col (Perkins et al. 2003), which is optimized in this study, has been previously analyzed for use in vehicular environments. Some authors have proposed changes to its parameter configuration to gain huge improvements over its quality-of-service (QoS) in VANETS (Said and Nakamura 2014). The configuration parameters of AODV have a strongly non-linear relationship with each other and a complex influence on its final performance. In fact, they represent a mix of discrete plus continuous variables which makes it a hard challenge to find the \"best\" configuration in a real-world scenario. Thus, exact and enumerative methods are not applicable for solving the underlying optimization problem of finding the \u201cbest\u201d AODV configuration, because they require critically long execution times to perform the search, and because we are far from having a traditional analytical equation. In this context, soft computing methods are a promising approach to find accurate QoS-efficient AODV configurations in rea-sonable times.\nThis article proposes the application of two parallel multi-objective optimization algorithms (MOAs) to com-pute AODV configurations that best fit the protocol to the requirements of VANETs. MOAs have emerged as robust and flexible methods for tackling multi-objective optimization problems (MOPs) achieving a high level of problem solving in many fields (Deb 2001)."}, {"title": "2 Related work", "content": "The application of metaheuristics to deal with a number of different problems in mobile ad hoc networks (MANETs) and VANETs can be found in many papers in the literature. Some of these studies use metaheuristics directly in the elements of the network to optimize a given feature, e.g., finding efficient routing paths (Huang et al. 2009). How-ever, these proposals are very difficult to use in real-world networks because they require intensive computation and/or some extra infrastructure networks elements.\nIn contrast, there are few papers that present the use of metaheuristics to optimize the operation of protocols as we do here. The idea is to use an offline optimization process that searches for optimized configurations of the protocol being considered to enhance some aspect of the network. Most of these approaches have been applied to optimize MANETs because VANETs are still an emerging technology.\nOne of the most outstanding contributions in the early literature in this domain is Alba et al. (2005), who proposed the optimization of the Delayed Flooding Cumulative Neighbor-hood broadcasting protocol. This study applied a specialized cellular MO Genetic Algorithm (GA) to optimize the cover-age, the network use, and the broadcasting time. Later, other authors proposed other soft computing methods to deal with the same problem (Durillo et al. 2008; Segura et al. 2009).\nOther examples in this line are the approaches presented by Cheng and Yang (2010), in which a GA is used to deal with the multicast routing problem, and the one presented by Ruiz et al. (2011), in which a hybrid cellular MOA is applied to optimize the coverage, the power consumption, and the broadcast time of the Enhanced Distance Based broadcast-ing protocol.\nIf we focus on the use of metaheuristics to optimize vehic-ular communications, just a few studies can be found in the literature. The Vehicular Data Transfer Protocol (VDTP) is optimized in order to improve data exchange between vehicles in terms of latency and transmission errors (Garc\u00eda-Nieto et al. 2010). Several single-objective optimization algorithms are applied to find optimized configuration para-meters of OLSR (Patil and Dhage 2013; Toutouh et al. 2012a; Zukarnain et al. 2014) and AODV (Garc\u00eda-Nieto and Alba 2010). These previous studies have tackled the QoS routing optimization in VANETs as a single-objective optimization problem. Thus, they compute a unique parameterization that optimizes"}, {"title": "3 Multi-objective AODV routing optimization in vehicular communications", "content": "VANET communications suffer from frequent link losses, mainly due to the high speed at which the mobile nodes are moving. This causes frequent network topology changes that limit the performance of the network (Lee et al. 2009). Thus, there are several research lines that address the defini-tion of efficient VANET routing mechanisms, which ensure the appropriate exchange of data, maximizing reliability and minimizing delays.\nIn this work, we restrict our attention to the AODV proto-col (Perkins et al. 2003) as the case-of-use, although nothing prevents our technology from being used for other differ-ent routing protocols. AODV is a unicast reactive routing protocol for mobile ad hoc networks. As a unicast protocol, it directs data from a single source to a single destination via multi-hop transmission techniques. As it uses a reactive mechanism, the routing paths are determined when the source node has data traffic to send, and they are maintained only while the paths are in use.\nIts route discovery process starts when a source node broadcasts a Routing Request (RREQ) packet to compute the routing path to a given destination. Neighbor nodes for-ward the RREQ to their neighbors, until an active route to the destination is found or a maximum number of hops is reached. When an intermediate node has the routing infor-mation to the desired destination, it sends a Route Reply (RREP) packet back to the source node. Finally, the source node receives the RREP including the route information. If the source node does not receive any RREP packet within a given time, it assumes that no route is available.\nThe AODV operation is principally governed by 11 con-figuration parameters (Perkins et al. 2003) that can be grouped in: (1) five timeout timers: HELLO_INTERVAL, ACTIVE_ROUTE_TIMEOUT, MY_ROUTE_TIMEOUT, NODE_TRAVERSAL_TIME, and MAX_RREQ_TIMEOUT; three decision variables used in the process of updat-ing and maintaining the routing tables: NET_DIAMETER, ALLOWED_HELLO_LOSS,and REQ_RETRIES; and three counters and decision variables that control the process of discovering new routing paths: TTL_START, TTL INCREMENT, and TTL THRESHOLD.\nIn this article, we aim to discover efficient configurations of AODV parameters based on their performance in VANETs by using pMOAs. The solutions evaluation is carried out by analyzing the"}, {"title": "4 Proposed parallel multi-objective metaheuristics", "content": "This section introduces the two bio-inspired multi-objective metaheuristics, NSGA-II and SMPSO, the parallel model analyzed, and the multithreading implementation utilized to improve their efficiency in the search of optimized AODV parameterizations."}, {"title": "4.1 Multi-objective metaheuristics", "content": "Metaheuristics are non-deterministic high-level computa-tional procedures applied to tackle hard-to-solve optimiza-tion problems with the aim of obtaining sufficiently good solutions. Multi-objective metaheuristics, as MOAs, emerged to deal with MOPs. MOAs return a set of solutions that represent different trade-offs among the optimized objective functions named Pareto front (Deb 2001). The VANET rout-ing MOP consists in finding efficient protocol settings that optimize simultaneously PDR and E2ED. In this article, we propose two pMOAs to tackle this problem based on different base algorithms: NSGA-II and SMPSO.\nNSGA-II is a well-known multi-objective evolutionary algorithm (MOEA) presented by Deb et al. (2002). Nowa-days, NSGA-II is one of the reference algorithms for solving multi-objective problems. Thus, we have selected it as the baseline for our research study. As an evolutionary algorithm, NSGA-II makes use of a set of solution vectors (individuals) named population. During the generational search process, it evolves the population by applying genetic operators to the individuals (recombination and mutation) and it keeps the best individuals in the population according to the crowding distance.\nIn contrast to using EAs, previous VANET routing opti-mization studies concluded that PSO algorithm obtained the most competitive results (Garc\u00eda-Nieto et al. 2010; Toutouh et al. 2012a) due to their competitive performance in solv-ing continuous problems. For this reason, we decided to also analyze SMPSO, which is an MO version of PSO (Nebro et al. 2009). SMPSO applies a velocity constriction method to mitigate the swarm explosion problem, suffered by most of early MO PSO approaches. SMPSO's solutions are known as particles and they are grouped in a swarm. The non-dominated solutions are stored in the leaders archive, which is updated by using crowding distance. During the iterative search process, SMPSO updates the speed and the position, applies the turbulence operator (mutation), and evaluates each particle. Finally, it updates the leaders archive."}, {"title": "4.2 Parallel multithreading model for the MOAS", "content": "The main issue when solving a VANET routing optimization problem is that solution evaluations require VANETs simula-tions, which are computationally expensive. Specifically, in our experiments, one evaluation takes in average 79 s. This limits the effectiveness of MOAs in finding competitive solu-tions in reasonable execution times. Thus, we have defined parallel MOAs(pMOAs) to address this limitation.\nThe PMOAs proposed here are categorized within the master-slave model according to the classification by Alba and Tomassini (2002). The master executes most of the oper-ators, e.g., the Pareto front computation, while the operation that requires most computing time, the evaluation of the solutions, is distributed among several slave processors (see Fig. 2). Here, the search space exploration is identical to that of a MOA executed on a single processor. There is no numer-ical change at all in their search processes, just an expected speed up in returning the results."}, {"title": "Algorithm 1 The pNSGA-II master process.", "content": "1: P initialize_population() // P = population\n2: while not termination_condition() do\n3: Q\u00d8\n4: P'\u00d8\n5: fori1 to (P.popSize / 2) do\n6: parents-selection(P)\n7: offspring-recombination(pnsga-ii.Pc, parents)\n8: offspring-mutation(pnsga-II.Pm,P')\n9: P' offspring UP'\n10: end for\n11: for i1 to (P'.popSize) in parallel do\n12: send_to_slave; (P'.solution;)\n13: wait_completion_and_receive_slave; (P'.solution, fitness_value;)\n14: end for\n15: insert(P',Q)\n16: R-PUQ // R = auxiliary resulting population\n17: ranking_and_crowding(R)\n18: P-select_best_individuals(R)\n19: end whileThus, we develop two pMOAs applying the master-slave paradigm to parallelize the evaluation operator of NSGA-II and SMPSO, named parallel NSGA-II (pNSGA-II) and par-allel SMPSO (pSMPSO), respectively. The two algorithms evaluate all the solutions just after they have been crafted, these evaluations are also performed in parallel. Algorithms 1 and 2 present the pseudocode of the master processes of pNSGA-II and pSMPSO, respectively."}, {"title": "4.3 Multithreading implementation", "content": "Multithreading programming allows executing parallel effi-cient algorithms by using multiple threads within a single process. It is well suited to multi-core computers, where each thread is executed on a single core. Communications and synchronizations are performed via a shared-memory using mutually exclusive operations to prevent simultaneous accesses.\nThe use of a thread pool mitigates the runtime overhead for creating and destroying threads. The application uses an available thread from the pool, performs its task, and returns the thread to the pool (instead of creating and destroying it). This implementation trick/hint reduces the computation cost, and therefore, the performance of the parallel program is improved.\nTherefore, our two pMOAs start by creating and initializ-ing a pool of threads to distribute the objectives function evaluations. Each thread receives several input parame-ters from the master process, including the solution to be evaluated, the thread identification, and the index in the bi-dimensional array of fitness values. Then, each slave process, that is implemented in each thread, performs the solution evaluation (see Fig. 3). The master process, which is imple-mented in the main thread of execution, assigns each"}, {"title": "5 Algorithm decisions for our techniques", "content": "This section describes the codification and the evaluation of the solutions utilized to tackle the MO-AODV optimization problem. In turn, it defines the implementations in the two proposed pMOAs."}, {"title": "5.1 Problem encoding", "content": "As it has been already stated, AODV is principally governed by 11 different configuration parameters. Thus, the solutions are encoded as vectors with 11 components $(S_i)$, one for each parameter (see Fig. 4).\nThe range of definition and the type (continuous R or discrete Z) of each component of this vector are shown in the third and the forth columns of Table 1."}, {"title": "5.2 Solution evaluation", "content": "This study focuses on maximizing the reliability in terms of PDR and minimizing the communication delays in terms of E2ED of AODV in VANETs. Thus, we define a MOP in which there are two objectives to be optimized, that are defined by two fitness functions $[f_1(s) and f_2(s)]$.\nThe fitness functions are evaluated after performing a VANET simulation configuring AODV with a given s para-metrization. (the details on what a simulation entails is presented in Sect. 6.1). The $f_1(s)$ function is given by the expression in Eq. (1), in which $PD R(s)$ is the average PDR achieved by all the VANET nodes. As $PD R(s)$ is a value from 0 to 100 (100 is the value achieved when all the data packets\nare delivered), then $f_1(s) \\in [0, 100]$. The idea is that the problem of maximizing PDR has been changed to a problem of minimizing $f_1(s)$ to ease the representation.\nThe $f_2(s)$ function evaluates the $E2E D(s)$ which is the average time that all the data packets take to arrive to their destination nodes (see Eq. 2). Thus, $f_2(s)$ has to also be minimized. The E2ED time is given in milliseconds (ms).\nTherefore, the problem of multi-objectively optimizing AODV in VANETs is given by minimizing $f_1(s)$ and $f_2(s)$.\n$f_1(s) = 100 - PDR(s)$\n$f_2(s) = E2ED(s)$"}, {"title": "5.3 Proposed operators", "content": "This section presents the operators defined for our pMOAs: the initialization and the mutation of the two pMOAs, and the recombination applied in pNSGA-II."}, {"title": "5.3.1 Initialization", "content": "We apply a uniform initialization to distribute the solutions of the solution set over different areas of the search space. The initialization operator splits the search space into solset_si ze (solution set size) diagonal subspaces, and it locates each solution in each subspace. Equation (3) summarizes the pro-cedure.\n$s_k(,) \\in [0, 10],\\quad k \\in [0, solset\\_size - 1]$\\tag{3}"}, {"title": "5.3.2 Mutation", "content": "The mutation operator introduces new information, and therefore, diversity to the population/swarm of the pMOAs. This information is randomly generated. That could be thought to provoke unfeasible solutions, but in practice it does not do so because the mutation movements are limited by the lower and the upper values of the parameter ranges (see Eq. 6).\n$new\\_s_{k,i} = s^{(g)}_{k,i} + \\beta_ix (z_{(i,MAX)} - z_{(i,MIN)})$\nEquation 5 defines the movement that depends on a uniform randomly distributed value $\\beta_i \\in [-0.5, 0.5]$ and on the range of values of the ith parameter defined in theMO-AODV optimization problem (see Table 1).\n$new\\_S_{k,i} = s^{(g)}_{k} + \\beta_i \\times (Z_{(i,MAX)} - Z_{(i,MIN)})$\nIn Eq. (6), $s_k^{(g+1)}$ is the new value computed for a mutated parameter i of the kth solution set to $new\\_S_{k,i}$ according to Eq. (5). If the movement does not fulfill the range restric-tions, then the i th parameter is set to the upper value of its range ($z_{(i,Max)}$) if $new\\_S_{k,i} > Z_{(i,MAX)}$ or to the lower value (-$(i,MIN)$) if $new\\_s_{k, i} <=(i,MIN)$."}, {"title": "5.3.3 The PNSGA-II recombination", "content": "The PNSGA-II presented here applies the arithmetic recom-bination operator for real-valued problem encodings. It defines a linear combination of two chromosomes, $s_p^{(g)}$ and $s_q^{(g)}$, according to Eq. (7), where the dominant individual governs the reproduction according to the weight $\\sigma\\in [0, 1]$.\n$s_{p,i}^{(g+1)} = \\alpha \\times s_{p,i}^{(g)} + (1 - \\alpha ) \\times s_{q}^{(g)}$\n$s_{q,i}^{(g+1)} = (1 - \\alpha ) \\times s_{p,i}^{(g)} + \\alpha \\times s_{q}^{(g)}$\\tag{7}"}, {"title": "6 Experimental analysis", "content": "This section summarizes the data set composed by 30 urban VANET scenarios utilized in our experiments. Then, we dis-cuss the initial phase of tuning the algorithms to solve the MO-AODV optimization problem. After this, the experimen-tal results are analyzed. Finally, the best solutions found are validated by comparing them with other state-of-the-art configurations.\nThe pMOAs have been implemented using jMetalCpp framework (Durillo and Nebro 2011) and the standard pthread library. The experimental analysis is done in a cluster with Opteron 6172 Magni-Core (24 cores) at 2.1 GHz, and with 24 GB RAM."}, {"title": "6.1 VANET scenarios data sets", "content": "The data sets used to perform the experimental evaluation of the computed AODV parameterizations by the pMOAs are composed by 30 urban VANET scenarios. These scenarios consider ten different road traffic situations and three communication patterns. The road situations are defined in three areas with different sizes of the downtown area of M\u00e1laga (Spain), named U1, U2, and U3, and different road traffic densities (see Fig. 5; Table 2). In all cases, realistic mobility models were generated using SUMO (Krajzewicz et al. 2006) traffic simulator, where vehicles move following intelligent driving patterns, for 180 s. The three different communication patterns are characterized by the bit rate generated by the applications (64, 128, and 256 kbps). VANETs performance information come from using the ns-2 network simulator (Ns2 2014). We have defined two different data sets to perform our experiments:\nThe fitness function data set (ff-ds), which is the data used to evaluate the objective functions in our algorithms. It is composed by the scenario defined at U2 area with 30 nodes transmitting at 256 kbps.\n\u2013 The validation data set (val-ds), which is utilized to validate the computed AODV configurations and to compare them with other state-of-the-art ones. It is composed by all the 30 scenarios defined in this section to represent a plenty of different VANETS.\nAll these VANET instances are publicly available online for the sake of future experiments (http://neo.lcc.uma.es/ vanet)."}, {"title": "6.2 The pNSGA-II and pSMPSO tuning experiments", "content": "In order to set the parameters for the two proposed pMOAs, a parameter settings analysis was performed. The pNSGA-II algorithm has two parameters: the crossover (pc) and mutation (\u0440\u043c) probabilities. The PSMPSO has just one: the mutation probability (\u0440\u043c).\nThe analysis was carried out on both pMOAs with a pop-ulation/swarm size of 24 solutions (24 threads), evaluating the solutions over ff-ds (scenario defined by U2 area with 30 nodes communicating at 256 kbps), using as stopping criterion to perform 300 generations. The candidate values for the parameters were for pc: {0.3, 0.5, 0.7, 0.9} Each configuration of each algorithm was independently executed ten times and we analyzed the hypervolume metric (Deb 2001) in order to perform the comparisons among different configurations of the same algorithm."}, {"title": "6.3 Results and discussion", "content": "This section presents the experimental analysis of the perfor-mance of pNSGA-II and pSMPSO in the search of optimized parameterizations of AODV in VANETs. The two pMOAs are studied, first, in terms of efficacy, and second, in terms of computational efficiency.\nThe stop criterion for both parallel approaches is to achieve a Pareto front with a given hypervolume value. Therefore, first, we present an initial experimentation carried out to compute the desired final hypervolume value, which is the median hypervolume value obtained by performing ten indepent runs of each pMOA. Then, we evaluate the pro-posed pMOAs in solving MO-AODV problem, in this case each algorithm performed 30 independent runs."}, {"title": "6.3.1 Defining an empirical stop criterion", "content": "The MO-AODV is a new and open problem and thus no opti-mal Pareto front is known. Therefore, we carried out some initial experimentation to compute an optimized Pareto front to later evaluate the hypervolume during the execution of the algorithms when solving the problem. These initial runs stopped after computing 450 generations. The union set of all non-dominated solutions computed for both algorithms is considered as the optimized Pareto front."}, {"title": "6.3.2 Computing optimized AODV parameters", "content": "In this section, we compare the performance of the two algo-rithms studied. Three different metrics are widely used in the literature to evaluate the quality of the Pareto front approx-imations: hypervolume (\u0406\u043d v), epsilon (I), and spread (I) values. We selected I and I to compare both algorithms because, as 90% of the independent runs stopped when they achieved a given hypervolume value, there is not a significant difference between the two pMOAs in the resulting hypervolumes (see Fig. 6)."}, {"title": "6.3.4 Computational efficiency", "content": "The most common metrics used to evaluate the performance of parallel algorithms are speedup (Sm) and computational efficiency (em ). The speedup measures how many times a par-allel algorithm works faster than a sequential one, where both programs are solving the same problem, and it is computed as the ratio between the execution time of the sequential algo-rithm (T\u2081) and the execution time of the parallel version using m processors (Tm). When evaluating the performance of non-deterministic algorithms, such as the pMOAs analyzed in this study, the speedup should compare the mean values of the sequential and parallel execution times (Alba and Tomassini 2002). The computational efficiency is the nor-malized value of the speedup, of processors used to execute a parallel algorithm\nIn order to compute E[T1], we carried out a set of experiments that consisted in sequentially executing both algorithms, NSGA-II and SMPSO, with the same config-urations as the parallel versions, that is, they were running in just one core (one thread). As the average execution times of the sequential versions of NSGA-II and SMPSO are 112.3 h (4.7 days) and 146.6 h (6.1 days), respectively, we were bound to perform just 10 independent runs of each algorithm due to the limited access to the computational platform (and the large number of tests done for the rest of this article).\nIn the proposed pMOAs, the evaluation of the fitness func-tion is the most consuming part within the algorithm, since the ns-2 simulations demand large computation costs. The results in Table 10 demonstrate that the proposed master-slave model is a successful choice to significantly improve the efficiency of the multi-objective metaheuristic algorithms analyzed in this study. The speedup values are larger than 20.8, obtaining highly satisfactory efficiency values both for pNSGA-II (90.1%) and pSMPSO (86.8 %)."}, {"title": ".4 Further validation in generalized VANET scenarios", "content": "A set of validation experiments were carried out to confirm the real practicality of our proposal. We compared the per-formance of our optimized configurations versus to other state-of-the-art AODV ones:\n\u2013 The standard AODV defined in the RFC 3651 (Perkins et al. 2003) (RFC).\n\u2013 The AODV optimized configuration proposed in Garc\u00eda-Nieto and Alba (2010), in which five metaheuristics are utilized to optimize this protocol (GA, Differential Evolution, PSO, Evolutionary Strategy, and Simulated Annealing). The \"best\" configuration was found by PSO (GN).\n\u2013 The AODV optimized parameterization applying a par-allel single-objective PSO (pPSO) proposed in Toutouh and Alba (2012b).\nAs criterion to chose a representative solution of each pMOA, we selected the solutions that minimize the distance to the ideal vector (Coello et al. 2007)."}, {"title": "7 Conclusions and future work", "content": "This article has proposed two parallel multi-objective meta-heuristics (pNSGA-II and pSMPSO) to deal with the problem of finding efficient AODV routing protocol parameteriza-tions, that maximize the reliability (PDR) and minimize the communication delays (E2ED), to be used in VANETs. The computed AODV configurations have been validated over a data set composed by 30 different realistic VANET scenar-ios. In the light of the experimental results, we can conclude the following.\n\u2013 Analyzing the optimization process, PNSGA-II signif-icantly outperformed pSMPSO in terms of diversity (spread) and convergence (epsilon) in solving MO-AODV optimization problem. In addition, pNSGA-II required lower computation costs: fewer generations and shorter run times.\n\u2013 The parallel model proposed here allowed the search to be performed efficiently, by simultaneously using a number of computing units (cores) to carry out the solutions evaluation (VANET simulations). The compu-tational efficiency of the proposed pMOAs was 86.8 % for pSMPSO and 90.1 % for pNSGA-II, which can be claimed to be highly competitive results from the point of view of parallelism.\n\u2013 The validation experiments have demonstrated that the configurations obtained by the PMOAs outperformed the state-of-the-art AODV parameterizations in terms of PDR while not leading to a degradation of the other net-work performance metrics.\nThere are three main lines for future work: (1) applying specific operators in the studied MOAs in order to improve their efficacy, e.g., a specific crossover operator for NSGA-II; (2)including other metrics in the MO VANET optimiza-tion problem, e.g., routing paths length; and (3) analyzing the results over real VANETs defined using real vehicles and devices, which is the actual final result pursued in this research line."}, {"title": "Compliance with ethical standards", "content": "Conflict of interest The authors declare that they have no conflict of interest."}]}