{"title": "CoDriveVLM: VLM-Enhanced Urban Cooperative Dispatching and Motion Planning for Future Autonomous Mobility on Demand Systems", "authors": ["Haichao Liu", "Ruoyu Yao", "Wenru Liu", "Zhenmin Huang", "Shaojie Shen", "Jun Ma"], "abstract": "The increasing demand for flexible and efficient urban transportation solutions has spotlighted the limitations of traditional Demand Responsive Transport (DRT) systems, particularly in accommodating diverse passenger needs and dynamic urban environments. Autonomous Mobility-on-Demand (AMoD) systems have emerged as a promising alternative, leveraging connected and autonomous vehicles (CAVs) to provide responsive and adaptable services. However, existing methods primarily focus on either vehicle scheduling or path planning, which often simplify complex urban layouts and neglect the necessity for simultaneous coordination and mutual avoidance among CAVs. This oversimplification poses significant challenges to the deployment of AMoD systems in real-world scenarios. To address these gaps, we propose CoDriveVLM, a novel framework that integrates high-fidelity simultaneous dispatching and cooperative motion planning for future AMoD systems. Our method harnesses Vision-Language Models (VLMs) to enhance multi-modality information processing, and this enables comprehensive dispatching and collision risk evaluation. The VLM-enhanced CAV dispatching coordinator is introduced to effectively manage complex and unforeseen AMoD conditions, thus supporting efficient scheduling decision-making. Furthermore, we propose a scalable decentralized cooperative motion planning method via consensus alternating direction method of multipliers (ADMM) focusing on collision risk evaluation and decentralized trajectory optimization. Simulation results demonstrate the feasibility and robustness of CoDriveVLM in various traffic conditions, showcasing its potential to significantly improve the fidelity and effectiveness of AMoD systems in future urban transportation networks.", "sections": [{"title": "I. INTRODUCTION", "content": "Demand Responsive Transport (DRT) systems have been a cornerstone of public transportation strategies for several decades, offering a flexible alternative to traditional fixed-route services [1], [2]. The core concept of DRT revolves around providing transportation services that can dynamically adapt to passenger demands, thereby optimizing resource use and enhancing user satisfaction. Initially, DRT was primarily associated with bus services to bridge the gap between fixed-route mass transit and individual taxi services [3]. Nonetheless, traditional DRT bus services have encountered several limitations, particularly in accommodating the diverse and dynamic transportation needs of modern urban environments, leading to inefficiencies and passenger dissatisfaction [4]. The advent of emerging technologies such as Vehicle-to-Everything (V2X) [5], [6] and autonomous driving [7], [8] has revolutionized the landscape of DRT systems, which pave the way for more advanced and adaptable solutions. These innovations have significantly altered the operational framework of DRT, providing a technological foundation for the development of Autonomous Mobility-on-Demand (AMoD) systems [9]. AMOD systems usually leverage the capabilities of connected and autonomous vehicles (CAVs) to offer highly responsive and efficient transportation services [10]. Essentially, AMOD systems promise to address the limitations of traditional DRT by enabling flexible coordination and optimization of vehicle routes and personalized passenger requests [11].\nIn AMoD systems, the cooperative driving of CAVs is a critical component, as it involves complex and dynamic task dispatching and path planning [12]. The scheduling of CAVS in response to passenger requests is particularly challenging due to the intricate configuration of urban traffic systems and diverse objectives of both passengers and CAVs. In detail, from the passengers' perspective, factors such as waiting time, total ride time, and the accessibility and reliability of CAV services are of paramount importance. Meanwhile, from the"}, {"title": "2\nCAV management perspective, driving efficiency, safety, and effective cooperation among CAVs are essential to ensure seamless operations as well [13]. Therefore, designing a comprehensive scheduling strategy for the CAVs in AMoD systems is challenging because of the diverse objectives and spatial relationships that are difficult to model in the system [14]. Recent advancements have explored the use of Reinforcement Learning (RL) for scheduling tasks within AMoD systems. A notable example involves the combination of multi-agent soft actor-critic with weighted bipartite matching to achieve scheduling on a smaller scale agents [15]. Despite the innovative nature of these approaches, RL-based methods encounter significant challenges and the scenario-specific feature hinders their deployment in real and more widespread environments. Specifically, the inherent complexity of AMoD dispatching, characterized by numerous variables and scenarios, complicates the design of a clear and effective reward function [16]. In addition, the limited availability of real-world or simulated datasets for AMoD task scheduling hampers the practical applicability and training efficiency of data-driven models [17].\nIn response to these challenges, various rule-based strategies have been proposed for task allocation, including Distance First, Idle First, Priority First, and so on [12], [14], [18]. These methods, structured around predefined rules, offer advantages in terms of simplicity and interoperability with low computational cost. However, due to the dynamic nature of urban transportation systems, they often fall short of providing the flexibility and adaptability required to achieve efficient scheduling. Algorithms designed for optimal assignment in transportation systems often model the problem using Mixed-Integer Linear Programming (MILP) [19], [20]. While this approach can yield precise and theoretically sound solutions for smaller-scale scenarios, it becomes increasingly impractical when deployed to larger and more complex systems.\nOn the other hand, the emergence of Large Language Models (LLMs) introduces new opportunities for task scheduling, leveraging their abilities in open-world understanding, reasoning, and few-shot in-context learning of common-sense knowledge [21], [22]. Initiatives such as DiLu have capitalized on textual environmental descriptions for single-vehicle decision-making [23]. The ability of LLMs to make contextual inferences and decisions points to a promising future for AMOD scheduling systems. For instance, LiMeda is presented for multiple heterogeneous vehicles for different tasks for smart cities, which shows the potential of LLMs in solving vehicle dispatching problems for intelligent transportation systems [18]. However, the application of multimodal LLMs, especially Vision-Language Models (VLMs), in AMoD scheduling and cooperative motion planning is still an emerging field with limited exploration [24]. Given their strong capabilities in information representation, particularly in processing images and textual information, VLMs have the potential to significantly enhance the representation and understanding of urban transportation systems [25], which highlight an important avenue for CAVs' dispatching research [26].\nDespite the potential of modern AMoD systems, current research efforts predominantly focus on vehicle scheduling, and the necessity of simultaneous motion planning and mu-", "content_latex": null}, {"title": "3\ntual avoidance among assigned vehicles after receiving the dispatching commands is overlooked. Many existing studies simplify the problem by treating maps or road layouts as grids [27], [28], which fail to address the complexities encountered in real-world deployments. In other representative works, pre-calculated shortest paths and travel time between all nodes are stored in the road network [29]. Thus travel time from a vehicle's starting point to its destination is directly retrieved from a predefined table without executing cooperative motion planning of the vehicles and potential route conflicts are neglected with ideal assumptions [30]. This simplification poses a significant challenge to the successful deployment of AMoD systems in complex urban environments. Furthermore, motion planning for AMoD systems is typically limited to simple scenarios, such as isolated road segments [31], [32].\nFor cooperative motion planning with predefined reference paths of the CAVs, learning-based and optimization-based methods are studied extensively following the scheduling phase within an AMoD system. Data-driven algorithms have gained attraction in addressing motion planning challenges for mobile robots and vehicles [33], [34]. In the realm of multi-agent pathfinding, PRIMAL utilizes imitation learning to mimic a centralized expert, enabling decentralized and efficient path planning while allowing for implicit agent coordination during execution [35]. However, despite its scalability for larger teams, PRIMAL's effectiveness diminishes in structured, densely populated environments that necessitate extensive coordination among agents [36]. To overcome this drawback, RL-APCP3 employs a bionic SARSA algorithm, inspired by slime mold behavior, to enhance performance in dense mapping scenarios [37]. For CAVs, a learning-based iterative optimization approach has been developed to navigate collision-free cooperative motion planning at unsignalized intersections [38]. Additionally, a novel multi-agent behavioral planning strategy leveraging RL and graph neural networks has been proposed for urban intersections, significantly boosting vehicle throughput [39]. Nonetheless, learning-based methods often demand extensive real-world data and lack interpretability, which limits their applicability across diverse traffic scenarios [40]. On the other hand, optimization-based methods for cooperative motion planning typically frame this task as an Optimal Control Problem (OCP). This framework provides a clear mathematical formulation and ensures optimality [32], [41]. For CAVs characterized by nonlinear vehicle models, OCPs are typically tackled using established nonlinear programming solvers, such as the interior point optimizer (IPOPT). Additionally, differential dynamic programming (DDP) addresses nonlinear OCPs by utilizing an approximation that considers first-order and second-order derivatives of the system dynamics [42], and the iterative linear quadratic regulator (iLQR) only considers the first-order terms via Gauss-Newton approximation to alleviate computational burden. However, standard DDP and iLQR methods are not designed to directly handle inequality constraints without additional modifications or constraint-handling techniques. Therefore, advanced versions like control-limited DDP and constrained iLQR have been developed [43]\u2013[45]. To mitigate the computational demands associated with cooperative driving in", "content_latex": null}, {"title": "3\nexpansive AMoD systems, the alternating direction method of multipliers (ADMM) presents an effective approach by breaking down the original optimization problem into a series of sub-problems. The distributed nature of ADMM makes it especially well-suited for cooperative motion planning among CAVs. For example, dual consensus ADMM has been implemented to establish a fully parallel optimization framework for the cooperative motion planning of CAVs [46]. This strategy effectively distributes computational responsibilities across all participating entities, achieving real-time performance. Despite these advancements, existing methodologies struggle to support large-scale cooperative driving due to the fully connected nature of the agents. A recent work that exploits the sparsity feature of optimization problems for involved vehicles [47], indicates a promising direction for enhancing computational efficiency in AMoD systems. However, the vehicle grouping strategy is still oversimplified, and this highlights another critical research gap that remains to be addressed.\nWith the above discussion as a backdrop, designing and executing a cooperative driving scheme that effectively supports passenger requests in future AMoD systems presents several challenges. First, achieving seamless integration of scheduling and collaborative motion planning for high-fidelity simulation effects, which are essential for deploying algorithms in future intelligent transportation systems. Second, robust and swift vehicle collaborative scheduling to handle complex road structures and multi-task multi-objective demand scenarios. Third, collaborative motion planning of large-scale CAVs facilitating dynamic request assignments, which requires the development of real-time guiding path generation and trajectory updating to adjust tasks as needed dynamically and safely.\nTo address the aforementioned challenges, we present Co-DriveVLM, a VLM-enabled urban cooperative driving framework. Our main contributions are as follows:\n\u2022 We formulate a high-fidelity simultaneous dispatching and cooperative motion planning platform that integrates multi-modality information generation, which enables the CoDriveVLM to operate dispatching and motion planning tasks cohesively.\n\u2022 We introduce the VLM-enhanced CAV dispatching coordinator with few-shot learning support, which is capable of managing complex and unseen AMoD conditions, facilitating efficient scheduling decision-making for CAVs.\n\u2022 In response to the dynamic dispatching requirements, we propose a VLM-ADMM-hybrid system for cooperative motion planning, focusing on collision risk evaluation and efficient decentralized trajectory optimization.\n\u2022 The simulations in CARLA demonstrate the feasibility of our proposed high-fidelity AMOD simulation platform, and the results highlight the effectiveness and potential of VLM-enhanced decision-making modules for future transportation systems.\nThe rest of the paper is organized as follows: Section II provides the mathematical notations in the paper. In Section III, we formulate the problem and introduce the architecture of the AMOD system employed in the paper. In Section IV and Section V, we present a closed-loop cooperative dispatching and motion planning strategy supported by the CoDriveVLM framework. In Section VI, we demonstrate the performance of the proposed methodology through a series of simulations. Section VII presents the conclusion.", "content_latex": null}, {"title": "II. NOTATIONS", "content": "In this paper, we use $O$ to express a multi-channel BEV image with different kinds of semantic objects, e.g., occupied and free vehicles, road layouts, lane centers, and passenger requests. The corresponding language-enhanced map of $O$ is denoted as $L(O)$, which contains the textual semantic description and geometric cues for further implementation in the prompt engineering for VLMs. We define an undirected graph $G = (N, E)$, where $N$ denotes the set of nodes and $E$ represents the set of edges between these pairs of nodes. The subgraphs of the graph $G$ are denoted as $H$. The number of CAVs in the kth subgraph $H_k = (N_k, E_{k,h})$ is denoted as $N_k$, where the index k of the subgraph is omitted for clear representation in the rest of the paper. An edge $(n^i, n^j) = dis_{ij} \\in E_h$ exists if the distance $dis_{ij}$ is less than a threshold $r_{iele} \\in \\mathbb{R}_+$, where $\\mathbb{R}_+$ is the set of non-negative real numbers. The cardinality of a node $n^i$ in $H$ is defined as $|n^i| = deg(n^i)$, representing the number of connected non-self nodes in the neighbor set:\n$$N^i = {j \\in N | (i, j) \\in E_h}.$$", "content_latex": "$N^i = {j \\in N | (i, j) \\in E_h}.$"}, {"title": "4\nThe set of non-negative integers is denoted by $\\mathbb{Z}_+$. The set of logical or Boolean matrices is indicated by $\\mathbb{B}$. The notation $[\\cdot]_i$ corresponds to the variable associated with the $i$th CAV, and $[\\cdot]_\tau$ indicates the variable at the time step $\\tau$, e.g., $O_\tau$ is the BEV image aggregated at the time step $\\tau$. For clarity, we denote the row-concatenated vectors as $[s_1, s_2, ..., s_m]$ and the column-concatenated matrix as $[s_1; s_2; ...; s_n]$, where $s^i$ is described as a state vector of the $i$th object. The squared weighted $L_2$-norm is expressed as $x^\\top M x$, which we simplify to $||x||_M$. An indicator function with respect to the set $X \\subset \\mathbb{R}^n$ is represented as $I_X(x)$, taking the value of 0 if $x \\in X$ and $+\\infty$ otherwise. The floor function, denoted by $\\lfloor x \\rfloor$, is defined as the greatest non-negative integer in {$n \\in \\mathbb{Z}_+ | n \\leq x < (n + 1)$}.", "content_latex": null}, {"title": "III. AMOD FRAMEWORK DESIGN AND FORMULATION", "content": "The demand for future transportation systems is rapidly evolving, driven by the increasing need for efficient, reliable, and personalized mobility solutions. AMoD systems are at the forefront of this evolution, promising to revolutionize urban transportation by leveraging CAVs. To realize the full potential of autonomous driving, these systems are recommended to facilitate unsignalized cooperative on-road driving (e.g., junction crossing), effectively navigating environments without traditional traffic lights to increase traffic flow. This necessitates advanced coordination and mutual avoidance strategies among CAVs to maintain high levels of safety and efficiency.\nMoreover, personalized passenger service is a critical aspect of AMoD systems, as demonstrated by the launch of services such as Baidu Apollo Go, a leading robotaxi service in major"}, {"title": "4\ncities such as Beijing and Wuhan [48]. In such systems, requests are dynamically generated, and CAVs must respond promptly based on factors such as distance, passenger waiting time, and other contextual factors. The ability to accommodate a diverse range of passenger needs and preferences is paramount to the successful application of AMOD systems.\nMoreover, the primary challenges in AMoD systems involve the seamless integration of vehicle scheduling, path planning, and collision avoidance. Specifically, the system must efficiently assign CAVs to passenger requests, which are randomly generated on urban roads without fixed taxi stands or stops. This requires a robust dispatching mechanism capable of handling dynamic environments and fluctuating demand patterns.\nOnce assignments are made, the system must generate accurate navigation routes for CAVs to reach their destinations across different stages of the scheduling process. This involves determining optimal paths that consider traffic conditions, road networks, and passenger requirements. Furthermore, handling collision avoidance is crucial as CAVs navigate urban roads to pick up and drop off passengers. Therefore, ensuring high commuting efficiency while preventing collisions demands a cooperative approach to motion planning, where CAVS communicate and coordinate with each other to optimize their movements. Given the above analysis, we aim to design an integrated framework for AMoD systems that enables efficient, safe, and personalized urban transportation. The framework must address the following key challenges:\n1) Dynamic Dispatching: Efficiently assign CAVs to passenger requests, considering factors such as proximity, waiting time, and passenger preferences.\n2) Optimal Routing: Generate optimal travel routes for CAVs based on traffic conditions, road networks, and passenger needs to ensure efficient and timely service.\n3) Collision Avoidance: Implement coordination mechanisms to allow CAVs to safely navigate complex urban environments through cooperative motion planning and control.\n4) Personalized Service: Provide tailored services that meet the unique requirements and preferences of passengers to enhance user satisfaction.\nOur solution integrates elements from artificial intelligence, optimal control, and V2X communication to develop a comprehensive AMoD system capable of operating seamlessly in dynamic urban settings.", "content_latex": null}, {"title": "B. Configuration Design of the AMoD System", "content": "Based on the above problem definition, the AMoD system architecture is designed around two primary sub-tasks: dispatching of the CAVs to the flexible passenger requests, and motion planning for the CAVs mitigating their route conflicts.\n1) Dispatching of the CAVs for Flexible Passenger Requests: The dispatching process involves managing passenger requests and vehicle assignments. On the one hand, passenger requests are represented as a discrete mapping:\n$$R = {(j, d_j, T_{sp,j}, A_j, P_j, k_j, T_{pk,j}, A_j, T_{ar,j})}, j\\in \\mathbb{Z}_+,$$", "content_latex": "R = {(j, d_j, T_{sp,j}, A_j, P_j, k_j, T_{pk,j}, A_j, T_{ar,j})}, j\\in \\mathbb{Z}_+,"}, {"title": "4\nwhere $j$ is the unique ID of a passenger request, $d_j$ is the position vector $[x, y]^\\top$ of the request, $T_{sp,j}$ is the spawn time of the request $j$, $A_j, P_j, G_j \\in \\mathbb{B}$ are boolean indicating whether the request is assigned, picked and got to the destination, respectively. Besides, $k_j$ is the ID of the assigned CAV (or None if unassigned), $T_{pk,j}$ is the pickup time, and $T_{ar,j}$ is the arrival time of the same passenger $j$.\nOn the other hand, vehicle assignments are described as:\n$$V = {(i, R_i, h_i, F_i)}, i \\in \\mathbb{Z}_+,$$", "content_latex": "V = {(i, R_i, h_i, F_i)}, i \\in \\mathbb{Z}_+,"}, {"title": "2) Motion Planning with Collision Mitigation: For CAVS with $F_i = 1$, the task is to efficiently pick up and drop off assigned passengers $h_i$. This involves self-driving without collisions, necessitating cooperative motion planning and control strategies. Such strategies ensure that CAVs navigate complex urban environments while maintaining high efficiency and safety. Furthermore, following each receding horizon iteration of the motion planning process with a time period $T_p$, the terminal states of the CAVs are evaluated. Upon detecting that a task should transition to the next stage or conclude, the dispatching module executes the necessary procedures to ensure closed-loop and dynamic completion of autonomous mobility. The procedures involve updating the discrete mapping of the corresponding passenger request and CAV, re-planning the initial path for the CAV for subsequent time horizons.", "content": "where $i$ is the specific ID of a CAV, $h_i = j$ is the assigned passenger request ID, $R_i = [r_0, r_1,..., r_n]^\\top$ is the reference path to the destination (location of the passenger request $j$ or its destination $d_j$ in different stages), and $F_i \\in \\mathbb{B}$ is a boolean indicating the vehicle's availability.", "content_latex": null}, {"title": "C. Coordination of the Frequency of the Sub-Systems", "content": "The AMOD framework incorporates a hybrid system to balance the request needs of motion planning and vehicle dispatching. Trajectory planning with a receding horizon approach is crucial to adapt to dynamic changes. Conversely, dispatching can be less frequent when all CAVs are occupied and no new assignments are needed. Based on the above consideration and inspired by [49], we propose the hybrid system for the CoDriveVLM scheme that synergizes the strengths of VLMs with the optimization-based cooperative motion planning methods.\n1) Fast System: The fast system with a fixed frequency (e.g., a receding horizon of $T_p = 2.0s$ with a discrete time step of $\\Delta T = 0.1 s$) focuses on cooperative motion planning and control, enabling CAVs to adjust their motion swiftly in response to real-time conditions in a closed-loop manner. Concretely, within this structured framework, all CAVs collaboratively plan their trajectories based on the reference path $R_i$ within the discrete mapping $V$. This planning takes into account both mutual avoidance and overall driving efficiency, aiming to maintain the reference velocity $V_{ref,i}$ as closely as possible. Therefore, this cooperative planning approach is supposed to ensure that CAVs operate harmoniously, minimizing potential conflicts and optimizing traffic flow. The strategic coordination facilitated by this system is crucial for achieving seamless integration of CAVs within complex traffic"}, {"title": "5\nenvironments, ultimately contributing to a more adaptive and responsive transportation network.\n2) Adaptive Frequency System: The adaptive frequency system manages the dispatching of free CAVs with $F_i = 1$, for newly added and pending passenger requests in the set ${R_j | k_j = None} \\in R$. This system operates at a variable frequency, adapting to the availability of vehicles and the emergence of new requests over time. Specifically, the event-triggering condition is\n$${({R_j | k_j = None} \\neq \\emptyset, j\\in \\mathbb{Z}_+,\n{V_i | | F_i = 1} \\neq \\emptyset,\ni \\in \\mathbb{Z}_+,\n\\eqno{(4)}}$$", "content_latex": "{({R_j | k_j = None} \\neq \\emptyset, j\\in \\mathbb{Z}_+,\n{V_i | | F_i = 1} \\neq \\emptyset,\ni \\in \\mathbb{Z}_+,\n\\eqno{(4)}}"}, {"title": "LEARNABLE VLM-ENABLED COOPERATIVE DISPATCHING", "content": "where $R_j \\in R$ and $V_i \\in V$, as the two sets are defined in (2) and (3). Therefore, once there are potential passenger requests for assignment, the dispatching module is executed to get a rational command to the available CAVs at that time step $\\tau$. By optimizing dispatching activity frequency in this manner, the system ensures efficient utilization of VLM inferring resources and enhances overall service responsiveness.\nIV.\nThis section presents the VLM-enabled cooperative dispatching methodology, a core component of the CoDriveVLM framework. This methodology underpins the coordination of CAVs within AMoD systems, leveraging advanced multimodal data processing for optimal task assignment. The following content details the overall architecture, context generation, memory storage, and retrieval processes integral to this system."}, {"title": "A. Overall Architecture", "content": "The overarching architecture of the presented CoDriveVLM is based on a hybrid system, featuring different operating frequencies in its upper and lower components, as illustrated in Fig. 2. Concretely, it contains the dispatching coordinator and the cooperative motion planner. Together, they facilitate closed-loop schedule and passenger transport operations, ensuring that each CAV is controlled with a microscopic precision that guarantees safety, efficiency, and keeps a good passenger experience. The dispatching coordinator, enhanced by the context understanding and reasoning capabilities of VLMs, processes multimodal information and inferences with the CoT technique to assign tasks to CAVs dynamically."}, {"title": "B. Context Generator", "content": "The context generator plays a crucial role in synthesizing perceptive elements from the urban environment, laying the groundwork for effective dispatching decisions. As marked in the first module of Fig. 2, it integrates information about road layouts, passenger requests, vehicle states, and others, producing a comprehensive situational awareness model.\n1) Perceptive Elements: The perceptive elements denote the foundational data inputs for the context generator. They encompass the road layout, capturing the physical configuration of urban roads, including lanes, intersections, the center lines of the lanes, and so on. This data is critical for understanding the navigational constraints and opportunities within the environment. As expressed by R in (2), passenger requests are also crucial, providing real-time data regarding passenger demand,"}, {"title": "6\nincluding pickup and drop-off locations, which guide the task assignment and routing of CAVs. As depicted by V in (3), vehicle states are represented as a discrete mapping of CAV positions, orientations, and operational statuses, facilitating the dynamic allocation of tasks. Lastly, the task commands, which describe the AMoD system's purpose, direct the VLMs' decision for the operational behavior of CAVS.\n2) Annotation Rules of Multimodal Contexts as VLM inputs: The annotation rules are critical for transforming raw perceptive data into actionable insights. These rules dictate the representation of information within both BEV images and supplementary text.", "content": null}, {"title": "7", "content": "b) Supplementary Text Annotation: As shown in Fig. 4, the language-enhanced map with supplementary text L(O) comprises three distinct components: firstly, a predefined system message, which does not pertain to the specific scenario at a given time step; secondly, a human message that delineates the status of traffic entities at each time step when invoking the VLM; and thirdly, a memory message that aggregates previous similar human messages compared with the current situation, along with the corresponding responses called Al message generated by the VLM agent. The system message component"}, {"title": "7\nprovides detailed descriptions of the driving environment, including the representation method of different lane marking types, vehicle categorization, and the problem to be solved for the VLM agent. Historical messages stored in the memory module serve as contextual learning references, elaborated in Section IV-C. The human message includes additional inputs such as the numerical positions with the IDs of the unresponded requests and the free vehicles in the Cartesian coordinate of the AMoD system.\nTo optimize the reasoning process and minimize the number of tokens utilized, the distance matrix $D$ is provided to the VLM agent. Let $M$ and $N$ denote the total numbers of free vehicles and existing passenger requests, respectively. $D = [d_{ij}] \\in \\mathbb{R}^{M\\times N}$ captures the distance of vehicles in $G$ and passengers in $C$. Mathematically, the distance matrix $D = [d_{ij}]$ is defined as:\n$$D = \\begin{bmatrix}\nd_{11} & d_{12} & \\cdots & d_{1N} \\\\\nd_{21} & d_{22} & \\cdots & d_{2N} \\\\\n\\vdots & \\vdots & & \\vdots \\\\\nd_{M1} & d_{M2} & \\cdots & d_{MN}\n\\end{bmatrix},$$", "content_latex": "D = \\begin{bmatrix}\nd_{11} & d_{12} & \\cdots & d_{1N} \\\\\nd_{21} & d_{22} & \\cdots & d_{2N} \\\\\n\\vdots & \\vdots & & \\vdots \\\\\nd_{M1} & d_{M2} & \\cdots & d_{MN}\n\\end{bmatrix},"}, {"title": "7\nwhere $d_{ij}$ represents the Euclidean distance between free vehicle $i$ and unresponded passenger request $j$. This matrix is instrumental in determining the optimal assignment of vehicles to passenger requests, as each element $d_{ij}$ is computed using the formula:\n$$d_{ij} = \\sqrt{(x_i - x_j)^2 + (y_i \u2013 y_j)^2},$$", "content_latex": "d_{ij} = \\sqrt{(x_i - x_j)^2 + (y_i \u2013 y_j)^2},"}, {"title": "8\nwhere $(x_i, y_i)$ and $(x_j, y_j)$ are the Cartesian coordinates of vehicle $i$ and passenger request $j$, respectively. This quantitative input aids in formulating efficient routing strategies and optimizing the dispatching process. This matrix quantifies the spatial relationships between vehicles and passenger requests, thereby supplying a quantitative basis for dispatching decisions. By incorporating $D$, the VLM agent can more efficiently evaluate distances, which enhances its ability to make informed decisions. Overall, the multimodal input for the", "content_latex": null}, {"title": "7", "content": "8 VLM agent, illustrated in Fig. 3 and Fig. 4, integrates essential contextual information from multiple sources, including the road layout, passenger requests, and vehicle states, alongside task commands from the AMoD system. It is also necessary to establish a memory container to facilitate the AI agent's continuous learning and adaptation capabilities.", "content_latex": null}, {"title": "C. Memory Container and Top-K Retrieval", "content": "1) Memory Storage and Organization: The memory module serves as a repository for multimodal data, storing initialized memory items that include manually annotated responses to guide the AI agent's reasoning process. Each memory item consists of a BEV image, a human message, and the corresponding AI agent response according to the dialogue structure described in Fig. 4, forming a comprehensive dataset for in-context learning of the CoDriveVLM. The reflection module, integrated into the memory system, allows for the iterative refinement of decision-making capabilities. By analyzing previous response errors and their contexts, the system can adapt its strategies and improve its performance in similar future instances.\nTo enable efficient retrieval of similar dialogues from the memory dataset, we store the embeddings associated with each memory item, as illustrated in Fig. 5. Specifically, the embeddings of both images and their corresponding human message texts are stored in vector format. This approach facilitates rapid and accurate queries by the retrieval module, as detailed in Section IV-C2. The vector representation approach of these embeddings allows for effective similarity measurements, thereby enhancing the retrieval process's performance and efficiency. When it is necessary to retrieve similar memory items, their embeddings are quickly extracted and compared with the embedding of the current instance.\n2) Retrieval of Top-K Memories: The retrieval module is designed to access the memory module efficiently, enabling the system to draw upon historical data for informed decision-making with in-context learning. When the AI agent produces an incorrect output, the retrieval module identifies"}, {"title": "7\nand processes these errors, ensuring continuous learning and adaptation.\nFor effective retrieval, each memory item is assigned an image embedding of the BEV and a text embedding of the human message, generated by pre-trained encoding models, which together represent the multimodal scenario features of the item. We employ the vision encoder and text encoder of CLIP [50] for their validated performance in various semantic comprehension tasks. The overall similarity between the current scenario and each memory item is evaluated using a weighted aggregation of cosine similarities calculated with image embeddings and corresponding text embeddings:\n$$Sim(c_\\alpha, c_\\beta) = \\omega \\cdot \\frac{o_\\alpha \\cdot o_\\beta}{||o_\\alpha|| ||o_\\beta||} + (1 \u2013 \\omega) \\cdot \\frac{I_\\alpha I_\\beta}{||l_\\alpha|| ||l_\\beta||}, \\eqno{(7)}$$", "content_latex": "Sim(c_\\alpha, c_\\beta) = \\omega \\cdot \\frac{o_\\alpha \\cdot o_\\beta}{||o_\\alpha|| ||o_\\beta||} + (1 \u2013 \\omega) \\cdot \\frac{I_\\alpha I_\\beta}{||l_\\alpha|| ||l_\\beta||}, \\eqno{(7)}$"}, {"title": "8\nwhere $o_\\alpha = T_o(O_\\alpha)$ and $l_\\alpha = T_l(L_\\alpha)$ are the image and text embeddings of the current scenario $c_\\alpha$ respectively, while $o_\\beta$ and $l_\\beta$ represent the embeddings of a memory item $c_\\beta$, where $\\beta \\in {1, 2, ..., M}$. Note that $T_o(\\cdot)$ and $T_l(\\cdot)$ represent the functions generating the embeddings from the corresponding context, and $M$ is the number of the memory items in the container. Besides, $\\omega$ is a weighting parameter that can be adjusted to balance the two sources of feature representations, and it is set to 0.5 in this study. Based on the similarity scores, the module retrieves the top-K most similar memories, forming a few-shot-learning context composed of historical BEVs, human messages, and AI messages, which guides the AI agent's reasoning process and enhances the adaptability and effectiveness of the AMoD system's operations.", "content_latex": null}, {"title": "D. Dispatching Decisions of the VLM Agent", "content": "At each time step when the adaptive frequency system is triggered by (4), the VLM agent is called for the dispatching assignment of CAVs. To enhance the reliability of the reasoning result, we incorporate the Chain-of-Thought (CoT) reasoning template to the input prompts of the VLM agent as described in the system message of Fig. 4. For clear analysis, we formulate the prompting-reasoning process as follows:\n$${P_\\tau, C_\\tau} = T(K(S, M_\\tau, H_\\tau)),$$", "content_latex": "{P_\\tau, C_\\tau} = T(K(S, M_\\tau, H_\\tau)),"}, {"title": "8\nwhere the input elements of the context generator $K(\\cdot)$ are constant system message $S$", "51": "the output of the VLM agent is designed as two folds: The final ID pairs $P_\\tau$ of free CAVs and assigned passenger requests, and the text during the CoT reasoning process $C_\\tau$. With the CoT result, we can enhance the transparency of the dispatching decision made by the VLM agent, and it is profoundly beneficial for the reflection module to reflect the decision quality for further enhancement of the memory dataset.\nAfterward, $P_\\tau$ is employed as high-level guidance of the cooperative"}]}