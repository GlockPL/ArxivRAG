{"title": "The Practimum-Optimum\u2122 Algorithm for Manufacturing Scheduling: A Paradigm Shift Leading to Breakthroughs in Scale and Performance", "authors": ["Moshe BenBassat"], "abstract": "", "sections": [{"title": "1. INTRODUCTION", "content": "Generating an optimal production schedule is essential for manufacturing operations, having a significant impact on the efficiency and productivity of the whole operation and, hence, on top and bottom line, as well as on-time delivery dates. Yet, building a high-quality schedule for large complex operations has been known to be one of the most challenging business tasks. Additionally, such large-scale automation enables the automatic generation of optimal schedules for a long time horizon, e.g., months in advance. This opens the door to new Al applications for promising delivery dates based on a more accurate assessment of future resource availability, and for tactical capacity planning."}, {"title": "2. Optimizing Manufacturing Schedule: The Problem", "content": "At the end of a regular weekly or monthly cycle, the scheduler in a manufacturing company faces a Demand Set (Fig. 2 below) of customer work orders (WO) that need to be scheduled for production over the coming time horizon (next week, next month, or longer). For simplicity, we assume that each work order specifies a single product, the required quantity, and the expected delivery date. Typically, the production process of each product consists of multiple tasks (steps) that need to be executed in a particular order, with each task requiring specific machine(s), tools, raw materials, and people. There may also be dependencies between work orders.\nThe scheduler's job is to build a schedule at the task level that optimizes an objective function Z representing a mix of schedule quality goals, such as due-date compliance, makespan (time of finishing the last task), total throughput, raw material consumption, machine utilization, and others. These are sometimes assigned weights that enable consolidating them into a weighted Z score for the overall schedule quality. For example, in the case illustrated in Figure 1 below, Due Date Compliance was set as the top-ranked goal relative to Autoclave Utilization and Other Stations Utilization\nThe schedule is graphically represented by the well-known Gantt board (see Figure 1), where each tile on the scheduling board represents an assignment that specifies the production step for one of the products, its start and end times, and all the resources it requires: material, machines, tools, and people. All entities are associated and connected with operational requirements and constraints rules that establish the criteria for valid assignments on the Gantt board. Let's elaborate on this important point."}, {"title": "3. Requirements and Constraints are the Rules of the Game", "content": "Some of the requirements and constraints are obvious 'technical' rules, e.g., you cannot cut a 60\" wide roll on a 40\" wide machine.\nOthers relate to standard working hours (shifts) and availability of each resource with a rule that states that an assignment's time must be within the working hours of all its resources. Some machines work night shifts, while other resources are only available during one or two shifts.\nAnother example: clearly, assignments must comply with the sequence in which tasks are to be performed. Yet, for some tasks, it is allowed that Task B may start after Task A reaches a given percentage of its completion time.\nSome machines, such as autoclaves, can simultaneously process multiple parts. Such task grouping must be consistent with batching rules (which parts can go together for a joint session).\nAnother example is a spreading & cutting station where multiple people can jointly work. In such cases, there will be a rule of \u201cnot less than\" and \"not more than,\" and what can be assumed as for the productivity of a given number of people (e.g., is it twice as fast for two people, or just 1.5x faster)\nLarge-scale complex operations may involve tens of production machines, multiple tool types, a variety of components and raw materials, and, of course, many people, with each operator having their own skills that qualify them as a candidate to operate certain machines. This entails a long list of requirements and constraints rules that need to be checked before an assignment can be declared a VALID candidate at a certain point and incorporated in the search process on the way to building an optimal schedule.\nRequirements and constraints are the Rules of the Game. If a scheduling software cannot play by these rules, in other words, if it could generate invalid schedules, then there is no point in evaluating the"}, {"title": "4. Current Practice Algorithms", "content": "Many algorithms have been proposed to automatically generate production schedules for complex manufacturing operations. Some examples are:\n\n\u2022 Simulated annealing, e.g. [1]\n\u2022 Tabu search, e.g. [2]\n\u2022 Genetic algorithms, e.g. [6]\n\u2022 Grasshopper algorithms, e.g. [5].\n\nAs well there are heuristic [4] search algorithms that are based on principles used by human expert schedulers, such as:\n\n\u2022 Backward scheduling\n\u2022 Forward scheduling\n\u2022 Bottleneck-oriented scheduling.\n\nWe do not include here algorithms based on 'exact' mathematical models, such as Integer Programming because they don't handle well the requirements and constraints of complex operations that define valid schedules and thus are not applicable, to begin with. This was first covered in our 1990 article: \"The W-6 Approach to Multi-Dimensional Scheduling: Where Al and Operations Research meet.\u201d\nMost algorithms in current use are based on a strategy that, by analogy, roughly follows the hill-climbing process. From an initial start point of an empty Gantt board, such an algorithm uses systematic step-by- step logic for selecting and placing the next tile on the Gantt board. At each step, the algorithm assesses the Gantt board's quality status and looks for steps that will take it toward a higher-quality schedule.\nWhen it reaches a point where adding or modifying tiles does not improve the schedule quality (i.e., a local peak), the algorithm proceeds to look for options to move away from the local peak position. These include making local micro changes to existing tiles on the board, or even removing some tiles from the board, in an attempt to find a new starting point from where it can restart the process of climbing up in the direction of peaks that are higher than those previously attained. When it reaches a schedule judged to be the best (highest peak), or it runs out of time, it stops and presents to the user the best schedule it ended with.\nEach algorithm in current practice has its own \u2018algorithmic logic' for (a) making the next small steps up and (b) how to recover from a \u2018local peak' schedule. It iteratively repeats its own specific logic with the objective of reaching the top peak with a minimal number of iterations. The process is based on small"}, {"title": "5. The New Practimum-Optimum\u2122 Algorithm: An Overview", "content": "The limitations of the algorithms in the current generation of manufacturing scheduling software were the main drivers for the development of the new P-O algorithm described in this article with the following unique differentiators:\n\n1. P-O routinely scales up to automatically schedule tens of thousands of jobs for complex manufacturing environments. See below in Section 9 specific real-life cases.\n2. It explores broader areas of the universe of valid Gantt boards and high-quality schedules.\n3. Its process includes a self-generating dataset of schedules, which it uses for its RL (Reinforced) machine learning.\n4. At the end of each run, it generates multiple high-quality schedules with a variety of 'flavors' in terms of the mix of the quality metrics and the arrangements of the tiles on the Gantt board. (In contrast to all other algorithms that generate a single schedule at the end of each run). These are stored and later used in deciding/composing the best schedule presented to the user and/or making adjustments to it in response to the user's comments on the best schedule. In fact, quite often, schedules with different tile arrangements on the Gantt board have very close or the same scores of quality metrics.\n5. P-O generates \u2018human-oriented' schedules, in other words, schedules that make business sense to a person.\n\nThe following sections provide more details on the P-O algorithm."}, {"title": "6. Factory's Digital Twins", "content": "The software infrastructure of the P-O algorithm is based on a complete digital representation of the manufacturing environment. This includes digital twins for all real physical objects, e.g., products, machines, tools, raw materials, people, and abstract objects such as Work Orders, Working Shifts, Assignments, and Gantt Charts. With these as the basis, all requirements and constraints are expressed in software structures to capture all the delicate real-life details that may be required for decision-making.\nPlataine's Scheduler includes a configuration module that generates all the elements required for a full problem statement of a manufacturing scheduling problem in a given organization, e.g., products, machines, raw material, ..., requirements and constraints,...etc. Most of these elements are fairly permanent. All that is left for a specific schedule-building session is to specify the Demand Set and any"}, {"title": "7. The Practimum-Optimum\u2122 Algorithm: Main Components", "content": "The four main components of the P-O algorithm are:\n\n7.1 Virtual Human Experts\nCentral to P-O is the introduction of a unique concept, the Virtual Human Expert (VHE) agent. Essentially, a VHE is an algorithm that operates with some \u2018school of thought' and heuristics that human experts use to build \"optimal\" schedules. These methods are described in textbooks, industry-related articles, and training classes for schedulers. Such methods/heuristics include, for example, forward scheduling, backward scheduling, shifting bottleneck heuristics, and variants or combinations of them, including switching the focus and priorities between products, machines, raw materials, and time. In reality, there is no one dominant methodology that fits all types of manufacturing operations in all industry verticals. Even for a given factory, some variations in the Demand Set to be scheduled, or temporal variations in machines' capacities, may cause Method A to produce better schedules than Method B, while, for another variation, Method B will be better. That is why in P-O, we selected the VHEs to represent a wide spectrum of variants of good human methods and heuristics and accordingly implemented in software the scheduling logic of a variety of VHEs.\n\n7.2 A Single Schedule Building Iteration of a VHE Algorithm\nEach VHE starts with a first iteration of applying its own scheduling logic to build a full schedule for the given Demand Set. That is, in a stepwise manner, it creates tiles on the Gantt board as determined by its specific VHE logic (in the same way that a human expert scheduler would) until it exhausts all jobs in the Demand Set or reaches a stopping rule.\nThe end result of each iteration (a pass through the full set of jobs in the Demand Set) is a valid Gantt board schedule. It could be that some jobs in the Demand Set did not fit and were left out of the Gantt board, as could happen in any algorithm.\nAn iteration does not include micro moves to attempt to improve the schedule Gantt board at the end of a pass. This is done by a reinforced (RL) machine learning algorithm, as described below.\n\n7.3 Schedule Metrics\nEach VHE calculates a rich set of tens of metrics covering macro metrics and micro metrics for each schedule it generates:"}, {"title": "7.4 Reinforced Learning (RL) Algorithm.", "content": "The orientation of the following machine learning algorithm is not to identify micro moves that will improve tile arrangement around a local peak. Rather, taking as input a fully valid Gantt Board and its rich set of metrics, the RL's goal is to learn sources of strengths and weaknesses of the schedule state. Accordingly, derive \u2018reward and punishment' changes in the Demand Set that will modify the relative priorities for time and resource allocation that jobs received in the prior iteration that led to the current state of the schedule.\nAs an example, assume an iteration by VHE3 whose logic is driven by the heuristic: \u201cDue date jobs go first.\" With this heuristic, Job208 was the 2nd tile to be placed while Job26 was the 123rd to start its first task out of eight, some of them quite long. As a result, Job26 was left out of the schedule. On the other hand, for Job208 all tasks are relatively short, and it finished way before its due date. So, we detected an inadequacy. Clearly, Job208 had more degrees of freedom for time and resources to select from, compared to Job26, and we \u201cspoiled\u201d it a little, resulting in it finishing way ahead of its due date. On the other hand, Job26 received less than it deserved (\u201cdeprived\u201d). If in the next iteration of VHE3, we give Job208 a small \u201creward,\u201d causing it to start earlier, and give Job26 a small \u201cpunishment,\u201d causing it to start a little later but still finish on its due date, there is a good chance the above inadequacy will not appear. For simplicity, in this example, we only used two jobs and one type of inadequacy. In fact, the P- O RL algorithms analyze the entire schedule at the end of every given iteration.\nThe post-learning changes of the RL machine learning translate into parameters in the jobs of the Demand Set that impact \u2018select next' and \u2018place next' decisions in the next iteration executed by the VHE. These cause the core logic of the VHE algorithm to explore, in the subsequent iteration, substantially different parts of the scheduling universe and potentially find higher-quality schedules. In most cases, this leads to radically different tile arrangements on the Gantt board and higher-quality schedules as iterations progress. Using the hill climbing analogy, this may be viewed as a big backtracking jump, shifting from a given local peak to a faraway promising start point. This is a fundamental difference from most contemporary algorithms, which spend considerable time in micro local steps restricted to the neighborhoods of local peaks they visit.\n\nExpanding the Analogy: Add Paragliding to Foot Climbing\nLet us extend the mountain climbing analogy by adding parachute gliding capability to the existing climbing methods. Looking around from a local peak (P1), and recognizing the limitations of your current schedule, you paraglide - rather than walk - to another starting point from which there is good reason to expect that it could take you to a higher peak (P2). Gliding takes just a few minutes compared to the long hours it would take to walk down from P1 and reach the next start point. This analogy is a good"}, {"title": "8. Flow of the Practimum-Optimum\u2122 Algorithm for Building an Optimal Schedule", "content": "As discussed above, the P-O algorithm includes multiple independent digital virtual human expert agents (VHEs) representing a variety of \u2018schools of thought' and heuristics for building optimal schedules. To produce an optimal schedule for a given Demand Set, each VHE performs multiple passes as follows:\n\nBuilding Gantt Boards with Multiple Independent VHEs\nGiven a Demand Set as input (Fig 2), and an initial starting Gantt board (mostly empty with possibly some residual tiles from last week), each VHE runs an iteration aiming to build a full valid schedule. Each schedule that is output by the run is illustrated below with the designation SVHE(k,j) where k indicates the VHE identity, and j indicates the iteration.\nAll jobs of the Demand Set are placed on the Gantt board (just like a human expert would do, except much faster) and produce a valid schedule\u2014SVHK(k,1). Valid means it complies with all constraints and requirements. In addition to the digital Gantt chart, the VHE also calculates a rich set of macro and micro metrics."}, {"title": "9. A Real-Life Case in Fully Automatic Mode", "content": "CarbTech manufactures parts for the aerospace and other industries using composite materials. One of its manufacturing sites involves:\n\n\u2022 75 end products\n\u2022 87 stations/machines (including Autoclaves)\n\u2022 256 tool types\n\u2022 1024 individual tools of all types.\n\nBelow are two real-life scenarios illustrating the scale and performance of P-O In FULLY AUTOMATIC mode:\n\nScenario 1:\nSchedule 1 comprises a Demand Set of 395 work orders over a time horizon of one month. This translates into 7,505 tasks. With one click on the P-O AutoSchedule button, an optimal Gantt chart was automatically generated in just 1.5 hours. Considering that before deploying the P-O Scheduler, it could require a hundred or more man-hours by a skilled 3-5 person team to produce a usable Gantt chart, 1.5 hours by P-O is certainly a good practical speed. Add to the speed the great quality metrics and full compliance with all requirements and constraints, and the business value is immediately apparent.\nOn the same site, we ran a larger-scale scenario as follows:"}, {"title": "10. Discussion on Bio-inspired Colonies versus \u201cHuman Expert Colonies\"", "content": "A point to consider: Let's compare the widely popular bio-inspired algorithms with P-O \u201chuman-inspired\" algorithms at the fundamental level. On one side, bio-inspired algorithms are based on the intelligence of an Ant Colony, Grasshopper, Fish Swarm, or Bee Colony. On the other side is the new P-O algorithm that aggregates the intelligence of a \u201ccolony\u201d of human experts, enhanced by reinforced machine learning (RL) that aims to fix individual human experts' weaknesses in specific situations and to combine the collective wisdom to avoid such weaknesses. Each VHE algorithm has evolved over many years of work by many experts. For a given factory's operations and every single Demand Set, the RL machine learning algorithm attempts to overcome the weaknesses of each VHE for this specific case. While respecting the power of millions of years of animal evolution leading to the current intelligence of Ants, Grasshoppers, and Fishes and Bees, I would not underestimate the power of each VHE algorithm to begin with and its enhancements by the group/colony wisdom of all the VHEs combined.\nThe P-O algorithm is based on the deep domain knowledge we acquired from years of working with experienced schedulers and a long list of research and industry publications. Also note that each period brings its unique Demand Sets for the same manufacturing organization, which may differ substantially from what came before. It is quite common that one specific VHE orientation will perform the best for some weeks, while for the Demand Sets of other weeks, it could rank quite low relative to the other VHES."}, {"title": "11. Summary", "content": "The Practimum-Optimum\u2122 (P-O) algorithm represents a paradigm shift in developing automatic optimization products for complex real-life business problems such as large-scale manufacturing scheduling. It leverages deep business domain expertise to create a group of virtual human expert (VHE) agents with different 'schools of thought' on how to create high-quality schedules. By computerizing them into algorithms, P-O generates many valid schedules at far higher speeds than human schedulers are capable of. Initially, these schedules can also be local optimum peaks far away from high-quality schedules. By submitting these schedules to a reinforced machine learning algorithm (RL), P-O learns the weaknesses and strengths of each VHE schedule, and accordingly derives 'reward and punishment' changes in the Demand Set that will modify the relative priorities for time and resource allocation that jobs received in the prior iteration that led to the current state of the schedule. These cause the core logic of the VHE algorithms to explore, in the subsequent iteration, substantially different parts of the"}]}