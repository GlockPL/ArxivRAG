{"title": "Stable Object Placement Planning From Contact Point Robustness", "authors": ["Philippe Nadeau", "Jonathan Kelly"], "abstract": "We introduce a planner designed to guide robot manipulators in stably placing objects within intricate scenes. Our proposed method reverses the traditional approach to object placement: our planner selects contact points first and then determines a placement pose that solicits the selected points. This is instead of sampling poses, identifying contact points, and evaluating pose quality. Our algorithm facilitates stability-aware object placement planning, imposing no restrictions on object shape, convexity, or mass density homogeneity, while avoiding combinatorial computational complexity. Our proposed stability heuristic enables our planner to find a solution about 20 times faster when compared to the same algorithm not making use of the heuristic and eight times faster than a state-of-the-art method that uses the traditional sample-and-evaluate approach. Our proposed planner is also more successful in finding stable placements than the five other benchmarked algorithms. Derived from first principles and validated in ten real robot experiments, our planner offers a general and scalable method to tackle the problem of object placement planning with rigid objects.", "sections": [{"title": "I. INTRODUCTION", "content": "Robots with the capability to stably place objects in contact with one another hold the potential to reduce the need for human intervention in various tasks, spanning home chores, industrial operations, and work in outdoor environments [1]. In domestic settings, tasks like tidying the living space by rearranging objects or organizing the garage storage could be automated [2]. Effective planning for stable object placement could facilitate safe palletizing of mixed products or enable the autonomous loading of trucks in industrial settings. In outdoor environments, autonomous excavators could be used in disaster relief through debris removal [3]. The challenge of stably packing or rearranging rigid objects in contact arises from the subtle yet influential force interactions between objects that determine their stability. Since the problem of determining force interactions is known to be NP-hard [4], many approaches resort to planning heuristics based on shape information only and do not generalize well across tasks.\nIn static assemblies, the mass and centre of mass (henceforth referred to as inertial parameters), as well as the friction coefficients, are sufficient to characterize an object's inertia its resistance to acceleration. A planner that operates based on these parameters is called inertia-aware in this work, with knowledge of the second mass moments not being required in static scenarios. Various techniques exist for perceiving both the shape and pose of objects in close proximity to the robot [5], as well as for identifying the inertial parameters of manipulated objects [6]. Despite the prevalent focus on shape and pose in manipulation planning, it is crucial to acknowledge the critical role that inertial parameters play in determining object stability, which is defined as an object's force equilibrium in this work. This paper introduces an inertia-aware object placement planning algorithm, leveraging a physically-grounded heuristic to generate stable placements, with scalability to tackle large-scale problems.\nThe remainder of this paper is organized as follows. Sec. II reviews the literature on assembly stability and object placement planning, highlighting the novelty of our proposed algorithm. In Sec. III, the inertia-aware object placement planning problem is formally defined and Sec. IV introduces a physically-grounded heuristic to assess an assembly's ro- bustness to external forces. Our proposed planner is detailed in Sec. V, and the results of more than 1500 experiments involving six scenes and six algorithms are presented in Sec. VI, demonstrating the benefits of our method. In Sec. VII, practical validation of our proposed algorithm is done through 10 real-world experiments involving 50 placements, in which a robot manipulator builds assemblies while any failure is recorded. Finally, Sec. VIII concludes with insights gained from simulation and real robot experiments."}, {"title": "II. RELATED WORK", "content": "Early methods to produce stable orientations of an assem- bly under gravity, for fixturing purposes, include [7], which ignores friction, and [8], which takes friction into account but cannot guarantee stability [9] due to indeterminacies in the distribution of contact forces. Selecting a set of feasible contact forces can be done by resorting to optimization-based methods [10, 11] that make use of the principle of virtual work [12], and integrate kinematic constraints to ensure that the solution is physically plausible. Such methods have been shown to be equivalent to finite element methods (FEM) [13] for rigid ob- jects, and similar to FEM, are computationally expensive and non-deterministic. Stability assessment under a large number of random force disturbances is perfomed in [14] by solving a min-max optimization problem for every perturbation, making it the principal bottleneck of the planning algorithm. This work proposes a physically sound heuristic that is quick to compute by avoiding any operation of combinatorial complexity. Also, in contrast to [14], our approach considers stability in the first place instead of verifing it at the end.\nClassical methods used to assess the stability of a grasp [15, 16] can provide a quantitative evaluation of the stability of a workpiece while newer algorithms can produce stable multi-object grasps [17] with rigid convex objects. While these methods offer a comparative basis for different placements, their application to object placement planning is limited. This is because they do not take into account the fact that fixed rigid objects can withstand very large force, nor do they guide the planner on how to position an object on a stable structure two aspects that our proposed algorithm addresses.\nIn general, the assembly task planning problem has been shown to be NP-Complete [18], which explains why task and motion planning methods [19] have only been applied to small-scale problem instances. Learning-based methods that do not resort to handcrafted heuristics have been proposed for assembly planning [20, 21] but also struggle to generalize across tasks [22]. While most object planning algorithms ignore the inertial parameters of the objects, [23] make use of the centre of mass of the object being placed but is limited to isolated placements on horizontal surfaces. As an attempt at a more general object placement planning algorithm, physics simulators have been integrated into planning algorithms [24] but are prohibitively slow to generate valid plans, even for small-scale problems. In contrast, this work proposes a general method derived from first principles that avoids the overhead of dynamics simulators to better scale to large problems."}, {"title": "III. INERTIA-AWARE OBJECT PLACEMENT PLANNING", "content": "Given a set $O = {0_i,..., O_N}$ of $N$ objects with known shape $V_i \\in \\mathbb{R}^3$ and material composition $\\rho_i(p) \\forall p\\in V_i$, that can be part of the assembly ${0_i \\in O_a \\subset O}$, fixed in the limited space of the scene ${O_i \\in O_f \\subset O_a}$, or to be placed in the assembly ${0_i \\in O_p \\subset O}$, find a sequence of penetration- free placement poses $P = (_{w}T_o)_{o\\in0_p}$, where $T_o \\in SE(3)$ is the pose of object $o$ expressed relative to a world frame fixed in the scene, such that the force needed to displace any object in the assembly is maximized. Hence, different from typical assembly planning problems, the goal configuration is not given in terms of the pose of the objects in the assembly, but rather in terms of an objective that is to be maximized.\nUnless stated otherwise, the RIGID notation convention [25] is used and $p_{a}$ is the position vector of ${a}$ with respect to ${b}$ and expressed in ${c}$. The orientation of ${a}$ relative to ${b}$ is given by $R_{a}$, and a unit-length vector $v$ is denoted by $\\hat{v}$. The skew-symmetric operator is such that $[\\hat{u}]_{\\times} v = u \\times v$."}, {"title": "IV. STATIC ROBUSTNESS ASSESSMENT", "content": "When placing an object amongst others, it is usually desir- able that the object be unlikely to move after being placed. For rigid polyhedral objects, ultimately, instability will occur when an object slips or topples. In both cases, the event is triggered when an applied force exceeds a threshold that we call the static robustness: the maximum amount of force that can be exerted along a given direction, on a given point, before an object in the assembly moves. Formally, the static robustness $r$ is defined as\n$r: \\mathbb{R}^3 \\times S^2 \\rightarrow \\mathbb{R}^+$\nthat maps a direction $\\hat{e} \\in S^2$ and position $wPp \\in \\mathbb{R}^3$, expressed relative to the world frame, to a scalar value $r$. It follows that planning for stable placement involves reasoning about contact forces in the assembly. However, computing frictional contact forces in the assembly has been shown to be NP-hard [4], and is made more complex by the existence of a coupling between forces and kinematic constraints in the assembly [26]."}, {"title": "A. Solving for Reaction Forces", "content": "In order to be quick to compute, a successful heuristic will need to avoid any computation whose complexity grows exponentially with the number of objects in the assembly. Hence, we solve a linearly constrained quadratic program [10] that uses a pyramidal approximation of the friction cone, en- force static equilibrium, and avoid tensile forces. This convex optimization problem can be solved in polynomial time [27] by standard solvers [28], but might find unphysical solutions due to the approximation of the friction cone. Focusing on a single object, let\n$A = [A_1 \\cdots A_I]$ with $A_i = \\begin{bmatrix} I_{3\\times3} \\\\ [_{w}p_i]_{\\times} \\end{bmatrix}$\nbe a data matrix where $_{w}p_i$ is the position of the $i$-th contact point on the object. With\n$b = -m\\begin{bmatrix} g \\\\ [_{w}p_c]_{\\times} g \\end{bmatrix}$\nbeing the wrench exerted by gravity on the centre of mass $_{w}p_c$ of the object whose mass is $m$, the system of equations involving the forces $f = [f_1,\\ldots, f_I]^T$ on the object is\n$Af = b$\nwhere $_{w}f_i$ is the reaction force exerted at the $i$-th contact point. The reaction force at the $i$-th contact point expressed in a local frame $F_i$ is $^if_i$ such that components $^if_{i\\parallel}$ and $f_{i\\perp}$ are respectively perpendicular and parallel to the contact surface."}, {"title": "B. Robustness to Slipping", "content": "Consider the friction cone at a given contact point, defined by its normal and angle $\\theta$ within which a reaction force vector goes from the contact point to another point inside the cone, as shown in Fig. 2. An external force vector can also applied to the contact point, with its effect being added to the reaction force vector. Let $f$ be the reaction force vector and $\\hat{e}$ be the unit external force vector. The maximal magnitude of the external force vector $e = s\\hat{e}$ that can be applied to the contact point is the one that produces an intersection between the friction cone and the line defined by the external force vector.\nThe equation of the 3D cone supported by angle $\\theta$ is given by\n$\\tan^2(\\theta)z^2 = x^2 + y^2$\nwhere it is noted that $\\tan^2 \\theta = \\mu^2$, the square of the friction coefficient at the contact point. Moreover, the equation of the line of the external force vector is given by\n$\\begin{cases} x = se_u + r_u \\\\ y = se_v + r_v \\\\ z = se_n + r_n \\end{cases}$\nwhere $\\hat{e}_i = [e_u \\ e_v \\ e_n]^T$ and $^if_i = [r_u \\ r_v \\ r_n]^T$ are the components of the forces expressed in the local frame $F_i$, and $s$ is the magnitude of the external force vector (a parameter). Substituting (10) into (9) yields\n$\\tan^2(\\theta)(se_n + r_n)^2 = (se_u + r_u)^2 + (se_v + r_v)^2$\n$0 = \\tan^2(\\theta)(se_n + r_n)^2 - (se_u + r_u)^2 - (se_v + r_v)^2$\n$= \\mu^2 (s^2e_n^2 + 2sr_ne_n + r_n^2) - (r_u^2 + 2sr_ue_u + e_u^2s^2) - (r_v^2 + 2sr_ve_v + e_v^2s^2)$\n$= (\\mu^2e_n^2 - e_u^2 - e_v^2) s^2 + 2 (\\mu^2r_ne_n - r_ue_u - r_ve_v) s + (\\mu^2r_n^2 - r_u^2 - r_v^2)$\nwhich is a quadratic equation in $s$ as\n$0 = as^2 + bs + c$\nwith\n$a = \\mu^2e_n^2 - e_u^2 - e_v^2$\n$b = 2 (\\mu^2r_ne_n - r_ue_u - r_ve_v)$\n$c = \\mu^2r_n^2 - r_u^2 - r_v^2$\nand for which a particular solution is given by\n$s = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$\nthe well-known quadratic formula.\nHence, the static robustness $r$ of a contact point is given by\n$r = \\begin{cases} s & \\text{if } s > 0 \\\\ \\infty & \\text{otherwise} \\end{cases}$\nthat is infinite if $e + f$ does not intersects with the friction cone. Since the reaction forces are not constrained to obey the non-linear Coulomb friction model in the computation of the heuristic, it is possible that\n$\\mu ||f_{i\\parallel}|| < ||f_{i\\perp}||$\n$\\mu^2r_n^2 < (r_u^2+r_v^2)$\n$c < 0$\nwhich implies that the contact point is not holding. In such a case, or similarly if the radicand $b^2 - 4ac$ is negative, the static robustness of the contact point is set to zero. Since all contact points contribute, up to their limit, to countering the external force exerted on an object, the robustnesses of several contact points are summed with\n$r'_{slip} = \\sum_{i=1}^N r_i \\quad \\forall i \\in {1,\\ldots, I}$\nto produce the robustness of the object to slipping, where $r_i$ is the robustness of the $i$-th contact point."}, {"title": "C. Robustness to Toppling", "content": "The robustness of an object to being pushed over is given by the minimum amount of force required to rotate the object about some axis $a$, defined by the line joining a pair of contact points. For an isolated object being pushed, the toppling axis is guaranteed to be an edge of the convex hull of the contact points, since any other axis would require a greater amount of force to rotate the object as the lever arm would be smaller. Hence, a convex hull of the contact points is computed via the QuickHull algorithm [30], whose complexity is $O(n^2)$ in the worst case, to produce a list of axes about which the object could topple. The validity of each axis is verified, by making sure that the normal force at every contact point could not oppose toppling about the axis and that gravity would not exert a positive torque about the axis, with\n$(^kp_{ix}f_{in}) \\cdot a > 0$\n$(p_{cx} mg) \\cdot a < 0$\n$\\hat{e} \\cdot a < 0 \\quad \\forall i \\in {1,\\ldots, I}$\nwhere $^kf_{in}$ is the normal force at the $i$-th contact point, $a = k_t-k_s$ is the axis joining vertices $k_s$ and $k_t$ of the convex hull, $mg$ is the weight of the object that is applied at its centre of mass positioned at $p_c$ relative to the start point of the axis vector and expressed in the world frame. The robustness of an object to toppling about the $i$-th axis is given by\n$s_i = \\frac{(p_{cx} mg) \\cdot a}{(p_{cx} \\hat{e}) \\cdot a}$\nthe force required to compensate for the torque due to gravity that is holding the object in place any torque greater than that about the axis could not possibly result in object equilibrium. The maximum amount of force that can be exerted along a given direction on a given point before the object topples is given by\n$r_{top} = min \\{s_i\\} \\quad \\forall i \\in {1,\\ldots, I}$\nthe minimum robustness when all valid axes are considered.\nWith the robustness to slipping and toppling computed for the object, the overall robustness of the object to a force applied along a given direction on a given point is given by\n$r = min \\{r_{slip}, r_{top}\\}$\nas pictured in Fig. 3, fulfilling the definition of the static robustness $r$ as a mapping from a direction $\\hat{e}$ and position $wPp$ to a scalar value $r$. The result of the mapping can be seen in Fig. 1, Fig. 3, and Fig. 7 where the color indicates the relative magnitude of the maximal force that can be applied on a point in the normal direction. A warmer color indicates that a greater force can be applied before the object slips or topples, with black indicating that infinite force can be applied. Although, the robustness function obtained via the use of our heuristic is unlikely to be exact in multi-objects assemblies, it is expected to be quick to compute due to avoiding any operation whose computational complexity grows exponentially with the number of objects in the assembly."}, {"title": "V. PLACEMENT PLANNING FROM STATIC ROBUSTNESS", "content": "Ideally, the normal contact force at each contact point is much greater than the tangential forces such that the object is far from slipping. Therefore, we propose to use the robustness to normal forces applied at various points on the surface of the objects in the assembly to plan for stable placement. In the following, we assume that an object has to be placed in a given assembly of objects for which the robustness in the normal direction at all points on the surface of the objects in the assembly is known, and that placements are performed in a linear, monotone, and sequential [31] fashion.\nBy placing an object in an assembly, at least one contact interface between objects is created. Any nondegenerate\u00b9 contact interface can be categorized into [32, 33]:\n*   face/face plane contact that fixes 3 DoFs,\n*   face/edge line contact that fixes 2 DoFs,\n*   edge/edge point contact that fixes 1 DoFs, and\n*   face/vertex point contact that fixes 1 DoFs.\nAt least three contact interfaces are necessary to constrain the object to a specific pose by fixing all 6 DoFs (degrees of freedom) [33]. However, placing the object will require that at least one DoF remains unconstrained such that the placement can be performed without collision. With two non-collinear contact interfaces, from one (e.g., with face/face interfaces) to four (e.g., with face/vertex interfaces) DoFs will remain unconstrained, satisfying the placement motion requirement. A third contact interface might be needed for stability under gravity, but does not necessarily need to be selected prior to the computation of the placement pose. Furthermore, in a face/face contact the normals must be opposed and in a face/edge contact the normal of the face must be orthogonal to the edge.\nOur planning algorithm is summarized in Algorithm 1, with each step described in greater detail in the following sections. With this proposal-based approach, it is expected that many candidates will turn out to be invalid, and that the process will need to be iterated several times before a stable, non- penetrating pose is found. Each iteration therefore needs to be performed as quickly as possible."}, {"title": "A. Contact Point Selection", "content": "The selection of candidate contact points on the surface of objects in the assembly is performed in an iterative, probabilistic manner based on the robustness of the objects to normal forces. At each iteration of the planning algorithm, two points are sampled according to a probability distribution that is defined by passing the robustness function through\n$P (p) = \\frac{min (r(p, \\hat{n}), Q)}{\\sum_{p \\in P} min (r(p_i, \\hat{n}_i), Q)}$\nwhere $r(p, \\hat{n})$ is the robustness of the object in the normal direction at point $p$ and $Q$ is the robustness above which the odds of being sampled are set to be constant. In practice, $Q$ can be defined such that the largest finite robustness in the assembly has a small probability of being sampled (e.g., 10%) by initializing $Q$ to a larger value $Q_0 > 0$ that is exponentially decayed with the number of iterations $k$ at a rate $\\lambda < 1$. With $Q_k = Q_0\\lambda^k$, the probability of sampling any point in $P$ converges to\n$\\lim_{k\\rightarrow\\infty} P (p) = \\frac{Q_k}{|P| \\sum_{p \\in P} Q_k }$\nwhere $|P|$ is the cardinality of $P$, the set of surface contact points. With such a scheme, the odds of sampling a point with a large robustness are initially higher, but decrease with the number of iterations such that all points are eventually consid- ered with almost equal probability, and any valid placement pose is eventually considered.\n1) Extension: Sampling on Fixed Supports: Sometimes, it might be desirable to place the object on a fixed support (e.g. table) instead of amongst the objects in the assembly. For instance, if placing the object on the assembly would result in a weakened assembly, it might be preferable to place the object on a fixed support whose static robustness is, by definition, infinite. In this case, however, it is usually desired that the object be placed in a compact manner. The probability function in (29) can be easily extended to accomodate this requirement by sampling points on fixed supports following a function that monotonically decreases with the distance to the centroid of the scene. For instance, the probability of sampling a point on a fixed support can be defined as\n$P_f (_{w}p_p) = max (P(p)) e^{-\\gamma || _{w}p_p-_w p_c ||^2}$\nwhere $\\gamma$ is the decay rate at which the probability of sampling a point close to the centroid $_w p_c$ of the scene decreases with the number of iterations $k$ and $s$ is the scale of the scene. The probability distributions in (29) and (31) can be combined by enforcing that the sum of the probabilities is equal to one."}, {"title": "B. Locating Analogous Object Points", "content": "To define a placement pose, a pair of object features (i.e., faces or edges) is considered and one point per feature is selected such that the distance between selected points corresponds to the one between the scene contact points. To favour stability, the object points are selected such that the line joining them is as close as possible to the centre of mass of the object. Prior to point selection, candidate pairs of features on the object (i.e., face-face, face-edge or edge-edge) are validated, by considering the relative orientation of the feature normals, to ensure that they can afford the support geometry of the contact points in the assembly.\nIn the following, we assume that the contact points $_w p_a$ and $_w p_b$ are sampled on object faces in the scene with normals $_w \\hat{n_a}$ and $_w \\hat{n_b}$ and such that $|| _w p_a - _w p_b || = L$. The relative orientation of $_w \\hat{n_a}$ and $_w \\hat{n_b}$ can be obtained with\n$\\theta = arccos(_{w}\\hat{n_a}\\cdot _{w}\\hat{n_b})$\n$\\hat{u} = \\frac{_{w}\\hat{n_a} \\times _{w}\\hat{n_b}}{sin(\\theta)}$\n$R = I_{3x3} + sin(\\theta) [\\hat{u}]_x + (1 - cos(\\theta)) [\\hat{u}]_x^2$\nwhere $\\hat{u}$ is the axis of rotation from $_w \\hat{n_a}$ to $_w \\hat{n_b}$, $\\theta$ is the angle of rotation about from $_w \\hat{n_a}$ to $_w \\hat{n_b}$, and $R$ is the rotation matrix from $_w \\hat{n_a}$ to $_w \\hat{n_b}$.\nValidating Feature Pairs A face will afford another face if its normal is parallel and opposed to the normal of the other face. In 3D, an edge $o_E$ joins two adjacent faces whose normals are referred to as $\\hat{n}_{e_1}$ and $\\hat{n}_{e_2}$. The vectors directed from the edge to the inside of the face, along the face and orthogonal to the edge are the side vectors $\\hat{o}_{s_{e_1}}$, and $\\hat{o}_{s_{e_2}}$ such that\n$\\hat{o}_{s_{e_1}} = (o_E \\times \\hat{n}_{e_1}) / ||o_E \\times \\hat{n}_{e_1}||\n$\\hat{o}_{s_{e_2}} = (o_E \\times \\hat{n}_{e_2}) / ||o_E \\times \\hat{n}_{e_2}||\nA face with outward normal $\\hat{n}$ will afford an edge if the normal is orthogonal to the edge direction $u$ such that\n$\\hat{n} \\cdot u = 0$\nand if the normal lies between the two side vectors of the edge, which is the case if a positive rotation about $\\hat{u}$ brings $\\hat{n}$ from $\\hat{o}_{s_{e_1}}$ to $\\hat{o}_{s_{e_2}}$. Intuitively, this involves that a planar surface with infinitesimal area can touch the edge without touching the faces on either side of the edge. A simple test to check if the normal lies between $\\hat{o}_{s_{e_1}}$ and $\\hat{o}_{s_{e_2}}$ is defined with\n$u = [0 \\ 0 \\ 1] \\cdot (\\hat{o}_{s_{e_1}} \\times \\hat{o}_{s_{e_2}})$\n$v = [0 \\ 0 \\ 1] \\cdot (\\hat{n} \\times \\hat{o}_{s_{e_2}})$\n$w = [0 \\ 0 \\ 1] \\cdot (\\hat{n} \\times \\hat{o}_{s_{e_1}})$\nsuch that the normal lies between the two side vectors if $u\\cdot v \\leq 0$ and $u \\cdot w \\geq 0$.\nSince the normals sampled in the scene are expressed in a different frame than the ones on the object, the components of the normal vectors cannot be simply compared. Assuming that the normal to the first feature selected on the object opposes $_w \\hat{n_a}$, the second feature needs to either afford $^aR \\hat{n_b}$ or $^aR^T \\hat{n_b}$ (the rotation can be done one way or the other) to produce a valid match.\nSeveral cases are considered depending on the relative orien- tation of the features, with each feature pair being either face- face (parallel, coplanar, or intersecting), face-edge (parallel, or intersecting), or edge-edge (parallel, intersecting, or skew). In each case, the points on the object are selected such that the distance between them is $L$ and that the line joining them is as close as possible to the centre of mass of the object."}, {"title": "A. Face-Face Pair", "content": "Two faces sampled on the object can be parallel, coplanar, or intersecting, as shown in Fig. 4.\nLet two planes be defined by\n$P_1(d_1): \\hat{n}_{f_1}\\cdot p = d_1$\n$P_2(d_2): \\hat{n}_{f_2}\\cdot p = d_2$\nwhere $p$ is a point on the plane, $\\hat{n}_{f_i}$ is the normal of the face plane, and $d$ is the distance of the plane from the origin. If the faces are parallel but not coplanar, the distance between the faces $(\\hat{n}_{f_1} - \\hat{n}_{f_2}) \\cdot \\hat{n}_{f_2}$ would need to be exactly equal to $L$ for the match to be valid, which is almost never the case, and would produce infinitesimal interpenetrations (i.e., friction) when placing the object."}, {"title": "A.1. Coplanar Faces", "content": "If the faces are coplanar, there is an infinite number of point pairs that are properly distanced. Amongst the possible pairs, we select one that minimizes the distance between the centre of mass of the object and the line joining the two points to maximize the odds of sampling a stable pose. To do so, we set $\\hat{u}$ in the direction given by the extent of the object projected onto the common plane of the two faces, and select points along the direction vector that are at a distance $+L/2$ from the projection of the centre of mass onto the face plane with\n$oP_{0_1} = d_1 \\hat{n}_{f_1} + oP_c - (oP_c \\cdot \\hat{n}_{f_1})\\hat{n}_{f_1}$\n$oP_q = oP_{0_1} + \\frac{L}{2} u$\n$oP_r = oP_{0_1} - \\frac{L}{2} u$\nwhere $oP_c$ is the centre of mass of the object expressed in the object frame, $oP_{0_1}$ is the projection of the centre of mass onto the face plane, and $oP_q$ and $oP_r$ are respectively the point on the first and second face being considered."}, {"title": "A.2. Intersecting Faces", "content": "If the faces are intersecting, they share a common edge whose direction is given by\n$\\hat{o_E} = \\frac{\\hat{n}_{f_1} \\times \\hat{n}_{f_2}}{||\\hat{n}_{f_1} \\times \\hat{n}_{f_2}||}$\nand whose origin $oP_e$ is defined by\n$\\hat{u} = \\hat{n}_{f_1} \\times \\hat{o_E}$\n$oP_e = oP_{0_1} + \\frac{d_2 - \\hat{n}_{f_2}\\cdot oP_{0_1}}{\\hat{n}_{f_2} \\cdot \\hat{u}} \\hat{u}$\nwhere $oP_{0_1}$ is the projection of the centre of mass onto the plane of the first face, as defined previously. The plane orthogonal to the common edge and passing through the centre of mass of the object intersects $o_E$ at\n$P_{oo} = oP_e + (oP_c \\cdot \\hat{o_E}) \\hat{o_E}$\nsuch that a triangle is formed by $P_{oo}, oP_{0_1}$, and $oP_{0_2}$ in the plane passing through $P_e$. A similar triangle connecting $P_{oo}, oP_q, oP_r$ whose leg joining both faces has length $L$ can be defined with\n$oP_q = oP_{oo} + \\frac{L}{||oP_{0_1} - oP_{0_2} ||} (oP_{0_1} - P_{oo})$\n$oP_r = oP_{oo} + \\frac{L}{||oP_{0_1} - oP_{0_2} ||} (oP_{0_2} - P_{oo})$\nwhere $oP_{0_2}$ is the projection of the centre of mass onto the plane of the second face, and $oP_q$ and $oP_r$ are respectively the point on the first and second face being considered."}, {"title": "B. Face-Edge Pair", "content": "In the situation where one interface is between two faces and the other interface is between a face and an edge, the line vector connecting the two contact points on the object will join a point on the face to a point on the edge, as shown in Fig. 5. Let the plane of the face/face interface be defined by\n$P_1(d): \\hat{n}_f \\cdot P = d$\nand the edge be defined by\n$E_2(t): oP_r = oP_e + t u_e$\nsuch that $r$ is constrained to lie on the plane of the face/face interface and $q$ is constrained to lie on the edge.\nThe edge can either be parallel to the face plane or inter- secting it. In both cases, a triangle is defined on a plane that is passing through the centre of mass of the object to minimize the odds of sampling an unstable pose, as done in the face-face pair case."}, {"title": "B.1. Intersecting", "content": "If the edge intersects the plane of the face, the intersection point $P_{oo}$ is given by\n$t= \\frac{d-\\hat{n}_f\\cdot oP_e}{\\hat{n}_f\\cdot \\hat{u}_e}$\n$P_{oo} = oP_e + t\\hat{u}_e$\nand the projections of the centre of mass onto the face and edge are respectively given by\n$oP_{0_1} = d \\hat{n}_f +oP_c - (oP_c \\cdot \\hat{n}_f) \\hat{n}_f$\n$oP_{0_2} = oP_e + ((oP_c - P_e) \\cdot \\hat{u}_e) \\hat{u}_e$\nsuch that a triangle is formed by $P_{oo}, oP_{0_1}$, and $oP_{0_2}$ in the plane passing through $P_c$ and the method employed in the face-face pair case can be used to find $oP_q$ and $oP_r$."}, {"title": "B.2. Parallel", "content": "If the edge is parallel to the face plane, $oP_r$ is set to the projection of the centre of mass onto the edge with\n$oP_r = oP_{0_2}$\nand, in the case of the edge not lying in the plane of the face, $oP_{0_2}$ is moved to the closest point on the face"}]}