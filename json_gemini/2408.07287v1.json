{"title": "Abductive Reasoning in a Paraconsistent Framework", "authors": ["Meghyn Bienvenu", "Katsumi Inoue", "Daniil Kozhemiachenko"], "abstract": "We explore the problem of explaining observations starting from a classically inconsistent theory by adopting a paraconsistent framework. We consider two expansions of the well-known Belnap-Dunn paraconsistent four-valued logic BD: BD\u3002introduces formulas of the form of o\u03c6 ('the information on \u03c6 is reliable'), while BD\u25b3 augments the language with \u2206\u03c6's ('there is information that \u03c6 is true'). We define and motivate the notions of abduction problems and explanations in BD\u3002and BD\u25b3 and show that they are not reducible to one another. We analyse the complexity of standard abductive reasoning tasks (solution recognition, solution existence, and relevance / necessity of hypotheses) in both logics. Finally, we show how to reduce abduction in BD\u3002and BD\u25b3 to abduction in classical propositional logic, thereby enabling the reuse of existing abductive reasoning procedures.", "sections": [{"title": "Introduction", "content": "Logic-based abduction is an important form of reasoning with multiple applications in artificial intelligence, including diagnosis and commonsense reasoning (Eiter and Gottlob 1995). An abduction problem can be generally formulated as a pair (\u0393, x) consisting of a set of formulas \u0393 (theory) and a formula x (observation) s.t. \u0393# x, and the task is to find an explanation, i.e., a formula \u03c6 s.t. \u0393, \u03c6 # x. Of course, not every formula is intuitively acceptable as an explanation which is why there are usually some restrictions on \u03c6. In particular, \u0393\u222a{\u03c6} should be consistent, \u03c6 should not entail x by itself nor contain atoms not occurring in \u0393\u222a {x}, \u03c6 should be syntactically restricted so as to be easily understandable, and \u03c6 should constitute a weakest possible (or minimal) explanation, cf. discussion in (Marquis 2000, \u00a74.2) or (Aliseda 2006, \u00a73.3). Most commonly, the third desiderata is enforced by requiring abductive solutions to take the form of terms (conjunctions of literals), in which case the logically weakest solutions are simply the subset-minimal ones.\nNote, however, that in classical propositional logic (CPL) any contradictory theory is inconsistent. Thus, there is no explanation of x from a contradictory \u0393. This can be circumvented in two ways. First, by repairing \u0393, i.e., making it consistent and then proceeding as usual (cf., e.g., (Du, Wang, and Shen 2015)). Second, by moving to a paraconsistent logic. The characteristic feature of such logics is the failure of the explosion principle \u00acp, p # q.\nAbduction in Paraconsistent Logics The question of how to employ paraconsistent logics to perform abductive reasoning on classically inconsistent theories has already generated interest in the philosophical logic community. For example, (Carnielli 2006) consider abduction in a three-valued logic called Logic of Formal Inconsistency (LFI1), obtaining by expanding the language of CPL (classical propositional logic) with new connectives \u2022\u03c6 and o\u03c6 (read '\u03c6 has a non-classical value' or 'the information about \u03c6 is unreliable' and '\u03c6 has a classical value' or 'the information about \u03c6 is reliable', respectively). More recently, (Bueno-Soler et al. 2017) and (Chlebowski, Gajda, and Urba\u0144ski 2022) considered abductive explanations in the minimal Logic of Formal Inconsistency (mbC), and (Rodrigues et al. 2023) consider abduction in a four-valued Logic of Evidence and Truth (LETK).\nThese studies showcase the interest of paraconsistent abduction, but as they issue from a different research community, the formulation of abductive solutions and the questions that are explored depart from those typically considered in knowledge representation and reasoning (KR). In particular, these works allow arbitrary formulas as solutions (rather than terms). Moreover, to the best of our knowledge, there are no results on the complexity of paraconsistent reasoning tasks (e.g., solution existence). Also, in mbC and LETK, o\u03c6 and \u2022\u03c6 do not have truth-functional semantics, which complicates the comparison with classical logic and the reuse of established techniques.\nAbduction in Belnap-Dunn Logic The preceding considerations motivate us to revisit paraconsistent abduction by taking a KR perspective and adopting the well-known paraconsistent propositional logic BD by (Dunn 1976; Belnap 1977a; Belnap 1977b). The main idea of BD is to treat the values of formulas as the information an agent (or a computer as in (Belnap 1977b)) might have w.r.t. a given statement \u03c6. This results in four \u2018Belnapian' values:\n\u2022 T - 'the agent is only told that \u03c6 is true';\n\u2022 F - 'the agent is only told that \u03c6 is false';\n\u2022 B - 'the agent is told that \u03c6 is false and that it is true';\n\u2022 N - 'the agent is not told that \u03c6 is false nor that it is true'."}, {"title": "BD and its Expansions", "content": "Since BD, BD\u3002, and BD\u25b3 use the same set of truth values and the same \u00ac, \u2227, and \u2228, we present their syntax and semantics together in the following definition.\nDefinition 1. The language L\uff61,\u25b3 is constructed from a fixed countable set of propositional variables Prop via the following grammar:\nL\uff61, \u042d\u0444 := p\u2208 Prop | \u00ac\u03c6 | (\u03c6 \u2227 \u03c8) | (\u03c6 \u2228 \u03c8) | o\u03c6 | \u2206\u03c6\nIn what follows, we use LBD, L. and L\u25b3 to denote the fragments of L\uff61,\u25b3 over {\u00ac,\u2227,\u2228},{\u00ac,\u2227,\u2228,o}, and {\u00ac, \u2227, \u2228, \u2206}, respectively. We will also use \u00ac\u2206\u2022 as a shorthand for \u00ac\u2206 and use Prop(\u03c6) to denote the set of all variables occurring in a formula \u03c6.\nWe set 4 = {T, B, N, F} and define a BD valuation as a mapping v: Prop \u2192 4 that is extended to complex formulas as follows."}, {"title": "Abduction in BD\u25b3 and BD\u3002", "content": "We begin the presentation of abduction in BD\u25b3 and BD\u3002 with definitions of literals, terms, and clauses in L\u25b3 and L\uff61. Note that since o and \u2206 do not distribute over \u2227 and \u2228, we cannot assume that in L\uff61, literals do not contain binary connectives, terms are \u2228-free and clauses are \u2227-free if we want every formula to be representable as a conjunction of clauses or a disjunction of terms.\nDefinition 3 (Literals, terms, and clauses).\n\u2022 Propositional literal is a variable p or its negation \u00acp.\n\u2022 L\u25b3-literal has one of the following forms: p, \u00acp, \u2206p, \u00ac\u2206p, \u2206\u00acp, \u00ac\u2206\u00acp (p\u2208 Prop). L\u25b3-clause is a disjunction of literals; L\u25b3-term is a conjunction of literals.\n\u2022 L\uff61-literal has one of the following forms: p, \u00acp, o\u03c6, \u2022\u03c6 (\u03c6 \u2208 L\uff61). Clauses and terms are defined as above.\nThe next statement is immediate.\nProposition 5. Let \u03c6 \u2208 L\uff61 and x \u2208 L\u25b3. Then there are conjunctions of L\uff61- and L\u25b3-clauses DNF(\u03c6) and DNF(x), and disjunctions of L\uff61- and L\u25b3-terms CNF(\u03c6) and CNF(x) s.t. \u03c6 = DNF(\u03c6) = CNF(\u03c6) and x = DNF(x) = CNF(x).\nNote, however, that even though the definition of clauses and terms we gave above allows for a strongly equivalent representation of every L\uff61-formula, the clauses and terms may be difficult to interpret in natural language. Indeed, while o\u03c6 (\u2022\u03c6) can be understood as 'information concerning \u03c6 is (un)reliable', a formula such as\u2022(p\u2227 o(\u00acq \u2228 \u2022(r \u2227 \u00acs))) does not have any obvious natural-language interpretation. It thus makes sense to consider atomic L\uff61-literals.\nDefinition 4. Atomic L\uff61-literals are formulas of a form p, \u00acp, o\u03c6, or \u2022\u03c6 with p\u2208 Prop. Atomic L\uff61-clauses are disjunctions of atomic literals and atomic L\uff61-terms are conjunctions of atomic literals."}, {"title": "Complexity of Term Entailment", "content": "This section contains some technical results concerning entailment from L\u25b3- and L\uff61-terms that facilitate the proofs of complexity bounds in Section 5."}, {"title": "Entailment Between Terms", "content": "We begin with the complexity of entailment between terms. Recall from Definition 5 that to establish the BD-minimality of \u03c4, we need to check whether there is another solution \u03c6 that is entailed by \u03c4. In the next two theorems, we show that the entailment of atomic L\uff61-terms and L\u25b3-terms is recognisable in polynomial time.\nTheorem 2. Entailment between atomic L\uff61-terms is decidable in deterministic polynomial time.\nProof sketch. Let \u03c3 and \u03c3' be atomic L\uff61-terms. We begin by noting that \u03c3 is BD-unsatisfiable iff (i) p, \u00acp, and o\u03c6 occur in \u03c3; or (ii) o\u03c6 and \u03c6 occur in \u03c3. The 'only if' direction is evident since p \u2227 \u00acp \u2227 o\u03c6 and o\u03c6 \u2227 \u03c6 are unsatisfiable. For the 'if' direction, assume that there is no variable p s.t. p, \u00acp, and o\u03c6 occur in \u03c3, nor any variable q s.t. oq and q occur in \u03c3. We construct a satisfying valuation v as follows:\n\u2022 v(r) = T iff r occurs in \u03c3 but \u00acr and \u2022r do not;\n\u2022 v(r) = F iff \u00acr occurs in \u03c3 but r and or do not;\n\u2022 v(r) = B otherwise.\nIt is clear that v(\u03c3) \u2208 {T, B}. Indeed, it is easy to check that every literal occurring in \u03c3 has value T or B and that v is well defined.\nIt follows from this characterisation that the satisfiability of an atomic L\uff61-term can be decided in polynomial time. In addition, observe that \u03c3 #BD \u03c3' if \u03c3 is unsatisfiable and \u03c3' is satisfiable but \u03c3' is not. Finally, to show that entailment between satisfiable atomic L\uff61- terms is decidable in polynomial time, we use the facts that p \u2227 \u00acp #BD \u26abp and p \u2227 \u00abp = p \u2227 \u2022p = \u00abp \u2227 \u2022p.\nTo establish a similar property of L\u25b3-terms, we construct a faithful embedding of L\u25b3-formulas into the language of CPL. The polynomial complexity evaluation of term entailment will follow since our embedding increases the size of formulas only linearly and since determining entailment of terms in CPL can also be done in polynomial time.\nDefinition 7. Let \u03c6 \u2208 L\u25b3 be in NNF and let \u03c6cd denote the classical negation. We define \u03c6cd as follows:\npcd = p+\n(\u2206p)cd = p+\n(\u00acp)cd = \u00acp+\n(x \u2227 \u03c8)cd = xcd \u2227 \u03c8cd\n(\u2022p)cd = p\u2212\n(\u2206\u00acp)cd = p\u2212\n(\u00ac\u2206\u00acp)cd = \u00acp\u2212\n(x \u2228 \u03c8)cd = xcd \u2228 \u03c8cd\nLemma 1. Let \u03c6, x \u2208 L\u25b3 be in NNF. Then \u03c6 #BD x iff \u03c6cd #CPL xcd.\nThe next theorem follows immediately from Lemma 1.\nTheorem 3. Entailment between L\u25b3-terms is decidable in deterministic polynomial time."}, {"title": "Entailment of Formulas From Terms", "content": "Let us now consider the complexity of entailment of LBD-formulas by L\uff61-terms and L\u25b3-terms. We begin with L\uff61-terms. The following statement is straightforward.\nTheorem 6. It is is coNP-complete to decide whether \u03c6 #BD x, given an atomic L\uff61-term \u03c6 and x \u2208 LBD.\nProof. Membership is immediate as BD\u3002-entailment is in coNP. To show coNP-hardness, observe that x is CPL-valid iff \u2227p\u2208Prop(x) op #BD x since op ensures v(p) \u2208 {T, F} and \u00ac, \u2227, \u2228 behave classically on T and F.\nOn the other hand, if \u03c6 is an L\u25b3-term, \u03c6 #BD x can be decided in deterministic polynomial time.\nTheorem 7. It can be decided in polynomial time whether \u03c6 #BD x, given an L\u25b3-term \u03c6 and x \u2208 LBD.\nProof. Note first, that if Prop(\u03c6) \u2229 Prop(x) = \u2205 and \u03c6 is satisfiable, then \u03c6 #BD x. Indeed, we can just evaluate all variables of x as N which will make x have value N as well (cf. Definition 1). By Theorem 3, it takes polynomial time to determine whether an L\u25b3-term is satisfiable. Thus, we consider the case when \u03c6 is satisfiable.\nWe assume w.l.o.g. that x is in NNF. By Lemma 1, we have that \u03c6 #BD x iff \u03c6cd #CPL xcd. Since x \u2208 LBD, xcd is \u00ac-free (cf. Definition 7). The rest of the proof is similar to that of Theorem 5. The only difference is that we will check whether xcd is reduced to T using (3).\nFinally, we observe that in the presence of \u0393, the entailment of LBD-formulas from terms becomes coNP-complete.\nTheorem 8. It is coNP-complete to decide whether \u0393, \u03c4 #BD \u03c8, given \u0393\u222a {\u03c8} \u2208 LBD and an L\uff61-term or an atomic L\u25b3-term \u03c4."}, {"title": "Complexity of BD Abduction", "content": "This section considers the complexity of the principal decision problems related to BD abduction, namely, solution recognition, solution existence, and relevance and necessity of hypotheses.\nDefinition 8. We say that \u0393 BD-consistently entails x (\u0393 #consBD x) iff \u0393 is BD-satisfiable and \u0393 #BD x.\nLemma 2. Let \u0393\u222a {x} \u2286 LBD, o be an L\u25b3-term, and \u0442 be an atomic L\uff61-term. Then\n1. deciding whether \u0393, \u03c3 #consBD x is coNP-complete;\n2. deciding whether \u0393, \u03c4 #consBD x is DP-complete.\nProof. We begin with Statement 1. coNP-membership is immediate since entailment is in coNP and verifying the consistency of \u0393, \u03c3 can be done in polynomial time using Theorem 5. For hardness, we reduce BD-entailment to BD-consistent entailment as follows:\n\u03c6 #BD x iff \u03c6 \u2228 \u2228p,q #BD x \u2228 pcons\n(p, q\u2209 Prop[{\u03c6, \u03c7}], \u03c3 = q)\nLet \u03c6 #BD x. We can thus find v such that v(\u03c6) \u2208 {T, B} and v(x) \u2209 {T, B}. Since p and q are fresh, we let v(p) = F and v(q) = T which falsifies the consistent entailment. Conversely, let \u03c6\u2228 \u2228p,q #consBD x \u2228 p. It is clear that {\u03c6 \u2228 p, q} is BD-satisfiable. Thus, there is a valuation s.t. v(\u03c6 \u2228 p) \u2208 {T, B}, v(q) \u2208 {T, B} but v(x \u2228 p) \u2209 {T, B}. Hence, v(\u03c6) \u2208 {T, B} and v(x) \u2209 {T, B}, as required.\nFor Statement 2, membership follows immediately from Table 1. To show hardness, we reduce the DP-complete Sat-Unsat problem for CPL to BD-consistent entailment. Let \u03c6, x be propositional formulas and assume w.l.o.g. that Prop(\u03c6) \u2229 Prop(x) = \u2205. Set \u039e = Prop(\u03c6) \u222a Prop(x) and pick p \u2209 \u039e. We show that \u03c6 is CPL-satisfiable and x is CPL-unsatisfiable iff \u03c6, p \u2227 \u2227q\u2208\u039e oq #consBD p \u2227 \u00acx.\nIf \u03c6 is CPL-unsatisfiable, then \u03c6 \u2227 p \u2227 \u2227q\u2208\u039e oq is BD-unsatisfiable, so the consistent entailment fails. If x is CPL-satisfiable, let v be a classical valuation s.t. v(x) = T (whence, v(p \u2227 \u00acx) = F) and v(\u03c6 \u2227 p) = T (recall that Prop(\u03c6) \u2229 Prop(x) = \u2205, so such valuation must exist unless \u03c6 is CPL-unsatisfiable). Again, the consistent entailment fails.\nFor the converse, let \u03c6 be CPL-satisfiable and x is CPL-unsatisfiable. It is clear that \u03c6, p \u2227 \u2227q\u2208\u039e oq #consBD p \u2227 \u00acx because p ^\u00acx #BD 1 and \u03c6 \u2227 p \u2227 \u2227q\u2208\u039e oq is BD-satisfiable as p \u2209 Prop(\u03c6) and \u03c6 is CPL-satisfiable."}, {"title": "Solution Recognition", "content": "We use the preceding lemma to establish the complexity of recognizing arbitrary and proper solutions.\nTheorem 9. It is coNP-complete to decide, given a BD abduction problem P and an L\u25b3-term o, whether o is a (proper) solution of P.\nProof. coNP-completeness of recognising \u03c3 \u2208 S(P) follows immediately from Lemma 2 since \u03c3 is a solution of (\u0393, \u03c8, \u0397) iff \u0393,\u03c3 # \u03c8. For proper solutions, we observe that recognising an arbitrary solution is reducible to the recognition of a proper solution as follows: if we let p \u2209 Prop[\u0393\u222a {\u03c8} \u222a H], then \u03c3 is a solution of (\u0393, \u03c8, H) iff \u03c3 is a proper solution of (\u0393\u222a {p}, p \u2227 \u03c8, H\u222a {p}). Indeed, \u0393,\u03c3 #BD \u03c8 holds iff \u0393, \u03c1,\u03c3 #BD \u03c8 \u2227 p holds, and likewise, \u0393,\u03c3 #BD 1 iff \u0393,\u03c3 #BD 1. Moreover, since p does not occur in t, it is clear that \u03c3 #BD \u03c8^p. This establishes coNP-hardness. For membership, we note that checking the properness condition (\u03c3 #BD \u03c8) is in P since \u03c3 is an L\u25b3-term (Theorem 7), so we remain in coNP.\nTheorem 10. It is DP-complete to decide, given a BD abduction problem P and an atomic L\uff61-term \u03c3, whether \u03c3 is a (proper) solution of P.\nProof. The arguments are the same as in the proof of Theorem 9, but use the complexity results for atomic L\uff61-terms from Table 1 and Lemma 2.\nWe next show how to recognize #BD-minimal solutions.\nTheorem 11. It is DP-complete to decide, given a BD abduction problem P and a term \u03c3, whether o is a #BD-minimal (L\uff61- or L\u25b3-) solution of P.\nProof sketch. The upper bound exploits the fact that for every term o, we can identify polynomially many terms \u03c31, . . . , \u03c3k s.t. (i) \u03c3 #BD \u03c3i but \u03c3i #BD \u03c3 (1 \u2264 i \u2264 k), and (ii) if o is a proper solution but not #BD-minimal, then some \u03c3i is a (proper) solution. Thus, to verify #BD-minimality, it suffices to check that none of the \u03c3i is a solution.\nFor L\u25b3-terms, we may assume (recall Proposition 2) that all \u25b3's in o occur under \u00ac, i.e., \u03c3 = \u03c3\u266d. In this case, \u03c3 #BD \u03c3'\u266d iff Lit\u25b3(\u03c3\u266d) \u2287 Lit\u25b3(\u03c3\u266d), so we need only to check each"}, {"title": "Solution Existence", "content": "We now turn to the fundamental task of determining whether an abduction problem has a solution. To establish the complexity of deciding whether S(P) = \u2205, we provide reductions from classical abduction problems. We adapt the definition of classical abduction problems from (Eiter and Gottlob 1995; Creignou and Zanuttini 2006) to our notation.\nDefinition 9. A classical abduction problem is a tuple P = (\u0393, \u03c8, \u0397) s.t. \u0393\u222a{\u03c8} \u2286 LBD and H is a set of propositional literals.\n\u2022 A solution of P is a conjunction \u03c4 of literals from H such that \u0393, \u03c4 #CPL \u03c8 and \u0393, \u03c4 #CPL 1.\n\u2022 A solution is proper if \u03c4 #CPL \u03c8.\n\u2022 A proper solution \u03c4 is theory-minimal if there is no proper solution \u03c3 s.t. \u0393, \u03c4 #CPL \u03c3 and \u0393, \u03c3 #CPL \u03c4.\n\u2022 A proper solution t is #CPL-minimal if there is no proper solution \u03c3 s.t. \u03c4 #CPL \u03c3 and \u03c3 # \u03c8 \u2194 \u03c4.\nTheorem 13. It is \u03a32P-complete to decide whether a BD abduction problem has a (proper) L\u25b3- or L\uff61-solution.\nProof. Membership follows immediately from Theorems 9 and 10. To show \u03a32P-hardness, we reduce solution existence for classical abduction problems P\u03b1 = (\u0393cl, \u03c8cl, H) of the following form:\n\u0393\u03b1 = {\u00ac\u03c8 \u2228 (p \u2227 \u03c4), \u00acp \u2228 r} \u222a {\u00acr \u2194 r\u2032 | r \u2208 Prop(\u03c8) \u222a Prop(p \u2227 \u03c4)}\n\u03c8cl = p \u2227 \u03c4  (p\u2209 Prop(\u03c8 \u2227 \u03c4), \u03c4 is a term)\nH = {r | r \u2208 Prop(\u03c8) \u222a Prop(p \u2227 \u03c4)} \u222a {r\u2032 | \u00acr \u2194 r\u2032 \u2208 \u0393cl}    (4)\nWe reduce P\u03b1 to P = (\u0393\u03b9, \u03c8\u03b9, H), where:\n\u0393 = \u0393\u03b1 \u222a {q \u2228 \u00acq | q \u2208 Prop[\u0393\u03b1]}\n\u03c8 = \u03c8cl \u2228 \u2228q\u2208Prop[\u0393\u03b1] (q \u2227 \u00acq)   (5)\nFirst let \u03c3 be a solution of P\u03b1. It is immediate from (4) that \u03c3 is a proper solution because we cannot use variables occurring in \u03c8cl. Moreover, by Proposition 4, we have that \u03c3 is a proper solution of P. And since \u03c3\u2208 LBD, it is both an L\u25b3- and L\uff61-proper solution.\nFor the converse, let \u03c3\u2032 be a solution of P. As H contains only positive literals and no variables from Prop(p \u2227 \u03c4), it follows that \u0393\u03b9, \u03c3\u2032 #CPL 1 and \u03c3\u2032 #CPL p \u2227 \u03c4. Moreover, applying Proposition 4, we obtain that \u0393\u03b1, \u03c3\u2032 #CPL \u03c8cl. This shows that \u03c3\u2032 is a proper solution of P\u03b1."}, {"title": "Relevance and Necessity of Hypotheses", "content": "Two other natural reasoning tasks that arise in the context of abduction are the recognition of which hypotheses are relevant, in the sense that they belong to at least one (minimal) solution, and which are necessary (or indispensable), as they occur in every (minimal) solution. Both of these decision problems have been investigated in the case of CPL abduction, see (Eiter and Gottlob 1995).\nThe following theorem shows that the complexity of relevance and necessity w.r.t. (proper) solutions and #BD-minimal solutions coincides with the complexity of the analogous problems for (C-minimal) solutions in CPL.\nTheorem 14. It is \u03a32P-complete (resp. \u03a02P-complete) to decide, given a BD abduction problem P = (\u0393, \u03c8, H) and h\u2208 H, whether h is relevant (resp. necessary) w.r.t. S(P). The same holds for relevance and necessity w.r.t. SP (P) and S#BD (P).\nProof. Membership is straightforward since solution recognition is coNP-complete for proper L\u25b3-solutions and DP-complete for proper L\uff61-solutions and it suffices to guess a proper solution containing (or omitting) h and verify it.\nFor the hardness results for BD-minimal solutions, we construct a reduction from the class of BD abduction problems presented in (5) and adapt the approach from (Eiter and Gottlob 1995). Namely, we let P = (\u0393\u03b9, \u03c8\u03b9, H\u03b9) be as in (5) and pick fresh variables r, r', and r\". Now set \u039e = Prop[\u0393\u03b9] \u222a {r, r\u2032, r\"} and define P = (\u0393, \u03c8, H) as follows.\n\u0393rd = {\u00acr \u2228 \u03c8 | \u03c8 \u2208 \u0393\u03b9} \u222a {s \u2228 \u00acs | s \u2208 \u039e} \u222a {\u00acr\u2032 \u2228 (p \u2227 \u03c4), \u00acr \u2228 \u00acr\u2032, \u00ac(r \u2228 r\u2032) \u2228 r\"}\n\u03c8rd = (p \u2227 r\" \u2227 \u03c4) \u2228 \u2228s\u2208\u039e (s \u2227 \u00acs)\nHrd = H\u03b9 \u222a {r, r\u2032}  (6)\nNow let SP(P) be the set of all proper solutions of P and recall that S(P) = SP (P). It is clear that\nSP(P) = S(P)\nSP(P) = {\u03c3 \u2227 r | \u03c3 \u2208 SP(P)} \u222a {\u03c3 \u2227 r\u2032 | \u03c3 \u2208 SP(P)}\nand that P has (proper) solutions iff r is relevant and r\u2032 is not necessary.\nTo show hardness w.r.t. S#BD (P), it suffices to observe that r is relevant to Prd iff it is relevant w.r.t. #BD-minimal solutions. Similarly, r\u2032 is (not) necessary in Prd iff it is (not) necessary w.r.t. #BD-minimal solutions."}, {"title": "Generating Solutions to BD Abduction Problems by Reduction to CPL", "content": "In this section, we show how to apply classical consequence-finding procedures to generate solutions for BD abduction problems, by reducing BD abduction to CPL abduction.\nWe first observe that Lemma 1 allows us to faithfully translate abduction problems with L\u25b3-solutions into CPL.\nTheorem 16. Let P = (\u0393, \u03c8, H) be a BD abduction problem. Then \u03c3 is a (#BD-, theory-minimal, proper) L\u25b3-solution of P iff \u03c3 is a (CPL-, theory-minimal, proper) solution of Pc = (\u0393cd, \u03c8cd, Hcd) with Hcd = {p+ | p \u2208 H} \u222a {p\u2212 | \u00acp \u2208 H} \u222a {pcd | \u00ac\u2206l \u2208 H}.\nThe translation of BD\u3002abduction into CPL abduction is, however, more complicated.\nDefinition 10. Let \u03c3 = \u2227i=1m pi \u2227 \u2227i\u2032=1m\u2032 \u00acpi \u2227 \u2227j=1n \u03c3j \u2227 \u2227j\u2032=1n\u2032 \u00acpj be an atomic L\uff61-term, and \u039e \u2287 Prop(\u03c3) be a finite set of propositional variables. The classical counterpart of \u03c3 relative to \u039e, denoted \u03c3\u039e, is defined as follows:\n\u03c3+ = \u2227i=1m pi \u2227 \u2227i\u2032=1m\u2032 \u00acpi \u2227 \u2227j=1n \u03c3j \u2227 \u2227j\u2032=1n\u2032 \u00acpj\n\u03c3\u25e6\u039e = \u2227q\u2208\u039e(~q \u2194 (q+ \u2194 q\u2212))\n\u03c3~\u039e = \u03c3+ \u2227 \u03c3\u25e6\u039e.  (7)\nwhere the pt, p\u2212, and q\u2022s are fresh variables (not in \u039e).\nLemma 3. Let x, \u03c8 \u2208 LBD, \u039e = Prop(x) \u222a Prop(\u03c8), and \u03c6 be an atomic L\uff61-term s.t. Prop(\u03c6) \u2286 \u039e. Then\n\u0393, x #BD \u03c3 iff \u0393cd, xd #CPL \u03c3cd\nWe can now use Lemma 3 to construct a faithful embedding of BD abduction problems with L\uff61-solutions into classical abduction problems. Note that the size of \u03c3x is linear"}, {"title": "Discussion and Future Work", "content": "We have studied abductive reasoning in the four-valued paraconsistent logic BD, motivating and comparing L\u25b3- and L\uff61-solutions. Our complexity analysis (Table 2) provides an almost complete picture of the complexity of the main decision problems related to abduction. In particular, we established that the complexity of solution existence in BD\u25b3 and BD\u3002 is not"}]}