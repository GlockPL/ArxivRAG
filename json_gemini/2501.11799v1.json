{"title": "Policy-Adaptable Methods For Resolving Normative Conflicts Through Argumentation and Graph Colouring", "authors": ["Johnny Joyce"], "abstract": "In a multi-agent system, one may choose to govern the behaviour of an agent by imposing norms, which act as guidelines for how agents should act either all of the time or in given situations. However, imposing multiple norms on one or more agents may result in situations where these norms conflict over how the agent should behave. In any system with normative conflicts (such as safe reinforcement models or systems which monitor safety protocols), one must decide which norms should be followed such that the most important and most relevant norms are maintained. We introduce a new method for resolving normative conflicts through argumentation and graph colouring which is compatible with a variety of normative conflict resolution policies. We prove that this method always creates an admissible set of arguments under argumentation semantics, meaning that it produces coherent outputs. We also introduce more robust variants of this method, each building upon their predecessor to create a superior output, and we include further mathematical proof of their coherence. Our most advanced variant uses the existing concept of curtailment, where one norm may supersede another without fully eliminating it. The methods we introduce are all compatible with various pre-existing policies for resolving normative conflicts. Empirical evaluations are also performed to compare our algorithms to each other and to others in existing literature.", "sections": [{"title": "Introduction", "content": "In a computerised or non-computerised system, there may exist one or more autonomous entities, which we call agents. In systems containing at least one agent, one may wish to govern agent behaviour either by giving direct commands or by setting guidelines for how the agent should interact with its environment. We call such guidelines norms. If an agent is given more than one norm to follow, some of these norms may contradict one another on how the agent should act in certain situations. We call this a normative conflict. The goal of this paper is to devise a way of resolving normative conflicts by deciding which norms to keep and which norms to modify or remove such that the agent continues to follow the most relevant and most important norms.\nA norm may be an obligation, a prohibition, or a permission. As an example, let us consider agent Andy, who works in retail and must follow the given norms:\nNorm 1: \"Andy is obligated to go to work each weekday\u201d.\nNorm 2: \"Andy is prohibited from disclosing confidential work information to employees of other companies\u201d.\nNorm 3: \"Andy is permitted to take a day off of work if he has requested it in advance\".\nHere, we see an example of each type of norm. Generally, a permission is able to override an obligation in this case, if Andy were to request a day off of work, then norm 3 would override norm 1. Norms may also be conditional in norm 3, the condition for activation is that Andy must have requested the day off.\nProhibitions and obligations can conflict with one another. For example, if Andy's company is working together with another company called CompanyCorp on a project, we may decide to introduce a fourth norm together with the previous three:\nNorm 4: \"Andy is obligated to share information with CompanyCorp about the joint project\".\nNow norms 2 and 4 conflict with one another, so we must decide which norms must be prioritised. Two obligations may also conflict with one another if both cannot be fulfilled simultaneously. Suppose we impose the following new norms:\nNorm 5: \"Andy is obligated to immediately answer the phone when a customer calls\".\nNorm 6: \"Andy is obligated to attend to customers at the cash register between 10:00-11:00 each weekday\u201d.\nThen if the phone were to ring whilst Andy is attending to a customer at the register, he would be unable to fulfil his obligation to answer the phone. Norms 5 and 6 also show examples of time dependencies within norms. Norm 5 is time-sensitive in its fulfilment condition in that Andy must answer immediately (presumably within a given time limit). On the other hand, norm 6 is time-sensitive in that its effects only apply at specific times. For most of this paper, we will not be thoroughly analysing time dependencies of norms.\nTo resolve normative conflicts, one needs to decide to prioritise certain norms above others, since by definition it is not possible for an agent to follow all conflicting norms it is given. As described by Oren et al., \u201cAn agent may drop a conflicting norm [...] or temporarily ignore it [...] We assume that an agent in this situation has no choice but to drop a norm permanently, and must determine which norms to drop\" [1]. We will also make this assumption for the initial sections in this paper, but we will also consider situations later where agents can temporarily ignore norms. When we do so, the specifics of how our assumptions change will be discussed. For now, we will assume that certain norms must be dropped whilst others must be adopted (or admitted). Our goal is to adopt a set of norms which do not conflict with one another such that the set contains the most important and most relevant norms possible. This will ensure that the agent(s) following these norms have a clear, well-defined objective which aligns with the tasks of highest priority. This will also ensure that the agent need not engage in normative reasoning whilst it is deployed, allowing its resources to instead be put towards its own agenda.\nIn this paper, we will introduce a method for deciding which norms to adopt and for resolving normative conflicts in a way which is versatile and coherent. We want this method to be compatible with some common policies for normative conflict resolution (which we will discuss in detail in Section 3), so this method should be adaptable with respect to policies. This will ensure that the method we introduce will be as flexible as possible to maximise applicability in different settings. We also want the results of this method to demonstrably align with notions in argumentation [2] that is, we want to be able to show that this method produces a set which is admissible or is a equivalent to an extension (these notions will be discussed in section 2.1). Achieving this goal would ensure that our method produces solutions which are logically sound and which prioritise norms sensibly.\nFurther to the above goals, we want to extend our method to allow for adoption of norms which directly conflict with one another. In doing so, the set of norms we admit will be moved past the semantics of argumentation, where conflicts can only be resolved by admitting one argument (or norm) or the other.\nThe structure of the remainder of this paper is as follows:\n\u2022 In Section 2, we give a brief introduction to the existing tools we will use for resolving normative conflicts namely argumentation (Section 2.1), conflict graphs (Section 2.2), and graph colouring (Section 2.3).\n\u2022 In Section 3, we discuss relevant work on policies which have been used for normative conflict resolution these policies give us a specific objective in judging the adaptability of our system. We also discuss relevant work within argumentation.\n\u2022 In Section 4, we introduce new methods for resolving normative conflicts using the tools discussed in Section 2. In Section 4.1, we introduce ColourResolve, our first new method which we will build upon throughout the remainder of Section 4. Section 4.2 discusses how our new method can be used with different policies. Section 4.3 highlights a shortcoming of our new result and introduces a remedy, ColourResolveComplete. Section 4.4 further refines our method, resulting in the most robust of all the new methods introduced so far, ColourCurtailComplete this method's computational complexity is discussed in Section 4.5.\n\u2022 In Section 5, we compare the empirical results of the new methods we have introduced to existing methods in literature using existing methodology. We also perform our own empirical evaluations.\n\u2022 In Section 6, we discuss potential areas for further exploration beyond our work.\n\u2022 Finally, we conclude in Section 7."}, {"title": "Argumentation and graph colouring", "content": "In standard logic, the discovery of new information does not alter the conclusions at which one has already arrived. The counterpart to this type of reasoning is called non-monotonic logic, where conclusions can be withdrawn or overturned on the basis of new information. For example, if one were looking at a starry sky at night and saw a light, it might be assumed that the light was a star. However, if one then sees that the star is moving, it may be more reasonable to instead assume that the light is a meteor. If one then sees that the light is flashing, one could again revise their assumption and presume that the light belongs to an aeroplane. Non-monotonic reasoning provides a basis for argumentation, which we will now discuss."}, {"title": "Argumentation", "content": "We will need tools to allow us reason about the conflicts between norms directly. To do so, we can use argumentation, a type of framework pioneered by Dung in 1995 [2]. Argumentation involves a set of arguments A and an attack relation R between these arguments. For two arguments a, b \u2208 A, if there is a tuple (a, b) \u2208 R, we say that argument a attacks argument b. In our case, we will view each norm as an argument (and will henceforth use \u201cnorm\u201d and \"argument\" interchangeably) and we will view a conflict between two norms as their corresponding arguments attacking one another. Note that we will therefore be considering attack arguments to be bidirectional if argument a attacks argument b, then argument b attacks argument a. This is not usually the case in argumentation, but this assumption will simplify the remainder of this paper.\nBy using argumentation, we now have access to notions within the field which are used to reason about which arguments are reasonable and should be accepted and which arguments should be rejected. This will help us resolve conflicts by discarding norms we value less highly than others when a conflict arises. The following list contains some common notions within argumentation which we will be using throughout the remainder of this paper:\nNote: We will use \u03a9 to denote a subset of the set all arguments A. This is non- standard notation which we are adopting due to a notational conflict which will arise later in Section 2.3.\n\u2022 We say that a set of arguments \u03a9 is conflict-free iff there are no arguments a, b \u0395\u03a9 s.t. a attacks b\n\u2022 We say that an argument a \u2208 A is acceptable wrt. a set of arguments \u03a9 iff for any b\u2208 A s.t. b attacks a, there exists some c\u2208\u03a9s.t. c attacks b. That is, \u03a9 attacks every argument which attacks a (or in other words, \u03a9 defends a).\n\u2022 We say that a set of arguments \u03a9 is admissible iff it is conflict-free and for every \u03b1 \u2208 \u03a9, a is acceptable wrt. \u03a9\n\u2022 A set of arguments \u03a9CA is a complete extension of A iff & is admissible and for every a \u2208 A which is acceptable wrt. \u03a9, \u03b1\u0395\u03a9\n\u2022 A set of arguments \u03a9 CA is a preferred extension of A iff & is a maximal admissible set. That is, |\u03a9| = max {|E||ECA is admissible wrt. A}."}, {"title": "Conflict graphs", "content": "Though there are various ways of representing normative conflicts, we will be using conflict graphs, put forth by Oren et al. [1]. The advantage of conflict graphs is that we can use existing work from both argumentation and graph theory to our advantage when resolving conflicts, as well as standard normative reasoning.\nIn standard graph theory, a graph consists of a finite set of discrete vertices V (often also called nodes, as with Oren et al.) and a set of edges E. Each edge consists of a pair of two vertices \u03c5, \u03c9 \u2208 V and can be thought of as a link or a relation between vertices v and w. Edges may be unordered pairs {v, w} or ordered pairs (v, w) if a graph contains ordered pairs as edges, then these edges are said to be directional, and the corresponding graph is called a directed graph, or a digraph. Directional edges represent a relation which is one-sided. On the other hand, graphs without directed edges are called undirected graphs, or simply \"graphs\".\nIn a conflict graph, each vertex represents a norm (or an argument), while each edge represents a normative conflict between two norms. We will assume that edges are undirected that is, whenever norm v conflicts with norm w, norm w also conflicts with norm v. A potential area for further work may involve directional conflicts, but we will not consider these cases in this paper.\nAs an example, let us consider a system where our agent Andy from before has been given the six norms we discussed in Section 1:\nNorm 1: \"Andy is obligated to go to work each weekday\".\nNorm 2: \"Andy is prohibited from disclosing confidential work information to employees of other companies\u201d.\nNorm 3: \"Andy is permitted to take a day off of work if he has requested it in advance\".\nNorm 4: \"Andy is obligated to share information with CompanyCorp about the joint project\".\nNorm 5: \"Andy is obligated to immediately answer the phone when a customer calls\".\nNorm 6: \"Andy is obligated to attend to customers at the cash register between 10:00-11:00 each weekday\u201d.\nHere, we have that norms 2 and 4 directly conflict with one another in their statements. Whenever Andy is busy attending to customers, there is also a conflict between norms 5 and 6 since Andy would be unable to fulfil both duties at once. Therefore, the normative conflict graph would appear as shown in Note that we have not drawn an edge from norm 1 to norm 3 because Andy's permission to take time off of work can override his obligation to go to work when norm 3 is applicable."}, {"title": "Graph colouring", "content": "As we continue, we will use graph colouring as one of our tools to solve normative conflicts, which we will introduce in this section. Given a graph consisting of vertices and edges, the aim of graph colouring is to assign each vertex a colour such that no two vertices of the same colour are connected by an edge typically, one tries to accomplish this using the fewest possible number of colours.\nA graph colouring which uses at most k colours is called a k-colouring, and a graph G is said to be k-colourable if there exists a proper k-colouring for G. The minimum k for which a graph G is k-colourable is called the chromatic number of G, denoted x(G). For a given colour c, the set of vertices corresponding to colour c is called the colour class of c.\nIn general, deciding whether there exists a k-colouring for k\u2208 N \\ {0,1,2} for a graph is an NP-complete problem. Furthermore, finding the chromatic number x(G) for a graph G is an NP-hard problem [3]. As such, we will not focus on finding graph colourings which use the exact minimum number of colours. Instead, we will consider known algorithms for creating colourings which may use more colours than the chromatic number, which we will discuss later. Some examples of possible colourings for a graph can be seen in For further reading on graph colouring, the reader is directed to Lewis' book on graph colouring [4].\nNote that for any valid colouring of any graph, each colour class is an independent set that is, there are no edges connecting any two vertices in the same colour class. This fact will serve as the backbone of the algorithms we will propose, where we will compare colour classes to find independent sets which correspond to the most important norms in the system.\nAs we continue into subsequent sections, we will use the following notation:\n\u2022 We will use standard graph-theoretic notation for most objects. G = (V, E) will represent a graph with vertex set V and edge set E.\n\u2022 When colouring any graph, one can create a bijection from the set of colours to {1,2,3, ..., n} CN, where n is the number of colours being used in the graph (so n \u2264 |V|). As such, N will represent the space of all possible colours which can be used and c\u2208 N will represent an arbitrary colour.\n\u2022 For a graph G = (V, E), a graph colouring & is equivalent to a function 4 : V \u2192 N since each vertex maps to a colour and each colour can be represented by an arbitrary natural number. We will denote arbitrary graph colourings by & and the set of possible graph colourings by \u0424.\n\u2022 Since E represents the edge set of a graph, this notation conflicts with the standard notation for an extension or a set of arguments in argumentation (also E). Therefore, we will use \u03a9 to denote a set of arguments/norms or a selected set of vertices while E will represent the edge set of a graph.\n\u2022 We will use A to denote the set of all arguments in the domain of our problem. Since we are modelling norms as arguments and arguments as vertices in a conflict graph, the set of arguments A and the set of vertices V represent the same objects seen through a different level of abstraction."}, {"title": "Related work on conflict resolution", "content": "Having introduced argumentation, we can now discuss existing materials on normative conflicts. Normative conflicts can be resolved using many different approaches, some of which involve argumentation, while others do not. In Section 3.1, we discuss how policies for normative conflict resolution are used, both in settings involving and not involving argumentation. In Section 3.2, we discuss the relation between argumentation and normative reasoning, and also discuss some criteria for how arguments be used to can defeat one another, building upon the policies discussed in Section 3.1."}, {"title": "Policies for normative conflict resolution", "content": "One example of a method for resolving normative conflicts without argumentation comes from Vasconcelos et al. [5]. They show that a normative conflict arises when any action is within scope of two conflicting norms, such as a prohibition and an obligation. That is, a conflict exists when an action is both simultaneously forbidden and obliged by some agent. Vasconcelos et al. also discuss policies for resolving conflicts, including lex posterior (where the more recent norms takes priority over less recent norms) and lex superior (where norms put forth by greater authorities take priority over others).\nAn appropriate example for demonstrating another type of policy comes from Horty [6], who put forth the following set of conflicting norms as a motivating example:\n\"Don't eat with your fingers,\nIf you are served asparagus, eat it with your fingers.\" [6]\nHere, neither lex superior nor lex posterior are applicable as we do not have information on the sources of norms nor on when they were imposed. Instead, the policy of lex specialis (where norms which are more specific than others take priority) is more suitable, since the first norm should be ignored when presented with asparagus. Stra\u00dfer and Arieli [7] have used an approach based on lex specialis to resolve normative conflicts through argumentation. In their work, arguments (or sequents as they call them) are eliminated when they contain another argument which attacks them either via rebuttal (directly refuting the opposing conclusion) or undercutting (refuting one or more of the opposing antecedents).\nOne of our previously stated aims for creating a new framework for conflict resolution is that we wish for it to be adaptable with respect to policies. Setting this as a specific objective, we wish for our resulting system to be compatible with the policies of lex superior, lex posterior, and lex specialis.\nNormative conflicts could also be resolved based on a system of trust. This bears a similarity to how one would apply lex superior, though instead of considering the amounts of authority of individuals who impose norms, we instead consider individuals based on their reputation. Examples include the work of Parsons et al. [8] [9] and of Keung et al. [10]. However, trust-based systems require more involved processes than the previously discussed policies since one would have to derive a measure of trust for each individual rather than using easily obtainable information within the system. That said, given a sufficiently adaptable system, should be possible to include trust-based policies as an \"add-on\" to the framework."}, {"title": "Policies and argumentation", "content": "Similarly to how policies exist for resolving normative conflicts, there are various criteria which can be used in argumentation for determining which arguments defeat others. One such example is the weakest link criterion. Consider a system where each argument is composed of several elementary arguments, called context arguments, where the conclusion of each context argument leads to the antecedent of the subsequent context argument. Here, the weakest link criterion dictates that the strength of an argument is determined by the strength its weakest context argument [11]. Another example would be the last link criterion, where the strength of an argument is determined by the strength of its final context argument. Our framework will not consider these criteria for defeating arguments and will instead focus on policies which do not involve argumentation-based reasoning. However, an alternate system based upon ours which uses argumentation-specific criteria to decide which norms to follow may be an avenue for future work.\nOther criteria for defeating arguments exist where arguments can be attacked without being defeated. For example, Amgoud and Ben-Naim [12] have proposed a system where arguments are sorted by strongest to weakest based upon how many attackers an argument has.\nSome frameworks and methods for non-monotonic reasoning have later been shown to have equivalent approaches using argumentation. For example, Liao et al [11] showed that using a \"greedy\" approach for creating an extension using the weakest link criterion creates a set of conclusions identical to those of an approach by Brewka and Eiter [13] from 17 years prior. It is expected that these parallels between argumentation and non-monotonic logic should exist, since it has been shown that Dung's argumentation framework is equivalent to classical logic with the addition of the Peirce-Quine dagger (i.e. the \"NAND\" operator) [14]. As such, approaches with and without argumentation should not be seen as mutually exclusive, with various degrees of overlap existing between different approaches. Therefore, by applying argumentation to normative conflict resolution, loss of detail or generality should not be considered a major concern.\nIt should be noted that the approaches featured in [11] and [13] require the existence a preference relation over context arguments, which could be derived using policies as in Section 3.1, or they could be given a priori. Other argumentation-based systems, such as those of Modgil and Luck [15], do not require an a priori relation, while other systems which do not involve argumentation also do not require an a priori relation [5]. We can therefore see that whether or not one chooses to involve argumentation in a system or framework does not directly impose a requirement (or lack thereof) for an ordering to be given as a component of the system. However, it is more advantageous to have this relation be derived as a part of the system. As explained by Modgil and Luck, \"flexible and adaptive agents need to engage in motivational argumentation over the respective merits of goals. Therefore, argumentation frameworks in which preferences [...] are 'given', and not themselves subject to reasoning, do not suffice.\" [15]. We will follow this philosophy with our own framework, aiming to use preference orderings which can be derived from the properties of norms and arguments, rather than relying on orderings given a priori."}, {"title": "Normative conflict resolution", "content": "Now that we have access to both graph colouring and conflict graphs, we can use these two tools to begin to solve normative conflicts. Now assume we have an arbitrary heuristic function h:G\u00d7\u00d7N\u2192R calling h would appear in the form h(G, 4, c). That is, h takes a graph, a colouring, and a colour as inputs and evaluates the overall importance of the set of norms corresponding to the given colour by returning a real number.\nLet us now introduce our first new algorithm ColourResolve in Algorithm 1, which uses graph colouring, conflict graphs, and an arbitrary heuristic to resolve normative conflicts."}, {"title": "Graph colouring for normative conflicts", "content": "ColourResolve first creates a colouring using an arbitrary graph colouring algorithm (we will discuss this further later). On line 3, it then uses the given heuristic to find the colour which maximises the heuristic value, then assigns this to the variable Chest. On line 4, it finds the subset of vertices V' CV corresponding to the colour Cbest. On line 5, the norms corresponding to the vertices with colour Cbest are found, which are then returned on line 6. ColourResolve always produces an admissible set, which we will now prove.\nProposition 1. Let G = (V, E) be any conflict graph. When using ColourResolve on G with any proper graph colouring algorithm and any heuristic h, the resulting set of arguments \u03a9 is always admissible.\nProof. To show that is admissible, we need to demonstrate both of the following facts:\n1. \u03a9 is conflict-free.\n2. For each a \u2208 \u03a9, a is acceptable wrt. \u03a9. That is, for each b\u2208 A s.t. b attacks a, there exists c\u0395\u03a9s.t. c attacks b.\nLet us start with showing that statement 1 holds. Suppose for contradiction that \u03a9 was not conflict-free. Then there exist two arguments u, v \u2208 \u03a9 such that u attacks v. Therefore, there exists an edge {u, v} \u2208 E in the conflict graph. Since u and v are both in \u03a9, they must have been assigned the same colour regardless of which heuristic and graph colouring algorithm was used. However, it is not possible to assign the same colour to two vertices connected by an edge in a graph colouring problem. Thus, a conflict cannot exist and so \u03a9 must be conflict-free.\nAs for statement 2, let a \u0395 \u03a9 and let b\u2208 A s.t. b attacks a. Then there is a normative conflict between a and b, so there is a bidirectional edge {a,b} in the conflict graph G. Therefore a attacks b and a \u2208 \u03a9, so a defends itself.\nSince statements 1 and 2 hold, we can conclude that \u03a9 is admissible.\nSince both the graph colouring algorithm and heuristic in Algorithm 1 are arbitrary, Colour- Resolve is flexible and can be adapted to suit the needs of the situation at hand. For example, one could use advanced graph colouring algorithms to minimise the number of colours used in the graph, which would thereby maximise the number of vertices corresponding to any given colour this would therefore maximise the number of norms which are admitted at the end of the algorithm. Alternatively, one could use simpler graph colouring algorithms to save computational time. As an example of a polynomial time algorithm one could use, we will briefly outline the DSatur algorithm [16], which has worst-case running time O(n\u00b2) [4]. This was first put forth by Br\u00e9laz in 1979 [16] and can be seen in Algorithm 2.\nHere, the degree of saturation of a vertex v refers to the number of coloured vertices v' with an edge (v, v') or (v', v). DSatur prioritises colouring vertices with the highest degree of saturation, thereby focusing on assigning colours to vertices which have the fewest colour options available. Ties are broken by selecting the highest-degree vertex, allowing DSatur to focus on vertices which impose the most constraints upon other vertices. The intended purpose of this example is to show the reader a powerful yet intuitive graph colouring method."}, {"title": "Heuristics", "content": "To demonstrate the flexibility of using arbitrary heuristics, we will now define some possible heuristics one could use with ColourResolve. Definition 1 defines a version of lex posterior adapted for use as a heuristic and Definition 2 defines an adapted version of lex superior.\nDefinition 1. Lex posterior (heuristic version)\nGiven a graph G = (V, E), a colouring \u00a2 : V \u2192 N, and a colour c \u2208 N, define the heuristic hpos: G\u00d7\u00d7 N \u2192 R by:\nhpos(G, $, c) := \u03a3\u03c5'\\{\u03c5, \u03c5'} \u2208 E,T, < Tv }|\nv\u2208V\u0245\u03c6(v)=c\nHere, To refers to the time at which the norm corresponding to vertex v was imposed.\nThe heuristic hpos finds the number of times any argument corresponding to a vertex with colour c defeats another argument by being declared earlier.\nOur definition of hpos checks for an edge \u201c{v, v'} \u2208 E\u201d. If we were to generalise our methods to directed graphs, then this edge could either be (v, v') or (\u03c5', v), where we would accept either option. We do not need to check the colour of each vertex v' which each v attacks since no two vertices with the same colour can be connected by an edge.\nOne could further modify this definition by subtracting the number of times each argument corresponding to a vertex with colour c is defeated by another argument. In section 5 later, we will perform empirical evaluations on our newly proposed algorithms. There, we will use the modified version of this definition (and similarly modified versions of other definitions in this section). However, the version shown in Definition 1 is simpler to state, which is why this definition has been declared in this way.\nDefinition 2. Lex superior (heuristic version)\nGiven a graph G = (V, E), a colouring $ : V \u2192 N, and a colour c \u2208 N, define the heuristic hsup: G\u00d7\u00d7 N \u2192 R by:\nhsup(G, $, c) := \u03a3\u03c5\u0384]{\u03c5, \u03c5'} \u20ac \u0395, \u03c1\u03c5 \u03c4\u03c1\u03c1\u03c5\u03bd}| \nv\u2208V\u0245\u03c6(v)=c\nHere, po refers to the power of the authority who imposed the norm corresponding to vertex \u03c5.\nThe preference relation is defined by a weak ordering defined as follows:\nFor all norms a,b: pa >p Pb \u21d4 a was imposed by a stronger power than b\nThis relation is a simplified version of one used by Vasconcelos et al. [5, Section 7]. Again, as with our definition for lex posterior, we check for edges going in both directions (v, v') and (v', v). We can also modify the definition by subtracting the number of times each argument with the specified colour is defeated.\nIn fact, this preference relation can be generalised to fit any preference ordering over vertices in a conflict graph, and new policies can be created when and where necessary. Definition 3 gives a generalised version of Definitions 1 and 2 which is compatible with any weak ordering over all vertices in the conflict graph.\nDefinition 3. Heuristic for any general preference relation (generalises definitions 1 and 2)\nGiven a graph G = (V,E), a colouring \u00a2 : V \u2192 N, and a colour c \u2208 N, and some weak ordering on V, define the heuristic h\u060e : G \u00d7 \u03a6\u00d7N \u2192 R by:\nh-(G, \u0444, c) := \u03a3\u03c5\u0384]{\u03c5, \u03c5'} \u20ac \u0395, \u03c5 > \u03bd'}| \nv\u2208V\u0245\u03c6(v)=c\nWe see that Definition 3 becomes equivalent to Definition 1 if the given weak ordering depends only the time at which norms were declared. It also becomes equivalent to Definition 2 if the given weak ordering depends only on the power of the authority who imposed the given norm. We can also see that Definition 3 generalises lex specialis if the given weak ordering is defined by the following:\nFor all norms a, b: a > b \u21d4 ant(a) ant(b)\n...where ant(x) is the set of antecedents of x for any argument x (or in the case of a norm, ant(x) corresponds to the requirements for norm x to come into effect).\nSince we have shown that ColourResolve is compatible with lex posterior, lex superior, and lex specialis, we have met our criteria for showing that our system is adaptable with respect to conflict resolution policies. In later sections, we will be modifying ColourResolve, but as long as the system continues to use the notion of heuristics, it will remain policy-adaptable.\nThere is one more heuristic of note which we will define before we consider it further in Section 4.3. This heuristic selects the colour class which corresponds to the greatest number of vertices overall, and can be seen in Definition 4.\nDefinition 4. Maximal colour class heuristic\nGiven a graph G = (V, E), a colouring : V \u2192 N, and a colour c \u2208 N, define the heuristic hmax: G\u00d7 \u00d7 N \u2192 R by:\nhmax (G, \u00a2, c) := {v \u2208 V | \u03c6(v) = c}|"}, {"title": "Producing argumentation extensions with ColourResolve", "content": "Upon inspection, it may appear that using the hmax heuristic with a suitable graph colouring algorithm for ColourResolve would produce a preferred extension. Intuitively, both the preferred extension and the hmax heuristic aim to maximise the number of arguments which are admitted. This certainly is the case with the graph and the colouring shown in Figure 2(b), where the colouring is both optimal and corresponds to a preferred extension under hmax. However, although hmax has the potential to often produce a preferred extension, this is not always the case.\nConsider the graph shown in \u2013 let us arbitrarily call this graph G6 since it has 6 vertices. It is possible to create a valid 3-colouring for G6, which can be seen in Figure 3(b). Furthermore, it is impossible to colour G6 using only two colours since G6 contains a fully-connected subgraph with three vertices. In other words, G6 contains \"triangles\", and these cannot be coloured with two colours since at least one vertex of the triangle would neighbour a vertex with a colour which matches its own. Therefore, the 3-colouring shown in Figure 3(b) uses the optimal number of colours 1. By using ColourResolve on G6 with heuristic hmax and an exact graph colouring algorithm, we would admit exactly two arguments those corresponding to either red, green, or blue.\nIf we now consider Figure 3(c), we can see that G6 contains a vertex subset of three disjoint vertices, shown in grey. If we consider G6 to be a conflict graph, then these grey vertices would correspond to a preferred extension of the corresponding set of arguments. If we wished to colour the graph in we would need one colour for the three grey vertices, then another distinct colour for each of the three remaining vertices. This would give a 4-colouring, which is sub optimal.\nTherefore, an exact graph colouring algorithm used with hmax on a problem with G6 as its conflict graph would admit two arguments, but a preferred extension would contain at least three arguments. So ColourResolve does not always find a preferred extension when using an exact colouring.\nThis example serves to show that although ColourResolve is highly versatile, there are situations where the results it produces differ from those of preferred semantics. The caveat here is that we assume that using an exact graph colouring algorithm will allow us to admit the highest possible amount of arguments with heuristic hmax, but this may not always be the case. For example, it may be possible that other sub-optimal graph colouring algorithms\n1Here, we say that G6 is 3-chromatic and that x(G6) = 3."}, {"title": "Admitting further norms through curtailment", "content": "So far", "10": ".", "follows": "nWhenever norm 1 is applicable and it is possible to abide by norm\n1", "Between 09": 0, "17": 0, "Between 12": 0, "13": 0}]}