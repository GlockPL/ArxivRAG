{"title": "PUTNAMBENCH: Evaluating Neural\nTheorem-Provers on the Putnam Mathematical\nCompetition", "authors": ["George Tsoukalas", "Jasper Lee", "John Jennings", "Jimmy Xin", "Michelle Ding", "Michael Jennings", "Amitayush Thakur", "Swarat Chaudhuri"], "abstract": "We present PUTNAMBENCH, a new multilingual benchmark for evaluating the\nability of neural theorem-provers to solve competition mathematics problems.\nPUTNAMBENCH consists of 1697 hand-constructed formalizations of 640 theo-\nrems sourced from the William Lowell Putnam Mathematical Competition, the\npremier undergraduate-level mathematics competition in North America. All the\ntheorems have formalizations in Lean 4 and Isabelle; a substantial subset also has\nCoq formalizations. Proving the theorems requires significant problem-solving\nability and proficiency in a broad range of topics taught in undergraduate math-\nematics courses. We use PUTNAMBENCH to evaluate several established neural\nand symbolic theorem-provers. These approaches can only solve a handful of the\nPUTNAMBENCH problems, establishing the benchmark as a difficult open chal-\nlenge for research on neural theorem-proving. PUTNAMBENCH is available at\nhttps://github.com/trishullab/PutnamBench.", "sections": [{"title": "1 Introduction", "content": "Automating mathematical reasoning is a longstanding goal in artificial intelligence (Newell et al.,\n1957). A prominent line of work on the problem (Li et al., 2024) uses neural models to di-\nrect theorem-proving in formal frameworks like Lean 4 (Moura and Ullrich, 2021), Isabelle\n(Wenzel et al., 2008), and Coq (Huet et al., 1997). These frameworks can \"execute\" proofs like\ncode and offer execution feedback, which simplifies the search for correct proofs.\nThe design of quality benchmarks is a key challenge in this research area. The two most prominent\nbenchmarks for neural theorem-proving are MINIF2F (Zheng et al., 2021) and FIMO (Liu et al.,\n2023). The former formalizes a mix of problems from high-school level courses and mathematics\ncompetitions such as AIME, AMC, and IMO; the latter consists of a collection of IMO problems.\nBoth benchmarks have limitations. For example, MINIF2F contains many problems that can be\nimmediately solved using an SMT solver, and FIMO only targets the Lean 3 framework, which is no\nlonger actively maintained.\nMore generally, as large language models (LLMs) grow in importance as a tool for neural theorem-\nproving (Li et al., 2024), preventing leakage between pretraining sets and evaluation sets is more\nimportant than ever. This makes the continued supply of new benchmarks an important goal.\nIn this paper, we respond to this challenge with PUTNAMBENCH, a new hand-curated, multilin-\ngual benchmark for neural theorem-provers. PUTNAMBENCH includes 1697 formalizations of 640\nproblems from the William Lowell Putnam Mathematical Competition, the premier college-level"}, {"title": "2 Background", "content": "Formal Theorem-Proving. Formal proof\nframeworks like Lean 4 (Moura and Ullrich,\n2021), Coq (Huet et al., 1997), and Isabelle\n(Wenzel et al., 2008) allow users to write\nmachine-verifiable proofs of mathematical\ntheorems. To create such a proof, one first\nuses a framework-specific language to formally\nstate the target theorem. The mathematical\nobjects referenced in the theorem can be\nimported from an existing repository or defined\nby the user. During the proof process, the proof\nframework maintains a state that includes\ninformation about the parts of the proof that\nremain to be completed. One can change this\nstate by executing a proof step. The user's goal\nis to write a sequence of proof steps (in the\nframework's language) that changes the proof\nstate to a special state \"QED\" in which there\nare no unmet proof obligations.\nThe Putnam Competition. The William\nLowell Putnam Mathematical (Competition,\n2024), organized by the Mathematical Associ-\nation of America (MAA), is the premier collegiate mathematics competition in North America.\nThousands of undergraduate students from universities across the United States and Canada take\nthe exam each year. The competition comprises two 3-hour-long sessions of six problems each,"}, {"title": "3 PUTNAMBENCH", "content": "PUTNAMBENCH is a multilingual evaluation benchmark con-\nsisting of formalized problems from the Putnam competition.\nPUTNAMBENCH is a manually produced benchmark, includ-\ning 640 formalizations in Lean 4 and Isabelle, and 417 for-\nmalizations in Coq. In aggregate, PUTNAMBENCH contains\n1697 formalizations of Putnam competition problems. We\nalso incorporate the informal statements and numerical solu-\ntions where applicable.\nNow we elaborate on the main features of PUTNAMBENCH.\nDiversity and Breadth. Compared to MINIF2F\n(Zheng et al., 2021) and FIMO (Liu et al., 2023), which\ngenerally rely on high-school mathematics, PUTNAMBENCH\nincorporates a wider variety of problems which require defini-\ntions of the standard undergraduate mathematics curriculum.\nThe PROOFNET benchmark (Azerbayev et al., 2023) also\nsources problems from the undergraduate curriculum, but\nthese problems are generally from standard textbooks as\nopposed to mathematical competitions. Putnam problems\noften require definitions from multiple fields, which standard\ntextbooks do not necessarily target. Formalizations in PUTNAMBENCH include concepts from a\nwide range of mathematical fields, including: (i) Analysis: Limits, integrals, derivatives, continuity;\n(ii) Linear Algebra: Matrices, determinants, fields; (iii) Abstract Algebra: Rings, groups, magmas,\npermutations; (iv) Algebra: Polynomials, inequalities, algebraic expressions; (v) Number Theory:\nPrimes, irrationality, base representations, divisors, palindromes; (vi) Geometry: Polygons, point\nsets, line intersections, Euclidean distance; (vii) Set Theory & Combinatorics: Countability, power\nsets, discrete structures, counting.\nMultilinguality. PUTNAMBENCH contains formalizations of Putnam problems in Lean 4, Isabelle,\nand Coq. The formalizations also include concepts defined in each proof assistant's mathematical\nrepositories - notably, Mathlib, the HOL standard library, and Coquelicot (among various Coq\nrepositories). To the best of our knowledge, PUTNAMBENCH is the first undergraduate-level com-\npetition benchmark for each of these languages. Furthermore, we are the first to produce a human\nmathematics competition-style evaluation benchmark for Coq.\nWe hope that this contribution can enable Coq practitioners access to the rapidly-growing field of\nmachine learning for mathematics."}, {"title": "4 Experimental Evaluation", "content": "To understand the challenges that PUTNAMBENCH poses for state-of-the-art theorem-proving ap-\nproaches, we attempt to solve its problems using a suite of such approaches. Given the relative\nlack of tailored systems for multilingual theorem-proving, we run evaluations for each language\nseparately. Any method that is evaluated on multiple languages is based on off-the-shelf foundation\nmodels.\nMetrics. Our evaluation is based on the pass@n (Lample et al., 2022) metric. This metric measures\na prover's ability to produce a successful proof, as determined by the formal proof environment,\ngiven a budget of n proof attempts. In search-based methods (Thakur et al., 2024), each proof\nattempt involves a distinct search that can query a neural model multiple times.\nModels. For each of the languages, we perform evaluations using GPT-4 (OpenAI, 2023) , a\nhighly capable foundation model. We run evaluations using in-context learning, appending several\nexamples of successful proofs of simple theorems in each language. For evaluations with Lean 4\napproaches, we note that many approaches have targeted Lean 3, which is not backward-compatible\nand no longer actively maintained. We evaluate COPRA (Thakur et al., 2024) on PUTNAMBENCH,\nmodifying the prompt examples of COPRA to enable search in Lean 4. Furthermore, we run eval-\nuations LeanDojo's retrieval-augmented prover REPROVER, a finetuned model designed to utilize\nincorporate retrieved lemmas as part of the proof search. We also include evaluate with the retrieval\ncomponent held out.\nFor our Isabelle experiments, we run evaluations of Draft, Sketch, and Prove (DSP) (Jiang et al.,\n2022b) using GPT-4 as the underlying foundation model, noting that many further works for\ntheorem-proving in Isabelle have extended on the DSP pipeline as we mention in Section 5. We\nalso run evaluations using stand-alone invocations to Sledgehammer, a powerful symbolic automa-\ntion tool in Isabelle that relies on calls to external SMT solvers.\nAs for our Coq experiments, prior neural approaches for Coq have mostly targeted software verifi-\ncation tasks, as opposed to competition mathematics. As a result, our Coq experiments use COPRA,\nwhich also supports theorem-proving in Coq. We evaluate using the Tactician (Blaauwbroek et al.,\n2020) platform with the locality sensitive hashing model configuration. We also run evaluations\nusing CoqHammer (Czajka and Kaliszyk, 2018), a tool similar to Isabelle's Sledgehammer, which\nmakes calls to external constraint solvers."}, {"title": "4.1 Results", "content": "Lean 4. We prompt GPT-4 in a pass@10, setting temperature T = 0.7 and using several examples\nof simple theorems and proofs, to generate a proof for each problem. The result of this experiment\nyields a single successful proof across all 640 Lean formalizations. The problem (Putnam 1988 B1)\nand the generated proof are given in Figure 1. In particular, Putnam 1988 B1 is solved on the first of\n10 attempts. An example of a failure mode of GPT-4 is given in Figure 18."}, {"title": "4.2 General Analysis", "content": "Aggregating over all experiments performed in all languages, we find that a total of 6 problems in\nPUTNAMBENCH are successfully proven. A majority of these come from evaluations in Isabelle,\nparticularly with strong contributions from Sledgehammer. Sledgehammer can solve all three prob-\nlems involving magmas which appear in our benchmark but fails to produce successful proofs for\nany other formalization. DSP solves an additional two problems and relies heavily on Sledgeham-\nmer to fill in the proofs of intermediate steps. The single problem solved in Lean and Coq also\nmakes use of automated tactics like linarith and lia, and requires only a single crucial step.\nHence, we find that a few PUTNAMBENCH problems are not entirely intractable using current meth-\nods. However, anecdotally, these problems are among the easiest ever included in the Putnam compe-\ntition. All admit a very short natural language proof and do not require reasoning about particularly\ncomplicated objects. We believe that significant advancements in automated mathematical reasoning\nare required to make progress on PUTNAMBENCH."}, {"title": "5 Related Work", "content": "Formal Benchmarks. Several evaluation benchmarks for formal mathematics have been developed\nin recent years. MINIF2F (Zheng et al., 2021) is a formal-to-formal benchmark of competition\nproblems, sourced from high school competitions such as the AMC, AIME, and IMO. MINIF2F\nis a multilingual benchmark, comprising of 488 problems each formalized in Lean 3, Metamath,\nIsabelle and HOL Light. We chose not to include formalizations in Metamath and HOL Light as\nthey have not been the focus of attention for neural theorem-proving. A similar competition-style\nbenchmark is FIMO (Liu et al., 2023), which contains 149 Lean 3 formalizations of IMO shortlist\nproblems produced using a back-translation procedure with GPT-4. The automatically-generated\nformalizations are then manually verified. Both benchmarks are designed to measure certifying the\nsolution to the informal problem statement when one exists. Compfiles (2024) is a collection of\n171 Lean 4 formalizations of competition problems, predominantly from the IMO and USAMO,\noften accompanied by a formal proof, which has not seen use in benchmarking automated theorem-\nprovers. ProofNet (Azerbayev et al., 2023) introduced a benchmark of 371 exercises, formalized\nin Lean 3, from standard textbooks in the undergraduate mathematics curriculum. While largely\nnot competition-based, problems in ProofNet draw from a broader library of concepts than miniF2F\nand FIMO, which rely only on high-school mathematics. LeanDojo (Yang et al., 2023) introduces a\ndataset of formal mathematics and proofs derived from Lean's mathlib library (mathlib Community,\n2020), and trains a retrieval-augmented model towards generating proofs on their held-out test set.\nProverBot9001 (Sanchez-Stern et al., 2020) introduced a dataset for theorems and proofs written in"}, {"title": "6 Conclusion", "content": "We presented PUTNAMBENCH, a benchmark for neural theorem-proving consisting of formaliza-\ntions of Putnam competition problems. A distinctive feature of PUTNAMBENCH is that it spans a\nbroad range of undergraduate-level mathematical topics, including algebra, analysis, and number\ntheory. Another unique benefit is that it includes problems in Lean 4, Isabelle, and Coq, the three\nmost popular formal proof frameworks.\nAs our experiments show, PUTNAMBENCH is a challenging benchmark: all current theorem-proving\napproaches fail to solve more than a handful of its problems. We believe that these failures include\ntwo root causes: (i) While current theorem-provers can effectively stitch together standard proof\nsteps well-represented in the training corpus, they often fail at synthesizing new lemmas and or-\nchestrating these lemmas into intricate proofs. (ii) Current methods often fail to leverage the deep\nknowledge available in mathematics repositories. Developing a new generation of neural theorem-\nprovers in which these weaknesses are at least partly addressed is an exciting direction of future\nresearch."}, {"title": "A Appendix", "content": "A.1 Formalization difficulties in Coq\nIn the Coq Standard Library, operations and definitions for numbers are split across modules. The\nclassical reals are defined in Coq.Reals.Raxioms, the integers are defined in Coq.ZArith.BinInt, and\nthe natural numbers are defined in Coq.Init.Datatypes and Coq.Numbers.BinNums. The last two\nmodules are distinct to reflect the two different constructions of natural numbers, one in base 10 and\none in binary. The rational numbers are defined in Coq.QArith.QArith_base and the Positive type is\ndefined in Coq.Numbers.BinNums. Unlike the previous binary number definition, the Positive type\nexcludes the number zero.\nFormalizing a problem may require switching between these various types using an inbuilt set of\nconversions, as seen in Figure 5. For example, comparing an integer with a real number may take\nthe form of r = IZR i, where r is a real number and i is an integer, with the comparison being\ndone in the Reals scope. These additional casting operations can introduce additional complexity in\nour formalizations. Figure 24 illustrates the usage of various casting operations.\nMathcomp and GeoCoq are extension libraries for the Coq proof assistant. Mathcomp is a theory-\nbased library in that it contains high-level structures for algebra and data structures. In order to\nextend its functionality, the developers have created a refinement library called CoqEAL, which\ncontains a framework compatible with other representations like the numerical types found in\nthe Coq Standard Library. While there has been substantial work on these refinements, to the best of\nour knowledge, it is currently not possible to instantiate matrices or groups of real type.\nGeoCoq is a library built for geometry that operates off Tarski's Axioms. Many problems have been\nformalized using the vast amount of theorems based off these axioms. However, GeoCoq's inbuilt\nnumbers (a field F) lacks compatibility with the numerical representation of Coq Reals. As such,\nnumerical expressions and computations using concrete numbers like 16 and 97 are not natively ac-\ncommodated within GeoCoq's framework. This limitation impacts our ability to represent numbers\nin Coq formalizations."}, {"title": "Putnam 2001 B4.", "content": "Let S denote the set of rational numbers different from {-1,0,1}. Define\nf: S \u2192 S by f(x) = x \u2212 1/x. Prove or disprove that\n$\\bigcap_{n=1}^\\infty f^{(n)}(S) = \\emptyset$,\nwhere f(n) denotes f composed with itself n times."}, {"title": "Putnam 2020 A3.", "content": "Let \u03b1\u03bf = \u03c0/2, and let an = sin(an-1) for n \u2265 1. Determine whether\n$\\sum_{n=1}^\\infty a_n^2$ converges."}, {"title": "Putnam 1997 A4.", "content": "Let G be a group with identity e and $ : G \u2192 G a function such that\n\u0444(91)(92)$(93) = $(h1)\u0444(h2)(h\u2083)\nwhenever 919293 = e = h1h2h3. Prove that there exists an element a \u2208 G such that (x) =\na\u0444(x) is a homomorphism."}, {"title": "Putnam 2018 B1.", "content": "Let P be the set of vectors defined by\nP = { (a, b) | 0 \u2264 a \u2264 2, 0 \u2264 b \u2264 100, and a, b \u2208 Z }\nFind all v \u2208 P such that the set P\\{v} obtained by omitting vector v from P can be partitioned\ninto two sets of equal size and equal sum."}, {"title": "Putnam 1992 B6.", "content": "Let M be a set of real n x n matrices such that\n1. I \u2208 M, where I is the n\u00d7n identity matrix;\n2. if A \u2208 M and B \u2208 M, then exactly one of AB \u2208 M and \u2013 AB \u2208 M holds;\n3. if A \u2208 M and B\u2208 M, then either AB = BA or AB = -BA;\n4. if A \u2208 M and A \u2260 I, there is at least one B \u2208 M such that AB = \u2013\u0412\u0410.\nProve that M contains at most n\u00b2 matrices."}, {"title": "Putnam 2012 A3.", "content": "Let f : [-1,1] \u2192 R be a continuous function such that\n1. f(x) = $2xf(2/\u221a(2-x2))$ for every x in [-1,1],\n2. f(0) = 1, and\n3. limx\u21921- f(x)/\u221a(1-x) exists and is finite.\nProve that f is unique, and express f(x) in closed form."}, {"title": "Putnam 1980 A5.", "content": "Let P(t) be a nonconstant polynomial with real coefficients. Prove that the\nsystem of simultaneous equations\n0 =$\\int_0^x P(t) sin tdt= \\int_0^x P(t) cos tdt$ has only finitely many real solutions x."}, {"title": "Putnam 2017 B2.", "content": "Suppose that a positive integer N can be expressed as the sum of k consec-\nutive positive integers\nN = a + (a + 1) + (a + 2) + \u2026 + (a + k \u2212 1)\nfor k = 2017 but for no other values of k > 1. Considering all positive integers N with this\nproperty, what is the smallest positive integer a that occurs in any of these expressions?"}, {"title": "Putnam 1988 B1.", "content": "A composite is a product ab with a and b not necessarily distinct integers\n{2, 3, 4, . . . }. Show that every composite is expressible as xy+xz+yz+1 withx, y, z positive\nintegers."}, {"title": "Putnam 1995 A1.", "content": "Let S be a set of real numbers which is closed under multiplication (that is,\nif a and b are in S, then so is ab. Let T and U be disjoint subsets of S whose union is S. Given\nthat the product of any three (not necessarily distinct) elements of T is in T and the product of\nany three elements of U is in U, show that at least one of the two subsets T, U is closed under\nmultiplication."}, {"title": "Putnam 1971 B1.", "content": ""}]}