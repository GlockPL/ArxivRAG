{"title": "DropEdge not Foolproof: Effective Augmentation Method for Signed Graph Neural Networks", "authors": ["Zeyu Zhang", "Lu Li", "Shuyan Wan", "Sijie Wang", "Zhiyi Wang", "Zhiyuan Lu", "Dong Hao", "Wanli Li"], "abstract": "Signed graphs can model friendly or antagonistic relations where edges are annotated with a positive or negative sign. The main downstream task in signed graph analysis is link sign prediction. Signed Graph Neural Networks (SGNNs) have been widely used for signed graph representation learning. While significant progress has been made in SGNNs research, two issues (i.e., graph sparsity and unbalanced triangles) persist in the current SGNN models. We aim to alleviate these issues through data augmentation (DA) techniques which have demonstrated effectiveness in improving the performance of graph neural networks. However, most graph augmentation methods are primarily aimed at graph-level and node-level tasks (e.g., graph classification and node classification) and cannot be directly applied to signed graphs due to the lack of side information (e.g., node features and label information) in available real-world signed graph datasets. Random DropEdge is one of the few DA methods that can be directly used for signed graph data augmentation, but its effectiveness is still unknown. In this paper, we are the first to provide the generalization error bound for the SGNN model and demonstrate from both experimental and theoretical perspectives that the random DropEdge cannot improve the performance of link sign prediction. Therefore, we propose a novel Signed Graph Augmentation framework (SGA) tailored for SGNNs. Specifically, SGA first integrates a structure augmentation module to detect candidate edges solely based on network information. Furthermore, SGA incorporates a novel strategy to select beneficial candidates. Finally, SGA introduces a novel data augmentation perspective to enhance the training process of SGNNs. Experiment results on six real-world datasets demonstrate that SGA effectively boosts the performance of diverse SGNN models, achieving improvements of up to 32.3% in F1-micro for SGCN on the Slash-", "sections": [{"title": "1 Introduction", "content": "As social media continues to gain widespread popularity, it fosters a multitude of interactions among individuals, which are subsequently documented within social graphs [1, 2]. While many of these social interactions denote positive connections, such as liking, trust, and friendship, there are also instances of negative interactions, encompassing feelings of hatred, distrust, and more. For instance, Slashdot [3], a tech-related news website, allows users to tag other users as either 'friends' or 'foes'. Graphs that incorporate both positive and negative interactions or links are commonly termed signed graphs [4, 5]. In recent years, there has been a growing interest among researchers in exploring network representation within the context of signed graphs [6\u20138]. Most of these methods are combined with Graph Neural Networks (GNNs) [9, 10], and are therefore collectively referred to as Signed Graph Neural Networks (SGNNs) [11, 7, 12, 13]. This endeavor focuses on acquiring low-dimensional representations of nodes, with the ultimate goal of facilitating subsequent network analysis tasks, especially link sign prediction.\nDespite increasing interest in SGNNs in recent years, two issues remain unresolved. First, real-world signed graph datasets are exceptionally sparse (see Table 5 from Appendix H). The sparsity of signed graphs makes downstream tasks challenging. As shown in Issue 1 (from Figure 1), without additional structure information or side information, predicting the edge sign between nodes vj and Uk in the test set is difficult. However, this changes with the introduction of extra edges (eil) through data augmentation. Second, according to the analysis in [14], SGNNs cannot learn proper representations for nodes from unbalanced triangles. The intuitive understanding is as follows: as shown in Issue 2(c) (from Figure 1), there is a negative relationship between node vi and node vj in a one-hop path, while through a two-hop path via node vr, it becomes a positive relationship. In other words, the relationship between node vi and node vj is uncertain, which complicates the task of SGNNs in learning representations for these three nodes. Furthermore, we notice that the proportion of unbalanced triangles is considerable (see Table 3).\nOne promising approach to alleviate the aforementioned issues in SGNNs is data augmentation (DA) which has been well-studied in computer vision [15\u201318] and natural language processing [19-21]. Recently, significant advancements have been made in graph augmentation [22\u201324], including node perturbation [25, 26], edge perturbation [27], and sub-graph sampling [28]. However, current graph augmentation methods cannot be directly applied to signed graphs for following reasons: 1) Some methods [22, 23] require side information (e.g., node features and labels), which are often absent in real-world signed graph datasets that only contain structural information. 2) Random structural perturbation based augmentation methods [27, 8, 29] cannot improve SGNN performance. As shown in Figure 2, random EdgeDrop cannot stably enhance SGCN performance. For more experimental results on data augmentation methods based on random structural perturbations, please refer to the Appendix A. Besides, we take a first step into developing a deeper theoretical understanding of SGNN models and deriving the generalization error bound of SGCN. Based on this analysis, we further demonstrate that randomly deleting edges increases the generalization error bound of SGNN, and therefore, it is not an effective enhancement method for SGNN (see Section 4). In summary, it is necessary to design a new DA method specifically for SGNNS.\nOverall, the designed signed graph augmentation method should address the two common obstacles encountered by popular SGNN models:\n1. Exploring new structural information using solely network information.\n2. Alleviate the negative impact of unbalanced triangles on SGNNs."}, {"title": "2 Problem Statement", "content": "A signed graph is defined as G = (V,E+,E\u00af), where V = {v1,...,v|V|} represents the set of nodes, and E+ and E- denote the positive and negative edges, respectively. Each edge eij \u2208 E+ U"}, {"title": "3 Proposed Method", "content": "The overall framework of SGA is shown in Figure 3, which aims to augment training samples (i.e., edges) from a structure perspective (edge manipulation) to side information (edge feature). SGA mainly encompasses three key elements: 1) generating new training candidate samples, 2) selecting beneficial candidate samples, and 3) introducing a new feature (i.e., edge difficulty score) for training samples. For the specific procedural details of each part, please refer to Appendix C."}, {"title": "3.1 Generating Candidate Training Samples", "content": "Real-world signed graph datasets are extremely sparse (see Table 2) with many uncovered edges. In this part, we attempt to uncover the potential relationships between nodes. We first use a SGNN model, e.g., SGCN [11], as the encoder to project nodes from topological space to embedding space. Here, the node representations are updated by aggregating information from different types of neighbors as follows:\nFor the first aggregation layer l = 1:\nHpos(1) = \u03c3 (WPos(1) [A+H(0), H(0)])\nHneg(1) = \u03c3 (Wneg(1) [A-H(0), H(0)])\nFor the aggregation layer l > 1:\nHpos(l) = \u03c3 (Wpos(l) [A+Hpos(l-1), A-Hneg(l-1), Hpos(l-1)])\nHneg(l) = \u03c3 (Wneg(l) [A+Hneg(l-1), A-Hpos(l-1), Hneg(l-1)])\nwhere Hpos(l) (Hneg(l)) represents the positive (negative) segment of representation matrix at the lth layer. A+(A\u00af) represents the row normalized matrix of the positive (negative) part of the adjacency matrix A. Wpos(l) (Wneg(l)) denotes learnable parameters of the positive (negative) part, and"}, {"title": "3.2 Selecting Beneficial Candidate Training Samples", "content": "After obtaining candidates, we do not merge them into the training set directly. Instead, we select the beneficial portions based on some rules. According to [14], it proves SGNNs cannot learn proper representations from unbalanced triangles (see Figure 1). The intuitive insight from this conclusion for signed graph augmentation is that beneficial candidates should not lead to new unbalanced triangles. Therefore, after generating candidate training set Dtrain_add and Dtrain_del, we need to discern which operations are beneficial or not. Considering that removing edges will not introduce new unbalanced triangles, it can be directly applied to the training set. However, adding edges may potentially introduce unbalanced triangles, so it needs to be analyzed whether it should be applied to the training set. The specific criteria are as follows:\n\u2200 (Vi, vj, o(eij)) \u2208 Dtrain_del, Dtrain \\ {(Vi, vj, o(eij))};\n\u2200 (Vi, vj, o(eij)) \u2208 Dtrain_add, if (vi, vj, o(eij)) \\notin Dtrain, and \u2203uk \u2208 Ni \u2229 Nj,\n(\u03c3(eij) * \u03c3(eik) * \u03c3(ejk)) > 0, then Dtrain \u222a {(vi, vj, o(eij))}.\nAccording to the above steps, we have merged the Dtrain_add and Dtrain_del into the training set Dtrain."}, {"title": "3.3 Introducing New Feature for Training Samples", "content": "In this part, we attempt to alleviate the negative impact of unbalanced triangles on SGNNs from another perspective by augmenting a new feature for training samples (i.e., edges), namely edge difficulty score. Intuitively, edges belonging to unbalanced triangles have higher difficulty scores, while those belonging to balanced triangles have lower difficulty scores. Based on the difficulty scores, we design a curriculum learning-based training plan, aiming to reduce the training weights of edges with high difficulty scores, thereby mitigating the negative impact of unbalanced triangles on SGNNs.\nWe provide a definition of global and local balance degree:\nDefinition 3.1. The Global Balance Degree [35] of a signed graph is defined by:\nD3(G) = |O3^b|/|O3|"}, {"title": "4 Generalization Bound of SGNN", "content": "In this section, we are going to prove the generalization error bound for SGNN. Our results show that the generalization performance of the model is affected by the number of edges. A larger number of edges in the training set usually generalizes better, which means that dropout cannot always contribute to improving the model's generalization ability in many situations. For the basic setup and assumptions, please see the Appendix E.\nMain Result. Under link prediction task, we denote AD as a learning algorithm trained on dataset D. According to Algorithm 2, we can set AD = g(f(zi, zj, w)), the generalization gap is defined as the difference between training error and test error:\nSgen = EA [R(ADtrain) - R(ADtest)]\nSgen \u2264 \u03a8(\u03b2, \u03b8, 1/Nt, 1/Nt, L)\nTheorem 1 (Generalization Gap of SGNN):\nEgen \u2264 2\u03b1 + \u221a(2\u03b1M\u03b2(\u03b8 + \u03c4\u03b7\u03b1af\u03b2))/Nt\nHere \u03b2 refers to the infinite norm of the matrix Z, \u03b8 refers to paradigm of initial weight matrix ||Winit||. The generalization ability is mainly influenced by scale of the graph(the number of nodes and edges) and the norm of weights matrix. In the main result, \u03b1\u03c3, ag, M are constants determined by the non-linear activation function, function g and function f respectively."}, {"title": "5 Experiments", "content": "In this section, we commence by assessing the enhancements brought about by SGA in comparison to diverse backbone models for the link sign prediction task. We will answer the following questions:\n\u2022 Q1: Can SGA improve the performance of backbone models? Does SGA effectively alleviate issues related to graph sparsity and the presence of unbalanced triangles?\n\u2022 Q2: Does each part of the SGA framework play a positive role?\n\u2022 Q3: Is the proposed method sensitive to hyper-parameters? How do key hyper-parameters impact the method performance?\nFor an introduction and statistical information on the datasets, please refer to the Appendix H. For details on baselines and experimental settings, please also see the Appendix I."}, {"title": "5.1 Performance Evaluation (Q1)", "content": "To comprehensively evaluate the performance of our proposed SGA, we contrast it with several baseline configurations that exclude SGA integration on link sign prediction. For a detailed view, AUC and F1-binary score results are presented in Table 1. Further, F1-macro and F1-micro can be referenced in Appendix J. For each model, the mean AUC and F1-binary scores, along with their respective standard deviations, are documented. These metrics are derived from five independent runs on each dataset, utilizing distinct, non-overlapping splits: 80% of the edges are used for training, while the residual 20% serve as the test set. Additionally, the table elucidates the percentage improvement in these metrics attributable to the integration of SGA, relative to the baseline models without SGA. The results provide several insights:\n\u2022 Our investigations affirm that the SGA framework serves as an effective method in augmenting the performance of both signed and unsigned graph neural networks.\n\u2022 For unsigned GNN models (GCN, GAT), the SGA method can effectively enhance the predictive performance (Some metrics show an improvement of over 10%.), possibly because both signed GNN and unsigned GNN models are based on a similar message-passing mechanism.\n\u2022 Concerning the signed GNN models (SGCN, SiGAT, GS-GNN), we observed that SGA significantly enhances SGCN SIGAT compared to GS-GNN. The reason for this might be that SGA primarily focuses on mitigating the impact of unbalanced triangles on the model's predictive performance. Both SGCN and SiGAT are designed based on balance theory, making them more susceptible to the influence of unbalanced triangles, whereas GS-GNN is not, and therefore, it is less affected by unbalanced triangles. This indirectly reflects that SGA indeed alleviates the negative impact caused by unbalanced triangles to some extent.\nNext, we will verify whether SGA effectively addresses the two issues in signed graph representation learning based on SGNN. Regarding the dataset density, we conducted a statistical analysis, as shown in Table 2. From the statistical results, it can be observed that after augmentation through the"}, {"title": "5.2 Ablation Study (Q2)", "content": "In this section, we explore how different parts of SGA, contribute to its overall effectiveness. We do this by testing the SGCN [11] under various settings:\n\u2022 SGCN: Here, we use the SGCN in its basic form. It works directly on the original graph data without any additional techniques or modifications.\n\u2022 +SA (Structure Augmentation, refer to Sec. 3.1 and Sec. 3.2): SGCN operates on augmented datasets. This augmentation involves the addition or removal of edges from the initial graph.\n\u2022 +TP (Training Plan, refer to Sec. 3.3): SGCN runs on the original graph but with a modified training paradigm. Adopting a curriculum learning approach, we rank edges by their difficulty. The model is then progressively exposed to these edges, transitioning from simpler to more challenging ones as training epochs progress."}, {"title": "5.3 Parameter Sensitivity Analysis (Q3)", "content": "In this subsection, we perform a sensitivity analysis focusing on six hyper-parameters: Edel, Edel, \u03b5+ add, \u03b5add (these denote the probability thresholds for adding or removing positive/negative edges); T represents the number of intervals during the training process where more challenging edges are incrementally added to the training set; and \u03bb0 designates the initial fraction of the easiest examples. Performance metrics for the SGCN model within the SGA framework, as measured by AUC across various hyper-parameter configurations, is illustrated in Figures 5. F1-binary, F1-macro and F1-micro scores are illustrated in Appendix K.\nThe figures reveal divergent patterns in AUC and F1 scores based on hyperparameter adjustments, with SGCN showing more significant variations on the Slashdot dataset compared to others. On a broader scale, the AUC is fairly consistent with changes to \u03b5+ del and \u03b5add. Notably, as \u03b5del or \u03b5add rise, there's a tendency for the AUC to augment. Interestingly, AUC initially increases and then"}, {"title": "6 Conclusion", "content": "In this paper, we introduce the Signed Graph Augmentation framework (SGA), a novel approach designed to address two prominent issues in existing signed graph neural networks, namely, data sparsity and unbalanced triangles. This framework has three main components: generating candidate training samples, selecting beneficial candidate training samples, and introducing a new feature (edge difficulty score) for training samples. Based on this new feature, we have designed a curriculum learning framework tailored for SGNNs. Through extensive experiments on benchmark datasets, our SGA framework proves its effectiveness in boosting various models."}, {"title": "A Experimental results of data augmentation through random structural perturbations", "content": "We employ three different random methods (random addition/removal of positive edges, random addition/removal of negative edges, and random sign-flipping of existing edges) were tested with the classic SGNN model, SGCN [11]. As is Shown in Figure 6, The results indicate that these random methods do not enhance SGCN performance, suggesting that data augmentation methods used in signed graph contrastive learning models [8, 29] do not readily extend to general SGNNS not using a contrastive learning paradigm."}, {"title": "B Related Work", "content": "In this section, we will introduce two aspects related to this paper: signed graph neural networks and graph data augmentation."}, {"title": "B.1 Signed Graph Neural Networks", "content": "Due to the widespread popularity of social media ,signed networks have become ubiquitous .Therefore, the network representation of signed graphs has gained significant attention[37, 38, 29, 14, 39, 40]. Existing research has predominantly concentrated on tasks related to link sign prediction, while overlooking other crucial tasks like node classification [41], node ranking [42], and community detection [43]. Some signed graph embedding techniques, such as SNE [44], SIDE [45], SGDN [46], and ROSE [47], utilize random walks and linear probability methods to capture the positive and negative relationships within graphs.These techniques consider complex interactions between nodes when processing graph data, but they may not be sufficient to capture deep-seated relationships in signed graphs. With the further exploration of signed graphs, neural networks have also been applied to signed graph representation learning in recent years. There are some SGNN models based on GCN [9].For example, the first Signed Graph Neural Network (SGNN), SGCN [11], generalizes GCN to signed graphs by utilizing balance theory to correctly aggregate and propagate the information across layers of a signed GCN model. Another noteworthy GCN-based approach is GS-GNN, which moves beyond the traditional balance theory by categorizing nodes into multiple groups. Additionally, there are SGNN models based on GAT [48] such as SiGAT [32], SNEA [7], SDGNN [12], and SGCL [8],which further enhance the ability to identify the varying levels of importance of nodes in the graph by introducing attention mechanisms. Unlike the above methods dedicated to developing more advanced SGNN models, we introduce a plugin to enhance the performance of SGNNS."}, {"title": "B.2 Graph Data Augmentation", "content": "With the rapid development of graph neural networks, there has been a growing interest and demand for graph data augmentation techniques. To address issues such as data sparsity and noise"}, {"title": "C Detailed Design of SGA", "content": "Figure 7, 8 and 9 show the details of the three steps of the SGA framework."}, {"title": "DSGA Algorithm Details", "content": "The SGA Algorithm is shown in Algorithm 1."}, {"title": "E Theory Analysis", "content": "Before the proof begins, the framework of the SGNN for edge prediction is given in Algorithm 2. A network first performs feature aggregation, where each node learns the representations of its neighboring nodes, and subsequently uses the feature representations of several pairs of nodes as inputs to a classifier for predicting the nature of the edges connecting these two nodes. Before the proof begins, we show the framework of the SGNN for edge prediction below."}, {"title": "E.1 Basic Setup", "content": ""}, {"title": "Algorithm 2: Simplified SGNN Framework", "content": "Input: the adjacency matrix A \u2208 R|V|\u00d7|V| of graph G, number of aggregation layers L, weight matrix w\n2: Output: Label prediction of edge ei,j\nH0=A\n// Feature Aggregation\n4: for l 0 \u2192 L-1 do\n4:\nHi+1 = p(Hl, \u03c9) = \u2211vj\u2208N+,vj\u2208N- aggregate(v, vi) + aggregate(v,vj)\nend for\n6: Z = HL\n// Classifier\n\u00f4 (lij) = f (zi, zj, W)\n8: Upgrade parameters based on loss function\nreturn Aij\nA network first performs feature aggregation, where each node learns the representations of its neighboring nodes, and subsequently uses the feature representations of several pairs of nodes as inputs to a classifier for predicting the edges connecting these two nodes. Here, zi,zj denote the i-th and j-th rows respectively, in matrix Z and \u00c2ij is the predicted label of edge eij. These vectors correspond to the node representations learned through graph filters in traditional GNNs. But actually SGNN does not have representations for each node, and this is done here to more clearly represent the variables that affect the generalization performance during the proof process next."}, {"title": "E.2 Assumptions", "content": "l-Lipschitz Continuous and Smooth Loss Function: A function f : X \u2192 R is a\u2081-Lipschitz continuous if for all x, y \u2208 X, |f(x) \u2212 f(y)| \u2264 \u03b11||x \u2212 y||. A function f : X \u2192 R is a2-Lipschitz smooth if for all x, y \u2208 X, |f\u2032(x) \u2212 f'(y)| \u2264 \u03b12||x-y||, where f' represents the differential function of f, and |||| represents the 2-norm.\nSimilarly, for functions of three variables, a function f : X \u2192 R is a\u2081-Lipschitz continuous if for all x, y, z \u2208 X, | f (xi, Yi, z) \u2212 f (xj, yj, z)| \u2264 \u03b11\u221a(xi - Xj)\u00b2 + (Yi - Yj)\u00b2. A function f : X \u2192 R is a2-Lipschitz smooth if for all x,y,z \u2208 X, |f'(xi, Yi, z) \u2212 f'(xj, yj,z)| \u2264 \u03b12\u221a(Xi - Xj)\u00b2 + (Yi - Yj)\u00b2. We assume that the loss function L(), f(), g(), satisfies the Lipschitz condition.\nActually, in simple terms, Lipschitz continuity portrays how smooth the function is, ensuring that the function does not have too steep a slope or abrupt changes: in the event of a small change in the input value, the change in the output value is also limited to a certain range.\nIn practice, regularization, normalization, gradient trimming, and other methods of keeping the model stable actually limit the drastic changes in the function, which means that the assumption is easily satisfied.\nTraining set and Test set: Training data is usually easier to obtain than test data. In the link prediction task, the training set contains more edges and can simulate the data distribution in real scenarios, while the test set is used to validate the performance of the model in real applications. It is also taken into account that if the number of edges in the test set is too high, it may cause the evaluation results to be skewed towards the distribution of the training set, which does not accurately"}, {"title": "F Proof of Theorem 1", "content": "In this section, we will present the entire proof of our main result about the generalization gap bound. Similar as proof of theorem 1[[64], Theorem 1], we have:\nSgen = EA [R(ADtrain) - R(ADtest)]\n=(1/Nt) \u2211eij E&t L(Aij, Aij) - (1/Nm)\u2211epq E&m L (Apq, Apq)\n=(1/Nm) \u2211eij E&t L(Aij, Aij) -L (Apq, Apq)\nThe loss function we use is based on link sign prediction, where nt,nm is the number of edges in training set and test set respectively. Step(a) is the application of our assumption. In learning process, the number of edges in test set is always lower than it in training set. Therefore, we get eq(11). Then using absolute value inequality, we have:\n\u03a3L (Aij, Aij) - L(Apq, Apq)\neij, epq\n\u2264\u03a3 |L (Aij, Aij) \u2013 L(Aij, Apq) + L(Aij, Apq) - L(Apq, Apq)|\neij, epq\n=\u03a3 [av |Aij - Apq| + \u03b1 |Aij - Apq|\nStep(b) uses the Lipshitz-continuity of loss function L(A, A). Next, we consider the first item. As Aij, Apq \u2208 {1,-1,0} signifies the original sign and the predicted sign of the edge eij, obviously we get the upper bound: max |Aij - Apq|=2.\nFor the last item, according to the process of link prediction:\n\u00c2ij = \u00f4(eij) = f(zi, zj, W)\nContinuing to use the Lipschitz-continuity of the function f(), we get:\n\u2211\u03b1\u03bd |\u00c2ij \u2013 \u00c2pq|\neij, epq\n\u2264\u03b1\u03a3 |f(zi, zj, w) - f (zp, zq, w) |\n\u2264\u03b1||w|| \u2211\u221a(zi-zp)\u00b2 + (zj\u2212zq)\u00b2\n\u2264\u03b1||w|| \u2211\u221a2+2 \u2264\u221a2\u03b1\u039c||w|| \u03a3 ||\nHere, Step(c) is an extension of the Lipschitz-condition for multivariate functions. Similar to a\u00b2\u03b1 and \u03b1, M is constant determined only by the function f() itself. We will subsequently prove the existence of the constant M in the proof of Lemma 1."}, {"title": "G Proof of Lemma 1", "content": "For the ternary function f(x, y, z) with a bounded 20, if the function f satisfies the Lipschitz-condition for z, it can be obtained:\n| f (x1, y1, zo) \u2013 f (x2,y2, zo)| \u2264 M |zo| \u221a(x1-x2)\u00b2 + (y1 - y2)\u00b2\nFor a succinct representation in the next proof, we define D(x1 x2, y1 y2) = (x1-x2)\u00b2+(y1-y2)\u00b2.\nTo prove our conclusion, we first construct the auxiliary function G:\nG(x, y, z, \u2206x, \u2206y)=1/2(f(x + \u2206x, y + \u2206y, z) + f (x,y,z))\nBy the definition of G(x, y, z, \u2206x, \u2206y), we have:\nG(x1, y1, z, \u2206x1, \u2206y1)-G(X2,Y2, z, \u2206x2, y2)=1/2[f(x1 + \u2206x1, y1 + \u2206y1, z) \u2212 f(x2 + \u2206x2, y2 + \u2206y2,z) + f (x1, y1,z) \u2212 f (x2,Y2, z)]=\nUsing a special case of Cauchy Schwarz's inequality, we have:\nD( X1 + AX1,X2 + X2) \u2264 (D(X1, X2) + D(Ax1 Ax2))\ny1 + \u2206y1 y2 + \u2206y2y1y2\u2206y1\u2206y2\nGiven that VD(Xx2) is bounded and the obvious conclusionVD(Xx2))<\nG(x1, y1, 2, \u2206x1, \u2206y1) \u2013 G(x2, y2, z, \u2206x2, \u2206y2)\n< K\u221a(x1 \u2212 x2)\u00b2 + (Y1 - Y2)\u00b2 + (\u2206x1 \u2013 \u2206x2)\u00b2 + (\u2206y1 \u2013 \u2206y2)2\nHere K is a constant ultimately determined by function f. Based on eq(23), next we construct a differential of the following form:\nf(x1, y1,z) - f(x2,y2,z)\n= 1/2 [f(x1,y1, z) + f (x2,y1,z) \u2013 ( f (x2, Y1, z) + f (x2,y2,z))]\n= G(x1, y1, z, x2 - x1,0) \u2013 G(x2, Y2, z, 0, Y2 - Y1)\nAs what we defined in eq(20)(23), \u2206x1 = x2 - X1, AY2 = Y2 - Y1, \u2206x2 = \u0394\u03a5\u2081 = 0. Applying eq(23) to eq(24):\nf (x1, y1, z) \u2212 f (x2, y2,z) \u2264 \u221a2K|z|v\u221a(x1-x2)\u00b2 + (Y1 - Y2)2\nLet M = \u221a2K, we managed to proof the existence of M in eq(14)."}, {"title": "H Datasets", "content": "We conduct experiments on six real-world datasets, i.e., Bitcoin-OTC, Bitcoin-Alpha, Wiki-elec, Wiki-RfA, Epinions, and Slashdot. The main statistics of each dataset are summarized in Table 5. In the following, we explain the important characteristics of the datasets briefly.\nBitcoin-OTC\u00b9 [65, 66] and Bitcoin-Alpha2 are two datasets extracted from bitcoin trading platforms. Because Bitcoin accounts are anonymous, individuals assign trust or distrust tags to others to enhance security.\nWiki-elec\u00b3 [67, 1] is a voting network in which users can choose trust or distrust to other users in administer elections. Wiki-RfA [68] is a more recent version of Wiki-elec.\nEpinions\u2074 [67] is a consumer review site with trust and distrust relationships between users.\nSlashdot [67] is a technology-related news website in which users can tag each other as friends (trust) or enemies (distrust).\nFollowing the experimental settings in [11], We randomly split the edges into a training set and a testing set with a ratio of 8:2. We run with different train-test splits for 5 times to get the average scores and standard deviation."}, {"title": "I Baselines and Experiment Setting", "content": "We use five popular graph representation learning models as backbones, including both unsigned GNN models and signed GNN models.\nUnsigned GNN: We employ two classical GNN models (i.e., GCN [9] and GAT [31]). These methods are designed for unsigned graphs, thus, as mentioned before, we consider all edges as positive edges to learn node embeddings in the experiments.\nSigned Graph Neural Networks: SGCN [11] and SiGAT [32] respectively generalize GCN [9] and GAT [31] to signed graphs based on message mechanism. Besides, they integrate the balance theory. GS-GNN [13] adopts a more generalized assumption (than balance theory) that nodes can be divided into multiple latent groups. We use these signed graph neural networks as baselines to explore whether SGA can enhance their performance.\nWe implement our SGA using PyTorch [69] and employ PyTorch Geometric [70] as its complementary graph library. The graph encoder, responsible for augmenting the graph, consists of a 2-layer SGCN with an embedding dimension of 64. This encoder is optimized using the Adam optimizer, set with a learning rate of 0.01 over 300 epochs. For SiGAT, we randomly standardized the node embedding dimension to 20 as recommended in [32]. For the remaining embedding-based methods it was set to 64, matching the dimensionality used in GS-GNN [13]. For the baseline methods, we adhere to the parameter configurations as recommended in their originating papers. Specifically, for unsigned baseline models like GCN and GAT, we employ the Adam optimizer, with a learning rate of le-2, a weight decay of 5e-4, and span the training over 500 epochs. For signed baseline models, SGCN is trained with an initial learning rate of 1e-2 and run for 300 epochs, SiGAT is trained with an initial learning rate of 5e-3 and run for 1500 epochs, GSGNN is trained with an initial learning rate of le-2 and run for 3000 epochs. The experiments are performed on a Linux machine with eight 24GB NVIDIA GeForce RTX 3090 GPUs.\nOur primary evaluation task is link sign prediction. We assess the performance employing AUC, F1-binary, F1-macro, and F1-micro metrics, consistent with the established norms in related literature [71, 13]. It is imperative to note that across these evaluation metrics, a higher score directly translates to better model performance."}, {"title": "J More Link sign prediction results", "content": ""}, {"title": "K Parameter Sensitivity Analysis with F1 scores", "content": ""}, {"title": "Algorithm 1: SGA Algorithm", "content": "1: Input: A signed graph training edge set Dtrain", "del\n2": "Output: SGNN f' parameters \u03b8f'\n3: Initialize SGCN parameter \u03b8f", "n4": "Pre-train the f on Dtrain\n// Generation of Candidate Training Samples\n5: for all vi", "do\n6": "Calculate P+ and P using f\n7: if (P + > \u03b5add or P neg > \u03b5neg ) then\n8: Dcand_add \u2190 Dcand_add \u222a {(vi", "\u03c3(eij))}\n9": "end if\n10: if (vi", "then\n11": "Dcand_del \u2190 Dcand_del \u222a {(vi", "\u03c3(eij))}\n12": "end if\n13: if (vi", "then\n14": "Dcand_del \u2190 Dcand_del \u222a {(vi", "\u03c3(eij))}\n15": "end if\n16: end for\n// Selecting Beneficial Candidate Training Samples\n17: for all (vi", "do\n18": "Dtrain \u2190 Dtrain \\ {(vi", "\u03c3(eij))}\n19": "end for\n20: for all (vi", "do\n21": "if (vi", "then\n22": "for all uk \u2208 Ni"}]}