{"title": "AppAgent v2: Advanced Agent for Flexible Mobile Interactions", "authors": ["Yanda Li", "Chi Zhang", "Wanqi Yang", "Bin Fu", "Pei Cheng", "Xin Chen", "Ling Chen", "Yunchao Wei"], "abstract": "With the advancement of Multimodal Large Language Models (MLLM), LLM-driven visual agents are increasingly impacting software interfaces, particularly those with graphical user interfaces. This work introduces a novel LLM-based multimodal agent framework for mobile devices. This framework, capable of navigating mobile devices, emulates human-like interactions. Our agent constructs a flexible action space that enhances adaptability across various applications including parser, text and vision descriptions. The agent operates through two main phases: exploration and deployment. During the exploration phase, functionalities of user interface elements are documented either through agent-driven or manual explorations into a customized structured knowledge base. In the deployment phase, RAG technology enables efficient retrieval and update from this knowledge base, thereby empowering the agent to perform tasks effectively and accurately. This includes performing complex, multi-step operations across various applications, thereby demonstrating the framework's adaptability and precision in handling customized task workflows. Our experimental results across various benchmarks demonstrate the framework's superior performance, confirming its effectiveness in real-world scenarios. Our code will be open source soon.", "sections": [{"title": "1 Introduction", "content": "Large Language Models (LLMs) like ChatGPT (OpenAI, 2023) and GPT-4 (OpenAI, 2023) have greatly advanced natural language processing, enabling their integration into intelligent agents that revolutionize autonomous decision-making. These agents (Schick et al., 2024; Qin et al., 2023b), initially tailored for text-based interactions, exhibit advanced human-like features, including adaptive memories that enhance their environmental engagements and processing capabilities across diverse NLP tasks.\nHowever, real-world applications often require beyond textual processing, necessitating the integration of visual data and other modalities. This requirement exposes shortcomings in traditional text-only agents and highlights the urgent need for advanced multimodal systems. These systems (Gao et al., 2023; Sur\u00eds et al., 2023; Wu et al., 2023a) are critical in complex environments like mobile and operating system platforms where they need to perform multi-step reasoning, extract and integrate information, and respond adaptively to user inputs. Innovative solutions such as the AppAgent (Yang et al., 2023b) and MobileAgent (Wang et al., 2024) have shown promise by enabling more natural interactions with smartphone applications through human-like interactions.\nDespite these advancements, accurately recognizing graphical user interfaces (GUIs) remains a key challenge, impacting the decision-making accuracy of multimodal agents. Previous methods (Liu et al., 2024; Wang et al., 2024) relying on visual features often face inaccuracies due to limitations in recognition models. Additionally, the dynamic nature of mobile environments, which frequently introduce new features, poses further challenges. Even sophisticated models like GPT-4, while proficient with well-known apps, struggle with lesser-known apps due to unfamiliar visual elements. The rapid updates in app interfaces and functionalities further hinder these models' effectiveness across diverse applications.\nTo address this challenge, AppAgent (Yang et al., 2023b) adopts a human-like approach by automated exploration and watching demos. This strategy allows the agent to store UI element descriptions in a document rather than relying on rigid memorization, thus enhancing decision-making by leveraging contextual understanding. However, AppAgent depends heavily on an off-the-shelf parser to identify UI elements, which restricts the agent's operational flexibility in environments featuring non-standard components such as video players and games. This dependency limits the agent's ability to adapt its actions to unfamiliar or unique interface elements, thereby affecting its overall effectiveness in diverse applications.\nTo mitigate these limitations, we propose a novel multimodal agent framework designed to adapt to the dynamic mobile environment and diverse applications. We develop an extensive action space enabling the agent to interact with a wide variety of elements. This includes not only those elements that can be parsed using a standard parser but also elements and text identified through OCR and detection tools. Unlike previous work that relied solely on ID matching from parser to retrieve information, our approach incorporates multiple forms of element data. To facilitate access diverse elements, we have designed a structured storage system to construct a knowledge base. Each element within the knowledge base can store different attribute information such as parser details, textual content, and visual descriptions. This system is tailored to organize and store element information in a manner that supports quick retrieval and effective utilization, significantly boosting the agent's ability to perform in novel scenarios.\nFollowing previous work (Yang et al., 2023b), our agent operates in two distinct phases: exploration and deployment. In the exploration phase, our agent autonomously analyzes and documents the functionality of unknown UI elements and applications, tailored to specific task types. This proactive documentation allows the agent to build a robust knowledge base of UI layouts and operations, vital for handling tasks in unfamiliar environments. During this phase, we also incorporate a reflection module, which serves to validate the documented functionalities based on iterative assessments, ensuring the accuracy and reliability of the information stored. In the deployment phase, the agent leverages RAG technology (Lewis et al., 2020) to dynamically access and update its knowledge base with relevant document content based on real-time interactions, significantly enhancing its capability to adapt to novel scenarios. This framework not only streamlines the learning process but also enhances the agent's decision-making capabilities by providing a deeper understanding of each application's functionality."}, {"title": "2 Method", "content": "In this section, we provide a detailed description of our multimodal agent framework as Figure 1, which is structured into two primary phases: exploration and deployment. At each round, the agent analyzes the current GUI with task requirements, generating observations, thoughts, actions, and summaries. The summary, serving as memory, is carried over to the next execution prompt, ensuring continuity throughout the task execution process."}, {"title": "2.1 Agent Framework", "content": "Our multimodal agent framework is implemented on the Android 15 environment using the Android Studio emulator. The agent interacts with the mobile phone by invoking commands through the AndroidController. This interaction process is based on analyzing the current GUI interface's structured data parsing information, combined with OCR and detection models to extract detailed information from screenshots. The data extracted includes Android ID, numerical labels marked on the screenshots, features of the elements, texts, and the coordinates of the UI elements. This setup allows the agent to perform efficiently within a dynamic mobile environment, integrating advanced recognition capabilities with intelligent decision-making processes based on the interpreted data from the user interface."}, {"title": "2.2 Agent Interactions", "content": "During both the exploration and execution phases, the agent interacts with the mobile phone, translating human commands or outputs from LLMs into instructions that the Android system can recognize and execute. We detail these commands as follows:\n1. TapButton: Initiates tap action on user interface element. This can be specified either by entering the element's number identifier in the screenshot or by describing its visual features.\n2. Text: Simulates typing by entering a string of text into the designated area.\n3. LongPress: Applies a prolonged press on a specified element area.\n4. Swipe: Executes a swipe action in a specified direction on an element. This can be used for scrolling pages vertically or horizontally.\n5. Back: Simulates the device's back button to return to the previous UI state.\n6. Home: Commands the agent to return to the main screen. This is crucial for agent to re-execute the tasks and cross-apps tasks.\n7. Wait: Pauses the operation to allow the system to catch up, refresh the screen snapshot.\n8. Stop: Signals the completion of tasks and ends the current operation.\nOnce these commands are transformed into corresponding instructions, they are executed by the Android system through the AndroidController. This setup ensures precise command execution, allowing the agent to perform tasks efficiently within the Android environment. More details about action space are displayed in Appendix."}, {"title": "2.3 Exploration Phase", "content": "The exploration phase is aimed at analyzing the GUI in relation to the current task. It involves identifying and documenting the functions of UI elements through two alternative methods: agent-driven and manual exploration. All prompts used are displayed in Appendix."}, {"title": "2.3.1 Agent-Driven exploration", "content": "This method starts with the agent analyzing the current UI interface to identify elements requiring interaction and to determine the specific actions needed. Once these elements and actions are pinpointed, the agent executes the planned actions. Following the execution of action, the agent takes screenshots before and after the interaction to compare and analyze the changes. This comparison allows the agent to record the operational functions of the UI elements and assess the effectiveness of each action taken.\nAfterwards, the agent enters reflection phase. If the agent determines that the executed action is completely irrelevant to the task, it performs a return operation. The irrelevant action is recorded in a useless_list and is fed back into the LLM. If the results of the actions align with the intended user task and prove effective, the relevant UI information is documented and continued to explore.\nThis reflection ensures that only actions that align with the user's task are considered effective and documented for future retrieval. This method not only enhances the quality of the knowledge base but also refines the agent's strategy in realtime, ensuring that subsequent actions are more likely to contribute effectively to task completion."}, {"title": "2.3.2 Manual Exploration", "content": "This method is introduced to overcome the limitations encountered during agent-driven exploration, such as the LLM's erroneous judgments due to its incomplete understanding of certain apps and UI elements. Manual exploration allow GPT-4 to observe manual operations, compare screenshots before-and-after operations similar to agent-driven, gaining a clearer understanding of new UI elements and task workflows. The exploration is enhanced with advanced OCR and detection models, providing comprehensive UI analysis based on human interactions. Humans guide the sequence of actions and conclude the process, thereby streamlining the operational workflow and accelerating the learning process. Importantly, just like in automatic exploration, the information regarding UI elements and their functionalities observed during manual exploration is meticulously documented. This manual exploration ensures that the agent can overcome shortcomings of the automated processes by incorporating sophisticated understanding and adjustments that only human insight can provide."}, {"title": "2.4 Development Phase", "content": "During the deployment phase, the agent can utilizes the knowledge acquired to perform user tasks effectively. Initially, the agent fetches the current GUI information and traverses the elements using Self-query retriever for document retrieval. The self-query retriever converts document content into embeddings, stored in a vector store, from which it retrieves the most pertinent document based on resource IDs or OCR-derived information.\nThe agent then integrates this document into the prompt for agent, analyzing the current GUI screenshot, document content, and specific task requirements to make informed decisions and execute actions based on the positional information of UI elements. Alternatively, the agent can also operate without loading the document, directly handling the majority of common tasks effectively. After each action, the agent updates its prompts with historical information and action outcomes, thereby enhancing its memory and improving decision-making for subsequent steps.\nThe process continues until the agent determines that the task has been completed, at which point it exits the current process and reports task completion. This structured approach ensures that actions are executed precisely and efficiently, leveraging the detailed knowledge base created during the exploration phase to optimize performance and user satisfaction."}, {"title": "2.5 Document Generation", "content": "This document serves as a specialized knowledge base, meticulously designed to store comprehensive information about UI elements collected during the exploration phase. The database includes various data for each UI element such as Android ID, visible labels, text content, visual features (e.g., color and shape), screen coordinates, and functionalities as interpreted by GPT-4.\nTo enhance accessibility and utility, we have developed a novel structured storage format suitable for managing diverse element types. This format not only facilitates organized data retrieval but also supports dynamic updates based on real-time interactions during the deployment phase. As the agent operates across various applications, it actively updates the document in response to new UI elements and adapts its strategies accordingly.\nThis dynamic updating mechanism ensures that the agent remains adaptable and efficient, capable of adjusting its actions based on user requirements and contextual changes. The continual enhancement of the document significantly improves the agent's understanding and manipulation of application interfaces, leading to more accurate and contextually appropriate interactions. Meanwhile, markedly enhances the user experience and operational efficiency of the agent."}, {"title": "2.6 Advanced Features", "content": "This subsection highlights the key functionalities that enhance our multimodal agent framework, focusing on visual feature decision-making, safety checks, and cross-app task management. These features collectively improve the agent's safety, versatility, and efficiency, ensuring robust performance in complex and dynamic environments."}, {"title": "2.6.1 Visual Features Decision-Making", "content": "When the agent confronts scenarios where the desired interactive element is not numerically tagged, and other numerically tagged elements are ineffective for task completion, it automatically transitions to an alternative visual feature UI layout. This process leverages advanced OCR technology (Liao et al., 2020) and detection models (Liu et al., 2023b) to accurately recognize and annotate text and icons within the interface. By numerically annotating these elements using established methodologies, the agent is equipped to make informed decisions based on the newly adapted UI screenshot. This capability is crucial for handling icons in previously unknown scenarios, ensuring that the agent can navigate and interact with various UI elements effectively, regardless of prior exposure. This dynamic decision-making process significantly enhances the agent's ability to adapt to new environments and execute tasks with higher precision and reliability."}, {"title": "2.6.2 Safety Check", "content": "In modern LLMs and agent systems, safety is crucial, particularly in automated processes that can lead to privacy breaches. To tackle this issue, we implemented a safety check during the deployment phase. The agent reviews the current UI screenshot, and if the next steps involve sensitive actions like account passwords, payment or other privacy-related concerns, it will switch to manual mode so the user can handle these operations personally. For privacy, the agent will not retain any information from this process. Once the user completes the sensitive task and inputs \"finish,\" the agent will automatically continue with the deployment phase and carry on with the task until it's completed. The safety check offers several key advantages. It ensures that sensitive tasks remain secure by involving human judgment and minimizes the risk of data leakage. Furthermore, it increases user trust in the system, providing assurance that private information is handled carefully, while still enabling the agent to effectively complete its assigned tasks."}, {"title": "2.6.3 Cross-Apps Task", "content": "In addition to its core functionalities, our framework is capable of handling complex tasks that span multiple applications. This ability allows the agent to perform tasks that require interactions across different interfaces. When engaging in such cross-app tasks, the agent evaluates its progress based on memories and the specific task requirements. It determines whether the actions within one application have been completed before navigating back to the application interface. Subsequently, it assesses the next set of commands and continues executing tasks in another application. This capability is particularly valuable for tasks that involve gathering and processing information from various sources or coordinating actions between different apps."}, {"title": "3 Experiments", "content": "In this section, we will conduct a comprehensive evaluation with our agent framework. The experiments were conducted on the Android platform to maintain consistency and simplify validation. We utilized the Android Studio emulator for the experiments, which included comprehensive testing on the public benchmarks and qualitative results. This dual approach allowed us to benchmark our agent against standardized criteria while also gaining deeper insights into its real-world performance on mobile applications and environments."}, {"title": "3.1 Quantitative Results", "content": "In this section, we present a comprehensive evaluation of our agent using three distinct benchmarks: DroidTask (Wen et al., 2024), AppAgent (Yang et al., 2023b), and Mobile-Eval (Wang et al., 2024). We begin with DroidTask to test complex task performance, comparing against AppAgent for different exploration methods, and conclude with Mobile-Eval to assess comprehensive capabilities. Results in the ensuing sections demonstrate the superiority of our approach in varied application scenarios."}, {"title": "3.1.1 Droid Task", "content": "In this study, we employ the DroidTask dataset (Wen et al., 2024), an Android Task Automation benchmark suite designed to evaluate the capabilities of mobile task automation systems. DroidTask consists of 158 high-level tasks derived from 13 popular applications. We conducted our experiments using the DroidTask dataset. Due to variations in the app versions and device models used during evaluation, the specific workflows for implementing functionalities in the apps may differ. Consequently, we employ the \"Completion Rate\" as our evaluation metric, similar to (Wen et al., 2024). The Completion Rate is defined as the probability of accurately completing all the actions in a given sequence, which gauges the agent's ability to consistently and successfully execute a task.\nAutoDroid incorporates a memory mechanism, analogous to the document in our agent. We compared the performance of AutoDroid with and without the memory component to our agent, which is deployed directly without document. We employed the robust LLM GPT-4 as the baseline, and compared our method against the LLM-Framework and two versions of AutoDroid, as illustrated in Table 2. The results reveal that our agent, even without exploration stage, not only significantly outperformed GPT-4 but also surpassed AutoDroid when it is augmented with memory. This finding underscores the superiority of our approach in leveraging direct deployment strategies effectively and highlights the robustness of our system in a competitive benchmark environment."}, {"title": "3.1.2 AppAgent", "content": "AppAgent (Yang et al., 2023b) has introduced a benchmark that spans ten commonly used applications with diverse functionalities, including Twitter, Telegram, Temu, among others. We compare our agent against AppAgent on this benchmark to assess our agent's adaptability across various functions and interfaces. The primary evaluation metric is the success rate, which reflects the proportion of tasks that the agent successfully completes within an application. The results are detailed in Table 1. The results of our agent-driven exploration are comparable to those obtained from AppAgent with watching demos. After integrating the documents generated through manual exploration, our agent's performance improved significantly, underscoring the effectiveness of our exploration phase."}, {"title": "3.1.3 Mobile-Eval", "content": "We evaluated our agent on the Mobile-Eval benchmark. Mobile-Eval is a comprehensive benchmark introduced for mobile agents, containing 10 commonly used mobile apps to test agent performance across different tasks. Mobile-Eval assesses the following metrics:\n\u2022 Success (Su): Marks an instruction as successful if the agent completes it entirely.\n\u2022 Process Score (PS): Evaluates step accuracy by calculating the ratio of correct steps to total steps.\n\u2022 Relative Efficiency (RE): Compares the steps taken by the agent to human performance to measure efficiency.\n\u2022 Completion Rate (CR): Measures the proportion of steps the agent completes compared to a human's total steps.\nWe compared our agent's performance against the original Mobile-Agent benchmark scores and human performance, as shown in Table 2. Without integrating the documentation and solely relying on the deployment phase, we achieved the results outlined below The upper table shows the results for Mobile-Agent, and the lower table presents results for our agent. Our agent excelled in completing each task, achieving a 100% success rate across all instructions in the 10 task categories. The average PS score across three instruction sets exceeded 90%, indicating that our agent efficiently and accurately completed tasks with minimal errors. This demonstrates its ability to closely emulate human behavior and execute specified tasks effectively on various general apps."}, {"title": "3.2 User study", "content": "To demonstrate our qualitative results, we conducted a user study, as shown in Figure 3. The task involved a series of complex operations, including cross-application activities, long-term multi-step task execution, and multi-step memory storage. To conserve space, we only present the core eight steps of the process here. As can be seen, our agent exhibited outstanding performance in executing complex tasks. More case studies in Appendix."}, {"title": "3.3 Analysis of UI Interface Parsing", "content": "In our agent, we employ two primary methods for parsing UI interfaces: structured data and visual features. Structured data provides precise and rich information, including details about widget interactivity\u2014such as clickability and scrollability. In this experiment, we utilized XML data parsed from Android systems to enhance our understanding and manipulation of these interactive elements. This method is well-suited for most generic apps and, in conjunction with our agent, can complete the majority of tasks efficiently.\nNevertheless, there are challenges associated with mobile platforms that feature custom-developed apps and icons. Specifically, structured data cannot be parsed for custom icons built on Android, which necessitates the use of visual features for extracting widget information. This approach allows for more accurate recognition of text and icons. However, visual features alone cannot determine the operability of icons without direct interaction, which may lead to redundant operations, such as the agent attempting to interact with non-interactive elements.\nTherefore, in our agent, visual feature analysis serves as a secondary operation. It is only employed when the agent determines that no XML-based icons can perform the required task. This strategy enhances the robustness of our agent and improves its transferability to novel apps."}, {"title": "4 Related works", "content": ""}, {"title": "4.1 LLM-based agents", "content": "Agents have rapidly evolved with the advancement of large language models. Models such as MetaGPT (Hong et al., 2023), HuggingGPT (Shen et al., 2024), and AssistGPT (Gao et al., 2023), Seeclick (Cheng et al., 2024) have demonstrated exceptional performance in agent applications, garnering widespread adoption across various domains. Some agents employ large language models such as ChatGPT (OpenAI, 2023) or GPT-4 (OpenAI, 2023) for task decision-making, achieving notable developments in general domains including music (Huang et al., 2024; Yu et al., 2023), gaming (Wu et al., 2023b;, FAIR), and autonomous driving (Mao et al., 2023; Wen et al., 2023b; Zhou et al., 2023). Other agents utilize popular open-source models like LLaMA (Yang et al., 2024a) and LLaVA (Liu et al., 2023a). Meanwhile, agents have achieved significant breakthroughs in the multimodal, including video understanding (Yang et al., 2024b; Gao et al., 2023; Wang et al., 2023), embodied AI (Yang et al., 2023a; Qin et al., 2023a), and visual generation (Chen et al., 2023; Yang* et al., 2023; Li et al., 2023). Additionally, there has been a rise in multi-agent cooperative systems (Qin et al., 2023a; Lee et al., 2023; Long et al., 2023) where different agents assume distinct roles. This collaborative approach significantly enhances the capabilities of individual agents, thereby facilitating the achievement of ultimate objectives."}, {"title": "4.2 Agent for mobile devices", "content": "There are already several agents developed for mobile devices that utilize large language models effectively. DroidBot-GPT (Wen et al., 2023a) automates Android app interactions by interpreting app GUI states and actions into natural language prompts, thus facilitating action selection. AppAgent (Yang et al., 2023b) identifies and enumerates UI components based on XML, subsequently making decisions and executing actions with the aid of GPT-4V. MobileAgent (Wang et al., 2024) incorporates visual features, integrating OCR technology and icon detection to enhance UI recognition capabilities. AutoDroid (Wen et al., 2023a) seamlessly combines large language models with dynamic app analysis to optimize mobile task automation efficiently. MobileGPT (Lee et al., 2024), an innovative mobile task automator powered by LLMs, is equipped with a human-like app memory system. This system aids in precise task learning and adaptation by structuring procedures into modular sub-tasks, thereby enhancing the performance and flexibility of mobile agents."}, {"title": "5 Conclusion", "content": "This paper introduces a multimodal agent framework that significantly enhances the interaction capabilities of smartphone applications. Our experiments across various applications demonstrate the framework's ability to improve GUI recognition and task execution, confirming its effectiveness in adapting to diverse application environments.\nWe integrate parsers with visual features to construct a more flexible action space and develop a newly structured knowledge base for diverse element storage. Through two phases, exploration and deployment, we enable the agent to effectively manage the dynamic nature of mobile interfaces. These capabilities not only align with but also extend the current research on intelligent agents, especially in the contexts of multimodality and mobility.\nWhile building upon existing technologies, our approach contributes incremental advancements in the precision and adaptability of agents operating within complex mobile environments. Future work will focus on enhancing cross-application functionalities and refining decision-making processes to further improve the efficiency and user experience."}, {"title": "6 Limitations", "content": "Throughout the comprehensive testing process, we identified several limitations of our agent: Our method relies on the agent's ability to recognize numerical tags on the UI to determine specific UI elements. This approach can lead to confusion when the UI element itself contains numbers. Such errors can be mitigated through preliminary manual exploration and documentation to clarify the context.\nWhen attempting to interact with hidden UI elements, such as accelerating a video by clicking on the screen, the agent lacks the necessary prior knowledge and cannot detect the acceleration button within the current UI. This limitation hampers its ability to perform specific operations. Future work will focus on enhancing UI recognition and incorporating prior knowledge to address these issues effectively."}, {"title": "7 Ethics Statement", "content": "Our research introduces a novel multimodal agent framework designed to interact seamlessly with smartphone applications, enhancing both user experience and decision-making capabilities. In developing and deploying this technology, we are committed to addressing several key ethical considerations:\nPrivacy and Data Protection: We ensure strict adherence to global privacy standards, implementing robust data security measures to protect user information.\nReliability and Safety: We implement safety checks to ensure the reliability of our agent, particularly in dynamic environments.\nSocietal Impact: We consider the broader impacts of our technology, including potential effects on employment and environmental sustainability.\nContinuous Monitoring: We commit to continuously monitoring and refining our technology to address emerging challenges and integrate user feedback."}, {"title": "A Prompt Structure Description", "content": "In this section, we describe the main prompts used by our agent, highlighting their structure and purpose across different operational phases. The parts enclosed in bold black angle brackets are parameters that can be replaced during the coding phase, while the red text indicates areas to be filled in by the user, and the blue text represents annotations."}, {"title": "B Explanation of DroidTask Results", "content": "In figure 2, we present the performance of our agent and AutoDroid on the DroidTask benchmark. The differential in testing environments, AutoDroid's real device testing on specific Android phone compared to our emulator-based approach, alongside discrepancies in application versions between the two setups, precluded direct execution of some tasks. For a small subset of tasks that could not be completed, we identified alternative testing methods. For instance, whereas our application lacks a date-sorting option for document names, we considered sorting by the initial letter of the document names as an alternative. This adjustment maintains the same procedural flow and steps, albeit with a slightly different selection at the end. Additionally, there are tasks that our application does not support and for which no alternative exists; these cases were treated as error examples. Therefore, under identical conditions, the performance of our agent would be higher than currently observed."}, {"title": "C Details of Action Space", "content": "In this section, we provide a detailed description of the usage and parameters for each action space:\n\u2022 TapButton(element: int/str): Initiates a tap action on a user interface element. For example, TapButton(5) taps the UI element labeled as '5'. TapButton('hat') taps the UI element with text 'hat'.\n\u2022 Text(text: str): Simulates typing by entering a string of text into a designated input area. For instance, Text(\"Hello, world!\") inputs the string \"Hello, world!\" into the text field.\n\u2022 LongPress(element: int): Applies a prolonged press on a specified element. For example, LongPress (3) applies a long press to the element labeled '3'.\n\u2022 Swipe(element: int, direction: str, dist: str): Executes a swipe action in a specified direction on an element. For instance, Swipe(21, \"up\", \"medium\") swipes up on element '21\u2018 for a medium distance.\n\u2022 Back(): Simulates the device's back button to return to the previous UI state. Useful for navigating back without specific UI interactions.\n\u2022 Home(): Commands the agent to return to the main screen, essential for resetting the environment or starting new tasks.\n\u2022 Wait(): Pauses the operation for two seconds to allow system processes to complete.\n\u2022 Stop(): Ends the current operation, signaling the completion of tasks. Useful to terminate processes or to finalize script execution."}, {"title": "D Case Study", "content": "As illustrated in Figures 8, 9 and 10, we present several case studies showcasing the qualitative results obtained across diverse applications, tasks, and specialized functionalities. Figure 8 highlights a scenario where our agent triggers a safety check during sensitive operations. Figures 9 and 10 display the qualitative results of our agent handling multi-step tasks. These examples demonstrate the robustness of our agent, emphasizing its capability to effectively manage a variety of complex scenarios."}]}