{"title": "Beyond Static Assumptions: the Predictive Justified Perspective Model for Epistemic Planning", "authors": ["Weijia Li", "Guang Hu", "Yangmengfei Xu"], "abstract": "Epistemic Planning (EP) is an important research area dedicated to reasoning about the knowledge and beliefs of agents in multi-agent cooperative or adversarial settings. The Justified Perspective (JP) model is the state-of-the-art approach to solving EP problems with efficiency and expressiveness. However, all existing EP methods inherit the static environment assumption from classical planning. This limitation hinders the application of EP in fields such as robotics with multi-agent settings, where the environment contains changing variables. In this paper, we propose an extension of the JP model, namely, the Predictive Justified Perspective (PJP) model, to remove this assumption. Instead of assuming that beliefs remain unchanged since the last observation, the PJP model uses all past observations to form predictions about the changing variables. The definition of the prediction function with examples is provided, and it is demonstrated that it can work with arbitrary nesting. We then implemented the PJP model in several well-known domains and compared it with the JP model in the experiments. The results indicated that the PJP model performs exceptionally well across various domains, demonstrating its potential in improving EP applications in robotics.", "sections": [{"title": "1 Introduction", "content": "Epistemic Planning (EP) is a popular research field that reasons about agents' higher-order knowledge and beliefs. With the capability of modelling others' knowledge and belief, it can be potentially applied in the Multi-Agent System (MAS) or Human-Agent Interaction (HAI) scenarios. There are some exiting works extend EP into MAS and HAI, such as: using contingent epistemic planning to handle multi-agent implicit coordination by converting to Full Observable Non-Deterministic (FOND) problem (Engesser et al. 2017; Engesser and Miller 2020), or applying epistemic reasoning system on a humanoid robot to perform false-belief tasks (Dissing and Bolander 2020). \nHowever, all existing approaches in EP inherit the assumption from classical planning that the environment does not change unless the agent causes the change. This \"static environment\" assumption is reasonable in AI planning but not in many other fields. The necessity to model continu- ous changing variable in the environment generates the gap between EP and its application, such as robotics. \nThe state-of-the-art EP is usually solved by three main ap- proaches. Dynamic Epistemic Logic (DEL) based approach was firstly proposed by Bolander and Andersen (2011), and it maintains a Kripke structure (Fagin et al. 1995) using an event-based model which requires explicit action effects to specify modal logic changes. Pre-compilation strategy is another approach that transforms the epistemic problem into a more manageable form, such as a classical planning problem (Kominis and Geffner 2015; Muise et al. 2015, 2022; Cooper et al. 2019). The main challenge of this approach is the high cost of pre-compiling steps when the epistemic formulae depth increase. \nBoth DEL and pre-compilation methods have the bounded epistemic formulae depth, as they require pre-defining the depth when defining the problem. To address these challenges, a novel state-based approach, namely Planning with Perspectives (PWP) (Hu, Miller, and Lipovetzky 2022), was proposed. By leveraging the external functions and lazy evaluation, PWP can offload the epistemic formula reasoning from the planner, which improve both efficiency and expressiveness. However, the PWP approach only handles knowledge (not belief). A recent continuation study introduced Justified Perspectives (JP) model to handle the belief as an enhancement to the PWP method (Hu, Miller, and Lipovetzky 2023). Both PWP and JP approaches are state-based (action-model-free), which makes them more suitable to be embedded on other applications. \nHowever, the JP model is developed based on the intuition that individuals maintain unchanged beliefs in the absence of contradictory evidence. Mathematically, this updating process of belief values can be seen as a Zero-Order Hold (ZOH) model. It means JP model cannot handle continuously changing variables, which may lead to erroneous beliefs and faulty reasoning. \nWe use a simplified Grapevine example (Muise et al. 2022) to explain our idea.\nExample 1. There are two agents in the room, Agent a and Agent b. Agent a holds a secret changing value as which is represented by a first-order polynomial ($a_s = x + 2$, where x is the state index). It is common knowledge that $a_s$ is represented by a first-order polynomial, but the coefficients are unknown to others. Agents can share their own secret and"}, {"title": "2 Preliminary", "content": "2.1 Planning Extension\nIn AI planning, the Planning Domain Definition Language (PDDL) serves as a foundational framework and is widely used to describe planning problems and domains (Haslum et al. 2019). With the increasing demand, PDDL 2.1 has enhanced the modeling of numerical resources, enabling a better expression of the continuous numerical effects of on-going actions (Fox and Long 2003).\nFox and Long (2006) proposed PDDL+, aimed at meeting the planning needs of hybrid systems. PDDL+ models complex dynamic changes by introducing continuous processes. In PDDL+, continuous processes represent the continuous changes of state variables. The process starts when its pre-conditions are met and ends when the preconditions are no longer satisfied. So, the duration of a process is not fixed but varies dynamically based on the system's state. \nTo further enhance expressiveness, Geffner (2000) introduced Functional STRIPS (F-STRIPS), which allows usage of external function in planning. This idea was elaborated upon by Franc\u00e8s and Geffner (2015), and has since been ap- plied in many planning variation fields, such as, epistemic planning (Hu, Miller, and Lipovetzky 2022, 2023) and gen- eralized planning (Lei, Lipovetzky, and Ehinger 2024). This extension allows the definition of complex state variables and calculations through external functions, thereby improving its expressive capabilities.\n2.2 Justified Perspective Model\nThe JP model (Hu, Miller, and Lipovetzky 2023) is build on the foundation of the PWP model by incorporating the belief operator $B_i$ which is used to capture intuition (Gold- man 1979): unless they see evidence to the contrary, agents believe that what they have seen before is true. Specifically, when the agent infers unobservable entities, if there is no evidence suggesting that these entities are no longer valid, they generate a justified belief by retrieving information from their memory. The JP model aims to address some of the limitations of the PWP model and further enhance the mod- eling capability for multi-agent beliefs.\nA JP Signature is defined as a tuple:\n$\\Sigma = (Agt, V, D_{v_1},..., D_{v_k}, R)$,\nwhere Agt represents a finite set of agent identifiers containing m agents. The set V is a finite set of variables such that Agt \u2282 V. For each variable $v_i \\in V$, $D_{v_i}$ denotes a poten- tially infinite domain of constant symbols. Additionally, R is a finite set of predicate symbols. The domains can be either discrete or continuous, and the overall set of values is given by $D = \\bigcup_{v \\in V} D_v$.\nThe language $L(\\Sigma)$ of JP model is defined by the grammar:\n$a ::= r(t) \\mid \\neg \\alpha \\mid \\alpha \\wedge \\alpha \\mid S_i v \\mid S_i a \\mid K_i a$,\n$\\phi ::= \\alpha \\mid B_i \\phi$.\nwhere r(t) represents a predicate symbol applied to terms t, $t \\subset V$ and $r \\in R$.\nWe denote R as a set of all predicates r(t). With above signature and language, the JP model is proposed as follows.\nDefinition 1 (JP Model). The JP model M is defined as:\n$M = (Agt, V, D_{v_1},..., D_{v_k}, \\pi, O_1,..., O_m)$,\nwhere Agt denotes the set of m agents. The set V represents the variables, while $D_{v_1},..., D_{v_k}$ are the domains associ- ated with the variables $v_1,..., v_k$, respectively. A state is represented as a set of assignments that matches the variable $v \\in V$ and its domain $D_v$, and $dom(s)$ is used as the set of variables in state s. A global state is a complete assignment, while the local state might be a partial assignment. $\\pi$ is an interpretation function, $\\pi : S \\times R \\rightarrow$ {true, false}, that determines whether the predicate r(t) is true in s. Finally, $O_1,..., O_m$ are the observation function symbols that establish the observation relationships among different elements (Definition 2).\nThey denoted the S as the state space, $\\hat{s}$ as a sequence of state from any plan, both $s[t]$ and $s_t$ as the state at timestamp t in given sequence s, and S as the sequence space.\nDefinition 2 (Observation Function). An observation function for Agent i, $O_i : S \\rightarrow S$, is a function that takes a state and returns a subset of that state, representing the part of the state visible to Agent i.\nThe following properties must hold for a observation function $O_i$ for all $i \\in Agt$ and $s \\in S$:\n1. $O_i(s) \\subseteq s$\n2. $O_i(s) = O_i(O_i(s))$\n3. If $s \\subseteq s'$, then $O_i(s) \\subseteq O_i(s')$\nThe Retrieval function is introduced to retrieve the value of a specific variable in the last observed timestamp."}, {"title": "3 Predictive Justified Perspective Model", "content": "Now, we formally propose the Predictive Justified Perspective (PJP) Model to model continuous changing environment. The PJP model uses the same signature, language and semantics as the JP model, as shown in Section 2.2.\nTo model the change of the dynamic variables, our model use process\u00b9-like variables, namely processual variables. The set of processual variables is denoted as $V_p$, and defined as follows.\nDefinition 6 (Processual Variables). Given T is a set that includes all processual variables types, $V_p$ is defined as:\n$V_p = (V, T, type, coef)$,\nwhere\n$type: V \\rightarrow T$,\n$coe f: V \\rightarrow \\mathbb{N}^*$.\nProcessual variables are defined to describe the changing environment. For each variable $v \\in V_p$, the type and coefficients are defined as $type(v)$ and $coe f(v)$ to indicate the changing rules. The type static is considered as a base case, because it is only changed by agent's action effects. Thus, $coe f(v) = {}$ for all $type(v)$ = static. Static processual variables are the same as variables, $v \\in V$, in the JP model as introduced in Definition 1.\nDefinition 7 (Model). The PJP model M is defined as:\n$M = (Agt, V_p, D_{v_1},..., D_{v_k}, \\pi, O_1, ..., O_m, PR)$,\nwhere PR is a set of predictive retrieve functions $pr_x$ (Definition 8); $V_p$ is the processual variables (Definition 6); and the rest of the elements are adopted from the JP model (refer to Definition 1).\nThe PJP model extends the definition of the JP model by changing V to $V_p$ and adding PR to introduce the dynamics. This is done by using the Predictive Retrieval Function and Predictive Justified Perspective Function, as defined in Definition 8 and 9. \nA high-level definition is given for any predictive retrieval function, $pr_x \\in PR$, to handle the variables represented by different changing types."}, {"title": "4 Implementation", "content": "The PJP model, similar to the JP model, is implemented using similar language as PDDL+ by introducing the external function idea from F-STRIPS. The prediction Process is integrated into the external function to handle belief update during the planning process.\n4.1 PDDL+ encoding\nFollowing PDDL2.1, the signature of V is encoded as functions, while, the T, type and coe f are defined as rules in our encoding.\n4.2 PR\nFive processual variable types, which are first-order polynomial, second-order polynomial, power function, first-order modulus, and static, are implemented in this work. For different types, different number of observations are needed to deduce its coefficients and predict its value. Without knowing any coefficients, the first-order polynomial requires two observations (Definition 8.2), while if one of the coefficients"}, {"title": "5 Experiments", "content": "Three experiments are conducted on distinct problem domains: Big Brother Logic, Number, and Grapevine. The latest JP model serves as the control group to evaluate the performance of our model.\nThe experimental platform comprises a laptop equipped with a 12th Generation Intel\u00ae Core\u2122 i7-12700H processor (2.30 GHz) and 16 GB of RAM, running the Windows 11 operating system. The timeout is set to 300 seconds and memory out is set to 8GB.\nTo control the influence from the searching algorithm, the vanilla version of the Breadth-First Search (BFS) is used for both approaches to focus on the demonstration of the model's capability.\nThe outcome metrics included: the solvabil- ity (Solvable), the plan length (|Plan|), the number of expanded nodes (Exp), the number of generated nodes (Gen), the execution time (TIME), the average call time (Tc) and the goal conditions (Goal).\n5.1 Big Brother Logic (BBL)\nIn the BBL problem domain, which was proposed by Gas- quet, Goranko, and Schwarzentruber (2014), there are sev- eral stationary cameras positioned in a two-dimensional space free of obstacles, where the cameras do not obstruct each other's line of sight. Each camera can take two actions: clockwise_rotation and counterclockwise_rotation. Using\n5.2 Number\nThe number problem domain is inspired by the coin problem introduced by Hu, Miller, and Lipovetzky (2023). There are two agents, and instead of a coin, a number is placed in the box. Agents can take the actions peek and return. The number can only be observed by the agent who is peeking into the box. Agents can see each other and the actions they take, indicating whether the other agent is peeking into the box. However, unlike the coin problem, agents must return to its original state after peeking, thereby unable to keep watching the number changes.\nThe agents are denoted as a and b, and the number are denoted as v. Three different processual variable types for v were tested for different problem instances. Specifically, those were first-order polynomial (v = 2x + 1) for instances N1 to N7, second-order polynomial (v = x\u00b2 + 1) for N8 and power (v = 3x) for N9, respectively.\n5.3 Grapevine\nGrapevine, which is a benchmark problem in EP (Muise et al. 2022), describes the scenario that a few agents in two adjacent rooms, and they can choose to share secrets or move, while they can share their true secrets or lies, as well as share what they believe about the others' secret. In this work, as shown in Example 1 and 2, the secrets became a number instead of a binary."}, {"title": "6 Related work and Discussion", "content": "Due to the lack of prediction capability in the previous re- search, the epistemic planning had limited studies in the highly-dynamic system.\nA series of pioneer studies (Bramblett, Gao, and Bezzo 2023; Bramblett and Bezzo 2023) were conducted to intro- duce the concept of the epistemic planning into the multi- robot coverage problem, in which robot can move around dynamically. To deal with the robots' movement when dis- connecting, a series of sorted targeted positions for each agent has been generated in the initialisation phase as a common knowledge. In this case, the robot could use this consensus when disconnecting by assuming the others will follow their sorted targeted position list. They demonstrated that the epistemic logic with certain level of reasoning capa- bility on the unobservable state could be applied in a highly-dynamic MAS problem. However, comparing to the PJP model, these works had limited nesting depth (2) and could not reason the changing pattern of the other agents state.\nThe PJP model introduce processual variables up to model dynamic environments. By forming agent's predictive jus- tified perspectives using $pr_x$ and $f_i$, the agents are able to reason about unseen changing variables with meaning- ful prediction. The PJP model adopted the strength of JP model, including arbitrary nesting and action-model free, which makes it suitable for further applications.\nOne of the most popular AI-driven application fields is robotics, specifically Multi-Robot System (MRS) or Human- Robot Interaction (HRI). In MRS, the challenge is not only the robot dynamics, but also non-deterministic components, for example, the results from the simulation and experiment showed significant differences due to the noise in a multi- robot coverage study (Li et al. 2024). The PJP model showed good potential to be implemented with filters (e.g. linear re- gression) to reject the noise. In physical HRI application, the PJP model could potentially be used to predict human behaviour based on the measurements and generate the ap- propriate plan for robots to cooperatively complete the task with human."}, {"title": "7 Conclusion & Future Work", "content": "In conclusion, to fill the gap between the dynamic envi- ronments and the \u201cstatic environment\u201d assumption in exist- ing EP studies, we proposed the PJP model by introducing the processual variables $V_p$ and predictive retrieval func- tions $PR$ in to the model. Thus, the modeller is able to make agents generate beliefs with reasonable predictions of changing variables and potentially be applied in various ap- plications. Our approach retains the advantages of the JP model being action-model-free and capable of arbitrary nest- ing beliefs."}]}