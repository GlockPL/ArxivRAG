{"title": "A DEEP INVERSE-MAPPING MODEL FOR A FLAPPING ROBOTIC WING", "authors": ["Hadar Sharvit", "Raz Karl", "Tsevi Beatus"], "abstract": "In systems control, the dynamics of a system are governed by modulating its inputs to achieve a desired outcome. For example, to control the thrust of a quad-copter propeller the controller modulates its rotation rate, relying on a straightforward mapping between the input rotation rate and the resulting thrust. This mapping can be inverted to determine the rotation rate needed to generate a desired thrust. However, in complex systems, such as flapping-wing robots where intricate fluid motions are involved, mapping inputs (wing kinematics) to outcomes (aerodynamic forces) is nontrivial and inverting this mapping for real-time control is computationally impractical. Here, we report a machine-learning solution for the inverse mapping of a flapping-wing system based on data from an experimental system we have developed. Our model learns the input wing motion required to generate a desired aerodynamic force outcome. We used a sequence-to-sequence model tailored for time-series data and augmented it with a novel adaptive-spectrum layer that implements representation learning in the frequency domain. To train our model, we developed a flapping wing system that simultaneously measures the wing's aerodynamic force and its 3D motion using high-speed cameras. We demonstrate the performance of our system on an additional open-source dataset of a flapping wing in a different flow regime. Results show superior performance compared with more complex state-of-the-art transformer-based models, with 11% improvement on the test datasets median loss. Moreover, our model shows superior inference time, making it practical for onboard robotic control. Our open-source data and framework may improve modeling and real-time control of systems governed by complex dynamics, from biomimetic robots to biomedical devices.", "sections": [{"title": "INTRODUCTION", "content": "In machine learning frameworks that model causal relationships, e.g., for prediction, causes are typically mapped to their effects. This forward mapping serves a wide range of applications, for example, predicting the motion of a mechanical system based on the forces acting on it (Dearden & Demiris, 2005), or in weather forecasting (Yu et al., 2024), in which data on previous atmospheric conditions are used to forecast future weather. In other cases, though, rather than predicting a system's response to a set of conditions or inputs, it is required to control the system by modulating its inputs to achieve a desired outcome. Hence, systems control would benefit from an inverse mapping, which flips the causal relationship by mapping the desired outcome to the input that would have led to this outcome. Such inverse mapping would enable the design of a controller that applies these inferred inputs to achieve desired behaviors. If the relationship between causes and their effects can be readily inverted, then an inverse-mapping control approach is useful and simple to implement. For example, in many robotic systems, a desired mechanical motion (outcome) can be directly mapped to the forces and torques that can generate it (cause) (Nguyen-Tuong & Peters, 2011)."}, {"title": "", "content": "Here, in contrast, we address the case where the forward mapping between inputs and outcomes is nontrivial and difficult to calculate and invert. Examples of such systems include the mapping between pacemaker signals and a desired heart activity Simantirakis et al. (2009), and the mapping from injected insulin dosage to the resulting blood glucose level in a specific patient (Thomas & Heinemann, 2022). An additional noteworthy class of such systems is systems involving complex fluid motion, such as a flapping wing of an insect or a flapping-wing micro-air-vehicle (FW-MAV) (Dickinson et al., 1999; Sane & Dickinson, 2002; Tu et al., 2020; Bayiz & Cheng, 2021b; Keennon et al., 2012; Ma et al., 2013; Jafferis et al., 2019; Kar\u00e1sek et al., 2018; Coleman et al., 2015; Nguyen & Chan, 2018), illustrated in Fig. 1 and Supplementary Movie 1. The fluid dynamics in these systems are highly nonlinear and complex (Sane, 2003; Ellington et al., 1996): the wing induces intricate vortex structures that determine the aerodynamic forces; during flapping the wing interacts with its own, previously generated, flow field, which introduces complex time dependencies; and, finally, flapping wings often deform due to their elasticity and interaction with the flow, which then effects back on the flow itself, and so on, resulting in a complex fluid-structure interaction (Shyy et al., 2010; Nakata & Liu, 2012; Miller & Peskin, 2009; Young et al., 2009). Therefore, the forward mapping from wing motion (cause) to the aerodynamic force (outcome) often requires either using a mechanical, scaled-up flapping-wing analog (Dickinson et al., 1999; Bayiz & Cheng, 2021b; Whitney & Wood, 2010; Ellington et al., 1996; Muijres et al., 2014; Hsu et al., 2019; Melis et al., 2024), or numerical solution of the Navier-Stokes flow equation, which is highly computationally intensive and impractical for online system control. Quasi-steady-state approximations of the aerodynamic force are available and relatively simple to invert (Dickinson et al., 1999; Sane & Dickinson, 2002; Whitney & Wood, 2010; Nakata et al., 2015), however, they might become less accurate on sub-wingbeat resolution and are, hence, typically used for evaluating wingbeat-averaged forces (Bomphrey et al., 2017; Dickinson et al., 1999; Brunton et al., 2013)."}, {"title": "", "content": "Current FW-MAV designs circumvent the complexity of fluid dynamics by using a set of single-axis linear controllers based on insect-inspired control heuristics with manually-tuned parameters (Keennon et al., 2012; Ma et al., 2013; Coleman et al., 2015; Kar\u00e1sek et al., 2018; Nguyen & Chan, 2018; Jafferis et al., 2019; Tu et al., 2020). Although this simplified approach has made stable flight and maneuvers possible, it might be sub-optimal in allowing these vehicles to exploit their full performance envelope and achieve the remarkable agility and robustness of flying insects and hummingbirds. The aerodynamics of a flapping wing is, therefore, an appealing and practical test-bed for modeling the inverse mapping of a complex system. In this work, we address this complex inverse-mapping problem using deep-learning tools. To the best of our knowledge, there has been limited exploration of this approach in the existing literature."}, {"title": "RELATED WORK", "content": ""}, {"title": "FORWARD-MAPPING MODELING", "content": "Several approaches have been used for forward mapping modeling of flapping wing systems, that is, finding the aerodynamic forces resulting from a given wing motion. One direct method is measuring the aerodynamic forces on a scaled-up wing model flapping in a fluid and mimicking the motion of, for example, experimentally measured kinematics of an insect's wing (Dickinson et al., 1999; Bayiz & Cheng, 2021b; Whitney & Wood, 2010; Ellington et al., 1996; Muijres et al., 2014; Hsu et al., 2019). With proper scaling of the wing motion and fluid viscosity, the forces measured on the scaled-up model can be rescaled back to the corresponding insect forces. Another method is Computational Fluid Dynamics (CFD), where the Navier-Stokes flow equation is numerically solved on a spatial grid and the aerodynamic forces on the wing are then calculated from the solved flow. While CFD has been instrumental in understanding the fluid dynamics of flapping wings (Dickinson & Muijres, 2016; Nakata et al., 2015), insect stability(Gao et al., 2011; Sun, 2014; Perl et al., 2023), and complex fluid-structure interactionsYoung et al. (2009); Shyy et al. (2010); Nakata & Liu (2012); Miller & Peskin (2009), this class of methods is computationally intensive and, hence, impractical for inverse modeling in a real-time flight controller. A dramatic simplification is offered by quasi-steady-state (QS) aerodynamic models, which approximate the aerodynamic force of a wing as a function of its instantaneous motion Dickinson et al. (1999); Sane & Dickinson (2002); Weis-Fogh (1973); Whitney & Wood (2010). For a specific wing geometry, QS models can be calibrated and tuned based on a scaled-up mechanical wing model Dickinson et al. (1999); Whitney & Wood (2010) or CFD simulationsNakata et al. (2015). Because these models provide an analytical form of the aerodynamic force, they can, in principle, be inverted and used for real-time control. Yet, QS models neglect complex flow-related features, for example, wing vorticity, wing interaction with its previously generated flow, and fluid-structure interaction, which may be important for utilizing the full capabilities of FW-MAV."}, {"title": "", "content": "Deep learning models have been applied for problems in fluid dynamics, such as turbulence and flow controlLing et al. (2016); Brunton et al. (2016); Duraisamy et al. (2019), and for mitigating windy conditions and structural damage in quad-copter control O'Connell et al. (2022). The impressive achievements in quad-copter control do not require significant inverse modeling due to the relatively simple mapping between desired forces and torques and rotor speed. This is markedly different than the complex aerodynamics of flapping wings. For a flapping wing, deep learning models enable capturing the complex forward mapping from wing motion to aerodynamic forces without simplifying assumptions. In this approach, a model is trained on a dataset of measured or calculated forces obtained from a scaled-up mechanical model or CFD, respectively, based on a set of predefined"}, {"title": "TIME SERIES MODELING AND FOURIER ANALYSIS", "content": "Time-series modeling has been fundamental across various disciplines, including climate modeling Mudelsee (2019), biological sciences Stoffer & Ombao (2012), and finance B\u00f6se et al. (2017). Traditional methods such as auto-regressive and exponential smoothing rely on domain expertise Box et al. (2015), but modern machine learning techniques are increasingly adopted owing to their data-driven nature and scalability Lim & Zohren (2021). Recent architectures that use FFT (Fast Fourier Transform) include the following: AutoFormer features a distinct architecture: the encoder emphasizes modeling the data periodicity, while the decoder includes accumulation structures for trend-cyclical components and stacked auto-correlation mechanisms for periodic components. This mechanism replaces traditional self-attention methods and efficiently computes auto-correlation using FFT Wu et al. (2021). Similarly, FedFormer introduces low-rank approximated transformation in the frequency domain to expedite attention mechanisms in time series forecasting Zhou et al. (2022). Adaptive Temporal-Frequency Networks utilize FFT to extract trend and periodic features for improved forecasting accuracy Yang et al. (2022). StemGNN employs Graph Fourier Transform (GFT) and Fourier transform to capture inter-series correlations and temporal dependencies effectively Cao et al. (2020). Notably, StemGNN automatized the learning of inter-series correlations from data, leveraging spectral representations for prediction."}, {"title": "", "content": "In Fourier Neural Operator (FNO), a parameterized low-pass filter in Fourier space facilitates the learning of mappings from functional parametric dependencies to solutions, thus enabling the exploration of a broad family of partial differential equations Li et al. (2020). Additionally, the random Fourier method and random Fourier softmax (RF-softmax) technique offer efficient and accurate random sampling, exploiting frequency-space features Rawat et al. (2019)."}, {"title": "", "content": "The adaptive spectrum layer (ASL) reported here uses both the magnitude and phase of the Fourier spectra for representation learning, weighs frequency bins accordingly, and functions as a standalone representation layer. In contrast, other approaches often rely on FFT for efficient computation in Fourier space, as well as overlook the comprehensive information provided by the Fourier transform, or lack a gated weighing mechanism that considers all information from other frequency bins."}, {"title": "METHODS", "content": "We developed a flapping wing system (Fig. 1c) in which we measured the wing kinematics using high-speed cameras. The wing degrees of freedom were characterized by $M_K$=3 Euler angles (Fig. 2): the stroke angle $\\phi$, elevation angle $\\theta$, and wing pitch angle $\\psi$. The aerodynamic forces were measured in sync with the wing kinematics using $M_F$=4 vertical force sensors. The essence of inverse-mapping modeling in this system lies in learning the relationship between desired output aerodynamic forces and the input wing kinematics that generate them. Intuitively, the input to the system is a time sequence of desired aerodynamic forces that the wing should generate. The output is the full wing kinematics that, when applied to the wing, would result in the desired forces. The system learns the inverse mapping in two parallel backbones: learning the time-dependent (Seq2Seq) and frequency-dependent (ASL) relationships between the forces. As a result, both the timestamps and frequencies that are relevant for the mapping are learned."}, {"title": "MULTI-VARIATE MULTI-TARGET TIME SERIES FRAMEWORK", "content": ""}, {"title": "Problem Definition", "content": "We reformat the generalized time series formalism to our inverse-mapping modeling framework of {desired future outcomes}\u2192{required input kinematics}. Without loss of generality, we consider wing kinematics (Fig. 2) as required system input, and system-measured forces, provided from a set of sensors (Fig 1c) as desired future outcomes. given $N$ distinct time-series events that represent data from $M_F$ (force) sensors $\\{\\{F\\}_{1:t_o}^{j}\\}_{j=1}^{M_F}\\}_{i=1}^{N}$, where $F_t^j \\in \\mathbb{R}$ indicates the force values of the j'th sensor in the i'th dataset at times 1, 2, ..., to. Our goal is to predict the corresponding N distinct wing kinematics $\\{\\{K\\}_{1:t_o}^{j}\\}_{j=1}^{M_K}\\}_{i=1}^{N}$ where $K_t^j \\in \\mathbb{R}$ indicates the kinematic values of the j'th degree of freedom in the i'th event at times 1, 2, ..., to. To simplify our notation, we will mostly describe the kinematics in terms of three angles ($M_K$=3) $\\{\\{\\phi, \\theta, \\psi\\}_{0:t_o}^{t}\\}_{i=1}^{N}$, where $\\phi_t, \\theta_t, \\psi_t \\in \\mathbb{R}$ represent the stroke, elevation, and pitch angle at time t in the i'th event, respectively (Fig. 2). Formally, we aim to model the following conditional probability distribution:\n\n$p(\\phi_{i=0:t_o}, \\theta_{i=0:t_o}, \\psi_{i=0:t_o} | \\{F_{t_o:t_o+\\tau}^{i, j}\\}_{i=1}^{M_F}; \\Phi)$\n\n(1)\n\nThis is the probability of wing kinematics at times t\u2208[0, to] given the set of future forces at times t'\u2208[to, to + $\\tau$ - 1] at a fixed future window of size $\\tau$ that they generated. These, alongside the learnable parameters \u03a6, are optimized to minimize loss using an SGD-like process. In practice, we reduce the problem to learning a one-step-ahead prediction model, for any i\u2208[N]\n\n$p(\\phi, \\theta, \\psi | \\{F^{i, j}_{t:t+\\tau}\\}_{t}; \\Phi)$,\n\n(2)\n\nwhere an optimal model f for which $\\phi_t, \\theta_t, \\psi_t$ ~ $f(\\{F^{i, j}_{t:t+\\tau}\\}_{t})$ is explored, to predict the distribution of wing kinematics at time t given the measured forces at time t."}, {"title": "SEQUENCE-TO-SEQUENCE", "content": "We instantiate our model f as a Seq2Seq model Bahdanau et al. (2014), adjusted for time series. More precisely, we utilize an RNN (Recurrent Neural Network) encoder embedding alongside an RNN decoder intertwined with an attention mechanism to predict the next time step given all previous window values (Fig. 3). The encoder transforms the input time series data into an embedded representation using an Adaptive Spectrum Layer (see below), followed by a bidirectional GRU (Gater Residual Network). The final hidden states from both forward and backward passes are concatenated and reshaped through a linear layer to serve as the initial state for the decoder. Crucially, an attention mechanism computes attention weights based on the decoder's current hidden state and all the encoder's outputs. This ensures the decoder focuses on relevant time steps from the encoder when predicting subsequent values. The decoder starts with the last value of the input sequence and, guided by the attention mechanism, iteratively generates predictions for the forecast horizon."}, {"title": "DATASETS", "content": ""}, {"title": "OUR MEASURED DATASET: A WING FLAPPING IN AIR", "content": ""}, {"title": "A Flapping Wing System", "content": "We developed a flapping wing system (Fig. 1c-e, Supplementary Movie 1) that can move with a predetermined stroke angle profile $\\phi(t)$, and with passively-determined elevation $\\theta(t)$ and pitch $\\psi(t)$ angles. That is, $\\theta(t)$ and $\\psi(t)$ are outcomes of the dynamic interactions between the wing and the surrounding air, wing inertia, and wing elasticity Beatus & Cohen (2015)."}, {"title": "", "content": "The wing consisted of a 12.7\u00b5m thick Mylar sheet, with a leading edge made of a carbon-fiber rod 1mm in diameter. Wing span was 7cm and its maximum chord was 3cm. A 3D-printed hinge connected the wind to a brushless DC motor (Maxon ECXSP06M BL KL-A-HP-12V) with a built-in 15:1 gear ratio and an angular position encoder. Thus, the motor was driving the wing directly by following a predetermined stroke angle profile $\\phi(t)$ using a designated controller we developed."}, {"title": "Measurement Setup", "content": "The measurement setup consisted of two modules: a fast-imaging setup that measured wing kinematics (input), and force sensors that measured the vertical force generated by the wing (outcome). The imaging setup included two high-speed cameras (Phantom v2012, Vision Research) in a stereo configuration (Fig. 1c-e, Supplementary Movie 1) with parallel optical axes. The cameras were mutually calibrated to find their intrinsic and extrinsic matrices. In each experiment, the two cameras recorded the flapping wing and operated in sync at 10,000 frames per second. To track the wing, we attached three white circular markers onto the wing's camera-facing surface and tracked the markers' positions in each camera view using basic segmentation and optical flowHorn & Schunck (1981). Subsequently, we used the 2D markers' trajectories from both cameras to triangulate the position of the markers in 3D in the lab frame of reference based on the cameras' calibration. Finally, under the verified assumption that the wing maintained a flat shape during its motion, we converted the three 3D marker coordinates into the standard Euler angle description for flapping wings of $\\phi(t), \\theta(t), \\psi(t)$."}, {"title": "", "content": "The second experimental module \u2013 for force measurement \u2013 consisted of four force sensors (SI-USB4, Interface Inc.) arranged in a symmetric cross configuration, with the motor attached at its center (Fig. 1c-e). The sensors measured in sync at 5,000 samples per second, and their four readouts of vertical forces represent the aerodynamic force output generated by the wing. Treating all readouts as separate signals, rather than, for example, summing them, is relevant for torque calculation and phase-related feature extraction. Finally, the two data streams of the wing angles and forces were synchronized and combined to form a single event in our dataset."}, {"title": "Data Collection", "content": "We measured a total of N=153 events that span different wingbeat frequencies and $\\phi(t)$ profiles. This dataset is publicly available. Each event corresponds to a wing trajectory and force data, 2-6 wing-beats, or 0.11-0.75 seconds, long. The range of profiles was obtained by using a parameterization for $\\phi(t)$ Berman & Wang (2007) that provides a continuum of profiles from sinusoidal to triangular as a function of a single parameter K\u2208[0, 1]:\n\n$\\phi(t) = \\frac{1}{2}\\frac{1}{sin^{-1}K}sin^{-1}(K sin(2\\pi ft))$\n\n(3)\n\nwhere f is the wingbeat frequency and I is the stoke peak-to-peak amplitude. Our dataset included events with f\u2208[0, 20]Hz and $\\phi$\u2208[\u03c0/6, \u03c0/3]rad. Due to the range of wing speeds in the dataset, the wing's Reynolds number was 1,000-50,000, which covers the flow regimes of medium to large insects, small birds, and FW-MAVS."}, {"title": "", "content": "The resulting dataset (Table 1, Fig. 4) is formulated as $D = \\{\\{F_{1:t_o}^{i, f}\\}_{f=1}^{M_F}, \\{K_{1:t_o}^{i, k}\\}_{k=1}^{M_K}\\}_{i=1}^{N}$ For each event i=1, 2, ..., N there are $M_F$ force signals with to entries and $M_K$ kinematic signals with to entries. We use $M_F$=4 (four force sensors) and $M_K$ = 3 for stroke, pitch, and elevation angles. The upper scripts $f \\in [M_F]$ and $k \\in [M_K]$ represents the f'th force sensor and k'th kinematics respectively. Also, note that tor is not the same for all i, allowing events of different duration."}, {"title": "OPEN SOURCE DATASET: A WING FLAPPING IN VISCOUS FLUID", "content": "The second dataset we used (Table 1, Fig. 4) has been published by Bayiz & Cheng (2021b), who measured the wing kinematics and aerodynamic forces of a plate-like wing flapping in mineral oil. Wing kinematics {\u03c6, \u03b8, \u03c8} was controlled by step-motors and the aerodynamic forces were measured by three forces- and two torque-sensors. The Reynolds number of the system was ~1000, modeling medium-sized insects. This dataset included 548 events with various kinematics, each having 480 samples of synchronized kinematics-force data taken at 25Hz. Bayiz and Cheng used this dataset to develop a deep-learning system that learned the forward-mapping: from wing kinematics to forces and torques. Here, we used this dataset in reverse to learn the inverse mapping."}, {"title": "RESULTS", "content": "We trained an individual model on the two datasets, to infer the wing kinematics that generated a given force time-series. The input signals in the two datasets have different dimensionality, units (force vs. force and torque), and sampling rates. Both datasets were randomly divided such that 75% of the events were used as a training set, 10% reserved for validation, and 15% for testing. Throughout the training process, a standard hyper-parameter tuning loop was used to search through hyperparameter space including model parameters (e.g., the number of attention heads, and the size of the hidden representation vector) and input window characteristics (history size, batch size, learning rate, normalization schemes, etc.). For further technical details see Appendix A.3."}, {"title": "", "content": "Model performance was evaluated on the test set using the Mean Absolute Error (MAE) loss of the predicted wing angles. The MAE for each angle was calculated per event, averaged across the three predicted angles per event, and then averaged across each test set. The resulting model architectures were relatively small, with a few hundred to ~200,000 parameters. Hence, training one model took <3min on a single Nvidia RTX 3090 GPU with 24 GB RAM, and an exhaustive hyperparameter search took ~50hr on the same hardware."}, {"title": "CONCLUSION", "content": "We presented an inverse-mapping modeling framework, in which the required system inputs (wing kinematics) are predicted given the desired system outcomes (aerodynamic forces). A specific realization of such a model was explored using an experimental flapping wing system from which we collected a dataset capturing the relationship between wing kinematics and the resulting forces. The task was then formulated as an inverse mapping from the output forces of the system to the wing kinematics that generate them. To model this problem, we proposed a deep learning architecture based on a sequence-to-sequence (Seq2Seq) model with an Adaptive Spectrum Layer (ASL). The ASL performs representation learning in the Fourier domain, using both amplitude and phase information. As such, the ASL captures important frequency patterns, which is particularly beneficial for periodic signals like those in flapping wing systems, and filters out undesired noise. On both datasets, which represent two flow regimes, our model demonstrated superior performance compared with other state-of-the-art models, achieving up to ~11% improvement. These results support the current view that Transformer-based models are not necessarily optimal for time-series analysis Zeng et al. (2023). Further, our RNN implementation is expected to be significantly more computationally efficient than Transformer models, which would benefit deployment in onboard systems."}, {"title": "", "content": "Interestingly, on the current task, our model outperformed FedFormer, which also uses frequency data. This may be explained by the fact that FedFormer is a forecasting model in which the input and output dimensions are identical, unlike in our use case. To apply FedFormer to such cases, one had to change its output dimension, which might have hindered its performance. More crucially, to implement an attention mechanism in linear-time complexity, FedFormer implements random frequency sampling on which it builds its frequency-domain representation. Yet, in our case, because we did not use computationally-expensive attention, we could use a frequency-domain representation on the entire spectrum, without data loss."}, {"title": "Limitations", "content": "First, due to the challenges of developing a fully operational flapping robotic device, our model was demonstrated on bench-top device with a single wing. The model could be incorporated into FW-MAVs by training in a similar bench-top configuration and then including it as a module in the onboard controller that converts force and torque commands into wing actuation. Second, due to the limits of our datasets, our system was not trained to generalize on arbitrary wing forms and Reynolds numbers. Further, the wing-hinge in our system has a single axis, which might limit the repertoire of wing motions, compared, for example, with better-controlled wing models. Yet, this simple actuation may, in fact, fit with current FW-MAV designs, since all of them use a similar single-axis drive, relying on fluid-structure interaction to yield complex insect-like wing kinematics."}, {"title": "", "content": "In summary, despite these limitations, we believe that the proposed inverse-mapping framework could be seamlessly integrated into a wide range of applications and improve the modeling and control of complex systems, from biomimetic robots to biomedical devices."}, {"title": "APPENDIX", "content": ""}, {"title": "ARCHITECTURE", "content": "For completeness, the full architecture is provided in Fig. 6"}, {"title": "ADAPTIVE SPECTRUM LAYER (ASL)", "content": "We extended the Seq2Seq model with ASL, a layer that performs representation learning of the input signal in the frequency domain, enhancing the model's ability to capture the underlying dynamics (Section 3.2), The ASL algorithm is described by the following pseudo-code:"}, {"title": "HYPER-PARAMETER TUNING", "content": "In our framework, we offer the flexibility to explore a larger set of training-related hyperparameters, as specified in Tab. 3 A.3"}]}