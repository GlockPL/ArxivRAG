{"title": "SafePowerGraph-HIL: Real-Time HIL Validation of Heterogeneous GNNs for Bridging Sim-to-Real Gap in Power Grids", "authors": ["Aoxiang MA", "Salah GHAMIZI", "Jun CAO", "Pedro RODRIGUEZ CORTES"], "abstract": "As machine learning (ML) techniques gain prominence in power system research, validating these methods' effectiveness under real-world conditions requires real-time hardware-in-the-loop (HIL) simulations. HIL simulation platforms enable the integration of computational models with physical devices, allowing rigorous testing across diverse scenarios critical to system resilience and reliability. In this study, we develop a SafePowerGraph-HIL framework that utilizes HIL simulations on the IEEE 9-bus system, modeled in Hypersim, to generate high-fidelity data, which is then transmitted in real-time via SCADA to an AWS cloud database before being input into a Heterogeneous Graph Neural Network (HGNN) model designed for power system state estimation and dynamic analysis. By leveraging Hypersim's capabilities, we simulate complex grid interactions, providing a robust dataset that captures critical parameters for HGNN training. The trained HGNN is subsequently validated using newly generated data under varied system conditions, demonstrating accuracy and robustness in predicting power system states. The results underscore the potential of integrating HIL with advanced neural network architectures to enhance the real-time operational capabilities of power systems. This approach represents a significant advancement toward the development of intelligent, adaptive control strategies that support the robustness and resilience of evolving power grids.", "sections": [{"title": "I. INTRODUCTION", "content": "he rapid development of machine learning (ML) has aroused great interest in its potential applications in power system analysis and control. Among ML techniques, Graph Neural Networks (GNNs) have emerged as particularly effective for power systems due to their capacity to model relationships in graph-structured data, such as the topology of electrical grids. Recent studies have demonstrated the potential of GNNS in tasks like fault detection [1], optimal power flow [2], and outage prediction [3], leveraging the inherent structure of power networks. However, while GNNs hold promise for enhancing power system performance, their real-world appli- cability remains limited by a critical barrier: the gap between simulation-based validation and the unpredictable, dynamic nature of real-world environments, known as the Sim-to-Real Gap.\nTo bridge this gap, hardware-in-the-loop (HIL) simulation [4] has emerged as a powerful method for testing and validat- ing data-driven models [5] [6], like GNNs under realistic con- ditions. HIL simulation integrates computational models with actual hardware, enabling real-time testing across scenarios that mirror the complex and variable conditions of live power systems. This setup allows for rigorous validation, crucial for verifying the reliability and robustness of ML models in scenarios involving grid disturbances, faults, and other system stresses.\nSeveral studies have employed HIL simulation to verify machine learning models. For instance, Davis et al. [7] used Bayesian regularized deep neural networks to optimize the charging and discharging control of battery energy storage systems in DC microgrids through HIL simulation, and ver- ified using HIL. In addition, Amir et al. designed a real- time charging controller based on reinforcement learning and verified its effectiveness in bidirectional power flow control of electric vehicles through HIL simulation [8]. The above studies have demonstrated the necessity of hardware verifi- cation, but the research on verifying machine learning (ML) models (especially graph neural networks, GNNs) based on HIL platforms is still limited.\nIn this work, we developed a SafePowerGraph-HIL frame- work that uses real-time high-fidelity data for fine-tuning and verifying pre-trained Heterogeneous GNNs. The framework uses HIL simulation in Hypersim to verify the accuracy of the GNN model. The data generated by the system in real-time is compared with the output provided by the GNN agent to evaluate its performance in various operational scenarios. Via SCADA, the data is transferred to an AWS cloud database, where it can be integrated and systematically compared with the results of the GNN model. The contributions of our work are threefold, as summarized here.\n\u2022 We propose a SafePowerGraph-HIL framework for real- time hardware-in-the-loop training and validation frame- work for graph neural networks. We demonstrate that our approach supports state-of-the-art heterogeneous compo- nents in power systems.\n\u2022 We build and validate a heterogeneous graph neural network (HGNN) model that achieves high accuracy in state estimation and dynamic analysis under hardware- simulated grid conditions.\n\u2022 We integrate HIL simulation with a cloud database (AWS), providing an innovative solution for real-time monitoring and dynamic response of power system states and enhancing the robustness and adaptability of HGNN in varying system conditions."}, {"title": "II. OUR APPROACH", "content": "In this section, we describe the SafePowerGraph-HIL veri- fication framework developed to evaluate the dynamics and control accuracy of the power system. The framework is composed of three core components: (1) the SafePowerGraph framework for system modeling and grid simulation. (2) a real- time hardware-in-the-loop simulation module for generating high-fidelity system data, (3) an AWS cloud database for scalable data storage and processing. Each module is designed to ensure data integrity, efficiency, and precision throughout the framework, facilitating a robust environment to validate AI-driven power system solutions.\nWe first provide a general overview of our framework, then explain in details each of the three components."}, {"title": "A. SafePowerGraph-HIL Verification Framework Overview", "content": "1) Real-Time High-Fidelity Data Generation: To generate high-fidelity data, a control signal is initiated by SafePower- Graph (using a Python API to the database) to adjust system loads, creating varied operational scenarios (as shown in Fig. 1). This signal is temporarily stored in the database, from which the SCADA system retrieves it and applies it to the model to modify load conditions. Concurrently, the power system model within Hypersim executes based on parameters derived from power flow calculations. The real-time system parameters are subsequently transmitted by SCADA to the database for storage, providing a comprehensive data set for GNN training.\n2) Pre-Trained GNN Validation: For validating the pre- trained GNN model, a distinct load adjustment control signal (differentiated from training scenarios) is similarly transmitted to the model to capture real-time data. As illustrated in Fig. 1, the newly acquired data are then compared against the predictions of the GNN model, facilitating an evaluation of the model's performance and accuracy in replicating the dynamic behavior of the system."}, {"title": "B. SafePowerGraph Framework", "content": "SafePowerGraph [9] is a framework for building and train- ing graph neural networks to solve PowerFlow and Optimal Powerflow problems using state-of-the-art graph architectures and training paradigms. In SafePowerGraph-HIL, a heteroge- neous graph neural network with two GAT graph layers [10] is adopted to learn the PF and OPF problem by minimizing three losses:\n1- A supervised loss that uses the oracle's solution as a reference and reduces the mean squared error (MSE) between the GNN's predicted output and the oracle's result.\n2- A constraint-violation loss that represents component limits as soft constraints, seeking to ensure that outputs adhere to these limits; for example, ensuring the predicted active power of each generator remains within its capacity or maintaining line constraints.\n3- Complete training loss: Given the aforementioned, we incorporate the constraints of the problem in the loss of our GNN as regularization terms. We transform each of the constraints and optimization objectives into a regularization loss. Given a training graph G, its set of node types A = {bus, slack}, their features X, their ground truth power flow simulation y and its predicted output \\(\\hat{y}\\), the training loss function of our GNN (parametrized by \\(\\Theta\\)) becomes:\n\\(L(\\Theta) := \\Lambda_b||y_b - \\hat{y}_b||_2 + \\Lambda_s||y_s - \\hat{y}_s||_2 + \\Lambda_{ctrl} \\sum_{i \\in A} \\sum_{i_w \\in \\Omega} ctrl_{loss}(i, i_w)\\) (1)\nWhere the first term is the supervised loss over the outputs of the buses and the slack nodes. The second term captures the weighted constraint violations of the power grid given the set of constraints \\(\\Omega\\) of each type of node.\na) Dataset generation: SafePowerGraph mutates the ac- tive and reactive powers of individual loads following a uniform distribution centered around the initial configuration, runs the power flow, and generates a synthetic dataset for power flow. The synthetic dataset is a set of samples that each includes the topology of the grid, the parameters of the lines, buses, transformers, generators, and the slack node. The unknown parameters for the power flow problem to be predicted are the active and reactive power of the slack nodes and the voltages and angles of each individual node.\nSafePowerGraph supports communication with SCADA through an SQL database. For each mutated grid, SafePower- Graph sends a new command to the hardware simulated with the new simulation parameters, waits for the simulation to reach a new static state, then fetches the new states of the grid and generates a new training/evaluation sample for the machine learning model."}, {"title": "b) Heterogeneous Graph Neural Networks (HGNN) Training Process", "content": "Our approach constructs a Heterogeneous Graph Neural Network (HGNN) based on the framework proposed in [2], designed to efficiently capture the hetero- geneity in power grid data. This architecture has been shown to outperform traditional neural networks and homogeneous GNNs in power flow estimation.\nThe training process begins by initializing each node v with its feature vector:\n\\(h_v^0 = x_{m,v}\\), (2)\nWhere \\(x_{m,v}\\) represents the initial attributes specific to each node type (e.g., bus, generator, load). For each layer k = 1,..., K, the model performs message passing using a Graph Attention Network (GAT) layer, which applies attention weights to the neighbors of each node. The hidden state of node v at layer k is computed as:\n\\(h_v^k = ReLU(\\sum_{u \\in N(v)} a_{vu}^k W^k h_u^{k-1})\\), (3)\nwhere \\(W^k\\) denotes the learnable weight matrix for layer k, and \\(a_{vu}^k\\) is the attention coefficient that determines the importance of node u's features to node v at layer k. These attention coefficients are calculated as:\n\\(a_{vu}^k = \\frac{exp(\\sigma (a^k. [W^k h_v^{k-1}||W^k h_u^{k-1}]))}{\\sum_{j \\in N(v)} exp(\\sigma (a^k. [W^k h_v^{k-1}||W^k h_j^{k-1}]))}\\), (4)\nwhere \\(\\sigma\\) represents the LeakyReLU activation function ap- plied to the attention mechanism, \\(a^k\\) is a learnable vector that defines the attention mechanism, and || denotes concatenation. To stabilize training, each node's hidden representation is normalized as follows:\n\\(\\hat{h}_v^k = \\frac{h_v^k}{||h_v^k||_2}\\) (5)\nAfter processing through K layers, the final hidden states \\(\\hat{h}_v^K\\) are used to produce predictions. For each bus node b and slack node g, a linear regression layer outputs the desired quantities:\n\\(\\hat{y}_b = LINEAR(\\hat{h}_b^K), \\hat{y}_g = LINEAR(\\hat{h}_g^K)\\), (6)\nWhere \\(\\hat{y}_b\\) represents the predicted voltage magnitude and angle for bus nodes, and \\(\\hat{y}_g\\) denotes the active and reactive power predictions for slack node.\nThis layer-wise aggregation and transformation framework, using GAT layers, enables the HGNN to learn complex inter- node relationships with adaptive attention weights, enhancing the model's ability to capture significant patterns within the power grid."}, {"title": "c) Graph Neural Network Training", "content": "Our evaluation covers two scenarios:\n(1) GNN performance under distribution shift. In this first scenario, the GNN are trained only on synthetic datasets simulated with SafePowerGraph, then evaluated using hard- ware simulator data. In this step, we investigate the generaliza- tion capabilities of GNN to unknown noisy hardware sensors.\n(2) GNN performance with fine-tuning. In this scenario, we first pre-train the GNN on simulated dataset, then fine-tune with real-time hardware simulation. We evaluate the GNN on the same hardware simulated data as (1). Our study investi- gates the plasticity of the GNN to hardware environment.\nd) Performance evaluation.: SafePowerGraph uses hard- ware simulator data to evaluate the performance of the GNN, in particular, we evaluate the error between the hardware simulated state and the GNN outputs for the bus voltages and angles and the active and reactive powers of the slack node."}, {"title": "C. Real-Time Hardware-In-the-Loop Simulation Module", "content": "1) Real-time hardware simulator: This module is respon- sible for generating high-fidelity data through real-time sim- ulation of power system dynamics. To test the algorithm's functionality, the IEEE 9-bus system model is implemented in the Hypersim simulation environment (see Fig. 1), enabling replication of complex operational scenarios and dynamic responses within the power system. This setup supports real- time adjustments to load sizes, allowing the simulation to mirror various operating conditions. Within this model, RMS (Root Mean Square) measurement components are employed to capture voltage magnitudes at each bus, while PMU (Phasor Measurement Unit) modules are used to measure phase angles across the buses. Additionally, real-time measurements of active and reactive power are recorded at key nodes, including the slack bus, generators, and loads. These system parameters are subsequently utilized as inputs to the Graph Neural Net- work (GNN) fine-tuning and validating process, providing a dataset that reflects the real-time state of the system and its dynamic responses under varying conditions."}, {"title": "2) SCADA", "content": "This module employs the Modbus communi- cation protocol to facilitate real-time data exchange within the simulation model. In this configuration, the hardware simula- tion model functions as the Modbus slave, while the SCADA system acts as the Modbus master. Designated Modbus tags are configured through an I/O interface, enabling seamless connectivity with the local Ignition SCADA system. Within the Ignition SCADA software, real-time data recording and control signal transmission are achieved through the use of OPC tags and database tags. These tags support the reading and overwriting of values, ensuring continuous synchroniza- tion between the hardware model and the database. This setup allows for dynamic updates of load parameters and the real- time tracking of key data points throughout the simulation."}, {"title": "D. AWS cloud database", "content": "We configured a database using AWS RDS infrastructure to allow high scalability and low response time necessary to support the frequency update of the SCADA module. The relational database requires two tables for each case. The first table is used to record the state of the simulated grid at each step; In particular, we record the loads' active and reactive power values, the buses' voltages and angles, the generators' active and reactive powers, and the slack nodes active and reactive powers. Each step is identified by an incremental ID and a unique timestamp. The second table records the orders to the simulation, for instance, the change of load values. This allows a controllable simulation using any external API. The SCADA module monitors any change in this table, and if detected updates the actual HIL simulation parameters accordingly."}, {"title": "III. EMPIRICAL STUDY", "content": "a) Use case: To validate the effectiveness of our SafePowerGraph-HIL Verification framework, we employed the WSCC 9-Bus system topology. This model serves as a simplified representation of the Western System Coordinating Council (WSCC), comprising 9 buses, 3 generators, and 3 loads. The 9-Bus system provides a foundational platform for simulating essential operational characteristics and dynamic responses of a power system. It offers a controlled environ- ment for assessing the performance of control algorithms and validating model accuracy under varying conditions."}, {"title": "b) Simulation tool", "content": "We use the OPAL4610XG simulator to generate high-fidelity real-time data, connect to the ignition SCADA software through the Modbus communication proto- col, obtain new load control signals from the database every 2.5 minutes to input the model, and output model parameters every second to record in the database. For each period of different load levels, we will save a set of data, a total of 500 sets of data for fine-tuning of pre-trained GNN. Figure 3 shows the data generation and storage side hardware experimental component setup."}, {"title": "c) Realtime database", "content": "We set up a MariaDB database with dynamic scaling. The connection between the database and SCADA is managed by Ignition SQL bridge, and the connection with the python code for training and evaluating the GNNs is handled with the AWS python API."}, {"title": "d) Neural Network architecture", "content": "Following [2], we build heterogeneous graph neural networks with two GAT graph layers of 64 neurons each. The outputs of the models are the active and reactive power of the slack nodes and the magnitude and angles of the bus voltages."}, {"title": "e) Training and optimization", "content": "We train all the models for 500 epochs and a batch size of 128. We use Adam optimizer and a multistep learning rate, starting at 0.1 and decaying by 0.3 at epochs \\(\\in\\) {250,375,450}. Data augmentation uses a mutation rate of 0.7. The predicted active and reactive powers, the buses' voltages, and angles are trained using an MSE loss."}, {"title": "f) Metrics", "content": "In our empirical study, we report two metrics for the slack node: normalized squared error for the active and reactive powers obtained through the hardware simulation for the slack node, similarly, we measure the normalized squared error to the bus voltages and angles obtained through the hardware simulation for the buses."}, {"title": "B. Results", "content": "Figures 4 and 5 present the validation loss for bus voltage and angle, as well as for slack active power (P) and reactive power (Q), respectively. The model trained and evaluated on PandaPower solver achieves the lowest validation loss, with values of 0.00062 for buses and 0.00029 for the slack node, highlighting the effectiveness of HGNN in the synthetic domain.\nHowever, when the model is evaluated using data generated by the real-time simulator, the validation loss increases signif- icantly to 2.05784 for buses and 0.04302 for the external grid. This substantial degradation underscores the domain shift be- tween synthetic training data and real-world scenarios, thereby limiting the model's applicability under realistic conditions.\nTo address this issue, the model was fine-tuned using real- time high-fidelity data from SCADA, resulting in notable improvements. The validation loss decreased to 1.78922 for buses, reflecting a 13% reduction, and to 0.01075 for the external grid, achieving a remarkable 75% reduction. These results validate the necessity and efficacy of incorporating hardware-in-the-loop (HIL) simulations and real-time data fine-tuning to bridge the gap between simulation and real- world conditions."}, {"title": "CONCLUSION AND FUTURE WORK", "content": "In this study, we introduced the SafePowerGraph-HIL framework, combining real-time hardware-in-the-loop (HIL) simulations on the IEEE 9-bus system with advanced graph neural networks for power system state estimation and dy- namic analysis. Using Hypersim's high-fidelity data generation and real-time SCADA-to-AWS data transfer, we trained and validated a Heterogeneous Graph Neural Network (HGNN) for accurate state prediction. The framework demonstrated robust performance in capturing complex grid interactions, enhancing PIHGNN's accuracy and resilience under varied conditions. These findings highlight the potential of integrating HIL with machine learning for real-time power system monitoring and control. Future work will extend the framework to more complex networks with renewable energy sources, exploring HGNN's adaptability in real-world scenarios and contributing to resilient control strategies for modern power grids."}]}