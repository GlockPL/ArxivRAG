{"title": "SCoTT: Wireless-Aware Path Planning with Vision Language Models and Strategic Chains-of-Thought", "authors": ["Aladin Djuhera", "Vlad C. Andrei", "Amin Seffo", "Holger Boche", "Walid Saad"], "abstract": "Path planning is a complex problem for many practical applications, particularly in robotics. Existing algorithms, however, are exhaustive in nature and become increasingly complex when additional side constraints are incorporated alongside distance minimization. In this paper, a novel approach using vision language models (VLMs) is proposed for enabling path planning in complex wireless-aware environments. To this end, insights from a digital twin (DT) with real-world wireless ray tracing data are explored in order to guarantee an average path gain threshold while minimizing the trajectory length. First, traditional approaches such as A* are compared to several wireless-aware extensions, and an optimal iterative dynamic programming approach (DP-WA*) is derived, which fully takes into account all path gains and distance metrics within the DT. On the basis of these baselines, the role of VLMs as an alternative assistant for path planning is investigated, and a strategic chain-of-thought tasking (SCoTT) approach is proposed. SCOTT divides the complex planning task into several subproblems and solves each with advanced CoT prompting. Results show that SCOTT achieves very close average path gains compared to DP-WA* while at the same time yielding consistently shorter path lengths. The results also show that VLMs can be used to accelerate DP-WA* by efficiently reducing the algorithm's search space and thus saving up to 62% in execution time. This work underscores the potential of VLMs in future digital systems as capable assistants for solving complex tasks, while enhancing user interaction and accelerating rapid prototyping under diverse wireless constraints.", "sections": [{"title": "I. INTRODUCTION AND MOTIVATION", "content": "Future 6G networks will serve as the critical infrastructure for numerous important technologies such as artificial general intelligence (AGI) [1], enhanced and reliable autonomous transportation systems [2], and the metaverse [3]. In addition, 6G-enabled digital twins (DTs) will play an important role for applications in smart manufacturing, including rapid prototyping of complex industrial processes and wireless network configurations [4]. DTs essentially serve as digital representations of real systems, processes and objects therein, and thus represent not only the physical system but also the associated algorithms, communication, and computing technologies [4].\nTwinning of wireless ray tracing data has become particularly important for digitally replicating the network layer.\nThe authors in [5], for example, created a DT dataset, which merges a city's 3D model, geospatial, and celluar ray tracing data to simulate electromagnetic wave propagation. In our previous work in [6], a ray tracing-enabled DT framework for integrated sensing and communication enabled robotics was designed, implemented, and verified for indoor scenarios. The DT in [6] enables wireless-aware interactions between the robot and the environment, which can be simulated in real-time. However, several important questions arise, such as how data from the DT can be leveraged to generate new insights and how this data can aid in solving complex problems like path planning with wireless side constraints. To this end, interacting with DTs through natural language via large language models (LLMs) is becoming increasingly helpful, particularly in human-in-the-loop systems [7], where users can prompt the DT using an LLM and thus can directly talk to the simulation. In such a setting, the user may instruct the LLM assistant to plan a wireless-aware path, where, for example, a robot needs to maintain a certain average path gain.\nIn general, path planning is an exhaustive search problem and traditional algorithms are inefficient for large datasets. Furthermore, existing algorithms cannot provide further insights or reason beyond their heuristics. This motivates research on whether path planning can be alternatively solved via LLMs, which can provide additional context if needed. In [8], the authors introduce a novel path planning algorithm via curriculum learning and spatial-to-relational LLM prompting. The algorithm teaches the LLM to rely on reinforcement learning to find the optimal path while reducing spatial hallucinations. However, the approach suffers from limited scalability and context inconsistencies in complex environments. The work in [9] introduces LLM-A* which augments the classical A* algorithm [10] by guiding it using few-shot prompted, LLM-generated waypoints. This reduces unnecessary exploration and increases efficiency, thus benefitting from the LLM's spatial and contextual capabilities. In addition, other works in [11], [12] aim to further improve the prompting strategy to provide a more explainable answer to a query. Most prominently, chain-of-thought (CoT) prompting [11] elicits more precise reasoning by forcing the LLM to provide step-by-step explanations with better overall reflection. However, CoT methods often exhibit instability due to their inconsistent quality of reasoning paths, leading to suboptimal performance. Thus, strategic CoT (SCOT) prompting [12] was introduced to improve CoT by providing additional inputs to elicit a certain solution strategy. In a two-stage process, the model is first"}, {"title": "II. WIRELESS-AWARE ALGORITHMIC PATH PLANNING", "content": "We focus on offline path planning with side constraints. A single-agent robot goes from a start node $n_{\\text{start}}$ to a goal node $n_{\\text{goal}}$ by choosing the shortest valid trajectory while ensuring that the average wireless path gain remains greater than some threshold $G$ (see Fig 1). We further assume the DT environment to be fully observable, static, and deterministic. The use of average path gain as a constraint strikes a balance between maintaining reliable communication and ensuring feasibility. It allows the robot to navigate through areas with lower connectivity as long as these are offset by segments with higher path gains. This approach is particularly important in scenarios where the start and goal nodes may lie in areas with poor wireless conditions, whereas stricter minimum requirements could make finding a viable path impossible.\n**A. Na\u00efve A**\nThe classical A* algorithm finds the shortest path from $n_{\\text{start}}$ to $n_{\\text{goal}}$ and is defined over the total cost function $f(n) = g(n) + h(n)$, where $g(n)$ represents the cost to reach node $n$ from $n_{\\text{start}}$, and where $h(n)$ is a heuristic for the cost to reach $n_{\\text{goal}}$ from node $n$, typically the Euclidean distance. The A* algorithm iteratively selects the next node with the lowest $f(n)$ and updates the path cost and heuristic to find the shortest route. It is chosen as a first starting point due to its optimality [10], making it particularly suitable for battery-powered robotics where minimizing the path length is crucial. To further incorporate wireless path gains, a na\u00efve approach is to adapt the cost component by adding the inverse of the path gain value $p(n)$ at each node, i.e.\n$g_{\\text{na\u00efve}}(n) = g(n) + \\frac{1}{p(n) + \\epsilon}$ (1)\nwhere the second term represents the additional cost-to-go with some small $\\epsilon > 0$ to avoid division by zero. The updated total cost function is then $f_{\\text{na\u00efve}}(n) = g_{\\text{na\u00efve}}(n) + h(n)$.\nHowever, this approach is na\u00efve because even though it prefers nodes with higher path gains, it does not explicitly enforce any threshold $G$, making it a heuristic-based adaptation rather than a strict constraint optimization. Thus, na\u00efve A* continuously biases toward the shortest path. This may lead to suboptimal paths when a high-gain route is longer but ultimately preferable. Further, this na\u00efve approach has identical complexity as A*, i.e. $O(b^d)$, where $b$ is the average number of neighbors per node and $d$ is the number of steps in the optimal path. Thus, na\u00efve A* remains inefficient for large datasets.\n**B. DP-WA*: Wireless-Aware Dynamic Programming A***\nTo effectively balance the trade-off between distance and average path gains, we utilize dynamic programming (DP) [13] to formulate a problem on a rectangular grid (traversable area in the DT), where each point $p_k$ at time step $k$ corresponds to a specific discretized $(x, y)$ coordinate. The state transition model is $p_{k+1} = f(p_k, u_k)$, which encodes movement in eight cardinal directions (north, north-west, etc.). The objective is to"}, {"title": "III. SCOTT: STRAGETIC CHAIN-OF-THOUGHT TASKING", "content": "While DP-WA* provides an optimal solution for wireless-aware path planning, it offers only limited flexibility for user interaction or adjustment of path choices. This can be a drawback in human-in-the-loop systems, where adapting and refining path decisions is crucial for various use cases [7]. Furthermore, the cubic complexity makes it less suitable for scenarios where rapid prototyping or real-time responses are required. Thus, we introduce the SCOTT framework, which addresses above challenges by leveraging a VLM to decompose the wireless-aware path planning problem into manageable sub-tasks, enabling an interactive process where users can guide and adjust the planning through prompts. Unlike previous methods, SCOTT uses SCoT prompting, which directs the VLM to utilize a certain solution strategy with examples. By combining both image (a bird's eye view of the DT grid map including a heatmap for wireless path gain measurements) and text (a JSON file of coordinates and accurate path gain measurements, infused into the model via retrieval-augmented generation (RAG) [14]), SCOTT allows the VLM to process detailed DT data while leveraging its contextual capabilities for path planning. SCOTT prompts the VLM in three sub-tasks as outlined in the detailed prompt template in Fig 2:\n1) We first instruct the VLM to find a coarse-grained initial path using the DT image, balancing good wireless coverage and distance via <Workflow>. This initial step allows the model to identify a foundational path that satisfies the average path gain threshold $G$ by leveraging the VLM's vision capabilities to extract path gain values from the image. Specifically, the VLM is guided to strategically explore high-gain (blue, green, and yellow) areas.\n2) We then instruct the VLM to identify intermediate focus areas that define a reduced search space around the initial path. To this end, we specify a  as a simple KDTree-like structure [15] with distance . This targeted reduction of the search space helps mitigate the computational burden, allowing the model to concentrate on areas where finer adjustments are most beneficial.\n3) Finally, we instruct the VLM to iteratively generate fine-grained paths within each of the focus areas using the accuracte path gain measurements, provided through the RAG pipeline. This step ensures that the path adheres to the threshold $G$ by guiding the model through a structured decision-making process as defined in , where the VLM explains each decision, such as choosing a waypoint for its optimal wireless coverage or avoiding an obstacle. By breaking down the path generation into smaller iterative prompts, SCOTT overcomes the context window limitations of language models, ensuring that each segment of the path is carefully optimized.\nThis advanced few-shot approach, together with SCoT and RAG, enables the VLM to find the shortest path, which ensures the threshold $G$ is met. The strategic use of  further balances the trade-off between high-gain areas and path length, while  requires each decision to be explainable via CoT. By further dividing the fine-grained path generation in sub-task 3 into several iterative prompts, we alleviate the model's challenges in handling a large number of data points. SCOTT thus provides a novel integration of LLM capabilities for wireless-aware path planning, enabling a more interactive and flexible approach. This makes SCOTT particularly valuable for intelligent DT assistants, where on-demand queries and flexibility are crucial. By allowing users to interact directly with the DT through natural language, SCOTT can generate new insights and rapidly adjust to changing conditions, such as new obstacles and changing experiments, making it ideal for applications that require fast iteration and deployment, for example, as part of agentic workflows. Furthermore, the resulting ensemble of focus areas from sub-task 2 can also be used as input to traditional algorithms like DP-WA* to reduce the search space and improve computational efficiency. This extension is explored further in Section IV, where we compare the performance of SCOTT with classical and wireless-aware path planning methods."}, {"title": "IV. SIMULATION RESULTS AND ANALYSIS", "content": "We refer to the setup in [6], where a 3D model of our lab at TUM was twinned into NVIDIA Omniverse [16]. Wireless ray tracing data was added using Remcom WirelessInsite [17] with accurate path gains for the twinned access point, which operates at 2.4 GHz using OFDM signaling with 1024 subcarriers, each spaced by 78.125 kHz. All dimensions in the subsequent figures are given in meters and path gains are normalized. Whitespaces represent obstacles such as cupboards or tables. We evaluated all SCOTT results using OpenAI's GPT-4o [18]. We investigate the following three path planning experiments, the results of which are shown in Table I for classical and na\u00efve A*, DP-WA*, SCOTT, and SCOTT-DP-WA*:\n1) Path 1 - Across the Room: In Figure 3, a trajectory with average path gain threshold $G = 0.7$ is planned across the room from $n_{\\text{start}} = (-2.5, -1)$ to $n_{\\text{goal}} = (2.5, 4.5)$, traversing through areas with high, mid and low path gains. The classical A* algorithm naturally chooses the shortest, unobstructed path with length 7.43 m, represented by the purple straight line, and thus has the lowest average path gain of 0.34. Similarly, na\u00efve A* chooses a path with length 7.77 m but deviates more toward higher gain areas, obtaining an average gain of 0.46. In contrast, the optimal DP-WA* path achieves the highest path gain of 0.75 at cost of a both increased path length at 9.15 m and computation time of 76.04 s, i.e. nearly 19 times higher the computation time than na\u00efve A*. However, SCOTT, represented by the green path, is able to achieve a similar gain of 0.72 while slightly reducing the path length to 8.64 m. The VLM-generated path in particular starts moving immediately to the higher gain areas and overlaps with DP-WA* therein before shortening its path toward $n_{\\text{goal}}$ in the last few meters. As noted in the previous section, DP-WA* can be significantly accelerated by reducing the search space using SCOTT's focus areas. This results in close performance to the original DP-WA* while reducing the computation time by more than 61% to 30.01 s, represented by the magenta SCOTT-DP-WA* path. Thus, only SCOTT or DP paths can successfully adhere to $G$ with SCOTT achieving very close performance to DP-WA*.\n2) Path 2 - Wall to Wall: A more challenging scenario in a lower gain area is shown in Figure 4, where a trajectory with threshold $G = 0.4$ is requested. Intuitively, A* chooses the shortest path with length 7.07 m and catastrophic gain 0.06, thus maintaining a straight line to the adjacent wall while going around the whitespace table obstacle. In contrast, all other paths, including na\u00efve A*, take a detour into higher path gain areas to optimize for $G$. However, as before, only SCOTT and DP paths can adhere to $G$ with DP-WA* having the highest gain of 0.43, compared to SCOTT with 0.41. In this example, SCOTT-DP-WA* is identical to DP-WA* whereas for Path 1 SCOTT's reduced focus areas may have omitted some few, but more optimal points, resulting in a slight difference compared to DP-WA*. In addition, as before, SCOTT tends to slightly reduce the total path length while SCOTT-DP-WA* reduces the computation time by more than 62% to 29.17 s.\n3) Path 3 - Extreme Case: Finally, we investigate an extreme case in Figure 5, where a trajectory with threshold $G = 0.6$ is requested for a very short path between $n_{\\text{start}} = (1.5, -1)$ to $n_{\\text{goal}} = (-1.5, -1)$. In this example, both A* and na\u00efve A* maintain a short and (roughly) straight line from start to goal, where na\u00efve A* biases toward the shortest path and thus cannot optimize the trade-off between optimal path gain and trajectory length. However, all SCoTT and DP paths take a semicircle-shaped detour into higher path gain areas with average gains of 0.69 for DP-WA*, 0.62 for SCOTT, and 0.66 for for SCOTT-DP-WA*. Similarly as before, SCOTT further reduces the total path length slightly while SCOTT-DP-WA* significantly reduces the computation time by 56% from 76.97 s to 33.76 s compared to DP-WA*. In this example, the threshold $G = 0.6$ is specifically chosen to be higher in order to motivate such a stark detour from the shortest path, which can only be achieved by wireless-aware SCOTT and DP paths.\nIn summary, SCOTT achieves very similar outcomes to optimal algorithms such as DP-WA*. Furthermore, SCOTT-DP-WA* accelerates DP-WA* by reducing the search space using SCOTT's focus areas, thus being up to 62% faster in execution compared to DP-WA*. On average, SCOTT requires (3 + number of focus areas) prompts for the path planning task. Depending on the size of the DT grid map, this may result in varying costs per inference query. In our examples, the map consists of 3854 points with the ensemble of focus areas being 48% smaller. We have further compared SCOTT using GPT-4o and Mistral AI's Pixtral 12B [19], however found that the latter's context window limitation is significantly larger than GPT-4o's. In general, SCOTT provides a balanced, explainable, and wireless-aware path planning alternative in VLM-assisted rapid prototyping environments."}, {"title": "V. CONCLUSION", "content": "In this paper, we have investigated the problem of wireless-aware path planning in fully-observable DT environments, where wireless ray tracing data is available. To this end, we first derived na\u00efve and optimal extensions of the classical A* algorithm using iterative DP. We then introduced SCOTT, a novel VLM-based framework and prompting template, which divides the complex path planning problem into manageable sub-tasks and solves each using advanced SCOT prompting and RAG while adhering to an average path gain threshold $G$. We have shown in several experiments that SCOTT achieves similar performance as optimal though computationally exhaustive wireless-aware path planning algorithms, thus balancing wireless coverage and path length. Furthermore, we have shown that SCOTT may augment these algorithms to significantly reduce execution time. We thus advocate for further research into LLM-assisted solutions to wireless-aware path planning in order to increase scalability and efficiency, especially in multi-agent and DT-enabled scenarios."}]}