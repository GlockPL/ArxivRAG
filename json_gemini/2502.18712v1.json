{"title": "TrajLLM: A Modular LLM-Enhanced Agent-Based Framework for Realistic Human Trajectory Simulation", "authors": ["Chenlu Ju", "Jiaxin Liu", "Shobhit Sinha", "Hao Xue", "Flora Salim"], "abstract": "This work leverages Large Language Models (LLMs) to simulate human mobility, addressing challenges like high costs and privacy concerns in traditional models. Our hierarchical framework integrates persona generation, activity selection, and destination prediction, using real-world demographic and psychological data to create realistic movement patterns. Both physical models and language models are employed to explore and demonstrate different methodologies for human mobility simulation. By structuring data with summarization and weighted density metrics, the system ensures scalable memory management while retaining actionable insights. Preliminary results indicate that LLM-driven simulations align with observed real-world patterns, offering scalable, interpretable insights for social problems such as urban planning, traffic management, and public health. The framework's ability to dynamically generate personas and activities enables it to provide adaptable and realistic daily routines. This study demonstrates the transformative potential of LLMs in advancing mobility modeling for societal and urban applications. The source code and interactive demo for our framework are available at https://github.com/cju0/TrajLLM.", "sections": [{"title": "1 Introduction", "content": "A comprehensive understanding of human mobility patterns is essential for the development of sustainable communities. It plays a pivotal role in the control of infectious diseases, in optimizing energy consumption, and in the formulation of urban planning strategies. However, direct utilization of real-world mobility data is often constrained by privacy concerns, as it encompasses sensitive information regarding individual movement patterns and personal behaviors. Furthermore, the collection of comprehensive mobility data is expensive. In this case, simulation of mobility data has emerged as a promising solution.\nPrevious approaches to modeling human mobility can be broadly categorized into mechanistic and deep learning models. Mechanistic models leverage stochastic processes to characterize human mobility behaviors, while these models tend to be oversimplified and focus only on certain aspects of mobility behavior, failing to generate comprehensive and nuanced mobility patterns. In contrast, deep learning models are capable of learning and generating human mobility patterns from training data, but often fail to capture the underlying mechanisms driving mobility behavior. Additionally, they suffer from low sample efficiency when learning behavior distributions and tend to generate data that lacks semantic-aware intentions, limiting their interpretability and realism.\nThe advances in Large Language Models (LLMs) have shown promising capabilities in understanding and generating coherent intentions through techniques like chain-of-thought prompting and role-playing. It has demonstrated remarkable abilities in understanding humans and society, with applications in political science, economics, and other social science studies. In recent years, several models have been proposed to simulate human mobility data using LLMs, such as LLMob [7] and CoPB [5]. LLMob relies solely on LLMs, utilizing historical data and personal profiles, while CoPB integrates LLMs with a gravity model to simulate mobility data. Our framework TrajLLM combines the ability of LLMs to generate coherent and interpretable human activities with an innovative physical model for location mapping, minimizing reliance on real-world historical check-in data by leveraging static Point-of-Interest (POI) data. Additionally, we integrate a memory module to ensure agents exhibit consistent and realistic activity patterns over time, reflecting habitual behaviors. In comparison to existing solutions, this novel approach not only enables the activity-driven generation of daily mobility trajectories, but also further enhances agent alignment with human behaviors through the consolidation of agents' historical visitation data. Furthermore, the integration of fundamental physical models ensures TrajLLM's simulation efficiency, providing a balance between accuracy and performance."}, {"title": "2 Framework Architecture", "content": "To integrate the reasoning abilities of LLMs into mobility simulation and model the activity-driven dynamics of human mobility, our framework consists of four primary modules: persona, activity, destination, and memory. Figure 1 illustrates the overall framework pipeline and interactions between the four modules.\nTo take both time and cost efficiency into account, we adopt LLAMA-3.1-8B-Instruct and GPT-40-mini as LLM options to check the performance of these two models."}, {"title": "2.1 Persona", "content": "The first module of TrajLLM focuses on creating agents for mobility simulation. It consists of two phases: generating personas and generating daily activity-location lists.\nTo effectively generate personas that align with real-world population distribution conditions, population statistics are collected from government websites and prompted into LLMs. The statistics are collected for attributes including age, gender, employment condition, and occupation, which are assumed to be the key attributes that affect the agent's daily activity pattern. Inspired by the personality simulation capability of LLMs [3], personas are also assigned with big five personality traits [4]. This allows LLM-empowered agents to simulate mobility pattern differences between people with different personalities. As residences, workplaces (if the agent is an employee), and schools (if the agent is a student) are relatively constant in reality, each persona will have fixed primary locations assigned to them. These locations will serve as key anchors in their daily trajectories, ensuring a realistic representation of routine movements and interactions within the simulated environment.\nOnce personas are properly generated, each persona is assigned a unique daily activity-location list, which is generated by LLMs with the persona data. The list details the specific activities the corresponding agent is likely to engage in, and their associated potential location categories. For example, an agent's 'meal' activity may have a list of potential location categories: ['Cafe', 'Casual Dining', 'Home', 'Restaurant'], which means one of these categories may be selected as the dining location for the agent.\nThis module is a pre-processing step before the actual operation of the mobility simulation. Once personas and their corresponding daily activity-location lists are generated, they are utilized as foundational attributes for the agents. These attributes guide the agents' behavior, enabling realistic modeling of human mobility patterns based on diverse profiles and daily routines."}, {"title": "2.2 Activity", "content": "As illustrated in Figure 1, after the persona module is pre-processed, the generated personas are passed into the activity module as the agents' background information. For each LLM-empowered agent, the subsequent activity of the day is simulated iteratively based on a combination of persona attributes, potential activity and location categories, the agent's routine up to that point, and historical mobility patterns. This set of information is then used to create a prompt for the LLM, enabling the language model to reason and generate contextually appropriate activity predictions for the persona. The output data for each activity includes the type of activity, the corresponding location category, and its duration.\nOnce the location category for an agent's activity is determined by the output of the activity module, it is forwarded to the destination module, which selects a specific destination within the given category. After the destination is finalized, the activity module then starts generating the agent's next activity based on contextual factors and predefined rules. This iterative simulation continues until the end of the day (where the day's activities are all completed), at which point the process resets for the next agent."}, {"title": "2.3 Destination", "content": "In this section, we focus on determining the destinations for the generated daily activities. As illustrated in Figure 1, we have designed two destination selection mechanisms: one is driven by LLM and the other utilizes physical models. Both of them take in the current location of the agent (as coordinate), location category for the activity and the agent's historical visiting data from memory.\n2.3.1 LLM-based Destination Selection. This approach relies entirely on Large Language Models (LLMs) to generate contextually relevant destination recommendations. Historical visiting data is retrieved from the memory module, which stores detailed logs of previous activities and preferences. LLMs process this data to uncover patterns and create recommendations tailored to the persona's goals and behavioural history.\nOnce recommendations are generated, they serve as input prompts for LLMs to randomize a suitable destination matching a given location category within a specified radius. For example, if the activity is \"sports and exercise\" with a preference for \"Gym,\" the LLM identifies relevant past visits and incorporates them to suggest a nearby gym from the Points of Interests (POIs) dataset.\nThis method ensures that destination selection is personalized and diverse, balancing historical relevance with real-time randomization. Additionally, the integration of historical activity data ensures that generated recommendations align closely with realistic behavioural patterns, providing a robust foundation for simulated agent movements.\n2.3.2 Physical Model based Destination Selection. In this module, we consider using mechanistic methods and integrating spatial and historical factors through two primary modules: the Frequency Module and the Spatial Module. The Spatial Module models are based on the spatial interactions between POIs, while the Frequency Module is based on historical data which includes information about agents' preferences and historical patterns. By combining these two aspects, the model ensures that the generated trajectories closely mimic real-world mobility behaviors, achieving both coherence and representativeness in synthetic data generation.\nWe propose a potential-based spatial model inspired by spatial interaction theory and electromagnetic field principles. The original model is expressed as:\n$\\E(Y_{ij}) = KU_iV_jf(d_{ij})$\nwhere $E(Y_{ij})$is the expected interaction of travel flow $Y_{ij}$ from user current location $i$ to next location $j$, $U_i$ and $V_j$ are attraction factors, $K$ is a scaling coefficient. $f(d_{ij})$ is the distance impedance function and $d_{ij}$ is the distance between the location $i$ and $j$.\nIn our case, since we only need to predict the next location for a single agent, we use spatial weight $W$ to represents the probability of the user moving from the current location to the next location $j$. So the scaling coefficient $K$ and $U_i$ are omitted, and our spatial model weight of each POI is defined as:\n$\\W_j = \\frac{V_j}{f(d_{ij})}$\nWe chose a truncated power law distribution [1] as the distance impedance function, which is defined as:\n$\\f(d) = (d+r_o)^{-\\beta}e^{-d/k}$\nwhere $r_o$, $\\beta$, and $k$ are parameters estimated from empirical data. The model incorporates historical visits and personal preferences. To manage the large number of POIs in urban areas, we use the lossy count method to discard low-frequency POIs, conserving memory. To ensure interpretable predictions, input frequencies are adjusted via quantile mapping, aligning them with real-world distributions:\n(1) Rank normalization: Standardize input frequencies $f_i$ using the inverse ECDF of check-in data:\n$\\z_i = F^{-1}_c\\big(\\frac{\\text{rank}(f_i)}{|P_c|}\\big)$\nwhere $F^{-1}$ represents the inverse ECDF of the target distribution estimated from check-in data of POI category $c$, $P_c$ is the POI set of category $c$.\n(2) Distribution mapping: Map standardized values using a function $\\Psi$, resulting in adjusted frequencies:\n$\\f'_i = \\Psi(z_i)$\n(3) Weight normalization: Calculate final weights by normalizing $f'$ and introducing a noise factor $\\sigma$:\n$\\w_i = (1 - \\sigma) \\frac{f'_i}{\\sum_{i \\in P_c} f'_i} + \\frac{\\sigma}{|P_c|}$\nwhere $w'$ represent normalized spatial and frequency weights. Unlike additive methods, experiments show that multiplicative integration better captures the complementary relationship between spatial and frequency weights. To ensuring a realistic balance between convenience and preference, The probability for POI $i$ is computed as:\n$\\P_i = \\frac{w_i w'_i}{\\sum_{i \\in P_c} w_i w'_i}$"}, {"title": "2.4 Memory", "content": "The memory module serves as a foundational component of the simulation framework, enabling efficient management of the vast data streams generated by agents. It employs a hierarchical structure, organizing raw daily activities into daily, weekly, and monthly summaries. This progressive summarization captures critical patterns and trends while minimizing redundancy, ensuring the system remains scalable even as interactions grow over time.\nA standout feature of the memory module is the use of weighted information density metrics to evaluate memory significance. Drawing inspiration from studies such as Holmes and Rahe's (1967) [2] Social Readjustment Rating Scale and Tiwari and Deshpande's (2023) [6] urban stress evaluation, the system assigns weights to categories like events, entities, actions, and attributes to reflect their relative importance. While these references provided a conceptual basis for assigning weights, the actual numerical values were determined independently during development. Events and entities, often pivotal in contextualizing activities, are weighted higher to prioritize retention of meaningful details.\nThe module calculates an importance score for each memory by combining weighted information density with recency and access frequency, normalized using a sigmoid function to produce a balanced, interpretable measure of relevance. This approach ensures that high-density memories remain prioritized while accommodating temporal factors like recentness and usage patterns. Through this scoring, the system identifies which memories to retain and which to prune, striking a balance between utility and storage efficiency. Extensive iterative testing helped establish a robust threshold score to dynamically prune memories, retaining those with actionable insights while discarding less critical ones. This ensures efficient and relevant memory management.\nBy balancing scalability with depth, the memory module adapts dynamically to agent needs, supporting realistic and adaptive simulations. Future improvements will refine the weighting system and incorporate personalized metrics to better align memory management with individual agent personas and their unique interactions."}, {"title": "3 Demonstration", "content": "Our solution integrates back-end processing and a dynamic front-end to create an intuitive simulation framework. It consists of two key components: (1) a Flask-based back-end server for handling simulation logic and managing agent activity data, and (2) a front-end web application built with HTML, CSS, JavaScript, and the Leaflet.js library for visualization.\nThe back-end server provides RESTful API endpoints, such as the /start_day endpoint, which processes input parameters like the number of agents and start time to generate a JSON response with detailed agent activities and coordinates. Its modular architecture enables easy integration with new data sources and generative models, ensuring scalability and adaptability.\nThe front-end application offers a user-friendly interface for real-time interaction. Users can adjust parameters via sliders and input fields, visualize agent movements on a map, and access live activity logs with toggle-able controls. This combination ensures usability and interactivity, making it ideal for engaging demonstrations. The front-end HTML file is available in our GitHub repository for users to explore and interact with independently.\nTo ensure accessibility and usability during demonstrations, the framework is deployed on a web server using Flask. This setup allows conference attendees to interact with the simulation directly on their devices or via a dedicated terminal provided at the venue.\nFor the purpose of demonstration, we leverage the public check-ins dataset of Tokyo as the underlying POIs dataset for simulation (note that the proposed simulation platform supports other cities as well). Based on this, the personas for the agents are created using population statistics collected from local government website\u00b9. As illustrated in Figure 2, the visualization presents a sample of one-day trajectories for ten agents in Tokyo. This interface provides an intuitive layout with a map view for agent trajectories, sliders, and input fields for simulation parameters. The \"Live Movement Updates\" panel displays agent-specific details such as gender, occupation, activity, and location, highlighting the system's scalability, modularity, and ease of interaction. This makes it an effective tool for showcasing dynamic simulations in academic and professional environments."}, {"title": "4 Conclusion", "content": "In this paper, we propose an LLM-empowered agent-based modular mobility generation framework, TrajLLM. It utilizes iterative activity simulation and hybrid models destination selection mechanisms to allow memory-guided LLM agents to simulate effective human activity trajectories. Key contributions include the development of a modular framework that seamlessly integrates human behavioral and spatial-temporal dynamics into mobility simulation, significantly enhancing the realism and adaptability of generated long-term human movement patterns, while reducing the reliance on real-world data. In addition, our interactive web interface allows users to flexibly configure simulation parameters to visualize the daily trajectories of different numbers of agents at different times.\nThe limitations of LLMs in fully capturing the complexity of human behavior are undeniable, but our activity-driven trajectory simulation mechanism enhances overall accuracy. However, the potential biases embedded within the data sets present a persistent challenge that requires further mitigation. Furthermore, future research will focus on incorporating interactions between agents to refine the simulation's realism and generalizability."}, {"title": "5 Ethical Use of Data", "content": "All datasets used in this research are composed of publicly available data obtained from credible sources. These datasets do not contain any personally identifiable information (PII), ensuring compliance with ethical standards for data usage. This study ensures that the data utilized is properly sourced, transparent, and used responsibly, with no potential for harm or privacy violations.\nTrajLLM-generated data should be indicated as synthetic to avoid misleading conclusions in usage and to ensure accountability and transparency."}]}