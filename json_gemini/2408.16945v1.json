{"title": "Different Victims, Same Layout: Email Visual Similarity Detection for Enhanced Email Protection", "authors": ["Sachin Shukla", "Omid Mirzaei"], "abstract": "In the pursuit of an effective spam detection system, the focus has often been on identifying known spam patterns either through rule-based detection systems or machine learning (ML) solutions. However, both systems are susceptible to evasion techniques and zero-day attacks that can be achieved at low cost. Therefore, an email that bypassed the defense system once can do it again in the following days, even though rules are updated or the ML models are retrained. The recurrence of failures to detect emails that exhibit layout similarities to previously undetected spam is concerning for customers and can erode their trust in a company. Our observations show that threat actors reuse email kits extensively and can bypass detection with little effort, for example, by making changes to the content of emails. In this work, we propose an email visual similarity detection approach, named Pisco, to improve the detection capabilities of an email threat defense system. We apply our proof of concept to some real-world samples received from different sources. Our results show that email kits are being reused extensively and visually similar emails are sent to our customers at various time intervals. Therefore, this method could be very helpful in situations where detection features that rely on contextual information and keywords are bypassed, an occurrence our observations show happens frequently.", "sections": [{"title": "1 INTRODUCTION", "content": "In the digital age, email stands as a cornerstone of communication, facilitating a myriad of personal and professional interactions. However, as the volume of email traffic continues to soar, so does the proliferation of spam messages. These unsolicited emails inundate inboxes, erode productivity, and pose significant security risks. Email is still the primary attack vector being abused by threat actors for initial access to their targets [13]. The battle against email spam has witnessed substantial progress through the deployment of sophisticated detection systems.\nAs security measures improve and detection mechanisms become more sophisticated, cybercriminals are quick to adapt, devising elusive methods to bypass these defenses. Specifically, with the inexpensive phishing-as-a-service kits (e.g., Caffeine [9], EvilProxy [12], and NakedPages [3]) that are available, bad actors can get access to a wide range of capabilities. Most phishing kits are found to be distributed and reused in whole or in part [4, 6]. On the other hand, email kits offer attackers an easy way to curate and send emails to a larger audience, maximizing the impact of their email campaigns\u00b9. These kits often provide a number of default email templates to make the process even smoother and faster.\nRecently, defense strategies that rely on visual similarity [1, 7, 8] have become some of the most powerful and successful methods for detecting phishing pages and countering phishing attacks. These mechanisms necessitate the creation of a reference collection featuring visual elements, such as screenshots and logos, of widely recognized brands obtained from legitimate web pages. They are adept at identifying potential phishing attacks by spotting deceitful sites that bear a strong visual similarity to established brands (e.g., PayPal), yet operate under disparate domain names. However, these methods have not been applied to emails directly in the literature.\nOur observations show that email kits are reused extensively in the wild (see Figure 1 as an example), and several emails with layout similarities are observed in our telemetry at different time intervals. We believe this can happen for two main reasons: 1) An old threat actor changing their infrastructure but reusing the same email kit as a few days ago, or 2) Different threat actors using the same email kit. Email kits provide different features that enable threat actors to add additional elements (e.g., logos) to emails. They also allow them to re-paraphrase specific parts of emails to evade detection systems that rely on keywords. Therefore, email kit reuse introduces significant challenges to conventional defense mechanisms such as rule-based detection engines and even ML-based solutions that are not robust against zero-day attacks.\nIn this work, we propose an email visual similarity detection approach, named Pisco, to enable the email defense system convict new emails that resemble to any historic spam emails. On the backend, our approach renders the HTML source of each email we receive from different sources in a client, and next, takes a screenshot of the fully rendered email. It then embeds the screenshot's image to a numerical representation via deep learning, and clusters the embedding vectors into different groups to create a knowledge base. On the frontend, it embeds each new email that is going to be delivered to the inboxes in the same way and returns a verdict for the email based on the assigned cluster."}, {"title": "2 APPROACH", "content": "This section presents our approach to detect visually similar emails via image embedding. The system begins with the collection of"}, {"title": "2.1 Image Capturing", "content": "The initial step in our pipeline involves capturing email screenshots. This process is crucial for extracting visual information that represents the appearance and layout of the email. The system utilizes automated tools to render the HTML source of each email in an email client, and to capture relevant portions of the fully rendered email.\nOur approach parses each email in the first step to retrieve its contents in accordance with the RFC822 standard [5]. Then, email banners are removed, and the email is re-written. Banners are added to emails by difference services, and they serve different purposes. For example, security warnings are typically added in a banner to the message by email security gateways. Once the banner is removed, the message is rendered in the Thunderbird email client via an X virtual framebuffer, known as Xvfb. When fully loaded, the message screenshot is taken and stored for image processing."}, {"title": "2.2 Image Processing", "content": "To standardize and enhance the quality of captured images, a set of image processing procedures is applied. These procedures include normalization techniques to adjust lighting and color variations, and cropping to focus on the relevant content. By incorporating these processing steps, the system aims to create a consistent and normalized data for improved image embedding. In particular, we leveraged the following image processing techniques:"}, {"title": "2.2.1 Normalization", "content": "In image processing, normalization typically involves modifying pixel values to adhere to a particular range or distribution, often with the goal of enhancing contrast or standardizing intensity values. Common normalization techniques include histogram equalization and contrast stretching, both of which seek to reorganize pixel intensities across a wider spectrum, resulting in a visually appealing image. We rely on the NORM_MINMAX method of the OpenCV library to normalize the emails' screenshots [10]."}, {"title": "2.2.2 Sharpening", "content": "The primary objective of image sharpening is to augment the high-frequency elements within an image, thereby accentuating edges and intricate details. This enhancement is frequently accomplished through the application of filters, such as the unsharp mask or sharpening filter, which operate by highlighting variations in intensity among neighboring pixels, ultimately intensifying the image's edges. In our research, we have adopted an adaptive approach to image sharpening [14]. In contrast to conventional methods that uniformly enhance the sharpness of an entire image, adaptive sharpening tailors the degree of sharpness according to the content and features found in distinct areas."}, {"title": "2.2.3 Cropping", "content": "In the context of image processing, cropping involves eliminating outer segments of an image to preserve only the intended section. This technique includes choosing a designated area of interest and discarding the remaining portions. In this work we leverage image cropping to discard the email's header and to remove the redundant white spaces surrounding the email body."}, {"title": "2.3 Image Embedding", "content": "Image embedding serves as a crucial step in our pipeline, transforming processed images into numerical vector representations. By utilizing pre-trained models, the system extracts meaningful features and encodes them into a high-dimensional vector space. In our application context, this embedding vector captures the numerical representation of the visual elements embedded within each email. If two emails yield similar image embedding vectors, it suggests that their screenshots exhibit comparable visual characteristics. This similarity serves as an indicator that the emails have analogous visual elements and share common templates or visual layouts. Therefore, the embedding process streamlines the effective comparison and retrieval of visually similar emails. In our work, we have leveraged a pre-trained CLIP model, developed by OpenAI [11], to embed the screenshot of emails."}, {"title": "2.4 Image Retrieval and Similarity Detection", "content": "Once a rich database of email embeddings is created from different sources, the incoming emails are compared with historic ones and are convicted if a high visual similarity exists with spam messages. The image similarity detection and retrieval system should be both fast and reliable to be applicable to this application context. In our work, we rely on a fast open-source vector database, called Milvus [2], that relies on nearest neighbor search algorithm and has been widely used in industry for similar purposes. Nearest neighbor search algorithms can be used to index a very large number of email embedding vectors. If the ultimate goal is to group visually similar emails together, you can achieve this by leveraging either a clustering algorithm or a similarity threshold."}, {"title": "3 PRELIMINARY RESULTS", "content": "This section summarizes our key findings. We ran our prototype on emails we received from different sources in our corpus within a span of one month (April 2024). We used some pre-filtering criteria to down-sample messages and some other criteria to discard messages that did not have any visual elements. This yielded around 116K emails in the studied time window. From the number of messages we processed, we detected 20,215 clusters of visually similar emails. Figure 2 shows that only 3,390 clusters (2.92%) had one email, and the remaining ones had at least two emails that share some visual similarity. We manually inspected all clusters and confirmed that no false positives existed from a similarity detection perspective.\nExperimental results show that most clusters have medium to long life spans (see Figure 3 as an example), i.e., emails in such clusters were received at different time intervals across weeks or sometimes even months. This confirms that email kits are shared extensively and are reused at different time intervals. Therefore, if historic emails with visual elements are embedded and stored in a database, they can be used at a later time for enhanced protection."}, {"title": "4 CONCLUSION AND FUTURE WORK", "content": "Our prototype analysis of emails received over one month revealed that a substantial portion of our corpus emails were visually similar (i.e, they had similar layouts), forming 20,215 clusters. The majority of these clusters consisted of multiple emails, indicating extensive sharing and reuse of email kits over time. Our findings suggest that incorporating historic emails with visual elements into a database could significantly improve future protection efforts.\nAlthough the immediate use case of our system is to enhance the protection capabilities of our email threat defense product, we have several ongoing projects that apply this approach to other use cases, including visual search for improved threat intelligence, automatic message labeling, and email campaign tracking."}]}