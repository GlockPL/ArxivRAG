{"title": "Detecting new obfuscated malware variants: A lightweight and interpretable machine learning approach", "authors": ["Oladipo A. Madamidola", "Felix Ngobigha", "Adnane Ez-zizi"], "abstract": "Machine learning has been successfully applied in developing malware detection systems, with a primary focus on accuracy, and increasing attention to reducing computational overhead and improving model interpretability. However, an important question remains underexplored: How well can machine learning-based models detect entirely new forms of malware not present in the training data? In this study, we present a machine learning-based system for detecting obfuscated malware that is not only highly accurate, lightweight and interpretable, but also capable of successfully adapting to new types of malware attacks. Our system is capable of detecting 15 malware subtypes despite being exclusively trained on one malware subtype, namely the Transponder from the Spyware family. This system was built after training 15 distinct random forest-based models, each on a different malware subtype from the CIC-MalMem-2022 dataset. These models were evaluated against the entire range of malware subtypes, including all unseen malware subtypes. To maintain the system's streamlined nature, training was confined to the top five most important features, which also enhanced interpretability. The Transponder-focused model exhibited high accuracy, exceeding 99.8%, with an average processing speed of 5.7 \u00b5s per file. We also illustrate how the Shapley additive explanations technique can facilitate the interpretation of the model predictions. Our research contributes to advancing malware detection methodologies, pioneering the feasibility of detecting obfuscated malware by exclusively training a model on a single or a few carefully selected malware subtypes and applying it to detect unseen subtypes.", "sections": [{"title": "Keywords", "content": "Cyber security, Obfuscated malware, Detection of unknown malware, Machine learning, Explainable machine learning."}, {"title": "1. Introduction", "content": "Over the last two decades, technological advancements in cloud computing, the Internet of Things and the recent introduction of Fifth Generation (5G) and beyond 5G mobile networks have revolutionised the way businesses and individuals access and store data (Mijwil et al., 2023). This technological paradigm shift has enabled individuals and organisations to access their data seamlessly from anywhere in the world, using any connected devices. However, malware (i.e., malicious software) poses a significant threat to the security of these technologies. Malicious actors can use malware to compromise the confidentiality, integrity, and availability of data (Gupta and Rani, 2020). The impact of malware can be devastating for businesses and individuals alike, as it can result in the loss of sensitive information, such as personal data and financial information. In 2021 alone, over 1.3 billion malware were detected (Dener et al., 2022), and with increased connectivity, reliance on digital systems, and the growing number of connected devices, the attack landscape is expected to grow even more.\nWith an unprecedented number of malware targeting various computing systems and online infrastructures, the detection of malware is of great importance. Unfortunately, traditional methods of malware detection, such as signature-based detection and behaviour-based detection, are becoming increasingly less effective against modern and sophisticated malware attacks. Malicious authors are using advanced technologies to design malware that is increasingly difficult to detect and exterminate (Mezina and Burget, 2022). In recent years, there has been a pivot towards the use of machine learning (ML) for malware detection. One of the advantages of the ML-based approach is its capacity to process a large number of files quickly to identify patterns and anomalies that may be indicative of malware attacks. The classical ML-based approach to malware detection typically involves training a model on a dataset of known malware and benign software and then using the model to classify new samples from the same distribution of malware and benign types (see, for example, Alani et al., 2023; Shafin et al., 2023; Roy et al., 2023). While these techniques have been shown to learn from past attacks effectively, the following question remains underexplored: Are these"}, {"title": "1.1. Research contributions", "content": "In their 2023 study, Alani et al. underscored the essential pillars for effective malware detection systems: (1) high accuracy, (2) lightweight design (i.e. minimal memory and processing resource requirements) and (3) explainability (as opposed to opaque, 'black box' approaches). Here, we contend that a fourth pillar\u2014adaptability to novel malware threats\u2014is equally crucial in the face of the continuously evolving cyber-threat landscape. We thus designed a malware detection system incorporating all four aforementioned criteria. Pioneering a zero-shot machine-learning approach (Palatucci et al., 2009) in malware detection, our system was trained and tested on the CIC-MalMem-2022 dataset, with a focus on assessing its capacity to detect unseen obfuscated malware variants. Our primary contributions include:\n1.  Development of a comprehensive and adaptive machine learning-based system for detecting obfuscated malware, with high accuracy (> 99.8%) and a fast detection (5.7 us per file), while trained on a small fraction of the dataset (<7%) used in other related works.\n2.  Use of a novel training methodology, where the system, initially trained on a single malware subtype, can successfully detect 14 distinct, previously unencountered obfuscated malware subtypes. This approach demonstrates the ability of machine learning-based systems in identifying and combating zero-day malware threats.\n3.  Implementation of feature selection, leading to a reduced memory usage (a model size of 340 KB) and a simplification of the detection system's complexity without compromising accuracy.\n4.  Inclusion of global and local interpretations of the system's predictions to demonstrate how practitioners can gain deeper insights. This should encourage a more transparent and informed approach to automated cybersecurity defences."}, {"title": "1.2. Structure of paper", "content": "The remaining sections of this paper are as follows. Section 2 presents a brief review of relevant literature and background content on malware detection. In Section 3, we provide details of the study methodologies. Section 4 covers the performance results of the various models"}, {"title": "2. Literature review and background", "content": "2.1. Malware types\nMalware is a type of software designed to harm or exploit any device, network or system it infects. Malicious actors use them to gain unauthorised access to steal sensitive information (e.g., financial data), cause service disruptions or establish remote control access for future exploitation, among other types of harm. Although malware manifests in diverse forms, it typically falls into a known set of distinct types, each with unique characteristics and objectives. These malware types can overlap, with many types showing traits of other malware types. The most prevalent types include Trojan horse, Spyware and Ransomware.\nTrojan Horse: Trojan horses appear and behave like legitimate software to deceive users into executing them. Once activated, they can carry out malicious activities in the background, including stealing sensitive information through keylogging, monitoring user activities and altering files within the systems it resides in (Idika and Mathur, 2007). Trojan horses are generally propagated via the download of apps people consider legitimate. The dataset used in this study includes the following Trojan horse subtypes: Zeus, Emonet, Refroso, Scar and Reconyc.\nSpyware: This is a class of malware used to secretly record user activities or steal personal information (such as browsing habits or activities) that can be sold to third parties (e.g., for custom advertising; Wang et al., 2006). 180Solutions, CoolWebSearch, Gator, Transponder and TIBS are subtypes of spyware included in the dataset used in this study.\nRansomware: This is a class of malware that is used to take control of a computer by encrypting all data on a computer system (Tahir, 2018). As a result of encryption, the user cannot access their data or use their operating system. The screen of an infected computer is usually used by an attacker to make their demands such as the payment of money (though the victim's response to the ransom demands does not guarantee recovery). The dataset used in this study includes Conti, Maze, Pysa, Ako and Shade as subtypes of ransomware."}, {"title": "2.2. Malware obfuscation techniques", "content": "While malware detection poses a significant challenge, malware authors have recently exacerbated this challenge by employing obfuscation techniques to make their code more intricate and resistant to detection (O'Kane et al., 2011). Obfuscation can take many forms, such as code obfuscation, which involves making the code difficult to understand and analyse, for example, by renaming variables and functions, adding unnecessary code or using complex control structures (Rad et al., 2012); code encryption, which encrypts the malware code using a secret key or algorithm to evade detection by antivirus software, as the encrypted code may not match known malware signatures (Rad et al., 2012); polymorphism, where the malware is designed to change its code structure and behaviour with each new infection (Alam et al., 2015); and metamorphism, which goes a step further than polymorphism by changing its code structure and behaviour even while it is running (O'Kane et al., 2011)."}, {"title": "2.3. Malware analysis approaches", "content": "In the field of cyber security, malware analysis is primarily performed using two methodologies: static analysis and dynamic analysis, each with its distinct mechanisms and implications (Aslan and Samet, 2020; Elkhail et al., 2021). Both static and dynamic analysis approaches result in the generation of excessively large numbers of features and signatures. To mitigate this complexity and battle the unprecedented increase in the number of malware, researchers in recent years have started using ML techniques to improve malware detection based on features generated from static and dynamic analysis (Dada et al., 2019). The remaining subsections will delve into some notable studies that have leveraged machine learning for malware analysis, with a focus on binary classification of benign versus malware software and the detection of zero-day attacks."}, {"title": "2.3.1 Machine learning-based static analysis", "content": "Using a dataset derived from Windows Portable Executable files (PE files), Liu et al. (2020) proposed a malware detection system based on adversarial training, which achieved up to 97.73% accuracy. Similarly, Radwan (2019) performed malware detection using data from the static analysis of PE files. The dataset consisted of 2683 malware, 2501 benign records and 55 variables. After training seven classifiers\u2014Gradient Boosted Trees, Decision Tree, Random Forest, K-Nearest Neighbours, File large margin, Logistic Regression and Na\u00efve Bayes-the"}, {"title": "2.3.2 Machine learning-based dynamic analysis", "content": "In their dynamic analysis, Bhatia and Kaushal (2017) employed the Decision Tree and Random Forest algorithms to classify datasets derived from system call traces of Android applications as malicious or benign. Their results indicated that the Decision Tree and Random Forest algorithms achieved accuracies of 85% and 88% respectively. In a subsequent study, Hwang et al. (2020) developed a two-stage detection model. First, they use an analytical framework, the Markov model, to dynamically characterise Windows API calls of ransomware. Next, they applied machine-learning techniques to classify the data. The authors demonstrated that they were able to achieve an overall accuracy of 97.3% with 4.8% false positives and 1.5% false negatives using a Random Forest algorithm. While dynamic-based approaches offers a deeper understanding of the true nature of the malware and the threat it poses without the risk of infection of the entire enterprise architecture. However, due to advancements in technology, malware is becoming more complex, and evasion techniques are being adopted by adversaries to evade detection in sandboxes by ensuring that malware remains dormant until a certain trigger is activated (Sihwail et al., 2019)."}, {"title": "2.3.3 Machine learning-based hybrid analysis", "content": "To address the issue of dormant malware, other studies have used features from hybrid analysis, that is, a combination of features from dynamic analysis and static analysis with machine learning techniques. For example, Ijaz et al. (2019) extracted 2300 features from dynamic analysis, and 92 features from the static analysis of PE files. Owing to the large number of features, different combinations of features were evaluated using machine learning algorithms. They reported that the Gradient Boosting Algorithm achieved 94.64% accuracy on data from the dynamic analysis, whereas the accuracy of the static analysis-based model was 99.36%. Hadiprakoso et al. (2020) also reported that the Gradient Boosting Algorithm is effective for classifying malware that targets Android applications. Using their method, a detection accuracy of approximately 99% was achieved using a Gradient Boosting Algorithm."}, {"title": "2.3.4 Machine learning-based memory analysis", "content": "Recently, owing to the increasingly changing behaviour of malware, data from forensic memory analysis has been proposed for effective malware detection in recent years (Mosli et al., 2016, Rathnayaka and Jamdagni, 2017, Sihwail et al., 2021). Memory-based features have been suggested as an effective way to overcome some of the limitations of other methods of malware detection (Dener et al., 2022). Useful information such as active and terminated processes, Dynamic Link Libraries (DLL), running services, registry, and active network connections can readily be read from memory (Rathnayaka and Jamdagni, 2017; Sihwail et al., 2019; Sihwail et al., 2021). Furthermore, memory analysis can help identify attackers' IP addresses, hooks used to hide themselves, malware injections, and interdependencies of processes (Rathnayaka and Jamdagni, 2017)\nIn 2022, Carrier et al. proposed a stacked ensemble system to classify obfuscated malware by using features derived from device memory of recent and advanced obfuscated malware attacks. In their ensemble system, they use Na\u00efve-Bayes, Random Forest and Decision Tree as base learners and Logistic Regression as meta-learner. With this approach, they reported 99% accuracy for malware detection. Their work also resulted in the publication of a new dataset specifically designed to test the detection of obfuscated malware, namely the CIC-MalMem-2022 dataset. Using the same dataset, Dener et al. (2022) proposed a detection method within a big data environment. In their study, they evaluated machine and deep learning techniques for binary malware detection. Results were evaluated based on Accuracy, F1-score, precision,"}, {"title": "2.3.5 Machine learning-based detection of zero-day attacks", "content": "Detection of previously unseen malware types, or what is often referred to as zero-day malware, represents a significant and growing challenge within the cybersecurity field. It is estimated that approximately 350,000 instances of zero-day malware are generated daily (Amer and Zelinka, 2020). These zero-day malware attacks exploit unknown system vulnerabilities and uses evasion techniques to evade cybersecurity detection tools. Several ML-based solutions have been proposed (for a recent review, see Guo, 2023), ranging from supervised learning (Alazab et al., 2011, Zhou and Pezaros, 2019, Gandotra et al., 2016) and unsupervised"}, {"title": "Summary", "content": "While ML techniques have shown promise in recognising unique malware signatures and classifying known malware samples, there is a need to extend these methods to effectively detect previously unseen obfuscated malware types, particularly when using data from memory analysis. Furthermore, it is essential to establish a comprehensive framework for developing malware detection systems. Alani et al. (2023) proposed a framework based on three critical criteria: (1) high accuracy, (2) lightweightness (i.e. minimal memory and processing resource requirements) and (3) explainability (as opposed to opaque, \u2018black box' approaches). Here, we argue that a fourth criteria\u2014adaptability to novel malware threats\u2014is indispensable, given the continuously evolving cyber-threat landscape. We thus designed a malware detection system incorporating all four aforementioned criteria. Our system was trained and tested on the CIC-MalMem-2022 dataset, with a focus on assessing its capacity to detect unseen obfuscated malware."}, {"title": "3. Methodology", "content": "3.1. Dataset\nThe CIC-Malmem-2022 dataset used in this study is a publicly available dataset introduced by Carrier et al. (2022). The dataset was created from memory dumps of recent real-life cyberattacks. It has a total of 58,596 records, evenly split between 29,298 benign and 29,298 malicious instances. Each instance consists of 55 features extracted from the single memory dump file using VolMemLyzer (Ahlashkari, 2022). Features include, for example, the number of running processes, the number of open dynamic-link libraries (DLLs), the average number of threads per process and the number of open files (for more detailed information about the features, refer to Table A.1 in Appendix). The dataset further classifies each malicious file by malware type (Ransomware, Spyware or Trojan Horse) and subtype (e.g., Zeus, Gator, Pysa, etc)."}, {"title": "3.2. Data modelling and evaluation metrics", "content": "3.2.1. Data pre-processing\nStandard procedures were employed to prepare the dataset for ML modelling, including the removal of invariant features, scaling numerical features and encoding categorical variables. The dataset did not contain any missing values.\n3.2.2. Evaluation criteria\nThe performance of the classifiers was examined using the following metrics: confusion matrix, accuracy, precision, recall and F-1 score. These performance metrics are defined below.\nConfusion matrix: A matrix that summarises the performance of a machine learning model on a set of test data. It provides a graphical display of the number of accurate and inaccurate model's predictions, broken down by class. In our binary classification problem, the confusion matrix is divided into four quadrants displaying the following metrics: True Positive (TP), True Negative (TN), False Positive (FP), and False Negative (FN), as described in Table 3."}, {"title": "Accuracy: The ratio of correctly classified instances divided by the total number of instances.", "content": "It is measured using the following equation:\nAccuracy = $\\frac{(TP+TN)}{(TP+FP+TN+FN)}$ (1)\nPrecision: The ratio of true positives divided by true positives and false positives:\nPrecision = $\\frac{TP}{TP+FP}$ (2)\nRecall (also known as sensitivity): The ratio of true positives divided by true positives and false negatives:\nRecall = $\\frac{TP}{TP+FN}$ (3)\nF1-Score: The harmonic means of precision and recall:\nF1-Score = 2x $\\frac{Precision\u00d7Recall}{Precision+Recall}$ (4)"}, {"title": "3.2.3. Random Forest and feature selection", "content": "Random Forest, an ensemble method that can be used for both classification and feature selection, is the main ML algorithm used in this study, following an earlier assessment of various ML algorithms. It works by constructing multiple decision trees during training and aggregating their predictions (Genuer et al., 2010). Each tree is trained on a bootstrap sample,"}, {"title": "3.3. Experimental methodology", "content": "The development process of our malware detection system can be divided into the following three stages as shown in Figure 1:\n1.  Development of a baseline classifier: Here, baseline performance results are obtained for the task of classifying benign versus malware. To achieve this, the original dataset is split into training (80%) and test (20%) sets. The original representations of the malware subtypes in the training and test samples are retained using stratification. After normalising the continuous features using min-max, seven classifiers are trained and tested on the processed dataset. The best-performing classifier is determined based on the F1 score. To validate the results, a stratified 10-fold cross-validation method is also used. All in all, this stage represents the traditional way of developing ML-based malware detection systems, where the model is trained and tested on the same malware (sub-)types.\n2.  Development of a comprehensive malware detection system: Once a baseline model for classifying malware and benign memory dumps has been established, we turn to the objective of building a comprehensive malware detection system that can detect new malware attacks. Furthermore, we want our system to also be highly accurate, interpretable and lightweight (in the sense that is fast and relies on a small number of features). To achieve this, 15 distinct models are built, each on a different malware subtype. The training data contains only 80% of malware instances from a specific malware subtype (e.g., 80% of Transponder instances) along with an equivalent randomly selected number of benign instances. The trained model is then tested on a holdout unseen dataset containing the remaining benign instances and all other malware"}, {"title": "4. Results", "content": "4.1. Assessing baseline classifier performance against known malware variants\nIn the first stage, seven classifiers\u2014 Random Forest (RF), Gradient Boosting, Decision Tree, K-Nearest Neighbours, Logistic Regression, Support Vector Machine and Naive Bayes\u2014were evaluated for binary malware detection. After removing constant features (pslist.nprocs64bit, handles.nport and svcscan.interactive_process_services), the remaining 52-feature dataset was randomly split into 80% training and 20% testing subsets. All subtypes of malware were included in the training dataset and subsequently tested, as in previous studies (see, for example, Alani et al., 2023; Dener et al., 2022; Mezina and Burget, 2022; and Shafin et al., 2023). The performance metrics, as detailed in Table 4, revealed that all seven classifiers were effective at detecting malware, with average accuracies surpassing 99.2%. Notably, RF achieved marginally higher accuracy compared to the other classifiers, and thus was selected as the best-performing classifier and subsequent experiments were based on it."}, {"title": "4.2. Development of an adaptive malware detection system", "content": "4.2.1. Model training\nHaving established the baseline performance results, we aimed to develop a malware detection system capable of detecting novel malware (sub-)types, while maintaining high accuracy, lightweightness and interpretability. Here, we sought to adopt a strategy that is radically different from what has been proposed previously in the literature. The objective in this second stage was to assess if models trained on a reduced dataset from one malware subtype can be used to identify emerging threats (i.e., be future-proof). We postulated that each malware subtype will exhibit distinct obfuscation traits, therefore leaving different signatures in memory, and as a result, will have different features' importance rankings.\nTo test this, 15 new models were trained, each on 80% of data from a specific malware subtype (e.g., 80% of Transponder instances), along with an equivalent randomly selected number of benign instances, as explained in Section 3.3. Following the approach of Alani et al. (2023) to make the models lightweight, only the top five features from the RF feature importance were used in the training and testing of each model (also our experiments show that increasing the number of features above five only marginally affect the model performance, as can be seen in Figure A.1). The results are presented in Table 5, which include the top five features of each malware subtype-based model, the average test accuracy of the model, as well as its size in memory."}, {"title": "4.2.2. Model explainability", "content": "Global interpretation\nOne of the aims of this study is to ensure that the model's performance is based on interpretable and explainable processes. In this study, the impact of each feature on the prediction of the model was further explored using SHAP values. Here, the SHAP values of each feature are calculated using the test dataset. Since training with the Transponder malware subtype produces the best model performance, we will base model interpretation on its respective model. Figure 3 illustrates a SHapley Additive exPlanations (SHAP) beeswarm plot of the top five features used by this model and tested on data containing other unseen malware subtypes. In this plot, features are represented vertically along the Y-axis and are ranked in the order of importance as determined by the SHAP analysis. SHAP values for a given dump file and feature are represented horizontally along the X-axis by coloured dots. A red dot represents a high feature value, while a blue dot represents a low feature value. If the value corresponding to a feature is on the left side of the X-axis, it suggests that the feature has a \u201cnegative\u201d drag on the prediction of that data instance, thereby pushing the prediction value towards \u2018benign' classification. On the contrary, if the value corresponding to a feature is on the right side of the X-axis, this means it has a \u201cpositive\u201d drag on the prediction, thereby pushing the prediction"}, {"title": "Local interpretation", "content": "To determine the contribution of each feature to the prediction for a given instance, the SHAP force plot can be used for local interpretation of each instance. The SHAP force plot offers an in-depth perspective of SHAP values for individual instances and can be used to identify the main features affecting the prediction and the magnitude of its contribution. Figure 4 illustrates the interpretation of SHAP force plot for one benign instance (panel a) and one (Pysa) malware instance (panel B). The model's decision is decomposed into the sum of the effects of each feature value. In the case of the benign instance (Figure 4A), svcscan.shared_process_service, svcscan.nservices and handles.avg_handles_per_proc play pivotal roles, as denoted by the size of the blue arrows, in influencing the model's likelihood of prediction towards benign classification. handles.nevent is the feature with the least influence for this memory dump instance. An identical feature influence pattern is observed for the instance featuring Pysa malware (Figure 4B), as indicated by the size of the red arrows."}, {"title": "5. General discussion", "content": "5.1. Summary of findings\nThe primary aim of this study was to develop not only a highly accurate, lightweight and interpretable machine learning-based system for detecting obfuscated malware (see, for example, Alani et al., 2023), but also one that can adapt to previously unknown malware"}, {"title": "5.2. Implications for cyber security defences", "content": "First, our identification of specific memory processes such as svcscan.nservices and svcscan.shared_process_service as primary targets across a wide range of malware subtypes, such as Transponder, Zeus and Gator, highlights a potential vulnerability within system architectures. Our findings indicate that these processes, which are critical to operating system service management, are often exploited by attackers aiming to manipulate or disrupt system functions covertly. Developing advanced malware detection systems that specifically guard these service-related processes could significantly mitigate risks posed by such targeted attacks.\nSecondly, the impressive generalisation capability of our model, particularly when trained on the Transponder subtype, to detect other malware variants points to another important advantage of integrating machine learning in cyber security defences\u2014adaptability. This adaptability feature is a clear differentiating advantage over signature-based or heuristic-based approaches, which require regular updates to address new threats (Al-Asli and Ghaleb, 2019). In our study, we integrated machine learning only with a memory analysis approach. It remains to be seen if the integration machine learning with static analysis could lead to the same adaptability advantage and could offer insights into malware's structural features without execution (Aslan and Samet, 2020). Such pursuit with all malware analysis approaches could result in a comprehensive detection framework that maximises the strengths of each analysis approach, fostering robust defence mechanisms against diverse malware types.\nFinally, the finding that some malware subtypes, particularly Transponder, exhibit superior generalisation for detecting unseen malware suggests that intrinsic characteristics of these malware\u2014such as its operational framework or attack strategies\u2014might play a crucial role in providing informative training data for the extraction of malware attack patterns generalisable across different malware variants (at least when memory-analysis is used). Our work highlights the need for cyber security experts to investigate why Transponder generalises better than other subtypes like Zeus, or at a broader scale, why the Spyware is more effective at detecting unseen malware compared to other types, such as Trojan horse or Ransomware (see Table 5)."}, {"title": "5.3. Limitations and future directions", "content": "While our study presents a robust proof-of-concept for an adaptive malware detection system, several limitations could be addressed to improve the system's effectiveness. Firstly, we did not perform hyperparameter tuning, instead opting for default hyperparameter settings for our"}, {"title": "5.4. Conclusion", "content": "In this paper, we have presented a novel machine learning-based system for detecting obfuscated malware. Trained on a small dataset from a single malware subtype\u2014 Transponder\u2014our system achieves state-of-the-art accuracy, while maintaining rapid processing speeds (5.7 \u00b5s per file) and minimal memory usage (a model size of 340 KB). These findings not only advance the state-of-the-art in malware detection, but also highlight the critical need for the testing and refinement of machine learning-based solutions for detecting previously unseen malware variants. This is crucial for ensuring that our defence solutions can respond to the continuously evolving landscape of cyber threats."}]}