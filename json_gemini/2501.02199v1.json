{"title": "CAN CHATGPT IMPLEMENT FINITE ELEMENT MODELS FOR GEOTECHNICAL ENGINEERING APPLICATIONS?", "authors": ["Taegu Kim", "Tae Sup Yun", "Hyoung Suk Suh"], "abstract": "This study assesses the capability of ChatGPT to generate finite element code for geotechnical engineering applications from a set of prompts. We tested three different initial boundary value problems using a hydro-mechanically coupled formulation for unsaturated soils, including the dissipation of excess pore water pressure through fluid mass diffusion in one-dimensional space, time-dependent differential settlement of a strip footing, and gravity-driven seepage. For each case, initial prompting involved providing ChatGPT with necessary information for finite element implementation, such as balance and constitutive equations, problem geometry, initial and boundary conditions, material properties, and spatiotemporal discretization and solution strategies. Any errors and unexpected results were further addressed through prompt augmentation processes until the ChatGPT-generated finite element code passed the verification/validation test. Our results demonstrate that ChatGPT required minimal code revisions when using the FEniCS finite element library, owing to its high-level interfaces that enable efficient programming. In contrast, the MATLAB code generated by ChatGPT necessitated extensive prompt augmentations and/or direct human intervention, as it involves a significant amount of low-level programming required for finite element analysis, such as constructing shape functions or assembling global matrices. Given that prompt engineering for this task requires an understanding of the mathematical formulation and numerical techniques, this study suggests that while a large language model may not yet replace human programmers, it can greatly assist in the implementation of numerical models.", "sections": [{"title": "1 Introduction", "content": "In a wide range of geotechnical engineering applications from traditional tasks such as slope stability analysis or foundation design to modern challenges like CO2 geological sequestration or nuclear waste disposal, accurate modeling of hydro-mechanical processes in unsaturated media is essential for reliable forward predictions [Matsui and San, 1992, Yazdchi et al., 1999, Hudson et al., 2005, Gens et al., 2010, Lei et al., 2015]. This requires a strong coupling between the solid skeleton and fluids within the pores, as the presence of pore fluids may induce excess pore pressures that introduce rate-dependence to the overall mechanical responses, while deformation of the solid matrix can alter the geometry and topology of the pore network, significantly influencing the fluid pressures and saturation ratios therein. At the continuum scale, this hydro-mechanical coupling can be understood within the context of mixture theory, where each phase is considered as a constituent of a continuum mixture [Rice and Cleary, 1976, Coussy et al., 1998]. While the mixture theory provides a theoretical foundation for developing balance equations for multi-phase bodies from first principles, the resulting partial differential equations are typically not solvable using classical analytical methods. This challenge has led to the development of various techniques designed to solve coupled problems numerically [De Boer, 1996, Zienkiewicz et al., 1999, Jeremi\u0107 et al., 2008, Chen, 2023].\nAlthough technically feasible, capturing the intricate interplay among different phase constituents is, nevertheless, not a trivial task. One possible strategy is to employ an operator splitting scheme, which solves either the (multi-phase) fluid flow or the mechanics problem first, and then updates the remaining solution variable(s) using the intermediate information [Prevost, 1997, Settari and Mounts, 1998, Minkoff et al., 2003, Suh and Sun, 2021a]. At a single time step, this procedure can be repeated iteratively until convergence is reached, or one may employ a staggered scheme without any iterations by treating the system of equations in a completely decoupled manner. The major upshot of this approach is that it can leverage existing simulation codes, only requiring the implementation of the interface between the two to ensure proper feedback and communication among the solvers. Adopting sequential schemes, however, is often limited by their inherent convergence issues and conditional stability, which can impact the overall reliability and robustness of the solution, particularly for strongly coupled systems [Li et al., 2003, Dean et al., 2006, Kim et al., 2011]. Another strategy is to use a monolithic scheme that requires a unified solver that updates solution variables simultaneously at each time step. In comparison to the sequential solution strategy, the monolithic approach offers unconditional stability and convergence in time, provided the Ladyzhenskaya-Babu\u0161ka-Brezzi (LBB) condition is satisfied [Babu\u0161ka, 1973, Brezzi et al., 1985, Bathe, 2001]. Common choices to meet stability requirements include adopting stabilization techniques that introduce additional terms to eliminate spurious modes [Pastor et al., 1999, Truty and Zimmermann, 2006, White and Borja, 2008], or using inf-sup stable finite element discretizations, such as Taylor-Hood or Raviart-Thomas elements [Murad and Loula, 1994, Borja et al., 1998, Barbeiro and Wheeler, 2010, Suh and Sun, 2021b]. However, the monolithic approach may involve substantial programming efforts, as stabilization techniques often lead to a modified variational formulation, while implementing LBB-stable elements requires specialized meshing and data structures to accommodate the different basis functions needed for the solution variables.\nAs an alternative, exploiting pre-trained large language models (LLMs)-deep learning models designed for natural language processing tasks-for numerical implementations has recently gained popularity as they demonstrated their capabilities in generating computer codes automatically from the provided set of natural language prompts [Barei\u00df et al., 2022, Buscemi, 2023, Chen et al., 2023, Hou et al., 2023, Gu et al., 2024]. For instance, Kashefi and Mukerji [2023] investigated the effectiveness of a pre-trained LLM in implementing numerical algorithms across different programming languages, and their study pointed out that the LLM may struggle or experience irregular interruptions, particularly when tasked with generating lengthy computer code scripts. Kim et al. [2024] demonstrated the feasibility of generating MATLAB codes for seepage analysis, slope stability assessments, and image segmentation by prompting the pre-trained LLM, but their investigation into numerically solving a partial differential equation was limited to the finite difference method. Orlando [2023] examined the finite element implementation capabilities of the LLM for single-field problems by utilizing finite element libraries, such as deal.ii [Bangerth et al., 2007] and FEniCS [Logg et al., 2012], and suggested that while the LLM can serve as an initial building block for finite element codes, it still requires human intervention and a solid understanding of the relevant domain knowledge. To address this issue, Ni and Buehler [2024] presented a multi-agent modeling framework that organizes collaborative teams of artificial intelligence agents for elasticity problems, enabling them to write, execute, and self-correct finite element codes. Regardless, to the best of the authors' knowledge, no attempts have been made to explore the LLM's capability for numerically solving (hydro-mechanically) coupled multi-field problems that require the implementation of mixed finite elements with a monolithic solution scheme.\nThe goal of this paper is to explore the applicability of the pre-trained LLMs for implementing monolithic finite element models to simulate hydro-mechanically coupled processes, as an attempt to alleviate the difficulties associated with numerical implementations. Among a vast number of LLMs available, we choose ChatGPT o1 from OpenAI for finite element code generation, as it is known to be the most popular and is the latest model as of the date of this publication, despite the fact that some LLMs (e.g., StarCoder [Li et al., 2023] or GitHub Copilot \u00b9) may outperform ChatGPT in this specific domain. In particular, this study explores how ChatGPT can be adopted to solve coupled initial boundary value problems (IBVPs) relevant to geotechnical engineering applications, particularly those related to stress-induced pore pressure dissipation and ground settlement. In the initial stage, information essential for the IBVP and finite element implementations is provided to ChatGPT for code generation. These information includes: (1) the strong form of the governing equation, (2) constitutive models, (3) domain geometry and material properties, (4) initial and boundary conditions, (5) spatiotemporal discretization, and (6) solution strategies. Then, we correct any identified errors or bugs by re-prompting ChatGPT with the initial error message generated from its output. This prompt augmentation process is repeated until the GPT-generated finite element model successfully passes the verification/validation test. By utilizing"}, {"title": "2 Hydro-mechanically coupled formulation for unsaturated soils", "content": "This section provides a brief overview of the hydro-mechanically coupled formulation for unsaturated soils considered in this work. We begin by outlining the continuum representation and necessary assumptions that form the basis for describing the motion of a three-phase porous medium within the framework of mixture theory (Section 2.1). We then summarize the balance laws for its mass and linear momentum (Section 2.2), followed by the material models for the phase constituents (Section 2.3) based on an important premise in continuum-scale poromechanics: all mechanical processes are driven by the effective stress. The formulation presented in this section will lay the foundations for the model problems that will be presented later in Section 3.1 of this study."}, {"title": "2.1 Continuum representation", "content": "In this work, we consider unsaturated soil as a homogenized continuum mixture consisting of a solid matrix (s) with continuous pores filled with water (w) and air (a) phases. This allows us to define the volume fractions of each phase constituent as,\n$\\phi^{s}=\\frac{dV_{s}}{dV}; \\phi^{w}=\\frac{dV_{w}}{dV}; \\phi^{a}=\\frac{dV_{a}}{dV},$ (1)\nwhere dV = dVs + dVw + dVa is the total elementary volume of the mixture, which gives $\\phi^{s} + \\phi^{w} + \\phi^{a} = 1$. We also define the saturation ratios of the in-pore phases (i.e., water and air) as,\n$S_{w}=\\frac{\\phi^{w}}{1-\\phi^{s}}; S_{a}=\\frac{\\phi^{a}}{1-\\phi^{s}},$ (2)\nsuch that $S_{w} + S_{a} = 1$. Further, by letting ps, pw, and pa denote the intrinsic mass densities of the solid, water, and air, respectively, the total mass density of the three-phase mixture \u03c1 can be defined as the sum of their partial densities (i.e., $\u03c1^{\u03b1} = \u03c6^{\u03b1}\u03c1_{\u03b1}$ for \u03b1 = {s, w, a}):\n$\\rho = \\rho^{s} + \\rho^{w} + \\rho^{a} = \\phi^{s}\\rho_{s} + \\phi^{w}\\rho_{w} + \\phi^{a}\\rho_{a} = \\phi^{s}\\rho_{s} + (1 - \\phi^{s})S_{w}\\rho_{w} + (1 - \\phi^{s})S_{a}\\rho_{a}.$ (3)\nTo arrive at the coupled formulation for unsaturated soils considered in this study, we make several assumptions at this stage. First, we restrict the deformation of the three-phase mixture to the geometrically linear and elastic regime. Second, we assume that the evolution of the geomaterial of interest can be described by the deformation of its solid skeleton, so that the motions of water and air phases can be described relative to that of the solid. Third, the intrinsic density of air is negligible (i.e., pa = 0) and its intrinsic pressure pa is assumed to be in equilibrium with atmospheric pressure, or pa = 0, such that there is no need to track the air phase."}, {"title": "2.2 Mass and momentum conservation laws", "content": "In the absence of mass exchanges among the constituents, mass balance equations for the solid and water phases can be written as,\n$\\dot{\\rho_{s}} + \\rho_{s} \\nabla \\cdot \\mathbf{v}_{s}=0,$ (4)\n$\\dot{\\rho_{w}} + \\rho_{w} \\nabla \\cdot \\mathbf{v}_{s}+\\nabla \\cdot (\\rho_{w}\\mathbf{\\tilde{v}}_{w})=0,$ (5)"}, {"title": "2.3 Constitutive equations", "content": "For unsaturated soils, a thermodynamically consistent Bishop-type effective stress \u03c3\u2032 may be written as [Borja, 2006, Nuth and Laloui, 2008, Borja and Koliji, 2009],\n$\\mathbf{\\sigma}^{\\prime}=\\mathbf{\\sigma} + \\left(1-\\frac{S_{w}K}{K_{s}}\\right)p\\mathbf{I},$ (16)\nwhere Ks is the bulk modulus of the skeletal structure formed by the solid phase, $p=S_{w}p_{w}+S_{a}p_{a}=S_{w}p_{w}$ is the pore pressure, and I is the second-order identity tensor. In this case, linear elastic mechanical responses of the solid skeleton can be described by the following stress-strain relation:\n$\\mathbf{\\sigma}^{\\prime}=\\lambda \\operatorname{tr}(\\mathbf{\\varepsilon}) \\mathbf{I}+2 \\mu \\mathbf{\\varepsilon}.$ (17)\nHere, \u03bb and \u03bc are the Lam\u00e9 constants of the solid skeleton, while $\u03b5 = (\u2207 us + \u2207\u00afus)/2$ is the infinitesimal strain tensor, the symmetric part of the gradient of the solid displacement us, where vs = \u00fas. The use of geometric linearity may further lead to the following relation for volumetric deformations [Suh and Sun, 2021a, Heider and Sun, 2020]:\n$\\dot{\\phi}^{s}=(1-\\dot{\\nabla} \\cdot \\mathbf{u}_{s}),$ (18)"}, {"title": "3 GPT-based finite element implementation", "content": "From the coupled formulation that we described previously, Section 3.1 presents three model problems considered in this work (more details can be found in Appendix A). In particular, we focus on specific IBVPs including the dissipation of pore water pressure via water mass diffusion, time-dependent differential settlement of a strip footing, and gravity-driven seepage, which are chosen to cover a range of simple to moderately complex problems relevant to geotechnical engineering applications. Then, Section 3.2 introduces the GPT-based finite element modeling framework, where we particularly focus on the prompt engineering strategies that leverage the automated programming capability of the pre-trained large language model. The finite element codes generated from the strategized prompts to solve the IBVPs numerically will be subjected to either verification or validation tests (Section 4), and our observations will also be discussed therein."}, {"title": "3.1 Model problems", "content": "To test the code generation capability of ChatGPT, this study considers three model problems that are derived from the coupled formulation summarized in Section 2. As summarized in Table 1, each model problem is designed to highlight different aspects of hydro-mechanically coupled soil behavior under varying conditions, ranging from simple to moderately complex scenarios, in terms of finite element implementation. Further, to maintain consistency with previous studies (e.g., [Suh and Sun, 2021a, White et al., 2016, Na and Sun, 2017, Suh et al., 2024]) and for notational convenience, the following symbols or letters will be reserved for the model problems:\n$u=\\mathbf{u}_{s}; \\mathbf{w}=\\mathbf{\\omega}_{w}; \\phi=1-\\phi^{s}; B=1-\\frac{K}{K_{s}}; M=\\left(\\frac{(B-\\phi)}{K_{s}}+\\frac{\\phi}{K_{w}}\\right)^{-1}; c_{v}=\\frac{k}{\\mu_{w}},$ (22)\nsuch that \u03c6 indicates the porosity, B the Biot's coefficient, M the Biot's modulus, and cv the coefficient of consolidation [Biot, 1941, Terzaghi, 1943].\nModel Problem (1) is the simplest among the problems considered in this work, which focuses on a fully saturated soil composed of incompressible phase constituents. In this case, the effective stress principle in Eq. (16), along with the linear elastic assumption in Eq. (17), enables us to express the volumetric strain rate of the solid skeleton tr (\u1f72) in terms of the rate of change of pore water pressure pw. As outlined in Appendix A.1, by limiting our attention to the volumetric deformation of the soil body, this integration allows us to simplify the coupled formulation into a single partial differential equation that considers pw as the prime variable, eliminating the need for a mixed finite element implementation. If we further limit the flow of pore water in the direction of loading only and neglect the gravitational effects, the governing partial differential equation reduces to a form identical to Terzaghi's 1D consolidation equation [Terzaghi, 1943]. From this simplified 1D mathematical model, we assign ChatGPT the task of writing a finite element code that can simulate the dissipation of excess pore water pressure over time in a meter-long soil column, as exemplified in Figure 1(a). Specifically, while prescribing an initial pore water pressure pwo = 100 kPa, we replicate a single-drained condition by imposing zero pore water pressure (pw = 0) at the top and a no-slip condition (w = 0) at the bottom."}, {"title": "3.2 GPT-based finite element modeling framework", "content": "The ChatGPT-based finite element implementation strategy we use consists of three steps: initial prompting, prompt augmentation, and direct human involvement, indicated by dashed boxes in Figure 2. The initial prompting involves providing ChatGPT with essential information regarding the target IBVP and the corresponding solution strategy, while specifying the programming environment it should rely on. Then, we correct any errors or bugs in the initial code script generated by ChatGPT through a prompt augmentation process, using the error messages that appeared during execution. This ChatGPT-based debugging process is repeated until the finite element code passes the verification/validation tests. If the errors remain unresolved after several iterations, it indicates that direct intervention is required to fix the issues, which necessitates human programming efforts. The detailed procedure of the GPT-based finite element modeling framework (Figure 2) is described in the following.\nInitial prompting. Firstly, we provide an initial prompt to task ChatGPT with implementing the finite element model using a specified programming environment. Key information that should be included in the prompt includes: (1) governing equation(s), (2) constitutive model(s), (3) domain geometry and material properties, (4) initial and boundary conditions, (5) spatiotemporal discretization, and (6) solution strategies. In particular, we provide the governing equations only in strong form, while the details on spatiotemporal discretization and solution strategies given to ChatGPT involve the type and size of the finite element, the time step size, the type of solver, and the time integration scheme. This specific setting has two purposes: one is to test whether ChatGPT can infer the weak form or the Galerkin form from the corresponding strong form, and the other is to introduce an implementation strategy targeted at users who are familiar with partial differential equations in their strong form but not necessarily with the variational formulations. After ChatGPT produces the initial code script from the given information, we execute the code to determine if any debugging is needed.\nPrompt augmentation. If the finite element code generated from the initial prompt does not execute properly or generates inaccurate results, we then leverage ChatGPT's debugging capabilities via a series of prompt augmentation processes. This can be achieved by providing additional prompts that include either the error messages produced by the GPT-generated finite element code or the debugging instructions given by the user. This process is repeated iteratively until the code runs without any issues and yields results that are reasonably accurate. It should be noted that diagnosing errors may require an understanding of the formulation or the finite element method; however, this prompt augmentation process can eliminate the need for extensive programming efforts, while enabling users to explore the limits of ChatGPT's debugging capabilities.\nDirect human involvement. This final step is necessary only if ChatGPT fails to resolve all issues after several iterations of the prompt augmentation (e.g., after 10 attempts). At this stage, we require direct human involvement in programming, following the same logic we apply to ChatGPT-based debugging. Nonetheless, this may demand less human effort than developing the finite element model manually from scratch, as the GPT-generated code can still serve as a useful starting point."}, {"title": "4 Verification and validation exercises", "content": "This section presents the numerical results derived from GPT-generated codes for the model problems summarized in Section 3.1 and discusses the hydro-mechanically coupled finite element modeling capabilities of ChatGPT. Since the IBVPs considered herein have benchmark solutions or experimental results as counterparts, these problems serve as verification or validation exercises for the GPT-based finite element implementation framework. Specifically, we consider two different types of programming environments to test ChatGPT's adaptability: FEniCS and MATLAB, each having different levels of programming interfaces. As FEniCS offers advanced features such as the automatic evaluation of variational forms and the automated assembly of linear systems, it provides a high-level programming interface that simplifies scripting in Python. On the other hand, although MATLAB offers a wide range of pre-defined linear algebra tools and data structures, its functionality specific to finite element analysis is mostly low-level, requiring users to implement the building blocks of finite elements, from defining shape functions to assembling global matrices."}, {"title": "4.1 Dissipation of excess pore water pressure via fluid mass diffusion", "content": "To generate a finite element code for solving Model Problem (1), we instructed ChatGPT to spatially discretize the geometry shown in Figure 1(a) using 1D linear elements with a size of Az = 0.02 m, and to use a time step size of\n\u2206t = 1 hour over a duration from to = 0 to tf = 80 hours, without providing any specific solution strategies. The only material property required for this simulation is the coefficient of consolidation, which was specified as cv = 0.016 m\u00b2/hr. Additionally, we asked ChatGPT to include a code block that generates the pore water pressure plots along the depth at t = 5, 10, 20, 40, and 80 hours.\nFollowing the procedure outlined in Section 3.2, the finite element implementation begins by providing ChatGPT with an initial prompt (Figure 7), after which the generated code is revised through prompt augmentations for up to 10 iterations, until the code successfully passes the verification test. Similar to the previous exercise, this process was repeated 30 times in both the MATLAB and FEniCS environments to assess ChatGPT's capability in generating mixed finite element code based on the programming interfaces used. Figure 8 summarizes the number of additional prompts (Naug) required in each case to successfully pass the verification test. In all 30 instances involving MATLAB, the results indicate that ChatGPT mostly fails to produce fully operational mixed finite element code, even after 10 rounds of prompt augmentations, demonstrating a consistent need for direct human intervention to address errors. Each GPT-MATLAB code script comprised over 300 lines, reflecting the inherent complexity associated with implementing mixed finite element models in this environment. This was primarily due to MATLAB's lack of features specifically designed for finite element analysis, which requires extensive low-level programming efforts, complicating the coding process and increasing the likelihood of errors. In contrast, the use of the FEniCS environment resulted in a marked enhancement of ChatGPT's performance. The FEniCS code generated by ChatGPT typically comprised fewer than 100 lines, demonstrating a prominent reduction in complexity compared to the GPT-MATLAB outputs. Moreover, GPT- FEniCS was able to pass verification tests with substantially fewer iterations, often achieving error-free codes within 6"}, {"title": "4.2 Time-dependent differential settlement of a strip footing", "content": "As Model Problem (2) involves two balance equations, two constitutive models, and a vast number of material properties, the initial prompt needed to guide ChatGPT in implementing the corresponding mixed finite element code is inevitably longer than that for the previous example, as illustrated in Figure 7. For this model problem, we instructed ChatGPT\nto discretize the domain geometry [Figure 1(b)] using a square-shaped, LBB-stable Taylor-Hood finite element with\n\u2206x = \u2206y = 0.02 m and to implement a time step size of \u2206t = 1 second over the duration from to = 0 to tf = 80 seconds. Furthermore, we explicitly directed ChatGPT to utilize an implicit backward Euler method to avoid the situation where it employs a time integration scheme that is only conditionally stable, while also asking it to generate a plot that shows the y-directional displacement of the top surface at t = 20, 40, and 80 seconds."}, {"title": "4.3 Gravity-driven seepage", "content": "Based on the previous observations, this section focuses on generating a mixed finite element code for numerically solving Model Problem (3), solely relying on the FEniCS environment. As shown in Figure 11, we directed ChatGPT to spatially discretize the geometry depicted in Figure 1(c) using a Taylor-Hood finite element with \u2206x = \u2206y = 0.02 m and to employ a time step size of\n\u2206t = 1 minute for the simulation, covering the time interval from to = 0 to tf = 600 minutes. Similar to the previous exercise, we also instructed ChatGPT to solve the system monolithically while utilizing the backward Euler time integration scheme. Furthermore, we directed ChatGPT to generate a plot displaying the pore water pressure profile along the central axis (i.e., pw-y plot) at t = 5, 10, 20, 30, and 600 minutes, as well as a plot illustrating the average y-directional Darcy's velocity at the bottom surface over time (i.e., wy-t plot). Since this IBVP closely resembles the physical experiment conducted by Liakopoulos [1964], the material parameters for the numerical simulation were chosen to align with the properties of the Del Monte sand as characterized their work, such that the simulation results can be compared with their measurements as a benchmark."}, {"title": "5 Discussion and conclusion", "content": "This study investigated the capability of ChatGPT to generate (mixed) finite element code for solving hydro-mechanically coupled problems relevent to geotechnical engineering applications. We explored three model problems: one- dimensional consolidation, differential settlement of a footing, and gravity-driven unsaturated flow, utilizing both MATLAB and FEniCS programming environments. Our implementation strategy aimed to determine whether ChatGPT could produce reliable finite element code with minimal human intervention.\nThe findings indicate that ChatGPT can effectively generate complex mixed finite element codes when leveraging high-level programming interfaces, such as FEniCS. This capability is attributed to its inherent high-level abstraction and built-in functionalities, which significantly simplify the coding process. In contrast, when tasked with producing finite element code in the MATLAB environment, the GPT-generated code scripts often required extensive prompt augmentations and direct human involvement. This highlights the varying efficiencies of different programming environments and suggests that the choice of platform may significantly impact the success of automated finite element code generation.\nDespite these promising results, the involvement of domain experts remains essential, particularly in diagnosing errors and instructing ChatGPT with necessary corrections. For complex problems, the limitations of LLMs become evident, as they may struggle to navigate intricate programming tasks without specified guidance. This dependence on human expertise emphasizes the need for collaborative approaches, where LLMs serve as assistive tools that complement the theoretical knowledge and practical experience of the users.\nWe believe that the proposed approach and the insights gained from this study can help remove technical or psychological barriers for readers interested in utilizing LLMs for finite element implementations. By highlighting the potential and limitations of the GPT-based finite element models, we aim to empower users to effectively integrate LLMs into their workflows.\nIn conclusion, while this study suggests that general-purpose LLMs like ChatGPT cannot yet fully replace human efforts in specialized domains, they can enhance efficiency in coupled finite element analysis. Effective utilization of these models may necessitate a synergistic approach, combining the capabilities of LLMs with the expertise of practitioners or researchers. As advancements in LLM technology continue, and as more sophisticated utilization strategies are developed, the gap between automated finite element code generation and expert-level programming is likely to narrow, paving the way for more integrated and efficient solutions in the field. Future research should focus on improving LLM training in specialized areas and exploring how these models can be better tailored to meet the specific needs of engineering applications."}, {"title": "Appendix A Governing equations for model problems", "content": ""}, {"title": "A.1 Model Problem (1)", "content": "The first model problem considered in this work assumes that the body of interest BC R\u00b3 consists of incompressible phase constituents and is fully saturated with water, i.e., K\u2083 = Kw \u2248 \u221e and Sw = 1. From these assumptions and by utilizing \u00a2\u00ba + q = 0, the summation of Eqs. (4) and (5) reduces the mass balance equations into the form identical to that seen in Borja and Alarc\u00f3n [1995]:\nV\u00fa + \u2207 w = 0. (A1)\nIf we further neglect the gravitational effects (i.e., g = 0), substituting Eq. (19) into Eq. (A1) and utilizing V\u00b7 \u00fa = tr (s) yields:\ntr (i) =\nk\\mu_{w} -\u22072\u03c1\u03c9, (A2)\nwhere \u22072 (0) = \u2207 \u00b7 \u25bd(0) indicates the Laplacian operator. As Eq. (16) reduces into \u03c3' = \u03c3 + pwI in this case, notice that tr (\u03c3') = 3pw under a constant total stress. This indicates that, from Eq. (17), the volumetric strain rate of the solid skeleton and the pore water pressure can be related as,\ntr (i) =\n1\\3\u03bb + 2\u03bc\n1\ntr (\u03c3') = Pw, (A3)\nsince K = x + 2\u03bc/3. By substituting Eq. (A3) into Eq. (A2), the two-phase problem reduces to a single-phase problem for the pore water pressure field pw as:\n\u03c1\u03c9 = \u03b5\u03c5\u22072 \u03c1\u03c9\u00b7 (A4)\nIf we limit our attention to one-dimensional space (i.e., B C R\u00b9), we arrive at the governing differential equation for the first model problem:\n\u03a1\u03c9\n=\nCv\u03c1\u03b8\u03c9\ndz2(A5)\nwhich is the basic differential equation of Terzaghi's consolidation theory [Terzaghi, 1943]. In this 1D setting, the boundary conditions can be specified as,\n\u03a1\u03c9 = \u03b2w on d\u03b2\u03c1;\n\u03ba\u03c1\u03b8\u03c9\n\u03bc\u03c9\u03b8\u03b1= w on \u0392\u03c9, (A6)\nwhere pw and \u0175 are the prescribed pore water pressure and Darcy's velocity on the Dirichlet (dB) and Neumann (dB) boundaries, respectively, that satisfy dB = DBp U dBw and \u00d8 = dBp \u2229 dBw. For model closure, the initial condition can be imposed as,\n\u03a1\u03c9 = \u03a1\u03c9\u03bf, (A7)\nat time t = 0. Then, by following the standard weighted-residual procedure, the weak form of Eq. (A5) can be obtained by multiplying it with a test function & and integrating over B:\n\u03be\u03c1\u03c9dz +\u2202\u0432\u03be\u2202\u03c1\u03c9dz +\nCv\u0432dzdz\n\u03be\u03ba\u03ce = 0. (A8)"}, {"title": "A.2 Model Problem (2)", "content": "Model Problem (2) focuses on a body of water-saturated soil B C R\u00b3 where the solid and fluid phases are intrinsically compressible. This leads to the simplified effective stress equation: \u03c3 = \u03c3' \u2013 BpwI, such that balance of linear momentum [i.e., Eq. (15)] for a given saturated soil can be written as,\n\u25bd\u00b7 (\u03c3' \u2013 \u0392\u03c1\u03c9\u2160) + pg 0, (A9)"}]}