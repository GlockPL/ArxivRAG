{"title": "ENZYMEFLOW: GENERATING REACTION-SPECIFIC ENZYME CATALYTIC POCKETS THROUGH FLOW MATCHING AND CO-EVOLUTIONARY DYNAMICS", "authors": ["Chenqing Hua", "Yong Liu", "Dinghuai Zhang", "Odin Zhang", "Sitao Luan", "Kevin K. Yang", "Guy Wolf", "Doina Precup", "Shuangjia Zheng"], "abstract": "Enzyme design is a critical area in biotechnology, with applications ranging from drug development to synthetic biology. Traditional methods for enzyme function prediction or protein binding pocket design often fall short in capturing the dynamic and complex nature of enzyme-substrate interactions, particularly in catalytic processes. To address the challenges, we introduce EnzymeFlow, a generative model that employs flow matching with hierarchical pre-training and enzyme-reaction co-evolution to generate catalytic pockets for specific substrates and catalytic reactions. Additionally, we introduce a large-scale, curated, and validated dataset of enzyme-reaction pairs, specifically designed for the catalytic pocket generation task, comprising a total of 328, 192 pairs. By incorporating evolutionary dynamics and reaction-specific adaptations, EnzymeFlow becomes a powerful model for designing enzyme pockets, which is capable of catalyzing a wide range of biochemical reactions. Experiments on the new dataset demonstrate the model's effectiveness in designing high-quality, functional enzyme catalytic pockets, paving the way for advancements in enzyme engineering and synthetic biology.", "sections": [{"title": "1 INTRODUCTION", "content": "Proteins are fundamental to life, participating in many essential interactions for biological processes (Whitford, 2013). Among proteins, enzymes stand out as a specialized class that serves as catalysts, driving and regulating nearly all chemical reactions and metabolic pathways across living organisms, from simple bacteria to complex mammals (Kraut, 1988; Murakami et al., 1996; Copeland, 2023) (visualized in Fig. 1). Their catalytic power is central to biological functions, enabling the efficient production of complex organic molecules in biosynthesis (Ferrer et al., 2008; Liu & Wang, 2007) and the creation of novel biological pathways in synthetic biology (Girvan & Munro, 2016; Keasling, 2010; Hodgman & Jewett, 2012). Examining enzyme functions across the tree of life deepens our understanding of the evolutionary processes that shape metabolic networks and enable organisms to adapt to their environments (Jensen, 1976; Glasner et al., 2006; Campbell et al., 2016; Pinto et al., 2022). Consequently, studying enzyme-substrate interactions is essential for comprehending biological processes and designing effective products.\nTraditional methods have primarily focused on enzyme function prediction, annotation (Gligorijevi\u0107 et al., 2021; Yu et al., 2023), or enzyme-reaction retrieval (Mikhael et al., 2024; Hua et al., 2024b; Yang et al., 2024). These approaches lack the ability to design new enzymes that catalyze specific biological processes. Recent studies suggest that current function prediction models struggle to generalize to unseen enzyme reaction data (de Crecy-Lagard et al., 2024; Kroll et al., 2023a), limiting their utility in enzyme design. To effectively design enzymes, it is crucial not only to predict protein functions but also to identify and generate enzyme catalytic pockets specific to particular substrates, thereby enabling potentially valuable biological processes."}, {"title": "2 RELATED WORK", "content": "2.1 PROTEIN EVOLUTION\nProtein evolution learns how proteins change over time through processes such as mutation, selection, and genetic drift (P\u00e1l et al., 2006; Bloom & Arnold, 2009), which influence protein functions. Studies on protein evolution focus on understanding the molecular mechanisms driving changes in protein sequences and structures. Zuckerkandl & Pauling (1965) introduce the concept of the molecular clock, which postulates that proteins evolve at a relatively constant rate over time, providing a framework for estimating divergence times between species. DePristo et al. (2005) show that evolutionary rates are influenced by functional constraints, with regions critical to protein function (e.g., active sites, binding interfaces) evolving more slowly due to purifying selection. This understanding leads to the development of methods for detecting functionally important residues based on evolutionary conservation. Understanding protein evolution has practical applications in protein engineering. By studying how natural proteins evolve to acquire new functions, researchers design synthetic proteins with desired properties (Xia & Levitt, 2004; J\u00e4ckel et al., 2008). Additionally, deep learning models increasingly integrate evolutionary principles to predict protein function and stability, design novel enzymes, and guide protein engineering (Yang et al., 2019; AlQuraishi, 2019; Jumper et al., 2021).\n2.2 GENERATIVE MODELS FOR PROTEIN AND POCKET DESIGN\nRecent advancements in generative models have advanced the field of protein design and binding pocket design, enabling the creation of proteins or binding pockets with desired properties and functions (Yim et al., 2023a;b; Chu et al., 2024; Hua et al., 2024a; Abramson et al., 2024). For example,"}, {"title": "3 ENZYMEFILL: LARGE-SCALE ENZYME POCKET-REACTION DATASET", "content": "A key limitation of current datasets, such as ESP (Kroll et al., 2023b), EnzymeMap (Heid et al., 2023), CARE (Yang et al., 2024), or ReactZyme (Hua et al., 2024b), is the lack of precise pocket information. These datasets typically provide enzyme-reaction data, including protein sequences and SMILES representations, which is used to predict EC numbers in practice. To address it, we introduce a new synthetic dataset, EnzymeFill, which includes precise pocket structures with substrate conformations. EnzymeFill is specifically introduced for enzyme catalytic pocket design.\nData Source. We construct a curated and validated dataset of enzyme-reaction pairs by collecting data from the Rhea (Bansal et al., 2022), MetaCyc (Caspi et al., 2020), and Brenda (Schomburg et al., 2002) databases. For enzymes in these databases, we exclude entries missing UniProt IDs or protein sequences. For reactions, we apply the following procedures: (1) remove cofactors, small ion groups, and molecules that appear in both substrates and products within a single reaction; (2) exclude reactions with more than five substrates or products; and (3) apply OpenBabel (O'Boyle et al., 2011) to standardize canonical SMILES. Ultimately, we obatin a total of 328, 192 enzyme-reaction pairs, comprising 145, 782 unique enzymes and 17, 868 unique reactions; we name it EnzymeFill.\nCatalytic Pocket with AlphaFill. We identify all enzyme catalytic pockets using AlphaFill (Hekkelman et al., 2023), an AF-based algorithm that uses sequence and structure similarity to transplant ligand molecules from experimentally determined structures to predicted protein models. We download the AlphaFold structures for all enzymes and apply AlphaFill to extract the enzyme pockets. Simultaneously, we determine the reaction center by using atom-atom mapping of the reactions. During the pocket extraction process, AlphaFill first identifies homologous proteins of the target enzyme in the PDB-REDO database, along with their complexes with ligands (van Beusekom et al., 2018). It then transplants the ligands from the homologous protein complexes to the target enzyme"}, {"title": "4 ENZYMEFLOW", "content": "We introduce EnzymeFlow, a flow matching model with hierarchical pre-training and enzyme-reaction co-evolution to generate enzyme catalytic pockets for specific substrates and catalytic reactions. We demonstrate the pipeline in Fig. 3, discuss the EnzymeFlow with co-evolutionary dynamics in Sec. 4.1, further introduce the structure-based hierarchical pre-training for generalizability in Sec. 4.2\n4.1 ENZYME CATALYTIC POCKET GENERATION WITH FLOW MATCHING\nEnzymeFlow on Catalytic Pocket. Following Yim et al. (2023a), we refer to the protein structure as the backbone atomic coordinates of each residue. A pocket with number of residues $N_r$ can be parameterized into SE(3) residue frames ${\\{(x^i, r^i, c^i)\\}_{i=1}^{N_r}}$, where $x^i \\in \\mathbb{R}^3$ represents the position (translation) of the $C_\\alpha$ atom of the i-th residue, $r^i \\in SO(3)$ is a rotation matrix defining the local frame relative to a global reference frame, and $c^i \\in \\{1, ..., 20\\} \\cup \\{X\\}$ denotes the amino acid type, with an additional \u00d7 indicating a masking state of the amino acid type. We refer to the residue block as $T_i = (x^i, r^i, c^i)$, and the entire pocket is described by a set of residues $T = \\{T_i\\}_{i=1}^{N_r}$. Additionally, we denote the graph representations of substrate and product molecules in the catalytic reaction as $l_s$ and $l_p$, respectively. An enzyme-reaction pair can therefore be described as $(T, l_s, l_p)$.\nFollowing flow matching literature (Yim et al., 2023a; Campbell et al., 2024), we use time t = 1 to denote the source data. The conditional flow on the enzyme catalytic pocket $p_t(T_t|T_1)$ for a time"}, {"title": "4.1.1 ENZYMEFLOW WITH ENZYME-REACTION CO-EVOLUTION", "content": "Enzyme (protein) evolution refers to the process by which enzyme structures and functions change over time due to genetic variations, such as mutations, duplications, and recombinations. These changes can lead to alterations in amino acids, potentially affecting the enzyme structure, function, stability, and interactions (P\u00e1l et al., 2006; Sikosek & Chan, 2014). Reaction evolution, on the other hand, refers to the process by which chemical reactions or substrates, particularly those catalyzed by enzymes, change and diversify within biological systems over time (illustrated in Fig. 3(3)(d)).\nCo-Evolutionary Dynamics. Enzymes can co-evolve with the metabolic or biochemical pathways they are part of, adapting to changes in substrate availability, the introduction of new reaction steps, or the need for more efficient flux through the pathway. As pathways evolve, enzymes within them may develop new catalytic functions or refine existing ones to better accommodate these changes (Noda-Garcia et al., 2018). This process frequently involves the co-evolution of enzymes and their substrates. As substrates change\u2014whether due to the introduction of new compounds in the environment or"}, {"title": "4.2 STRUCTURE-BASED HIERARCHICAL PRE-TRAINING", "content": "In addition to the standard EnzymeFlow for enzyme pocket design, we propose a hierarchical pre-training strategy to enhance the generalizability of the model across different enzyme categories. The term hierarchical pre-training is used because the approach first involves training the flow model to"}, {"title": "5 EXPERIMENT GENERATING CATALYTIC POCKET CONDITIONED ON REACTIONS AND SUBSTRATES", "content": "EnzymeFlow is essentially a function-based protein design model, where the intended function is defined by the reaction the enzyme will catalyze. Here, we demonstrate that EnzymeFlow"}, {"title": "6 LIMITATION AND FUTURE WORK", "content": "EnzymeFlow addresses key challenges in designing enzyme catalytic pockets for specific reactions, but several limitations remain. The first limitation is that EnzymeFlow currently generates only the catalytic pocket residues, rather than the entire enzyme structure. Ideally, the catalytic pocket should be designed first, followed by the design or reconstruction of the full enzyme structure based on the pocket. While we are developing to use ESM3 (Hayes et al., 2024) to reconstruct the full enzyme structure based on the designed catalytic pocket (discussed in App. I), this is not the most ideal"}, {"title": "6.1 ONGOING WORK AND BROADER IMPACT", "content": "We introduce EnzymeFlow ongoing work in App. A and I. Furthermore, we discuss the scope of EnzymeFlow from structure-based to function-based protein design in greater depth in App. B."}, {"title": "A FUTURE WORK IN PROGRESS: AI-DRIVEN ENZYME DESIGN PLATFORM", "content": "As discussed in Sec. 6, there are several limitations in the current version of EnzymeFlow. Here, we briefly outline the next steps and improvements we are actively working on for the upcoming version. Currently, EnzymeFlow generates only catalytic pocket residues rather than full enzyme structures. Ideally, the catalytic pocket should be designed first, followed by the reconstruction of the full enzyme structure based on the pocket. While we currently use ESM3 (Hayes et al., 2024) for this reconstruction, this approach is not ideal. Fine-tuning ESM3 or RFDiffusionAA (Krishna et al., 2024) would be preferable, but unfortunately, training scripts for these wonderful models are not provided, making it impossible to directly fine-tune them on our EnzymeFill dataset.\nTo address this, we are borrowing concepts from Wang et al. (2021) and Lin et al. (2024), which focuses on inpainting proteins and scaffolding functional motifs. We are working to integrate this concept into EnzymeFlow's pipeline, as part of our primary design. Our goal is to develop an end-to-end automated AI-driven enzyme discovery system that works as follows:\n\u2022 1. Catalytic Pocket Design: The system will first design enzyme catalytic pockets.\n\u2022 2. Scaffolding Functional Motifs: Next, it will scaffold the functional motifs to generate full enzyme structures.\n\u2022 3. Substrate Docking: Using methods like DiffDock (Corso et al., 2022), DynamicBind (Lu et al., 2024), or fine-tuned Chai (Chai, 2024) on EnzymeFill, the system will bind substrates to the catalytic pockets.\n\u2022 4. Inverse Folding: The enzyme-substrate complex will undergo inverse folding using LigandMPNN (Dauparas et al., 2023).\n\u2022 5. Computational Screening: Finally, the system will perform computational screening to select the best-generated enzymes.\nThis entire process is being developed into an integrated, end-to-end solution for AI-driven enzyme design. We are very excited about the potential of this project and look forward to achieving a fully automated enzyme design system in the near future."}, {"title": "B OPEN DISCUSSION: WHY IS SUBSTRATE/REACTION-SPECIFIED ENZYME DESIGN NEEDED?", "content": "EnzymeFlow is unique in its leading approach to function-based de novo protein design. Currently, most protein design models, whether focused on backbone generation (Yim et al., 2023a;b; Bose et al., 2023; Campbell et al., 2024; Krishna et al., 2024) or pocket design (Zhang et al., 2023b;a; 2024e;d), are structure-based. These models aim to design or modify proteins to achieve a specific 3D structure, prioritizing stability, folding, and molecular interactions. The design process typically involves optimizing a protein structure to minimize energy and achieve a stable structural conformation (Khoury et al., 2014; Pelay-Gimeno et al., 2015).\nIn contrast, function-based protein design focuses on creating proteins that perform specific bio-chemical tasks, such as catalysis, signaling, or even binding (Martin et al., 1998; Thornton et al., 1999). These models are driven by the need for proteins to carry out particular functions rather than adopt a specific 3D structure. Function-based design often targets the active site or binding pockets, optimizing them for specific molecular interactions\u2014in our case, the enzyme's catalytic pockets.\nOur philosophy is that protein function determines its structure, meaning that a protein folds into a specific 3D shape to achieve its intended function, and the resulting structure can then be translated into a proper sequence-essentially, protein function \u2192 protein structure \u2192 protein sequence. EnzymeFlow follows this philosophy. Specifically, the function of an enzyme is determined by its ability to catalyze a specific reaction or interact with a specific substrate. Therefore, our enzyme pocket design process begins with the reaction or substrate in mind, incorporating reaction/substrate specificity into the generation process. The reaction or substrate represents the functional target for the generated enzyme pockets.\nIn this approach, EnzymeFlow generates enzyme pocket structures specified for the desired protein function, which contrasts with current generative methods that prioritize structure first. These existing"}, {"title": "C EXTENDED RELATED WORK - MORE DISCUSSION", "content": "C.1 PROTEIN REPRESENTATION LEARNING\nGraph representation learning emerges as a potent strategy for representing and learning about proteins and molecules, focusing on structured, non-Euclidean data (Satorras et al., 2021; Luan et al., 2020; 2022; Hua et al., 2022a;b; Luan et al., 2024b;a). In this context, proteins and molecules can be effectively modeled as 2D graphs or 3D point clouds, where nodes correspond to individual atoms or residues, and edges represent interactions between them (Gligorijevi\u0107 et al., 2021; Zhang et al., 2022; Hua et al., 2023; Zhang et al., 2024a). Indeed, representing proteins and molecules as graphs or point clouds offers a valuable approach for gaining insights into and learning the fundamental geometric and chemical mechanisms governing protein-ligand interactions. This representation allows for a more comprehensive exploration of the intricate relationships and structural features within protein-ligand structures (Tubiana et al., 2022; Isert et al., 2023; Zhang et al., 2024b).\nC.2 PROTEIN FUNCTION ANNOTATION\nProtein function prediction aims to determine the biological role of a protein based on its sequence, structure, or other features. It is a crucial task in bioinformatics, often leveraging databases such as Gene Ontology (GO), Enzyme Commission (EC) numbers, and KEGG Orthology (KO) annotations (Bairoch, 2000; Consortium, 2004; Mao et al., 2005). Traditional methods like BLAST, PSI-BLAST, and eggNOG infer function by comparing sequence alignments and similarities (Altschul et al., 1990; 1997; Huerta-Cepas et al., 2019). Recently, deep learning has introduced more advanced approaches for protein function prediction (Ryu et al., 2019; Kulmanov & Hoehndorf, 2020; Bonetta & Valentino, 2020). There are two major types of function prediction models, one uses only protein sequence as their input, while the other also uses experimentally-determined or predicted protein structure as input. Typically, these methods predict EC or GO annotations to approximate protein functions, rather than describing the exact catalyzed reaction, which is a limitation of these approaches.\nC.3 PROTEIN EVOLUTION\nPlease refer to Sec. 2.1.\nC.4 GENERATIVE MODELS FOR PROTEIN AND POCKET DESIGN\nPlease refer to Sec. 2.2."}, {"title": "D CO-EVOLUTIONARY MSA TRANSFORMER", "content": "Co-evolution captures the dynamic relationship between an enzyme and its substrate during a catalytic reaction. AlphaFold2 (Jumper et al., 2021) has demonstrated the critical importance of leveraging protein evolution, specifically through multiple sequence alignments (MSA) across protein sequences, to enhance a model's generalizability and expressive power. Previous works, such as MSA Transformer (Rao et al., 2021) and EvoFormer (Jumper et al., 2021), have focused on encoding and learning protein evolution from MSA results. Proper co-evolution encodings of enzymes and reactions are essential for capturing the dynamic changes that occur during catalytic processes, not only in our EnzymeFlow model but in other models as well.\nD.1 CO-EVOLUTION VOCABULARY\nWe provide our co-evolution dictionary for tokenization and encoding following:\nD.2 coEVOFORMER IMPLEMENTATION\nHere, we introduce a new co-evolutionary MSA transformer, coEvoFormer. For details of enzyme-reaction co-evolution, please refer to Sec 4.1.1."}, {"title": "E MOLECULE GNN", "content": "E.1 3D MOLECULE GNN\nThe 3D molecule GNN plays a crucial role in EnzymeFlow. During the structure-based hierarchical pre-training, it encodes ligand molecule representations, learning the constrained geometry between protein binding pockets and ligand molecules. This pre-training process makes the 3D molecule GNN transferable. When the flow model is fine-tuned, the 3D molecule GNN is also fine-tuned, transferring its prior knowledge about ligand molecules to substrate molecules in enzyme-catalyzed reactions. This allows for substrate-specific encodings while leveraging the knowledge learned from protein-ligand interactions.\nConsider a molecule $l_s$ with $N_l$ atoms; this could be a ligand conformation in a protein-ligand pair or a substrate conformation in an enzyme-substrate pair. The molecule $l_s$ can be viewed as a set of atomic point clouds in 3D Euclidean space, where each atom is characterized by its atomic type. There is a distance relationship between each atom pair in the point cloud, which can be processed as bonding features. In our 3D molecule GNN, we use a radial basis function to process these pairwise atomic distances, a technique commonly employed to ensure equivariance and invariance in model design (Hua et al., 2023; Zhang et al., 2024a;b). The 3D molecule GNN takes a molecule"}, {"title": "F VECTOR FIELD COMPUTATION AND SAMPLING", "content": "Here, we describe how to compute vectors fields and perform sampling for catalytic pocket residues frames, EC-class, as well as the enzyme-reaction co-evolution.\nF.1 BACKGROUND\nCatalytic Pocket Frame. Please refer to Sec. 4.1.\nEC-Class. Please refer to Sec. 4.1.\nCo-evolution. Please refer to Sec. 4.1.1.\nVector Field. Flow matching describes a process where a flow transforms a simple distribution $p_0$ into the target data distribution $p_1$ (Lipman et al., 2022). The goal in flow matching is to train a neural network $v_\\theta(\\epsilon_t, t)$ that approximates the vector field $u_t(\\epsilon)$, which measures the transformation of the distribution $p_t(\\epsilon_t)$ as it evolves toward $p_1(\\epsilon_t)$ over time $t \\in [0, 1)$. The process is optimized using a regression loss defined as $L_{FM} = E_{\\epsilon_t \\sim p_t(\\epsilon_t)}||v_\\theta(\\epsilon_t, t) - u_t(\\epsilon)||^2$. However, directly computing $u_t(\\epsilon)$ is often intractable in practice. Instead, a conditional vector field $U_t(\\epsilon|\\epsilon_1)$ is defined, and the conditional flow matching objective is computed as $L_{CFM} = E_{\\epsilon_t \\sim p_t(\\epsilon_t)}||v_\\theta(\\epsilon_t, t) - U_t(\\epsilon|\\epsilon_1)||^2$. Notably, $L_{FM} = L_{CFM}$.\nDuring inference or sampling, an ODEsolver, e.g., Euler method, is typically used to solve the ODE governing the flow, expressed as $\\epsilon_1 = ODEsolver(\\epsilon_0, v_\\theta, 0, 1)$, where $\\epsilon_0$ is the initial data and $\\epsilon_1$ is the generated data. In actual training, rather than directly predicting the vector fields, it is more common to use the neural network to predict the final state at t = 1, then interpolates to calculate the vector fields. This approach has been shown to be more efficient and effective for network optimization (Yim et al., 2023a; Bose et al., 2023; Campbell et al., 2024).\nF.2 CONTINUOUS VARIABLE TRAJECTORY\nGiven the predictions for translation $x_1$ and rotation $r_1$ at t = 1, we interpolate and their corresponding vector fields are computed as follows:\n$v_\\theta(x_t, t) = \\frac{x_1 - x_t}{1 - t}, v_\\theta(r_t, t) = \\frac{log r_t 1}{1 - t}$\n(9)\nThe sampling or trajectory can then be computed using Euler steps with a step size $ \\Delta t$, as follows:\n$x_{t + \\Delta t} = x_t + v_\\theta(x_t, t) \\cdot \\Delta t, r_{t + \\Delta t} = r_t + v_\\theta(r_t, t) \\cdot \\Delta t,$\n(10)\nwhere the prior of $x_0, r_0$ are chosen as the uniform distribution on $R^3$ and SO(3), respectively.\nF.3 DISCRETE VARIABLE TRAJECTORY\nFor the discrete variables, including amino acid types, EC-class, and co-evolution, we follow Camp-bell et al. (2024) to use continuous time Markov chains (CTMC).\nContinuous Time Markov Chain. A sequence trajectory $\\epsilon_t$ over time $t \\in [0, 1]$ that follows a CTMC alternates between resting in its current state and periodically jumping to another randomly chosen state. The frequency and destination of the jumps are determined by the rate matrix $R_t \\in R^{N \\times N}$ with the constraint its off-diagonal elements are non-negative. The probability of $\\epsilon_t$ jumping to a different state s follows $R_t(\\epsilon_t, s)dt$ for the next infinitesimal time step dt. We can express the transition probability as\n$P_{t + dt}(s|\\epsilon_t) = \\delta\\{\\epsilon_t, s\\} + R_t(\\epsilon_t, s)dt,$\n(11)\nwhere $\\delta(a, b)$ is the Kronecker delta, equal to 1 if a = b and 0 if a \u2260 b, and $R_t(\\epsilon_t,\\epsilon_t) = - \\sum_{\\gamma\\in (\\epsilon_t, \\gamma)}$ (Campbell et al., 2024). Therefore, $P_{t + dt}$ is a Categorical distribution with probabili-ties $\\delta(\\epsilon_t, \u00b7) + R_t(\\epsilon_t, \u00b7)dt$ with notation $s \\sim Cat(\\delta(\\epsilon_t, s) + R_t(\\epsilon_t, s)dt)$.\nFor finite time intervals $ \\Delta t$, a sequence trajectory can be simulated with Euler steps following:\n$\\epsilon_{t + \\Delta t} \\sim Cat(\\delta(\\epsilon_t, \\epsilon_{t + \\Delta t}) + R_t(\\epsilon_t, \\epsilon_{t + \\Delta t})\\Delta t)$.\n(12)\nThe rate matrix $R_t$, along with an initial distribution $p_0$ define CTMC. Furthermore, the probability flow $p_t$ is the marginal distribution of $e_t$ at every time t, and we say the rate matrix $R_t$ generates $p_t$ if $d_t p_t = R p_t, t \\in [0, 1]$."}, {"title": "G ENZYMEFLOW SE(3)-EQUIVARIANCE", "content": "Theorem. Let $\\phi$ denote an SE(3) transformation. The catalytic pocket design in EnzymeFlow, represented as $p_\\theta(T|l_s)$, is SE(3)-equivariant, meaning that $p_\\theta(\\phi(T)|\\phi(l_s)) = p_\\theta(T|l_s)$, where T represents the generated catalytic pocket, and $l_s$ denotes the substrate conformation.\nProof. Given an SE(3)-invariant prior, such that $p(T_0, l_s) = p(\\phi(T_0), \\phi(l_s))$, and an SE(3)-equivariant transition state for each time step t via an SE(3)-equivariant neural network, such that $p_\\theta (T_{n \\Delta t + \\Delta t}, l_s) = p_\\theta(\\phi(T_{n \\Delta t + \\Delta t}), \\phi(l_s))$, it follows that for the total time steps T, we have:\n$P_\\theta(\\phi(T_1)|\\phi(l_s)) = \\int p_\\theta(\\phi(T_0), \\phi(l_s)) \\prod_{n=0}^{T-1} p_\\theta((\\phi(T_{n \\Delta t + \\Delta t}), \\phi(l_s))|(\\phi(T_{n \\Delta t}), \\phi(l_s)))$,\n$= \\int p_\\theta(T_0, l_s) \\prod_{n=0}^{T-1} p_\\theta((T_{n \\Delta t + \\Delta t}), l_s)|(T_{n \\Delta t}, l_s))$\n= $P_\\theta(T_1|l_s)$.\n(19)"}]}