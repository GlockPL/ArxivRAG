{"title": "Encoding Reusable Multi-Robot Planning Strategies as Abstract Hypergraphs", "authors": ["Khen Elimelech", "James Motes", "Marco Morales", "Nancy M. Amato", "Moshe Y. Vardi", "Lydia E. Kavraki"], "abstract": "Multi-Robot Task Planning (MR-TP) is the search\nfor a discrete-action plan a team of robots should take to com-\nplete a task. The complexity of such problems scales exponen-\ntially with the number of robots and task complexity, making\nthem challenging for online solution. To accelerate MR-TP over\na system's lifetime, this work looks at combining two recent\nadvances: (i) Decomposable State Space Hypergraph (DaSH),\na novel hypergraph-based framework to efficiently model and\nsolve MR-TP problems; and (ii) learning-by-abstraction, a\ntechnique that enables automatic extraction of generalizable\nplanning strategies from individual planning experiences for\nlater reuse. Specifically, we wish to extend this strategy-learning\ntechnique, originally designed for single-robot planning, to\nbenefit multi-robot planning using hypergraph-based MR-TP.", "sections": [{"title": "I. INTRODUCTION", "content": "In recent times, multi-robot systems (MRS) have been\nrapidly integrated into real-world applications, enhancing\nthroughput and enabling the completion of complex tasks\nthrough inter-robot cooperation. Enabling this cooperation\nrequires efficient Multi-Robot Task Planning (MR-TP).\nUnfortunately, solutions to such planning problems suffer\nfrom prohibitively large search spaces, which often scale\nexponentially with the number of robots and task complexity.\nAddressing this computational challenge, recent work in-\ntroduced the Decomposable State Space Hypergraph (DaSH)\nframework [1], which succinctly models and searches the\nMR-TP space using hypergraphs. Instead of searching for\na trajectory in the composite state space, the hypergraph\nseparates the problem into independent entities, including the\nrobots and manipulable objects, and captures the changes\nin (in)dependence of entity compositions due to action\napplication throughout the solution process (see Fig. 1).\nWhile this work focuses on task planning, DaSH is generally\nable to account for both task and motion constraints. This\nmodel often produces a much more concise representation\nof the search space, resulting in faster planning times.\nNevertheless, even with this hypergraph-based represen-\ntation, solving MR-TP problems remains challenging, espe-\ncially when the number of robots or manipulable objects is\nlarge, or when the complexity of the multi-robot interactions\nrequired for a solution is high. Finding new techniques to\nimprove the scalability of solution for MR-TP problems is\nthus an important standing challenge."}, {"title": "II. PROBLEM DEFINITION", "content": "Thus far, strategy extraction was only considered for\nsingle-robot planning, where the solution trajectory is\ndepicted as a path in a conventional planning graph in the\nrobot state space. According to that approach, upon solution\nof a planning problem, one can identify a sequence of\ncritical states from the solution trajectory, referred to as a\nRoad Map (RM), which can then be abstracted (\u201clifted\"),\nto yield an Abstract Road Map (ARM)\u2014a sequence of\nabstract states representing a generalizable planning-strategy.\""}, {"title": "III. APPROACH", "content": "Next, we discuss how the solution abstraction and reuse\nprocedures can be adapted to hypergraph-based MR-TP."}, {"title": "A. Step I: solution abstraction", "content": "Since in [1], MR-TP solutions are encoded as hypergraphs,\nrather than linear trajectories, an abstract MR-planning-\nstrategy should be encoded as an Abstract Hypergraph (AH),\nrather than an ARM. Further, in single-robot planning, a\nrobot was implicitly modeled in all states of the solution\ntrajectory, as every action was always assumed to be pre-\nformed by one robot, sequentially. Now, in MR-TP, robots\nare explicitly modeled in the solution hypergraph, as actions\nmay be performed in parallel by different robots, or even\nrequire multiple robots to coordinate the performance of a\nsingle action. Thus, we suggest now to also consider the\nnotion of abstracting away all explicit robot entities from\nthe hypergraph, resulting in an AH that implicitly models an\nabstract robot in every node."}, {"title": "B. Step II: generalization and reuse", "content": "To reuse the AH, we should, as before, reconstruct it,\ni.e., grounding some of the abstracted information with\nproblem-specific details, and refining it, i.e., resolving each\nabstract hyperarc (replacing it with intermediate nodes and\nhyperarcs), to create a valid hyperpath, which connects all\ncritical nodes in the proper order. In this process, the abstract\nrobot that is implicitly modeled in each critical node may be\ngrounded into any subset of robots (including the null set).\nBy such, the AH formulation allows us to generalize a\nlearned planning strategy to a variety of new problems,\nincluding problems with different robot-reachability con-\nstraints, numbers of robots, robot carrying capacity, etc.."}]}