{"title": "FastDDS-Based Middleware System for Remote X-Ray Image Classification Using Raspberry Pi", "authors": ["Omar H. Khater", "Basem Almadani", "Farouq Aliyu"], "abstract": "Internet of Things (IoT) based healthcare systems offer significant potential for improving the delivery of health-care services in humanitarian engineering, providing essential healthcare services to millions of underserved people in remote areas worldwide. However, these areas have poor network infrastructure, making communications difficult for traditional IoT. This paper presents a real-time chest X-ray classification system for hospitals in remote areas using FastDDS real-time middleware, offering reliable real-time communication. We fine-tuned a ResNet50 neural network to an accuracy of 88.61%, a precision of 88.76%, and a recall of 88.49%. Our system results mark an average throughput of 3.2 KB/s and an average latency of 65 ms. The proposed system demonstrates how middleware-based systems can assist doctors in remote locations.", "sections": [{"title": "I. INTRODUCTION", "content": "The global population is rising rapidly, but the number of medical staff has not increased proportionally to accommodate this growth. It causes strain on the healthcare system. A few years ago, the COVID-19 pandemic strained the world's healthcare systems. The world at that time realized the importance of increasing the number of medical staff, especially chest doctors. Also, what happened highlights the importance of developing a fully automated system that can help chest doctors in the diagnosis process and accelerate the process.\nRecent vision-based deep learning models have proved their efficiency in analyzing medical images, capturing the critical features from X-ray images, and predicting chest dis-eases such as COVID-19 [1]. Convolutional Neural Networks (CNNs) have proven reliable in the diagnosis process [2]. ResNet50 proved its ability to classify the X-ray images. It can learn complex features and capture patterns due to its skip connections that allow training of deep network layers [3]. Additionally, avoid the vanishing gradient through the residual connections.\nMiddleware is a crucial component of modern distributed computing and data management, serving as an intermediary layer that connects the operating systems and the applications. It provides a standard interface that smoothly integrates the various system components. We chose FastDDS in this paper because of its scalability and high performance [4]. Addition-ally, FastDDS offers reliable, low-latency data transfer, which is very important in real-time communication. Moreover, it is open-source, compliant with the DDS standard, and applicable across different platforms [5]."}, {"title": "II. LITERATURE REVIEW", "content": "In order to handle the growing complexity of real-time communication and data processing across a variety of fields, including distributed systems, robotics, and healthcare, mid-dleware technologies have developed. Depending on their design and intended purpose, these technologies provide differ-ent trade-offs in terms of performance, scalability, simplicity, and real-time assurances. We can determine the advantages and disadvantages of each strategy by contrasting different middleware solutions to see how they each handle these issues differently.\nSnout, created to make interacting with software-defined radios (SDR) easier, is one of the most straightforward yet effective middleware systems [6]. Snout was created with the intention of simplifying the process of dealing with SDRs by offering a simplified framework that needs little technical knowledge. Because of its architecture, which reduces memory utilization and CPU overhead, it is the perfect choice for real-time applications in settings with limited resources, such as embedded systems or tiny networked devices. However, Snout's simplicity has drawbacks: it lacks scalability in big-ger, dispersed contexts where traffic needs may exceed its capacity and concentrate mostly on local management. More reliable middleware solutions, such as DDS (Data Distribution Service), which were created from the bottom up to manage the challenges of real-time data transmission across dispersed systems, contrast sharply with this lack of scalability.\nFastDDS, CycloneDDS, RTI Connext, and OpenDDS are examples of DDS middleware designed for situations where distributed real-time communication is essential. These sys-tems are better suited for large-scale applications like industrial control systems or driverless cars since they are excellent at handling data across several nodes. According to Bode et al., [4], FastDDS and CycloneDDS provide a solid basis for real-time distributed systems by offering reduced latency and packet delay variation in comparison to previous DDS implementations. In contrast to Snout, which is best suited for localized, low-overhead operations, DDS middleware can scale over big networks. However, because they rely on components like the Linux network stack, which is not tuned for real-time performance, even the best-performing DDS middlewares have trouble providing firm real-time assurances. This highlights a significant trade-off: DDS middlewares like FastDDS and CycloneDDS add more complexity but are more appropriate for demanding distributed applications. Snout offers simplicity and efficiency for small-scale use.\nResearchers have looked into integrating user-space net-working technologies like XDP (Express Data Path) and DPDK (Data Plane Development Kit) to improve the per-formance of DDS middleware in order to get beyond the real-time performance limits. Bode et al. [7] showed in their study that CycloneDDS, in conjunction with DPDK, greatly lowers latency and boosts throughput, resolving some of the real-time issues with conventional DDS implementations. CycloneDDS and DPDK operate together to reduce mean latency by up to 31%, which makes it an attractive option for high-performance, networked real-time systems like large-scale robotic systems or high-frequency trading. However, DPDK's technical complexity, which includes setup difficulties and driver installations, reduces its applicability in settings that call for simple deployments. This is a noticeable difference from Snout, which provides a reduced barrier to entry and ease of setup despite its scaling constraints, especially for smaller applications that do not need the intensive performance improvements offered by DPDK.\nSystems that require connecting real-time and non-real-time components, such as military applications where Combat Man-agement Systems (CMS) must interface with Command and Control (C2) systems, exhibit an additional layer of middle-ware complexity. Dalk\u0131ran et al. [8] examined the JMS-DDS hybrid technique, which combines DDS with Java Message Service (JMS) to provide smooth communication between real-time and non-real-time systems. This combination offers a special benefit: JMS enables the flexibility of asynchronous messaging for jobs that don't require real-time communication, while DDS guarantees real-time communication. This makes it possible to integrate complicated systems without sacrificing real-time guarantees, which is crucial for military applications where coordination and speed are vital. However, there are certain drawbacks to this integration, most notably its depen-dence on the Java environment, which may limit the solution's versatility in more general contexts. JMS-DDS is more suited for hybrid real-time systems than FastDDS and CycloneDDS, which are more platform-neutral but do not provide the same degree of integration with non-real-time components.\nMiddleware is essential to robotics because it allows sys-tems to manage many hardware platforms and procedures while operating precisely in real-time. Laurenzi et al. [9] characterize XBot2 as being particularly made for multi-threaded robotic systems. Compared to traditional middleware like ROS (Robot Operating System), which has weak real-time guarantees and has trouble with intra-process communication, it offers real-time performance and modularity, making it more appropriate for real-time robotic applications. In robotics, XBot2 has a distinct advantage over more straightforward options like Snout thanks to its hardware abstraction layer (HAL) and ability to control many devices dynamically and in real-time. While DDS alternatives like FastDDS offer cross-platform compatibility, making them more adaptable for usage across a variety of distributed real-time applications, XBot2's reliance on Linux-based platforms presents a difficulty for wider applicability. Despite its superiority in high-performance robotics, XBot2's limited mobility outside of Linux contexts restricts its application in dispersed or heterogeneous systems.\nAnother important role of middleware, especially in wireless communication systems, is to control real-time data transfer over unstable networks. Applications like automated valet parking frequently run in settings where network instability and packet loss are major issues. In order to overcome this, Peeck et al. [10] improved DDS middleware by implementing a retransmission strategy that ranks crucial data according to its temporal significance. This offers a benefit that con-ventional protocols like TCP and UDP cannot match: it guarantees that time-sensitive data is transmitted consistently, even in lossy network conditions. Although FastDDS and other DDS methods provide dependable network communication, in extremely unstable networks, their performance may still decrease, requiring such improvements. The trade-off between simplicity and the capacity to manage complicated network settings is further highlighted by the fact that simpler systems, such as Snout, are unequipped to meet the demands of large-scale, dispersed communication or the retransmission of crucial data.\nAnother area where progress is being made is middleware's cloud interoperability. Bharany et al. [11] introduced .NET Core-based middleware, which was created to enhance ap-plication portability across cloud platforms such as Amazon Web Services (AWS), Microsoft Azure, and Google Cloud. Applications may more easily move across cloud providers without requiring major rewrites thanks to this middleware, which isolates cloud-specific APIs. However, middleware such as FastDDS lacks the integrated cloud-specific capabilities necessary for smooth interoperability across various cloud environments. Instead, it concentrates on offering scalable, low-latency options for distributed systems. In contrast, Snout does not support cloud-based systems and is mostly concerned with local control. The different scopes of these middleware solutions are reflected in this distinction; DDS middlewares prioritize performance in distributed, high-performance ap-plications, whereas cloud-focused middlewares provide more flexibility in multi-cloud situations. When the operational scope includes different cloud environments, where ease of migration and integration is crucial, the comparison demon-strates how middleware solutions vary.\nIn the healthcare industry, middleware is extremely essen-tial, particularly for enabling real-time medical diagnostics. Research by Karaddi and Sharma [12], and Alshmrani et al. [13] demonstrated the application of deep learning models for the classification of lung diseases using chest X-ray (CXR) images. Middleware that can handle the quick and dependable flow of medical data between devices and processing systems is necessary for these real-time classification jobs. Real-time decision-making in medical settings is made possible by FastDDS's low-latency communication characteristics, which make it ideal for these kinds of applications. While Snout works well for real-time, small-scale operations, it lacks the scalability and data-handling capabilities needed for big healthcare applications where accuracy and speed are crucial. The significance of real-time middleware in the healthcare industry is shown by middleware such as FastDDS, which guarantees prompt and accurate diagnosis by enabling rapid data flow between medical imaging devices and neural net-works. This comparison also demonstrates how middleware such as FastDDS performs very well in dispersed settings where patient outcomes depend on the prompt transfer of large amounts of medical data.\nIt is evident from an in-depth investigation of prior re-search on middleware solutions that several platforms, in-cluding Snout, DDS (FastDDS, CycloneDDS), and special-ized systems like JMS-DDS and XBot2, each have unique benefits and drawbacks. Snout is really good at being simple. However, it isn't scalable enough for big dispersed systems. DDS middleware solutions, on the other hand, struggle with latency optimization and real-time assurances, especially when depending on non-real-time system components like the Linux network stack. Still, they provide the scalability and speed required for high-demand systems. Furthermore, middleware solutions like JMS-DDS facilitate the integration of real-time and non-real-time systems; nevertheless, their wider flexibility is limited by platform requirements, such as their dependence on Java.\nFour major restrictions and research gaps so become ap-parent: i) Scalability problems, especially with smaller, more straightforward systems like Snout; ii) Real-time Guarantees, since even high-performance middleware like DDS finds it dif-ficult to meet stringent real-time requirements; iii) Latency Op-timization, which necessitates extra improvements like DPDK to improve performance in networked environments; and iv) the requirement for middleware that effectively supports high-performance deep learning model classifiers, especially in the healthcare industry, where precise and quick data transfer between medical devices and AI models is essential. For middleware technology to advance and better serve high-performance, scalable, and real-time applications, these gaps must be filled.\nIn this work, we are focusing on addressing the reliability and scalability issues from the middleware concern. Regarding the vision-based deep learning model, we are interested in high precision because if the model incorrectly identifies a diseased patient as healthy, it may lead to serious consequences."}, {"title": "III. METHODOLOGY", "content": "The deployed scenario for the proposed system consists of the doctor node, which will be responsible for publishing the X-ray image to the FastDDS and subscribing to the result. On the other side, the inference node is responsible for subscribing to the X-ray image from FastDDS, running the C++ inference script, then generating the result and publishing it to the FastDDS. Finally, the FastDDS middleware is committed to transmitting the data between the publisher and the subscriber in the proposed system."}, {"title": "B. Proposed system", "content": "The proposed system comprises two main components: hardware and software. Firstly, the hardware is Raspberry Pi, which we use to deploy our system. On the other hand, the software components contain a C++ script, which is called from the inference node, which is the subscriber, in that case, to generate the diagnosis result from the received X-ray image from the doctor node, which is the publisher. The Fast DDS middleware is responsible for data transfer between the doctor node and the inference node."}, {"title": "IV. EXPERIMENTAL SETUP", "content": "The experiment setup for the proposed system contains several hardware configuration details used in the FastDDS setup on Raspberry Pi with the Linux operating system, and the RAM size is 4 GB. The dataset [14] [15] was used to fine-tune the ResNet50 for chest disease classification problems. The hardware utilized compromises NVIDIA GeForce RTX 3080 Ti with 16 GB memory, and the RAM size is 32 GB. The dataset used involves 21,269 X-ray images with four classes. The chosen dataset in this work contains X-ray images of cases of COVID-19, lung opacity, viral Pneumonia, and pneumonia chest. It was acquired from Kaggle, an open-source online resource. The datasets consist of a total of 21,269 labeled X-ray images, of which 3,617 are COVID-19, 10,193 are normal chest, 6,013 are lung opacity, and 1,346 are Viral Pneumonia. The selected dataset was split into 80% for training, 10% for validation, and 10% for testing."}, {"title": "V. RESULTS AND DISCUSSIONS", "content": "After the fine-tuning of the ResNet50 on the X-ray images dataset, the ResNet50 showed superior performance, achieving an accuracy of 88.61%, a precision of 88.76%, and a recall of 88.49%, which is expected to be very beneficial for the med-ical staff and accelerate the diagnosis process. \nThe total latency was determined based on precise calcu-lations. We analyzed the transmission latency starting from publishing the X-ray image from the doctor's node through the FastDDS reaching the inference node, also the inference time, and ending with the inference node publishing the result through the FastDDS and reaching back the doctor's node, with an average latency of 65 ms. The whole transmission data was around 185 packets. The latency pattern provides an extremely valuable insight into the operational characteristics of the communication between the doctor node and the inference node. The throughput computations assess the publishing and subscribing processes is around 3,200 bytes/second.\nBased on our results, our system proved the effectiveness of ResNet50 in X-ray image classification and FastDDS, which offers real-time data transmission with very high reliability and scalability."}, {"title": "VI. CONCLUSION AND FUTURE WORK", "content": "This work investigated the integration between the vision-based deep learning models and middleware technology to generate a system capable of assisting the medical staff in chest disease classification. The ResNet50 showed superior performance with the X-ray images because it contained residual connections to prevent vanishing gradient, and its efficiency in feature extraction made it the suitable choice for the classification task. Additionally, the FastDDS middleware is presenting outstanding performance in terms of reliability and scalability concerns. The ResNet50 model achieved an accuracy of 88.61%, a precision of 88.76%, and a recall of 88.49%. Moreover, the results mark an average throughput of 3,200 bytes/second and an average latency of 65 ms.\nIn the future, the research should focus on enhancing scalability and handling different sizes of images while main-taining real-time performance. Additionally, with scalability, the system must be secured against attacks, so we suggest adding encryption techniques and authentication in the data transfer process. Also, extend and add more nodes to offer fault tolerance, allow load-balancing, and make sure that the system will perform efficiently under different scenarios."}]}