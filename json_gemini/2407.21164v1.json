{"title": "Extending choice assessments to choice functions: An algorithm for computing the natural extension", "authors": ["Arne Decadt", "Alexander Erreygers", "Jasper De Bock"], "abstract": "We study how to infer new choices from prior choices using the framework of choice functions, a unifying mathematical framework for decision-making based on sets of preference orders. In particular, we define the natural (most conservative) extension of a given choice assessment to a coherent choice function\u2014whenever possible\u2014and use this natural extension to make new choices. We provide a practical algorithm for computing this natural extension and various ways to improve scalability. Finally, we test these algorithms for different types of choice assessments.", "sections": [{"title": "1. Introduction", "content": "In classical probability theory, decisions are typically made by maximising expected utility. This leads to a single optimal decision, or a set of optimal decisions all of which are equivalent. In the theory of imprecise probabilities, where multiple probabilistic models are considered simultaneously, this decision rule can be generalised in multiple ways; Troffaes [1] provides a nice overview. A typical feature of the resulting decision rules is that they will not always yield a single optimal decision, as a decision that is optimal in one probability model may for example be suboptimal in another.\nWe here take this generalisation yet another step further by adopting the theory of choice functions: a mathematical framework for decision-making that incorporates several (imprecise) decision rules as special cases, including the classical approach of maximising expected utility [2, 3, 4]. An important feature of this framework of choice functions is that it allows one to impose axioms directly on the decisions that are represented by such a choice function [3, 4, 5]. We here adopt the coherence axioms that were put forward by De Bock and De Cooman [3]. We do not use these axioms directly though, but instead consider an alternative definition of coherence that is based on sets of preference orders and show that it is equivalent.\nAs we will explain and demonstrate in this contribution, we can use these coherent choice function to infer new choices from previous choices. In particular, for any given assessment of previous choices that is compatible with coherence, we will achieve this by introducing the so-called natural extension of this assessment: the unique most conservative coherent choice function that is compatible with the assessment.\nWe start in Section 2 with an introduction to choice functions and coherence. Section 3 then first defines choice assessments, their consistency and their natural extension, and then goes on to reformulate these concepts in terms of coherent sets of desirable options. Next, in Section 4, we show how this reduces the problems of checking the consistency of an assessment and computing its natural extension to something that we can solve practically and algorithmically. The running time of the algorithm depends rather heavily on the size of the assessment that is provided though. To reduce this running time, Sections 5 and 6 present several methods that can be used to replace an assessment by an equivalent object that contains the same"}, {"title": "2. Choice functions", "content": "A choice function C is a function that, when applied to a set of options, may reject one or more-but not all options from that set. The options that are not rejected are then said to be 'chosen'. Usually the options are actions that have a corresponding reward. This reward furthermore depends on the state of an unknown uncertain-variable X that takes values in a set X. We will assume that the rewards can be represented by real numbers, on a real-valued utility scale. In this setting, an option u is thus a function from states x in X to R. We will denote the set of all possible options by $\\mathcal{V} \\subseteq \\mathbb{R}^X$ and require that this forms a real vector space with pointwise vector addition and scalar multiplication. Bounded options are sometimes also called gambles in the literature. Moreover, we endow $\\mathcal{V}$ with the partial order $\\leq$: for all $u, v \\in \\mathcal{V}$, $u \\leq v$ if and only if $u(x) \\leq v(x)$ for all $x \\in X$; $<$ is the corresponding strict version, so $u < v$ if $u \\leq v$ and $u \\neq v$. We also let $2^{\\mathcal{V}}$ denote the power set of $\\mathcal{V}$. To make all of this more tangible, we consider the following toy problem as a running example.\nRunning Example 2.1. A farming company cultivates tomatoes and they have obtained a large order from a foreign client. However, due to government regulations they are not sure whether they can deliver this order. So the state space X is {order can be delivered, order cannot be delivered}. The company now has multiple options to distribute their workforce. They can fully prepare the order, partially prepare the order or not prepare the order at all. Since X only has two elements, we can identify the options with vectors in $R^2$. We will let the first component of these vectors correspond to the reward if the order can be delivered. For example, the option of fully preparing the order could correspond to the vector $v_1 := (5, -3)$: if the order goes through, then the company receives a payment or utility of 5 for that order; however, if the order does not go through, the company \"receives\" a negative reward -3, reflecting the large amount of resources that they spent on an order that could not be delivered in the end.\nFiniteness of sets will be important throughout this paper, and we therefore introduce the symbol $\\in_f$ to mean that a set is a non-empty finite subset. A first example is that we will restrict ourselves to choices from finite sets of options. That is, the domain of our choice functions will be $2_{\\mathcal{V}}^f := \\{A: A \\in_f \\mathcal{V}\\}$, the set of all finite subsets of $\\mathcal{V}$ excluding the empty set. We also let $2_{\\mathcal{V}}^0 := 2_{\\mathcal{V}}^f \\cup \\{\\emptyset\\}$. Formally, a choice function is then any function $C: 2_{\\mathcal{V}}^f \\rightarrow 2_{\\mathcal{V}}^0$ such that $C(A) \\subseteq A$ for all $A \\in 2_{\\mathcal{V}}^f$. We will also consider the corresponding rejection function $R_C: 2_{\\mathcal{V}}^f \\rightarrow 2_{\\mathcal{V}}^0$: $A \\mapsto A \\setminus C(A)$.\nWe will give the following interpretation to these choice functions. For every set $A \\in 2_{\\mathcal{V}}^f$ and option $u \\in A$, we take $u \\in C(A)$-u is 'chosen'-to mean that there is no other option in A that is preferred to u. Equivalently, $u \\in R_C(A)$-u is rejected from A-if there is an option in A that is preferred to u.\nRunning Example 2.2. We will let the choice function C correspond to choices that the strategic advisor of the company makes or would make for a given set of options, where these choices can be multivalued whenever he does not single out a unique best option. Suppose for example that he has rejected $v_3$ and $v_4$ from a set $A_1 := \\{v_1, v_2, v_3, v_4\\}$, with $v_1 := (5, -3), v_2 := (3, -2), v_3 := (1,-1)$, and $v_4 := (-2,1)$, but remains undecided about whether to choose $v_1$ or $v_2$. This corresponds to the statement $C(A_1) = \\{v_1, v_2\\}$, or equivalently, $R_C(A_1) = \\{v_3, v_4\\}$.\nDe Bock and De Cooman [3] define coherent choice functions by imposing properties for rationality on the corresponding rejection functions. An example of such a property is their axiom R4, which is analogous"}, {"title": "3. Consistency and the natural extension of a choice assessment", "content": "Now that we are familiar with choice functions, we move on to the topic of this paper: how to extend a partial choice assessment to a coherent choice function. In this endeavour, we consider a decision-maker and assume that there is some coherent choice function C that represents her preferences. However, we (or she) may not fully know this function. Our partial information about C comes in the form of preferences regarding some so not necessarily all option sets. In particular, we assume that for some option sets $A \\in 2_{\\mathcal{V}}^f$, we know that the decision-maker rejects all options in $W \\subseteq A$, meaning that $C(A) \\subseteq A \\setminus W$. An equivalent way of expressing this, which will be more convenient for our purposes, is to state that $C(V \\cup W) \\subseteq V$, with $V := A \\setminus W$, or equivalently, that $W \\subseteq R_C(V \\cup W)$. We will represent such information by an assessment: a set $\\mathcal{A} \\subseteq 2_{\\mathcal{V}}^f \\times 2_{\\mathcal{V}}^0$ of pairs (V, W) of disjoint option sets so $V \\cap W = \\emptyset$-with the interpretation that, for all $(V, W) \\in \\mathcal{A}$, the options in W are definitely rejected from $V \\cup W$. Note that we do not allow $V = \\emptyset$ because this cannot represent partial information about a coherent choice function due to Definition 2.6 and Proposition 2.4. Also note that $W = \\emptyset$ is uninformative, since it simply states that $C(V) \\subseteq V$, but is nevertheless allowed. To make this idea more concrete, let us go back to the example.\nRunning Example 3.1. Suppose that the strategic advisor of the farming company has previously rejected the options $v_3$ and $v_4$ from the option set $A_1$, as in Running Example 2.2, and has chosen $v_6$ from $A_2 := \\{v_5, v_6\\}$, where $v_5 := (3, 1)$ and $v_6 := (-4,8)$. This corresponds to the assessment\n$\\mathcal{A} = \\{({\\lbrace v_1, v_2\\rbrace}, {\\lbrace v_3, v_4\\rbrace}), (\\{\\lbrace v_6\\rbrace}, {\\lbrace v_5\\rbrace})\\}.$\nSuppose now that the company's strategic advisor has fallen ill and the company is faced with a new decision problem that amounts to choosing from the set $A_3 = \\{(-3, 4), (0,1), (4, -3)\\}$. Since no such choice was made before, the conservative option is to make the completely uninformative statement $C(A_3) \\subseteq A_3$. However, perhaps the company can make a more informative choice by taking into account the advisor's previous choices?"}, {"title": "3.1. Introducing consistency and natural extension", "content": "Given an assessment $\\mathcal{A}$ that we would like to extend, a first important question is whether there is a coherent choice function C that agrees with it.\nDefinition 3.2. An assessment $\\mathcal{A}$ is consistent if there is a coherent choice function C such that $C(V \\cup W) \\subseteq V$ for all $(V, W) \\in \\mathcal{A}$.\nTo characterise this notion of consistency, we recall that a choice function C is coherent whenever there is some non-empty set of preference orders such that $C = C_\\mathcal{O}$, and observe that it follows from Equation (1) that $C_\\mathcal{O}$ satisfies the conditions in Definition 3.2 if and only if\n$\\mathcal{O} \\subseteq \\mathcal{O}(\\mathcal{A}) := \\{\\prec \\in \\mathcal{O} : (\\forall (V, W) \\in \\mathcal{A}) C_{\\prec}(V \\cup W) \\subseteq V \\}.$\nHence, $\\mathcal{A}$ is consistent if and only if $\\mathcal{O}(\\mathcal{A}) \\neq \\emptyset$.\nIf an assessment $\\mathcal{A}$ is consistent and there is more than one choice function that agrees with it, then the question remains which one we should use. A careful decision-maker would only want to reject options if this is implied by the assessment. So she wants a most conservative agreeing coherent choice function: one that rejects the fewest number of options. Since larger sets of preference orders lead to more conservative choice functions, this most conservative agreeing choice function then clearly exists, and is then equal to $C_{\\mathcal{O}(\\mathcal{A})}$. For notational convenience, for any assessment $\\mathcal{A}$, we denote this function by $C_{\\mathcal{A}} := C_{\\mathcal{O}(\\mathcal{A})}$, regardless of whether $\\mathcal{A}$ is consistent; the term natural extension though, we reserve for the consistent case.\nDefinition 3.3. Whenever an assessment $\\mathcal{A}$ is consistent, we call $C_{\\mathcal{A}}$ the natural extension of $\\mathcal{A}$.\nSo we see that the consistency and the natural extension of an assessment $\\mathcal{A}$ are both entirely characterised by $\\mathcal{O}(\\mathcal{A})$. Given the importance of this set, we will now investigate its structure in more detail."}, {"title": "3.2. Alternative characterisations of $\\mathcal{O}(\\mathcal{A})$", "content": "As a first step, we consider the following more practical expression for $\\mathcal{O}(\\mathcal{A})$.\nProposition 3.4. Consider an assessment $\\mathcal{A}$. Then\n$\\mathcal{O}(\\mathcal{A}) = \\{\\prec \\in \\mathcal{O} : (\\forall (V, W) \\in \\mathcal{A})(\\forall w \\in W)(\\exists v \\in V)w \\prec v \\}.$\nTo prove this, it suffices to apply the following lemma to every $(V, W) \\in \\mathcal{A}$.\nLemma 3.5. For any preference order $\\prec$ and any disjoint $V\\in_f \\mathcal{V}$ and $W\\in_f \\mathcal{V}$ the following statements are equivalent:\n$C_{\\prec}(V\\cup W) \\subseteq V$\nand\n$(\\forall w \\in W)(\\exists v \\in V)w \\prec v.$"}, {"title": "3.3. Consistency and natural extension for generators", "content": "For a given assessment $\\mathcal{A}$, we have by Corollary 3.6 that $\\mathcal{O}(\\mathcal{A}) = \\mathcal{O}(\\mathcal{G}_\\mathcal{A})$. However, as we will see in Sections 5 and 6, the same is often true for other, simpler generators $\\mathcal{G}$. For that reason, rather than focus on $\\mathcal{G}_\\mathcal{A}$ in particular, we will consider arbitrary disjunctive generators $\\mathcal{G} \\subseteq 2^{\\mathcal{V}}$, the sets $\\mathcal{O}(\\mathcal{G})$ of preference orders that are generated by them and the corresponding operators $C^{\\mathcal{G}} := C_{\\mathcal{O}(\\mathcal{G})}$. We start by defining consistency and natural extension for such generators.\nDefinition 3.8. A disjunctive generator $\\mathcal{G} \\subseteq 2^{\\mathcal{V}}$ is called consistent if $\\mathcal{O}(\\mathcal{G}) \\neq \\emptyset$. Whenever it is consistent, we call the corresponding choice function $C^{\\mathcal{G}}$ its natural extension.\nNote that, for the particular case of $\\mathcal{G}_\\mathcal{A}$, the consistency and natural extension of $\\mathcal{G}_\\mathcal{A}$ is equivalent to that of $\\mathcal{A}$: $\\mathcal{O}(\\mathcal{A}) \\neq \\emptyset \\Leftrightarrow \\mathcal{O}(\\mathcal{G}_\\mathcal{A}) \\neq \\emptyset$ and $C^{\\mathcal{G}_\\mathcal{A}} = C_{\\mathcal{O}(\\mathcal{G}_\\mathcal{A})} = C_{\\mathcal{O}(\\mathcal{A})} = C_{\\mathcal{A}}$.\nSince $\\mathcal{O}(\\mathcal{G}) = \\cup_{\\mathcal{G}\\in\\mathcal{G}} \\mathcal{O}[\\mathcal{G}]$, we see that a generator $\\mathcal{G}$ is consistent if and only if $\\mathcal{O}[\\mathcal{G}] \\neq \\emptyset$ for at least one $\\mathcal{G}\\in\\mathcal{G}$. Alternatively, due to Proposition 2.4, $\\mathcal{G}$ is consistent if and only if $0 \\in C^{\\mathcal{G}}(\\{\\emptyset\\})$. For the operator $C^{\\mathcal{G}}$ itself, on the other hand, we see from the definitions that\n$C^{\\mathcal{G}} (A) = C_{\\mathcal{O}(\\mathcal{G})} (A) = \\{u \\in A: (\\exists \\mathcal{G} \\in \\mathcal{G})(\\exists \\prec \\in \\mathcal{O}[\\mathcal{G}])(\\forall a \\in A)u \\nobreak a\\},$ for any $A \\in 2_{\\mathcal{V}}^f$. For these reasons, it will be useful to find a convenient way of checking, for any $\\mathcal{G}\\subseteq \\mathcal{V}$, whether $\\mathcal{O}[\\mathcal{G}] \\neq \\emptyset$ and whether there is some $\\prec\\in \\mathcal{O}[\\mathcal{G}]$ such that u\u227aa for all a \u2208 A. As we will now show, both problems are closely related to well-known concepts from the theory of coherent sets of desirable options [5]."}, {"title": "3.4. Consistency and natural extension for generator sets", "content": "Since we know from Lemma 2.3 that there is a one-to-one correspondence between preference orders and coherent sets of desirable options, studying preference orders $\\prec\\in \\mathcal{O}[\\mathcal{G}]$ is equivalent to studying their corresponding coherent sets of desirable options $G_\\prec\\in \\mathcal{G}$. More explicitly, it follows from the definition of $\\mathcal{O}[\\mathcal{G}]$ and $\\mathcal{G}$ that, for any preference order $\\prec$,\n$\\prec\\in \\mathcal{O}[\\mathcal{G}] \\Leftrightarrow \\mathcal{G} \\subseteq G_\\prec.$\nSo we see that working with $\\mathcal{O}[\\mathcal{G}]$ is equivalent to working with $G_{\\mathcal{G}} := \\{ D \\in \\mathcal{G} : \\mathcal{G} \\subseteq D \\}$. Conveniently, this set of compatible coherent sets of desirable options is well studied, allowing us to borrow some results from the theory of coherent sets of desirable options."}, {"title": "3.5. Connecting back to generators", "content": "From these results, we can now check the consistency of a generator in a straightforward way.\nLemma 3.11. A generator $\\mathcal{G} \\subseteq 2^{\\mathcal{V}}$ is consistent if and only if there is some $\\mathcal{G}\\in \\mathcal{G}$ such that $0 \\notin N(\\mathcal{G})$.\nSimilarly, the lemmas above also lead up to the following theorem that allows us to evaluate $C^{\\mathcal{G}}$ for any finite option set in terms of checks on $N(\\mathcal{G})$ for the generator sets $\\mathcal{G}\\in \\mathcal{G}$.\nTheorem 3.12. Consider any generator $\\mathcal{G} \\subseteq 2^{\\mathcal{V}}$. For any option set $A \\in 2_{\\mathcal{V}}^f$ and option $u \\in A$, $u \\in C^{\\mathcal{G}} (A)$ if and only if there is some $\\mathcal{G}\\in \\mathcal{G}$ such that $(A - u) \\cap N(\\mathcal{G}) =  \\emptyset.$"}, {"title": "4. Practical methods for finite generator sets", "content": "We've just seen that both the problem of checking the consistency of an assessment and computing its natural extension reduce to checking for multiple options $v \\in \\mathcal{V}$ and option sets $\\mathcal{G}\\in \\mathcal{G}$ whether $v$ belongs to $N(\\mathcal{G})$. This can be done in various ways, but in this section we will proceed to propose one way for the case where $\\mathcal{G}$ is finite, and show how this leads to practical algorithms for checking the consistency and evaluating $C^{\\mathcal{G}}$ for generators $\\mathcal{G}$ that consist of a finite number of such finite generator sets $\\mathcal{G}$."}, {"title": "4.1. Checking if an option belongs to $N(\\mathcal{G})$ for finite G", "content": "If an assessment $\\mathcal{A}$ is finite, which will often be the case in practice, then there are only a finite number of option sets in $H_\\mathcal{A}$ each containing a finite number of options. The disjunctive generator $\\mathcal{G}_\\mathcal{A}$ will then also consist of a finite number of option sets\u2014at most $\\prod_{H\\in H_{\\mathcal{A}}}|H|$, as can be seen from Equation (9)\u2014each of which contains only a finite number of options. The following proposition gives a more practical way of checking, for one such finite option set $\\mathcal{G}$, whether an option belongs to $N(\\mathcal{G})$. We use the convention that for all non-negative integers $n \\geq 0$, $(\\lambda_1,..., \\lambda_n) > 0$ means that $(\\lambda_1,..., \\lambda_n)$ is an n-tuple of real numbers such that $\\lambda_j \\geq 0$ for all $j \\in \\{1, ..., n\\}$ and $\\lambda_j > 0$ for at least one $j\\in \\{1, ..., n\\}$; in particular, for n = 0, no such $(\\lambda_1,..., \\lambda_n) > 0$ exists.\nProposition 4.1. For any option set $\\mathcal{G} = \\{g_1,...,g_m\\} \\in 2_{\\mathcal{V}}^f$ and option $v \\in \\mathcal{V}$, $v \\in N (\\mathcal{G})$ if and only if at least one of the following two conditions holds:\n(i) $0<v;$\n(ii) there is some $(\\lambda_1,..., \\lambda_m) > 0$ such that $\\sum_{i=1}^m \\lambda_i g_i \\leq v.$"}, {"title": "4.2. Consistency and natural extension in practice", "content": "With Proposition 4.1 at our disposal, the methods in Section 3.5 for checking consistency and evaluating $C^{\\mathcal{G}}$ can now be simplified even further, at least if $\\mathcal{G}$ consists of finite option sets.\nFor consistency, we then know from Lemma 3.11 that $\\mathcal{G}$ is consistent if and only if there is some $\\mathcal{G}\\in \\mathcal{G}$ such that $0 \\notin N(\\mathcal{G})$. Reformulating $0 \\notin N(\\mathcal{G})$ with Proposition 4.1, we arrive at the following result.\nProposition 4.3. Consider a generator $\\mathcal{G}\\subseteq 2^{\\mathcal{V}}$ consisting of finite option sets. Then $\\mathcal{G}$ is consistent if and only if there is some $\\mathcal{G} = \\{g_1, \u2026, g_m\\} \\in \\mathcal{G}$ such that $\\sum_{i=1}^m \\lambda_i g_i \\neq 0$ for all $(\\lambda_1,..., \\lambda_m) > 0$.\nRunning Example 4.4. We will now go ahead and test if the strategic advisor was at least consistent (with coherence) in his choices. We know from Section 3.3 that A is consistent if and only if $G_A$ is. Therefore, by Proposition 4.3, we can demonstrate consistency by finding a generator set $\\mathcal{G} = \\{g_1,..., g_m\\} \\in G_A$ such that $\\sum_{i=1}^m \\lambda_i g_i \\neq 0$ for every $(\\lambda_1,..., \\lambda_m) > 0$. We will use the particular generator set $\\mathcal{G} = \\{g_1,g_2,g_3\\} = \\{h_2,h_4,h_5\\} = \\{(2, -1), (5, -3), (-7,7)\\} \\in G_A$. Assume ex absurdo that there is some $(\\lambda_1, \\lambda_2, \\lambda_3) > 0$ such that $\\sum_{i=1}^3 \\lambda_i g_i \\leq 0$. Notice that $2g_2 \\leq 5g_1$, so if we let $\\mu_1 := \\frac{3}{5}\\lambda_1 + \\lambda_2$ and $\\mu_2 := \\frac{7}{3} \\lambda_3$ then\n$\\sum_{i=1}^3 \\lambda_i g_i \\geq \\lambda_1 g_2 + \\lambda_2 g_2 + \\lambda_3 g_3 = \\mu_1h_4 + \\frac{1}{3}\\mu_2h_5 = (5\\mu_1 - \\mu_2, -3\\mu_1 + \\mu_2)$.\nTo determine $C^{\\mathcal{G}} (A)$ for any option set $A \\in 2_{\\mathcal{V}}^f$, we can check for every individual $u \\in A$ if $u \\in C^{\\mathcal{G}} (A)$. Due to Theorem 3.12, this requires us to check, for every $u \\in A$, if there is some $\\mathcal{G}\\in \\mathcal{G}$ such that $(A-u)\\cap N(\\mathcal{G}) = \\emptyset$, or equivalently, such that $v \\notin N(\\mathcal{G})$ for all $v \\in A - u$. If the generator sets in $\\mathcal{G}$ are all finite, then we can reformulate this condition using Proposition 4.1.\nProposition 4.5. For any finite generator $\\mathcal{G} \\in 2_{\\mathcal{V}}^f$, option set $A \\in 2_{\\mathcal{V}}^f$ and option $u \\in A$, $u \\in C^{\\mathcal{G}} (A)$ if and only if"}, {"title": "4.3. An algorithmic approach", "content": "Fix some finite generator $\\mathcal{G} \\in 2_{\\mathcal{V}}^f$. Then as we've seen in the previous section, for each $\\mathcal{G} = \\{g_1, \u2026, g_m\\} \\in \\mathcal{G}$, the step \u2018check if there is some tuple $(\\lambda_1,..., \\lambda_m) > 0$ for which $\\sum_{i=1}^m \\lambda_i g_i \\leq v$\u2019 is an essential element of our methods for checking the consistency of $\\mathcal{G}$ and evaluating $C^{\\mathcal{G}}$. For that reason, we introduce a boolean function ISFEASIBLE: $2_{\\mathcal{V}}^f \\times \\mathcal{V} \\rightarrow \\{\\text{true, false}\\}$ for it. For every $\\{g_1,\u2026,g_m\\} \\in 2_{\\mathcal{V}}^f$ and $v \\in \\mathcal{V}$, it returns true if $\\sum_{i=1}^m \\lambda_i g_i \\leq v$ for at least one $(\\lambda_1, ..., \\lambda_m) > 0$, and false otherwise.\nSince we will need to evaluate ISFEASIBLE repeatedly, we first look at how we can do this in practice. By definition, $(\\lambda_1,..., \\lambda_m) > 0$ can be rewritten as $\\lambda_i \\geq 0$ for all $i \\in \\{1, ..., m\\}$ and $\\sum_{i=1}^m \\lambda_i > 0$, which are all linear constraints. Since the condition $\\sum_{i=1}^m \\lambda_i g_i \\leq v$ is linear as well, we have a linear feasibility problem to solve. However, strict inequalities such as \"$\\lambda_i > 0$\u201d are problematic for software solvers for linear feasibility problems. A quick fix is to choose some very small $\\epsilon > 0$ and impose the inequality $\\sum_{i=1}^m \\lambda_i \\geq \\epsilon$ instead, but since this is an approximation, it does not guarantee that the result is correct. A better solution is to use the following alternative characterisation that, by introducing an extra free variable, avoids the need for strict inequalities.\nProposition 4.7. Consider any $v \\in \\mathcal{V}$ and any $\\mathcal{G} := \\{g_1,\u2026,g_m\\} \\in 2_{\\mathcal{V}}^f$. Then ISFEASIBLE(${\\mathcal{G}, v}$) = true if and only if there is some $(\\mu_1,\u2026,\\mu_{m+1}) \\in \\mathbb{R}^{m+1}$ such that $\\sum_{k=1}^m\\mu_kg_k \\leq \\mu_{m+1}v$, $\\mu_k \\geq 0$ for all $k \\in \\{1,...,m\\}$, $\\mu_{m+1} \\geq 1$ and $\\sum_{k=1}^{m+1} \\mu_k \\geq 1$."}, {"title": "4.4. Practical considerations", "content": "If we want to implement Algorithms 1 to 4 in the programming language of your choice, there are some practical aspects to take into account.\nA first such aspect is which data type to use to store generators in all the previous algorithms. One option, that is closest to the mathematical descriptions in our pseudocode, is to use the set data type, which is implemented in most common programming languages. However, we opt to use arrays; that is, we store option sets as arrays and sets of option sets as arrays of arrays. One reason is that arrays are usually optimised for iteration, which is what we do in Algorithms 1 and 2. Another advantage of arrays is that they use slightly less memory when no duplicates are present, because set-like structures save some additional information to maintain their hash table. The advantages of set-like structures, such as faster look-up and removal, on the other hand, are not of use in our algorithms. Moreover, the only difference is that for arrays it is possible that duplicates are present, and it can be seen from Propositions 4.3 and 4.5 that even when there are duplicate option sets, this would just lead us to check the same option set twice, which will not alter the result. Similarly, inside the option sets $\\mathcal{G}\\in \\mathcal{G}$ it will not matter to have the same option twice, as the $\\lambda$\u2019s for the same options can be lumped together. Since it is often a reasonable assumption that duplicates will be very rare, this leads us to think that the advantages of arrays outweigh the disadvantages here.\nA second particular aspect is that Algorithm 4 will lead to memory explosion for large conjunctive generators if we save the disjunctive generator in memory. This is because $|G(H)| = | \\times_{H\\in H} H|$ for a given conjunctive generator H (when using arrays). Therefore, it is in practice better to only save the conjunctive generator in memory and do the iteration over the disjunctive generator on the fly when we need it in Algorithms 1 and 2.\nWe will take both considerations into account in our implementation when we will test our algorithms in Section 7. However, the exponential explosion can still manifest itself in the running time of Algorithms 1 and 2. To address this potential issue, in the next two sections, we will develop methods to reduce the size of a (conjunctive or disjunctive) generator, without altering the corresponding set of preference orders. We start with conjunctive generators."}, {"title": "5. Simplifying conjunctive generators", "content": "For any given conjunctive generator $H\\in 2_{\\mathcal{V}}^f$\u2014and for $H_\\mathcal{A}$ in particular-the consistency and natural extension of the corresponding generator $G(H)$\u2014and that of $G_\\mathcal{A} = G(H_\\mathcal{A})$ in particular\u2014are fully determined by the corresponding set of preferences $\\mathcal{O}(G(H)) = \\mathcal{O}(H)$. Therefore, if we can simplify H without altering $\\mathcal{O}(H)$, this will reduce the running time of Algorithms 1, 2 and 4 without altering the result. The aim of this section is to achieve such simplifications, either by removing option sets from H or by removing options inside the individual option sets in H. At the end we also present an algorithm that implements these simplifications."}, {"title": "5.1. Removing option sets containing a positive option", "content": "First we show that we can sometimes remove a whole option set. In particular, for any conjunctive generator H, we can remove all option sets $H \\in H$ for which $\\mathcal{O}[H] =  \\emptyset$, as doing so does not alter $\\mathcal{O}(H) = \\cap_{H\\in H}\\mathcal{O}[H]$. The following lemma gives a simple necessary and sufficient condition for this to happen.\nLemma 5.1. Consider an option set $H \\in 2_{\\mathcal{V}}^f$. Then $\\mathcal{O}[H] = \\emptyset$ if and only if there is an option $h \\in H$ such that $0<h.$"}, {"title": "5.2. Removing negative options", "content": "The next simplification is based on the idea that some options $u \\in H$ are non-informative. In particular, if an option $u \\in H$ is nonpositive (u \\leq 0), then it cannot be preferred to zero by a preference order since preference orders extend $\\leq$, so $\\mathcal{O}_u = \\emptyset$. Removing u from H will therefore not change $\\mathcal{O}[H]$. This is made formal in the following lemma.\nLemma 5.2. Consider an option set $H \\in 2_{\\mathcal{V}}^f$ and an option $u \\in H$. If $u \\leq 0$, then $\\mathcal{O}[H] = \\mathcal{O}[H \\setminus \\{u\\}].$"}, {"title": "5.3. Removing dominated options", "content": "If we know that there are two options $u, v \\in H$ such that $\\mathcal{O}_u \\subseteq \\mathcal{O}_v$, then we can remove u from H because it does not contribute to the union in the definition of $\\mathcal{O}[H]$. The following lemma gives a practical sufficient condition for this to happen.\nLemma 5.3. Consider an option set $H \\in 2_{\\mathcal{V}}^f$ and two distinct options $u,v \\in H$. If $v \\in N(\\{u\\})$, then $\\mathcal{O}[H] = \\mathcal{O}[H \\setminus \\{u\\}].$"}, {"title": "6. Simplifying disjunctive generators", "content": "Even if we simplify H using the methods"}]}