{"title": "INTERCEPTING UNAUTHORIZED AERIAL ROBOTS IN CONTROLLED AIRSPACE USING REINFORCEMENT LEARNING", "authors": ["Francisco Giral", "Ignacio Gomez", "Soledad Le Clainche"], "abstract": "The proliferation of unmanned aerial vehicles (UAVs) in controlled airspace presents significant risks, including potential collisions, disruptions to air traffic, and security threats. Ensuring the safe and efficient operation of airspace, particularly in urban environments and near critical infrastructure, necessitates effective methods to intercept unauthorized or non-cooperative UAVs. This work addresses the critical need for robust, adaptive systems capable of managing such threats through the use of Reinforcement Learning (RL). We present a novel approach utilizing RL to train fixed-wing UAV pursuer agents for intercepting dynamic evader targets. Our methodology explores both model-based and model-free RL algorithms, specifically DreamerV3, Truncated Quantile Critics (TQC), and Soft Actor-Critic (SAC). The training and evaluation of these algorithms were conducted under diverse scenarios, including unseen evasion strategies and environmental perturbations. Our approach leverages high-fidelity flight dynamics simulations to create realistic training environments. This research underscores the importance of developing intelligent, adaptive control systems for UAV interception, significantly contributing to the advancement of secure and efficient airspace management. It demonstrates the potential of RL to train systems capable of autonomously achieving these critical tasks.", "sections": [{"title": "1 Introduction", "content": "Autonomous vehicles and robotics have gained significant attention in recent years due to their potential to address various contemporary issues. Specifically, aerial robotics and Unmanned Aerial Vehicles (UAVs) are utilized in both civil and military applications, including search and rescue, surveillance and reconnaissance, boundary control, critical installations protection, and autonomous transportation, among others. Currently, these applications face several limitations because existing methods do not generalize well or adapt to environmental changes, thereby hindering full autonomy.\nMachine Learning, and particularly Reinforcement Learning (RL), has proven effective at overcoming these limitations. RL has been successfully applied in various fields such as video games [1, 2], mathematical discoveries [3], and robotics [4, 5]. In robotics and autonomous vehicles, its potential is particularly promising, providing capabilities for embodied systems to make intelligent decisions despite environmental uncertainties or high-dimensional observations that are challenging for traditional methods. In the domain of autonomous aerial vehicles, Reinforcement Learning has achieved state-of-the-art results in tasks such as drone racing competitions [6], autonomous dogfighting [7, 8], and robust control of multiple suspended loads [9].\nThe proliferation of aerial vehicles, both manned and unmanned, has led to an increased presence of flying robots in controlled airspace, such as the vicinity of airports. Unauthorized UAVs in these areas pose significant risks, including potential accidents and disruptions to air traffic operations, which can result in financial losses, flight delays, or complete operational shutdowns. Looking ahead to urban air mobility, where an Unmanned Traffic Management (UTM) system will enable piloted and autonomous aerial vehicles to coexist in urban airspace, controlling both authorized and unauthorized UAVs is crucial for maintaining operational safety.\nAddressing the need to capture or intercept unauthorized UAVs in specific airspace zones, whether urban or natural, is essential for ensuring the safety of aerial operations and air traffic. One effective solution involves deploying an intelligent system capable of detecting and capturing unauthorized UAVs, which requires robustness and adaptability to varying target movements and maneuvers. Autonomous aerial robots are well-suited for this task.\nThis research aims to tackle the challenge of intercepting a non-cooperative dynamic target (a UAV) with a pursuing agent. We employ Reinforcement Learning to train a pursuer agent with the objective of intercepting the target swiftly. Previous studies have utilized RL for similar tasks; some have approached the problem using Multi-Agent Reinforcement Learning (MARL), training both pursuers and evaders in adversarial settings with multiple quadcopters in complex environments [10, 11, 12]. Other works have focused on training the evader to escape attackers [13, 14]. In single-agent RL settings, researchers have trained quadcopters to follow targets using visual sensors and discrete control actions [15] or decomposed the problem to manage system dynamics at a low level [16]. Applications have extended to fixed-wing UAVs, intercepting moving targets with fixed trajectories [17] or training RL agents to follow control setpoints for pursuing targets [18, 19].\nThis work presents a training framework for a fixed-wing UAV pursuer agent using Single-Agent Reinforcement Learning, with the goal of capturing a dynamic evader. The objective is to train a pursuer UAV capable of handling various evading strategies, beyond those encountered during training. We propose a training setup where the pursuer must intercept a dynamic UAV target that employs different evasion strategies, tested by manually controlling the evader. All simulations are conducted using JSBSim [20], a high-fidelity Flight Dynamics Model (6 DoF), ensuring both pursuer and evader share the same physics model. Unlike most previous works, we utilize a model-based RL algorithm, DreamerV3 [21], which leverages imagined trajectories in a world model to train the control policy in a continuous action space, aiming for robust task representation. We compare Dreamer's performance against two well-known model-free RL algorithms, Truncated Quantile Critics (TQC) [22] and Soft-Actor-Critic (SAC) [23], both of which have shown excellent results in continuous control problems. The robustness and generalization capabilities of the trained agents are evaluated under various scenarios, including wind disturbances and sensor noise.\nThe contributions and advantages of this paper are as follows:\n\u2022 We propose a Reinforcement Learning-based training framework to design a pursuer agent in a single-agent setup, capable of intercepting an evader regardless of its strategy. This approach aims to create a pursuer capable of generalizing to different evading strategies, avoiding the complexity of multi-agent RL setups, and allowing exploration of various algorithmic approaches without relying on low-level or setpoint tracking controllers.\n\u2022 We compare model-based and model-free RL approaches. Unlike many other studies that focus solely on model-free algorithms, we evaluate the performance of both methods.\n\u2022 We validate the system's robustness by introducing sensor noise and wind gust perturbations post-training, exposing the agent to previously unseen scenarios.\nThe paper is organized as follows: Section 2 summarizes the methodology, defining the problem, describing the simulation environment, and detailing the reinforcement learning training framework, including the Markov Decision Process (MDP) definition, reward design, and training parameters. Section 3 presents the training and validation results under various scenarios. Finally, we conclude with our findings and future directions."}, {"title": "2 Methodology", "content": "This section introduces the proposed method. First, we provide a brief introduction to the problem we aim to address. Next, we detail the simulation environment and the Flight Dynamics Model used to test our methodology. Following that, we describe the algorithms used in this work, with a particular focus on the model-based RL algorithm, DreamerV3."}, {"title": "2.1 Problem Formulation", "content": "Ensuring the safety and efficiency of airspace operations, especially in controlled environments like airports, necessitates addressing the challenge posed by unauthorized or non-cooperative UAVs. These UAVs can disrupt air traffic, cause accidents, and compromise security. Therefore, developing an intelligent system capable of intercepting dynamic flying targets is crucial for maintaining operational integrity and safety. This problem is particularly significant in the context of advancing urban air mobility, where both piloted and autonomous aerial vehicles need to coexist safely.\nThe goal is to develop an intelligent system capable of intercepting a dynamic flying target as quickly as possible, anticipating the target's movements regardless of its evading actions. We refer to the agent as the pursuer and the dynamic target as the evader. Our objective is to train the pursuer to complete this task using Reinforcement Learning.\nThe result of training the agent is the trained pursuer's policy, $\u03c0\u03c1(at|st)$, which serves as a controller, mapping the dynamics of the pursuer and the position of the evader to the optimal actions for the control surfaces and motors."}, {"title": "2.2 Simulation Environment", "content": "We utilize the JSBSim Flight Dynamics Model (FDM) as our physics simulator. JSBSim is an open-source software written in C++ and is considered a high-fidelity simulator for the dynamics of fixed-wing air vehicles.\nJSBSim simulates the dynamics of an aircraft using a non-linear flight dynamics model based on the differential system of the form $\\dot{x} = f(x, u)$. The equations governing this system are shown in Equations 1 to 4, where m is the mass of the aircraft, and I is the moment of inertia around each axis. X, Y, and Z are the total forces on the x-axis, y-axis, and z-axis of the plane, respectively, expressed in the body frame. L, M, and N represent moments similarly.\nSolving this system of equations allows the calculation of the aircraft's state, given by its position $(x_e, Y_e, z_e)$, velocity (u, v, w), Euler angles (\u03c6, \u03b8, \u03c8), and angular rates (p, q, r). For this purpose, JSBSim uses numerical integrators such as Runge-Kutta or Adams-Bashforth.\n$\\begin{bmatrix} \\dot{x_e} \\\\ \\dot{Y_e} \\\\ \\dot{z_e} \\end{bmatrix} = [T_{be}(\\phi, \\theta, \\psi)] \\begin{bmatrix} u\\\\v\\\\w\\end{bmatrix}$  (1)\n$\\begin{bmatrix} \\dot{\\phi} \\\\ \\dot{\\theta} \\\\ \\dot{\\psi} \\end{bmatrix} = \\begin{bmatrix} 1 & sin \\phi tan \\theta & cos \\phi tan \\theta\\\\ 0 & cos \\phi & -sin \\phi\\\\ 0 & sin \\phi / cos \\theta & cos \\phi / cos \\theta \\end{bmatrix} \\begin{bmatrix} p\\\\q\\\\r\\end{bmatrix}$  (2)\n$\\begin{bmatrix} \\dot{u} \\\\ \\dot{v} \\\\ \\dot{w} \\end{bmatrix} = \\begin{bmatrix} \\frac{X}{m} - g sin \\theta\\\\ \\frac{Y}{m} + g sin \\phi cos \\theta\\\\ \\frac{Z}{m} + g cos \\phi cos \\theta \\end{bmatrix}$  (3)\n$\\begin{bmatrix} \\dot{p} \\\\ \\dot{q} \\\\ \\dot{r} \\end{bmatrix} = \\begin{bmatrix} I_{xx} & I_{xy} & I_{xz} \\\\ I_{yx} & I_{yy} & I_{yz} \\\\ I_{zx} & I_{zy} & I_{zz} \\end{bmatrix}^{-1} \\begin{bmatrix} L - q(I_{zz} - I_{yy}) + r(I_{yz} - I_{zy}) \\\\ M - r(I_{xx} - I_{zz}) + p(I_{zx} - I_{xz}) \\\\ N - p(I_{yy} - I_{xx}) + q(I_{xy} - I_{yx}) \\end{bmatrix}$  (4)\nIn addition to these fixed-wing aircraft equations, JSBSim also models atmospheric disturbances, ground reactions, geodetic modeling, and rotational effects, among others, to enhance simulation realism. Of particular relevance to this work is the turbulence/gusts model used by JSBSim, the Dryden Gusts or Dryden Wind Turbulence model. This model is commonly used in aeronautics due to its suitability for representing atmospheric turbulence effects on aircraft.\nThe Dryden model equations are given by:\n$\\Phi_u(\\omega) = \\frac{\\sigma_u^2 L_u}{\\pi 1 + (L_u \\omega)^2}$  (5)\n$\\Phi_v(\\omega) = \\frac{\\sigma_v^2 L_v}{\\pi} \\frac{1 + 3(L_v \\omega)^2}{[1 + (L_v \\omega)^2]^2}$  (6)\n$\\Phi_w(\\omega) = \\frac{\\sigma_w^2 L_w}{\\pi} \\frac{1 + 3(L_w \\omega)^2}{[1 + (L_w \\omega)^2]^2}$  (7)\nIn these equations, $\\Phi_u(\\omega)$, $\\Phi_v(\\omega)$, and $\\Phi_w(\\omega)$ are the power spectral densities for the longitudinal, lateral, and vertical turbulence components, respectively, where $\\omega$ is the frequency; $\\sigma_u$, $\\sigma_v$, and $\\sigma_w$ are the root mean square (RMS) turbulence velocities, and $L_u$, $L_v$, and $L_w$ are the scale lengths for these components."}, {"title": "2.3 Reinforcement Learning Algorithms Overview", "content": "Reinforcement Learning (RL) is one of the three primary Machine Learning (ML) paradigms, focused on maximizing cumulative reward through trial and error. Although there are various approaches within RL, they can be broadly categorized into model-free and model-based algorithms.\n2.3.1 Model-free RL\nModel-free RL is a widely used approach where the learning algorithm directly interacts with the environment to learn an optimal policy that maps observations to actions. This method does not involve learning a model of the environment's dynamics. One common family of model-free algorithms is the Actor-Critic (AC) methods, which combine the benefits of both value-based and policy-based approaches.\nIn Actor-Critic algorithms, the actor updates the policy $\u03c0(a|s; 0)$ based on feedback from the critic, which evaluates the action by estimating the value function $V (s; w)$ or the action-value function $Q(s, a; w)$. The objective is to minimize the loss function for the critic, such as:\n$L(w) = E[(R_t \u2013 V(s_t;w))^2]$  (9)\nand update the actor by optimizing the expected return:\n$V_\\theta J(\\theta) = E[V_\\theta log \u03c0(a|s; \\theta)Q(s, \u03b1; \u03c9)]$  (10)\nDifferent algorithms apply diverse loss functions and update methods to improve either speed, sample efficiency, exploration capabilities, or allow continuous or discrete actions. Model-free algorithms can be further classified into on-policy and off-policy methods. On-policy methods, like PPO (Proximal Policy Optimization) [24], update the policy based on the actions actually taken, whereas off-policy methods, such as SAC (Soft Actor-Critic) [23] and TQC (Truncated Quantile Critics) [22], learn the value of the optimal policy independently of the agent's actions by using experiences from a replay buffer. The latter approach is more sample efficient, making these algorithms a better approach for continuous control tasks in some cases.\n2.3.2 Model-based RL\nModel-based RL, in contrast, involves learning a model of the environment's dynamics and exploiting it to select the best option. The model typically consists of a transition function $\\uparrow(s'|s, a)$ and a reward function $R(s, a)$. By simulating the environment using this learned model, the agent can predict future states and rewards, allowing for more efficient learning of an actor network or planning.\nA prominent example of a model-based algorithm is Dreamer, specifically the most recent version DreamerV3, developed by Danijar Hafner [21]. Dreamer is capable of learning long-horizon behaviors purely by latent imagination, meaning that it learns an embedded representation of the real environment and uses this embedded representation to learn the optimal policy. Moreover, it is an off-policy algorithm, so it learns from previous experiences gathered with a different policy than the one the agent is trying to learn."}, {"title": "2.4 Markov Decision Process Formulation of the Problem", "content": "Reinforcement Learning relies on the Markov Decision Process (MDP) formulation, making it necessary to design the problem at hand as a sequence of states (S), actions (A), and rewards (R).\nWe define the problem as a fully observable MDP during training, assuming all necessary states are known and observable in the state space. This way, the agent can completely observe its own state and the necessary states of the target to determine its relative position.\n2.4.1 State Space Formulation\nThe agent's state space, defined as S in the MDP, comprises all necessary observations to be aware of its attitude, velocity, and position, which define the complete state of an aircraft, as well as the observations needed to know the relative position and velocity of the target, allowing it to determine the target's movement."}, {"title": "2.4.2 Action Space Formulation", "content": "As mentioned in Section 2.2, the UAV model used in JSBSim for the simulations includes a Fly-By-Wire system model which maps the pilot's commanded inputs to the control surface deflections and throttle. Thus, the RL agent needs to take the same actions as a human pilot would. The action space is defined as follows:\n$A = [\\delta_e, \\delta_a, \\delta_r, \\delta_\\tau] \\in [-1, 1]^3 \u00d7 [0, 1]$,  (17)\nThese actions are defined as:\n\u2022 $\\delta_e$: pitch rate command to control the longitudinal motion of the UAV.\n\u2022 $\\delta_a$: roll rate command to control the coupled lateral/directional motion of the UAV.\n\u2022 $\\delta_r$: yaw rate command to control the coupled lateral/directional motion of the UAV.\n\u2022 $\\delta_\\tau$: throttle control, which is direct.\nAll control commands in the action space (A) are normalized between -1 and 1 by default in the FDM. Actions taken by the agent at each time step are introduced directly to the Flight Dynamics Model simulation."}, {"title": "2.4.3 Reward Function Definition", "content": "A goal-oriented reward function is defined for this problem, where the goal is the event when the dynamic target is reached by the agent, i.e., the agent is within a goal distance ($d_{goal}$) of the evader.\nGiven the problems of sample inefficiency derived from the goal-oriented reward since the agent only receives a reward when the objective is reached a shaping reward/penalization is added to help the agent understand the task objective in fewer time steps. This shaping penalization function can be observed in Fig. 4 for different shaping parameters k. We found that using a parameter k = 1 improves the sample efficiency of agents during training for this task.\nAdditionally, a penalization is added when the pursuer UAV is below 2000 ft of altitude to avoid simulation errors in the FDM due to ground contact. This condition is also an episode termination condition, which will be detailed in the next section.\nFinally, the piecewise reward function for the pursuer agent is defined as shown in Equation 18.\n$f(d_{rel}, h) = \\begin{cases} -1 + e^{-k\\cdot d_{rel}} + 2000 & \\text{if } d_{rel} < d_{goal} \\\\ -1 + e^{-k\\cdot d_{rel}} & \\text{if } h < 2000 \\text{ ft} \\\\ -1 + e^{-k\\cdot d_{rel}} & \\text{otherwise} \\end{cases}$  (18)"}, {"title": "2.4.4 Training Framework", "content": "Training is designed based on the Gymnasium framework architecture. The framework is divided into the simulation part and the task-related part. The simulation part is carried out by the Flight Dynamics Model, handling the transfer of information with the task-related part to provide the dynamic values calculated in the simulator. The task-related part handles all the training setup, episode initialization, evasion strategies of the evader, and the calls to the running FDM simulation of the evader, which is independent of the pursuer agent.\nAt the beginning of each episode, the training is set up as follows:\n\u2022 The target UAV is placed in a randomly sampled position given by its latitude ($\\phi$), longitude ($\\lambda$), and altitude (h).\n\u2022 The agent UAV, the pursuer, is placed randomly but depends on the previously placed evader's position. Table 2 shows the range of values added to the target's position to calculate the position of the pursuer. The latitude and longitude of the pursuer based on the distance and bearing to the evader are calculated using Equation 19.\n\u2022 At the start of the episode, an evasion strategy is randomly selected for the evader.\n$\\phi_2 = arcsin(sin(\\phi_1)\\cdot cos(\\frac{d}{R}) + cos(\\phi_1)\\cdot sin(\\frac{d}{R})\\cdot cos(\\theta))$\n$\\lambda_2 = \\lambda_1 + arctan2 (sin(\\theta) sin(\\frac{d}{R}), cos(\\frac{d}{R}) - sin(\\phi_1) \\cdot sin(\\phi_2))$\nWhere:\n\u2022 $\\phi_1$: Target's latitude in radians.\n\u2022 $\\lambda_1$: Target's longitude in radians.\n\u2022 $\\theta$: Relative bearing in radians (direction to move in, measured clockwise from north).\n\u2022 d: Distance between the two UAVs.\n\u2022 R: Radius of the Earth."}, {"title": "2.4.5 Validation Scenarios", "content": "To assess the capabilities of the trained agents to act against unseen evader behaviors during training, two different evasion strategies are included during validation:\n\u2022 Random evasion: A randomly selected setpoints strategy is defined to test the agents against unpredictable and irrational target movements.\n\u2022 User-controlled evasion: During validation, the possibility for a user to control the commanded values in the evader through $h_{ref}$, $\\Psi_{ref}$, and $V_{Tref}$ is defined to test the generalization capabilities of the trained agents to new evasion maneuvers.\nAdditionally, two different test scenarios are defined to evaluate the robustness of the trained agents:\n\u2022 Wind gust perturbations: Wind external perturbations are added during validation to test robustness, using the Dryden Gusts model defined in Section 2.2. The wind gust magnitudes introduced to the simulation can be seen in Table 5. These wind gusts directly affect the dynamics of the UAV calculated in the FDM, and the agent is unaware of these changes in the dynamics in a direct way.\n\u2022 Sensor noise perturbations: Sensor noise is added to the observations seen by the agent during validation to assess robustness against instabilities in the observations. The noise added for validation follows a Gaussian distribution with a mean of zero and standard deviation of 0.25 (N(0, 0.25)), considering that the observations are already normalized."}, {"title": "3 Results", "content": "In this section, we present the results obtained during this work, separating between the training results and the assessment of the trained algorithms during validation in different scenarios presented in Section 2.4.5.\n3.1 Training Results\nOur goal was to train and compare model-based and model-free RL algorithms, both in terms of performance and sample efficiency during training. To assess the latter, we set a predefined training budget both for hyperparameter tuning and for final training. These training budgets are 10M steps for hyperparameter tuning and 1M time steps for final training. All algorithms were trained using the same set of random seeds.\nWe consider an algorithm to have accomplished the task if, within the given budget, the agent is able to learn the final goal of catching the moving target before the episode ends. Given that the only positive reward is received upon catching the target, the theoretical maximum episode return is 2000, indicating that any episode return greater than zero means the target was caught.\nSeveral algorithms were tried during this work, including well-known RL algorithms such as PPO (Proximal Policy Optimization) [24], DDPG (Deep Deterministic Policy Gradient) [27], and TD3 (Twin Delayed DDPG) [28]. However, these three algorithms were unable to learn the task within the given budget (i.e., they did not surpass zero episode return), failing to find the correct set of hyperparameters to accomplish the task. This behavior is expected given that the task at hand is complex and goal-oriented, producing sparse rewards during training despite a shaping reward being added to help with sample efficiency. Considering that PPO is an on-policy method (and overall less sample efficient), and DDPG and TD3 are very sensitive to hyperparameters (a common problem in RL), it is expected that these algorithms could not be trained successfully under the given conditions and task.\nNevertheless, we found three algorithms that were able to accomplish the task under the given conditions. On the model-based side, DreamerV3 was chosen due to its excellent performance across a wide set of tasks, being state-of-the-art in some [21]. On the model-free side, SAC (Soft Actor-Critic) [23] and TQC (Truncated Quantile Critics) [22], which is inspired by SAC, were able to learn the task within the given budget.\nHyperparameter tuning was applied to both model-free algorithms, TQC and SAC. After tuning, the SAC algorithm was trained using both its own found hyperparameters and those from TQC, with better results observed using the latter. These hyperparameters are shown in Table 6. The model-based algorithm, DreamerV3, did not require hyperparameter tuning (as stated in the original paper), so default hyperparameters were used. For these hyperparameters, please refer to [21].\nIt should be noted that the SAC algorithm was not trained under the same conditions as DreamerV3 and TQC. Since SAC was unable to learn the task starting from the established training setup, a manual curriculum was added to SAC training, pre-training the algorithm for 500k time steps on a fixed line trajectory target strategy to facilitate learning. After that pre-training, regular training was applied as for the other two algorithms. This implies SAC was trained for a total of 1.5M time steps."}, {"title": "3.2 Validation Results", "content": "As mentioned in Section 2.4.5, the algorithms have been tested not only against the same evasion strategies used for the evader during training but also against two different strategies: completely random and human-controlled. A validation across all these circumstances was studied for the three algorithms, DreamerV3, TQC, and SAC.\nThis study consists of evaluating the performance of each algorithm for each evasion strategy separately, measuring the performance in mean episode return and standard deviation across all of them. The same random seeds were used for the three algorithms to handle randomness in the environment. Evasion strategies were tested across 100 episodes.\nFig. 7 shows the results of the validation for each algorithm across all evasion strategies, showing performance both in mean and standard deviation. As can be seen in the results, Dreamer and TQC achieve similar performance in scenarios 1 and 2, which are the training evasion scenarios, with Dreamer showcasing more stability in the decision-making process given the lower standard deviation. Both algorithms obtain excellent results in these scenarios, considering that the maximum possible reward is 2000, as mentioned before.\nHowever, when the algorithms are tested using the two validation evasion strategies, scenarios 3 and 4, it can be seen how TQC reduces its performance and increases its standard deviation across episodes considerably, whereas Dreamer is consistent with its performance, achieving similar results as for the training strategies. This showcases Dreamer's ability to generalize well to different target behaviors beyond those seen during training. We assume that the imagination-based training framework and latent state-space of Dreamer enable it to form a more robust representation and prediction of the target.\nThe SAC algorithm, on the other hand, shows far worse results than Dreamer and TQC, being unable to catch the evader with a random strategy and only able to reach the target inefficiently for the other scenarios."}, {"title": "3.2.1 Robustness Validation Against Perturbations", "content": "Algorithms have been tested against wind-gust perturbations to assess robustness. This validation was done following the setup explained in Section 2.4.5, but in this case, only the Dreamer and TQC agents were studied, given the poor results of SAC in validation under no perturbation conditions.\nSimilar to before, validation was done across all scenarios for each algorithm. Fig. 10a shows the results of the study against wind for the Dreamer and TQC algorithms across each scenario. These results show that both algorithms have similar performance on average, maintaining results comparable to the cases without wind perturbations. However, whereas Dreamer is stable across episodes, as seen in the standard deviation results, TQC increases its variance considerably compared to validation without wind gusts.\nAdditionally, the same study was done but evaluating agents' responses against sensor noise instead of wind. This sensor noise is represented as Gaussian noise in the observations, adding a zero-mean Gaussian noise with a 25% standard deviation for each value in the observation, which translates to high values of noise added in some cases. This is a particularly hard test for reinforcement learning algorithms trained in a fully observable MDP, given that the noise converts the process into a POMDP (Partially Observable Markov Decision Process) [29]. Fig. 10b shows the results of this study, again showcasing that the Dreamer agent seems to be more robust against perturbations, being able to reach the target for all evasion strategies, although with reduced performance compared to before. The TQC agent's performance is reduced compared to the other studies, especially for random evasion and human-controlled evasion, being unable to capture the evader when it uses a random evasion strategy. The latent state space of Dreamer, which is composed of current observation and recurrent observations, allows it to handle POMDP.\nFinally, both test perturbations were combined to assess the agent in these particular situations.\nGiven these results, we can assume Dreamer is a more robust algorithm than TQC for these particular scenarios, showcasing stable behavior under perturbations and generalizing to other target behaviors."}, {"title": "4 Conclusions", "content": "This paper presents a comprehensive study on training fixed-wing UAV pursuer agents using Reinforcement Learning (RL) to intercept dynamic evader targets. We compared the performance of model-based and model-free RL algo-rithms, specifically DreamerV3, TQC, and SAC, under a variety of scenarios, including unseen evasion strategies and perturbations such as wind gusts and sensor noise.\nOur findings indicate that DreamerV3 and TQC can efficiently learn the task within the predefined training budget, achieving high performance and stability in the training scenarios. DreamerV3, leveraging its imagination-based training and latent state-space representation, demonstrated superior generalization capabilities and robustness against unseen target behaviors, compared to TQC. While TQC also performed well, it showed greater variability in performance when subjected to different validation scenarios, particularly under perturbations.\nIn contrast, SAC struggled to achieve the same level of proficiency as DreamerV3 and TQC. Despite benefiting from a pre-training curriculum, SAC exhibited less stability and efficiency, particularly in scenarios involving random and human-controlled evasion strategies.\nValidation studies highlighted DreamerV3's robustness, showing consistent performance across all tested evasion strategies and perturbation scenarios. Dreamer's ability to handle partial observability, introduced by sensor noise, underscores its effectiveness in realistic, noisy environments. TQC, while effective in some scenarios, showed significant performance degradation under perturbations, emphasizing the need for more robust model-free approaches.\nThe robustness tests against wind gusts and sensor noise further solidified DreamerV3's position as a more resilient and adaptive algorithm. It maintained stable performance and efficiently captured the target even under severe perturbations, whereas TQC's performance significantly fluctuated.\nIn summary, this work underscores the potential of model-based RL, specifically DreamerV3, in complex UAV intercep-tion tasks. Dreamer's ability to generalize well beyond training scenarios and maintain robustness under perturbations makes it a promising candidate for real-world applications. Future work could explore further enhancements to model-free algorithms to improve their robustness and efficiency, as well as the application of these RL frameworks to a broader range of autonomous aerial tasks.\nThe insights gained from this study contribute valuable knowledge to the field of autonomous aerial robotics, highlighting the strengths and limitations of current RL approaches and setting a foundation for future advancements in the domain."}]}