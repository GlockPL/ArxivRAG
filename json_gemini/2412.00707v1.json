{"title": "Protect Your Secrets: Understanding and Measuring Data Exposure in VSCode Extensions", "authors": ["Yue Liu", "Chakkrit Tantithamthavorn", "Li Li"], "abstract": "Recent years have witnessed the emerging trend of extensions in modern Integrated Development Environments (IDEs) like Visual Studio Code (VSCode) that significantly enhance developer productivity. Especially, popular AI coding assistants like GitHub Copilot and Tabnine provide conveniences like automated code completion and debugging. While these extensions offer numerous benefits, they may introduce privacy and security concerns to software developers. However, there is no existing work that systematically analyzes the security and privacy concerns, including the risks of data exposure in VSCode extensions.\nIn this paper, we investigate on the security issues of cross-extension interactions in VSCode and shed light on the vulnerabilities caused by data exposure among different extensions. Our study uncovers high-impact security flaws that could allow adversaries to stealthily acquire or manipulate credential-related data (e.g., passwords, API keys, access tokens) from other extensions if not properly handled by extension vendors. To measure their prevalence, we design a novel automated risk detection framework that leverages program analysis and natural language processing techniques to automatically identify potential risks in VSCode extensions. By applying our tool to 27,261 real-world VSCode extensions, we discover that 8.5% of them (i.e., 2,325 extensions) are exposed to credential-related data leakage through various vectors, such as commands, user input, and configurations. Our study sheds light on the security challenges and flaws of the extension-in-IDE paradigm and provides suggestions and recommendations for improving the security of VSCode extensions and mitigating the risks of data exposure.", "sections": [{"title": "I. INTRODUCTION", "content": "In recent years, the extension-in-IDE (Integrated Development Environment) has emerged as a predominant trend, revolutionizing the landscape of software development tools. Among the most prominent platforms is Visual Studio Code (VSCode) [28], a highly versatile IDE developed by Microsoft. VSCode operates as a host environment, allowing users to integrate a wide variety of extensions, akin to mini-applications, into the core IDE. These extensions, ranging from language-specific linters and debuggers to comprehensive project management tools, significantly enhance the functionalities of VSCode. For example, the popular \"GitHub Copilot\" extension [2] utilizes GPT-4 models [3] to generate code suggestions directly within the editor, thereby improving productivity for developers. Furthermore, the rise of Large Language Models (LLMs) demonstrating exceptional performance in code generation, bug detection, and other software engineering tasks [22], [18], [21], [20] indicates a likely increase in AI-powered extensions enriching the development environment ecosystem. As of January 2024, the VSCode marketplace hosts over 50,000 extensions, reflecting the remarkable growth and diversity within this ecosystem [26]. This extension-in-IDE paradigm not only addresses the dynamic requirements of software developers, but also encourages a diverse community of extension developers, ranging from individual contributors to large corporations.\nIn this extension-in-IDE paradigm, the host VSCode acts like the OS, providing a comprehensive suite of APIs for resource access and interaction, as detailed in the VSCode developer documentation [39]. The host VSCode employs a sandboxing mechanism to separate these extensions and their security-critical resources, such as secrets, from each other. Moreover, VSCode provides interaction interfaces for each extension, such as InputBox and WebView, within the same window. These interfaces are usually inaccessible to other extensions, ensuring the integrity and security of each extension's user interface. This mechanism guarantees that extensions operate in isolated contexts, even though they are deeply integrated into the development environment, reducing the risks of cross-extension interference and security vulnerabilities.\nNew security risks in the extension-in-IDE paradigm.\nDespite the sandboxing mechanisms employed by VSCode to prevent unauthorized interactions and resource access, unique security challenges emerge in this extension-driven environment. Contrasting with mobile apps or the app-in-app models, like the WeChat mini-app system, where different apps typically operate in a distinct and full-screen UI environment, VSCode extensions run in the same workspace. This shared workspace enables a seamless development experience. However, extensions can access shared resources like files, configurations, and terminals, potentially leading to security vulnerabilities. A significant concern may arise when VSCode extension vendors, either unintentionally or through a lack of security practices, expose credentials or critical system functionalities within these shared resources. Such exposure can become a target for attackers, who might exploit vulnerabilities in extensions to access or manipulate this information.\nTo explore these security risks, we conduct a systematic analysis of the data exposure in VSCode extensions. Our goal is to uncover new attack vectors that enable cross-"}, {"title": "II. BACKGROUND", "content": "Cross-application security risks on Android applications [17], [32], [35], iOS applications [44], [42], web applications [6], and mobile in-app applications [23], [40], [43] have been extensively studied in the past. These research efforts have significantly advanced our understanding of the inherent security challenges and vulnerabilities in these software ecosystems. However, little or even no attention has been paid to the IDE platform. In this section, we briefly introduce the cross-extension isolation on the popular VSCode platform. We then describe how cross-extension attacks on IDEs are more challenging to conduct in practice.\nA. Architecture\nVSCode extensions are distributed as packed .vsix files. The VSIX archive holds all of the extension files, including the extension's source code (primarily JavaScript/TypeScript), resource files, and a package.json file [39]. The package.json file is a JSON-formatted manifest file that provides basic information and configurations about the extension such as its extensionID, version, description, activation events, requested commands, requested configurations, and dependencies. In addition, a packed VSIX file consists of one or multiple JavaScript (JS) files that provide core functionalities of the VSCode extension. It handles commands, interacts with the VSCode API, and manages the extension's lifecycle events. According to VSCode development documentation [39], extension developers utilize either TypeScript or JavaScript for extension development, but TypeScript code undergoes transcompilation into JavaScript prior to the packaging process.\nB. Security Model\nVSCode employs various security measures to isolate extensions and protect sensitive resources. We summarize the key protections below:\nExtension Isolation. VSCode employs a unique isolation mechanism for its extensions, ensuring that each extension operates within a secure and confined environment. This isolation is achieved by running each extension in a separate Node.js process, known as the extension host. The extension host is limited to using only the official VSCode APIs, which offer a restricted set of functionalities and interactions with the VSCode platform, such as the user interface or system resources. This restriction ensures that extensions cannot access certain resources. For example, extensions cannot directly access the SecretStorage API or the webviews and input boxes belonging to other extensions. This isolation prevents malicious extensions from interfering with the core VS Code application or other extensions.\nSystem Resource Access. Unlike some popular software systems such as Android or web applications, VSCode does not employ a traditional permission system to regulate API access. Instead, it provides a series of APIs defined by VSCode itself. These APIs are designed to allow extensions to interact with system resources in a controlled manner."}, {"title": "III. ATTACK VECTORS ON VSCODE", "content": "In this section, we describe the threat model focusing on potential security risks to user credentials in VSCode extensions. We identify three aspects of security risks related to user credentials: how extensions store credentials (Section III-A), how users input or set credentials (Section III-B), and how extensions control credentials (Section III-C). We show that improper or insecure practices in these aspects can lead to credential leakage, manipulation, or hijacking by malicious extensions. To demonstrate the existence of these attacks, we have developed our own proof-of-concept extensions. These extensions were uploaded to the official VSCode marketplace, demonstrating that they can pass the extension vetting process.\nA. Improper Credential Storage\nDespite the design of VSCode extensions to operate in isolation, not all data within an extension is isolated. For example, configurations and global states can be accessed by other extensions. This subsection provides an overview of the storage mechanisms in VSCode extensions and discusses the potential security implications of these mechanisms.\nStealing Data from Extension Configuration.\nConfiguration is a mechanism that allows VSCode extensions to store and retrieve user preferences and settings. However, it is not a secure storage, as all the installed extensions can access and modify the current configuration, which can lead to unintended exposure of sensitive data if not properly managed. Therefore, the extension developers should not store security- or privacy-critical data on configuration. However, some extensions do not follow this best practice and expose personal credentials such as API keys, passwords, or GitHub access tokens in their configuration. This poses a security risk, as an attacker can exploit this vulnerability to steal sensitive data. For instance, popular AI-driven extensions like ChatGPT EasyCode [9] (331k installs) store the OpenAI API key in the extension configuration, as shown in Listing 1. An attacker, through a malicious extension, can easily retrieve this API key using the vscode.workspace.getConfiguration().get() method. This could lead to financial risks as they gain unauthorized access to OpenAI's ChatGPT models.\nStealing Data from Global State. VSCode allows extensions access to arbitrary files on the host system without explicit user permission. This enables malicious extensions to locate and extract sensitive data stored by other extensions. One such example is the global state, a memento object that stores key-value pairs that are persisted across VSCode sessions. The global state is independent of the current opened workspace and can be used to store extension-specific data that does not change frequently. However, the global state is not isolated from other extensions, as all the installed extensions store their global state values in a file named \"state.vscdb\", which is a SQLite database. An attacker can exploit this vulnerability to read, write, or delete the global state of other extensions, potentially compromising their functionality, security, and performance. For example, an attacker can use the official API, ExtensionContext.globalStorageUri, to locate the global state file and read its contents. As shown in Listing 2, an attacker can access the global state of the popular Tabnine: AI Autocomplete & Chat extension [36] (more than 6.8M installs) and extract the chat history. The chat history is stored in the global state under the key \u201cCHAT_CONVERSATIONS\u201d, which contains the conversations between the user and the AI models. The attacker can send this chat history to a third-party server, potentially leaking sensitive information.\nManipulating Extension Storage. In addition to extracting data, attackers can exploit the lack of isolation in extension storage to manipulate or overwrite an extension's configuration and states. This can sabotage functionality or redirect behaviors for malicious objectives without the user's knowledge. This can sabotage the extension's functionality or redirect behaviors for malicious objectives, often without the user's knowledge. For instance, an attacker can update the configuration using the vscode.workspace.getConfiguration() .update() method. The tldrdev.discord-code-share extension [37], which allows users to send their code to Discord with a few clicks, stores the webhook URL in the configuration. As shown in Listing 3, an attacker can update this URL to point to a malicious webhook. This could lead to unauthorized access to the user's code, posing a significant security risk.\nB. Insecure Credential Input\nClipboard snooping is a security threat that malicious extensions can use to access the clipboard and steal sensitive information that users copy from other sources. The clipboard is a common way for users to copy and paste content to save time when writing code or configuring their projects, settings, or extensions. However, the clipboard is not secure and can be accessed by malicious extensions without the user's consent or awareness. To access the clipboard, attacker extensions can use the VSCode API, which provides a method called env.clipboard.readText() that returns the current text content of the clipboard. In software development, strings like access tokens and API keys are often long and irregular, which makes them prone to being copied and pasted into the IDE by users. A malicious extension could continuously monitor the clipboard to capture sensitive snippets like API keys that users paste.\nMonitoring the InputBox Clipboard. VSCode provides an InputBox interface for extension developers to collect user input. The InputBox interface is a simple dialog box that prompts the user to enter some text, such as a file name, a search query, or a configuration option. Although the InputBox interface is not directly accessible by other extensions, the attacker can still monitor the clipboard for complex but sensitive credentials that the user may copy and paste. One example of an extension that uses the InputBox interface to collect credentials from users is zhang-renyang.chat-gpt [46], which is the most popular ChatGPT-related extension in VSCode, with more than 667k installs. This extension allows users to chat with various Al models, such as GPT-4 and GPT-3.5, for various purposes, such as code generation. To use this extension, users need to enter their own OpenAI API key, which is a long and complex string that consists of 32 alphanumeric characters and a prefix of \u201csk-\" (see Figure 1). Users usually copy-paste them from sources like the OpenAI dashboard into the InputBox, rather than typing them by keyboard. This behavior enables attackers to continuously\""}, {"title": "C. Risk Credential Control", "content": "Commands are common UI events in VSCode that allow users to perform various actions, such as formatting code, running tests, or generating content. As shown in Figure 2, GitHub Copilot provides multiple commands for users to interact with its AI-powered code suggestion features. Different VSCode extensions can define their own commands and register them with the VSCode API, using unique identifiers such as \"github.copilot.generate\". To do so, the extension needs to declare the commands in the package.json file and implement the corresponding handlers using the commands.registerCommand API in the source code. Although the identifier is unique, it does not prevent other extensions from invoking these commands either programmatically or manually by the user. This section explores the potential risks associated with the control of user credentials through commands.\nStealth Command Listening and Binding. VSCode extensions are activated by certain activation events, such as when a specific language file is opened or a particular command is invoked. It means that an extension can listen to the commands of other extensions and activate itself when they are triggered. This allows a malicious extension to stealthily bind itself to a legitimate command and perform unauthorized actions in the background, such as displaying a fake input box to collect user credentials, sending the captured data to a remote server, or interfering with the expected behavior of the original command. For instance, we exploited this vulnerability to successfully attack Github Copilot Chat [2], a popular AI programming extension developed by the GitHub Team. Our malicious extension listens for the command \"github.copilot.generate\", as shown in Listing 5. When this command is invoked, our extension activates and displays an input box, tricking the user into re-entering their Github password to re-login to Github Copilot. Unwitting users, believing they are re-authenticating their session, inadvertently divulge their credentials.\nManipulating Commands for Secret Exfiltration. Extensions can define commands to control various operations, including handling sensitive information. Other extensions can execute these operations using the official API commands.executeCommand. This can potentially lead to unauthorized access to sensitive information. For example, the CodeGPT extension [13], another AI programming assistant that supports popular models like OpenAI GPT-4 [3] and Anthropic Claude [5], has a command \u201ccodegpt.removeApiKeyCodeGPT\u201d to let the user remove the API key. As shown in Listing 6, Attackers can execute this command, prompting the user to re-enter the API key for GPT-4 of OpenAI. The attacker can then automatically display an identical input box to collect the API key.\nExtension Command Confusion. Commands are defined based on text strings, which are used as identifiers and labels for the commands. Although VSCode does not allow extensions to register commands with the same identifier, it does not prevent extensions from using similar or confusing labels for their commands. An attacker can exploit this vulnerability by creating a command with a label that resembles a command of another extension, such as GitHub Copilot, and registering it with a different identifier. For example, an attacker can register a command with a label \"GitHub Copilot: Fix This\", where the lowercase L is replaced by an uppercase i, and use an identifier such as \"attacker.fix\". As shown in Figure 2, this label looks almost identical to the original command of GitHub Copilot, which is \u201cGitHub Copilot: Fix This\". This can create ambiguity or deception for the users, who may not be able to distinguish the commands of different extensions or may be misled to run a malicious command instead of a legitimate one. This may trick the user into running the attacker's command, which could perform malicious actions such as stealing the user's code, modifying the code, or redirecting the user to a phishing site."}, {"title": "IV. APPROACH", "content": "In this section, we describe our automated analysis tool to systematically evaluate the risk of cross-extension attacks in real-world VSCode extensions. Figure 3 presents the overview of our approach.\nA. Source Code Analysis\nDesign. To analyze the VSCode extensions, we need to extract all the relevant metadata and source code blocks that may contain security risks that described in Section III. We first unpack each extension into a directory, which includes the package.json file and the source code files. As described in Section II-A, the package.json file is a manifest file that describes the metadata and dependencies of the extension,"}, {"title": "VI. EVALUATION", "content": "To evaluate the effectiveness of our approach, we first performed a rigorous 10-fold cross validation on our ground truth dataset $D_{gt}$ consisting of 16,958 labeled data points across 500 extensions. The 10-fold cross-validation was designed to predict unseen extensions, providing a robust assessment of our model's generalizability. For the classifier, we fine-tuned a BERT model on $D_{gt}$ to predict whether a data point is credential-related or normal. We used a softmax output layer and a cross-entropy loss function with class weights of 0.01 for credential-related and 0.1 for normal data to handle class imbalance. Our classifier achieved impressive results on the test set, with an accuracy of 99.5% and an F1 score of 99.3%. The true positive rate was 93.02% and the true negative rate was 99.7%.\nSince the extensions were randomly selected from the entire dataset $D_t$, the cross-validation tests generalizability to other unseen extensions. With a high true positive rate and a low false negative rate, our approach can effectively uncover 93% of credential risks, showing its usefulness for systematically identifying potential data exposures. The robust metrics demonstrate the reliability of our model in discerning credentials from non-sensitive data for new extensions.\nFalse Positives and False Negatives. The false positive rate is 6.98% (39/444), where the model failed to identify a data point as credential-related when it actually was. Most false negatives had unusual credential formats that did not match the learned patterns. For instance, \u201chaasStudio.wifiSsidPwd\u201d"}, {"title": "C. Measurement of Impact", "content": "Landscape. Our study reveals that the issue of potential credential leakage is widespread across the VSCode extension landscape. Out of the 27,261 extensions analyzed, we identified 2,325 extensions that could potentially leak credentials. This represents approximately 8.5% of the total extensions analyzed, indicating a significant prevalence of this issue.\nFurthermore, each of these extensions was found to have an average of 2.11 data items that could potentially lead to credential leakage. This suggests that the risk is not confined to a single data item within an extension, but rather, multiple data items within an extension could potentially contribute to this risk. These results underscore the critical need for effective measures to detect and mitigate the risk of credential leakage in VSCode extensions. They also highlight the importance of our approach in providing a systematic and efficient means of identifying potential data exposures in a large-scale and diverse dataset of VSCode extensions. This can significantly aid in enhancing the security and privacy of these extensions, thereby protecting the sensitive data of their users.\nExposed Types. Table II presents the analysis of different vectors causing credential exposure in VSCode extensions. Firstly, potential storage access leaks were identified in 1,599 extensions through global state and configuration. Specifically, 316 extensions (18% of those using global state) leaked credentials via the globalstate API, with each exposing 1.38 unique data items on average. This indicates global state is a common vector for storing and propagating sensitive credentials. Additionally, requested and used configurations revealed credentials in 1,205 (9.6%) and 295 (2.7%) extensions respectively. While lower than globalstate, these configuration leaks still pose worrying risks considering the large user base. Lastly, in the category of credential control by commands, there are 724 extensions that potentially leak credentials. Within this category, 2.7% of extensions requested commands and used them to control credential-related data. These results demonstrate the various ways in which VSCode extensions can expose sensitive data, highlighting the need for effective security mechanisms to prevent such exposures.\nExposed Contents. Figure 4 presents the word cloud of exposed data items. It is evident that \u201cpassword\u201d and \u201capikey\u201d are the most frequent words among the credential-related data, indicating that these are the most common types of credentials that could be leaked by VSCode extensions. Interestingly, AI-related keywords like \u201copenai\u201d and \u201cchatgpt\u201d also appear in the word cloud. This suggests that as AI-driven extensions like GitHub Copilot [2] and Microsoft IntelliCode [27] become increasingly popular, the risk of exposing AI-related credentials also rises. This trend underscores the need for heightened security measures in AI-driven extensions, particularly those that require sensitive credentials for operation. The word cloud also reveals a variety of other potential credential leaks, demonstrating the diversity of data that can be exposed in VSCode extensions."}, {"title": "Data Exposure based on Extension Categories", "content": "To further understand the distribution of data exposure risks across different types of extensions, we grouped the identified 2,325 extensions based on the categories used in the VSCode marketplace. Table III shows the number and percentage of extensions that potentially leak credentials in each category. Our findings are surprising, as the percentage of exposed extensions varies significantly between categories. For example, common categories such as \u201cKeymaps\u201d, \u201cFormatters\u201d, and \"Themes\" had much lower rates than the overall average of 8.5%. On the other hand, Machine Learning extensions had the highest rate of 40.84% - almost five times the average. Similarly, Data Science and Education extensions also had high rates of 37.95% and 23.44%, respectively. The high exposure rate in AI/ML domains likely originates from their dependence on external services like OpenAI, Anthropic, and Google, which necessitate authentication. This is particularly alarming considering the growing popularity of AI-based tools. Moreover, we observed that categories related to security and infrastructure, such as Testing (23.78%), SCM Providers (28.03%), and Azure (18.48%), also had higher-than-average vulnerability rates. This is likely due to the frequent use of credentials to authorize access to repositories and cloud services. In conclusion, our results show that data exposure risks are strongly associated with certain VSCode extension categories that involve emerging technologies and security features. As the IDE evolves to support specialized domains like ML and cloud engineering, it is essential to protect credentials and secrets from leakage and prevent serious privacy and infrastructure threats."}, {"title": "Data Exposure based on Extension Popularity", "content": "Figure 5 illustrates the distribution of extensions exposing credentials relative to the number of installations. Out of the 2,325 extensions detected, more than half (1,441 extensions) have fewer than 1k installations. As the number of installations increases, the number of impacted extensions decreases. However, the percentage of affected extensions gradually increases. Interestingly, despite only detecting 25 affected extensions with more than 1M installations, the percentage of these extensions is the highest at 10.73%. This suggests that popular extensions are not immune to data exposure risks, emphasizing the need for robust security measures regardless of an extension's popularity."}, {"title": "Data Exposure in AI Coding Assistants", "content": "Al coding assistants are a new trend in the IDE ecosystem, as they aim to help developers write code faster, smarter, and easier. These tools leverage powerful AI models like GPT-4 [3], Claude-2 [5], and Gemini Ultra [8] to generate code snippets, suggest code completions, answer coding questions, and even chat with developers [14]. As we described before, however, these AI coding assistants also pose potential data exposure risks, as they may require or leak sensitive credentials for accessing Al services, APIs, or repositories. Therefore, in this section, we focus on these AI coding assistants in the VSCode ecosystem. We used common keywords (i.e., \"ai code\", \"code completion\u201d, \u201cgpt\u201d, \u201copenai\u201d, \u201cintellicode\", \"autocomplete\", \"language model\u201d, and \u201cchatbot\") to search the descriptions and tags of the extensions in our crawled dataset $D_t$. We found 179 extensions that fall into the category of AI coding assistants and detected 97 extensions that potentially leak credentials. This represents 54.2% of the AI coding extensions, which is much higher than the overall average of 8.5%. Figure 6 shows the published year of the AI coding assistants and their exposed rate. It is obvious that AI coding is increasingly popular, especially from 2022, and only in 2023, there were more than 100 new AI coding assistants published in the marketplace. Also, the rate of exposed credentials also increased. For instance, the rate for newly published extensions in 2023 increased to 70%. Among the AI coding assistants that could expose credentials, we found that 24 extensions store credentials in GlobalState, including 11 extensions with \u201cchatgpt-gpt3-apiKey\u201d and \u201cchatgpt-session-token\u201d. Furthermore, 71 AI coding assistants store the credential data in the configuration. This highlights the need for careful handling\""}, {"title": "VII. DISCUSSION", "content": "Lessions Learned. The most important lesson learned from our research is the critical need for robust security measures in the development and use of extensions in modern IDEs like VSCode. Our study reveals that even popular and widely-used extensions can have security risks that allow adversaries to stealthily acquire or control sensitive user data. This highlights the importance of rigorous security practices in the design and implementation of these extensions.\nAnother key takeaway is the significant role of cross-extension interactions in the security of VSCode. While these interactions can enhance the functionality and user experience of the IDE, they can also introduce new security risks. Therefore, it is crucial to carefully manage and control these interactions to prevent unauthorized access to sensitive data and resources.\nLastly, our findings highlight the potential risks associated with the increasing use of AI coding assistants in VSCode. These extensions often require sensitive credentials for accessing AI services, which can be exploited by malicious extensions. As such, there is a need for strengthened security measures in Al coding assistants, particularly those that require sensitive credentials for operation.\nMitigation Strategies. To mitigate data exposure risks in VS-Code extensions, we propose strategies for different stakeholders. Extension developers should follow VSCode's security best practices, avoiding plain-text storage of credentials and instead using secure APIs like SecretStorage. They should also avoid using command access for credential-related operations. Users should be selective when installing extensions, checking ratings, reviews, and descriptions before installation. They can utilize VSCode's Restricted Mode feature to manage which extensions are enabled for their projects, enhancing their development environment's security. The VSCode platform maintainers should improve the vetting process and security standards for extensions in the marketplace, while also providing additional security features for both developers and users to strengthen the overall VSCode ecosystem security.\nResponsible Disclosure. We have responsibly disclosed our findings to both the VSCode security team and the developers of the affected extensions. We contacted the developers via the email addresses provided on their GitHub repositories or marketplace pages. Out of the 2,325 extensions that potentially leak credentials, we were able to find email contacts for 1,343 extensions. We used a Google Sheets extension called \"Yet Another Mail Merge\u201d (YAMM) [25] to send personalized emails to each developer and track the status of the emails. Before we submitted this manuscript, the emails were opened by 438 developers, and bounced from 105 invalid email addresses. We note that in this process, we only collected the aggregated results of the emails provided by YAMM, and we never inspected the tracking information of individual addresses. Moreover, we did not obtain any information about or from individuals. Among the 438 opened emails, 15 developers acknowledged our findings and promised to fix them in future versions. Two developers also reported false positives due to semantic errors.\nDue to the low response rate from these extension vendors, we also reported these risks to Microsoft as a product security issue, since they provide security guidelines for extension development. They acknowledged our findings and assured us that they had shared the report with the team responsible for maintaining the product or service."}, {"title": "VIII. LIMITATIONS", "content": "Our work has several limitations that we acknowledge and discuss in this section. First, false positives and negatives can arise for a few reasons. Our analysis is based on the source code and metadata of VSCode extensions, which may not reflect the actual runtime behavior of the extensions. For example, some extensions may use code obfuscation techniques to protect their sensitive data, which we cannot detect by static analysis. Further, our approach relies on a fine-tuned BERT model to classify the data points as credential-related or not. Although our model achieves high accuracy and F1 score, it may make mistakes in some cases. Our model may fail to recognize some uncommon credential formats or misclassify normal data points as credential-related. Our ground truth data also focused narrowly on common secrets like API keys and passwords, potentially overlooking other sensitive data types. These factors contribute to both false positives and false negatives.\nSecond, our approach does not consider the dynamic and evolving nature of the VSCode extension ecosystem. As extensions continue to advance, new exposure vectors may arise outside of our analyzed data set. Moreover, while discovering many potentially vulnerable extensions, we lack measurements of real-world exploitability and user impact. Quantifying exposure severity could better demonstrate security implications for developers and users. Furthermore, our findings are restricted to VSCode extensions, whereas other IDEs utilizing extensions may introduce distinct threats. Comparative research across IDE ecosystems could reveal further dimensions."}, {"title": "IX. RELATED WORK", "content": "Software Developer Tools Security. Software developer tools, including IDEs, code editors, and compilers, are crucial for software development but can introduce security and privacy risks. Package management systems like npm and PyPi, while facilitating code reuse, pose challenges such as dependency confusion and malicious code injection. Zimmermann et al. [47] and Alfadel et al. [4] conducted large-scale studies on these ecosystems, proposing mitigation strategies. Code generation tools, such as IDE plugins, can also introduce vulnerabilities like injection attacks and broken access control. Li et al. [16] evaluated IDE plugins, highlighting common security issues. Pearce et al. [34] analyzed GitHub Copilot, finding that 40% of its generated code contained security vulnerabilities. Cloud-based development platforms, such as Amazon EC2 and Microsoft"}, {"title": "X. CONCLUSION", "content": "In this paper, we have identified and demonstrated a new category of security risks posed by cross-extension interactions in Visual Studio Code. This study, the first of its kind, reveals that malicious extensions can exploit the security flaws of other extensions or VSCode itself to steal or manipulate sensitive data (e.g., passwords, API keys, access tokens, etc.). We designed an automated analysis framework leveraging program analysis and language models to systematically detect such risks at scale. By applying our tool to over 27,000 real-world VSCode extensions, we discovered over 2,325 extensions that improperly expose credential-related data through commands, user input, and global state. Our study brings new insights and implications for the security of VSCode extensions and the extension-in-IDE paradigm."}]}