{"title": "THE RAMANUJAN LIBRARY - AUTOMATED DISCOVERY ON THE HYPERGRAPH OF INTEGER RELATIONS", "authors": ["Itay Beit-Halachmi", "Ido Kaminer"], "abstract": "Fundamental mathematical constants appear in nearly every field of science, from physics to biology. Formulas that connect different constants often bring great insight by hinting at connections between previously disparate fields. Discoveries of such relations, however, have remained scarce events, relying on sporadic strokes of creativity by human mathematicians. Recent developments of algorithms for automated conjecture generation have accelerated the discovery of formulas for specific constants. Yet, the discovery of connections between constants has not been addressed. In this paper, we present the first library dedicated to mathematical constants and their interrelations. This library can serve as a central repository of knowledge for scientists from different areas, and as a collaborative platform for development of new algorithms. The library is based on a new representation that we propose for organizing the formulas of mathematical constants: a hypergraph, with each node representing a constant and each edge representing a formula. Using this representation, we propose and demonstrate a systematic approach for automatically enriching this library using PSLQ, an integer relation algorithm based on QR decomposition and lattice construction. During its development and testing, our strategy led to the discovery of 75 previously unknown connections between constants, including a new formula for the 'first continued fraction' constant C1, novel formulas for natural logarithms, and new formulas connecting \\(\\pi\\) and e. The latter formulas generalize a century-old relation between \\(\\pi\\) and e by Ramanujan, which until now was considered a singular formula and is now found to be part of a broader mathematical structure. The code supporting this library is a public, open-source API that can serve researchers in experimental mathematics and other fields of science.", "sections": [{"title": "1 INTRODUCTION", "content": "With the rise in computing power and the rise of artificial intelligence, efforts have been made to harness these tools to further scientific discovery. Some of the earliest examples of such automated discovery efforts include the Automated Mathematician and later Eurisko (Lenat and Brown, 1984), systems that automatically discovered concepts in mathematics and later in other scientific domains. Another notable early discovery system is Graffiti (Fajtlowicz, 1988), which automatically generated conjectures in graph theory. Since then, the usage of computer algorithms as scientific tools (Wang, 1960; Davis and Lenat, 1982; Wolfram et al., 2002), and in particular as tools for aiding with mathematical proofs (Appel and Haken, 1976; Zeilberger, 1990; Wilf and Zeilberger, 1992; Buchberger et al., 2006), has skyrocketed. Noteworthy recent examples include papers by Google DeepMind (Davies et al., 2021; Fawzi et al., 2022; Romera-Paredes et al., 2023), which have utilized AI to find new algorithms for matrix multiplication, and generate conjectures in topology, representation theory, and combinatorics.\nA noteworthy example of computers assisting mathematicians is the Ramanujan Machine project (Raayoni et al., 2021; Razon et al., 2023; Elimelech et al., 2024), which specializes in automated conjecture generation in number theory. This project, named in honor of Srinivasa Ramanujan's substantial mathematical contributions (Berndt, 2012) and his unconventional work style, demonstrated"}, {"title": "2 INTRODUCING THE HYPERGRAPH OF MATHEMATICAL CONSTANTS AND THEIR RELATIONS", "content": "Recall that an (ordinary) undirected graph on a vertex set V is defined by an edge set E, each connecting two vertices. An undirected hypergraph, then, generalizes the concept of an edge so each one can connect more than two vertices. More explicitly, each edge is now a set of arbitrary size, instead of a set of size 2. In our (undirected) hypergraph, the vertices will all be mathematical constants, either given explicitly (e.g., \\(\\pi\\), e, up to a user-defined precision) or given by a formula converging to the constant. We choose to represent formulas using a canonical form that captures general continued fractions and infinite sums, namely the C-transforms of a complex sequence \\(f_n\\):\n\\(C[f_n] = 1 + \\frac{f_1}{1+\\frac{f_2}{1+\\frac{f_3}{1+}}}\\) (1)\nThis definition can always be treated as a formal expression, and when it converges it is instead defined as the limiting value. In practice, we generate each \\(f_n\\) using a rational function. C-transforms (and continued fractions in general) are powerful as they contain, for example, all infinite sums (that can be converted using Euler's approach (Euler, 1748)), whereas not every continued fraction can be converted back to an infinite sum. The C-transform captures any continued fraction in a canonical form that removes redundancy. The special case of \\(f_n\\) being a rational function already generalizes all polynomial continued fractions (Khinchin, 1964), which are general mathematical constructs that capture all trigonometric functions, Bessel functions, generalized hypergeometric functions and much more. The C-transform notation helps facilitating the systematic automated research in our work (see appendix A for further discussion).\nThe undirected edges (equivalently hyperedges) in our hypergraph are integer polynomial relations, forming a representation that generalizes a large number of formula structures. To define an integer polynomial relation, we first introduce integer relations: An integer relation on a vector of real numbers \\(x_1, x_2, ...\\) is a vector of integers \\(a_1, a_2, ...\\), not all of which are 0, such that \\(a_1x_1+a_2x_2+...=0\\). As an example, the formula \\(\\phi = \\frac{\\sqrt{5}+1}{2}\\) is equivalent to the integer relation \\(2\\phi-\\sqrt{5}-1=0\\), with the constants being \\(\\phi, \\sqrt{5}, 1\\) and the integer coefficients being 2, -1, -1. This example illustrates how integer relations are a general structure that captures mathematical equalities.\nWe expand on this definition by introducing polynomial relations, which have \\(a_1, a_2,...\\) as the integer coefficients of a (nonzero) multi-variable polynomial p, looking for a solution satisfying \\(p(x_1, x_2,...) = 0\\). For each identified polynomial, we define its degree as the greatest sum of all exponents in each monomial, and its order as the largest exponent that appears in it. These quantities let us measure how \u201ccomplex\" a given polynomial is, which we use for eliminating redundancies in our algorithm. As another example, consider the relation between \\(\\pi\\) and e, captured by the Ramanujan formula in figure 1. These types of relations constitute the edges of the hypergraph we construct automatically in this work.\nTo account for possible numerical inaccuracies arising from our computational methods, we propose a definition that allows for a (typically small) error \\(\\varepsilon := |a_1x_1 + a_2x_2 + ...| \\geq 0\\). This definition also applies to polynomial relations, in which case \\(\\varepsilon = |p(x_1, x_2, ...)|\\). Then, the precision of the relation is defined as \\([-log_2\\varepsilon]\\). With the ability to quantify each constant's numerical error as \\(\\varepsilon_1, \\varepsilon_2, ...\\), we instead replace \\(\\varepsilon\\) in the precision with \\(max{\\varepsilon, \\varepsilon_1, \\varepsilon_2, ...}\\), allowing the discovered relation to account for the inaccuracy of its constants.\nHypergraph edges stand for either linear relations with integer coefficients, like that between \\(\\sqrt{5}\\) and \\(\\phi = \\frac{\\sqrt{5}+1}{2}\\), or nonlinear (polynomial) relations, like that between \\(\\pi\\) and \\(\\zeta(2) = \\frac{\\pi^2}{6}\\). Interestingly, all edges representing linear relations satisfy a kind of transitivity in any subgraph they form: given an integer relation on a set of constants A, and another on a set of constants B, such that A and B share at least one constant x, it is possible to construct a relation on (A\\(\\cup\\) B) \\\\ {x}. However, edges like the ones we show between \\(\\pi\\) and e impose a more intricate structure that does not conform to regular transitivity but requires its generalization. A simple example of such transitivity is the (non-linear) polynomial relations between \\(\\pi\\) and its higher powers, or e and its rational exponents."}, {"title": "2.1 ALGORITHMS FOR AUTOMATED ENRICHMENT OF THE HYPERGRAPH", "content": "Our algorithms populate the hypergraph of integer relations by searching for sets of constants \\(x_1, x_2, ...\\) and polynomials p such that \\(p(x_1, x_2, ...) = 0\\) up to some tolerance. Section 3.1 summarizes the results, with a full listing in appendix F. The underlying mechanism is as follows:\nBeginning with a totally disconnected hypergraph (i.e. no relations are known yet), choose the search space of constants, partitioned into user-defined subsets, one of which may be fundamental mathematical constants, and another may be constants provided as limits of formulas (generally described by C-transforms). Then, each run of the algorithm takes some or all of the subsets in the partition, filters them further, and then takes their product space. In addition, the algorithm requires a choice of maximum degree and order for the polynomials. For example, the hypergraph in figure 1 resulted from a search that yielded an edge of degree \\(d \\leq 6\\) and order \\(o=2\\) for the polynomials on \\(\\pi\\) and e, which can be represented using a simpler degree 5 edge on the constant \\(\\pi e\\) instead.\nSecond, once the search space is decided, each set of constants is run through an integer relation algorithm to obtain a polynomial relation, using multiple precision arithmetic (see section 3 for details). For this we have chosen the PSLQ algorithm, whose supporting theorems ensure that it can recover a relation with the working precision for almost all real vectors (Ferguson et al., 1999), except for some special cases we note in appendix B. We discuss in the next section how we run PSLQ and what heuristic we use to filter integer relations that are likely to be false positives. This is the most resource-intensive part of the algorithm, with each run of PSLQ having a time complexity of \\(O(m^2)\\) where m is the maximal number of monomials in a polynomial with degree d and order o (see appendix C for a more detailed analysis). However, each run of PSLQ is independent from every other run, making the algorithm embarrassingly parallel, allowing us to scale the search space with the number of processors available.\nLastly, once significant relations have been collected in the previous step to populate the hypergraph, these integer relations are then used in future runs of the algorithm to save time: Given a set of constants X, if the hypergraph already has an edge \\(e \\subset X\\) whose degree and order are no more than the current maximal degree and order, then we do not run X through PSLQ again. Essentially, as the algorithm learns more edges of the hypergraph of integer relations, future runs become more efficient. This also means that the algorithm can accept a hypergraph of integer relations at any point (even if partially filled), using the given integer relations to save time."}, {"title": "3 IDENTIFYING INTEGER RELATIONS BETWEEN MATHEMATICAL CONSTANTS USING PSLQ", "content": "PSLQ is a numerically stable integer relation algorithm (Ferguson and Bailey, 1992). This algorithm uses a partial sum of squares scheme to manipulate a lattice, in a similar manner to the PSOS algorithm (Bailey and Ferguson, 1998), using LQ matrix decomposition (transposed QR decomposition). Follow-up works on PSLQ applied it in a wide range of settings (Bailey and Broadhurst, 2001). PSLQ accepts a vector of real numbers \\(x_1, x_2,...,\\) and returns integers \\(a_1, a_2, ...,\\) such that \\(a_1x_1 + a_2x_2 + ... = 0\\) within user-set tolerance, maximum number of steps, and maximum absolute value for all \\(a_i\\) (or nothing if no such relation exists). Ordinarily, any of the three user-set parameters can terminate the algorithm's calculations, but in this section, we demonstrate how and why we run PSLQ only until tolerance is exhausted, and present a novel heuristic for deciding if its result is significant, which we have termed Return on Investment (RoI).\nFrom a purely theoretical perspective, integer relations are either true or false, with the latter providing no insight towards the former. That is, if a certain integer relation is accurate to 100 digits of accuracy, but is then found to be incorrect at the 101st digit, it does not imply that any \u201csimilar\u201d integer relation will be fully accurate. To identify promising relations despite the finite precision, we rely on a perspective motivated by data compression and statistics: Given d binary digits, one can express about \\(2^{1+d}\\) integers (including negatives). Thus, if our working precision is d binary digits, and an integer relation algorithm yielded numbers with d binary digits, the result is most likely a false positive. With a tighter analysis, if one splits this reasoning into n integers, each with \\(d_1, d_2, ..., d_n\\) binary digits, then the total amount of options for all integers is about \\(2^{1+d_1} \\cdot 2^{1+d_2} \\cdot ... \\cdot = 2^{n+d_1+d_2+...}\\). As such, for precision of d binary digits, any integer relation algorithm yielding integers with \\(d_1, d_2, ...\\) binary digits such that \\(n + d_1 + d_2 + ... \\approx d\\) is most likely a false positive.\nBased on the above analysis, we introduce and apply the concept of Return on Investment (RoI) to analyse the validity of integer relations: Given an integer relation with a precision of d, on n integers each with \\(d_1, d_2, ...\\) binary digits, the RoI is defined as \\(n+d_1+d_2+...\\). With this definition in mind, it is reasonable to state that the higher the RoI, the more likely an integer relation is to be true. This assertion matches theory, as in that case, if an integer relation is theoretically true, then the RoI grows to \\(\\infty\\) as the working precision increases.\nExperimenting with the PSLQ algorithm to determine an empirical lower bound for RoI, beyond which integer relations can be considered significant, shows that an RoI of 2 seems to comfortably separate random results from false positives, with a generous margin of error (see figure 3). As such, this has been decided as the lower cutoff for integer relations generated by PSLQ to be considered significant as part of the algorithm in section 2.1. In order to further show how general RoI can be, we performed a similar experiment using a different integer relation algorithm called LLL (Lenstra et al., 1982), and described its findings in appendix D."}, {"title": "3.1 CONTINUED FRACTION CALCULATION AND CONVERGENCE", "content": "Motivated by previous works of the Ramanujan Machine (Raayoni et al., 2021; Elimelech et al., 2024), generalized continued fractions (represented as C-transforms) are a highly expressive framework of generating constants. One of the challenges of working with such mathematical formulas is that it is not always known in advance whether a certain formula converges to a limit. Nevertheless, our numerical experiments suggest that the asymptotics of each sequence determines its convergence properties and speed, leading to the following conjecture and analysis. This analysis aids in populating our database of continued fractions by rejecting formulas that do not convergence and helping with numerical identification tasks (see section 4). We propose the following conjecture, which generalizes on previous works (e.g., (Raayoni et al., 2021; Ben David et al., 2024)), providing the complete convergence conditions that we use when given an arbitrary C-transform:\nConjecture 1 Let \\(f_n\\) be a real sequence. The formula \\(C[f_n]\\) converges in the following cases, at a rate provided by the error \\(\\varepsilon_n := |1 + f_1/(1 + f_2/(... + f_n))) - C[f_n]|\\).\n* If \\(f_n = O(n^k)\\) for some \\(k < 0\\), then \\(\\varepsilon_n = O((n!)^k)\\)"}, {"title": "4 THE RAMANUJAN LIBRARY: PROVIDING PUBLIC ACCESS TO THE DATABASE OF INTEGER RELATIONS AND MATHEMATICAL CONSTANTS", "content": "The code we have written and the library we have curated are open-source and publicly-accessible, including the novel database of mathematical constants and the hypergraph of integer relations."}, {"title": "5 SELECTED DISCOVERED RELATIONS BETWEEN MATHEMATICAL CONSTANTS", "content": "The novel algorithm described in section 2.1 has yielded results which we summarize here. These results were found after running the algorithm on a smaller scale (an 8-core AWS machine) for several months. The total compute time of our results is, thus, about 16 compute months. However, since the algorithm is embarrassingly parallel, runtimes of the algorithm in practice go down with the number of CPU cores used. This shows the potential of our algorithm for running on much larger compute resources. Figure 4 shows 118 of the relations found, of which 43 were known in the literature and 75 are novel to the best of our knowledge. Figure 2 shows some example relations. Appendix F catalogues all relations in detail. These results were found after starting with a completely disconnected hypergraph, containing the constants of interest, and no initial relations. Here we present notable discovered relations involving \\(\\pi\\), e, ln2 and the Lemniscate constants.\nWe recall the following formula, attributed to Ramanujan (Berndt et al., 1999) (using the notation defined in equation 1, section 2):\n\\(\\frac{\\pi e}{2} = \\frac{1}{C[n]} + \\frac{1}{2}C[\\frac{(1 - 2n)}{(4n(n + 1))}] - 1\\)\nThe search job unearthed a family of conjectures that generalizes the second C-transform in this relation, given in table 3."}, {"title": "6 LIMITATIONS AND OUTLOOK", "content": "Our work presented a successful approach to automated formula discovery in number theory. The numerical nature of our algorithms means that results are not theorems, but rather conjectures awaiting proofs. In many cases, the discovered relations between formulas led to patterns that enabled generalizing formulas into families. Some of these families are connected such that proving one formula proves the entire family. We provided proofs for selected cases (shown in appendix E), hinting that the other discovered formulas can also be proven. In a similar vein, our findings reveal the complete rules of convergence of general continued fractions, yet these discovered rules lack a formal proof for many of the special cases. Future work by number theorists can follow on our groundwork to complete the proof and build the complete theory of convergence of continued fractions.\nThe Return on Investment (RoI) mechanism that we presented to quantify the success of the PSLQ algorithm can be directly extended to other integer relation algorithms such as LLL (Lenstra et al., 1982) (see also appendix D). This quantitative approach can contribute to the application of such algorithms in a wider range of fields, and will benefit from a thorough theoretical investigation.\nOur approach and implementation can benefit from many improvements. The search algorithm was implemented in a way that allows for distributed computing. We are now adapting the algorithm to utilize additional computing power using the online distributing network BOINC (Anderson, 2004). Such large-scale computing efforts will be very promising in generating new, more elaborate formulas and interrelations. The increase in the number of interrelations will require corresponding methods to eliminate false positives, which could be accomplished automatically by retesting them over time with higher precision constants. Sufficient precision will eventually reveal each potential false positive. Moreover, the current automated search algorithm relies on a pre-selected, static set of constants, which directly determines which relations can be found. Methods of automatically adding \"interesting\" constants to the database can improve the potential for finding novel relations.\nLooking forward, the publicly-available Ramanujan library that we developed can now serve number theorists for investigating mathematical constants with more powerful tools that are easily accessible. The hypergraph of integer relations may be viewed like a knowledge graph, and as a public resource, it can help open such areas of investigations to a broader community with different levels of expertise."}, {"title": "A ON GENERALIZED CONTINUED FRACTIONS", "content": "A generalized continued fraction, given two sequences \\(a_n, b_n\\), is the following formal expression:\n\\(GCF[a_n, b_n] = a_0 + \\frac{b_1}{a_1 + \\frac{b_2}{a_2 + \\frac{b_3}{}}} \\)\nIn practice, one defines two sequences \\(p_n, q_n\\) called the convergents, such that\n\\(a_0 + \\frac{b_1}{a_1 + \\frac{b_2}{a_2 + \\frac{}{ + \\frac{b_n}{a_n}}}} = \\frac{p_n}{q_n}\\)\nand then both sequences satisfy a recurrence relation, summarized by the following matrix product:\n\\(\n \\begin{bmatrix}\n 1 & a_0\\\\\n 0 & 1\n \\end{bmatrix}\n \\prod_{i=1}^{n}\n \\begin{bmatrix}\n 0 & b_i\\\\\n 1 & a_i\n \\end{bmatrix} =\n \\begin{bmatrix}\n p_{n-1} & p_n\\\\\n q_{n-1} & q_n\n \\end{bmatrix}\n \\)\nThe special case of \\(b_n = 1\\) is called a (regular) continued fraction. C-transforms are the special case of \\(a_n = 1\\). Using basic transformations, any generalized continued fraction can be converted into this latter form.\nOur choice of C-transforms arises from the following equivalence transformation property of continued fractions: Given any \\(GCF[a_n, b_n]\\) and nonzero sequence \\(c_n\\), the following equality holds:\n\\(a_0 + \\frac{b_1}{a_1 + \\frac{b_2}{a_2 + }} = a_0 + \\frac{c_1b_1}{c_1a_1 + \\frac{c_1c_2b_2}{c_2a_2 + \\frac{c_2c_3b_3}{}}} \\)\nOr, more compactly, \\(c_0GCF[a_n, b_n] = GCF[c_na_n, c_{n-1}c_nb_n]\\) (see figure 5 for more concrete examples). This equality holds even if neither side converges, in which case the convergents still coincide for all n. As such, if \\(a_n \\neq 0\\), the choice of \\(c_n = \\frac{1}{a_n}\\) yields \\(GCF[a_n, b_n] = C[b_n/(a_{n-1}a_n)]\\)."}, {"title": "B REBOUNDING DETECTION", "content": "Since we have elected to nullify two of the three stopping conditions of PSLQ, we must consider whether or not the remaining stopping condition can always be achieved. Namely, can every run of PSLQ terminate when only stopping once tolerance has been achieved. Even with a fairly standard choice of 75% tolerance, the answer is no, at least for the implementation we use. However, our experiments show that all such cases appear to exhibit the same general behavior: PSLQ first gradually increases the precision of the integer relation as usual, and at some point before reaching tolerance, it reverses course and starts reducing the precision (see figure 6 for an example run).\nOur implementation of PSLQ includes a failsafe that detects this behavior: As PSLQ iterates in the main algorithm, remember \\(p_{best}\\) the best precision ever obtained in the current run. If at any point \\(p_{current}\\) the current precision satisfies \\(2p_{current} < p_{best}\\), abort the algorithm and return no integer relation. However, this mechanism is only enabled after an initial grace period of 100 steps. This grace period was chosen since it was observed that during the phase where the precision increases, it does not always increase monotonically, and can fluctuate."}, {"title": "C TIME COMPLEXITY OF THE PSLQ ALGORITHM", "content": "Given x a vector of m real numbers, and assuming the minimal euclidean norm of all integer relations on it is \\(M_x \\in \\mathbb{R}\\), running PSLQ to retrieve an integer relation on x has a time complexity of \\(O(m^2 + m^3 log M_x)\\) (see (Ferguson et al., 1999) corollary 2). To estimate the time complexity of our runs of PSLQ, we substitute \\(M_x\\) with a constant based on the working precision. When applying PSLQ on a large scale, choosing an upper bound for the precisions of the constants involved prevents this \\(M_x\\) term from dominating the runtime, and so we can asymptotically treat this as a constant, leaving us with a time complexity of \\(O(m^2)\\).\nSince we run PSLQ to detect specifically polynomial relations, we should evaluate m in terms of the amount of constants n, the maximal degree d, and the order o of the relation, as these dictate how many monomials we expect the polynomial to have, and in turn determine m. If we ignore the limitation on the order, counting all possible monomials of a polynomial on n variables with degree d is identical to counting all multisets of size d on n + 1 items, each of which represents either one of the variables, or a dummy variable that completes the monomial to degree d. This has a closed form solution based on the stars and bars method:\n\\(m = \\binom{n+1+d-1}{d} = \\binom{n+d}{d} = \\frac{(n + d)!}{d!n!}\\)\nWhen including the limitation on the order, one obtains a smaller value than this through a more delicate analysis, but to the best of our knowledge, no closed form solution exists. Regardless, this means that each run of PSLQ will have a time complexity of \\(O(\\binom{n + d}{d})^2)\\)."}, {"title": "D THE GENERALIZEABILITY OF RETURN ON INVESTMENT (ROI)", "content": "The RoI measure that we introduced in section 3 is defined on numerically-conjectured integer relations. Our work relies on the PSLQ algorithm, which is one of many integer relation algorithms, and so it is natural to ask if RoI can be applied to other integer relation algorithms and reach the same conclusions. Here we motivate a positive answer to this question by demonstrating the same experiment shown in section 3 (specifically figure 3), but performed on the LLL algorithm instead (Lenstra et al., 1982)."}, {"title": "E PROVEN FORMULAS", "content": "After having found the formulas shown in the hypergraph (figure 4), we proved some of them, and we list these proven formulas here. We also plan joint works with mathematicians that focus on the proofs of the formulas and their potential impact in the relevant fields of mathematics, to be submitted to mathematics journals. This effort complements our main contribution in this work, which is concerned with the automated generation of the formulas.\nIn total, we proved 47 formulas of the form \\(a_0 + b_1/(a_1 + b_2/(... + b_n/(a_n + ...))), of which 22 we showcase in this table. 6 of the formulas can be generalized to three parametric families,"}, {"title": "F DETAILED INTEGER RELATIONS FROM THE HYPERGRAPH", "content": "This section provides the full data underlying the hypergraph (figure 4). Recall that according to appendix A, each of the integer relations presented here can be connected to infinitely many generalized continued fractions, and the C-transform is chosen as a representative for them all. Thus, every vertex in the hypergraph could represent infinite formulas that we consider trivially equivalent. This reasoning motivated the use of the C-transform as the canonical representative that defines the vertex. The edges in the hypergraph provide additional (non-trivial) equivalences. Some of the formulas and relations shown here can be found in the literature, and others are novel, to the best of our knowledge (as denoted in the left-most column). Every integer relation has been rearranged for clarity, though binary precision and RoI (rounded down) are still computed in terms of the original integer relation."}]}