{"title": "ChatSUMO: Large Language Model for Automating Traffic Scenario Generation in Simulation of Urban Mobility", "authors": ["Shuyang Li", "Talha Azfar", "Ruimin Ke"], "abstract": "Large Language Models (LLMs), capable of han-dling multi-modal input and outputs such as text, voice, images,and video, are transforming the way we process information.Beyond just generating textual responses to prompts, they canintegrate with different software platforms to offer compre-hensive solutions across diverse applications. In this paper, wepresent ChatSUMO, a LLM-based agent that integrates languageprocessing skills to generate abstract and real-world simulationscenarios in the widely-used traffic simulator - Simulation ofUrban Mobility (SUMO). Our methodology begins by leveragingthe LLM for user input which converts to relevant keywordsneeded to run python scripts. These scripts are designed toconvert specified regions into coordinates, fetch data from Open-StreetMap, transform it into a road network, and subsequentlyrun SUMO simulations with the designated traffic conditions.The outputs of the simulations are then interpreted by the LLMresulting in informative comparisons and summaries. Users cancontinue the interaction and generate a variety of customizedscenarios without prior traffic simulation expertise. For simula-tion generation, we created a real-world simulation for the cityof Albany with an accuracy of 96%. ChatSUMO also realizes thecustomizing of edge edit, traffic light optimization, and vehicleedit by users effectively.", "sections": [{"title": "I. INTRODUCTION", "content": "The increasing complexity of modern transportation sys-tems, with diverse vehicle types and traffic patterns, posessignificant challenges for traffic management and forecast-ing [1], [2]. This complexity not only escalates transportationcosts but also contributes to environmental pollution. Theneed for improved traffic planning and operation has led to asurge in studies focused on optimizing transportation systems,e.g., the strategic reconstruction of road infrastructure [3], [4].Traffic simulation has emerged as a powerful tool for modelingcurrent traffic scenarios, predicting future conditions, and miti-gating negative impacts, all while reducing the costs associatedwith real-world traffic planning implementations [5]. Amongthese tools, SUMO (Simulation of Urban Mobility) standsout as a versatile, open-source platform for traffic simulation,used widely for urban mobility research, operations, andplanning [6]."}, {"title": "II. LITERATURE REVIEW", "content": "LLM research is focused on enhancing natural languageprocessing objectives including text classification, languageinference, and semantic understanding. While they face chal-lenges in reasoning, ethics, and conflict resolution, they haveproven to be excellent tools for summarization, contextualcomprehension, and question answering [10]. Modern LLMshave undergone training on vast quantities of data and theirbehavior has been fine tuned by human feedback, such thatthe most competitive models are very good at followinginstructions and remaining focused towards specified tasks[15]. LLMs show promise in the enhancement of educationwhere precise answers or subject matter experts may not beeasily accessible [16].\nIn the transportation field some LLM related work hasemerged recently, focusing primarily on safety. TrafficSafe-tyGPT [17] finetuned Llama on a custom dataset curated fromNSTHA Model Minimum Uniform Crash Criteria guidelines,FHWA Highway Safety Manual, and ChatGPT generated data.The model learned domain specific concepts allowing it toaccurately answer challenging transportation safety questionswith concise answers. ChatScene [18] was developed to gen-erate safety-critical scenarios for autonomous vehicles as textdescriptions which are then broken down into sub-descriptionsthat can be used to instantiate the scenario in CARLA. Adatabase of scene components and descriptions was createdthat enabled ChatScene to assemble scene scripts from LLMoutput. AccidentGPT [19] combines scene perception andtrajectory prediction using computer vision on camera viewsfrom multiple vehicles and roadside units for environmentalunderstanding and collision avoidance. GPT4 based reasoningmodule is then used to provide proactive cues for humandrivers and traffic management authorities. It also stores keymoments and uses it for later analysis to improve futureautonomous driving decisions. Traffic Performance GPT (TP-GPT) proposes an intelligent chatbot designed to aid in trans-portation analytics. The TP-GPT utilizes LLMs to generateaccurate SQL queries and interpret traffic data, leveraging areal-time database of traffic information [20].\nLanguage models have been used in combination with com-puter vision for scene understanding for autonomous drivingin a variety of techniques [21]. ADAPT (Action-aware DrivingcAPtion Transformer) [22] provides an innovative end-to-endtransformer-based approach for generating action narration andreasoning in self-driving vehicles. ADAPT employs multi-task joint training to bridge the gap between driving actioncaptioning and control signal prediction. ChatGPT was usedas a co-pilot for assisted driving in [23] by converting vehicletelemetry, road state, human intention, and descriptions of theavailable controllers into a combined prompt. The responsefrom the LLM determines the course of action most appro-priate for those conditions. The system can switch betweenaggressive and gentle controllers, and handle lane changes andovertaking. The DiLu framework [24] incorporates GPT basedreasoning and reflection modules to perform decision makingfor an autonomous vehicle and has the ability to learn continu-ously. The system is able to use LLM common sense chain ofthought reasoning from prompts tailored to the scenario whichgenerates the final decision. Meanwhile the decision sequencesstored to memory can be reflected upon by the LLM to findmistakes and correct them. Similarly, LanguageMPC [25] usedan LLM for high level autonomous driving decision making,converting text descriptions to mathematical representationsto be used by the model predictive controller. It was ableto handle multi-vehicle coordinated control by generating aconvoy level decision that each vehicle interprets according toits internal state. BEVGPT is a generative pre-trained modelthat integrates driving scenario prediction, decision-making,and motion planning into a minimalist autonomous drivingframework using only bird's-eye-view images, outperformingprevious methods in key metrics and pioneering long-termBEV image generation for autonomous driving [26].\nMicroscopic traffic simulations such as VISSIM, SUMO,and MATSim are the basis of planning and optimizationstudies for traffic networks [27] and a few recent works haveincorporated LLMs with microsimulation tools. PromptGAT[28] leverages LLM inference to understand how weather con-ditions, traffic states, and road types influence traffic dynamics,which is used to inform policy in reinforcement learning fortraffic signal control. This additional information about real-world conditions helps to reduce the simulation to reality gap.In a similar vein, language assisted traffic light control in[23] employ LLM to understand the traffic observations andrecommended action from reinforcement learning, which thengenerates a justification for the action using chain of thoughtreasoning. Anomalous traffic conditions like blockages, andthe presence of emergency vehicles are some of the factors theLLM takes into consideration before selecting the appropriateaction. In [29], natural language queries are translated intodifferentiable loss functions for specified vehicle trajectoriesin order to facilitate scenario based traffic simulations. Thesescenarios include car following and collision trajectories for afew vehicles and compare them to ground truth from nuScenesdataset. There have also been advances in using LLM formicroscopic traffic behavior modeling, such as in [30], Chenet al. proposes a LLM-based method for car following be-havior modeling; however, they do not necessarily includemicroscopic traffic simulations."}, {"title": "III. METHODOLOGY", "content": "The overview of ChatSUMO, as Figure 1, presents astructure of the proposed system. The framework is designedto assist traffic simulation generation. ChatSUMO integratesadvanced chat model capabilities into the SUMO platformto enhance the efficiency and accuracy of traffic simulationand management. This integration leverages the power of theGPT model to simulate, modify, and analyze traffic scenarios,providing real-time insights and dynamic adjustments. Ourmethodology begins by leveraging the LLM for user inputwhich converts to relevant keywords needed to run pythonscripts. These scripts are designed to create an abstract networkor convert specified regions into coordinates, fetch data fromOpenStreetMap, transform it into a road network, and subse-quently run in SUMO simulation with the designated trafficconditions. We use Llama 3 8B, an open-source model, toparse the inputs and provide a summary of the output. The usercan then request another simulation with some modificationswhich create a different traffic condition. The LLM retaincontext for continued interaction. The core component of thismethodology is the gpt-reasoning module, which is respon-sible for three critical modules: Input Module, SimulationGeneration Module, Simulation Customization Module, andSimulation Analysis Module."}, {"title": "B. GPT-reasoning", "content": "The GPT-reasoning framework serves as the core elementof ChatSUMO's functionality. The process of our reasoningmodule is illustrated in Figure 1, encompassing input, simula-tion generation, modification, analysis modules. We will nowelaborate on the design of these modules, emphasizing theirpositive impact on increasing the human-machine interactionefficiency. In this work, we consistently use Llama 3.1 todecode the user input. In the reasoning module, it would firstanalyze the user's input which contains requirements (typeof network, city for simulation, traffic volume) to generatethe user's ideal simulation scenario. After running the initialsimulation, the LLM would analysis the output, producinga report for the simulation. Then ChatSUMO asks the userwhat modification they want to utilize for optimization, andthe modification module will comprehend the user's needsand modify the simulation scenario based on the specificcommands. Finally, the LLM in analysis module analyzes theresults of each simulation and the user can choose to comparethe output from each step of modification, which includesinformation like traffic density, average travel time, emissionsand fuel consumption."}, {"title": "Input Module", "content": "Input Module is header which deals withall the input information from users. In order to reduce thedifficulty of creating traffic simulation scenarios, we havesimplified the user input as much as possible, so that theuser can create the desired simulation scenarios without en-tering traffic-professional descriptions using natural language.Based on the Meta llama3.1 model, we create SUMOInput asthe traffic scenario identification model for analyzing usersinput. In this model, we customize it with specified someprompts as \u201cYou are taking input and generate keywords fora transportation simulation. Analyze the user input and givea python dictionary with these keywords ...\u201d. To generate theinitial simulation scenario, an example of user input can be:\u201cGenerate a simulation in city Albany with a radius of 3miles,and the volume of traffic should be medium.\" After parsed byChatSUMO, the natural language input would be transformed"}, {"title": "Generation Module", "content": "To generate the initial scenario ofthe Simulation, we build the simulation scenarios in SUMObut inputting the desired simulation scenarios from the user.Currently we can generate two types of simulation networks,including abstract scenarios (e.g., spider, grid networks) andreal-world networks. For real-world networks, users can enterthe name of the city, size of radius and the condition of traffic(e.g., light, medium, heavy). After the user inputs a simulationscenario, the input would be analyzed and understood byLlama, and then it would be extracted to keywords as pythondictionary. These keywords won't be directly transmitted topython, as ChatSUMO will analyze the user input and providesfeedback on whether the input is sufficient to construct thesimulation scenario.\nAfter the simulation generate module gets sufficient in-formation, these keywords would be processed by pythonscript which executes commands for generating simulation. Todownload the OSM (OpenStreetMap) of the required regionof city, ChatSUMO would execute \u201cosmGet.py\" to obtainthe osm map in predefined region. Then it would execute\u201cnetconvert\u201d commands which would convert the OSM mapto network file in SUMO. After converting, it would utilize\u201crandomTrips.py\u201d and generates random trips with convertednetwork and required traffic volume. Finally, it would createthe configuration file which can be executed by SUMO."}, {"title": "Customization Module", "content": "Based on the generated simu-lation, ChatSUMO supports the customization of simulationfrom the user's text descriptions by utilizing multiple cus-tomizing modules. After users enter their modification, theinput module would analyze and match the keywords withsome predefined customizing API. Through these apis, userscan remove edges, optimize traffic light, and add vehicles tothe simulation. Here are the details of implementing theseAPIs."}, {"title": "Edge and Lane Edit", "content": "Users can make modifications tothe roads in simulation by simply telling ChatSUMO whichlanes to remove, e.g., \u201cI want to remove Madison Avenue\u201dor \u201cI'd like to remove the first lane in Madison Avenue\u201d,thus validating some of the user's conjectures about traffic.To realize this function, ChatSUMO would first check whetherthe modified road is in the generated simulation, if so, the editmodule obtains the modification type for the road. Then themodule would extract the name of road as \u201cMadison Avenue\u201d,and generate the terminal command for SUMO tool netconvertthrough python script to modify the network. As user onlyinput the general name of the removed street, multiple edgesmight be found, then ChatSUMO would ask for the user'sdecision which edge to be removed."}, {"title": "Traffic Light Offset", "content": "Traffic light offsets are useful dealingwith multiple traffic lights to increase the crossing efficiencyof traffic flow. Users can enter commands like \u201cI want to setoffsets to all the traffic light in the simulation\u201d to set all thetraffic light in the simulation with offsets. With the traffic lightoffsets, intersections are capable of green wave control. Toimplement this function, once ChatSUMO receives the keyword \u201ctraffic light offset\u201d, it will generate terminal commandto call tlsCoordinator.py python script to modify the traffic-light offsets to coordinate them for the current traffic demand,and generate a tlsOffstes.add.xml which can be loaded intoSUMO."}, {"title": "Traffic Light Adaptation", "content": "Users can enter command like \u201cIwant to set offsets to all the traffic light in the simulation\u201dto optimize the traffic-light cycle in the simulation withtraffic light adaptation api. To implement this function, onceChatSUMO receives the command, it will call tlsCycleAdapta-tion.py python script generate an additional newTLS.add.xmlfile to sumo configuration, which modifies the signal cyclelength and the duration of green phases according to Webstersformula to best accommodate a given traffic demand."}, {"title": "Vehicle Generate", "content": "The vehicle generate API is used togenerate a vehicle with a given depart and arrival edge-pair.After the user entered the origin and destination, ChatSUMOwould first whether these roads are contained in the network,or it would tell the user \u201cEntered Roads are not in the currentnetwork\u201d. To generate route for the vehicle, the module wouldcall getOptimalPath to finds the optimal (shortest or fastest)path from depart edge to arrival edge by using Dijkstra'salgorithm. Then, a vehicle with the assigned route would beadd into the cityname.rou.xml file, which would be loaded intoSUMO simulation later."}, {"title": "Vehicle Type Edit", "content": "In the initial traffic simulation settings,both gas vehicles and electric vehicles are generated, and theproportion of them is 0.5 and 0.5. To change the proportion ofvehicle types, users can utilize the vehicle type edit module.To implement the customization, ChatSUMO creates a vehicletype dictionary which stores the detail information for eachvehicle type. After the user entered the modified proportion,ChatSUMO would utilize RandomTrips.py to generate the newroute file, including the customized vehicle proportion."}, {"title": "Analysis Module", "content": "For analysis module, it will process datafrom the output xml file generated by simulation, and interpretthem into analysis report, which involves density analysis,travel time analysis, emission analysis. Based on the outputof simulation, ChatSUMO would identify the top 10 con-gested roads, average travel time, the emission of pollutants,including CO2, CO, PMx, and the fuel consumption. Everytime customization ends, the output of simulation would bestored into a database. Each time the user makes customizationto the simulation, ChatSUMO would run another round ofsimulation. When the simulation finished, ChatSUMO asksthe user if they want to make a comparison with any previoussimulation, giving a more intuitive summary of how effectiveoptimization works."}, {"title": "IV. EXPERIMENTAL RESULTS", "content": "ChatSUMO with interactive web interface has been devel-oped using Streamlit framework in Python. An example forsimulation generation between user and Llama3.1 is visual-ized in Figure 5. Furthermore, experiment study has beenconducted leveraging the interface to evaluate the performanceof ChatSUMO."}, {"title": "A. Setup", "content": "In the experiment section, we will conduct tests and ex-periments on the proposed ChatSUMO agent to demonstrateits effectiveness on simulation generation and modification.For testing based on LLM, we utilized Meta's Llama3.1for parsing text input by users. In the experimental part, wewill evaluate its performance in two different constructionof network, the abstract network and real-world network.As for the metrics, we focus on the average traffic density,average travel time (TT), CO2 emission and fuel consumption(Fuel Cons) as evaluation. As the distribution of vehicles indifferent level of roads varies a lot, to obtain the average trafficdensity, we summarize the top 10 congested roads' density andcalculated the mean of summation."}, {"title": "B. Simulation Generation", "content": "As the foundation of whole process, the accuracy ofsimulation generation plays an extremely important role inChatSUMO. To evaluate the accuracy and effectiveness ofsimulation generation, we generate two types of networks.For the real-world network, we create a simulation of thecity of Albany, New York with the radius of 1 miles arounddowntown. In order to make these two simulations relatively ofthe same size and same density of streets, we generate a spider-like network with 20 arms, 10 circles and the distance betweencircles is 150 meters. The setup for traffic condition for bothsimulations is \u201cmedium\u201d, which is 2000 vehicles per hour. Tomeet these requirements, the user input is \u201cI want to see a traf-fic simulation in Albany. There should be medium traffic and itshould show me streets in a 1 mile radius.\u201d. The generated real-world simulation is shown in Figure 3. To validate the accuracyof real-world network, we calculate the number of edges in thenetwork created by ChatSUMO and the network downloadedby OSM. The number of the former is 30570 and the that of thelatter is 29325, indicating that the difference is 4.2%, whichshows a great performance of generation module. To createsuch a simulation, it takes about one minute to complete thesimulation, from entering user input, to generating the finalsummary. At the same time, we made a comparison withthe time needed to build such a simulation manually whichtakes about 15 minutes. Considering the proficiency requiredfor SUMO, beginners in traffic simulation may need to spendmore time creating a complete traffic simulation, showing theimportant contribution of ChatSUMO in time efficiency.\nTo evaluate how well the system handles different scales ofsimulations, we conduct another experiment on recording theprocessing time for simulation generation in different scales,from small-scale intersections to city-wide traffic networks. Inthis experiment, we set the scale of network as three levels (0.5mile, 1 mile, 3 miles) to simulate different traffic condition incity Albany. The experiment result is shown in Table I. Itcan be observed that for small-scale intersections, the trafficsimulation can be generated by ChatSUMO in 10 seconds,regardless the traffic condition. Regarding a normal scale,which is 1 mile, traffic simulation can be created in 30 seconds.However, the processing time of simulation increase signifi-cantly for a city-wide traffic simulation, considering the largescale network and large number of vehicles. In conclusion, theprocessing time for simulation generation depends on both thescale of simulation and the traffic condition, as well as the cpuperformance of the conducted machine."}, {"title": "C. Edge Modification", "content": "Blocking some the of main streets has a significant impactin urban traffic, which would change the constriction of trafficflow. To assess the performance of edge editing, we implementthe edit prompt in real-world network. In this experiment,we remove three levels of edges in simulation of Albany,"}, {"title": "D. Traffic Light Optimization", "content": "To optimize urban traffic signals, we have integrated twosignal optimization modules in ChatSUMO: one for settingsignal offsets and another for adjusting the duration of thegreen light phase, which are designed for both multiple andsingle traffic light optimization. Traffic light offsets is apowerful tools when dealing with multiple traffic light coor-dination in urban traffic, creating green wave for the crossingtraffic flow and increasing the efficiency of transportation.To evaluate the impact of traffic light offsets on the twodifferent network, in this experiment, we equip the simulationsseparately with traffic light offset with the command: \u201cI wantto set traffic light offsets for the simulation\". To optimizeindividual traffic signals, the traffic light adaptation modulein ChatSUMO can be utilized as shown in Figure 4. Thetraffic signal program shown in the figure is implemented atthe intersection of Madison Avenue and South Pearl Street. Aswe can see from the figure, after user input the prompt, theLlama3.1 process the text information and generate commandcreating the newTLS.add.xml file to modify the signal phasesin SUMO simulation.\nTo verify the effectiveness of traffic light offsets and adap-tation, we compare traffic flow density, travel times, CO2"}, {"title": "E. Vehicle Edits", "content": "To compare the effectiveness of vehicle type customization,we prompt the proportion of electric vehicles from 0.3 to 0.5,aiming to observe the difference of pollutant emission and fuelconsumption. Using the text input \u201cI want to set the proportionof electric vehicles as 0.5.\", we customize the vehicle typeproportion. The output of both simulations are shown inFigure 5. In these figures, we show the interactions with theChatSUMO interface, and the output generated by Llama3.1is also shown in three figures, which is very intuitive for usersto see the summary of simulations. After implementing thevehicle type customization, the analysis module compares twosimulations, and also generates a brief summary about generaltraffic, traffic density, pollutant emission and fuel consumption.It is obvious that the emission of CO2 and fuel consumptionhas fallen by a very large amount with the increase of electricvehicles. However, the traffic density does not vary a lot dueto the vehicle dynamic parameters are quite similar for bothvehicle types.\""}, {"title": "F. Discussion and Potential Application", "content": "Through the experiments above, we have tested the abilityof ChatSUMO in multiple fundamental functions, and theresults of these experiments shows that ChatSUMO plays anactive role not only in simulation generation but also in humanand machine interaction. When conducting these experiences,thanks to ChatSUMO's excellent human-computer interactionexperience, even though we made dozens of modifications tothe simulation, the experiment itself did not take too long.Additionally, due to the involvement of the LLM, the results of each simulation were very intuitive, saving us a lot of unnecessary effort in our experiments.\nThe ease of use and excellent interactive experience ofChatSUMO provide it with great potential for application. Forinstance, ChatSUMO can be easily deployed as an online ap-plication, similar to ChatGPT, giving an approach for internetusers to generate their own traffic simulation without masteringthe conventional tools by SUMO. Users, especially beginningusers can make preliminary testing on ChatSUMO by easilysetting the simulation scenario by text massage, and thencustomize the scenario through some short words. Integration"}, {"title": "V. CONCLUSION AND FUTURE WORK", "content": "In this paper, we have presented a comprehensive approachto generating SUMO simulations based on LLM. Our system,designed with the aim of democratizing access to trafficsimulation tools, includes four key modules: user input, simu-lation generation, simulation modification, and output analysis.These modules work in concert to simplify the process ofcreating and refining traffic simulations, making it accessibleto users with little to no prior experience in traffic modeling.The user input module ensures that users can easily specifytheir requirements and parameters without needing to under-stand the complexities of traffic simulation syntax. Throughthis integrated approach, we have demonstrated that complextraffic simulations can be generated, modified, and analyzedwith minimal user intervention and expertise. The Llama3.1-based system not only reduces the barrier to entry for trafficsimulation but also enhances the overall user experience byproviding a seamless and intuitive interface. Future work willfocus on further enhancing the system's capabilities, includingthe incorporation of more advanced simulation features andimproved user support tools, to continue expanding the acces-sibility and utility of traffic simulation technologies. To thebest of our knowledge, we are the first to implement a large-language model with SUMO, integrating human understandinginto simulation generation and modification. For the futurework, we aim to generate more compre"}]}