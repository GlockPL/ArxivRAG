{"title": "RecKG: Knowledge Graph for Recommender Systems", "authors": ["Junhyuk Kwon", "Seokho Ahn", "Young-Duk Seo"], "abstract": "Knowledge graphs have proven successful in integrating hetero-\ngeneous data across various domains. However, there remains a\nnoticeable dearth of research on their seamless integration among\nheterogeneous recommender systems, despite knowledge graph-\nbased recommender systems garnering extensive research attention.\nThis study aims to fill this gap by proposing RecKG, a standard-\nized knowledge graph for recommender systems. RecKG ensures\nthe consistent representation of entities across different datasets,\naccommodating diverse attribute types for effective data integra-\ntion. Through a meticulous examination of various recommender\nsystem datasets, we select attributes for RecKG, ensuring standard-\nized formatting through consistent naming conventions. By these\ncharacteristics, RecKG can seamlessly integrate heterogeneous data\nsources, enabling the discovery of additional semantic information\nwithin the integrated knowledge graph. We apply RecKG to stan-\ndardize real-world datasets, subsequently developing an application\nfor RecKG using a graph database. Finally, we validate RecKG's\nachievement in interoperability through a qualitative evaluation\nbetween RecKG and other studies. Implementation of RecKG can\nbe found at https://github.com/tree-jhk/RecKG.", "sections": [{"title": "1 INTRODUCTION", "content": "Recommender systems generally encounter the data sparsity issue\ndue to insufficient interactions between users and items [38, 39, 44].\nTo address this concern, studies in recommender systems have\nutilized knowledge graphs (KG), which contain valuable auxiliary\ninformation about users and items through relational connections\n[29, 31, 43]. KG-based recommender system enhance the quality\nof user and item representations by leveraging diverse entities\nand relations extracted from the KG. Furthermore, they enable the\nprovision of explanations for the recommendation outcomes by\nanalyzing the connections among users, items, and supplementary\ninformation. Given these characteristics and merits, numerous KG-\nbased recommender systems have emerged. Most of these studies\naim to enhance the quality of embedding representations [29, 30, 33]\nor focus on addressing data quality concerns [39, 43]. Their goals is\nto leverage KG to improve recommender system performance and\nnavigate data efficiently.\nAlthough various studies on KG-based recommender systems\nare ongoing, there has been limited study on the integration of KG\nbetween recommender systems. Integrating KG results in the broad-\ning of the existing knowledge graph, incorporating attributes\nfrom disparate recommender systems [14]. Furthermore, achieving\ninteroperability for KG facilitates seamless integration, commenc-\ning knowledge enrichment by drawing information from other KG\nand broadening the scope of entities and relations. This approach\nmaximizes the two core benefits of KG-based recommender systems:\nalleviating data sparsity and enhancing explainability [14, 33].\nHowever, integrating KGs among recommender systems to\nachieve interoperability can be challenging due to diverse semantic\nrepresentations across different systems [12, 16, 21, 34]. Addressing\ntwo key aspects, namely, consistency and diversity, is crucial to\novercoming these challenges. To begin with, the failure to maintain\nconsistency occurs when different representations are employed\nto model the same concept [7, 12, 21]. In such cases, confusion\nand ambiguity may arise when attempting to identify information.\nAdditionally, the inability to ensure diversity arises when different\nitems are missing from distinct data sources [7]. In such scenarios,\nthere is a risk of failure to capture crucial information.\nIn this study, we propose RecKG, a standardized KG for rec-\nommender systems, to address hindrances in KG interoperability,\nparticularly concerning consistency and diversity. RecKG is com-\nposed of entities essential for recommender systems, with a primary\nfocus on users and items. Through RecKG, we aim to resolve the\nfollowing issues. First, achieving consistency in data integration is\nessential to ensure that data from different systems uniformly repre-\nsent identical concepts and attributes. RecKG tackles this challenge\nby adopting comprehensive naming conventions for attributes as-\nsociated with users and items across various recommender systems.\nSecond, during the process of data integration, RecKG must cover a\nwide range of attributes to secure diversity within the recommender\nsystem research area. To accomplish this, RecKG is designed to min-\nimize the occurrence of missing attributes within the KG tailored\nfor recommender systems and enable broad coverage of attributes\nacross various recommender systems.\nIn summary, RecKG enhances consistency and diversity within\nthe knowledge graph (KG) for recommender systems, resulting in"}, {"title": "2 RELATED WORKS", "content": "In this section, we first elucidate the benefits of integrating KG\nacross various domains. Subsequently, we introduce existing studies\non KG-based recommender systems."}, {"title": "2.1 Knowledge Graph Integration Across\nDiverse Fields", "content": "In various research fields, adopting KG has proven effective for\nthe seamless integration of relevant data. Consolidating datasets\nthrough KG, we can facilitate enhanced data-driven decision-\nmaking and data analysis. Below, we present three distinct studies\nof KG-based integration in other research fields, not related to\nrecommender systems.\nIn the field of climate research, LinkClimate [34], an interopera-\nble KG platform for climate data, is proposed. Through LinkClimate,\nthe integration of diverse climate data using KG has been explored,\nenhancing the understanding of climate interactions. This research\nenables cross-domain analysis among various climate data.\nIn the field of Electric Vehicles (EV), EVKG [21], comprising EV-\nrelated ontology modules from various sources, is proposed. This\nintegration enhances interoperability with other KG, simplifying\nthe complex EV ecosystem and supporting decision-making related\nto technology and infrastructure.\nFinally, UrbanKG [16], an urban KG system that leverages KG\nfor the integration of diverse urban datasets, enhancing data anal-\nsis efficiency in the field of urban computing, is introduced. A\nstructured schema for UrbanKG is presented, offering a systematic\nrepresentation of fundamental urban entities and their intercon-\nnections. This schema encompasses a wide range of relations for\ndefining connections between entities, handles spatial-temporal\nurban data, and seamlessly integrates external knowledge bases.\nThe data integration serves to diversify data and acquire rela-\ntionship information between different systems. However, research\nin the three fields mentioned earlier all faces a common challenge,\nwhich is the integration of non-standardized heterogeneous data\n[16, 21, 34]. This challenge involves managing the diversity of data\nsources and structures from different systems. The ultimate goal\nof our study is to standardize a KG composed of attributes and\nrelations suitable for recommender systems. Through RecKG, we\nrepresent various recommender system datasets in a standardized\nformat and contribute to their seamless integration."}, {"title": "2.2 Knowledge Graph-based Recommender\nSystem", "content": "In the KG-based recommender systems, many studies aim to utilize\nKG containing auxiliary information for items and users, address-\ning the data sparsity problem. To effectively model this auxiliary\ninformation from the KG, KPRN [33] generates path representa-\ntions for both entities and relations within a KG, utilizing them to\nprovide recommendations for users. RuleRec [18] is a rule-based\nrecommender system that extracts understandable rules from a KG,\nconsolidating the derivation of explainable rules from the KG.\nFurthermore, there are ongoing studies focused on efficiently\nmodeling KG with rich information within neural network struc-\ntures. KGCN [29] is a framework using graph convolutional net-\nworks (GCN) to create embeddings for items in a KG and is\nrenowned for its effectiveness in mining important attributes and\ndetails within a KG. KGAT [29] is an attention-based recommender\nsystem that captures high-order structure and semantic informa-\ntion from a KG. MCCLK [44] introduces a multi-level cross-view\ncontrastive learning mechanism for KG-based recommender sys-\ntems, incorporating three distinct graph views: the user-item graph\nas a collaborative view, the item-entity graph as a semantic view,\nand the user-item-entity graph as a structural view.\nSeveral studies are also focused on mitigating the impact of noise\nin KG-based recommender systems, with the goal of improving their\noverall performance. A KG augmentation scheme is introduced [39],\naimed at suppressing KG noise during information aggregation to\naddress the challenge of the long-tail distribution of entities in\nKG and mitigate information noise between items and entities in\nKG-enhanced recommender systems. KRDN [43] is proposed to\naddress challenges stemming from the unnecessary spread of knowl-\nedge and noise in user-item interactions. KRDN efficiently trims\nirrelevant knowledge connections, eliminates disruptive implicit\nfeedback, and utilizes an adaptive knowledge refinement approach\nto preserve high-quality KG triplets.\nMost of existing studies primarily focus on constructing a single\nKG for the recommender system. On the other hand, research on\nmultiple KG-based recommender systems is still relatively inade-\nquate. Integrating KG from different recommender system datasets\nis feasible due to the presence of shared common items within the\nsame domain (e.g., the movie domain). In some studies, researchers\naugment a single recommendation system dataset with an external\nknowledge base to compensate for the lack of information in the\ndataset. For instance, KPRN [33] combines the ML dataset with\nIMDb\u00b9 dataset using movie titles and release dates. In KGCN [29],\nthe ML dataset is linked to Microsoft Satori\u00b2 using matching Satori\nIDs to construct a KG. The addition of attributes from different\nsystems expands the existing KG [14]. However, KG integration\nis a complex task because, even within the same domain, KG de-\nveloped in different systems typically has structural disparities\nof data representation. Existing studies use predesigned KGs for in-\ntegration between specific datasets, with limited attention to the\ngeneralization and standardization for KG integration [14, 32]."}, {"title": "3 KNOWLEDGE GRAPH FOR RECOMMENDER\nSYSTEMS", "content": "In this section, we introduce RecKG, a standardized KG designed\nfor recommender systems. We first articulate the goals of RecKG,\nfocusing on achieving interoperability. Subsequently, we present\nthe components of RecKG, including attributes. At the end of this\nsection, we provide a practical demonstration of RecKG's appli-\ncation on real-world datasets, emphasizing the modeling of the\nintegrated KG using RecKG and showcasing its applicability."}, {"title": "3.1 Goal of RecKG", "content": "While the majority of substantial studies concentrate on enhancing\nthe performance of KG-based recommender systems, there is a\nrelative scarcity of research on KG integration. Even existing studies\non integrated KG-based recommender systems often assume that\nKG integration is preconfigured, neglecting the consideration of\nhow to integrate different KG [14, 32].\nIntegration of KG from different systems becomes feasible ow-\ning to the presence of shared common items within the same do-\nmain, such as the movie domain. When these disparate systems\nseamlessly integrate, interoperability is attained. According to IEEE,\ninteroperability is defined as \"The ability of two or more systems\nor components to exchange information and and to use the infor-\nmation that has been exchanged [19].\" The challenge in achieving\ninteroperability arises from varying representations of same enti-\nties across diverse systems. To address this challenge, we introduce\nRecKG, a standardized KG for recommender systems, composed of\nentities essential for recommender systems, with a primary focus\non users and items. RecKG tackles this challenge by emphasizing\ntwo key aspects: consistency and diversity, with the overarching\ngoal of achieving interoperability.\n\u2022 Consistency: Conflicts in interoperability emerge when differ-\nent representations are employed to model identical entities [7].\nIn such cases, ambiguity may arise when attempting to identify\ninformation. Therefore, for effective data integration, it becomes\nimperative to ensure that data originating from other systems\nuniformly represent same entities. RecKG addresses this chal-\nlenge by adopting a comprehensive naming scheme for attributes\nassociated with users and items across diverse recommender\nsystems. This approach mitigates discrepancies in entity names\nwhen referring to the same entity [12]. This standardization\nensures consistency among heterogeneous datasets.\n\u2022 Diversity: Interoperability conflicts can also arise when differ-\nent items are absent in distinct data sources [7]. This conflict is a\ncrucial consideration when determining the attributes to include\nin RecKG. This is because, when standardizing a recommender\nsystem dataset using RecKG, it should encompass all the vital\nattributes for recommender systems. Thus, RecKG must be de-\nsigned to incorporate diverse attributes that can influence the\nmodeling of potential interactions between users and items. To\nachieve this goal, we meticulously examined attributes from var-\nious recommender system datasets [4, 6, 8, 11, 23, 25, 35, 36, 40]\nto include all those that are instrumental in understanding user-\nitem preferences."}, {"title": "3.2 Attributes of RecKG", "content": "RecKG is comprised of fundamental attributes of users and items,\ndrawn from various datasets of recommender systems [8, 11, 23]. In\nKG-based recommender systems, the attributes of users and items\nare considered as entities alongside users and items themselves.\nRecKG includes structured and named entities to encompass a wide\nrange of non-standardized attributes. The standardized entities\nwithin RecKG are shown in Figure 1, represented as nodes."}, {"title": "3.2.1 Attributes of Users", "content": "Users represent individuals utilizing the\nrecommender system. The attributes of users encompass demo-\ngraphic information, which serves as valuable data to distinguish\nusers effectively within recommender systems and mitigate cold-\nstart issues [2, 20, 27]. Most demographic user profiles typically in-\nclude age, gender, and occupation. Additionally, we have integrated\nuser residence information into RecKG attributes, considering the\nPoint of Interest (POI) domain [4, 6].\nIn RecKG, entities corresponding to attributes of user include\nthe following:\n\u2022 Age: Since age is a numerical data, we categorize it into age\ngroups to treat it as categorical information. This simplifica-\ntion offers advantages because similar age groups often share\ncommon interests. In recommender system research that utilizes\ndemographic information [2, 20], users are appropriately divided\ninto age groups through binning techniques to align with the\nspecific domain."}, {"title": "3.2.2 Attributes of Items", "content": "Items in recommender systems can vary\ndepending on the domain, such as movies, music, E-commerce, POI,\nand more. While attributes of the user entity do not vary across the\ndomains, the item entity can have significantly different attributes.\nConsequently, it is essential to carefully choose attributes of the\nitem entity that are adaptable and comprehensive to diverse datasets\nwhile ensuring naming consistency in RecKG.\n\u2022 Performer: A performer refers to an individual or a group that\nplays a specific role or performs. Specific examples of movie\nand music recommender systems are as follows: In the movie\ndomain, a performer entity refers to the actor or the actress in\na movie. These individuals typically play the main characters,\nand their acting skills and popularity significantly influence\nthe quality of the movie. In the music domain, the performer\nentity refers to singer or musician. Their style of song or music\ngreatly influences a user's preferences. In essence, the performer\nentity embodies the central figure or participant of the work\nof art within each domain, and their role and technical/artistic\ncontributions hold a significant position in recommendations.\n\u2022 Producer: The attribute producer refers to the entity responsible\nfor planning, creating, distributing, and managing items across\nvarious domains. Depending on the domain, the specific defini-\ntions and examples of a producer entity are as follows: In the\nmovie domain, a producer plays a pivotal role in the film pro-\nduction process, which encompasses budgeting, planning, and\noverseeing production. This role can be further specified, such as\na director or writer. In the music domain, a producer is actively\nengaged in recording and producing music, collaborating with\nmusic artists to plan and create music. This role can also be speci-\nfied, such as music producer or entertainment. It is worth noting\nthat the specific entities or organizations corresponding to the\nproducer attribute may vary depending on the domain or dataset.\nFor that reason, the producer could represent many attributes\nin a single dataset, they can be denoted as $\\text{Producer}_i \\space (1 \\leq i \\leq n)$, where n corresponds to the number of attributes associated with\nproducer. For instance, when converting a specific dataset into\nRecKG and there are multiple attributes corresponding to pro-\nducer entity, such as art directors, directors, and writers, each of\nthem can be represented as Producer1, Producer2, Producer3.\n\u2022 Type: The attribute type represents a specific category, genre,\nor classification of an item, used to identify the type to which\nthe item belongs. Depending on the domain, the definition of\ntype can be further specified as follows: In the movie domain,\nthe type entity indicates the genre of the film, encompassing\ncategories that categorize movies. In the music domain, the\ntype entity signifies the genre of the music, including styles\nlike rock, pop and jazz. In the E-commerce domain, the type\nentity represents the category or sub-category of products like\nappliances, clothing and electronics. In the POI domain, the type\nentity denotes the category of a place, including venue categories\nlike hotels, restaurants and tourist attractions. In essence, the\ntype entity categorize items based on similar characteristics in\nrecommender system.\n\u2022 Description: Description refers to textual information that pro-\nvides detailed information about an item. The definition of de-\nscription can be elaborated as follows: In the movie domain, it\nrepresents the plot or storyline of a film. In the E-commerce\ndomain, it provides detailed product explanations. Within KG-\nbased recommender system modeling, incorporating text data\ninto the KG can improve the quality of recommendation [25].\n\u2022 Item Image: Item Image is an image attribute that represents\nthe visual depiction of an item, used in recommender systems.\nIn the movie domain, it corresponds to the movie poster. In the\nmusic domain, it signifies the album cover image, while in the\nE-commerce domain, it represents the product image. In the\nPOI domain, it denotes pictures of places or tourist attractions.\nResearch on multi-modal KG-based recommender systems has\ndemonstrated that leveraging image data with KG supplements\nthe quality of recommendation [25].\n\u2022 Location: Most POI recommendation studies leverage location-\nnased social network (LBSN) [17, 24]. Diverse LBSN datasets\nprovide location information, either explicitly with longitude\nand latitude, or indirectly, such as through the country or state.\nThe location entity aligns with such information from LBSN.\n\u2022 Price: Price is a critical factor that significantly impacts a user's\ndecision when making product purchases in the e-commerce do-\nmain [42]. This quantitative attribute for products is sometimes"}, {"title": "3.2.3 User-Item Interactions", "content": "In KG-based recommender systems, a\ncollaborative KG (CKG) is utilized as a unified relational graph repre-\nsenting the relations between items and attributes, along with user-\nitem interactions [30]. This approach combines knowledge-based\ninformation with collaborative filtering effects into the KG through\nthe utilization of the item-attribute and the user-item interaction.\nTable 1 summarizes the user-item interactions in representative\nrecommender system datasets.\n\u2022 explicitInteraction: The explicitInteraction relation refers to di-\nrect and explicit interactions in which users provide feedback or\npreference information on items. Examples of such interactions\ninclude interval-based ratings (e.g., numerical scores between 1\nand 5), binary ratings (e.g., Dislike or Like), or ordinal ratings\n(e.g., Dislike, Neutral, or Like) [1]. In several KG-based recom-\nmender systems, interval-based ratings are often binarized by\nconsidering ratings above a certain threshold as positive feed-\nback [15]. In the case of binary ratings, items marked as 'like'\nor 'good' are commonly interpreted as positive feedback, and\nonly positive feedback is utilized as relations between users and\nitems in the CKG, while negative feedback is not [28, 30].\n\u2022 implicitInteraction: The implicitInteraction relation refers to\nindirect and implicit feedback provided by users to items. Ex-\namples of implicit interactions are clicks and purchases, which\nsignify a user's preference for an item, but do not provide in-\nformation on dislikes [1]. For a specific user, items that have\nnot been interacted with are considered as negative interactions,\nthough in practice, users interact with only a small fraction\nof items within a system. Thus, a substantial number of items\nare treated as negative interactions. Due to this, many recom-\nmender systems based on implicit feedback, including KG-based\nrecommender systems [30, 33], employ the negative sampling\ntechnique [5, 10]. This technique efficiently optimizes the loss\nfunction of models that predict interactions by sampling only a\nsmall fraction of items with which the user has not interacted\nand incorporating them into the loss function.\n\u2022 Saved Items: Saved Items are a part of implicit interactions,\nwhere users store items they personally prefer in dedicated stor-\nage. Depending on the system, these items can be stored sepa-\nrately in locations like playlists or in common storage options\nsuch as add-to-carts or add-to-favorites for archival purposes. In\naddition, the saved items entity can offer insights for profiling\nusers' personalized interests in items, in contrast to purchases,\nwhich might be delayed and do not occur immediately [35].\n\u2022 Review: Review is a textual expression of user preferences for\nitems. In some studies on recommender systems [13, 22, 26, 41],\ntextual data is transformed into embedding vector, which are\nsubsequently integrated into recommender systems as supple-\nmentary features."}, {"title": "3.3 Design based on RecKG", "content": "The KG for recommender systems, represented as Figure 1, has been\ndesigned to encompass various domains and attributes, as explained\nin Section 3.2. Accordingly, RecKG is tailored to standardize a wide\nrange of real-world datasets, covering a broad scope. Due to this\ncomprehensive nature, most attributes in real-world recommender\nsystem datasets can be represented through the entities in RecKG.\nFigure Figure 2 (a) and (b) illustrate the KG designs for real-world\ndatasets, specifically the ML 100k\u00b3 and the Yahoo!Movies (YM)\ndatasets, standardized with RecKG. The blurred portions denote\nattributes that do not exist in the particular dataset. Further details\nabout the datasets are provided in Section 4.1.\nIn comparison to the YM, the ML contains fewer attributes. The\nlimited number of attributes in the ML can only capture a small\nsubset of the various reasons for user preferences regarding items.\nTo maximize the advantages of KG-based recommender systems,\nsuch as explainability, it is essential to incorporate a more diverse\nset of attributes for the item entity. To complement the limited data"}, {"title": "4 CASE STUDY AND EVALUATION", "content": "In this section, we demonstrate the application of RecKG to various\nreal-world recommender system datasets using the graph database\nmanagement system Neo4j5. This not only showcases the necessity\nof RecKG for KG-based recommender systems but also illustrates its\nimplementability using a graph database. Finally, we delve into the\nexploration of additional semantics acquired through the seamless\nintegration of KG facilitated by RecKG."}, {"title": "4.1 Integration of Real-World Dataset", "content": "4.1.1 Instance of RecKG. Real-world recommender system datasets\ncan be standardized using RecKG. In Figure 3 (a) and (b), we have\nconcretely instantiated the ML-100k dataset and the YM dataset\ninto actual instances in a graph database according to the schema\nof RecKG. Figure 3 (a) represents a sample subgraph extracted from\nthe ML dataset, which includes user, movie, gender, age, occupation,\nrelease date, and genre. When applying the item's side information\nto Figure 1, these attributes are mapped as follows: The release date\ncorresponds to the released date attribute, while genre corresponds\nto the type attribute. Figure 3 (b) illustrates a sample subgraph\nextracted from the YM dataset, which includes user, movie, gender,\nage, release year of item, director, cast, genre, and more. When\nintegrating the item's side information into Figure 1, the attributes\nare mapped as follows: The release year maps to the released date\nattribute, genre corresponds to the type attribute, cast becomes the\nperformer attribute, director map to the producer attribute.\nInstances applied in RecKG's design for the ML dataset and\nthe YM dataset demonstrate that the adopted attribute names of\nRecKG effectively and consistently represent attributes in real-\nworld datasets. This highlights the achievement of one of RecKG's\ngoals, consistency. Additionally, all attributes from both datasets\nare comprehensively represented using RecKG's adopted attribute\nnames, successfully attaining diversity.\n4.1.2 Integration of RecKG. To validate RecKG's impact on achiev-\ning the interoperability between two KG for recommender systems,\nwe confirm the integrated scenario involving the ML dataset and\nthe YM dataset. To integrate the YM dataset into the ML dataset, we\nembedded the attributes of YM dataset's items, which are movies,\ninto ML dataset's items where both the title and release year are\nidentical. It is worth noting that since both datasets are structured\nbased on RecKG, the attribute names used are consistently identical.\nTherefore, thanks to this consistency, the attribute names remain\nunchanged in the integrated RecKG without any modifications, as\nshown in Figure 3 (c).\nAs a result of this integration, the KG expands with the addition\nof more entities compared to its state before expansion. This ex-\ntended KG contains a wealth of semantic information compared\nto the original KG, enabling more diverse recommendations along\nwith more detailed explanations. As shown in Figure 3, several\nnodes have been added from the YM dataset, specifically the per-\nformer and producer nodes. This expanded RecKG enhances the\ndepth of semantic understanding through the inclusion of these\nadditional nodes, enabling the delivery of more nuanced recom-\nmendation results to users."}, {"title": "4.2 Analysis of Integrated RecKG", "content": "When integrating two different RecKG, the enhanced RecKG makes\nit easier to uncover concealed semantics that may be difficult to\nidentify using the original KG alone. We will provide a detailed\nexplanation of this in Figure 4.\nThe addition of new nodes broadens the semantic scope of the KG.\nAs the performer attribute solely exists in the YM dataset, the per-\nformer nodes are added into the integrated RecKG, which is based\non the ML dataset. Among these performer nodes, the 'Tom Hanks'\nnode is connected to the movie node 'Forrest Gump' through the\n$\n\\text{PERFORMED} \\_ \\text{BY}\n$ relation. This connectivity implies that the user\nnode 'ML_125610' from the ML dataset forms a three-hop neighbor\nrelationship by following the path (ML_125610 $\\overset{\\text{RATED} \\_ \\text{ML}}{\\longrightarrow}$ Toy Story $\\overset{\\text{PERFORMED}\\_\\text{BY}}{\\longrightarrow}$ Tom Hanks $\\overset{\\text{RELATED}\\_\\text{ML}}{\\longrightarrow}$ Forrest Gump), sug-\ngesting a potential preference for the movie node 'Forrest Gump'\nby the user node 'ML_125610'. In practice, high-order connectivity\nis an important consideration in KG-based recommender systems,\nas it helps enhance the quality of recommendations [30].\nFinally, it becomes possible to perceive preferences for spe-\ncific side information of items. The inclusion of the producer\nnode, originally from the YM dataset, into the ML dataset re-\nsults in the integrated RecKG encompassing not only the per-\nformer node but also the producer node. This enables capturing\nlatent preferences towards the movie node 'Schindler's List' for\nthe user node 'ML_38802'. This is attributed to the presence of\ntwo three-hop neighbor paths: (ML_38802 $\\overset{\\text{RATED} \\_ \\text{ML}}{\\longrightarrow}$ Jurassic\nPark $\\overset{\\text{RELATED} \\_ \\text{ML}}{\\longrightarrow}$ Steven Spielberg $\\overset{\\text{PRODUCED} \\_ \\text{BY}}{\\longrightarrow}$ Schindler's List)\nand (ML_38802 $\\overset{\\text{RATED} \\_ \\text{ML}}{\\longrightarrow}$ Jaws $\\overset{\\text{RELATED}\\_\\text{ML}}{\\longrightarrow}$ Steven Spielberg\n$\\overset{\\text{PRODUCED}\\_\\text{BY}}{\\longrightarrow}$ Schindler's List). These paths are established through\nthe integration of the YM dataset into the ML dataset, where the\nYM dataset includes the director node 'Steven Spielberg', which is\nnot present in the ML dataset. Furthermore, it is worth noting that\nthe movie node 'Schindler's List' belongs to a completely different\nmovie genre compared to 'Jurassic Park' and 'Jaws'. Since these\nmovies have distinct genres, identifying the preference of the direc-\ntor node would have been challenging, as the ML dataset contains\nvery little information and does not include the director node. In\nother words, due to the limited information available in the ML\ndataset, seizing a preference for the specific director node 'Steven\nSpielberg' would have been challenging. As a result, it becomes\npossible to identify the preference of the user node 'ML_38802' for\nanother movie directed by 'Steven Spielberg', namely, 'Schindler's\nList'. In summary, RecKG's expansion not only supports the reve-\nlation of item preferences but also preferences related to specific\nitem information."}, {"title": "4.3 Qualitative Evaluation", "content": "In this section, we highlight the interoperability of RecKG, demon-\nstrating its ability to embrace various KG within the realm of rec-\nommender systems. To illustrate this, we compare RecKG with the\nKG formats employed in existing KG-based recommender system\nstudies [29, 30, 44], as shown in Table 2.\nThere are a total of 5 characteristics used for comparison: 'User\nAttribute', 'Item Attribute', 'Interaction', 'Consistency', and 'Inter-\noperability'. The characteristics 'User Attribute', 'Item Attribute',\nand 'Interaction' each indicate the presence or absence of user/item\nattributes and user-item interactions within the KG. The 'Consis-\ntency' characteristic indicates whether or not the same naming is\napplied for the attributes according to their characteristics, irre-\nspective of the dataset. Finally, the 'Interoperability' characteristic\nreflects the ability to represent and integrate most recommender\nsystem KG, ensuring both consistency and diversity.\nTable 2 presents a comparative analysis of RecKG by examin-\ning the KG used in the KGAT [30], KGCN [29], and MCCLK [44].\nIn these studies, 'Item Attribute' is the only characteristic fully\naddressed, whereas the 'User Attribute' is not considered. This\nis mainly because each study focuses solely on KG derived from\nitem attributes and user-item interactions. Regarding 'Interaction,'\nvarious types of user-item interactions, including purchase, add-to-\ncart, and add-to-favorites, are all treated uniformly. Although most\nstudies treat the multi-typed user-item interactions as the same,\neach interaction type carries a distinct meaning [35, 36]. Therefore,\ntaking these diverse interactions into account can improve the per-\nformance of KG-based recommender systems. RecKG, in contrast,\naddresses the aspect of diversity by containing item attributes, user\nattributes, and various types of user-item interactions. Addition-\nally, RecKG facilitates consistent naming across different datasets,\ndepending on the type of the attribute, due to its focus on the 'Con-\nsistency'. Consequently, RecKG is the only KG that incorporates\nthe 'Interoperability' characteristic, ensuring both diversity and\nconsistency. Through a qualitative comparison with other studies,\nit can be assessed that RecKG covers most KG in the recommender\nsystem field and takes interoperability into account."}, {"title": "5 CONCLUSION", "content": "In this study, we introduce RecKG, a standardized Knowledge Graph\n(KG) for achieving interoperability in recommender systems, ad-\ndressing the challenge of diverse representations. RecKG focuses\non consistency and diversity, employing a comprehensive naming\nscheme for user and item attributes and minimizing missing at-\ntributes. Demonstrated through case studies and a graph database\napplication, RecKG proves effective.\nFuture plans involve researching KG integration across domains\nusing RecKG and experimenting with KG-based recommender sys-\ntems within the integrated KG. We anticipate RecKG to standardize\nKGs, offering a comprehensive overview for future KG-based rec-\nommender system research."}]}