{"title": "LEDD: Large Language Model-Empowered Data Discovery in Data Lakes", "authors": ["Qi An", "Chihua Ying", "Yuqing Zhu", "Yihao Xu", "Manwei Zhang", "Jianmin Wang"], "abstract": "Data discovery in data lakes with ever increasing datasets has long been recognized as a big challenge in the realm of data management, especially for semantic search of and hierarchical global catalog generation of tables. While large language models (LLMs) facilitate the processing of data semantics, challenges remain in architecting an end-to-end system that comprehensively exploits LLMs for the two semantics-related tasks. In this demo, we propose LEDD, an end-to-end system with an extensible architecture that leverages LLMs to provide hierarchical global catalogs with semantic meanings and semantic table search for data lakes. Specifically, LEDD can return semantically related tables based on natural-language specification. These features make LEDD an ideal foundation for downstream tasks such as model training and schema linking for text-to-SQL tasks. LEDD also provides a simple Python interface to facilitate the extension and the replacement of data discovery algorithms.", "sections": [{"title": "Introduction", "content": "Data discovery helps to locate tables and data in the large data lakes, which have continuously growing datasets coming from a wide range of sources. It is also necessary for the understanding of data value and content, as well as for downstream applications like model training. Researchers have built systems for data discovery [5], supporting three pivotal tasks of keyword search, joinable table search, and unionable table search [9, 12, 13].\nWhile hierarchical catalogs with semantic meanings are essential for the usability of data [8, 11], there is currently no automatic solution to a hierarchical global view of datasets in the data lake with semantic meanings. Existing approaches can only cluster datasets into scattered groups or apply semantic annotation [8, 11]. The hierarchical global view aligns with users' way of understanding data. When combined with semantic queries, it can effectively facilitate users in data discovery. The core difficulty of hierarchical data organization lies in the understanding and processing of data semantics.\nLarge Language Models (LLMs) empowered data management is an emerging and important area [7]. LLMs have shed light on tackling the complexities involved in semantic processing of data, e.g., question answering and data wrangling. While the semantic organization of global data is important and the LLM approach is promising, no system has yet been proposed that enables solving the former using the latter. Empowering data discovery with LLMs presents the following challenges: i) how to effectively architect LLMs and data lakes to form a comprehensive solution; ii) how to tackle the complexities in aligning the semantic global view generation with the data/table search processing; and, iii) how to enable future extension of new algorithms.\nTo this end, we propose LEDD, an end-to-end prototype system to support LLM-empowered data discovery in data lakes. LEDD builds upon IGinX\u00b9, a federated data lake system [1] that supports flexible Python UDF (User-Defined Function) declarations to be used with SQL statements. LEDD extracts data from IGinX and implements processing algorithms in Python UDFs that exploit LLM services. Designed with a closed loop of processing workflows, LEDD integrates and enhances the data/table search processing with the semantic global view generation components. Building upon IGinX's Python UDF, the functions of LEDD can be easily extended and improved by replacing the corresponding UDF implementations."}, {"title": "System Overview", "content": "At a high level, LEDD (LLM-Empowered Data Discovery) provides three key functions: hierarchical global data catalogs with semantic meanings, semantic search of tables and columns, and real-time analysis of column relations. LEDD has been implemented in Python 3.11 and Javascript, leveraging OpenAI's API for LLM interaction, IGinX for data access and Zeppelin for basic visualization interface. LEDD will be open-sourced on Github."}, {"title": "LEDD's Architecture", "content": "The core functions of LEDD are implemented as an extended graph visualization component of Apache Zeppelin\u00b2 and a set of UDFs in IGinX. Users can interact with LEDD through Zeppelin's web interface, using IGinX queries, LEDD commands, or graphical interactions.\nData sources can be plugged into IGinX with schema or metadata automatically extracted. Building on the IGinX data lake, LEDD accesses global data and metadata within IGinX Python UDFs using the Python APIs. LEDD exploits AI models to generate semantic embeddings of tables and columns, as well as higher levels of categories. Instead of using LSH or HNSW indices [2] like other data discovery systems, LEDD stores embeddings in the vector database Milvus\u00b3, which offers efficient search of embedding vectors. LEDD's interactions with LLMs are also implemented within the UDFs. While LEDD has predefined LLM prompts for category summary and relation analysis, it exploits OpenAI's APIs for LLM access so that different LLMs can be used when necessary.\nIn the following, we describe LEDD's three key functions, as well as its extensible interface for new algorithms. Their corresponding processing workflows are illustrated in Figure 2."}, {"title": "Hierarchical Global Catalog Generation", "content": "Hierarchical global data catalogs with semantic meanings is essential for the usability of data. They represent the beginning of data exploitation. However, automatically constructing a hierarchical data catalog for an aggregated data lake has not been fully resolved due to (1) the difficulty in automatically identifying equivalence relationships between data schema, (2) challenges in semantically"}, {"title": "Semantic Search and Relation Analysis", "content": "In the visualization of the hierarchical catalog, LEDD supports semantic search of tables, as well as real-time relation analysis of newly expanded graph nodes. Given a query in natural language, LEDD calls the backend LLM to rephrase the query according to an example query and then calls an AI model for semantic embedding. Both the LLM and the AI model can be flexibly changed to any appropriate ones. The embedding vector is then searched against the index in Milvus, retrieving n closest related vectors. If the search is initiated for a visualized graph, the returned vectors are retrieved from IGinX and highlighted in the graph. If the search is initiated from an empty view, all the retrieved tables and columns are organized into a new hierarchical graph, with disconnected nodes aggregated into layers of categories based on the aforementioned clustering method in Section 2.2.\nLEDD dynamically generates relationships between nodes newly expanded from the graph and the original nodes during users' interactions with the visualized graph. Each newly added node is compared for similarity with nodes in the original graph, and the m most similar nodes are queried for relationships using LLM. For closely related nodes, LLM generates relationship descriptions, which are then displayed on the interface. The thickness of the edges represents the degree of similarity between nodes, allowing users to easily identify the most similar nodes, facilitating the identification of tables or columns that can be joined or unioned with."}, {"title": "Extensible Algorithm Interface", "content": "As shown in Figure 2, the algorithms for schema clustering, query embedding, and table/category relation analysis can be easily extended or replaced by implementing a different IGinX UDF. Figure 3 illustrates LEDD's implementation of the IGinX UDF for generating the hierarchical data catalog. To replace the algorithm, one needs only to i) declare the same class of UDFGenHierarchy, and ii) implement the transform function of the class under the same signature. If one is to replace the schema clustering algorithm, one only needs to replace the Aggregator class implementation in Figure 3. Similarly, users can replace or extend the algorithms for query embedding and table/category relation analysis by implementing a different transform function for the classes UDFGenEmbedding and UDFAnalyzeRelation."}, {"title": "Demonstration Scenarios", "content": "This section showcases our demonstration scenarios, which highlight the main functionalities of LEDD. These scenarios illustrate how LEDD organizes tables within the data lake into a semantic hierarchy of data catalogs. Users can utilize LEDD functionalities via Web interfaces or IGinX's Python APIs.\nDatasets. We exploit a recent benchmark for database schema analysis [4], involving 221,171 database schemas that are extracted from SQL files on Github. The total number of columns in the schema is about 10 million, on which we implemented and evaluated the hierarchy generation algorithms based on multiple open LLMs. Moreover, we also provided a number of typical join/union table search algorithms implemented as IGinX UDFs that can be changed or replaced flexibly.\nHierarchical global data catalog. LEDD can provide a hierarchical global catalog for all data in a data lake like IGinX, to facilitate data exploration and understanding. To be specific, as shown in Figure 4, the user could first see a limited list of topics that are summaries of the underlying 1.7 million tables, which are clustered and summarized into a hierarchy of topics. By clicking on any node in the graph, the user can see the corresponding topic expanded into a further list of phrases, which will finally get connected to a list of columns.\nSemantic search of tables. LEDD allows users to input a query for tables or columns in natural language. To be specific, as shown on the top left of Figure 4, the user can fill in the textbox a keyword (e.g., \"user\") or a natural-language query (e.g., \"info about users\") to retrieve semantically relevant tables and columns. Then, tables related to user information are retrieved from IGinX and highlighted in the graph.\nReal-time relation analysis. We will allow the user to click on the displayed graph of LEDD. In real time, the clicked node will be collapsed or expanded. If expanded, the newly displayed nodes will be analyzed by LEDD towards the original nodes for important relations, which are then represented as an edge with the relation summarized by the backend LLM. One such edge between nodes across non-neighboring layers is illustrated in Figure 4. This helps users identify potentially related datasets."}, {"title": "Conclusion", "content": "In this paper, we present LEDD, an end-to-end system with an extensible architecture that exploits LLMs to provide hierarchical global catalogs with semantic meanings and semantic table search for data lakes. It supports real-time analysis of relations among categories, data sources, tables, and columns. While it supports schema clustering, query embedding, and table/category relation analysis natively, LEDD facilitates users in implementing their own algorithms for the same purposes based on a Python class interface. LEDD provides a comprehensive solution to empowering data discovery with LLM within a data lake system, with a user-friendly Web interface for flexible user interaction and downstream data applications such as training data selection or data governance."}]}