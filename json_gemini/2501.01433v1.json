{"title": "MATHEMATICAL DEFINITION AND SYSTEMATIZATION OF PUZZLE RULES", "authors": ["Itsuki Maeda", "Yasuhiro Inoue"], "abstract": "While logic puzzles have engaged individuals through problem-solving and critical thinking, the creation of new puzzle rules has largely relied on ad-hoc processes. Pencil puzzles, such as Slitherlink and Sudoku, represent a prominent subset of these games, celebrated for their intellectual challenges rooted in combinatorial logic and spatial reasoning. Despite extensive research into solving techniques and automated problem generation, a unified framework for systematic and scalable rule design has been lacking. Here, we introduce a mathematical framework for defining and systematizing pencil puzzle rules. This framework formalizes grid elements, their positional relationships, and iterative composition operations, allowing for the incremental construction of structures that form the basis of puzzle rules. Furthermore, we establish a formal method to describe constraints and domains for each structure, ensuring solvability and coherence. Applying this framework, we successfully formalized the rules of well-known Nikoli puzzles, including Slitherlink and Sudoku, demonstrating the formal representation of a significant portion (approximately one-fourth) of existing puzzles. These results validate the potential of the framework to systematize and innovate puzzle rule design, establishing a pathway to automated rule generation. By providing a mathematical foundation for puzzle rule creation, this framework opens avenues for computers, potentially enhanced by AI, to design novel puzzle rules tailored to player preferences, expanding the scope of puzzle diversity. Beyond its direct application to pencil puzzles, this work illustrates how mathematical frameworks can bridge recreational mathematics and algorithmic design, offering tools for broader exploration in logic-based systems, with potential applications in educational game design, personalized learning, and computational creativity.", "sections": [{"title": "1 Introduction", "content": "Puzzles have long been a source of intellectual engagement and entertainment, captivating people worldwide through their ability to foster problem-solving and critical thinking skills. Among the diverse genres of puzzles, pencil puzzles, such as Slitherlink and Sudoku, are particularly celebrated for their logical depth and reliance on combinatorial reasoning and spatial intuition. These puzzles, as deterministic games with perfect information, have been extensively studied in terms of their computational complexity, solving algorithms, and automated problem generation. However, despite these advances, the creation of new puzzle rules has remained a largely ad-hoc process, lacking a unified and systematic approach.\n\nThe need for automating puzzle rule creation arises from practical challenges in maintaining engagement and diversity in puzzle-based games. De Kegel and Haahr observed that: \u201cPlayers tend to feel a sense of monotony from repetitive gameplay. However, this can be mitigated by introducing puzzles.\" (De Kegel and Haahr 2020).\n\nOffering a variety of puzzles, particularly those with novel rules, is widely regarded as an effective way to sustain player engagement. While specific studies directly supporting this notion are limited, Tang and Kirman demonstrated that curiosity-driven design, including the introduction of uncertainty and novel challenges, plays a critical role in maintaining player interest across diverse gaming contexts (Tang and Kirman 2024). Their findings emphasize the importance of catering to multiple dimensions of curiosity, such as epistemic and perceptual curiosity, to enhance engagement and foster loyalty in players. However, designing a wide variety of puzzle rules often involves significant production costs, making it challenging to achieve diversity efficiently. To address these issues, there is a clear demand for frameworks that enable the automatic generation of puzzle rules, which could facilitate the creation of diverse and innovative challenges.\n\nDuring our literature review, we found no studies that generated puzzle rules entirely from scratch. A closely related study explored the generation of two-player finite deterministic perfect information games by combining existing games (Browne and Maire 2010). However, this approach focused on combining pre-existing rules rather than creating new ones, and it relied on engineering methods instead of a mathematical framework. Other researches (Mantere and Koljonen 2007; Yoshinaka et al. 2012) have concentrated on generating specific puzzle instances that adhere to established rules, rather than defining new rules themselves. Herting proposed a mathematical formulation for the board and conditions of the Slitherlink puzzle, employing a rule-based approach for efficient problem-solving, but this work did not address the generation of new rules (Herting 2004). While existing studies have addressed puzzle solving and problem generation, the systematic creation of novel pencil puzzle rules from a mathematical framework has not been extensively investigated, to the best of our knowledge.\n\nIn this study, we address the lack of systematic methods for creating pencil puzzle rules by introducing a comprehensive mathematical framework. Our framework formalizes grid elements (e.g., points, edges, cells) and their relationships (e.g., adjacency) and iteratively composes them into structures that form the foundation of puzzle rules. Additionally, it provides a formal method for defining constraints and solution domains, ensuring solvability and coherence of the puzzles. This systematic approach enables the mathematical description and computational implementation of puzzle rules, offering a unified foundation for rule creation across diverse puzzle types.\n\nThis framework has broad implications beyond pencil puzzle design. Automated rule generation could enhance commercial games, personalize learning experiences, and contribute to fields like network security, where logic-based systems play a crucial role (Liang and Xiao 2013). Additionally, the framework opens avenues for future research into AI-driven rule generation and personalized puzzle design tailored to player preferences. By bridging recreational mathematics and algorithmic design, this work establishes a foundation for innovations in both entertainment and academic contexts.\n\nIn this paper, we begin by defining key terms and concepts related to pencil puzzles and their rules in In Section 2. Using these definitions, we demonstrate the framework's validity in Section 3 by applying it to well-known puzzles and verifying its effectiveness through computational implementation. In Section 4, we summarize this study by revisiting the key results and discussing their implications, including the potential for systematic puzzle rule design."}, {"title": "2 Mathematical Definitions of Basic Concepts Related to Pencil Puzzles", "content": "First, consider a two-dimensional grid of size $m \\times n$ ($m, n \\in \\mathbb{N}$). In this case, we can assign coordinates $(i, j)$ to each grid point from the top-left corner ($1 \\leq i \\leq m + 1,,1 \\leq j \\leq n + 1$). Similarly, we can assign coordinates $(i', j')$ to each cell from the top-left ($1 \\leq i' \\leq m,,1 < j' \\leq n$). Then, we can give annotations with variables $i, j, i', j'$ to grid points, cells, horizontal edges connecting grid points, vertical edges connecting grid points, horizontal edges connecting cells, and vertical edges connecting cells in the two-dimensional grid.\n\nWe define these annotations as grid point $p(i, j)$, cell $c(i', j')$, grid point horizontal edge $hp(i, j)$, grid point vertical edge $vp(i, j)$, cell horizontal edge $hc(i', j')$, and cell vertical edge $vc(i', j')$, and collectively refer to these as elements In this study. Furthermore, we will refer to sequences containing these as grid point sequence, cell sequence, grid point horizontal edge sequence, grid point vertical edge sequence, cell horizontal edge sequence, and cell vertical edge sequence.\n\nDefinition 2.1 (Grid point sequence P, Cell sequence C, Grid point horizontal edge sequence Hp, Grid point vertical edge sequence Vp, Cell sequence C, Cell horizontal edge sequence Hc, Cell vertical edge sequence Vc, Grid point edge sequence Ep, Cell edge sequence Ec, Element sequence E). Given a plane grid of size $m \\times n$, we define the grid point sequence P as\n\n$P := (p(1, 1), . . ., p(m + 1, n + 1))$\n\nSimilarly, we define grid point horizontal edge sequence Hp, grid point vertical edge sequence Vp, cell sequence C, cell horizontal edge sequence Hc, cell vertical edge sequence Vc, grid point edge sequence Ep, cell edge sequence Ec as\n\n$C:= (c(1,1), ..., c(m, n))$\n\n$Hp:= (hp(1,1), ..., hp(m + 1,n))$\n\n$Vp:= (vp(1,1), ..., vp (m, n + 1))$\n\n$Hc := (he(1,1), ..., h(m, n \u2212 1))$\n\n$Vc := (vc(1,1), ..., vc(m \u2013 1, n) )$\n\n$Ep := Hp \\cup Vp$\n\n$Ec := Hc \\cup Vc$\n\nAlso, we define the element sequence E composed of these sequences as\n\n$E := (P, Ep, C, Ec)$\n\nNext, we introduce relationships when two arbitrary elements are taken from the two-dimensional grid. This defines positional relationships for annotations from board information to variables as defined earlier. Here, positional relationships are binary predicates in the context of mathematical logic that take any element included in E as arguments. We define and introduce these relationships as horizontal adjacency, vertical adjacency, diagonal adjacency, and coincidence below.\n\nDefinition 2.2 (Horizontal adjacency H(x, y), Vertical adjacency V(x, y), Diagonal adjacency D(x, y), Coincidence M(x, y)). We define horizontal adjacency H(x, y) as\n\nSimilarly, we define vertical adjacency V(x, y), diagonal adjacency D(x, y), and coincidence M(x, y) as\n\nThese relationships are arbitrary binary predicates inspired by existing puzzle rules. Intuitively, as their names suggest, they are binary predicates that become true when free variables are assigned to elements that are adjacent horizontally, vertically, or diagonally on the board, or coincide.\n\nIn pencil puzzles, in addition to the previously defined elements, there are concepts that combine these elements (e.g., \"rooms\" in Shikaku, \"closed curves\" in Slitherlink). In this study, we will refer to these as structures. To mathematically handle structures, we define them as an extended concept of elements.\n\nFurthermore, we introduce order relations for various elements and sequences dealt with In this study.\n\nDefinition 2.3 (Order Relations). This research only deals with elements and sequences composed of them. Therefore,\n\n\u2022 The order relation between elements of the same type is determined by coordinates, and for different types, we define $p < c < hp < Up < hc < Vc$.\n\n\u2022 The order relation between sequences is such that deeper partial sequences are considered larger.\n\nWe define such order relations. Note that elements can be defined as sequences of depth 0 when the depth of non-nested sequences is considered 1.\n\nExample 2.1 (Order Relations). The following group of propositions\n\n\u2022 $p(1,2) <p(2, 1)$\n\n\u2022 $c(3,3) < hp(1,1)$\n\n\u2022 $hp(2,1) < (c(1, 1), (2, 3) )$\n\n\u2022 $(c(1,1), (2, 3)) < ((p(1,1)))$\n\n\u2022 $(c(1,1), c(2,3)) < (c(2, 1), c(2, 3) )$\nare all true.\n\nAs an implicit understanding, all sequences appearing In this study (except for the board solution mentioned later definition 2.8) are assumed to be in lexicographic ascending order (meaning that sequences with the same elements are uniquely determined and always sorted to be in the minimal lexicographic order). Therefore, note that all general set operations can be performed. For example, In this study, when there are sequences A and S, we describe \"S is a subsequence of A\" using the operator C as in set theory, $S \\subset A$. At this time, the operation Pseq(A) of taking the power sequence of A can be defined as\n\n$Pseq(A) = (S|S\\subset A)$\n\nDue to the previous understanding, the order of the power sequence is assumed to be in lexicographic ascending order of A.\n\nHere, we redefine the universal set dealt with In this study. For this purpose, we define an operation to flatten sequences as\n\n$flatten(S) =  \\begin{cases}   s & \\text{if s is an element} \\\\ flatten(s) & \\text{if s is a sequence}  \\end{cases} $\n\nwhere S is any sequence. At this time, using the previously mentioned E, we define the universal set U as\n\n$U = { A | \\forall x \\in A, flatten(x) \\leq flatten(E) }$\n\nNote that U cannot be identified with the infinite power set $P^\\infty(flatten(E))$ of flatten(E).\n\nFurthermore, we redefine the positional relationships of structures (vertical adjacency, horizontal adjacency, diagonal adjacency, coincidence) as follows.\n\nDefinition 2.4 (Positional Relationships of Structures). When there are structures X and Y, we define the positional relationship R as\n\n$R(X, Y) := \\exists x \\in X, \\exists y \\in Y, R(x, y)$\n\nwhere $R \\in { H, V, D, M }$. Note that this definition is recursive.\n\nHere, we define what it means for a graph to be connected. Let $R = { H, V, D, M }$ be the set composed of positional relationships. At this time, when there exists a sequence S and we introduce an element R of P(R), we can define an edge sequence E(S, R) by viewing S as a vertex sequence. Also, we can consider a graph G(S, E(S, R) ) from this.\n\n$E(S, R) = ((si, sj ) \\in S \\times S | r \\in \\forall R, r(si, Sj ) )$\n\nFurthermore, we define that a graph G(S, E(S, R)) is connected as\n\n$con(G(S, E(S, R))) = [\\forall u, v \\in E(S, R),\\exists P = (u = w_0, w_1,..., w_k = v )]$\n\nwhere the path P satisfies the following conditions:\n\n1. $w_0 = u \\Lambda w_k = v$\n\n2. $\\forall i \\in [0, k \u2212 1] \\cap \\mathbb{N}, (wi, wi + 1) \\in E(S, R)$\n\nAlso, we define that a graph G' (S', E(S', R') ) is a subgraph of graph G(S, E(S, R) ) as\n\n$subgraph(G', G) = [[S' \\subseteq S] \\land [E(S', R) \\subseteq E(S, R)] \\land [\\forall (u, v) \\in E(S', R), u, v \\in S']]$\n\nBased on these, we define structures in pencil puzzles below. However, if we adopt the definition that \"a structure is any element included in the universal set U,\" we would create disorderly objects that are far from existing puzzle rules and unrecognizable to humans. Since pencil puzzles should be solvable by humans, we provide a definition that is easily recognizable to humans. For this purpose, using the aforementioned adjacency relationships, we define composition operations as a progressive computational method to create structures from elements.\n\nDefinition 2.5 (Composition Operation). Let $R = { H, V, D, M }$ be the set composed of positional relationships. At this time, when taking an element R of P(R) and an element S of the structure sequence S at that point (definition to be given later), we define the operation\n\n$combine(R, E) = (S\\Co\\wedge S\\neg Cu)$\n\n$Co = con(G'(S', E(S', R)))$\n\n$Su = subgraph(G' (S', E(S', R), G(S, E(S, R))))$\n\nas the composition operation. Note that the very first structure sequence is E (definition 2.1).\n\nWe call the sequence resulting from this combine operation, or an element of E, a structure, and define the structure sequence S' as S' = SU (X), where X is the structure created by this composition operation and newly added as an element of S. What can be added as input for the next composition operation is an element of S'. In this sense, it is progressive, and when considering the composition operation as a mapping, note that the domain differs with each composition operation.\n\nIntuitively, the composition operation is a sequence composed of partial connected graphs of the graph spanned when introducing the positional relationship R to the structure E. Using these, we can create most of the structures in existing pencil puzzles.\n\nWe will call the structure sequence Send remaining after a finite number of composition operations the structure sequence Send possessed by a certain puzzle rule. Note that E C Send.\n\nSince simply stating \"structure\" can lead to confusion between \"a set containing all of a certain structure\" or \"a specific structure existing on the board,\" we will refer to the former as \"structure\" and the latter as \"the structure\" (the result of combine is the former).\n\nExample 2.2 (Structures Possessed by Slitherlink). After performing the composition operation\n\n$R= { H, V, D}$\n\n$E = Ep (\\\u0395\\neg E)$\n\n$X_1= combine(R, E)$\n\n(1)\n\nthe remaining structure sequence S = EU (X1) is the structure sequence possessed by Slitherlink, and X1 is the structure possessed by Slitherlink. Note that in the case of Slitherlink, there is a condition that the structure is a closed curve and there is only one on the board, but this is restricted by the constraints to be described later.\n\nWhen a certain puzzle rule exists and it is determined what structures it possesses, we can define a board. A board is specified by individual puzzle rules and the size of the two-dimensional grid. In other words, we define a board as the union of elements that always exist and a subset of structures created by composition operations. Unless otherwise specified, we assume the size of the two-dimensional grid is m \u00d7 n (m, n \u2208 N).\n\nDefinition 2.6. Let there be a puzzle rule P, and let it possess structures $X_1,X_2,....$ We define that B is a board of P if the following proposition is true:\n\n$B\\in (EU (X_1) U ( X_2 ) \\cup\uff65\uff65\uff65 | X_1 \\in Pseq(X_1), X_2 \\in Pseq(X_2),...,)$\n\nIn pencil puzzles, structures existing on the board have corresponding states. We define the specific numerical values, constants, or vectors as solutions (e.g., 3, x1, (2, 3)). For convenience In this study, we specifically correspond edges to 1 when \"effective\" and 0 when \"ineffective\". Depending on the puzzle rule, there may be no corresponding state for a certain structure, in which case we specially define the value as null.\n\nFrom the above discussion, to define a puzzle rule, we need to define which set the solutions corresponding to the structures possessed by the puzzle rule belong to. For this purpose, we define the set of states using the term domain below. Note that when there is a certain board, not all structures contained in it necessarily have only one solution.\n\nDefinition 2.7 (domain). We define the set of possible states corresponding to structures possessed by a certain puzzle rule as the domain. When a puzzle rule P possesses a structure X1, we will describe it in the form X \u2192 S to mean the domain S of X1."}, {"title": "Example 2.3 (Slitherlink's domain). The domains of the structures possessed by Slitherlink are described as:", "content": "$P\u2194 {null}$\n\n$C\u2194 {0,1,2,3,4}$\n\n$Ep\u2194 {0,1}$\n\n$Ec\u2194 {null}$\n\n$X_1\u2194 {null}$\n\nwhere X1 is given by Equation (1).\n\nBy defining the domain, when a certain board B exists, we can consider possible solutions for each structure existing in B. If we describe the solution corresponding to a certain structure X as solution(X), when viewed as a sequence (defined as a board solution), since the domain of the structure is not necessarily a singleton, we obtain a sequence of board solutions corresponding to B. We define this as the board solution sequence S(B).\n\nDefinition 2.8 (Board Solution, Board Solution Sequence S(B)). When a certain board B exists, we define the sequence of solutions corresponding to each structure contained in B as the board solution. Also, we define the sequence composed of all board solutions in B as the board solution sequence S(B) of board B. Note that among the sequences dealt with In this study, only the board solution is not in lexicographic ascending order, but corresponds one-to-one with the elements of board B.\n\nRemark 2.1. When B is a board,\n\n$\\forall S \\in S(B) , s = |B| = |S|$\n\n$\\forall i \\in [1, s] \\cap \\mathbb{N}, |Bi| = |Si|$\n\nholds. (The elements of B and S(B) correspond one-to-one.)\n\nBy determining the structure sequence and domain existing in puzzle rule P, the sequence composed of all boards in P and the elements of the corresponding board solution sequence are determined. We define these as the board sequence B and the board sequence solution sequence S(B) below, respectively.\n\nDefinition 2.9 (Board Sequence B, Board Sequence Solution Sequence S(B)). When a certain puzzle rule P exists, we define the sequence composed of all possible boards from the structures possessed by P as the board sequence B. Also, we define the sequence of board solution sequences corresponding to each element of the board sequence as the board sequence solution sequence S(B).\n\nRemark 2.2. $S(B)| = |B|$ holds (The elements of S(B) and B correspond one-to-one.).\n\nExample 2.4. For convenience, we consider the board sequence and board sequence solution sequence of Slitherlink on a very small size (2\u00d72) two-dimensional grid. Note that since we are not considering constraints, the board sequence includes boards that would not be possible in general Slitherlink.\n\nWhen\n\n$P = (p(1,1), . . .p(3, 3) )$\n\n$Hp= (hp(1,1),... hp(3, 2))$\n\n$Vp= (\\upsilon\\rho(1,1), . . . Up (2, 3) )$\n\n$C = (c(1,1), . . . c(2, 2))$\n\n$Hc= (he(1,1), h(2,1))$\n\n$Vc = (vc(1,1), vc(1, 2) )$\n\n$Ep = (hp(1,1), . . . hp(3, 2), \\upsilon\\rho (1, 1), . . . Up (2, 3) )$\n\n$Ec = (he(1,1), he(2, 1), vc (1, 1), vc(1,2))$\n\n$E = (P, Ep, C, Ec)$\n\nthe board sequence B becomes\n\n$B = { EU X_1 | X_1 \\in P(X_1) }$"}, {"title": "A certain board solution $S \\in S(B)$ corresponding to the elements of this B is expressed as", "content": "$S = ((null,...,null)$,\n\n$(4,1,1,0)$\n\n$( 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0)$\n\n$(null, null, null, null)$\n\n$(null))$\n\n(2)\n\nNote that there are infinitely many elements included in S(B) other than Equation (2).\n\nWhen dealing with puzzle rules, simply determining the structure sequence and domain results in excessively large board sequences and board sequence solution sequences, as mentioned earlier. Also, in most existing puzzle rules, some restrictions are placed on structures existing on the board. We mathematically define these as constraints. These essentially become a group of predicates that apply to board sequences and board sequence solution sequences.\n\nDefinition 2.10 (constraints). We define a group of predicates with structures existing on the board and their corre- sponding solutions as free variables as constraints. However, we require that the truth set of the logical product of this group of predicates is not an empty set. We defer the specific description method of constraints to example 2.5 described later.\n\nWhen constraints are defined, their essence becomes a restriction mapping applied to board sequences and board sequence solution sequences. Here, we define board sequences and board sequence solution sequences restricted by constraints as constrained board sequences and constrained board sequence solution sequences, respectively.\n\nDefinition 2.11 (Constrained Board Sequence Bcon, Constrained Board Sequence Solution Sequence S(Bcon)). We define constrained board sequence Bcon and constrained board sequence solution sequence S(Bcon) respectively as\n\n$B_{con} := (B | B \\in B, S(B) \\in S(B), constraints, (B, S(B)))$\n\n$S(B_{con}):= (S(B) | B \\in B,S(B) \\in S(B), constraints, (B,S(B)))$\n\nThese correspond to what are called \"answers\" or \"solution boards\" in existing pencil puzzles.\n\nRemark 2.3. $S(B_{con})| = |B_{con}|$ holds. Also, $B_{con} \\subset B$ and $S(B_{con}) \\subset S(B)$ hold.\n\nExample 2.5. The constraints of Slitherlink are described as follows. Note that we are using a group of functions that can be used in constraints as described in.\n\n\u2022 $\\forall X_1 \\in X_1, \\forall x_1 \\in X_1, solution(x_1) = 1$\n\n\u2022 $\\forall p \\in B(P), cross(p) = 2$\n\n\u2022 $\\forall c \\in B(C), solution(c) = cycle(c)$\n\n\u2022 $|B(X_1)| = 1$"}, {"title": "Each bullet point becomes a group of predicates that restrict the free variables of board sequences and board sequence solution sequences with the expression", "content": "[$\\forall X_1 \\in X_1, \\forall x_1 \\in X_1, solution(x_1) = 1$]^\n\n[$\\forall p \\in B(P), cross(p) = 2$]^\n\n[$\\forall c \\in B(C), solution(c) = cycle(c)$]^\n\n[$|B(X_1)| = 1$]\n\nWe used the above expression for simplicity.\n\nFurthermore, we also define the act of \"presenting a problem\". As a preliminary step, we define the constant undecided and the operator of extended subsequence $C_{ext}$.\n\nDefinition 2.12 (undecided, $C_{ext}$). We define that a sequence A contains sequence B as an extended subsequence ($B C_{ext}A$) if \"for any element $b_i$ of B, there exists a corresponding element $a_i$ in A, and $b_i = a_i$ or $b_i = undecided$.\" This can be formally described as\n\n$BC_{ ext}A  \\forall i, 1 \\leq i \\leq |B|, b_i \\in B, a_i \\in A, [b_i = a_i ] \\vee [b_i = undecided]$\n\nUnlike general subsequences,\n\n1. Elements must match from the beginning.\n\n2. No comparison is made in the case of undecided.\n\nNote these points.\n\nDefinition 2.13 (Presentation of a Problem). When there exists a puzzle rule P, we define Q and S(Q) as\n\n$Q \\subset B, S(Q) = ( (Q | Q \\in S(B), S_Q \\subset _{ext}Q) | S(B) \\in S(B))$\n\nwhere SQ is an arbitrary sequence (however, it actually follows definition 2.14 described later). We define presenta- tion of a problem as presenting Q and S\u0105 to the solver (human or machine solving the puzzle) such that\n\ns = |S(Bcon), Qi \u2208 Q, S(B)i \u2208 S(Bcon)\n\n\u2203!i \u2208 [1, s] \u2229 N, |Qi \u2229 S(B)| = 1\n\nholds. Also, we define the combination of [Q, SQ] as a problem.\n\nExisting pencil puzzles are implicitly required to have a unique solution. Therefore, we adopted the definition like definition 2.13. By determining the structure sequence, domain, and constraints, the constrained board sequence and constrained board sequence solution sequence are determined. However, the existence of Q and Sq is not self-evident. The existence of Q and SQ is a necessary condition for being a puzzle rule. Currently, there is no method other than relying on computational methods to examine whether Q and So exist from the combination of structure sequence, domain, and constraints, so this remains a future task.\n\nRemark 2.4 (Necessary Condition for Being a Puzzle Rule). The existence of Q and Sq satisfying definition 2.13 is a necessary condition for being a puzzle rule.\n\nAlthough SQ is an arbitrary sequence, the index for choosing it depends on the puzzle rule (in Slitherlink, So is presented with all solutions corresponding to grid point vertical edges and grid point horizontal edges included in the board, and all cells set to undecided). Generally, since some solutions corresponding to structures possessed by a certain puzzle rule are often presented as undecided, we define this information as hidden.\n\nDefinition 2.14 (hidden). When there exists a puzzle rule P, the range of solutions corresponding to a structure X possessed by P is specified by the domain. When there exists a board B, the board solution is composed of solutions determined within the range of that domain, but we construct a new Sq from a board solution with this domain modified. We define hidden as which structure's domain to add undecided to. We defer the specific description method to example 2.6."}, {"title": "Example 2.6 (Slitherlink's hidden). Slitherlink's hidden is described as follows. Note that being hidden of a certain structure X1 is described as X1 \u2192 S', meaning \"hidden S' of X1\", similar to the description of domain.", "content": "$P\u2194 {null} \u2192{null}$\n\n$C\u2194 {0,1,2,3,4} \u2192 {0, 1, 2, 3, 4, undecided}$\n\n$Ep\u2194 {0,1} \u2192 { undecided}$\n\n$Ec\u2194 {null} \u2192{null}$\n\n$X_1\u2194 {null} \u2192{null}$\n\nThis is example 2.3 with hidden added. For example, for grid point edges, hidden becomes a singleton consisting only of undecided. In practice, Sq can be constructed as if hidden were the domain.\n\nThus, a puzzle rule can be defined by determining the structure sequence S, domain, constraints, and hidden.\n\nDefinition 2.15 (Puzzle Rule). We define a puzzle rule as a combination of structure sequence S, domain, constraints, and hidden that satisfies remark 2.4.\n\nUsing this, in Section 3, we evaluate whether existing puzzle rules can be described using the puzzle rules of this research."}, {"title": "3 Verification of Puzzle Rules", "content": "In this section, we experiment with describing existing puzzle rules using the mathematical expressions defined In this study and verify their effectiveness through computational implementation. The existing puzzle rules we dealt with are the Nikoli Puzzles posted on Nikoli [2024], Ltd. website. We computationally implemented the existing puzzle rules described using the mathematical expressions defined In this study, verified that the completed boards output from them did not differ from the existing puzzle rules, and thereby corroborated that the definitions In this study are to some extent valid.\n\n3.1 Method\n\nThe method for verifying effectiveness was carried out in the following three steps. The target puzzle rules are the Nikoli Puzzles posted on Nikoli [2024], Ltd. website.\n\n1. Converted existing puzzle rules into mathematical expressions following definition 2.15.\n\n2. Implemented the mathematical expressions converted in 1. computationally. Specifically, we implemented the generation of completed boards according to the mathematical expressions.\n\n3. Confirmed from the output whether the completed boards created using 2. do not deviate from the completed boards of existing puzzle rules. If there is no deviation here, it suggests that at least for that mathematical expression, it is a sufficient condition for the existing puzzle rule.\n\nNote that what is verified here is only a sufficient condition, and we cannot confirm the necessary condition.\n\n3.2 Results\n\nOut of a total of 46, 10 were confirmed to be sufficient conditions by the method described in Section 3.1. Specifically, we confirmed that those listed in Table 1 are sufficient conditions (including \"Inshi no heya\" and \"Sukoro\" which are not posted in Nikoli [2024]. There are 44 puzzles posted in Nikoli [2024].). The mathematical expressions are posted in appendix A.2, and the computational implementations are posted in https://github.com/itkmaingit/ puzzle_check.\n\n3.3 Discussion\n\nThose that were not confirmed were classified as puzzle rules falling under any of the following categories, or (even if successful in mathematical expression) difficult to implement computationally."}, {"title": "4 Conclusion", "content": "In this study, we mathematically defined puzzle rules for pencil puzzles. We demonstrated its capacity to express existing puzzle rules, successfully representing one-fourth of the analyzed puzzle rules. In addition, we identified cases where certain puzzle rules could not be expressed due to an inherent limitation of the definition or computational challenges. This study highlights the potential for creating new puzzle rules by replacing or combining mathematical expressions of existing puzzle rules. In particular, when the structure spaces would match, the identical heuristic functions can be applied, making it possible to combine constraints. This combining expression, in turn, enables systematic rule creation, broadening the potential applications that range from enhancing engagement in recreational puzzles to advancing logic-based systems in educational and computational contexts. Ultimately, this study lays a robust foundation for automating puzzle rule generation, supporting both theoretical exploration and practical implementation."}, {"title": "A Appendix", "content": "Below are the operations used in constraints", "B.\n\nB": "B(X) { X | X\u2208 B \u2229 X"}, ".", "n\nA.1.2 cross\n\nA function that calculates the number of grid point edges gathering at a certain grid point. When the coordinates of the grid point are (i, j), with E = { hp(i, j \u2212 1), hp(i, j), vp(i \u2013 1, j), vp (i, j) },\n\ncross: P \u2192 Z\n\np(i, j) \u2211e(k, l) \u2208E{solution(e(k, l))ife(k, l)\u2208E0if e(k, l) \u2209Ep\n\nA.1.3 cycle\n\nA function that calculates the number of grid point edges gathering around a certain cell. When the coordinates of the cell are (i, j), with E = { hp(i, j"]}