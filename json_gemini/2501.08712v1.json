{"title": "Self-supervised Transformation Learning for Equivariant Representations", "authors": ["Jaemyung Yu", "Jaehyun Choi", "Dong-Jae Lee", "HyeongGwon Hong", "Junmo Kim"], "abstract": "Unsupervised representation learning has significantly advanced various machine learning tasks. In the computer vision domain, state-of-the-art approaches utilize transformations like random crop and color jitter to achieve invariant representations, embedding semantically the same inputs despite transformations. However, this can degrade performance in tasks requiring precise features, such as localization or flower classification. To address this, recent research incorporates equivariant representation learning, which captures transformation-sensitive information. However, current methods depend on transformation labels and thus struggle with interdependency and complex transformations. We propose Self-supervised Transformation Learning (STL), replacing transformation labels with transformation representations derived from image pairs. The proposed method ensures transformation representation is image-invariant and learns corresponding equivariant transformations, enhancing performance without increased batch complexity. We demonstrate the approach's effectiveness across diverse classification and detection tasks, outperforming existing methods in 7 out of 11 benchmarks and excelling in detection. By integrating complex transformations like AugMix, unusable by prior equivariant methods, this approach enhances performance across tasks, underscoring its adaptability and resilience. Additionally, its compatibility with various base models highlights its flexibility and broad applicability. The code is available at https://github.com/jaemyung-u/stl.", "sections": [{"title": "1 Introduction", "content": "Recently, unsupervised representation learning [15, 10, 34] has made remarkable strides in various machine learning tasks and is actively employed as the ground model. In particular to the state-of-the-art computer vision models [4, 18, 3, 5, 48, 1], invariant representation learning utilizes various augmentations, hereinafter transformations, including but not limited to random crop, horizontal flip, color jitter, and Gaussian blur. Their objective is to embed the semantically same inputs obtained through transformation, based on the notion that semantic differences due to the various transformations are inconsequential. Unfortunately, although effective most of the time, it does not always guarantee performance gain in the target downstream tasks. For instance, in tasks such as localization or flower classification, applying random crop or color jitter for invariant learning degrades performance by diluting discriminative features regarding the position of the object or the color of the flower, respectively."}, {"title": "2 Preliminaries: Transformation Invariant and Equivariant Learning", "content": "Transformation as Group Action. A group G consists of elements and an operation that satisfies closure, associativity, the existence of an identity element e, and the existence of inverses for all elements. The group action of G on a set X is defined as a function: \\(G \\times X \\rightarrow X\\), which ensures the identity operation \\(ex = x\\) for all \\(x \\in X\\) and maintaining the compatibility of the operations \\((g.h) x = g. (h.x)\\) for all \\(g, h \\in G\\). In the context of image processing, transformations can be viewed as a group action where the group T consists of transformations, and the set X is the collection of images. For example, if R \u2208 T is a rotation and F \u2208 T is a flip transformation, applying R followed by F to an image x \u2208 X is represented as \\(F \\cdot (R\\cdot x) = F(R(x))\\). This structure ensures that image transformations are consistent and reversible.\nTransformation Invariant Representation. In the context of transformation as group action, the transformation invariance of an image representation obtained through an encoder \\(f : X \\rightarrow Y\\), which maps the set of images X to representation space Y, is defined as follows: Let T be a group of transformations applied to an input image x \u2208 X, with t(x) representing the image after transformation t \u2208 T. The representation f(x) is invariant to all transformations in T if f(x) of an input image x remains unchanged even after applying any transformation t to x.\n\\(f(x) = f(t(x)) \\forall t \\in T.\\)\nIn self-supervised learning, leveraging transformation invariance is crucial for learning representations, as it aligns transformed input images within the representation space. The objective of transformation invariant representation learning \\(L_{inv}\\) is formalized with a dissimilarity loss L as follows:\n\\(\\min_{f} \\mathbb{E}_{x,t} [L_{inv}(x,t)] \\text{ s.t. } L_{inv}(x,t) = L(f(x), f(t(x))),\\)\nwhere L represents the dissimilarity metric between representations. In contrastive learning, L is instantiated as metrics like the InfoNCE [35] loss, which reduces the distance between representations of semantically similar inputs while increasing the gap between those of dissimilar inputs.\nTransformation Equivariant Representation. Extending the concept of invariance, transformation equivariance ensures that an image representation changes predictably according to the applied transformation. The representation f(x) is equivariant to all transformations in T if there exists a group action \\(\\phi : T \\times Y \\rightarrow Y\\) on the representation space Y, ensuring that the application of t to an image x leads to a corresponding transformation \\(\\phi(t, f(x))\\) in its representation.\n\\(f(t(x)) = \\phi(t, f(x)) \\forall t \\in T.\\)\nThe function \\(\\phi(t, \\cdot) : Y \\rightarrow Y\\) is referred to as the equivariant transformation on the representation space corresponding to the transformation t. When the equivariant transformation \\(\\phi(t, \\cdot)\\) becomes the identity, it implies transformation invariance, showcasing the model's insensitivity to transformations. In EquiMod [9] and SIE [13], equivariant transformation \\(\\phi(t, \\cdot)\\) is represented by a network parameterized by the corresponding transformation label t. This network is trained to associate each transformation t with its corresponding equivariant transformation \\(\\phi(f, \\cdot)\\) in the representation space. The objective of transformation equivariant representation learning \\(L_{equi}\\) is formalized as follows:\n\\(\\min_{f, \\phi} \\mathbb{E}_{x,t} [L_{equi}(x, t)] \\text{ s.t. } L_{equi}(x,t) = L(\\phi(f, f(x)), f(t(x))).\\)"}, {"title": "3 Equivariant Learning with Self-supervised Transformation Learning", "content": "3.1 Equivariant Learning without Transformation Label\nTransformation Representation. Instead of relying on transformation labels that require knowledge of the transformation group structure, we propose leveraging pairs of representations derived from original images and their transformed counterparts to implicitly represent transformations. We introduce an auxiliary encoder \\(f_r : Y \\times Y \\rightarrow Y_T\\) designed to process pairs of representations \\((f(x), f(t(x)))\\), where f(x) and f(t(x)) are the representation of the original image and of the transformed image respectively. This encoder outputs a transformation representation \\(y_t \\in Y_T\\), capturing the inherent transformation between the original and transformed images without explicit transformation labels.\n\\(y_t = f_r(f(x), f(t(x))) \\in Y_T \\text{ for } t \\in T \\text{ and } x \\in X.\\)"}, {"title": "Equivariant Learning with Transformation Representation", "content": "In contrast to methods directly utilizing transformation labels to learn equivariant transformations in the representation space, our proposed approach substitutes labels with transformation representations derived from pairs of images. However, there is a risk of encountering a trivial solution when using the transformation representation derived from the representation pair of the same image for which the equivariant transformation is applied. Specifically, the equivariant transformation might simply output the same representation \\(f(t(x)) = \\phi(f_r(f(x), f(t(x))), f(x))\\) that was used to obtain the transformation representation. To address this issue, we propose using transformation representations \\(y_t' \\) derived from pairs of a different image x' to apply equivariant transformations. Therefore, the transformed representation of the image through equivariant transformation in the representation space can be expressed as follows:\n\\(\\phi(y_t', f(x)) = \\phi(f_r (f(x'), f (t(x'))), f(x)) \\text{ for } x \\neq x' \\in X.\\)\nLeveraging this approach, it is possible to learn transformation equivariant representations without explicit transformation labels, through the following objective:\n\\(\\min_{f,f_r,\\phi} \\mathbb{E}_{x \\neq x',t} [L_{equi} (x, x', t)] \\text{ s.t. } L_{equi} (x, x', t) = L (\\phi(y_t', f(x)), f(t(x))).\\)"}, {"title": "3.2 Self-supervised Transformation Learning (STL)", "content": "We hypothesize that transformation representations, \\(y_t\\), derived from an input image x and its transformed image t(x), encode the transformation t independently of the input image x. Nonetheless, ensuring image-invariant encoding of t is not trivial.\n\\(y_t^x = y_t^{x'} \\forall x \\neq x' \\in X.\\)\nTo address this, we introduce Self-supervised Transformation Learning (STL), which adapts contrastive learning for transformation representation. Contrary to contrastive learning, which aims to align representations f(x) of the same image under different transformations to promote transformation invariance, STL instead focuses on aligning transformation representations, \\(y_t^x\\) and \\(y_t^{x'}\\), derived from different images \\(x \\neq x'\\) subjected to the identical transformation t. The objective of STL is formalized as follows:\n\\(\\min_{f,f_T} \\mathbb{E}_{x\\neq x',t} [L_{trans} (x, x', t)] \\text{ s.t. } L_{trans} (x, x', t) = L (y_t^x, y_t^{x'}).\\)\nHereinafter, equivariant learning using transformation representations learned through self-supervised transformation learning will simply be referred to as STL."}, {"title": "3.3 Implementation Details", "content": "Dissimilarity Metric. We use the InfoNCE loss from SimCLR [4] for the formulation and implementation of STL. Our methodology is not limited to this model, as demonstrated by ablation study, which shows the feasibility of applying our approach across various self-supervised learning models, such as BYOL [18], SimSiam [5], and Barlow Twins [48], through straightforward extensions (see Appendix A). Like EquiMod [9], we employ specialized projectors \\(g_{inv}\\), \\(g_{equi}\\), and \\(g_{trans}\\) to map representations into distinct embedding spaces \\(Z_{inv}\\), \\(Z_{equi}\\), and \\(Z_{trans}\\), aligned with the objectives of invariant, equivariant, and transformation representation learning. We adopt the InfoNCE loss as the dissimilarity metric across these spaces, similar to the approach in SimCLR. The InfoNCE loss function is defined as follows:\n\\(L_{InfoNCE} (y, y\u207a; g, \\tau, {y}i) = -log \\frac{exp (sim (g(y), g(y\u207a)) /\\tau)}{\\Sigma_{i \\neq y} exp (sim (g(y), g(yi)) /\\tau)},\\)\nwhere y represents representation of an input image, \\(y^+\\) denotes the corresponding representation to align, sim() indicates a similarity function, and \\(\\tau\\) is a temperature scaling parameter. For simplicity, batch \\(\\{y\\}_i\\) are omitted in the subsequent loss functions. We define three specific loss functions for invariant, equivariant, and transformation representation learning, each building on the InfoNCE loss:\n\\(L_{inv} (x, t) = L_{InfoNCE} (f(x), f(t(x)); g_{inv}, \\tau_{inv}),\\)\n\\(L_{equi} (x,x',t) = L_{InfoNCE}(\\phi(y_t', f(x)), f(t(x)); g_{equi}, \\tau_{equi}),\\)\n\\(L_{trans}(x,x',t) = L_{InfoNCE} (y_t, y_t'; g_{trans}, \\tau_{trans}).\\)\nAligned Transformed Batch. To implement STL, we need transformation representations obtained from different images. Unlike typical batch configurations in contrastive learning, where different transformations are applied to each input image, we construct batches by applying identical transformations to image pairs, as illustrated in Figure 3. In our approach, each image undergoes two distinct transformations, denoted t and t', but for simplicity, we consider only a single direction of transformation, treating t as equivalent to \\(t' \\cdot t^{-1}\\). This aligned transformed batch configuration maintains the same computational complexity as typical contrastive learning setups while preserving input diversity. It also increases the count of identical transformations applied across different images, which is essential for transformation learning, without diminishing input diversity. To assess computational costs, we measured forward-backward time over 1000 iterations following a 1000-iteration warm-up. With an auxiliary network and loss calculation, our approach required only about 10% more time per iteration than SimCLR, which focuses solely on invariant learning.\nOverall Objective. The overall framework of STL is shown in Figure 2. Using aligned transformed batch, along with the InfoNCE loss, we define the overall objective with the hyperparameters \\(\\lambda_{inv}\\), \\(\\lambda_{equi}\\) and \\(\\lambda_{trans}\\) for balancing the respective losses as follows:\n\\(\\min_{f,f_T,\\phi} \\mathbb{E}_{x\\neq x',t} [\\lambda_{inv} L_{inv}(x, t) + \\lambda_{equi}L_{equi} (x, x', t) + \\lambda_{trans} L_{trans} (x, x', t)].\\)"}, {"title": "4 Experiments", "content": "Baselines. We compare STL with implicit and explicit equivariant learning methods, using SimCLR [4] as the base invariant model. Implicit methods (E-SSL [8] and AugSelf [28]) learn equivariant representations via transformation prediction tasks. Explicit methods (SEN [36], EquiMod [9], and SIE [13]) use transformation labels for equivariant learning. All methods, including STL, are trained and evaluated with SimCLR as the base model. Experiments with other base models are included in the ablation study.\nDatasets. We pretrain on STL10 [7] with ResNet-18 and ImageNet100 [39, 42] with ResNet-50, following the split in [42]. Evaluation spans 11 downstream classification tasks (CIFAR10/100 [27], Food [2], MIT67 [38], Pets [37], Flowers [33], Caltech101 [12], Cars [26], Aircraft [31], DTD [6], SUN397 [47]) with a linear transfer protocol [41]. For detection, VOC07+12 dataset [11] and the protocol from [48] are used. Dataset and protocol details are in Appendix B and C.\nSetup. For STL and explicit baselines (SEN, EquiMod, and SIE), we use an equivariant transformation network with a hypernetwork based on SIE. In SEN, EquiMod, and SIE, the hypernetwork uses transformation labels; in STL, it leverages transformation representations. STL also includes a 3-layer MLP with a 512-dimensional hidden layer to encode 128-dimensional transformation representations from input pairs. Equivariant transformations include random crop and color jitter, with other transformations applied randomly, consistent with typical contrastive learning. The transformation prediction loss weight is set to 0.5 for implicit baselines, and the equivariant learning weight is set to 1 for explicit baselines. STL uses weights of 1, 1, and 0.2 for invariant, equivariant, and transformation learning losses, respectively. We apply AugMix [23] to evaluate STL's adaptability to complex transformations, incompatible with other methods. Details on transformation labels in standard equivariant learning are in Appendix D. All analyses and ablations, except main experiments, use STL10-pretrained models. Additional setup details are in Appendix E."}, {"title": "4.1 Main Results", "content": "Image Classification. To assess generalizability, we apply the linear evaluation protocol on various downstream tasks. As shown in Table 2, STL outperforms existing methods on 7 out of 11 datasets. With AugMix, a complex transformation combination, STL achieves the highest performance across all datasets, underscoring its ability to generalize across diverse transformations, even those without explicit labels, to improve generalization. In Table 3, STL shows a minimal trade-off on in-domain tasks compared to SimCLR, with only a slight decrease from 81.20% to 81.10%, a smaller trade-off than other explicit equivariant models. Combined with AugMix, STL reaches 81.64%, showing adaptability to complex transformations and further enhancing in-domain performance. Results on STL10-pretrained models are provided in the Appendix F."}, {"title": "4.2 Analysis", "content": "Transformation Representation. To evaluate learned transformation representations of STL, we assess both parameter prediction and type classification on test images with transformations used during pretraining, specifically crop and color jitter. Parameter prediction uses MSE loss to measure accuracy in predicting transformation specifics, while type classification assesses the model's ability to distinguish among transformation categories. As shown in Table 5, STL achieves the lowest MSE for crop, color jitter, and the combined metric, indicating precise capture of transformation details. In classification, STL attains 93.67% accuracy, surpassing other models, even though AugSelf incorporates parameter regression into its learning. This demonstrates STL's robust generalization in transformation learning without direct parameter supervision.\nAdditionally, a qualitative UMAP visualization of transformation representations from test image pairs reveals STL's understanding of transformation relationships. Figure 1(b) shows distinct clusters for each transformation type, including crop, brightness, contrast, saturation, and hue, with color-related transformations grouped closely, reflecting STL's capture of inter-relationships among similar transformations.\nTransformation Equivariance. We evaluate the accuracy of STL's learned equivariant transformations in reflecting real transformations in image space. This evaluation involves applying 60 transformations per image from the STL10 test dataset, including standalone transformations like crop and color jitter, as well as the standard combinations used during training. For each transformed representation, we rank other representations by similarity, ordering them from closest to furthest. Metrics include Mean Reciprocal Rank (MRR), Hit@k (H@k), and Precision (PRE). MRR is defined as the mean of reciprocal ranks 1/r, where r is the rank of the nearest representation corresponding to the designated transformation. Hit@k calculates the probability P(r \u2264 k) that the correct transformation rank r is within the top k. PRE is the mean squared error between the representation from the top-ranked transformation and the actual transformation's parameter vector."}, {"title": "4.3 Ablation Studies", "content": "Loss Functions. We conduct an ablation study to analyze the impact of each loss function on STL's performance across image classification and transformation prediction tasks. Specifically, we examine the contributions of invariant learning (\\(L_{inv}\\)), equivariant learning (\\(L_{equi}\\)), and self-supervised transformation learning (\\(L_{trans}\\)) by selectively removing each loss term. Table 7 illustrates a clear trade-off between invariance and equivariance in STL's performance. The Only Invariance configuration achieves high in-domain accuracy of 84.74% but suffers from low out-domain accuracy of 43.11% and limited transformation prediction capabilities, highlighting restricted generalizability. In contrast, Only Equivariance improves out-domain accuracy to 49.99% and achieves strong transformation prediction with an MSE of 0.02, indicating enhanced generalization and transformation awareness, albeit with a slight reduction in in-domain performance.\nWhen \\(L_{trans}\\) is omitted, the model maintains high in-domain accuracy but exhibits weak out-domain and transformation performance, suggesting that the absence of transformation representation learning leads to a focus on invariance. Excluding \\(L_{inv}\\) improves out-domain accuracy to 48.62% and enhances transformation alignment by preventing collapse into pure invariance, although this comes at a moderate cost to in-domain accuracy. Without \\(L_{equi}\\), the in-domain performance decreases further as transformation learning alone lacks sufficient structure for alignment. Finally, the full STL, which incorporates all three losses, achieves the best balance, with superior performance across in-domain and out-domain tasks and optimal transformation prediction results. This configuration minimizes in-domain trade-offs while capturing a comprehensive view of transformations, ensuring alignment between representation and image transformations across both in-domain and out-domain tasks."}, {"title": "5 Related Works", "content": "Transformation equivariant learning captures transformation-sensitive features by embedding transformation directly into the learning process, categorized into implicit and explicit approaches. Implicit learning predicts transformations by observing changes in representations, allowing models to infer transformation without directly modeling the functions. In contrast, explicit equivariant learning encodes transformations within the representation space, enforcing behaviors in learned representations that mirror input transformations.\nImplicit Equivariant Learning. In implicit equivariant learning, models learn to recognize applied transformations by observing changes in representations, enabling the representations to capture transformation-sensitive information. Notable methods include InfoMin [43], selecting optimal views to maintain relevant task information, and Prelax [45], aligning residual vectors for robust multi-view alignment. Similarly, E-SSL [8] and AugSelf [28] leverage transformation-aware auxiliary tasks to train models to preserve transformation-sensitive details, enhancing robustness by maintaining sensitivity to transformation variance."}, {"title": "Explicit Equivariant Learning", "content": "On the other hand, explicit equivariant learning directly encodes input transformation into the representation space, building equivariant transformations that operate consistently in representation space. AEAE [19] leverages group actions to embed transformation effects explicitly in the representation space, while SymReg [40] enhances transformation consistency by selecting optimal loss terms based on transformation group information. CARE [20] introduces rotational symmetry by aligning embeddings directly with input rotations, providing robust transformation encoding. Similarly, SEN [36] applies symmetric embedding networks to synchronize transformations in the input space with learned representations. In a more flexible approach, EquiMod [9] models equivariant transformations by conditioning transformation labels as inputs and dynamically adapting representations through a neural network. Building on these approaches, SIE [13] separates invariant and equivariant representations, using dedicated networks to distinctly capture transformation-sensitive and invariant aspects."}, {"title": "Applications of Equivariant Learning", "content": "The applicability of equivariant learning extends across various domains, including robotics, medical imaging, molecular modeling, and multimodal representation learning. By leveraging inherent symmetries within data, it enhances sample efficiency in robotic manipulation [44], improves accuracy in medical image processing [21], and boosts predictive performance in molecular data analysis [46]. In multimodal contexts, it achieves finer alignment by considering transformations within each modality, facilitating robust cross-modal understanding [29, 14]. These applications underscore the broad utility of equivariant learning in aligning model representations with domain-specific transformations."}, {"title": "6 Discussion and Conclusion", "content": "The Self-supervised Transformation Learning (STL) approach introduces a novel method for deriving transformation representations that capture equivariance without relying on predefined transformation labels. This framework optimizes representational versatility through a synergy of three key loss functions: invariant learning, equivariant learning, and self-supervised transformation learning. These loss functions allow representations to adapt to complex transformation dynamics, including interdependencies among transformations, thereby greatly enhancing model generalization. STL consistently outperforms existing methods across 7 out of 11 classification tasks and demonstrates exceptional performance in object detection, proving its strong ability to generalize across diverse transformations. Additionally, integrating STL with AugMix yields robust performance improvements across all tasks, demonstrating enhanced resilience. STL's adaptability and consistent performance across various transformations and base models underscore its versatility for broad applications.\nLimitations. While STL significantly advances equivariant learning, it encounters challenges with transformations that extend beyond single image pairs. Complex transformations, such as those involving combinations or mixtures of multiple images (e.g., mixup [49]), fall outside STL's current capacity as it relies on pairwise transformation representations. Further research could explore ways to adapt STL to accommodate more complex, multi-image transformations and better capture their inherent structure.\nBroader Impacts. STL holds promise for applications requiring precise and interpretable transformations, such as in medical imaging analysis and autonomous driving. However, as STL learns transformation representations from the data, it may inherit biases embedded in the training data, raising fairness concerns, especially in sensitive domains. Implementing fairness-aware training techniques and thorough validation processes could help mitigate these risks. Additionally, while STL advances model robustness and generalization, its computational demands may have environmental implications. Efficiency improvements, such as model distillation, could reduce the model's energy footprint, supporting sustainable deployment."}, {"title": "A STL Formulations for Various Base Invariant Models", "content": "A.1 STL Extension on BYOL\nIn adapting STL to BYOL [18], we utilize dissimilarity loss of BYOL to define the invariant, equivariant, and transformation losses. BYOL's dissimilarity metric is:\n\\(L_{BYOL}(y, y\u207a; g, q, \u03b8, \u03be) = ||\\overline{q_{\\theta}(g_{\\theta}(y))} - \\overline{g_{\\xi}(y\u207a)}||\u2082\\),\nwhere \\(g_{\\theta}\\) denotes the projection network parameterized by \u03b8, \\(q_{\\theta}\\) is the prediction network also parameterized by \u03b8, and \\(g_{\\xi}\\) represents the target network parameterized by \u03be. The terms \\(\\overline{q_{\\theta}}\\) and \\(\\overline{g_{\\xi}}\\) refer to the normalized outputs of \\(q_{\\theta}\\) and \\(g_{\\xi}\\) respectively. Using this, we define the STL objectives as follows:\n\\(L_{inv}(x, t) = L_{BYOL}(f(x), f(t(x)); g_{inv}, q_{inv}, \u03b8, \u03be),\\)\n\\(L_{equi} (x, x', t) = L_{BYOL}(\\phi(y_t', f(x)), f(t(x)); g_{equi}, q_{equi}, \u03b8, \u03be),\\)\n\\(L_{trans}(x, x', t) = L_{BYOL} (y_t, y_t'; g_{trans}, q_{trans}, \u03b8, \u03be).\\)\nA.2 STL Extension on SimSiam\nFor SimSiam [5], STL uses SimSiam's dissimilarity loss:\n\\(L_{SimSiam} (y, y\u207a; g, h) = \\frac{1}{2}D(h(g(y), stopgrad(g(y\u207a))\\) + \\(\\frac{1}{2}D(h(g(y\u207a)), stopgrad(g(y))),\\)\nwhere g denotes the projection network, h is the prediction network, stopgrad indicates an operation that halts gradient backpropagation, and D represents cosine similarity. This enables us to structure the STL losses as:\n\\(L_{inv}(x, t) = L_{SimSiam}(f(x), f(t(x)); g_{inv}, h_{inv}),\\)\n\\(L_{equi} (x, x', t) = L_{SimSiam}(\\phi(y_t', f(x)), f (t(x)); g_{equi}, h_{equi}),\\)\n\\(L_{trans}(x, x', t) = L_{SimSiam} (y_t, y_t'; g_{trans}, h_{trans}).\\)\nA.3 STL Extension on Barlow Twins\nFor Barlow Twins [48], STL applies Barlow Twins' dissimilarity loss:\n\\(L_{BarlowTwins} (Y = \\{Y_i\\}_i, Y\u207a = \\{y_i^+\\}_i; g, \u03bb) = \\sum_i(1 - C_{ii})^2 + \\sum_i\\sum_{j \\neq i} C_{ij}^2,\\)\nwhere C denotes the cross-correlation matrix between embeddings of transformed views Y and Y\u207a, and \u03bb is a regularization parameter that controls the weight of off-diagonal terms in C, penalizing redundancy in the representations. Define X = \\{x_i\\}_i, X' = \\{x_i'\\}_i, and T = \\{t_i\\}_i, representing the sets of input images, paired images, and transformations, respectively. Then, the STL losses for Barlow Twins are:\n\\(L_{inv}(X,T) = L_{BarlowTwins}(\\{f(x_i)\\}_i, \\{f(t_i(x_i))\\}_i; g_{inv}, \u03bb_{inv}),\\)\n\\(L_{equi} (X, X',T) = L_{BarlowTwins}(\\{\\phi(y_t, f(x_i))\\}_i, \\{f(t_i(x_i))\\}_i; g_{equi}, \u03bb_{equi}),\\)\n\\(L_{trans} (X, X',T) = L_{BarlowTwins}(\\{y_t^i\\}_i, \\{y_{t'}^i\\}_i; g_{trans}, \u03bb_{trans}).\\)"}, {"title": "E Pretraining Setups", "content": "For the pretraining experiments, we use NVIDIA RTX4090.\nE.1 ImageNet100 Pretraining\nWe conduct pretraining on the ResNet-50 architecture [22] using ImageNet100, a subset of ImageNet containing 100 categories [39], with dataset splits consistent with those in [42]. All methods are trained for 500 epochs with a batch size of 256, using a cosine learning rate schedule without restarts [30]. The initial learning rate is set at 0.03, with a weight decay of 0.0005. The model includes a 3-layer projection MLP head, g(\u00b7), with a hidden dimension of 2048 and an output dimension of 128. Batch normalization [24] is excluded from the last layer.\nE.2 STL10 Pretraining\nFor pretraining on the STL10 dataset [7], we use the standard ResNet-18 architecture [22]. All methods utilize stochastic gradient descent (SGD) with a learning rate of 0.03, a batch size of 256, a weight decay of 0.0005, and a momentum of 0.9. The learning rate follows a cosine decay schedule without restarts [30].\nSimCLR [4]. A 3-layer projection MLP head g(\u00b7) with a hidden dimension of 512 and an output dimension of 128 is used, with batch normalization excluded from the final layer. In contrastive learning, we apply a temperature scaling parameter of 0.2.\nBarlow Twins [48]. A 2-layer projection MLP head g(\u00b7) is employed, with a hidden dimension of 512 and an output dimension of 2048. Batch normalization is excluded from the last layer.\nBYOL [18]. The model uses a 2-layer projection MLP head g(\u00b7), with a hidden dimension of 4096 and an output dimension of 256, omitting batch normalization in the final layer.\nSimSiam [5]. We employ a 2-layer projection MLP head g(\u00b7) with both hidden and output dimensions of 2048, with batch normalization excluded from the final layer."}, {"title": "F Image Classification Results of STL10-pretrained Models", "content": ""}, {"title": "G Explicit and Implicit Equivariant Learning", "content": ""}]}