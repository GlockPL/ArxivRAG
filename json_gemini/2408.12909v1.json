{"title": "CSPs with Few Alien Constraints", "authors": ["Peter Jonsson", "Victor Lagerkvist", "George Osipov"], "abstract": "The constraint satisfaction problem asks to decide if a set of constraints over a relational structure A is satisfiable (CSP(A)). We consider CSP(AUB) where A is a structure and B is an alien structure, and analyse its (parameterized) complexity when at most k alien constraints are allowed. We establish connections and obtain transferable complexity results to several well-studied problems that previously escaped classification attempts. Our novel approach, utilizing logical and algebraic methods, yields an FPT versus pNP dichotomy for arbitrary finite structures and sharper dichotomies for Boolean structures and first-order reducts of (N, =) (equality CSPs), together with many partial results for general w-categorical structures.", "sections": [{"title": "1 Introduction", "content": "The constraint satisfaction problem over a structure A (CSP(A)) is the problem of verifying whether a set of constraints over A admits at least one solution. This problem framework is vast, and, just to name a few, include all Boolean satisfiability problems as well as k-coloring problems, and for infinite domains we may formulate both problems centrally related to model checking first-order formulas and qualitative reasoning. Notable examples where complete complexity dichotomies are known (separating tractable from NP-hard problems) include all finite structures [13, 27] and first-order definable relations over well-behaved base structures like (N, =) and (Q, <) [2]. While impressive mathematical achievements, these dichotomy results are still somewhat unsatisfactory from a practical perspective since we are unlikely to encounter instances which are based on purely tractable constraints. Could it be possible to extend the reach of these powerful theoretical results by relaxing the basic setting so that we may allow greater flexibility than purely tractable constraints while still obtaining something simpler than an arbitrary NP-hard CSP?\nWe consider this problem in a hybrid setting via problems of the form CSP(AUB) where A is a \"stable\", tractable background structure and B is an alien structure. We focus on the case when CSP(AUB) is NP-hard (thus, richer than a polynomial-time solvable problem) but where we have comparably few constraints from the alien structure B. This problem is compatible with the influential framework of parameterized complexity which has been used with great effect to study structurally restricted problems (e.g., based on tree-width) but where comparably little is known when one simultaneously restricts the allowed constraints.\nWe begin (in Section 3) by relating the CSP problem with alien constraints to other problems, namely, (1) model checking, (2) the problem of checking whether a constraint in a CSP instance is redundant, (3) the implication problem and (4) the equivalence problem. We prove that the latter three problems are equivalent under Turing reductions and provide a general method for obtaining complexity dichotomies for all of these problems via a complexity dichotomy for the CSP problem with alien constraints. Importantly, all of these problems are well-known in their own right, but have traditionally been studied with wildly disparate tools and techniques, but by viewing them under the unifying lens of alien constraints we not only get four dichotomies for the price of one but also open the powerful toolbox based on universal algebra. For non-Boolean domains this is not only a simplifying aspect but an absolute necessity to obtain general results. We expand upon the algebraic approach in Section 4 and relate alien constraints to primitive positive definitions (pp-definitions) and the important notion of a core. As a second general contribution we explore the case when each relation in B can be defined via an existential positive formula over A. This results in a general fixed-parameter tractable (FPT) algorithm (with respect to the number of alien constraints) applicable to both finite, and, as we demonstrate later, many natural classes of structures over infinite domains.\nIn the second half of the paper we attack the complexity of alien constraints more systematically. We begin with structures over finite domains where we obtain a general tractability result by combining the aforementioned FPT algorithm together with the CSP dichotomy theorem [13, 27]. In a similar vein we obtain a general hardness result based on a universal algebraic gadget. Put together this yields a general result: if AUB is a core (which we may assume without loss of generality) then either CSP<(A\u222aB) is FPT, or CSP<p(AUB) is NP-hard for some p > 0, i.e., is para-NP-hard (pNP-hard). Thus, from a parameterized complexity view we obtain a complete dichotomy (FPT versus pNP-hardness) for finite-domain structures. However, to also obtain dichotomies for implication, equivalence,"}, {"title": "2 Preliminaries", "content": "We begin by introducing the basic terminology and the fundamental problems under consideration. We assume throughout the paper that the complexity classes P and NP are distinct. We let Q denote the rationals, N = {0, 1, 2, . . . } the natural numbers, Z = {..., -2.-1, 0, 1, 2, . . . } the integers, and Z+ = {1,2,3,...} the positive integers. For every $c \\in Z_+$, we let $[c] = {1, 2, ..., c}$.\nA parameterized problem is a subset of $2^* \\times \\mathbb{N}$ where \u2211 is the input alphabet, i.e., an instance is given by $x \\in \\Sigma^*$ of size n and a natural number k, and the running time of an algorithm is studied with respect to both k and n. The most favourable complexity class is FPT (fixed-parameter tractable), which contains all problems that can be decided in $f(k) \\cdot n^{o(1)}$ time with f being some computable function. An fpt-reduction from a"}, {"title": "CSPs with Few Alien Constraints", "content": "parameterized problem $L_1 \\subseteq \\Sigma_1^* \\times \\mathbb{N}$ to $L_2 \\subseteq \\Sigma_2^* \\times \\mathbb{N}$ is a function $P : \\Sigma_1^* \\times \\mathbb{N} \\rightarrow \\Sigma_2^* \\times \\mathbb{N}$ that preserves membership (i.e., $(x, k) \\in L_1 \\Leftrightarrow P((x,k)) \\in L_2$), is computable in $f(k) \\cdot |x|^{0(1)}$ time for some computable function f, and there exists a computable function g such that for all $(x, k) \\in L_1$, if $(x', k') = P((x, k))$, then $k' \\le g(k)$. It is easy to verify that if $L_1$ and $L_2$ are parameterized problems such that $L_1$ fpt-reduces to $L_2$ and $L_2$ is in FPT, then it follows that $L_1$ is in FPT, too. There are many parameterized classes with less desirable running times than FPT but we focus on pNP-hard problems: a problem is pNP-hard under fpt-reductions if it is NP-hard for some constant parameter value, implying such problems are not in FPT unless P = NP.\nWe continue by defining constraint satisfaction problems. First, a constraint language is a (typically finite) set of relations A over a universe A, and for a relation $R \\in \\Gamma$ we write ar(R) = k to denote its arity k. It is sometimes convenient to associate a constraint language with a relational signature, and thus obtaining a relational structure: a tuple (A; T, I) where A is the domain, or universe, t is a relational signature, and I is a function from o to the set of all relations over D which assigns each relation symbol R a corresponding relation $R_A$ over D. We write ar(R) for the arity of a relation R, and if $R = \\emptyset$ then ar(R) = 0. All structures in this paper are relational and we assume that they have a finite signature unless otherwise stated. Typically, we do not need to make a sharp distinction between relations and the corresponding relation symbols, so we usually simply write $(A; R_1,..., R_m)$, where each $R_i$ is a relation over A, to denote a structure. We also sometimes do not make a sharp distinction between structures and sets of relations when the signature is not important. For arbitrary structures A and A' with domains A and A', we let AUA' denote the structure with domain AU A' and containing the relations in A and A'.\nFor a constraint language (or structure) A an instance of the constraint satisfaction problem over A (CSP(A)) is then given by I = (V, C) where V is a set of variables and Ca set of constraints of the form $R(x_1,...,x_k)$ where $x_1,...,x_k \\in V$ and $R \\in A$, and the question is whether there exist a function $f : V \\rightarrow A$ that satisfies all constraints (a solution), i.e., $(f(x_1),..., f(x_k)) \\in R$ for all $R(x_1,...,x_k) \\in C$. The CSP dichotomy theorem says that all finite-domain CSPs are either in Por are NP-complete [13, 27]. Given an instance I = (V, C) of CSP(A), we let Sol(I) be the set of solutions to I. We now define CSPs with alien constraints in the style of Cohen et al. [15].\nThroughout the paper, we assume without loss of generality that the structures A and B can be associated with disjoint signatures. The parameter in CSP<(A\u222aB) is the number of alien constraints (abbreviated #ac). We let CSP\u2264k(AUB) denote the CSP<(A\u222aB) problem restricted to a fixed value k of parameter #ac. Note that if CSP(A) is not in P, then CSP<0(A\u222aB) is not in P; moreover, if CSP(AUB) is in P, then CSP<(A\u222aB) is in P. Thus, it is sensible to always require that CSP(A) is in P and CSP(AUB) is not in P. In many natural cases (e.g., all finite-domain CSPs), CSP(AUB) not being polynomial-time solvable implies that CSP(AUB) is NP-hard.\nA k-ary relation R is said to have a primitive positive definition (pp-definition) over a constraint language A if $R(x_1,...,x_k) \\equiv \\exists y_1,...,Y_{k'}: R_1(\\overline{x_1})\\land... R_m (\\overline{x_m})$ where each $R_i \\in A \\cup \\{=_A\\}$ and each $\\overline{x_i}$ is a tuple of variables over $x_1,...,X_k, Y_1,..., y_{k'}$ matching the arity of $R_i$. Here, and in the sequel, =$A$ is the equality relation over A, i.e. $\\{(a, a) \\mid a \\in A\\}$."}, {"title": "Applications of Alien Constraints", "content": "We will now demonstrate how alien constraints can be used for studying the complexity of CSP-related problem: Section 3.1 contains an example where we analyse the complexity of redundancy, equivalence, and implication problems, and we consider connections between the model checking problem and CSPs with alien constraints in Section 3.2. To relate problem complexity we use Turing reductions: a problem $L_1$ is polynomial-time Turing reducible to $L_2$ (denoted $L_1 \\le L_2$) if it can be solved in polynomial time using an oracle for $L_2$. Two problems $L_1$ and $L_2$ are polynomial-time Turing equivalent if $L_1 \\le L_2$ and $L_2 \\le L_1$."}, {"title": "The Redundancy Problem and its Relatives", "content": "We will now study the complexity of a family of well-known computational problems. We begin by some definitions. Let A denote a constraint language and assume that I = (V, C) is an instance of CSP(A). We say that a constraint $c \\in C$ is redundant in I if $Sol((V, C')) = Sol((V, C \\setminus \\{c\\}))$. We have the following computational problems."}, {"title": "Model Checking", "content": "We follow [20] and view the model checking problem as follows: given a logic L, a structure A, and a sentence & of L, decide whether A = 6. The main motivation for this problem is its connection to databases [26]. From the CSP perspective, we consider a slightly reformulated version: given an instance I = (V, C) of CSP(A) and a formula & with free variables in V, we ask if there is a tuple in Sol(I) that satisfies \u0444. If 4 can be expressed as an instance I' of CSP(B) for some structure B, then this is the same thing as if asking whether IUI' has a solution or not. In the model-checking setting, we want to check whether & is true in all solutions of I. If \u00ac\u0444 can be expressed as an instance I' of CSP(B) for some structure B, then we are done: every solution to I satisfies & if and only if CSP(IUI') is not satisfiable, and this clarifies the connection with CSPs with alien constraints. For instance, one may view IMPL(A) (and consequently the underlying CSP<1(AUR) problems by Lemma 3 and Theorem 4) as the model checking problem restricted to queries that are A-sentences constructed using the operators \u2200 and V. Naturally, one wants the ability to use more complex queries such as (1) queries extended with other relations, i.e. queries constructed over an expanded structure, or (2) queries that are built using other logical connectives.\nIn both cases, it makes sense to study the fixed-parameter tractability of CSP<(AUB) with parameter #ac since the query is typically much smaller than the structure A. The"}, {"title": "General Tools for Alien Constraints", "content": "We analyze the complexity of CSP<k(AUB), starting in Section 4.1 by investigating which of the classic algebraic tools are applicable to the alien constraint setting, and continuing in Section 4.2 by presenting a general FPT result. We will use these observations for proving various results but also for obtaining a better understanding of alien constraints."}, {"title": "Alien Constraints and Algebra", "content": "First, we have a straightforward generalization of Theorem 1 in the alien constraint setting."}, {"title": "Fixed-Parameter Tractability", "content": "We present an algorithm in this section that underlies many of our fixed-parameter tractability results and it is based on a particular notion of definability. The existential fragment of first-order logic consists of formulas that only use the operations negation, conjunction, disjunction, and existential quantification, while the existential positive fragment additionally disallows negation. We emphasize that it is required that the equality relation is allowed in existential (positive) definitions. We can view existential positive in a different way that is easier to use in our algorithm. Let A be a structure with domain A and assume that $R \\subseteq A^m$ is defined via a existential positive definition over A, i.e., $R(x_1,...,x_m) = \\exists \u0423_1,..., Y_n: \\phi (\\overline{X_1},...,\\overline{x_m}, \\overline{Y_1},..., \\overline{Y_n})$ where $\\phi$ is a quantifier-free existential positive A-formula. Since & can be written in disjunctive normal form without introducing negation or quantifiers, it follows that R is a finite union of relations in \u3008A\u3009."}, {"title": "Finite-Domain Languages", "content": "This section is devoted to CSPs over finite domains. We begin in Section 5.1 by studying how the definability of constants affect the complexity of finite-domain CSPs with alien constraints, and we use this as a cornerstone for a parameterized FPT versus pNP dichotomy result for of CSP<(AUB). We show a sharper result for Boolean structures in Section 5.2."}, {"title": "Parameterized Dichotomy", "content": "We begin with a simplifying result. For a finite set A, let CA be the structure whose relations are the constants over A."}, {"title": "Classification of Boolean Languages", "content": "We present a complexity classification of CSP<(A\u222aB) when A and B are Boolean structures (Theorem 14). We begin with two auxiliary results and we define relations $c_0 = \\{(0)\\}$ and $C_1 = \\{(1)\\}$.\nWe say that a Boolean relation R is invariant under complement if it is invariant under the operation {0 \u2192 1,1 \u2192 0}. This is equivalent to $(t_1,...,t_k) \\in R$ if and only if $(1-t_1, ..., 1 \u2013 t_k) \\in R$.\nWe are now ready for analysing the complexity of CSP<(AUB) when A and B are Boolean structures. We use a simplifying concept: a 0/1-pair (Ro, R\u2081) contains two Boolean relations where Ro is 0-valid but not 1-valid and R\u2081 is 1-valid but not 0-valid."}, {"title": "Infinite-Domain Languages", "content": "We focus on infinite-domain CSPs in this section. We begin Section 6.1 by discussing certain problems when CSPs with alien constraints are generalized to infinite domains. Our conclusion is that restricting ourselves to w-categorical structures is a viable first step: w-categorical structures constitute a rich class of CSPs and we can generalize at least some of the machinery from Section 5 to this setting. We demonstrate this in Section 6.2 where we obtain a complete complexity classification for equality languages."}, {"title": "Orbits and Infinite-Domain CSPs", "content": "It is not straightforward to tranfer the results in Section 5 to the infinite-domain regime. First, let us consider Theorem 8. In contrast to finite domains, relations in B may not be finite unions of relations in \u3008A\u3009 or, equivalently, not being definable with an existential positive formula. Second, let us consider Theorem 10: the proof is based on structures expanded with symbols for each domain value and this leads to problematic structures with infinite signatures. The proof is also based on the assumption that CSPs are either polynomial-time solvable or NP-complete, and this is no longer true [5]. It is thus necessary to restrict our"}, {"title": "Classification of Equality Languages", "content": "We present a complexity classification of CSP<(AUB) for equality languages A, B. Essentially, there are two interesting cases: when A is Horn, and when A is 0-valid and not Horn. In the former case, CSP<(A\u222aB) is in FPT parameterized by #ac, while in the second case it is pNP-hard. It turns out that the ability to pp-define the arity-c disequality relation, where c depends only on A, using at most k alien constraints, determines the complexity. A dichotomy for REDUNDANT(\u00b7), IMPL(\u00b7), and EQUIV(\u00b7) follows: these problems are either in Por NP-hard under polynomial-time Turing reductions."}, {"title": "Discussion", "content": "We have focused on structures with finite signatures in this paper. This is common in the CSP literature since relational structures with infinite signature cause vexatious representational issues. It may, though, be interesting to look at structures with infinite signatures, too. Zhuk [28] observes that the complexity of the following problem is open: given a system of linear equations mod 2 and a single linear equation mod 24, find a satisfying assignment over the domain {0,1}. The equations have unbounded arity so this problem can be viewed as a CSP\u22641 (AUB) problem where A, B have infinite signatures. This question is thus not directly answered by Theorem 14. Second, let us also remark that when considering CSP<(AUB), we have assumed that both A and B are taken from some nice \"superstructure\". For example, in the equality language case we assume that both structures are first-order reducts of (N; =). One could choose structures more freely and, for example, let A be an equality language and B a finite-domain language. This calls for modifications of the underlying theory since (for instance) the algorithm that Theorem 8 is based on breaks down.\nFor finite domains we obtained a coarse parameterized dichotomy for CSP<(AUB) separating FPT from pNP-hardness. Sharper results providing the exact borderline between P and NP-hardness for the pNP-hard cases are required for classifying implication, equivalence, and redundancy. Via Theorem 7 and Theorem 10 the interesting case is when CSP(A) is in P, AUB is core but A is not core. This question may be of independent algebraic interest and could be useful for other problems where the core property is not as straightforward as in the CSP case. For example, in surjective CSP we require the solution to be surjective, and this problem is generally hardest to analyze when the template is not a core [8].\nAny complexity classification of the first-order reducts of a structure includes by necessity a classification of equality CSPs. Thus, our equality language classification lay the foundation for studying first-order reducts of more expressive structures. A natural step is to study temporal languages, i.e. first-order reducts of (Q; <). Our classification of equality constraint languages relies on the work in [4] via [21], who studied the clones of polymorphisms of equality constraint languages in more detail. One important result, due to Haddad & Rosenberg [16], is that after excluding several easy cases, every equality constraint language we end up with is only closed under operations with range [c] for some constant c. Then, pp-defining the relation NEQc+1 brings us into pNP-hard territory. Similar characterizations of the polymorphisms for reducts of other infinite structures, e.g. (Q; <), would imply corresponding pNP-hardness results, and this appear to be a manageable way forward."}]}