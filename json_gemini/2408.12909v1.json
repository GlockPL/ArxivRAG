{"title": "CSPs with Few Alien Constraints", "authors": ["Peter Jonsson", "Victor Lagerkvist", "George Osipov"], "abstract": "The constraint satisfaction problem asks to decide if a set of constraints over a relational structure A is satisfiable (CSP(A)). We consider CSP(AUB) where A is a structure and B is an alien structure, and analyse its (parameterized) complexity when at most k alien constraints are allowed. We establish connections and obtain transferable complexity results to several well-studied problems that previously escaped classification attempts. Our novel approach, utilizing logical and algebraic methods, yields an FPT versus pNP dichotomy for arbitrary finite structures and sharper dichotomies for Boolean structures and first-order reducts of (N, =) (equality CSPs), together with many partial results for general w-categorical structures.", "sections": [{"title": "Introduction", "content": "The constraint satisfaction problem over a structure A (CSP(A)) is the problem of verifying whether a set of constraints over A admits at least one solution. This problem framework is vast, and, just to name a few, include all Boolean satisfiability problems as well as k-coloring problems, and for infinite domains we may formulate both problems centrally related to model checking first-order formulas and qualitative reasoning. Notable examples where complete complexity dichotomies are known (separating tractable from NP-hard problems) include all finite structures [13, 27] and first-order definable relations over well-behaved base structures like (N, =) and (Q, <) [2]. While impressive mathematical achievements, these dichotomy results are still somewhat unsatisfactory from a practical perspective since we are unlikely to encounter instances which are based on purely tractable constraints. Could it be possible to extend the reach of these powerful theoretical results by relaxing the basic setting so that we may allow greater flexibility than purely tractable constraints while still obtaining something simpler than an arbitrary NP-hard CSP?\nWe consider this problem in a hybrid setting via problems of the form CSP(AUB) where A is a \"stable\", tractable background structure and B is an alien structure. We focus on the case when CSP(AUB) is NP-hard (thus, richer than a polynomial-time solvable problem) but where we have comparably few constraints from the alien structure B. This problem is compatible with the influential framework of parameterized complexity which has been used with great effect to study structurally restricted problems (e.g., based on tree-width) but where comparably little is known when one simultaneously restricts the allowed constraints.\nWe begin (in Section 3) by relating the CSP problem with alien constraints to other problems, namely, (1) model checking, (2) the problem of checking whether a constraint in a CSP instance is redundant, (3) the implication problem and (4) the equivalence problem. We prove that the latter three problems are equivalent under Turing reductions and provide a general method for obtaining complexity dichotomies for all of these problems via a complexity dichotomy for the CSP problem with alien constraints. Importantly, all of these problems are well-known in their own right, but have traditionally been studied with wildly disparate tools and techniques, but by viewing them under the unifying lens of alien constraints we not only get four dichotomies for the price of one but also open the powerful toolbox based on universal algebra. For non-Boolean domains this is not only a simplifying aspect but an absolute necessity to obtain general results. We expand upon the algebraic approach in Section 4 and relate alien constraints to primitive positive definitions (pp-definitions) and the important notion of a core. As a second general contribution we explore the case when each relation in B can be defined via an existential positive formula over A. This results in a general fixed-parameter tractable (FPT) algorithm (with respect to the number of alien constraints) applicable to both finite, and, as we demonstrate later, many natural classes of structures over infinite domains.\nIn the second half of the paper we attack the complexity of alien constraints more systematically. We begin with structures over finite domains where we obtain a general tractability result by combining the aforementioned FPT algorithm together with the CSP dichotomy theorem [13, 27]. In a similar vein we obtain a general hardness result based on a universal algebraic gadget. Put together this yields a general result: if AUB is a core (which we may assume without loss of generality) then either CSP<(A\u222aB) is FPT, or CSP<p(AUB) is NP-hard for some p > 0, i.e., is para-NP-hard (pNP-hard). Thus, from a parameterized complexity view we obtain a complete dichotomy (FPT versus pNP-hardness) for finite-domain structures. However, to also obtain dichotomies for implication, equivalence,"}, {"title": "Preliminaries", "content": "We begin by introducing the basic terminology and the fundamental problems under consideration. We assume throughout the paper that the complexity classes P and NP are distinct. We let Q denote the rationals, N = {0, 1, 2, . . . } the natural numbers, Z = {..., -2.-1, 0, 1, 2, . . . } the integers, and Z+ = {1,2,3,...} the positive integers. For every $c \\in Z_+$, we let $[c] = {1, 2, ..., c}$.\nA parameterized problem is a subset of $2^* \\times \\mathbb{N}$ where $\\Sigma$ is the input alphabet, i.e., an instance is given by $x \\in \\Sigma^*$ of size $n$ and a natural number $k$, and the running time of an algorithm is studied with respect to both $k$ and $n$. The most favourable complexity class is FPT (fixed-parameter tractable), which contains all problems that can be decided in $f(k) \\cdot n^{o(1)}$ time with $f$ being some computable function. An fpt-reduction from a"}, {"title": "Applications of Alien Constraints", "content": "We will now demonstrate how alien constraints can be used for studying the complexity of CSP-related problem: Section 3.1 contains an example where we analyse the complexity of redundancy, equivalence, and implication problems, and we consider connections between the model checking problem and CSPs with alien constraints in Section 3.2. To relate problem complexity we use Turing reductions: a problem $L_1$ is polynomial-time Turing reducible to $L_2$ (denoted $L_1 \\leq_T L_2$) if it can be solved in polynomial time using an oracle for $L_2$. Two problems $L_1$ and $L_2$ are polynomial-time Turing equivalent if $L_1 \\leq_T L_2$ and $L_2 \\leq_T L_1$."}, {"title": "The Redundancy Problem and its Relatives", "content": "We will now study the complexity of a family of well-known computational problems. We begin by some definitions. Let A denote a constraint language and assume that $I = (V, C)$ is an instance of CSP(A). We say that a constraint $c\\in C$ is redundant in $I$ if $Sol((V, C')) = Sol((V, C \\\\ {c}))$. We have the following computational problems.\n**REDUNDANT (A)**\nInstance: An instance $(V, C)$ of CSP(A) and a constraint $c\\in \u0421$.\nQuestion: Is $c$ redundant in $(V, C)$?\n**IMPL(A)**\nInstance: Two instances $(V, C_1), (V, C_2)$ of CSP(A).\nQuestion: Does $(V, C_1)$ imply $(V, C_2)$, i.e., is it the case that $Sol((V, C_1)) \\subseteq Sol((V, C_2))$?\n**EQUIV(A)**\nInstance: Two instances $(V, C_1), (V, C_2)$ of CSP(A).\nQuestion: Is it the case that $Sol((V, C_1)) = Sol((V, C_2))$?\nBefore we start working with alien constraints, we exhibit a close connection between REDUNDANT(\u00b7), EQUIV(\u00b7), and IMPL(\u00b7).\n$\\triangleright$ **Lemma 3**. *Let A be a structure. The problems EQUIV(A), IMPL(A), and REDUNDANT(A) are polynomial-time Turing equivalent.*\nProof. We show that (1) EQUIV(A) $\\leq_T$ IMPL(A), (2) IMPL(A) $\\leq_T$ REDUNDANT(A), and (3) REDUNDANT(A) $\\leq_T$ EQUIV(A).\n(1). Let $((V, C_1), (V, C_2))$ be an instance of EQUIV(A). We need to check whether $Sol((V, C_1)) = Sol((V, C_2))$. This is true if and only if the two IMPL instances $((V, C_1), (V, C_2))$ and $((V, C_2), (V, C_1))$ are yes-instances.\n(2). Let $((V, C_1), (V, C_2))$ be an instance of IMPL(A). For each constraint $c \\in C_2$, first check whether $C_1$ implies ${c}$ by (a) checking if $c \\in C_1$, in which case $C_1$ trivially implies ${c}$, (b) if not, then check whether $c$ is redundant in $C_1 \\cup {c}$, in which case we answer yes,"}, {"title": "Model Checking", "content": "We follow [20] and view the model checking problem as follows: given a logic L, a structure A, and a sentence & of L, decide whether A |= 6. The main motivation for this problem is its connection to databases [26]. From the CSP perspective, we consider a slightly reformulated version: given an instance $I = (V, C)$ of CSP(A) and a formula $ \\phi$ with free variables in V, we ask if there is a tuple in $Sol(I)$ that satisfies $\\phi$. If $\\phi$ can be expressed as an instance $I'$ of CSP(B) for some structure B, then this is the same thing as if asking whether $I \\cup I'$ has a solution or not. In the model-checking setting, we want to check whether & is true in all solutions of I. If $\\lnot \\phi$ can be expressed as an instance $I'$ of CSP(B) for some structure B, then we are done: every solution to I satisfies & if and only if CSP(I \\cup I') is not satisfiable, and this clarifies the connection with CSPs with alien constraints. For instance, one may view IMPL(A) (and consequently the underlying CSP<1(A\u222aR) problems by Lemma 3 and Theorem 4) as the model checking problem restricted to queries that are A-sentences constructed using the operators $\\forall$ and $\\bigvee$. Naturally, one wants the ability to use more complex queries such as (1) queries extended with other relations, i.e. queries constructed over an expanded structure, or (2) queries that are built using other logical connectives.\nIn both cases, it makes sense to study the fixed-parameter tractability of CSP<(AUB) with parameter #ac since the query is typically much smaller than the structure A. The"}, {"title": "General Tools for Alien Constraints", "content": "We analyze the complexity of CSP<k(AUB), starting in Section 4.1 by investigating which of the classic algebraic tools are applicable to the alien constraint setting, and continuing in Section 4.2 by presenting a general FPT result. We will use these observations for proving various results but also for obtaining a better understanding of alien constraints."}, {"title": "Alien Constraints and Algebra", "content": "First, we have a straightforward generalization of Theorem 1 in the alien constraint setting.\n$\\triangleright$ **Theorem 5**. *(*) Let A and B be two structures with disjoint signatures. There exists a polynomial time many-one reduction f from CSP<(A* UB*) to CSP<(AUB) for any finite A* $\\subseteq$ <A> and B* $\\subseteq$ <A\u222aB>. If I = (V,C,k) is an instance of CSP<(A* UB*) and f(I) = (V', C', k'), then k' only depends on k, A, B, and B*, so f is an fpt-reduction.*\nThis claim is, naturally, in general not true for CSP<k(A* UB) for finite A* $\\subseteq$ <A\u222aB>. The idea underlying Theorem 5 can be used in many different ways and we give one example.\n$\\triangleright$ **Proposition 6**. *If A, B are structures and R \u2208 <A\u222aB>\u22641, then CSP<k(A\u222a (B\u222a{R})) is polynomial-time reducible to CSP\u2264k(A\u222aB).* \nWe proceed by relating CSP<k(AUB) to the important idea of reducing to a core (recall Section 2). Recall that A denotes the (unique up to isomorphism) core of a finite-domain structure A. For two structures AUB we similarly write <AUB> for the core. Specifically, if e \u2208 End(AUB) has minimal range, then the core consists of ${e(R) | R\\in A} \\cup {e(R) | R\\in B}$ of the same signature as A and B, and the problem CSP<((A\u222aB)^\\circ)$ is thus well-defined.\n$\\triangleright$ **Theorem 7**. *(*) Let A and B be two structures over a finite universe A. Then CSP<(AUB) and CSP<((A\u222aB)^\\circ)$ are interreducible under both polynomial-time and fpt reductions.*\nIn general, it is not possible to reduce from CSP\u2264k(AUB) to CSP<k(AUB) or from CSP<k(AUB) to CSP<k(AUB). This can be seen as follows. Consider the Boolean relation $R(x_1,x_2, x_3) = x_1 = x_2 \\lor x_2 = x_3$, and let A = {R}, B = {\\neq}. Then, CSP\u22641(AUB) is NP-hard (see e.g. Exercise 3.24 in [14]) so CSP<(AUB) is pNP-hard. However, A is 0-valid, so A = ${${(0,0,0)}}$ implying that CSP<(AUB) is in P."}, {"title": "Fixed-Parameter Tractability", "content": "We present an algorithm in this section that underlies many of our fixed-parameter tractability results and it is based on a particular notion of definability. The existential fragment of first-order logic consists of formulas that only use the operations negation, conjunction, disjunction, and existential quantification, while the existential positive fragment additionally disallows negation. We emphasize that it is required that the equality relation is allowed in existential (positive) definitions. We can view existential positive in a different way that is easier to use in our algorithm. Let A be a structure with domain A and assume that $R \\subseteq A^m$ is defined via a existential positive definition over A, i.e., $R(x_1,...,x_m) = \\exists y_1,..., y_n: \\phi(x_1,...,x_m, y_1,..., y_n)$ where $ \\phi$ is a quantifier-free existential positive A-formula. Since $ \\phi$ can be written in disjunctive normal form without introducing negation or quantifiers, it follows that R is a finite union of relations in <A>.\n$\\triangleright$ **Theorem 8**. *Assume the following.*\n1. A, B are structures with the same domain A,\n2. every relation in B is existential positive definable in A, and\n3. CSP(A) is in P.\nThen CSP<(AUB) is in FPT parameterized by #ac.\nProof. Assume B = ${A; B_1, ..., B_m}$. Condition 2. implies that $B_i$, $i \\in [m]$, is a finite union of relations $B_i = R^1 \\cup \\dots \\cup R^{c_i}$ where $R^1,..., R^{c_i}$ are in <A>. Let the structure A* contain the relations in $A \\cup {R | i \\in [m] \\text{ and } j \\in [c_i]}$. Clearly, A* has a finite signature and the problem CSP(A*) is in P by Theorem 1 since every relation in A* is a member of <A>. Let $b = max{c_i | i \\in [m]}$.\nLet $((V, C), k)$ denote an arbitrary instance of CSP<(AUB)). The satisfiability of $(V, C)$ can be checked via the following procedure. If C contains no B-constraint, then check the satisfiability of $(V,C)$ with the polynomial-time algorithm for CSP(A). Otherwise, pick one constraint $c = B_i(x_1,...,x_q)$ with $B_i \\in B$ and check recursively the satisfiability of the following instances:\n$(V, (C \\\\ {c}) \\cup {R^1(x_1,...,x_q)}),..., (V, (C \\\\ {c}) \\cup {R^{c_i} (x_1,...,x_q)})$.\nIf at least one of the instances is satisfiable, then answer \"yes\" and otherwise \"no\". This is clearly a correct algorithm for CSP<(AUB).\nWe continue with the complexity analysis. Note that the leaves in the computation tree produced by the algorithm are CSP(A*) instances and they are consequently solvable in polynomial time. The depth of the computation tree is at most k (since $(V, C)$ contains at most k B-constraints) and each node has at most b children. Thus, the problem can be solved in $b^k \\cdot poly(|I|)$ time. We conclude that CSP<(AUB) is in FPT parameterized by #ac since b is a fixed constant that only depends on the structures A and B."}, {"title": "Finite-Domain Languages", "content": "This section is devoted to CSPs over finite domains. We begin in Section 5.1 by studying how the definability of constants affect the complexity of finite-domain CSPs with alien constraints, and we use this as a cornerstone for a parameterized FPT versus pNP dichotomy result for of CSP<(AUB). We show a sharper result for Boolean structures in Section 5.2."}, {"title": "Parameterized Dichotomy", "content": "We begin with a simplifying result. For a finite set A, let CA be the structure whose relations are the constants over A.\n$\\triangleright$ **Lemma 9**. *(*) Let A be a structure over a domain A. For every C $\\subseteq CA$, CSP(AUC) is polynomial-time reducible to CSP<|C|(AUC).*\nLemma 9 together with the basic algebraic results from Section 4.1 allows us to prove the following result that combines a more easily formulated fixed-parameter result (compared to Theorem 8) with a powerful hardness result.\n$\\triangleright$ **Theorem 10**. *(*) Let A, B be structures with finite domain D. Assume that AUB is a core. If CSP(AUCA) is in P, then CSP<(AUB) is in FPT with parameter #ac. Otherwise, CSP<p(AUB) is NP-hard for some p that only depends on the structures A and B.*\nProof. We provide a short proof sketch, the full proof is in Appendix E. Using the dichotomy of finite domain CSPs [13, 27], we first assume CSP(AUCD) is in P. One can prove that every tuple over D is pp-definable over AUCD and then that each relation in B is existential positive definable over AUCD. We can now apply Theorem 8, and CSP<(AUB) is in FPT.\nFor the NP-hard case, we assume CSP(AUCD) is NP-hard and construct a polynomial-time reduction from CSP(AUCD) to CSP<p(AUB). We use the endomorphisms of AUB to construct a pp-definable relation E which allow us to simulate the constant relations, and a reduction to CSP<1(A\u222a{E}) to establish the claim via Lemma 9 and Theorem 5. \nTheorem 10 has broad applicability. Let us, for instance, consider a structure A with finite domain A and containing a finite number of relations from Inv(f) where $f: A^m \\rightarrow A$ is idempotent (f : $A^m \\rightarrow D$ is idempotent if $f(a,...,a) = a$ for all $a \\in A$.) If CSP(A) is in P, then CSP(AUCA) is in P since constant relations are invariant under f. Hence, CSP(AUB) is in FPT parameterized by #ac for every finite structure B with domain A by Theorem 10. Idempotent functions that give rise to polynomial-time solvable CSPs are fundamental and well-studied in the literature; see e.g. the survey by Barto et al. [1].\nVia Theorem 7 we obtain the following parameterized complexity dichotomy separating problems in FPT from pNP-hard problems.\n$\\triangleright$ **Corollary 11**. *Let A, B be structures over the finite domain A. Then, CSP<(AUB) is either in FPT or pNP-hard (in parameter #ac).*\nProof. Let e \u2208 End(AUB) have minimal range and let A' = ${e(R) | R\\in A}$ and B' = ${R | R\\in B}$ be the two components of the core (AUB), and let A' = ${e(a) | a \\in A}$ be the resulting domain. The problems CSP<(AUB) and CSP<(A' UB') are fpt-interreducible by Theorem 7. The problem CSP(A'UCA') is either in P or is NP-hard by the CSP dichotomy theorem [13, 27]. In the first case, CSP<(A'UB') (and thus CSP<(A\u222aB)) is in FPT with parameter #ac. Otherwise, CSP<(A' UB') is pNP-hard, and the fpt-reduction from CSP(A'U B') to CSP<(AUB) establishes pNP-hardness for the latter.\nCorollary 11 must be used with caution: it does not imply that CSP\u22641(AUB) is NP-hard and results such as Theorem 4 may not be applicable. This encourages the refinement of coarse complexity results based on Theorem 10. We use Boolean relations as an example of this in the next section."}, {"title": "Classification of Boolean Languages", "content": "We present a complexity classification of CSP<(A\u222aB) when A and B are Boolean structures (Theorem 14). We begin with two auxiliary results and we define relations $c_0 = {{(0)}}$ and $c_1 = {{(1)}}$.\n$\\triangleright$ **Lemma 12**. *(*) Let A be a Boolean structure where $c_0 \\in <A>$. If an n-ary Boolean $R \\neq \\emptyset$ is not 0-valid then $c_1 \\in <A\\cup {R}>_{<1}$.*\nWe say that a Boolean relation $R$ is invariant under complement if it is invariant under the operation ${0 \\rightarrow 1, 1 \\rightarrow 0}$. This is equivalent to $(t_1,...,t_k) \\in R$ if and only if $(1-t_1, ..., 1 \u2013 t_k) \\in R$.\n$\\triangleright$ **Lemma 13**. *(*) Let A be a Boolean structure with finite signature. If A is invariant under complement, then CSP(A$\\cup {c_0,C_1})$ is polynomial-time reducible to CSP<$1(A$\\cup{\\neq})$.*\nWe are now ready for analysing the complexity of CSP<(AUB) when A and B are Boolean structures. We use a simplifying concept: a 0/1-pair $(R_0, R_1)$ contains two Boolean relations where $R_0$ is 0-valid but not 1-valid and $R_1$ is 1-valid but not 0-valid.\n$\\triangleright$ **Theorem 14**. *Let A and B be Boolean structures such that CSP(A) is in P and CSP(AUB) is NP-hard. Then the following holds.*\n1. If A is Schaefer, then CSP<(AUB) is in FPT with parameter #ac.\n2. If (i) A is not Schaefer, (ii) A is both 0- and 1-valid, (iii) B contains a 0/1-pair, and (iv) Bis 0- or 1-valid, then CSP<$2(AUB)$ is NP-hard and CSP<$1(AUB)$ is in P.\n3. Otherwise, CSP<$1(AUB)$ is NP-hard.\nProof. Assume A is Schaefer and let $A^+ = A \\cup {c_0, c_1}$. The structure A+ is clearly a core and A+ UB is a core, too. The problem CSP(A+) is in P by Theorem 2 so Theorem 10 implies that CSP<(A+ $\\cup$ B) (and naturally CSP<(A$\\,B)) is in FPT parameterized by #ac. Since CSP(A) is in P, we know from Theorem 2 that A is 0-valid, 1-valid or Schaefer. We assume henceforth that A is 0-valid and not Schaefer; the other case is analogous. If B is 0-valid, then CSP(A\u222aB) is trivially in P and this is ruled out by our initial assumptions. We assume henceforth that B is not 0-valid and consider two cases depending on whether co is pp-definable in A or not.\nCase 1. co is pp-definable in A. We know that CSP(A\u222a ${c_0, C_1}$) is NP-hard by Theorem 2 since A is not Schaefer. We can thus assume that CSP(A\u222a ${c_1}$) is NP-hard. Lemma 9 implies that CSP<1(A\u222a{c\u2081}) is NP-hard. The relation c\u2081 is in (AUB)\u22641 by Lemma 12 so we conclude that CSP<1 (AUB) is NP-hard.\nCase 2. co is not pp-definable in A. This implies that every relation in A is simultaneously 0- and 1-valid. To see this, assume to the contrary that A contains a relation that is not 1-valid. Then, $x = 0 \\iff R(x,...,x)$ and co is pp-definable in A. This implies that B contains (a) a relation that is not invariant under any constant operation or (b) every relation is closed under a constant operation and B contains a 0/1-pair. Note that if (a) and (b) does not hold, then B is invariant under a constant operation and CSP(AUB) is trivially in P.\nCase 2(a). There is a a relation R in B that is not invariant under any constant operation, i.e. $(0,...,0) \\notin R$ and $(1, ..., 1) \\notin R$. The relation R has arity $a \\geq 2$. Let t be the tuple in R that contains the maximal number b of 0:s. Clearly, $b < a$. We assume that the arguments are permuted so that t begins with b 0:s and continues with a - b 1:s. Consider the pp-defintion\n$S(x,y) = R(x,...,x, y, ..., y)$.\nb occ. a-b occ."}, {"title": "Infinite-Domain Languages", "content": "We focus on infinite-domain CSPs in this section. We begin Section 6.1 by discussing certain problems when CSPs with alien constraints are generalized to infinite domains. Our conclusion is that restricting ourselves to w-categorical structures is a viable first step: w-categorical structures constitute a rich class of CSPs and we can generalize at least some of the machinery from Section 5 to this setting. We demonstrate this in Section 6.2 where we obtain a complete complexity classification for equality languages."}, {"title": "Orbits and Infinite-Domain CSPs", "content": "It is not straightforward to tranfer the results in Section 5 to the infinite-domain regime. First, let us consider Theorem 8. In contrast to finite domains, relations in B may not be finite unions of relations in \u3008A\u3009 or, equivalently, not being definable with an existential positive formula. Second, let us consider Theorem 10: the proof is based on structures expanded with symbols for each domain value and this leads to problematic structures with infinite signatures. The proof is also based on the assumption that CSPs are either polynomial-time solvable or NP-complete, and this is no longer true [5]. It is thus necessary to restrict our"}, {"title": "Classification of Equality Languages", "content": "We present a complexity classification of CSP<(AUB) for equality languages A, B. Essen- tially, there are two interesting cases: when A is Horn, and when A is 0-valid and not Horn. In the former case, CSP<(A\u222aB) is in FPT parameterized by #ac, while in the second case it is pNP-hard. It turns out that the ability to pp-define the arity-c disequality relation, where c depends only on A, using at most k alien constraints, determines the complexity. A dichotomy for REDUNDANT(\u00b7), IMPL(\u00b7), and EQUIV(\u00b7) follows: these problems are either in P or NP-hard under polynomial-time Turing reductions."}, {"title": "Discussion", "content": "We have focused on structures with finite signatures in this paper. This is common in the CSP literature since relational structures with infinite signature cause vexatious representational issues. It may, though, be interesting to look at structures with infinite signatures, too. Zhuk [28] observes that the complexity of the following problem is open: given a system of linear equations mod 2 and a single linear equation mod 24, find a satisfying assignment over the domain {0,1}. The equations have unbounded arity so this problem can be viewed as a CSP\u22641 (AUB) problem where A, B have infinite signatures. This question is thus not directly answered by Theorem 14. Second, let us also remark that when considering CSP<(AUB), we have assumed that both A and B are taken from some nice \"superstructure\". For example, in the equality language case we assume that both structures are first-order reducts of (N; =). One could choose structures more freely and, for example, let A be an equality language and B a finite-domain language. This calls for modifications of the underlying theory since (for instance) the algorithm that Theorem 8 is based on breaks down.\nFor finite domains we obtained a coarse parameterized dichotomy for CSP<(AUB) separating FPT from pNP-hardness. Sharper results providing the exact borderline between P and NP-hardness for the pNP-hard cases are required for classifying implication, equivalence, and redundancy. Via Theorem 7 and Theorem 10 the interesting case is when CSP(A) is in P, AUB is core but A is not core. This question may be of independent algebraic interest and could be useful for other problems where the core property is not as straightforward as in the CSP case. For example, in surjective CSP we require the solution to be surjective, and this problem is generally hardest to analyze when the template is not a core [8].\nAny complexity classification of the first-order reducts of a structure includes by necessity a classification of equality CSPs. Thus, our equality language classification lay the foundation for studying first-order reducts of more expressive structures. A natural step is to study temporal languages, i.e. first-order reducts of (Q; <). Our classification of equality constraint languages relies on the work in [4] via [21], who studied the clones of polymorphisms of equality constraint languages in more detail. One important result, due to Haddad & Rosenberg [16], is that after excluding several easy cases, every equality constraint language we end up with is only closed under operations with range [c] for some constant c. Then, pp-defining the relation NEQc+1 brings us into pNP-hard territory. Similar characterizations of the polymorphisms for reducts of other infinite structures, e.g. (Q; <), would imply corresponding pNP-hardness results, and this appear to be a manageable way forward."}]}