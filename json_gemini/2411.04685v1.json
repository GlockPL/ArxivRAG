{"title": "Solving Generalized Grouping Problems in Cellular Manufacturing Systems Using a Network Flow Model", "authors": ["Md. Kutub Uddin", "Md. Saiful Islam", "Md Abrar Jahin", "Md. Saiful Islam Seam", "M. F. Mridha"], "abstract": "This paper focuses on the generalized grouping problem in the context of cellular manufacturing systems (CMS), where parts may have more than one process route. A process route lists the machines corresponding to each operation of the part. Inspired by the extensive and widespread use of network flow algorithms, this research formulates the process route family formation for generalized grouping as a unit capacity minimum cost network flow model. The objective is to minimize dissimilarity (based on the machines required) among the process routes within a family. The proposed model optimally solves the process route family formation problem without pre-specifying the number of part families to be formed. The process route of family formation is the first stage in a hierarchical procedure. For the second stage (machine cell formation), two procedures, a quadratic assignment programming (QAP) formulation, and a heuristic procedure, are proposed. The QAP simultaneously assigns process route families and machines to a pre-specified number of cells in such a way that total machine utilization is maximized. The heuristic procedure for machine cell formation is hierarchical in nature. Computational results for some test problems show that the QAP and the heuristic procedure yield the same results.", "sections": [{"title": "1. Introduction", "content": "The world of manufacturing is undergoing rapid growth due to increasing demand for all kinds of products. This growth is accompanied by radical changes, transforming the face of manufacturing altogether. Cellular manufacturing systems (CMS), based on the philosophy of group technology (GT), have been recognized as a technological innovation in job shop or batch-type production systems to gain economic advantages similar to those of mass production systems. CMS is capable of producing small to medium-sized batches of a large variety of parts in a flow-line manner. The concept of CMS involves dividing the entire production system into smaller autonomous subsystems to improve shop floor control, material handling, tooling, and scheduling. This approach leads to decreased setup times, in-process inventories, and throughput times. To achieve this decomposition, it is necessary to identify subsets of parts with similar processing or design requirements so that each subset of parts can be processed by a single subsystem. In the context of GT, each such subsystem is termed a machine cell, and each subset of parts is referred to as a part family. The identification of machine cells and part families is known as machine-component grouping and is the first step in the design of a CMS. This partitioning of machines and parts in a factory is achieved through the application of GT. The application of GT does not depend on the degree of automation in a factory, and hence, GT can be applied at any level of automation, from manual production to fully automated systems.\nThe grouping problem varies depending on factors like the availability of information and the level of decision-making. In a simple grouping problem, each part has only one process plan, and each operation of the process plan can be performed on only one machine. As a result, each part has only one process route. Here, the terms \u2018process plan' and \u2018process route' have different meanings. A process plan lists the operations required to complete a part, while a process route lists the machines to which the various operations are assigned. On the other hand, in a generalized grouping problem, each part has more than one process route. The objective of the grouping problem, in this case, is to identify a single process route for each part and determine the process route families and machine cells. The goal is to ensure that each machine cell is capable of handling at least one process route family."}, {"title": "2. Literature review", "content": "Extensive studies have been conducted based on the framework of network flow models, particularly in routing (Yan and Wong, 2009; Cova and Johnson, 2003), planning and scheduling (Rietz et al., 2016), production optimization (Lerlertpakdee et al., 2014), supply chain management and intelligent transportation (Hsu and Wallace, 2007; Rudi et al., 2016), inventory management and distribution (Hovav and Tsadikovich, 2015), social network analysis (Gomez et al., 2013), resilience assessment (Goldbeck et al., 2019; Yin et al., 2022), infrastructural interdependencies (Holden et al., 2013), water supply planning (Hsu and Cheng, 2002), strategic mine planning (Topal and Ramazan, 2012), and energy systems (Quelhas et al., 2007; Quelhas network flow problem is solved. The solution to the network flow problem consists of one complete loop and several sub-loops, each loop corresponding to a machine cell. Compared to the p-median model, this approach is reported to have excellent potential for providing computationally efficient and optimal solutions for simple grouping problems. Cheng et al. (2019) developed generalized grouping strategies in coded caching, and Garg and Arora (2018) developed fuzzy soft-set decision-making frameworks, demonstrating the flexibility of grouping techniques. These methods integrate expert preferences and efficiently manage uncertainty, offering powerful tools for decision-making. The use of grouping concepts in decision theory and computational problems is further illustrated by the grouping functions proposed by Bustince et al. (2011) and the generalized group testing procedures proposed by Malinovsky (2019). These approaches enhance efficiency and scalability across various fields. This thorough analysis highlights the usefulness and potential of network flow models in addressing a range of grouping problems.\nIt is evident that network flow models have been successfully applied across various domains, including social networks, decision-making, industry, and infrastructure, to ensure computational efficiency and practical application. These models provide robust frameworks for enhancing resilience, improving decision-making, and optimizing complex systems. Consequently, they offer valuable insights for the development of a network flow model for the generalized grouping problem."}, {"title": "3. Problem environment", "content": "For the proposed network flow model, a generalized grouping problem is considered where each part has more than one process route. The input to the problem is a two-dimensional (0-1) matrix showing the requirement of machines for various operations of each process route. The entry value in the matrix is 1 if an operation of a process route requires a particular machine and 0 otherwise. The grouping problem involves selecting one process route for each part from the given alternatives and grouping them into process route families, each of which can be processed by a single machine cell. Several process route families can be processed by a machine cell. The objective is to minimize the distance (dissimilarity) among the process routes within a family. The proposed model is expected to result in machine cells with the minimum possible inter-cell movements.\nWe consider a problem situation where there are K parts, and each part has a set of distinct process routes. Different process routes for a part generally require different sets of machines to complete the operations. In total, combining all the parts, there are N process routes. There are M machines of different types, and a maximum of C cells are to be created. The objective is to minimize the inter-cell movements of parts and to maximize machine utilization."}, {"title": "4. The solution approach", "content": "The proposed model solves the problem in a hierarchical manner. First, process route families are formed based on minimum dissimilarity among the members of each family using a network flow model. In the second stage, machine cells are formed, and process route families are assigned to these cells simultaneously, with the objective of maximizing machine utilization. For machine cell formation and process route family assignment, a heuristic and a QAP formulation are proposed.\nThe mechanism of process route family formation is as follows. First of all, for each part, there is a source or supply node (ks) and a sink or demand node (ka). For each process route, there are two nodes, a and b, and a directed arc (a, b). From each part source node, arcs go to the corresponding process route node a. All arcs coming to a part sink node come from the corresponding process route node b. It is obvious that only one process route must be selected for each part. Let part k have TPR(k) process routes. So, TPR(k)-1 routes are eliminated from consideration by including the corresponding arcs in directed paths from source to sink (ks \u2192 ia \u2192 ib \u2192kd). The flow value on all process route arcs is constrained to 1. The supply at the source and demand at the sink are fixed at TPR(k)-1 for all parts. This results in exactly one process route, with no supply from the source for each part. However, since all process routes are constrained to have flow value 1, even the process route arcs getting no supply from the source node have to have the flow conditions satisfied. This is possible only if such unsatisfied arcs form cycles within themselves, which are nothing but process route families. Further, to encourage better formation of process route cycles, the arc costs from one process route to another are taken as the corresponding dissimilarity values between them, the total of which is to be minimized over the whole network. In this way, the network flow model tries to group similar process routes together. The calculations of dissimilarity values are described in Sub-section 5.1.\nAt the stage of machine cell formation and route family assignment, the machine requirements for the various process route families are evaluated. Machine cells are created based on these requirements. Some process route families may be assigned to a cell if their machine requirements are fully met by that cell. If the requirements do not match completely, the family will be assigned to a cell where most of its requirements are satisfied, which may result in inter-cell movements.\nThe following notations are used for the development of the network flow model for process route family formation and machine cell formation model."}, {"title": "5. Proposed network flow model for route family formation", "content": "The proposed network flow model consists of three steps. The first step involves computing the pairwise dissimilarity between process routes, as described in subsection 5.1. The second step constructs the unit capacity minimum cost flow network, detailed in subsection 5.2. The third step identifies the process route families by solving the unit capacity minimum cost network flow problem, as described in subsection 5.3."}, {"title": "5.1 Computation of dissimilarities (or distances)", "content": "The pairwise dissimilarities between process routes are computed as follows:\nThe dissimilarity value between a pair of process routes is measured as the number of machines that are not common to them. Let dij be the dissimilarity between process routes i and j. The value of dij (dissimilarity) is an indicator showing the degree of dissimilarity between process routes i and j. The value gets smaller as the two process routes require more and more common machines for processing. The process route-machine matrix A = [aim] (i = 1,..., N; m = 1,..., M) is used to calculate the elements dij; of the dissimilarity matrix D = [dij]. The Hamming metric, to calculate the distance between a pair of binary row vectors, is used to calculate the dissimilarity between two process routes of different parts as shown below:\n$d_{ij} = \\sum_{m=1}^{M} \\delta(a_{im}, a_{jm}) \\forall i\\in PR(k1); j\\in PR(k2); $\n$ k1, k2 = 1,..., K; k1\\neq k2$\nwhere $\u03b4 (a_{im},a_{jm}) =\n\\begin{cases}\n  1 & \\text{if } a_{im} \\neq a_{jm} \\\\\n  0 & \\text{otherwise}\n\\end{cases}$\nFor example, consider process routes 1 and 3, where the number of machines in route 1 is 7 and the number of machines for route 3 is 5, out of which 3 machines are common. Then the dissimilarity between the pair (1, 3) is taken as (total number of machines \u2013 total number of common machines) = (5+7) \u2212 (2\u00d73) = 6. To illustrate the calculation of the total dissimilarity value for a process route family, let us consider a process route family having process routes 1, 2, 3, and 4. Now, one cyclic order for this family could be (1, 2), (2, 3), (3, 4), and (4, 1). The dissimilarity value for this cyclic order will be d12 + d23+ d34 + d41, where dij is the dissimilarity value between processes routes i and j. There will be 4! such cyclic orders (n! cyclic orders for n process routes), and some of them will have the same dissimilarity value because of the symmetric nature of the dissimilarity coefficients, dij = dji. The dissimilarity value for a process route family is taken as the minimum of total dissimilarity values amongst all cyclic orders."}, {"title": "5.2 Construction of the network", "content": "The construction of the unit capacity minimum cost flow network is based on the work of Lee and Garcia-Diaz (1993), who proposed the network flow formulation for a simple grouping problem. The network is constructed using the N \u00d7 N dissimilarity matrix D obtained in subsection 5.1. The creation of nodes and arcs connecting the nodes and the assignment of weightage on arcs are carried out as follows:\nCreation of supply nodes\nCreate K supply nodes designated as 1s, 2s,..., Ks, and one node corresponding to each part (the subscript s denotes that it is a supply node). The supply capacity of the node ks is taken as TPR(k)-1 units, i.e., one less than the total number of process routes of part k; k = 1,..., K.\nCreation of demand nodes\nCreate K demand nodes designated as ld, 2d,..., Ka, again one node corresponding to each part (the subscript d denotes that it is a demand node). The demand requirement of node ka is again taken as TPR(k)-1 units; k = 1,..., \u041a.\nCreation of intermediate nodes\nCorresponding to each process route i, create a pair of nodes ia and ib. The two sets of nodes are designated as la, 2a,..., Na and 1b, 2b,..., Nb; i = 1,..., N. These 2N nodes are used as transshipment nodes, i.e., these nodes do not possess any supply capacity, nor do they have any demand.\nCreate arcs and assign a capacity-cost triplet [U, L, C] to each arc to indicate an upper bound on its flow (U), a lower bound on its flow (L), and the per unit cost of flow (C) respectively, according to the following rules:\nFor each supply node ks, k = 1,..., K and the corresponding transshipment node ia, i \u2208 PR(k); create supply arcs directed from ks to ia, signifying that part k uses process route i. For example, arc (1s, 1a) indicates that part 1 uses process route 1 for its processing. Assign capacity-cost triplet [U, L, C] = [1, 0, 0] to all arcs (ks, ia).\nFor each node pair ia and ib, i = 1,..., N; create transshipment arcs directed from ia to ib. The two nodes ia and ib, connected by a directed arc, represent a process route. For example, arc (1a, 1b) represents process route 1, arc (2a, 2b) represents process route 2, and so on. Assign capacity-cost triplet [U, L, C] = [1, 1, 0] to all arcs (ia, ib).\nFor each node ib, i \u2208 PR(k), k = 1,..., K and the corresponding node ka, create demand arcs directed from is to kd. The directed arc (ib, ka) signifies that part k uses process route i; for example, the directed arc (16, 1d) indicates that part 1 uses process route 1 for its processing. Assign capacity-cost triplet [U, L, C] = [1, 0, 0] to all arcs (ib, kd).\nFor each node is and ja, i \u2208 PR(k), j \u2209 PR(k), k = 1,..., K; create relational arcs directed from is to ja and assign capacity-cost triplet [U, L, C] = [1, 0, dij). The cost of shipping one unit of flow from node is to node ja is taken as the dissimilarity value between process routes i and j.\nObservations\n1.  The upper and the lower bound on flow on transshipment arcs (ia, ib), i = 1,..., N is 1 unit.\nThus, in accordance with the flow conservation, a node is can supply 1 unit of flow to either destination node ja or to demand node ka, i \u2208 PR(k), j \u2209 PR(k), k = 1,..., K.\n2.  If a part k has TPR(k) = n process routes, n units of flow are needed to satisfy the flow condition on the n transshipment arcs, say, (ia, ib), ((i+1)a, (i+1)b),... ((i+n-1)a, (i+n-1)b).\nHowever, according to the network construction, the supply node ks can supply only TPR(k) \u22121= n-1 units of flow, that is, to only n-1 of the transshipment arcs. The remaining 1 unit of flow required on the unsatisfied arc can be satisfied by including it either in a path with satisfied process route arcs of some other parts or in a cycle with unsatisfied process route arcs of some other parts. In general, such a cycle or path may involve more than one part and its process routes. The relational arcs (ib, ja) (i and j must not belong to the same part) are used to create these cycles or paths, and the weightage assigned to each such arc (ib, ja) is the dissimilarity value between process routes i and j, namely, dij. In the framework of the proposed minimum cost network flow problem, the relational arc that has the minimum dissimilarity (i.e., cost of flow) will be chosen for creating the cycle or path, and this is true for all other parts. Therefore, any optimal (or feasible) solution of the proposed minimum cost network flow problem will contain paths (from supply nodes to demand nodes) with flow value 1 or both paths and cycles with flow value 1. Two types of paths could be there. The first kind, direct path (ks \u2192ia \u2192 ib \u2192ka), includes only one process route, whereas the second kind, indirect path, includes more than one process route. The direct path does not contain any relational arcs, but the indirect path does.\n3.  The cost of flow on all arcs is zero except on relational arcs (ib, ja), i \u2208 PR(k), j \u2209 PR(k), k = 1,..., K; whose cost of flow is the dissimilarity value between process routes i and j, i.e., dij. Therefore, minimizing the total cost of flow in the network is equivalent to minimizing the total cost of flow on the relational arcs (ib, ja) with flow value 1, which, in turn, is equivalent to minimizing the total dissimilarity values among the process routes involved in creating the paths and cycles."}, {"title": "5.2.3 Mathematical formulation", "content": "The objective function is to minimize the total cost of flow in the network and consists of four components: cost of flow on supply arcs, cost of flow on transshipment arcs, cost of flow on relational arcs, and cost of flow on demand arcs. Assuming the linearity, these costs are computed\nas the product of flow rate f(...) and cost of unit flow w(...). The four cost components can be written as follows:\nCost of flow on supply arcs = $\\sum_{K=1} \\sum_{i\\in PR(k)} f(k_s, i_a). \\omega(k_s, i_a)$\nCost of flow on transshipment arcs = $\\sum_{i=1}^{N} f(i_a, i_b). \\omega(i_a, i_b)$\nCost of flow on relational arcs = $\\sum_{k=1}^{K} \\sum_{i \\in PR(k)} \\sum_{j \\notin PR(k)} f(i_b, j_a). \\omega(i_b, j_a)$\nCost of flow on demand arcs = $\\sum_{k=1}^{K} \\sum_{i \\in PR(k)} f(i_b, k_d). \\omega(i_b, k_d)$\nThe cost of flow on supply arcs, transshipment arcs, and demand arcs will always be zero because their cost of flow is zero according to Rule I, Rule II, and Rule IV, respectively. The cost of flow for the relational arcs, w(ib, ja), is taken as dij, the dissimilarity value between the two process routes i and j according to Rule III. Therefore, the objective function is reduced to:\n$\\min \\sum_{k=1}^{K} \\sum_{i\\in PR(k)} \\sum_{j \\notin PR(k)} d_{ij}. f (i_b, j_a)$\nConstraints\n1. Flow conservation at source nodes ks\nFlow emanating from these nodes must be equal to their supply capacities:\n$\\sum_{i\\in PR(k)} f (k_s, i_a) = TPR(k)\u22121$ k = 1, ..., K\n2. Flow conservation at nodes ia\nSince these are transshipment nodes, therefore, the incoming flow must be equal to the outgoing flow:\n$f(k_s, i_a) + \\sum_{j=1}^{N} f (j_b, i_a)= 1$ k=1,...,K; i\u2208 PR(k); j\u2209 PR(k)"}, {"title": "5.3 Process route (part) family identification", "content": "As stated in subsection 5.2 (observation 2), the network solution will contain cycles and paths (indirect paths) to satisfy the flow conditions on unsatisfied arcs. However, due to side constraint 7, the solution cannot contain any indirect paths, i.e., paths that include more than one process route and contain relational arcs. Therefore, the only way to satisfy the flow conditions on unsatisfied arcs is by creating cycles. The cost of flow on these arcs is the dissimilarity value between the two process routes connected by a relational arc. Since the objective function minimizes the cost of flow on relational arcs and only cycles can contain relational arcs, minimizing the total cost of flow on relational arcs is equivalent to minimizing the cost of flow on cycles. In other words, this means minimizing the dissimilarity values (which are the costs of flow for relational arcs) between the process routes included in the cycles. Generally, a cycle contains at least two process routes (each from a different part). These cycles will represent process route families in the context of GT and can be identified from the solution of the mathematical model described in subsection 5.2 by isolating the relational arcs with a flow value of 1."}, {"title": "6. Machine cell formation", "content": "For machine cell formation, we propose a QAP formulation and a heuristic procedure. The descriptions are given in the following subsections."}, {"title": "6.1 The QAP formulation", "content": "The QAP formulation assigns part families and machines to cells simultaneously. The inputs to the model are the maximum number of cells that can be formed, the maximum number of machines that can be assigned to a cell, and the machine usage factors (i.e., the number of process routes in a particular family using a particular machine) for all process route (part) families. The objective of the formulation is to maximize machine utilization. The output of the model is the assignment of part families and machines to cells."}, {"title": "Objective function", "content": "The objective of the model is to maximize machine utilization and can be written as:\n$ max\\sum_{c=1}^{C}\\sum_{r=1}^{R}\\sum_{m=1}^{M} U_{mr} Z_{mc}Y_{rc} $\nConstraints\n1.  Each machine is assigned to only one cell\n$\\sum_{C=1} Z_{mc} = 1$ m = 1,..., M\n2.  Each process route family is assigned to only one cell\n$\\sum_{C=1} Y_{rc} = 1$ r = 1, ..., R"}, {"title": "6.2 The heuristic procedure", "content": "The objective of the heuristic procedure is also to maximize machine utilization. It follows a hierarchical approach and consists of three steps. The first step combines process route families wherever possible. The second step assigns machines to the process route families. The third step merges process route families and machine cells wherever feasible within the system constraints.\nThe inputs to the procedure are the maximum number of machines that can be assigned to a cell, the process route families, and the machines they require. The details of the heuristic are as follows:\nStep-1. Combining the process route families\n1.  Take a process route family r\n2.  Check if the machines used by this process route family r are a subset or superset of the machines used by any other process route family. If the answer is yes, merge the two process route families; otherwise, go to 3.\n3.  Repeat 1 and 2 for all route families till no merging is possible.\nStep-2. Assigning the machines to process route families\n1.  Compute for each machine m the usage factor umr for each process route family r\n2.  Assign machine m to a process route family r where umr is maximum, the ties being broken arbitrarily.\n3.  Repeat 2 for all machines.\nStep-3. Merging the process route families and machine cells"}, {"title": "7. Numerical illustrations", "content": "To test the effectiveness of the present formulation, two data sets are chosen from the literature on generalized grouping problems: one without exceptional elements (i.e., where disjoint groups exist) and the other with exceptional elements (i.e., where disjoint groups do not exist). The number of exceptional elements is used as a critical criterion for measuring the effectiveness of cell formation, as it is widely used by researchers in generalized grouping theory."}, {"title": "7.1 Example problem I (without exceptional elements)", "content": "The first problem shown in Table 2 is the incidence matrix. There are 5 parts with a total of 11 process routes and 4 machines. In the process route family formation stage, two cycles are identified.\nCycle 1: f(2a, 2b) = f (2b, 7a) = f(7a, 7b) = f(7b, 2a) = 1\nCycle 2: f(5b, 11a) = f(11a, 11b) = f(11b, 9a) = f(9a, 9b) = f(9b, 5a) = f (5a, 5b) = 1\nThe two cycles are shown in Figures 3 and 4, respectively. From the two cycles, two process route families can be identified."}, {"title": "7.2 Example problem II (with exceptional elements)", "content": "The second problem is given in Table 5. This problem has 20 parts having a total of 51 process routes and 20 machines. In the process route family formation stage, seven cycles are identified as:\nCycle 1: f(2a, 2b) = f (2b, 11a) = f(11a, 11b) = f(11b, 6a) = f (6a, 6b) = f (6b, 2a) = 1\nCycle 2: f (30a, 30b) = f(30b, 33a) = f (33a, 33b) = f (33b, 36a) = f (36a, 36b) = f (36b, 30a) = 1\nCycle 3: f (49a, 49b) = f (49b, 51a) = f (51a, 51b) = f(51b, 50a) = f (50a, 50b) = f (50b, 49a) = 1\nCycle 4: f(4a, 4b) = f(4b, 8a) = f(8a, 8b) = f (8b, 4a) = 1\nCycle 5: f(41a, 41b) = f(41b, 47a) = f (47a, 47b) = f(47b, 41a) = 1\nCycle 6: f(44a, 44b) = f(44b, 48a) = f (48a, 48b) = f(48b, 44a) = 1\nCycle 7: f(12a, 12b) = f(12b, 17a) = f(17a, 17b) = f (17b, 23a) = f (23a, 23b) = f(23b, 21a) =\nf(21a, 21b) = f(21b, 28a) = f(28a, 28b) = f(28b, 12a) = 1\nFrom the seven cycles shown in Figures 5 to 11, seven process route families can be identified as:\n(i). Process route family 1 consisting of process routes 2, 6 and 11 corresponding to parts 1, 3 and 5 respectively.\n(ii). Process route family 2 consisting of process routes 30, 33 and 36 corresponding to parts 11, 12 and 13 respectively.\n(iii). Process route family 3 consisting of process routes 49, 50 and 51 corresponding to parts 18, 19 and 20 respectively.\n(iv). Process route family 4 consisting of process routes 4 and 8 corresponding to parts 2 and 4 respectively.\n(v). Process route family 5 consisting of process routes 41 and 47 corresponding to parts 14 and 16 respectively.\n(vi). Process route family 6 consisting of process routes 44 and 48 corresponding to parts 15 and 17 respectively.\n(vii). Process route family 7 consisting of process routes 12, 17, 21, 23, and 28 corresponding to parts 6, 7, 8, 9, and 10 respectively.\nIn the machine cell formation stage, applying machine cell formation heuristic, five machine cells are obtained with only one exceptional element. These results are same as those obtained by solving the QAP formulation for machine cell formation:\n(i). Machine cell 1 consisting of machines [1, 7, 9, 12]. Process route families as- signed to it are 1 and 4 which contain process routes [2, 4, 6, 8, 11].\n(ii). Machine cell 2 consisting of machines [2, 5, 6, 16, 19). Process route family assigned to it is 7 which contains process routes [12, 17, 21, 23, 28].\n(iii). Machine cell 3 consisting of machines [3, 8, 11, 18]. Process route family assigned to it is 2 which contains process routes [30, 33, 36].\n(iv). Machine cell 4 consisting of machines [10, 14, 17, 20]. Process route families assigned to it are 5 and 6 which contain process routes [41, 44, 47, 48].\nv). Machine cell 5 consisting of machines [4, 13, 15]. Process route family assigned to it is 3 which contains process routes [49, 50, 51]."}, {"title": "8. Conclusions and future research scopes", "content": "In this paper, we propose a procedure for forming part families and machine cells in a generalized grouping environment, where each part has more than one process route. The grouping problem involves selecting a process route for each part, grouping them into part families, and forming machine cells such that each machine cell can process at least one process route (part) family. The procedure organizes the formation of part families and machine cells hierarchically. For the process route family formation stage, a unit capacity minimum cost network flow model is developed. The proposed model solves the part family formation problem optimally without pre- specifying the number of part families to be formed and is not an iterative process. The method is flexible in that it can be used in both situations where disjoint groups exist and where they do not.\nOur computational results show that it provides better solutions than the p-median model in terms of exceptional elements.\nFor the machine cell formation stage, a QAP formulation and a heuristic procedure are proposed. The QAP formulation simultaneously assigns process route families and machines to the pre- specified number of cells to maximize machine utilization. One advantage of this formulation is that, even if a large number of cells is specified, the model will form only the optimal number of cells within the specified limit, ensuring maximized machine utilization while satisfying system constraints. The heuristic procedure is hierarchical in nature. In the first stage, it aims to reduce the number of process route families wherever possible. In the second stage, machines are assigned to process route families based on maximum utilization among competing families. In the final stage, the procedure attempts to merge cells (and corresponding process route families) wherever feasible within system constraints. Computational results show that the QAP and heuristic procedure yield the same results.\nIn the presence of exceptional elements in the final solution, an improvement scheme can be employed. In reality, particularly in flexible manufacturing systems environments where machines have inherent flexibility, it may be possible to reassign exceptional operations that create inter-cell movements within the cell itself, provided that the reassignment does not violate machine capacity constraints. For solving the network model, we used a mixed-integer optimization package (CPLEX 22.1.0.0). Except for side constraint 7, all other constraints and the objective function conform to the standard unit capacity minimum cost network flow problem, which can be solved using any minimum cost network flow algorithm.\nDue to constraint 7, a specialized network flow algorithm is required to solve the problem, and the development of such an algorithm could be a future avenue of research. The network flow model developed in this work involves certain side constraints that prevent it from being solved using standard network flow algorithms. It would be worthwhile to develop a specialized network flow algorithm for this model."}]}