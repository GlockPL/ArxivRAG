{"title": "Resource Constrained Pathfinding with Enhanced Bidirectional A* Search", "authors": ["Saman Ahmadi", "Andrea Raith", "Guido Tack", "Mahdi Jalili"], "abstract": "The classic Resource Constrained Shortest Path (RCSP) problem aims to find a cost optimal path between a pair of nodes in a network such that the resources used in the path are within a given limit. Having been studied for over a decade, RCSP has seen recent solutions that utilize heuristic-guided search to solve the constrained problem faster. Building upon the bidirectional A* search paradigm, this research introduces a novel constrained search framework that uses efficient pruning strategies to allow for accelerated and effective RCSP search in large-scale networks. Results show that, compared to the state of the art, our enhanced framework can significantly reduce the constrained search time, achieving speed-ups of over to two orders of magnitude.", "sections": [{"title": "Introduction", "content": "Often studied in the context of network optimization, the Resource Constrained Shortest Path (RCSP) problem seeks to find a cost-optimal path between two nodes in a network such that the resource usage of the path is within a given limit. Its applications span a wide range of domains. As a core problem, RCSP can be modelled to find minimum time paths for an unmanned aerial vehicle such that the total cumulative noise disturbance created by the vehicle along its trajectory is within an allowable noise disturbance level (Cortez 2022). As a subroutine, RCSP appears as a form of pricing problem in column generation (a solving technique in linear programming) for routing and scheduling applications (Parmentier, Martinelli, and Vidal 2023). The problem has been shown to be NP-hard (Handler and Zang 1980).\nRCSP is a well-studied topic in the AI and mathematical optimization literature. A summary of conventional solutions to RCSP (methods that solve the problem to optimality) can be found in Pugliese and Guerriero (2013) and Ferone et al. (2020). Among the recent solutions, the RCBDA* algorithm of Thomas, Calogiuri, and Hewitt (2019) is a label setting method that explores the network bidirectionally using heuristic-guided A* search. Built on the bidirectional dynamic programming algorithm of Righini and Salani (2006), RCBDA* defines an explicit perimeter for the search of each direction by evenly distributing the resource budget between the directions. More precisely, each direction explores only those labels whose resource consumption is not more than half of the resource budget, while enabling the construction of complete paths by joining forward and backward labels. The authors reported that the guided search of A* helps RCBDA* perform faster in large graphs when compared to the conventional RSCP methods of Lozano and Medaglia (2013) and Sede\u00f1o-Noda and Alonso-Rodr\u00edguez (2015). Nevertheless, it still leaves several instances with a single resource constraint unsolved, even after a five-hour timeout. BiPulse (Cabrera et al. 2020) is another bidirectional search framework that parallelizes the branch-and-bound Pulse procedure of Lozano and Medaglia (2013). BiPulse utilizes a queueing approach to explore branches longer than a specific depth limit separately in a breadth-first search manner. The authors reported better performance with BiPulse compared to RCBDA*, though no direct comparison was made as RCBDA*'s runtimes were scaled from the original paper. Both RCBDA* and BiPulse were recognized with awards (Golden and Shier 2021).\nQuite recently, the unidirectional A*-based constrained search proposed in Ren et al. (2023), called ERCA*, has demonstrated superior performance compared to BiPulse. Ren et al. adapted their multi-objective search algorithm EMOA* (Ren et al. 2022) to RCSP, and proposed a solution that appeared effective in reducing the constrained search effort through pruning rules enhanced with binary search trees. Although not compared against RCBDA*, ERCA* was reported to outperform BiPulse by several orders of magnitude. The two recent WCBA* (Ahmadi et al. 2022) and WCA* (Ahmadi et al. 2024b) algorithms can also be seen as heuristic-guided approaches to RCSP, but their application is limited to instances with single constraint only (the weight constrained variant). Both algorithms were reported to perform faster than RCBDA* and BiPulse.\nThis paper introduces an enhanced bidirectional A* search algorithm for RCSP, called RCEBDA*. Built on the basis of perimeter search with bidirectional A*, our proposed algorithm leverages the recent advancements in both constrained and multi-objective search, and adopts optimized dominance pruning and path matching procedures that help reduce the search effort substantially. Experimental results on benchmark instances reveal that RCEBDA* can effectively solve more instances than the state of the art, achieving speed-ups above two orders of magnitude."}, {"title": "Problem Definition", "content": "Consider a directed graph G with a set of states S and a set of edges $E \\subseteq S \\times S$ where every edge has $k \\in \\mathbb{N}_{\\geq2}$ attributes, represented as $(cost, resource_1,..,resource_{k-1})$. A path on G is a sequence of states $u_i \\in S$ with $i \\in \\{1, . . ., n\\}$ and $(u_i, u_{i+1}) \\in E$ for $i \\in \\{1, . . ., n-1\\}$. The cost and resource consumption of path $ \\pi = \\{u_1,..., u_n\\}$ is then the sum of corresponding attributes on all the edges along the path. The objective in the point-to-point RCSP problem is to find a cost-optimal path $ \\pi^* $ between a given pair of $(start, goal)$ states such that the consumption of resources on the path respects a set of limits $R = \\{R_1,...,R_{k-1}\\}$, that is, we must have $resource_i(\\pi^*) < R_i$ for every $i \\in \\{1,...,k-1\\}$.\nOur notation generalizes the two possible forward and backward search directions by searching in direction d from an initial state to a target state. A forward search explores the forward graph, denoted by $G_f = (S, E_f)$, from the start state, while a backward search begins from the goal state on the reversed graph (i.e., $G_f$ with all its edges reversed), denoted by $G_b = (S, E_b)$. Further, $Succ_d(u)$ denotes all successor states of u in the graph of search direction d.\nTo simplify our algorithmic description, we define edge attributes as a form of cost vector, namely $cost = (cost_1,..., cost_k)$, with $cost_1$ denoting the primary cost of the problem and $(cost_2,..., cost_k)$ representing the resources. Edge costs in the search graph of direction d can be accessed through the function $cost_d : E_d \\rightarrow \\mathbb{R}^k_0$. The search objects in our notation are defined as nodes, which can be seen as partial paths obtained through exploring the graph from the initial state. A node x conventionally contains some key information on the partial path extended from the initial state to state $s(x) \\in S$. The function s(x) here returns the state associated with x. Node x traditionally stores cost of the partial path, accessible via the value pair g(x). It also stores a value pair f(x), which estimates the cost of a complete initial-target path via x; and also a reference parent(x) which indicates the parent node of x.\nAll operations on the vectors (shown in boldface) are assumed to be done element-wise. We use the symbol $ \\prec $ in direct comparisons of cost vectors. To compare vectors for their resource component only, we use the symbol $ \\prec_r$ to denote the truncation of the first cost in the comparison, e.g., $g(x) \\prec_r g(y)$ denotes $g_i(x) \\leq g_i(y)$ for all $i \\in \\{2,...,k\\}$.\nDefinition Let $ \\mathbf{f} = (f_1, . . ., f_k)$ be a global upper bound on cost of any start-goal paths. x is out of bounds if $ \\mathbf{f(x)} \\nleq \\mathbf{f}$.\nDefinition Node x weakly dominates node y if we have $g(x) \\leq g(y)$; x (strongly) dominates y if $g(x) \\leq g(y)$ and $g(x) \\neq g(y)$; y is not dominated by x if $g(x) \\nleq g(y)$.\nIn the context of bidirectional A*, the search in direction d is guided by cost estimates or f-values, which are traditionally established based on a heuristic function $h_d : S \\rightarrow \\mathbb{R}^+_0$ (Hart, Nilsson, and Raphael 1968). In other words, for every search node x in direction d, we have $f(x) = g(x) + h_d(s(x))$ where $h_d(s(x))$ returns lower bounds on the cost of paths from s(x) to the target state.\nDefinition The function $h_d : S \\rightarrow \\mathbb{R}^+_0$ is consistent if $h_d(u) \\leq cost_d(u, v) + h_d(v)$ for every edge $(u, v) \\in E_d$. It is also admissible if $h_d(initial) = 0$."}, {"title": "Bidirectional Constrained A* Search", "content": "Originally introduced by Pohl (1971) for single-objective pathfinding, bidirectional search strategies have since evolved, with newer approaches offering promising advancements in search efficiency (Alc\u00e1zar 2021; Siag et al. 2023). In the RCSP context, the classic front-to-end bidirectional A* search of RCBDA* has proven effective in guiding constrained searches to optimal solutions (Thomas, Calogiuri, and Hewitt 2019; Ahmadi et al. 2021). Analogous to classic bidirectional A* search, the RCBDA* algorithm employs an interleaved strategy in which the search is guided by the direction that exhibits the lowest $f_1$-value. Let $ \\mathbf{f} $ be the optimal cost of a valid solution path. RCBDA* enumerates in best-first order all partial paths with $f_1$-value no larger than $ \\mathbf{f_1} $ in both directions sequentially. A complete start-goal path in this framework is built by joining forward and backward partial paths arriving to the same state. However, since the number of paths to each state can grow exponentially during the search, partial path matching can become a demanding task if each direction is allowed to explore the entire search space.\nTo mitigate the bottleneck above, RCBDA* utilizes the perimeter bounding strategy proposed by Righini and Salani (2006), and equally distributes one of the resource budgets between the directions. The selected resource is referred to as the critical resource. Consequently, the algorithm explores, in each direction, those partial paths that consume no more than half of the provided critical resource budget. In addition, to prevent the search from exploring unpromising paths, RCBDA* does not process nodes that have already exhausted (any of) the resource budgets. Thomas, Calogiuri, and Hewitt experimented RCBDA* with the pruning rules presented in Lozano and Medaglia (2013), namely: pruning by dominance and infeasibility. The former allows the search to prune nodes dominated by a previously explored node, while the latter ensures that nodes with estimated resource usage larger than the given limits are not explored. Although the authors did not discuss the pruning rules as part of the proposed label-setting approach, we have provided in Algorithm 1 a refined pseudocode closest to their description, including both pruning rules.\nThe algorithm starts with initializing a global search upper bound $ \\mathbf{f} $ using the resource limits provided. It then establishes the heuristic functions of the forward and backward direction $h_f$ and $h_b$, respectively. These heuristic functions are conventionally obtained through k rounds of single-objective one-to-all searches (e.g., using the Dijkstra's algorithm (Johnson 1973)) in the reverse direction. The algorithm also initializes for each direction d two types of data structures: a priority queue, called $Open_d$, that maintains unexplored nodes generated in direction d; and a node list $X_d(u)$ that stores nodes explored with state $u \\in S$ in direction d. $X_d(u)$ is used to fulfil the pruning by dominance rule, as well as path matching with nodes explored in the opposite direction. To commence the search, the algorithm generates two initial nodes, one for each direction, and inserts them into the corresponding priority queue.\nThe main constrained search starts at line 9 and contin-"}, {"title": "An Enhanced Bidirectional RCSP Search", "content": "As explained in the previous section, RCBDA* stores in both directions all explored nodes of each state so it can prune dominated nodes before inserting them into the priority queue. Although this approach helps alleviate the queue load by removing dominated nodes as soon as they are generated, it may still let the search explore some dominated nodes. This is because the algorithm does not check newly generated nodes against unexplored nodes, which can lead to having dominated nodes in the queues. Nonetheless, given that the number of explored nodes grows exponentially during the search, it is likely that RCBDA* spends most of its search time on dominance pruning. This costly pruning procedure can be considered a search bottleneck, yet it is essential to prevent the frontier from growing uncontrollably.\nBesides dominance pruning, search initialization can be seen as a crucial task in improving the efficiency of the main search. RCBDA* is conventionally initialized using multiple rounds of one-to-all searches, which yield the A*'s required heuristics. Although the correctness of constrained A* search relies on its heuristic being consistent and admissible, it has been shown that the search performance can be greatly impacted with the quality of heuristics (Ahmadi et al. 2024b), suggesting further opportunities for enhancing the exhaustive resource constrained search with A*.\nTo address the above shortcomings, this research presents RCEBDA*, a new RCSP algorithm that enhances the resource constrained search with bidirectional A*. A pseudocode of RCEBDA* is provided in Algorithm 4, with the symbol * next to specific line numbers indicating our proposed changes. We describe each enhancement as follows.\nBetter informed heuristics: When conducting A* bidirectionally, we need to compute both backward and forward lower bounds. In the context of RCSP, this lower bounding strategy provides us with a great opportunity to feed the"}, {"title": "Theoretical Results", "content": "This section formally proves the correctness of RCEBDA*. Unless otherwise stated, we assume that nodes are compared within the same direction only. In other words, we do not compare a backward node with a forward node.\nLemma 1 For every $u \\in S$, let $h_d(u)$ represent the $cost_i$-optimal path from u to a target state on the graph of direction d. $h_d$ is consistent and admissible (Ahmadi et al. 2024a).\nProof Sketch Assume the contrary that $h_d$ is not consistent, then there exists $(u,v) \\in E_d$ for which we have $h_d(u) > cost(u, v)+h_d(v)$. However, the existence of such an edge contradicts our assumption that $h_d$ represents optimal costs, because the edge $(u, v)$ can be used to further reduce $h_d(u)$ through $h(v)$. It is also admissible since we always have $h_d(target) = 0$ due to $cost_1$-values being non-negative.\nLemma 2 Suppose $h_f$ and $h_b$ are admissible heuristic functions. State $u \\in S$ cannot be part of any feasible solution path if we have $h_f^i(u) + h_b^i(u) \\nleq f_i$ for any $i \\in \\{2, ..., k\\}$.\nProof Sketch Given the admissibility of $h_f$ and $h_b$, any start-goal path $ \\pi $ via u will have $cost_i(\\pi) \\geq h_f^i(u) + h_b^i(u)$, which yields $cost_i(\\pi) > f_i$. Thus, $ \\pi $ cannot be a solution path due to its $cost_i$ being out of bounds.\nLemma 3 Suppose A* is led by (smallest) $f_1$-values. Let $(x_1, x_2, ..., x_t)$ be the sequence of nodes explored by A* in direction d. Then, if $h_d$ is consistent, i < j implies $f_1(x_i) \\leq f_1(x_j)$ (Hart, Nilsson, and Raphael 1968).\nCorollary 1 Let $(x_1, x_2, ..., x_t)$ be the sequence of nodes extracted from $Open_d$. The heuristic function $h_d$ is consistent and admissible. Then, under the premises of Lemma 3, i < j implies $f_1(x_i) \\leq f_1(x_j)$, meaning $f_1$-values of extracted nodes are monotonically non-decreasing.\nLemma 4 Suppose $x_j$ is extracted after $x_i$ and $s(x_i) = s(x_j)$. $x_i$ weakly dominates $x_j$ if $ \\tau(g(x_i)) \\prec \\tau(g(x_j))$.\nProof Sketch $x_j$ is extracted after $x_i$, so we have $f_1(x_i) \\leq f_1(x_j)$ according to Corollary 1. This yields $g_1(x_i) \\leq g_1(x_j)$ due to $h_i(s(x_i)) = h_i(s(x_j))$. The other condition $ \\tau(g(x_i)) \\prec \\tau(g(x_j))$ means $g_2(x_i) \\leq g_2(x_j),..., g_k(x_i) \\leq g_k(x_j)$. Thus, g($x_j$) is no smaller than g($x_i$) in all dimensions.\nLemma 5 Dominated nodes cannot lead to any non-dominated $cost_1$-optimal solution path.\nProof Sketch We prove this lemma by assuming the contrary, namely by claiming that dominated nodes can lead to a non-dominated $cost_1$-optimal solution path. Let x and y be two nodes associated with the same state where y is dominated by x. Suppose that $ \\pi^* $ is a non-dominated $cost_1$-optimal start-goal solution path via the dominated node y. Since x dominates y, one can replace the subpath represented by y with that of x on $ \\pi^* $ to further reduce the costs of the optimum path through y at least in one dimension (either the primary cost or resources). However, being able to improve the established optimal solution path would either contradict our assumption on the optimality of $ \\pi^* $, or its non-dominance in the presence of lower resources. Therefore, we conclude that dominated nodes cannot form any non-dominated $cost_1$-optimal solution path.\nLemma 6 Node x generated in direction d cannot lead to any $cost_1$-optimal or feasible start-goal path if $ \\mathbf{f(x)} \\nleq \\mathbf{f}$.\nProof Sketch $ \\mathbf{f(x)} \\nleq \\mathbf{f} $ means either $f_1(x) > f_1$ or $f_i(x) > R_{i-1}$ for a resource $i \\in \\{2,...,k\\}$. The former guarantees that the x's expansion cannot lead to a solution with $cost_1$-value better than any solution in Sols with the optimal cost of $ \\mathbf{f_1} $. Since $h_d$ is admissible, the latter condition also ensures that expansion of x does not lead to a solution path within the resource limits.\nLemma 7 Let y be a node weakly dominated by x and s(x) = s(y). If y's expansion leads to a non-dominated"}, {"title": "Conclusion", "content": "This research presented RCEBDA*, an enhanced bidirectional A* search algorithm for RCSP. Built on the halfway bidirectional search scheme in the literature, our proposed method introduces several enhancements to the bidirectional constrained A* search, including more efficient initialization, dominance pruning and partial path matching strategies. The results of our experiments over benchmark instances from the literature demonstrate the success of RCEBDA* in substantially reducing the computation time of RCSP in large-scale graphs, achieving speed-ups of several orders of magnitude compared to the state of the art."}]}