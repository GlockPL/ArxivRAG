{"title": "HateSieve: A Contrastive Learning Framework for Detecting and Segmenting Hateful Content in Multimodal Memes", "authors": ["Xuanyu Su", "Yansong Li", "Diana Inkpen", "Nathalie Japkowicz"], "abstract": "Amidst the rise of Large Multimodal Models (LMMs) and their widespread application in generating and interpreting complex content, the risk of propagating biased and harmful memes remains significant. Current safety measures often fail to detect subtly integrated hateful content within \"Confounder Memes\". To address this, we introduce HATESIEVE, a new framework designed to enhance the detection and segmentation of hateful elements in memes. HATESIEVE features a novel Contrastive Meme Generator that creates semantically paired memes, a customized triplet dataset for contrastive learning, and an Image-Text Alignment module that produces context-aware embeddings for accurate meme segmentation. Empirical experiments on the Hateful Meme Dataset show that HATESIEVE not only surpasses existing LMMs in performance with fewer trainable parameters but also offers a robust mechanism for precisely identifying and isolating hateful content. Caution: Contains academic discussions of hate speech; viewer discretion advised.", "sections": [{"title": "1 Introduction", "content": "The emergence of Large Multimodal Models (LMMs), such as GPT-4V (Achiam et al., 2023), Stable Diffusion (Rombach et al., 2022), and DALL-E (Ramesh et al., 2022), has ushered in a new era where people increasingly rely on these models for generating and interpreting visual and textual information. While these services simplify access to information, they also introduce the risk of unregulated content that could distort public perception and cause harm to social groups (Su et al., 2023; Qu et al., 2023; Chin et al., 2023; Qu et al., 2024; Meng Huat Tiong et al., 2024; Lin et al., 2024). To address this risk, current LMM platforms implement safety filters, incorporating Alignment (Ghafouri et al., 2023), Inference Guidance (Chiang et al., 2023), and Input&Output Filter (Alon and Kamfonas, 2023) to detect and eliminate offensive or inappropriate components in both images and text.\nHowever, these safety filters face challenges in identifying \"Confounder Memes\" (Kiela et al., 2020; Mei et al., 2023), which deliberately combine visual and textual elements to convey biased and discriminatory messages. Such memes may not have obvious offensive content in their individual components, instead delivering their harmful messages through their combined presentation.\nA straightforward solution involves supervised fine-tuning (SFT) of LMMs (Lin et al., 2024) to recognize hateful semantics in memes. Nevertheless, this approach encounters obstacles: (1) the scarcity of detailed annotations in existing hateful meme datasets, making it difficult for models to accurately distinguish between hateful and non-hateful memes, especially when the differences are subtle. (2) Deploying LMMs as safety filters alongside their regular online service\u00b9 usage is computationally intensive and non-trival (Lin et al., 2024). Alternatively, a lightweight classifier (Kumar and Nandakumar, 2022a; Mei et al., 2023) could be trained from scratch using a specialized hateful meme dataset, but this method suffers from limited interpretability and cannot provide a clear rationale for its classifications.\nTo address these challenges, we introduce HATESIEVE, a new framework for detecting hateful memes, detailed in Figure 2. HATESIEVE features an Image-Text Alignment (ITA) module that generates context-aware embeddings using contrastive learning to differentiate between semantically similar memes with varying sentiments. Owing to the absence of suitable annotations in existing datasets, we developed a contrastive meme generator that produces related triplet pairs for training. Pre-training the ITA on this dataset enables it to segment hateful content across image and text modalities effectively, with subsequent fine-tuning on classification tasks demonstrating enhanced performance over current models.\n1.  We propose a unique contrastive meme generator that synthesizes semantically similar triplet pairs, addressing the gap where specific pairwise annotations are lacking in existing datasets.\n2.  Our ITA module efficiently produces context-aware embeddings for images and texts, improving the detection and segmentation of hateful content.\nEmpirical experiments conducted on the Hateful Meme Dataset (Kiela et al., 2020) validate that HATESIEVE not only surpasses existing large multimodal models (LMMs) in performance\u2014with fewer parameters\u2014but also capable of interpreting and segmenting the visual and textual elements of multimodal memes to effectively identify discriminatory content.\n1\"Online service\" refers to real-time applications like chatbots, virtual assistants, and image recognition platforms that use LMMs."}, {"title": "2 Related Work", "content": "Existing safety filters for Large Language Models (LLMs) and LMMs typically comprise Alignment (Ghafouri et al., 2023; Touvron et al., 2023; Rafailov et al., 2024; Wu et al., 2024), Inference Guidance (Bai et al., 2022; Chiang et al., 2023; Zhang et al., 2023), and Input/Output Filter components (Alon and Kamfonas, 2023; Hu et al., 2023). Alignment involves fine-tuning LLMs to meet safety objectives using methods such as reinforcement learning from human feedback (RLHF) that optimize models based on safety data and human preferences. Inference guidance steers models towards generating safer responses through system prompts and token selection adjustments during generation. Input&Output filters detect and manage harmful content. However, these methods are primarily designed for unimodal content and struggle to adapt to multimodal content, such as confounder memes.\nAlignment necessitates retraining LLMs and massive annotated preference dataset, which is inefficient for online services. Inference guidance depends on LMMs correctly identifying hateful content in memes, which is not always applicable. Additionally, current Input&Output filters generally cater to single modalities, such as the IMSyPP text classification model (Kralj Novak et al., 2022) for text and NSFW filters (Rando et al., 2022) for images in diffusion models. Our HATESIEVE framework addresses these limitations by functioning as an Input&Output filter specifically designed for the meme. It allows to identify and segment both the visual and the textual elements within memes.\nCurrent methods for detecting hateful memes generally fall into two categories. The first category, reasoning-based, uses LMMs like LLaVA (Liu et al., 2024) and InstructBLIP (Dai et al., 2024) that generate visual prompts (Li et al., 2023b) based on images. These prompts are concatenated with text data for comprehensive analysis, allowing the LMMs to offer detailed classifications and explanations (Lin et al., 2024). This enables users to assess biases and gain deeper insights into hateful content. However, this approach relies heavily on carefully tailored prompts specifically designed for hate speech detection, making it difficult to create a universal prompt that fits all hateful contexts (Lin et al., 2024). Even minor changes can cause LMMs to misinterpret or overlook hateful memes (Rizwan et al., 2024). While SFT can make LMMs less dependent on prompt design, it is time-consuming and computationally intensive, posing challenges for deployment as safety filters in online services.\nAnother category of methods uses representation learning and includes lightweight methods such as MOMENTA (Pramanick et al., 2021), PromptHate (Cao et al., 2022), and HateClipper (Kumar and Nandakumar, 2022b). MOMENTA constructs intra-modality attention by integrating external facial recognition data and background knowledge with the CLIP model. PromptHate converts images into text and then classifies them using a language model. HateClipper creates an image-text interaction matrix to fuse multimodal information. These methods enable straightforward classification with fewer parameters, but they offer limited interpretability of their classifications.\nIn contrast, our HATESIEVE framework generates context-aware image and text embeddings that enable effective meme segmentation and provide visual interpretation, while delivering classification performance comparable to existing methods."}, {"title": "3 Methodology", "content": "The HATESIEVE workflow involves: 1) Generating a triplet dataset with the Contrastive Meme Generator. 2) Pre-training the ITA module using the triplet dataset. 3) Extracting attention maps and performing segmentation with the pre-trained ITA. 4) Fine-tuning the ITA for hate speech classification."}, {"title": "3.1 Contrastive Meme Generator", "content": "Our Contrastive Meme Generator is designed to produce both non-hateful and hateful versions of any given meme {(Ii, Mi, Ti)}^N_1, where I_i \\in R^{H \\times W \\times C} is the image pixels of the meme, M_i \\in R^{H \\times W} is the caption mask, and T_i is the caption overlaid on the meme. These non-hateful and hateful versions are then used for subsequent contrastive learning. The first step in our Contrastive Meme Generator (CMG) is modality separation. By isolating the caption from the meme, we remove text borders and artifacts that may interfere with the image information, ensuring clean image content. Specifically, we employ the LaMA image (Suvorov et al., 2021) inpainting pipeline to extract the pure image content I = f_{LaMA}(I_i, M_i) from the meme.\nTo generate the non-hateful version meme (I^+, T^+), we utilize InstructBLIP (Dai et al., 2024) to create a positive caption T^+ = f_{InstructBLIP}(I) of the image content, our prompt is written as follows: \"Please generate a positive and descriptive caption for the provided image {I}.\". Then, we utilize SDXL with SDEdit (Meng et al., 2021) to produce a high resolution non-hateful image I^+ = f_{SDXL}(T^+).\nConstructing a hateful version of a meme presents significant challenges due to the absence of direct annotations regarding ethnic groups, religious affiliations, social groups, or cultural identities in the meme (I_i, T_i). This lack of explicit metadata complicates the generation of semantically similar hateful memes. To address this, we selected the largest available multimodal hate speech dataset, MMHS150k (Gomez et al., 2020), focusing specifically on its \u201chateful\" category for our reference dataset. We then employed the CLIP image encoder (Radford et al., 2021) to derive embeddings for all image representations I^- \\in R^{N \\times d}, where N represents the total number of memes in the dataset, and d is the dimension of the embeddings. These embeddings serve as our reference embedding database. For each image I_i, we apply FAISS (Douze et al., 2024) to find the most similar image based on Euclidean distance:\nk^* = \\text{arg min}_{I_k} || f_{CLIP}(I_i) - I^- ||_2\nwhere f_{CLIP}(I_i) is the embedding of I_i. The closest negative pair, (I_k^*, T_k^*), corresponds to the original pair (I_i, T_i)."}, {"title": "3.2 Triplet Dataset Generation", "content": "Our study constructs triplets of pairs for contrastive learning, each composed of an original meme (I_i, T_i) and its two variations:\n{(I_i, T_i), (I_{Non-Hate}, T_{Non-Hate}), (I_{Hate}, T_{Hate})}\nTo ensure the differentiation between hateful and non-hateful memes while preserving semantic coherence, each component within a meme\u2014-either an image Ii or text Ti--is subjected to a pre-filtering process to identify potentially offensive or controversial content. Initially, each meme undergoes a dual filtering process as follows:\nEmploying the IMSyPP Filter, the textual content Ti is evaluated for offensive or violent/controversial material, yielding a classification y, where 1 indicates offensive (controversial) and 0 indicates non-offensive (safe).\nUsing the NSFW filter from Stable Diffusion, images Ii are assessed for inappropriate content like nudity or violence, with y being 1 for NSFW (controversial) content and 0 for safe content.\nAs shown in Figure 4, based on the filtering results, we construct the triplet dataset with the following process. For non-hateful pairs, designated as (I_{Non-Hate}, T_{Non-Hate}), we sample from several combinations:\n(I^+, T^+) comprises both image and text generated by the CMG, ensuring that both elements are safe.\n(I_i, T^+) includes the original image deemed safe by the NSFW filter, paired with text that has been generated by the CMG as safe text.\n(I^+, T_i) features an image generated by the CMG, paired with the original text that has been classified as safe.\nConversely, for hateful pairs (I_{Hate}, T_{Hate}), we sample from the following scenarios:\n(I^-, T^-) where both the image and text are generated by the CMG as controversial, embodying content flagged for potential offensiveness.\n(I_i, T^-) utilizes the original image classified as controversial, paired with controversially generated text by the CMG.\n(I^-, T_i) combines a controversially generated image by the CMG with the original text classified as controversial."}, {"title": "3.3 Image-Text Alignment Module", "content": "For each meme (Ii, Ti), our ITA module is designed to derive a token-level, context-aware representation that integrates both the image and the text components, as illustrated in Figure 5. The process unfolds as follows:\nFirst, we leverage a pre-trained CLIP encoder to extract initial embeddings for each modality. Specifically, we derive pooled embeddings for text, T_{Pool}^i \\in R^d, and for images, I_{Pool}^i \\in R^d, using f_{CLIP} (I_i, T_i). Additionally, we further extract T_i and I_i^i, where T_i \\in R^{l \\times d} and I_i^i \\in R^{o \\times d_i}, using CLIP's text and image encoders, respectively. Here, l represents the text sequence length, o the image patch size, d_i the dimension of the image embedding, and d the dimension of the text embedding.\nThen the combined image-text embedding is constructed as X_i = [W_1 I_i^i, T_i], where X_i \\in R^{(o+l) \\times d} and W_1 is a projection layer designed to map I_i^i into the same dimensional space as T_i. To achieve an aligned token-level representation between image and text, we introduce a text-image intra self-attention mechanism, defined as:\nAttn^l = Softmax\\left(\\frac{X_i W_q^l(X_i W_k^l)^T}{\\sqrt{d_k}}\\right)X_i W_v^l  \\tag{1}\nwhere d_k is the key dimension, l denotes the layer number, and W_q^l, W_k^l, W_v^l are the weight matrices for the query, key, and value components in the self-attention layers. The image-text representation is obtained through:\nX_i^l = f_{Align}^l (Attn^l X_i^{l-1})  \\tag{2}\nwhere f_{Align}^l represents the l-th self-attention block within an L-layer Image-Text Alignment module.\nAfter processing through L layers, the output image-text representation X_i^L is split and subsequently pooled using the original pooling layer from the CLIP model to form I_{Align}^i and T_{Align}^i. The final image-text representation is then constructed as follows:\nH_i = f_{DC} \\left( LN \\left( [I_{Align}^i, T_{Align}^i] \\oplus [I_{Pool}^i, T_{Pool}^i] \\right) \\right)  \\tag{3}\nwhere \\oplus denotes the operation for residual connection, LN represents layer normalization, and f_{DC} is the decoder, which is constructed with a multi-layer perception (MLP)."}, {"title": "3.4 Training Objective", "content": "Our ITA training regimen is organized into two distinct phases: 1) Pre-training through contrastive learning, which equips the ITA module with the ability to effectively segment image and text components within hateful memes, and 2) Fine-tuning for classification tasks, enhancing its ability for specific applications.\nGiven the generated triplet dataset \\mathcal{D} = {(I_i, T_i), (I_{Non-Hate}, T_{Non-Hate}), (I_{Hate}, T_{Hate})}_1^P, where P denotes the total number of triplets, we extract the image-text representations for each element in the set as {H_i, H_{Non-Hate}, H_{Hate}}. For each triplet, where y_i = 1 indicates a hateful meme, we identify H_{Hate} as the positive pair H^+ and H_{Non-Hate} as the negative pair H^-. The reverse holds for non-hateful memes with y_i = 0. The contrastive learning objective is formulated as follows:\n\\mathcal{L}_{tri} = \\sum_{i=1}^P \\sum_{i} \\text{max} \\left(0, d(H_i, H^+) - d(H_i, H^-) + \\epsilon \\right)\nwhere d represents the Euclidean distance and \\epsilon is a predefined margin that ensures a minimum discernible difference between the distances of similar and dissimilar pairs.\nTo adapt the ITA module to the hateful meme classification task, we introduce an additional classification layer f_c, parameterized by \\theta, and fine-tune it using the following loss function:\n\\mathcal{L}_{cls} = - \\frac{1}{N} \\sum_{i=1}^N \\text{log} \\mathcal{P}(y_i | H_i; \\theta)\nwhere N is the number of examples in the original Hateful Meme dataset."}, {"title": "3.5 Hate Component Segmentation", "content": "Our hate component segmentation is structured as follows: After the ITA module is pre-trained via contrastive learning, it can process any given meme (I_i, T_i) to extract a series of self-attention maps {Attn^l}_1^L from all layers. We begin by averaging these self-attention maps across layers to obtain Attn. We then isolate the image attention map Attn^{I_i}, and the text attention map Attn^{T_i}, where 1 < l_j < L_I + 1 and L_I + 1 < l_t < L_T. Here, l_j denotes the j-th image patch among a total of L_I patches, and l_t indicates the t-th text token within a maximum of L_T text tokens.\nSubsequently, we compute the text-aware image attention for each patch:\nAttn_j = \\frac{\\sum_{l_t=0}^{L_T} Attn_{l_j, l_t}}{L_T}\nand the image-aware text attention for each text token:\nAttn_t = \\frac{\\sum_{l_j=0}^{L_I} Attn_{l_t, l_j}}{L_I}\nTo construct an image segmentation map, we employ bilinear interpolation to upscale the L_I \\times L_I patch-level attention maps to H \\times W pixel-level resolution, facilitating detailed visual analysis of the meme components. As for the text segmentation, we select the Top-k tokens based on the attention scores per token, which allows for precise identification and analysis of the most contextually significant textual elements within the meme.\nTo enhance detailed object segmentation, we developed an object highlighting pipeline illustrated in Figure 6. Initially, we extracted the attention map, Attn^{I_i}, using HATESIEVE and subsequently employed SegmentAnything (Kirillov et al., 2023) to detect and segment objects within the meme. This process produced a series of segmented objects, represented as \\mathcal{O} = [o_1, ..., o_n]. We assessed the importance of each object, \\Phi(o_i), by integrating the attention map with the object mask using RoIAlign (He et al., 2017). To isolate only the most relevant objects, we implemented a threshold criterion, \\Phi(o) > \\lambda, where X is the pre-established significance threshold."}, {"title": "4 Experiments", "content": ""}, {"title": "4.1 Setup", "content": "Our dataset generation for the triplet model leverages the HatefulMemes (Kiela et al., 2020) and MMHS150k (Gomez et al., 2020) datasets. We evaluated our framework by validating the classification and segmentation effects using the HatefulMemes test-unseen dataset. This dataset, provided primarily by Facebook Research, comprises 10,000 annotated meme images. Each meme integrates text and an image to challenge the model's proficiency in detecting hate speech within memes. The MMHS150k dataset contains 150,000 tweets, each featuring an image and text pair, compiled using 51 terms from Hatebase. These tweets were collected between September 2018 and February 2019, specifically to analyze hate speech expressions on social media. Our training dataset for contrastive learning consists of 8,500 entries from the HatefulMemes training dataset and 33,844 hateful data samples from MMHS150k by our contrastive meme generator.\nIn the classification evaluation for our HATESIEVE, our baseline models that we compare to are as follows:\nThe set includes GPT-4V (Achiam et al., 2023), CogVLM (Wang et al., 2023), LLava-1.5 (Liu et al., 2023), InstructBLIP (Dai et al., 2024), MiniGPT-4 (Zhu et al., 2023), Qwen-VL (Bai et al., 2023), OpenFlamingo (Awadalla et al., 2023), MMGPT (Gong et al., 2023), and MinGPT-v2 (Chen et al., 2023) for zero-shot inference, along with LLava-1.5, InstructBLIP, and BLIP2 employing Supervised Fine-Tuning with QLora (Dettmers et al., 2024).\nIt encompasses the original CLIP model along with its variants, HateCLIPer and MOMENTA.\nWe provide detailed descriptions of the methods we implemented for these experiments in Appendix A. Evaluating the segmentation capabilities of HATESIEVE is challenging due to the absence of pixel-level and token-level annotations. Consequently, we sampled 100 memes from the HatefulMemes dataset and manually compared the segmentation performance of our HATESIEVE model against LMMs equipped with vision prompt generators such as InstructBLIP. We involved three human annotators in the process, and decisions were made based on a majority vote.\nUsing the Contrastive Meme Generator, we produced a total of 42,344 triplet pairs. During the pre-training and fine-tuning phases, we employed the CLIP-VIT-BASE-PATCH32 as our backbone for the image-text encoder and froze all the CLIP parameters. Our newly introduced Image-Text Alignment module comprises 6 layers of self-attention blocks. Additionally, we incorporated a two-layer MLP as a decoder for classification fine-tuning.\nIn the contrastive learning pre-training stage, we used a learning rate of 1e-4 and trained the model over 4 epochs, which took approximately 4 hours on an NVIDIA 4090 GPU. For the fine-tuning stage in the classification task, we fine-tuned the model with a learning rate of 1e-5 for 4 epochs, completing in just 10 minutes. Throughout these stages, the Adam optimizer was utilized, with \\beta = (0.9, 0.999)."}, {"title": "4.2 Results on HatefulMeme Classification", "content": "As shown in table 1, we assessed the efficacy of various LMMs and CLIP-based methods in zero-shot inference and SFT settings. Overall, except for GPT-4V, other open-source models demonstrated limited capabilities under zero-shot conditions, revealing that while current LMMs exhibit multimodal recognition and understanding abilities from extensive pre-training, they still fall short in effectively recognizing hateful memes that demand more complex semantic reasoning. In the supervised fine-tuning setting, the performance improvements of LMMs, even for those fine-tuned with QLora, were minimal. For a detailed visual analysis, please see section 4.3.\nIn contrast, CLIP-based methods significantly outperformed LMMs in the SFT setting, achieving higher accuracy and F1 scores. Notably, HateCLIPer recorded the highest accuracy, 74.46% among these, but its introduction of a d \u00d7 d image-text feature interaction matrix led to an exponential increase in the number of model parameters, resulting in 1.1 billion trainable parameters with the CLIPLarge encoder, which compromises its efficiency as a safety filter. Conversely, our HateSieve, which incurs lower parameter costs, achieved the highest F1 score, surpassing that of GPT-4V, and its accuracy also exceeded those of CLIP, MOMENTA, and HateCLIPerBase. This underscores the effectiveness of our contrastive learning pre-training and ITA module."}, {"title": "4.3 Results on Hate Component Segmentation", "content": "We compare InstructBLIP after SFT on the HatefulMeme dataset, CLIP+ITA which is directly fine-tuned with HatefulMeme, and our HATESIEVE model. For InstructBLIP, we prompt the model as follows: \"Please examine the provided meme, which includes an [image] and accompanying [text]. Determine if the content can be considered hateful. If you conclude that the meme is hateful, identify and list the specific keywords or phrases in the text.\u201d This allows us to identify the text tokens that InstructBLIP considers ambiguous. Regarding image segmentation, we adhere to Li et al. approach, mapping the query corresponding to the Q-Former in InstructBLIP with the image's cross-attention map using bilinear interpolation.\nAs illustrated in the figure 7, the attention heatmap generated by InstructBLIP converges to a very small area, resulting in ineffective subsequent segmentation. Although InstructBLIP classifies this meme as hateful, it indicates that the model does not fully utilize the image information in its analysis. In contrast, the attention map of CLIP+ITA, which is solely fine-tuned on Hateful-Meme, is overly dispersed across the image and fails to concentrate on the relevant characters or scenes. On the other hand, our contrastively pre-trained HATESIEVE effectively focuses on specific characters in the image and correlates them with the keywords in the text. This demonstrates that our contrastive learning pre-training enables HATESIEVE to correctly link specific components of the image and of the text within the meme.\nDue to the lack of precise image and text annotations, we randomly sampled 100 groups of memes from HatefulMeme and manually evaluated the accuracy of the images rendered by the attention heatmap and the corresponding text. As shown in Table 2, our HATESIEVE significantly outperforms InstructBLIP and CLIP+ITA in segmentation effectiveness, validating the positive correlation of contrastive learning with image-text associations."}, {"title": "5 Ablation Study", "content": "We investigated the influence of self-attention layers within the ITA on the classification efficacy of HATESIEVE. As depicted in Figure 8, there is a clear trend where the classification performance of HATESIEVE improves when increasing the number of layers. However, this improvement plateaus and subsequently declines once the layer count surpasses 6, as evidenced by a noticeable drop in the F1 score.\nWe investigated the impact of the triplet dataset scale used during the pre-training stage with contrastive learning. As illustrated in Figure 8, we analyzed the effects on the classification performance of HATESIEVE when pre-trained with 0% (no pre-training), 25%, 50%, 75%, and 100% of the triplet dataset. The results clearly show that an increase in pre-training data enhances the classification capabilities of HATESIEVE. This underscores the critical role of our triplet dataset in the effectiveness of contrastive learning during pre-training.\nWe also investigated the impact of different pre-training strategies on the classification performance of HateSieve. We compared the following approaches:\nwhich involves using the HatefulMeme training set to directly sample similar hateful version memes, rather than sampling {I-,T-} from the MMHS150k dataset during the triplet dataset generation process.\nIn this approach, we substituted the contrastive learning pre-training with direct classification. We utilized the same volume of training samples, comprising 8,500 entries from the Hateful-Meme dataset and 33,844 sets of multimodal hate speech data from MMHS150k.\nAs shown in Figure 9, the model pre-trained in-domain outperformed the CLS pre-training, confirming the superior effectiveness of contrastive learning. However, it underperformed compared to other HATESIEVE resources, We speculate that this lower performance is due to the limited variety in the HatefulMeme dataset and unseen test data. Sole reliance on the in-domain dataset didn't substantially improve generalization.\nMeanwhile, although the CLS-only pre-trained model improved upon the baseline HATESIEVE, as shown in Table 1, the significant computational expense did not match the modest performance gains, making it inefficient."}, {"title": "6 Segmentation Results", "content": "Additional segmentation results are illustrated in Figure 10. The results demonstrate HATESIEVE'S capability to correlate hateful text with objects within images, underscoring the effectiveness of the proposed pre-training with contrastive learning and ITA module."}, {"title": "7 Conclusion", "content": "We developed HATESIEVE, a framework for classifying and segmenting hateful memes. Our experiments show that contrastive learning on a custom triplet dataset improves classification and achieves effective segmentation."}, {"title": "Limitations", "content": "Our current work faces several limitations, including the broad semantic scope of our contrastive meme generator. We plan to refine this to enhance contrastive learning in future iterations. Additionally, achieving high accuracy for image segmentation in HATESIEVE is challenging. The attention maps are restricted to the image-patch level, and attempts to refine these to pixel-level detail via linear interpolation introduce biases and do not inherently optimize for segmentation accuracy. We aim to expand these capabilities and also to conduct further experiments on a more extensive array of multimodal content related to hate speech in future work."}, {"title": "Ethics Statement", "content": "Our research with the Contrastive Meme Generator, which generates both hateful and non-hateful memes, may involve sensitive content. However, all materials are sourced from open-source datasets and confined to academic research, ensuring privacy protection. We adhere to high ethical standards, actively mitigating biases and misuse, and advocate for the responsible use of LMMs."}, {"title": "A Appendix", "content": ""}, {"title": "A.1 LMMs Hyperparameters", "content": "When implementing supervised fine-tuning on LMMs, we consistently utilized the QLora framework by integrating a set of trainable parameters (d=64) into both the query and key components of the Q-Former. This adjustment was applied to joint LLM architectures such as OPT-6.7b for BLIP2 and Vicuna-7b for InstructBLIP, while the original parameters were kept frozen. We established a constant dropout rate of 0.05 and set the hyperparameter a at 256. The fine-tuning was conducted with a learning rate of 5e - 5 and a batch size of 8."}]}