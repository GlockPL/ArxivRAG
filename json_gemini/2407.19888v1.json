{"title": "YUCCA: A DEEP LEARNING FRAMEWORK FOR MEDICAL IMAGE ANALYSIS", "authors": ["Sebastian N\u00f8rgaard Llambias", "Julia Machnio", "Asbj\u00f8rn Munk", "Jakob Ambsdorf", "Mads Nielsen", "Mostafa Mehdipour Ghazi"], "abstract": "Medical image analysis using deep learning frameworks\nhas advanced healthcare by automating complex tasks, but\nmany existing frameworks lack flexibility, modularity, and\nuser-friendliness. To address these challenges, we introduce\nYucca, an open-source AI framework available at https:\n//github.com/Sllambias/yucca, designed specifi-\ncally for medical imaging applications and built on PyTorch\nand PyTorch Lightning. Yucca features a three-tiered archi-\ntecture: Functional, Modules, and Pipeline, providing a com-\nprehensive and customizable solution. Evaluated across di-\nverse tasks such as cerebral microbleeds detection, white mat-\nter hyperintensity segmentation, and hippocampus segmenta-\ntion, Yucca achieves state-of-the-art results, demonstrating its\nrobustness and versatility. Yucca offers a powerful, flexible,\nand user-friendly platform for medical image analysis, invit-\ning community contributions to advance its capabilities and\nimpact.", "sections": [{"title": "1. INTRODUCTION", "content": "The complexity and variability of medical images pose sig-\nnificant challenges for accurate diagnosis and analysis. Tra-\nditional image analysis methods often fall short in handling\nthe intricate details and diverse pathologies present in med-\nical data. Advanced Artificial Intelligence (AI) frameworks\nhave become essential tools in medical imaging [1, 2, 3], of-\nfering sophisticated solutions for tasks such as segmentation,\ndetection, and classification. These frameworks can enhance\ndiagnostic accuracy, streamline workflows, and support large-\nscale medical research. Despite the availability of several\nAI frameworks tailored for medical imaging, there is a void\nof solutions that perform like the popular nnU-Net [4] and\nare flexible like MONAI [5], inhibiting researchers from effi-\nciently developing and deploying customized models for spe-\ncific medical tasks.\nAmong the existing AI frameworks, nnU-Net [4, 6] stands\nout as the significant advancement in recent times, provid-\ning an out-of-the-box solution that competes with state-of-\nthe-art methods. nnU-Net's effectiveness can plausibly be\nascribed to four design principles: automatic file manage-\nment and folder structuring, robust default values, avoidance\nof common pitfalls, and a curated compilation of best prac-\ntices. These features enable nnU-Net to adapt seamlessly to a\nvariety of medical imaging tasks with minimal user interven-\ntion. However, its highly integrated structure and interdepen-\ndent modules can be restrictive for users attempting to modify\nor extend its capabilities.\nIn contrast, Project MONAI [5] offers a highly modular\nand flexible platform for medical imaging research. MONAI\nprovides a comprehensive suite of tools and libraries that\nsupport a wide range of applications, emphasizing flexibility\nand extensibility. This allows researchers to customize the\nframework to their specific needs. However, the flexibil-\nity of MONAI comes at the cost of usability, as the lack of\npredefined configurations and guidance can pose challenges,\nespecially for users with limited experience in AI and medical\nimaging.\nTo address these challenges, we propose Yucca, an open-\nsource, modular, and extendable AI framework designed\nspecifically for medical imaging based on PyTorch [7, 8].\nYucca aims to combine the user-friendly, high-performance\ncharacteristics of nnU-Net with the flexibility and modu-\nlarity of MONAI. By reducing the engineering overhead\nrequired to develop and optimize machine learning mod-\nels, Yucca enables researchers to focus on their specific\nmedical imaging tasks. This makes Yucca accessible to\nboth novice users and experienced researchers, provid-\ning a robust and versatile foundation for a wide range of\napplications. The framework is available on GitHub at\nhttps://github.com/Sllambias/yucca."}, {"title": "2. FRAMEWORK OVERVIEW", "content": "Yucca is built on a three-tiered design that provides both\nflexibility and ease of use. We first give a brief conceptual\noverview of these tiers before detailing each in the follow-\ning subsections. The first tier, Functional, is inspired by\ntorch.nn.functional and consists solely of stateless\nfunctions. This tier shapes the foundational building blocks\nof the framework, providing essential operations without\nmaintaining any internal state. These functions are designed\nto be simple and reusable, allowing users to build custom"}, {"title": "2.1. Functional", "content": "The Functional tier is primarily populated by micro com-\nponents that serve as building blocks for macro abstractions.\nThese components range from simple utility operations to\nmore complex functional constructs. The simplest func-\ntions in this tier are basic quality-of-life operations, which\ninclude tasks such as reading, writing, and converting files\nof various formats, manipulating paths and directories, and\nperforming basic data integrity tests. These operations serve\nto provide smooth data handling and management within the\nframework. Slightly more complex are the array and matrix\nmanipulation functions, which encompass operations such\nas normalization, filtering, and bounding box calculations.\nThese functions are used to prepare and process image data,\nto ensure that the data is in the optimal format for subsequent\nanalysis and modeling.\nThe most sophisticated functions in the Functional\ntier are compound functions, such as preprocess_case_-\nfor_inference. These functions typically accept a sig-\nnificant number of arguments and employ a long sequence of\nsimpler functions to achieve their goals. The compound func-\ntions are designed to enable purely functional frameworks\nto utilize the same processes as the object-oriented Yucca\nPipeline. They encapsulate complex logic and workflows\ninto single, reusable entities, facilitating both consistency and\nease of use across different parts of the framework. By incor-\nporating these various levels of functions, the Functional\ntier provides a robust foundation for building custom imple-\nmentations and supplies users with access to a wide range\nof tools for data manipulation and preprocessing. This tier's\ndesign philosophy emphasizes modularity and reusability, al-\nlowing for easy integration and extension within the broader\nYucca framework."}, {"title": "2.2. Modules", "content": "The Modules tier is the first of the two object-oriented tiers\nof Yucca, where the conventions of the Yucca Pipeline\nare integrated with the components of the Functional tier.\nYucca is built around PyTorch [7] and PyTorch Lightning\n[8], which introduces certain constraints on its module design\nbut also ensures compatibility with other pipelines based on\nthese frameworks. The simplest modules in this tier wrap the\nmicro components of the Functional tier with the logic\nrequired by the macro Pipeline. For instance, to use func-\ntional transforms with Torchvision. Compose, they are\nwrapped in callable objects with a defined __call__method.\nThis pattern is similarly applied to functional metrics and loss\nfunctions, which are wrapped in callable objects with a de-\nfined forward method, aligning with the design of classes\ninheriting from torch.nn.Module. PyTorch Lightning\ncompliant callbacks, such as the WritePredictions-\nFromLogits class, also fall into this category. These\ncallbacks utilize specific hooks, such as the write_on_-\nbatch_end hook, to execute operations at designated times,\nlike saving predictions during inference using the save--\nprediction_from_logits function.\nMore complex modules include the networks, which\noften combine various block and layer objects along with\ncomprehensive methods to support operations like sliding\nwindow inference. These network modules, inheriting from\ntorch.nn.Module, define a forward method that or-\nchestrates the forward pass of the neural network. The most\nsophisticated modules are the compound DataModule and\nLightningModule objects required by PyTorch Light-\nning. These modules encapsulate and streamline much of\nthe code traditionally found in train.py scripts, allow-\ning them to be passed as objects to PyTorch Lightning's\nTrainer. Briefly, the DataModule organizes and instan-\ntiates the training, validation, and inference datasets with the\ncomposed transforms, and wraps them in dataloaders with\nappropriate samplers. The LightningModule manages\nthe training, validation, and inference steps, and defines the\noptimizers, learning rates, and schedulers. By structuring the\nframework into these modular components, Yucca provides\na robust and flexible environment for building and deploying\nmedical imaging models. The modular design ensures that\neach component can be individually developed, tested, and\nreused, facilitating efficient and scalable model development."}, {"title": "2.3. Pipeline", "content": "The Yucca Pipeline represents the end-to-end imple-\nmentation of the framework", "4": ".", "modules": 1}]}