{"title": "Popularity Estimation and New Bundle Generation using Content and Context based Embeddings", "authors": ["Dr. Ashutosh Nayak", "Dr. Kavitha S.N.", "Prajwal NJ", "Dr. Roja Reddy", "Sameeksha Keshav", "Dr. Rajasekhara Reddy Duvvuru Muni"], "abstract": "Recommender systems create enormous value for businesses and their consumers. They increase revenue for businesses while improving the consumer experience by recommending relevant products amidst huge product base. Product bundling is an exciting development in the field of product recommendations. It aims at generating new bundles and recommending exciting and relevant bundles to their consumers. Unlike traditional recommender systems that recommend single items to consumers, product bundling aims at targeting a bundle, or a set of items, to the consumers. While bundle recommendation has attracted significant research interest recently, extant literature on bundle generation is scarce. Moreover, metrics to identify if a bundle is popular or not is not well studied. In this work, we aim to fulfill this gap by introducing new bundle popularity metrics based on sales, consumer experience and item diversity in a bundle. We use these metrics in the methodology proposed in this paper to generate new bundles for mobile games using content aware and context aware embeddings. We use open-source Steam Games dataset for our analysis. Our experiments indicate that we can generate new bundles that can outperform the existing bundles on the popularity metrics by 32% - 44%. Our experi-ments are computationally efficient and the proposed methodology is generic that can be extended to other bundling problems e.g. product bundling, music bundling.", "sections": [{"title": "1 INTRODUCTION", "content": "Product Recommender Systems (RS) create huge business values for e-commerce businesses. RS aims at recommending relevant products to its consumers. This helps in increasing consumer satisfaction as consumers can find relevant products in shorter time leading to downstream benefits for the firms like increased sales. A new paradigm of product recommendation, called Bundle recommendation is attracting significant interest from industry and academia. A bundle is a set of items offered together as a purchase entity. Bundle recommendation involves recommending bundles to consumers as against recommending single items. Although bundle recommendation has been studied in the literature, the question of how to evaluate and create new bundles is an open area of research. Current literature on bundle generation is scarce and we aim to fill this gap in this research by proposing a novel holistic approach for evaluating bundles and generating new bundles.\nA bundles includes connected items grouped together to make it attractive to consumers for purchase in one go. There are two types of bundling - dynamic and static. Dynamic bundling recommends bundles based on current consumer session (e.g. Amazon). Static bundling suggests pre-constructed bundles (e.g. Best Buy). We focus on static bundling problem where managers decide how many and which bundles to include in their e-commerce business. Example of a bundle is shown in Figure 1. The example is taken from steam games where 3 games are grouped as bundle. Figure 1 also shows the characteristic of a bundle, e.g. bundle name, bundle price and bundle discount. Bundles are beneficial for both the consumers and the firms offering bundles. Bundles are generally coupled with discount, thus consumers can buy the products at a discounted price [20]."}, {"title": "2 RELATED WORK", "content": "In this Section, we discuss relevant extant works in the field of prod-uct bundling. Zhu et al. [15] presented a comprehensive work on product bundling problem. Product bundling is a multi-dimensional problem including Bundle detection [7], bundle completion [2], Bundle Naming [2] and Bundle Recommendation [10]. Bundle com-pletion aims at creating bundles dynamically based on the current session. However, this work focuses on creating static bundles (can be updated with time) but does not recommend session-based"}, {"title": "2.1 Popularity Metrics in Recommender Systems", "content": "Any recommender system aims at recommending relevant items to its consumers. The relevance of the items depends on the content of the item and consumers preferences towards the item. To inte-grate both these factors, existing recommender systems use past consumer behavior, e.e. purchases, views, likes, shares, comments, to identify if an item could be appealing to other consumers as well. But how to find define if an item is \"appealing\"? Number of views/clicks/past purchases are the most commonly used met-rics [14]. Nayak et al. [9] discusses advantages and disadvantages of different commonly used metrics.\nMarket Basket problem is similar to bundle detection problem. It is aimed at identifying items that are purchased together. Sequential basket problem aims at creating dynamic basket based on current consumer session [6]. Along with past click behavior, they also consider diversity of items. Coverage is well-studied metric for recommender systems [11]. Coverage is defined as how many types of items are covered in the list of recommended items. Diversity as a metric is defined as the pairwise dissimilarity between items in the list of recommendations [3]. We adopt coverage and diversity for using in the context of bundle popularity. Note that metrics to identify popular bundles are different from evaluation metrics used for measuring the performance of a given recommender systems e.g. hit rate, recall, accuracy.\nWe add to the literature on recommender systems by proposing new metrics for predicting the quality of a bundle. We further use the proposed metrics to build product bundles. We also add to the literature on bundle recommendations as new recommendation en-gines can be built around the proposed metrics instead of currently used number of clicks information."}, {"title": "2.2 Bundle Generation", "content": "Extant literature on product bundling in scarce, hence the field is in nascent stage. This is most likely due to the lack of open-source corroborated as in [15]. As discussed in [1], bundle generation is an exciting topic to explore.\nWe extend the extant literature on product bundling by pro-viding a holistic methodology for bundle generation. To the best knowledge of the authors, this is one of the first works in exploring different metrics for defining the popularity of a bundle and build-ing a product bundling methodology based on it. We are also one of the first works in using item embeddings for sampling items to create new bundles."}, {"title": "2.3 Embeddings", "content": "We use embeddings to condense information about a game in a n-Dimensional dense vector. We use two sets of embeddings - sen-tence embeddings and context embeddings. Sentence embeddings is a well studied in the field of Natural Language Processing (NLP). Sentence embeddings use word embeddings, revolutionized after transformers [18]. Examples of sentence embeddings include Uni-versal Sentence Embeddings (based on transfer learning and [4]), SBERT-WK (dissecting BERT layers, [19]). In this work, we use SBERT [12] and Fasttext [8] for sentence embeddings.\nBrosh et al. [1] create embeddings for consumers and items using attention-based transformer models for bundle recommendation task. They use one hot vector for users and bundles and recommend bundles to users where user's context embeddings is closest to a bundle. They further use games information to add content to the bundle information. Motivated by this work, we use embeddings to represent games and bundles. However, since our work focuses on bundles generation, we do not use users' embeddings.\nWe contribute to the literature of sentence embeddings by ex-ploring a new application of using embeddings. We use embeddings to identify the popularity of a bundle. We also use embeddings in sampling games to change existing bundles. Our work is one of the first in exploring the use of embeddings for product bundling and provides directions for future research. Next, we discuss the bundling problem before introducing the proposed methodology and its results."}, {"title": "3 PROBLEM FORMULATION", "content": "In this Section, we provide a detailed discussion on formulating product bundling. Before discussing the problem in detail, we dis-cuss the Steam Data used in this paper."}, {"title": "3.1 Data", "content": "We use open-source dataset from Steam Video Games to build and test our methodology on product bundling. We combine two datasets from Steam. We call these datasets as Large and Small dataset. Most of the analysis in extant literature is based on Small dataset. Large dataset contains information on 35000 games and purchase history of 83000 users. Game information includes the ti-tle (name), genres, tags, specifications provided by the game author. tags, genres and specifications are used by users to understand the type of the game. Distribution of top ten tags, genres and specifi-cations is shown in Figure 2. It also includes game price, launch time and developer company of the game. The purchase history of the users in pre-training dataset contains approximately 10000 games. This indicates that approximately 70% of the games were never played. In our study, we do not consider this unplayed games and focus our analysis on the 10000 games that were played at-least by the users in Large dataset. Pre-train dataset also contains information on the lifetime playtime for a game by a user.\nHowever, the Large dataset does not contain information about the bundles. For bundles, we consider the Small dataset. It in-cludes information on 23000 users, 615 bundles and 2819 games. The dataset does not provide the rationale behind how these 2819 games are selected for bundling. Extant research on bundle rec-ommendation use the existing bundles for evaluating their model"}, {"title": "3.2 Bundle Popularity Metrics", "content": "Before creating a new bundle, we need to understand if a new bundle has the potential to become a popular bundle. Extant literature considers clicks among recommended bundle as a metric to identify popular bundles. However, as discussed in Section 1, this metric suffers from multiple disadvantages and need further research to identify popular bundles. In this Section, we introduce different metrics with their rationale and limitations.\nLet $x_{bi} = 1$ if an game i is present in bundle b where $B = \\{b_1, b_2, ...\\}$ is set of all the Bundles. Let $\u00db$ be the set of users in pre-train dataset and $U$ be the set of users in the training dataset. Total playtime of a game is given by $P_i = \\sum_u P_{u,i}$ where $P_{u,i}$ is the total time (in minutes) spent by user u on game i. Let $B_i = \\{i_1, i_2, ...\\}$ be the set of games in Bundle b and $G_u = \\{i_1, i_2,..\\}$ be the set of games purchased by user u.\nThe metrics proposed in this paper to define the quality (or popularity) of a game include:"}, {"title": "3.2.1 Explicit Number of Purchases ($P_{eb}$)", "content": "Explicit number of pur-chases is the count of the users in Small dataset that purchase a bundle b. We call it explicit because this is obtained directly from the dataset provide (only Small dataset has bundle information). It is shown by Equation 1 where $y_{u,b} = 1$ if user u purchases a bundle b. The distribution for the number of times a bundle is purchased in Small dataset is shown in Figure 4. This metric is synonymous to the click popularity metric used in extant literature. However, it could be an artefact of the recommendation engine that recommends the bundles as discussed in Section 1.\n$P_{eb} = \\sum_U y_{u,b} \\forall b \\in B$ (1)"}, {"title": "3.2.2 Implicit Number of Purchases ($P_{mb}$)", "content": "Implicit number of pur-chases is the count of the users in Large dataset that purchase at least 80% of the games in bundle b. We call it implicit because we do not have explicit information about the purchase of a bundle or intent of the bundle. Therefore, we approximate it by the purchase history of individual games. We use this metric to estimate how popular a set of games could be. It can be useful for businesses where there is no bundle data yet and it can be used to create new bundles. It is shown by Equation 2. The distribution for the number of times a bundle is purchased in Large dataset is shown in Figure 5. W. This metric is synonymous to the existing methods of bundle generation that bundle items based on past co-purchases.\n$P_{mb} = \\sum_\u00db y_{u,b} \\text{ where } y_{u,b} = 1 \\text{if} |G_u \\cap B_b| > 0.8 |B_b|$ (2)"}, {"title": "3.2.3 Number of 0 Playtime Games, $N_0$", "content": "Consumers are price sensi-tive, especially in buying product bundles. This is because discounts"}, {"title": "3.2.4 Total Playtime of Bundle, $P_B$", "content": "We postulate that including good items in a bundle may create bundles interesting to consumers as other consumers have previously liked the items in this bundle. Total playtime of a bundle is given by $P_B$ in Equation 4. Similar to $N_0$, this metric is not useful for new products. This may also lead to just bundle popular items in a bundle, which in turn could lead to revenue loss for the firm (as popular products would have sold even without the discounts provided in bundles).\n$P_B = \\sum_{B_b} P_i \\forall b \\in B$ (4)"}, {"title": "3.2.5 Diversity in a Bundle, $D_b$", "content": "Bundles can be made with different strategy. One strategy could be to include similar product (e.g. games or books) and other strategy could be to include variety of items in a bundle (e.g. news). To understand the relationship between games in a bundle, we use average cosine similarity a we define diversity as $D_b$ in Equation 5 where $cos(i, j)$ is the cosine similarity between items i and j. Distribution of diversity in bundles"}, {"title": "3.2.6 Coverage of Bundles, $C_B$", "content": "Coverage is defined as how many types of items are included in the list of recommendations. In this paper, we adopt this concept to provide overall coverage of the set og bundles B. Equation 6 defines coverage $C_B$. The value for coverage for the existing bundles is 0.3. Higher coverage relates to creating bundles not just from the popular items but creating diverse bundles so that it covers wider range of items. This will help the firm in exposing items to consumers which are not \"popular\" which may be due to the artifact of the recommendation engine.\n$C_B = 1- \\frac{\\sum_{i,j} cos(i, j \\in B_b)}{\\sum_{B_b} \\sum_i,j cos(i, j \\in B_b)}$ (6)"}, {"title": "3.3 Product Bundling", "content": "Product bundling aims at creating high quality bundles that serve business purpose, e.g. increasing purchases, increasing revenue or consumer engagement. We use the metrics discussed in Section 3.2 as surrogate to increasing revenue or consumer engagement. A bundle b is a sub-set of items i in I. These items are grouped to form a bundle using different strategies. Conceptually, a utility function shown in Equation 7 maps how well a bundle or combined characteristics of items in the bundle interests consumers. In this paper, we use machine learning models in Section 4.2 to estimate the utility of a bundle based on the metrics introduced in this paper.\n$U_b = g(i_1, i_2, ... \\in B_b) \\forall b \\in B$ (7)\nMethodology proposed in this paper can be extended to create new bundles using co-purchase, co-views or past consumer pur-chases. In this approach, co-purchases or co-views can be loosely considered as existing bundles. We can build the machine learning model to to understand how the relationship between items leads to popular bundles and use the model to create new bundles. However, we leave it as a future direction and focus our analysis on Steam dataset which provides information about ground truth bundles."}, {"title": "4 PROPOSED METHODOLOGY", "content": "In this section, we provide a layout for creating new bundles. First, we create embeddings for different games. Then we construct ma-chine learning models to estimate bundle quality (likelihood of being popular). Finally, we use these model to optimize bundles through various strategies. We explain the steps next."}, {"title": "4.1 Game Embeddings", "content": "We use two types of embeddings for creating embeddings of games -sentence embeddings and context embeddings. In sentence em-beddings, we use the information provided by the game developers and assume that the information provided by them is accurate rep-resentation of the game. The developers provide title of the game, genres of the game they believe it belong to, tag words for search-ing the game and game specifications (specs). An example of the a game with all its information is shown in Figure 9. We use title only, title+tags, title+genres, title+specs and title+tags+genres+specs to generate sentence embeddings. We refer readers to Seo et al [13] for further reading on sentence embeddings. Conceptually, sentence embeddings use word embeddings to condense information from all the words in a sentence. Word embedding models use contextual information in a sentence to predict the next word. Both word embed-dings and sentence embeddings are studied extensively in literature. Specifically, we use SBERT [12] and Fasttext sentence embeddings. SBERT uses attention-based transformer model and if computation-ally expensive and slow. SBERT provides a 384-Dimensional vector for sentence embeddings. Fasttext extends Word2Vec model [5] and is computationally fast. It provides a 300-Dimensional vector for sentence embeddings.\nFor context embeddings, we use Prod2Vec [16] and MetaProd2Vec [17]. Both the models are extension of Word2Vec model. We refer readers to Word2Vec [5] for further reading on Word2Vec. Conceptually, Prod2Vec, P2V models products purchased by a consumer as a sen-tence and each item as a word. It then uses Word2Vec model to"}, {"title": "4.2 Predicting Bundle Popularity", "content": "For bundle generation, first we need to estimate how popular/non-popular a bundle can be, based on the games included in that bundle. We use a machine learning model shown in Equation 8 to estimate if the bundle could be popular or non-popular (f(X) is the functional form of data X). Due to skewness in the dataset, we model the problem of identifying the popularity of a bundle as classification problem. The distribution of number of bundles in each category is shown in respective Sections of popularity metrics. X for building the model includes game embeddings $embeddings_i$, price of bundle $prices$, age of bundle $ages$ and discount offered $discounts$. We use mean of embeddings of games in a bundles. X also includes vectors for categorical information of games in the bundle, that is, top tags of the games $tags_i$, top genres of the games $genres_i$, top specs of the games $specs_i$ and sentiment of the game $sentiments$. We also include aggregated playtime information of the games in the bundle, e.g., total purchases of the games $totalPurchases$ and total playtime per downloads of the games $playTimePerDownloads_i$. Note that we carefully select X for building models for different metrics to avoid adding metrics in X itself e.g. $totalPurchase_p$.\n$\\frac{P_b}{1 - P_b} = f(X) \\forall b \\in B$ (8)\nOne of the major limitation of this work is that the number of bundles (|B| = 615) is small. Thus, constructing complex non-linear machine learning models are prone to overfitting. To counter this, we use extensive experimentations and use simpler models for Equation 8. All the results discussed in this paper hereon are built using logistic regression, thus, f(X) is a linear function. Moreover, to reduce the size of the model, we use 2-Dimensional embeddings of games in our logistic regression model. We also provide the github repository for replicating the results where readers can use different machine learning models along with logistic regression. All the models in this study were built on Windows 10 platform, i7 Intel processor with 16 GB RAM. We use Python 3.8 and open-source python libraries for all the analysis."}, {"title": "4.3 New Bundle Creation", "content": "Bundle generation aims at finding items, $i \\in I$ to make a potentially popular bundle. In this work, we use distance-based metrics to sample items from I to create new bundles. We use two types of embeddings to calculate distance for sampling. First, we use dif-ferent combinations explicit textual features of the items (e.g. title, genres, tags and specifications) to calculate sentence embeddings. Second, we use purchase behavior from Large dataset to find em-beddings of items using Prod2Vec and MetaProd2Vec. An example of the sentence embeddings using SBERT when sentence is give by title+genres is shown in Figure 10. Figure 10 shows 10000 games from Large dataset, dimensionally reduced to two dimensions us-ing UMAP dimensionality reduction model. Figure 10 also shows the games that are included in different bundles. The games are colored by the bundle numbers which shows that similar games are included in a bundle.\nTo create new bundles, we use four strategies to create new bun-dles (1) inserting a game in existing bundle (2) exchanging games from existing bundles (3) deleting games from existing bundles (4) creating bundles from scratch using seed games. First, we sample a game based on embeddings and perform these operations to create new bundles. To check if the new bundle has the potential to be popular or not, we test the performance of the new bundle on the proposed metrics using machine learning model (in Section 4.2). The pseudo-code for bundle creation is shown in Table 3.\nNext, we discuss the results for the proposed methodology and compare it with the performance of the existing bundles."}, {"title": "5 RESULTS AND DISCUSSION", "content": "We summarize the performance of the different models embeddings for the popularity metrics in Table 4. We use \"all\" for embeddings"}, {"title": "6 CONCLUSION", "content": "Product bundling and recommending product bundles to consumers is attracting significant interests from stakeholders, especially re-searchers and e-commerce businesses. While bundle recommen-dation has footprints in extant literature, research on bundling the items in the catalog to make these bundles is sparse. To fill this gap, we present an intuitive holistic approach to create new bundles. This is one of the first works on understanding the def-inition of popularity of a bundle from different perspectives. We contribute to product bundling literature by proposing new metrics and evaluating existing bundles. For generating new bundles, we first build content aware and context aware embeddings for games. We then construct various machine learning models to learn how the set of games and their features affect the popularity of a bundle. And finally, use an iterative greedy sampling approach to create new bundles from the existing bundles. Our results indicate that the proposed methodology outperforms the existing bundle by 13%-52% across different metrics. Top bundles generated from the proposed methodology outperforms the existing bundles in all the five popularity metrics.\nOur results also show that we can improve the existing bundles and shift the bundles which are unpopular to popular and very pop-ular category. The methodology proposed in this paper in generic and can be implemented in different businesses. This work has cer-tain limitations which provides opportunities for further research. One of the major limitations is the lack of dataset for bundles. A research direction could be using the methodology to check the generalize ability across different domains. Most of the existing works consider co-purchases and co-views to make a bundle but it is very sparse and lacks an understanding of consumer intent. Thus, compiling datasets could be a priority work to further this field. We use naive greedy approach to optimize the bundles. Bundles can be improved by using more sophisticated optimization models to sam-ple items that could generate a set of potentially popular bundles. An optimization model to find items for bundling could be an inter-esting area of research. We focus on creating static bundles, that is, bundles can be created and released by the firms when a product is launched. However, we do not focus on dynamic bundle creation based on the context of the current session (views/purchase) as done in ecommerce websites e.g. Amazon. This work can be ex-tended to building dynamic bundles by matching session intent and context."}]}