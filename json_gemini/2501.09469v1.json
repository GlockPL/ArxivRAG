{"title": "Predicting Air Temperature from Volumetric Urban Morphology with Machine Learning", "authors": ["Berk K\u0131v\u0131lc\u0131m", "Patrick Erik Bradley"], "abstract": "Environmental parameters such as air temperature are critical de-terminants of human quality of life and energy efficiency management. Urban areas are densely populated and also highly correlated with some of these natural phenomena through urban morphology and landscape spatial patterns. Consequently, predicting the effects of urban plans on environmental parameters is essential for proper deci-sion making and planning to enhance the living conditions of cities. Previous studies have highlighted the strong correlation between ur-ban morphology and air temperature, underscoring the importance of employing three-dimensional data in those analyses. In this study, we firstly introduce a method that converts CityGML data into vox-els which works efficiently and fast in high resolution for large scale datasets such as cities but by sacrificing some building details to over-come the limitations of previous voxelization methodologies that have been computationally intensive and inefficient at transforming large-scale urban areas into voxel representations for high resolution. Those voxelized 3D city data from multiple cities and corresponding air tem-perature data are used to develop a machine learning model. Before the model training, Gaussian blurring is implemented on input data to consider spatial relationships, as a result the correlation rate between air temperature and volumetric building morphology is also increased after the Gaussian blurring. After the model training, the prediction results are not just evaluated with Mean Square Error (MSE) but some image similarity metrics such as Structural Similarity Index Measure (SSIM) and Learned Perceptual Image Patch Similarity (LPIPS) that are able to detect and consider spatial relations during the evaluation process. This trained model is capable of predicting the spatial dis-tribution of air temperature by using building volume information of corresponding pixel as input. By doing so, this research aims to assist urban planners in incorporating environmental parameters into their planning strategies, thereby facilitating more sustainable and inhab-itable urban environments.", "sections": [{"title": "1 Introduction", "content": "Buildings are the most active areas of human activity and have a significant impact on the urban thermal environments by altering the heat exchange [12, 22, 28, 39, 57]. Moreover, a significant majority of the world's popula-tion is predicted to live in urban environments in the future [43]. Besides, temperature increases contribute to health issues with potential for heat-related illnesses and disrupt ecosystems and adversely affect biodiversity [4]. Therefore, it is essential to research the urban thermal environment contain-ing buildings [53]. Although it is recognised that climate issues still have limited impact on urban planning processes [6, 31], it is partly because of a gap between urban planners and climatologists [6]. To help urban plan-ners and decision makers better understand and use the research findings, linking the climate issues to planning parameters can be more helpful than geographic or morphological parameters [22]. Therefore, in this article, a machine learning model is trained to predict urban near-surface air temper-ature by using building volumes.\nThe power of machine learning algorithms allows to evaluate environmen-tal indicators on a large scale and to map urban air temperature [8, 29, 44, 45, 54], since those algorithms have the advantage of solving complex non-linear problems with fewer computing sources and less time [7]. Thanks to machine learning methods, we can now better model the patterns of these urban forms to refine those of future cities to meet the needs of rapid urban-ization [44]. Although the results obtained when using the machine learning models might differ from the actual measurements while exhibiting a simi-lar trend as the measurements, this makes it still reasonable and acceptable [23]. This issue also occurred in the trained models of the present work. In the end, with the aid of trained models in this study, urban planners can manipulate the building volume values as they desire for the input of the machine learning model in order to observe how their plans will impact en-vironmental factors. It is expected that changing the spatial arrangement of urban components may affect the land surface energy distribution [56]. This could allow them to balance and control their plans based on these impacts, potentially reducing the occurrence of flawed urban planning.\nMany of the previous studies focused on investigating the close relation be-tween temperature and buildings [53, 14, 25, 33, 41, 47, 52, 58], while many others implemented machine learning models to predict LST or air temper-ature by considering urban morphology [43, 7, 23, 26, 27, 37]. According to these studies, a higher building volume contributes to warmer environment"}, {"title": "2 Methodology", "content": "This study exclusively utilized open-source data and open-source software tools. The employed datasets encompass CityGML data pertaining to the Thuringia state in Germany [2], coupled with hourly air temperature mea-surements provided by the German Weather Service. The temperature data-sets present air temperature at a height of 2 meters above ground level and feature a 1 km spatial resolution [20]. The air temperature data can be accessed in [1]. Data processing procedures were mainly conducted using Python. Additionally, Paraview [3] was used for some visuzalitazion tasks, while QGIS [36] and several of its plugins such as CityJSON plugin [46] and GDAL rasterize tool [9], is needed for data preparation steps to imple-ment the voxelisation process. In addition, another open-source tool named 'citygml-tools' [24] was used for converting CityGML data into the JSON format for loading CityGML data into QGIS."}, {"title": "2.1 Study Area", "content": "In this study, ten cities from the state of Thuringia in Germany, varying in size and population density, were selected for the analysis. Seven were used for training and three for testing. The dimensions of the selected areas for these cities are as follows: Erfurt (10km x 8km), Jena (8km x 10km), Weimar"}, {"title": "2.2 CityGML to Voxel Conversion", "content": "Traditional techniques for converting CityGML data into voxels operate by calculating intersections between CityGML and potentially billions of grid points for high-resolution and extensive areas. Although this method can model the many details of buildings and produce complex building voxels, it requires substantial computational power and time. Our method simplifies the process significantly by focusing solely on regions with buildings within a two-dimensional plane, assigning a single height value to each building, thereby enabling the rapid construction of less detailed buildings. Conse-"}, {"title": "2.2.1 Retrieving 2D Building Footprint Areas", "content": "Initially, the CityGML data, downloaded via [2], covered an area of 2 km \u00d7 2 km. Therefore, these data were merged to create a single comprehensive CityGML file for each city. This resulting CityGML file was then converted into the CityJSON format and imported into QGIS using the \"CityJSON Loader\" plugin. Subsequently, GDAL's rasterisation tool was employed to produce raster data for any desired region at any specified resolution. In this study, the raster resolution was set at 1 metre, and the necessary boundary regions for the raster image were extracted from the CityGML data. Additional parameters selected during the use of the tool included: \u201cA fixed value to burn: 1\u201d, \u201cAssign a specified no data value to output bands: -999\", \u201cOutput data type: Int16\u201d, \u201cPre-initialize the output image with value: 0\u201d. The output of this process is extracted as GeoTiff format in the coordinate system of EPSG:25832. The illustration of those extracted 2D raster dataset is given in Figure S2."}, {"title": "2.2.2 Real-world coordinate system to voxel coordinate system", "content": "This step involves calculating which location indices in our voxel system correspond to each building's polygon vertices that possess EPSG:25832 co-ordinate data. In addition to the horizontal plane coordinates of these corner points, the data also includes building height information. Consequently, this allows us to utilise the heights of buildings to combine them with 2D building footprints from the raster image.\nFor instance, when the region encompassing the city of Erfurt with an area of 10 km \u00d7 8km, and the voxel resolution is selected as 1 metre, the number of voxels in the horizontal plane should be 10000 x 8000. Consequently, the indices of the voxel array range from 0 to 9999 for width and from 0 to 7999 for height in Python indexing. Considering all these factors, a normalisation method was employed to transform data from the EPSG:25832 coordinate system to the local voxel coordinate system. The formulas used for the X and Y axes are provided below, cf. eq. (1) and (2). The reason for employing different formulas for the X and Y axes is the orientation of arrays in Python, where the origin (0,0) index is at the top-left corner, whereas the real-world coordinate system of the study area places the origin at the bottom-left. This discrepancy causes a flip along the Y-axis, leading to inconsistencies. The formula used for the Y-axis adjusts this issue. Furthermore, after the nor-malisation process in the formula, the resulting values between 0 and 1 are multiplied by the width or height values using width \u2013 1 or height \u2013 1. This minus 1 subtraction adjustment is made because Python indexing starts at 0. In the end, as voxels constitute discrete grids, the new coordinates de-rived from the formula must be integers. Therefore, a rounding operation is applied to the computed values to ensure they conform to this requirement.\n$X_{voxel} = round(\\frac{(X_i - X_{min})}{(X_{max} - X_{min})} (width - 1))$\n$Y_{voxel} = round(\\frac{(Y_{max} - Y_i)}{(Y_{max} - Y_{min})} (height - 1))$"}, {"title": "2.2.3 Assigning the height information to building footprints", "content": "In the final stage of the voxelisation process, a new voxel is generated based on the normalised building polygon vertex coordinates positioned within the voxel grid and 2D building footprint raster image. If these corner points on the voxels align with a building depicted in a two-dimensional raster im-age, then the height of the building is derived from the highest height value"}, {"title": "2.3 Machine Learning Training", "content": "In the machine learning model, the phenomenon targeted for prediction is air temperature. Therefore, air temperature data with a resolution of 1km \u00d7 1km has been employed as ground truth data in the training phase. Given that the resolution of these air temperatures is 1km \u00d7 1km, the area covered by the voxels is divided into a grid commensurable with the voxel numbers. For example, the region with size of 10km \u00d7 8km is divided into a 10 \u00d7 8 grid. Afterwards, new two-dimensional building volume data, containing the total"}, {"title": "3 Results", "content": "Since the accuracy of the trained model and the corresponding parameter se-lections were determined through a trial-and-error approach, multiple train-ing processes were repeated. The resulting training outcomes were analysed both qualitatively and quantitatively. However, in this results section, the model that qualitatively provided the most accurate results and best repre-sented the spatial patterns of the urban heat island effect is presented.\nFor this reason, rather than focusing solely on achieving a lower MSE (Mean Square Error), visual results were used as the primary basis for accuracy. For instance, in evaluations using deeper trees with both the XGBoost and Random Forest methods, MSE values as low as 0.20 \u00b0C\u00b2 were achieved for XGBoost, while values around 0.45 \u00b0C\u00b2 were observed for Random Forest during our experiments. However, upon reviewing the qualitative results, it became evident that these seemingly satisfactory quantitative outcomes were the result of overfitting. This was especially apparent in the visual out-comes, where the urban heat island patterns of cities were not predicted in a consistent and semantically correct manner, failing to capture the expected spatial patterns. On the other hand, some experiments provide appropri-ate and consistent visual patterns, despite having higher quantitative error values such as 0.92 \u00b0C\u00b2 MSE for the Random Forest and 0.84 \u00b0C\u00b2 for the XGBoost techniques.\nIn addition to the visual analysis of the predictions, the differences between the predicted results and ground truth data were also examined. Upon in-vestigation, it was observed that the Random Forest model's error behavior did not follow any discernible spatial patterns. Instead, the error appeared to occur randomly across the spatial domain, suggesting that the model's inaccuracies were distributed without any systematic bias or spatial struc-ture. On the other hand, when examining the error distribution of the model trained with XGBoost, it was observed that the highest error levels were concentrated in regions corresponding to urban areas. This phenomena can be seen in the following figures of this section.\nThe comparison between the prediction results and ground truth data for the training cities (Jena, Weimar, Sondershausen, Altenburg, Gotha, Schmalka-lden, Gera) obtained using the Random Forest model is presented in Figure 6. Similarly, the same comparison for the test cities (Erfurt, Suhl, Sonneberg) is shown in Figure 5. Although the spatial patterns are well predicted and presented in these Figure 5 and Figure 6, some deviations in air temperature"}, {"title": "4 Discussion", "content": "Although the voxelization methodology presented in this study is designed to yield quick and efficient results, it is previously mentioned that the results compromise the level of detail of buildings. Since only a single height value is assigned per building, this approach can present challenges with more com-plex building structures. For instance, as clearly shown in Figure S3, the Jena Tower and the adjacent building comprise multiple components with varying height values within a single polygon component. In such cases, the voxelization process may lack sufficient precision, leading to some degree of compromise in accurately capturing the architectural complexity of certain buildings.\nWhile generating voxels, the intersection between 2D footprints of the build-ings and the building polygon corner points in the voxel coordinate system is used. To increase the possibility of intersection, instead of treating these building polygon corner points as single pixels, 3x3 patches are used. It is important to note that the choice of the patch size is related to the resolu-tion being used. For instance, at lower voxel resolutions, the use of patches may not be necessary, whereas at higher resolutions, larger patches might be required to ensure intersection. On the other hand, using larger patches reduce the precision in cases where buildings are densely situated and have varying heights. However, since the voxel resolution is selected as 1 meter in this study, the use of 3 \u00d7 3 meter patches does not significantly cause the issues in this context. Moreover, buildings that are closely positioned in many urban areas often share the similar height values which minimize the potential impact on precision. Nevertheless, even working with 1 meter resolution voxels and using 3 \u00d7 3 patches, some buildings were not generated due to the failure to achieve intersections. For example, 24990 out of 26642 buildings were successfully matched and generated in Erfurt, it is 19154 out of 20180 in Jena, 17313 out of 18353 in Weimar, 17551 out of 18626 in Suhl, 11526 out of 13001 in Altenburg, 7803 out of 8454 in Sondershausen, 12782 out of 13620 in Gotha, 12002 out of 12814 in Sonneberg, 9847 out of 10670 in Schmalkalden, 19693 out of 22255 in Gera.\nIn addition, an alternative method is tested for generating voxels that elimi-nates the need for the 2D footprint image and manually defined patch sizes. Since the corner coordinates of each building is known, polygons are cre-ated by using these corner points. Then each grid in the voxels are checked to determine whether a grid is located inside a polygon or not. However, this method produced inferior results in terms of both accuracy and com-"}, {"title": "5 Conclusion", "content": "In this study, the voxel data and their representation in raster format al-lowed for calculating the amount building volumes for each air temperature pixel region. Since these building volumes are represented in raster format, it becomes possible to apply image processing techniques such as Gaussian blurring. Gaussian blurring enabled the integration of spatial neighborhood relationships before the training process, as the value of a pixel is influenced by adjacent pixel values. Thereby, the correlation rate is also increased be-tween air temperature data and building volume data after implementing Gaussian blur.\nAdditionally, the proposed CityGML-to-voxel conversion method facilitated the rapid generation of city-scale 3D volumetric data, accelerating experi-ments by allowing quick acquisition of voxel data from different regions. This rapid conversion enables urban planners to quickly implement their plans in digital applications and observe the impact on environmental indicators.\nIn addition, as demonstrated by previous studies, when model accuracy is evaluated using the MSE metric, the XGBoost method produces models with low error rates. However, thanks to the raster format of our voxelized methodology, these errors are observed to be systematic and the spatial distri-butions are not well captured. On the other hand, the Random Forest method has higher MSE values, it qualitatively demonstrates more consistent spatial patterns and the error distribution appears more randomly. Furthermore, the raster-based format of both predictions and ground truth data allowed for the implementations of image similarity metrics like SSIM or LPIPS that also capture and consider spatial relationships for evaluation process. Since Random Forest method qualitatively provided better results than XGBoost method, these image similarity metrics proves that qualitative finding in a quantitative manner. The SSIM and LPIPS scores for each city, indicating that the prediction results of the Random Forest method are better than XGBoost. Besides, using the testing data confirms that these accurate pat-terns are not due to overfitting but rather indicate good generalization.\nTaking all of these into consideration, it has been demonstrated that pre-vious studies relying solely on MSE to evaluate their models are inadequate and lack depth. The voxel-based approach presented here takes into account spatial neighborhood relationships both before and after training, resulting in more accurate outcomes and insightful analyses. The models used in this study kept simple without any multi-variable or multi-temporal sources to"}]}