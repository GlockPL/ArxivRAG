{"title": "From Code to Compliance: Assessing ChatGPT's Utility in Designing an Accessible Webpage-A Case Study", "authors": ["AMMAR AHMED", "MARGARIDA FRESCO", "FREDRIK FORSBERG", "HALLVARD GROTLI"], "abstract": "Web accessibility ensures that individuals with disabilities can access and interact with digital content without barriers, yet a significant majority of most used websites fail to meet accessibility standards. This study evaluates ChatGPT's (GPT-40) ability to generate and improve web pages in line with Web Content Accessibility Guidelines (WCAG). While ChatGPT can effectively address accessibility issues when prompted, its default code often lacks compliance, reflecting limitations in its training data and prevailing inaccessible web practices. Automated and manual testing revealed strengths in resolving simple issues but challenges with complex tasks, requiring human oversight and additional iterations. Unlike prior studies, we incorporate manual evaluation, dynamic elements, and use the visual reasoning capability of ChatGPT along with the prompts to fix accessibility issues. Providing screenshots alongside prompts enhances the LLM's ability to address accessibility issues by allowing it to analyze surrounding components, such as determining appropriate contrast colors. We found that effective prompt engineering, such as providing concise, structured feedback and incorporating visual aids, significantly enhances ChatGPT's performance. These findings highlight the potential and limitations of large language models for accessible web development, offering practical guidance for developers to create more inclusive websites.", "sections": [{"title": "1 Introduction", "content": "The goal of web accessibility is to remove barriers that might prevent people with disabilities from accessing or having a full user experience. Effective accessibility integration helps to fulfill the principles of universal design, which is the design of products and environments to be usable by all people, to the greatest extent possible [17].\nInstead of addressing accessibility as an afterthought in completed projects, universal accessibility must take a proactive approach from the very beginning of the design and development processes. To address these concerns, the Web Content Accessibility Guidelines (WCAG) were established as an international standard, providing detailed guidance on making web content more accessible [26].\nDespite the critical importance of accessibility, WebAIM's 2024 report on one million frequently used homepages indicates that 96% of these websites were deemed inaccessible [27]. The analysis identified over 56 million accessibility errors, equating to an average of 56.8 errors per page. This highlights a significant issue, particularly given that approximately 16% of the global population-around 1.3 billion people-live with some form of disability [30]. Moreover, they identified that the complexity of the analyzed homepages had increased from last year up to 11.8%. Therefore, addressing these barriers requires deliberate efforts, but the growing complexity of web development has made achieving accessibility a persistent challenge.\nIn recent years, generative AI has made significant strides, not only in producing synthetic videos and text but also recently in generating accurate code [7, 9, 12], with many developers incorporating the use of AI in several software development stages [22]. The field is rapidly evolving with new findings published every month"}, {"title": "2 Methodology", "content": "The primary objectives of our study are twofold: first, to evaluate the accessibility of the generated webpage using both manual and tool-based methods, as combining these approaches results in a more comprehensive assessment [4]; second, to refine the webpage with the help of ChatGPT (GPT-40) itself to correct any identified errors, ensuring full compliance with the Web Content Accessibility Guidelines (WCAG) [25], which serve as the foundational principles for the code."}, {"title": "2.1 Webpage Design", "content": "We selected a TV series webpage as the focus of our investigation due to its ability to encompass a diverse range of essential website elements commonly found across various web domains. While alternative website types, such as e-commerce platforms, could have been chosen, a TV series webpage provides a representative mix of features, including videos, carousels, pricing tables, images, drop-down menus, and other interactive components. Hence, this selection ensures a comprehensive evaluation of accessibility across a broad spectrum of web design elements, making the findings more generalizable to diverse website types. The prompt we use for the website generation can be seen in Appendix 6, which contains information about all the webpage sections and their elements."}, {"title": "2.2 Measures", "content": "We employ a mixed-methods approach, using quantitative and qualitative measures to evaluate the generated webpage's accessibility. Quantitative data includes the total number of accessibility issues detected by automated tools WAVE [1] and Axe [8], which provide detailed reports. We also record the frequency of each error type (e.g.,"}, {"title": "2.3 Procedure", "content": "To begin, we provided ChatGPT with detailed instructions on the desired webpage structure and visual layout (see Appendix 6). We used the pro version of ChatGPT (GPT-40) on a newly created account to ensure no prior conversation history influenced its responses, and the newly introduced \"memory\" feature was turned off to prevent knowledge transfer between chat sessions. ChatGPT was chosen for this study due to its superior performance in recent human-evaluated code generation benchmarks compared to other prominent LLMs like Claude or Gemini [3], and because it has become widely used by developers worldwide [24]. While ChatGPT maintains context within a chat session, the context window of LLMs is limited, and as conversations grow longer, they start to forget earlier interactions [5]. To mitigate this limitation, we either provided the relevant code again to refresh its context or started a new chat session and provided the context anew.\nWe then checked the webpage's structure and visual alignment against the given requirements described in the prompt. By \u201cstructure\u201d we mean are all the required elements such as the navigation bar, buttons, forms, headers, etc. present in the webpage? Do they follow the structural hierarchy that we specified in the prompt? By \"visual alignment\u201d we mean do the elements have the required color scheme? are the font styles consistent? do buttons have the required appearance? And so on. Lastly, we will check whether the generated code is free of any errors. If the webpage did not fully meet our expectations, we prompted it again providing the issues that were present, asking it to fix the issues, and specifying what we needed instead. This process continued until the whole webpage design and structure were satisfactory.\nAfter completing the webpage design, we conducted tool-based and manual accessibility evaluations, in that order. For tool-based testing, we used WAVE and Axe to identify accessibility issues, examining the frequency and total number of errors and alerts. Each error was analyzed to pinpoint its location on the webpage. Depending on the error, we either: a) prompted ChatGPT to fix it, b) provided the HTML/CSS code snippet for correction, or c) supplied a screenshot of the error location for ChatGPT to address. The output from the ChatGPT containing the updated code is then used, without any manual intervention or review. If the error persisted, we provided the feedback again. This process continued until all detected errors were resolved. Issues found during the manual evaluation were addressed similarly. If ChatGPT was unable to fix an issue after multiple attempts with diminishing returns, we noted it and concluded that ChatGPT could not resolve it.\nWe began fixing all accessibility errors in a new chat session, providing ChatGPT with the initial code and WCAG 2.2 guidelines [25] to ensure familiarity with accessibility standards from the outset, as sufficient background and context in the prompt increases the likelihood of accurate code generation [14, 29]. This entire process is illustrated in Figure 1. Iteratively refining the web pages based on feedback mirrors real-world development practices and leverages ChatGPT's ability to adjust outputs based on new prompts. In this study, we do adhere to best prompt engineering practices for code generation as outlined by White et al. [29], although, we also focus on how a typical developer might interact with ChatGPT, rather than as a prompt engineering expert."}, {"title": "3 Results", "content": ""}, {"title": "3.1 Positive Accessibility Features in the Default Generated Code", "content": "After the initial prompt, ChatGPT demonstrated some adherence to accessibility best practices in the generated webpage code. The generated code consistently used semantic tags over generic div elements. This included appropriate tags such as nav for navigation, section for various page sections, and footer for the footer, and so on. The lang attribute was set to \u201cen\u201d (English), helping screen readers interpret the page language, along with a descriptive title tag, which is the first thing the screen readers say. Headings were organized hierarchically, with h3 nested within h2 tags. Links were visually distinguished with underlines and color, differentiating them from non-link text. The generated code clearly distinguished between links (which navigate) and buttons (which trigger actions). The alt attribute was provided for all img tags, either with a placeholder or left empty when appropriate, leaving room for content-specific alt text. Elements with semantic tags followed a simple and consistent navigation order. The forms had one input field per line, which is considered a best practice, instead of multiple input fields in a single line. In terms of visual accessibility, the text-heavy sections with important content, such as all the headings, frequently asked questions, and login and registration forms, were aligned to the left, following the F-pattern [19] commonly observed in left-to-right reading cultures. Finally, ChatGPT also"}, {"title": "3.2 Accessibility Limitations in the Default Generated Code", "content": "Although ChatGPT used semantic tags by default, it failed to include a \u201cmain\u201d landmark. Consequently, it did not provide a \"skip-to-main content\u201d link, a feature for allowing screen reader users to quickly skip to the main content of the webpage. The absence of a level-one heading (h1) was another oversight. One of the most common accessibility issues we identified was low contrast across various elements. This indicates that the contrast issue is a recurrent problem in the default webpage generated by ChatGPT. While links were visually distinct (underlined and colored) as mentioned before, the contrast was far below WCAG 2.2 level AA standards. Low contrast was also noted in headings, buttons, and hover text. Accessibility best practices dictate that a website should be fully navigable via keyboard, yet ChatGPT's generated page lacked this functionality. Many sections, including the \u201cFAQ\u201d section, tables, modals, and interactive content like \u201ctrending\" carousel and \u201cmost watched TV shows\u201d were inaccessible to keyboard navigation. This was because there was no tabindex applied to non-semantic elements, leaving some items out of the natural navigation flow.\nThe login and registration forms did not include labels for input fields. Placeholder text was present, but placeholders should ideally provide examples rather than act as field labels. Link descriptions were overly brief and could be confusing. For instance, rather than saying \"Privacy Policy\" a more accessible option would be \"About Our Privacy Policy\u201d. The table on the page lacked a caption or summary, crucial for context in tabular data. Additionally, the table headers did not use the scope attribute to define the column headers, which hinders screen reader interpretation. Drop-down options were entirely inaccessible via keyboard, and they suffered from low contrast. Modals for the registration form were not opening at first using the keyboard, when this was fixed, the focus was not shifted to the modal content, leaving it on the page beneath the modal. The hero section included a video with a video tag but ChatGPT did not suggest or give a code snippet to add captions. Finally, Although the initial prompt requested a moving carousel, ChatGPT did not include a \"skip\" option to bypass the carousel content, nor did it alert screen reader users when the carousel content changed. This oversight limits accessibility for those who rely on screen readers and creates an obstacle in navigating lengthy content."}, {"title": "3.3 Effectiveness of ChatGPT in Understanding Accessibility Requirements and Making The\nWebpage Accessible", "content": "In this section, we examine ChatGPT's ability to fix detected accessibility issues categorized into automated and manually identified issues, shown in Tables 2 and 3, respectively, along with the number of iterations (feedback prompts), and their resolution. When it came to automated errors, most issues were resolved in one iteration. However, some issues like \u201cMissing form labels (forms)\u201d and \u201cNo level-one heading\u201d took more than one iteration to resolve. The reason it took 3 iterations to fix the missing form labels issue is that ChatGPT provided the labels on a separate line instead of beside the associated input field, which is often the best practice. Contrast errors typically required only one iteration to fix. The table's total number of iterations to fix all automated errors is relatively low (18 iterations in total)."}, {"title": "5 Limitations and Future Work", "content": "Our study focused exclusively on the ChatGPT-40 model, not other proprietary or open-source LLMs. Expanding the analysis to include other models could provide insights into their accessibility strengths and limitations. Moreover, our results heavily depend on the quality of the prompts used. Findings may differ with less refined or more concise prompts, as prompt engineering introduces variability. Investigating systematic methods for optimizing prompts could lead to more consistent outputs from LLMs. This study primarily focused on how typical developers might interact with ChatGPT, rather than as prompt engineering experts. Lastly, manual testing and evaluation of qualitative features like user experience were based on the authors' judgment, introducing subjectivity that might influence the results."}, {"title": "6 Conclusion", "content": "This study demonstrates that while ChatGPT can address a range of accessibility issues in web development-from straightforward errors to more complex challenges-it does not inherently prioritize accessibility in its default code generation. Developers can leverage ChatGPT as a supportive tool to assist with coding tasks and improve accessibility features, but it should not replace human judgment and expertise. The insights and best practices identified offer practical strategies for developers aiming to create accessible websites more effectively. Our findings also provide researchers with a clearer understanding of the current limitations of large language models like ChatGPT, highlighting areas for enhancement through improved training data focused on accessibility compliance. Continued efforts to integrate AI tools with human expertise are essential. By collaborating closely with accessibility professionals, developers can harness the potential of AI while ensuring that web content remains inclusive and compliant with accessibility standards."}, {"title": "Appendix", "content": "Detailed Prompt for TV Series Webpage Design\nI want you to write HTML and CSS for a webpage dedicated to a TV series, with the following elements,\nstructure, and visual appearance:\nThe webpage should include multimedia elements (images, videos, audio), interactive components (forms, links,\ntables, dropdowns, modals), and dynamic content. The navigation bar and footer should have a dark\nbackground, while the rest of the website should have a white background. Buttons should have a dark yellow\ncolor scheme (#f5b700).\n1. Navigation Bar: A logo should be aligned to the left, and menu items (\"Homepage,\" \"Trending,\" \"Most\nWatched,\" \"Pricing,\u201d \u201cFAQ,\u201d \u201cRegister,\u201d \u201cAbout,"}, {"title": "Weighted Average Iterations (WAI)", "content": "$\\text{Weighted Average Iterations (WAI)} = \\frac{\\Sigma(x_i \\times W_i)}{\\Sigma W_i}$"}, {"title": "Accuracy", "content": "$\\text{Accuracy} = \\frac{\\text{NER}}{\\text{TED}} \\times 100$"}]}