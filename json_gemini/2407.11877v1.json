{"title": "Bridging Weighted First Order Model Counting and Graph Polynomials", "authors": ["Qipeng Kuang", "Ond\u0159ej Ku\u017eelka", "Yuanhong Wang", "Yuyi Wang"], "abstract": "The Weighted First-Order Model Counting Problem (WFOMC) asks to compute the weighted sum of models of a given first-order logic sentence over a given domain. It can be solved in time polynomial in the domain size for sentences from the two-variable fragment with counting quantifiers, known as C2. This polynomial-time complexity is also retained when extending C2 by one of the following axioms: linear order axiom, tree axiom, forest axiom, directed acyclic graph axiom or connectedness axiom. An interesting question remains as to which other axioms can be added to the first-order sentences in this way. We provide a new perspective on this problem by associating WFOMC with graph polynomials. Using WFOMC, we define Weak Connectedness Polynomial and Strong Connectedness Polynomials for first-order logic sentences. It turns out that these polynomials have the following interesting properties. First, they can be computed in polynomial time in the domain size for sentences from C\u00b2. Second, we can use them to solve WFOMC with all of the existing axioms known to be tractable as well as with new ones such as bipartiteness, strong connectedness, being a spanning subgraph, having k connected components, etc. Third, the well-known Tutte polynomial can be recovered as a special case of the Weak Connectedness Polynomial, and the Strict and Non-Strict Directed Chromatic Polynomials can be recovered from the Strong Connectedness Polynomials, which allows us to show that these important graph polynomials can be computed in time polynomial in the number of vertices for any graph that can be encoded by a fixed C2 sentence and a conjunction of an arbitrary number of ground unary literals.", "sections": [{"title": "Introduction", "content": "Given a first-order logic sentence \u03a8 and $n \\in \\mathbb{N}$, the first-order model counting (FOMC) problem asks to compute the number of models of \u03a8 over the domain {1,...,n}. FOMC can be used, among others, to solve various combinatorics problems on labeled structures. For instance, the FOMC of the sentence $\\Psi = \\forall x\\exists y(E(x,y) \\lor E(y,x)) \\land \\forall x\\neg E(x,x)$ corresponds to the number of n-vertex directed graphs with no isolated vertices and no loops. Similarly, the FOMC of $\\Phi = \\forall x\\neg E(x,x) \\land \\forall x\\forall y (E(x,y) \\rightarrow E(y,x)) \\land \\forall x\\exists^{=k}yE(x,y)$ equals the number of k-regular graphs on n vertices where $\\exists^{=k}y$ is a counting quantifier restricting the number of y satisfying E(x,y) = T to exactly k for each x.\nThe weighted variant of the FOMC problem, known as the weighted first-order model counting (WFOMC) problem, additionally expects a specification of positive and negative weights for predicates in the language, which are then used to assign weights to models. In WFOMC, the task is to compute the sum of the weights of the given sentence's models. WFOMC has applications in Statistical Relational Learning (SRL) [GT07]. For instance, Markov Logic Networks (MLN) [RD06], one of the most popular SRL formalisms, model relational data by a distribution over possible worlds, where the computation of the partition function (equivalent to probabilistic inference in MLN) is reducible to WFOMC [dB11].\nA key issue regarding WFOMC is its computational complexity. Generally, there is no hope of devising algorithms for WFOMC that would scale polynomially with the size of the first-order logic sentences under reasonable assumptions, since it can be reduced from #SAT. This is true even for very simple fragments such as the one-variable fragment FO\u00b9, which contains sentences with at most one logical variable. Therefore, most of the focus in this area has been on identifying fragments containing first-order logic sentences for which WFOMC can be computed in time polynomial in the size of the domain (but not necessarily in the size of the sentence). The term coined for this kind of tractability by [dB11] is domain liftability\u2014it is an analog to data complexity [Var82] from database theory. Domain liftability also means that enumerative combinatorial problems can be solved in time polynomial in the size of the structures being counted.\nThe first positive results regarding the tractability of WFOMC came from the two seminal papers [dB11, dBMD14], which together established domain liftability of the two-variable fragment of first-order logic FO\u00b2. This was quickly complemented by a hardness result [BdBGS15], showing that WFOMC for the three-variable fragment FO\u00b3 is not domain-liftable (under plausible complexity-theoretic assumptions). However, this does not mean that the frontiers of tractability cannot be pushed beyond FO\u00b2. For instance, the two-variable fragment with counting quantifiers C\u00b2 [GOR97] (e.g., the above sentence of a k-regular graph) with cardinality constraints (i.e., the restrictions to the number of true ground atoms for relations), which is strictly more expressive than FO\u00b2, was shown to be domain-liftable in [Kuz21]. Other works [dBD12, WPWK24] proved domain-liftability when attaching unary evidence (i.e., a series of ground unary literals) to these fragments.\nOne strategy for discovering new tractable fragments is to add extra axioms, which may or may not be finitely expressible in first-order logic. This approach was first explored in [KL18] where it was shown that adding a single functionality axiom to FO\u00b2 results in a domain-liftable fragment. Subsequent works extended domain liftability to the fragments C\u00b2 + Tree [vBK23] and C2 + LinearOrder [TK23], which are obtained by adding to C2 an axiom specifying that a distinguished relation R should correspond to an undirected tree or to a linear order, respectively."}, {"title": "Our Contribution", "content": "In this paper, we take a different route inspired by graph polynomials. We consider C2 possibly extended by cardinality constraints and unary evidence, denoted by extended C\u00b2. We introduce several polynomials that we associate to first-order logic sentences and show that they can be computed efficiently for extended C2 sentences, which extends the domain-liftability to WFOMC for several new axioms (as well as for all of the old ones) and enables the efficient computation of the Tutte polynomial for any graph that can be encoded by certain first-order fragments.\nWe first define the Weak Connectedness Polynomial (WCP) as a univariate polynomial of u for any first-order sentence \u03a8 with domain size, a pair of weighting functions, and a distinguished binary relation R. Roughly speaking, it is the sum over the weight of each possible graph interpreting R (i.e., a graph denoted by G(R) obtained by regarding each R(a,b) = T as an edge $a \\rightarrow b$) multiplied by a term of u indicating the number of its weakly connected components. The WCP can be regarded as a classification of all possible G(R) by the number of connected components and, therefore, captures the information of the connectedness of models.\nWe then incorporate edge orientations by defining two Strong Connectedness Polynomials (SCPs), namely Non-strict Strong Connectedness Polynomial (NSCP) and Strict Strong Connectedness Polynomial (SSCP), which are intuitively the sum over the weight of each possible G(R) multiplied by the non-strict and strict directed chromatic polynomials respectively, so that they embrace the operations of directed chromatic polynomials. As an extension of WCP, we also define Multi-relation Weak Connectedness Polynomial (MWCP) for multiple distinguished binary relations under the conditions that the relations are nested.\nThe polynomials are formally defined in the language of first-order logic such that the evaluation of the polynomials at each positive integer point is equivalent to the WFOMC of a certain sentence. Therefore a natural way to obtain the polynomials is to evaluate the polynomials at a sufficiently large number of points and recover the polynomials by interpolation. However, existing algorithms for WFOMC can not solve these resulting WFOMC problems in polynomial time data complexity, as in our case, the length of the sentences depends on the domain size n and the runtime of these algorithms can be exponential in the length of the sentence."}, {"title": "Polynomials for WFOMC", "content": "Proposition 1.1 (Summary of Propositions 3.3, 4.3, 4.4 and 6.1). Computing WCP, NSCP and SSCP for a given extended 2 sentence, a domain of size n, a distinguished binary relation, and weighting functions can be computed in polynomial time in n.\nMoreover, computing MWCP for a given extended C\u00b2 sentence, a domain of size n, a sequence of distinguished nested binary relations, and weighting functions can be computed in polynomial time in n.\nWith the help of polynomials for WFOMC, we can tackle several counting tasks efficiently.\nThe first task is WFOMC for an extended C2 sentence associated with axioms, the special constraints on G(R) that it should be a certain combinatorial structure. It can be generalized to multiple relations $R_1,\\ldots, R_k$ such that $G(R_1),\\cdots,G(R_k)$ satisfy additional internal restrictions. As the polynomials allow us to obtain knowledge of combinatorial structures using similar operations as graph polynomials, this gives rise to the domain-liftability of new axioms (such as the bipartite axiom), generalization of the existing axiom (such as connectedk from the connected axiom), and incorporation of the existing axioms (such as the tree axiom). The main axioms for which we prove domain-liftability are listed in Table 1.\nTheorem 1.1. The fragment of extended C\u00b2 with any single axiom in Table 1 is domain-liftable.\nMoreover, we can give domain-liftability to the combination of axioms in Table 1. Table 2 offers a comprehensive list of potential axioms by combining the existing axioms.\nTheorem 1.2. The fragment of extended C\u00b2 with a single combined axiom in Table 2 is domain-liftable.\nOur approach offers several distinct advantages over existing techniques for individual axioms. First, it is more general, requiring only a polynomial representation for axioms without relying on specific algorithmic techniques for each problem. Second, it enables the use of the same polynomial for multiple axioms. Third, it is more flexible, allowing easy extension to new axioms as long as they can be expressed with polynomials, for instance, requiring G(R) to represent a k-cycle permutation in Example 3.2 or a strongly connected tournament in Example 4.1. Lastly, it establishes a connection between the complexity of graph polynomials and the domain-liftability of WFOMC."}, {"title": "Contribution to Graph Polynomials", "content": "Besides using the idea of graph polynomials to solve several counting tasks efficiently, conversely, the polynomials for WFOMC make contribution to graph polynomials. We show that the well-known Tutte polynomial [Tut54] can be recovered from the extended version of WCP, and the strict and non-strict directed chromatic polynomials can be recovered from SSCP and NSCP respectively, which allows us to show that these graph polynomials can be computed in time polynomial in the number of vertices for any graph that can be encoded by a fixed C2 sentence with cardinality constraints and unary evidence.\nTheorem 1.3 (Informal summary of Theorem 3.5 and Corollary 4.1). Let G be a graph that can be encoded by a 2 sentence of constant size associated with cardinality constraints and unary evidence. The Tutte polynomial (if G is undirected), the strict directed chromatic polynomial, and the non-strict directed chromatic polynomial of G can be computed in time polynomial in the size of G.\nThe above result answers in the positive way the question in [vBK23] whether calculating the Tutte polynomial of a block-structured graph can be done in time polynomial in the number of vertices."}, {"title": "Related Work", "content": "We build on several lines of research. First, we build on the stream of results from lifted inference literature which established domain-liftability of several natural fragments of first-order logic [Poo03, dSBAR05, dB11, GD11, dBMD14, BdBGS15, KKVP16, Kuz21]. These works started with the seminal results showing domain-liftability of FO\u00b2 [dB11, dBMD14] and continued by showing domain-liftability of larger fragments such as S2FO2 and S2RU [KKVP16], U\u2081 [KL18] or C\u00b2 [Kuz21]. Second, we build on extensions of these works that added axioms not expressible in these fragments or even in first-order logic such as the tree axiom [vBK23], forest axiom [MBS23], linear order axiom [TK23], acyclicity axiom [MBS23] and connectedness axiom [MBS23]. In this work, we generalize all of these results and add new axioms to this list, showing their domain-liftability. Finally, our work builds on tools from enumerative combinatorics [SS86] and on graph polynomials [Tut04]. The most well-known among graph polynomials is the Tutte polynomial [Tut54] but there exist also extensions of it [AB20], with which we do not work directly in this paper. Computing the Tutte polynomial is known to be intractable in general [JVW90], however, in this work we show that it can be computed in polynomial time for graphs that can be encoded by a fixed sentence from the first-order fragment C2, possibly with cardinality constraints and unary evidence."}, {"title": "Preliminaries", "content": "We introduce our notations and main technical concepts, and provide a brief overview of existing algorithms in this section."}, {"title": "Mathematical Notations", "content": "Throughout this paper, we denote the set of natural numbers from 1 to n as [n]. For a polynomial f(x), the notation $[x^i]f$ represents the coefficient of the monomial $x^i$.\nAll vectors used in this paper are non-negative integer vectors. For a vector c of length L, $|c|$ denotes the sum of its elements, i.e., $\\Sigma_i c_i$. When considering two vectors a and b of the same length L, the operation a + b denotes the vector $(a_1 + b_1, a_2 + b_2,\\ldots,a_L + b_L)$, and the subtraction is defined similarly. For a vector a and a non-negative integer n, $\\binom{n}{a} = \\frac{n!}{(a)(n-1)... (n-a_1-a_1-a_L-1)} = \\frac{n!}{a_1!a_2!...a_L!}$ refers to $\\frac{n!}{\u03b1_1!\u03b1_2!...\u03b1_!}$."}, {"title": "First-Order Logic", "content": "We consider the function-free, finite domain fragment of first-order logic. An atom of arity k takes the form $P(x_1,\\ldots,x_k)$ where P/k is from a vocabulary of predicates (also called relations), and $x_1,\\ldots, x_k$ are logical variables from a vocabulary of variables. A literal is an atom or its negation. A formula is formed by connecting one or more literals together using negation, conjunction, or disjunction. A formula may optionally be surrounded by one or more quantifiers of the form \u2200x or \u2203x, where x is a logical variable. A logical variable in a formula is said to be free if it is not bound."}, {"title": "Weighted First Order Model Counting", "content": "The weighted first-order model counting problem (WFOMC) takes the input consisting of a first-order sentence \u03a8, a domain size $n \\in \\mathbb{N}$, and a pair of weighting functions (w,$\\overline{w}$) that both map all predicates in \u03a8 to real weights. Given a set L of true or false ground atoms (i.e., ground literals) whose predicates are in \u03a8, the weight of L is defined as $W(L,w,\\overline{w}) := \\Pi_{a \\in L_T} w(pred(a)) \\cdot \\Pi_{a \\in L_F} \\overline{w}(pred(a))$, where $L_T$ (resp. $L_F$) denotes the set of true ground (resp. false) atoms in L, and pred(a) maps an atom a to its corresponding predicate name.\nDefinition 2.1 (Weighted First Order Model Counting). The WFOMC of a first-order sentence \u03a8 over a finite domain of size n under weighting functions (w,$\\overline{w}$) is\n$WFOMC(\\Psi,n,w,\\overline{w}) := \\sum_{\\mu \\in M_{\\Psi, n}} W(\\mu, w, \\overline{w})$.\nSince these weightings are defined on the predicate level, all groundings of the same predicate get the same weights. For this reason, the notion of WFOMC defined here is also referred to as symmetric WFOMC.\nThe weighted model counting problem (WMC) is defined similarly but the input formula is a ground propositional sentence.\nDefinition 2.2 (Weighted Model Counting). The WMC of a ground propositional sentence \u03a6 under weighting functions (w,$\\overline{w}$) is\n$WMC(\\Phi,w,\\overline{w}) := \\sum_{\\mu \\in M_{\\Phi}} W(\\mu, w, \\overline{w})$,\nwhere $M_{\\Phi}$ denotes the set of all models of \u03a6."}, {"title": "Data Complexity of WFOMC", "content": "We consider the data complexity of WFOMC: the complexity of computing WFOMC(\u03a8,n,w,$\\overline{w}$) when fixing the input sentence \u03a8 and weighting (w, $\\overline{w}$), and treating the domain size n as an input encoded in unary.\nDefinition 2.3 (Domain-liftability [dB11]). A sentence, or class of sentences, that enjoys polynomial-time data complexity is said to be domain-liftable.\nDomain-liftability of FO\u00b2 Building on [dB11, dBMD14], in [BdBGS15, Appendix C], it was shown that any sentence with at most two logical variables (FO\u00b2) is domain-liftable by devising a polynomial-time algorithm for computing WFOMC(\u03a8,n,w,$\\overline{w}$) for any FO2 sentence \u03a8 and any weighting (w,$\\overline{w}$).\nHere we briefly describe this algorithm, as some of its concepts are important in this paper. We mostly follow the notation from [vBK21]. Any sentence in FO2 can be reduced to the prenex normal form with only universal quantifiers (i.e., \u2200x\u2200y \u03c8(x,y), where \u03c8(x, y) is a quantifier-free formula) by the normalization in [GKV97] and the technique of eliminating existential quantifiers in [dBMD14]. The reduction respects the WFOMC value, and hence in what follows, we assume that the input sentence is in the form \u2200xy \u03c8(x,y). We first need the notion of a 1-type.\nDefinition 2.4 (1-type). A 1-type of a first-order sentence \u03a8 is a maximally consistent set of literals formed from atoms in \u03a8 using only a single variable x.\nLet $C_1(x), C_2(x),\\cdots, C_L(x)$ be all the 1-types of \u03a8. When we consider domain-liftability, the sentence is fixed and therefore L is a constant. We partition domain elements into 1-types by enumerating the configuration c = $(C_1, C_2,\\ldots,C_L)$, a vector indicating the number of elements partitioned to each 1-type, since in the symmetric WFOMC only the configuration matters. Then we can rewrite \u03a8 as\n$\\eta = \\bigwedge_{1<i<j<L} \\forall x \\in C_i \\forall y \\in C_j(\\psi(x,y) \\land \\psi(y, x)) \\\\\\\\\\\\\\\\\\\\wedge \\bigwedge_{1<i<L} \\forall x \\in C_i \\forall y \\in C_i \\psi(x, y)$.\nSince we know the truth values of the unary and reflexive binary atoms of each 1-type, we may simplify the body of each conjunct by substituting every unary and reflexive binary atom with true or false as appropriate. Denote by $\\psi_i(x, y)$ the simplification of \u03c8(x,y) when both x and y belong to the same 1-type $C_i$, and by $\\psi_{ij}(x, y)$ the simplification of $\\psi(x,y) \\land \\psi(y, x)$ when x and y belong"}, {"title": "Domain-liftability of Extended C2", "content": "The above algorithm also serves as the basis of a WFOMC algorithm for C2 (the FO2 sentence with counting quantifiers $\\exists^{=k}, \\exists^{<k}$ and $\\exists^{>k}$) together with cardinality constraints and unary evidence. The counting quantifiers allow us to express concepts such as \"each vertex in the graph has exactly two outgoing edges\", i.e., 2-regular graphs, by the sentence $\\forall x\\exists^{=2}y E(x,y)$, where E/2 is a binary predicate representing the edge relation. The cardinality constraint is in the form of |P| \u2709 k, where P is a predicate and \u2709 is a comparison operator {<, \u2264, =, \u2265, >}. These constraints are imposed on the number of distinct positive groundings of P in a model. For example, |Eq| = n means that there are exactly n distinct groundings of Eq in a model, and the sentence $\\forall x Eq(x,x) \\land |Eq| = n$ along with a domain of size n encode an identity relation Eq. Unary evidence is a set of ground unary atoms that specify the interpretation of unary predicates for some domain elements. For better exposition, we use extended C\u00b2 to refer to the fragment of C2 with cardinality constraints and unary evidence.\nDefinition 2.5 (Extended C\u00b2). An extended C\u00b2 sentence is a C\u00b2 sentence possibly with cardinality constraints and unary evidence.\nCounting quantifiers, cardinality constraints, and unary evidence are useful to encode certain properties of graphs. An example is using cardinality constraints to encode the identity relation Eq as mentioned above. We present another example of using unary evidence to encode a block-structured graph in the following."}, {"title": "Axioms", "content": "While extended C2 captures numerous graph properties, it falls short in expressing certain important characteristics, such as trees, forests, and strongly connected orientations. In fact, these structures cannot be finitely axiomatized by first-order logic without grounding them out. However, in terms of WFOMC, it is possible to express these properties more succinctly using what we refer to as axioms.\nGiven a binary predicate R, an interpretation for R can be regarded as a directed graph where the domain is the vertex set and R is the edge set, which we call G(R). If a possible world w is specified, the interpretation of R in w is a specific graph, denoted by G(WR).\nAn axiom is a special constraint on the interpretation of a binary predicate R that G(R) should be a certain combinatorial structure. We often write an axiom as axiom(R) where axiom is an identifier of the axiom. For example, in what follows, we will discuss the tree axiom tree(R), which requires G(R) to be a tree, and the forest axiom forest(R), which requires G(R) to be a forest. For better illustration, we treat axioms as atomic formulas in a sentence, and use \u03a8\u039b axiom(R) to denote the sentence \u03a8 with the axiom axiom(R) conjoined. For instance, tree(E) \u2227 \u2200x (Leaf(x) \u2194 \u2203=1y E(x, y)) is a sentence that expresses the concept of trees with a leaf predicate Leaf/1."}, {"title": "Graph Polynomial", "content": "Graph polynomials are a class of polynomials that are defined on graphs and have combinatorial meaning.\nThe Tutte polynomial [Tut54] is one of the most well-known graph polynomials for undirected graphs. Consider an undirected graph G = (V, E), where V is the set of vertices and E is the set of edges. The Tutte polynomial for the graph G is a polynomial in two variables x and y defined as\n$T_G(x, y) = \\sum_{A \\subseteq E}(x \u2013 1)^{cc(A)-cc(E)} (y - 1)^{cc(A)+|A|-|V|}$,\nwhere cc(A) is the number of connected components considering only edges in A."}, {"title": "Directed Chromatic Polynomial", "content": "The idea of the chromatic polynomial of a directed graph appeared in [Sta70] though they stated it in terms of ordered sets. Given a directed graph D = (V, E) where n = |V|, let $X_D(x)$ be the number of ways of coloring each vertex in D by one of the colors {1,2,...,x} such that if there is an edge from u to v, the color of u is smaller than the color of v. We have the following lemma to state that $X_D(x)$ is a polynomial of x.\nLemma 2.1 ([Sta70]). For a directed graph D of size n, let $X^{(i)}$ be the number of surjective colorings of vertices using i colors (i.e., each color should be used at least once) such that if there is an edge from u to v, the color of u is smaller than the color of v. It holds that\n$X_D(x) = \\sum_{i=1}^x \\binom{x}{i}X_D^{(i)} = \\sum_{i=1}^n \\frac{x(x - 1) (x \u2212 i + 1)}{i!}X_D^{(i)}$,\nwhere $\\binom{x}{i}$ = 0 if i > x.\nCorollary 2.1. $X_D(x)$ is a polynomial of x of degree n.\nWe call $X_D(x)$ the strict directed chromatic polynomial of D. A variant of it is the non-strict directed chromatic polynomial $\\overline{X}_{D}(x)$ where for each positive integer x, $\\overline{X}_{D}(x)$ equals the number of colorings of the vertices in D by one of the x colors {1,2,...,x} such that if there is an edge from u to v, the color of u is smaller than or equal to the color of v. Similarly to $X_D(x)$, $\\overline{X}_{D}(x)$ is also a polynomial of x.\nCorollary 2.2. $\\overline{X}_{D}(x)$ is a polynomial of x of degree n.\nThe relation between $X_D(x)$ and $\\overline{X}_{D}(x)$ is given by the following lemma.\nLemma 2.2 ([Sta70, AB20]). Let D be a directed graph and acyc(D) be the directed acyclic graph obtained from D by condensing each cycle into a vertex. Denote the number of vertices in acyc(D) by |V(acyc(D))|. We have\n$X_D(x) = \\begin{cases} (-1)^n X_D(-x),&\\text{D is acyclic,}\\\\ 0,&\\text{otherwise,}\\end{cases}$\n$\\overline{X}_{D}(x) = (-1)^{|V(acyc(D))|} X_{acyc(D)}(-x)$."}, {"title": "Weak Connectedness Polynomial", "content": "In this section, we introduce our first polynomial, called Weak Connectedness Polynomial (WCP). The WCP is a univariate polynomial defined on a first-order logic sentence and a distinguished"}, {"title": "Definition", "content": "We define WCP as a univariate polynomial whose point evaluation at every positive integer u is equal to a weighted first-order model count of a suitable first-order logic sentence parameterized by u.\nDefinition 3.1 (Weak Connectedness Polynomial). Let \u03a8 be a first-order logic sentence possibly with cardinality constraints and unary evidence, w,$\\overline{w}$ be two weighting functions, and R be a distinguished binary relation. Then n-th WCP $f_n(u)$ of \u03a8 for the relation R is the unique univariate polynomial which satisfies:\n$f_n(u; \\Psi, w, \\overline{w}, R) = WFOMC(\\Psi_{R,u}, n, w, \\overline{w})$\nfor all positive integers u. Here, the sentence $\\Psi_{R,u}$ is defined as:\n$\\Psi_{R,u} = \\Psi \\land \\bigwedge_{i=1}^u\\forall xy (A_i(x) \\land (R(x,y) \\lor R(y,x)) \\rightarrow A_i(y))\\ \\\\\\\\\\\\\\\\\\\\land \\bigwedge_{i=2}^u \\forall x (A_i(x) \\rightarrow A_{i-1}(x))$,\nwhere $A_1,\\ldots, A_u$ are fresh unary predicates and $w(A_i) = \\overline{w}(A_i) = 1$.\nIntuitively, by introducing u new predicates $A_1,\\ldots, A_u$, we make each weakly connected component in G(R) contribute a factor of u + 1 to WFOMC. In the rest of the paper, we use cc($\\mu_R$) to denote the number of weakly connected components in G($\\mu_R$). The most important property of WCP is that it captures cc($\\mu_R$), which is stated formally in the following proposition.\nProposition 3.1. For the n-th WCP of the sentence \u03a8, the weighting functions w and $\\overline{w}$ and the binary relation R, it holds that\n$f_n(u; \\Psi, w, \\overline{w}, R) = \\sum_{\\mu \\in M_{\\Psi, n}}W(\\mu, w, \\overline{w}) \\cdot (u + 1)^{cc(\\mu_R)}$.\nProof. By $\\bigwedge_{i=2}^u \\forall x (A_i(x) \\rightarrow A_{i-1}(x))$, for each element e in the domain there must be an i' \u2208 [0, u] such that $A_1(e) = \\ldots = A_{i'}(e) = \\top$ and $A_{i'+1}(e) = \\ldots A_u(e) = \\bot$. Meanwhile, elements whose corresponding vertices form a weakly connected component in G($\\mu_R$) must have the same i' since\n$\\bigwedge_{i=1}^u\\forall xy (A_i(x) \\land (R(x,y) \\lor R(y,x)) \\rightarrow A_i(y))$.\nTherefore, for any model \u03bc of \u03a8, each weakly connected component in G($\\mu_R$) has u + 1 choices of i' regardless of the interpretations of other predicates. That is, \u03bc replicates u + 1 times in $\\Psi_{R,u}$, and the weight of each of these replicas is $W(\\mu, w, \\overline{w})$ due to $w(A_i) = \\overline{w}(A_i) = 1$. Therefore, the WFOMC of $\\Psi_{R,u}$ is $\\sum_{\\mu \\in M_{\\Psi, n}} W (\\mu, w, \\overline{w}) \\cdot (u + 1)^{cc(\\mu_R)}$, which completes the proof."}, {"title": "Fast Calculation", "content": "Proposition 3.2. The n-th WCP $f_n(u; \\Psi, w, \\overline{w}, R)$ is a univariate polynomial of degree at most n.\nProof. Since cc($\\mu_R$) \u2264 n, it follows immediately from Proposition 3.1.\nAs WCP is defined based on WFOMC, it can be also extended to first-order logic sentences with counting quantifiers, cardinality constraints, and unary evidence. The counting quantifiers and unary evidence can be naturally incorporated into the first-order logic sentences. Besides, cardinality constraints are usually treated as atomic formulas in the previous WFOMC literature [Kuz21, MBS23, vBK21], where the satisfaction relation as well as the model definition are extended accordingly.\nConsider the sentence encoding k-regular graphs:\n$\\Phi = \\forall x\\neg E(x,x) \\land \\forall x\\forall y (E(x,y) \\rightarrow E(y, x)) \\land \\forall x\\exists^{=k}yE(x,y)$.\nBy Proposition 3.1, its n-th WCP $f_n(u; \\Psi, 1, 1, E)$ is $\\sum_{g \\in G(n,k)} (u + 1)^{cc(g)}$, where 1 is the constant weighting function that always returns 1, and G(n,k) is the set of k-regular graphs with n vertices. The coefficients $[u^i] f_n(u \u2013 1; \\Psi, 1, 1, E)$ count the number of k-regular graphs with i connected components.\nBefore applying the polynomials in any context, we need to be able to compute them (or at least evaluate them at some points) efficiently. By Proposition 3.2, n + 1 evaluations are sufficient to interpolate the n-th WCP (e.g., by Lagrange Interpolation). Therefore, our task is to evaluate the WCP at u = 0,1,..., n.\nNote that by definition, evaluating the polynomial at a specific positive integer is a WFOMC query. However, such WFOMC is not readily solvable by existing algorithms (e.g., [BdBGS15, vBK21]) even for the FO2 fragment. In general, the runtime of these algorithms is exponential in the length of the sentence, while the length of the sentence $\\Psi_{R,u}$ in the WFOMC query can be as large as the domain size n, hence these algorithms would not lead to polynomial runtime in the domain size. In particular, the algorithm described in Section 2.4 is not sufficient in this case either, as there would be O($2^n$) 1-types and, consequently, an exponential time data complexity. To this end, we adapt this algorithm into a dynamic programming (DP) style algorithm that exploits the structure of $\\Psi_{R,u}$ to achieve an efficient calculation of the polynomials for FO2 sentences.\nLet \u03a8 and R be the input FO2 sentence and the binary relation that WCP is defined on. Consider the point evaluation of the WCP at u. Let $C_1(x), C_2(x),\\ldots, C_L(x)$ be the valid 1-types of \u03a8. Due to the definition of $\\Psi_{R,u}$, the valid 1-types of $\\Psi_{R,u}$ must have the form $C_i(x) \\land C^{i'}(x)$, where $C^{i'}(x)$ is defined as\n$C^{i'}(x) = A_1(x) \\land A_2(x)\\land\\ldots A_{i'}(x) \\land\\neg A_{i'+1}(x) \\land\\ldots \\land\\neg A_u(x)$\nfor i' \u2208 [u], and\n$C^{0}(x) = \\neg A_1(x)\\land\\neg A_2(x)\\land\\ldots \\land\\neg A_u(x)$.\nWe use the tuple (i,i') to index the 1-type $C_i(x) \\land C^{i'}(x)$. Then we have the following observation."}, {"title": "Applications", "content": "In this section, we show how WCP can be used"}]}