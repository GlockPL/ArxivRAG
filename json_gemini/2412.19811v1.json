{"title": "LINKs: Large Language Model Integrated Management for 6G Empowered Digital Twin Networks", "authors": ["Shufan Jiang", "Bangyan Lin", "Yue Wu", "Yuan Gao"], "abstract": "In the rapidly evolving landscape of digital twins (DT) and 6G networks, the integration of large language models (LLMs) presents a novel approach to network management. This paper explores the application of LLMs in managing 6G-empowered DT networks, with a focus on optimizing data retrieval and communication efficiency in smart city scenarios. The proposed framework leverages LLMs for intelligent DT problem analysis and radio resource management (RRM) in fully autonomous way without any manual intervention. Our proposed framework \u2014 LINKs, builds up a lazy loading strategy which can minimize transmission delay by selectively retrieving the relevant data. Based on the data retrieval plan, LLMs transform the retrieval task into an numerical optimization problem and utilizing solvers to build an optimal RRM, ensuring efficient communication across the network. Simulation results demonstrate the performance improvements in data planning and network management, highlighting the potential of LLMs to enhance the integration of DT and 6G technologies.", "sections": [{"title": "I. INTRODUCTION", "content": "The advent of DT has significantly transformed various in- dustries by enabling the creation of virtual replicas of physical entities for simulation, monitoring, and prediction purposes. Concurrently, the development of 6G networks promises un- precedented improvements in network performance, enabling high-speed, low-latency, and highly reliable communications [1]. In the context of our study, DT is utilized to model the digitization of smart cities, while 6G technology is employed to enhance communication capabilities and global scheduling among device nodes defined under the concept of IoT. The integration of DT and 6G technologies opens new avenues for optimizing network management, strengthening predictive maintenance, enhancing security, and facilitating real-time monitoring and management within smart city systems [2].\nIn recent years, the rapid development of LLM, such as GPT series [3] and LLaMA series [4], have shown remarkable capabilities in understanding real-world cases and generat- ing human-level response, making them valuable tools for a wide range of tasks and applications, from natural language processing to data analysis [5]. However, the application of LLM in network management remains relatively unexplored. Some preliminary efforts have shown the potential of LLM to assist in network configuration and optimization [6], but these approaches do not fully exploit the capabilities of LLMs for intelligent data retrieval and communication optimization within the context of DT and 6G networks.\nComplex communication scenarios such as DT lead to the explosive growth of IoT devices and the complexity of network management. The dense deployment of devices leads to severe signal interference and competition for spectrum resources, which makes resource allocation more complex.\nUnder the circumstances, LLM has demonstrated its ability to effectively deal with complex network management through its capabilities of problem processing. [7] explores the new re- ality of DT based on a transportation network model to manage the data of transportation infrastructure with LLM. However, the challenges of complex system, incomplete knowledge and so on require new strategies. [8] describes the LLMs developed for intent-based networks and explores how future LLMs can enable fully automated network intelligence and end-to-end networking.\nIn conclusion, complex network demands for more in- telligent resource allocation strategies and more automated network management urgently. With the power of LLM, the integration of LLM and network management makes sense and is the general trend.\nOur key contributions are as follows: 1) we propose a comprehensive LLM-based autonomous network management framework for DT application in 6G networks. The proposed framework consists of two stages: data-planing and modelling data retrieval as optimization problem with LLM; 2) we propose a full toolset including a cellular traffic load predictor, a parameter convertor and optimization solvers that can be used as LLM Function Calling to build efficient radio resource management (RRM) scheme automatically. In this case, we propose a novel and efficient network self-management tech- nique tailored for complex network management scenarios in DT.\nThe remainder of the paper is organized as follows: Sec- tion II presents the system model and problem formulation. In Section III, we detail our proposed solution and the im- plementation of the LLM-supported networks management framework. Section IV discusses the simulation results and performance evaluation. Finally, Section V concludes the paper."}, {"title": "II. SYSTEM MODEL AND PROBLEM FORMULATION", "content": "In this section, we introduce the system model and for- mulate the resource management problem in the context of LLM-supported 6G-empowered DT networks management.\n### A. System Model\nWe consider a 6G-enabled IoT network for DT, where IoT sensors collect data that is processed and managed by a centralized server using LLMs for intelligent management, as depicted in Fig. 1.\nWe assume that IoT sensors are distributed throughout the city. We utilize SDN technology in the 6G network to manage communications between sensors and the central node [9]. As shown in Fig. 1, the control plane of SDN can be divided into different layers. The top layer is the logic connections among sensors and routers, and the bottom layers consists of network traffic load, geography distribution of sensors, IoT application data load, which can be used to decide the routing strategy of SDN network. For the physical sensor network, the sensors will be connected to the 6G network if the traffic load is lower than a threshold \\( \\tau \\). Otherwise, it will fall back to Zigbee connections [10] (see in the right part of Fig. 1). We consider a lazy-load characteristic of the sensors' data as described in [11]. That is, the data will be stored at the sensors (edge storage) until they are actually required by the DT application and then transmitted to the central server for computation. In each cellular network, there exists conventional cellular (CC) UEs.\nIn this paper, we assume that if the IoT communications in Zigbee mode will follow the default Zigbee settings, and we mainly consider the RRM problem in 6G networks. We consider the uplink orthogonal multiple access (OMA) system in sub-5GHz band for Macro Urban communications as de- scribed in [12]. The channel model for IoT communications is expressed as:\n\\begin{equation}\ng = \\kappa d^{-\\alpha} ||h||^2 \\zeta,\n\\end{equation}\nwhere \\( \\kappa \\) is an environment-related constant, \\( \\alpha \\) is the path loss exponent, d is the distance between the transmitter and receiver, \\( h \\) is the Rayleigh fading coefficient, and \\( \\zeta \\) denotes the log-normal distributed shadowing. The signal-to-interference- plus-noise ratio (SINR) for the transmission of an IoT device \\( i \\) is:\n\\begin{equation}\n\\gamma_{i, j}=\\frac{g_{i, j} P_{i}}{\\sum_{k \\in N} g_{k, i} P_{k}+N_{0}}\n\\end{equation}\nwhere \\( g_{i,j} \\) is the transmission channel gain of IoT communi- cation, \\( p_i \\) is the transmit power of IoT device \\( i \\), \\( \\sum_{k \\in N} g_{k,i} p_k \\) is the inter-cell interference and \\( N_0 \\) is the additive white Gaussian noise (AWGN) power.\n### B. Problem Formulation\nThe objective is to minimize the largest delay of data transmission from the IoT devices to the BS while maintaining the QoS requirement of all UEs.\nLet \\( p = [p_1, p_2,...,p_N] \\) denotes the transmit power vector for the N IoT devices. \\( D_i \\) is the data size of IoT device \\( i \\) to be transmitted to the BS. The optimization problem can be formulated as follows:\n\\begin{equation}\n\\text{OPT: }\\min _{p, b} \\max_{i} \\frac{D_{i}}{\\sum b_{i j} R_{i j}}\n\\end{equation}\nsubject to:\n\\begin{equation}\n0 \\leq p_{i} \\leq P_{\\max }, \\quad \\forall i \\in\\{1,2, \\ldots, N\\},\n\\end{equation}\n\\begin{equation}\n\\gamma_{i, b_{s}} \\geq \\beta, \\quad \\forall i \\in\\{1,2, \\ldots, N\\},\n\\end{equation}\n\\begin{equation}\nb_{i j}=\\{0,1\\}\n\\end{equation}\nwhere \\( R_{ij} \\) is the achievable data rate of IoT device \\( i \\) on resource block (RB) \\( j \\) given by:\n\\begin{equation}\nR_{i j}=B \\log _{2}\\left(1+\\gamma_{i j}\\right)\n\\end{equation}\n\\( P_{\\max} \\) is the maximum transmit power of an IoT device, and \\( \\beta \\) is the SINR threshold required for reliable communication. \\( b_{ij} \\) is the indicator function that represents whether an RB is allocated to the IoT communication.\nThe constraints in (4) ensure that the transmit power of each IoT device remains within the permissible range, while the constraints in (5) ensure that the SINR for each IoT device meets the required threshold for reliable data transmission."}, {"title": "III. LLM AGENTIC WORKFLOW FOR NETWORK MANAGEMENT", "content": "In this section, we propose LINKs, an agentic workflow for addressing data retrieval and RRM. LINKs consists of two main stages. The first stage centered around LLM-based scheduling serves as data planning, where LINKs identifies all necessary data based on the user query and returns relevant results by utilizing multi-agent framework. The second stage, on the other hand, focuses on RRM and data transmission where there is an emphasis on a series of tool use and reflexion mechanism that brings about automated parameter tuning to solve the optimization problem until all constraints are satisfied. An overview of the workflow of LINKs is depicted in Fig. 2.\n### A. Data Retrieval and Radio Resource Management\nOur multi-agent framework and demonstration of prompt engineering is illustrated in Fig. 4.\nWe firstly develop `Sensor Card` and `Data API Card` to describe IoT sensors and data in a unified manner.\n`Sensor Card` is consist of three distinct fields, each spec- ifying several particular sensor types and their standardized descriptions. For example, `Temperature` sensor is defined as follows:\nIt is designed to monitor ambient temperature, utilizing degrees Celsius as the standardized unit of data representation and storage.\n`Data API Card` incorporates predefined API functions cru- cial for data-related tasks, including mapping location entities to geographic coordinates, and searching for registered sensor information that maintained in the database.\nLINKs draws inspiration from ReAct [13] and Self- Reflection [14], integrated within a multi-agent framework [15]. LINKs has a `Manager` that directly links to other agents (Planner, Reviewer, Coder and Executor). At each step, `Manager` reviews the conversation so far and chooses the next agent to advance the problem. Through communication and collaboration among these agents, LINKs can address various user queries under city contexts, such as traffic predic- tion, weather conditions, power distribution leakage analysis, tourism recommendations and etc.\nUser queries start at the `Actor` phase, where `Planner` ana- lyzes and interprets them, identifying possible geographical entities and temporal expressions. `Planner` then devises a strategy to call available APIs. Most importantly, relevant sensor types in relation to the query are carefully considered.\nDuring the `Evaluation` and `Self-Reflection` phase, `Reviewer` checks the integrity and accuracy of the whole plan, identifies potential errors and offers modification suggestions. Reflective texts are then integrated into long-term memory, guiding subsequent actions of the `Actor` in an iterative cycle.\nWhen `Coder` is called, it initially interprets the given plan and generates code for `Executor` to either run or debug. The inner loop between `Coder` and `Executor` ensures the syntactical accuracy of the code, while the outer loop between `Coder` and `Reviewer` guarantees the logical correctness. These agents collaborate to ensure all functional code runs smoothly.\nAs shown in Fig. 4, LINKs will output a JSON file containing all the data to be retrieved, and then LINKs should call `Parameter Convertor` to map the sensor information in JSON format into calculatable parameters, as shown in Fig. 3. Subsequently, `Traffic Load Predictor`, as discussed in Section III-B is called to assess whether the traffic load is within the threshold \\( \\tau \\). If the traffic load exceed \\( \\tau \\), then the problem will be simply transformed into Zigbee routing. Otherwise, opt-solver will be called to address the optimization problem defined in (3). In this paper, we utilize Python as the programming language and Gurobi and Pyomo as the solvers. By incorporating the reflexion stage, the previous solution will be evaluated against the constraints one by one, guiding LINKs to tune the parameters until all constraints are satisfied. Ultimately, this process will yield the optimization results for data retrieval.\n### B. Cellular Traffic Load Prediction\nWe utilize the large foundation model for time-series fore- casting model TimesFM proposed in [16] for cellular traffic load prediction. For TimesFM, the input patch contains 32 time points, while the output (prediction) is 128 time points. We re- scale the data set to meet this requirement (e.g., to predict 600 minutes traffic load, we calculate the traffic load for duration of 5 minutes). Two experiments are carried out in this paper: 1) zero-shot learning, which applies TimesFM to the traffic load dataset directly [16]; 2) Fine-tuning with LoRA [17]."}, {"title": "IV. SIMULATION RESULTS", "content": "In this section, we present the simulation results to evaluate the performance of our proposed agentic workflow in the context of DT applications in 6G networks. We simulate 10 CUEs, 10 Zigbee Coordinators, and adopt the Urban Macro (UMa) scenario and the channel model with frequency at 6GHz, as described in Sections 7.2\u20137.5 in [12]. We utilize the open datasets described in [18], which consists of the distri-bution of IoT devices, the historical telecommunications load, power grid usage, weather and etc, of Milan and Trentino. We reorganize and constructe the descriptions for the sensors based on the dataset's format and use the dataset to evaluate the performance of our proposed framework.\nWe create a dataset comprising a collection of queries to evaluate the performance of our solution. Among them, three involve a single field, five encompass two fields, and the remaining two encompass all three fields. The complexity of the queries ranges from low to high, as illustrated in table I. We use F1-score to evaluate the performance of the first stage of LINKS:\n\\begin{equation}\nAccuracy = \\frac{2 \\times P \\times R}{P+R}\n\\end{equation}\nwhere \\( P \\) is the precision and \\( R \\) is the recall.\nDuring the accuracy comparison experiment, Ours method is applied with the configuration where model is gpt-40, tem- perature is set to 0.1 and human-in-the-loop option is NEVER, while Naive method refers to a zero-shot approach using gpt- 40. The simulation results presented in table I indicate that our solution demonstrated strong performance in modeling smart city issues compared with just using a performative language model, achieving an average accuracy of 0.95 across a set of 10 questions of varying difficulty. Furthermore, as the difficulty increases, the accuracy improvement of our method becomes more significant, with the maximum performance gain reaching 41 percent (see Q8).\nSometimes a prolonged chat is unacceptable due to the re- source limitations and latency requirements for the centralized server in the DT networks. Therefore, in the second ablation study, the steps of the workflow is limited.\nSimple queries like Q1 and Q2 show nearly horizontal accuracy trends because they are rather straightforward. For more complex queries, accuracy generally increases with the number of steps and then gradually levels off after a certain point. As shown in Section IV, the critical point is around 15 steps. We conclude that an effective strategy is to choose gpt- 40 with a low temperature in LINKs configuration settings.\nAdditionally, it is worth noting that applying appropriate step limitations can help achieve a balance between performance and efficiency.\nWe then evaluate the performance of the proposed Traffic Load Predictor. In this paper, NRMSE is used to evaluate the\n\\begin{equation}\n\\text { NRMSE } = \\sqrt{\\frac{1}{N} \\sum_{k=1}^{N} \\frac{\\left(d_{k}-\\hat{d}_{k}\\right)^{2}}{\\bar{d}^{2}}}\n\\end{equation}\nwhere \\( \\hat{d}_{k} \\) represents the predicted value, \\( d_{k} \\) is the correspond- ing true value, \\( N \\) denotes the total number of measurement points in space and time, and \\( \\bar{d} \\) is their average value. Since NRMSE eliminates scale dependence, it is commonly used for comparison between datasets or models of different scales. The smaller the NRMSE, the more accurate the model's prediction. It is a widely used evaluation metric in current research on wireless network traffic prediction problems.\nWe compare the zero-shot TimesFM and TimesFM with LORA with some state-of-the-art traffic load prediction algo- rithms proposed in previous studies [19] (see in table III). We use the Huggingface PEFT library to perform the LoRA training, with paremeters set in peft.LoRAConfig as: rank r = 16, scaling factor lora_alpha = 16, lora_dropout = 0.1, bias = none, and targets the query and value matrices of the attention blocks. We set the batch size as 128 and the number of epochs as 10. From table III, we conclude that even with zero-shot TimesFM, it significantly outperforms the SOTA algorithms. With LoRA, we can further improve the prediction accuracy.\nFinally, the overall system performance is evaluated in Fig. 6. We conclude that the network latency of the proposed mechanism is significantly affected by \\( \\tau \\). For a specific \\( \\tau \\), with the high accuracy of the proposed LLM-based selection of data required and optimization problem solving, LINKs can achieve a near optimal solution."}, {"title": "V. CONCLUSION", "content": "We develop LINKs, an LLM-based management frame- work for DT applications in 6G NetworKs, that focuses on optimizing data retrieval and communication efficiency in smart city scenarios. During the Data Planning stage, multi-agent framework ensures the accuracy of sensor data needed. The Data Transmission Management stage models RRM as an optimization problem, using function calling to solve it autonomously in a clear pipeline, ultimately retrieving the required data with minimal latency.\nAccording to simulation results, LINKs exhibits robust per- formance in modeling smart city issues, achieving extremely high accuracy for the given dataset, showing even greater advantages in more challenging queries. We use Google's TimesFM, a pretrained time series prediction model, and further finetuned it with LoRA as the Traffic Load Predictor to achieve more accurate time prediction. Finally, in the overall system latency performance evaluation, LINKs can achieve a near-optimal solution, again showcasing its superior performance."}]}