{"title": "REAL-TIME BUS DEPARTURE PREDICTION USING NEURAL NETWORKS FOR SMART IOT PUBLIC BUS TRANSIT", "authors": ["Narges Rashvand", "Sanaz Sadat Hosseini", "Mona Azarbayjani", "Hamed Tabkhi"], "abstract": "Bus transit plays a vital role in urban public transportation but often struggles to provide accurate and reliable departure times. This leads to delays, passenger dissatisfaction, and decreased ridership, particularly in transit-dependent areas. A major challenge lies in the discrepancy between actual and scheduled bus departure times, which disrupts timetables and impacts overall operational efficiency. To address these challenges, this paper presents a neural network-based approach for real-time bus departure time prediction tailored for smart IoT public transit applications. We leverage AI-driven models to enhance the accuracy of bus schedules by preprocessing data, engineering relevant features, and implementing a fully connected neural network that utilizes historical departure data to predict departure times at subsequent stops. In our case study analyzing bus data from Boston, we observed an average deviation of nearly 4 minutes from scheduled times. However, our model, evaluated across 151 bus routes, demonstrates a significant improvement, predicting departure time deviations with an accuracy of under 80 seconds. This advancement not only improves the reliability of bus transit schedules but also plays a crucial role in enabling smart bus systems and IoT applications within public transit networks. By providing more accurate real-time predictions, our approach can facilitate the integration of IoT devices, such as smart bus stops and passenger information systems, that rely on precise data for optimal performance.", "sections": [{"title": "1 Introduction", "content": "Public bus transit in the United States has faced significant challenges over recent years, marked by a decline in ridership due to various factors. These include unreliable bus services, inadequate bus stop coverage, safety concerns, the broader availability of affordable personal vehicles, ride-hailing options, and low gas prices.These factors have led to increased traffic congestion, higher carbon emissions, and negative environmental impacts. The COVID-19 pandemic exacerbated the situation, leading to a sharp drop in transit usage, with bus ridership in many cities falling to just 62% of pre-pandemic levels by mid-2022."}, {"title": "2 Related Works", "content": "emphasize that ensemble learning methods, which combine multiple prediction algorithms, can significantly improve prediction accuracy. Their study introduces the Boruta feature selection algorithm to identify the most important input features and compares the performance of different ensemble learning methods, including bagging, boosting, and stacking. They present a data-driven approach to optimize public transit schedules, focusing on maximizing the probability of bus arrivals at timepoints within a desired on-time range, thereby improving overall on-time performance. Several studies, including and , have developed deep learning models for predicting bus arrival and travel times. propose a deep learning approach for real-time bus arrival prediction, utilizing a fully connected neural network (FCNN) model evaluated on New York bus transportation data. Their study demonstrates superior scalability and generalization capabilities compared to traditional machine learning models like support vector regression. Moreover, present a new prediction model using support vector machines (SVMs) and artificial neural networks (ANNs) to predict bus arrival times at stops with multiple routes. The study, conducted using data from Zigong, China, shows that both SVM and ANN models have high accuracy, with the ANN model performing better. Their study highlights the importance of using multiple routes passing the same stop as inputs to improve prediction accuracy."}, {"title": "3 Materials", "content": "This section outlines the key attributes of the three distinct datasets used to enhance prediction accuracy, including transit operations data, meteorological data, and bus stop data."}, {"title": "3.1 Transit Operations Data", "content": "For this study, transit operations data were collected from the MBTA Bus Departure Times 2023 dataset MBT, which records the departure events for buses in Boston throughout the year 2023. This dataset is publicly available in CSV format from the MBTA and encompasses data from various bus routes.\nEach data point in the dataset includes information formatted into 13 fields, including Service Date, Route ID, Direction ID, Half-Trip ID, Stop ID, Timepoint ID, Timepoint Order, Point Type, Standard Type, Scheduled Time, Actual Time, Scheduled Headway, and Headway, as described below:\n\u2022 Service Date refers to the date when the trip occurred.\n\u2022 Route ID serves as the unique identifier for each route.\n\u2022 Direction ID indicates whether the trip is inbound or outbound.\n\u2022 Half-Trip ID uniquely identifies the one-way trip.\n\u2022 Stop ID identifies the specific stop in the General Transit Feed Specification (GTFS) format.\n\u2022 Timepoint ID is the code assigned to a specific bus stop within a particular trip.\n\u2022 Timepoint Order indicates the sequence of this timepoint in the trip.\n\u2022 Point Type specifies whether the stop is the starting point, midpoint, or the endpoint for the trip.\n\u2022 Standard Type identifies whether the trip should be evaluated on the schedule standard or headway standard.\n\u2022 Scheduled Time denotes the scheduled departure time of the trip.\n\u2022 Actual Time indicates the time when the trip actually departed from the timepoint.\n\u2022 Scheduled Headway represents the scheduled time gap between this trip and the previous trip at the stop.\n\u2022 Headway represents the actual time gap between this trip and the previous trip at the stop.\nThis dataset was selected for its robust characteristics, including a large number of data points, which is ideal for training deep learning models that require extensive data, as well as comprehensive records of actual and scheduled departure times for numerous bus routes. Therefore, we concentrate on the first three months of 2023. This period provides a sufficient volume of data for model evaluation, balancing both training capabilities and resource limitations, while also capturing a diverse range of scenarios within those months. Looking ahead, since the dataset spans the entire year, future research could explore predicting departure times by incorporating seasonal features and variations. The characteristics of the original dataset before preprocessing are detailed in Table 1. It includes approximately 6 million data points, tracking a total of 940,908 trips. The dataset covers 151 routes and 1111 individual bus stops."}, {"title": "3.2 Meteorological Data", "content": "Understanding weather patterns can be important for accurate model predictions. Adverse weather conditions, such as heavy rain or snow, can impact traffic flow and passenger behavior, leading to delays. To account for these factors, we obtained the meteorological data from the Visual Crossing API which offers historical weather information for cities over specified periods. For our analysis, we collected weather data for these three months through this API. These data include details such as temperature, humidity, wind speed, and various weather conditions."}, {"title": "3.3 Bus Stop Data", "content": "We utilize the MBTA Bus Routes and Stops dataset, which provides detailed information about MBTA bus stops. Our primary objective is to extract the geographical locations of bus stops from this dataset, as the MBTA Bus Departure Times 2023 dataset does not contain this information. After the preprocessing discussed in the Methodology Section, we use these geographical details as input for our model. As shown in Figure 4, this dataset includes the geographical locations of 1111 bus stops from the MBTA Bus Departure Times 2023 dataset and provides essential details such as the geographical coordinates (X and Y) of each bus stop, stop name, and unique stop IDs compatible with GTFS standards."}, {"title": "4 Methodology", "content": "The purpose of this section is to provide an overview of the key steps of dataset preprocessing and feature engineering, which are crucial for improving the accuracy of our prediction model. Before we explore the details of data cleaning and preprocessing, it is important to highlight some key considerations and the relevance of our work to the field of IoT. Our research investigates the connection between IoT technologies and transportation systems by utilizing data from IoT devices like GPS and sensors on buses. While we do not directly implement any IoT-based technologies, we focus on real-time data collection and employ detailed data cleaning and preprocessing techniques to ensure data quality and integrity, which are crucial for accurate predictions. By integrating diverse features such as time, distance, weather, and traffic, our approach demonstrates how IoT enhances the modeling process through comprehensive data integration. Additionally, we aim to develop a compact, fully connected neural network that balances strong predictive capabilities with computational efficiency, making it suitable for IoT-based transportation applications. These steps, shown in Figure 3, include cleaning the data, detecting outliers, and creating features that capture important patterns in the data. The following subsections provide a detailed overview of these processes."}, {"title": "4.1 Dataset Analyzing and Preprocessing", "content": "The analysis starts with initial data cleaning and preprocessing so we can conduct statistical analysis and extract meaningful insights from the dataset. While the original dataset consists of 6,868,730 data points, not all of them are considered valid observations. After filtering out invalid values, the dataset is refined to 6,361,455 data samples.\nAs noted earlier, the dataset includes 151 routes. Figure 5 illustrates how trips are distributed across these routes, ranging from a peak of 290,545 trips to a minimum of 568 trips over the three-month period.\nNext, the statistical analysis examines the variations between scheduled and actual bus departure times, known as departure time deviation. To quantify this, a variable named \"current stop departure time deviation\" is introduced,"}, {"title": "4.2 Feature Extraction and Data Preparation for Model Implementation", "content": "After cleaning the dataset, relevant features are generated, which will be detailed in this section. In general, each bus route is segmented into multiple bus stops. This segmentation is carried out by utilizing the \"Half-Trip ID\" field to distinguish individual trips. Upon grouping the trips by \"Half-Trip ID\", we observe that the dataset includes trips ranging in length from a minimum of 1 stop to a maximum of 14 stops in length. To focus on predicting departure time based on the previous stop, trips consisting of only one stop are excluded from the dataset, while retaining all other data points. Consequently, the dataset now comprises trips with 2 to 14 stops along their routes. Furthermore, to prepare the dataset for algorithm development, we use the \"Stop ID\" and \"Timepoint Order\" fields to establish the sequential order of each stop along the trip route. We then segment each trip into smaller segments between every pair of bus stops, from the start point (SP) to the endpoint (EP), as illustrated in Figure 7.\nAfter preparing the dataset for model implementation by grouping trips and establishing the sequential order of stops, the next step involves feature engineering. The input features for the model are categorized into four groups, time-related features, distance-related features, weather-related features, and traffic-related features, with the output feature being the next stop departure time deviation, as illustrated in Figure 3 and explained below.\n\u2022 Time-related features:"}, {"title": "5 Experimental Results and Discussion", "content": "Artificial neural networks (ANNs) are used in bus scheduling to predict trip times and arrival/departure times due to their effectiveness in capturing non-linear relationships in complex problems.\nIn this study, we utilize FCNNs to predict the next stop bus departure time deviation. FCNNs excel in handling high-dimensional feature spaces through the use of hidden layers and non-linear activation functions. As depicted in Figure 9, the model incorporates various input features, incorporating information from the current stop and other relevant features, including those derived from the feature extraction step. Specifically, each data point includes 173 input features and the output layer comprises a single neuron responsible for predicting the departure time deviation at the next stop. Throughout our experiments, the configuration of the input and output layers remained consistent.\nTo ensure effective handling of input features with diverse ranges, preprocessing involves scaling the data. For instance, features like rush hour status are binary, while distance can vary across hundreds of meters. Without scaling, the model prioritizes features with large numerical ranges. Therefore, we apply Min-Max scaling to normalize all input features"}, {"title": "5.2 Metrics", "content": "In this study, we use the Root Mean Square Error (RMSE) to measure the difference between predicted and actual departure time deviation in seconds. The RMSE is commonly used in the analysis of bus arrival/departure times. Furthermore, the RMSE is expressed in the same unit as the predicted values (seconds), facilitating a clear interpretation of error in terms of time. The RMSE is calculated using the following equation, where $d_{act}(n, i + 1)$ represents the actual departure time deviation for the next stop of bus n, $d_{pred}(n, i + 1)$ denotes the predicted departure time deviation of the next stop, and m is the sample size for prediction.\n$\\text{RMSE} = \\sqrt{\\frac{1}{m} \\sum_{i=1}^{m} (d_{\\text{act}}(n, i + 1) - d_{\\text{pred}}(n, i + 1))^2}$"}, {"title": "5.3 Model Performance", "content": "For evaluating the performance of our proposed model, we utilized the preprocessed MBTA 2023 dataset. This dataset was randomly divided, allocating 70% for training, 20% for validation, and 10% for testing.\nOur experimental setup was based on the PyTorch framework, and we employed the MSE loss function. Furthermore, all experiments were performed on a GPU server equipped with 4 Tesla V100 GPUs with 32 GB memory. The Adam optimizer was used for all experiments. Each model underwent training for 10 epochs, with a learning rate of 0.01.\nIn our experimental approach, we extensively explored the FCNN architecture by systematically varying the number of hidden layers from one to five and examined their impact on model performance. We evaluated how different configurations influenced model performance and model complexity. We adjusted the number of neurons in descending order, with the first layer having the highest number of neurons and the final layer having the fewest. This adjustment was aimed at finding an optimal balance between model complexity, generalization, and accuracy, ensuring that the FCNN-based model effectively captures complex data patterns while avoiding overfitting and unnecessary parameters."}, {"title": "6 Conclusions", "content": "In this study, we developed an AI-driven prediction model designed for an intelligent bus transit system to enhance the experience of both passengers and service providers. Our main goal was to improve the overall efficiency and reduce waiting times for passengers. We utilized three key datasets, the Boston MBTA Bus Departure Times 2023 dataset, the Boston weather dataset, and the MBTA Bus Routes and Stops dataset, to extract and engineer relevant features. This study highlights the adaptability of the FCNN architecture in capturing temporal patterns through effective data handling and analysis of previous bus stop data. We conducted a thorough examination of FCNN performance across various configurations, varying in the number of hidden layers and neurons. In our case study analyzing bus data from Boston, we found an average deviation of nearly 4 minutes from scheduled times. However, our model, evaluated across 151 bus routes, achieved a significant improvement, predicting departure time deviation with an accuracy of within 80 seconds. Our findings underline the importance of balancing model size and performance, crucial for deployment in resource-constrained environments like IoT devices. The comparative analysis demonstrates the model's potential in achieving both high accuracy and parameter efficiency. Moving forward, there are several numerous paths for further exploration in this field. First, investigating the incorporation of additional factors such as passenger flow could offer a more comprehensive insight into the variables impacting bus departure times. Additionally, since the dataset covers an entire year, future research could explore more complex architectures and include seasonal features in the feature engineering process. Furthermore, investigating advanced architectures, particularly transformers and autoencoders, presents a valuable approach to improve our model's performance. Transformers use self-attention to effectively capture long-range dependencies within the data, while autoencoders excel at learning compact representations and minimizing"}]}