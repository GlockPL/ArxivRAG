{"title": "GraphRPM: Risk Pattern Mining on Industrial Large Attributed Graphs", "authors": ["Sheng Tian", "Xintan Zeng", "Yifei Hu", "Baokun Wang", "Yongchao Liu", "Yue Jin", "Changhua Meng", "Chuntao Hong", "Tianyi Zhang", "Weiqiang Wang"], "abstract": "Graph-based patterns are extensively employed and favored by practitioners within industrial companies due to their capacity to represent the behavioral attributes and topological relationships among users, thereby offering enhanced interpretability in comparison to black-box models commonly utilized for classification and recognition tasks. For instance, within the scenario of transaction risk management, a graph pattern that is characteristic of a particular risk category can be readily employed to discern transactions fraught with risk, delineate networks of criminal activity, or investigate the methodologies employed by fraudsters. Nonetheless, graph data in industrial settings is often characterized by its massive scale, encompassing data sets with millions or even billions of nodes, making the manual extraction of graph patterns not only labor-intensive but also necessitating specialized knowledge in particular domains of risk. Moreover, existing methodologies for mining graph patterns encounter significant obstacles when tasked with analyzing large-scale attributed graphs. In this work, we introduce GraphRPM, an industry-purpose parallel and distributed risk pattern mining framework on large attributed graphs. The framework incorporates a novel edge-involved graph isomorphism network (EGIN) alongside optimized operations for parallel graph computation, which collectively contribute to a considerable reduction in computational complexity and resource expenditure. Moreover, the intelligent filtration of efficacious risky graph patterns is facilitated by the proposed evaluation metrics. Comprehensive experimental evaluations conducted on real-world datasets of varying sizes substantiate the capability of GraphRPM to adeptly address the challenges inherent in mining patterns from large-scale industrial attributed graphs, thereby underscoring its substantial value for industrial deployment.", "sections": [{"title": "1 Introduction", "content": "Graph pattern mining constitutes a pivotal task within the ambit of mining and machine learning, with profound applications extending to various industrial and business domains such as social network analysis [13], financial fraud detection [2,10], and computational bioinformatics [21]. Taking the financial transaction scenario as an example, fraudsters would try to cheat normal users and make illegal money transfers. The distinctive behavioral patterns of these fraudsters, termed 'risk patterns', are critical for the detection of fraudulent activity and the prevention of financial fraud, as exemplified in Fig. 1. Compared to black-box neural network models used for identifying fraudsters [12], industry experts express a preference for summarizing these risk patterns, as they provide more granular insight into the conduct of fraudulent entities, thereby facilitating a more explainable approach to fraud detection. Nonetheless, the manual delineation or construction of these patterns by experts is a labor-intensive process that demands considerable domain-specific knowledge. Consequently, the automation of risk graph pattern mining is an avenue warranting exploration. GRAMI [3] presents a method for frequent subgraph mining by leveraging a novel canonical labeling technique to efficiently discover patterns within a single large graph. Bliss [8] introduces an optimized tool for canonical labeling, specifically designed to handle the challenges posed by large and sparse graph structures, enhancing the performance of graph mining tasks. T-FSM [20] outlines a task-based framework that enables massively parallel processing for frequent subgraph pattern mining, addressing the scalability issues associated with"}, {"title": "2 Problem Formulation", "content": "The large transaction-attributed graph can be represented as $G = (V,E)$, where $V = \\{V_1, V_2, ...v_V\\}$ is the set of nodes indicating the user, and $E$ denotes the set of transaction events. Typically, let $e_{ij} \\in E$ be an interaction or a link that happens from source node $v_i$ to target node $v_j$, associated with edge feature $f_e$ and node feature $f_u$, respectively. $f_u$ (and $f_e$) is defined as a feature vector $x_v \\in R^{d_v}$ (and $x_e \\in R^{d_e}$), where $d_u$ (and $d_e$) is the dimension size. Note that $f_u$ and $f_e$ often have different dimension sizes in practice.\nThe risk graph pattern is defined as $P = (g, u)$, consisting of a subgraph $g = (V_g, E_g)$ and the starting node u of the pattern. For any node $v_i \\in V$, the node $v_i$ hits the pattern $P$ if $f_{v_i} = f_u$ and $g \\in G_{v_i}$, where $G_{v_i}$ is the k-hop subgraphs of the node $v_i$. For a given node $v_i$, its k-hop subgraph compirses all of the nodes that can be reached from node $v_i$ by traversing at most k edges, including the starting node $v_i$ by default unless otherwise specified, and all of the edges that connect the nodes within this defined k-hop neighborhood.\nWe employ the support metric, which is traditionally used in frequent pattern mining [19,5,16,15] to denote the prevalence of particular patterns within a dataset. Different from the objectives of frequent pattern mining, our research is focused on the extraction of risk patterns characterized by high support in anomalous instances juxtaposed with low support in normal instances. The goal of our research is to leverage these discriminative patterns to differentiate between normal and abnormal instances within extensive attributed graphs."}, {"title": "3 METHODS", "content": "Fig. 2 illustrates the overall workflow of GraphRPM, including potential subgraph enumeration, two-stage pattern mining, and pattern risk assessment, where"}, {"title": "3.1 Potential Subgraph Enumeration", "content": "To obtain the risk graph pattern, we first need to enumerate the potential subgraph of patterns around each starting node. However, industrial attributed graphs tend to be too large to be processed directly in memory, so we pre-extract the k-hop ego-graph of each node and then enumerate the potential subgraphs within the ego-graph. While the node magnitude is still large, to further improve efficiency, GraphRPM performs enumeration utilizing our distributed in-memory graph intelligent computing system [11], which can handle both graph computing and graph learning tasks and accommodate multiple programming paradigms including the widely recognized vertex-centric programming model [4,9,22].\nEach worker holds a partition of the input data and runs on multiple threads. As shown in Fig. 3, we illustrate the process of distributing data using a simple graph partitioning algorithm. Initially, all nodes are evenly distributed across the workers, referred to as master nodes. For each edge, our method assigns it to the partition where its source node is a master node. If the target node of these edges does not reside within the same partition, they are created as mirror nodes (represented by grey dots in the figure) within that partition, functioning as replicas of their corresponding master nodes.\nUpon completion of the graph partitioning, the system proceeds to execute the subgraph enumeration algorithm. We use a breadth-first-search (BFS)"}, {"title": "3.2 Two-staged Pattern Mining", "content": "Pattern Representation Mapping After obtaining potential subgraphs around each starting node, we need to perform an isomorphism test on a subset of all the structures to obtain the final candidate graph pattern. Nevertheless, exact"}, {"title": "hk)", "content": "h_v^{(k)} = MLP^{(k)} ((1 + \\epsilon^{(k)})h_v^{(k-1)} + \\sum_{v_j\\in N(v_i)}MLP(h_{v_j}^{(k-1)}||f_{e_{ij}}^{(k-1)}))\n(1)\nwhere $h_v^{(k)}$ is the intermediate representations of node $v_i$ in the k-th layer and $v_j \\in N(v_i)$ denotes the set of first-order neighboring nodes of the node $v_i$. MLP() denotes the multi-layer perceptron network, '||' is the concatenation"}, {"title": "fk", "content": "f_{e_{ij}}^k = MLP^{(k)} (f_{e_{ij}}^{k-1}||h_i^{(k-1)} + h_j^{(k-1)})\n(2)\nSecondly, we can obtain the subgraph embedding $z_g$ of the subgraph $g$ with the K-th aggregation layer as follows.\nz_g = READOUT(h_v^K|v_i \\in V_g)\n(3)\nSimply using sum as READOUT is not able to distinguish the differences of high-dimensional attributed nodes, as shown in Fig. 6. In this regard, we also introduce the aggregation operations of max, min, and squeeze, where squeeze refers to squeezing the features of multi-dimensional nodes into one-dimensional feature vector by employing a summation function. Finally, the subgraph embeddings produced by each of the four operators are concatenated to construct a composite representation for the current subgraph pattern.\nThe final merging of subgraph representations yields the representations of all candidate graph patterns that exist, and the set of nodes contained in each graph pattern can be computed by comparing whether the graph pattern's representation is the same as the representation of a subgraph under the node.\nThe parameters of the EGIN network do not necessarily need training and can be initialized by ensuring the linear transformations in MLPs meet the injection property. This way, we can get identical representations for the same graph patterns and roughly get different representations for different graph patterns. Through the method delineated above, we can obtain a collection of subgraph representations corresponding to all potential graph patterns, wherein representations of identical subgraphs should be precisely equivalent. Consequently, by comparing the representation of a graph pattern with the representations of subgraphs beneath individual nodes, the node set that each graph pattern encompasses can be computed. In our proposed methodology, it is essential for the parameters of the EGIN to exhibit a one-to-one (injective) mapping property. This property guarantees that identical graph patterns are mapped to congruent representations, whereas disparate graph patterns are mapped to distinguishable representations.\nGrounded in the principles of the universal approximation theorem [7,6], the utilization of an MLP within the framework of the EGIN is employed to ensure the injective mapping of graph representations. The EGIN model constitutes an augmentation of the GIN model, which has been previously established as possessing an equivalent level of discriminative capacity as the Weissfeiler-Lehman (WL) test for graph isomorphism with respect to homogeneous graphs. Given that EGIN integrates edge features into the original GIN structure while preserving the MLP's injective nature, it is posited that EGIN retains the discriminative prowess of its predecessor, thereby enabling the identification of distinctive graph patterns. Refer to [18] for a similar analysis."}, {"title": "3.3 Pattern Risk Assessment", "content": "In the context of financial security, it is imperative for risk management systems to effectively differentiate between normal and anomalous entities within the trading network. To accomplish this, the system should identify risk graph patterns that are prevalent among anomalous nodes (indicative of potential risk) but are notably absent or rare among normal nodes. This requirement deviates from the aims of traditional frequent graph pattern mining, which generally seeks to find patterns that occur commonly across the entire graph without particular focus on anomaly detection. To quantify the efficacy of such discriminative patterns, we introduce a novel evaluation metric termed the Pattern Risk Score ($R_s$), specifically tailored for financial risk analysis tasks. This metric aids in the assessment of a pattern's reliability and relevance in identifying financial risks.\nFor a given pattern $P_i$, suppose there exists a set of nodes with associated binary labels $y_{v_i} \\in Y$ in the historical data, where each label signifies the node's status as either normal ($y_{v_i} = 0$) or abnormal ($y_{v_i} = 1$). We first calculate the support counts $s_{y=1}^{P_i}$ and $s_{y=0}^{P_i}$, representing the support of $P_i$ among abnormal and normal nodes, respectively."}, {"title": "pre(Pi)", "content": "pre(P_i) = \\frac{s_{y=1}^{P_i}}{s_{y=1}^{P_i} + s_{y=0}^{P_i}}\n(4)\nThe recall of the pattern (re($P_i$)) is measured as the proportion of abnormal nodes that support the pattern relative to the total number of abnormal nodes, expressed as:\nre(P_i) = \\frac{s_{y=1}^{P_i}}{\\Sigma_{i=1}^{v}y_i}\n(5)\nTo synthesize precision and recall, reflecting a pattern's overall effectiveness, we calculate the Pattern Risk Score $R_s(P_i)$ analogously to the F1 score:\nR_s(P_i) = \\frac{2 \\times pre(P_i) \\times re(P_i)}{pre(P_i) + re(P_i)}\n(6)\nwhere $R_s(P_i)$ balances the trade-off between precision and recall. A higher $R_s$ signifies a more reliable pattern in distinguishing financial risks. The pattern risk score quantifies the reliability of graph patterns as indicators of financial risk. By prioritizing graph patterns with high $R_s$ scores, financial institutions can focus on scrutinizing transactions or nodes that are most likely associated with fraudulent activities, ensuring proactive risk mitigation and regulatory compliance. It essentially translates the abstract concept of network anomalies into actionable intelligence that can safeguard financial operations."}, {"title": "4 Experiments", "content": "In this paper, we validate the effectiveness of our proposed methodology by conducting experiments on three industrial datasets of varying magnitudes. Specifically, the datasets consist of a financial transaction network derived from the industrial platform, wherein the associated labels demarcate the users as either legitimate or fraudulent. For all evaluated tasks and datasets, the graph data were organized in accordance with the chronological sequence of transactions."}, {"title": "5 Deployment", "content": "In this section, we will elucidate the deployment process of GraphRPM within the context of financial transaction scenarios. As illustrated in Fig. 8, the deployment is segmented into three distinct modules: Risk Pattern Mining based on historical data, Online Transaction Risk Control based on identified risk patterns, and Business Case Analysis also based on identified risk patterns.\nRisk Pattern Mining Module This module operates by employing the GraphRPM method to mine patterns from historical transaction data. Subsequent to pattern risk assessment, the top risk patterns are selected for utilization in downstream tasks. These patterns are derived through an analysis of historical data, focusing on identifying key structures that have been associated with risky behavior in past transactions. Furthermore, considering the timeliness required for risk control, we update these patterns on a daily basis.\nOnline Transaction Risk Control Module The selected risk patterns can be applied to online risk control. We encode these patterns into a domain-specific language (DSL) and deploy them to an industrial risk control platform. For example, Fig. 9 demonstrates a snippet of DSL that describes a triangular structure. Every ongoing transaction is then scrutinized in real-time against these risk patterns. If a current transaction fully matches a risk pattern within"}, {"title": "6 Conclusion", "content": "Pattern mining on large-scale attributed graphs is always a major challenge in the field of data mining and machine learning. In this study, we introduce GraphRPM, an innovative framework that integrates a subgraph isomorphism algorithm powered by graph neural networks with an architecture optimized for computational efficiency. GraphRPM is designed to find and evaluate risk graph patterns automatically on large attributed graphs, helping to detect clusters of risky behaviors while reducing manual inspection costs, and has been deployed in production for more than one year in a diversity of business scenarios. Through comprehensive experimentation on three diverse datasets of varying sizes, we establish that GraphRPM efficaciously addresses the challenges of pattern mining in large-scale attributed graphs prevalent in industrial contexts, underscoring its substantial value for industrial applications."}]}