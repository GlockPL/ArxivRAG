{"title": "Abstract Dialectical Frameworks are Boolean Networks (full version)", "authors": ["Jesse Heyninck", "Matthias Knorr", "Jo\u00e3o Leite"], "abstract": "Abstract dialectical frameworks are a unifying model of formal argumentation, where argumentative relations between arguments are represented by assigning acceptance conditions to atomic arguments. Their generality allow them to cover a number of different approaches with varying forms of representing the argumentation structure. Boolean regulatory networks are used to model the dynamics of complex biological processes, taking into account the interactions of biological compounds, such as proteins or genes. These models have proven highly useful for comprehending such biological processes, allowing to reproduce known behaviour and testing new hypotheses and predictions in silico, for example in the context of new medical treatments. While both these approaches stem from entirely different communities, it turns out that there are striking similarities in their appearence. In this paper, we study the relation between these two formalisms revealing their communalities as well as their differences, and introducing a correspondence that allows to establish novel results for the individual formalisms.", "sections": [{"title": "1 Introduction", "content": "Formal argumentation is one of the major approaches to knowledge representation and reasoning. In the seminal paper [6], Dung introduced abstract argumentation frameworks, conceived as directed graphs where nodes represent arguments and edges between nodes represent attacks. Their meaning is given by so-called argumentation semantics that determine which sets of arguments can be reasonably upheld together given such an argumentation graph. Various authors have since remarked that other relations between arguments are worth consideration, such as, for example, a dual support relation as in bipolar argumentation frameworks [5]. The last decades witnessed a proliferation"}, {"title": "2 Abstract Dialectical Frameworks", "content": "We recall ADFs following loosely the notation from [3]. An ADF D is a tuple D = (At, L,C) where At is a finite set of atoms, representing arguments or statements, LC At \u00d7 At is a set of links, representing dependencies or attacks from one argument against another, and C = {Cs}s\u2208At is a set of total functions (also called acceptance functions) Cs: 2pard(s) \u2192 {1,0} for each s \u2208 At with parp(s) = {s' \u2208 At | (s', s) \u2208 L} and truth values true (1) and false (0). An acceptance function C's defines the cases when the statement s can be accepted (is true), depending on the acceptance status of its parents in D. We often identify an acceptance function Cs by its equivalent acceptance condition which models the acceptable cases as a propositional formula over At and the usual Boolean connectives A (and), \u2228 (or), \u00ac (negation) and \u2192 (material implication). Also, the set of links of D is completely determined by C's and sometimes left implicit.\nExample 3. In Ex. 1, we find an ADF D = ({f,p,t,v},L,C) with Land C as in Fig 1.a). Here, we omit reflexive arrows (e.g. (p,p)) to avoid clutter. An"}, {"title": "3 Boolean Networks", "content": "In this section, we recall Boolean networks as known from the literature (see e.g., [15]), first looking at the syntax and then focussing on their semantics. During this presentation, we will establish sometimes surprising connections to ADFs as well as notable differences between these two formalisms."}, {"title": "3.1 Syntax", "content": "Boolean networks utilize a regulatory graph to represent the compounds in the biological process and the principal interactions between them.\nDefinition 2. A regulatory graph is a directed graph G = (V, E), where V = {1, ..., Un} is the set of vertices (nodes) representing the regulatory compounds, and E = {(u, v, s) : u, v \u2208 V, s \u2208 {+,\u2212}} is the set of signed edges representing the interactions between compounds.\nAn edge with s = + is called positive interaction (or activation), representing that u activates v, while an edge with s= is called negative interaction (or inhibition), representing that u inhibits v. A node with no incoming edges is called input node, representing external stimuli, whose values do not change.\nExample 5. Fig. 2 shows regulatory graph G = (V, E) with V = {V1, V2, V3, 4} and E = {(01, 02, \u2212), (v1, v3, +), (v2, v1, +), (v2, v3, +), (v4, v2, +), (v4, 03, \u2212)}.\nBoolean logical models then add regulatory functions for each compound to specify how different compounds that affect the same node interact with each other for that node's activation.\nDefinition 3. A Boolean logical model M of a regulatory network is defined as a tuple (V, F) where V = {U1, U2, ..., Un} is the set of variables representing"}, {"title": "3.2 Dynamics", "content": "BNs allow us to capture the changes over time in a biological process based on the interactions of the various compounds involved, which should correctly represent the dynamics observable in the real system. We will see that the study of dynamics in BNs correspond to semantics of ADFs. We start with network states that are used to represent the (current) activations of a network's compounds.\nDefinition 5. The network state of a BN with n compounds is a vector S = [V1, V2, ...Vn] where vi is the value of the variable representing the i-th compound of the network.\nClearly, for Boolean logical models, the number of different states in a network is given by 2\". E.g., if nodes 1 and 3 in Ex. 6 are active and the other two are not, then the state will be represented by 1010. Similar representations are used for interpretations of ADFs (by ordering the atoms), and it is clear that the states in BNs correspond to possible world of ADFs.\nThe update of the i-th compound vi of a network from one discrete time point t to the next is then defined as vi(t+1) = fi(S(t)) for state S(t) at time t, which clearly exactly corresponds to the evaluation of an acceptance condition in ADFs. We can then use state transition graphs [17] to describe how networks, and thus the modelled biological systems, evolve over time.\""}, {"title": "3.3 Subclasses of Boolean Networks", "content": "An interesting observation is that both the literature on ADFs and the literature on Boolean Networks has identified certain subclasses of frameworks for which the computational complexity of computational tasks decreases. In fact, both strands of literature have identified the same subclass! In the literature on ADFs, these frameworks are called bipolar ADFs, whereas in the literature on Boolean networks, they are called sign-definite.\nDefinition 10. A Boolean function f : {0,1} \u2192 {0,1} is increasing monotone if for every v1, V2 \u2208 {0,1}n, V1 \u2264 v2 implies f(v1) \u2264 f(v2), and it is decreasing monotone if for every v1, v2 \u2208 {0,1}\", 01 \u2264 v2 implies f(v1) \u2265 f(v2). \u0410 Boolean function is sign-definite if it is increasing or decreasing monotone. A Boolean logical model (V, F) is sign-definite if every Boolean function in Fis sign-definite.\nIt is well-known that a Boolean function is sign-definite if and only if it can be represented by a formula in disjunctive normal form in which all occurrences of a given literal are either negated or non-negated [1].\nWe now recall bipolar ADFs [25].\nDefinition 11. Given a Boolean function f : {0,1} \u2192 {0,1}:\n\u2022 i \u2264 n is supporting iff f (v1, ..., Vi, ..., Un) = 1 implies f (v1, ..., vi, ..., Un) = 1 where vi = 0 and v = 1,\n\u2022 i < n is attacking iff f (v1, ..., Vi, . . ., Un) = 0 implies f (v1,..., Vi, ..., Un) = 0 where vi = 0 and v = 1.\nAn ADF is bipolar iff for every a \u2208 At, every b \u2208 parp(a) is supporting, attack-ing or both in Ca.\nIt was shown that an ADF is bipolar iff every acceptance formula is syntacti-cally bipolar, i.e., no atoms occurs both positively and negatively [26]. In more detail, given a formula 4, the polarity of an atom a in $ is determined by the number of negations on the path from the root of the formula tree to the atom, and is positive if this number is even, and negative otherwise. For example, in \u00ac(a^\u00acb), a occurs negatively and b occurs positively. A propositional formula is syntactically bipolar if no atom a occurs both positively and negatively in .\nCorollary 1. An ADF D = (At, L,C) is bipolar iff, for every s \u2208 At, Cs is syntactically bipolar.\nThis allows us to show that these two special cases coincide.\nCorollary 2. A Boolean Model is sign-definite iff the corresponding ADF is bipolar.\""}, {"title": "4 Insights from Boolean Networks", "content": "Based on the established correspondence, we provide examples of insights from the literature on Boolean Networks that are directly relevant for ADFs."}, {"title": "4.1 Complexity of Counting", "content": "For many applications in KR, counting the number of solutions is important. For many formalisms, including abstract argumentation [8], the complexity of counting has been studied in depth. For ADFs, such as study is missing. Thanks to existing results from the literature on BNs we can start filling in this gap:\nProposition 6 ([4]). Deciding whether the maximal number of stable states in a Boolean logical model M is larger or equal than k is: NP-complete for k > 2; NEXPTIME-complete for an arbitrary but fixed k; NP#P-complete for an arbitrary but fixed k if the maximum in-degree of Mis bounded by a constant d \u2265 2.\nDeciding whether the minimal number of stable states in a Boolean logical model Mis smaller or equal than k is: NEXPTIME-complete for an arbitrary but fixed k; NPNP-complete for k > 2, if the maximum in-degree of M is bounded by a constant d > 2; NP#P -complete for an arbitrary but fixed k if the maximum in-degree of M is bounded by a constant d \u2265 2.\nThis gives rise to the following corollary:\nCorollary 3. Deciding whether the maximal number of two-valued models in an ADF D is larger or equal than k is: NP-complete for k \u2265 2; NEXPTIME-complete for an arbitrary but fixed k; NP#P-complete for an arbitrary but fixed k if the maximum in-degree of D is bounded by a constant d \u2265 2.\nDeciding whether the minimal number of two-valued models in an ADF D is smaller or equal than k is: NEXPTIME-complete for an arbitrary but fixed k; NPNP-complete for k > 2, if the maximum in-degree of M is bounded by a constant d > 2; NP#P-complete for an arbitrary but fixed k if the maximum in-degree of D is bounded by a constant d\u2265 2."}, {"title": "4.2 Existence of Fixpoints", "content": "There is a large line of work in the literature on Boolean networks that studies structural properties of Boolean networks that affect the existence (and the number) of fixed points. Such work immediately translates to the existence of two-valued models in ADFs. E.g., several works [22, 19, 20, 2] provide a theoretical analysis of the existence of fixpoints in sign-definite BN in relation to structural parameters of the corresponding Boolean networks. We follow Aracena [2] in defining a path in a BN as positive if the number of negative arcs is even, and negative otherwise.\nThe first few results study the connection between cycles, their parity, and the existence and number of fixpoints:\nProposition 7. If a sign-definite BN has: no cycles, then it has a unique stable state [22]; no positive cycles, then it has at most one stable state [19]; no negative cycles, then it has at least one stable state [20]. If a BN N has a strongly connected component H such that all cycles of H are negative and for each arc (vi,vj) in the N, vj \u2208 H then vi \u2208 H, then N has no stable states [2]."}, {"title": "5 Conclusion", "content": "We have reviewed the main syntactic similarities between ADFs and BNs, and demonstrated that these extend in large parts to the semantical level. Furthermore, we have shown the fruitfulness of this connection by deriving results on complexity and existence of semantics for ADFs based on existing results for BNs. We hope that our results will lead to further cross-contamination between these two fields, such as the use of implementations or benchmarks."}, {"title": "A Proofs for Section 3 (Boolean Networks)", "content": "Proposition 1. Let GSTG be the synchronous state transition graph of the Boolean Model M with regulatory graph G, and DM,G the corresponding ADF. Then, w is a stable state of GSTG iff w is a two-valued model of DM,G.\nProof. This follows from the following list of equivalences:\nwis a stable state for the synchronous transition graph of M = (V, F)\nsi = fi(w) for every si \u2208 At\nw(s) = w(Cs) for every s \u2208 At\nw is a two-valued model of D.\nProposition 2. Let m be a subspace m, and vm : V \u2192 {0,1,U} defined by\nvm(v) = \\{\n  m(v) &\\text{if } v \u2208 Dm\\\\\n  U &\\text{otherwise}.\n\\}\n(1)\nIt holds that [vm]\u00b2 = S[m].\nProof. It suffices to observe that vm \u2264i wiff w(v) = m(v) for every v \u2208 Dm.\nProposition 3. Let M be a Boolean Model with regulatory graph G, and DM,G the corresponding ADF: m is a trap space of Miff vm is admissible in DM,G.\nProof. We first need some preliminaries due to Klarner et al. [15]. Given a boolean function f, f[m] is the expression obtained by stituting every occurence of some v \u2208 Dm in f by m(v). For example, given m = 0*1 and f = (ab)^c, f[m] = (0 / 1)^c. We let Um := {vi \u2208 V | fi[m] is constant} and define F[m]: V\u2192{0,1, U} as:\nF[m](vi) = \\{\n  fi[m] &\\text{if } vi \u2208 Um\\\\\n  * &\\text{otherwise}\n\\}\n(2)\nThe core of the proof depends on the following result:\nProposition 10 ([15], Theorem 1). A space m is a trap set if and only if S[m] \u2286 S[F[m]].\nIndeed, with Proposition 2, [m]\u00b2 \u2286 [VF[m]]2, i.e. Vm \u2264i VF[m]. We now show that IDM,G[VM] = VF[m]. Recall that FDM,G[VM](Vi) = \u03a0\u00bf{w(Cs) | \u03c9\u2208 [Vm]2}. We can safely assume that Cs is in conjunctive normal form, as IDM,G is invariant under classical equivalences. Let Cs = A1 Vi. Then fs[m] = \u039b\u03b9\u03bd\u03c3(Ai) where \u03c3(\u0394) is obtained by replacing every occurrence of some v \u2208 Dm by m(v). Suppose now F[m](s) = 0. This means there is some i = 1,...,n s.t. \u03c3(\u0394\u2081) = {0}. Thus, \u03a0\u00bf{\u03c9(\u221a\u2206i) | w \u2208 [lm]2} = 0 which implies that \u03a0\u03c9(\u2227=1V\u2206i) | w\u2208 [vm]2} = 0. The cases for F[m](s) = 1 and F[m](s) = are similar."}]}