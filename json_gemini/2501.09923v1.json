{"title": "Study on a Fast Solver for Combined Field Integral Equations of 3D Conducting Bodies Based on Graph Neural Networks", "authors": ["Tao Shan", "Xin Zhang", "Di Wu"], "abstract": "In this paper, we present a graph neural networks (GNNs)-based fast solver (GraphSolver) for solving combined field integral equations (CFIEs) of 3D conducting bodies. Rao-Wilton-Glisson (RWG) basis functions are employed to discretely and accurately represent the geometry of 3D conducting bodies. A concise and informative graph representation is then constructed by treating each RWG function as a node in the graph, enabling the flow of current between nodes. With the transformed graphs, GraphSolver is developed to directly predict real and imaginary parts of the x, y and z components of the surface current densities at each node (RWG function). Numerical results demonstrate the efficacy of GraphSolver in solving CFIES for 3D conducting bodies with varying levels of geometric complexity, including basic 3D targets, missile-shaped targets, and airplane-shaped targets.", "sections": [{"title": "I. INTRODUCTION", "content": "Electromagnetic (EM) scattering serves as a common concept in electrical engineering [1]\u2013[4], underpinning diverse applications such as microwave imaging [5], geophysical exploration [6], remote sensing [7], and electromagnetic compatibility [8]. Among various scattering targets, 3D conducting bodies represent a critical category due to their extensive use in practical applications, including aircraft and ships [3], [4]. Many research efforts have been dedicated to modeling 3D conducting bodies using techniques such as the finite difference method [9], finite element method [10], method of moments (MoM) [2], and discontinuous Galerkin time-domain methods [11]. These bodies often exhibit intricate geometries, encompassing multiple scales and detailed structures. Consequently, the associated matrix equations typically involve a large number of unknowns, rendering accurate electromagnetic modeling both computationally intensive and time-consuming. To address these challenges, fast algorithms have been developed to mitigate computational complexity and accelerate calculations, including adaptive cross-approximation [12], conjugate gradient-fast Fourier transform [13], fast multipole algorithm [14], etc. Despite these advancements, real-time and reliable modeling remains a persistent issue in the electromagnetic analysis of 3D conducting bodies.\nRecent advancements in deep learning (DL) have significantly enhanced computational efficiency in electromagnetics [15]\u2013[18], finding applications in areas such as electromagnetic modeling [19]\u2013[33], microwave imaging [34]\u2013[40], and inverse design [41]\u2013[44]. Data-driven learning presents a straightforward and effective approach to incorporating DL in electromagnetics [19]\u2013[28]. The core concept is to directly establish nonlinear mappings between various physical quantities by training deep neural networks (DNNs) to extract physical laws from vast datasets. In this context, DNNs serve as surrogate models, offering reduced computational complexity compared to traditional, computationally expensive algorithms. Although the offline training of DNNs can be time-consuming, online computations are substantially accelerated through GPU parallelization. The training process typically requires large volumes of data, with the quality of this data directly impacting the performance of the DNNs. However, the lack of interpretability remains a key limitation, especially in applications where reliability is paramount.\nTo enhance both interpretability and robustness, physics-inspired learning has emerged, integrating the mathematical relationships between DNNs, electromagnetic physics, and numerical algorithms. Maxwell's equations, along with various boundary conditions, can act as effective physical constraints to guide DNN training [29]. The mathematical similarities between the finite-difference time-domain method and recurrent neural networks (RNNs) or convolutional neural networks (CNNs) have been identified and leveraged [30], [31]. Additionally, iterative solvers can train DNNs as learned parametric update functions, improving convergence while preserving the essential components of numerical computations [32], [33]. In the context of microwave imaging, iterative optimization algorithms can be unrolled into DNNs by treating each iteration as a distinct layer [39], [40]. Furthermore, DNNs can approximate mathematical operators, learning mappings between infinite-dimensional spaces, and thus eliminating dependencies on mesh densities and domain shapes [45].\nDespite the successful application of DL in electromagnetics, much of the published research has focused primarily on solving 2D and 3D EM modeling problems using uniform meshes. However, nonuniform meshes are often the preferred choice for accurately modeling 3D electromagnetic problems. Most DL techniques, which are designed for structured data, are not directly applicable to processing nonuniform meshes.\nTo the best of the author's knowledge, a few DL techniques have been applied to 3D EM modeling. Point cloud, which is an effective method for describing complex 3D geometries in DL, has been used to represent the geometric information of 3D PEC targets by employing individual points in 3D space instead of nonuniform meshes [28]. PointNet has been trained to extract feature parameters for calculating the scattered far fields, taking the point cloud of the PEC target as input [28]. Despite its impressive performance, point cloud describes the shape of an object without considering the relationships between these points, rendering it unsuitable for surface meshes. Graph neural networks (GNNs), on the other hand, are well-suited for processing graph-structured, unstructured data. Inspired by this, PhiGRL employs GNNs for 3D EM modeling by transforming nonuniformly discretized 3D PEC targets into graphs [32]. In this approach, PhiGRL trains GNNs to iteratively adjust the candidate solution until convergence. However, because PhiGRL incorporates EM physics, it places higher demands on computational resources, which makes it less efficient for training compared to data-driven models.\nIn this paper, we propose a graph neural networks-based solver to solve CFIEs of 3D conducting bodies. A concise and informative graph representation of 3D conducting bodies is introduced by transforming the applied RWG basis functions into graphs. This representation treats each triangular patch as a node in the graph, allowing the RWG functions to enable the flow of current between nodes [4]. GraphSolver is then developed to directly predict real and imaginary parts of the x, y and z components of surface current densities by processing graph data derived from 3D conducting bodies. The architecture of GraphSolver sequentially employs an upsampling fully connected network (FCN), a graph convolutional network (GCN), and six downsampling FCNs. The efficacy of GraphSolver is validated by solving CFIEs for 3D conducting bodies with varying levels of geometric complexity, including basic 3D targets, missile-shaped targets, and airplane-shaped targets. The implementation code and trained model parameter files for basic 3D targets, as well as missile-shaped and airplane-shaped targets, are publicly available on the website https://github.com/IEMCS-Lab/GNNsolver-CFIE/ for access and use.\nThis paper is organized as follows. Section II reviews the combined field integral equation. Section III formulates the proposed fast solver based on graph neural networks. In Section IV, the proposed fast solver is applied to separately solve CFIEs of 3D conducting bodies exhibiting varying degrees of geometric complexity. Observations and discussions are summarized in Section V."}, {"title": "II. COMBINED FIELD INTEGRAL EQUATION", "content": "The combined-field integral equation characterizes the surface currents on a conducting body with a closed surface $S_o$ under illumination by a specified incident wave [1]\u2013[3]:\n$\\alpha Z_o \\int_{S_0}  \\{ J_s(\\mathbf{r}) + \\hat{n} \\times \\overrightarrow{L}(J_s(\\mathbf{r})) - \\hat{n} \\times \\overrightarrow{H}^{inc} (\\mathbf{r}) \\} - (1 - \\alpha) \\cdot \\nabla \\times \\nabla \\times [\\overrightarrow{K}(Z_0 J_s(\\mathbf{r})) - \\overrightarrow{E}^{inc}(\\mathbf{r})] = 0$\nwhere $\\mathbf{r} \\in S_o$ and $\\hat{n}$ are the position vector and normal vector of $S_o$, $\\overrightarrow{E}^{inc}$ and $\\overrightarrow{H}^{inc}$ denote the incident electric and magnetic fields, $J_s(\\mathbf{r})$ is the surface current and $Z_o$ is the wave impedance. $\\overrightarrow{L}(\\cdot)$ and $\\overrightarrow{K}(\\cdot)$ are the integral operators and their definitions can refer to [1]\u2013[3].\nMoM is an efficient approach for solving Eq. (1) by representing the surface current density, $J_s(\\mathbf{r})$, with Rao-Wilton-Glisson (RWG) basis functions [1]\u2013[3], as shown in Figure 1:\n$J_s(\\mathbf{r}) = \\sum_{i=1}^N u_i f_i(\\mathbf{r})$\nwhere $f_i(\\mathbf{r})$ denotes the $i$-th RWG basis functions defined over two triangular elements sharing a common edge, and $u_i$ is the corresponding coefficient of $f_i(\\mathbf{r})$. Consequently, Eq. (1) can be converted into a matrix equation:\n$Z u = b$\nwhere $Z$ and $b$ are the impedance matrix and excitation vector, $u$ is the vector of coefficients."}, {"title": "III. FAST SOLVER BASED ON GRAPH NEURAL NETWORK", "content": "In EM modeling of 3D conducting bodies, triangular mesh is an effective choice for accurately capturing complex geometries with controllable precision. However, this approach introduces unstructured data, as the number and distribution of meshes vary across different conducting bodies. This variability limits the applicability of most deep learning techniques, which are typically designed for structured data. Graph neural networks, a class of artificial neural networks tailored for graph-structured data, offer a solution for processing this unstructured data [45]. Inspired by this, we propose a concise and informative graph representation for 3D conducting bodies in EM modeling. Then, a fast GNN-based solver is developed to address the CFIE of 3D conducting bodies using these graph representations.\nIn MoM, a 3D conducting body is initially divided into triangular patches. The surface current density $J_s(\\mathbf{r})$ is then expanded with a set of RWG basis functions, as formulated in Eq. (2).\nFigure 1(a) depicts the vector plot of the RWG basis function. The $i$-th RWG function $f_i$ is defined over two triangular elements sharing the $i$-th common edge, with its coefficient $u_i$ associated with this edge. Consequently, the number of unknowns corresponds to the number of edges present in all triangular elements. After solving Eq. (3) for $u$, the surface current density $J_s(\\mathbf{r})$ can be determined based on Eq. (2), as shown in Figure 1(b).\nUnlike MoM, this paper aims to employ GNNs to directly predict the surface current density $J_s(\\mathbf{r})$ of each triangular element instead of determining the coefficient $u$ of RWG functions, as shown in Figure 1(b). Before applying GNNs, a graph representation is constructed from the RWG basis functions that define the 3D conducting body. A graph is defined as a pair of two sets $G = (V, E)$ where $V = \\{v_i|i = 1,..., M\\}$ is a finite set of M nodes and $E = \\{e_{ij}|e_{ij} = (v_i, v_j) \\in V^2, v_i \\neq v_j\\}$ represents the edges connecting these nodes. Each node $v_i$ in $V$ can have its own feature vector $F(v_i)$.\nFirst, a 3D conducting body is discretized into triangular elements, then each triangular element is treated as a node in the graph. Two nodes are connected by an edge if their corresponding triangular elements share the same side. In this way, a graph representation $G = (V, E)$ of a 3D conducting body is established. It should be noted that the number of nodes in $V$ equals the number of triangular elements. The proposed graph representation not only preserves the geometric information of the 3D conducting body but also adapts to variations in the number and distribution of unknowns across different 3D conducting structures. This representation is a viable option, as it is straightforward, concise and informative."}, {"title": "B. Network Architecture", "content": "In this section, GraphSolver is developed as a fast solver for CFIEs of 3D conducting bodies by directly predicting surface current densities.\nof GraphSolver, which sequentially employs an upsampling FCN, a GCN, and six downsampling FCNs. Six downsampling FCNs are separately trained to predict the real (r) and imaginary (i) parts of the x, y and z components of the surface current density. \nThe graph representation of a 3D conducting body can be denoted as $G = (V, E, F)$, where $V$ denotes the triangular elements, $E$ represents their connections, and $F$ includes the feature vectors associated with all triangular elements. Both input and output of the proposed GNN model are the graph representations. These graph representations share an identical structure defined by $V$ and $E$, but they differ in feature vectors $F$. This setup ensures that the geometric information of the 3D conducting bodies is consistently incorporated in the computations. This approach aligns with the goal of EM modeling, which is to compute the physical quantities for each triangular element. In this respect, the proposed GNN model demonstrates a distinct advantage.\nThe input graph can be represented as $G_{in} = (V, E, F_{in})$ with $M$ nodes. The feature vector of i-th node, $F_{in}(V_i) = [\\overrightarrow{J}^{inc}(\\mathbf{r}), \\mathbf{r}] \\in \\mathbb{R}^9$, comprises the surface current density induced by the incident electric and magnetic fields, as well as the position vector of the i-th triangular element:\n$\\overrightarrow{J}^{inc}(\\mathbf{r}) = \\hat{n} \\times Z_0 \\overrightarrow{H}^{inc}(\\mathbf{r}) - \\hat{n} \\times \\hat{n} \\times \\overrightarrow{E}^{inc}(\\mathbf{r})$\nTo enhance the feature vector dimensions in $G_{in} = (V, E, F_{in})$, an upsampling FCN is first applied:\n$G_{up} = (V, E, F_{up}) = \\Phi_{up}(G_{in}, \\Theta_{up})$\nwhere $F_{in} \\in \\mathbb{R}^{M \\times 9}$, $F_{up} \\in \\mathbb{R}^{M \\times 64}$, $\\Phi_{up}$ and $\\Theta_{up}$ denote the upsampling FCN and its parameter set. Next, a GCN is applied to $G_{up}$:\n$G_{gcn} = (V, E, F_{gcn}) = \\Phi_{gcn}(G_{up}, \\Theta_{gcn})$\nwhere $F_{gcn} \\in \\mathbb{R}^{M \\times 64}$, $\\Phi_{gcn}$ and $\\Theta_{gcn}$ denote the GCN and its parameter set. The graph convolution operation, as defined in [46], is given by:\n$F^{(l+1)}(v_i) = W F^{(l)}(v_i) + \\frac{1}{N(i)} \\sum_{j \\in N(i)} F^{(l)}(v_j) K_W(\\mathbf{r}_{ei,j})$\nwhere $F^{(l)}(v_i)$ and $F^{(l+1)}(v_i)$ denote the feature vectors of the i-th node at the p-th and p+1-th layer, $K_W$ is a trainable kernel function, $N(i)$ is the set of adjacent nodes of the i-th node, $N_N(i)$ is the number of adjacent nodes, $W$ is the trainable weight matrix, and $\\mathbf{r}_{ei,j}$ is the position vector of the edge $e_{i,j}$. The kernel function $K_W$ in this paper is implemented as an FCN, with its detailed structure provided in Table I. Finally, six downsampling FCNs are trained independently to predict the real (r) and imaginary (i) parts of the x, y and z components of the surface current density based on $G_{gcn}$:\n$G_{x/y/z,r/i} = (V, E, F_{x/y/z,r/i}) = \\Phi_{x/y/z,r/i}(G_{gcn}, \\Theta_{x/y/z,r/i})$\nwhere $F_{x/y/z,r/i} \\in \\mathbb{R}^{M \\times 1}$, $\\Phi_{x/y/z,r/i}$ and $\\Theta_{x/y/z,r/i}$ are the downsampling FCNs and their respective parameter sets that are applied to predict the real (r) and imaginary (i) parts of the x, y and z components of $J_s(\\mathbf{r})$.\nGraphSolver adopts the supervised learning scheme by applying MoM to generate training data. The mean squared error (MSE) is adopted as the objective function to guide the training process:\n$MSE = \\frac{||J_{s,m} - J_{s,g}||_F}{N_{J_{s,m}}}$\nwhere $J_{s,m}$, $J_{s,g}$ denote the surface current densities computed by MoM and GraphSolver, $N_{J_{s,m}}$ is the total number of elements in $J_{s,m}$, $||.||_F$ is the Frobenius norm."}, {"title": "IV. NUMERICAL RESULTS", "content": "In this section, the efficacy of GraphSolver is demonstrated through the solution of CFIES for 3D conducting bodies exhibiting varying degrees of geometric complexity. The considered geometries, arranged in ascending order of complexity, include basic 3D targets, missile-shaped targets, and airplane-shaped targets. GraphSolver is independently trained to predict the current densities induced on these targets when illuminatedby vertically polarized plane waves under varying incident angles. The implementation of GraphSolver utilizes PyTorch and is executed on an NVIDIA V100 GPU. The model parameters are optimized using the Adam optimizer."}, {"title": "A. Basic 3D Targets", "content": "The basic 3D targets considered in this study include spheroids, conical frustums, and hexahedrons, as illustrated in Figure 4. The body centers of the spheroids and the base centers of the conical frustums and hexahedrons are aligned with the origin of the coordinate system. Their geometric configurations vary, with the corresponding control parameters detailed in Table II. The illuminating plane wave has an amplitude of 1V/m and a frequency of 300MHz. The incident direction, specified by [$\\theta$, $\\phi$], varies within [10\u00b0, 90\u00b0] for $\\theta$ and [90\u00b0, 180\u00b0] for $\\phi$, with increments of 10\u00b0. MoM is employed to generate a dataset comprising 32400 data samples, with 80% allocated for training and 20% for testing. To maintain the numerical stability, the average size of the RWG basis functions is set to $\\lambda$/10, where $\\lambda$ represents the wavelength of the incident plane wave.\nFigure 5 depicts the convergence curve of GraphSolver in solving CFIEs for basic 3D targets. The learning rate of the Adam optimizer is initialized at 0.001 and reduced by a factor of 0.8 every 20 epochs. GraphSolver undergoes training for a total of 300 epochs. Throughout the training process, the training and testing MSE values exhibit strong consistency. The converged MSE values are nearly identical, with minimal differences, indicating negligible overfitting, as highlighted in Figure 5.\nEach target features distinct distributions and varying quantities of triangular meshes, with the number of unknowns being 1054, 312 and 600 in Figure 9 (a), (b) and (c), respectively. The outputs of GraphSolver include the real and imaginary components of the surface current density in the x, y and z directions for specific target. The surface current densities of the various basic 3D targets exhibit distinct distributions and dynamic trends, as illustrated in Figure 9. Some curves display pronounced oscillations over a wide range, others oscillate within a narrow range, while certain cases result in flat, zero-valued lines. Despite these variations, GraphSolver consistently delivers stable and accurate predictions of surface current densities. The corresponding 3D surface currents exhibit high precision, with absolute errors (AE) remaining at a low level. To further validate performance, bistatic radar cross-section (RCS) curves are computed on the $\\phi$ = 0\u00b0 plane for detailed comparisons. The RCS curves derived from the surface currents computed by MoM and GraphSolver align closely for all three targets. This demonstrates that GraphSolver effectively handles triangular meshes and underscores its strong potential for modeling 3D conducting bodies."}, {"title": "B. Missilehead-shaped Targets", "content": "In this section, GraphSolver is further trained to solve CFIEs for 3D conducting bodies with increased geometrical complexity. Figure 6 illustrates the schematic representation ofthe missilehead-shaped targets, with their geometrical parameters detailed in Table II. The amplitude and frequency of the incident plane waves are set to 0.5 and 300MHz. The incident direction [$\\theta$, $\\phi$] varies within [10\u00b0,90\u00b0] and [90\u00b0, 180\u00b0] with increments of 10\u00b0. MoM is employed to generate a total of 6750 data samples of which 80% and 20% are for training and testing. The average size of triangular meshes is also fixed as $\\lambda$/10. Adam optimizer is adopted to train GraphSolver, with the learning rate initialized at 0.001 and reduced by a factor of 0.8 every 20 epochs. The convergence curve of GraphSolver for solving CFIEs of missilehead-shaped targets is also shown in Figure 6, where negligible overfitting is observed.\nFigure 10 presents a comparison of the surface currents for two distinct missilehead-shaped targets, as computed by MoM and GraphSolver. The number of unknowns for the two targets is 1390 and 532 respectively. The corresponding 3D surface currents and bistatic radar cross-section (RCS) curves on the $\\phi$ = 0\u00b0 plane demonstrate high computational accuracy. The missilehead-shaped targets can be viewed as combinations of multiple basic 3D shapes. The resulting surface currents exhibit distinct and more complex distributions compared to those of basic 3D targets, as shown in Figure 10. Despite this increased complexity, GraphSolver consistently delivers stable and accurate predictions of the surface currents, further validating its robust learning capabilities."}, {"title": "C. Airplane-shaped Targets", "content": "In this section, GraphSolver is further trained to predict the surface currents of airplane-shaped targets using transfer learning. Transfer learning aims to transfer learned knowledge or physical laws from one domain to a similar domain, thereby simplifying the training process and reducing the need for large datasets [47]. The model parameter set of GraphSolver trained for 3D basic targets is taken as the starting point for training. Airplane-shaped targets exhibit the most complex geometries in this study, featuring sharp corners, wing-body joints, and other challenging structures, which complicate accurate modeling, as shown in Figure 7. The fuselage length and wingspan of the airplane-shaped targets are also indicated.\nThe frequency and amplitude of the incident plane waves are set to 150MHz and 0.5, respectively. The direction of the incident plane waves, denoted by ($\\theta$,$\\phi$), varies within the ranges [0\u00b0, 180\u00b0] and [3\u00b0, 180\u00b0] with increments of 5\u00b0 and 3\u00b0. A total of 6660 data samples are generated with MoM with the average size of RWG basises fixed as $\\lambda$/10. The training and testing data are split in an 80%-20% ratio. The Adam optimizer is employed to optimize GraphSolver, with the learning rate initialized at 0.001 and reduced by a factor of 0.8 every 20 epochs. To account for the greater fluctuations in the surface current densities, GraphSolver incorporates batch normalization before the PReLU nonlinearities in all layers of GCN, as well as in all layers of FCNs except the last one.\nFigure 8 shows the convergence curve of GraphSolver for solving CFIEs of airplane-shaped targets. The number of training data samples is relatively insufficient given the geometric complexity of the targets, leading to slight overfitting and suboptimal numerical accuracy. Increasing the number of training samples could enhance GraphSolver's performance. Figure 11 compares the surface currents computed by MoM and GraphSolver. The x, y, and z components of the surface current densities for the airplane-shaped targets are more complex than those for basic 3D and missile-shaped targets. Nonetheless, GraphSolver can still be trained to yield reliable predictions with acceptable numerical accuracy. The corresponding 3D surface currents are also computed and compared, showing a low level of absolute error. The bistatic RCS curves also demonstrate good agreement."}, {"title": "D. Comparisons of Computing Performance", "content": "In this section, we compare the performance of GraphSolver with that of PhiGRL, as reported in our previous work. It is important to note that the version of PhiGRL considered here was trained using a supervised learning scheme. PhiGRL and GraphSolver are built on different underlying principles, with the former belonging to the physics-inspired learning paradigm and the latter to the data-driven learning approach. PhiGRL trains GNNs to learn update rules by numerically calculating the residuals of the governing equations, while GraphSolver consists of seven FCNs and one GCN, with no numerical computation involved.\nboth PhiGRL and GraphSolver were implemented on the same computing platform: a single Nvidia V100 GPU. While the incorporation of numerical computation in PhiGRL improves training stability and facilitates the learning task of the neural networks, it also increases computational overhead, requiring more training time. In contrast, GraphSolver achieves efficient training while maintaining comparable computational accuracy, making it more suitable for scenarios with limited computational resources."}, {"title": "V. CONCLUSIONS", "content": "In this paper, we present a fully data-driven fast solver to solve CFIEs of 3D conducting bodies by sequentially assembling one upsampling FCN, one GCN and six downsampling FCNs. The 3D conducting bodies, discretized by RWG basis functions, are transformed into graphs in a concise and informative manner by treating each triangular patch as a node, thereby enabling the flow of current between nodes. The efficacy of the proposed solver is verified by solving CFIEs for basic 3D targets, missile-shaped targets, and airplane-shaped targets. Numerical results show that the solver is able to handle different target shapes with varying degrees of geometric complexity, offering accurate predictions of surface current distributions.\nCompared to physics-inspired learning methods, the data-driven solver facilitates efficient training and achieves acceptable computational accuracy, making it a strong candidate for scenarios with limited computational resources. Despite some limitations related to training sample size and data quality, the proposed data-driven solver holds great promise for real-time applications where large-scale simulations are often computationally prohibitive."}]}