{"title": "A GENETIC ALGORITHM FOR MULTI-CAPACITY FIXED-CHARGE\nFLOW NETWORK DESIGN", "authors": ["Caleb Eardley", "Dalton Gomez", "Ryan Dupuis", "Michael Papadopoulos", "Sean Yaw"], "abstract": "The Multi-Capacity Fixed-Charge Network Flow (MC-FCNF) problem, a generalization of the Fixed-\nCharge Network Flow problem, aims to assign capacities to edges in a flow network such that a target\namount of flow can be hosted at minimum cost. The cost model for both problems dictates that the\nfixed cost of an edge is incurred for any non-zero amount of flow hosted by that edge. This problem\nnaturally arises in many areas including infrastructure design, transportation, telecommunications,\nand supply chain management. The MC-FCNF problem is NP-Hard, so solving large instances using\nexact techniques is impractical. This paper presents a genetic algorithm designed to quickly find\nhigh-quality flow solutions to the MC-FCNF problem. The genetic algorithm uses a novel solution\nrepresentation scheme that eliminates the need to repair invalid flow solutions, which is an issue\ncommon to many other genetic algorithms for the MC-FCNF problem. The genetic algorithm's\nefficiency is displayed with an evaluation using real-world CO2 capture and storage infrastructure\ndesign data. The evaluation results highlight the genetic algorithm's potential for solving large-scale\nnetwork design problems.", "sections": [{"title": "1 Introduction", "content": "The Multi-Capacity Fixed-Charge Network Flow (MC-FCNF) problem is a well-studied optimization problem en-\ncountered in many domains including infrastructure design, transportation, telecommunications, and supply chain\nmanagement [1, 2, 3]. In the MC-FCNF problem, each edge in the network has multiple capacities available to it,\nwith each capacity having its own fixed construction and variable utilization costs. The objective of the MC-FCNF\nproblem is to assign capacities to edges in the network such that a target flow amount can be hosted at minimal cost.\nThe MC-FCNF problem is a generalization of the Fixed-Charge Network Flow (FCNF) problem, which has a single\ncapacity (and fixed and variable costs) available per edge. The MC-FCNF problem is NP-Hard to approximate within\nthe natural logarithm of the number of vertices in the graph [3]. As such, finding optimal solutions to large instances is\noften computationally infeasible.\nSignificant work has already been done on solving the MC-FCNF and FCNF problems using many techniques including\nmathematical programming, branch and bound, and optimal approaches [4, 5, 6, 7, 8]. Multi-capacity edge networks\nare often referred to as buy-at-bulk network design problems, and are often framed as facility location problems, which\nis similar to the MC-FCNF problem but with added demand constraints on sinks [9, 10, 11]. Genetic algorithms have\nalso been introduced for variants of the MCNF problem [12, 13, 14, 15, 16, 17, 18, 19].\nIn this paper, we introduce a novel genetic algorithm to solve the MC-FCNF problem. The novel contribution of our\ngenetic algorithm is the representation of a flow solution by an array of parameters that scale the fixed-costs for each\nedge in the network. This representation ensures that each array corresponds to a valid flow, thereby eliminating the"}, {"title": "2 Problem Formulation", "content": "The MC-FCNF problem can be formulated as an integer linear program (ILP), as shown below:\nInstance Input Parameters:\nV\tVertex set\nE\tEdge set\nK\tSet of possible capacities for each edge\n$s \\in V$\tSource vertex\n$t \\in V$\tSink vertex\n$C_k$\tCapacity of k\n$a_{ek}$\tFixed construction cost of edge e with capacity k\n$b_{ek}$\tVariable utilization cost of edge e with capacity k\nT\tTarget flow amount\nDecision Variables:\n$Y_{ek} \\in \\{0,1\\}$\tUse indicator for edge e with capacity k\n$f_{ek} \\in R^{\\geq 0}$\tAmount of flow on edge e with capacity k\nObjective Function:\n$\\min \\sum_{e\\in E} \\sum_{k \\in K} (a_{ek}Y_{ek} + b_{ek} f_{ek})$\t(1)\nSubject to the following constraints:\n$f_{ek} \\leq C_kY_{ek}, \\forall e \\in E, k \\in K$\t(2)\n$\\sum_{\\substack{e \\in E: \\text{src}(e)=v}} \\sum_{k \\in K}f_{ek} = \\sum_{\\substack{e' \\in E: \\text{dest}(e')=v}} \\sum_{k \\in K}f_{e'k}, \\forall v \\in V \\setminus \\{s,t\\}$\t(3)\n$\\sum_{\\substack{e \\in E: \\text{src}(e)=s}} \\sum_{k \\in K}f_{ek} = T$\t(4)\nWhere constraint 2 enforces the capacity of each edge and forces $Y_{ek}$ to be set to one if $f_{ek}$ is non-zero. Constraint 3\nenforces conservation of flow at each internal vertex. Constraint 4 ensures that the total flow amount meets the target.\nSince the MC-FCNF problem is NP-Hard, solving this ILP is intractable for large instances [3]. The objective of this\npaper is to introduce a novel algorithm that efficiently finds high-quality solutions to this ILP without directly solving it."}, {"title": "3 Non-Integer Linear Program", "content": "In this section, we introduce a linear program (LP) that is a modification of the ILP presented in Section 2. Since it is\nan LP, this new formulation can be solved optimally in polynomial time. This LP forms the foundation of the genetic\nalgorithm discussed in Section 4. Two components of the ILP change to turn it into an appropriate LP:\n1.  The binary decision variables $Y_{ek}$ are removed, thereby turning the model into an LP. Since the $Y_{ek}$ variables\nare removed, the fixed costs are then scaled and combined with the variable costs.\n2.  A new scaling parameter, $d_{ek}$, is introduced for each capacity on each edge that will scale the fixed cost of the\nedge. These parameters form the representation of a flow solution in the genetic algorithm.\nLet $g_{ek}$ be the decision variable representing the amount of flow on edge $e$ with capacity $k$ in the LP, analogous to the\n$f_{ek}$ decision variable in the ILP. Then, the objective function of the LP is:\n$\\min \\sum_{e\\in E} \\sum_{k \\in K} (\\frac{a_{ek}}{d_{ek}} + b_{ek}) g_{ek}$\t(5)\nThe constraints in the LP mirror the constraints in the ILP:\n$g_{ek} \\leq C_k, \\forall e \\in E, k \\in K$\t(6)\n$\\sum_{\\substack{e \\in E: \\text{src}(e)=v}} \\sum_{k \\in K}g_{ek} = \\sum_{\\substack{e' \\in E: \\text{dest}(e')=v}} \\sum_{k \\in K}g_{e'k}, \\forall v \\in V \\setminus \\{s,t\\}$\t(7)\n$\\sum_{\\substack{e \\in E: \\text{src}(e)=s}} \\sum_{k \\in K} g_{ek} = T$\t(8)\nWhere constraint 6 enforces the capacity of each edge. Constraint 7 enforces conservation of flow at each internal\nvertex. Constraint 8 ensures that the total flow amount meets the target.\nThe output of this LP is a flow value for each $g_{ek}$. Of course, the optimal flow found by the LP is likely not an optimal\nsolution for the ILP. The true cost of the LP's solution can be determined by calculating its value when input into the\nILP's objective function (Equation 1). This is first done by defining an edge-use indicator function $z_{ek}$ and assigning it\nvalues as follows:\n$z_{ek} = \\begin{cases} 1, & \\text{if } g_{ek} > 0 \\\\ 0, & \\text{if } g_{ek} = 0 \\end{cases}$\t(9)\nThis makes the true cost of the LP's solution equal to:\n$\\sum_{e\\in E} \\sum_{k \\in K} (a_{ek}z_{ek} + b_{ek}g_{ek})$\t(10)\nThe genetic algorithm in Section 4 works by varying the $d_{ek}$ scaling parameters and scoring the resulting optimal $g_{ek}$\nvalues found by the LP with Equation 10."}, {"title": "4 Genetic Algorithm", "content": "Genetic algorithms are a common evolutionary heuristic method used for searching and optimization. Genetic algorithms\nmanage a population of organisms that each correspond to a solution to the problem. The population evolves over\niterations of the algorithm using evolutionary processes observed in nature including selection, crossover, and mutation\noperations. Selection is the process of deciding which organisms of the population continue into the next iteration (i.e.,\nnext generation). This is the mechanism that allows the algorithm to prioritize organisms that correspond to better\nsolutions to the problem and control the size of the population. Crossover is the generation of a new organism from two\nexisting organisms, analogous to biological reproduction. Similarly, mutation is the slight modification of an organism\ninto a new one corresponding to a different solution. Crossover and mutation operations are the mechanisms that allow\nthe algorithm to search for new, and possibly better, solutions.\nA number of genetic algorithms have been developed to solve various versions of the FCNF problem. In these\nalgorithms, organisms are broadly represented as either individual edges, or predefined routes through the network."}, {"title": "4.1 Optimal Search Viability", "content": "The last thing that remains to be shown about the theoretical behavior of the genetic algorithm is that it is possible for it\nto find the optimal solution to the ILP. This claim is not trivial, because the search space of the genetic algorithm is the\nset of possible $d_{ek}$ arrays, which are merely a proxy for flow values, the property we are actually optimizing for. The\nmotivation for formulating the LP in Section 3 and representing the organisms in the genetic algorithm as $d_{ek}$ arrays\nfollows from the following claim:\nClaim 1. If each $d_{ek}$ equals the optimal ILP flow value for edge $e$ with capacity $k$, then the optimal flow found by the\nresulting LP is also an optimal flow for the ILP.\nThe rationale for this claim is that if each $d_{ek}$ and $g_{ek}$ both equal the optimal ILP flow values, then the cost of the\nLP's objective function from Equation 5 will equal the optimal cost of the ILP's objective function from Equation 1.\nClaim 1 is also the stated motivation behind other similar genetic algorithms for the FCNF problem [23]. However, this\nclaim is false as can be seen in Figure 1 with the displayed fixed costs ($a_e$), variable costs ($b_e$), capacities ($c_e$), and a\ncapture target of three. In this instance, the optimal ILP solution is to set the amount of flow on $e_1$ and $e_3$ to two and the\namount of flow on $e_2$ and $e_4$ to one for a total cost of 20. Setting $d_{e_1}$ and $d_{e_3}$ to two and $d_{e_2}$ and $d_{e_4}$ to one yields the\nLP objective of minimizing $\\frac{7}{d_{e_1}}g_{e_1} + \\frac{6}{d_{e_2}}g_{e_2}$. The optimal solution to this is to set the amount of flow on $e_1$ and $e_3$ to one\nand the amount of flow on $e_2$ and $e_4$ to two for a total cost of 21, thereby contradicting Claim 1.\nSince Claim 1 is false, along with the fact that the $d_{ek}$ arrays are only proxies for the flow value solutions we seek, it\nremains to be shown that there actually exists a set of $d_{ek}$ values that will result in the genetic algorithm finding optimal\nflow values for the ILP.\nTheorem 1. For every problem instance, there exists a set of $d_{ek}$ values such that the optimal flow found by the resulting\nLP is also an optimal flow for the ILP.\nProof. Let $f^{opt}_{ek}$ be the optimal flow values found by the ILP and define the set of $d_{ek}$ values as follows:\n$d_{ek} = \\begin{cases} \\epsilon > 0, & \\text{if } f^{opt}_{ek} > 0 \\\\ \\infty, & \\text{if } f^{opt}_{ek} = 0 \\end{cases}$\t(11)\nWhen $d_{ek}$ is set to an $\\epsilon$ value near zero, the scaled fixed cost $\\frac{a_{ek}}{d_{ek}}$ makes those edges prohibitively expensive to include\nin LP solutions, so long as valid solutions exist that do not use those edges (such as the valid solution $f^{opt}_{ek}$). Likewise,\nif $d_{ek}$ is set to a very large value, the scaled fixed cost is near zero. These $d_{ek}$ values effectively restrict the LP to only\nselecting the edges and capacities with non-zero $f^{opt}_{ek}$ values.\nSuppose that $H \\subseteq E \\times K$ is the set of edge-capacity pairs where $y^{opt}_{ek}f^{opt}_{ek}$ equals one. Then, given the $d_{ek}$ values resulting\nfrom Equation 11, the objective for the LP becomes:\n$\\sum_{e\\in E} \\sum_{k \\in K} (\\frac{a_{ek}}{d_{ek}} + b_{ek}) g_{ek} = \\sum_{ek \\in H} b_{ek} g_{ek}$\nLet $g^{opt}_{ek}$ be optimal flow values to the LP. We aim to show that $g^{opt}_{ek}$ is also an optimal flow for the ILP. First, $g^{opt}_{ek}$\nis a valid solution to the ILP since $g^{opt}_{ek}$ is a valid flow of the ILP's target value on an identical graph with the same\ncapacities. Showing that $g^{opt}_{ek}$ is optimal for the ILP can be accomplished by using $g^{opt}_{ek}$ to feed the definitions for $z_{ek}$ in\nEquation 9 and showing that:\n$\\sum_{e\\in E} \\sum_{k \\in K} (a_{ek}z^{opt}_{ek} + b_{ek}g^{opt}_{ek}) = \\sum_{e\\in E} \\sum_{k \\in K} (a_{ek}y^{opt}_{ek} + b_{ek}f^{opt}_{ek})$"}, {"title": "5 Evaluation", "content": "To demonstrate the efficiency and effectiveness of the genetic algorithm presented in Section 4, an evaluation was\nconducted using CO2 capture and storage (CCS) infrastructure design data. CCS is a climate change mitigation strategy\nthat involves capturing CO2 from industrial sources, notably power generation, transporting the CO2 in a pipeline\nnetwork, and injecting it into geological reservoirs for long-term sequestration. Large-scale CCS adoption will require\nthe optimization of infrastructure for hundreds of sources and sinks and thousands of kilometers of pipelines. The\nCCS infrastructure design problem aims to answer the question: What sources and sinks should be opened, and where\nshould pipelines be deployed (and at what capacity) to process a defined amount of CO2 at minimum cost. CCS sources\nand sinks both have fixed construction (or retrofit) costs, variable utilization costs, and capacities (or emission limits).\nPipelines have multiple capacities available, depending on the diameter of the pipeline installed. Pipelines also have\nfixed construction costs and variable transportation costs that are dependent on the capacity selected. Though the\nMC-FCNF problem has only a single source and sink, and does not have costs or capacities associated with nodes, the\nCCS infrastructure design problem can be translated into the MC-FCNF problem [24, 3].\nThe genetic algorithm was implemented and integrated into SimCCS, the Java-based CCS infrastructure optimization\nsoftware, which uses CPLEX as its optimization model solver [25]. Initial performance simulations guided the\nparameterization of the genetic algorithm to have a population size of 10, and mutation and crossover probability of\nboth 50%. A mutation probability of 50% means that each organism has a 50% chance of mutation, and a crossover\nprobability of 50% means that 50% of the population is crossed over with a random other organism in each iteration\nof the genetic algorithm. All reported genetic algorithm values are the average of three runs. The optimal ILP from\nSection 2 was implemented in SimCCS using CPLEX as well. SimCCS was used as a standardized way to represent\nCCS data and for problem and solution visualization. Timing was coded directly into SimCCS to ensure only the\nalgorithm of interest was being timed during simulation. Simulations were run on a machine with Ubuntu 20.04.5, an"}, {"title": "6 Conclusion", "content": "In this paper, we addressed the MC-FCNF problem by formulating it as an ILP and proposing a novel genetic algorithm\nto find high-quality solutions efficiently. The key novel component of our approach is the use of fixed-cost scaling\nparameters as a proxy for direct flow values, allowing the genetic algorithm to search the solution space effectively\nwithout the need for computationally expensive repair functions.\nOur genetic algorithm demonstrated significant efficiency and effectiveness in solving the MC-FCNF problem. By inte-\ngrating the algorithm into the SimCCS infrastructure optimization software, we were able to evaluate its performance\non real-world CCS infrastructure design data. The results showed that the genetic algorithm consistently outperformed\nCPLEX solving an ILP on very large problem instances, and matched CPLEX's performance on moderately sized\nproblem instances. The evaluation demonstrated the potential of the genetic algorithm in handling large and complex\nnetworks with varied target flow objectives, across a wide range of running time requirements.\nThe genetic algorithm presented in this paper offers a robust and scalable solution to the MC-FCNF problem, providing\nan efficient alternative to traditional ILP solvers in realistic scenarios. Future work could involve tailoring the genetic\nalgorithm to more specialized versions of the FCNF problem, including phased network deployments [31]. The\nfixed-cost scaling parameter technique may also prove useful in building evolutionary algorithms for other problems that\ncan be modeled as network flow problems (e.g., facility location problems). Future work could include implementing"}]}