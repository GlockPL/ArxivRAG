{"title": "Learning to Race in Extreme Turning Scene with Active Exploration and Gaussian Process Regression-based MPC", "authors": ["Guoqiang Wu", "Cheng Hu", "Wangjia Weng", "Zhouheng Li", "Yonghao Fu", "Lei Xie", "Hongye Su"], "abstract": "Abstract-Extreme cornering in racing often induces large side-slip angles, presenting a formidable challenge in vehicle control. To tackle this issue, this paper introduces an Active Exploration with Double GPR (AEDGPR) system. The system initiates by planning a minimum-time trajectory with a Gaussian Process Regression(GPR) compensated model. The planning results show that in the cornering section, the yaw angular velocity and side-slip angle are in opposite directions, indicating that the vehicle is drifting. In response, we develop a drift controller based on Model Predictive Control (MPC) and incorporate Gaussian Process Regression to correct discrepancies in the vehicle dynamics model. Moreover, the covariance from the GPR is employed to actively explore various cornering states, aiming to minimize trajectory tracking errors. The proposed algorithm is validated through simulations on the Simulink-Carsim platform and experiments using a 1/10 scale RC vehicle.", "sections": [{"title": "I. INTRODUCTION", "content": "Extreme turning scenarios for vehicles are critical and fierce in autonomous driving. Many control technologies are focused on normal vehicle operating conditions, such as Yaw Stability Control (YSC) [1] and Electronic Stability Control (ESC). These systems limit the operating area of the tires to a linear zone to avoid tire slip and provide a degree of safety for the vehicle. However, in extremely high side-slip angle cornering scenarios, these solutions have difficulty accounting for precise vehicle control.\nChangxi You et al. discovered that a typical extreme cornering maneuver can be approximated by three distinct segments: entry corner guiding, steady-state sliding, and exiting [2]. This implies that extreme cornering can be achieved in a drifting state. Wangjia Weng et al. demonstrated that the drifting state significantly outperforms regular state control in accurately following trajectories during extreme cornering [3]. By analyzing drifting techniques, we can guarantee safe driving in high side-slip angle scenarios.\nPrevious research in vehicle drift has primarily focused on the development of various controllers, utilizing a range of complex vehicle dynamics models. Notably, the three-state single-track vehicle model has been extensively employed in dynamic surface, Linear Quadratic Regulator (LQR), and MPC controllers [4]\u2013[7]. In addition to the three-state single-track model, a more detailed four-wheeled vehicle model has also been utilized for steady-state analysis of drifting [8]. In reality, the controller's vehicle model will have a substantial impact on the vehicle's control. Using conventional models, it is challenging to accurately represent the most authentic vehicle dynamics. Consequently, several scholars have proposed a learning-based approach to address this limitation. Neural networks are utilized to reduce the inherent bias in vehicle dynamics models [9]. However, the effects of learning are challenging to evaluate due to the intricate architectures of neural networks. Rongyao Wang et al. employ the Koopman Operator for system identification of vehicle dynamics [10]. Nevertheless, adjusting the Koopman Operator to accommodate more intricate nonlinear vehicle dynamical models is challenging and it is difficult to guarantee the control's stability. Juraj Kabzan et al. use Gaussian processes regression to take residual model uncertainty into account and achieve safe driving behavior in racing scenarios [11]."}, {"title": "II. LEARNING VEHICLE MODEL", "content": "This section illustrates the nominal vehicle dynamic model, which is adequate for the drifting controller but imprecise. Subsequently, we provide an explanation of the GPR theory that compensates for the nominal model bias.\nOne of the most popular vehicle dynamics models is the single-track model, which is employed in drift controllers. A single-track vehicle dynamics model can accurately represent a genuine vehicle model by utilizing a limited number of fundamental parameters. As illustrated in Fig. 2, we employ this model as our nominal model in our methodology."}, {"title": "A. Nominal vehicle model", "content": "The equations for this vehicle model can be expressed as follows:\n$\\begin{aligned}\\dot{V}&=\\frac{-F_{y f} \\sin (\\delta-\\beta)+F_{y r} \\sin \\beta+F_{x r} \\cos \\beta}{m} \\\\ \\dot{\\beta}&=\\frac{F_{y f} \\cos (\\delta-\\beta)+F_{y r} \\cos \\beta-F_{x r} \\sin \\beta}{m V}-r \\\\ \\dot{r}&=\\frac{a F_{y f} \\cos \\delta-b F_{y r}}{I_{z}} \\end{aligned}$\nwhere r denotes the yaw angular velocity, $\\delta$ is the angle of the front wheel, m is the vehicle mass, and $I_z$ serves as the moment of inertia. Furthermore, V denotes the velocity of the vehicle's center of mass, $F_{yf}$ and $F_{yr}$ designate the lateral forces of the front and rear wheels, and a and b respectively represent the distance from the center of gravity to the front and rear wheels.\nThe complexity of vehicle models is significantly influenced by tire models when driving at high velocities and drifting. In this paper, we implement the simplified Pacejka Tire Model [14] as follows:\n$F_{y}=-\\mu F_{z} \\sin (C \\arctan (B \\alpha))$\nwhere $F_y$ indicates the lateral force of the front or rear tire. $F_z$ represents the burden on the tires. B and C are the tire parameters that need to be identified. $\\mu$ is the coefficient of ground friction. $\\alpha$ is the tire slip angle. The formula for calculating the front and rear tires' slip angles is as follows:\n$\\alpha_{f}=\\arctan \\left(\\frac{V \\sin \\beta+a r}{V \\cos \\beta}\\right)-\\delta$\n$\\alpha_{r}=\\arctan \\left(\\frac{V \\sin \\beta-b r}{V \\cos \\beta}\\right)$"}, {"title": "B. Learning Vehicle Model", "content": "Although the nominal vehicle dynamic model is sufficient for the sample drifting controller, but we aim to improve drifting performance by learning the vehicle model error d with Gaussian Process Regression. It is a non-parametric learning method. The readers could refer to [15] and [16] for more details.\nThe compensated vehicle model with GPR can be formulated as follows:\n$\\dot{x}=f(x, u)+d(x, u)$\nwhere x is system state [V;$\\beta$;r], u is system inputs [$\\delta$, $F_{xr}$]. f is denoted the nominal model (1), and d is the model error between the real vehicle model and nominal model.\nGiven a feature vector z\u2208 $R^{nf}$ with nf being its number of dimensions, and an output vector(model error) d \u2208 $R^{n_d}$"}, {"title": "III. AEDGPR-MPC SYSTEM", "content": "AEDGPR-MPC System is designed to complete the challenge of extreme drifting through corners. The AEDGPR-MPC System structure is shown in Fig. 3. It is composed of four parts, the first part is Active Explorer. It can generate the vehicle speed sets $V_{sets}$ as the base area of exploration. Next, we make full use of the covariance of GPR to explore areas of high uncertainty for the purpose of finding the better vehicle cornering state. The Learning State Planner is intended to receive a list of areas that require exploration and to plan the corresponding cornering states of the vehicle using a bias correction model with GPR. The Learning MPC Controller is utilized to realize an accurate drift control implementation for the vehicle. It receives the drift equilibrium as the target vehicle state and subsequently employs the GPR-corrected vehicle model to calculate the system control volume outputs with MPC. The final component is a real vehicle model that is responsive to the vehicle's actual position and collects the real data for GPR."}, {"title": "A. Learning State Planner", "content": "The Learning State Planner section comprises drift equilibrium point solving and minimum time planning. First, the curvilinear coordinate will be introduced. The curvilinear coordinate is utilized to depict better the relationship between the vehicle and the reference trajectory. The formula is defined as follows:\n$\\begin{aligned}s&=\\frac{V \\cos (\\Delta \\varphi+\\beta)}{1-\\kappa e} \\\\ \\dot{e}&=V \\sin (\\Delta \\varphi+\\beta) \\\\ \\dot{\\theta}&=\\dot{\\varphi}-\\dot{\\varphi}_{r e f}\\end{aligned}$\nwhere s represents the distance along the roadway's reference trajectory, and e represents the distance between the vehicle's center of gravity and the reference trajectory. Let $\\theta$ denote the difference between the vehicle heading angle and the reference track angle. The parameter $\\kappa$ is used to characterize the curvature of reference trajectories.\nTo achieve the minimum time state planning, we integrate the GPR compensated model (4) with the curvilinear coordinate system (7) to derive the optimization problem (8).\n$\\begin{array}{cl} \\min \\limits_{x, u} & s(x, u)=\\frac{V \\cos (\\Delta \\varphi+\\beta)}{1-\\kappa e} \\\\ s . t . & \\dot{x}=f(x, u)+S \\cdot d(x, u) \\\\ & x_{\\min } \\leq x \\leq x_{\\max } \\\\ & u_{\\min } \\leq u \\leq u_{\\max } \\end{array}$\nThe key goal of the optimization issue is to minimize s in order to plan the minimum time vehicle trajectory. The system state is denoted as x = [V $\\beta$ r s e $\\theta$]. The system control input is indicated as u = [$\\delta$ $F_{xr}$]. The matrix S is defined as a selection matrix diag(1,1,1,0,0,0), indicating that GPR model compensation is applied only to the state variables [V $\\beta$ r]. Subsequently, we obtain the intended state [$V_b$ $\\beta_b$ $r_b$], whereas the planned velocity $V_b$ will serve as the fundamental velocity for the Active Explorer as shown in Fig. 3.\nThe planned minimum time state in simulation is illustrated in Fig. 4. The light yellow section represents the car's cornering area, where is evident that the side slip angle and yaw rater are in opposing directions, indicating a drifting condition."}, {"title": "B. Learning MPC Controller", "content": "We propose a Learning MPC Controller that utilizes GPR to learn the deviation between the actual model and the nominal model, resulting in more precise control. The MPC cost function is as follows:\n$\\begin{aligned}\\min & \\sum\\limits_{k=1}^{N}\\left(||x(k)-x_{e}||_{Q}^{2}+||u(k+1)-u(k)||_{R}^{2}\\right) \\\\ s.t. & \\begin{cases}\\dot{x}(k+1)=f(x(k), u(k))+d(k) \\\\u_{\\min } \\leq u(k) \\leq u_{\\max } \\\\ \\Delta u_{\\min } \\leq u(k+1)-u(k) \\leq \\Delta u_{\\max }\\end{cases}\\end{aligned}$\nwhere the Q and R are the weighting matrices. x are the state variables and u are the control variables. The loss function indicates that we expect the vehicle state to track the drift equilibrium point obtained from the Learning State Planner. Moreover, we set constraints on the range of control and the variations in this formulation. The vehicle models f(x,u) used here are the GPR-corrected vehicle model."}, {"title": "C. Active Explorer", "content": "The Active Explorer has two main roles, the first is to generate sets of speed $V_{sets}$ that can be explored. The second is to balance each vehicle state in the exploration sets and carefully choose the subsequent state to be explored until the optimal cornering state is found. About how to generate the sets of speeds $V_{sets}$, we give the follow equation:\n$\\begin{aligned}\\min\\left\\{\\left(\\frac{w_{1}}{\\frac{||s_{k}-s_{k-1}||}{\\bar{S}}}\\right)^{2}+w_{2}\\left(\\frac{|a(k)-r(k) e(k)|}{\\bar{r}}\\right)^{2}\\right\\} \\\\\\dot{V}_{n e w}=\\dot{V}_{o r i g i n}+a(k), \\\\\\Phi_{k}=\\arctan \\left(\\frac{\\Delta V_{o r i g i n}+\\Delta a(k)}{\\Delta s(k)}\\right), \\\\\\dot{V}_{i}^{n e w} \\in\\left[\\dot{V}_{i, m i n}, \\dot{V}_{i, m a x}\\right], \\forall 1 \\leq i \\leq N, \\\\a_{i} \\in\\left[a_{i, m i n}, a_{i, m a x}\\right], \\forall 1 \\leq i \\leq N.\\end{aligned}$\nwhere $w_1$ and $w_2$ are the weighting parameters. The first term of the objective function is chosen to guarantee the velocity's smoothness. The second term $e(k)$ is derived from the disparity between the actual trajectory and the planned minimum time trajectory, which is used to guarantee that the exploration is proceeding in the correct direction. $\\dot{V}_{origin}$ is the initially planned cornering speed of the vehicle by Learning State Planner and $\\dot{V}_{new}$ denotes the sets of newly generated velocities that require exploring. Velocity sets generation process is shown in Fig. 5. In this figure, $\\alpha_k$ represents the velocity increment, $\\dot{V}_i$ indicates the new set of velocities, $\\dot{V}_e$ is the initial set of velocities, and the solid yellow line represents the boundary of the new velocity. A series of velocity sets will be obtained by adjusting the velocity increment boundary [$A_{min}$ $A_{max}$]."}, {"title": "V. EXPERIMENTAL RESULT", "content": "The algorithm is then experimentally validated on a 1:10 scale RC car. The experimental parameters are shown in Table II. The RC car's host embedded platform is the Jetson Orin NX and uses a Hokuyo UST-10LX radar for positioning. The cornering posture of the RC car using the explored GPR model is shown in Fig. 10. We employ both an MPC controller and a pure pursuit controller, switching between them based on the reference state determined by the minimum time trajectory planner (8). The MPC controller is utilized for drift cornering, whereas the pure pursuit controller is engaged for vehicle control during normal driving conditions."}, {"title": "VI. CONCLUSION", "content": "In this paper, we propose an algorithmic framework AEDGPR, which actively explores cornering drift states and enhances the GPR datasets. We validate the algorithm through both simulations and real vehicle experiments and find that the explored GPR demonstrates superior performance in cornering drift scenarios. In future work, we plan to implement the control system in more complex environments and further optimize the generation of exploration sets."}]}