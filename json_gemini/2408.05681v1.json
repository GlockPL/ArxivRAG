{"title": "SRTFD: Scalable Real-Time Fault Diagnosis through Online Continual Learning", "authors": ["Dandan Zhao", "Karthick Sharma", "Hongpeng Yin", "Yuxin Qi", "Shuhao Zhang"], "abstract": "Fault diagnosis (FD) is essential for maintaining operational safety and minimizing economic losses by detecting system abnormalities. Recently, deep learning (DL)-driven FD methods have gained prominence, offering significant improvements in precision and adaptability through the utilization of extensive datasets and advanced DL models. Modern industrial environments, however, demand FD methods that can handle new fault types, dynamic conditions, large-scale data, and provide real-time responses with minimal prior information. Although online continual learning (OCL) demonstrates potential in addressing these requirements by enabling DL models to continuously learn from streaming data, it faces challenges such as data redundancy, imbalance, and limited labeled data. To overcome these limitations, we propose SRTFD, a scalable real-time fault diagnosis framework that enhances OCL with three critical methods: Retrospect Coreset Selection (RCS), which selects the most relevant data to reduce redundant training and improve efficiency; Global Balance Technique (GBT), which ensures balanced coreset selection and robust model performance; and Confidence and Uncertainty-driven Pseudo-label Learning (CUPL), which updates the model using unlabeled data for continuous adaptation. Extensive experiments on a real-world dataset and two public simulated datasets demonstrate SRTFD's effectiveness and potential for providing advanced, scalable, and precise fault diagnosis in modern industrial systems.", "sections": [{"title": "1 INTRODUCTION", "content": "Faults in engineering systems pose substantial risks to both performance and safety [29]. For instance, faults in steel hot rolling processes can lead to defective steel slabs, resulting in significant scrap losses and compromising worker safety. Similarly, faults in autonomous vehicles can cause navigation errors or system malfunctions, potentially leading to accidents and endangering passengers and pedestrians. Consequently, fault diagnosis (FD) \u2013 the process of detecting and identifying potential faults within these systems - is crucial for maintaining reliability, safety, and economic efficiency [1]. While recent research in computer vision has focused on industrial anomaly detection (IAD) [4, 10, 14, 15, 35], primarily addressing quality faults in end products using image data to identify statistical features and pattern changes, FD targets process faults. FD is essential for immediate fault detection and intervention, focusing on specific functional problems using sensor data to prevent system failures.\nFD techniques have evolved significantly over time. In the 19th century, FD began with basic limit checking and progressed to model-based FD, which involves physically modeling the entire industrial system's working process and incorporating statistical methods such as trend analysis and parameter estimation [16]. The evolution continued with the development of knowledge-based FD, which utilizes signal models and spectral analysis [27]. The advent of artificial intelligence and neural networks marked a new era of data-driven FD [8, 37]. Today, the explosion of data has further propelled the development of deep learning (DL)-driven FD methods. By leveraging large datasets and sophisticated DL models, these methods have significantly enhanced the precision and adaptability of FD, making them crucial for modern industrial environments [9]. Our work builds on this progression, aiming to address the challenges of real-time fault diagnosis in dynamic and large-scale systems with DL-driven FD methods."}, {"title": "2 BACKGROUND AND MOTIVATION", "content": ""}, {"title": "2.1 Traditional Data-driven-based FD", "content": "Traditional data-driven FD involves three steps: data collection, model training, and fault prediction. Let \\(X_{tr} = \\{x^{1}_{tr}, x^{2}_{tr}, ..., x^{n_{tr}}_{tr}\\}\\) and \\(X_{te} = \\{x^{1}_{te}, x^{2}_{te}, ..., x^{n_{te}}_{te}\\}\\) be the training and testing samples, respectively. Corresponding labels are \\(Y_{tr} = \\{y^{1}_{tr}, y^{2}_{tr}, ..., y^{n_{tr}}_{tr}\\}\\) and \\(Y_{te} = \\{y^{1}_{te}, y^{2}_{te}, ..., y^{n_{te}}_{te}\\}\\), with \\(n_{tr}\\) and \\(n_{te}\\) being the number"}, {"title": "2.2 Online Continuous Learning", "content": "OCL [17] may address several limitations of traditional FD by enabling models to learn incrementally from streaming data. In OCL, monitoring data is collected over time as \\(X^t \\in R^{d \\times n} = \\{x^1_t, x^2_t,...,x^n_t\\}\\) and \\(Y^t \\in R^{1 \\times n} = \\{y^1_t, y^2_t, \\ldots, y^n_t\\}\\), where d is the sample dimension, n is the number of samples, and t is the collection time. Thus, the loss function equation (1) becomes:\nmin \\(\\sum_{i=1}^{n} L(f(\\phi(x^i_t); \\theta), y^i_t)\\)\nwhere, \\(x^i_t \\in X^t\\), \\(y^i_t \\in Y^t\\), and \\(\\theta_t\\) are updated continuously as new data arrives. To update the model at time t without losing previous information, \\(\\theta_t\\) is adjusted based on \\(\\theta_{t-1}\\) and the loss function gradient. For models optimized by stochastic gradient descent (SGD) [31], the update rule is:\n\\(\\theta_t \\leftarrow \\theta_{t-1} - \\eta \\cdot \\frac{1}{n} \\sum_{i=1}^n \\omega_i \\nabla L(f(\\phi(x^i_t); \\theta_{t-1}), y^i_t)\\)\nwhere, \\(\\eta\\) is the learning rate and \\(\\omega_i\\) is the weight of data \\((x^i_t, y^i_t)\\). Typically, \\(\\omega_i = 1\\) for all \\(i \\in [n]\\), assuming all samples are equally important. This continuous learning process allows the model to adapt to new fault classes and variable working conditions without retraining from scratch.\nAlthough OCL addresses evolving monitoring data, it has a critical drawback: high model update costs when the data volume at time t is large. Coreset selection [22] mitigates this by selecting a smaller representative subset from the current batch, reducing data volume and computational requirements. This approach lowers training complexity, allowing fault diagnosis systems to efficiently manage large datasets and enhancing the scalability and performance of OCL models."}, {"title": "2.3 Motivation", "content": "Developing a robust FD framework using OCL and coreset selection is promising but faces challenges due to the unique characteristics of industrial monitoring data.\n\u2022 Redundancy: Monitoring data is highly redundant, making OCL methods inefficient for model updates. Coreset selection within each batch overlooks global information, leading to unnecessary updates and extra training costs when consecutive batches are similar.\n\u2022 Data Imbalance: FD data is imbalanced, with more normal operating data than fault data, and varying frequencies of different faults. This imbalance results in an unbalanced coreset, reducing FD system performance and reliability.\n\u2022 Labeled Data Scarcity: Collecting labeled monitoring data is challenging due to the time-consuming and labor-intensive nature of manual labeling. The lack of labeled data makes model updating difficult.\nTo address these challenges, we propose SRTFD, a scalable real-time fault diagnosis method through OCL. The details of this approach will be introduced in the next section."}, {"title": "3 PROBLEM STATEMENT", "content": "Achieving a realistic fault diagnosis framework in complex systems is challenging due to several key issues mentioned in the previous section. These problems are formulated in this section.\nLet \\(D^0 = (X^0, Y^0)\\) represent the data used for model pre-training, and \\(X^u\\) denote the arriving unlabeled data. The pseudo-labels \\(Y^u\\) for \\(X^u\\) can be predicted by well-trained model \\(f_{\\theta_0}(\\cdot)\\). To handle the large-scale data that accumulates over time t, a small subset \\(S_t = (Z_t, V_t)\\) is selected from the pseudo-labeled samples \\(U = (X^u, Y^u)\\). The semi-supervised learning strategy is employed by incorporating a small amount of labeled data \\(D_t = (X_t, Y_t)\\) to update the model along with the pseudo-labeled samples. Thus, the loss function at time t becomes:\nmin \\(\\sum_{i=1}^{n} L(f(\\phi(x_t^i); \\theta_t), y_t^i) + \\sum_{j=1}^{s} L(f(\\phi(z_t^j); \\theta_t), v_t^j)\\)\nwhere \\(z_t^j \\in Z_t\\), \\(v_t^j \\in V_t\\), and s denotes the total number of samples in the subset \\(S_t\\). The model parameter update rule becomes:\n\\(\\theta_t \\leftarrow \\theta_{t-1} - \\eta \\cdot (A + B),\\)\n\\(A == \\frac{1}{n} \\sum_{i=1}^{n} \\omega_i \\nabla L(f(\\phi(x_t^i); \\theta_{t-1}), y_t^i),\\)\n\\(B == \\frac{1}{s} \\sum_{j=1}^{s} \\omega_j \\nabla L(f(\\phi(z_t^j); \\theta_{t-1}), v_t^j),\\)\nwhere, \\(\\omega_i\\) and \\(\\omega_j\\) are the weights of the labeled and pseudo-labeled samples, respectively, and \\(\\eta\\) is the learning rate. The buffer \\(B_t\\) is crucial in OCL to avoid catastrophic forgetting. It contains data from the pseudo-labeled dataset \\(S_t\\) and the labeled dataset \\(D_t\\), formulated as \\(B_t = (S_t \\bigcup D_t)\\). This allows the model to review and learn from past data while updating with new information.\nThe goal of SRTFD is to select an effective coreset from the current batch of data while considering historical data. First, the coreset must effectively represent the current batch of data. Thus, we have:\nmin \\(\\sum_{j=1}^{s} L(f(\\phi(z_t^j); \\theta_t), v_t^j) \\approx \\sum_{k=1}^{n} L(f(\\phi(x_t^k); \\theta_t), y_t^k)\\)"}, {"title": "4 METHODOLOGY", "content": "This section introduces the SRTFD framework, illustrated in Figure 1. The prediction and training processes are synchronized, with most data for model updating coming from previously unlabeled data and only a small portion being labeled. This approach is realistic for modern complex systems. The framework consists of three main components: Retrospect Coreset Selection (RCS), Global Balance Technique (GBT), and Confidence and Uncertainty-driven Pseudo-label Learning (CUPL). Each component will be detailed in the following subsections."}, {"title": "4.1 Retrospect Coreset Selection (RCS)", "content": "To optimize fault diagnosis (FD) tasks, we introduce Retrospect Coreset Selection (RCS). RCS selects a representative coreset by considering all historical data, and addressing memory constraints through efficient implementation. Specifically, we use the buffer in the system to store samples that encapsulate all historical data, enabling effective RCS. By assessing the similarity between incoming data and buffer data, we eliminate redundancy. When new data arrives, the buffer filters out redundant information, ensuring that coreset selection focuses on novel, non-redundant data. This approach also reduces computational load by bypassing updates when new batches closely resemble existing data.\nGiven the large-scale nature of the data, directly computing Euclidean distances between new samples and buffer entries is computationally intensive. To mitigate this, we employ batch-wise metrics and cluster the buffer data. Let \\(B_t = \\{(x_{b_1}, y_{b_1}),..., (x_{b_{b_n}}, y_{b_{b_n}})\\}\\) represent the buffer at time t, where \\(x_{b_i} \\in (X_t \\bigcup X^u)\\) and \\(y_{b_i} \\in (Y_t \\bigcup Y^u)\\), with \\(i = 1, 2, ..., b_n\\), and \\(b_n\\) being the total number of buffer samples at time t. Labels \\(y_{b_i}\\) fall within \\(\\{0, 1, ..., b_{ct}\\}\\), where \\(b_{ct}\\) is the number of classes at time t. We partition buffer data into \\(b_{ct}\\) clusters based on these labels, denoted as \\(\\{X^{b_1}, X^{b_2},..., X^{b_{ct}}\\}\\). By clustering the buffer data, we reduce the computational burden, enabling batch-wise comparison instead of individual distance calculations.\nFor the newly arrived data \\(X^u\\), we employ the MiniBatchKMeans algorithm [33], a highly efficient clustering method designed for large-scale datasets, to partition the data into different clusters. This algorithm accelerates computation and reduces memory usage by processing data in small batches. By clustering \\(X^u\\) into \\(u_c\\) clusters, denoted as \\(\\{X^{u_1}, X^{u_2}, ..., X^{u_{u_c}}\\}\\), where \\(X^{u_i}\\) represents the \\(u_i\\)-th cluster and \\(u_i = 0, 1, ..., u_c\\). The number of clusters \\(u_c\\) must be less than or equal to the number of samples in the arriving batch \\(u_n\\), and there is no clustering performed if \\(u_c\\) equals \\(u_n\\). Then, the similarity between \\(X^u\\) and \\(B_t\\) can be calculated by Kullback-Leibler (KL) divergence [21], which is denoted as:\n\\(d_{b_i,u_i} = KL(X^{u_i} \\| X^{b_i}).\\)\nIf \\(d_{b_i,u_i}\\) is less than a threshold \\(\\tau\\), the cluster \\(X^{u_i}\\) is considered non-redundant. Then, we have:\n\\(S_t = \\{ X^{u_i} \\| d_{b_i,u_i} \\geq \\tau \\}\\,\nThis buffer retrospective process ensures that only the most informative and non-redundant data points are retained in the coreset. Thus, the goal of \\(S_t \\bigcap S_T = \\emptyset\\), for \\(T = 1, 2, . . ., t - 1\\), is achieved."}, {"title": "4.2 Global Balance Technique (GBT)", "content": "As highlighted in the introduction, the imbalance problem significantly impacts the performance of fault diagnosis systems. Current online continual learning (OCL) methods rarely address this issue adequately. They typically attempt to mitigate it by selecting a coreset that appears balanced from the current batch data, prioritizing samples from less-represented classes. However, this often results in a pseudo-balanced coreset that does not reflect a truly balanced distribution. For instance, if a class has many samples in the buffer but few in the current batch, existing OCL methods will select more samples from this class, neglecting genuinely under-represented classes. Furthermore, in cases of extreme imbalance, selecting a balanced coreset alone cannot resolve the problem, as the selected coreset often remains unbalanced. Therefore, we propose GBT, which addresses this issue based on two critical factors affecting fault diagnosis performance: the quality of training data and the frequency of model updates.\nFrom the perspective of training data, feeding a balanced dataset into the model will undoubtedly enhance its performance. However, the FD model is trained on both the current batch of data and the data stored in the buffer. Focusing solely on the current batch data makes it easy to obtain a pseudo-balanced coreset. Thus, it is essential to consider both the buffer samples and the categories, and the corresponding objective function (8) becomes:\nmin\\(\\{\\frac{1}{C}\\sum_{l=1}^{b_{ct}} |p_s^l - \\frac{1}{b_{ct}}| + \\lambda (\\sum_{l=1}^{b_{ct}} \\frac{k}{b_n} |p_b^l - \\frac{k}{b_{ct}}|)\\}\\)\nwhere \\(p_s^l\\) and \\(p_b^l\\) represent the true probabilities of the l-th classes in the current coreset and buffer, respectively. \\(b_n\\) represents the total sample size in the buffer, and \\(b_{ct}\\) denotes the number of classes in the buffer at t time. This approach ensures a genuinely balanced dataset by selecting samples from the least represented classes in both the buffer and the current coreset.\nFrom the perspective of model updates, considering the scenario where certain classes have a significantly low number of samples, with \\(p_s^l << \\frac{1}{b_{ct}}\\) and \\(p_b^l << \\frac{k}{b_{ct}}\\), it becomes evident that selecting a balanced coreset is unfeasible. Therefore, we introduce the following loss function:\n\\(L = -\\sum_{i=1}^{i=n} (1-\\gamma p_i) log(p_i) - \\sum_{j=1}^{j=s} (1-\\gamma p_j) log(p_j)\\)"}, {"title": "4.3 Confidence and Uncertainty-driven Pseudo-label Learning (CUPL)", "content": "The proposed CUPL module enhances the SRTFD training process by utilizing both labeled and unlabeled data. The critical components of this method include generating pseudo-labels and employing a selection strategy to incorporate these labels into the training set. Here, the pseudo-labels \\(v_j\\) are determined directly by the maximum probability, expressed as \\(v_j = [max(p_j)]\\). For the selection strategy, the conventional approach for selecting pseudo-labeled samples is to choose those with high confidence. However, since most newly arriving data are normal data, the model shows high confidence in predicting these normal instances but low confidence in identifying rare faults. Thus, relying solely on high-confidence selections can degrade overall performance in FD tasks.\nInspired by the work of Mamshad et al. [30], we introduce both positive and negative label selection. Specifically, samples are selected as positive pseudo-labels when the model's predicted probability is high, and as negative pseudo-labels when the probability is extremely low, which can be denoted as follows:\n\\(g_j = 1[p_j \\geq \\tau_p] + 1[p_j \\leq \\tau_n],\\)\nwhere \\(g_j\\) is an indicator that determines whether the sample j is selected. The indicator function 1[\u00b7] returns 1 if the condition inside the brackets is true and 0 otherwise. The thresholds \\(\\tau_p\\) and \\(\\tau_n\\) are used to select positive and negative pseudo-labels, respectively.\nAdditionally, it has been demonstrated that predictions with low uncertainty are more likely to result in correct pseudo-labels, as shown by Mamshad's research. Therefore, we incorporate an uncertainty constraint into the positive and negative pseudo-label selection process. The uncertainty of model predictions can be estimated using Monte Carlo dropout (MCdropout) [25]. MCdropout estimates uncertainty by incorporating dropout during the inference phase. The process involves performing multiple stochastic forward passes through the network, each time applying dropout with a certain probability p. For a layer with output h, the output with dropout is \\(h' = hd\\), where \\(d \\sim Bernoulli(p)\\). Repeating this process T times results in a set of predictions \\(\\{\\hat{y}(1), \\hat{y}(2), \\hat{y}(2).....\\hat{y}(T)\\}\\) . The mean prediction is calculated as \\(\\hat{y}_{mean} = \\frac{1}{T} \\sum_{t=1}^T \\hat{y}(t)\\), and the uncertainty is estimated using the variance \\(\\hat{\\sigma}^2 = \\frac{1}{T} \\sum_{t=1}^T(\\hat{y}(t) - \\hat{y}_{mean})^2\\). This approach is simple to implement, requiring no complex modifications to the model architecture, and provides valuable insights into the model's confidence in its predictions, especially with uncertain or complex input data.\nBy utilizing both the confidence and uncertainty of network predictions, a more accurate subset of pseudo-labels can be selected. The selection function becomes:\n\\(g_i = 1 [\\hat{\\sigma}^2 \\leq \\kappa and p_j \\geq \\tau_p] + 1 [\\hat{\\sigma}^2 \\leq \\kappa and p_j \\leq \\tau_n],\\)"}, {"title": "5 EXPERIMENTS", "content": ""}, {"title": "5.1 Experimental Setup", "content": "Experiments were conducted on an Intel(R) Xeon(R) w7-3455 system with an NVIDIA RTX 6000 Ada Generation GPU (48GB GDDR6) and 512GB of RAM. The software used includes Python 3.12.4 and PyTorch 2.3.0 with CUDA 12.1.\nDatasets: Table 2 summarizes the datasets used in our experiments. (1) Hot Roll of Steel (HRS): The hot rolling process in steel manufacturing requires monitoring conveyor rollers to prevent billet deformation, surface defects, downtime, and increased costs. This dataset, from an actual hot rolling steel industry, includes data from 294 rollers recorded via motor current signals and converted to digital data. It encompasses five fault categories: roller swing, roller stuck, overcurrent, squeaking, and base deformation. Due to the random occurrence of these faults, the dataset is highly unbalanced and contains limited samples. (2) Tennessee-Eastman process (TEP): It is widely used to validate fault diagnosis methods. It includes 21 distinct fault categories with training and testing sets. In this study, 4320 normal samples and 800 samples for each fault are used. (3) CAR Learning to Act (CARLA): Yan et al. [39] collected this dataset using Dosovitskiy's [12] autonomous driving simulator. It features single-sensor and multi-sensor faults across three maps: rainy, cloudy, and sunny conditions. There are 9 categories of single-sensor faults and 4 categories of multi-sensor faults. Each map had a 30-minute simulation with sensor data sampled at 60Hz.\nTesting Scenarios: We conduct experiments on three datasets under two scenarios: class-incremental and variable working conditions. The proposed method supports online continuous learning, eliminating the need to divide data into training and testing sets. We first initialize the network using 1000 normal samples. As monitoring data arrives, labeled samples and reliable samples with predicted labels from previous tasks are used for model training while predicting the new data. For class-incremental scenarios, normal samples are randomly divided equally into each task, and each fault sample appears in each task in turn. For varying working conditions, only the CARLA dataset includes three conditions, while the HRS and TEP datasets each have one, as shown in Table 2. We gradually introduce noise into the HRS and TEP samples to simulate different working conditions. In the CARLA dataset, monitoring data evolve randomly from condition 1 to condition 2, and then to condition 3.\nCompeting Methods: We selected five methods, including state-of-the-art FD and four advanced OCL approaches, as benchmark algorithms for performance comparison: 1) Baseline: A basic model trained using experience replay (ER) [7], achieving online continuous learning by replaying examples from previous tasks. 2) Adversarial Shapley Value Experience Replay (ASER) [34]: Maintains learning stability and optimizes new class boundaries in the online class-incremental setting. 3) Camel [22]: An advanced OCL method that accelerates model training and improves data efficiency through coreset selection. 4) Averaged Gradient Episodic Memory (AGEM) [6]: Evaluates OCL efficiency in terms of sample complexity, computational cost, and memory usage. 5) MPOS-RVFL [18]: An advanced"}, {"title": "5.2 Performance Comparison", "content": "Given the imbalanced nature of the experimental datasets, accuracy is not reliable. Therefore, we used metrics specifically designed for imbalanced datasets: Recall, Precision, G-mean, and F1 score. Recall measures the proportion of actual positives correctly identified, while Precision measures the proportion of predicted positives that are correct. G-mean balances sensitivity and specificity, and the F1 score is the harmonic mean of Precision and Recall. We also compared model training time. Our results are averaged across all tasks after the final update, denoted as Avg-End-Rel for Recall, Avg-End-Pre for Precision, Avg-End-Gmean for G-mean, and Avg-End-F1 for F1 score.\nClass-incremental: The comparison results for class-incremental methods are shown in the left part of Table 4. Our method requires the least training time on all datasets and outperforms other DL-based methods. Although the ML-based method MPOS-RVFL requires less training time, its performance is significantly inferior to other DL methods. The ER method is competitive, outperforming our method by 2.3% in the four metrics on the CARLA-S dataset. However, ER's training time is 4.56 times longer, at 222.44 seconds compared to our 48.40 seconds. These results highlight the effectiveness of SRTFD in balancing high performance with reasonable training times across various datasets and conditions.\nVariable working conditions: The right part of Table 4 shows the performance comparison under variable working conditions across three datasets. SRTFD consistently outperforms other approaches, achieving the highest scores in most performance metrics. While the ER method outperforms our method on the CARLS-S dataset, it requires much more training time (ER: 456.87 seconds vs. SRTFD: 95.99 seconds). The CAMEL method maintains the second shortest training time across all datasets, leading on the TEP dataset with 105.18 seconds, 20.26 seconds shorter than SRTFD (125.44 seconds). However, CAMEL's overall performance is 9.7% lower than SRTFD in other metrics. These results highlight the effectiveness of SRTFD in balancing high performance with reasonable training times across various datasets and conditions."}, {"title": "5.3 Ablation Study", "content": "To evaluate the contribution of each component in SRTFD, we separately removed the RSC, GBT, and CUFL components and conducted experiments on all datasets. We compared the performance before and after removing each component under class-incremental and variable working conditions. From Table 4, the following three conclusions can be drawn."}, {"title": "5.4 Analysis and Discussion", "content": ""}, {"title": "5.4.1 Effects of coreset ratio and cluster number uc", "content": "The impact of these two parameters is illustrated in Figure 3 and Figure 5 in the appendix. Panels (a-d) in Figure 5 show the performance across all datasets in the class-incremental scenario for coreset ratios of [0.5, 0.6, 0.7, 0.8, 0.9]. From this figure, it can be observed that as the coreset ratio increases, the number of samples in the coreset grows, leading to longer training times for the model. Additionally, when the coreset ratio is 0.6, the performance of the HRS, CARLS-S, and CARLS-M models is relatively better, and the training time is shorter. Additionally, Figures 5 (e-h) demonstrate the model performance with different numbers of clusters, \\(u_c\\), set to [3, 6, 9, 12, 15]. From the figures, it can be observed that although the training performance of the models is relatively stable across different \\(u_c\\) values, the choice of \\(u_c\\) is related to the number of categories in the dataset. For instance, the HRS dataset has 5 categories, while the TEP dataset has 22 categories. Therefore, on the HRS dataset, a \\(u_c\\) value of 3 achieves a trade-off in performance across the four metrics and training time, whereas on the TEP dataset, a \\(u_c\\) value of 12 achieves a balance."}, {"title": "5.4.2 Effects of parameters for pseudo-label samples selection", "content": "For the selection of pseudo-label samples, there are three thresholds, positive label threshold \\(\\tau_p\\), negative label threshold \\(\\tau_n\\), and uncertainty threshold of model prediction \\(\\kappa\\). Figure 4 (a, b, c) and Figure 6 in the appendix demonstrate the performance of these three thresholds on different datasets. Regarding the positive label threshold, as shown in Figures 6 (a-d), higher values lead to better model performance due to using pseudo-labels with higher confidence. For the negative label threshold, as shown in Figure 6 (e-h), a value of 0.45 results in the best performance across all datasets. When the threshold exceeds 0.45, the model performance tends to decline, as illustrated in Figure 6 (f) for the TEP dataset. The impact of the uncertainty threshold on model performance is shown in Figures 6 (i-1). When the value is set to 2, the model performs better across all datasets."}, {"title": "5.4.3 Effects of pseudo-labeled sample weights \u03b1", "content": "Figure 4 (d) and Figure 7 in the appendix show the performance of different pseudo-labeled sample weights \u03b1 on all datasets within class-incremental setting. From Figure 7, it can be observed that changes in the value of alpha do not significantly impact the model training time. However, there are minor effects on the model's Recall, Precision, F1, and Gmean metrics. The optimal performance is achieved with an alpha value of 0.7 on the HRS, TEP, and CARLS-M datasets, while an alpha value of 0.6 performs best on the CARLS-S dataset."}, {"title": "6 RELATED WORK", "content": "Fault Diagnosis. Current state-of-the-art fault diagnosis (FD) techniques, summarized in Table 1, fail to meet real-world demands. Modern FD methods must adapt to new fault classes and conditions, handle scalable data, provide real-time responses, and function with minimal prior information, such as limited labeled samples. Despite advances, existing FD methods face significant challenges. For instance, OSELM [19], D-CART [11], and TCNN [38] struggle with data efficiency and scalability. OSSBLS [28] and ODDFD [23] manage limited labeled data but fail to address data imbalance effectively. AMPNet [15] handles large-scale data but lacks adaptability to new fault types and changing environments. Additionally, 1D-CNN [13] faces significant challenges with scalability. OLFA [39] manages limited labeled data but does not effectively address real-time response and high accuracy. Real-time response capabilities are crucial, yet only TCNN [38] shows low training costs conducive to quick responses, unlike AMPNet [15] and OLFA [39]. Effective diagnosis with minimal labeled samples remains a challenge for"}, {"title": "7 CONCLUSION", "content": "This paper addresses high training costs, limited labeled samples, and imbalance issues in scalable real-time fault diagnosis using online continual learning with coreset selection. The proposed SRTFD framework comprises three key components: RCS, GBT, and CUPL. These innovations enhance fault diagnosis by improving model performance and efficiency in industrial settings. Extensive validation on real-world and simulated datasets shows significant improvements in four metrics while reducing training time. Our approach tackles data redundancy and imbalance, providing cost-efficient and robust solutions for industrial fault diagnosis. Future work will optimize the SRTFD framework and explore its applicability to other industrial processes and environments."}, {"title": "A REPRODUCIBILITY", "content": ""}, {"title": "B MORE EXPERIMENTAL RESULTS", "content": "The detailed results of the parameter sensitivity analysis on all datasets are shown in Figures 5, 6, and 7."}, {"title": "C LIMITATIONS", "content": "The limitations of the proposed SRTFD mainly include the following three points:\n1. Memory Constraints: Retrospect Coreset Selection (RCS) necessitates the storage of historical data, which can lead to substantial memory usage. Efficiently managing this data without compromising performance remains a significant challenge, particularly in long-term deployments.\n2. Dependency on Consistent Data Streams: The effectiveness of Stream-based Real-Time Fault Detection (SRTFD) is highly dependent on a continuous and consistent stream of data for ongoing learning and adaptation. Any interruptions or inconsistencies in the data flow can adversely affect the model's performance and its ability to accurately diagnose faults.\n3. Scalability to Diverse Industrial Applications: Although SRTFD is designed to be scalable, adapting the framework to different industrial applications-each with varying types of equipment, fault conditions, and operational environments-may require significant customization. This need for extensive adaptation can limit the"}, {"title": "D PSEUDO-CODE", "content": "The pseudocode of the proposed SRTFD is shown in Algorithm 1."}]}