{"title": "Optimal Quantum Circuit Design via Unitary Neural Networks", "authors": ["M. Zomorodi", "H. Amini", "M. Abbaszadeh", "J. Sohrabi", "V. Salari", "P. Plawiak"], "abstract": "The process of translating a quantum algorithm into a form suitable for implementation on a quantum computing platform is crucial but yet challenging. This entails specifying quantum operations with precision, a typically intricate task. In this paper, we present an alternative approach: an automated method for synthesizing the functionality of a quantum algorithm into a quantum circuit model representation. Our methodology involves training a neural network model using diverse input-output mappings of the quantum algorithm. We demonstrate that this trained model can effectively generate a quantum circuit model equivalent to the original algorithm. Remarkably, our observations indicate that the trained model achieves near-perfect mapping of unseen inputs to their respective outputs.", "sections": [{"title": "I. INTRODUCTION", "content": "Quantum computing is a type of computation that uses quantum mechanical phenomena to store and process data differently from classical computers [1, 2]. In the field of quantum computing, numerous researchers endeavor to in- vent new quantum algorithms that can significantly outper- form their classical counterparts. For the execution and im- plementation of these algorithms, one common model is to represent them in the form of a quantum circuit [3, 5] con- sisting of basic quantum gates so that they can be executed on quantum computers [6-9]. By decomposing a quantum algorithm into a sequence of quantum operations, one estab- lishes a quantum computation model for the given task. This can be achieved using a quantum circuit or any other quantum computing model of interest. However, finding new quantum algorithms is very hard [5], and looking for a set of quantum gates that can implement the desired algorithm can be chal- lenging. Another more significant problem is the lack of such algorithms for many problems. For this reason, we seek a way to find the quantum circuit that implements the desired func- tionality of a quantum problem and performs the process of converting that specification to the quantum circuit automati- cally.\nIn addition, machine learning is well-known for performing tasks such as predicting or classifying information. Neural networks and deep learning are among the popular machine learning algorithms in recent years [10]. Recently, many re- search studies have aimed to combine quantum computing and machine learning. Quantum machine learning [11], optimiza- tion [12], and quantum-inspired machine learning algorithms [13, 14] are among the most investigated research areas.\nIn this paper, we propose an approach for building a given quantum circuit using neural networks. Many similarities ex- ist between the steps involved in making computations in a quantum system and the way fully connected neural networks perform the training to find the best parameters or weights. Therefore, after training the neural network, it can be mapped to the desired quantum circuit.\nQuantum evolution [15] is defined as applying a unitary op- eration U to the current quantum state of the system. A uni- tary operation, which is the operation of the evolution of a quantum state, is defined by a unitary matrix. From linear al- gebra, an invertible complex square matrix, U, is unitary if $UU^\\dagger = U^\\dagger U = I$, where $U^\\dagger$ is the transpose conjugate of U, and I is the identity matrix. Therefore, we require that our neural network have unitary weights to map to a quantum circuit easily. This paper aims to use neural networks to de- compose quantum computation into basic quantum gates and to optimize it. In quantum computation, this task is some- times known as quantum logic synthesis. We propose a way to construct and keep unitary weight matrices required for the quantum computations and algorithms, and these weight ma- trices are used in training the neural network model."}, {"title": "II. QUANTUM CIRCUIT SYNTHESIS WITH NEURAL NETWORKS", "content": "To produce a quantum circuit as the output model of a quan- tum synthesis algorithm, we can consider two representations to specify and display the quantum circuit.\nIn the first representation- using basic quantum gates- a se- ries of basic quantum gates are considered, and according to their characteristics, they are used to produce the desired cir- cuit. Based on the specific approach, the space of different configurations is explored and searched. Works like [16] use this method for synthesising the quantum circuit. In another representation, the concept of a unitary matrix is applied. Ac- cording to the definition [17, 18], a quantum circuit can be represented with a product of unitary matrices. In this way, if we multiply the state of the input qubits by that matrix, the state of the output qubits will be obtained. If the number of input qubits of the circuit is N, the unitary matrix of that cir- cuit will be a $2^N \\times 2^N$ matrix, and the state vector has the dimension $2^N \\times 1$. This method is suitable for the process we are considering. We will seek to find the desired matrix based on unitarity, and if we can find the matrix correctly, this ma-"}, {"title": "III. NEURAL NETWORKS FOR BUILDING QUANTUM CIRCUITS", "content": "Due to the similarity in the architecture of a quantum circuit and a neural network, they can be trained to build a model for a quantum computing ansatz. The neural network model motivates our method for building the quantum circuit ansatz to find the appropriate weight parameters. Until now, in the works concerning machine learning algorithms for quantum circuits, neural networks have not been used to build the entire time evolution of the quantum computation using input-output mappings of the quantum algorithms.\nIn training neural networks with unitarity constraint, two approaches have been mainly used to solve this challenge, mostly in unitary recurrent neural networks, where the main aim is to solve the vanishing and exploding gradients.\nThe first method considers an initial weight matrix com- posed of several parameterised unitary matrices [22]. Then, the parameters in the unitary matrices are learned through backpropagation without the need for expensive computations after weight updates. The second method is to carry out the entire training process without unitarity constraint and, at the"}, {"title": "TRAINING NEURAL NETWORKS FOR QUANTUM CIRCUIT DESIGN", "content": "Putting these two parts together, this work aims to use uni- tary weight neural networks to train the input-output mapping of quantum computation.\nIt is proved that if U is unitary, then the columns and rows of U form an orthonormal basis of $C^m$.\nIn this work, the matrix $W$ is a unitary matrix, but with weight updates using the above formula, $W'$ is no longer a unitary matrix. We apply the Gram-Schmidt process at each iteration to convert $W'$ into a unitary matrix.\nAfter the network training, we use the transpile function to convert the final unitary matrices into quantum circuits. The transpile function in quantum computing is used to convert a given quantum circuit into an equivalent circuit that can be executed on a specific hardware or simulator or to optimize the quantum circuit. It considers the constraints and limitations of the target device and optimizes the circuit accordingly.\nWhen converting unitary matrices into quantum circuits, the transpile function helps decompose the unitary matrix into a sequence of elementary gates supported by the target device. This process is known as gate synthesis or gate decomposi- tion.\nThe transpile function analyses the gates required to imple- ment the unitary matrix and checks if they are available on the target device. If not, it tries to find an alternative set of gates that can be used to approximate the desired transformation as closely as possible.\nAdditionally, transpilation also considers other factors, such as gate connectivity constraints, gate error rates, and gate duration on the target device. It rearranges and optimizes gates to minimize errors and improve performance.\nTranspiling unitary matrices into quantum circuits using the transpile function ensures that the resulting circuit is compat- ible with a specific hardware or simulator, considering its lim-itations and optimizing for better execution.\nFor the input vector $x$; here a quantum state $|x\\rangle$, and an initial weight matrix $U \\in U_n(C)$, the set of n-by-n unitary matrices, we perform the training process in neural networks. We initialize the unitary weight matrix $U_{n \\times n}$. We use the same initialization as [26] where all entries of the unitary ma-trix are zero except for $2 \\times 2$ submatrices $u_i$ along the diagonal as follows:\n$U =\n\\begin{bmatrix}\nU_1 &\\\\ & \\\\ & \\dots & \\\\ & & & U\\_{\\[n/2\\]}\n\\end{bmatrix}$\nwhere each block matrix $u_i$ is defined as follows:\n$\\begin{bmatrix}\nu_i & 0\\\\ 0 & \nu_i^*\\end{bmatrix}$"}, {"title": "A. Training Process", "content": "For the input vector x; here a quantum state x), and an initial weight matrix $U \\in U_n(C)$, the set of n-by-n unitary matrices, we perform the training process in neural networks. We initialize the unitary weight matrix $U_{n \\times n}$. We use the same initialization as [26] where all entries of the unitary ma-trix are zero except for 2 \u00d7 2 submatrices uz along the diagonal as follows:\n$U1\nU =\nU\\[n/2\\]\nwhere each block matrix u; is defined as follows:\n0] = 'm"}, {"title": "IV. RESULTS AND DISCUSSION", "content": "This work considers a conventional feed-forward neural network (FNN) consisting of one fully connected layer. Hav- ing a dataset D of input-output mappings of a given quantum computation, we train the network using the unitary weight matrix U. The network learns the input-output mapping of the quantum computation to find the best quantum circuit for the QC."}, {"title": "V. DATA AVAILABILITY", "content": "To train the neural network, it is required to feed it with a sufficient number of samples. As a dataset, our model needs the input-output mapping of quantum computation which means for each input quantum state what output state should be produced by the underlying quantum computation model which in this work is a quantum circuit. All data are available from the below link: https://github.com/ hossein-aminii/Quantum-Circuit-NN"}, {"title": "VI. APPENDIX", "content": "Research at the intersection of neural networks and quan- tum computing spans several areas. It is categorised into quantum-inspired algorithms for neural networks [29], neu- ral network-inspired quantum computing [30], and the design and implementation of quantum algorithms for solving neu- ral network tasks on quantum computers [31]. Furthermore, several studies focused on simulating quantum computations using neural networks on classical computers [32].\nIn some investigations, quantum computation and quantum circuit models collaborate with classical neural networks to achieve specific objectives. For example, in [33] and [34], quantum circuits for natural language processing are inte- grated into classical neural network models, employing tech- niques such as long short-term memory (LSTM) for transla- tion tasks.\nIn the field of quantum circuit synthesis and optimization, some researchers concentrate on decomposing the unitary op- erations of quantum algorithms into a universal set of low- dimensional and physically realizable quantum gates [35]. In several other researches, the decomposition of the quantum functionality into a set of basic quantum gates has been ex- plored [36, 37]. Some works consider a high-level synthesis"}, {"title": "E. Algorithms", "content": "The algorithms of the training process in the normal state and the state where we have the limitation of the matrix being unitary are in the form of algorithms 1 and 2 as follows. As can be seen, Algorithms 1 and 2 are similar and differ only in one process. In Algorithm 2, after updating the weights, we map the weights matrix to the space of unitary matrices. The process of mapping to the unitary space, if done after each iteration, may slow down the process. Hence, mapping can be done only once after several iterations. However, it should be noted that mapping must be done in the last iteration of the training. Algorithm 3 shows this issue."}, {"title": "A. Unitary weight matrix", "content": "We assume weight matrices of the neural network as $2^n \\times2^n$ matrices over the field C composed of complex numbers. The set of all of these matrices is denoted by $M_n(C)$ and abbrevi-"}, {"title": "B. Training neural network for quantum circuit design", "content": "Putting these two parts together, this work aims to use uni- tary weight neural networks to train the input-output mapping of quantum computation.\nIt is proved that if U is unitary, then the columns and rows of U form an orthonormal basis of Cn."}, {"title": "C. Gram-schmidt process for unitary Weight matrix", "content": "Apply the Gram-Schmidt process to orthogonalise vectors in the layer's weight matrices. Normalise the column vectors to obtain the final unitary weight matrix Wnn:\nGiven Wnn [W1, W2,..., Wn],\napply Gram-Schmidt to obtain orthonormal set\n[U1, U2, ..., Un]\nNormalize each column vector: uk\nUk\n||uk||"}, {"title": "D. Training Process", "content": "Assuming an initial unitary weight matrix Unxn, we cal- culate the outputs (O) and then the gradients (G) of the loss function L with respect to the unitary weight matrix U:"}]}